var pt=Object.defineProperty;var mt=(e,t,n)=>t in e?pt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var de=(e,t,n)=>(mt(e,typeof t!="symbol"?t+"":t,n),n);const p=function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&r(a)}).observe(document,{childList:!0,subtree:!0});function n(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerpolicy&&(o.referrerPolicy=i.referrerpolicy),i.crossorigin==="use-credentials"?o.credentials="include":i.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function r(i){if(i.ep)return;i.ep=!0;const o=n(i);fetch(i.href,o)}};p();function noop$1(){}const identity=e=>e;function assign(e,t){for(const n in t)e[n]=t[n];return e}function is_promise(e){return e&&typeof e=="object"&&typeof e.then=="function"}function run(e){return e()}function blank_object(){return Object.create(null)}function run_all(e){e.forEach(run)}function is_function(e){return typeof e=="function"}function safe_not_equal(e,t){return e!=e?t==t:e!==t||e&&typeof e=="object"||typeof e=="function"}let src_url_equal_anchor;function src_url_equal(e,t){return src_url_equal_anchor||(src_url_equal_anchor=document.createElement("a")),src_url_equal_anchor.href=t,e===src_url_equal_anchor.href}function is_empty(e){return Object.keys(e).length===0}function subscribe(e,...t){if(e==null)return noop$1;const n=e.subscribe(...t);return n.unsubscribe?()=>n.unsubscribe():n}function component_subscribe(e,t,n){e.$$.on_destroy.push(subscribe(t,n))}function create_slot(e,t,n,r){if(e){const i=get_slot_context(e,t,n,r);return e[0](i)}}function get_slot_context(e,t,n,r){return e[1]&&r?assign(n.ctx.slice(),e[1](r(t))):n.ctx}function get_slot_changes(e,t,n,r){if(e[2]&&r){const i=e[2](r(n));if(t.dirty===void 0)return i;if(typeof i=="object"){const o=[],a=Math.max(t.dirty.length,i.length);for(let s=0;s<a;s+=1)o[s]=t.dirty[s]|i[s];return o}return t.dirty|i}return t.dirty}function update_slot_base(e,t,n,r,i,o){if(i){const a=get_slot_context(t,n,r,o);e.p(a,i)}}function get_all_dirty_from_scope(e){if(e.ctx.length>32){const t=[],n=e.ctx.length/32;for(let r=0;r<n;r++)t[r]=-1;return t}return-1}function exclude_internal_props(e){const t={};for(const n in e)n[0]!=="$"&&(t[n]=e[n]);return t}function compute_rest_props(e,t){const n={};t=new Set(t);for(const r in e)!t.has(r)&&r[0]!=="$"&&(n[r]=e[r]);return n}function compute_slots(e){const t={};for(const n in e)t[n]=!0;return t}function null_to_empty(e){return e??""}function set_store_value(e,t,n){return e.set(n),t}const is_client=typeof window<"u";let now=is_client?()=>window.performance.now():()=>Date.now(),raf=is_client?e=>requestAnimationFrame(e):noop$1;const tasks=new Set;function run_tasks(e){tasks.forEach(t=>{t.c(e)||(tasks.delete(t),t.f())}),tasks.size!==0&&raf(run_tasks)}function loop(e){let t;return tasks.size===0&&raf(run_tasks),{promise:new Promise(n=>{tasks.add(t={c:e,f:n})}),abort(){tasks.delete(t)}}}function append(e,t){e.appendChild(t)}function get_root_for_style(e){if(!e)return document;const t=e.getRootNode?e.getRootNode():e.ownerDocument;return t&&t.host?t:e.ownerDocument}function append_empty_stylesheet(e){const t=element("style");return append_stylesheet(get_root_for_style(e),t),t.sheet}function append_stylesheet(e,t){append(e.head||e,t)}function insert(e,t,n){e.insertBefore(t,n||null)}function detach(e){e.parentNode.removeChild(e)}function destroy_each(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)}function element(e){return document.createElement(e)}function svg_element(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}function text(e){return document.createTextNode(e)}function space(){return text(" ")}function empty(){return text("")}function listen(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function prevent_default(e){return function(t){return t.preventDefault(),e.call(this,t)}}function attr(e,t,n){n==null?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function set_attributes(e,t){const n=Object.getOwnPropertyDescriptors(e.__proto__);for(const r in t)t[r]==null?e.removeAttribute(r):r==="style"?e.style.cssText=t[r]:r==="__value"?e.value=e[r]=t[r]:n[r]&&n[r].set?e[r]=t[r]:attr(e,r,t[r])}function set_custom_element_data(e,t,n){t in e?e[t]=typeof e[t]=="boolean"&&n===""?!0:n:attr(e,t,n)}function children(e){return Array.from(e.childNodes)}function set_data(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function set_input_value(e,t){e.value=t??""}function set_style(e,t,n,r){n===null?e.style.removeProperty(t):e.style.setProperty(t,n,r?"important":"")}let crossorigin;function is_crossorigin(){if(crossorigin===void 0){crossorigin=!1;try{typeof window<"u"&&window.parent&&window.parent.document}catch{crossorigin=!0}}return crossorigin}function add_resize_listener(e,t){getComputedStyle(e).position==="static"&&(e.style.position="relative");const r=element("iframe");r.setAttribute("style","display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"),r.setAttribute("aria-hidden","true"),r.tabIndex=-1;const i=is_crossorigin();let o;return i?(r.src="data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>",o=listen(window,"message",a=>{a.source===r.contentWindow&&t()})):(r.src="about:blank",r.onload=()=>{o=listen(r.contentWindow,"resize",t)}),append(e,r),()=>{(i||o&&r.contentWindow)&&o(),detach(r)}}function toggle_class(e,t,n){e.classList[n?"add":"remove"](t)}function custom_event(e,t,{bubbles:n=!1,cancelable:r=!1}={}){const i=document.createEvent("CustomEvent");return i.initCustomEvent(e,n,r,t),i}class HtmlTag{constructor(t=!1){this.is_svg=!1,this.is_svg=t,this.e=this.n=null}c(t){this.h(t)}m(t,n,r=null){this.e||(this.is_svg?this.e=svg_element(n.nodeName):this.e=element(n.nodeName),this.t=n,this.c(t)),this.i(r)}h(t){this.e.innerHTML=t,this.n=Array.from(this.e.childNodes)}i(t){for(let n=0;n<this.n.length;n+=1)insert(this.t,this.n[n],t)}p(t){this.d(),this.h(t),this.i(this.a)}d(){this.n.forEach(detach)}}const managed_styles=new Map;let active=0;function hash(e){let t=5381,n=e.length;for(;n--;)t=(t<<5)-t^e.charCodeAt(n);return t>>>0}function create_style_information(e,t){const n={stylesheet:append_empty_stylesheet(t),rules:{}};return managed_styles.set(e,n),n}function create_rule(e,t,n,r,i,o,a,s=0){const c=16.666/r;let l=`{
`;for(let A=0;A<=1;A+=c){const m=t+(n-t)*o(A);l+=A*100+`%{${a(m,1-m)}}
`}const u=l+`100% {${a(n,1-n)}}
}`,f=`__svelte_${hash(u)}_${s}`,d=get_root_for_style(e),{stylesheet:g,rules:_}=managed_styles.get(d)||create_style_information(d,e);_[f]||(_[f]=!0,g.insertRule(`@keyframes ${f} ${u}`,g.cssRules.length));const h=e.style.animation||"";return e.style.animation=`${h?`${h}, `:""}${f} ${r}ms linear ${i}ms 1 both`,active+=1,f}function delete_rule(e,t){const n=(e.style.animation||"").split(", "),r=n.filter(t?o=>o.indexOf(t)<0:o=>o.indexOf("__svelte")===-1),i=n.length-r.length;i&&(e.style.animation=r.join(", "),active-=i,active||clear_rules())}function clear_rules(){raf(()=>{active||(managed_styles.forEach(e=>{const{stylesheet:t}=e;let n=t.cssRules.length;for(;n--;)t.deleteRule(n);e.rules={}}),managed_styles.clear())})}let current_component;function set_current_component(e){current_component=e}function get_current_component(){if(!current_component)throw new Error("Function called outside component initialization");return current_component}function beforeUpdate(e){get_current_component().$$.before_update.push(e)}function onMount(e){get_current_component().$$.on_mount.push(e)}function afterUpdate(e){get_current_component().$$.after_update.push(e)}function onDestroy(e){get_current_component().$$.on_destroy.push(e)}function createEventDispatcher(){const e=get_current_component();return(t,n,{cancelable:r=!1}={})=>{const i=e.$$.callbacks[t];if(i){const o=custom_event(t,n,{cancelable:r});return i.slice().forEach(a=>{a.call(e,o)}),!o.defaultPrevented}return!0}}function setContext(e,t){return get_current_component().$$.context.set(e,t),t}function getContext(e){return get_current_component().$$.context.get(e)}function getAllContexts(){return get_current_component().$$.context}function bubble(e,t){const n=e.$$.callbacks[t.type];n&&n.slice().forEach(r=>r.call(this,t))}const dirty_components=[],binding_callbacks=[],render_callbacks=[],flush_callbacks=[],resolved_promise=Promise.resolve();let update_scheduled=!1;function schedule_update(){update_scheduled||(update_scheduled=!0,resolved_promise.then(flush))}function tick(){return schedule_update(),resolved_promise}function add_render_callback(e){render_callbacks.push(e)}function add_flush_callback(e){flush_callbacks.push(e)}const seen_callbacks=new Set;let flushidx=0;function flush(){const e=current_component;do{for(;flushidx<dirty_components.length;){const t=dirty_components[flushidx];flushidx++,set_current_component(t),update(t.$$)}for(set_current_component(null),dirty_components.length=0,flushidx=0;binding_callbacks.length;)binding_callbacks.pop()();for(let t=0;t<render_callbacks.length;t+=1){const n=render_callbacks[t];seen_callbacks.has(n)||(seen_callbacks.add(n),n())}render_callbacks.length=0}while(dirty_components.length);for(;flush_callbacks.length;)flush_callbacks.pop()();update_scheduled=!1,seen_callbacks.clear(),set_current_component(e)}function update(e){if(e.fragment!==null){e.update(),run_all(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(add_render_callback)}}let promise;function wait(){return promise||(promise=Promise.resolve(),promise.then(()=>{promise=null})),promise}function dispatch(e,t,n){e.dispatchEvent(custom_event(`${t?"intro":"outro"}${n}`))}const outroing=new Set;let outros;function group_outros(){outros={r:0,c:[],p:outros}}function check_outros(){outros.r||run_all(outros.c),outros=outros.p}function transition_in(e,t){e&&e.i&&(outroing.delete(e),e.i(t))}function transition_out(e,t,n,r){if(e&&e.o){if(outroing.has(e))return;outroing.add(e),outros.c.push(()=>{outroing.delete(e),r&&(n&&e.d(1),r())}),e.o(t)}else r&&r()}const null_transition={duration:0};function create_in_transition(e,t,n){let r=t(e,n),i=!1,o,a,s=0;function c(){o&&delete_rule(e,o)}function l(){const{delay:f=0,duration:d=300,easing:g=identity,tick:_=noop$1,css:h}=r||null_transition;h&&(o=create_rule(e,0,1,d,f,g,h,s++)),_(0,1);const A=now()+f,m=A+d;a&&a.abort(),i=!0,add_render_callback(()=>dispatch(e,!0,"start")),a=loop(y=>{if(i){if(y>=m)return _(1,0),dispatch(e,!0,"end"),c(),i=!1;if(y>=A){const b=g((y-A)/d);_(b,1-b)}}return i})}let u=!1;return{start(){u||(u=!0,delete_rule(e),is_function(r)?(r=r(),wait().then(l)):l())},invalidate(){u=!1},end(){i&&(c(),i=!1)}}}function create_out_transition(e,t,n){let r=t(e,n),i=!0,o;const a=outros;a.r+=1;function s(){const{delay:c=0,duration:l=300,easing:u=identity,tick:f=noop$1,css:d}=r||null_transition;d&&(o=create_rule(e,1,0,l,c,u,d));const g=now()+c,_=g+l;add_render_callback(()=>dispatch(e,!1,"start")),loop(h=>{if(i){if(h>=_)return f(0,1),dispatch(e,!1,"end"),--a.r||run_all(a.c),!1;if(h>=g){const A=u((h-g)/l);f(1-A,A)}}return i})}return is_function(r)?wait().then(()=>{r=r(),s()}):s(),{end(c){c&&r.tick&&r.tick(1,0),i&&(o&&delete_rule(e,o),i=!1)}}}function create_bidirectional_transition(e,t,n,r){let i=t(e,n),o=r?0:1,a=null,s=null,c=null;function l(){c&&delete_rule(e,c)}function u(d,g){const _=d.b-o;return g*=Math.abs(_),{a:o,b:d.b,d:_,duration:g,start:d.start,end:d.start+g,group:d.group}}function f(d){const{delay:g=0,duration:_=300,easing:h=identity,tick:A=noop$1,css:m}=i||null_transition,y={start:now()+g,b:d};d||(y.group=outros,outros.r+=1),a||s?s=y:(m&&(l(),c=create_rule(e,o,d,_,g,h,m)),d&&A(0,1),a=u(y,_),add_render_callback(()=>dispatch(e,d,"start")),loop(b=>{if(s&&b>s.start&&(a=u(s,_),s=null,dispatch(e,a.b,"start"),m&&(l(),c=create_rule(e,o,a.b,a.duration,0,h,i.css))),a){if(b>=a.end)A(o=a.b,1-o),dispatch(e,a.b,"end"),s||(a.b?l():--a.group.r||run_all(a.group.c)),a=null;else if(b>=a.start){const B=b-a.start;o=a.a+a.d*h(B/a.duration),A(o,1-o)}}return!!(a||s)}))}return{run(d){is_function(i)?wait().then(()=>{i=i(),f(d)}):f(d)},end(){l(),a=s=null}}}function handle_promise(e,t){const n=t.token={};function r(i,o,a,s){if(t.token!==n)return;t.resolved=s;let c=t.ctx;a!==void 0&&(c=c.slice(),c[a]=s);const l=i&&(t.current=i)(c);let u=!1;t.block&&(t.blocks?t.blocks.forEach((f,d)=>{d!==o&&f&&(group_outros(),transition_out(f,1,1,()=>{t.blocks[d]===f&&(t.blocks[d]=null)}),check_outros())}):t.block.d(1),l.c(),transition_in(l,1),l.m(t.mount(),t.anchor),u=!0),t.block=l,t.blocks&&(t.blocks[o]=l),u&&flush()}if(is_promise(e)){const i=get_current_component();if(e.then(o=>{set_current_component(i),r(t.then,1,t.value,o),set_current_component(null)},o=>{if(set_current_component(i),r(t.catch,2,t.error,o),set_current_component(null),!t.hasCatch)throw o}),t.current!==t.pending)return r(t.pending,0),!0}else{if(t.current!==t.then)return r(t.then,1,t.value,e),!0;t.resolved=e}}function update_await_block_branch(e,t,n){const r=t.slice(),{resolved:i}=e;e.current===e.then&&(r[e.value]=i),e.current===e.catch&&(r[e.error]=i),e.block.p(r,n)}function outro_and_destroy_block(e,t){transition_out(e,1,1,()=>{t.delete(e.key)})}function update_keyed_each(e,t,n,r,i,o,a,s,c,l,u,f){let d=e.length,g=o.length,_=d;const h={};for(;_--;)h[e[_].key]=_;const A=[],m=new Map,y=new Map;for(_=g;_--;){const M=f(i,o,_),D=n(M);let I=a.get(D);I?r&&I.p(M,t):(I=l(D,M),I.c()),m.set(D,A[_]=I),D in h&&y.set(D,Math.abs(_-h[D]))}const b=new Set,B=new Set;function v(M){transition_in(M,1),M.m(s,u),a.set(M.key,M),u=M.first,g--}for(;d&&g;){const M=A[g-1],D=e[d-1],I=M.key,C=D.key;M===D?(u=M.first,d--,g--):m.has(C)?!a.has(I)||b.has(I)?v(M):B.has(C)?d--:y.get(I)>y.get(C)?(B.add(I),v(M)):(b.add(C),d--):(c(D,a),d--)}for(;d--;){const M=e[d];m.has(M.key)||c(M,a)}for(;g;)v(A[g-1]);return A}function get_spread_update(e,t){const n={},r={},i={$$scope:1};let o=e.length;for(;o--;){const a=e[o],s=t[o];if(s){for(const c in a)c in s||(r[c]=1);for(const c in s)i[c]||(n[c]=s[c],i[c]=1);e[o]=s}else for(const c in a)i[c]=1}for(const a in r)a in n||(n[a]=void 0);return n}function get_spread_object(e){return typeof e=="object"&&e!==null?e:{}}function bind(e,t,n){const r=e.$$.props[t];r!==void 0&&(e.$$.bound[r]=n,n(e.$$.ctx[r]))}function create_component(e){e&&e.c()}function mount_component(e,t,n,r){const{fragment:i,on_mount:o,on_destroy:a,after_update:s}=e.$$;i&&i.m(t,n),r||add_render_callback(()=>{const c=o.map(run).filter(is_function);a?a.push(...c):run_all(c),e.$$.on_mount=[]}),s.forEach(add_render_callback)}function destroy_component(e,t){const n=e.$$;n.fragment!==null&&(run_all(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function make_dirty(e,t){e.$$.dirty[0]===-1&&(dirty_components.push(e),schedule_update(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}function init(e,t,n,r,i,o,a,s=[-1]){const c=current_component;set_current_component(e);const l=e.$$={fragment:null,ctx:null,props:o,update:noop$1,not_equal:i,bound:blank_object(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(c?c.$$.context:[])),callbacks:blank_object(),dirty:s,skip_bound:!1,root:t.target||c.$$.root};a&&a(l.root);let u=!1;if(l.ctx=n?n(e,t.props||{},(f,d,...g)=>{const _=g.length?g[0]:d;return l.ctx&&i(l.ctx[f],l.ctx[f]=_)&&(!l.skip_bound&&l.bound[f]&&l.bound[f](_),u&&make_dirty(e,f)),d}):[],l.update(),u=!0,run_all(l.before_update),l.fragment=r?r(l.ctx):!1,t.target){if(t.hydrate){const f=children(t.target);l.fragment&&l.fragment.l(f),f.forEach(detach)}else l.fragment&&l.fragment.c();t.intro&&transition_in(e.$$.fragment),mount_component(e,t.target,t.anchor,t.customElement),flush()}set_current_component(c)}class SvelteComponent{$destroy(){destroy_component(this,1),this.$destroy=noop$1}$on(t,n){const r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(n),()=>{const i=r.indexOf(n);i!==-1&&r.splice(i,1)}}$set(t){this.$$set&&!is_empty(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}const F_NOOP=()=>{},F_IDENTITY=e=>e,proper=e=>e.split(/\s+/g).map(t=>t[0].toUpperCase()+t.slice(1)).join(" ");function objects_might_differ(e,t){const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!0;for(const o in e)if(t[o]!==e[o])return!0;return!1}function fold(e,t){const n={};let r=0;for(const i of e)Object.assign(n,t(i,r++));return n}function ode(e){return Object.entries(e)}function ofe(e){return Object.fromEntries(e)}function oderac(e,t,n=!1){return ode(e).reduce((r,[i,o],a)=>[...r,t(i,o,a)],[])}function oderom(e,t){return ode(e).reduce((n,[r,i])=>({...n,...t(r,i)}),{})}function timeout(e){return new Promise(t=>{setTimeout(()=>{t()},e)})}function with_timeout(e){return new Promise((t,n)=>{let r=!1;setTimeout(()=>{r||(r=!0,n(e.trip()))},e.duration),e.run().then(i=>{r||(r=!0,t(i))}).catch(n)})}function forever(e){return new Promise(F_NOOP)}var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function commonjsRequire(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var dist={};Object.defineProperty(dist,"__esModule",{value:!0});dist.bech32m=bech32=dist.bech32=void 0;const ALPHABET="qpzry9x8gf2tvdw0s3jn54khce6mua7l",ALPHABET_MAP={};for(let e=0;e<ALPHABET.length;e++){const t=ALPHABET.charAt(e);ALPHABET_MAP[t]=e}function polymodStep(e){const t=e>>25;return(e&33554431)<<5^-(t>>0&1)&996825010^-(t>>1&1)&642813549^-(t>>2&1)&513874426^-(t>>3&1)&1027748829^-(t>>4&1)&705979059}function prefixChk(e){let t=1;for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+e+")";t=polymodStep(t)^r>>5}t=polymodStep(t);for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);t=polymodStep(t)^r&31}return t}function convert(e,t,n,r){let i=0,o=0;const a=(1<<n)-1,s=[];for(let c=0;c<e.length;++c)for(i=i<<t|e[c],o+=t;o>=n;)o-=n,s.push(i>>o&a);if(r)o>0&&s.push(i<<n-o&a);else{if(o>=t)return"Excess padding";if(i<<n-o&a)return"Non-zero padding"}return s}function toWords(e){return convert(e,8,5,!0)}function fromWordsUnsafe(e){const t=convert(e,5,8,!1);if(Array.isArray(t))return t}function fromWords(e){const t=convert(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}function getLibraryFromEncoding(e){let t;e==="bech32"?t=1:t=734539939;function n(a,s,c){if(c=c||90,a.length+7+s.length>c)throw new TypeError("Exceeds length limit");a=a.toLowerCase();let l=prefixChk(a);if(typeof l=="string")throw new Error(l);let u=a+"1";for(let f=0;f<s.length;++f){const d=s[f];if(d>>5!==0)throw new Error("Non 5-bit word");l=polymodStep(l)^d,u+=ALPHABET.charAt(d)}for(let f=0;f<6;++f)l=polymodStep(l);l^=t;for(let f=0;f<6;++f){const d=l>>(5-f)*5&31;u+=ALPHABET.charAt(d)}return u}function r(a,s){if(s=s||90,a.length<8)return a+" too short";if(a.length>s)return"Exceeds length limit";const c=a.toLowerCase(),l=a.toUpperCase();if(a!==c&&a!==l)return"Mixed-case string "+a;a=c;const u=a.lastIndexOf("1");if(u===-1)return"No separator character for "+a;if(u===0)return"Missing prefix for "+a;const f=a.slice(0,u),d=a.slice(u+1);if(d.length<6)return"Data too short";let g=prefixChk(f);if(typeof g=="string")return g;const _=[];for(let h=0;h<d.length;++h){const A=d.charAt(h),m=ALPHABET_MAP[A];if(m===void 0)return"Unknown character "+A;g=polymodStep(g)^m,!(h+6>=d.length)&&_.push(m)}return g!==t?"Invalid checksum for "+a:{prefix:f,words:_}}function i(a,s){const c=r(a,s);if(typeof c=="object")return c}function o(a,s){const c=r(a,s);if(typeof c=="object")return c;throw new Error(c)}return{decodeUnsafe:i,decode:o,encode:n,toWords,fromWordsUnsafe,fromWords}}var bech32=dist.bech32=getLibraryFromEncoding("bech32");dist.bech32m=getLibraryFromEncoding("bech32m");if(typeof window<"u"&&window?.location?.hostname==="localhost"){const e=globalThis.chrome;if(!e.storage){let t=function(n){return{async get(r){const i=Array.isArray(r)?r:[r];return fold(i,o=>{const a=localStorage.getItem(`chrome.${n}:${o}`);return{[o]:typeof a=="string"?JSON.parse(a):void 0}})},async set(r){for(const[i,o]of ode(r))localStorage.setItem(`chrome.${n}:${i}`,JSON.stringify(o))},async clear(){const r=localStorage.length;for(let i=r;i>=0;i--){const o=localStorage.key(i);!o||o.startsWith(`chrome.${n}:`)&&localStorage.removeItem(o)}},async remove(r){const i=Array.isArray(r)?r:[r];for(const o of i)localStorage.removeItem(`chrome.${n}:${o}`)}}};e.storage={local:t("local"),sync:t("sync"),session:t("session")}}e.runtime||(e.runtime={getURL(t){debugger},getManifest(){debugger},sendMessage(t){debugger},onMessage:{addListener(t){debugger},removeListener(){debugger}},onInstalled:{addListener(t){debugger},removeListener(){debugger}}}),e.tabs||(e.tabs={create(t){window.open(t.url,"_blank")},get(t){debugger},reload(t){debugger},onUpdated:{addEventListener(){debugger},removeListener(){debugger}}}),e.windows||(e.windows={create(t){window.open(t.url,"_blank")},get(t){debugger},remove(t){debugger},onRemoved:{addEventListener(){debugger},removeListener(){debugger}}}),e.extension||(e.extension={getBackgroundPage(){debugger}}),e.scripting||(e.scripting={executeScript(){debugger}})}const chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",base64ToBin=e=>{const t=new Uint8Array(123);for(let c=0;c<chars.length;c++)t[chars.charCodeAt(c)]=c;const n=e.length*.75,r=e.length,i=e[e.length-1]==="="?e[e.length-2]==="="?n-2:n-1:n,o=new ArrayBuffer(i),a=new Uint8Array(o);let s=0;for(let c=0;c<r;c+=4){const l=t[e.charCodeAt(c)],u=t[e.charCodeAt(c+1)],f=t[e.charCodeAt(c+2)],d=t[e.charCodeAt(c+3)];a[s++]=l<<2|u>>4,a[s++]=(u&15)<<4|f>>2,a[s++]=(f&3)<<6|d&63}return a},instantiateRustWasm=async(e,t,n,r,i,o)=>{const a=(await WebAssembly.instantiate(e,{[t]:{__wbindgen_throw:(b,B)=>{throw new Error(Array.from(f().subarray(b,b+B)).map(v=>String.fromCharCode(v)).join(""))}}})).instance.exports;let s,c,l;const u=()=>(l===void 0&&(l=a.__wbindgen_global_argument_ptr()),l);function f(){return(s===void 0||s.buffer!==a.memory.buffer)&&(s=new Uint8Array(a.memory.buffer)),s}const d=()=>((c===void 0||c.buffer!==a.memory.buffer)&&(c=new Uint32Array(a.memory.buffer)),c),g=b=>{const B=a.__wbindgen_malloc(b.length);return f().set(b,B),[B,b.length]},_=(b,B)=>f().subarray(b,b+B);return{final:b=>{const[B,v]=g(b),M=u();try{a[o](M,B,v);const D=d(),I=D[M/4],C=D[M/4+1],E=_(I,C).slice();return a.__wbindgen_free(I,C),E}finally{b.set(f().subarray(B/1,B/1+v)),a.__wbindgen_free(B,v)}},hash:b=>{const[B,v]=g(b),M=u();try{a[n](M,B,v);const D=d(),I=D[M/4],C=D[M/4+1],E=_(I,C).slice();return a.__wbindgen_free(I,C),E}finally{a.__wbindgen_free(B,v)}},init:()=>{const b=u();a[r](b);const B=d(),v=B[b/4],M=B[b/4+1],D=_(v,M).slice();return a.__wbindgen_free(v,M),D},update:(b,B)=>{const[v,M]=g(b),[D,I]=g(B),C=u();try{a[i](C,v,M,D,I);const E=d(),N=E[C/4],S=E[C/4+1],k=_(N,S).slice();return a.__wbindgen_free(N,S),k}finally{b.set(f().subarray(v/1,v/1+M)),a.__wbindgen_free(v,M),a.__wbindgen_free(D,I)}}}},ripemd160Base64Bytes="",SECP256K1_FLAGS_TYPE_CONTEXT=1<<0,SECP256K1_FLAGS_TYPE_COMPRESSION=1<<1,SECP256K1_FLAGS_BIT_CONTEXT_VERIFY=1<<8,SECP256K1_FLAGS_BIT_CONTEXT_SIGN=1<<9,SECP256K1_FLAGS_BIT_COMPRESSION=1<<8,SECP256K1_CONTEXT_VERIFY=SECP256K1_FLAGS_TYPE_CONTEXT|SECP256K1_FLAGS_BIT_CONTEXT_VERIFY,SECP256K1_CONTEXT_SIGN=SECP256K1_FLAGS_TYPE_CONTEXT|SECP256K1_FLAGS_BIT_CONTEXT_SIGN,SECP256K1_CONTEXT_NONE=SECP256K1_FLAGS_TYPE_CONTEXT,SECP256K1_EC_COMPRESSED=SECP256K1_FLAGS_TYPE_COMPRESSION|SECP256K1_FLAGS_BIT_COMPRESSION,SECP256K1_EC_UNCOMPRESSED=SECP256K1_FLAGS_TYPE_COMPRESSION;var ContextFlag;(function(e){e[e.NONE=SECP256K1_CONTEXT_NONE]="NONE",e[e.VERIFY=SECP256K1_CONTEXT_VERIFY]="VERIFY",e[e.SIGN=SECP256K1_CONTEXT_SIGN]="SIGN",e[e.BOTH=SECP256K1_CONTEXT_SIGN|SECP256K1_CONTEXT_VERIFY]="BOTH"})(ContextFlag||(ContextFlag={}));var CompressionFlag;(function(e){e[e.COMPRESSED=SECP256K1_EC_COMPRESSED]="COMPRESSED",e[e.UNCOMPRESSED=SECP256K1_EC_UNCOMPRESSED]="UNCOMPRESSED"})(CompressionFlag||(CompressionFlag={}));const wrapSecp256k1Wasm$1=(e,t,n)=>({contextCreate:r=>e.exports._secp256k1_context_create(r),contextRandomize:(r,i)=>e.exports._secp256k1_context_randomize(r,i),ecdh:(r,i,o,a)=>e.exports._secp256k1_ecdh(r,i,o,a),free:r=>e.exports._free(r),heapU32:n,heapU8:t,instance:e,malloc:r=>e.exports._malloc(r),mallocSizeT:r=>{const i=e.exports._malloc(4),o=i>>2;return n.set([r],o),i},mallocUint8Array:r=>{const i=e.exports._malloc(r.length);return t.set(r,i),i},privkeyTweakAdd:(r,i,o)=>e.exports._secp256k1_ec_privkey_tweak_add(r,i,o),privkeyTweakMul:(r,i,o)=>e.exports._secp256k1_ec_privkey_tweak_mul(r,i,o),pubkeyCreate:(r,i,o)=>e.exports._secp256k1_ec_pubkey_create(r,i,o),pubkeyParse:(r,i,o,a)=>e.exports._secp256k1_ec_pubkey_parse(r,i,o,a),pubkeySerialize:(r,i,o,a,s)=>e.exports._secp256k1_ec_pubkey_serialize(r,i,o,a,s),pubkeyTweakAdd:(r,i,o)=>e.exports._secp256k1_ec_pubkey_tweak_add(r,i,o),pubkeyTweakMul:(r,i,o)=>e.exports._secp256k1_ec_pubkey_tweak_mul(r,i,o),readHeapU8:(r,i)=>new Uint8Array(t.buffer,r,i),readSizeT:r=>{const i=r>>2;return n[i]},recover:(r,i,o,a)=>e.exports._secp256k1_ecdsa_recover(r,i,o,a),recoverableSignatureParse:(r,i,o,a)=>e.exports._secp256k1_ecdsa_recoverable_signature_parse_compact(r,i,o,a),recoverableSignatureSerialize:(r,i,o,a)=>e.exports._secp256k1_ecdsa_recoverable_signature_serialize_compact(r,i,o,a),schnorrSign:(r,i,o,a)=>e.exports._secp256k1_schnorrsig_sign(r,i,o,a),schnorrVerify:(r,i,o,a)=>e.exports._secp256k1_schnorrsig_verify(r,i,o,a),seckeyVerify:(r,i)=>e.exports._secp256k1_ec_seckey_verify(r,i),sign:(r,i,o,a,s)=>e.exports._secp256k1_ecdsa_sign(r,i,o,a,0,s),signRecoverable:(r,i,o,a)=>e.exports._secp256k1_ecdsa_sign_recoverable(r,i,o,a),signatureNormalize:(r,i,o)=>e.exports._secp256k1_ecdsa_signature_normalize(r,i,o),signatureParseCompact:(r,i,o)=>e.exports._secp256k1_ecdsa_signature_parse_compact(r,i,o),signatureParseDER:(r,i,o,a)=>e.exports._secp256k1_ecdsa_signature_parse_der(r,i,o,a),signatureSerializeCompact:(r,i,o)=>e.exports._secp256k1_ecdsa_signature_serialize_compact(r,i,o),signatureSerializeDER:(r,i,o,a)=>e.exports._secp256k1_ecdsa_signature_serialize_der(r,i,o,a),verify:(r,i,o,a)=>e.exports._secp256k1_ecdsa_verify(r,i,o,a)}),isLittleEndian=e=>{const r=new Int16Array(e),i=new Int32Array(e),o=new Uint8Array(e);return i[0]=1668509029,r[1]=25459,!(o[2]!==115||o[3]!==99)},alignMemory=(e,t)=>Math.ceil(t/e)*e,instantiateSecp256k1WasmBytes=async e=>{const a=new WebAssembly.Memory({initial:256,maximum:256});if(!isLittleEndian(a.buffer))throw new Error("Runtime error: expected the system to be little-endian.");const s=1024,c=s+67696+16,l=c,f=c+4+15&-16,d=alignMemory(16,f),_=d+5242880,h=alignMemory(16,_),A=new Uint8Array(a.buffer),m=new Int32Array(a.buffer),y=new Uint32Array(a.buffer);m[l>>2]=h;const b=16,B=16;let v;const D={env:{...{DYNAMICTOP_PTR:l,STACKTOP:d,___setErrNo:I=>(v!==void 0&&(m[v()>>2]=I),I),___syscall140:()=>{throw new Error("___syscall140")},___syscall146:()=>{throw new Error("___syscall146")},___syscall6:()=>{throw new Error("___syscall6")},_abort:(I="Secp256k1 Error")=>{throw new Error(I)},_emscripten_memcpy_big:(I,C,E)=>(A.set(A.subarray(C,C+E),I),I),abort:(I="Secp256k1 Error")=>{throw new Error(I)},abortOnCannotGrowMemory:()=>{throw new Error("Secp256k1 Error: abortOnCannotGrowMemory was called.")},enlargeMemory:()=>{throw new Error("Secp256k1 Error: enlargeMemory was called.")},getTotalMemory:()=>16777216},memory:a,memoryBase:s,table:new WebAssembly.Table({element:"anyfunc",initial:b,maximum:B}),tableBase:0},global:{Infinity:1/0,NaN:NaN}};return WebAssembly.instantiate(e,D).then(I=>(v=I.instance.exports.___errno_location,wrapSecp256k1Wasm$1(I.instance,A,y)))},sha256Base64Bytes="",instantiateRipemd160Bytes=async e=>{const t=await instantiateRustWasm(e,"./ripemd160","ripemd160","ripemd160_init","ripemd160_update","ripemd160_final");return{final:t.final,hash:t.hash,init:t.init,update:t.update}},getEmbeddedRipemd160Binary=()=>base64ToBin(ripemd160Base64Bytes).buffer,cachedRipemd160={},instantiateRipemd160=async()=>{if(cachedRipemd160.cache!==void 0)return cachedRipemd160.cache;const e=instantiateRipemd160Bytes(getEmbeddedRipemd160Binary());return cachedRipemd160.cache=e,e},wrapSecp256k1Wasm=(e,t)=>{const n=e.contextCreate(ContextFlag.BOTH),r=e.malloc(72),i=e.malloc(65),o=e.malloc(32),a=e.malloc(32),s=e.malloc(64),c=e.malloc(32),l=e.malloc(64),u=e.malloc(64),f=e.malloc(32),d=e.malloc(65),g=e.malloc(4),_=g>>2,h=()=>e.heapU32[_],A=e.malloc(4),m=A>>2,y=(J,z)=>{const ne=new Uint8Array(z);return ne.set(J),ne},b=J=>{const z=y(J,65);return e.heapU8.set(z,i),e.pubkeyParse(n,s,i,J.length)===1},B=J=>{e.heapU32.set([J],m)},v=()=>e.heapU32[m],M=(J,z)=>(B(J),e.pubkeySerialize(n,i,A,s,z),e.readHeapU8(i,v()).slice()),D=J=>J?M(33,CompressionFlag.COMPRESSED):M(65,CompressionFlag.UNCOMPRESSED),I=J=>z=>{if(!b(z))throw new Error("Failed to parse public key.");return D(J)},C=(J,z)=>{const ne=y(J,72);return e.heapU8.set(ne,r),z?e.signatureParseDER(n,l,r,J.length)===1:e.signatureParseCompact(n,l,r)===1},E=(J,z)=>{if(!C(J,z))throw new Error("Failed to parse signature.")},N=()=>(e.signatureSerializeCompact(n,r,l),e.readHeapU8(r,64).slice()),S=()=>(B(72),e.signatureSerializeDER(n,r,A,l),e.readHeapU8(r,v()).slice()),k=J=>z=>(E(z,J),J?N():S()),Q=J=>{const z=y(J,32);e.heapU8.set(z,f)},w=(J,z)=>{e.heapU8.fill(0,J,J+z)},T=()=>{w(f,32)},O=(J,z)=>{Q(J);const ne=z();return T(),ne},P=J=>z=>{if(O(z,()=>e.pubkeyCreate(n,s,f)!==1))throw new Error("Cannot derive public key from invalid private key.");return D(J)},F=J=>{const z=y(J,32);e.heapU8.set(z,o)},L=J=>{const z=y(J,32);e.heapU8.set(z,a)},G=()=>{e.signatureNormalize(n,l,l)},Y=(J,z)=>ne=>(E(ne,J),z&&G(),J?S():N()),U=(J,z,ne)=>{const ue=C(J,z);return ne&&G(),ue},V=J=>(z,ne,ue)=>(F(ne),ue&&L(ue),O(z,()=>{if(e.sign(n,l,o,f,ue?a:0)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return J?(B(72),e.signatureSerializeDER(n,r,A,l),e.readHeapU8(r,v()).slice()):(e.signatureSerializeCompact(n,r,l),e.readHeapU8(r,64).slice())})),q=()=>(J,z)=>(F(z),O(J,()=>{if(e.schnorrSign(n,u,o,f)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return e.readHeapU8(u,64).slice()})),X=()=>(J,z)=>{if(!b(z))throw new Error("ECDH Key Exchange failed. Failed to parse public key.");return O(J,()=>{if(e.ecdh(n,c,s,f)!==1)throw new Error("ECDH Key Exchange failed. The private key is not valid.");return e.readHeapU8(c,32).slice()})},te=J=>(F(J),e.verify(n,l,o,s)===1),H=(J,z)=>(ne,ue,le)=>b(ue)&&U(ne,J,z)&&te(le),Z=(J,z)=>{F(J);const ne=y(z,64);return e.heapU8.set(ne,u),e.schnorrVerify(n,u,o,s)===1},ie=()=>(J,z,ne)=>b(z)?Z(ne,J):!1,se=(J,z)=>(F(z),O(J,()=>{if(e.signRecoverable(n,d,o,f)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return e.recoverableSignatureSerialize(n,r,g,d),{recoveryId:h(),signature:e.readHeapU8(r,64).slice()}})),ce=J=>(z,ne,ue)=>{F(ue);const le=y(z,72);if(e.heapU8.set(le,r),e.recoverableSignatureParse(n,d,r,ne)!==1)throw new Error("Failed to recover public key. Could not parse signature.");if(e.recover(n,s,d,o)!==1)throw new Error("Failed to recover public key. The compact signature, recovery, or message hash is invalid.");return D(J)},re=(J,z)=>(F(z),O(J,()=>{if(e.privkeyTweakAdd(n,f,o)!==1)throw new Error("Private key is invalid or adding failed.");return e.readHeapU8(f,32).slice()})),x=(J,z)=>(F(z),O(J,()=>{if(e.privkeyTweakMul(n,f,o)!==1)throw new Error("Private key is invalid or multiplying failed.");return e.readHeapU8(f,32).slice()})),ee=J=>(z,ne)=>{if(!b(z))throw new Error("Failed to parse public key.");if(F(ne),e.pubkeyTweakAdd(n,s,o)!==1)throw new Error("Adding failed");return D(J)},ge=J=>(z,ne)=>{if(!b(z))throw new Error("Failed to parse public key.");if(F(ne),e.pubkeyTweakMul(n,s,o)!==1)throw new Error("Multiplying failed");return D(J)};if(t!==void 0){const J=o,z=y(t,32);e.heapU8.set(z,J),e.contextRandomize(n,J),w(J,32)}return{addTweakPrivateKey:re,addTweakPublicKeyCompressed:ee(!0),addTweakPublicKeyUncompressed:ee(!1),compressPublicKey:I(!0),derivePublicKeyCompressed:P(!0),derivePublicKeyUncompressed:P(!1),ecdh:X(),malleateSignatureCompact:Y(!1,!1),malleateSignatureDER:Y(!0,!1),mulTweakPrivateKey:x,mulTweakPublicKeyCompressed:ge(!0),mulTweakPublicKeyUncompressed:ge(!1),normalizeSignatureCompact:Y(!1,!0),normalizeSignatureDER:Y(!0,!0),recoverPublicKeyCompressed:ce(!0),recoverPublicKeyUncompressed:ce(!1),signMessageHashCompact:V(!1),signMessageHashDER:V(!0),signMessageHashRecoverableCompact:se,signMessageHashSchnorr:q(),signatureCompactToDER:k(!1),signatureDERToCompact:k(!0),uncompressPublicKey:I(!1),validatePrivateKey:J=>O(J,()=>e.seckeyVerify(n,f)===1),validatePublicKey:b,verifySignatureCompact:H(!1,!0),verifySignatureCompactLowS:H(!1,!1),verifySignatureDER:H(!0,!0),verifySignatureDERLowS:H(!0,!1),verifySignatureSchnorr:ie()}},instantiateSecp256k1Bytes=async(e,t)=>wrapSecp256k1Wasm(await instantiateSecp256k1WasmBytes(e),t),instantiateSha256Bytes=async e=>{const t=await instantiateRustWasm(e,"./sha256","sha256","sha256_init","sha256_update","sha256_final");return{final:t.final,hash:t.hash,init:t.init,update:t.update}},getEmbeddedSha256Binary=()=>base64ToBin(sha256Base64Bytes).buffer,cachedSha256={},instantiateSha256=async()=>{if(cachedSha256.cache!==void 0)return cachedSha256.cache;const e=instantiateSha256Bytes(getEmbeddedSha256Binary());return cachedSha256.cache=e,e};var sha256Uint8array={};Object.defineProperty(sha256Uint8array,"__esModule",{value:!0});sha256Uint8array.Hash=createHash_1=sha256Uint8array.createHash=void 0;const K=[1116352408,1899447441,-1245643825,-373957723,961987163,1508970993,-1841331548,-1424204075,-670586216,310598401,607225278,1426881987,1925078388,-2132889090,-1680079193,-1046744716,-459576895,-272742522,264347078,604807628,770255983,1249150122,1555081692,1996064986,-1740746414,-1473132947,-1341970488,-1084653625,-958395405,-710438585,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,-2117940946,-1838011259,-1564481375,-1474664885,-1035236496,-949202525,-778901479,-694614492,-200395387,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,-2067236844,-1933114872,-1866530822,-1538233109,-1090935817,-965641998],algorithms={sha256:1};function createHash(e){if(e&&!algorithms[e]&&!algorithms[e.toLowerCase()])throw new Error("Digest method not supported");return new Hash}var createHash_1=sha256Uint8array.createHash=createHash;class Hash{constructor(){this.A=1779033703,this.B=-1150833019,this.C=1013904242,this.D=-1521486534,this.E=1359893119,this.F=-1694144372,this.G=528734635,this.H=1541459225,this._size=0,this._sp=0,(!sharedBuffer||sharedOffset>=8e3)&&(sharedBuffer=new ArrayBuffer(8e3),sharedOffset=0),this._byte=new Uint8Array(sharedBuffer,sharedOffset,80),this._word=new Int32Array(sharedBuffer,sharedOffset,20),sharedOffset+=80}update(t){if(typeof t=="string")return this._utf8(t);if(t==null)throw new TypeError("Invalid type: "+typeof t);const n=t.byteOffset,r=t.byteLength;let i=r/64|0,o=0;if(i&&!(n&3)&&!(this._size%64)){const s=new Int32Array(t.buffer,n,i*16);for(;i--;)this._int32(s,o>>2),o+=64;this._size+=o}if(t.BYTES_PER_ELEMENT!==1&&t.buffer){const s=new Uint8Array(t.buffer,n+o,r-o);return this._uint8(s)}return o===r?this:this._uint8(t,o)}_uint8(t,n){const{_byte:r,_word:i}=this,o=t.length;for(n=n|0;n<o;){const a=this._size%64;let s=a;for(;n<o&&s<64;)r[s++]=t[n++];s>=64&&this._int32(i),this._size+=s-a}return this}_utf8(t){const{_byte:n,_word:r}=this,i=t.length;let o=this._sp;for(let a=0;a<i;){const s=this._size%64;let c=s;for(;a<i&&c<64;){let l=t.charCodeAt(a++)|0;l<128?n[c++]=l:l<2048?(n[c++]=192|l>>>6,n[c++]=128|l&63):l<55296||l>57343?(n[c++]=224|l>>>12,n[c++]=128|l>>>6&63,n[c++]=128|l&63):o?(l=((o&1023)<<10)+(l&1023)+65536,n[c++]=240|l>>>18,n[c++]=128|l>>>12&63,n[c++]=128|l>>>6&63,n[c++]=128|l&63,o=0):o=l}c>=64&&(this._int32(r),r[0]=r[16]),this._size+=c-s}return this._sp=o,this}_int32(t,n){let{A:r,B:i,C:o,D:a,E:s,F:c,G:l,H:u}=this,f=0;for(n=n|0;f<16;)W[f++]=swap32(t[n++]);for(f=16;f<64;f++)W[f]=gamma1(W[f-2])+W[f-7]+gamma0(W[f-15])+W[f-16]|0;for(f=0;f<64;f++){const d=u+sigma1(s)+ch(s,c,l)+K[f]+W[f]|0,g=sigma0(r)+maj(r,i,o)|0;u=l,l=c,c=s,s=a+d|0,a=o,o=i,i=r,r=d+g|0}this.A=r+this.A|0,this.B=i+this.B|0,this.C=o+this.C|0,this.D=a+this.D|0,this.E=s+this.E|0,this.F=c+this.F|0,this.G=l+this.G|0,this.H=u+this.H|0}digest(t){const{_byte:n,_word:r}=this;let i=this._size%64|0;for(n[i++]=128;i&3;)n[i++]=0;if(i>>=2,i>14){for(;i<16;)r[i++]=0;i=0,this._int32(r)}for(;i<16;)r[i++]=0;const o=this._size*8,a=(o&4294967295)>>>0,s=(o-a)/4294967296;return s&&(r[14]=swap32(s)),a&&(r[15]=swap32(a)),this._int32(r),t==="hex"?this._hex():this._bin()}_hex(){const{A:t,B:n,C:r,D:i,E:o,F:a,G:s,H:c}=this;return hex32(t)+hex32(n)+hex32(r)+hex32(i)+hex32(o)+hex32(a)+hex32(s)+hex32(c)}_bin(){const{A:t,B:n,C:r,D:i,E:o,F:a,G:s,H:c,_byte:l,_word:u}=this;return u[0]=swap32(t),u[1]=swap32(n),u[2]=swap32(r),u[3]=swap32(i),u[4]=swap32(o),u[5]=swap32(a),u[6]=swap32(s),u[7]=swap32(c),l.slice(0,32)}}sha256Uint8array.Hash=Hash;const W=new Int32Array(64);let sharedBuffer,sharedOffset=0;const hex32=e=>(e+4294967296).toString(16).substr(-8),swapLE=e=>e<<24&4278190080|e<<8&16711680|e>>8&65280|e>>24&255,swapBE=e=>e,swap32=isBE()?swapBE:swapLE,ch=(e,t,n)=>n^e&(t^n),maj=(e,t,n)=>e&t|n&(e|t),sigma0=e=>(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),sigma1=e=>(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7),gamma0=e=>(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3,gamma1=e=>(e>>>17|e<<15)^(e>>>19|e<<13)^e>>>10;function isBE(){return new Uint8Array(new Uint16Array([65279]).buffer)[0]===254}async function sha256$1(e){return new Uint8Array(await crypto.subtle.digest("SHA-256",e))}const sha256_sync_insecure=e=>createHash_1().update(e).digest();let y_sha256;instantiateSha256().then(e=>y_sha256=e);const sha256_sync$1=e=>y_sha256.final(y_sha256.update(y_sha256.init(),e));let y_ripemd;instantiateRipemd160().then(e=>y_ripemd=e);const ripemd160_sync=e=>y_ripemd.final(y_ripemd.update(y_ripemd.init(),e));function zero_out(e){if(e.fill(0),e.reduce((t,n)=>t+n,0)!==0)throw new Error("Failed to zero out sensitive memory region")}function text_to_buffer(e){return new TextEncoder().encode(e)}function buffer_to_text(e){return new TextDecoder().decode(e)}function concat(e){const t=e.reduce((i,o)=>i+o.byteLength,0),n=new Uint8Array(t);let r=0;for(const i of e)n.set(i,r),r+=i.byteLength;return n}const sfcc=String.fromCharCode;function buffer_to_hex(e){let t="";for(const n of e)t+=n.toString(16).padStart(2,"0");return t}function hex_to_buffer(e){const t=e.length;if(t%2!==0)throw new Error("Invalid hex string length is not a multiple of 2");const n=t/2,r=new Uint8Array(n);for(let i=0;i<n;i++)r[i]=parseInt(e.slice(i+i,i+i+2),16);return r}function buffer_to_base64(e){return globalThis.btoa(buffer_to_string8(e))}function base64_to_buffer(e){return string8_to_buffer(globalThis.atob(e))}function buffer_to_string8(e){let t="";for(const n of e)t+=sfcc(n);return t}function string8_to_buffer(e){const t=e.length,n=new Uint8Array(t);for(let r=0;r<t;r++)n[r]=e.charCodeAt(r);return n}const SX_CHARS_BASE93="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&'()*+,-./:;<=>?@[]^_`{|}~ ";function buffer_to_base93(e){let t="";const n=e.byteLength;let r=0,i=0;for(let o=0;o<n;o++)if(r|=e[o]<<i,i+=8,i>13){let s=r&8191;s>456?(r>>=13,i-=13):(s=r&16383,r>>=14,i-=14),t+=SX_CHARS_BASE93[s%93]+SX_CHARS_BASE93[s/93|0]}return i>0&&(t+=SX_CHARS_BASE93[r%93],(i>7||r>92)&&(t+=SX_CHARS_BASE93[r/93|0])),t}function base93_to_buffer(e){const t=e.length,n=[];let r=0,i=0,o=-1;for(let a=0;a<t;a++){const s=SX_CHARS_BASE93.indexOf(e[a]);if(s===-1)throw new Error("Invalid base93 string");if(o===-1){o=s;continue}o+=s*93,r|=o<<i,i+=(o&8191)>456?13:14;do n.push(r&255),r>>=8,i-=8;while(i>7);o=-1}return o!==-1&&n.push(r|o<<i),Uint8Array.from(n.slice(0,Math.ceil(e.length*7/8)))}var sha256={exports:{}},core={exports:{}};(function(e,t){(function(n,r){e.exports=r()})(commonjsGlobal,function(){var n=n||function(r,i){var o;if(typeof window<"u"&&window.crypto&&(o=window.crypto),typeof self<"u"&&self.crypto&&(o=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(o=globalThis.crypto),!o&&typeof window<"u"&&window.msCrypto&&(o=window.msCrypto),!o&&typeof commonjsGlobal<"u"&&commonjsGlobal.crypto&&(o=commonjsGlobal.crypto),!o&&typeof commonjsRequire=="function")try{o=require("crypto")}catch{}var a=function(){if(o){if(typeof o.getRandomValues=="function")try{return o.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof o.randomBytes=="function")try{return o.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},s=Object.create||function(){function y(){}return function(b){var B;return y.prototype=b,B=new y,y.prototype=null,B}}(),c={},l=c.lib={},u=l.Base=function(){return{extend:function(y){var b=s(this);return y&&b.mixIn(y),(!b.hasOwnProperty("init")||this.init===b.init)&&(b.init=function(){b.$super.init.apply(this,arguments)}),b.init.prototype=b,b.$super=this,b},create:function(){var y=this.extend();return y.init.apply(y,arguments),y},init:function(){},mixIn:function(y){for(var b in y)y.hasOwnProperty(b)&&(this[b]=y[b]);y.hasOwnProperty("toString")&&(this.toString=y.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),f=l.WordArray=u.extend({init:function(y,b){y=this.words=y||[],b!=i?this.sigBytes=b:this.sigBytes=y.length*4},toString:function(y){return(y||g).stringify(this)},concat:function(y){var b=this.words,B=y.words,v=this.sigBytes,M=y.sigBytes;if(this.clamp(),v%4)for(var D=0;D<M;D++){var I=B[D>>>2]>>>24-D%4*8&255;b[v+D>>>2]|=I<<24-(v+D)%4*8}else for(var C=0;C<M;C+=4)b[v+C>>>2]=B[C>>>2];return this.sigBytes+=M,this},clamp:function(){var y=this.words,b=this.sigBytes;y[b>>>2]&=4294967295<<32-b%4*8,y.length=r.ceil(b/4)},clone:function(){var y=u.clone.call(this);return y.words=this.words.slice(0),y},random:function(y){for(var b=[],B=0;B<y;B+=4)b.push(a());return new f.init(b,y)}}),d=c.enc={},g=d.Hex={stringify:function(y){for(var b=y.words,B=y.sigBytes,v=[],M=0;M<B;M++){var D=b[M>>>2]>>>24-M%4*8&255;v.push((D>>>4).toString(16)),v.push((D&15).toString(16))}return v.join("")},parse:function(y){for(var b=y.length,B=[],v=0;v<b;v+=2)B[v>>>3]|=parseInt(y.substr(v,2),16)<<24-v%8*4;return new f.init(B,b/2)}},_=d.Latin1={stringify:function(y){for(var b=y.words,B=y.sigBytes,v=[],M=0;M<B;M++){var D=b[M>>>2]>>>24-M%4*8&255;v.push(String.fromCharCode(D))}return v.join("")},parse:function(y){for(var b=y.length,B=[],v=0;v<b;v++)B[v>>>2]|=(y.charCodeAt(v)&255)<<24-v%4*8;return new f.init(B,b)}},h=d.Utf8={stringify:function(y){try{return decodeURIComponent(escape(_.stringify(y)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(y){return _.parse(unescape(encodeURIComponent(y)))}},A=l.BufferedBlockAlgorithm=u.extend({reset:function(){this._data=new f.init,this._nDataBytes=0},_append:function(y){typeof y=="string"&&(y=h.parse(y)),this._data.concat(y),this._nDataBytes+=y.sigBytes},_process:function(y){var b,B=this._data,v=B.words,M=B.sigBytes,D=this.blockSize,I=D*4,C=M/I;y?C=r.ceil(C):C=r.max((C|0)-this._minBufferSize,0);var E=C*D,N=r.min(E*4,M);if(E){for(var S=0;S<E;S+=D)this._doProcessBlock(v,S);b=v.splice(0,E),B.sigBytes-=N}return new f.init(b,N)},clone:function(){var y=u.clone.call(this);return y._data=this._data.clone(),y},_minBufferSize:0});l.Hasher=A.extend({cfg:u.extend(),init:function(y){this.cfg=this.cfg.extend(y),this.reset()},reset:function(){A.reset.call(this),this._doReset()},update:function(y){return this._append(y),this._process(),this},finalize:function(y){y&&this._append(y);var b=this._doFinalize();return b},blockSize:16,_createHelper:function(y){return function(b,B){return new y.init(B).finalize(b)}},_createHmacHelper:function(y){return function(b,B){return new m.HMAC.init(y,B).finalize(b)}}});var m=c.algo={};return c}(Math);return n})})(core);(function(e,t){(function(n,r){e.exports=r(core.exports)})(commonjsGlobal,function(n){return function(r){var i=n,o=i.lib,a=o.WordArray,s=o.Hasher,c=i.algo,l=[],u=[];(function(){function g(m){for(var y=r.sqrt(m),b=2;b<=y;b++)if(!(m%b))return!1;return!0}function _(m){return(m-(m|0))*4294967296|0}for(var h=2,A=0;A<64;)g(h)&&(A<8&&(l[A]=_(r.pow(h,1/2))),u[A]=_(r.pow(h,1/3)),A++),h++})();var f=[],d=c.SHA256=s.extend({_doReset:function(){this._hash=new a.init(l.slice(0))},_doProcessBlock:function(g,_){for(var h=this._hash.words,A=h[0],m=h[1],y=h[2],b=h[3],B=h[4],v=h[5],M=h[6],D=h[7],I=0;I<64;I++){if(I<16)f[I]=g[_+I]|0;else{var C=f[I-15],E=(C<<25|C>>>7)^(C<<14|C>>>18)^C>>>3,N=f[I-2],S=(N<<15|N>>>17)^(N<<13|N>>>19)^N>>>10;f[I]=E+f[I-7]+S+f[I-16]}var k=B&v^~B&M,Q=A&m^A&y^m&y,w=(A<<30|A>>>2)^(A<<19|A>>>13)^(A<<10|A>>>22),T=(B<<26|B>>>6)^(B<<21|B>>>11)^(B<<7|B>>>25),O=D+T+k+u[I]+f[I],P=w+Q;D=M,M=v,v=B,B=b+O|0,b=y,y=m,m=A,A=O+P|0}h[0]=h[0]+A|0,h[1]=h[1]+m|0,h[2]=h[2]+y|0,h[3]=h[3]+b|0,h[4]=h[4]+B|0,h[5]=h[5]+v|0,h[6]=h[6]+M|0,h[7]=h[7]+D|0},_doFinalize:function(){var g=this._data,_=g.words,h=this._nDataBytes*8,A=g.sigBytes*8;return _[A>>>5]|=128<<24-A%32,_[(A+64>>>9<<4)+14]=r.floor(h/4294967296),_[(A+64>>>9<<4)+15]=h,g.sigBytes=_.length*4,this._process(),this._hash},clone:function(){var g=s.clone.call(this);return g._hash=this._hash.clone(),g}});i.SHA256=s._createHelper(d),i.HmacSHA256=s._createHmacHelper(d)}(Math),n.SHA256})})(sha256);var sha256_sync=sha256.exports,sha512={exports:{}},x64Core={exports:{}};(function(e,t){(function(n,r){e.exports=r(core.exports)})(commonjsGlobal,function(n){return function(r){var i=n,o=i.lib,a=o.Base,s=o.WordArray,c=i.x64={};c.Word=a.extend({init:function(l,u){this.high=l,this.low=u}}),c.WordArray=a.extend({init:function(l,u){l=this.words=l||[],u!=r?this.sigBytes=u:this.sigBytes=l.length*8},toX32:function(){for(var l=this.words,u=l.length,f=[],d=0;d<u;d++){var g=l[d];f.push(g.high),f.push(g.low)}return s.create(f,this.sigBytes)},clone:function(){for(var l=a.clone.call(this),u=l.words=this.words.slice(0),f=u.length,d=0;d<f;d++)u[d]=u[d].clone();return l}})}(),n})})(x64Core);(function(e,t){(function(n,r,i){e.exports=r(core.exports,x64Core.exports)})(commonjsGlobal,function(n){return function(){var r=n,i=r.lib,o=i.Hasher,a=r.x64,s=a.Word,c=a.WordArray,l=r.algo;function u(){return s.create.apply(s,arguments)}var f=[u(1116352408,3609767458),u(1899447441,602891725),u(3049323471,3964484399),u(3921009573,2173295548),u(961987163,4081628472),u(1508970993,3053834265),u(2453635748,2937671579),u(2870763221,3664609560),u(3624381080,2734883394),u(310598401,1164996542),u(607225278,1323610764),u(1426881987,3590304994),u(1925078388,4068182383),u(2162078206,991336113),u(2614888103,633803317),u(3248222580,3479774868),u(3835390401,2666613458),u(4022224774,944711139),u(264347078,2341262773),u(604807628,2007800933),u(770255983,1495990901),u(1249150122,1856431235),u(1555081692,3175218132),u(1996064986,2198950837),u(2554220882,3999719339),u(2821834349,766784016),u(2952996808,2566594879),u(3210313671,3203337956),u(3336571891,1034457026),u(3584528711,2466948901),u(113926993,3758326383),u(338241895,168717936),u(666307205,1188179964),u(773529912,1546045734),u(1294757372,1522805485),u(1396182291,2643833823),u(1695183700,2343527390),u(1986661051,1014477480),u(2177026350,1206759142),u(2456956037,344077627),u(2730485921,1290863460),u(2820302411,3158454273),u(3259730800,3505952657),u(3345764771,106217008),u(3516065817,3606008344),u(3600352804,1432725776),u(4094571909,1467031594),u(275423344,851169720),u(430227734,3100823752),u(506948616,1363258195),u(659060556,3750685593),u(883997877,3785050280),u(958139571,3318307427),u(1322822218,3812723403),u(1537002063,2003034995),u(1747873779,3602036899),u(1955562222,1575990012),u(2024104815,1125592928),u(2227730452,2716904306),u(2361852424,442776044),u(2428436474,593698344),u(2756734187,3733110249),u(3204031479,2999351573),u(3329325298,3815920427),u(3391569614,3928383900),u(3515267271,566280711),u(3940187606,3454069534),u(4118630271,4000239992),u(116418474,1914138554),u(174292421,2731055270),u(289380356,3203993006),u(460393269,320620315),u(685471733,587496836),u(852142971,1086792851),u(1017036298,365543100),u(1126000580,2618297676),u(1288033470,3409855158),u(1501505948,4234509866),u(1607167915,987167468),u(1816402316,1246189591)],d=[];(function(){for(var _=0;_<80;_++)d[_]=u()})();var g=l.SHA512=o.extend({_doReset:function(){this._hash=new c.init([new s.init(1779033703,4089235720),new s.init(3144134277,2227873595),new s.init(1013904242,4271175723),new s.init(2773480762,1595750129),new s.init(1359893119,2917565137),new s.init(2600822924,725511199),new s.init(528734635,4215389547),new s.init(1541459225,327033209)])},_doProcessBlock:function(_,h){for(var A=this._hash.words,m=A[0],y=A[1],b=A[2],B=A[3],v=A[4],M=A[5],D=A[6],I=A[7],C=m.high,E=m.low,N=y.high,S=y.low,k=b.high,Q=b.low,w=B.high,T=B.low,O=v.high,P=v.low,F=M.high,L=M.low,G=D.high,Y=D.low,U=I.high,V=I.low,q=C,X=E,te=N,H=S,Z=k,ie=Q,se=w,ce=T,re=O,x=P,ee=F,ge=L,J=G,z=Y,ne=U,ue=V,le=0;le<80;le++){var Ae,_e,we=d[le];if(le<16)_e=we.high=_[h+le*2]|0,Ae=we.low=_[h+le*2+1]|0;else{var ve=d[le-15],me=ve.high,Ce=ve.low,Pe=(me>>>1|Ce<<31)^(me>>>8|Ce<<24)^me>>>7,Qe=(Ce>>>1|me<<31)^(Ce>>>8|me<<24)^(Ce>>>7|me<<25),Fe=d[le-2],ye=Fe.high,Ie=Fe.low,ae=(ye>>>19|Ie<<13)^(ye<<3|Ie>>>29)^ye>>>6,be=(Ie>>>19|ye<<13)^(Ie<<3|ye>>>29)^(Ie>>>6|ye<<26),Ne=d[le-7],Oe=Ne.high,Re=Ne.low,Se=d[le-16],Ye=Se.high,Le=Se.low;Ae=Qe+Re,_e=Pe+Oe+(Ae>>>0<Qe>>>0?1:0),Ae=Ae+be,_e=_e+ae+(Ae>>>0<be>>>0?1:0),Ae=Ae+Le,_e=_e+Ye+(Ae>>>0<Le>>>0?1:0),we.high=_e,we.low=Ae}var Ee=re&ee^~re&J,He=x&ge^~x&z,Ve=q&te^q&Z^te&Z,$e=X&H^X&ie^H&ie,ze=(q>>>28|X<<4)^(q<<30|X>>>2)^(q<<25|X>>>7),xe=(X>>>28|q<<4)^(X<<30|q>>>2)^(X<<25|q>>>7),We=(re>>>14|x<<18)^(re>>>18|x<<14)^(re<<23|x>>>9),Xe=(x>>>14|re<<18)^(x>>>18|re<<14)^(x<<23|re>>>9),De=f[le],Ue=De.high,Ge=De.low,fe=ue+Xe,pe=ne+We+(fe>>>0<ue>>>0?1:0),fe=fe+He,pe=pe+Ee+(fe>>>0<He>>>0?1:0),fe=fe+Ge,pe=pe+Ue+(fe>>>0<Ge>>>0?1:0),fe=fe+Ae,pe=pe+_e+(fe>>>0<Ae>>>0?1:0),Te=xe+$e,Ze=ze+Ve+(Te>>>0<xe>>>0?1:0);ne=J,ue=z,J=ee,z=ge,ee=re,ge=x,x=ce+fe|0,re=se+pe+(x>>>0<ce>>>0?1:0)|0,se=Z,ce=ie,Z=te,ie=H,te=q,H=X,X=fe+Te|0,q=pe+Ze+(X>>>0<fe>>>0?1:0)|0}E=m.low=E+X,m.high=C+q+(E>>>0<X>>>0?1:0),S=y.low=S+H,y.high=N+te+(S>>>0<H>>>0?1:0),Q=b.low=Q+ie,b.high=k+Z+(Q>>>0<ie>>>0?1:0),T=B.low=T+ce,B.high=w+se+(T>>>0<ce>>>0?1:0),P=v.low=P+x,v.high=O+re+(P>>>0<x>>>0?1:0),L=M.low=L+ge,M.high=F+ee+(L>>>0<ge>>>0?1:0),Y=D.low=Y+z,D.high=G+J+(Y>>>0<z>>>0?1:0),V=I.low=V+ue,I.high=U+ne+(V>>>0<ue>>>0?1:0)},_doFinalize:function(){var _=this._data,h=_.words,A=this._nDataBytes*8,m=_.sigBytes*8;h[m>>>5]|=128<<24-m%32,h[(m+128>>>10<<5)+30]=Math.floor(A/4294967296),h[(m+128>>>10<<5)+31]=A,_.sigBytes=h.length*4,this._process();var y=this._hash.toX32();return y},clone:function(){var _=o.clone.call(this);return _._hash=this._hash.clone(),_},blockSize:1024/32});r.SHA512=o._createHelper(g),r.HmacSHA512=o._createHmacHelper(g)}(),n.SHA512})})(sha512);var sha512_sync=sha512.exports;function destroyed(){throw new Error("Method called on destroyed SensitiveBytes instance")}class SensitiveBytesContext{constructor(){de(this,"_a_biguints",[])}random(t){const n=SensitiveBytes.random(t);return this._a_biguints.push(n),n}empty(t){const n=SensitiveBytes.random(t);return this._a_biguints.push(n),n}new(t){const n=new SensitiveBytes(t,this);return this._a_biguints.push(n),n}wipe(){for(const t of this._a_biguints)t.wipe()}}class SensitiveBytes{constructor(t,n=null){this._atu8_data=t,this._kc_context=n}static context(){return new SensitiveBytesContext}static random(t){return new SensitiveBytes(crypto.getRandomValues(new Uint8Array(t)))}static empty(t=0){return new SensitiveBytes(new Uint8Array(t))}get data(){return this._atu8_data}clone(){return new SensitiveBytes(Uint8Array.from(this._atu8_data),this._kc_context)}wipe(){this._atu8_data.fill(0),this.clone=this.wipe=this.diff=this.compare=this.mod=destroyed,Object.defineProperties(this,{data:{get:destroyed},digits:{get:destroyed}})}leftShift(t){if(Number.isInteger(t)||t<0)throw this.wipe(),new Error("Refusing to left shift by argument that is not a non-negative integer");if(t===0)return this.clone();const n=this._atu8_data.byteLength,r=new Uint8Array(n),i=t>>>3,o=this._atu8_data.subarray(i),a=t%8;if(a===0)return r.set(o),new SensitiveBytes(r);const s=255>>>a,c=8-a;let l=0;for(;l<n-1-i;l++)r[l]=(o[l]&s)<<a|o[l+1]>>>c;return i===0&&(r[l]<<=t),new SensitiveBytes(r)}rightShift(t){if(Number.isInteger(t)||t<0)throw this.wipe(),new Error("Refusing to left shift by argument that is not a non-negative integer");if(t===0)return this.clone();const n=this._atu8_data,r=n.byteLength,i=new Uint8Array(r),o=t%8,a=t>>>3;if(o===0)return i.set(n,a),new SensitiveBytes(i);const s=n.subarray(0,r-(t>>>3)),c=8-o;a===0&&(i[0]>>=t);let l=1;for(;l<r-1;l++)i[l]=s[l-1]<<c&255|s[l]>>>o;return new SensitiveBytes(i)}xor(t){const n=this._atu8_data,r=t._atu8_data,i=n.byteLength;if(i!==r.byteLength)throw this.wipe(),t.wipe(),new Error("Refusing to XOR buffers of different byte length");const o=new Uint8Array(i);for(let a=0;a<i;a++)o[a]=n[a]^r[a];return new SensitiveBytes(o)}split(t){const n=this.data,r=n.byteLength,i=[];let o=0;for(let a=0;a<r;a++)t===n[a]&&(i.push(n.subarray(o,a)),o=a+1);return i}}const d_broadcast_global=new BroadcastChannel("global");function global_broadcast(e){d_broadcast_global.postMessage(e),d_broadcast_global.dispatchEvent(new MessageEvent("message",{data:e}))}function global_receive(e){const t=n=>{const r=n.data;if(!r||!r.type)throw new Error("Ignored invalid message received on global broadcast channel");const{type:i,value:o=null}=r,a=e[i];!a||a(o)};return d_broadcast_global.addEventListener("message",t),()=>{d_broadcast_global.removeEventListener("message",t)}}async function global_wait(e,t,n=0){const r=new Error().stack||"";return new Promise((i,o)=>{let a=0;const s=global_receive({[e]:c=>{t(c)&&(s(),clearTimeout(a),i())}});Number.isInteger(n)&&n>0&&(a=globalThis.setTimeout(()=>{s(),o(new Error(`A timeout was reached waiting for the '${e}' event
${r}`))},n))})}const SI_VERSION="0.1.1",XT_SECONDS=1e3,XT_MINUTES=60*XT_SECONDS,NB_MAX_MEMO=188,R_DOMAIN_LOCALHOST=/^(localhost|127.0.0.1)(:\d+)?$/,R_DOMAIN_IP=/^\d+(?:.\d+){3}(:\d+)?$/,R_BECH32=/^([a-z]+)([13])([a-zA-HJ-NP-Z0-9]{25,39})$/,P_PUBLIC_SUFFIX_LIST="https://raw.githubusercontent.com/publicsuffix/list/master/public_suffix_list.dat",P_STARSHELL_DECREES="https://raw.githubusercontent.com/SolarRepublic/wallet-decrees/main/global.json",R_TRANSFER_AMOUNT=/^(\d+)(.+)/,XG_SYNCHRONIZE_PAGINATION_LIMIT=16n,SI_STORE_SECRETS="secrets",SI_STORE_APPS="apps",SI_STORE_APP_POLICIES="app_policies",SI_STORE_AGENTS="agents",SI_STORE_SETTINGS="settings",SI_STORE_ACCOUNTS="accounts",SI_STORE_QUERY_CACHE="query_cache",SI_STORE_TAGS="tags",SI_STORE_MEDIA="media",SI_STORE_PFPS="pfps",SI_STORE_CHAINS="chains",SI_STORE_NETWORKS="networks",SI_STORE_ENTITIES="entities",SI_STORE_EVENTS="events",SI_STORE_INCIDENTS="incidents",SI_STORE_HISTORIES="histories",SI_STORE_WEB_RESOURCES="web_resources",SI_STORE_WEB_APIS="web_apis";function precedes(e,t){return new Version(e).precedes(new Version(t))}class Version{constructor(t){de(this,"_a_parts");this._a_parts=t.split(/\./).map(n=>{const r=n.split("-");return{value:+r[0],tag:r.slice(1).join("-")}})}compare(t){const n=this._a_parts,r=t._a_parts;for(let i=0;i<Math.min(n.length,r.length);i++){const{value:o,tag:a}=n[i],{value:s,tag:c}=r[i];if(a!==c)return NaN;const l=o-s;if(l!==0)return l}return 0}precedes(t){return this.compare(t)===-1}follows(t){return this.compare(t)===1}}async function storage_get(e){return(await browser.storage.local.get([e]))?.[e]||null}async function public_storage_get(e){return await storage_get(`@${e}`)}async function public_storage_put(e,t){const n=`@${e}`;await browser.storage.local.set({[n]:t})}const PublicStorage={async lastSeen(){return await public_storage_get("last_seen")},async isUpgrading(){const e=await PublicStorage.lastSeen();return!e||precedes(e.version,SI_VERSION)},async markSeen(){await public_storage_put("last_seen",{time:Date.now(),version:SI_VERSION})}};class NotAuthenticatedError extends Error{}class AlreadyRegisteredError extends Error{}class InvalidPassphraseError extends Error{}class UnregisteredError extends Error{}class RecoverableVaultError extends Error{}class CorruptedVaultError extends Error{}const ATU8_DUMMY_PHRASE=text_to_buffer("32-character-long-dummy-password"),ATU8_DUMMY_VECTOR=new Uint8Array(crypto.getRandomValues(new Uint8Array(16))),NL_PASSPHRASE_MINIMUM=5,NL_PASSPHRASE_MAXIMUM=1024;function acceptable(e){return typeof e=="string"&&e.length>=NL_PASSPHRASE_MINIMUM&&e.length<=NL_PASSPHRASE_MAXIMUM}async function register(e,t=F_NOOP){t("Reading from storage");const n=await Vault.getBase();if(Vault.isValidBase(n))throw new AlreadyRegisteredError;if(!e||!acceptable(e))throw new InvalidPassphraseError;const r=text_to_buffer(e);t("Deriving root keys");const i=crypto.getRandomValues(new Uint8Array(8)),a=new DataView(crypto.getRandomValues(new Uint32Array(2)).buffer).getBigUint64(0,!1);await PublicStorage.markSeen();const{new:{key:s,nonce:c}}=await Vault.deriveRootKeys(r,i,a);t("Generating signature");const l=await Vault.generateRootKeySignature(s);t("Saving to storage"),await Vault.setParsedBase({entropy:i,nonce:c,signature:l})}async function login(e,t=!1,n=F_NOOP){n("Reading from storage");const r=await Vault.getBase();if(!r)throw new UnregisteredError;if(!Vault.isValidBase(r))throw new CorruptedVaultError("Storage is corrupt; root object is missing or partially damaged");const{entropy:i,nonce:o,signature:a,version:s}=Vault.parseBase(r);if(s<1)throw new CorruptedVaultError("Vault reports to be encrypted with an unknown version identifier");if(s>1)throw new CorruptedVaultError("Vault reports to be encrypted with a newer version identifier");if(!e)throw new InvalidPassphraseError;const c=text_to_buffer(e);n("Deriving root keys");const{old:{key:l,vector:u},new:{key:f,vector:d,nonce:g},export:_}=await Vault.deriveRootKeys(c,i,o,!0);try{if(!await Vault.verifyRootKey(l,a))if(await Vault.verifyRootKey(f,a)){if(!t)throw new RecoverableVaultError}else throw new InvalidPassphraseError;n("Rotating keys"),await Vault.recryptAll(l,u,f,d),n("Generating signature");const h=await Vault.generateRootKeySignature(f);n("Saving to storage"),await Vault.setParsedBase({entropy:i,nonce:g,signature:h}),session_storage_is_native?await session_storage_set_native({root:f,vector:d}):await session_storage_set_wrapped({root:Array.from(_.data),vector:Array.from(d)}),_?.wipe(),global_broadcast({type:"login"}),n("Done")}catch(h){throw _?.wipe(),h}}async function logout(){await Vault.clearRootKey()}const a_error_listeners=[];function on_error(e){return a_error_listeners.push(e),()=>{const n=a_error_listeners.indexOf(e);a_error_listeners.splice(n,1)}}function syserr(e){for(const t of a_error_listeners)t(e);return e.error||new Error(e.text)}function syswarn(e){console.warn(e)}var ContactAgentType=(e=>(e.PERSON="person",e.CONTRACT="contract",e))(ContactAgentType||{});const type_check=e=>e,H_MEDIA={"/media.image/sha256.8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156":{hash:"8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156",data:"/media/chain/akash.svg"},"/media.image/sha256.4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4":{hash:"4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4",data:"/media/chain/cosmos-hub.svg"},"/media.image/sha256.da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49":{hash:"da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49",data:"/media/chain/dvpn.png"},"/media.image/sha256.8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af":{hash:"8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af",data:"/media/chain/iris.svg"},"/media.image/sha256.e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb":{hash:"e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb",data:"/media/chain/juno.svg"},"/media.image/sha256.0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625":{hash:"0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625",data:"/media/chain/luna.svg"},"/media.image/sha256.668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27":{hash:"668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27",data:"/media/chain/monero.svg"},"/media.image/sha256.63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655":{hash:"63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655",data:"/media/chain/osmosis.svg"},"/media.image/sha256.9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056":{hash:"9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056",data:"/media/chain/regen.png"},"/media.image/sha256.b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5":{hash:"b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5",data:"/media/chain/secret-network.svg"},"/media.image/sha256.4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f":{hash:"4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f",data:"/media/token/secret-secret.svg"},"/media.image/sha256.af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc":{hash:"af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc",data:"/media/vendor/logo-128px.png"},"/media.image/sha256.a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b":{hash:"a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b",data:"/media/vendor/logo-192px.png"},"/media.image/sha256.adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e":{hash:"adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e",data:"/media/vendor/logo-256px.png"},"/media.image/sha256.345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1":{hash:"345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1",data:"/media/vendor/logo-32px.png"},"/media.image/sha256.9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13":{hash:"9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13",data:"/media/vendor/logo-48px.png"},"/media.image/sha256.4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7":{hash:"4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7",data:"/media/vendor/logo-64px.png"},"/media.image/sha256.ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196":{hash:"ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196",data:"/media/vendor/logo-96px.png"},"/media.image/sha256.602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412":{hash:"602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412",data:"/media/vendor/logo.svg"},"/media.image/sha256.861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15":{hash:"861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15",data:"/media/vendor/orb-1.png"},"/media.image/sha256.88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e":{hash:"88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e",data:"/media/vendor/orb-1.svg"},"/media.image/sha256.cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b":{hash:"cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b",data:"/media/vendor/title.svg"},"/media.image/sha256.6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622":{hash:"6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622",data:"/media/other/secret-saturn.png"},"/media.image/sha256.3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff":{hash:"3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff",data:"/media/other/supdoggie.png"}},H_MEDIA_LOOKUP={"/media/chain/akash.svg":"/media.image/sha256.8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156","/media/chain/cosmos-hub.svg":"/media.image/sha256.4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4","/media/chain/dvpn.png":"/media.image/sha256.da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49","/media/chain/iris.svg":"/media.image/sha256.8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af","/media/chain/juno.svg":"/media.image/sha256.e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb","/media/chain/luna.svg":"/media.image/sha256.0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625","/media/chain/monero.svg":"/media.image/sha256.668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27","/media/chain/osmosis.svg":"/media.image/sha256.63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655","/media/chain/regen.png":"/media.image/sha256.9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056","/media/chain/secret-network.svg":"/media.image/sha256.b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5","/media/token/secret-secret.svg":"/media.image/sha256.4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f","/media/vendor/logo-128px.png":"/media.image/sha256.af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc","/media/vendor/logo-192px.png":"/media.image/sha256.a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b","/media/vendor/logo-256px.png":"/media.image/sha256.adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e","/media/vendor/logo-32px.png":"/media.image/sha256.345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1","/media/vendor/logo-48px.png":"/media.image/sha256.9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13","/media/vendor/logo-64px.png":"/media.image/sha256.4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7","/media/vendor/logo-96px.png":"/media.image/sha256.ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196","/media/vendor/logo.svg":"/media.image/sha256.602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412","/media/vendor/orb-1.png":"/media.image/sha256.861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15","/media/vendor/orb-1.svg":"/media.image/sha256.88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e","/media/vendor/title.svg":"/media.image/sha256.cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b","/media/other/secret-saturn.png":"/media.image/sha256.6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622","/media/other/supdoggie.png":"/media.image/sha256.3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff"},H_STORE_INIT_MEDIA=type_check(H_MEDIA),cosmos_bech32s=e=>({acc:{hrp:e,separator:"1"},accpub:{hrp:`${e}pub`,separator:"1"},valoper:{hrp:`${e}valoper`,separator:"1"},valoperpub:{hrp:`${e}valoperpub`,separator:"1"},valcons:{hrp:`${e}valcons`,separator:"1"},valconspub:{hrp:`${e}valconspub`,separator:"1"}}),H_STORE_INIT_PFPS=type_check(fold([{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/vendor/logo.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/chain/cosmos-hub.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/chain/secret-network.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/token/secret-secret.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/other/secret-saturn.png"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/other/supdoggie.png"]}}],(e,t)=>({[`/template.pfp/id.${t}`]:e}))),H_LOOKUP_PFP={};for(const[e,t]of ode(H_STORE_INIT_PFPS))if(t.type==="plain"){const n=H_MEDIA[t.image.default];H_LOOKUP_PFP[n.data]=e}const H_STORE_INIT_CHAINS=type_check({"/family.cosmos/chain.pulsar-2":{name:"Secret Pulsar",pfp:H_LOOKUP_PFP["/media/chain/secret-network.svg"],family:"cosmos",id:"pulsar-2",bech32s:cosmos_bech32s("secret"),bip44:{coinType:529},coins:{SCRT:{decimals:6,denom:"uscrt",name:"Secret",pfp:H_LOOKUP_PFP["/media/chain/secret-network.svg"],extra:{coingecko_id:"secret"}}},tokenInterfaces:["snip-20","snip-21","snip-721","snip-722"],blockExplorer:{base:"https://secretnodes.com/{chain_prefix}",block:"/blocks/{height}",account:"/accounts/{address}",contract:"/contracts/{address}",validator:"/validators/{address}",transaction:"/transactions/{hash}#overview"},testnet:!0},"/family.cosmos/chain.theta-testnet-001":{name:"Cosmos Hub Theta",pfp:H_LOOKUP_PFP["/media/chain/cosmos-hub.svg"],family:"cosmos",id:"theta-testnet-001",bech32s:cosmos_bech32s("cosmos"),bip44:{coinType:118},coins:{ATOM:{decimals:6,denom:"uatom",name:"Cosmos",pfp:H_LOOKUP_PFP["/media/chain/cosmos-hub.svg"],extra:{coingecko_id:"cosmos-hub"}}},tokenInterfaces:["cw-20"],blockExplorer:{base:"https://testnet.cosmos.bigdipper.live",block:"/blocks/{height}",account:"/accounts/{address}",contract:"/contracts/{address}",validator:"/validators/{address}",transaction:"/transactions/{hash}"},testnet:!0}}),H_STORE_INIT_NETWORKS=type_check(fold([{name:"\u{1D54A}ecret \u{1D54A}aturn",pfp:H_LOOKUP_PFP["/media/other/secret-saturn.png"],chain:"/family.cosmos/chain.pulsar-2",grpcWebUrl:"https://grpc.testnet.secretsaturn.net",rpcHost:"rpc.testnet.secretsaturn.net"},{name:"StarShell",pfp:H_LOOKUP_PFP["/media/vendor/logo.svg"],chain:"/family.cosmos/chain.theta-testnet-001",grpcWebUrl:"https://grpc-web.cosmos-theta.starshell.net",rpcHost:"rpc.cosmos-theta.starshell.net"}],e=>({[`/network.${buffer_to_base64(sha256_sync_insecure(text_to_buffer(e.grpcWebUrl)))}`]:e}))),H_STORE_INIT_APPS=type_check(fold([{scheme:"https",host:"app.starshell.net",connections:{},pfp:H_LOOKUP_PFP["/media/vendor/logo.svg"]},{scheme:"https",host:"faucet.secrettestnet.io",connections:{},pfp:""},{scheme:"https",host:"faucet.pulsar.scrttestnet.com",connections:{},pfp:""}],e=>({[`/scheme.${e.scheme}/host.${e.host.replace(/:/g,"+")}`]:e}))),H_STORE_INIT_AGENTS=type_check(fold([{name:"supdoggie",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:H_LOOKUP_PFP["/media/other/supdoggie.png"],address:"lhr6lnhscpdlrpjuat7jstar8snhhkguaemesd",origin:"built-in"},{name:"faucet.secrettestnet.io",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:"",address:"3fqtu0lxsvn8gtlf3mz5kt75spxv93ssa6vecf",origin:"built-in"},{name:"faucet.pulsar.scrttestnet.com",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:"",address:"3fqtu0lxsvn8gtlf3mz5kt75spxv93ssa6vecf",origin:"built-in"}],e=>({[`/family.${e.family}/agent.${e.address}/as.contact`]:e}))),H_STORE_INITS={[SI_STORE_APPS]:H_STORE_INIT_APPS,[SI_STORE_APP_POLICIES]:{hq:[],user:[]},[SI_STORE_ACCOUNTS]:{},[SI_STORE_AGENTS]:H_STORE_INIT_AGENTS,[SI_STORE_CHAINS]:H_STORE_INIT_CHAINS,[SI_STORE_NETWORKS]:H_STORE_INIT_NETWORKS,[SI_STORE_SETTINGS]:{},[SI_STORE_MEDIA]:H_STORE_INIT_MEDIA,[SI_STORE_PFPS]:H_STORE_INIT_PFPS,[SI_STORE_ENTITIES]:{},[SI_STORE_EVENTS]:[],[SI_STORE_INCIDENTS]:{},[SI_STORE_HISTORIES]:{order:[],syncs:oderom(H_STORE_INIT_CHAINS,e=>({[e]:{}}))},[SI_STORE_SECRETS]:{},[SI_STORE_TAGS]:{registry:oderac({pink:"#D500F9",hot:"#C51162",orange:"#FF4D21",gold:"#FF8622",yellow:"#EEB521",autum:"#7E9E24",grass:"#3A6F16",teal:"#009688",sky:"#1976D2",violet:"#6200EA",gray:"#607D8B",brown:"#795548",bright:"#ffffff"},(e,t,n)=>({index:n,color:t,name:e,info:""})),map:{}},[SI_STORE_QUERY_CACHE]:{},[SI_STORE_WEB_RESOURCES]:{},[SI_STORE_WEB_APIS]:{}};class LockTimeoutError extends Error{constructor(){super("Timed out while waiting for lock")}}function AsyncLockPool$_release(e,t){return()=>{e._a_locks.splice(e._a_locks.indexOf(t),1),e._c_free+=1,queueMicrotask(()=>{if(e._a_awaits.length){const n=e._a_awaits.shift();n.confirm(n.free)}})}}class AsyncLockPool{constructor(t){de(this,"_c_free");de(this,"_a_awaits",[]);de(this,"_a_locks",[]);this._c_free=t}acquire(t=null,n=0){if(0<this._c_free){this._c_free-=1;const r={data:t};return r.free=AsyncLockPool$_release(this,r),this._a_locks.push(r),Promise.resolve(r.free)}else return new Promise((r,i)=>{const o={confirm:r,data:t};if(this._a_awaits.push(o),n>0){const a=setTimeout(()=>{const s=this._a_awaits;s.splice(s.indexOf(o),1),i(new LockTimeoutError)},n);o.free=(...s)=>{clearTimeout(a),AsyncLockPool$_release(this,o)()}}else o.free=AsyncLockPool$_release(this,o)})}}const ATU8_SHA256_STARSHELL=hex_to_buffer(sha256_sync("starshell").toString());hex_to_buffer(sha512_sync("starshell").toString());const N_ITERATIONS=696969,NB_PADDING=512,NB_SALT=32,SI_PRF="SHA-512",NI_DERIVED_AES_KEY=256,NB_RECRYPTION_THRESHOLD=32*1024,GC_DERIVE_ROOT_SIGNING={name:"HMAC",hash:"SHA-256"},GC_DERIVE_ROOT_CIPHER={name:"AES-GCM",length:NI_DERIVED_AES_KEY},GC_HKDF_COMMON={name:"HKDF",hash:"SHA-256",salt:ATU8_SHA256_STARSHELL,info:Uint8Array.from([])},A_STORE_KEYS=["keys",...Object.keys(H_STORE_INITS)],SI_FRAME_LOCAL=crypto.randomUUID().slice(24),hm_privates$3=new WeakMap;async function restore_as_key(e,t,n,r){return Array.isArray(e)?await crypto.subtle.importKey("raw",Uint8Array.from(e),t,!1,r):e}function restore_as_buffer(e){return Array.isArray(e)?Uint8Array.from(e):e}const{session_storage_get,session_storage_set_native,session_storage_set_wrapped,session_storage_remove,session_storage_clear,session_storage_is_native}=(()=>{if(browser.storage.session){const e=browser.storage.session;return{async session_storage_get(t){return(await e.get([t]))[t]},session_storage_set_native(t){throw new Error("Implementation bug; cannot use native session storage")},async session_storage_set_wrapped(t){return await e.set(t)},async session_storage_remove(t){return await e.remove(t)},async session_storage_clear(){return await e.clear()},session_storage_is_native:!1}}else{const e=browser.extension.getBackgroundPage();if(!e)throw new Error("Browser does not support any type of session storage");let t=e._g_session={};return{async session_storage_get(n){return t[n]??null},async session_storage_set_native(n){for(const[r,i]of ode(n))session_storage_remove(r),t[r]=i},async session_storage_set_wrapped(n){throw new Error("Implementation bug; cannot use wrapped session storage")},async session_storage_remove(n){const r=t[n];r&&typeof r=="object"&&(Array.isArray(r)||ArrayBuffer.isView(r))&&zero_out(r),delete t[n]},async session_storage_clear(){for(const[n,r]of ode(t))session_storage_remove(n);e._g_session=t={}},session_storage_is_native:!0}}})();async function session_storage_set_isomorphic(e){session_storage_is_native?await session_storage_set_native(e):await session_storage_set_wrapped(e)}async function hkdf_params(){const e=await Vault.getBase();let t;if(Vault.isValidBase(e)){if(t=await Vault.getSalt(),!t||NB_SALT!==t.byteLength)throw new Error("Vault is irreparably corrupted. No salt was found.")}else t=crypto.getRandomValues(new Uint8Array(NB_SALT)),await Vault.setSalt(t);return{...GC_HKDF_COMMON,salt:t}}function pbkdf2_derive2(e,t=0){return async function(n){return new SensitiveBytes(new Uint8Array(await crypto.subtle.deriveBits({name:"PBKDF2",salt:e,iterations:t?Math.ceil(N_ITERATIONS*t):N_ITERATIONS,hash:SI_PRF},n,256)))}}class DecryptionError extends Error{constructor(t){super("Failed to decrypt data: "+t),this.original=t}}async function decrypt(e,t,n,r=ATU8_SHA256_STARSHELL){try{return new Uint8Array(await crypto.subtle.decrypt({name:"AES-GCM",iv:n,additionalData:r},t,e))}catch(i){throw new DecryptionError(i)}}class EncryptionError extends Error{constructor(t){super("Failed to encrypt data: "+t),this.original=t}}async function encrypt(e,t,n,r=ATU8_SHA256_STARSHELL){try{return new Uint8Array(await crypto.subtle.encrypt({name:"AES-GCM",iv:n,additionalData:r},t,e))}catch(i){throw new EncryptionError(i)}}const h_release_waiters_local={},h_lock_pools={},Vault={async getBase(){return await storage_get("base")||void 0},isValidBase(e){return!!e&&typeof e=="object"&&typeof e.version=="number"&&typeof e.entropy=="string"&&typeof e.nonce=="string"&&typeof e.signature=="string"},parseBase(e){return{version:e.version,entropy:hex_to_buffer(e.entropy),nonce:BigInt(e.nonce),signature:hex_to_buffer(e.signature)}},async setParsedBase(e){return await browser.storage.local.set({base:{version:1,entropy:buffer_to_hex(e.entropy),nonce:e.nonce+"",signature:buffer_to_hex(e.signature)}})},async eraseBase(){return await browser.storage.local.remove(["base"])},async getSalt(){const e=await storage_get("salt");return e?hex_to_buffer(e):void 0},async setSalt(e){return await browser.storage.local.set({salt:buffer_to_hex(e)})},async getRootKey(){const e=await session_storage_get("root");return e?await restore_as_key(e,"HKDF",!1,["deriveKey"]):null},async clearRootKey(){let e;browser.extension.getBackgroundPage&&(e=browser.extension.getBackgroundPage())&&delete e._dk_root,global_broadcast({type:"logout"}),await Promise.all([session_storage_clear()])},deriveRootBits(e,t,n=0){return crypto.subtle.importKey("raw",e,"PBKDF2",!1,["deriveBits"]).then(pbkdf2_derive2(t,n))},async deriveRootKeys(e,t,n,r=!1){const i=(n+1n)%2n**64n,o=new Uint8Array(16),a=new Uint8Array(16);o.set(t,0),a.set(t,0),new DataView(o.buffer).setBigUint64(8,n,!1),new DataView(a.buffer).setBigUint64(8,i,!1);let s=0;const c=await PublicStorage.lastSeen();c||(s=20/N_ITERATIONS),(!c||+c.version.replace(/^v?0\.0\./,"")<=6)&&(await browser.storage.local.remove("chains"),await browser.storage.local.remove("agents"),await browser.storage.local.remove("networks"),await browser.storage.local.remove("contacts"),await browser.storage.local.remove("apps"));const[l,u]=await Promise.all([Vault.deriveRootBits(e,o,s),Vault.deriveRootBits(e,a)]);zero_out(e);const[f,d]=await Promise.all([crypto.subtle.importKey("raw",l.data,"HKDF",!1,["deriveKey"]),crypto.subtle.importKey("raw",u.data,"HKDF",!1,["deriveKey"])]);return l.wipe(),r||u.wipe(),await PublicStorage.markSeen(),{old:{key:f,vector:o,nonce:n},new:{key:d,vector:a,nonce:i},export:r?u:null}},async cipherKey(e,t=!1){return crypto.subtle.deriveKey(await hkdf_params(),e,GC_DERIVE_ROOT_CIPHER,!0,t?["encrypt","decrypt"]:["decrypt"])},async signatureKey(e,t=!1){return crypto.subtle.deriveKey(await hkdf_params(),e,GC_DERIVE_ROOT_SIGNING,!1,t?["sign"]:["verify"])},async generateRootKeySignature(e){const t=await Vault.signatureKey(e,!0);return new Uint8Array(await crypto.subtle.sign("HMAC",t,ATU8_SHA256_STARSHELL))},async verifyRootKey(e,t){const n=await Vault.signatureKey(e,!1);return await crypto.subtle.verify("HMAC",n,t,ATU8_SHA256_STARSHELL)},async recryptAll(e,t,n,r){const i=[];let o=0;const[a,s]=await Promise.all([Vault.cipherKey(e,!1),Vault.cipherKey(n,!0)]);for(const c of A_STORE_KEYS){const l=await storage_get(c);if(!l)continue;const u=string8_to_buffer(l);o+=u.byteLength,i.push((async()=>{let f;try{f=await decrypt(u,a,t)}catch{f=await decrypt(u,s,t)}const d=await encrypt(f,s,r);await browser.storage.local.set({[c]:buffer_to_string8(d)}),o-=u.byteLength})()),o>NB_RECRYPTION_THRESHOLD&&(await Promise.all(i),i.length=0)}await Promise.all(i)},async peekJson(e,t){return(await Vault.readonly(e)).readJson(t)},async readonly(e){const t=await storage_get(e);return new VaultEntry(e,t??"")},async acquire(e,t=0){const n=`lock_${e}`,r=h_lock_pools[n]=h_lock_pools[n]||new AsyncLockPool(1);let i=F_NOOP;try{i=await r.acquire(null,1e4)}catch(l){throw l instanceof LockTimeoutError?new Error(`Timed out while waiting for ${n} on same thread`):l}const o=await session_storage_get(n);if(o){const[l,u]=o.split(":");if(SI_FRAME_LOCAL===l)await new Promise(f=>{let d=0;(h_release_waiters_local[e]=h_release_waiters_local[e]||[]).push(()=>{clearTimeout(d),f(void 0)}),d=globalThis.setTimeout(()=>{syserr({title:"I/O Error",text:`Local lock on '${e}' lasted more than 5 seconds; possible disk error or bug in implementation.`})},5e3)});else{console.warn(`'${e}' store is currently locked on a remote frame: ${o}; waiting for release`);try{await global_wait("releaseStore",f=>e===f.key,5e3)}catch{syswarn({text:"Recovered from previous interrupted shutdown."}),await session_storage_remove(`lock_${e}`)}console.warn(`'${e}' store was released`)}}const a=SI_FRAME_LOCAL+":"+crypto.randomUUID().slice(24);await session_storage_set_isomorphic({[n]:a});const s=await session_storage_get(n);if(a!==s){if(t>10)throw new Error(`Exceeded maximum retry count while trying to checkout "${e}" from the vault`);return await Vault.acquire(e,t+1)}global_broadcast({type:"acquireStore",value:{key:e}});const c=await storage_get(e);return new WritableVaultEntry(e,c??"",i)}};function VaultEntry$_fields(e){const t=hm_privates$3.get(e);if(!t)throw new Error(`Attempted to use '${e._si_key}' store after it was released or it was never opened for writing.`);return t}class VaultEntry{constructor(t,n){this._si_key=t,hm_privates$3.set(this,{atu8_ciphertext:string8_to_buffer(n)})}async read(t){const n=restore_as_buffer(await session_storage_get("vector"));if(!n)throw new NotAuthenticatedError;const r=VaultEntry$_fields(this);if(!r.atu8_ciphertext.byteLength)return new Uint8Array(0);const i=await decrypt(r.atu8_ciphertext,t,n);if(i[0]!==0)return i;const a=new DataView(i.buffer).getUint32(0);return i.subarray(4,a+4)}async readJson(t){let n={};try{const r=await this.read(t);if(!r.byteLength)return null;n=JSON.parse(buffer_to_text(r)),zero_out(r)}catch(r){try{this instanceof WritableVaultEntry&&this.release()}catch{}throw r}return n}}class WritableVaultEntry extends VaultEntry{constructor(t,n,r=F_NOOP){super(t,n),this._f_release=r}async release(){if(VaultEntry$_fields(this),hm_privates$3.delete(this),await session_storage_remove(`lock_${this._si_key}`),this._si_key in h_release_waiters_local)for(const t of h_release_waiters_local[this._si_key])t();this._f_release(),global_broadcast({type:"releaseStore",value:{key:this._si_key}})}async write(t,n,r=!1){const i=VaultEntry$_fields(this),o=restore_as_buffer(await session_storage_get("vector"));if(!o)throw new NotAuthenticatedError;const a=t.byteLength,s=Math.ceil((a+4)/NB_PADDING)*NB_PADDING-4,c=crypto.getRandomValues(new Uint8Array(s-a)),l=concat([new Uint8Array(4),t,c]);new DataView(l.buffer).setUint32(0,a);const f=await encrypt(l,n,o);await browser.storage.local.set({[this._si_key]:buffer_to_string8(f)}),zero_out(i.atu8_ciphertext),i.atu8_ciphertext=f,queueMicrotask(()=>{global_broadcast({type:"updateStore",value:{key:this._si_key,init:r}})})}async writeJson(t,n,r=!1){const i=text_to_buffer(JSON.stringify(t));return await this.write(i,n,r)}}const hm_privates$2=new WeakMap;class WritableStore{constructor(t,n,r){this._kv_store=t,this._w_cache=n,hm_privates$2.set(this,{dk_cipher:r})}get raw(){return this._w_cache}release(){return this._kv_store.release()}save(t=!1){return this._kv_store.writeJson(this._w_cache,hm_privates$2.get(this).dk_cipher,t)}}class WritableStoreMap extends WritableStore{*[Symbol.iterator](){for(const t of ode(this._w_cache))yield t}at(t){return this._w_cache[t]??null}reduce(t){return oderac(this._w_cache,t)}entries(){return ode(this._w_cache)}}class WritableStoreDict extends WritableStore{get(t){return this._w_cache[t]??null}async set(t,n){this._w_cache[t]=n,await this.save()}}async function fetch_cipher(){const e=await Vault.getRootKey();if(!e)throw new NotAuthenticatedError;return await Vault.cipherKey(e,!0)}function create_store_class({store:e,class:t,extension:n}){return Object.assign(t,{async open(r){const i=await fetch_cipher(),o=await Vault.acquire(e);let a=await o.readJson(i),s=!1;a||(a=H_STORE_INITS[e],s=!0);const c=new t(o,a,i);s&&await c.save(!0);const l=await r(c);return await c.release(),l},async read(){const r=await fetch_cipher(),i=await Vault.readonly(e),o=await i.readJson(r);return o?new t(i,o,r):t.open(a=>a)},...n==="array"&&{async prepend(r){return await t.open(i=>i.prepend(r))},async append(r){return await t.open(i=>i.append(r))}},...n==="map"&&{async at(r){return await t.open(i=>i.at(r))}},...n==="dict"&&{async get(r){return await t.open(i=>i.get(r))},async set(r,i){return await t.open(o=>o.set(r,i))}}})}function subscribe_store(e,t){return global_receive({updateStore({key:n,init:r}){n===e&&t(r)}})}(async()=>await instantiateRipemd160())();const Chains=create_store_class({store:SI_STORE_CHAINS,class:class Me extends WritableStoreMap{static pathFor(t,n){return`/family.${t}/chain.${n}`}static pathFrom(t){return Me.pathFor(t.family,t.id)}static addressFor(t,n=yw_chain.get(),r=n.bech32s.acc){const i=sha256_sync$1(base64_to_buffer(t)),o=ripemd160_sync(i);return bech32.encode(r.hrp,bech32.toWords(o))}static bech32(t,n=yw_chain.get(),r=n.bech32s.acc){return`${r.hrp}${r.separator}${t}`}static get(t,n){return Chains.read().then(r=>r.get(t,n))}static at(t){return Chains.read().then(n=>n.at(t))}static blockExplorer(t,n,r=yw_chain.get()){let i=r.blockExplorer.base+r.blockExplorer[t];for(const o in n)i=i.replace(`{${o}}`,n[o]);return i}static isValidAddressFor(t,n,r="acc"){if(t.bech32s){const i=R_BECH32.exec(n);return i&&i[1]===t.bech32s[r].hrp&&i[2]===t.bech32s[r].separator}else return!1}static coinFromDenom(t,n=yw_chain.get()){for(const[r,i]of ode(n.coins))if(t===i.denom)return r;return""}*inFamily(t){const n=Me.pathFor(t,"");for(const[r,i]of ode(this._w_cache))r.startsWith(n)&&(yield[r,i])}get(t,n){const r=Me.pathFor(t,n);return this._w_cache[r]??null}async put(t){const n=Me.pathFrom(t);return this._w_cache[n]=t,await this.save(),n}}}),TokenRegistry={"cw-20":{attributes:{fungible:!1}},"snip-20":{attributes:{fungible:!0}},"snip-21":{extends:"snip-20",attributes:{fungible:!0}},"snip-721":{attributes:{fungible:!1}},"snip-722":{extends:"snip-721",attributes:{fungible:!1}}},Entities=create_store_class({store:SI_STORE_ENTITIES,class:class extends WritableStoreDict{static pathFrom(t,n=yw_chain.get()){return`${Chains.pathFrom(n)}/bech32.${t.bech32}`}static parseEntityPath(t){const n=t.slice(1).split("/");if(n.length<3||!n[0].startsWith("family.")||!n[1].startsWith("chain.")||!n[2].startsWith("bech32."))return null;let r,i="";if(n[3]==="as.contract")r="contract";else if(n[3]==="as.token")r="token";else if(n[3].startsWith("holding."))r="holding",i=n[3].slice(n[3].indexOf(".")+1);else return null;const o="/"+n.slice(0,2).join("/");return{chainRef:o,entityRef:`${o}/${n[3]}`,bech32:n[2].slice(n[2].indexOf(".")+1),type:r,...i&&{coin:i}}}static holdingPathFor(t,n,r=yw_chain_ref.get()){return`${r}/bech32.${t}/holding.${n}`}static async readTokens(t,n=null){return(await Entities.read()).tokens(Chains.pathFrom(t),n)}static async readFungibleTokens(t){const n=await Entities.read(),r=fold(t.tokenInterfaces,i=>TokenRegistry[i].attributes.fungible?{[i]:{}}:{});return n.tokens(Chains.pathFrom(t),r)}static fungibleInterfacesFor(t){return fold(t.tokenInterfaces,n=>TokenRegistry[n].attributes.fungible?{[n]:{}}:{})}static async infoForToken(t){}filteredMap(t){const n=this._w_cache,r={};for(const i in n){const o=t(i,n[i]);o&&(r[i]=o)}return r}every(t){const n=this._w_cache;for(const r in n)if(!t(r,n[r]))return!1;return!0}tokens(t,n=null){const r={};return this.every((i,o)=>{let a;if(i.startsWith(t)&&(a=o["as.contract"]))for(const s in a){if(!s.startsWith("token."))continue;const c=s.slice(6);(!n||c in n)&&(r[c][i]=a[s])}return!0}),r}}});class MemoAccountError extends Error{constructor(t,n,r){super(t),this._sa_owner=n,this._g_chain=r}get owner(){return this._sa_owner}get chain(){return this._g_chain}}class UnpublishedAccountError extends MemoAccountError{constructor(t,n){super(`Owner ${t} has not signed any messages yet on ${n.name}.`,t,n)}}class MultipleSignersError extends MemoAccountError{constructor(t,n){super(`Multiple accounts were discovered to be associated with ${t}.`,t,n)}}class WrongKeyTypeError extends MemoAccountError{constructor(t,n){super(`Encountered the wrong type of key for ${t} on ${n.name}.`,t,n)}}class NetworkTimeoutError extends Error{constructor(){super("Network request timed out.")}}const Networks=create_store_class({store:SI_STORE_NETWORKS,extension:"map",class:class nt extends WritableStoreMap{static pathFor(t){return`/network.${buffer_to_base64(sha256_sync$1(text_to_buffer(t)))}`}static pathFrom(t){return nt.pathFor(t.grpcWebUrl)}static activate(t,n=yw_chain.get()){return new CosmosNetwork(t,n)}static async activateDefaultFor(t=yw_chain.get()){const n=Chains.pathFrom(t),r=await Networks.read();for(const[i,o]of r.entries())if(n===o.chain)return nt.activate(o,t);throw new Error(`No network provider found for chain ${n}`)}}}),QueryCache=create_store_class({store:SI_STORE_QUERY_CACHE,extension:"map",class:class extends WritableStoreMap{async set(t,n){this._w_cache[t]=n,await this.save()}}});var grpcWebClient_umd$1={exports:{}};(function(e,t){(function(n,r){e.exports=r()})(commonjsGlobal,function(){return n={418:function(i,o){(function(a,s){for(var c in s)a[c]=s[c]})(o,function(a){var s={};function c(l){if(s[l])return s[l].exports;var u=s[l]={i:l,l:!1,exports:{}};return a[l].call(u.exports,u,u.exports,c),u.l=!0,u.exports}return c.m=a,c.c=s,c.i=function(l){return l},c.d=function(l,u,f){c.o(l,u)||Object.defineProperty(l,u,{configurable:!1,enumerable:!0,get:f})},c.n=function(l){var u=l&&l.__esModule?function(){return l.default}:function(){return l};return c.d(u,"a",u),u},c.o=function(l,u){return Object.prototype.hasOwnProperty.call(l,u)},c.p="",c(c.s=1)}([function(a,s,c){Object.defineProperty(s,"__esModule",{value:!0});var l=c(3),u=function(){function f(d,g){d===void 0&&(d={}),g===void 0&&(g={splitValues:!1});var _,h=this;this.headersMap={},d&&(typeof Headers<"u"&&d instanceof Headers?l.getHeaderKeys(d).forEach(function(A){l.getHeaderValues(d,A).forEach(function(m){g.splitValues?h.append(A,l.splitHeaderValue(m)):h.append(A,m)})}):typeof(_=d)=="object"&&typeof _.headersMap=="object"&&typeof _.forEach=="function"?d.forEach(function(A,m){h.append(A,m)}):typeof Map<"u"&&d instanceof Map?d.forEach(function(A,m){h.append(m,A)}):typeof d=="string"?this.appendFromString(d):typeof d=="object"&&Object.getOwnPropertyNames(d).forEach(function(A){var m=d[A];Array.isArray(m)?m.forEach(function(y){h.append(A,y)}):h.append(A,m)}))}return f.prototype.appendFromString=function(d){for(var g=d.split(`\r
`),_=0;_<g.length;_++){var h=g[_],A=h.indexOf(":");if(A>0){var m=h.substring(0,A).trim(),y=h.substring(A+1).trim();this.append(m,y)}}},f.prototype.delete=function(d,g){var _=l.normalizeName(d);if(g===void 0)delete this.headersMap[_];else{var h=this.headersMap[_];if(h){var A=h.indexOf(g);A>=0&&h.splice(A,1),h.length===0&&delete this.headersMap[_]}}},f.prototype.append=function(d,g){var _=this,h=l.normalizeName(d);Array.isArray(this.headersMap[h])||(this.headersMap[h]=[]),Array.isArray(g)?g.forEach(function(A){_.headersMap[h].push(l.normalizeValue(A))}):this.headersMap[h].push(l.normalizeValue(g))},f.prototype.set=function(d,g){var _=l.normalizeName(d);if(Array.isArray(g)){var h=[];g.forEach(function(A){h.push(l.normalizeValue(A))}),this.headersMap[_]=h}else this.headersMap[_]=[l.normalizeValue(g)]},f.prototype.has=function(d,g){var _=this.headersMap[l.normalizeName(d)];if(!Array.isArray(_))return!1;if(g!==void 0){var h=l.normalizeValue(g);return _.indexOf(h)>=0}return!0},f.prototype.get=function(d){var g=this.headersMap[l.normalizeName(d)];return g!==void 0?g.concat():[]},f.prototype.forEach=function(d){var g=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(_){d(_,g.headersMap[_])},this)},f.prototype.toHeaders=function(){if(typeof Headers<"u"){var d=new Headers;return this.forEach(function(g,_){_.forEach(function(h){d.append(g,h)})}),d}throw new Error("Headers class is not defined")},f}();s.BrowserHeaders=u},function(a,s,c){Object.defineProperty(s,"__esModule",{value:!0});var l=c(0);s.BrowserHeaders=l.BrowserHeaders},function(a,s,c){Object.defineProperty(s,"__esModule",{value:!0}),s.iterateHeaders=function(l,u){for(var f=l[Symbol.iterator](),d=f.next();!d.done;)u(d.value[0]),d=f.next()},s.iterateHeadersKeys=function(l,u){for(var f=l.keys(),d=f.next();!d.done;)u(d.value),d=f.next()}},function(a,s,c){Object.defineProperty(s,"__esModule",{value:!0});var l=c(2);s.normalizeName=function(u){if(typeof u!="string"&&(u=String(u)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(u))throw new TypeError("Invalid character in header field name");return u.toLowerCase()},s.normalizeValue=function(u){return typeof u!="string"&&(u=String(u)),u},s.getHeaderValues=function(u,f){var d=u;if(d instanceof Headers&&d.getAll)return d.getAll(f);var g=d.get(f);return g&&typeof g=="string"?[g]:g},s.getHeaderKeys=function(u){var f=u,d={},g=[];return f.keys?l.iterateHeadersKeys(f,function(_){d[_]||(d[_]=!0,g.push(_))}):f.forEach?f.forEach(function(_,h){d[h]||(d[h]=!0,g.push(h))}):l.iterateHeaders(f,function(_){var h=_[0];d[h]||(d[h]=!0,g.push(h))}),g},s.splitHeaderValue=function(u){var f=[];return u.split(", ").forEach(function(d){d.split(",").forEach(function(g){f.push(g)})}),f}}]))},617:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.ChunkParser=o.ChunkType=o.encodeASCII=o.decodeASCII=void 0;var s,c=a(65);function l(A){return(m=A)===9||m===10||m===13||A>=32&&A<=126;var m}function u(A){for(var m=0;m!==A.length;++m)if(!l(A[m]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(A))}function f(A){return(128&A.getUint8(0))==128}function d(A){return A.getUint32(1,!1)}function g(A,m,y){return A.byteLength-m>=y}function _(A,m,y){if(A.slice)return A.slice(m,y);var b=A.length;y!==void 0&&(b=y);for(var B=new Uint8Array(b-m),v=0,M=m;M<b;M++)B[v++]=A[M];return B}o.decodeASCII=u,o.encodeASCII=function(A){for(var m=new Uint8Array(A.length),y=0;y!==A.length;++y){var b=A.charCodeAt(y);if(!l(b))throw new Error("Metadata contains invalid ASCII");m[y]=b}return m},function(A){A[A.MESSAGE=1]="MESSAGE",A[A.TRAILERS=2]="TRAILERS"}(s=o.ChunkType||(o.ChunkType={}));var h=function(){function A(){this.buffer=null,this.position=0}return A.prototype.parse=function(m,y){if(m.length===0&&y)return[];var b,B=[];if(this.buffer==null)this.buffer=m,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=m,this.position=0;else{var v=this.buffer.byteLength-this.position,M=new Uint8Array(v+m.byteLength),D=_(this.buffer,this.position);M.set(D,0);var I=new Uint8Array(m);M.set(I,v),this.buffer=M,this.position=0}for(;;){if(!g(this.buffer,this.position,5))return B;var C=_(this.buffer,this.position,this.position+5),E=new DataView(C.buffer,C.byteOffset,C.byteLength),N=d(E);if(!g(this.buffer,this.position,5+N))return B;var S=_(this.buffer,this.position+5,this.position+5+N);if(this.position+=5+N,f(E))return B.push({chunkType:s.TRAILERS,trailers:(b=S,new c.Metadata(u(b)))}),B;B.push({chunkType:s.MESSAGE,data:S})}},A}();o.ChunkParser=h},8:function(i,o){var a;Object.defineProperty(o,"__esModule",{value:!0}),o.httpStatusToCode=o.Code=void 0,function(s){s[s.OK=0]="OK",s[s.Canceled=1]="Canceled",s[s.Unknown=2]="Unknown",s[s.InvalidArgument=3]="InvalidArgument",s[s.DeadlineExceeded=4]="DeadlineExceeded",s[s.NotFound=5]="NotFound",s[s.AlreadyExists=6]="AlreadyExists",s[s.PermissionDenied=7]="PermissionDenied",s[s.ResourceExhausted=8]="ResourceExhausted",s[s.FailedPrecondition=9]="FailedPrecondition",s[s.Aborted=10]="Aborted",s[s.OutOfRange=11]="OutOfRange",s[s.Unimplemented=12]="Unimplemented",s[s.Internal=13]="Internal",s[s.Unavailable=14]="Unavailable",s[s.DataLoss=15]="DataLoss",s[s.Unauthenticated=16]="Unauthenticated"}(a=o.Code||(o.Code={})),o.httpStatusToCode=function(s){switch(s){case 0:return a.Internal;case 200:return a.OK;case 400:return a.InvalidArgument;case 401:return a.Unauthenticated;case 403:return a.PermissionDenied;case 404:return a.NotFound;case 409:return a.Aborted;case 412:return a.FailedPrecondition;case 429:return a.ResourceExhausted;case 499:return a.Canceled;case 500:return a.Unknown;case 501:return a.Unimplemented;case 503:return a.Unavailable;case 504:return a.DeadlineExceeded;default:return a.Unknown}}},934:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.client=void 0;var s=a(65),c=a(617),l=a(8),u=a(346),f=a(57),d=a(882);o.client=function(h,A){return new g(h,A)};var g=function(){function h(A,m){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new c.ChunkParser,this.methodDefinition=A,this.props=m,this.createTransport()}return h.prototype.createTransport=function(){var A=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,m={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:A,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(m):this.transport=f.makeDefaultTransport(m)},h.prototype.onTransportHeaders=function(A,m){if(this.props.debug&&u.debug("onHeaders",A,m),this.closed)this.props.debug&&u.debug("grpc.onHeaders received after request was closed - ignoring");else if(m!==0){this.responseHeaders=A,this.props.debug&&u.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var y=_(A);this.props.debug&&u.debug("onHeaders.gRPCStatus",y);var b=y&&y>=0?y:l.httpStatusToCode(m);this.props.debug&&u.debug("onHeaders.code",b);var B=A.get("grpc-message")||[];if(this.props.debug&&u.debug("onHeaders.gRPCMessage",B),this.rawOnHeaders(A),b!==l.Code.OK){var v=this.decodeGRPCStatus(B[0]);this.rawOnError(b,v,A)}}},h.prototype.onTransportChunk=function(A){var m=this;if(this.closed)this.props.debug&&u.debug("grpc.onChunk received after request was closed - ignoring");else{var y=[];try{y=this.parser.parse(A)}catch(b){return this.props.debug&&u.debug("onChunk.parsing error",b,b.message),void this.rawOnError(l.Code.Internal,"parsing error: "+b.message)}y.forEach(function(b){if(b.chunkType===c.ChunkType.MESSAGE){var B=m.methodDefinition.responseType.deserializeBinary(b.data);m.rawOnMessage(B)}else b.chunkType===c.ChunkType.TRAILERS&&(m.responseHeaders?(m.responseTrailers=new s.Metadata(b.trailers),m.props.debug&&u.debug("onChunk.trailers",m.responseTrailers)):(m.responseHeaders=new s.Metadata(b.trailers),m.rawOnHeaders(m.responseHeaders)))})}},h.prototype.onTransportEnd=function(){if(this.props.debug&&u.debug("grpc.onEnd"),this.closed)this.props.debug&&u.debug("grpc.onEnd received after request was closed - ignoring");else if(this.responseTrailers!==void 0){var A=_(this.responseTrailers);if(A!==null){var m=this.responseTrailers.get("grpc-message"),y=this.decodeGRPCStatus(m[0]);this.rawOnEnd(A,y,this.responseTrailers)}else this.rawOnError(l.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(this.responseHeaders===void 0)return void this.rawOnError(l.Code.Unknown,"Response closed without headers");var b=_(this.responseHeaders),B=this.responseHeaders.get("grpc-message");if(this.props.debug&&u.debug("grpc.headers only response ",b,B),b===null)return void this.rawOnEnd(l.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var v=this.decodeGRPCStatus(B[0]);this.rawOnEnd(b,v,this.responseHeaders)}},h.prototype.decodeGRPCStatus=function(A){if(!A)return"";try{return decodeURIComponent(A)}catch{return A}},h.prototype.rawOnEnd=function(A,m,y){var b=this;this.props.debug&&u.debug("rawOnEnd",A,m,y),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(B){if(!b.closed)try{B(A,m,y)}catch(v){setTimeout(function(){throw v},0)}}))},h.prototype.rawOnHeaders=function(A){this.props.debug&&u.debug("rawOnHeaders",A),this.completed||this.onHeadersCallbacks.forEach(function(m){try{m(A)}catch(y){setTimeout(function(){throw y},0)}})},h.prototype.rawOnError=function(A,m,y){var b=this;y===void 0&&(y=new s.Metadata),this.props.debug&&u.debug("rawOnError",A,m),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(B){if(!b.closed)try{B(A,m,y)}catch(v){setTimeout(function(){throw v},0)}}))},h.prototype.rawOnMessage=function(A){var m=this;this.props.debug&&u.debug("rawOnMessage",A.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach(function(y){if(!m.closed)try{y(A)}catch(b){setTimeout(function(){throw b},0)}})},h.prototype.onHeaders=function(A){this.onHeadersCallbacks.push(A)},h.prototype.onMessage=function(A){this.onMessageCallbacks.push(A)},h.prototype.onEnd=function(A){this.onEndCallbacks.push(A)},h.prototype.start=function(A){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var m=new s.Metadata(A||{});m.set("content-type","application/grpc-web+proto"),m.set("x-grpc-web","1"),this.transport.start(m)},h.prototype.send=function(A){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var m=d.frameRequest(A);this.transport.sendMessage(m)},h.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},h.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&u.debug("request.abort aborting request"),this.transport.cancel()},h}();function _(h){var A=h.get("grpc-status")||[];if(A.length>0)try{var m=A[0];return parseInt(m,10)}catch{return null}return null}},346:function(i,o){Object.defineProperty(o,"__esModule",{value:!0}),o.debug=void 0,o.debug=function(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];console.debug?console.debug.apply(null,a):console.log.apply(null,a)}},607:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.grpc=void 0;var s,c=a(418),l=a(57),u=a(229),f=a(540),d=a(210),g=a(859),_=a(8),h=a(938),A=a(35),m=a(934);(s=o.grpc||(o.grpc={})).setDefaultTransport=l.setDefaultTransportFactory,s.CrossBrowserHttpTransport=g.CrossBrowserHttpTransport,s.FetchReadableStreamTransport=u.FetchReadableStreamTransport,s.XhrTransport=d.XhrTransport,s.WebsocketTransport=f.WebsocketTransport,s.Code=_.Code,s.Metadata=c.BrowserHeaders,s.client=function(y,b){return m.client(y,b)},s.invoke=h.invoke,s.unary=A.unary},938:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.invoke=void 0;var s=a(934);o.invoke=function(c,l){if(c.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var u=s.client(c,{host:l.host,transport:l.transport,debug:l.debug});return l.onHeaders&&u.onHeaders(l.onHeaders),l.onMessage&&u.onMessage(l.onMessage),l.onEnd&&u.onEnd(l.onEnd),u.start(l.metadata),u.send(l.request),u.finishSend(),{close:function(){u.close()}}}},65:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.Metadata=void 0;var s=a(418);Object.defineProperty(o,"Metadata",{enumerable:!0,get:function(){return s.BrowserHeaders}})},57:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.makeDefaultTransport=o.setDefaultTransportFactory=void 0;var s=a(859),c=function(l){return s.CrossBrowserHttpTransport({withCredentials:!1})(l)};o.setDefaultTransportFactory=function(l){c=l},o.makeDefaultTransport=function(l){return c(l)}},229:function(i,o,a){var s=this&&this.__assign||function(){return(s=Object.assign||function(f){for(var d,g=1,_=arguments.length;g<_;g++)for(var h in d=arguments[g])Object.prototype.hasOwnProperty.call(d,h)&&(f[h]=d[h]);return f}).apply(this,arguments)};Object.defineProperty(o,"__esModule",{value:!0}),o.detectFetchSupport=o.FetchReadableStreamTransport=void 0;var c=a(65),l=a(346);o.FetchReadableStreamTransport=function(f){return function(d){return function(g,_){return g.debug&&l.debug("fetchRequest",g),new u(g,_)}(d,f)}};var u=function(){function f(d,g){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=d,this.init=g}return f.prototype.pump=function(d,g){var _=this;if(this.reader=d,this.cancelled)return this.options.debug&&l.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch(function(h){_.options.debug&&l.debug("Fetch.pump.reader.cancel exception",h)});this.reader.read().then(function(h){if(h.done)return _.options.onEnd(),g;_.options.onChunk(h.value),_.pump(_.reader,g)}).catch(function(h){_.cancelled?_.options.debug&&l.debug("Fetch.catch - request cancelled"):(_.cancelled=!0,_.options.debug&&l.debug("Fetch.catch",h.message),_.options.onEnd(h))})},f.prototype.send=function(d){var g=this;fetch(this.options.url,s(s({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:d,signal:this.controller&&this.controller.signal})).then(function(_){if(g.options.debug&&l.debug("Fetch.response",_),g.options.onHeaders(new c.Metadata(_.headers),_.status),!_.body)return _;g.pump(_.body.getReader(),_)}).catch(function(_){g.cancelled?g.options.debug&&l.debug("Fetch.catch - request cancelled"):(g.cancelled=!0,g.options.debug&&l.debug("Fetch.catch",_.message),g.options.onEnd(_))})},f.prototype.sendMessage=function(d){this.send(d)},f.prototype.finishSend=function(){},f.prototype.start=function(d){this.metadata=d},f.prototype.cancel=function(){var d=this;this.cancelled?this.options.debug&&l.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&l.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&l.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&l.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch(function(g){d.options.debug&&l.debug("Fetch.cancel.reader.cancel exception",g)})):this.options.debug&&l.debug("Fetch.cancel before reader"))},f}();o.detectFetchSupport=function(){return typeof Response<"u"&&Response.prototype.hasOwnProperty("body")&&typeof Headers=="function"}},859:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.CrossBrowserHttpTransport=void 0;var s=a(229),c=a(210);o.CrossBrowserHttpTransport=function(l){if(s.detectFetchSupport()){var u={credentials:l.withCredentials?"include":"same-origin"};return s.FetchReadableStreamTransport(u)}return c.XhrTransport({withCredentials:l.withCredentials})}},210:function(i,o,a){var s,c=this&&this.__extends||(s=function(A,m){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(y,b){y.__proto__=b}||function(y,b){for(var B in b)Object.prototype.hasOwnProperty.call(b,B)&&(y[B]=b[B])})(A,m)},function(A,m){function y(){this.constructor=A}s(A,m),A.prototype=m===null?Object.create(m):(y.prototype=m.prototype,new y)});Object.defineProperty(o,"__esModule",{value:!0}),o.stringToArrayBuffer=o.MozChunkedArrayBufferXHR=o.XHR=o.XhrTransport=void 0;var l=a(65),u=a(346),f=a(849);o.XhrTransport=function(A){return function(m){if(f.detectMozXHRSupport())return new g(m,A);if(f.detectXHROverrideMimeTypeSupport())return new d(m,A);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var d=function(){function A(m,y){this.options=m,this.init=y}return A.prototype.onProgressEvent=function(){this.options.debug&&u.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var m=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var y=h(m);this.options.onChunk(y)},A.prototype.onLoadEvent=function(){this.options.debug&&u.debug("XHR.onLoadEvent"),this.options.onEnd()},A.prototype.onStateChange=function(){this.options.debug&&u.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new l.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},A.prototype.sendMessage=function(m){this.xhr.send(m)},A.prototype.finishSend=function(){},A.prototype.start=function(m){var y=this;this.metadata=m;var b=new XMLHttpRequest;this.xhr=b,b.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach(function(B,v){b.setRequestHeader(B,v.join(", "))}),b.withCredentials=Boolean(this.init.withCredentials),b.addEventListener("readystatechange",this.onStateChange.bind(this)),b.addEventListener("progress",this.onProgressEvent.bind(this)),b.addEventListener("loadend",this.onLoadEvent.bind(this)),b.addEventListener("error",function(B){y.options.debug&&u.debug("XHR.error",B),y.options.onEnd(B.error)})},A.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},A.prototype.cancel=function(){this.options.debug&&u.debug("XHR.abort"),this.xhr.abort()},A}();o.XHR=d;var g=function(A){function m(){return A!==null&&A.apply(this,arguments)||this}return c(m,A),m.prototype.configureXhr=function(){this.options.debug&&u.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},m.prototype.onProgressEvent=function(){var y=this.xhr.response;this.options.debug&&u.debug("MozXHR.onProgressEvent: ",new Uint8Array(y)),this.options.onChunk(new Uint8Array(y))},m}(d);function _(A,m){var y=A.charCodeAt(m);if(y>=55296&&y<=56319){var b=A.charCodeAt(m+1);b>=56320&&b<=57343&&(y=65536+(y-55296<<10)+(b-56320))}return y}function h(A){for(var m=new Uint8Array(A.length),y=0,b=0;b<A.length;b++){var B=String.prototype.codePointAt?A.codePointAt(b):_(A,b);m[y++]=255&B}return m}o.MozChunkedArrayBufferXHR=g,o.stringToArrayBuffer=h},849:function(i,o){var a;function s(){if(a!==void 0)return a;if(XMLHttpRequest){a=new XMLHttpRequest;try{a.open("GET","https://localhost")}catch{}}return a}function c(l){var u=s();if(!u)return!1;try{return u.responseType=l,u.responseType===l}catch{}return!1}Object.defineProperty(o,"__esModule",{value:!0}),o.detectXHROverrideMimeTypeSupport=o.detectMozXHRSupport=o.xhrSupportsResponseType=void 0,o.xhrSupportsResponseType=c,o.detectMozXHRSupport=function(){return typeof XMLHttpRequest<"u"&&c("moz-chunked-arraybuffer")},o.detectXHROverrideMimeTypeSupport=function(){return typeof XMLHttpRequest<"u"&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.WebsocketTransport=void 0;var s,c=a(346),l=a(617);(function(f){f[f.FINISH_SEND=1]="FINISH_SEND"})(s||(s={}));var u=new Uint8Array([1]);o.WebsocketTransport=function(){return function(f){return function(d){d.debug&&c.debug("websocketRequest",d);var g,_=function(m){if(m.substr(0,8)==="https://")return"wss://"+m.substr(8);if(m.substr(0,7)==="http://")return"ws://"+m.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(d.url),h=[];function A(m){if(m===s.FINISH_SEND)g.send(u);else{var y=m,b=new Int8Array(y.byteLength+1);b.set(new Uint8Array([0])),b.set(y,1),g.send(b)}}return{sendMessage:function(m){g&&g.readyState!==g.CONNECTING?A(m):h.push(m)},finishSend:function(){g&&g.readyState!==g.CONNECTING?A(s.FINISH_SEND):h.push(s.FINISH_SEND)},start:function(m){(g=new WebSocket(_,["grpc-websockets"])).binaryType="arraybuffer",g.onopen=function(){var y;d.debug&&c.debug("websocketRequest.onopen"),g.send((y="",m.forEach(function(b,B){y+=b+": "+B.join(", ")+`\r
`}),l.encodeASCII(y))),h.forEach(function(b){A(b)})},g.onclose=function(y){d.debug&&c.debug("websocketRequest.onclose",y),d.onEnd()},g.onerror=function(y){d.debug&&c.debug("websocketRequest.onerror",y)},g.onmessage=function(y){d.onChunk(new Uint8Array(y.data))}},cancel:function(){d.debug&&c.debug("websocket.abort"),g.close()}}}(f)}}},35:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.unary=void 0;var s=a(65),c=a(934);o.unary=function(l,u){if(l.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(l.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var f=null,d=null,g=c.client(l,{host:u.host,transport:u.transport,debug:u.debug});return g.onHeaders(function(_){f=_}),g.onMessage(function(_){d=_}),g.onEnd(function(_,h,A){u.onEnd({status:_,statusMessage:h,headers:f||new s.Metadata,message:d,trailers:A})}),g.start(u.metadata),g.send(u.request),g.finishSend(),{close:function(){g.close()}}}},882:function(i,o){Object.defineProperty(o,"__esModule",{value:!0}),o.frameRequest=void 0,o.frameRequest=function(a){var s=a.serializeBinary(),c=new ArrayBuffer(s.byteLength+5);return new DataView(c,1,4).setUint32(0,s.length,!1),new Uint8Array(c,5).set(s),new Uint8Array(c)}}},r={},function i(o){if(r[o])return r[o].exports;var a=r[o]={exports:{}};return n[o].call(a.exports,a,a.exports,i),a.exports}(607);var n,r})})(grpcWebClient_umd$1);var grpcWebClient_umd={exports:{}};(function(e,t){(function(n,r){e.exports=r()})(commonjsGlobal,function(){return n={418:function(i,o){(function(a,s){for(var c in s)a[c]=s[c]})(o,function(a){var s={};function c(l){if(s[l])return s[l].exports;var u=s[l]={i:l,l:!1,exports:{}};return a[l].call(u.exports,u,u.exports,c),u.l=!0,u.exports}return c.m=a,c.c=s,c.i=function(l){return l},c.d=function(l,u,f){c.o(l,u)||Object.defineProperty(l,u,{configurable:!1,enumerable:!0,get:f})},c.n=function(l){var u=l&&l.__esModule?function(){return l.default}:function(){return l};return c.d(u,"a",u),u},c.o=function(l,u){return Object.prototype.hasOwnProperty.call(l,u)},c.p="",c(c.s=1)}([function(a,s,c){Object.defineProperty(s,"__esModule",{value:!0});var l=c(3),u=function(){function f(d,g){d===void 0&&(d={}),g===void 0&&(g={splitValues:!1});var _,h=this;this.headersMap={},d&&(typeof Headers<"u"&&d instanceof Headers?l.getHeaderKeys(d).forEach(function(A){l.getHeaderValues(d,A).forEach(function(m){g.splitValues?h.append(A,l.splitHeaderValue(m)):h.append(A,m)})}):typeof(_=d)=="object"&&typeof _.headersMap=="object"&&typeof _.forEach=="function"?d.forEach(function(A,m){h.append(A,m)}):typeof Map<"u"&&d instanceof Map?d.forEach(function(A,m){h.append(m,A)}):typeof d=="string"?this.appendFromString(d):typeof d=="object"&&Object.getOwnPropertyNames(d).forEach(function(A){var m=d[A];Array.isArray(m)?m.forEach(function(y){h.append(A,y)}):h.append(A,m)}))}return f.prototype.appendFromString=function(d){for(var g=d.split(`\r
`),_=0;_<g.length;_++){var h=g[_],A=h.indexOf(":");if(A>0){var m=h.substring(0,A).trim(),y=h.substring(A+1).trim();this.append(m,y)}}},f.prototype.delete=function(d,g){var _=l.normalizeName(d);if(g===void 0)delete this.headersMap[_];else{var h=this.headersMap[_];if(h){var A=h.indexOf(g);A>=0&&h.splice(A,1),h.length===0&&delete this.headersMap[_]}}},f.prototype.append=function(d,g){var _=this,h=l.normalizeName(d);Array.isArray(this.headersMap[h])||(this.headersMap[h]=[]),Array.isArray(g)?g.forEach(function(A){_.headersMap[h].push(l.normalizeValue(A))}):this.headersMap[h].push(l.normalizeValue(g))},f.prototype.set=function(d,g){var _=l.normalizeName(d);if(Array.isArray(g)){var h=[];g.forEach(function(A){h.push(l.normalizeValue(A))}),this.headersMap[_]=h}else this.headersMap[_]=[l.normalizeValue(g)]},f.prototype.has=function(d,g){var _=this.headersMap[l.normalizeName(d)];if(!Array.isArray(_))return!1;if(g!==void 0){var h=l.normalizeValue(g);return _.indexOf(h)>=0}return!0},f.prototype.get=function(d){var g=this.headersMap[l.normalizeName(d)];return g!==void 0?g.concat():[]},f.prototype.forEach=function(d){var g=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(_){d(_,g.headersMap[_])},this)},f.prototype.toHeaders=function(){if(typeof Headers<"u"){var d=new Headers;return this.forEach(function(g,_){_.forEach(function(h){d.append(g,h)})}),d}throw new Error("Headers class is not defined")},f}();s.BrowserHeaders=u},function(a,s,c){Object.defineProperty(s,"__esModule",{value:!0});var l=c(0);s.BrowserHeaders=l.BrowserHeaders},function(a,s,c){Object.defineProperty(s,"__esModule",{value:!0}),s.iterateHeaders=function(l,u){for(var f=l[Symbol.iterator](),d=f.next();!d.done;)u(d.value[0]),d=f.next()},s.iterateHeadersKeys=function(l,u){for(var f=l.keys(),d=f.next();!d.done;)u(d.value),d=f.next()}},function(a,s,c){Object.defineProperty(s,"__esModule",{value:!0});var l=c(2);s.normalizeName=function(u){if(typeof u!="string"&&(u=String(u)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(u))throw new TypeError("Invalid character in header field name");return u.toLowerCase()},s.normalizeValue=function(u){return typeof u!="string"&&(u=String(u)),u},s.getHeaderValues=function(u,f){var d=u;if(d instanceof Headers&&d.getAll)return d.getAll(f);var g=d.get(f);return g&&typeof g=="string"?[g]:g},s.getHeaderKeys=function(u){var f=u,d={},g=[];return f.keys?l.iterateHeadersKeys(f,function(_){d[_]||(d[_]=!0,g.push(_))}):f.forEach?f.forEach(function(_,h){d[h]||(d[h]=!0,g.push(h))}):l.iterateHeaders(f,function(_){var h=_[0];d[h]||(d[h]=!0,g.push(h))}),g},s.splitHeaderValue=function(u){var f=[];return u.split(", ").forEach(function(d){d.split(",").forEach(function(g){f.push(g)})}),f}}]))},617:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.ChunkParser=o.ChunkType=o.encodeASCII=o.decodeASCII=void 0;var s,c=a(65);function l(A){return(m=A)===9||m===10||m===13||A>=32&&A<=126;var m}function u(A){for(var m=0;m!==A.length;++m)if(!l(A[m]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(A))}function f(A){return(128&A.getUint8(0))==128}function d(A){return A.getUint32(1,!1)}function g(A,m,y){return A.byteLength-m>=y}function _(A,m,y){if(A.slice)return A.slice(m,y);var b=A.length;y!==void 0&&(b=y);for(var B=new Uint8Array(b-m),v=0,M=m;M<b;M++)B[v++]=A[M];return B}o.decodeASCII=u,o.encodeASCII=function(A){for(var m=new Uint8Array(A.length),y=0;y!==A.length;++y){var b=A.charCodeAt(y);if(!l(b))throw new Error("Metadata contains invalid ASCII");m[y]=b}return m},function(A){A[A.MESSAGE=1]="MESSAGE",A[A.TRAILERS=2]="TRAILERS"}(s=o.ChunkType||(o.ChunkType={}));var h=function(){function A(){this.buffer=null,this.position=0}return A.prototype.parse=function(m,y){if(m.length===0&&y)return[];var b,B=[];if(this.buffer==null)this.buffer=m,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=m,this.position=0;else{var v=this.buffer.byteLength-this.position,M=new Uint8Array(v+m.byteLength),D=_(this.buffer,this.position);M.set(D,0);var I=new Uint8Array(m);M.set(I,v),this.buffer=M,this.position=0}for(;;){if(!g(this.buffer,this.position,5))return B;var C=_(this.buffer,this.position,this.position+5),E=new DataView(C.buffer,C.byteOffset,C.byteLength),N=d(E);if(!g(this.buffer,this.position,5+N))return B;var S=_(this.buffer,this.position+5,this.position+5+N);if(this.position+=5+N,f(E))return B.push({chunkType:s.TRAILERS,trailers:(b=S,new c.Metadata(u(b)))}),B;B.push({chunkType:s.MESSAGE,data:S})}},A}();o.ChunkParser=h},8:function(i,o){var a;Object.defineProperty(o,"__esModule",{value:!0}),o.httpStatusToCode=o.Code=void 0,function(s){s[s.OK=0]="OK",s[s.Canceled=1]="Canceled",s[s.Unknown=2]="Unknown",s[s.InvalidArgument=3]="InvalidArgument",s[s.DeadlineExceeded=4]="DeadlineExceeded",s[s.NotFound=5]="NotFound",s[s.AlreadyExists=6]="AlreadyExists",s[s.PermissionDenied=7]="PermissionDenied",s[s.ResourceExhausted=8]="ResourceExhausted",s[s.FailedPrecondition=9]="FailedPrecondition",s[s.Aborted=10]="Aborted",s[s.OutOfRange=11]="OutOfRange",s[s.Unimplemented=12]="Unimplemented",s[s.Internal=13]="Internal",s[s.Unavailable=14]="Unavailable",s[s.DataLoss=15]="DataLoss",s[s.Unauthenticated=16]="Unauthenticated"}(a=o.Code||(o.Code={})),o.httpStatusToCode=function(s){switch(s){case 0:return a.Internal;case 200:return a.OK;case 400:return a.InvalidArgument;case 401:return a.Unauthenticated;case 403:return a.PermissionDenied;case 404:return a.NotFound;case 409:return a.Aborted;case 412:return a.FailedPrecondition;case 429:return a.ResourceExhausted;case 499:return a.Canceled;case 500:return a.Unknown;case 501:return a.Unimplemented;case 503:return a.Unavailable;case 504:return a.DeadlineExceeded;default:return a.Unknown}}},934:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.client=void 0;var s=a(65),c=a(617),l=a(8),u=a(346),f=a(57),d=a(882);o.client=function(h,A){return new g(h,A)};var g=function(){function h(A,m){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new c.ChunkParser,this.methodDefinition=A,this.props=m,this.createTransport()}return h.prototype.createTransport=function(){var A=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,m={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:A,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(m):this.transport=f.makeDefaultTransport(m)},h.prototype.onTransportHeaders=function(A,m){if(this.props.debug&&u.debug("onHeaders",A,m),this.closed)this.props.debug&&u.debug("grpc.onHeaders received after request was closed - ignoring");else if(m!==0){this.responseHeaders=A,this.props.debug&&u.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var y=_(A);this.props.debug&&u.debug("onHeaders.gRPCStatus",y);var b=y&&y>=0?y:l.httpStatusToCode(m);this.props.debug&&u.debug("onHeaders.code",b);var B=A.get("grpc-message")||[];if(this.props.debug&&u.debug("onHeaders.gRPCMessage",B),this.rawOnHeaders(A),b!==l.Code.OK){var v=this.decodeGRPCStatus(B[0]);this.rawOnError(b,v,A)}}},h.prototype.onTransportChunk=function(A){var m=this;if(this.closed)this.props.debug&&u.debug("grpc.onChunk received after request was closed - ignoring");else{var y=[];try{y=this.parser.parse(A)}catch(b){return this.props.debug&&u.debug("onChunk.parsing error",b,b.message),void this.rawOnError(l.Code.Internal,"parsing error: "+b.message)}y.forEach(function(b){if(b.chunkType===c.ChunkType.MESSAGE){var B=m.methodDefinition.responseType.deserializeBinary(b.data);m.rawOnMessage(B)}else b.chunkType===c.ChunkType.TRAILERS&&(m.responseHeaders?(m.responseTrailers=new s.Metadata(b.trailers),m.props.debug&&u.debug("onChunk.trailers",m.responseTrailers)):(m.responseHeaders=new s.Metadata(b.trailers),m.rawOnHeaders(m.responseHeaders)))})}},h.prototype.onTransportEnd=function(){if(this.props.debug&&u.debug("grpc.onEnd"),this.closed)this.props.debug&&u.debug("grpc.onEnd received after request was closed - ignoring");else if(this.responseTrailers!==void 0){var A=_(this.responseTrailers);if(A!==null){var m=this.responseTrailers.get("grpc-message"),y=this.decodeGRPCStatus(m[0]);this.rawOnEnd(A,y,this.responseTrailers)}else this.rawOnError(l.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(this.responseHeaders===void 0)return void this.rawOnError(l.Code.Unknown,"Response closed without headers");var b=_(this.responseHeaders),B=this.responseHeaders.get("grpc-message");if(this.props.debug&&u.debug("grpc.headers only response ",b,B),b===null)return void this.rawOnEnd(l.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var v=this.decodeGRPCStatus(B[0]);this.rawOnEnd(b,v,this.responseHeaders)}},h.prototype.decodeGRPCStatus=function(A){if(!A)return"";try{return decodeURIComponent(A)}catch{return A}},h.prototype.rawOnEnd=function(A,m,y){var b=this;this.props.debug&&u.debug("rawOnEnd",A,m,y),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(B){if(!b.closed)try{B(A,m,y)}catch(v){setTimeout(function(){throw v},0)}}))},h.prototype.rawOnHeaders=function(A){this.props.debug&&u.debug("rawOnHeaders",A),this.completed||this.onHeadersCallbacks.forEach(function(m){try{m(A)}catch(y){setTimeout(function(){throw y},0)}})},h.prototype.rawOnError=function(A,m,y){var b=this;y===void 0&&(y=new s.Metadata),this.props.debug&&u.debug("rawOnError",A,m),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(B){if(!b.closed)try{B(A,m,y)}catch(v){setTimeout(function(){throw v},0)}}))},h.prototype.rawOnMessage=function(A){var m=this;this.props.debug&&u.debug("rawOnMessage",A.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach(function(y){if(!m.closed)try{y(A)}catch(b){setTimeout(function(){throw b},0)}})},h.prototype.onHeaders=function(A){this.onHeadersCallbacks.push(A)},h.prototype.onMessage=function(A){this.onMessageCallbacks.push(A)},h.prototype.onEnd=function(A){this.onEndCallbacks.push(A)},h.prototype.start=function(A){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var m=new s.Metadata(A||{});m.set("content-type","application/grpc-web+proto"),m.set("x-grpc-web","1"),this.transport.start(m)},h.prototype.send=function(A){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var m=d.frameRequest(A);this.transport.sendMessage(m)},h.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},h.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&u.debug("request.abort aborting request"),this.transport.cancel()},h}();function _(h){var A=h.get("grpc-status")||[];if(A.length>0)try{var m=A[0];return parseInt(m,10)}catch{return null}return null}},346:function(i,o){Object.defineProperty(o,"__esModule",{value:!0}),o.debug=void 0,o.debug=function(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];console.debug?console.debug.apply(null,a):console.log.apply(null,a)}},607:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.grpc=void 0;var s,c=a(418),l=a(57),u=a(229),f=a(540),d=a(210),g=a(859),_=a(8),h=a(938),A=a(35),m=a(934);(s=o.grpc||(o.grpc={})).setDefaultTransport=l.setDefaultTransportFactory,s.CrossBrowserHttpTransport=g.CrossBrowserHttpTransport,s.FetchReadableStreamTransport=u.FetchReadableStreamTransport,s.XhrTransport=d.XhrTransport,s.WebsocketTransport=f.WebsocketTransport,s.Code=_.Code,s.Metadata=c.BrowserHeaders,s.client=function(y,b){return m.client(y,b)},s.invoke=h.invoke,s.unary=A.unary},938:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.invoke=void 0;var s=a(934);o.invoke=function(c,l){if(c.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var u=s.client(c,{host:l.host,transport:l.transport,debug:l.debug});return l.onHeaders&&u.onHeaders(l.onHeaders),l.onMessage&&u.onMessage(l.onMessage),l.onEnd&&u.onEnd(l.onEnd),u.start(l.metadata),u.send(l.request),u.finishSend(),{close:function(){u.close()}}}},65:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.Metadata=void 0;var s=a(418);Object.defineProperty(o,"Metadata",{enumerable:!0,get:function(){return s.BrowserHeaders}})},57:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.makeDefaultTransport=o.setDefaultTransportFactory=void 0;var s=a(859),c=function(l){return s.CrossBrowserHttpTransport({withCredentials:!1})(l)};o.setDefaultTransportFactory=function(l){c=l},o.makeDefaultTransport=function(l){return c(l)}},229:function(i,o,a){var s=this&&this.__assign||function(){return(s=Object.assign||function(f){for(var d,g=1,_=arguments.length;g<_;g++)for(var h in d=arguments[g])Object.prototype.hasOwnProperty.call(d,h)&&(f[h]=d[h]);return f}).apply(this,arguments)};Object.defineProperty(o,"__esModule",{value:!0}),o.detectFetchSupport=o.FetchReadableStreamTransport=void 0;var c=a(65),l=a(346);o.FetchReadableStreamTransport=function(f){return function(d){return function(g,_){return g.debug&&l.debug("fetchRequest",g),new u(g,_)}(d,f)}};var u=function(){function f(d,g){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=d,this.init=g}return f.prototype.pump=function(d,g){var _=this;if(this.reader=d,this.cancelled)return this.options.debug&&l.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch(function(h){_.options.debug&&l.debug("Fetch.pump.reader.cancel exception",h)});this.reader.read().then(function(h){if(h.done)return _.options.onEnd(),g;_.options.onChunk(h.value),_.pump(_.reader,g)}).catch(function(h){_.cancelled?_.options.debug&&l.debug("Fetch.catch - request cancelled"):(_.cancelled=!0,_.options.debug&&l.debug("Fetch.catch",h.message),_.options.onEnd(h))})},f.prototype.send=function(d){var g=this;fetch(this.options.url,s(s({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:d,signal:this.controller&&this.controller.signal})).then(function(_){if(g.options.debug&&l.debug("Fetch.response",_),g.options.onHeaders(new c.Metadata(_.headers),_.status),!_.body)return _;g.pump(_.body.getReader(),_)}).catch(function(_){g.cancelled?g.options.debug&&l.debug("Fetch.catch - request cancelled"):(g.cancelled=!0,g.options.debug&&l.debug("Fetch.catch",_.message),g.options.onEnd(_))})},f.prototype.sendMessage=function(d){this.send(d)},f.prototype.finishSend=function(){},f.prototype.start=function(d){this.metadata=d},f.prototype.cancel=function(){var d=this;this.cancelled?this.options.debug&&l.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&l.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&l.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&l.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch(function(g){d.options.debug&&l.debug("Fetch.cancel.reader.cancel exception",g)})):this.options.debug&&l.debug("Fetch.cancel before reader"))},f}();o.detectFetchSupport=function(){return typeof Response<"u"&&Response.prototype.hasOwnProperty("body")&&typeof Headers=="function"}},859:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.CrossBrowserHttpTransport=void 0;var s=a(229),c=a(210);o.CrossBrowserHttpTransport=function(l){if(s.detectFetchSupport()){var u={credentials:l.withCredentials?"include":"same-origin"};return s.FetchReadableStreamTransport(u)}return c.XhrTransport({withCredentials:l.withCredentials})}},210:function(i,o,a){var s,c=this&&this.__extends||(s=function(A,m){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(y,b){y.__proto__=b}||function(y,b){for(var B in b)Object.prototype.hasOwnProperty.call(b,B)&&(y[B]=b[B])})(A,m)},function(A,m){function y(){this.constructor=A}s(A,m),A.prototype=m===null?Object.create(m):(y.prototype=m.prototype,new y)});Object.defineProperty(o,"__esModule",{value:!0}),o.stringToArrayBuffer=o.MozChunkedArrayBufferXHR=o.XHR=o.XhrTransport=void 0;var l=a(65),u=a(346),f=a(849);o.XhrTransport=function(A){return function(m){if(f.detectMozXHRSupport())return new g(m,A);if(f.detectXHROverrideMimeTypeSupport())return new d(m,A);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var d=function(){function A(m,y){this.options=m,this.init=y}return A.prototype.onProgressEvent=function(){this.options.debug&&u.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var m=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var y=h(m);this.options.onChunk(y)},A.prototype.onLoadEvent=function(){this.options.debug&&u.debug("XHR.onLoadEvent"),this.options.onEnd()},A.prototype.onStateChange=function(){this.options.debug&&u.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new l.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},A.prototype.sendMessage=function(m){this.xhr.send(m)},A.prototype.finishSend=function(){},A.prototype.start=function(m){var y=this;this.metadata=m;var b=new XMLHttpRequest;this.xhr=b,b.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach(function(B,v){b.setRequestHeader(B,v.join(", "))}),b.withCredentials=Boolean(this.init.withCredentials),b.addEventListener("readystatechange",this.onStateChange.bind(this)),b.addEventListener("progress",this.onProgressEvent.bind(this)),b.addEventListener("loadend",this.onLoadEvent.bind(this)),b.addEventListener("error",function(B){y.options.debug&&u.debug("XHR.error",B),y.options.onEnd(B.error)})},A.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},A.prototype.cancel=function(){this.options.debug&&u.debug("XHR.abort"),this.xhr.abort()},A}();o.XHR=d;var g=function(A){function m(){return A!==null&&A.apply(this,arguments)||this}return c(m,A),m.prototype.configureXhr=function(){this.options.debug&&u.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},m.prototype.onProgressEvent=function(){var y=this.xhr.response;this.options.debug&&u.debug("MozXHR.onProgressEvent: ",new Uint8Array(y)),this.options.onChunk(new Uint8Array(y))},m}(d);function _(A,m){var y=A.charCodeAt(m);if(y>=55296&&y<=56319){var b=A.charCodeAt(m+1);b>=56320&&b<=57343&&(y=65536+(y-55296<<10)+(b-56320))}return y}function h(A){for(var m=new Uint8Array(A.length),y=0,b=0;b<A.length;b++){var B=String.prototype.codePointAt?A.codePointAt(b):_(A,b);m[y++]=255&B}return m}o.MozChunkedArrayBufferXHR=g,o.stringToArrayBuffer=h},849:function(i,o){var a;function s(){if(a!==void 0)return a;if(XMLHttpRequest){a=new XMLHttpRequest;try{a.open("GET","https://localhost")}catch{}}return a}function c(l){var u=s();if(!u)return!1;try{return u.responseType=l,u.responseType===l}catch{}return!1}Object.defineProperty(o,"__esModule",{value:!0}),o.detectXHROverrideMimeTypeSupport=o.detectMozXHRSupport=o.xhrSupportsResponseType=void 0,o.xhrSupportsResponseType=c,o.detectMozXHRSupport=function(){return typeof XMLHttpRequest<"u"&&c("moz-chunked-arraybuffer")},o.detectXHROverrideMimeTypeSupport=function(){return typeof XMLHttpRequest<"u"&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.WebsocketTransport=void 0;var s,c=a(346),l=a(617);(function(f){f[f.FINISH_SEND=1]="FINISH_SEND"})(s||(s={}));var u=new Uint8Array([1]);o.WebsocketTransport=function(){return function(f){return function(d){d.debug&&c.debug("websocketRequest",d);var g,_=function(m){if(m.substr(0,8)==="https://")return"wss://"+m.substr(8);if(m.substr(0,7)==="http://")return"ws://"+m.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(d.url),h=[];function A(m){if(m===s.FINISH_SEND)g.send(u);else{var y=m,b=new Int8Array(y.byteLength+1);b.set(new Uint8Array([0])),b.set(y,1),g.send(b)}}return{sendMessage:function(m){g&&g.readyState!==g.CONNECTING?A(m):h.push(m)},finishSend:function(){g&&g.readyState!==g.CONNECTING?A(s.FINISH_SEND):h.push(s.FINISH_SEND)},start:function(m){(g=new WebSocket(_,["grpc-websockets"])).binaryType="arraybuffer",g.onopen=function(){var y;d.debug&&c.debug("websocketRequest.onopen"),g.send((y="",m.forEach(function(b,B){y+=b+": "+B.join(", ")+`\r
`}),l.encodeASCII(y))),h.forEach(function(b){A(b)})},g.onclose=function(y){d.debug&&c.debug("websocketRequest.onclose",y),d.onEnd()},g.onerror=function(y){d.debug&&c.debug("websocketRequest.onerror",y)},g.onmessage=function(y){d.onChunk(new Uint8Array(y.data))}},cancel:function(){d.debug&&c.debug("websocket.abort"),g.close()}}}(f)}}},35:function(i,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.unary=void 0;var s=a(65),c=a(934);o.unary=function(l,u){if(l.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(l.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var f=null,d=null,g=c.client(l,{host:u.host,transport:u.transport,debug:u.debug});return g.onHeaders(function(_){f=_}),g.onMessage(function(_){d=_}),g.onEnd(function(_,h,A){u.onEnd({status:_,statusMessage:h,headers:f||new s.Metadata,message:d,trailers:A})}),g.start(u.metadata),g.send(u.request),g.finishSend(),{close:function(){g.close()}}}},882:function(i,o){Object.defineProperty(o,"__esModule",{value:!0}),o.frameRequest=void 0,o.frameRequest=function(a){var s=a.serializeBinary(),c=new ArrayBuffer(s.byteLength+5);return new DataView(c,1,4).setUint32(0,s.length,!1),new Uint8Array(c,5).set(s),new Uint8Array(c)}}},r={},function i(o){if(r[o])return r[o].exports;var a=r[o]={exports:{}};return n[o].call(a.exports,a,a.exports,i),a.exports}(607);var n,r})})(grpcWebClient_umd);var indexMinimal={},minimal$1={},aspromise=asPromise;function asPromise(e,t){for(var n=new Array(arguments.length-1),r=0,i=2,o=!0;i<arguments.length;)n[r++]=arguments[i++];return new Promise(function(s,c){n[r]=function(u){if(o)if(o=!1,u)c(u);else{for(var f=new Array(arguments.length-1),d=0;d<f.length;)f[d++]=arguments[d];s.apply(null,f)}};try{e.apply(t||null,n)}catch(l){o&&(o=!1,c(l))}})}var base64$1={};(function(e){var t=e;t.length=function(s){var c=s.length;if(!c)return 0;for(var l=0;--c%4>1&&s.charAt(c)==="=";)++l;return Math.ceil(s.length*3)/4-l};for(var n=new Array(64),r=new Array(123),i=0;i<64;)r[n[i]=i<26?i+65:i<52?i+71:i<62?i-4:i-59|43]=i++;t.encode=function(s,c,l){for(var u=null,f=[],d=0,g=0,_;c<l;){var h=s[c++];switch(g){case 0:f[d++]=n[h>>2],_=(h&3)<<4,g=1;break;case 1:f[d++]=n[_|h>>4],_=(h&15)<<2,g=2;break;case 2:f[d++]=n[_|h>>6],f[d++]=n[h&63],g=0;break}d>8191&&((u||(u=[])).push(String.fromCharCode.apply(String,f)),d=0)}return g&&(f[d++]=n[_],f[d++]=61,g===1&&(f[d++]=61)),u?(d&&u.push(String.fromCharCode.apply(String,f.slice(0,d))),u.join("")):String.fromCharCode.apply(String,f.slice(0,d))};var o="invalid encoding";t.decode=function(s,c,l){for(var u=l,f=0,d,g=0;g<s.length;){var _=s.charCodeAt(g++);if(_===61&&f>1)break;if((_=r[_])===void 0)throw Error(o);switch(f){case 0:d=_,f=1;break;case 1:c[l++]=d<<2|(_&48)>>4,d=_,f=2;break;case 2:c[l++]=(d&15)<<4|(_&60)>>2,d=_,f=3;break;case 3:c[l++]=(d&3)<<6|_,f=0;break}}if(f===1)throw Error(o);return l-u},t.test=function(s){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(s)}})(base64$1);var eventemitter=EventEmitter;function EventEmitter(){this._listeners={}}EventEmitter.prototype.on=function(t,n,r){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:n,ctx:r||this}),this};EventEmitter.prototype.off=function(t,n){if(t===void 0)this._listeners={};else if(n===void 0)this._listeners[t]=[];else for(var r=this._listeners[t],i=0;i<r.length;)r[i].fn===n?r.splice(i,1):++i;return this};EventEmitter.prototype.emit=function(t){var n=this._listeners[t];if(n){for(var r=[],i=1;i<arguments.length;)r.push(arguments[i++]);for(i=0;i<n.length;)n[i].fn.apply(n[i++].ctx,r)}return this};var float=factory(factory);function factory(e){return typeof Float32Array<"u"?function(){var t=new Float32Array([-0]),n=new Uint8Array(t.buffer),r=n[3]===128;function i(c,l,u){t[0]=c,l[u]=n[0],l[u+1]=n[1],l[u+2]=n[2],l[u+3]=n[3]}function o(c,l,u){t[0]=c,l[u]=n[3],l[u+1]=n[2],l[u+2]=n[1],l[u+3]=n[0]}e.writeFloatLE=r?i:o,e.writeFloatBE=r?o:i;function a(c,l){return n[0]=c[l],n[1]=c[l+1],n[2]=c[l+2],n[3]=c[l+3],t[0]}function s(c,l){return n[3]=c[l],n[2]=c[l+1],n[1]=c[l+2],n[0]=c[l+3],t[0]}e.readFloatLE=r?a:s,e.readFloatBE=r?s:a}():function(){function t(r,i,o,a){var s=i<0?1:0;if(s&&(i=-i),i===0)r(1/i>0?0:2147483648,o,a);else if(isNaN(i))r(2143289344,o,a);else if(i>34028234663852886e22)r((s<<31|2139095040)>>>0,o,a);else if(i<11754943508222875e-54)r((s<<31|Math.round(i/1401298464324817e-60))>>>0,o,a);else{var c=Math.floor(Math.log(i)/Math.LN2),l=Math.round(i*Math.pow(2,-c)*8388608)&8388607;r((s<<31|c+127<<23|l)>>>0,o,a)}}e.writeFloatLE=t.bind(null,writeUintLE),e.writeFloatBE=t.bind(null,writeUintBE);function n(r,i,o){var a=r(i,o),s=(a>>31)*2+1,c=a>>>23&255,l=a&8388607;return c===255?l?NaN:s*(1/0):c===0?s*1401298464324817e-60*l:s*Math.pow(2,c-150)*(l+8388608)}e.readFloatLE=n.bind(null,readUintLE),e.readFloatBE=n.bind(null,readUintBE)}(),typeof Float64Array<"u"?function(){var t=new Float64Array([-0]),n=new Uint8Array(t.buffer),r=n[7]===128;function i(c,l,u){t[0]=c,l[u]=n[0],l[u+1]=n[1],l[u+2]=n[2],l[u+3]=n[3],l[u+4]=n[4],l[u+5]=n[5],l[u+6]=n[6],l[u+7]=n[7]}function o(c,l,u){t[0]=c,l[u]=n[7],l[u+1]=n[6],l[u+2]=n[5],l[u+3]=n[4],l[u+4]=n[3],l[u+5]=n[2],l[u+6]=n[1],l[u+7]=n[0]}e.writeDoubleLE=r?i:o,e.writeDoubleBE=r?o:i;function a(c,l){return n[0]=c[l],n[1]=c[l+1],n[2]=c[l+2],n[3]=c[l+3],n[4]=c[l+4],n[5]=c[l+5],n[6]=c[l+6],n[7]=c[l+7],t[0]}function s(c,l){return n[7]=c[l],n[6]=c[l+1],n[5]=c[l+2],n[4]=c[l+3],n[3]=c[l+4],n[2]=c[l+5],n[1]=c[l+6],n[0]=c[l+7],t[0]}e.readDoubleLE=r?a:s,e.readDoubleBE=r?s:a}():function(){function t(r,i,o,a,s,c){var l=a<0?1:0;if(l&&(a=-a),a===0)r(0,s,c+i),r(1/a>0?0:2147483648,s,c+o);else if(isNaN(a))r(0,s,c+i),r(2146959360,s,c+o);else if(a>17976931348623157e292)r(0,s,c+i),r((l<<31|2146435072)>>>0,s,c+o);else{var u;if(a<22250738585072014e-324)u=a/5e-324,r(u>>>0,s,c+i),r((l<<31|u/4294967296)>>>0,s,c+o);else{var f=Math.floor(Math.log(a)/Math.LN2);f===1024&&(f=1023),u=a*Math.pow(2,-f),r(u*4503599627370496>>>0,s,c+i),r((l<<31|f+1023<<20|u*1048576&1048575)>>>0,s,c+o)}}}e.writeDoubleLE=t.bind(null,writeUintLE,0,4),e.writeDoubleBE=t.bind(null,writeUintBE,4,0);function n(r,i,o,a,s){var c=r(a,s+i),l=r(a,s+o),u=(l>>31)*2+1,f=l>>>20&2047,d=4294967296*(l&1048575)+c;return f===2047?d?NaN:u*(1/0):f===0?u*5e-324*d:u*Math.pow(2,f-1075)*(d+4503599627370496)}e.readDoubleLE=n.bind(null,readUintLE,0,4),e.readDoubleBE=n.bind(null,readUintBE,4,0)}(),e}function writeUintLE(e,t,n){t[n]=e&255,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24}function writeUintBE(e,t,n){t[n]=e>>>24,t[n+1]=e>>>16&255,t[n+2]=e>>>8&255,t[n+3]=e&255}function readUintLE(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function readUintBE(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}var inquire_1=inquire;function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(e){}return null}var utf8$2={};(function(e){var t=e;t.length=function(r){for(var i=0,o=0,a=0;a<r.length;++a)o=r.charCodeAt(a),o<128?i+=1:o<2048?i+=2:(o&64512)===55296&&(r.charCodeAt(a+1)&64512)===56320?(++a,i+=4):i+=3;return i},t.read=function(r,i,o){var a=o-i;if(a<1)return"";for(var s=null,c=[],l=0,u;i<o;)u=r[i++],u<128?c[l++]=u:u>191&&u<224?c[l++]=(u&31)<<6|r[i++]&63:u>239&&u<365?(u=((u&7)<<18|(r[i++]&63)<<12|(r[i++]&63)<<6|r[i++]&63)-65536,c[l++]=55296+(u>>10),c[l++]=56320+(u&1023)):c[l++]=(u&15)<<12|(r[i++]&63)<<6|r[i++]&63,l>8191&&((s||(s=[])).push(String.fromCharCode.apply(String,c)),l=0);return s?(l&&s.push(String.fromCharCode.apply(String,c.slice(0,l))),s.join("")):String.fromCharCode.apply(String,c.slice(0,l))},t.write=function(r,i,o){for(var a=o,s,c,l=0;l<r.length;++l)s=r.charCodeAt(l),s<128?i[o++]=s:s<2048?(i[o++]=s>>6|192,i[o++]=s&63|128):(s&64512)===55296&&((c=r.charCodeAt(l+1))&64512)===56320?(s=65536+((s&1023)<<10)+(c&1023),++l,i[o++]=s>>18|240,i[o++]=s>>12&63|128,i[o++]=s>>6&63|128,i[o++]=s&63|128):(i[o++]=s>>12|224,i[o++]=s>>6&63|128,i[o++]=s&63|128);return o-a}})(utf8$2);var pool_1=pool;function pool(e,t,n){var r=n||8192,i=r>>>1,o=null,a=r;return function(c){if(c<1||c>i)return e(c);a+c>r&&(o=e(r),a=0);var l=t.call(o,a,a+=c);return a&7&&(a=(a|7)+1),l}}var longbits=LongBits$2,util$5=minimal$1;function LongBits$2(e,t){this.lo=e>>>0,this.hi=t>>>0}var zero=LongBits$2.zero=new LongBits$2(0,0);zero.toNumber=function(){return 0};zero.zzEncode=zero.zzDecode=function(){return this};zero.length=function(){return 1};var zeroHash=LongBits$2.zeroHash="\0\0\0\0\0\0\0\0";LongBits$2.fromNumber=function e(t){if(t===0)return zero;var n=t<0;n&&(t=-t);var r=t>>>0,i=(t-r)/4294967296>>>0;return n&&(i=~i>>>0,r=~r>>>0,++r>4294967295&&(r=0,++i>4294967295&&(i=0))),new LongBits$2(r,i)};LongBits$2.from=function e(t){if(typeof t=="number")return LongBits$2.fromNumber(t);if(util$5.isString(t))if(util$5.Long)t=util$5.Long.fromString(t);else return LongBits$2.fromNumber(parseInt(t,10));return t.low||t.high?new LongBits$2(t.low>>>0,t.high>>>0):zero};LongBits$2.prototype.toNumber=function e(t){if(!t&&this.hi>>>31){var n=~this.lo+1>>>0,r=~this.hi>>>0;return n||(r=r+1>>>0),-(n+r*4294967296)}return this.lo+this.hi*4294967296};LongBits$2.prototype.toLong=function e(t){return util$5.Long?new util$5.Long(this.lo|0,this.hi|0,Boolean(t)):{low:this.lo|0,high:this.hi|0,unsigned:Boolean(t)}};var charCodeAt=String.prototype.charCodeAt;LongBits$2.fromHash=function e(t){return t===zeroHash?zero:new LongBits$2((charCodeAt.call(t,0)|charCodeAt.call(t,1)<<8|charCodeAt.call(t,2)<<16|charCodeAt.call(t,3)<<24)>>>0,(charCodeAt.call(t,4)|charCodeAt.call(t,5)<<8|charCodeAt.call(t,6)<<16|charCodeAt.call(t,7)<<24)>>>0)};LongBits$2.prototype.toHash=function e(){return String.fromCharCode(this.lo&255,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,this.hi&255,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)};LongBits$2.prototype.zzEncode=function e(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this};LongBits$2.prototype.zzDecode=function e(){var t=-(this.lo&1);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this};LongBits$2.prototype.length=function e(){var t=this.lo,n=(this.lo>>>28|this.hi<<4)>>>0,r=this.hi>>>24;return r===0?n===0?t<16384?t<128?1:2:t<2097152?3:4:n<16384?n<128?5:6:n<2097152?7:8:r<128?9:10};(function(e){var t=e;t.asPromise=aspromise,t.base64=base64$1,t.EventEmitter=eventemitter,t.float=float,t.inquire=inquire_1,t.utf8=utf8$2,t.pool=pool_1,t.LongBits=longbits,t.isNode=Boolean(typeof commonjsGlobal<"u"&&commonjsGlobal&&commonjsGlobal.process&&commonjsGlobal.process.versions&&commonjsGlobal.process.versions.node),t.global=t.isNode&&commonjsGlobal||typeof window<"u"&&window||typeof self<"u"&&self||commonjsGlobal,t.emptyArray=Object.freeze?Object.freeze([]):[],t.emptyObject=Object.freeze?Object.freeze({}):{},t.isInteger=Number.isInteger||function(o){return typeof o=="number"&&isFinite(o)&&Math.floor(o)===o},t.isString=function(o){return typeof o=="string"||o instanceof String},t.isObject=function(o){return o&&typeof o=="object"},t.isset=t.isSet=function(o,a){var s=o[a];return s!=null&&o.hasOwnProperty(a)?typeof s!="object"||(Array.isArray(s)?s.length:Object.keys(s).length)>0:!1},t.Buffer=function(){try{var i=t.inquire("buffer").Buffer;return i.prototype.utf8Write?i:null}catch{return null}}(),t._Buffer_from=null,t._Buffer_allocUnsafe=null,t.newBuffer=function(o){return typeof o=="number"?t.Buffer?t._Buffer_allocUnsafe(o):new t.Array(o):t.Buffer?t._Buffer_from(o):typeof Uint8Array>"u"?o:new Uint8Array(o)},t.Array=typeof Uint8Array<"u"?Uint8Array:Array,t.Long=t.global.dcodeIO&&t.global.dcodeIO.Long||t.global.Long||t.inquire("long"),t.key2Re=/^true|false|0|1$/,t.key32Re=/^-?(?:0|[1-9][0-9]*)$/,t.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,t.longToHash=function(o){return o?t.LongBits.from(o).toHash():t.LongBits.zeroHash},t.longFromHash=function(o,a){var s=t.LongBits.fromHash(o);return t.Long?t.Long.fromBits(s.lo,s.hi,a):s.toNumber(Boolean(a))};function n(i,o,a){for(var s=Object.keys(o),c=0;c<s.length;++c)(i[s[c]]===void 0||!a)&&(i[s[c]]=o[s[c]]);return i}t.merge=n,t.lcFirst=function(o){return o.charAt(0).toLowerCase()+o.substring(1)};function r(i){function o(a,s){if(!(this instanceof o))return new o(a,s);Object.defineProperty(this,"message",{get:function(){return a}}),Error.captureStackTrace?Error.captureStackTrace(this,o):Object.defineProperty(this,"stack",{value:new Error().stack||""}),s&&n(this,s)}return o.prototype=Object.create(Error.prototype,{constructor:{value:o,writable:!0,enumerable:!1,configurable:!0},name:{get(){return i},set:void 0,enumerable:!1,configurable:!0},toString:{value(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),o}t.newError=r,t.ProtocolError=r("ProtocolError"),t.oneOfGetter=function(o){for(var a={},s=0;s<o.length;++s)a[o[s]]=1;return function(){for(var c=Object.keys(this),l=c.length-1;l>-1;--l)if(a[c[l]]===1&&this[c[l]]!==void 0&&this[c[l]]!==null)return c[l]}},t.oneOfSetter=function(o){return function(a){for(var s=0;s<o.length;++s)o[s]!==a&&delete this[o[s]]}},t.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},t._configure=function(){var i=t.Buffer;if(!i){t._Buffer_from=t._Buffer_allocUnsafe=null;return}t._Buffer_from=i.from!==Uint8Array.from&&i.from||function(a,s){return new i(a,s)},t._Buffer_allocUnsafe=i.allocUnsafe||function(a){return new i(a)}}})(minimal$1);var writer=Writer$1,util$4=minimal$1,BufferWriter$1,LongBits$1=util$4.LongBits,base64=util$4.base64,utf8$1=util$4.utf8;function Op(e,t,n){this.fn=e,this.len=t,this.next=void 0,this.val=n}function noop(){}function State(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states}function Writer$1(){this.len=0,this.head=new Op(noop,0,0),this.tail=this.head,this.states=null}var create$1=function e(){return util$4.Buffer?function(){return(Writer$1.create=function(){return new BufferWriter$1})()}:function(){return new Writer$1}};Writer$1.create=create$1();Writer$1.alloc=function e(t){return new util$4.Array(t)};util$4.Array!==Array&&(Writer$1.alloc=util$4.pool(Writer$1.alloc,util$4.Array.prototype.subarray));Writer$1.prototype._push=function e(t,n,r){return this.tail=this.tail.next=new Op(t,n,r),this.len+=n,this};function writeByte(e,t,n){t[n]=e&255}function writeVarint32(e,t,n){for(;e>127;)t[n++]=e&127|128,e>>>=7;t[n]=e}function VarintOp(e,t){this.len=e,this.next=void 0,this.val=t}VarintOp.prototype=Object.create(Op.prototype);VarintOp.prototype.fn=writeVarint32;Writer$1.prototype.uint32=function e(t){return this.len+=(this.tail=this.tail.next=new VarintOp((t=t>>>0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this};Writer$1.prototype.int32=function e(t){return t<0?this._push(writeVarint64,10,LongBits$1.fromNumber(t)):this.uint32(t)};Writer$1.prototype.sint32=function e(t){return this.uint32((t<<1^t>>31)>>>0)};function writeVarint64(e,t,n){for(;e.hi;)t[n++]=e.lo&127|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;e.lo>127;)t[n++]=e.lo&127|128,e.lo=e.lo>>>7;t[n++]=e.lo}Writer$1.prototype.uint64=function e(t){var n=LongBits$1.from(t);return this._push(writeVarint64,n.length(),n)};Writer$1.prototype.int64=Writer$1.prototype.uint64;Writer$1.prototype.sint64=function e(t){var n=LongBits$1.from(t).zzEncode();return this._push(writeVarint64,n.length(),n)};Writer$1.prototype.bool=function e(t){return this._push(writeByte,1,t?1:0)};function writeFixed32(e,t,n){t[n]=e&255,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24}Writer$1.prototype.fixed32=function e(t){return this._push(writeFixed32,4,t>>>0)};Writer$1.prototype.sfixed32=Writer$1.prototype.fixed32;Writer$1.prototype.fixed64=function e(t){var n=LongBits$1.from(t);return this._push(writeFixed32,4,n.lo)._push(writeFixed32,4,n.hi)};Writer$1.prototype.sfixed64=Writer$1.prototype.fixed64;Writer$1.prototype.float=function e(t){return this._push(util$4.float.writeFloatLE,4,t)};Writer$1.prototype.double=function e(t){return this._push(util$4.float.writeDoubleLE,8,t)};var writeBytes=util$4.Array.prototype.set?function e(t,n,r){n.set(t,r)}:function e(t,n,r){for(var i=0;i<t.length;++i)n[r+i]=t[i]};Writer$1.prototype.bytes=function e(t){var n=t.length>>>0;if(!n)return this._push(writeByte,1,0);if(util$4.isString(t)){var r=Writer$1.alloc(n=base64.length(t));base64.decode(t,r,0),t=r}return this.uint32(n)._push(writeBytes,n,t)};Writer$1.prototype.string=function e(t){var n=utf8$1.length(t);return n?this.uint32(n)._push(utf8$1.write,n,t):this._push(writeByte,1,0)};Writer$1.prototype.fork=function e(){return this.states=new State(this),this.head=this.tail=new Op(noop,0,0),this.len=0,this};Writer$1.prototype.reset=function e(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Op(noop,0,0),this.len=0),this};Writer$1.prototype.ldelim=function e(){var t=this.head,n=this.tail,r=this.len;return this.reset().uint32(r),r&&(this.tail.next=t.next,this.tail=n,this.len+=r),this};Writer$1.prototype.finish=function e(){for(var t=this.head.next,n=this.constructor.alloc(this.len),r=0;t;)t.fn(t.val,n,r),r+=t.len,t=t.next;return n};Writer$1._configure=function(e){BufferWriter$1=e,Writer$1.create=create$1(),BufferWriter$1._configure()};var writer_buffer=BufferWriter,Writer=writer;(BufferWriter.prototype=Object.create(Writer.prototype)).constructor=BufferWriter;var util$3=minimal$1;function BufferWriter(){Writer.call(this)}BufferWriter._configure=function(){BufferWriter.alloc=util$3._Buffer_allocUnsafe,BufferWriter.writeBytesBuffer=util$3.Buffer&&util$3.Buffer.prototype instanceof Uint8Array&&util$3.Buffer.prototype.set.name==="set"?function(t,n,r){n.set(t,r)}:function(t,n,r){if(t.copy)t.copy(n,r,0,t.length);else for(var i=0;i<t.length;)n[r++]=t[i++]}};BufferWriter.prototype.bytes=function e(t){util$3.isString(t)&&(t=util$3._Buffer_from(t,"base64"));var n=t.length>>>0;return this.uint32(n),n&&this._push(BufferWriter.writeBytesBuffer,n,t),this};function writeStringBuffer(e,t,n){e.length<40?util$3.utf8.write(e,t,n):t.utf8Write?t.utf8Write(e,n):t.write(e,n)}BufferWriter.prototype.string=function e(t){var n=util$3.Buffer.byteLength(t);return this.uint32(n),n&&this._push(writeStringBuffer,n,t),this};BufferWriter._configure();var reader=Reader$1,util$2=minimal$1,BufferReader$1,LongBits=util$2.LongBits,utf8=util$2.utf8;function indexOutOfRange(e,t){return RangeError("index out of range: "+e.pos+" + "+(t||1)+" > "+e.len)}function Reader$1(e){this.buf=e,this.pos=0,this.len=e.length}var create_array=typeof Uint8Array<"u"?function e(t){if(t instanceof Uint8Array||Array.isArray(t))return new Reader$1(t);throw Error("illegal buffer")}:function e(t){if(Array.isArray(t))return new Reader$1(t);throw Error("illegal buffer")},create=function e(){return util$2.Buffer?function(n){return(Reader$1.create=function(i){return util$2.Buffer.isBuffer(i)?new BufferReader$1(i):create_array(i)})(n)}:create_array};Reader$1.create=create();Reader$1.prototype._slice=util$2.Array.prototype.subarray||util$2.Array.prototype.slice;Reader$1.prototype.uint32=function e(){var t=4294967295;return function(){if(t=(this.buf[this.pos]&127)>>>0,this.buf[this.pos++]<128||(t=(t|(this.buf[this.pos]&127)<<7)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&127)<<14)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&127)<<21)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&15)<<28)>>>0,this.buf[this.pos++]<128))return t;if((this.pos+=5)>this.len)throw this.pos=this.len,indexOutOfRange(this,10);return t}}();Reader$1.prototype.int32=function e(){return this.uint32()|0};Reader$1.prototype.sint32=function e(){var t=this.uint32();return t>>>1^-(t&1)|0};function readLongVarint(){var e=new LongBits(0,0),t=0;if(this.len-this.pos>4){for(;t<4;++t)if(e.lo=(e.lo|(this.buf[this.pos]&127)<<t*7)>>>0,this.buf[this.pos++]<128)return e;if(e.lo=(e.lo|(this.buf[this.pos]&127)<<28)>>>0,e.hi=(e.hi|(this.buf[this.pos]&127)>>4)>>>0,this.buf[this.pos++]<128)return e;t=0}else{for(;t<3;++t){if(this.pos>=this.len)throw indexOutOfRange(this);if(e.lo=(e.lo|(this.buf[this.pos]&127)<<t*7)>>>0,this.buf[this.pos++]<128)return e}return e.lo=(e.lo|(this.buf[this.pos++]&127)<<t*7)>>>0,e}if(this.len-this.pos>4){for(;t<5;++t)if(e.hi=(e.hi|(this.buf[this.pos]&127)<<t*7+3)>>>0,this.buf[this.pos++]<128)return e}else for(;t<5;++t){if(this.pos>=this.len)throw indexOutOfRange(this);if(e.hi=(e.hi|(this.buf[this.pos]&127)<<t*7+3)>>>0,this.buf[this.pos++]<128)return e}throw Error("invalid varint encoding")}Reader$1.prototype.bool=function e(){return this.uint32()!==0};function readFixed32_end(e,t){return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0}Reader$1.prototype.fixed32=function e(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)};Reader$1.prototype.sfixed32=function e(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)|0};function readFixed64(){if(this.pos+8>this.len)throw indexOutOfRange(this,8);return new LongBits(readFixed32_end(this.buf,this.pos+=4),readFixed32_end(this.buf,this.pos+=4))}Reader$1.prototype.float=function e(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);var t=util$2.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t};Reader$1.prototype.double=function e(){if(this.pos+8>this.len)throw indexOutOfRange(this,4);var t=util$2.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t};Reader$1.prototype.bytes=function e(){var t=this.uint32(),n=this.pos,r=this.pos+t;if(r>this.len)throw indexOutOfRange(this,t);return this.pos+=t,Array.isArray(this.buf)?this.buf.slice(n,r):n===r?new this.buf.constructor(0):this._slice.call(this.buf,n,r)};Reader$1.prototype.string=function e(){var t=this.bytes();return utf8.read(t,0,t.length)};Reader$1.prototype.skip=function e(t){if(typeof t=="number"){if(this.pos+t>this.len)throw indexOutOfRange(this,t);this.pos+=t}else do if(this.pos>=this.len)throw indexOutOfRange(this);while(this.buf[this.pos++]&128);return this};Reader$1.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;(e=this.uint32()&7)!==4;)this.skipType(e);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+e+" at offset "+this.pos)}return this};Reader$1._configure=function(e){BufferReader$1=e,Reader$1.create=create(),BufferReader$1._configure();var t=util$2.Long?"toLong":"toNumber";util$2.merge(Reader$1.prototype,{int64:function(){return readLongVarint.call(this)[t](!1)},uint64:function(){return readLongVarint.call(this)[t](!0)},sint64:function(){return readLongVarint.call(this).zzDecode()[t](!1)},fixed64:function(){return readFixed64.call(this)[t](!0)},sfixed64:function(){return readFixed64.call(this)[t](!1)}})};var reader_buffer=BufferReader,Reader=reader;(BufferReader.prototype=Object.create(Reader.prototype)).constructor=BufferReader;var util$1=minimal$1;function BufferReader(e){Reader.call(this,e)}BufferReader._configure=function(){util$1.Buffer&&(BufferReader.prototype._slice=util$1.Buffer.prototype.slice)};BufferReader.prototype.string=function e(){var t=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+t,this.len))};BufferReader._configure();var rpc={},service=Service,util=minimal$1;(Service.prototype=Object.create(util.EventEmitter.prototype)).constructor=Service;function Service(e,t,n){if(typeof e!="function")throw TypeError("rpcImpl must be a function");util.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=Boolean(t),this.responseDelimited=Boolean(n)}Service.prototype.rpcCall=function e(t,n,r,i,o){if(!i)throw TypeError("request must be specified");var a=this;if(!o)return util.asPromise(e,a,t,n,r,i);if(!a.rpcImpl){setTimeout(function(){o(Error("already ended"))},0);return}try{return a.rpcImpl(t,n[a.requestDelimited?"encodeDelimited":"encode"](i).finish(),function(c,l){if(c)return a.emit("error",c,t),o(c);if(l===null){a.end(!0);return}if(!(l instanceof r))try{l=r[a.responseDelimited?"decodeDelimited":"decode"](l)}catch(u){return a.emit("error",u,t),o(u)}return a.emit("data",l,t),o(null,l)})}catch(s){a.emit("error",s,t),setTimeout(function(){o(s)},0);return}};Service.prototype.end=function e(t){return this.rpcImpl&&(t||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this};(function(e){var t=e;t.Service=service})(rpc);var roots={};(function(e){var t=e;t.build="minimal",t.Writer=writer,t.BufferWriter=writer_buffer,t.Reader=reader,t.BufferReader=reader_buffer,t.util=minimal$1,t.rpc=rpc,t.roots=roots,t.configure=n;function n(){t.util._configure(),t.Writer._configure(t.BufferWriter),t.Reader._configure(t.BufferReader)}n()})(indexMinimal);var minimal=indexMinimal;function createBaseCoin(){return{denom:"",amount:""}}const Coin={encode(e,t=minimal.Writer.create()){return e.denom!==""&&t.uint32(10).string(e.denom),e.amount!==""&&t.uint32(18).string(e.amount),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseCoin();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.denom=n.string();break;case 2:i.amount=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{denom:isSet$m(e.denom)?String(e.denom):"",amount:isSet$m(e.amount)?String(e.amount):""}},toJSON(e){const t={};return e.denom!==void 0&&(t.denom=e.denom),e.amount!==void 0&&(t.amount=e.amount),t},fromPartial(e){const t=createBaseCoin();return t.denom=e.denom??"",t.amount=e.amount??"",t}};function isSet$m(e){return e!=null}var long=Long,wasm=null;try{wasm=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function Long(e,t,n){this.low=e|0,this.high=t|0,this.unsigned=!!n}Long.prototype.__isLong__;Object.defineProperty(Long.prototype,"__isLong__",{value:!0});function isLong(e){return(e&&e.__isLong__)===!0}Long.isLong=isLong;var INT_CACHE={},UINT_CACHE={};function fromInt(e,t){var n,r,i;return t?(e>>>=0,(i=0<=e&&e<256)&&(r=UINT_CACHE[e],r)?r:(n=fromBits(e,(e|0)<0?-1:0,!0),i&&(UINT_CACHE[e]=n),n)):(e|=0,(i=-128<=e&&e<128)&&(r=INT_CACHE[e],r)?r:(n=fromBits(e,e<0?-1:0,!1),i&&(INT_CACHE[e]=n),n))}Long.fromInt=fromInt;function fromNumber(e,t){if(isNaN(e))return t?UZERO:ZERO;if(t){if(e<0)return UZERO;if(e>=TWO_PWR_64_DBL)return MAX_UNSIGNED_VALUE}else{if(e<=-TWO_PWR_63_DBL)return MIN_VALUE;if(e+1>=TWO_PWR_63_DBL)return MAX_VALUE}return e<0?fromNumber(-e,t).neg():fromBits(e%TWO_PWR_32_DBL|0,e/TWO_PWR_32_DBL|0,t)}Long.fromNumber=fromNumber;function fromBits(e,t,n){return new Long(e,t,n)}Long.fromBits=fromBits;var pow_dbl=Math.pow;function fromString(e,t,n){if(e.length===0)throw Error("empty string");if(e==="NaN"||e==="Infinity"||e==="+Infinity"||e==="-Infinity")return ZERO;if(typeof t=="number"?(n=t,t=!1):t=!!t,n=n||10,n<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(r===0)return fromString(e.substring(1),t,n).neg();for(var i=fromNumber(pow_dbl(n,8)),o=ZERO,a=0;a<e.length;a+=8){var s=Math.min(8,e.length-a),c=parseInt(e.substring(a,a+s),n);if(s<8){var l=fromNumber(pow_dbl(n,s));o=o.mul(l).add(fromNumber(c))}else o=o.mul(i),o=o.add(fromNumber(c))}return o.unsigned=t,o}Long.fromString=fromString;function fromValue(e,t){return typeof e=="number"?fromNumber(e,t):typeof e=="string"?fromString(e,t):fromBits(e.low,e.high,typeof t=="boolean"?t:e.unsigned)}Long.fromValue=fromValue;var TWO_PWR_16_DBL=1<<16,TWO_PWR_24_DBL=1<<24,TWO_PWR_32_DBL=TWO_PWR_16_DBL*TWO_PWR_16_DBL,TWO_PWR_64_DBL=TWO_PWR_32_DBL*TWO_PWR_32_DBL,TWO_PWR_63_DBL=TWO_PWR_64_DBL/2,TWO_PWR_24=fromInt(TWO_PWR_24_DBL),ZERO=fromInt(0);Long.ZERO=ZERO;var UZERO=fromInt(0,!0);Long.UZERO=UZERO;var ONE=fromInt(1);Long.ONE=ONE;var UONE=fromInt(1,!0);Long.UONE=UONE;var NEG_ONE=fromInt(-1);Long.NEG_ONE=NEG_ONE;var MAX_VALUE=fromBits(-1,2147483647,!1);Long.MAX_VALUE=MAX_VALUE;var MAX_UNSIGNED_VALUE=fromBits(-1,-1,!0);Long.MAX_UNSIGNED_VALUE=MAX_UNSIGNED_VALUE;var MIN_VALUE=fromBits(0,-2147483648,!1);Long.MIN_VALUE=MIN_VALUE;var LongPrototype=Long.prototype;LongPrototype.toInt=function e(){return this.unsigned?this.low>>>0:this.low};LongPrototype.toNumber=function e(){return this.unsigned?(this.high>>>0)*TWO_PWR_32_DBL+(this.low>>>0):this.high*TWO_PWR_32_DBL+(this.low>>>0)};LongPrototype.toString=function e(t){if(t=t||10,t<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(MIN_VALUE)){var n=fromNumber(t),r=this.div(n),i=r.mul(n).sub(this);return r.toString(t)+i.toInt().toString(t)}else return"-"+this.neg().toString(t);for(var o=fromNumber(pow_dbl(t,6),this.unsigned),a=this,s="";;){var c=a.div(o),l=a.sub(c.mul(o)).toInt()>>>0,u=l.toString(t);if(a=c,a.isZero())return u+s;for(;u.length<6;)u="0"+u;s=""+u+s}};LongPrototype.getHighBits=function e(){return this.high};LongPrototype.getHighBitsUnsigned=function e(){return this.high>>>0};LongPrototype.getLowBits=function e(){return this.low};LongPrototype.getLowBitsUnsigned=function e(){return this.low>>>0};LongPrototype.getNumBitsAbs=function e(){if(this.isNegative())return this.eq(MIN_VALUE)?64:this.neg().getNumBitsAbs();for(var t=this.high!=0?this.high:this.low,n=31;n>0&&(t&1<<n)==0;n--);return this.high!=0?n+33:n+1};LongPrototype.isZero=function e(){return this.high===0&&this.low===0};LongPrototype.eqz=LongPrototype.isZero;LongPrototype.isNegative=function e(){return!this.unsigned&&this.high<0};LongPrototype.isPositive=function e(){return this.unsigned||this.high>=0};LongPrototype.isOdd=function e(){return(this.low&1)===1};LongPrototype.isEven=function e(){return(this.low&1)===0};LongPrototype.equals=function e(t){return isLong(t)||(t=fromValue(t)),this.unsigned!==t.unsigned&&this.high>>>31===1&&t.high>>>31===1?!1:this.high===t.high&&this.low===t.low};LongPrototype.eq=LongPrototype.equals;LongPrototype.notEquals=function e(t){return!this.eq(t)};LongPrototype.neq=LongPrototype.notEquals;LongPrototype.ne=LongPrototype.notEquals;LongPrototype.lessThan=function e(t){return this.comp(t)<0};LongPrototype.lt=LongPrototype.lessThan;LongPrototype.lessThanOrEqual=function e(t){return this.comp(t)<=0};LongPrototype.lte=LongPrototype.lessThanOrEqual;LongPrototype.le=LongPrototype.lessThanOrEqual;LongPrototype.greaterThan=function e(t){return this.comp(t)>0};LongPrototype.gt=LongPrototype.greaterThan;LongPrototype.greaterThanOrEqual=function e(t){return this.comp(t)>=0};LongPrototype.gte=LongPrototype.greaterThanOrEqual;LongPrototype.ge=LongPrototype.greaterThanOrEqual;LongPrototype.compare=function e(t){if(isLong(t)||(t=fromValue(t)),this.eq(t))return 0;var n=this.isNegative(),r=t.isNegative();return n&&!r?-1:!n&&r?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1};LongPrototype.comp=LongPrototype.compare;LongPrototype.negate=function e(){return!this.unsigned&&this.eq(MIN_VALUE)?MIN_VALUE:this.not().add(ONE)};LongPrototype.neg=LongPrototype.negate;LongPrototype.add=function e(t){isLong(t)||(t=fromValue(t));var n=this.high>>>16,r=this.high&65535,i=this.low>>>16,o=this.low&65535,a=t.high>>>16,s=t.high&65535,c=t.low>>>16,l=t.low&65535,u=0,f=0,d=0,g=0;return g+=o+l,d+=g>>>16,g&=65535,d+=i+c,f+=d>>>16,d&=65535,f+=r+s,u+=f>>>16,f&=65535,u+=n+a,u&=65535,fromBits(d<<16|g,u<<16|f,this.unsigned)};LongPrototype.subtract=function e(t){return isLong(t)||(t=fromValue(t)),this.add(t.neg())};LongPrototype.sub=LongPrototype.subtract;LongPrototype.multiply=function e(t){if(this.isZero())return ZERO;if(isLong(t)||(t=fromValue(t)),wasm){var n=wasm.mul(this.low,this.high,t.low,t.high);return fromBits(n,wasm.get_high(),this.unsigned)}if(t.isZero())return ZERO;if(this.eq(MIN_VALUE))return t.isOdd()?MIN_VALUE:ZERO;if(t.eq(MIN_VALUE))return this.isOdd()?MIN_VALUE:ZERO;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(TWO_PWR_24)&&t.lt(TWO_PWR_24))return fromNumber(this.toNumber()*t.toNumber(),this.unsigned);var r=this.high>>>16,i=this.high&65535,o=this.low>>>16,a=this.low&65535,s=t.high>>>16,c=t.high&65535,l=t.low>>>16,u=t.low&65535,f=0,d=0,g=0,_=0;return _+=a*u,g+=_>>>16,_&=65535,g+=o*u,d+=g>>>16,g&=65535,g+=a*l,d+=g>>>16,g&=65535,d+=i*u,f+=d>>>16,d&=65535,d+=o*l,f+=d>>>16,d&=65535,d+=a*c,f+=d>>>16,d&=65535,f+=r*u+i*l+o*c+a*s,f&=65535,fromBits(g<<16|_,f<<16|d,this.unsigned)};LongPrototype.mul=LongPrototype.multiply;LongPrototype.divide=function e(t){if(isLong(t)||(t=fromValue(t)),t.isZero())throw Error("division by zero");if(wasm){if(!this.unsigned&&this.high===-2147483648&&t.low===-1&&t.high===-1)return this;var n=(this.unsigned?wasm.div_u:wasm.div_s)(this.low,this.high,t.low,t.high);return fromBits(n,wasm.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?UZERO:ZERO;var r,i,o;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return UZERO;if(t.gt(this.shru(1)))return UONE;o=UZERO}else{if(this.eq(MIN_VALUE)){if(t.eq(ONE)||t.eq(NEG_ONE))return MIN_VALUE;if(t.eq(MIN_VALUE))return ONE;var a=this.shr(1);return r=a.div(t).shl(1),r.eq(ZERO)?t.isNegative()?ONE:NEG_ONE:(i=this.sub(t.mul(r)),o=r.add(i.div(t)),o)}else if(t.eq(MIN_VALUE))return this.unsigned?UZERO:ZERO;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();o=ZERO}for(i=this;i.gte(t);){r=Math.max(1,Math.floor(i.toNumber()/t.toNumber()));for(var s=Math.ceil(Math.log(r)/Math.LN2),c=s<=48?1:pow_dbl(2,s-48),l=fromNumber(r),u=l.mul(t);u.isNegative()||u.gt(i);)r-=c,l=fromNumber(r,this.unsigned),u=l.mul(t);l.isZero()&&(l=ONE),o=o.add(l),i=i.sub(u)}return o};LongPrototype.div=LongPrototype.divide;LongPrototype.modulo=function e(t){if(isLong(t)||(t=fromValue(t)),wasm){var n=(this.unsigned?wasm.rem_u:wasm.rem_s)(this.low,this.high,t.low,t.high);return fromBits(n,wasm.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))};LongPrototype.mod=LongPrototype.modulo;LongPrototype.rem=LongPrototype.modulo;LongPrototype.not=function e(){return fromBits(~this.low,~this.high,this.unsigned)};LongPrototype.and=function e(t){return isLong(t)||(t=fromValue(t)),fromBits(this.low&t.low,this.high&t.high,this.unsigned)};LongPrototype.or=function e(t){return isLong(t)||(t=fromValue(t)),fromBits(this.low|t.low,this.high|t.high,this.unsigned)};LongPrototype.xor=function e(t){return isLong(t)||(t=fromValue(t)),fromBits(this.low^t.low,this.high^t.high,this.unsigned)};LongPrototype.shiftLeft=function e(t){return isLong(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?fromBits(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):fromBits(0,this.low<<t-32,this.unsigned)};LongPrototype.shl=LongPrototype.shiftLeft;LongPrototype.shiftRight=function e(t){return isLong(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?fromBits(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):fromBits(this.high>>t-32,this.high>=0?0:-1,this.unsigned)};LongPrototype.shr=LongPrototype.shiftRight;LongPrototype.shiftRightUnsigned=function e(t){if(isLong(t)&&(t=t.toInt()),t&=63,t===0)return this;var n=this.high;if(t<32){var r=this.low;return fromBits(r>>>t|n<<32-t,n>>>t,this.unsigned)}else return t===32?fromBits(n,0,this.unsigned):fromBits(n>>>t-32,0,this.unsigned)};LongPrototype.shru=LongPrototype.shiftRightUnsigned;LongPrototype.shr_u=LongPrototype.shiftRightUnsigned;LongPrototype.toSigned=function e(){return this.unsigned?fromBits(this.low,this.high,!1):this};LongPrototype.toUnsigned=function e(){return this.unsigned?this:fromBits(this.low,this.high,!0)};LongPrototype.toBytes=function e(t){return t?this.toBytesLE():this.toBytesBE()};LongPrototype.toBytesLE=function e(){var t=this.high,n=this.low;return[n&255,n>>>8&255,n>>>16&255,n>>>24,t&255,t>>>8&255,t>>>16&255,t>>>24]};LongPrototype.toBytesBE=function e(){var t=this.high,n=this.low;return[t>>>24,t>>>16&255,t>>>8&255,t&255,n>>>24,n>>>16&255,n>>>8&255,n&255]};Long.fromBytes=function e(t,n,r){return r?Long.fromBytesLE(t,n):Long.fromBytesBE(t,n)};Long.fromBytesLE=function e(t,n){return new Long(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,n)};Long.fromBytesBE=function e(t,n){return new Long(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],n)};function createBasePageRequest(){return{key:new Uint8Array,offset:"0",limit:"0",countTotal:!1,reverse:!1}}const PageRequest={encode(e,t=minimal.Writer.create()){return e.key.length!==0&&t.uint32(10).bytes(e.key),e.offset!=="0"&&t.uint32(16).uint64(e.offset),e.limit!=="0"&&t.uint32(24).uint64(e.limit),e.countTotal===!0&&t.uint32(32).bool(e.countTotal),e.reverse===!0&&t.uint32(40).bool(e.reverse),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBasePageRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.key=n.bytes();break;case 2:i.offset=longToString$a(n.uint64());break;case 3:i.limit=longToString$a(n.uint64());break;case 4:i.countTotal=n.bool();break;case 5:i.reverse=n.bool();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{key:isSet$l(e.key)?bytesFromBase64$b(e.key):new Uint8Array,offset:isSet$l(e.offset)?String(e.offset):"0",limit:isSet$l(e.limit)?String(e.limit):"0",countTotal:isSet$l(e.countTotal)?Boolean(e.countTotal):!1,reverse:isSet$l(e.reverse)?Boolean(e.reverse):!1}},toJSON(e){const t={};return e.key!==void 0&&(t.key=base64FromBytes$b(e.key!==void 0?e.key:new Uint8Array)),e.offset!==void 0&&(t.offset=e.offset),e.limit!==void 0&&(t.limit=e.limit),e.countTotal!==void 0&&(t.countTotal=e.countTotal),e.reverse!==void 0&&(t.reverse=e.reverse),t},fromPartial(e){const t=createBasePageRequest();return t.key=e.key??new Uint8Array,t.offset=e.offset??"0",t.limit=e.limit??"0",t.countTotal=e.countTotal??!1,t.reverse=e.reverse??!1,t}};function createBasePageResponse(){return{nextKey:new Uint8Array,total:"0"}}const PageResponse={encode(e,t=minimal.Writer.create()){return e.nextKey.length!==0&&t.uint32(10).bytes(e.nextKey),e.total!=="0"&&t.uint32(16).uint64(e.total),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBasePageResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.nextKey=n.bytes();break;case 2:i.total=longToString$a(n.uint64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{nextKey:isSet$l(e.nextKey)?bytesFromBase64$b(e.nextKey):new Uint8Array,total:isSet$l(e.total)?String(e.total):"0"}},toJSON(e){const t={};return e.nextKey!==void 0&&(t.nextKey=base64FromBytes$b(e.nextKey!==void 0?e.nextKey:new Uint8Array)),e.total!==void 0&&(t.total=e.total),t},fromPartial(e){const t=createBasePageResponse();return t.nextKey=e.nextKey??new Uint8Array,t.total=e.total??"0",t}};var globalThis$e=(()=>{if(typeof globalThis$e<"u")return globalThis$e;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$b=globalThis$e.atob||(e=>globalThis$e.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$b(e){const t=atob$b(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$b=globalThis$e.btoa||(e=>globalThis$e.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$b(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$b(t.join(""))}function longToString$a(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$l(e){return e!=null}function createBaseParams$1(){return{sendEnabled:[],defaultSendEnabled:!1}}const Params$1={encode(e,t=minimal.Writer.create()){for(const n of e.sendEnabled)SendEnabled.encode(n,t.uint32(10).fork()).ldelim();return e.defaultSendEnabled===!0&&t.uint32(16).bool(e.defaultSendEnabled),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseParams$1();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.sendEnabled.push(SendEnabled.decode(n,n.uint32()));break;case 2:i.defaultSendEnabled=n.bool();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{sendEnabled:Array.isArray(e?.sendEnabled)?e.sendEnabled.map(t=>SendEnabled.fromJSON(t)):[],defaultSendEnabled:isSet$k(e.defaultSendEnabled)?Boolean(e.defaultSendEnabled):!1}},toJSON(e){const t={};return e.sendEnabled?t.sendEnabled=e.sendEnabled.map(n=>n?SendEnabled.toJSON(n):void 0):t.sendEnabled=[],e.defaultSendEnabled!==void 0&&(t.defaultSendEnabled=e.defaultSendEnabled),t},fromPartial(e){const t=createBaseParams$1();return t.sendEnabled=e.sendEnabled?.map(n=>SendEnabled.fromPartial(n))||[],t.defaultSendEnabled=e.defaultSendEnabled??!1,t}};function createBaseSendEnabled(){return{denom:"",enabled:!1}}const SendEnabled={encode(e,t=minimal.Writer.create()){return e.denom!==""&&t.uint32(10).string(e.denom),e.enabled===!0&&t.uint32(16).bool(e.enabled),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseSendEnabled();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.denom=n.string();break;case 2:i.enabled=n.bool();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{denom:isSet$k(e.denom)?String(e.denom):"",enabled:isSet$k(e.enabled)?Boolean(e.enabled):!1}},toJSON(e){const t={};return e.denom!==void 0&&(t.denom=e.denom),e.enabled!==void 0&&(t.enabled=e.enabled),t},fromPartial(e){const t=createBaseSendEnabled();return t.denom=e.denom??"",t.enabled=e.enabled??!1,t}};function createBaseDenomUnit(){return{denom:"",exponent:0,aliases:[]}}const DenomUnit={encode(e,t=minimal.Writer.create()){e.denom!==""&&t.uint32(10).string(e.denom),e.exponent!==0&&t.uint32(16).uint32(e.exponent);for(const n of e.aliases)t.uint32(26).string(n);return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseDenomUnit();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.denom=n.string();break;case 2:i.exponent=n.uint32();break;case 3:i.aliases.push(n.string());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{denom:isSet$k(e.denom)?String(e.denom):"",exponent:isSet$k(e.exponent)?Number(e.exponent):0,aliases:Array.isArray(e?.aliases)?e.aliases.map(t=>String(t)):[]}},toJSON(e){const t={};return e.denom!==void 0&&(t.denom=e.denom),e.exponent!==void 0&&(t.exponent=Math.round(e.exponent)),e.aliases?t.aliases=e.aliases.map(n=>n):t.aliases=[],t},fromPartial(e){const t=createBaseDenomUnit();return t.denom=e.denom??"",t.exponent=e.exponent??0,t.aliases=e.aliases?.map(n=>n)||[],t}};function createBaseMetadata(){return{description:"",denomUnits:[],base:"",display:"",name:"",symbol:""}}const Metadata={encode(e,t=minimal.Writer.create()){e.description!==""&&t.uint32(10).string(e.description);for(const n of e.denomUnits)DenomUnit.encode(n,t.uint32(18).fork()).ldelim();return e.base!==""&&t.uint32(26).string(e.base),e.display!==""&&t.uint32(34).string(e.display),e.name!==""&&t.uint32(42).string(e.name),e.symbol!==""&&t.uint32(50).string(e.symbol),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseMetadata();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.description=n.string();break;case 2:i.denomUnits.push(DenomUnit.decode(n,n.uint32()));break;case 3:i.base=n.string();break;case 4:i.display=n.string();break;case 5:i.name=n.string();break;case 6:i.symbol=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{description:isSet$k(e.description)?String(e.description):"",denomUnits:Array.isArray(e?.denomUnits)?e.denomUnits.map(t=>DenomUnit.fromJSON(t)):[],base:isSet$k(e.base)?String(e.base):"",display:isSet$k(e.display)?String(e.display):"",name:isSet$k(e.name)?String(e.name):"",symbol:isSet$k(e.symbol)?String(e.symbol):""}},toJSON(e){const t={};return e.description!==void 0&&(t.description=e.description),e.denomUnits?t.denomUnits=e.denomUnits.map(n=>n?DenomUnit.toJSON(n):void 0):t.denomUnits=[],e.base!==void 0&&(t.base=e.base),e.display!==void 0&&(t.display=e.display),e.name!==void 0&&(t.name=e.name),e.symbol!==void 0&&(t.symbol=e.symbol),t},fromPartial(e){const t=createBaseMetadata();return t.description=e.description??"",t.denomUnits=e.denomUnits?.map(n=>DenomUnit.fromPartial(n))||[],t.base=e.base??"",t.display=e.display??"",t.name=e.name??"",t.symbol=e.symbol??"",t}};function isSet$k(e){return e!=null}var browserHeaders_umd={exports:{}};(function(e,t){(function(r,i){e.exports=i()})(commonjsGlobal,function(){return function(n){var r={};function i(o){if(r[o])return r[o].exports;var a=r[o]={i:o,l:!1,exports:{}};return n[o].call(a.exports,a,a.exports,i),a.l=!0,a.exports}return i.m=n,i.c=r,i.i=function(o){return o},i.d=function(o,a,s){i.o(o,a)||Object.defineProperty(o,a,{configurable:!1,enumerable:!0,get:s})},i.n=function(o){var a=o&&o.__esModule?function(){return o.default}:function(){return o};return i.d(a,"a",a),a},i.o=function(o,a){return Object.prototype.hasOwnProperty.call(o,a)},i.p="",i(i.s=1)}([function(n,r,i){Object.defineProperty(r,"__esModule",{value:!0});var o=i(3);function a(c){return typeof c=="object"&&typeof c.headersMap=="object"&&typeof c.forEach=="function"}var s=function(){function c(l,u){l===void 0&&(l={}),u===void 0&&(u={splitValues:!1});var f=this;if(this.headersMap={},l)if(typeof Headers<"u"&&l instanceof Headers){var d=o.getHeaderKeys(l);d.forEach(function(_){var h=o.getHeaderValues(l,_);h.forEach(function(A){u.splitValues?f.append(_,o.splitHeaderValue(A)):f.append(_,A)})})}else if(a(l))l.forEach(function(_,h){f.append(_,h)});else if(typeof Map<"u"&&l instanceof Map){var g=l;g.forEach(function(_,h){f.append(h,_)})}else typeof l=="string"?this.appendFromString(l):typeof l=="object"&&Object.getOwnPropertyNames(l).forEach(function(_){var h=l,A=h[_];Array.isArray(A)?A.forEach(function(m){f.append(_,m)}):f.append(_,A)})}return c.prototype.appendFromString=function(l){for(var u=l.split(`\r
`),f=0;f<u.length;f++){var d=u[f],g=d.indexOf(":");if(g>0){var _=d.substring(0,g).trim(),h=d.substring(g+1).trim();this.append(_,h)}}},c.prototype.delete=function(l,u){var f=o.normalizeName(l);if(u===void 0)delete this.headersMap[f];else{var d=this.headersMap[f];if(d){var g=d.indexOf(u);g>=0&&d.splice(g,1),d.length===0&&delete this.headersMap[f]}}},c.prototype.append=function(l,u){var f=this,d=o.normalizeName(l);Array.isArray(this.headersMap[d])||(this.headersMap[d]=[]),Array.isArray(u)?u.forEach(function(g){f.headersMap[d].push(o.normalizeValue(g))}):this.headersMap[d].push(o.normalizeValue(u))},c.prototype.set=function(l,u){var f=o.normalizeName(l);if(Array.isArray(u)){var d=[];u.forEach(function(g){d.push(o.normalizeValue(g))}),this.headersMap[f]=d}else this.headersMap[f]=[o.normalizeValue(u)]},c.prototype.has=function(l,u){var f=this.headersMap[o.normalizeName(l)],d=Array.isArray(f);if(!d)return!1;if(u!==void 0){var g=o.normalizeValue(u);return f.indexOf(g)>=0}else return!0},c.prototype.get=function(l){var u=this.headersMap[o.normalizeName(l)];return u!==void 0?u.concat():[]},c.prototype.forEach=function(l){var u=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(f){l(f,u.headersMap[f])},this)},c.prototype.toHeaders=function(){if(typeof Headers<"u"){var l=new Headers;return this.forEach(function(u,f){f.forEach(function(d){l.append(u,d)})}),l}else throw new Error("Headers class is not defined")},c}();r.BrowserHeaders=s},function(n,r,i){Object.defineProperty(r,"__esModule",{value:!0});var o=i(0);r.BrowserHeaders=o.BrowserHeaders},function(n,r,i){Object.defineProperty(r,"__esModule",{value:!0});function o(s,c){for(var l=s[Symbol.iterator](),u=l.next();!u.done;)c(u.value[0]),u=l.next()}r.iterateHeaders=o;function a(s,c){for(var l=s.keys(),u=l.next();!u.done;)c(u.value),u=l.next()}r.iterateHeadersKeys=a},function(n,r,i){Object.defineProperty(r,"__esModule",{value:!0});var o=i(2);function a(d){if(typeof d!="string"&&(d=String(d)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(d))throw new TypeError("Invalid character in header field name");return d.toLowerCase()}r.normalizeName=a;function s(d){return typeof d!="string"&&(d=String(d)),d}r.normalizeValue=s;function c(d,g){var _=d;if(_ instanceof Headers&&_.getAll)return _.getAll(g);var h=_.get(g);return h&&typeof h=="string"?[h]:h}r.getHeaderValues=c;function l(d){return d}function u(d){var g=d,_={},h=[];return g.keys?o.iterateHeadersKeys(g,function(A){_[A]||(_[A]=!0,h.push(A))}):g.forEach?g.forEach(function(A,m){_[m]||(_[m]=!0,h.push(m))}):o.iterateHeaders(g,function(A){var m=A[0];_[m]||(_[m]=!0,h.push(m))}),h}r.getHeaderKeys=u;function f(d){var g=[],_=d.split(", ");return _.forEach(function(h){h.split(",").forEach(function(A){g.push(A)})}),g}r.splitHeaderValue=f}])})})(browserHeaders_umd);function createBaseQueryBalanceRequest(){return{address:"",denom:""}}const QueryBalanceRequest={encode(e,t=minimal.Writer.create()){return e.address!==""&&t.uint32(10).string(e.address),e.denom!==""&&t.uint32(18).string(e.denom),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryBalanceRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.address=n.string();break;case 2:i.denom=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{address:isSet$j(e.address)?String(e.address):"",denom:isSet$j(e.denom)?String(e.denom):""}},toJSON(e){const t={};return e.address!==void 0&&(t.address=e.address),e.denom!==void 0&&(t.denom=e.denom),t},fromPartial(e){const t=createBaseQueryBalanceRequest();return t.address=e.address??"",t.denom=e.denom??"",t}};function createBaseQueryBalanceResponse(){return{balance:void 0}}const QueryBalanceResponse={encode(e,t=minimal.Writer.create()){return e.balance!==void 0&&Coin.encode(e.balance,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryBalanceResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.balance=Coin.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{balance:isSet$j(e.balance)?Coin.fromJSON(e.balance):void 0}},toJSON(e){const t={};return e.balance!==void 0&&(t.balance=e.balance?Coin.toJSON(e.balance):void 0),t},fromPartial(e){const t=createBaseQueryBalanceResponse();return t.balance=e.balance!==void 0&&e.balance!==null?Coin.fromPartial(e.balance):void 0,t}};function createBaseQueryAllBalancesRequest(){return{address:"",pagination:void 0}}const QueryAllBalancesRequest={encode(e,t=minimal.Writer.create()){return e.address!==""&&t.uint32(10).string(e.address),e.pagination!==void 0&&PageRequest.encode(e.pagination,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryAllBalancesRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.address=n.string();break;case 2:i.pagination=PageRequest.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{address:isSet$j(e.address)?String(e.address):"",pagination:isSet$j(e.pagination)?PageRequest.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.address!==void 0&&(t.address=e.address),e.pagination!==void 0&&(t.pagination=e.pagination?PageRequest.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseQueryAllBalancesRequest();return t.address=e.address??"",t.pagination=e.pagination!==void 0&&e.pagination!==null?PageRequest.fromPartial(e.pagination):void 0,t}};function createBaseQueryAllBalancesResponse(){return{balances:[],pagination:void 0}}const QueryAllBalancesResponse={encode(e,t=minimal.Writer.create()){for(const n of e.balances)Coin.encode(n,t.uint32(10).fork()).ldelim();return e.pagination!==void 0&&PageResponse.encode(e.pagination,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryAllBalancesResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.balances.push(Coin.decode(n,n.uint32()));break;case 2:i.pagination=PageResponse.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{balances:Array.isArray(e?.balances)?e.balances.map(t=>Coin.fromJSON(t)):[],pagination:isSet$j(e.pagination)?PageResponse.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.balances?t.balances=e.balances.map(n=>n?Coin.toJSON(n):void 0):t.balances=[],e.pagination!==void 0&&(t.pagination=e.pagination?PageResponse.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseQueryAllBalancesResponse();return t.balances=e.balances?.map(n=>Coin.fromPartial(n))||[],t.pagination=e.pagination!==void 0&&e.pagination!==null?PageResponse.fromPartial(e.pagination):void 0,t}};function createBaseQueryTotalSupplyRequest(){return{pagination:void 0}}const QueryTotalSupplyRequest={encode(e,t=minimal.Writer.create()){return e.pagination!==void 0&&PageRequest.encode(e.pagination,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryTotalSupplyRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.pagination=PageRequest.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{pagination:isSet$j(e.pagination)?PageRequest.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.pagination!==void 0&&(t.pagination=e.pagination?PageRequest.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseQueryTotalSupplyRequest();return t.pagination=e.pagination!==void 0&&e.pagination!==null?PageRequest.fromPartial(e.pagination):void 0,t}};function createBaseQueryTotalSupplyResponse(){return{supply:[],pagination:void 0}}const QueryTotalSupplyResponse={encode(e,t=minimal.Writer.create()){for(const n of e.supply)Coin.encode(n,t.uint32(10).fork()).ldelim();return e.pagination!==void 0&&PageResponse.encode(e.pagination,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryTotalSupplyResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.supply.push(Coin.decode(n,n.uint32()));break;case 2:i.pagination=PageResponse.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{supply:Array.isArray(e?.supply)?e.supply.map(t=>Coin.fromJSON(t)):[],pagination:isSet$j(e.pagination)?PageResponse.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.supply?t.supply=e.supply.map(n=>n?Coin.toJSON(n):void 0):t.supply=[],e.pagination!==void 0&&(t.pagination=e.pagination?PageResponse.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseQueryTotalSupplyResponse();return t.supply=e.supply?.map(n=>Coin.fromPartial(n))||[],t.pagination=e.pagination!==void 0&&e.pagination!==null?PageResponse.fromPartial(e.pagination):void 0,t}};function createBaseQuerySupplyOfRequest(){return{denom:""}}const QuerySupplyOfRequest={encode(e,t=minimal.Writer.create()){return e.denom!==""&&t.uint32(10).string(e.denom),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQuerySupplyOfRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.denom=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{denom:isSet$j(e.denom)?String(e.denom):""}},toJSON(e){const t={};return e.denom!==void 0&&(t.denom=e.denom),t},fromPartial(e){const t=createBaseQuerySupplyOfRequest();return t.denom=e.denom??"",t}};function createBaseQuerySupplyOfResponse(){return{amount:void 0}}const QuerySupplyOfResponse={encode(e,t=minimal.Writer.create()){return e.amount!==void 0&&Coin.encode(e.amount,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQuerySupplyOfResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.amount=Coin.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{amount:isSet$j(e.amount)?Coin.fromJSON(e.amount):void 0}},toJSON(e){const t={};return e.amount!==void 0&&(t.amount=e.amount?Coin.toJSON(e.amount):void 0),t},fromPartial(e){const t=createBaseQuerySupplyOfResponse();return t.amount=e.amount!==void 0&&e.amount!==null?Coin.fromPartial(e.amount):void 0,t}};function createBaseQueryParamsRequest$1(){return{}}const QueryParamsRequest$1={encode(e,t=minimal.Writer.create()){return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryParamsRequest$1();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){default:n.skipType(o&7);break}}return i},fromJSON(e){return{}},toJSON(e){return{}},fromPartial(e){return createBaseQueryParamsRequest$1()}};function createBaseQueryParamsResponse$1(){return{params:void 0}}const QueryParamsResponse$1={encode(e,t=minimal.Writer.create()){return e.params!==void 0&&Params$1.encode(e.params,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryParamsResponse$1();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.params=Params$1.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{params:isSet$j(e.params)?Params$1.fromJSON(e.params):void 0}},toJSON(e){const t={};return e.params!==void 0&&(t.params=e.params?Params$1.toJSON(e.params):void 0),t},fromPartial(e){const t=createBaseQueryParamsResponse$1();return t.params=e.params!==void 0&&e.params!==null?Params$1.fromPartial(e.params):void 0,t}};function createBaseQueryDenomsMetadataRequest(){return{pagination:void 0}}const QueryDenomsMetadataRequest={encode(e,t=minimal.Writer.create()){return e.pagination!==void 0&&PageRequest.encode(e.pagination,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryDenomsMetadataRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.pagination=PageRequest.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{pagination:isSet$j(e.pagination)?PageRequest.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.pagination!==void 0&&(t.pagination=e.pagination?PageRequest.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseQueryDenomsMetadataRequest();return t.pagination=e.pagination!==void 0&&e.pagination!==null?PageRequest.fromPartial(e.pagination):void 0,t}};function createBaseQueryDenomsMetadataResponse(){return{metadatas:[],pagination:void 0}}const QueryDenomsMetadataResponse={encode(e,t=minimal.Writer.create()){for(const n of e.metadatas)Metadata.encode(n,t.uint32(10).fork()).ldelim();return e.pagination!==void 0&&PageResponse.encode(e.pagination,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryDenomsMetadataResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.metadatas.push(Metadata.decode(n,n.uint32()));break;case 2:i.pagination=PageResponse.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{metadatas:Array.isArray(e?.metadatas)?e.metadatas.map(t=>Metadata.fromJSON(t)):[],pagination:isSet$j(e.pagination)?PageResponse.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.metadatas?t.metadatas=e.metadatas.map(n=>n?Metadata.toJSON(n):void 0):t.metadatas=[],e.pagination!==void 0&&(t.pagination=e.pagination?PageResponse.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseQueryDenomsMetadataResponse();return t.metadatas=e.metadatas?.map(n=>Metadata.fromPartial(n))||[],t.pagination=e.pagination!==void 0&&e.pagination!==null?PageResponse.fromPartial(e.pagination):void 0,t}};function createBaseQueryDenomMetadataRequest(){return{denom:""}}const QueryDenomMetadataRequest={encode(e,t=minimal.Writer.create()){return e.denom!==""&&t.uint32(10).string(e.denom),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryDenomMetadataRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.denom=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{denom:isSet$j(e.denom)?String(e.denom):""}},toJSON(e){const t={};return e.denom!==void 0&&(t.denom=e.denom),t},fromPartial(e){const t=createBaseQueryDenomMetadataRequest();return t.denom=e.denom??"",t}};function createBaseQueryDenomMetadataResponse(){return{metadata:void 0}}const QueryDenomMetadataResponse={encode(e,t=minimal.Writer.create()){return e.metadata!==void 0&&Metadata.encode(e.metadata,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryDenomMetadataResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.metadata=Metadata.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{metadata:isSet$j(e.metadata)?Metadata.fromJSON(e.metadata):void 0}},toJSON(e){const t={};return e.metadata!==void 0&&(t.metadata=e.metadata?Metadata.toJSON(e.metadata):void 0),t},fromPartial(e){const t=createBaseQueryDenomMetadataResponse();return t.metadata=e.metadata!==void 0&&e.metadata!==null?Metadata.fromPartial(e.metadata):void 0,t}};class QueryClientImpl$1{constructor(t){de(this,"rpc");this.rpc=t,this.balance=this.balance.bind(this),this.allBalances=this.allBalances.bind(this),this.totalSupply=this.totalSupply.bind(this),this.supplyOf=this.supplyOf.bind(this),this.params=this.params.bind(this),this.denomMetadata=this.denomMetadata.bind(this),this.denomsMetadata=this.denomsMetadata.bind(this)}balance(t,n){return this.rpc.unary(QueryBalanceDesc,QueryBalanceRequest.fromPartial(t),n)}allBalances(t,n){return this.rpc.unary(QueryAllBalancesDesc,QueryAllBalancesRequest.fromPartial(t),n)}totalSupply(t,n){return this.rpc.unary(QueryTotalSupplyDesc,QueryTotalSupplyRequest.fromPartial(t),n)}supplyOf(t,n){return this.rpc.unary(QuerySupplyOfDesc,QuerySupplyOfRequest.fromPartial(t),n)}params(t,n){return this.rpc.unary(QueryParamsDesc$1,QueryParamsRequest$1.fromPartial(t),n)}denomMetadata(t,n){return this.rpc.unary(QueryDenomMetadataDesc,QueryDenomMetadataRequest.fromPartial(t),n)}denomsMetadata(t,n){return this.rpc.unary(QueryDenomsMetadataDesc,QueryDenomsMetadataRequest.fromPartial(t),n)}}const QueryDesc$1={serviceName:"cosmos.bank.v1beta1.Query"},QueryBalanceDesc={methodName:"Balance",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryBalanceRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QueryBalanceResponse.decode(e),toObject(){return this}}}}},QueryAllBalancesDesc={methodName:"AllBalances",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAllBalancesRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QueryAllBalancesResponse.decode(e),toObject(){return this}}}}},QueryTotalSupplyDesc={methodName:"TotalSupply",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryTotalSupplyRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QueryTotalSupplyResponse.decode(e),toObject(){return this}}}}},QuerySupplyOfDesc={methodName:"SupplyOf",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QuerySupplyOfRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QuerySupplyOfResponse.decode(e),toObject(){return this}}}}},QueryParamsDesc$1={methodName:"Params",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryParamsRequest$1.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QueryParamsResponse$1.decode(e),toObject(){return this}}}}},QueryDenomMetadataDesc={methodName:"DenomMetadata",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryDenomMetadataRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QueryDenomMetadataResponse.decode(e),toObject(){return this}}}}},QueryDenomsMetadataDesc={methodName:"DenomsMetadata",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryDenomsMetadataRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QueryDenomsMetadataResponse.decode(e),toObject(){return this}}}}};class GrpcWebImpl{constructor(t,n){de(this,"host");de(this,"options");this.host=t,this.options=n}unary(t,n,r){const i={...n,...t.requestType},o=r&&this.options.metadata?new browserHeaders_umd.exports.BrowserHeaders({...this.options?.metadata.headersMap,...r?.headersMap}):r||this.options.metadata;return new Promise((a,s)=>{grpcWebClient_umd.exports.grpc.unary(t,{request:i,host:this.host,metadata:o,transport:this.options.transport,debug:this.options.debug,onEnd:function(c){if(c.status===grpcWebClient_umd.exports.grpc.Code.OK)a(c.message);else{const l=new Error(c.statusMessage);l.code=c.status,l.metadata=c.trailers,s(l)}}})})}}function isSet$j(e){return e!=null}function createBaseAny(){return{typeUrl:"",value:new Uint8Array}}const Any={encode(e,t=minimal.Writer.create()){return e.typeUrl!==""&&t.uint32(10).string(e.typeUrl),e.value.length!==0&&t.uint32(18).bytes(e.value),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseAny();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.typeUrl=n.string();break;case 2:i.value=n.bytes();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{typeUrl:isSet$i(e.typeUrl)?String(e.typeUrl):"",value:isSet$i(e.value)?bytesFromBase64$a(e.value):new Uint8Array}},toJSON(e){const t={};return e.typeUrl!==void 0&&(t.typeUrl=e.typeUrl),e.value!==void 0&&(t.value=base64FromBytes$a(e.value!==void 0?e.value:new Uint8Array)),t},fromPartial(e){const t=createBaseAny();return t.typeUrl=e.typeUrl??"",t.value=e.value??new Uint8Array,t}};var globalThis$d=(()=>{if(typeof globalThis$d<"u")return globalThis$d;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$a=globalThis$d.atob||(e=>globalThis$d.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$a(e){const t=atob$a(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$a=globalThis$d.btoa||(e=>globalThis$d.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$a(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$a(t.join(""))}function isSet$i(e){return e!=null}function createBaseBaseAccount(){return{address:"",pubKey:void 0,accountNumber:"0",sequence:"0"}}const BaseAccount={encode(e,t=minimal.Writer.create()){return e.address!==""&&t.uint32(10).string(e.address),e.pubKey!==void 0&&Any.encode(e.pubKey,t.uint32(18).fork()).ldelim(),e.accountNumber!=="0"&&t.uint32(24).uint64(e.accountNumber),e.sequence!=="0"&&t.uint32(32).uint64(e.sequence),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseBaseAccount();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.address=n.string();break;case 2:i.pubKey=Any.decode(n,n.uint32());break;case 3:i.accountNumber=longToString$9(n.uint64());break;case 4:i.sequence=longToString$9(n.uint64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{address:isSet$h(e.address)?String(e.address):"",pubKey:isSet$h(e.pubKey)?Any.fromJSON(e.pubKey):void 0,accountNumber:isSet$h(e.accountNumber)?String(e.accountNumber):"0",sequence:isSet$h(e.sequence)?String(e.sequence):"0"}},toJSON(e){const t={};return e.address!==void 0&&(t.address=e.address),e.pubKey!==void 0&&(t.pubKey=e.pubKey?Any.toJSON(e.pubKey):void 0),e.accountNumber!==void 0&&(t.accountNumber=e.accountNumber),e.sequence!==void 0&&(t.sequence=e.sequence),t},fromPartial(e){const t=createBaseBaseAccount();return t.address=e.address??"",t.pubKey=e.pubKey!==void 0&&e.pubKey!==null?Any.fromPartial(e.pubKey):void 0,t.accountNumber=e.accountNumber??"0",t.sequence=e.sequence??"0",t}};function createBaseParams(){return{maxMemoCharacters:"0",txSigLimit:"0",txSizeCostPerByte:"0",sigVerifyCostEd25519:"0",sigVerifyCostSecp256k1:"0"}}const Params={encode(e,t=minimal.Writer.create()){return e.maxMemoCharacters!=="0"&&t.uint32(8).uint64(e.maxMemoCharacters),e.txSigLimit!=="0"&&t.uint32(16).uint64(e.txSigLimit),e.txSizeCostPerByte!=="0"&&t.uint32(24).uint64(e.txSizeCostPerByte),e.sigVerifyCostEd25519!=="0"&&t.uint32(32).uint64(e.sigVerifyCostEd25519),e.sigVerifyCostSecp256k1!=="0"&&t.uint32(40).uint64(e.sigVerifyCostSecp256k1),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseParams();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.maxMemoCharacters=longToString$9(n.uint64());break;case 2:i.txSigLimit=longToString$9(n.uint64());break;case 3:i.txSizeCostPerByte=longToString$9(n.uint64());break;case 4:i.sigVerifyCostEd25519=longToString$9(n.uint64());break;case 5:i.sigVerifyCostSecp256k1=longToString$9(n.uint64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{maxMemoCharacters:isSet$h(e.maxMemoCharacters)?String(e.maxMemoCharacters):"0",txSigLimit:isSet$h(e.txSigLimit)?String(e.txSigLimit):"0",txSizeCostPerByte:isSet$h(e.txSizeCostPerByte)?String(e.txSizeCostPerByte):"0",sigVerifyCostEd25519:isSet$h(e.sigVerifyCostEd25519)?String(e.sigVerifyCostEd25519):"0",sigVerifyCostSecp256k1:isSet$h(e.sigVerifyCostSecp256k1)?String(e.sigVerifyCostSecp256k1):"0"}},toJSON(e){const t={};return e.maxMemoCharacters!==void 0&&(t.maxMemoCharacters=e.maxMemoCharacters),e.txSigLimit!==void 0&&(t.txSigLimit=e.txSigLimit),e.txSizeCostPerByte!==void 0&&(t.txSizeCostPerByte=e.txSizeCostPerByte),e.sigVerifyCostEd25519!==void 0&&(t.sigVerifyCostEd25519=e.sigVerifyCostEd25519),e.sigVerifyCostSecp256k1!==void 0&&(t.sigVerifyCostSecp256k1=e.sigVerifyCostSecp256k1),t},fromPartial(e){const t=createBaseParams();return t.maxMemoCharacters=e.maxMemoCharacters??"0",t.txSigLimit=e.txSigLimit??"0",t.txSizeCostPerByte=e.txSizeCostPerByte??"0",t.sigVerifyCostEd25519=e.sigVerifyCostEd25519??"0",t.sigVerifyCostSecp256k1=e.sigVerifyCostSecp256k1??"0",t}};function longToString$9(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$h(e){return e!=null}function createBaseQueryAccountsRequest(){return{pagination:void 0}}const QueryAccountsRequest={encode(e,t=minimal.Writer.create()){return e.pagination!==void 0&&PageRequest.encode(e.pagination,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryAccountsRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.pagination=PageRequest.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{pagination:isSet$g(e.pagination)?PageRequest.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.pagination!==void 0&&(t.pagination=e.pagination?PageRequest.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseQueryAccountsRequest();return t.pagination=e.pagination!==void 0&&e.pagination!==null?PageRequest.fromPartial(e.pagination):void 0,t}};function createBaseQueryAccountsResponse(){return{accounts:[],pagination:void 0}}const QueryAccountsResponse={encode(e,t=minimal.Writer.create()){for(const n of e.accounts)Any.encode(n,t.uint32(10).fork()).ldelim();return e.pagination!==void 0&&PageResponse.encode(e.pagination,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryAccountsResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.accounts.push(Any.decode(n,n.uint32()));break;case 2:i.pagination=PageResponse.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{accounts:Array.isArray(e?.accounts)?e.accounts.map(t=>Any.fromJSON(t)):[],pagination:isSet$g(e.pagination)?PageResponse.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.accounts?t.accounts=e.accounts.map(n=>n?Any.toJSON(n):void 0):t.accounts=[],e.pagination!==void 0&&(t.pagination=e.pagination?PageResponse.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseQueryAccountsResponse();return t.accounts=e.accounts?.map(n=>Any.fromPartial(n))||[],t.pagination=e.pagination!==void 0&&e.pagination!==null?PageResponse.fromPartial(e.pagination):void 0,t}};function createBaseQueryAccountRequest(){return{address:""}}const QueryAccountRequest={encode(e,t=minimal.Writer.create()){return e.address!==""&&t.uint32(10).string(e.address),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryAccountRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.address=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{address:isSet$g(e.address)?String(e.address):""}},toJSON(e){const t={};return e.address!==void 0&&(t.address=e.address),t},fromPartial(e){const t=createBaseQueryAccountRequest();return t.address=e.address??"",t}};function createBaseQueryAccountResponse(){return{account:void 0}}const QueryAccountResponse={encode(e,t=minimal.Writer.create()){return e.account!==void 0&&Any.encode(e.account,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryAccountResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.account=Any.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{account:isSet$g(e.account)?Any.fromJSON(e.account):void 0}},toJSON(e){const t={};return e.account!==void 0&&(t.account=e.account?Any.toJSON(e.account):void 0),t},fromPartial(e){const t=createBaseQueryAccountResponse();return t.account=e.account!==void 0&&e.account!==null?Any.fromPartial(e.account):void 0,t}};function createBaseQueryParamsRequest(){return{}}const QueryParamsRequest={encode(e,t=minimal.Writer.create()){return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryParamsRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){default:n.skipType(o&7);break}}return i},fromJSON(e){return{}},toJSON(e){return{}},fromPartial(e){return createBaseQueryParamsRequest()}};function createBaseQueryParamsResponse(){return{params:void 0}}const QueryParamsResponse={encode(e,t=minimal.Writer.create()){return e.params!==void 0&&Params.encode(e.params,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseQueryParamsResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.params=Params.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{params:isSet$g(e.params)?Params.fromJSON(e.params):void 0}},toJSON(e){const t={};return e.params!==void 0&&(t.params=e.params?Params.toJSON(e.params):void 0),t},fromPartial(e){const t=createBaseQueryParamsResponse();return t.params=e.params!==void 0&&e.params!==null?Params.fromPartial(e.params):void 0,t}};class QueryClientImpl{constructor(t){de(this,"rpc");this.rpc=t,this.accounts=this.accounts.bind(this),this.account=this.account.bind(this),this.params=this.params.bind(this)}accounts(t,n){return this.rpc.unary(QueryAccountsDesc,QueryAccountsRequest.fromPartial(t),n)}account(t,n){return this.rpc.unary(QueryAccountDesc,QueryAccountRequest.fromPartial(t),n)}params(t,n){return this.rpc.unary(QueryParamsDesc,QueryParamsRequest.fromPartial(t),n)}}const QueryDesc={serviceName:"cosmos.auth.v1beta1.Query"},QueryAccountsDesc={methodName:"Accounts",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAccountsRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QueryAccountsResponse.decode(e),toObject(){return this}}}}},QueryAccountDesc={methodName:"Account",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAccountRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QueryAccountResponse.decode(e),toObject(){return this}}}}},QueryParamsDesc={methodName:"Params",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryParamsRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...QueryParamsResponse.decode(e),toObject(){return this}}}}};function isSet$g(e){return e!=null}function createBaseTimestamp(){return{seconds:"0",nanos:0}}const Timestamp={encode(e,t=minimal.Writer.create()){return e.seconds!=="0"&&t.uint32(8).int64(e.seconds),e.nanos!==0&&t.uint32(16).int32(e.nanos),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseTimestamp();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.seconds=longToString$8(n.int64());break;case 2:i.nanos=n.int32();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{seconds:isSet$f(e.seconds)?String(e.seconds):"0",nanos:isSet$f(e.nanos)?Number(e.nanos):0}},toJSON(e){const t={};return e.seconds!==void 0&&(t.seconds=e.seconds),e.nanos!==void 0&&(t.nanos=Math.round(e.nanos)),t},fromPartial(e){const t=createBaseTimestamp();return t.seconds=e.seconds??"0",t.nanos=e.nanos??0,t}};function longToString$8(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$f(e){return e!=null}var globalThis$c=(()=>{if(typeof globalThis$c<"u")return globalThis$c;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$c.atob;globalThis$c.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function createBaseConsensus(){return{block:"0",app:"0"}}const Consensus={encode(e,t=minimal.Writer.create()){return e.block!=="0"&&t.uint32(8).uint64(e.block),e.app!=="0"&&t.uint32(16).uint64(e.app),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseConsensus();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.block=longToString$7(n.uint64());break;case 2:i.app=longToString$7(n.uint64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{block:isSet$e(e.block)?String(e.block):"0",app:isSet$e(e.app)?String(e.app):"0"}},toJSON(e){const t={};return e.block!==void 0&&(t.block=e.block),e.app!==void 0&&(t.app=e.app),t},fromPartial(e){const t=createBaseConsensus();return t.block=e.block??"0",t.app=e.app??"0",t}};function longToString$7(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$e(e){return e!=null}function createBasePublicKey(){return{ed25519:void 0,secp256k1:void 0}}const PublicKey={encode(e,t=minimal.Writer.create()){return e.ed25519!==void 0&&t.uint32(10).bytes(e.ed25519),e.secp256k1!==void 0&&t.uint32(18).bytes(e.secp256k1),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBasePublicKey();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.ed25519=n.bytes();break;case 2:i.secp256k1=n.bytes();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{ed25519:isSet$d(e.ed25519)?bytesFromBase64$9(e.ed25519):void 0,secp256k1:isSet$d(e.secp256k1)?bytesFromBase64$9(e.secp256k1):void 0}},toJSON(e){const t={};return e.ed25519!==void 0&&(t.ed25519=e.ed25519!==void 0?base64FromBytes$9(e.ed25519):void 0),e.secp256k1!==void 0&&(t.secp256k1=e.secp256k1!==void 0?base64FromBytes$9(e.secp256k1):void 0),t},fromPartial(e){const t=createBasePublicKey();return t.ed25519=e.ed25519??void 0,t.secp256k1=e.secp256k1??void 0,t}};var globalThis$b=(()=>{if(typeof globalThis$b<"u")return globalThis$b;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$9=globalThis$b.atob||(e=>globalThis$b.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$9(e){const t=atob$9(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$9=globalThis$b.btoa||(e=>globalThis$b.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$9(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$9(t.join(""))}function isSet$d(e){return e!=null}function createBaseValidatorSet(){return{validators:[],proposer:void 0,totalVotingPower:"0"}}const ValidatorSet={encode(e,t=minimal.Writer.create()){for(const n of e.validators)Validator$1.encode(n,t.uint32(10).fork()).ldelim();return e.proposer!==void 0&&Validator$1.encode(e.proposer,t.uint32(18).fork()).ldelim(),e.totalVotingPower!=="0"&&t.uint32(24).int64(e.totalVotingPower),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseValidatorSet();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.validators.push(Validator$1.decode(n,n.uint32()));break;case 2:i.proposer=Validator$1.decode(n,n.uint32());break;case 3:i.totalVotingPower=longToString$6(n.int64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{validators:Array.isArray(e?.validators)?e.validators.map(t=>Validator$1.fromJSON(t)):[],proposer:isSet$c(e.proposer)?Validator$1.fromJSON(e.proposer):void 0,totalVotingPower:isSet$c(e.totalVotingPower)?String(e.totalVotingPower):"0"}},toJSON(e){const t={};return e.validators?t.validators=e.validators.map(n=>n?Validator$1.toJSON(n):void 0):t.validators=[],e.proposer!==void 0&&(t.proposer=e.proposer?Validator$1.toJSON(e.proposer):void 0),e.totalVotingPower!==void 0&&(t.totalVotingPower=e.totalVotingPower),t},fromPartial(e){const t=createBaseValidatorSet();return t.validators=e.validators?.map(n=>Validator$1.fromPartial(n))||[],t.proposer=e.proposer!==void 0&&e.proposer!==null?Validator$1.fromPartial(e.proposer):void 0,t.totalVotingPower=e.totalVotingPower??"0",t}};function createBaseValidator$1(){return{address:new Uint8Array,pubKey:void 0,votingPower:"0",proposerPriority:"0"}}const Validator$1={encode(e,t=minimal.Writer.create()){return e.address.length!==0&&t.uint32(10).bytes(e.address),e.pubKey!==void 0&&PublicKey.encode(e.pubKey,t.uint32(18).fork()).ldelim(),e.votingPower!=="0"&&t.uint32(24).int64(e.votingPower),e.proposerPriority!=="0"&&t.uint32(32).int64(e.proposerPriority),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseValidator$1();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.address=n.bytes();break;case 2:i.pubKey=PublicKey.decode(n,n.uint32());break;case 3:i.votingPower=longToString$6(n.int64());break;case 4:i.proposerPriority=longToString$6(n.int64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{address:isSet$c(e.address)?bytesFromBase64$8(e.address):new Uint8Array,pubKey:isSet$c(e.pubKey)?PublicKey.fromJSON(e.pubKey):void 0,votingPower:isSet$c(e.votingPower)?String(e.votingPower):"0",proposerPriority:isSet$c(e.proposerPriority)?String(e.proposerPriority):"0"}},toJSON(e){const t={};return e.address!==void 0&&(t.address=base64FromBytes$8(e.address!==void 0?e.address:new Uint8Array)),e.pubKey!==void 0&&(t.pubKey=e.pubKey?PublicKey.toJSON(e.pubKey):void 0),e.votingPower!==void 0&&(t.votingPower=e.votingPower),e.proposerPriority!==void 0&&(t.proposerPriority=e.proposerPriority),t},fromPartial(e){const t=createBaseValidator$1();return t.address=e.address??new Uint8Array,t.pubKey=e.pubKey!==void 0&&e.pubKey!==null?PublicKey.fromPartial(e.pubKey):void 0,t.votingPower=e.votingPower??"0",t.proposerPriority=e.proposerPriority??"0",t}};var globalThis$a=(()=>{if(typeof globalThis$a<"u")return globalThis$a;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$8=globalThis$a.atob||(e=>globalThis$a.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$8(e){const t=atob$8(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$8=globalThis$a.btoa||(e=>globalThis$a.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$8(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$8(t.join(""))}function longToString$6(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$c(e){return e!=null}var BlockIDFlag;(function(e){e[e.BLOCK_ID_FLAG_UNKNOWN=0]="BLOCK_ID_FLAG_UNKNOWN",e[e.BLOCK_ID_FLAG_ABSENT=1]="BLOCK_ID_FLAG_ABSENT",e[e.BLOCK_ID_FLAG_COMMIT=2]="BLOCK_ID_FLAG_COMMIT",e[e.BLOCK_ID_FLAG_NIL=3]="BLOCK_ID_FLAG_NIL",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"})(BlockIDFlag||(BlockIDFlag={}));function blockIDFlagFromJSON(e){switch(e){case 0:case"BLOCK_ID_FLAG_UNKNOWN":return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;case 1:case"BLOCK_ID_FLAG_ABSENT":return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;case 2:case"BLOCK_ID_FLAG_COMMIT":return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;case 3:case"BLOCK_ID_FLAG_NIL":return BlockIDFlag.BLOCK_ID_FLAG_NIL;case-1:case"UNRECOGNIZED":default:return BlockIDFlag.UNRECOGNIZED}}function blockIDFlagToJSON(e){switch(e){case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:return"BLOCK_ID_FLAG_UNKNOWN";case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:return"BLOCK_ID_FLAG_ABSENT";case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:return"BLOCK_ID_FLAG_COMMIT";case BlockIDFlag.BLOCK_ID_FLAG_NIL:return"BLOCK_ID_FLAG_NIL";case BlockIDFlag.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var SignedMsgType;(function(e){e[e.SIGNED_MSG_TYPE_UNKNOWN=0]="SIGNED_MSG_TYPE_UNKNOWN",e[e.SIGNED_MSG_TYPE_PREVOTE=1]="SIGNED_MSG_TYPE_PREVOTE",e[e.SIGNED_MSG_TYPE_PRECOMMIT=2]="SIGNED_MSG_TYPE_PRECOMMIT",e[e.SIGNED_MSG_TYPE_PROPOSAL=32]="SIGNED_MSG_TYPE_PROPOSAL",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"})(SignedMsgType||(SignedMsgType={}));function signedMsgTypeFromJSON(e){switch(e){case 0:case"SIGNED_MSG_TYPE_UNKNOWN":return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;case 1:case"SIGNED_MSG_TYPE_PREVOTE":return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;case 2:case"SIGNED_MSG_TYPE_PRECOMMIT":return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;case 32:case"SIGNED_MSG_TYPE_PROPOSAL":return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;case-1:case"UNRECOGNIZED":default:return SignedMsgType.UNRECOGNIZED}}function signedMsgTypeToJSON(e){switch(e){case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:return"SIGNED_MSG_TYPE_UNKNOWN";case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:return"SIGNED_MSG_TYPE_PREVOTE";case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:return"SIGNED_MSG_TYPE_PRECOMMIT";case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:return"SIGNED_MSG_TYPE_PROPOSAL";case SignedMsgType.UNRECOGNIZED:default:return"UNRECOGNIZED"}}function createBasePartSetHeader(){return{total:0,hash:new Uint8Array}}const PartSetHeader={encode(e,t=minimal.Writer.create()){return e.total!==0&&t.uint32(8).uint32(e.total),e.hash.length!==0&&t.uint32(18).bytes(e.hash),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBasePartSetHeader();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.total=n.uint32();break;case 2:i.hash=n.bytes();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{total:isSet$b(e.total)?Number(e.total):0,hash:isSet$b(e.hash)?bytesFromBase64$7(e.hash):new Uint8Array}},toJSON(e){const t={};return e.total!==void 0&&(t.total=Math.round(e.total)),e.hash!==void 0&&(t.hash=base64FromBytes$7(e.hash!==void 0?e.hash:new Uint8Array)),t},fromPartial(e){const t=createBasePartSetHeader();return t.total=e.total??0,t.hash=e.hash??new Uint8Array,t}};function createBaseBlockID(){return{hash:new Uint8Array,partSetHeader:void 0}}const BlockID={encode(e,t=minimal.Writer.create()){return e.hash.length!==0&&t.uint32(10).bytes(e.hash),e.partSetHeader!==void 0&&PartSetHeader.encode(e.partSetHeader,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseBlockID();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.hash=n.bytes();break;case 2:i.partSetHeader=PartSetHeader.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{hash:isSet$b(e.hash)?bytesFromBase64$7(e.hash):new Uint8Array,partSetHeader:isSet$b(e.partSetHeader)?PartSetHeader.fromJSON(e.partSetHeader):void 0}},toJSON(e){const t={};return e.hash!==void 0&&(t.hash=base64FromBytes$7(e.hash!==void 0?e.hash:new Uint8Array)),e.partSetHeader!==void 0&&(t.partSetHeader=e.partSetHeader?PartSetHeader.toJSON(e.partSetHeader):void 0),t},fromPartial(e){const t=createBaseBlockID();return t.hash=e.hash??new Uint8Array,t.partSetHeader=e.partSetHeader!==void 0&&e.partSetHeader!==null?PartSetHeader.fromPartial(e.partSetHeader):void 0,t}};function createBaseHeader(){return{version:void 0,chainId:"",height:"0",time:void 0,lastBlockId:void 0,lastCommitHash:new Uint8Array,dataHash:new Uint8Array,validatorsHash:new Uint8Array,nextValidatorsHash:new Uint8Array,consensusHash:new Uint8Array,appHash:new Uint8Array,lastResultsHash:new Uint8Array,evidenceHash:new Uint8Array,proposerAddress:new Uint8Array}}const Header$1={encode(e,t=minimal.Writer.create()){return e.version!==void 0&&Consensus.encode(e.version,t.uint32(10).fork()).ldelim(),e.chainId!==""&&t.uint32(18).string(e.chainId),e.height!=="0"&&t.uint32(24).int64(e.height),e.time!==void 0&&Timestamp.encode(e.time,t.uint32(34).fork()).ldelim(),e.lastBlockId!==void 0&&BlockID.encode(e.lastBlockId,t.uint32(42).fork()).ldelim(),e.lastCommitHash.length!==0&&t.uint32(50).bytes(e.lastCommitHash),e.dataHash.length!==0&&t.uint32(58).bytes(e.dataHash),e.validatorsHash.length!==0&&t.uint32(66).bytes(e.validatorsHash),e.nextValidatorsHash.length!==0&&t.uint32(74).bytes(e.nextValidatorsHash),e.consensusHash.length!==0&&t.uint32(82).bytes(e.consensusHash),e.appHash.length!==0&&t.uint32(90).bytes(e.appHash),e.lastResultsHash.length!==0&&t.uint32(98).bytes(e.lastResultsHash),e.evidenceHash.length!==0&&t.uint32(106).bytes(e.evidenceHash),e.proposerAddress.length!==0&&t.uint32(114).bytes(e.proposerAddress),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseHeader();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.version=Consensus.decode(n,n.uint32());break;case 2:i.chainId=n.string();break;case 3:i.height=longToString$5(n.int64());break;case 4:i.time=Timestamp.decode(n,n.uint32());break;case 5:i.lastBlockId=BlockID.decode(n,n.uint32());break;case 6:i.lastCommitHash=n.bytes();break;case 7:i.dataHash=n.bytes();break;case 8:i.validatorsHash=n.bytes();break;case 9:i.nextValidatorsHash=n.bytes();break;case 10:i.consensusHash=n.bytes();break;case 11:i.appHash=n.bytes();break;case 12:i.lastResultsHash=n.bytes();break;case 13:i.evidenceHash=n.bytes();break;case 14:i.proposerAddress=n.bytes();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{version:isSet$b(e.version)?Consensus.fromJSON(e.version):void 0,chainId:isSet$b(e.chainId)?String(e.chainId):"",height:isSet$b(e.height)?String(e.height):"0",time:isSet$b(e.time)?fromJsonTimestamp$1(e.time):void 0,lastBlockId:isSet$b(e.lastBlockId)?BlockID.fromJSON(e.lastBlockId):void 0,lastCommitHash:isSet$b(e.lastCommitHash)?bytesFromBase64$7(e.lastCommitHash):new Uint8Array,dataHash:isSet$b(e.dataHash)?bytesFromBase64$7(e.dataHash):new Uint8Array,validatorsHash:isSet$b(e.validatorsHash)?bytesFromBase64$7(e.validatorsHash):new Uint8Array,nextValidatorsHash:isSet$b(e.nextValidatorsHash)?bytesFromBase64$7(e.nextValidatorsHash):new Uint8Array,consensusHash:isSet$b(e.consensusHash)?bytesFromBase64$7(e.consensusHash):new Uint8Array,appHash:isSet$b(e.appHash)?bytesFromBase64$7(e.appHash):new Uint8Array,lastResultsHash:isSet$b(e.lastResultsHash)?bytesFromBase64$7(e.lastResultsHash):new Uint8Array,evidenceHash:isSet$b(e.evidenceHash)?bytesFromBase64$7(e.evidenceHash):new Uint8Array,proposerAddress:isSet$b(e.proposerAddress)?bytesFromBase64$7(e.proposerAddress):new Uint8Array}},toJSON(e){const t={};return e.version!==void 0&&(t.version=e.version?Consensus.toJSON(e.version):void 0),e.chainId!==void 0&&(t.chainId=e.chainId),e.height!==void 0&&(t.height=e.height),e.time!==void 0&&(t.time=fromTimestamp$1(e.time).toISOString()),e.lastBlockId!==void 0&&(t.lastBlockId=e.lastBlockId?BlockID.toJSON(e.lastBlockId):void 0),e.lastCommitHash!==void 0&&(t.lastCommitHash=base64FromBytes$7(e.lastCommitHash!==void 0?e.lastCommitHash:new Uint8Array)),e.dataHash!==void 0&&(t.dataHash=base64FromBytes$7(e.dataHash!==void 0?e.dataHash:new Uint8Array)),e.validatorsHash!==void 0&&(t.validatorsHash=base64FromBytes$7(e.validatorsHash!==void 0?e.validatorsHash:new Uint8Array)),e.nextValidatorsHash!==void 0&&(t.nextValidatorsHash=base64FromBytes$7(e.nextValidatorsHash!==void 0?e.nextValidatorsHash:new Uint8Array)),e.consensusHash!==void 0&&(t.consensusHash=base64FromBytes$7(e.consensusHash!==void 0?e.consensusHash:new Uint8Array)),e.appHash!==void 0&&(t.appHash=base64FromBytes$7(e.appHash!==void 0?e.appHash:new Uint8Array)),e.lastResultsHash!==void 0&&(t.lastResultsHash=base64FromBytes$7(e.lastResultsHash!==void 0?e.lastResultsHash:new Uint8Array)),e.evidenceHash!==void 0&&(t.evidenceHash=base64FromBytes$7(e.evidenceHash!==void 0?e.evidenceHash:new Uint8Array)),e.proposerAddress!==void 0&&(t.proposerAddress=base64FromBytes$7(e.proposerAddress!==void 0?e.proposerAddress:new Uint8Array)),t},fromPartial(e){const t=createBaseHeader();return t.version=e.version!==void 0&&e.version!==null?Consensus.fromPartial(e.version):void 0,t.chainId=e.chainId??"",t.height=e.height??"0",t.time=e.time!==void 0&&e.time!==null?Timestamp.fromPartial(e.time):void 0,t.lastBlockId=e.lastBlockId!==void 0&&e.lastBlockId!==null?BlockID.fromPartial(e.lastBlockId):void 0,t.lastCommitHash=e.lastCommitHash??new Uint8Array,t.dataHash=e.dataHash??new Uint8Array,t.validatorsHash=e.validatorsHash??new Uint8Array,t.nextValidatorsHash=e.nextValidatorsHash??new Uint8Array,t.consensusHash=e.consensusHash??new Uint8Array,t.appHash=e.appHash??new Uint8Array,t.lastResultsHash=e.lastResultsHash??new Uint8Array,t.evidenceHash=e.evidenceHash??new Uint8Array,t.proposerAddress=e.proposerAddress??new Uint8Array,t}};function createBaseData(){return{txs:[]}}const Data={encode(e,t=minimal.Writer.create()){for(const n of e.txs)t.uint32(10).bytes(n);return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseData();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.txs.push(n.bytes());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{txs:Array.isArray(e?.txs)?e.txs.map(t=>bytesFromBase64$7(t)):[]}},toJSON(e){const t={};return e.txs?t.txs=e.txs.map(n=>base64FromBytes$7(n!==void 0?n:new Uint8Array)):t.txs=[],t},fromPartial(e){const t=createBaseData();return t.txs=e.txs?.map(n=>n)||[],t}};function createBaseVote(){return{type:0,height:"0",round:0,blockId:void 0,timestamp:void 0,validatorAddress:new Uint8Array,validatorIndex:0,signature:new Uint8Array}}const Vote={encode(e,t=minimal.Writer.create()){return e.type!==0&&t.uint32(8).int32(e.type),e.height!=="0"&&t.uint32(16).int64(e.height),e.round!==0&&t.uint32(24).int32(e.round),e.blockId!==void 0&&BlockID.encode(e.blockId,t.uint32(34).fork()).ldelim(),e.timestamp!==void 0&&Timestamp.encode(e.timestamp,t.uint32(42).fork()).ldelim(),e.validatorAddress.length!==0&&t.uint32(50).bytes(e.validatorAddress),e.validatorIndex!==0&&t.uint32(56).int32(e.validatorIndex),e.signature.length!==0&&t.uint32(66).bytes(e.signature),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseVote();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.type=n.int32();break;case 2:i.height=longToString$5(n.int64());break;case 3:i.round=n.int32();break;case 4:i.blockId=BlockID.decode(n,n.uint32());break;case 5:i.timestamp=Timestamp.decode(n,n.uint32());break;case 6:i.validatorAddress=n.bytes();break;case 7:i.validatorIndex=n.int32();break;case 8:i.signature=n.bytes();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{type:isSet$b(e.type)?signedMsgTypeFromJSON(e.type):0,height:isSet$b(e.height)?String(e.height):"0",round:isSet$b(e.round)?Number(e.round):0,blockId:isSet$b(e.blockId)?BlockID.fromJSON(e.blockId):void 0,timestamp:isSet$b(e.timestamp)?fromJsonTimestamp$1(e.timestamp):void 0,validatorAddress:isSet$b(e.validatorAddress)?bytesFromBase64$7(e.validatorAddress):new Uint8Array,validatorIndex:isSet$b(e.validatorIndex)?Number(e.validatorIndex):0,signature:isSet$b(e.signature)?bytesFromBase64$7(e.signature):new Uint8Array}},toJSON(e){const t={};return e.type!==void 0&&(t.type=signedMsgTypeToJSON(e.type)),e.height!==void 0&&(t.height=e.height),e.round!==void 0&&(t.round=Math.round(e.round)),e.blockId!==void 0&&(t.blockId=e.blockId?BlockID.toJSON(e.blockId):void 0),e.timestamp!==void 0&&(t.timestamp=fromTimestamp$1(e.timestamp).toISOString()),e.validatorAddress!==void 0&&(t.validatorAddress=base64FromBytes$7(e.validatorAddress!==void 0?e.validatorAddress:new Uint8Array)),e.validatorIndex!==void 0&&(t.validatorIndex=Math.round(e.validatorIndex)),e.signature!==void 0&&(t.signature=base64FromBytes$7(e.signature!==void 0?e.signature:new Uint8Array)),t},fromPartial(e){const t=createBaseVote();return t.type=e.type??0,t.height=e.height??"0",t.round=e.round??0,t.blockId=e.blockId!==void 0&&e.blockId!==null?BlockID.fromPartial(e.blockId):void 0,t.timestamp=e.timestamp!==void 0&&e.timestamp!==null?Timestamp.fromPartial(e.timestamp):void 0,t.validatorAddress=e.validatorAddress??new Uint8Array,t.validatorIndex=e.validatorIndex??0,t.signature=e.signature??new Uint8Array,t}};function createBaseCommit(){return{height:"0",round:0,blockId:void 0,signatures:[]}}const Commit={encode(e,t=minimal.Writer.create()){e.height!=="0"&&t.uint32(8).int64(e.height),e.round!==0&&t.uint32(16).int32(e.round),e.blockId!==void 0&&BlockID.encode(e.blockId,t.uint32(26).fork()).ldelim();for(const n of e.signatures)CommitSig.encode(n,t.uint32(34).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseCommit();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.height=longToString$5(n.int64());break;case 2:i.round=n.int32();break;case 3:i.blockId=BlockID.decode(n,n.uint32());break;case 4:i.signatures.push(CommitSig.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{height:isSet$b(e.height)?String(e.height):"0",round:isSet$b(e.round)?Number(e.round):0,blockId:isSet$b(e.blockId)?BlockID.fromJSON(e.blockId):void 0,signatures:Array.isArray(e?.signatures)?e.signatures.map(t=>CommitSig.fromJSON(t)):[]}},toJSON(e){const t={};return e.height!==void 0&&(t.height=e.height),e.round!==void 0&&(t.round=Math.round(e.round)),e.blockId!==void 0&&(t.blockId=e.blockId?BlockID.toJSON(e.blockId):void 0),e.signatures?t.signatures=e.signatures.map(n=>n?CommitSig.toJSON(n):void 0):t.signatures=[],t},fromPartial(e){const t=createBaseCommit();return t.height=e.height??"0",t.round=e.round??0,t.blockId=e.blockId!==void 0&&e.blockId!==null?BlockID.fromPartial(e.blockId):void 0,t.signatures=e.signatures?.map(n=>CommitSig.fromPartial(n))||[],t}};function createBaseCommitSig(){return{blockIdFlag:0,validatorAddress:new Uint8Array,timestamp:void 0,signature:new Uint8Array}}const CommitSig={encode(e,t=minimal.Writer.create()){return e.blockIdFlag!==0&&t.uint32(8).int32(e.blockIdFlag),e.validatorAddress.length!==0&&t.uint32(18).bytes(e.validatorAddress),e.timestamp!==void 0&&Timestamp.encode(e.timestamp,t.uint32(26).fork()).ldelim(),e.signature.length!==0&&t.uint32(34).bytes(e.signature),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseCommitSig();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.blockIdFlag=n.int32();break;case 2:i.validatorAddress=n.bytes();break;case 3:i.timestamp=Timestamp.decode(n,n.uint32());break;case 4:i.signature=n.bytes();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{blockIdFlag:isSet$b(e.blockIdFlag)?blockIDFlagFromJSON(e.blockIdFlag):0,validatorAddress:isSet$b(e.validatorAddress)?bytesFromBase64$7(e.validatorAddress):new Uint8Array,timestamp:isSet$b(e.timestamp)?fromJsonTimestamp$1(e.timestamp):void 0,signature:isSet$b(e.signature)?bytesFromBase64$7(e.signature):new Uint8Array}},toJSON(e){const t={};return e.blockIdFlag!==void 0&&(t.blockIdFlag=blockIDFlagToJSON(e.blockIdFlag)),e.validatorAddress!==void 0&&(t.validatorAddress=base64FromBytes$7(e.validatorAddress!==void 0?e.validatorAddress:new Uint8Array)),e.timestamp!==void 0&&(t.timestamp=fromTimestamp$1(e.timestamp).toISOString()),e.signature!==void 0&&(t.signature=base64FromBytes$7(e.signature!==void 0?e.signature:new Uint8Array)),t},fromPartial(e){const t=createBaseCommitSig();return t.blockIdFlag=e.blockIdFlag??0,t.validatorAddress=e.validatorAddress??new Uint8Array,t.timestamp=e.timestamp!==void 0&&e.timestamp!==null?Timestamp.fromPartial(e.timestamp):void 0,t.signature=e.signature??new Uint8Array,t}};function createBaseSignedHeader(){return{header:void 0,commit:void 0}}const SignedHeader={encode(e,t=minimal.Writer.create()){return e.header!==void 0&&Header$1.encode(e.header,t.uint32(10).fork()).ldelim(),e.commit!==void 0&&Commit.encode(e.commit,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseSignedHeader();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.header=Header$1.decode(n,n.uint32());break;case 2:i.commit=Commit.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{header:isSet$b(e.header)?Header$1.fromJSON(e.header):void 0,commit:isSet$b(e.commit)?Commit.fromJSON(e.commit):void 0}},toJSON(e){const t={};return e.header!==void 0&&(t.header=e.header?Header$1.toJSON(e.header):void 0),e.commit!==void 0&&(t.commit=e.commit?Commit.toJSON(e.commit):void 0),t},fromPartial(e){const t=createBaseSignedHeader();return t.header=e.header!==void 0&&e.header!==null?Header$1.fromPartial(e.header):void 0,t.commit=e.commit!==void 0&&e.commit!==null?Commit.fromPartial(e.commit):void 0,t}};function createBaseLightBlock(){return{signedHeader:void 0,validatorSet:void 0}}const LightBlock={encode(e,t=minimal.Writer.create()){return e.signedHeader!==void 0&&SignedHeader.encode(e.signedHeader,t.uint32(10).fork()).ldelim(),e.validatorSet!==void 0&&ValidatorSet.encode(e.validatorSet,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseLightBlock();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.signedHeader=SignedHeader.decode(n,n.uint32());break;case 2:i.validatorSet=ValidatorSet.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{signedHeader:isSet$b(e.signedHeader)?SignedHeader.fromJSON(e.signedHeader):void 0,validatorSet:isSet$b(e.validatorSet)?ValidatorSet.fromJSON(e.validatorSet):void 0}},toJSON(e){const t={};return e.signedHeader!==void 0&&(t.signedHeader=e.signedHeader?SignedHeader.toJSON(e.signedHeader):void 0),e.validatorSet!==void 0&&(t.validatorSet=e.validatorSet?ValidatorSet.toJSON(e.validatorSet):void 0),t},fromPartial(e){const t=createBaseLightBlock();return t.signedHeader=e.signedHeader!==void 0&&e.signedHeader!==null?SignedHeader.fromPartial(e.signedHeader):void 0,t.validatorSet=e.validatorSet!==void 0&&e.validatorSet!==null?ValidatorSet.fromPartial(e.validatorSet):void 0,t}};var globalThis$9=(()=>{if(typeof globalThis$9<"u")return globalThis$9;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$7=globalThis$9.atob||(e=>globalThis$9.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$7(e){const t=atob$7(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$7=globalThis$9.btoa||(e=>globalThis$9.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$7(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$7(t.join(""))}function toTimestamp$1(e){const t=Math.trunc(e.getTime()/1e3).toString(),n=e.getTime()%1e3*1e6;return{seconds:t,nanos:n}}function fromTimestamp$1(e){let t=Number(e.seconds)*1e3;return t+=e.nanos/1e6,new Date(t)}function fromJsonTimestamp$1(e){return e instanceof Date?toTimestamp$1(e):typeof e=="string"?toTimestamp$1(new Date(e)):Timestamp.fromJSON(e)}function longToString$5(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$b(e){return e!=null}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var CheckTxType;(function(e){e[e.NEW=0]="NEW",e[e.RECHECK=1]="RECHECK",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"})(CheckTxType||(CheckTxType={}));var EvidenceType;(function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.DUPLICATE_VOTE=1]="DUPLICATE_VOTE",e[e.LIGHT_CLIENT_ATTACK=2]="LIGHT_CLIENT_ATTACK",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"})(EvidenceType||(EvidenceType={}));var ResponseOfferSnapshot_Result;(function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.ACCEPT=1]="ACCEPT",e[e.ABORT=2]="ABORT",e[e.REJECT=3]="REJECT",e[e.REJECT_FORMAT=4]="REJECT_FORMAT",e[e.REJECT_SENDER=5]="REJECT_SENDER",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"})(ResponseOfferSnapshot_Result||(ResponseOfferSnapshot_Result={}));var ResponseApplySnapshotChunk_Result;(function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.ACCEPT=1]="ACCEPT",e[e.ABORT=2]="ABORT",e[e.RETRY=3]="RETRY",e[e.RETRY_SNAPSHOT=4]="RETRY_SNAPSHOT",e[e.REJECT_SNAPSHOT=5]="REJECT_SNAPSHOT",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"})(ResponseApplySnapshotChunk_Result||(ResponseApplySnapshotChunk_Result={}));function createBaseEvent(){return{type:"",attributes:[]}}const Event$1={encode(e,t=minimal.Writer.create()){e.type!==""&&t.uint32(10).string(e.type);for(const n of e.attributes)EventAttribute.encode(n,t.uint32(18).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseEvent();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.type=n.string();break;case 2:i.attributes.push(EventAttribute.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{type:isSet$a(e.type)?String(e.type):"",attributes:Array.isArray(e?.attributes)?e.attributes.map(t=>EventAttribute.fromJSON(t)):[]}},toJSON(e){const t={};return e.type!==void 0&&(t.type=e.type),e.attributes?t.attributes=e.attributes.map(n=>n?EventAttribute.toJSON(n):void 0):t.attributes=[],t},fromPartial(e){const t=createBaseEvent();return t.type=e.type??"",t.attributes=e.attributes?.map(n=>EventAttribute.fromPartial(n))||[],t}};function createBaseEventAttribute(){return{key:new Uint8Array,value:new Uint8Array,index:!1}}const EventAttribute={encode(e,t=minimal.Writer.create()){return e.key.length!==0&&t.uint32(10).bytes(e.key),e.value.length!==0&&t.uint32(18).bytes(e.value),e.index===!0&&t.uint32(24).bool(e.index),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseEventAttribute();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.key=n.bytes();break;case 2:i.value=n.bytes();break;case 3:i.index=n.bool();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{key:isSet$a(e.key)?bytesFromBase64$6(e.key):new Uint8Array,value:isSet$a(e.value)?bytesFromBase64$6(e.value):new Uint8Array,index:isSet$a(e.index)?Boolean(e.index):!1}},toJSON(e){const t={};return e.key!==void 0&&(t.key=base64FromBytes$6(e.key!==void 0?e.key:new Uint8Array)),e.value!==void 0&&(t.value=base64FromBytes$6(e.value!==void 0?e.value:new Uint8Array)),e.index!==void 0&&(t.index=e.index),t},fromPartial(e){const t=createBaseEventAttribute();return t.key=e.key??new Uint8Array,t.value=e.value??new Uint8Array,t.index=e.index??!1,t}};var globalThis$8=(()=>{if(typeof globalThis$8<"u")return globalThis$8;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$6=globalThis$8.atob||(e=>globalThis$8.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$6(e){const t=atob$6(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$6=globalThis$8.btoa||(e=>globalThis$8.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$6(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$6(t.join(""))}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$a(e){return e!=null}function createBaseTxResponse(){return{height:"0",txhash:"",codespace:"",code:0,data:"",rawLog:"",logs:[],info:"",gasWanted:"0",gasUsed:"0",tx:void 0,timestamp:"",events:[]}}const TxResponse={encode(e,t=minimal.Writer.create()){e.height!=="0"&&t.uint32(8).int64(e.height),e.txhash!==""&&t.uint32(18).string(e.txhash),e.codespace!==""&&t.uint32(26).string(e.codespace),e.code!==0&&t.uint32(32).uint32(e.code),e.data!==""&&t.uint32(42).string(e.data),e.rawLog!==""&&t.uint32(50).string(e.rawLog);for(const n of e.logs)ABCIMessageLog.encode(n,t.uint32(58).fork()).ldelim();e.info!==""&&t.uint32(66).string(e.info),e.gasWanted!=="0"&&t.uint32(72).int64(e.gasWanted),e.gasUsed!=="0"&&t.uint32(80).int64(e.gasUsed),e.tx!==void 0&&Any.encode(e.tx,t.uint32(90).fork()).ldelim(),e.timestamp!==""&&t.uint32(98).string(e.timestamp);for(const n of e.events)Event$1.encode(n,t.uint32(106).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseTxResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.height=longToString$4(n.int64());break;case 2:i.txhash=n.string();break;case 3:i.codespace=n.string();break;case 4:i.code=n.uint32();break;case 5:i.data=n.string();break;case 6:i.rawLog=n.string();break;case 7:i.logs.push(ABCIMessageLog.decode(n,n.uint32()));break;case 8:i.info=n.string();break;case 9:i.gasWanted=longToString$4(n.int64());break;case 10:i.gasUsed=longToString$4(n.int64());break;case 11:i.tx=Any.decode(n,n.uint32());break;case 12:i.timestamp=n.string();break;case 13:i.events.push(Event$1.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{height:isSet$9(e.height)?String(e.height):"0",txhash:isSet$9(e.txhash)?String(e.txhash):"",codespace:isSet$9(e.codespace)?String(e.codespace):"",code:isSet$9(e.code)?Number(e.code):0,data:isSet$9(e.data)?String(e.data):"",rawLog:isSet$9(e.rawLog)?String(e.rawLog):"",logs:Array.isArray(e?.logs)?e.logs.map(t=>ABCIMessageLog.fromJSON(t)):[],info:isSet$9(e.info)?String(e.info):"",gasWanted:isSet$9(e.gasWanted)?String(e.gasWanted):"0",gasUsed:isSet$9(e.gasUsed)?String(e.gasUsed):"0",tx:isSet$9(e.tx)?Any.fromJSON(e.tx):void 0,timestamp:isSet$9(e.timestamp)?String(e.timestamp):"",events:Array.isArray(e?.events)?e.events.map(t=>Event$1.fromJSON(t)):[]}},toJSON(e){const t={};return e.height!==void 0&&(t.height=e.height),e.txhash!==void 0&&(t.txhash=e.txhash),e.codespace!==void 0&&(t.codespace=e.codespace),e.code!==void 0&&(t.code=Math.round(e.code)),e.data!==void 0&&(t.data=e.data),e.rawLog!==void 0&&(t.rawLog=e.rawLog),e.logs?t.logs=e.logs.map(n=>n?ABCIMessageLog.toJSON(n):void 0):t.logs=[],e.info!==void 0&&(t.info=e.info),e.gasWanted!==void 0&&(t.gasWanted=e.gasWanted),e.gasUsed!==void 0&&(t.gasUsed=e.gasUsed),e.tx!==void 0&&(t.tx=e.tx?Any.toJSON(e.tx):void 0),e.timestamp!==void 0&&(t.timestamp=e.timestamp),e.events?t.events=e.events.map(n=>n?Event$1.toJSON(n):void 0):t.events=[],t},fromPartial(e){const t=createBaseTxResponse();return t.height=e.height??"0",t.txhash=e.txhash??"",t.codespace=e.codespace??"",t.code=e.code??0,t.data=e.data??"",t.rawLog=e.rawLog??"",t.logs=e.logs?.map(n=>ABCIMessageLog.fromPartial(n))||[],t.info=e.info??"",t.gasWanted=e.gasWanted??"0",t.gasUsed=e.gasUsed??"0",t.tx=e.tx!==void 0&&e.tx!==null?Any.fromPartial(e.tx):void 0,t.timestamp=e.timestamp??"",t.events=e.events?.map(n=>Event$1.fromPartial(n))||[],t}};function createBaseABCIMessageLog(){return{msgIndex:0,log:"",events:[]}}const ABCIMessageLog={encode(e,t=minimal.Writer.create()){e.msgIndex!==0&&t.uint32(8).uint32(e.msgIndex),e.log!==""&&t.uint32(18).string(e.log);for(const n of e.events)StringEvent.encode(n,t.uint32(26).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseABCIMessageLog();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.msgIndex=n.uint32();break;case 2:i.log=n.string();break;case 3:i.events.push(StringEvent.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{msgIndex:isSet$9(e.msgIndex)?Number(e.msgIndex):0,log:isSet$9(e.log)?String(e.log):"",events:Array.isArray(e?.events)?e.events.map(t=>StringEvent.fromJSON(t)):[]}},toJSON(e){const t={};return e.msgIndex!==void 0&&(t.msgIndex=Math.round(e.msgIndex)),e.log!==void 0&&(t.log=e.log),e.events?t.events=e.events.map(n=>n?StringEvent.toJSON(n):void 0):t.events=[],t},fromPartial(e){const t=createBaseABCIMessageLog();return t.msgIndex=e.msgIndex??0,t.log=e.log??"",t.events=e.events?.map(n=>StringEvent.fromPartial(n))||[],t}};function createBaseStringEvent(){return{type:"",attributes:[]}}const StringEvent={encode(e,t=minimal.Writer.create()){e.type!==""&&t.uint32(10).string(e.type);for(const n of e.attributes)Attribute.encode(n,t.uint32(18).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseStringEvent();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.type=n.string();break;case 2:i.attributes.push(Attribute.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{type:isSet$9(e.type)?String(e.type):"",attributes:Array.isArray(e?.attributes)?e.attributes.map(t=>Attribute.fromJSON(t)):[]}},toJSON(e){const t={};return e.type!==void 0&&(t.type=e.type),e.attributes?t.attributes=e.attributes.map(n=>n?Attribute.toJSON(n):void 0):t.attributes=[],t},fromPartial(e){const t=createBaseStringEvent();return t.type=e.type??"",t.attributes=e.attributes?.map(n=>Attribute.fromPartial(n))||[],t}};function createBaseAttribute(){return{key:"",value:""}}const Attribute={encode(e,t=minimal.Writer.create()){return e.key!==""&&t.uint32(10).string(e.key),e.value!==""&&t.uint32(18).string(e.value),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseAttribute();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.key=n.string();break;case 2:i.value=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{key:isSet$9(e.key)?String(e.key):"",value:isSet$9(e.value)?String(e.value):""}},toJSON(e){const t={};return e.key!==void 0&&(t.key=e.key),e.value!==void 0&&(t.value=e.value),t},fromPartial(e){const t=createBaseAttribute();return t.key=e.key??"",t.value=e.value??"",t}};function createBaseGasInfo(){return{gasWanted:"0",gasUsed:"0"}}const GasInfo={encode(e,t=minimal.Writer.create()){return e.gasWanted!=="0"&&t.uint32(8).uint64(e.gasWanted),e.gasUsed!=="0"&&t.uint32(16).uint64(e.gasUsed),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGasInfo();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.gasWanted=longToString$4(n.uint64());break;case 2:i.gasUsed=longToString$4(n.uint64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{gasWanted:isSet$9(e.gasWanted)?String(e.gasWanted):"0",gasUsed:isSet$9(e.gasUsed)?String(e.gasUsed):"0"}},toJSON(e){const t={};return e.gasWanted!==void 0&&(t.gasWanted=e.gasWanted),e.gasUsed!==void 0&&(t.gasUsed=e.gasUsed),t},fromPartial(e){const t=createBaseGasInfo();return t.gasWanted=e.gasWanted??"0",t.gasUsed=e.gasUsed??"0",t}};function createBaseResult(){return{data:new Uint8Array,log:"",events:[]}}const Result={encode(e,t=minimal.Writer.create()){e.data.length!==0&&t.uint32(10).bytes(e.data),e.log!==""&&t.uint32(18).string(e.log);for(const n of e.events)Event$1.encode(n,t.uint32(26).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseResult();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.data=n.bytes();break;case 2:i.log=n.string();break;case 3:i.events.push(Event$1.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{data:isSet$9(e.data)?bytesFromBase64$5(e.data):new Uint8Array,log:isSet$9(e.log)?String(e.log):"",events:Array.isArray(e?.events)?e.events.map(t=>Event$1.fromJSON(t)):[]}},toJSON(e){const t={};return e.data!==void 0&&(t.data=base64FromBytes$5(e.data!==void 0?e.data:new Uint8Array)),e.log!==void 0&&(t.log=e.log),e.events?t.events=e.events.map(n=>n?Event$1.toJSON(n):void 0):t.events=[],t},fromPartial(e){const t=createBaseResult();return t.data=e.data??new Uint8Array,t.log=e.log??"",t.events=e.events?.map(n=>Event$1.fromPartial(n))||[],t}};var globalThis$7=(()=>{if(typeof globalThis$7<"u")return globalThis$7;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$5=globalThis$7.atob||(e=>globalThis$7.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$5(e){const t=atob$5(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$5=globalThis$7.btoa||(e=>globalThis$7.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$5(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$5(t.join(""))}function longToString$4(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$9(e){return e!=null}function createBaseCompactBitArray(){return{extraBitsStored:0,elems:new Uint8Array}}const CompactBitArray={encode(e,t=minimal.Writer.create()){return e.extraBitsStored!==0&&t.uint32(8).uint32(e.extraBitsStored),e.elems.length!==0&&t.uint32(18).bytes(e.elems),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseCompactBitArray();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.extraBitsStored=n.uint32();break;case 2:i.elems=n.bytes();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{extraBitsStored:isSet$8(e.extraBitsStored)?Number(e.extraBitsStored):0,elems:isSet$8(e.elems)?bytesFromBase64$4(e.elems):new Uint8Array}},toJSON(e){const t={};return e.extraBitsStored!==void 0&&(t.extraBitsStored=Math.round(e.extraBitsStored)),e.elems!==void 0&&(t.elems=base64FromBytes$4(e.elems!==void 0?e.elems:new Uint8Array)),t},fromPartial(e){const t=createBaseCompactBitArray();return t.extraBitsStored=e.extraBitsStored??0,t.elems=e.elems??new Uint8Array,t}};var globalThis$6=(()=>{if(typeof globalThis$6<"u")return globalThis$6;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$4=globalThis$6.atob||(e=>globalThis$6.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$4(e){const t=atob$4(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$4=globalThis$6.btoa||(e=>globalThis$6.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$4(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$4(t.join(""))}function isSet$8(e){return e!=null}var SignMode;(function(e){e[e.SIGN_MODE_UNSPECIFIED=0]="SIGN_MODE_UNSPECIFIED",e[e.SIGN_MODE_DIRECT=1]="SIGN_MODE_DIRECT",e[e.SIGN_MODE_TEXTUAL=2]="SIGN_MODE_TEXTUAL",e[e.SIGN_MODE_LEGACY_AMINO_JSON=127]="SIGN_MODE_LEGACY_AMINO_JSON",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"})(SignMode||(SignMode={}));function signModeFromJSON(e){switch(e){case 0:case"SIGN_MODE_UNSPECIFIED":return SignMode.SIGN_MODE_UNSPECIFIED;case 1:case"SIGN_MODE_DIRECT":return SignMode.SIGN_MODE_DIRECT;case 2:case"SIGN_MODE_TEXTUAL":return SignMode.SIGN_MODE_TEXTUAL;case 127:case"SIGN_MODE_LEGACY_AMINO_JSON":return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;case-1:case"UNRECOGNIZED":default:return SignMode.UNRECOGNIZED}}function signModeToJSON(e){switch(e){case SignMode.SIGN_MODE_UNSPECIFIED:return"SIGN_MODE_UNSPECIFIED";case SignMode.SIGN_MODE_DIRECT:return"SIGN_MODE_DIRECT";case SignMode.SIGN_MODE_TEXTUAL:return"SIGN_MODE_TEXTUAL";case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:return"SIGN_MODE_LEGACY_AMINO_JSON";case SignMode.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var globalThis$5=(()=>{if(typeof globalThis$5<"u")return globalThis$5;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$5.atob;globalThis$5.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function createBaseTx(){return{body:void 0,authInfo:void 0,signatures:[]}}const Tx={encode(e,t=minimal.Writer.create()){e.body!==void 0&&TxBody.encode(e.body,t.uint32(10).fork()).ldelim(),e.authInfo!==void 0&&AuthInfo.encode(e.authInfo,t.uint32(18).fork()).ldelim();for(const n of e.signatures)t.uint32(26).bytes(n);return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseTx();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.body=TxBody.decode(n,n.uint32());break;case 2:i.authInfo=AuthInfo.decode(n,n.uint32());break;case 3:i.signatures.push(n.bytes());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{body:isSet$7(e.body)?TxBody.fromJSON(e.body):void 0,authInfo:isSet$7(e.authInfo)?AuthInfo.fromJSON(e.authInfo):void 0,signatures:Array.isArray(e?.signatures)?e.signatures.map(t=>bytesFromBase64$3(t)):[]}},toJSON(e){const t={};return e.body!==void 0&&(t.body=e.body?TxBody.toJSON(e.body):void 0),e.authInfo!==void 0&&(t.authInfo=e.authInfo?AuthInfo.toJSON(e.authInfo):void 0),e.signatures?t.signatures=e.signatures.map(n=>base64FromBytes$3(n!==void 0?n:new Uint8Array)):t.signatures=[],t},fromPartial(e){const t=createBaseTx();return t.body=e.body!==void 0&&e.body!==null?TxBody.fromPartial(e.body):void 0,t.authInfo=e.authInfo!==void 0&&e.authInfo!==null?AuthInfo.fromPartial(e.authInfo):void 0,t.signatures=e.signatures?.map(n=>n)||[],t}};function createBaseTxRaw(){return{bodyBytes:new Uint8Array,authInfoBytes:new Uint8Array,signatures:[]}}const TxRaw={encode(e,t=minimal.Writer.create()){e.bodyBytes.length!==0&&t.uint32(10).bytes(e.bodyBytes),e.authInfoBytes.length!==0&&t.uint32(18).bytes(e.authInfoBytes);for(const n of e.signatures)t.uint32(26).bytes(n);return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseTxRaw();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.bodyBytes=n.bytes();break;case 2:i.authInfoBytes=n.bytes();break;case 3:i.signatures.push(n.bytes());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{bodyBytes:isSet$7(e.bodyBytes)?bytesFromBase64$3(e.bodyBytes):new Uint8Array,authInfoBytes:isSet$7(e.authInfoBytes)?bytesFromBase64$3(e.authInfoBytes):new Uint8Array,signatures:Array.isArray(e?.signatures)?e.signatures.map(t=>bytesFromBase64$3(t)):[]}},toJSON(e){const t={};return e.bodyBytes!==void 0&&(t.bodyBytes=base64FromBytes$3(e.bodyBytes!==void 0?e.bodyBytes:new Uint8Array)),e.authInfoBytes!==void 0&&(t.authInfoBytes=base64FromBytes$3(e.authInfoBytes!==void 0?e.authInfoBytes:new Uint8Array)),e.signatures?t.signatures=e.signatures.map(n=>base64FromBytes$3(n!==void 0?n:new Uint8Array)):t.signatures=[],t},fromPartial(e){const t=createBaseTxRaw();return t.bodyBytes=e.bodyBytes??new Uint8Array,t.authInfoBytes=e.authInfoBytes??new Uint8Array,t.signatures=e.signatures?.map(n=>n)||[],t}};function createBaseSignDoc(){return{bodyBytes:new Uint8Array,authInfoBytes:new Uint8Array,chainId:"",accountNumber:"0"}}const SignDoc={encode(e,t=minimal.Writer.create()){return e.bodyBytes.length!==0&&t.uint32(10).bytes(e.bodyBytes),e.authInfoBytes.length!==0&&t.uint32(18).bytes(e.authInfoBytes),e.chainId!==""&&t.uint32(26).string(e.chainId),e.accountNumber!=="0"&&t.uint32(32).uint64(e.accountNumber),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseSignDoc();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.bodyBytes=n.bytes();break;case 2:i.authInfoBytes=n.bytes();break;case 3:i.chainId=n.string();break;case 4:i.accountNumber=longToString$3(n.uint64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{bodyBytes:isSet$7(e.bodyBytes)?bytesFromBase64$3(e.bodyBytes):new Uint8Array,authInfoBytes:isSet$7(e.authInfoBytes)?bytesFromBase64$3(e.authInfoBytes):new Uint8Array,chainId:isSet$7(e.chainId)?String(e.chainId):"",accountNumber:isSet$7(e.accountNumber)?String(e.accountNumber):"0"}},toJSON(e){const t={};return e.bodyBytes!==void 0&&(t.bodyBytes=base64FromBytes$3(e.bodyBytes!==void 0?e.bodyBytes:new Uint8Array)),e.authInfoBytes!==void 0&&(t.authInfoBytes=base64FromBytes$3(e.authInfoBytes!==void 0?e.authInfoBytes:new Uint8Array)),e.chainId!==void 0&&(t.chainId=e.chainId),e.accountNumber!==void 0&&(t.accountNumber=e.accountNumber),t},fromPartial(e){const t=createBaseSignDoc();return t.bodyBytes=e.bodyBytes??new Uint8Array,t.authInfoBytes=e.authInfoBytes??new Uint8Array,t.chainId=e.chainId??"",t.accountNumber=e.accountNumber??"0",t}};function createBaseTxBody(){return{messages:[],memo:"",timeoutHeight:"0",extensionOptions:[],nonCriticalExtensionOptions:[]}}const TxBody={encode(e,t=minimal.Writer.create()){for(const n of e.messages)Any.encode(n,t.uint32(10).fork()).ldelim();e.memo!==""&&t.uint32(18).string(e.memo),e.timeoutHeight!=="0"&&t.uint32(24).uint64(e.timeoutHeight);for(const n of e.extensionOptions)Any.encode(n,t.uint32(8186).fork()).ldelim();for(const n of e.nonCriticalExtensionOptions)Any.encode(n,t.uint32(16378).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseTxBody();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.messages.push(Any.decode(n,n.uint32()));break;case 2:i.memo=n.string();break;case 3:i.timeoutHeight=longToString$3(n.uint64());break;case 1023:i.extensionOptions.push(Any.decode(n,n.uint32()));break;case 2047:i.nonCriticalExtensionOptions.push(Any.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{messages:Array.isArray(e?.messages)?e.messages.map(t=>Any.fromJSON(t)):[],memo:isSet$7(e.memo)?String(e.memo):"",timeoutHeight:isSet$7(e.timeoutHeight)?String(e.timeoutHeight):"0",extensionOptions:Array.isArray(e?.extensionOptions)?e.extensionOptions.map(t=>Any.fromJSON(t)):[],nonCriticalExtensionOptions:Array.isArray(e?.nonCriticalExtensionOptions)?e.nonCriticalExtensionOptions.map(t=>Any.fromJSON(t)):[]}},toJSON(e){const t={};return e.messages?t.messages=e.messages.map(n=>n?Any.toJSON(n):void 0):t.messages=[],e.memo!==void 0&&(t.memo=e.memo),e.timeoutHeight!==void 0&&(t.timeoutHeight=e.timeoutHeight),e.extensionOptions?t.extensionOptions=e.extensionOptions.map(n=>n?Any.toJSON(n):void 0):t.extensionOptions=[],e.nonCriticalExtensionOptions?t.nonCriticalExtensionOptions=e.nonCriticalExtensionOptions.map(n=>n?Any.toJSON(n):void 0):t.nonCriticalExtensionOptions=[],t},fromPartial(e){const t=createBaseTxBody();return t.messages=e.messages?.map(n=>Any.fromPartial(n))||[],t.memo=e.memo??"",t.timeoutHeight=e.timeoutHeight??"0",t.extensionOptions=e.extensionOptions?.map(n=>Any.fromPartial(n))||[],t.nonCriticalExtensionOptions=e.nonCriticalExtensionOptions?.map(n=>Any.fromPartial(n))||[],t}};function createBaseAuthInfo(){return{signerInfos:[],fee:void 0}}const AuthInfo={encode(e,t=minimal.Writer.create()){for(const n of e.signerInfos)SignerInfo.encode(n,t.uint32(10).fork()).ldelim();return e.fee!==void 0&&Fee.encode(e.fee,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseAuthInfo();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.signerInfos.push(SignerInfo.decode(n,n.uint32()));break;case 2:i.fee=Fee.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{signerInfos:Array.isArray(e?.signerInfos)?e.signerInfos.map(t=>SignerInfo.fromJSON(t)):[],fee:isSet$7(e.fee)?Fee.fromJSON(e.fee):void 0}},toJSON(e){const t={};return e.signerInfos?t.signerInfos=e.signerInfos.map(n=>n?SignerInfo.toJSON(n):void 0):t.signerInfos=[],e.fee!==void 0&&(t.fee=e.fee?Fee.toJSON(e.fee):void 0),t},fromPartial(e){const t=createBaseAuthInfo();return t.signerInfos=e.signerInfos?.map(n=>SignerInfo.fromPartial(n))||[],t.fee=e.fee!==void 0&&e.fee!==null?Fee.fromPartial(e.fee):void 0,t}};function createBaseSignerInfo(){return{publicKey:void 0,modeInfo:void 0,sequence:"0"}}const SignerInfo={encode(e,t=minimal.Writer.create()){return e.publicKey!==void 0&&Any.encode(e.publicKey,t.uint32(10).fork()).ldelim(),e.modeInfo!==void 0&&ModeInfo.encode(e.modeInfo,t.uint32(18).fork()).ldelim(),e.sequence!=="0"&&t.uint32(24).uint64(e.sequence),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseSignerInfo();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.publicKey=Any.decode(n,n.uint32());break;case 2:i.modeInfo=ModeInfo.decode(n,n.uint32());break;case 3:i.sequence=longToString$3(n.uint64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{publicKey:isSet$7(e.publicKey)?Any.fromJSON(e.publicKey):void 0,modeInfo:isSet$7(e.modeInfo)?ModeInfo.fromJSON(e.modeInfo):void 0,sequence:isSet$7(e.sequence)?String(e.sequence):"0"}},toJSON(e){const t={};return e.publicKey!==void 0&&(t.publicKey=e.publicKey?Any.toJSON(e.publicKey):void 0),e.modeInfo!==void 0&&(t.modeInfo=e.modeInfo?ModeInfo.toJSON(e.modeInfo):void 0),e.sequence!==void 0&&(t.sequence=e.sequence),t},fromPartial(e){const t=createBaseSignerInfo();return t.publicKey=e.publicKey!==void 0&&e.publicKey!==null?Any.fromPartial(e.publicKey):void 0,t.modeInfo=e.modeInfo!==void 0&&e.modeInfo!==null?ModeInfo.fromPartial(e.modeInfo):void 0,t.sequence=e.sequence??"0",t}};function createBaseModeInfo(){return{single:void 0,multi:void 0}}const ModeInfo={encode(e,t=minimal.Writer.create()){return e.single!==void 0&&ModeInfo_Single.encode(e.single,t.uint32(10).fork()).ldelim(),e.multi!==void 0&&ModeInfo_Multi.encode(e.multi,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseModeInfo();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.single=ModeInfo_Single.decode(n,n.uint32());break;case 2:i.multi=ModeInfo_Multi.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{single:isSet$7(e.single)?ModeInfo_Single.fromJSON(e.single):void 0,multi:isSet$7(e.multi)?ModeInfo_Multi.fromJSON(e.multi):void 0}},toJSON(e){const t={};return e.single!==void 0&&(t.single=e.single?ModeInfo_Single.toJSON(e.single):void 0),e.multi!==void 0&&(t.multi=e.multi?ModeInfo_Multi.toJSON(e.multi):void 0),t},fromPartial(e){const t=createBaseModeInfo();return t.single=e.single!==void 0&&e.single!==null?ModeInfo_Single.fromPartial(e.single):void 0,t.multi=e.multi!==void 0&&e.multi!==null?ModeInfo_Multi.fromPartial(e.multi):void 0,t}};function createBaseModeInfo_Single(){return{mode:0}}const ModeInfo_Single={encode(e,t=minimal.Writer.create()){return e.mode!==0&&t.uint32(8).int32(e.mode),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseModeInfo_Single();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.mode=n.int32();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{mode:isSet$7(e.mode)?signModeFromJSON(e.mode):0}},toJSON(e){const t={};return e.mode!==void 0&&(t.mode=signModeToJSON(e.mode)),t},fromPartial(e){const t=createBaseModeInfo_Single();return t.mode=e.mode??0,t}};function createBaseModeInfo_Multi(){return{bitarray:void 0,modeInfos:[]}}const ModeInfo_Multi={encode(e,t=minimal.Writer.create()){e.bitarray!==void 0&&CompactBitArray.encode(e.bitarray,t.uint32(10).fork()).ldelim();for(const n of e.modeInfos)ModeInfo.encode(n,t.uint32(18).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseModeInfo_Multi();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.bitarray=CompactBitArray.decode(n,n.uint32());break;case 2:i.modeInfos.push(ModeInfo.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{bitarray:isSet$7(e.bitarray)?CompactBitArray.fromJSON(e.bitarray):void 0,modeInfos:Array.isArray(e?.modeInfos)?e.modeInfos.map(t=>ModeInfo.fromJSON(t)):[]}},toJSON(e){const t={};return e.bitarray!==void 0&&(t.bitarray=e.bitarray?CompactBitArray.toJSON(e.bitarray):void 0),e.modeInfos?t.modeInfos=e.modeInfos.map(n=>n?ModeInfo.toJSON(n):void 0):t.modeInfos=[],t},fromPartial(e){const t=createBaseModeInfo_Multi();return t.bitarray=e.bitarray!==void 0&&e.bitarray!==null?CompactBitArray.fromPartial(e.bitarray):void 0,t.modeInfos=e.modeInfos?.map(n=>ModeInfo.fromPartial(n))||[],t}};function createBaseFee(){return{amount:[],gasLimit:"0",payer:"",granter:""}}const Fee={encode(e,t=minimal.Writer.create()){for(const n of e.amount)Coin.encode(n,t.uint32(10).fork()).ldelim();return e.gasLimit!=="0"&&t.uint32(16).uint64(e.gasLimit),e.payer!==""&&t.uint32(26).string(e.payer),e.granter!==""&&t.uint32(34).string(e.granter),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseFee();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.amount.push(Coin.decode(n,n.uint32()));break;case 2:i.gasLimit=longToString$3(n.uint64());break;case 3:i.payer=n.string();break;case 4:i.granter=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{amount:Array.isArray(e?.amount)?e.amount.map(t=>Coin.fromJSON(t)):[],gasLimit:isSet$7(e.gasLimit)?String(e.gasLimit):"0",payer:isSet$7(e.payer)?String(e.payer):"",granter:isSet$7(e.granter)?String(e.granter):""}},toJSON(e){const t={};return e.amount?t.amount=e.amount.map(n=>n?Coin.toJSON(n):void 0):t.amount=[],e.gasLimit!==void 0&&(t.gasLimit=e.gasLimit),e.payer!==void 0&&(t.payer=e.payer),e.granter!==void 0&&(t.granter=e.granter),t},fromPartial(e){const t=createBaseFee();return t.amount=e.amount?.map(n=>Coin.fromPartial(n))||[],t.gasLimit=e.gasLimit??"0",t.payer=e.payer??"",t.granter=e.granter??"",t}};var globalThis$4=(()=>{if(typeof globalThis$4<"u")return globalThis$4;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$3=globalThis$4.atob||(e=>globalThis$4.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$3(e){const t=atob$3(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$3=globalThis$4.btoa||(e=>globalThis$4.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$3(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$3(t.join(""))}function longToString$3(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$7(e){return e!=null}var OrderBy;(function(e){e[e.ORDER_BY_UNSPECIFIED=0]="ORDER_BY_UNSPECIFIED",e[e.ORDER_BY_ASC=1]="ORDER_BY_ASC",e[e.ORDER_BY_DESC=2]="ORDER_BY_DESC",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"})(OrderBy||(OrderBy={}));function orderByFromJSON(e){switch(e){case 0:case"ORDER_BY_UNSPECIFIED":return OrderBy.ORDER_BY_UNSPECIFIED;case 1:case"ORDER_BY_ASC":return OrderBy.ORDER_BY_ASC;case 2:case"ORDER_BY_DESC":return OrderBy.ORDER_BY_DESC;case-1:case"UNRECOGNIZED":default:return OrderBy.UNRECOGNIZED}}function orderByToJSON(e){switch(e){case OrderBy.ORDER_BY_UNSPECIFIED:return"ORDER_BY_UNSPECIFIED";case OrderBy.ORDER_BY_ASC:return"ORDER_BY_ASC";case OrderBy.ORDER_BY_DESC:return"ORDER_BY_DESC";case OrderBy.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var BroadcastMode;(function(e){e[e.BROADCAST_MODE_UNSPECIFIED=0]="BROADCAST_MODE_UNSPECIFIED",e[e.BROADCAST_MODE_BLOCK=1]="BROADCAST_MODE_BLOCK",e[e.BROADCAST_MODE_SYNC=2]="BROADCAST_MODE_SYNC",e[e.BROADCAST_MODE_ASYNC=3]="BROADCAST_MODE_ASYNC",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"})(BroadcastMode||(BroadcastMode={}));function broadcastModeFromJSON(e){switch(e){case 0:case"BROADCAST_MODE_UNSPECIFIED":return BroadcastMode.BROADCAST_MODE_UNSPECIFIED;case 1:case"BROADCAST_MODE_BLOCK":return BroadcastMode.BROADCAST_MODE_BLOCK;case 2:case"BROADCAST_MODE_SYNC":return BroadcastMode.BROADCAST_MODE_SYNC;case 3:case"BROADCAST_MODE_ASYNC":return BroadcastMode.BROADCAST_MODE_ASYNC;case-1:case"UNRECOGNIZED":default:return BroadcastMode.UNRECOGNIZED}}function broadcastModeToJSON(e){switch(e){case BroadcastMode.BROADCAST_MODE_UNSPECIFIED:return"BROADCAST_MODE_UNSPECIFIED";case BroadcastMode.BROADCAST_MODE_BLOCK:return"BROADCAST_MODE_BLOCK";case BroadcastMode.BROADCAST_MODE_SYNC:return"BROADCAST_MODE_SYNC";case BroadcastMode.BROADCAST_MODE_ASYNC:return"BROADCAST_MODE_ASYNC";case BroadcastMode.UNRECOGNIZED:default:return"UNRECOGNIZED"}}function createBaseGetTxsEventRequest(){return{events:[],pagination:void 0,orderBy:0}}const GetTxsEventRequest={encode(e,t=minimal.Writer.create()){for(const n of e.events)t.uint32(10).string(n);return e.pagination!==void 0&&PageRequest.encode(e.pagination,t.uint32(18).fork()).ldelim(),e.orderBy!==0&&t.uint32(24).int32(e.orderBy),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetTxsEventRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.events.push(n.string());break;case 2:i.pagination=PageRequest.decode(n,n.uint32());break;case 3:i.orderBy=n.int32();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{events:Array.isArray(e?.events)?e.events.map(t=>String(t)):[],pagination:isSet$6(e.pagination)?PageRequest.fromJSON(e.pagination):void 0,orderBy:isSet$6(e.orderBy)?orderByFromJSON(e.orderBy):0}},toJSON(e){const t={};return e.events?t.events=e.events.map(n=>n):t.events=[],e.pagination!==void 0&&(t.pagination=e.pagination?PageRequest.toJSON(e.pagination):void 0),e.orderBy!==void 0&&(t.orderBy=orderByToJSON(e.orderBy)),t},fromPartial(e){const t=createBaseGetTxsEventRequest();return t.events=e.events?.map(n=>n)||[],t.pagination=e.pagination!==void 0&&e.pagination!==null?PageRequest.fromPartial(e.pagination):void 0,t.orderBy=e.orderBy??0,t}};function createBaseGetTxsEventResponse(){return{txs:[],txResponses:[],pagination:void 0}}const GetTxsEventResponse={encode(e,t=minimal.Writer.create()){for(const n of e.txs)Tx.encode(n,t.uint32(10).fork()).ldelim();for(const n of e.txResponses)TxResponse.encode(n,t.uint32(18).fork()).ldelim();return e.pagination!==void 0&&PageResponse.encode(e.pagination,t.uint32(26).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetTxsEventResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.txs.push(Tx.decode(n,n.uint32()));break;case 2:i.txResponses.push(TxResponse.decode(n,n.uint32()));break;case 3:i.pagination=PageResponse.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{txs:Array.isArray(e?.txs)?e.txs.map(t=>Tx.fromJSON(t)):[],txResponses:Array.isArray(e?.txResponses)?e.txResponses.map(t=>TxResponse.fromJSON(t)):[],pagination:isSet$6(e.pagination)?PageResponse.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.txs?t.txs=e.txs.map(n=>n?Tx.toJSON(n):void 0):t.txs=[],e.txResponses?t.txResponses=e.txResponses.map(n=>n?TxResponse.toJSON(n):void 0):t.txResponses=[],e.pagination!==void 0&&(t.pagination=e.pagination?PageResponse.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseGetTxsEventResponse();return t.txs=e.txs?.map(n=>Tx.fromPartial(n))||[],t.txResponses=e.txResponses?.map(n=>TxResponse.fromPartial(n))||[],t.pagination=e.pagination!==void 0&&e.pagination!==null?PageResponse.fromPartial(e.pagination):void 0,t}};function createBaseBroadcastTxRequest(){return{txBytes:new Uint8Array,mode:0}}const BroadcastTxRequest={encode(e,t=minimal.Writer.create()){return e.txBytes.length!==0&&t.uint32(10).bytes(e.txBytes),e.mode!==0&&t.uint32(16).int32(e.mode),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseBroadcastTxRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.txBytes=n.bytes();break;case 2:i.mode=n.int32();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{txBytes:isSet$6(e.txBytes)?bytesFromBase64$2(e.txBytes):new Uint8Array,mode:isSet$6(e.mode)?broadcastModeFromJSON(e.mode):0}},toJSON(e){const t={};return e.txBytes!==void 0&&(t.txBytes=base64FromBytes$2(e.txBytes!==void 0?e.txBytes:new Uint8Array)),e.mode!==void 0&&(t.mode=broadcastModeToJSON(e.mode)),t},fromPartial(e){const t=createBaseBroadcastTxRequest();return t.txBytes=e.txBytes??new Uint8Array,t.mode=e.mode??0,t}};function createBaseBroadcastTxResponse(){return{txResponse:void 0}}const BroadcastTxResponse={encode(e,t=minimal.Writer.create()){return e.txResponse!==void 0&&TxResponse.encode(e.txResponse,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseBroadcastTxResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.txResponse=TxResponse.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{txResponse:isSet$6(e.txResponse)?TxResponse.fromJSON(e.txResponse):void 0}},toJSON(e){const t={};return e.txResponse!==void 0&&(t.txResponse=e.txResponse?TxResponse.toJSON(e.txResponse):void 0),t},fromPartial(e){const t=createBaseBroadcastTxResponse();return t.txResponse=e.txResponse!==void 0&&e.txResponse!==null?TxResponse.fromPartial(e.txResponse):void 0,t}};function createBaseSimulateRequest(){return{tx:void 0,txBytes:new Uint8Array}}const SimulateRequest={encode(e,t=minimal.Writer.create()){return e.tx!==void 0&&Tx.encode(e.tx,t.uint32(10).fork()).ldelim(),e.txBytes.length!==0&&t.uint32(18).bytes(e.txBytes),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseSimulateRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.tx=Tx.decode(n,n.uint32());break;case 2:i.txBytes=n.bytes();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{tx:isSet$6(e.tx)?Tx.fromJSON(e.tx):void 0,txBytes:isSet$6(e.txBytes)?bytesFromBase64$2(e.txBytes):new Uint8Array}},toJSON(e){const t={};return e.tx!==void 0&&(t.tx=e.tx?Tx.toJSON(e.tx):void 0),e.txBytes!==void 0&&(t.txBytes=base64FromBytes$2(e.txBytes!==void 0?e.txBytes:new Uint8Array)),t},fromPartial(e){const t=createBaseSimulateRequest();return t.tx=e.tx!==void 0&&e.tx!==null?Tx.fromPartial(e.tx):void 0,t.txBytes=e.txBytes??new Uint8Array,t}};function createBaseSimulateResponse(){return{gasInfo:void 0,result:void 0}}const SimulateResponse={encode(e,t=minimal.Writer.create()){return e.gasInfo!==void 0&&GasInfo.encode(e.gasInfo,t.uint32(10).fork()).ldelim(),e.result!==void 0&&Result.encode(e.result,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseSimulateResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.gasInfo=GasInfo.decode(n,n.uint32());break;case 2:i.result=Result.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{gasInfo:isSet$6(e.gasInfo)?GasInfo.fromJSON(e.gasInfo):void 0,result:isSet$6(e.result)?Result.fromJSON(e.result):void 0}},toJSON(e){const t={};return e.gasInfo!==void 0&&(t.gasInfo=e.gasInfo?GasInfo.toJSON(e.gasInfo):void 0),e.result!==void 0&&(t.result=e.result?Result.toJSON(e.result):void 0),t},fromPartial(e){const t=createBaseSimulateResponse();return t.gasInfo=e.gasInfo!==void 0&&e.gasInfo!==null?GasInfo.fromPartial(e.gasInfo):void 0,t.result=e.result!==void 0&&e.result!==null?Result.fromPartial(e.result):void 0,t}};function createBaseGetTxRequest(){return{hash:""}}const GetTxRequest={encode(e,t=minimal.Writer.create()){return e.hash!==""&&t.uint32(10).string(e.hash),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetTxRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.hash=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{hash:isSet$6(e.hash)?String(e.hash):""}},toJSON(e){const t={};return e.hash!==void 0&&(t.hash=e.hash),t},fromPartial(e){const t=createBaseGetTxRequest();return t.hash=e.hash??"",t}};function createBaseGetTxResponse(){return{tx:void 0,txResponse:void 0}}const GetTxResponse={encode(e,t=minimal.Writer.create()){return e.tx!==void 0&&Tx.encode(e.tx,t.uint32(10).fork()).ldelim(),e.txResponse!==void 0&&TxResponse.encode(e.txResponse,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetTxResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.tx=Tx.decode(n,n.uint32());break;case 2:i.txResponse=TxResponse.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{tx:isSet$6(e.tx)?Tx.fromJSON(e.tx):void 0,txResponse:isSet$6(e.txResponse)?TxResponse.fromJSON(e.txResponse):void 0}},toJSON(e){const t={};return e.tx!==void 0&&(t.tx=e.tx?Tx.toJSON(e.tx):void 0),e.txResponse!==void 0&&(t.txResponse=e.txResponse?TxResponse.toJSON(e.txResponse):void 0),t},fromPartial(e){const t=createBaseGetTxResponse();return t.tx=e.tx!==void 0&&e.tx!==null?Tx.fromPartial(e.tx):void 0,t.txResponse=e.txResponse!==void 0&&e.txResponse!==null?TxResponse.fromPartial(e.txResponse):void 0,t}};class ServiceClientImpl$1{constructor(t){de(this,"rpc");this.rpc=t,this.simulate=this.simulate.bind(this),this.getTx=this.getTx.bind(this),this.broadcastTx=this.broadcastTx.bind(this),this.getTxsEvent=this.getTxsEvent.bind(this)}simulate(t,n){return this.rpc.unary(ServiceSimulateDesc,SimulateRequest.fromPartial(t),n)}getTx(t,n){return this.rpc.unary(ServiceGetTxDesc,GetTxRequest.fromPartial(t),n)}broadcastTx(t,n){return this.rpc.unary(ServiceBroadcastTxDesc,BroadcastTxRequest.fromPartial(t),n)}getTxsEvent(t,n){return this.rpc.unary(ServiceGetTxsEventDesc,GetTxsEventRequest.fromPartial(t),n)}}const ServiceDesc$1={serviceName:"cosmos.tx.v1beta1.Service"},ServiceSimulateDesc={methodName:"Simulate",service:ServiceDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return SimulateRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...SimulateResponse.decode(e),toObject(){return this}}}}},ServiceGetTxDesc={methodName:"GetTx",service:ServiceDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetTxRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...GetTxResponse.decode(e),toObject(){return this}}}}},ServiceBroadcastTxDesc={methodName:"BroadcastTx",service:ServiceDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return BroadcastTxRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...BroadcastTxResponse.decode(e),toObject(){return this}}}}},ServiceGetTxsEventDesc={methodName:"GetTxsEvent",service:ServiceDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetTxsEventRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...GetTxsEventResponse.decode(e),toObject(){return this}}}}};var globalThis$3=(()=>{if(typeof globalThis$3<"u")return globalThis$3;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$2=globalThis$3.atob||(e=>globalThis$3.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$2(e){const t=atob$2(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$2=globalThis$3.btoa||(e=>globalThis$3.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$2(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$2(t.join(""))}function isSet$6(e){return e!=null}function createBaseEvidence(){return{duplicateVoteEvidence:void 0,lightClientAttackEvidence:void 0}}const Evidence={encode(e,t=minimal.Writer.create()){return e.duplicateVoteEvidence!==void 0&&DuplicateVoteEvidence.encode(e.duplicateVoteEvidence,t.uint32(10).fork()).ldelim(),e.lightClientAttackEvidence!==void 0&&LightClientAttackEvidence.encode(e.lightClientAttackEvidence,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseEvidence();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.duplicateVoteEvidence=DuplicateVoteEvidence.decode(n,n.uint32());break;case 2:i.lightClientAttackEvidence=LightClientAttackEvidence.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{duplicateVoteEvidence:isSet$5(e.duplicateVoteEvidence)?DuplicateVoteEvidence.fromJSON(e.duplicateVoteEvidence):void 0,lightClientAttackEvidence:isSet$5(e.lightClientAttackEvidence)?LightClientAttackEvidence.fromJSON(e.lightClientAttackEvidence):void 0}},toJSON(e){const t={};return e.duplicateVoteEvidence!==void 0&&(t.duplicateVoteEvidence=e.duplicateVoteEvidence?DuplicateVoteEvidence.toJSON(e.duplicateVoteEvidence):void 0),e.lightClientAttackEvidence!==void 0&&(t.lightClientAttackEvidence=e.lightClientAttackEvidence?LightClientAttackEvidence.toJSON(e.lightClientAttackEvidence):void 0),t},fromPartial(e){const t=createBaseEvidence();return t.duplicateVoteEvidence=e.duplicateVoteEvidence!==void 0&&e.duplicateVoteEvidence!==null?DuplicateVoteEvidence.fromPartial(e.duplicateVoteEvidence):void 0,t.lightClientAttackEvidence=e.lightClientAttackEvidence!==void 0&&e.lightClientAttackEvidence!==null?LightClientAttackEvidence.fromPartial(e.lightClientAttackEvidence):void 0,t}};function createBaseDuplicateVoteEvidence(){return{voteA:void 0,voteB:void 0,totalVotingPower:"0",validatorPower:"0",timestamp:void 0}}const DuplicateVoteEvidence={encode(e,t=minimal.Writer.create()){return e.voteA!==void 0&&Vote.encode(e.voteA,t.uint32(10).fork()).ldelim(),e.voteB!==void 0&&Vote.encode(e.voteB,t.uint32(18).fork()).ldelim(),e.totalVotingPower!=="0"&&t.uint32(24).int64(e.totalVotingPower),e.validatorPower!=="0"&&t.uint32(32).int64(e.validatorPower),e.timestamp!==void 0&&Timestamp.encode(e.timestamp,t.uint32(42).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseDuplicateVoteEvidence();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.voteA=Vote.decode(n,n.uint32());break;case 2:i.voteB=Vote.decode(n,n.uint32());break;case 3:i.totalVotingPower=longToString$2(n.int64());break;case 4:i.validatorPower=longToString$2(n.int64());break;case 5:i.timestamp=Timestamp.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{voteA:isSet$5(e.voteA)?Vote.fromJSON(e.voteA):void 0,voteB:isSet$5(e.voteB)?Vote.fromJSON(e.voteB):void 0,totalVotingPower:isSet$5(e.totalVotingPower)?String(e.totalVotingPower):"0",validatorPower:isSet$5(e.validatorPower)?String(e.validatorPower):"0",timestamp:isSet$5(e.timestamp)?fromJsonTimestamp(e.timestamp):void 0}},toJSON(e){const t={};return e.voteA!==void 0&&(t.voteA=e.voteA?Vote.toJSON(e.voteA):void 0),e.voteB!==void 0&&(t.voteB=e.voteB?Vote.toJSON(e.voteB):void 0),e.totalVotingPower!==void 0&&(t.totalVotingPower=e.totalVotingPower),e.validatorPower!==void 0&&(t.validatorPower=e.validatorPower),e.timestamp!==void 0&&(t.timestamp=fromTimestamp(e.timestamp).toISOString()),t},fromPartial(e){const t=createBaseDuplicateVoteEvidence();return t.voteA=e.voteA!==void 0&&e.voteA!==null?Vote.fromPartial(e.voteA):void 0,t.voteB=e.voteB!==void 0&&e.voteB!==null?Vote.fromPartial(e.voteB):void 0,t.totalVotingPower=e.totalVotingPower??"0",t.validatorPower=e.validatorPower??"0",t.timestamp=e.timestamp!==void 0&&e.timestamp!==null?Timestamp.fromPartial(e.timestamp):void 0,t}};function createBaseLightClientAttackEvidence(){return{conflictingBlock:void 0,commonHeight:"0",byzantineValidators:[],totalVotingPower:"0",timestamp:void 0}}const LightClientAttackEvidence={encode(e,t=minimal.Writer.create()){e.conflictingBlock!==void 0&&LightBlock.encode(e.conflictingBlock,t.uint32(10).fork()).ldelim(),e.commonHeight!=="0"&&t.uint32(16).int64(e.commonHeight);for(const n of e.byzantineValidators)Validator$1.encode(n,t.uint32(26).fork()).ldelim();return e.totalVotingPower!=="0"&&t.uint32(32).int64(e.totalVotingPower),e.timestamp!==void 0&&Timestamp.encode(e.timestamp,t.uint32(42).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseLightClientAttackEvidence();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.conflictingBlock=LightBlock.decode(n,n.uint32());break;case 2:i.commonHeight=longToString$2(n.int64());break;case 3:i.byzantineValidators.push(Validator$1.decode(n,n.uint32()));break;case 4:i.totalVotingPower=longToString$2(n.int64());break;case 5:i.timestamp=Timestamp.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{conflictingBlock:isSet$5(e.conflictingBlock)?LightBlock.fromJSON(e.conflictingBlock):void 0,commonHeight:isSet$5(e.commonHeight)?String(e.commonHeight):"0",byzantineValidators:Array.isArray(e?.byzantineValidators)?e.byzantineValidators.map(t=>Validator$1.fromJSON(t)):[],totalVotingPower:isSet$5(e.totalVotingPower)?String(e.totalVotingPower):"0",timestamp:isSet$5(e.timestamp)?fromJsonTimestamp(e.timestamp):void 0}},toJSON(e){const t={};return e.conflictingBlock!==void 0&&(t.conflictingBlock=e.conflictingBlock?LightBlock.toJSON(e.conflictingBlock):void 0),e.commonHeight!==void 0&&(t.commonHeight=e.commonHeight),e.byzantineValidators?t.byzantineValidators=e.byzantineValidators.map(n=>n?Validator$1.toJSON(n):void 0):t.byzantineValidators=[],e.totalVotingPower!==void 0&&(t.totalVotingPower=e.totalVotingPower),e.timestamp!==void 0&&(t.timestamp=fromTimestamp(e.timestamp).toISOString()),t},fromPartial(e){const t=createBaseLightClientAttackEvidence();return t.conflictingBlock=e.conflictingBlock!==void 0&&e.conflictingBlock!==null?LightBlock.fromPartial(e.conflictingBlock):void 0,t.commonHeight=e.commonHeight??"0",t.byzantineValidators=e.byzantineValidators?.map(n=>Validator$1.fromPartial(n))||[],t.totalVotingPower=e.totalVotingPower??"0",t.timestamp=e.timestamp!==void 0&&e.timestamp!==null?Timestamp.fromPartial(e.timestamp):void 0,t}};function createBaseEvidenceList(){return{evidence:[]}}const EvidenceList={encode(e,t=minimal.Writer.create()){for(const n of e.evidence)Evidence.encode(n,t.uint32(10).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseEvidenceList();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.evidence.push(Evidence.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{evidence:Array.isArray(e?.evidence)?e.evidence.map(t=>Evidence.fromJSON(t)):[]}},toJSON(e){const t={};return e.evidence?t.evidence=e.evidence.map(n=>n?Evidence.toJSON(n):void 0):t.evidence=[],t},fromPartial(e){const t=createBaseEvidenceList();return t.evidence=e.evidence?.map(n=>Evidence.fromPartial(n))||[],t}};function toTimestamp(e){const t=Math.trunc(e.getTime()/1e3).toString(),n=e.getTime()%1e3*1e6;return{seconds:t,nanos:n}}function fromTimestamp(e){let t=Number(e.seconds)*1e3;return t+=e.nanos/1e6,new Date(t)}function fromJsonTimestamp(e){return e instanceof Date?toTimestamp(e):typeof e=="string"?toTimestamp(new Date(e)):Timestamp.fromJSON(e)}function longToString$2(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$5(e){return e!=null}function createBaseBlock(){return{header:void 0,data:void 0,evidence:void 0,lastCommit:void 0}}const Block={encode(e,t=minimal.Writer.create()){return e.header!==void 0&&Header$1.encode(e.header,t.uint32(10).fork()).ldelim(),e.data!==void 0&&Data.encode(e.data,t.uint32(18).fork()).ldelim(),e.evidence!==void 0&&EvidenceList.encode(e.evidence,t.uint32(26).fork()).ldelim(),e.lastCommit!==void 0&&Commit.encode(e.lastCommit,t.uint32(34).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseBlock();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.header=Header$1.decode(n,n.uint32());break;case 2:i.data=Data.decode(n,n.uint32());break;case 3:i.evidence=EvidenceList.decode(n,n.uint32());break;case 4:i.lastCommit=Commit.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{header:isSet$4(e.header)?Header$1.fromJSON(e.header):void 0,data:isSet$4(e.data)?Data.fromJSON(e.data):void 0,evidence:isSet$4(e.evidence)?EvidenceList.fromJSON(e.evidence):void 0,lastCommit:isSet$4(e.lastCommit)?Commit.fromJSON(e.lastCommit):void 0}},toJSON(e){const t={};return e.header!==void 0&&(t.header=e.header?Header$1.toJSON(e.header):void 0),e.data!==void 0&&(t.data=e.data?Data.toJSON(e.data):void 0),e.evidence!==void 0&&(t.evidence=e.evidence?EvidenceList.toJSON(e.evidence):void 0),e.lastCommit!==void 0&&(t.lastCommit=e.lastCommit?Commit.toJSON(e.lastCommit):void 0),t},fromPartial(e){const t=createBaseBlock();return t.header=e.header!==void 0&&e.header!==null?Header$1.fromPartial(e.header):void 0,t.data=e.data!==void 0&&e.data!==null?Data.fromPartial(e.data):void 0,t.evidence=e.evidence!==void 0&&e.evidence!==null?EvidenceList.fromPartial(e.evidence):void 0,t.lastCommit=e.lastCommit!==void 0&&e.lastCommit!==null?Commit.fromPartial(e.lastCommit):void 0,t}};function isSet$4(e){return e!=null}function createBaseProtocolVersion(){return{p2p:"0",block:"0",app:"0"}}const ProtocolVersion={encode(e,t=minimal.Writer.create()){return e.p2p!=="0"&&t.uint32(8).uint64(e.p2p),e.block!=="0"&&t.uint32(16).uint64(e.block),e.app!=="0"&&t.uint32(24).uint64(e.app),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseProtocolVersion();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.p2p=longToString$1(n.uint64());break;case 2:i.block=longToString$1(n.uint64());break;case 3:i.app=longToString$1(n.uint64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{p2p:isSet$3(e.p2p)?String(e.p2p):"0",block:isSet$3(e.block)?String(e.block):"0",app:isSet$3(e.app)?String(e.app):"0"}},toJSON(e){const t={};return e.p2p!==void 0&&(t.p2p=e.p2p),e.block!==void 0&&(t.block=e.block),e.app!==void 0&&(t.app=e.app),t},fromPartial(e){const t=createBaseProtocolVersion();return t.p2p=e.p2p??"0",t.block=e.block??"0",t.app=e.app??"0",t}};function createBaseDefaultNodeInfo(){return{protocolVersion:void 0,defaultNodeId:"",listenAddr:"",network:"",version:"",channels:new Uint8Array,moniker:"",other:void 0}}const DefaultNodeInfo={encode(e,t=minimal.Writer.create()){return e.protocolVersion!==void 0&&ProtocolVersion.encode(e.protocolVersion,t.uint32(10).fork()).ldelim(),e.defaultNodeId!==""&&t.uint32(18).string(e.defaultNodeId),e.listenAddr!==""&&t.uint32(26).string(e.listenAddr),e.network!==""&&t.uint32(34).string(e.network),e.version!==""&&t.uint32(42).string(e.version),e.channels.length!==0&&t.uint32(50).bytes(e.channels),e.moniker!==""&&t.uint32(58).string(e.moniker),e.other!==void 0&&DefaultNodeInfoOther.encode(e.other,t.uint32(66).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseDefaultNodeInfo();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.protocolVersion=ProtocolVersion.decode(n,n.uint32());break;case 2:i.defaultNodeId=n.string();break;case 3:i.listenAddr=n.string();break;case 4:i.network=n.string();break;case 5:i.version=n.string();break;case 6:i.channels=n.bytes();break;case 7:i.moniker=n.string();break;case 8:i.other=DefaultNodeInfoOther.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{protocolVersion:isSet$3(e.protocolVersion)?ProtocolVersion.fromJSON(e.protocolVersion):void 0,defaultNodeId:isSet$3(e.defaultNodeId)?String(e.defaultNodeId):"",listenAddr:isSet$3(e.listenAddr)?String(e.listenAddr):"",network:isSet$3(e.network)?String(e.network):"",version:isSet$3(e.version)?String(e.version):"",channels:isSet$3(e.channels)?bytesFromBase64$1(e.channels):new Uint8Array,moniker:isSet$3(e.moniker)?String(e.moniker):"",other:isSet$3(e.other)?DefaultNodeInfoOther.fromJSON(e.other):void 0}},toJSON(e){const t={};return e.protocolVersion!==void 0&&(t.protocolVersion=e.protocolVersion?ProtocolVersion.toJSON(e.protocolVersion):void 0),e.defaultNodeId!==void 0&&(t.defaultNodeId=e.defaultNodeId),e.listenAddr!==void 0&&(t.listenAddr=e.listenAddr),e.network!==void 0&&(t.network=e.network),e.version!==void 0&&(t.version=e.version),e.channels!==void 0&&(t.channels=base64FromBytes$1(e.channels!==void 0?e.channels:new Uint8Array)),e.moniker!==void 0&&(t.moniker=e.moniker),e.other!==void 0&&(t.other=e.other?DefaultNodeInfoOther.toJSON(e.other):void 0),t},fromPartial(e){const t=createBaseDefaultNodeInfo();return t.protocolVersion=e.protocolVersion!==void 0&&e.protocolVersion!==null?ProtocolVersion.fromPartial(e.protocolVersion):void 0,t.defaultNodeId=e.defaultNodeId??"",t.listenAddr=e.listenAddr??"",t.network=e.network??"",t.version=e.version??"",t.channels=e.channels??new Uint8Array,t.moniker=e.moniker??"",t.other=e.other!==void 0&&e.other!==null?DefaultNodeInfoOther.fromPartial(e.other):void 0,t}};function createBaseDefaultNodeInfoOther(){return{txIndex:"",rpcAddress:""}}const DefaultNodeInfoOther={encode(e,t=minimal.Writer.create()){return e.txIndex!==""&&t.uint32(10).string(e.txIndex),e.rpcAddress!==""&&t.uint32(18).string(e.rpcAddress),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseDefaultNodeInfoOther();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.txIndex=n.string();break;case 2:i.rpcAddress=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{txIndex:isSet$3(e.txIndex)?String(e.txIndex):"",rpcAddress:isSet$3(e.rpcAddress)?String(e.rpcAddress):""}},toJSON(e){const t={};return e.txIndex!==void 0&&(t.txIndex=e.txIndex),e.rpcAddress!==void 0&&(t.rpcAddress=e.rpcAddress),t},fromPartial(e){const t=createBaseDefaultNodeInfoOther();return t.txIndex=e.txIndex??"",t.rpcAddress=e.rpcAddress??"",t}};var globalThis$2=(()=>{if(typeof globalThis$2<"u")return globalThis$2;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$1=globalThis$2.atob||(e=>globalThis$2.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64$1(e){const t=atob$1(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa$1=globalThis$2.btoa||(e=>globalThis$2.Buffer.from(e,"binary").toString("base64"));function base64FromBytes$1(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa$1(t.join(""))}function longToString$1(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$3(e){return e!=null}function createBaseGetValidatorSetByHeightRequest(){return{height:"0",pagination:void 0}}const GetValidatorSetByHeightRequest={encode(e,t=minimal.Writer.create()){return e.height!=="0"&&t.uint32(8).int64(e.height),e.pagination!==void 0&&PageRequest.encode(e.pagination,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetValidatorSetByHeightRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.height=longToString(n.int64());break;case 2:i.pagination=PageRequest.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{height:isSet$2(e.height)?String(e.height):"0",pagination:isSet$2(e.pagination)?PageRequest.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.height!==void 0&&(t.height=e.height),e.pagination!==void 0&&(t.pagination=e.pagination?PageRequest.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseGetValidatorSetByHeightRequest();return t.height=e.height??"0",t.pagination=e.pagination!==void 0&&e.pagination!==null?PageRequest.fromPartial(e.pagination):void 0,t}};function createBaseGetValidatorSetByHeightResponse(){return{blockHeight:"0",validators:[],pagination:void 0}}const GetValidatorSetByHeightResponse={encode(e,t=minimal.Writer.create()){e.blockHeight!=="0"&&t.uint32(8).int64(e.blockHeight);for(const n of e.validators)Validator.encode(n,t.uint32(18).fork()).ldelim();return e.pagination!==void 0&&PageResponse.encode(e.pagination,t.uint32(26).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetValidatorSetByHeightResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.blockHeight=longToString(n.int64());break;case 2:i.validators.push(Validator.decode(n,n.uint32()));break;case 3:i.pagination=PageResponse.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{blockHeight:isSet$2(e.blockHeight)?String(e.blockHeight):"0",validators:Array.isArray(e?.validators)?e.validators.map(t=>Validator.fromJSON(t)):[],pagination:isSet$2(e.pagination)?PageResponse.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.blockHeight!==void 0&&(t.blockHeight=e.blockHeight),e.validators?t.validators=e.validators.map(n=>n?Validator.toJSON(n):void 0):t.validators=[],e.pagination!==void 0&&(t.pagination=e.pagination?PageResponse.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseGetValidatorSetByHeightResponse();return t.blockHeight=e.blockHeight??"0",t.validators=e.validators?.map(n=>Validator.fromPartial(n))||[],t.pagination=e.pagination!==void 0&&e.pagination!==null?PageResponse.fromPartial(e.pagination):void 0,t}};function createBaseGetLatestValidatorSetRequest(){return{pagination:void 0}}const GetLatestValidatorSetRequest={encode(e,t=minimal.Writer.create()){return e.pagination!==void 0&&PageRequest.encode(e.pagination,t.uint32(10).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetLatestValidatorSetRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.pagination=PageRequest.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{pagination:isSet$2(e.pagination)?PageRequest.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.pagination!==void 0&&(t.pagination=e.pagination?PageRequest.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseGetLatestValidatorSetRequest();return t.pagination=e.pagination!==void 0&&e.pagination!==null?PageRequest.fromPartial(e.pagination):void 0,t}};function createBaseGetLatestValidatorSetResponse(){return{blockHeight:"0",validators:[],pagination:void 0}}const GetLatestValidatorSetResponse={encode(e,t=minimal.Writer.create()){e.blockHeight!=="0"&&t.uint32(8).int64(e.blockHeight);for(const n of e.validators)Validator.encode(n,t.uint32(18).fork()).ldelim();return e.pagination!==void 0&&PageResponse.encode(e.pagination,t.uint32(26).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetLatestValidatorSetResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.blockHeight=longToString(n.int64());break;case 2:i.validators.push(Validator.decode(n,n.uint32()));break;case 3:i.pagination=PageResponse.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{blockHeight:isSet$2(e.blockHeight)?String(e.blockHeight):"0",validators:Array.isArray(e?.validators)?e.validators.map(t=>Validator.fromJSON(t)):[],pagination:isSet$2(e.pagination)?PageResponse.fromJSON(e.pagination):void 0}},toJSON(e){const t={};return e.blockHeight!==void 0&&(t.blockHeight=e.blockHeight),e.validators?t.validators=e.validators.map(n=>n?Validator.toJSON(n):void 0):t.validators=[],e.pagination!==void 0&&(t.pagination=e.pagination?PageResponse.toJSON(e.pagination):void 0),t},fromPartial(e){const t=createBaseGetLatestValidatorSetResponse();return t.blockHeight=e.blockHeight??"0",t.validators=e.validators?.map(n=>Validator.fromPartial(n))||[],t.pagination=e.pagination!==void 0&&e.pagination!==null?PageResponse.fromPartial(e.pagination):void 0,t}};function createBaseValidator(){return{address:"",pubKey:void 0,votingPower:"0",proposerPriority:"0"}}const Validator={encode(e,t=minimal.Writer.create()){return e.address!==""&&t.uint32(10).string(e.address),e.pubKey!==void 0&&Any.encode(e.pubKey,t.uint32(18).fork()).ldelim(),e.votingPower!=="0"&&t.uint32(24).int64(e.votingPower),e.proposerPriority!=="0"&&t.uint32(32).int64(e.proposerPriority),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseValidator();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.address=n.string();break;case 2:i.pubKey=Any.decode(n,n.uint32());break;case 3:i.votingPower=longToString(n.int64());break;case 4:i.proposerPriority=longToString(n.int64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{address:isSet$2(e.address)?String(e.address):"",pubKey:isSet$2(e.pubKey)?Any.fromJSON(e.pubKey):void 0,votingPower:isSet$2(e.votingPower)?String(e.votingPower):"0",proposerPriority:isSet$2(e.proposerPriority)?String(e.proposerPriority):"0"}},toJSON(e){const t={};return e.address!==void 0&&(t.address=e.address),e.pubKey!==void 0&&(t.pubKey=e.pubKey?Any.toJSON(e.pubKey):void 0),e.votingPower!==void 0&&(t.votingPower=e.votingPower),e.proposerPriority!==void 0&&(t.proposerPriority=e.proposerPriority),t},fromPartial(e){const t=createBaseValidator();return t.address=e.address??"",t.pubKey=e.pubKey!==void 0&&e.pubKey!==null?Any.fromPartial(e.pubKey):void 0,t.votingPower=e.votingPower??"0",t.proposerPriority=e.proposerPriority??"0",t}};function createBaseGetBlockByHeightRequest(){return{height:"0"}}const GetBlockByHeightRequest={encode(e,t=minimal.Writer.create()){return e.height!=="0"&&t.uint32(8).int64(e.height),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetBlockByHeightRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.height=longToString(n.int64());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{height:isSet$2(e.height)?String(e.height):"0"}},toJSON(e){const t={};return e.height!==void 0&&(t.height=e.height),t},fromPartial(e){const t=createBaseGetBlockByHeightRequest();return t.height=e.height??"0",t}};function createBaseGetBlockByHeightResponse(){return{blockId:void 0,block:void 0}}const GetBlockByHeightResponse={encode(e,t=minimal.Writer.create()){return e.blockId!==void 0&&BlockID.encode(e.blockId,t.uint32(10).fork()).ldelim(),e.block!==void 0&&Block.encode(e.block,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetBlockByHeightResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.blockId=BlockID.decode(n,n.uint32());break;case 2:i.block=Block.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{blockId:isSet$2(e.blockId)?BlockID.fromJSON(e.blockId):void 0,block:isSet$2(e.block)?Block.fromJSON(e.block):void 0}},toJSON(e){const t={};return e.blockId!==void 0&&(t.blockId=e.blockId?BlockID.toJSON(e.blockId):void 0),e.block!==void 0&&(t.block=e.block?Block.toJSON(e.block):void 0),t},fromPartial(e){const t=createBaseGetBlockByHeightResponse();return t.blockId=e.blockId!==void 0&&e.blockId!==null?BlockID.fromPartial(e.blockId):void 0,t.block=e.block!==void 0&&e.block!==null?Block.fromPartial(e.block):void 0,t}};function createBaseGetLatestBlockRequest(){return{}}const GetLatestBlockRequest={encode(e,t=minimal.Writer.create()){return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetLatestBlockRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){default:n.skipType(o&7);break}}return i},fromJSON(e){return{}},toJSON(e){return{}},fromPartial(e){return createBaseGetLatestBlockRequest()}};function createBaseGetLatestBlockResponse(){return{blockId:void 0,block:void 0}}const GetLatestBlockResponse={encode(e,t=minimal.Writer.create()){return e.blockId!==void 0&&BlockID.encode(e.blockId,t.uint32(10).fork()).ldelim(),e.block!==void 0&&Block.encode(e.block,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetLatestBlockResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.blockId=BlockID.decode(n,n.uint32());break;case 2:i.block=Block.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{blockId:isSet$2(e.blockId)?BlockID.fromJSON(e.blockId):void 0,block:isSet$2(e.block)?Block.fromJSON(e.block):void 0}},toJSON(e){const t={};return e.blockId!==void 0&&(t.blockId=e.blockId?BlockID.toJSON(e.blockId):void 0),e.block!==void 0&&(t.block=e.block?Block.toJSON(e.block):void 0),t},fromPartial(e){const t=createBaseGetLatestBlockResponse();return t.blockId=e.blockId!==void 0&&e.blockId!==null?BlockID.fromPartial(e.blockId):void 0,t.block=e.block!==void 0&&e.block!==null?Block.fromPartial(e.block):void 0,t}};function createBaseGetSyncingRequest(){return{}}const GetSyncingRequest={encode(e,t=minimal.Writer.create()){return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetSyncingRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){default:n.skipType(o&7);break}}return i},fromJSON(e){return{}},toJSON(e){return{}},fromPartial(e){return createBaseGetSyncingRequest()}};function createBaseGetSyncingResponse(){return{syncing:!1}}const GetSyncingResponse={encode(e,t=minimal.Writer.create()){return e.syncing===!0&&t.uint32(8).bool(e.syncing),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetSyncingResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.syncing=n.bool();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{syncing:isSet$2(e.syncing)?Boolean(e.syncing):!1}},toJSON(e){const t={};return e.syncing!==void 0&&(t.syncing=e.syncing),t},fromPartial(e){const t=createBaseGetSyncingResponse();return t.syncing=e.syncing??!1,t}};function createBaseGetNodeInfoRequest(){return{}}const GetNodeInfoRequest={encode(e,t=minimal.Writer.create()){return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetNodeInfoRequest();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){default:n.skipType(o&7);break}}return i},fromJSON(e){return{}},toJSON(e){return{}},fromPartial(e){return createBaseGetNodeInfoRequest()}};function createBaseGetNodeInfoResponse(){return{defaultNodeInfo:void 0,applicationVersion:void 0}}const GetNodeInfoResponse={encode(e,t=minimal.Writer.create()){return e.defaultNodeInfo!==void 0&&DefaultNodeInfo.encode(e.defaultNodeInfo,t.uint32(10).fork()).ldelim(),e.applicationVersion!==void 0&&VersionInfo.encode(e.applicationVersion,t.uint32(18).fork()).ldelim(),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseGetNodeInfoResponse();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.defaultNodeInfo=DefaultNodeInfo.decode(n,n.uint32());break;case 2:i.applicationVersion=VersionInfo.decode(n,n.uint32());break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{defaultNodeInfo:isSet$2(e.defaultNodeInfo)?DefaultNodeInfo.fromJSON(e.defaultNodeInfo):void 0,applicationVersion:isSet$2(e.applicationVersion)?VersionInfo.fromJSON(e.applicationVersion):void 0}},toJSON(e){const t={};return e.defaultNodeInfo!==void 0&&(t.defaultNodeInfo=e.defaultNodeInfo?DefaultNodeInfo.toJSON(e.defaultNodeInfo):void 0),e.applicationVersion!==void 0&&(t.applicationVersion=e.applicationVersion?VersionInfo.toJSON(e.applicationVersion):void 0),t},fromPartial(e){const t=createBaseGetNodeInfoResponse();return t.defaultNodeInfo=e.defaultNodeInfo!==void 0&&e.defaultNodeInfo!==null?DefaultNodeInfo.fromPartial(e.defaultNodeInfo):void 0,t.applicationVersion=e.applicationVersion!==void 0&&e.applicationVersion!==null?VersionInfo.fromPartial(e.applicationVersion):void 0,t}};function createBaseVersionInfo(){return{name:"",appName:"",version:"",gitCommit:"",buildTags:"",goVersion:"",buildDeps:[],cosmosSdkVersion:""}}const VersionInfo={encode(e,t=minimal.Writer.create()){e.name!==""&&t.uint32(10).string(e.name),e.appName!==""&&t.uint32(18).string(e.appName),e.version!==""&&t.uint32(26).string(e.version),e.gitCommit!==""&&t.uint32(34).string(e.gitCommit),e.buildTags!==""&&t.uint32(42).string(e.buildTags),e.goVersion!==""&&t.uint32(50).string(e.goVersion);for(const n of e.buildDeps)Module.encode(n,t.uint32(58).fork()).ldelim();return e.cosmosSdkVersion!==""&&t.uint32(66).string(e.cosmosSdkVersion),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseVersionInfo();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.name=n.string();break;case 2:i.appName=n.string();break;case 3:i.version=n.string();break;case 4:i.gitCommit=n.string();break;case 5:i.buildTags=n.string();break;case 6:i.goVersion=n.string();break;case 7:i.buildDeps.push(Module.decode(n,n.uint32()));break;case 8:i.cosmosSdkVersion=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{name:isSet$2(e.name)?String(e.name):"",appName:isSet$2(e.appName)?String(e.appName):"",version:isSet$2(e.version)?String(e.version):"",gitCommit:isSet$2(e.gitCommit)?String(e.gitCommit):"",buildTags:isSet$2(e.buildTags)?String(e.buildTags):"",goVersion:isSet$2(e.goVersion)?String(e.goVersion):"",buildDeps:Array.isArray(e?.buildDeps)?e.buildDeps.map(t=>Module.fromJSON(t)):[],cosmosSdkVersion:isSet$2(e.cosmosSdkVersion)?String(e.cosmosSdkVersion):""}},toJSON(e){const t={};return e.name!==void 0&&(t.name=e.name),e.appName!==void 0&&(t.appName=e.appName),e.version!==void 0&&(t.version=e.version),e.gitCommit!==void 0&&(t.gitCommit=e.gitCommit),e.buildTags!==void 0&&(t.buildTags=e.buildTags),e.goVersion!==void 0&&(t.goVersion=e.goVersion),e.buildDeps?t.buildDeps=e.buildDeps.map(n=>n?Module.toJSON(n):void 0):t.buildDeps=[],e.cosmosSdkVersion!==void 0&&(t.cosmosSdkVersion=e.cosmosSdkVersion),t},fromPartial(e){const t=createBaseVersionInfo();return t.name=e.name??"",t.appName=e.appName??"",t.version=e.version??"",t.gitCommit=e.gitCommit??"",t.buildTags=e.buildTags??"",t.goVersion=e.goVersion??"",t.buildDeps=e.buildDeps?.map(n=>Module.fromPartial(n))||[],t.cosmosSdkVersion=e.cosmosSdkVersion??"",t}};function createBaseModule(){return{path:"",version:"",sum:""}}const Module={encode(e,t=minimal.Writer.create()){return e.path!==""&&t.uint32(10).string(e.path),e.version!==""&&t.uint32(18).string(e.version),e.sum!==""&&t.uint32(26).string(e.sum),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseModule();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.path=n.string();break;case 2:i.version=n.string();break;case 3:i.sum=n.string();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{path:isSet$2(e.path)?String(e.path):"",version:isSet$2(e.version)?String(e.version):"",sum:isSet$2(e.sum)?String(e.sum):""}},toJSON(e){const t={};return e.path!==void 0&&(t.path=e.path),e.version!==void 0&&(t.version=e.version),e.sum!==void 0&&(t.sum=e.sum),t},fromPartial(e){const t=createBaseModule();return t.path=e.path??"",t.version=e.version??"",t.sum=e.sum??"",t}};class ServiceClientImpl{constructor(t){de(this,"rpc");this.rpc=t,this.getNodeInfo=this.getNodeInfo.bind(this),this.getSyncing=this.getSyncing.bind(this),this.getLatestBlock=this.getLatestBlock.bind(this),this.getBlockByHeight=this.getBlockByHeight.bind(this),this.getLatestValidatorSet=this.getLatestValidatorSet.bind(this),this.getValidatorSetByHeight=this.getValidatorSetByHeight.bind(this)}getNodeInfo(t,n){return this.rpc.unary(ServiceGetNodeInfoDesc,GetNodeInfoRequest.fromPartial(t),n)}getSyncing(t,n){return this.rpc.unary(ServiceGetSyncingDesc,GetSyncingRequest.fromPartial(t),n)}getLatestBlock(t,n){return this.rpc.unary(ServiceGetLatestBlockDesc,GetLatestBlockRequest.fromPartial(t),n)}getBlockByHeight(t,n){return this.rpc.unary(ServiceGetBlockByHeightDesc,GetBlockByHeightRequest.fromPartial(t),n)}getLatestValidatorSet(t,n){return this.rpc.unary(ServiceGetLatestValidatorSetDesc,GetLatestValidatorSetRequest.fromPartial(t),n)}getValidatorSetByHeight(t,n){return this.rpc.unary(ServiceGetValidatorSetByHeightDesc,GetValidatorSetByHeightRequest.fromPartial(t),n)}}const ServiceDesc={serviceName:"cosmos.base.tendermint.v1beta1.Service"},ServiceGetNodeInfoDesc={methodName:"GetNodeInfo",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetNodeInfoRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...GetNodeInfoResponse.decode(e),toObject(){return this}}}}},ServiceGetSyncingDesc={methodName:"GetSyncing",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetSyncingRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...GetSyncingResponse.decode(e),toObject(){return this}}}}},ServiceGetLatestBlockDesc={methodName:"GetLatestBlock",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetLatestBlockRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...GetLatestBlockResponse.decode(e),toObject(){return this}}}}},ServiceGetBlockByHeightDesc={methodName:"GetBlockByHeight",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetBlockByHeightRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...GetBlockByHeightResponse.decode(e),toObject(){return this}}}}},ServiceGetLatestValidatorSetDesc={methodName:"GetLatestValidatorSet",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetLatestValidatorSetRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...GetLatestValidatorSetResponse.decode(e),toObject(){return this}}}}},ServiceGetValidatorSetByHeightDesc={methodName:"GetValidatorSetByHeight",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetValidatorSetByHeightRequest.encode(this).finish()}},responseType:{deserializeBinary(e){return{...GetValidatorSetByHeightResponse.decode(e),toObject(){return this}}}}};function longToString(e){return e.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$2(e){return e!=null}function createBaseMsgSend(){return{fromAddress:"",toAddress:"",amount:[]}}const MsgSend={encode(e,t=minimal.Writer.create()){e.fromAddress!==""&&t.uint32(10).string(e.fromAddress),e.toAddress!==""&&t.uint32(18).string(e.toAddress);for(const n of e.amount)Coin.encode(n,t.uint32(26).fork()).ldelim();return t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBaseMsgSend();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.fromAddress=n.string();break;case 2:i.toAddress=n.string();break;case 3:i.amount.push(Coin.decode(n,n.uint32()));break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{fromAddress:isSet$1(e.fromAddress)?String(e.fromAddress):"",toAddress:isSet$1(e.toAddress)?String(e.toAddress):"",amount:Array.isArray(e?.amount)?e.amount.map(t=>Coin.fromJSON(t)):[]}},toJSON(e){const t={};return e.fromAddress!==void 0&&(t.fromAddress=e.fromAddress),e.toAddress!==void 0&&(t.toAddress=e.toAddress),e.amount?t.amount=e.amount.map(n=>n?Coin.toJSON(n):void 0):t.amount=[],t},fromPartial(e){const t=createBaseMsgSend();return t.fromAddress=e.fromAddress??"",t.toAddress=e.toAddress??"",t.amount=e.amount?.map(n=>Coin.fromPartial(n))||[],t}};function isSet$1(e){return e!=null}function createBasePubKey(){return{key:new Uint8Array}}const PubKey={encode(e,t=minimal.Writer.create()){return e.key.length!==0&&t.uint32(10).bytes(e.key),t},decode(e,t){const n=e instanceof minimal.Reader?e:new minimal.Reader(e);let r=t===void 0?n.len:n.pos+t;const i=createBasePubKey();for(;n.pos<r;){const o=n.uint32();switch(o>>>3){case 1:i.key=n.bytes();break;default:n.skipType(o&7);break}}return i},fromJSON(e){return{key:isSet(e.key)?bytesFromBase64(e.key):new Uint8Array}},toJSON(e){const t={};return e.key!==void 0&&(t.key=base64FromBytes(e.key!==void 0?e.key:new Uint8Array)),t},fromPartial(e){const t=createBasePubKey();return t.key=e.key??new Uint8Array,t}};var globalThis$1=(()=>{if(typeof globalThis$1<"u")return globalThis$1;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob=globalThis$1.atob||(e=>globalThis$1.Buffer.from(e,"base64").toString("binary"));function bytesFromBase64(e){const t=atob(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}const btoa=globalThis$1.btoa||(e=>globalThis$1.Buffer.from(e,"binary").toString("base64"));function base64FromBytes(e){const t=[];return e.forEach(n=>{t.push(String.fromCharCode(n))}),btoa(t.join(""))}function isSet(e){return e!=null}async function fetch_derived(e,t,n=256,r=new Uint8Array(0)){return new Uint8Array(await crypto.subtle.deriveBits({name:"HKDF",hash:"SHA-256",salt:t,info:r},e,n))}async function generate_pair(e,t,n=256){const r=crypto.getRandomValues(new Uint8Array(n>>3)),i=await crypto.subtle.importKey("raw",r,{name:"HKDF",hash:"SHA-256"},!1,["deriveBits"]);zero_out(r);const o=new SensitiveBytes(await fetch_derived(i,t,n)),a=new SensitiveBytes(await e()),s=a.xor(o);return a.wipe(),o.wipe(),[i,s]}const hm_privates$1=new Map;class RuntimeKey{static async create(t,n=256){const r=new RuntimeKey,i=hm_privates$1.get(r),[o,a]=await generate_pair(t,i.atu8_salt,n);return Object.assign(i,{dk_base:o,kn_xor:a}),r}static async createRaw(t,n=256){return RuntimeKey.create(()=>t,n)}constructor(){const t=crypto.getRandomValues(new Uint8Array(32));hm_privates$1.set(this,{atu8_salt:t,kn_xor:null,dk_base:null})}async access(t){const n=hm_privates$1.get(this),{dk_base:r,atu8_salt:i,kn_xor:o}=n;let a,s;const[c,l]=await generate_pair(()=>new Promise(async u=>{const f=new SensitiveBytes(await fetch_derived(r,i,256)),d=o.xor(f);f.wipe();try{a=t(d.data)}catch(g){s=g}u(d.data),queueMicrotask(()=>{d.wipe()})}),i);if(n.dk_base=c,n.kn_xor=l,s)throw s;return a}destroy(){const{atu8_salt:t,kn_xor:n}=hm_privates$1.get(this);n?.wipe(),zero_out(t),hm_privates$1.delete(this)}}class SensitiveBigUint extends SensitiveBytes{static random(t){return new SensitiveBigUint(crypto.getRandomValues(new Uint8Array(t)))}static empty(t=0){return new SensitiveBigUint(new Uint8Array(t))}static max(t,n){return t.gte(n)?t.clone():n.clone()}static min(t,n){return t.lte(n)?t.clone():n.clone()}clone(){return new SensitiveBigUint(Uint8Array.from(this.data))}compare(t){const n=this.data,r=n.byteLength,i=t.data;if(i.byteLength!==r)throw this.wipe(),t.wipe(),new Error("Refusing to compare buffers of different byte length");for(let a=0;a<r;a++){const s=n[a],c=i[a];if(s!==c)return s>c?1:-1}return 0}eq(t){return this.compare(t)===0}gt(t){return this.compare(t)>0}gte(t){return this.compare(t)>=0}lt(t){return this.compare(t)<0}lte(t){return this.compare(t)<=0}diff(t){const n=this.data,r=n.byteLength,i=this.compare(t);if(i<0)return t.diff(this);if(i===0)return SensitiveBigUint.empty(r);const o=t.data,a=new Uint8Array(r);let s=0;for(let c=r-1;c>=0;c--){let l=n[c]-o[c]-s;l<0?(l+=256,s=1):s=0,a[c]=l}return new SensitiveBigUint(a)}mod(t){const r=this.data.byteLength;let i=this.compare(t);if(i<0)return this.clone();if(i===0)return SensitiveBigUint.empty(r);t.data.byteLength;let a=this.clone();for(;;){const s=a.diff(t);if(a.wipe(),i=s.compare(t),i<=0)return s;a=s}}modulus(t){const r=this.data.byteLength;let i=this.compare(t);if(i<0)return this.clone();if(i===0)return SensitiveBigUint.empty(r);t.data.byteLength}}const KN_ZERO_32=SensitiveBigUint.empty(32),KN_CURVE_N_SECP256K1=new SensitiveBigUint(hex_to_buffer("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")),NI_MINIMUM_BORDER=64,KN_DANGER_LO=new SensitiveBigUint(hex_to_buffer(((1<<NI_MINIMUM_BORDER%8).toString(16)+"00".repeat(NI_MINIMUM_BORDER>>>3)).padStart(64,"0")));KN_CURVE_N_SECP256K1.diff(KN_DANGER_LO);let y_secp256k1,a_wait_secp256k1=null;async function init_secp256k1(){if(y_secp256k1)return y_secp256k1;if(a_wait_secp256k1)return new Promise(n=>{a_wait_secp256k1.push(n)});a_wait_secp256k1=[];const e=await(await fetch("/bin/secp256k1.wasm")).arrayBuffer();y_secp256k1=await instantiateSecp256k1Bytes(e,crypto.getRandomValues(new Uint8Array(32)));const t=a_wait_secp256k1.slice();a_wait_secp256k1=null;for(const n of t)n(y_secp256k1);return y_secp256k1}const hm_privates=new Map;class Secp256k1Key{constructor(t){de(this,"_b_init",!1);this._y_secp256k1=t}static withinCurve(t){return KN_ZERO_32.lt(t)&&KN_CURVE_N_SECP256K1.gt(t)}static async init(){y_secp256k1||await init_secp256k1()}static async verify(t,n,r){y_secp256k1||await init_secp256k1();const i=await sha256$1(n);return y_secp256k1.verifySignatureCompactLowS(t,r,i)}static async generatePrivateKey(t=!1){y_secp256k1||await init_secp256k1();const n=await RuntimeKey.create(()=>{let r;for(;!y_secp256k1.validatePrivateKey(r=crypto.getRandomValues(new Uint8Array(32))););return r});return[n,await Secp256k1Key.import(n,t)]}static uncompressPublicKey(t){return y_secp256k1.uncompressPublicKey(t)}static async import(t,n=!1){return y_secp256k1||await init_secp256k1(),await new Secp256k1Key(y_secp256k1).import(t,n)}async import(t,n=!1){const r=this._y_secp256k1;await t.access(a=>{if(!this._y_secp256k1.validatePrivateKey(a))throw new Error("Failed to validate secp256k1 private key");hm_privates.set(this,{kk_sk:t,atu8_pk33:r.derivePublicKeyCompressed(a),atu8_pk65:r.derivePublicKeyUncompressed(a),b_exportable:n})});const{atu8_pk33:i,atu8_pk65:o}=hm_privates.get(this);if(!r.validatePublicKey(i))throw new Error("Failed to validate secp256k1 compressed public key");if(!r.validatePublicKey(o))throw new Error("Failed to validate secp256k1 uncompressed public key");return this._b_init=!0,this}exportPublicKey(t=!1){const{atu8_pk33:n,atu8_pk65:r,b_exportable:i}=hm_privates.get(this);if(i===!0)return t?r:n;throw new Error("Public key is not exportable")}async sign(t,n=!1){const r=await sha256$1(t),{kk_sk:i}=hm_privates.get(this);return await i.access(o=>n?this._y_secp256k1.signMessageHashCompact(o,r,crypto.getRandomValues(new Uint8Array(32))):this._y_secp256k1.signMessageHashCompact(o,r))}async verify(t,n){const r=await sha256$1(n),{atu8_pk65:i}=hm_privates.get(this);return this._y_secp256k1.verifySignatureCompactLowS(t,i,r)}async ecdh(t){const{kk_sk:n}=hm_privates.get(this);return await n.access(r=>this._y_secp256k1.ecdh(r,t))}add(t){const{kk_sk:n}=hm_privates.get(this);return n.access(r=>this._y_secp256k1.addTweakPrivateKey(r,t))}}const Secrets=create_store_class({store:SI_STORE_SECRETS,extension:"dict",class:class it extends WritableStoreDict{static pathFrom(t){return`/secret.${t.type}/uuid.${t.uuid}`}async put(t){const n=it.pathFrom(t);return this._w_cache[n]=t,await this.save(),n}}});class NoAccountOwner extends Error{}const Accounts=create_store_class({store:SI_STORE_ACCOUNTS,extension:"map",class:class Je extends WritableStoreMap{static pathFor(t,n){return`/family.${t}/account.${n.replace(/:/g,"+")}`}static pathFrom(t){return Je.pathFor(t.family,t.pubkey)}static async get(t,n){return(await Accounts.read()).get(t,n)}static async find(t,n=yw_chain.get()){return(await Accounts.read()).find(t,n)}get(t,n){const r=Je.pathFor(t,n);return this._w_cache[r]??null}async put(t){const n=Je.pathFrom(t);return this._w_cache[n]=t,await this.save(),n}find(t,n=yw_chain.get()){for(const[r,i]of ode(this._w_cache))if(Chains.addressFor(i.pubkey,n)===t)return[r,i];throw new NoAccountOwner(`The address ${t} does not belong to any accounts in the wallet`)}}});var isNumeric=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,mathceil=Math.ceil,mathfloor=Math.floor,bignumberError="[BigNumber Error] ",tooManyDigits=bignumberError+"Number primitive has more than 15 significant digits: ",BASE=1e14,LOG_BASE=14,MAX_SAFE_INTEGER=9007199254740991,POWS_TEN=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],SQRT_BASE=1e7,MAX=1e9;function clone(e){var t,n,r,i=y.prototype={constructor:y,toString:null,valueOf:null},o=new y(1),a=20,s=4,c=-7,l=21,u=-1e7,f=1e7,d=!1,g=1,_=0,h={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"\xA0",suffix:""},A="0123456789abcdefghijklmnopqrstuvwxyz",m=!0;function y(I,C){var E,N,S,k,Q,w,T,O,P=this;if(!(P instanceof y))return new y(I,C);if(C==null){if(I&&I._isBigNumber===!0){P.s=I.s,!I.c||I.e>f?P.c=P.e=null:I.e<u?P.c=[P.e=0]:(P.e=I.e,P.c=I.c.slice());return}if((w=typeof I=="number")&&I*0==0){if(P.s=1/I<0?(I=-I,-1):1,I===~~I){for(k=0,Q=I;Q>=10;Q/=10,k++);k>f?P.c=P.e=null:(P.e=k,P.c=[I]);return}O=String(I)}else{if(!isNumeric.test(O=String(I)))return r(P,O,w);P.s=O.charCodeAt(0)==45?(O=O.slice(1),-1):1}(k=O.indexOf("."))>-1&&(O=O.replace(".","")),(Q=O.search(/e/i))>0?(k<0&&(k=Q),k+=+O.slice(Q+1),O=O.substring(0,Q)):k<0&&(k=O.length)}else{if(intCheck(C,2,A.length,"Base"),C==10&&m)return P=new y(I),M(P,a+P.e+1,s);if(O=String(I),w=typeof I=="number"){if(I*0!=0)return r(P,O,w,C);if(P.s=1/I<0?(O=O.slice(1),-1):1,y.DEBUG&&O.replace(/^0\.0*|\./,"").length>15)throw Error(tooManyDigits+I)}else P.s=O.charCodeAt(0)===45?(O=O.slice(1),-1):1;for(E=A.slice(0,C),k=Q=0,T=O.length;Q<T;Q++)if(E.indexOf(N=O.charAt(Q))<0){if(N=="."){if(Q>k){k=T;continue}}else if(!S&&(O==O.toUpperCase()&&(O=O.toLowerCase())||O==O.toLowerCase()&&(O=O.toUpperCase()))){S=!0,Q=-1,k=0;continue}return r(P,String(I),w,C)}w=!1,O=n(O,C,10,P.s),(k=O.indexOf("."))>-1?O=O.replace(".",""):k=O.length}for(Q=0;O.charCodeAt(Q)===48;Q++);for(T=O.length;O.charCodeAt(--T)===48;);if(O=O.slice(Q,++T)){if(T-=Q,w&&y.DEBUG&&T>15&&(I>MAX_SAFE_INTEGER||I!==mathfloor(I)))throw Error(tooManyDigits+P.s*I);if((k=k-Q-1)>f)P.c=P.e=null;else if(k<u)P.c=[P.e=0];else{if(P.e=k,P.c=[],Q=(k+1)%LOG_BASE,k<0&&(Q+=LOG_BASE),Q<T){for(Q&&P.c.push(+O.slice(0,Q)),T-=LOG_BASE;Q<T;)P.c.push(+O.slice(Q,Q+=LOG_BASE));Q=LOG_BASE-(O=O.slice(Q)).length}else Q-=T;for(;Q--;O+="0");P.c.push(+O)}}else P.c=[P.e=0]}y.clone=clone,y.ROUND_UP=0,y.ROUND_DOWN=1,y.ROUND_CEIL=2,y.ROUND_FLOOR=3,y.ROUND_HALF_UP=4,y.ROUND_HALF_DOWN=5,y.ROUND_HALF_EVEN=6,y.ROUND_HALF_CEIL=7,y.ROUND_HALF_FLOOR=8,y.EUCLID=9,y.config=y.set=function(I){var C,E;if(I!=null)if(typeof I=="object"){if(I.hasOwnProperty(C="DECIMAL_PLACES")&&(E=I[C],intCheck(E,0,MAX,C),a=E),I.hasOwnProperty(C="ROUNDING_MODE")&&(E=I[C],intCheck(E,0,8,C),s=E),I.hasOwnProperty(C="EXPONENTIAL_AT")&&(E=I[C],E&&E.pop?(intCheck(E[0],-MAX,0,C),intCheck(E[1],0,MAX,C),c=E[0],l=E[1]):(intCheck(E,-MAX,MAX,C),c=-(l=E<0?-E:E))),I.hasOwnProperty(C="RANGE"))if(E=I[C],E&&E.pop)intCheck(E[0],-MAX,-1,C),intCheck(E[1],1,MAX,C),u=E[0],f=E[1];else if(intCheck(E,-MAX,MAX,C),E)u=-(f=E<0?-E:E);else throw Error(bignumberError+C+" cannot be zero: "+E);if(I.hasOwnProperty(C="CRYPTO"))if(E=I[C],E===!!E)if(E)if(typeof crypto<"u"&&crypto&&(crypto.getRandomValues||crypto.randomBytes))d=E;else throw d=!E,Error(bignumberError+"crypto unavailable");else d=E;else throw Error(bignumberError+C+" not true or false: "+E);if(I.hasOwnProperty(C="MODULO_MODE")&&(E=I[C],intCheck(E,0,9,C),g=E),I.hasOwnProperty(C="POW_PRECISION")&&(E=I[C],intCheck(E,0,MAX,C),_=E),I.hasOwnProperty(C="FORMAT"))if(E=I[C],typeof E=="object")h=E;else throw Error(bignumberError+C+" not an object: "+E);if(I.hasOwnProperty(C="ALPHABET"))if(E=I[C],typeof E=="string"&&!/^.?$|[+\-.\s]|(.).*\1/.test(E))m=E.slice(0,10)=="0123456789",A=E;else throw Error(bignumberError+C+" invalid: "+E)}else throw Error(bignumberError+"Object expected: "+I);return{DECIMAL_PLACES:a,ROUNDING_MODE:s,EXPONENTIAL_AT:[c,l],RANGE:[u,f],CRYPTO:d,MODULO_MODE:g,POW_PRECISION:_,FORMAT:h,ALPHABET:A}},y.isBigNumber=function(I){if(!I||I._isBigNumber!==!0)return!1;if(!y.DEBUG)return!0;var C,E,N=I.c,S=I.e,k=I.s;e:if({}.toString.call(N)=="[object Array]"){if((k===1||k===-1)&&S>=-MAX&&S<=MAX&&S===mathfloor(S)){if(N[0]===0){if(S===0&&N.length===1)return!0;break e}if(C=(S+1)%LOG_BASE,C<1&&(C+=LOG_BASE),String(N[0]).length==C){for(C=0;C<N.length;C++)if(E=N[C],E<0||E>=BASE||E!==mathfloor(E))break e;if(E!==0)return!0}}}else if(N===null&&S===null&&(k===null||k===1||k===-1))return!0;throw Error(bignumberError+"Invalid BigNumber: "+I)},y.maximum=y.max=function(){return B(arguments,i.lt)},y.minimum=y.min=function(){return B(arguments,i.gt)},y.random=function(){var I=9007199254740992,C=Math.random()*I&2097151?function(){return mathfloor(Math.random()*I)}:function(){return(Math.random()*1073741824|0)*8388608+(Math.random()*8388608|0)};return function(E){var N,S,k,Q,w,T=0,O=[],P=new y(o);if(E==null?E=a:intCheck(E,0,MAX),Q=mathceil(E/LOG_BASE),d)if(crypto.getRandomValues){for(N=crypto.getRandomValues(new Uint32Array(Q*=2));T<Q;)w=N[T]*131072+(N[T+1]>>>11),w>=9e15?(S=crypto.getRandomValues(new Uint32Array(2)),N[T]=S[0],N[T+1]=S[1]):(O.push(w%1e14),T+=2);T=Q/2}else if(crypto.randomBytes){for(N=crypto.randomBytes(Q*=7);T<Q;)w=(N[T]&31)*281474976710656+N[T+1]*1099511627776+N[T+2]*4294967296+N[T+3]*16777216+(N[T+4]<<16)+(N[T+5]<<8)+N[T+6],w>=9e15?crypto.randomBytes(7).copy(N,T):(O.push(w%1e14),T+=7);T=Q/7}else throw d=!1,Error(bignumberError+"crypto unavailable");if(!d)for(;T<Q;)w=C(),w<9e15&&(O[T++]=w%1e14);for(Q=O[--T],E%=LOG_BASE,Q&&E&&(w=POWS_TEN[LOG_BASE-E],O[T]=mathfloor(Q/w)*w);O[T]===0;O.pop(),T--);if(T<0)O=[k=0];else{for(k=-1;O[0]===0;O.splice(0,1),k-=LOG_BASE);for(T=1,w=O[0];w>=10;w/=10,T++);T<LOG_BASE&&(k-=LOG_BASE-T)}return P.e=k,P.c=O,P}}(),y.sum=function(){for(var I=1,C=arguments,E=new y(C[0]);I<C.length;)E=E.plus(C[I++]);return E},n=function(){var I="0123456789";function C(E,N,S,k){for(var Q,w=[0],T,O=0,P=E.length;O<P;){for(T=w.length;T--;w[T]*=N);for(w[0]+=k.indexOf(E.charAt(O++)),Q=0;Q<w.length;Q++)w[Q]>S-1&&(w[Q+1]==null&&(w[Q+1]=0),w[Q+1]+=w[Q]/S|0,w[Q]%=S)}return w.reverse()}return function(E,N,S,k,Q){var w,T,O,P,F,L,G,Y,U=E.indexOf("."),V=a,q=s;for(U>=0&&(P=_,_=0,E=E.replace(".",""),Y=new y(N),L=Y.pow(E.length-U),_=P,Y.c=C(toFixedPoint(coeffToString(L.c),L.e,"0"),10,S,I),Y.e=Y.c.length),G=C(E,N,S,Q?(w=A,I):(w=I,A)),O=P=G.length;G[--P]==0;G.pop());if(!G[0])return w.charAt(0);if(U<0?--O:(L.c=G,L.e=O,L.s=k,L=t(L,Y,V,q,S),G=L.c,F=L.r,O=L.e),T=O+V+1,U=G[T],P=S/2,F=F||T<0||G[T+1]!=null,F=q<4?(U!=null||F)&&(q==0||q==(L.s<0?3:2)):U>P||U==P&&(q==4||F||q==6&&G[T-1]&1||q==(L.s<0?8:7)),T<1||!G[0])E=F?toFixedPoint(w.charAt(1),-V,w.charAt(0)):w.charAt(0);else{if(G.length=T,F)for(--S;++G[--T]>S;)G[T]=0,T||(++O,G=[1].concat(G));for(P=G.length;!G[--P];);for(U=0,E="";U<=P;E+=w.charAt(G[U++]));E=toFixedPoint(E,O,w.charAt(0))}return E}}(),t=function(){function I(N,S,k){var Q,w,T,O,P=0,F=N.length,L=S%SQRT_BASE,G=S/SQRT_BASE|0;for(N=N.slice();F--;)T=N[F]%SQRT_BASE,O=N[F]/SQRT_BASE|0,Q=G*T+O*L,w=L*T+Q%SQRT_BASE*SQRT_BASE+P,P=(w/k|0)+(Q/SQRT_BASE|0)+G*O,N[F]=w%k;return P&&(N=[P].concat(N)),N}function C(N,S,k,Q){var w,T;if(k!=Q)T=k>Q?1:-1;else for(w=T=0;w<k;w++)if(N[w]!=S[w]){T=N[w]>S[w]?1:-1;break}return T}function E(N,S,k,Q){for(var w=0;k--;)N[k]-=w,w=N[k]<S[k]?1:0,N[k]=w*Q+N[k]-S[k];for(;!N[0]&&N.length>1;N.splice(0,1));}return function(N,S,k,Q,w){var T,O,P,F,L,G,Y,U,V,q,X,te,H,Z,ie,se,ce,re=N.s==S.s?1:-1,x=N.c,ee=S.c;if(!x||!x[0]||!ee||!ee[0])return new y(!N.s||!S.s||(x?ee&&x[0]==ee[0]:!ee)?NaN:x&&x[0]==0||!ee?re*0:re/0);for(U=new y(re),V=U.c=[],O=N.e-S.e,re=k+O+1,w||(w=BASE,O=bitFloor(N.e/LOG_BASE)-bitFloor(S.e/LOG_BASE),re=re/LOG_BASE|0),P=0;ee[P]==(x[P]||0);P++);if(ee[P]>(x[P]||0)&&O--,re<0)V.push(1),F=!0;else{for(Z=x.length,se=ee.length,P=0,re+=2,L=mathfloor(w/(ee[0]+1)),L>1&&(ee=I(ee,L,w),x=I(x,L,w),se=ee.length,Z=x.length),H=se,q=x.slice(0,se),X=q.length;X<se;q[X++]=0);ce=ee.slice(),ce=[0].concat(ce),ie=ee[0],ee[1]>=w/2&&ie++;do{if(L=0,T=C(ee,q,se,X),T<0){if(te=q[0],se!=X&&(te=te*w+(q[1]||0)),L=mathfloor(te/ie),L>1)for(L>=w&&(L=w-1),G=I(ee,L,w),Y=G.length,X=q.length;C(G,q,Y,X)==1;)L--,E(G,se<Y?ce:ee,Y,w),Y=G.length,T=1;else L==0&&(T=L=1),G=ee.slice(),Y=G.length;if(Y<X&&(G=[0].concat(G)),E(q,G,X,w),X=q.length,T==-1)for(;C(ee,q,se,X)<1;)L++,E(q,se<X?ce:ee,X,w),X=q.length}else T===0&&(L++,q=[0]);V[P++]=L,q[0]?q[X++]=x[H]||0:(q=[x[H]],X=1)}while((H++<Z||q[0]!=null)&&re--);F=q[0]!=null,V[0]||V.splice(0,1)}if(w==BASE){for(P=1,re=V[0];re>=10;re/=10,P++);M(U,k+(U.e=P+O*LOG_BASE-1)+1,Q,F)}else U.e=O,U.r=+F;return U}}();function b(I,C,E,N){var S,k,Q,w,T;if(E==null?E=s:intCheck(E,0,8),!I.c)return I.toString();if(S=I.c[0],Q=I.e,C==null)T=coeffToString(I.c),T=N==1||N==2&&(Q<=c||Q>=l)?toExponential(T,Q):toFixedPoint(T,Q,"0");else if(I=M(new y(I),C,E),k=I.e,T=coeffToString(I.c),w=T.length,N==1||N==2&&(C<=k||k<=c)){for(;w<C;T+="0",w++);T=toExponential(T,k)}else if(C-=Q,T=toFixedPoint(T,k,"0"),k+1>w){if(--C>0)for(T+=".";C--;T+="0");}else if(C+=k-w,C>0)for(k+1==w&&(T+=".");C--;T+="0");return I.s<0&&S?"-"+T:T}function B(I,C){for(var E,N=1,S=new y(I[0]);N<I.length;N++)if(E=new y(I[N]),E.s)C.call(S,E)&&(S=E);else{S=E;break}return S}function v(I,C,E){for(var N=1,S=C.length;!C[--S];C.pop());for(S=C[0];S>=10;S/=10,N++);return(E=N+E*LOG_BASE-1)>f?I.c=I.e=null:E<u?I.c=[I.e=0]:(I.e=E,I.c=C),I}r=function(){var I=/^(-?)0([xbo])(?=\w[\w.]*$)/i,C=/^([^.]+)\.$/,E=/^\.([^.]+)$/,N=/^-?(Infinity|NaN)$/,S=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(k,Q,w,T){var O,P=w?Q:Q.replace(S,"");if(N.test(P))k.s=isNaN(P)?null:P<0?-1:1;else{if(!w&&(P=P.replace(I,function(F,L,G){return O=(G=G.toLowerCase())=="x"?16:G=="b"?2:8,!T||T==O?L:F}),T&&(O=T,P=P.replace(C,"$1").replace(E,"0.$1")),Q!=P))return new y(P,O);if(y.DEBUG)throw Error(bignumberError+"Not a"+(T?" base "+T:"")+" number: "+Q);k.s=null}k.c=k.e=null}}();function M(I,C,E,N){var S,k,Q,w,T,O,P,F=I.c,L=POWS_TEN;if(F){e:{for(S=1,w=F[0];w>=10;w/=10,S++);if(k=C-S,k<0)k+=LOG_BASE,Q=C,T=F[O=0],P=T/L[S-Q-1]%10|0;else if(O=mathceil((k+1)/LOG_BASE),O>=F.length)if(N){for(;F.length<=O;F.push(0));T=P=0,S=1,k%=LOG_BASE,Q=k-LOG_BASE+1}else break e;else{for(T=w=F[O],S=1;w>=10;w/=10,S++);k%=LOG_BASE,Q=k-LOG_BASE+S,P=Q<0?0:T/L[S-Q-1]%10|0}if(N=N||C<0||F[O+1]!=null||(Q<0?T:T%L[S-Q-1]),N=E<4?(P||N)&&(E==0||E==(I.s<0?3:2)):P>5||P==5&&(E==4||N||E==6&&(k>0?Q>0?T/L[S-Q]:0:F[O-1])%10&1||E==(I.s<0?8:7)),C<1||!F[0])return F.length=0,N?(C-=I.e+1,F[0]=L[(LOG_BASE-C%LOG_BASE)%LOG_BASE],I.e=-C||0):F[0]=I.e=0,I;if(k==0?(F.length=O,w=1,O--):(F.length=O+1,w=L[LOG_BASE-k],F[O]=Q>0?mathfloor(T/L[S-Q]%L[Q])*w:0),N)for(;;)if(O==0){for(k=1,Q=F[0];Q>=10;Q/=10,k++);for(Q=F[0]+=w,w=1;Q>=10;Q/=10,w++);k!=w&&(I.e++,F[0]==BASE&&(F[0]=1));break}else{if(F[O]+=w,F[O]!=BASE)break;F[O--]=0,w=1}for(k=F.length;F[--k]===0;F.pop());}I.e>f?I.c=I.e=null:I.e<u&&(I.c=[I.e=0])}return I}function D(I){var C,E=I.e;return E===null?I.toString():(C=coeffToString(I.c),C=E<=c||E>=l?toExponential(C,E):toFixedPoint(C,E,"0"),I.s<0?"-"+C:C)}return i.absoluteValue=i.abs=function(){var I=new y(this);return I.s<0&&(I.s=1),I},i.comparedTo=function(I,C){return compare(this,new y(I,C))},i.decimalPlaces=i.dp=function(I,C){var E,N,S,k=this;if(I!=null)return intCheck(I,0,MAX),C==null?C=s:intCheck(C,0,8),M(new y(k),I+k.e+1,C);if(!(E=k.c))return null;if(N=((S=E.length-1)-bitFloor(this.e/LOG_BASE))*LOG_BASE,S=E[S])for(;S%10==0;S/=10,N--);return N<0&&(N=0),N},i.dividedBy=i.div=function(I,C){return t(this,new y(I,C),a,s)},i.dividedToIntegerBy=i.idiv=function(I,C){return t(this,new y(I,C),0,1)},i.exponentiatedBy=i.pow=function(I,C){var E,N,S,k,Q,w,T,O,P,F=this;if(I=new y(I),I.c&&!I.isInteger())throw Error(bignumberError+"Exponent not an integer: "+D(I));if(C!=null&&(C=new y(C)),w=I.e>14,!F.c||!F.c[0]||F.c[0]==1&&!F.e&&F.c.length==1||!I.c||!I.c[0])return P=new y(Math.pow(+D(F),w?2-isOdd(I):+D(I))),C?P.mod(C):P;if(T=I.s<0,C){if(C.c?!C.c[0]:!C.s)return new y(NaN);N=!T&&F.isInteger()&&C.isInteger(),N&&(F=F.mod(C))}else{if(I.e>9&&(F.e>0||F.e<-1||(F.e==0?F.c[0]>1||w&&F.c[1]>=24e7:F.c[0]<8e13||w&&F.c[0]<=9999975e7)))return k=F.s<0&&isOdd(I)?-0:0,F.e>-1&&(k=1/k),new y(T?1/k:k);_&&(k=mathceil(_/LOG_BASE+2))}for(w?(E=new y(.5),T&&(I.s=1),O=isOdd(I)):(S=Math.abs(+D(I)),O=S%2),P=new y(o);;){if(O){if(P=P.times(F),!P.c)break;k?P.c.length>k&&(P.c.length=k):N&&(P=P.mod(C))}if(S){if(S=mathfloor(S/2),S===0)break;O=S%2}else if(I=I.times(E),M(I,I.e+1,1),I.e>14)O=isOdd(I);else{if(S=+D(I),S===0)break;O=S%2}F=F.times(F),k?F.c&&F.c.length>k&&(F.c.length=k):N&&(F=F.mod(C))}return N?P:(T&&(P=o.div(P)),C?P.mod(C):k?M(P,_,s,Q):P)},i.integerValue=function(I){var C=new y(this);return I==null?I=s:intCheck(I,0,8),M(C,C.e+1,I)},i.isEqualTo=i.eq=function(I,C){return compare(this,new y(I,C))===0},i.isFinite=function(){return!!this.c},i.isGreaterThan=i.gt=function(I,C){return compare(this,new y(I,C))>0},i.isGreaterThanOrEqualTo=i.gte=function(I,C){return(C=compare(this,new y(I,C)))===1||C===0},i.isInteger=function(){return!!this.c&&bitFloor(this.e/LOG_BASE)>this.c.length-2},i.isLessThan=i.lt=function(I,C){return compare(this,new y(I,C))<0},i.isLessThanOrEqualTo=i.lte=function(I,C){return(C=compare(this,new y(I,C)))===-1||C===0},i.isNaN=function(){return!this.s},i.isNegative=function(){return this.s<0},i.isPositive=function(){return this.s>0},i.isZero=function(){return!!this.c&&this.c[0]==0},i.minus=function(I,C){var E,N,S,k,Q=this,w=Q.s;if(I=new y(I,C),C=I.s,!w||!C)return new y(NaN);if(w!=C)return I.s=-C,Q.plus(I);var T=Q.e/LOG_BASE,O=I.e/LOG_BASE,P=Q.c,F=I.c;if(!T||!O){if(!P||!F)return P?(I.s=-C,I):new y(F?Q:NaN);if(!P[0]||!F[0])return F[0]?(I.s=-C,I):new y(P[0]?Q:s==3?-0:0)}if(T=bitFloor(T),O=bitFloor(O),P=P.slice(),w=T-O){for((k=w<0)?(w=-w,S=P):(O=T,S=F),S.reverse(),C=w;C--;S.push(0));S.reverse()}else for(N=(k=(w=P.length)<(C=F.length))?w:C,w=C=0;C<N;C++)if(P[C]!=F[C]){k=P[C]<F[C];break}if(k&&(S=P,P=F,F=S,I.s=-I.s),C=(N=F.length)-(E=P.length),C>0)for(;C--;P[E++]=0);for(C=BASE-1;N>w;){if(P[--N]<F[N]){for(E=N;E&&!P[--E];P[E]=C);--P[E],P[N]+=BASE}P[N]-=F[N]}for(;P[0]==0;P.splice(0,1),--O);return P[0]?v(I,P,O):(I.s=s==3?-1:1,I.c=[I.e=0],I)},i.modulo=i.mod=function(I,C){var E,N,S=this;return I=new y(I,C),!S.c||!I.s||I.c&&!I.c[0]?new y(NaN):!I.c||S.c&&!S.c[0]?new y(S):(g==9?(N=I.s,I.s=1,E=t(S,I,0,3),I.s=N,E.s*=N):E=t(S,I,0,g),I=S.minus(E.times(I)),!I.c[0]&&g==1&&(I.s=S.s),I)},i.multipliedBy=i.times=function(I,C){var E,N,S,k,Q,w,T,O,P,F,L,G,Y,U,V,q=this,X=q.c,te=(I=new y(I,C)).c;if(!X||!te||!X[0]||!te[0])return!q.s||!I.s||X&&!X[0]&&!te||te&&!te[0]&&!X?I.c=I.e=I.s=null:(I.s*=q.s,!X||!te?I.c=I.e=null:(I.c=[0],I.e=0)),I;for(N=bitFloor(q.e/LOG_BASE)+bitFloor(I.e/LOG_BASE),I.s*=q.s,T=X.length,F=te.length,T<F&&(Y=X,X=te,te=Y,S=T,T=F,F=S),S=T+F,Y=[];S--;Y.push(0));for(U=BASE,V=SQRT_BASE,S=F;--S>=0;){for(E=0,L=te[S]%V,G=te[S]/V|0,Q=T,k=S+Q;k>S;)O=X[--Q]%V,P=X[Q]/V|0,w=G*O+P*L,O=L*O+w%V*V+Y[k]+E,E=(O/U|0)+(w/V|0)+G*P,Y[k--]=O%U;Y[k]=E}return E?++N:Y.splice(0,1),v(I,Y,N)},i.negated=function(){var I=new y(this);return I.s=-I.s||null,I},i.plus=function(I,C){var E,N=this,S=N.s;if(I=new y(I,C),C=I.s,!S||!C)return new y(NaN);if(S!=C)return I.s=-C,N.minus(I);var k=N.e/LOG_BASE,Q=I.e/LOG_BASE,w=N.c,T=I.c;if(!k||!Q){if(!w||!T)return new y(S/0);if(!w[0]||!T[0])return T[0]?I:new y(w[0]?N:S*0)}if(k=bitFloor(k),Q=bitFloor(Q),w=w.slice(),S=k-Q){for(S>0?(Q=k,E=T):(S=-S,E=w),E.reverse();S--;E.push(0));E.reverse()}for(S=w.length,C=T.length,S-C<0&&(E=T,T=w,w=E,C=S),S=0;C;)S=(w[--C]=w[C]+T[C]+S)/BASE|0,w[C]=BASE===w[C]?0:w[C]%BASE;return S&&(w=[S].concat(w),++Q),v(I,w,Q)},i.precision=i.sd=function(I,C){var E,N,S,k=this;if(I!=null&&I!==!!I)return intCheck(I,1,MAX),C==null?C=s:intCheck(C,0,8),M(new y(k),I,C);if(!(E=k.c))return null;if(S=E.length-1,N=S*LOG_BASE+1,S=E[S]){for(;S%10==0;S/=10,N--);for(S=E[0];S>=10;S/=10,N++);}return I&&k.e+1>N&&(N=k.e+1),N},i.shiftedBy=function(I){return intCheck(I,-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER),this.times("1e"+I)},i.squareRoot=i.sqrt=function(){var I,C,E,N,S,k=this,Q=k.c,w=k.s,T=k.e,O=a+4,P=new y("0.5");if(w!==1||!Q||!Q[0])return new y(!w||w<0&&(!Q||Q[0])?NaN:Q?k:1/0);if(w=Math.sqrt(+D(k)),w==0||w==1/0?(C=coeffToString(Q),(C.length+T)%2==0&&(C+="0"),w=Math.sqrt(+C),T=bitFloor((T+1)/2)-(T<0||T%2),w==1/0?C="5e"+T:(C=w.toExponential(),C=C.slice(0,C.indexOf("e")+1)+T),E=new y(C)):E=new y(w+""),E.c[0]){for(T=E.e,w=T+O,w<3&&(w=0);;)if(S=E,E=P.times(S.plus(t(k,S,O,1))),coeffToString(S.c).slice(0,w)===(C=coeffToString(E.c)).slice(0,w))if(E.e<T&&--w,C=C.slice(w-3,w+1),C=="9999"||!N&&C=="4999"){if(!N&&(M(S,S.e+a+2,0),S.times(S).eq(k))){E=S;break}O+=4,w+=4,N=1}else{(!+C||!+C.slice(1)&&C.charAt(0)=="5")&&(M(E,E.e+a+2,1),I=!E.times(E).eq(k));break}}return M(E,E.e+a+1,s,I)},i.toExponential=function(I,C){return I!=null&&(intCheck(I,0,MAX),I++),b(this,I,C,1)},i.toFixed=function(I,C){return I!=null&&(intCheck(I,0,MAX),I=I+this.e+1),b(this,I,C)},i.toFormat=function(I,C,E){var N,S=this;if(E==null)I!=null&&C&&typeof C=="object"?(E=C,C=null):I&&typeof I=="object"?(E=I,I=C=null):E=h;else if(typeof E!="object")throw Error(bignumberError+"Argument not an object: "+E);if(N=S.toFixed(I,C),S.c){var k,Q=N.split("."),w=+E.groupSize,T=+E.secondaryGroupSize,O=E.groupSeparator||"",P=Q[0],F=Q[1],L=S.s<0,G=L?P.slice(1):P,Y=G.length;if(T&&(k=w,w=T,T=k,Y-=k),w>0&&Y>0){for(k=Y%w||w,P=G.substr(0,k);k<Y;k+=w)P+=O+G.substr(k,w);T>0&&(P+=O+G.slice(k)),L&&(P="-"+P)}N=F?P+(E.decimalSeparator||"")+((T=+E.fractionGroupSize)?F.replace(new RegExp("\\d{"+T+"}\\B","g"),"$&"+(E.fractionGroupSeparator||"")):F):P}return(E.prefix||"")+N+(E.suffix||"")},i.toFraction=function(I){var C,E,N,S,k,Q,w,T,O,P,F,L,G=this,Y=G.c;if(I!=null&&(w=new y(I),!w.isInteger()&&(w.c||w.s!==1)||w.lt(o)))throw Error(bignumberError+"Argument "+(w.isInteger()?"out of range: ":"not an integer: ")+D(w));if(!Y)return new y(G);for(C=new y(o),O=E=new y(o),N=T=new y(o),L=coeffToString(Y),k=C.e=L.length-G.e-1,C.c[0]=POWS_TEN[(Q=k%LOG_BASE)<0?LOG_BASE+Q:Q],I=!I||w.comparedTo(C)>0?k>0?C:O:w,Q=f,f=1/0,w=new y(L),T.c[0]=0;P=t(w,C,0,1),S=E.plus(P.times(N)),S.comparedTo(I)!=1;)E=N,N=S,O=T.plus(P.times(S=O)),T=S,C=w.minus(P.times(S=C)),w=S;return S=t(I.minus(E),N,0,1),T=T.plus(S.times(O)),E=E.plus(S.times(N)),T.s=O.s=G.s,k=k*2,F=t(O,N,k,s).minus(G).abs().comparedTo(t(T,E,k,s).minus(G).abs())<1?[O,N]:[T,E],f=Q,F},i.toNumber=function(){return+D(this)},i.toPrecision=function(I,C){return I!=null&&intCheck(I,1,MAX),b(this,I,C,2)},i.toString=function(I){var C,E=this,N=E.s,S=E.e;return S===null?N?(C="Infinity",N<0&&(C="-"+C)):C="NaN":(I==null?C=S<=c||S>=l?toExponential(coeffToString(E.c),S):toFixedPoint(coeffToString(E.c),S,"0"):I===10&&m?(E=M(new y(E),a+S+1,s),C=toFixedPoint(coeffToString(E.c),E.e,"0")):(intCheck(I,2,A.length,"Base"),C=n(toFixedPoint(coeffToString(E.c),S,"0"),10,I,N,!0)),N<0&&E.c[0]&&(C="-"+C)),C},i.valueOf=i.toJSON=function(){return D(this)},i._isBigNumber=!0,i[Symbol.toStringTag]="BigNumber",i[Symbol.for("nodejs.util.inspect.custom")]=i.valueOf,e!=null&&y.set(e),y}function bitFloor(e){var t=e|0;return e>0||e===t?t:t-1}function coeffToString(e){for(var t,n,r=1,i=e.length,o=e[0]+"";r<i;){for(t=e[r++]+"",n=LOG_BASE-t.length;n--;t="0"+t);o+=t}for(i=o.length;o.charCodeAt(--i)===48;);return o.slice(0,i+1||1)}function compare(e,t){var n,r,i=e.c,o=t.c,a=e.s,s=t.s,c=e.e,l=t.e;if(!a||!s)return null;if(n=i&&!i[0],r=o&&!o[0],n||r)return n?r?0:-s:a;if(a!=s)return a;if(n=a<0,r=c==l,!i||!o)return r?0:!i^n?1:-1;if(!r)return c>l^n?1:-1;for(s=(c=i.length)<(l=o.length)?c:l,a=0;a<s;a++)if(i[a]!=o[a])return i[a]>o[a]^n?1:-1;return c==l?0:c>l^n?1:-1}function intCheck(e,t,n,r){if(e<t||e>n||e!==mathfloor(e))throw Error(bignumberError+(r||"Argument")+(typeof e=="number"?e<t||e>n?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function isOdd(e){var t=e.c.length-1;return bitFloor(e.e/LOG_BASE)==t&&e.c[t]%2!=0}function toExponential(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function toFixedPoint(e,t,n){var r,i;if(t<0){for(i=n+".";++t;i+=n);e=i+e}else if(r=e.length,++t>r){for(i=n,t-=r;--t;i+=n);e+=i}else t<r&&(e=e.slice(0,t)+"."+e.slice(t));return e}var BigNumber=clone();class HistoriesI extends WritableStore{static insertIncident(t,n,r){return Histories.open(i=>i.insertIncident(t,n,r))}static async incidents(){return(await Histories.read()).incidents()}static updateSyncInfo(t,n,r){return Histories.open(i=>i.updateSyncInfo(t,n,r))}static syncHeight(t,n){return Histories.open(r=>r.syncHeight(t,n))}async updateSyncInfo(t,n,r){const i=this._w_cache.syncs;(i[t]=i[t]||{[n]:{}})[n]={height:r},await this.save()}syncHeight(t,n){const i=this._w_cache.syncs[t]?.[n]?.height;return i?BigInt(i):0n}async insertIncident(t,n,r){const i=this._w_cache.order;let o=!1,a=!1,s=i.length;for(let c=0;c<s;c++){const l=i[c],f=r[l].time;if(l===t){i.splice(c,1),s=i.length,a=!0,c-=1;continue}if(!o&&n>=f&&(i.splice(c,0,t),s=i.length,o=!0,c+=1),o&&a)break}o||i.push(t),console.log(`** History updated: [${i.join(", ")}]`),await this.save()}incidents(){return this._w_cache.order}}const Histories=create_store_class({store:SI_STORE_HISTORIES,class:HistoriesI}),Incidents=create_store_class({store:SI_STORE_INCIDENTS,extension:"map",class:class rt extends WritableStoreMap{static pathFor(t,n){return`/incident.${t}/id.${n}`}static pathFrom(t){return rt.pathFor(t.type,t.id)}static async filter(t={}){const[n,r]=await Promise.all([Histories.incidents(),Incidents.read()]);return r.filter(n,t)}static record(t,n){if(t)n.id||(n.id=t);else{delete n.id;const r=sha256_sync$1(text_to_buffer(JSON.stringify(n)));t=`${n.type}:${buffer_to_text(r)}`,n.id=t}return Incidents.open(r=>r.record(t,n))}async record(t,n,r){const i=this._w_cache,o=rt.pathFor(n.type,t);i[o]=n,await this.save(),r?await r.insertIncident(o,n.time,this._w_cache):await Histories.insertIncident(o,n.time,this._w_cache)}*filter(t,n={}){const r=this._w_cache;for(const i of t){const o=r[i];n.type&&n.type!==o.type||n.account&&n.account!==o.data.account||n.owner&&n.owner!==o.data.owner||(yield o)}}}}),fold_attrs=e=>fold(e.attributes,t=>({[t.key]:t.value}));async function sign_doc(e,t,n,r,i){const o=SignDoc.fromPartial({accountNumber:t+"",authInfoBytes:n,bodyBytes:r,chainId:i}),a=SignDoc.encode(o).finish(),s=e.secret,c=await Secrets.get(s);if(c?.security.type!=="none")throw new Error("Keyring not yet implemented");return await(await Secp256k1Key.import(await RuntimeKey.createRaw(string8_to_buffer(c.data)))).sign(a,!0)}function convert_mode_info(e){return e.multi?{multi:{bitarray:Array.from(e.multi.bitarray.elems).reduce((t,n)=>t+n.toString(2).padStart(8,"0"),"").slice(0,-e.multi.bitarray.extraBitsStored),modeInfos:e.multi.modeInfos.map(convert_mode_info)}}:e}function tx_to_synced(e,t,n,r){return{stage:"synced",chain:e,hash:t,code:r.code,raw_log:r.rawLog,height:r.height,timestamp:r.timestamp,gas_used:r.gasUsed,gas_wanted:r.gasWanted,msgs:r.logs.map(i=>({events:fold(i.events,o=>({[o.type]:fold_attrs(o)}))})),...n.authInfo?(i=>({...i.fee?(o=>({fee_amounts:o.amount,gas_limit:o.gasLimit,payer:o.payer,granter:o.granter}))(i.fee):{gas_limit:""},signers:i.signerInfos.map(o=>({pubkey:buffer_to_base64(o.publicKey?.value||new Uint8Array(0)),sequence:o.sequence,mode_info:convert_mode_info(o.modeInfo)}))}))(n.authInfo):{gas_limit:""},memo:n.body?.memo||""}}class CosmosNetwork{constructor(t,n){de(this,"_p_chain");de(this,"_y_grpc");de(this,"_ks_cache");this._g_network=t,this._g_chain=n,this._p_chain=Chains.pathFrom(n),this._y_grpc=new GrpcWebImpl(t.grpcWebUrl,{transport:grpcWebClient_umd$1.exports.grpc.CrossBrowserHttpTransport({withCredentials:!1})}),this.reloadCached()}async _signer_data(t){const n=await new QueryClientImpl(this._y_grpc).account({address:t}),{typeUrl:r,value:i}=n?.account||{};if(r){if(r!=="/cosmos.auth.v1beta1.BaseAccount")throw new Error(`Cannot sign with account of type "${r}", can only sign with BaseAccount.`)}else throw new Error(`Account for ${t} was not found on chain. Likely has zero balance.`);const o=BaseAccount.decode(i);return{chainId:this._g_chain.id,accountNumber:BigInt(o.accountNumber),sequence:BigInt(o.sequence)}}async _update_balance(t,n,r,i){const o=Entities.holdingPathFor(t,n,this._p_chain),a=this._ks_cache.at(o);return await QueryCache.open(async s=>{await s.set(o,{timestamp:i,data:JSON.parse(JSON.stringify(r))}),this._ks_cache=s}),[o,a]}async reloadCached(){this._ks_cache=await QueryCache.read()}async latestBlock(){return await new ServiceClientImpl(this._y_grpc).getLatestBlock({})}cachedBalance(t,n){const r=Entities.holdingPathFor(t,n,this._p_chain);return this._ks_cache.at(r)}async bankBalance(t,n,r=0){const i=Date.now();n=n||Object.keys(this._g_chain.coins)[0];const o=await new QueryClientImpl$1(this._y_grpc).balance({address:t,denom:this._g_chain.coins[n].denom}),{balance:a}=o;if(!a)throw new Error("Failed to fetch balance");const[s,c]=await this._update_balance(t,n,a,i);return{balance:a,cached:c,holding:s}}async bankBalances(t){const n=Date.now(),r=await new QueryClientImpl$1(this._y_grpc).allBalances({address:t}),{balances:i}=r,o=this._g_chain.coins,a=oderom(o,(c,l)=>({[l.denom]:c})),s={};for(const c of i){const l=a[c.denom];o[l];const[u,f]=await this._update_balance(t,l,c,n);s[l]={balance:c,cached:f,holding:u}}return s}get hasRpc(){return!!this._g_network.rpcHost}listen(t,n){return new Promise(r=>{const i=this._g_network.rpcHost;if(!i)throw new Error("Cannot subscribe to events; no RPC host configured on network");const o=new WebSocket(`wss://${i}/websocket`);o.onopen=s=>{o.send(JSON.stringify({jsonrpc:"2.0",method:"subscribe",id:"0",params:{query:t.join(" AND ")}})),r(()=>{a=!0,o.close()})},o.onmessage=s=>{const c=JSON.parse(s.data||"{}"),l=c?.result?.data?.value,u=c?.result?.events?.["tx.hash"]?.[0]||"";l&&n(null,l,u)};let a=!1;o.onclose=s=>{a||n(s)},o.onerror=s=>{n(s)}})}onReceive(t,n){return this.listen(["tm.event='Tx'",`transfer.recipient='${t}'`],(r,i,o)=>{const a=i?.TxResult;n(r,a?{...a,hash:o}:void 0)})}onSend(t,n){return this.listen(["tm.event='Tx'",`transfer.sender='${t}'`],(r,i,o)=>{const a=i?.TxResult;n(r,a?{...a,hash:o}:void 0)})}async e2eInfoFor(t,n=""){return await with_timeout({duration:1e4,trip:()=>new NetworkTimeoutError,run:async()=>{const r=await new ServiceClientImpl$1(this._y_grpc).getTxsEvent({events:[`message.sender='${t}'`,...n?[`block.height<${n}`]:[]],pagination:{limit:"1"},orderBy:OrderBy.ORDER_BY_DESC});if(!r?.txs?.length)throw new UnpublishedAccountError(t,this._g_chain);const i=r.txs[0].authInfo.signerInfos;if(i.length!==1)throw new MultipleSignersError(t,this._g_chain);const{typeUrl:o,value:a}=i[0].publicKey;if(o!=="/cosmos.crypto.secp256k1.PubKey")throw new WrongKeyTypeError(t,this._g_chain);return await Secp256k1Key.init(),{sequence:i[0].sequence,height:r.txResponses[0].height,hash:r.txResponses[0].txhash,pubkey:Secp256k1Key.uncompressPublicKey(a.subarray(2))}}})}async ecdh(t,n=yw_chain.get(),r=yw_account.get()){const i=r.secret,o=await Secrets.get(i);if(o?.security.type!=="none")throw new Error("Keyring not yet implemented");const s=await(await Secp256k1Key.import(await RuntimeKey.createRaw(string8_to_buffer(o.data)))).ecdh(t),c=await crypto.subtle.importKey("raw",s,"HKDF",!1,["deriveBits","deriveKey"]);return zero_out(s),await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:ATU8_SHA256_STARSHELL,info:sha256_sync$1(text_to_buffer(n.id))},c,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}async ecdhEncrypt(t,n,r,i=yw_chain.get(),o=yw_account.get()){const a=await this.ecdh(t,i,o);return await encrypt(n,a,r)}async ecdhDecrypt(t,n,r,i=yw_chain.get(),o=yw_account.get()){const a=await this.ecdh(t,i,o);return await decrypt(n,a,r)}async isContract(t){return(await new ServiceClientImpl$1(this._y_grpc).getTxsEvent({events:[`message.contract_address='${t}'`],orderBy:OrderBy.ORDER_BY_ASC,pagination:{limit:"1"}})).txResponses.length>0}async received(t,n=0){const r=await new ServiceClientImpl$1(this._y_grpc).getTxsEvent({events:[`transfer.recipient='${t}'`,`tx.height>=${n}`],pagination:{limit:"100"}}),i=grpcWebClient_umd$1.exports.grpc.client(ServiceGetTxsEventDesc,{host:"wss://rpc.testnet.secretsaturn.net/websocket",transport:grpcWebClient_umd$1.exports.grpc.WebsocketTransport(),debug:!0});i.onHeaders(c=>{console.log(c);debugger}),i.onMessage(c=>{console.log(c);debugger}),i.onEnd((c,l,u)=>{console.log({w_status:c,s_msg:l,g_trailers:u});debugger;console.log("#end")}),i.start();const o=GetTxsEventRequest.fromPartial({events:["tm.event='Tx'"]});debugger;if(i.send({...o,...ServiceGetTxsEventDesc.requestType}),i.finishSend(),!r)throw new Error("Failed to fetch transaction");if(+(r.pagination?.total||1)>1)throw new Error("Not yet implemented");const s=[];for(const c of r.txResponses){const l=JSON.parse(c.rawLog)[0].events;for(const u of l)if(u.type==="transfer"){const f=fold_attrs(u);s.push({...f,height:c.height,timestamp:c.timestamp,txhash:c.txhash})}}return console.log(s),s}async bankSend(t,n,r,i,o,a,s="",c=BroadcastMode.BROADCAST_MODE_SYNC,l=yw_chain.get()){const u=l.coins[r],f=MsgSend.fromPartial({amount:[{denom:u.denom,amount:i.toString()}],fromAddress:t,toAddress:n}),d={typeUrl:"/cosmos.bank.v1beta1.MsgSend",value:MsgSend.encode(f).finish()};let g;const _=await Accounts.read();for(const[,A]of _.entries())if(t===Chains.addressFor(A.pubkey,l)){g=A;break}if(!g)throw syserr({title:"Critical Error",text:`Failed to locate account associated with ${t}`});const[h]=await this.broadcast({chain:l,account:g,msgs:[d],memo:s,gasLimit:o,gasFee:{price:a},mode:c});return{stage:"pending",chain:Chains.pathFrom(l),code:h.code,hash:h.txhash,gas_limit:`${o}`,gas_wanted:h.gasWanted,gas_used:h.gasUsed,raw_log:h.rawLog,msgs:[{events:{transfer:{sender:f.fromAddress,recipient:f.toAddress,amount:`${f.amount[0].amount}${f.amount[0].denom}`}}}]}}async broadcast(t){const{chain:n,msgs:r,memo:i,gasLimit:o,gasFee:a,account:s,mode:c}=t;let{amount:l,denom:u}=a;a.price&&(l=new BigNumber(a.price).times(o.toString()).toString(),u=Object.values(n.coins)[0].denom);const f=Chains.addressFor(s.pubkey,this._g_chain),d=s.secret,g=await Secrets.get(d);if(g?.security.type!=="none")throw new Error("Keyring not yet implemented");const h=(await Secp256k1Key.import(await RuntimeKey.create(()=>string8_to_buffer(g.data)),!0)).exportPublicKey(),A=TxBody.fromPartial({messages:r,memo:i}),m=TxBody.encode(A).finish(),y=await this._signer_data(f),b=AuthInfo.fromPartial({signerInfos:[{publicKey:{typeUrl:"/cosmos.crypto.secp256k1.PubKey",value:PubKey.encode(PubKey.fromPartial({key:h})).finish()},modeInfo:{single:{mode:SignMode.SIGN_MODE_DIRECT}},sequence:y.sequence+""}],fee:{amount:[{amount:l,denom:u}],gasLimit:o+""}}),B=AuthInfo.encode(b).finish(),v=await sign_doc(s,y.accountNumber,B,m,n.id),M=TxRaw.encode(TxRaw.fromPartial({bodyBytes:m,authInfoBytes:B,signatures:[v]})).finish();let D;switch(c){case BroadcastMode.BROADCAST_MODE_SYNC:{D=await new ServiceClientImpl$1(this._y_grpc).broadcastTx({txBytes:M,mode:BroadcastMode.BROADCAST_MODE_SYNC});break}case BroadcastMode.BROADCAST_MODE_ASYNC:{D=await new ServiceClientImpl$1(this._y_grpc).broadcastTx({txBytes:M,mode:BroadcastMode.BROADCAST_MODE_ASYNC});break}default:throw new Error(`Invalid broadcast mode: ${c}`)}return[D.txResponse,M]}async fetchParams(){(await new QueryClientImpl(this._y_grpc).params({})).params}async downloadTxn(t){const n=await new ServiceClientImpl$1(this._y_grpc).getTx({hash:t});if(!n?.tx||!n?.txResponse)throw syserr({title:"Transaction not fonud",text:`Transaction ${t} was not found`});const{tx:r,txResponse:i}=n;return tx_to_synced(this._p_chain,t,r,i)}async*synchronize(t,n){const r=new ServiceClientImpl$1(this._y_grpc);let i=0n,o=0n,a=null;const s=await Histories.syncHeight(this._p_chain,[t,...n].join(`
`)),l=(await this.latestBlock()).block?.header?.height;if(!l)throw syserr({title:"Sync failed",text:`${this._g_network.name} returned an invalid block`});for(;;){const u=await r.getTxsEvent({events:n,orderBy:OrderBy.ORDER_BY_DESC,pagination:a?{limit:""+XG_SYNCHRONIZE_PAGINATION_LIMIT,key:a}:{limit:""+XG_SYNCHRONIZE_PAGINATION_LIMIT,offset:""+i}}),{txs:f,txResponses:d}=u,g=[],_=await Incidents.open(A=>Histories.open(async m=>{const y=f.length;o+=BigInt(y);for(let b=0;b<y;b++){const B=f[b],v=d[b],M=v.txhash,D=Incidents.pathFor(t,M);if(A.at(D)?.data?.stage!=="synced"){const E=tx_to_synced(this._p_chain,M,B,v),N={type:t,id:M,time:new Date(E.timestamp).getTime(),data:E};await A.record(M,N,m),g.push(N)}const C=BigInt(v.height);if(s<C)return!0}return!1}));for(const A of g)yield A;if(_)break;const h=u.pagination?.total||"0";if(h&&BigInt(h)-o>0n){a=u.pagination.nextKey,i+=XG_SYNCHRONIZE_PAGINATION_LIMIT;continue}break}await Histories.updateSyncInfo(this._p_chain,[t,...n].join(`
`),l)}async*synchronizeAll(t){for await(const n of this.synchronize("tx_in",[`transfer.recipient='${t}'`]))yield n;for await(const n of this.synchronize("tx_out",[`message.sender='${t}'`]))yield n}}const Medias=create_store_class({store:SI_STORE_MEDIA,extension:"map",class:class extends WritableStoreMap{}}),Tags=create_store_class({store:SI_STORE_TAGS,class:class extends WritableStore{static tagPathFor(t){return`/tag.${t.index}`}getTag(t){return this._w_cache.registry[t]??null}getIdsFor(t){return this._w_cache.map[t]??[]}getTagsFor(t){return this.getIdsFor(t).map(n=>this.getTag(n)).filter(n=>!!n)}setIdsFor(t,n){return this._w_cache.map[t]=n,this.save()}setTagsFor(t,n){return this.setIdsFor(t,n.map(r=>r.index))}}}),subscriber_queue=[];function readable(e,t){return{subscribe:writable(e,t).subscribe}}function writable(e,t=noop$1){let n;const r=new Set;function i(s){if(safe_not_equal(e,s)&&(e=s,n)){const c=!subscriber_queue.length;for(const l of r)l[1](),subscriber_queue.push(l,e);if(c){for(let l=0;l<subscriber_queue.length;l+=2)subscriber_queue[l][0](subscriber_queue[l+1]);subscriber_queue.length=0}}}function o(s){i(s(e))}function a(s,c=noop$1){const l=[s,c];return r.add(l),r.size===1&&(n=t(i)||noop$1),s(e),()=>{r.delete(l),r.size===0&&(n(),n=null)}}return{set:i,update:o,subscribe:a}}function derived(e,t,n){const r=!Array.isArray(e),i=r?[e]:e,o=t.length<2;return readable(n,a=>{let s=!1;const c=[];let l=0,u=noop$1;const f=()=>{if(l)return;u();const g=t(r?c[0]:c,a);o?a(g):u=is_function(g)?g:noop$1},d=i.map((g,_)=>subscribe(g,h=>{c[_]=h,l&=~(1<<_),s&&f()},()=>{l|=1<<_}));return s=!0,f(),function(){run_all(d),u()}})}var Screen_svelte_svelte_type_style_lang="";const get_help_slot_changes=e=>({}),get_help_slot_context=e=>({});function create_if_block$k(e){let t,n;const r=e[21].help,i=create_slot(r,e,e[20],get_help_slot_context);return{c(){t=element("div"),i&&i.c(),attr(t,"class","display_none")},m(o,a){insert(o,t,a),i&&i.m(t,null),e[23](t),n=!0},p(o,a){i&&i.p&&(!n||a&1048576)&&update_slot_base(i,r,o,o[20],n?get_slot_changes(r,o[20],a,get_help_slot_changes):get_all_dirty_from_scope(o[20]),get_help_slot_context)},i(o){n||(transition_in(i,o),n=!0)},o(o){transition_out(i,o),n=!1},d(o){o&&detach(t),i&&i.d(o),e[23](null)}}}function create_fragment$x(e){let t,n,r,i,o,a,s;const c=e[21].default,l=create_slot(c,e,e[20],null);let u="help"in e[10]&&create_if_block$k(e);return{c(){t=element("div"),n=element("form"),l&&l.c(),r=space(),u&&u.c(),attr(n,"class",i="screen "+e[1]+" svelte-a0naqi"),attr(n,"data-s2-exit",e[9]),attr(n,"style",e[3]),attr(n,"autocomplete","off"),toggle_class(n,"flex",!0),toggle_class(n,"scroll",!0),toggle_class(n,"nav",e[7]),toggle_class(n,"progress",e[0]),toggle_class(n,"transparent",e[2]),toggle_class(n,"sublimate",!1),toggle_class(n,"blur",e[6]),attr(t,"class","bounds svelte-a0naqi"),toggle_class(t,"slides",e[8])},m(f,d){insert(f,t,d),append(t,n),l&&l.m(n,null),append(n,r),u&&u.m(n,null),e[24](n),o=!0,a||(s=[listen(n,"submit",submit_handler_1),listen(n,"submit",e[22])],a=!0)},p(f,[d]){l&&l.p&&(!o||d&1048576)&&update_slot_base(l,c,f,f[20],o?get_slot_changes(c,f[20],d,null):get_all_dirty_from_scope(f[20]),null),"help"in f[10]?u?(u.p(f,d),d&1024&&transition_in(u,1)):(u=create_if_block$k(f),u.c(),transition_in(u,1),u.m(n,null)):u&&(group_outros(),transition_out(u,1,1,()=>{u=null}),check_outros()),(!o||d&2&&i!==(i="screen "+f[1]+" svelte-a0naqi"))&&attr(n,"class",i),(!o||d&8)&&attr(n,"style",f[3]),d&2&&toggle_class(n,"flex",!0),d&2&&toggle_class(n,"scroll",!0),d&130&&toggle_class(n,"nav",f[7]),d&3&&toggle_class(n,"progress",f[0]),d&6&&toggle_class(n,"transparent",f[2]),d&2&&toggle_class(n,"sublimate",!1),d&66&&toggle_class(n,"blur",f[6])},i(f){o||(transition_in(l,f),transition_in(u),o=!0)},o(f){transition_out(l,f),transition_out(u),o=!1},d(f){f&&detach(t),l&&l.d(f),u&&u.d(),e[24](null),a=!1,run_all(s)}}}const submit_handler_1=e=>{e.preventDefault()};function instance$w(e,t,n){let r,i;component_subscribe(e,yw_nav_visible,Q=>n(25,r=Q)),component_subscribe(e,yw_blur,Q=>n(6,i=Q));let{$$slots:o={},$$scope:a}=t;const s=compute_slots(o);let{nav:c=!1}=t;const l=c;let{debug:u=""}=t,{progress:f=null}=t,{full:d=!1}=t,{keyed:g=!1}=t,{classNames:_=""}=t;const h=getContext("page");let{leaves:A=!1}=t,{swipes:m=!1}=t,{root:y=h.index===0}=t,{slides:b=!A&&!m&&!y}=t;const B=b;let{form:v=!1}=t,{transparent:M=!1}=t,D,I=null;const C=A?"leaves":m?"swipes":"";createEventDispatcher(),onMount(()=>{if(h?h.on({focus(){set_store_value(yw_nav_visible,r=l,r)}}):console.warn(`${u||"unknown"} Screen missing page context`),g){let Q=0;new MutationObserver(async w=>{if(w[0]?.addedNodes.length)try{Q=D.scrollTop}catch{}else w[0]?.removedNodes.length&&D&&n(4,D.scrollTop=Q,D)}).observe(D,{childList:!0})}});let{style:E=""}=t;function N(Q){bubble.call(this,e,Q)}function S(Q){binding_callbacks[Q?"unshift":"push"](()=>{I=Q,n(5,I)})}function k(Q){binding_callbacks[Q?"unshift":"push"](()=>{D=Q,n(4,D)})}return e.$$set=Q=>{"nav"in Q&&n(11,c=Q.nav),"debug"in Q&&n(12,u=Q.debug),"progress"in Q&&n(0,f=Q.progress),"full"in Q&&n(13,d=Q.full),"keyed"in Q&&n(14,g=Q.keyed),"classNames"in Q&&n(1,_=Q.classNames),"leaves"in Q&&n(15,A=Q.leaves),"swipes"in Q&&n(16,m=Q.swipes),"root"in Q&&n(17,y=Q.root),"slides"in Q&&n(18,b=Q.slides),"form"in Q&&n(19,v=Q.form),"transparent"in Q&&n(2,M=Q.transparent),"style"in Q&&n(3,E=Q.style),"$$scope"in Q&&n(20,a=Q.$$scope)},[f,_,M,E,D,I,i,l,B,C,s,c,u,d,g,A,m,y,b,v,a,o,N,S,k]}class Screen extends SvelteComponent{constructor(t){super(),init(this,t,instance$w,create_fragment$x,safe_not_equal,{nav:11,debug:12,progress:0,full:13,keyed:14,classNames:1,leaves:15,swipes:16,root:17,slides:18,form:19,transparent:2,style:3})}}var StarShellLogo_svelte_svelte_type_style_lang="";function create_fragment$w(e){let t,n,r,i,o,a,s;return{c(){t=element("picture"),n=element("source"),r=space(),i=element("img"),attr(n,"srcset",e[3]),attr(n,"media","(min-resolution: 2dppx)"),attr(i,"alt",e[1]),src_url_equal(i.src,o=e[2])||attr(i,"src",o),attr(i,"class","svelte-5d3u97"),attr(t,"class","no-margin logo svelte-5d3u97"),set_style(t,"width",e[0]+"px"),set_style(t,"height",e[0]+"px")},m(c,l){insert(c,t,l),append(t,n),append(t,r),append(t,i),a||(s=listen(t,"click",e[6]),a=!0)},p:noop$1,i:noop$1,o:noop$1,d(c){c&&detach(t),a=!1,s()}}}function instance$v(e,t,n){let{dim:r}=t;const i=r;let{alt:o="StarShell logo"}=t;const a=o,s=f=>`/media/vendor/logo-${f}px.png`,c=s(i),l=s(i*2);function u(f){bubble.call(this,e,f)}return e.$$set=f=>{"dim"in f&&n(4,r=f.dim),"alt"in f&&n(5,o=f.alt)},[i,a,c,l,r,o,u]}class StarShellLogo extends SvelteComponent{constructor(t){super(),init(this,t,instance$v,create_fragment$w,safe_not_equal,{dim:4,alt:5})}}var SX_ICON_ADD$1=`<svg xmlns="http://www.w3.org/2000/svg" width="8" height="8">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="3" width="2" height="8" />
		<rect y="5" width="2" height="8" transform="rotate(-90 0 5)" />
	</g>
</svg>`,OverlaySelect_svelte_svelte_type_style_lang="";const get_rows_slot_changes=e=>({}),get_rows_slot_context=e=>({});function create_fragment$v(e){let t,n,r,i,o,a,s,c,l,u,f;const d=e[4].rows,g=create_slot(d,e,e[3],get_rows_slot_context);return{c(){t=element("div"),n=element("div"),r=element("div"),i=element("h3"),o=text(e[1]),a=space(),s=element("div"),g&&g.c(),attr(i,"class","svelte-1f5uzt4"),attr(r,"class","top svelte-1f5uzt4"),attr(s,"class","rows svelte-1f5uzt4"),attr(n,"class","overlay select svelte-1f5uzt4"),attr(t,"class","cancel svelte-1f5uzt4"),toggle_class(t,"showing",e[2])},m(_,h){insert(_,t,h),append(t,n),append(n,r),append(r,i),append(i,o),append(n,a),append(n,s),g&&g.m(s,null),l=!0,u||(f=listen(t,"click",e[5]),u=!0)},p(_,[h]){(!l||h&2)&&set_data(o,_[1]),g&&g.p&&(!l||h&8)&&update_slot_base(g,d,_,_[3],l?get_slot_changes(d,_[3],h,get_rows_slot_changes):get_all_dirty_from_scope(_[3]),get_rows_slot_context),h&4&&toggle_class(t,"showing",_[2])},i(_){l||(transition_in(g,_),c&&c.end(1),l=!0)},o(_){transition_out(g,_),c=create_out_transition(n,pause,{}),l=!1},d(_){_&&detach(t),g&&g.d(_),_&&c&&c.end(),u=!1,f()}}}function pause(e,t){return{duration:200}}function instance$u(e,t,n){let r;component_subscribe(e,yw_blur,u=>n(6,r=u));let{$$slots:i={},$$scope:o}=t,{title:a}=t,{open:s=!0}=t,c=!1;setTimeout(()=>{n(2,c=!0)},10);const l=()=>{n(2,c=!1),n(0,s=!1)};return e.$$set=u=>{"title"in u&&n(1,a=u.title),"open"in u&&n(0,s=u.open),"$$scope"in u&&n(3,o=u.$$scope)},e.$$.update=()=>{e.$$.dirty&1&&set_store_value(yw_blur,r=s,r)},[s,a,c,o,i,l]}class OverlaySelect extends SvelteComponent{constructor(t){super(),init(this,t,instance$u,create_fragment$v,safe_not_equal,{title:1,open:0})}}function create_if_block$j(e){let t,n=e[0].outerHTML+"",r;return{c(){t=new HtmlTag(!1),r=empty(),t.a=r},m(i,o){t.m(n,i,o),insert(i,r,o)},p(i,o){o&1&&n!==(n=i[0].outerHTML+"")&&t.p(n)},d(i){i&&detach(r),i&&t.d()}}}function create_fragment$u(e){let t,n=e[0]?.outerHTML&&create_if_block$j(e);return{c(){n&&n.c(),t=empty()},m(r,i){n&&n.m(r,i),insert(r,t,i)},p(r,[i]){r[0]?.outerHTML?n?n.p(r,i):(n=create_if_block$j(r),n.c(),n.m(t.parentNode,t)):n&&(n.d(1),n=null)},i:noop$1,o:noop$1,d(r){n&&n.d(r),r&&detach(t)}}}function instance$t(e,t,n){let{element:r}=t;return e.$$set=i=>{"element"in i&&n(0,r=i.element)},[r]}class Put extends SvelteComponent{constructor(t){super(),init(this,t,instance$t,create_fragment$u,safe_not_equal,{element:0})}}const qs=(e,t)=>e.querySelector(t);function dd(e,t={},n=[]){const r=document.createElement(e);for(const i in t)r.setAttribute(i,t[i]+"");for(const i of n)r.append(i);return r}function open_external_link(e){browser.tabs.create({url:e})}function picture(e,t,n={}){const{default:r,16:i,32:o,48:a,64:s,96:c,128:l,256:u}=e,f=t.medias,d=i?f.at(i)?.data:null,g=o?f.at(o)?.data:null,_=a?f.at(a)?.data:null,h=s?f.at(s)?.data:null,A=c?f.at(c)?.data:null,m=l?f.at(l)?.data:null,y=u?f.at(u)?.data:null,b=f.at(r).data,B=d||g||_||h||A||m||y,v=t.dim,M=v*2;let D=null,I=null;return B&&(v<=64?v<=32?v<=16?D=B:D=g||_||h||A||m||y:v<=48?D=_||h||A||m||y:D=h||A||m||y:v<=128?v<=96?D=A||m||y:D=m||y:v<=256&&(D=y),M<=64?M<=32?M<=16?I=B:I=g||_||h||A||m||y:M<=48?I=_||h||A||m||y:I=h||A||m||y:M<=128?M<=96?I=A||m||y:I=m||y:M<=256&&(I=y)),dd("picture",{...n},[...I?[dd("source",{srcset:I,media:"(min-resolution: 2dppx)"})]:[],dd("img",{src:D||b,alt:t.alt||""})])}const Pfps=create_store_class({store:SI_STORE_PFPS,extension:"map",class:class extends WritableStoreMap{static async load(t,n){const r=await Pfps.at(t);return r?Pfps.render(r,n):null}static render(t,n){const r=`width:${n.dim}px; height:${n.dim}px;`;switch(t.type){case"plain":return picture(t.image,n,{class:"global_pfp",style:r})}}}});var PfpDisplay_svelte_svelte_type_style_lang="";function create_else_block_1$3(e){let t,n=(e[1][0]||"")+"",r,i,o,a={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block_2$1,then:create_then_block_2$1,catch:create_catch_block_2$1,value:21};return handle_promise(e[7](),a),{c(){t=element("span"),r=text(n),i=space(),o=empty(),a.block.c(),attr(t,"class","icon-dom svelte-mmgef2"),attr(t,"style",e[4])},m(s,c){insert(s,t,c),append(t,r),insert(s,i,c),insert(s,o,c),a.block.m(s,a.anchor=c),a.mount=()=>o.parentNode,a.anchor=o},p(s,c){e=s},i:noop$1,o:noop$1,d(s){s&&detach(t),s&&detach(i),s&&detach(o),a.block.d(s),a.token=null,a=null}}}function create_if_block$i(e){let t,n,r={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block$5,then:create_then_block$5,catch:create_catch_block_1$3,value:20,blocks:[,,,]};return handle_promise(e[6](),r),{c(){t=empty(),r.block.c()},m(i,o){insert(i,t,o),r.block.m(i,r.anchor=o),r.mount=()=>t.parentNode,r.anchor=t,n=!0},p(i,o){e=i,update_await_block_branch(r,e,o)},i(i){n||(transition_in(r.block),n=!0)},o(i){for(let o=0;o<3;o+=1){const a=r.blocks[o];transition_out(a)}n=!1},d(i){i&&detach(t),r.block.d(i),r.token=null,r=null}}}function create_catch_block_2$1(e){return{c:noop$1,m:noop$1,d:noop$1}}function create_then_block_2$1(e){let t;return{c(){t=text("_")},m(n,r){insert(n,t,r)},d(n){n&&detach(t)}}}function create_pending_block_2$1(e){return{c:noop$1,m:noop$1,d:noop$1}}function create_catch_block_1$3(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$5(e){let t,n,r,i,o;const a=[create_if_block_1$b,create_else_block$7],s=[];function c(u,f){return u[20]?0:1}t=c(e),n=s[t]=a[t](e);let l={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$3,then:create_then_block_1$3,catch:create_catch_block$5,value:21};return handle_promise(e[7](),l),{c(){n.c(),r=space(),i=empty(),l.block.c()},m(u,f){s[t].m(u,f),insert(u,r,f),insert(u,i,f),l.block.m(u,l.anchor=f),l.mount=()=>i.parentNode,l.anchor=i,o=!0},p(u,f){e=u,n.p(e,f)},i(u){o||(transition_in(n),o=!0)},o(u){transition_out(n),o=!1},d(u){s[t].d(u),u&&detach(r),u&&detach(i),l.block.d(u),l.token=null,l=null}}}function create_else_block$7(e){let t;return{c(){t=element("span"),t.textContent="Error",attr(t,"class","error")},m(n,r){insert(n,t,r)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_if_block_1$b(e){let t,n;return t=new Put({props:{element:e[20]}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p:noop$1,i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_catch_block$5(e){return{c:noop$1,m:noop$1,d:noop$1}}function create_then_block_1$3(e){let t;return{c(){t=text("_")},m(n,r){insert(n,t,r)},d(n){n&&detach(t)}}}function create_pending_block_1$3(e){return{c:noop$1,m:noop$1,d:noop$1}}function create_pending_block$5(e){let t;return{c(){t=text("Loading pfp...")},m(n,r){insert(n,t,r)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_fragment$t(e){let t,n,r,i;const o=[create_if_block$i,create_else_block_1$3],a=[];function s(c,l){return c[0]?0:1}return n=s(e),r=a[n]=o[n](e),{c(){t=element("span"),r.c(),attr(t,"class","global_pfp tile "+e[2]+" svelte-mmgef2"),attr(t,"style",e[5]),attr(t,"data-path",e[0]),toggle_class(t,"satin",e[3]==="satin")},m(c,l){insert(c,t,l),a[n].m(t,null),i=!0},p(c,[l]){let u=n;n=s(c),n===u?a[n].p(c,l):(group_outros(),transition_out(a[u],1,1,()=>{a[u]=null}),check_outros(),r=a[n],r?r.p(c,l):(r=a[n]=o[n](c),r.c()),transition_in(r,1),r.m(t,null)),(!i||l&1)&&attr(t,"data-path",c[0])},i(c){i||(transition_in(r),i=!0)},o(c){transition_out(r),i=!1},d(c){c&&detach(t),a[n].d()}}}function instance$s(e,t,n){let r;component_subscribe(e,yw_store_medias,D=>n(16,r=D));const i=createEventDispatcher();let{resource:o=null}=t;const a=o;let{ref:s=a?.pfp||""}=t,{name:c=a?.name||""}=t;const l=c;let{dim:u}=t;const f=u;let{circular:d=!1}=t;const g=d?"":"square";let{bg:_=void 0}=t;const h=_;let{genStyle:A=""}=t;const m=`width:${f}px; height:${f}px; `+(A||"")+(s?`font-size:${f}px;`:"")+(d?`border-radius:${f}px;`:"");let{rootStyle:y=""}=t;const b=y;let{settle:B=void 0}=t;async function v(){const D=r||await Medias.read(),I=await Pfps.load(s,{alt:l,dim:f,medias:D});return queueMicrotask(()=>{i("loaded")}),I}function M(){return B&&queueMicrotask(()=>B()),new Promise(F_NOOP)}return e.$$set=D=>{"resource"in D&&n(8,o=D.resource),"ref"in D&&n(0,s=D.ref),"name"in D&&n(9,c=D.name),"dim"in D&&n(10,u=D.dim),"circular"in D&&n(11,d=D.circular),"bg"in D&&n(12,_=D.bg),"genStyle"in D&&n(13,A=D.genStyle),"rootStyle"in D&&n(14,y=D.rootStyle),"settle"in D&&n(15,B=D.settle)},[s,l,g,h,m,b,v,M,o,c,u,d,_,A,y,B]}class PfpDisplay extends SvelteComponent{constructor(t){super(),init(this,t,instance$s,create_fragment$t,safe_not_equal,{resource:8,ref:0,name:9,dim:10,circular:11,bg:12,genStyle:13,rootStyle:14,settle:15})}}var SX_ICON_CLOSE=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-close-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-close-fg" d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
</svg>
`,Close_svelte_svelte_type_style_lang="";function create_fragment$s(e){let t,n,r,i;return{c(){t=element("div"),attr(t,"class","close icon svelte-1qi9cbu"),attr(t,"style",n=e[1]?`--bg-color:${e[1]};`:""),toggle_class(t,"absolute",e[0])},m(o,a){insert(o,t,a),t.innerHTML=SX_ICON_CLOSE,r||(i=listen(t,"click",e[3]),r=!0)},p(o,[a]){a&2&&n!==(n=o[1]?`--bg-color:${o[1]};`:"")&&attr(t,"style",n),a&1&&toggle_class(t,"absolute",o[0])},i:noop$1,o:noop$1,d(o){o&&detach(t),r=!1,i()}}}function instance$r(e,t,n){let{absolute:r=!1}=t,{heightless:i=!1}=t,{bgColor:o=""}=t;function a(s){bubble.call(this,e,s)}return e.$$set=s=>{"absolute"in s&&n(0,r=s.absolute),"heightless"in s&&n(2,i=s.heightless),"bgColor"in s&&n(1,o=s.bgColor)},[r,o,i,a]}class Close extends SvelteComponent{constructor(t){super(),init(this,t,instance$r,create_fragment$s,safe_not_equal,{absolute:0,heightless:2,bgColor:1})}}function cubicOut(e){const t=e-1;return t*t*t+1}function quintOut(e){return--e*e*e*e*e+1}function slide(e,{delay:t=0,duration:n=400,easing:r=cubicOut}={}){const i=getComputedStyle(e),o=+i.opacity,a=parseFloat(i.height),s=parseFloat(i.paddingTop),c=parseFloat(i.paddingBottom),l=parseFloat(i.marginTop),u=parseFloat(i.marginBottom),f=parseFloat(i.borderTopWidth),d=parseFloat(i.borderBottomWidth);return{delay:t,duration:n,easing:r,css:g=>`overflow: hidden;opacity: ${Math.min(g*20,1)*o};height: ${g*a}px;padding-top: ${g*s}px;padding-bottom: ${g*c}px;margin-top: ${g*l}px;margin-bottom: ${g*u}px;border-top-width: ${g*f}px;border-bottom-width: ${g*d}px;`}}var Load_svelte_svelte_type_style_lang="";function create_catch_block$4(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$4(e){let t,n,r,i;const o=[create_if_block$h,create_else_block$6],a=[];function s(c,l){return c[3]?0:1}return t=s(e),n=a[t]=o[t](e),{c(){n.c(),r=empty()},m(c,l){a[t].m(c,l),insert(c,r,l),i=!0},p(c,l){let u=t;t=s(c),t===u?a[t].p(c,l):(group_outros(),transition_out(a[u],1,1,()=>{a[u]=null}),check_outros(),n=a[t],n?n.p(c,l):(n=a[t]=o[t](c),n.c()),transition_in(n,1),n.m(r.parentNode,r))},i(c){i||(transition_in(n),i=!0)},o(c){transition_out(n),i=!1},d(c){a[t].d(c),c&&detach(r)}}}function create_else_block$6(e){let t,n,r;const i=e[7].default,o=create_slot(i,e,e[6],null),a=o||fallback_block$2(e);return{c(){t=element("span"),a&&a.c(),attr(t,"class",n=null_to_empty(e[1])+" svelte-1nlbgc8")},m(s,c){insert(s,t,c),a&&a.m(t,null),r=!0},p(s,c){o?o.p&&(!r||c&64)&&update_slot_base(o,i,s,s[6],r?get_slot_changes(i,s[6],c,null):get_all_dirty_from_scope(s[6]),null):a&&a.p&&(!r||c&1)&&a.p(s,r?c:-1),(!r||c&2&&n!==(n=null_to_empty(s[1])+" svelte-1nlbgc8"))&&attr(t,"class",n)},i(s){r||(transition_in(a,s),r=!0)},o(s){transition_out(a,s),r=!1},d(s){s&&detach(t),a&&a.d(s)}}}function create_if_block$h(e){let t,n;return{c(){t=element("span"),n=text("Loading..."),attr(t,"class","loading svelte-1nlbgc8"),attr(t,"style",`animation-delay:${e[4]}ms`)},m(r,i){insert(r,t,i),append(t,n)},p:noop$1,i:noop$1,o:noop$1,d(r){r&&detach(t)}}}function fallback_block$2(e){let t=e[9]+"",n;return{c(){n=text(t)},m(r,i){insert(r,n,i)},p(r,i){i&1&&t!==(t=r[9]+"")&&set_data(n,t)},d(r){r&&detach(n)}}}function create_pending_block$4(e){let t,n,r;return{c(){t=element("span"),n=text("Loading..."),attr(t,"class","loading svelte-1nlbgc8"),attr(t,"style",r=`animation-delay:${e[4]}ms; ${e[2]?"height: 1.25em;":""}`)},m(i,o){insert(i,t,o),append(t,n)},p(i,o){o&4&&r!==(r=`animation-delay:${i[4]}ms; ${i[2]?"height: 1.25em;":""}`)&&attr(t,"style",r)},i:noop$1,o:noop$1,d(i){i&&detach(t)}}}function create_fragment$r(e){let t,n,r,i={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block$4,then:create_then_block$4,catch:create_catch_block$4,value:9,blocks:[,,,]};return handle_promise(n=e[0],i),{c(){t=empty(),i.block.c()},m(o,a){insert(o,t,a),i.block.m(o,i.anchor=a),i.mount=()=>t.parentNode,i.anchor=t,r=!0},p(o,[a]){e=o,i.ctx=e,a&1&&n!==(n=e[0])&&handle_promise(n,i)||update_await_block_branch(i,e,a)},i(o){r||(transition_in(i.block),r=!0)},o(o){for(let a=0;a<3;a+=1){const s=i.blocks[a];transition_out(s)}r=!1},d(o){o&&detach(t),i.block.d(o),i.token=null,i=null}}}let c_global=0;function instance$q(e,t,n){let{$$slots:r={},$$scope:i}=t,{forever:o=!1}=t,{input:a=o?forever():null}=t,{classes:s=""}=t,{pad:c=!1}=t,{debug:l=!1}=t,u=c_global;c_global+=1;let f=u*100%1e3;return e.$$set=d=>{"forever"in d&&n(5,o=d.forever),"input"in d&&n(0,a=d.input),"classes"in d&&n(1,s=d.classes),"pad"in d&&n(2,c=d.pad),"debug"in d&&n(3,l=d.debug),"$$scope"in d&&n(6,i=d.$$scope)},[a,s,c,l,f,o,i,r]}class Load extends SvelteComponent{constructor(t){super(),init(this,t,instance$q,create_fragment$r,safe_not_equal,{forever:5,input:0,classes:1,pad:2,debug:3})}}var Row_svelte_svelte_type_style_lang="";const get_below_slot_changes=e=>({}),get_below_slot_context=e=>({}),get_tags_slot_changes=e=>({}),get_tags_slot_context=e=>({}),get_right_slot_changes=e=>({}),get_right_slot_context=e=>({}),get_status_slot_changes=e=>({}),get_status_slot_context=e=>({}),get_detail_slot_changes=e=>({}),get_detail_slot_context=e=>({}),get_icon_slot_changes_1=e=>({}),get_icon_slot_context_1=e=>({}),get_icon_slot_changes=e=>({}),get_icon_slot_context=e=>({});function fallback_block_3(e){let t,n;return t=new PfpDisplay({props:{ref:e[11],name:e[9],dim:e[12]}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p:noop$1,i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function fallback_block_2(e){let t;const n=e[24].icon,r=create_slot(n,e,e[23],get_icon_slot_context_1),i=r||fallback_block_3(e);return{c(){i&&i.c()},m(o,a){i&&i.m(o,a),t=!0},p(o,a){r&&r.p&&(!t||a[0]&8388608)&&update_slot_base(r,n,o,o[23],t?get_slot_changes(n,o[23],a,get_icon_slot_changes_1):get_all_dirty_from_scope(o[23]),get_icon_slot_context_1)},i(o){t||(transition_in(i,o),t=!0)},o(o){transition_out(i,o),t=!1},d(o){i&&i.d(o)}}}function create_if_block_9$2(e){let t;return{c(){t=element("span"),t.textContent=`(${e[10]})`,attr(t,"class","postname svelte-1o3b1ul")},m(n,r){insert(n,t,r)},p:noop$1,d(n){n&&detach(t)}}}function create_if_block_8$2(e){return{c:noop$1,m:noop$1,d:noop$1}}function create_if_block_5$3(e){let t,n,r,i;const o=[create_if_block_6$3,create_if_block_7$3],a=[];function s(c,l){return c[5]||c[2]||c[15].detail?0:c[4]?1:-1}return~(n=s(e))&&(r=a[n]=o[n](e)),{c(){t=element("div"),r&&r.c(),attr(t,"class","subtitle svelte-1o3b1ul")},m(c,l){insert(c,t,l),~n&&a[n].m(t,null),i=!0},p(c,l){let u=n;n=s(c),n===u?~n&&a[n].p(c,l):(r&&(group_outros(),transition_out(a[u],1,1,()=>{a[u]=null}),check_outros()),~n?(r=a[n],r?r.p(c,l):(r=a[n]=o[n](c),r.c()),transition_in(r,1),r.m(t,null)):r=null)},i(c){i||(transition_in(r),i=!0)},o(c){transition_out(r),i=!1},d(c){c&&detach(t),~n&&a[n].d()}}}function create_if_block_7$3(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_if_block_6$3(e){let t,n;const r=e[24].detail,i=create_slot(r,e,e[23],get_detail_slot_context),o=i||fallback_block_1$1(e);return{c(){t=element("span"),o&&o.c(),attr(t,"class","detail svelte-1o3b1ul")},m(a,s){insert(a,t,s),o&&o.m(t,null),n=!0},p(a,s){i?i.p&&(!n||s[0]&8388608)&&update_slot_base(i,r,a,a[23],n?get_slot_changes(r,a[23],s,get_detail_slot_changes):get_all_dirty_from_scope(a[23]),get_detail_slot_context):o&&o.p&&(!n||s[0]&100)&&o.p(a,n?s:[-1,-1])},i(a){n||(transition_in(o,a),n=!0)},o(a){transition_out(o,a),n=!1},d(a){a&&detach(t),o&&o.d(a)}}}function fallback_block_1$1(e){let t,n=(e[5]||e[2])+"",r;return{c(){t=text(e[6]),r=text(n)},m(i,o){insert(i,t,o),insert(i,r,o)},p(i,o){o[0]&64&&set_data(t,i[6]),o[0]&36&&n!==(n=(i[5]||i[2])+"")&&set_data(r,n)},d(i){i&&detach(t),i&&detach(r)}}}function create_if_block_3$6(e){let t,n,r,i,o,a;r=new Load({props:{input:e[0],pad:!0}});let s=e[1]&&create_if_block_4$5(e);return{c(){t=element("div"),n=element("span"),create_component(r.$$.fragment),i=space(),s&&s.c(),o=empty(),attr(n,"class","number svelte-1o3b1ul"),attr(t,"class","amount svelte-1o3b1ul")},m(c,l){insert(c,t,l),append(t,n),mount_component(r,n,null),insert(c,i,l),s&&s.m(c,l),insert(c,o,l),a=!0},p(c,l){const u={};l[0]&1&&(u.input=c[0]),r.$set(u),c[1]?s?(s.p(c,l),l[0]&2&&transition_in(s,1)):(s=create_if_block_4$5(c),s.c(),transition_in(s,1),s.m(o.parentNode,o)):s&&(group_outros(),transition_out(s,1,1,()=>{s=null}),check_outros())},i(c){a||(transition_in(r.$$.fragment,c),transition_in(s),a=!0)},o(c){transition_out(r.$$.fragment,c),transition_out(s),a=!1},d(c){c&&detach(t),destroy_component(r),c&&detach(i),s&&s.d(c),c&&detach(o)}}}function create_if_block_2$9(e){let t;const n=e[24].status,r=create_slot(n,e,e[23],get_status_slot_context);return{c(){r&&r.c()},m(i,o){r&&r.m(i,o),t=!0},p(i,o){r&&r.p&&(!t||o[0]&8388608)&&update_slot_base(r,n,i,i[23],t?get_slot_changes(n,i[23],o,get_status_slot_changes):get_all_dirty_from_scope(i[23]),get_status_slot_context)},i(i){t||(transition_in(r,i),t=!0)},o(i){transition_out(r,i),t=!1},d(i){r&&r.d(i)}}}function create_if_block_4$5(e){let t,n,r;return n=new Load({props:{input:e[1],classes:"fiat",pad:!0}}),{c(){t=element("div"),create_component(n.$$.fragment),attr(t,"class","fiat-container svelte-1o3b1ul")},m(i,o){insert(i,t,o),mount_component(n,t,null),r=!0},p(i,o){const a={};o[0]&2&&(a.input=i[1]),n.$set(a)},i(i){r||(transition_in(n.$$.fragment,i),r=!0)},o(i){transition_out(n.$$.fragment,i),r=!1},d(i){i&&detach(t),destroy_component(n)}}}function create_if_block_1$a(e){let t;const n=e[24].right,r=create_slot(n,e,e[23],get_right_slot_context);return{c(){r&&r.c()},m(i,o){r&&r.m(i,o),t=!0},p(i,o){r&&r.p&&(!t||o[0]&8388608)&&update_slot_base(r,n,i,i[23],t?get_slot_changes(n,i[23],o,get_right_slot_changes):get_all_dirty_from_scope(i[23]),get_right_slot_context)},i(i){t||(transition_in(r,i),t=!0)},o(i){transition_out(r,i),t=!1},d(i){r&&r.d(i)}}}function create_if_block$g(e){let t;const n=e[24].tags,r=create_slot(n,e,e[23],get_tags_slot_context);return{c(){r&&r.c()},m(i,o){r&&r.m(i,o),t=!0},p(i,o){r&&r.p&&(!t||o[0]&8388608)&&update_slot_base(r,n,i,i[23],t?get_slot_changes(n,i[23],o,get_tags_slot_changes):get_all_dirty_from_scope(i[23]),get_tags_slot_context)},i(i){t||(transition_in(r,i),t=!0)},o(i){transition_out(r,i),t=!1},d(i){r&&r.d(i)}}}function create_fragment$q(e){let t,n,r,i,o,a,s,c,l,u,f,d,g,_,h,A,m,y,b,B,v,M,D,I,C;const E=e[24].icon,N=create_slot(E,e,e[23],get_icon_slot_context),S=N||fallback_block_2(e);let k=e[10]&&create_if_block_9$2(e),Q=e[3]&&create_if_block_8$2(),w=(e[4]||e[2]||e[5]||e[14].length||e[15].detail)&&create_if_block_5$3(e);const T=[create_if_block_2$9,create_if_block_3$6],O=[];function P(U,V){return U[15].status?0:U[0]?1:-1}~(m=P(e))&&(y=O[m]=T[m](e));let F=e[15].right&&create_if_block_1$a(e),L=(e[14].length||e[15].tags)&&create_if_block$g(e);const G=e[24].below,Y=create_slot(G,e,e[23],get_below_slot_context);return{c(){t=element("div"),n=element("div"),r=element("span"),S&&S.c(),o=space(),a=element("span"),s=element("span"),c=element("div"),l=element("span"),u=element("span"),f=text(e[9]),d=space(),k&&k.c(),g=space(),Q&&Q.c(),_=space(),w&&w.c(),h=space(),A=element("span"),y&&y.c(),b=space(),F&&F.c(),B=space(),v=element("div"),L&&L.c(),M=space(),Y&&Y.c(),attr(r,"class",i="icon "+e[8]+" svelte-1o3b1ul"),attr(u,"class","text svelte-1o3b1ul"),attr(l,"class","name svelte-1o3b1ul"),attr(c,"class","title svelte-1o3b1ul"),attr(s,"class","main part svelte-1o3b1ul"),attr(A,"class","status part svelte-1o3b1ul"),attr(a,"class","content svelte-1o3b1ul"),attr(n,"class","banner svelte-1o3b1ul"),attr(v,"class","rest svelte-1o3b1ul"),attr(t,"class","row "+e[13]+" svelte-1o3b1ul"),attr(t,"style",e[7])},m(U,V){insert(U,t,V),append(t,n),append(n,r),S&&S.m(r,null),append(n,o),append(n,a),append(a,s),append(s,c),append(c,l),append(l,u),append(u,f),append(u,d),k&&k.m(u,null),append(c,g),Q&&Q.m(c,null),append(s,_),w&&w.m(s,null),append(a,h),append(a,A),~m&&O[m].m(A,null),append(n,b),F&&F.m(n,null),append(t,B),append(t,v),L&&L.m(v,null),append(v,M),Y&&Y.m(v,null),D=!0,I||(C=listen(t,"click",e[25]),I=!0)},p(U,V){N?N.p&&(!D||V[0]&8388608)&&update_slot_base(N,E,U,U[23],D?get_slot_changes(E,U[23],V,get_icon_slot_changes):get_all_dirty_from_scope(U[23]),get_icon_slot_context):S&&S.p&&(!D||V[0]&8388608)&&S.p(U,D?V:[-1,-1]),(!D||V[0]&256&&i!==(i="icon "+U[8]+" svelte-1o3b1ul"))&&attr(r,"class",i),U[10]&&k.p(U,V),U[3]?Q||(Q=create_if_block_8$2(),Q.c(),Q.m(c,null)):Q&&(Q.d(1),Q=null),U[4]||U[2]||U[5]||U[14].length||U[15].detail?w?(w.p(U,V),V[0]&32820&&transition_in(w,1)):(w=create_if_block_5$3(U),w.c(),transition_in(w,1),w.m(s,null)):w&&(group_outros(),transition_out(w,1,1,()=>{w=null}),check_outros());let q=m;m=P(U),m===q?~m&&O[m].p(U,V):(y&&(group_outros(),transition_out(O[q],1,1,()=>{O[q]=null}),check_outros()),~m?(y=O[m],y?y.p(U,V):(y=O[m]=T[m](U),y.c()),transition_in(y,1),y.m(A,null)):y=null),U[15].right?F?(F.p(U,V),V[0]&32768&&transition_in(F,1)):(F=create_if_block_1$a(U),F.c(),transition_in(F,1),F.m(n,null)):F&&(group_outros(),transition_out(F,1,1,()=>{F=null}),check_outros()),U[14].length||U[15].tags?L?(L.p(U,V),V[0]&32768&&transition_in(L,1)):(L=create_if_block$g(U),L.c(),transition_in(L,1),L.m(v,M)):L&&(group_outros(),transition_out(L,1,1,()=>{L=null}),check_outros()),Y&&Y.p&&(!D||V[0]&8388608)&&update_slot_base(Y,G,U,U[23],D?get_slot_changes(G,U[23],V,get_below_slot_changes):get_all_dirty_from_scope(U[23]),get_below_slot_context),(!D||V[0]&128)&&attr(t,"style",U[7])},i(U){D||(transition_in(S,U),transition_in(w),transition_in(y),transition_in(F),transition_in(L),transition_in(Y,U),D=!0)},o(U){transition_out(S,U),transition_out(w),transition_out(y),transition_out(F),transition_out(L),transition_out(Y,U),D=!1},d(U){U&&detach(t),S&&S.d(U),k&&k.d(),Q&&Q.d(),w&&w.d(),~m&&O[m].d(),F&&F.d(),L&&L.d(),Y&&Y.d(U),I=!1,C()}}}function instance$p(e,t,n){let r;component_subscribe(e,yw_store_tags,O=>n(27,r=O));let{$$slots:i={},$$scope:o}=t;const a=compute_slots(i);let{resourcePath:s=""}=t;const c=s;let{resource:l=null}=t;const u=l;let{name:f=u?.name}=t;const d=f;let{postname:g=""}=t;const _=g;let{pfp:h=u?.pfp}=t;const A=h;let{pfpDim:m=36}=t;const y=m;let{amount:b=""}=t,{fiat:B=""}=t,{symbol:v=""}=t,{lockIcon:M=!1}=t,{address:D=""}=t,{detail:I=""}=t,{prefix:C=""}=t,{rootStyle:E=""}=t,{rootClasses:N=""}=t;const S=N;let{iconClass:k=""}=t;const Q=r?.getTagsFor(c)||[],w=new Set;onDestroy(()=>{for(const O of w)clearInterval(O)});function T(O){bubble.call(this,e,O)}return e.$$set=O=>{"resourcePath"in O&&n(16,s=O.resourcePath),"resource"in O&&n(17,l=O.resource),"name"in O&&n(18,f=O.name),"postname"in O&&n(19,g=O.postname),"pfp"in O&&n(20,h=O.pfp),"pfpDim"in O&&n(21,m=O.pfpDim),"amount"in O&&n(0,b=O.amount),"fiat"in O&&n(1,B=O.fiat),"symbol"in O&&n(2,v=O.symbol),"lockIcon"in O&&n(3,M=O.lockIcon),"address"in O&&n(4,D=O.address),"detail"in O&&n(5,I=O.detail),"prefix"in O&&n(6,C=O.prefix),"rootStyle"in O&&n(7,E=O.rootStyle),"rootClasses"in O&&n(22,N=O.rootClasses),"iconClass"in O&&n(8,k=O.iconClass),"$$scope"in O&&n(23,o=O.$$scope)},[b,B,v,M,D,I,C,E,k,d,_,A,y,S,Q,a,s,l,f,g,h,m,N,o,i,T]}class Row extends SvelteComponent{constructor(t){super(),init(this,t,instance$p,create_fragment$q,safe_not_equal,{resourcePath:16,resource:17,name:18,postname:19,pfp:20,pfpDim:21,amount:0,fiat:1,symbol:2,lockIcon:3,address:4,detail:5,prefix:6,rootStyle:7,rootClasses:22,iconClass:8},null,[-1,-1])}}var SX_ICON_ARROW_LEFT=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-arrow-left-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-arrow-left-fg" d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z"/>
</svg>
`,SX_ICON_SEARCH=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-search-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-search-fg" d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
</svg>
`,SX_CHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20">
	<style type="text/css">
		.s2r-checked-circle-fg {
			fill: var(--svg-color-fg, currentColor);
		}
		.s2r-checked-circle-bg {
			fill: var(--svg-color-bg, black);
		}
	</style>
	<circle class="s2r-checked-circle-bg" cx="10" cy="10" r="8" />
	<path class="s2r-checked-circle-fg" d="M10.0003 1.6665C5.40033 1.6665 1.66699 5.39984 1.66699 9.99984C1.66699 14.5998 5.40033 18.3332 10.0003 18.3332C14.6003 18.3332 18.3337 14.5998 18.3337 9.99984C18.3337 5.39984 14.6003 1.6665 10.0003 1.6665ZM8.33366 14.1665L4.16699 9.99984L5.34199 8.82484L8.33366 11.8082L14.6587 5.48317L15.8337 6.6665L8.33366 14.1665Z" />
</svg>
`,Header_svelte_svelte_type_style_lang="";function get_each_context$a(e,t,n){const r=e.slice();return r[48]=t[n][0],r[49]=t[n][1],r}function get_each_context_1$1(e,t,n){const r=e.slice();return r[53]=t[n][0],r[54]=t[n][1],r}function create_if_block_11(e){let t,n;return t=new StarShellLogo({props:{dim:48,alt:"Click to view general status"}}),t.$on("click",e[33]),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p:noop$1,i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_if_block_10$1(e){let t,n,r;return{c(){t=element("span"),attr(t,"class","back svelte-1fcz7ql")},m(i,o){insert(i,t,o),t.innerHTML=SX_ICON_ARROW_LEFT,n||(r=listen(t,"click",e[32]),n=!0)},p:noop$1,i:noop$1,o:noop$1,d(i){i&&detach(t),n=!1,r()}}}function create_if_block_8$1(e){let t,n,r,i,o=e[1]&&create_if_block_9$1(e);return{c(){t=element("span"),n=text(e[0]),r=space(),o&&o.c(),i=empty(),attr(t,"class","name svelte-1fcz7ql")},m(a,s){insert(a,t,s),append(t,n),insert(a,r,s),o&&o.m(a,s),insert(a,i,s)},p(a,s){s[0]&1&&set_data(n,a[0]),a[1]?o?o.p(a,s):(o=create_if_block_9$1(a),o.c(),o.m(i.parentNode,i)):o&&(o.d(1),o=null)},d(a){a&&detach(t),a&&detach(r),o&&o.d(a),a&&detach(i)}}}function create_if_block_9$1(e){let t,n,r;return{c(){t=element("span"),n=text("- "),r=text(e[1]),attr(t,"class","symbol svelte-1fcz7ql")},m(i,o){insert(i,t,o),append(t,n),append(t,r)},p(i,o){o[0]&2&&set_data(r,i[1])},d(i){i&&detach(t)}}}function create_if_block_5$2(e){let t,n=e[8],r,i,o,a,s,c=create_key_block_1(e),l=e[7]&&create_if_block_6$2(e);return{c(){t=element("span"),c.c(),r=space(),l&&l.c(),i=empty(),attr(t,"class","network svelte-1fcz7ql")},m(u,f){insert(u,t,f),c.m(t,null),insert(u,r,f),l&&l.m(u,f),insert(u,i,f),o=!0,a||(s=listen(t,"click",e[34]),a=!0)},p(u,f){f[0]&256&&safe_not_equal(n,n=u[8])?(group_outros(),transition_out(c,1,1,noop$1),check_outros(),c=create_key_block_1(u),c.c(),transition_in(c,1),c.m(t,null)):c.p(u,f),u[7]?l?(l.p(u,f),f[0]&128&&transition_in(l,1)):(l=create_if_block_6$2(u),l.c(),transition_in(l,1),l.m(i.parentNode,i)):l&&(group_outros(),transition_out(l,1,1,()=>{l=null}),check_outros())},i(u){o||(transition_in(c),transition_in(l),o=!0)},o(u){transition_out(c),transition_out(l),o=!1},d(u){u&&detach(t),c.d(u),u&&detach(r),l&&l.d(u),u&&detach(i),a=!1,s()}}}function create_key_block_1(e){let t,n;const r=[{resource:e[8]},e[21](!1)];let i={};for(let o=0;o<r.length;o+=1)i=assign(i,r[o]);return t=new PfpDisplay({props:i}),{c(){create_component(t.$$.fragment)},m(o,a){mount_component(t,o,a),n=!0},p(o,a){const s=a[0]&2097408?get_spread_update(r,[a[0]&256&&{resource:o[8]},a[0]&2097152&&get_spread_object(o[21](!1))]):{};t.$set(s)},i(o){n||(transition_in(t.$$.fragment,o),n=!0)},o(o){transition_out(t.$$.fragment,o),n=!1},d(o){destroy_component(t,o)}}}function create_if_block_6$2(e){let t,n,r;function i(a){e[36](a)}let o={title:"Switch Network",$$slots:{rows:[create_rows_slot_1]},$$scope:{ctx:e}};return e[7]!==void 0&&(o.open=e[7]),t=new OverlaySelect({props:o}),binding_callbacks.push(()=>bind(t,"open",i)),{c(){create_component(t.$$.fragment)},m(a,s){mount_component(t,a,s),r=!0},p(a,s){const c={};s[0]&640|s[1]&67108864&&(c.$$scope={dirty:s,ctx:a}),!n&&s[0]&128&&(n=!0,c.open=a[7],add_flush_callback(()=>n=!1)),t.$set(c)},i(a){r||(transition_in(t.$$.fragment,a),r=!0)},o(a){transition_out(t.$$.fragment,a),r=!1},d(a){destroy_component(t,a)}}}function create_catch_block_1$2(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block_1$2(e){let t,n,r=e[52].entries(),i=[];for(let a=0;a<r.length;a+=1)i[a]=create_each_block_1$1(get_each_context_1$1(e,r,a));const o=a=>transition_out(i[a],1,1,()=>{i[a]=null});return{c(){for(let a=0;a<i.length;a+=1)i[a].c();t=empty()},m(a,s){for(let c=0;c<i.length;c+=1)i[c].m(a,s);insert(a,t,s),n=!0},p(a,s){if(s[0]&640){r=a[52].entries();let c;for(c=0;c<r.length;c+=1){const l=get_each_context_1$1(a,r,c);i[c]?(i[c].p(l,s),transition_in(i[c],1)):(i[c]=create_each_block_1$1(l),i[c].c(),transition_in(i[c],1),i[c].m(t.parentNode,t))}for(group_outros(),c=r.length;c<i.length;c+=1)o(c);check_outros()}},i(a){if(!n){for(let s=0;s<r.length;s+=1)transition_in(i[s]);n=!0}},o(a){i=i.filter(Boolean);for(let s=0;s<i.length;s+=1)transition_out(i[s]);n=!1},d(a){destroy_each(i,a),a&&detach(t)}}}function create_if_block_7$2(e){let t;return{c(){t=element("span"),attr(t,"class","overlay-select icon svelte-1fcz7ql"),set_style(t,"--icon-color","var(--theme-color-primary)")},m(n,r){insert(n,t,r),t.innerHTML=SX_CHECKED},p:noop$1,d(n){n&&detach(t)}}}function create_right_slot_1(e){let t,n=e[9]===e[53]&&create_if_block_7$2();return{c(){n&&n.c(),t=space()},m(r,i){n&&n.m(r,i),insert(r,t,i)},p(r,i){r[9]===r[53]?n?n.p(r,i):(n=create_if_block_7$2(),n.c(),n.m(t.parentNode,t)):n&&(n.d(1),n=null)},d(r){n&&n.d(r),r&&detach(t)}}}function create_each_block_1$1(e){let t,n;function r(){return e[35](e[53])}return t=new Row({props:{resource:e[54],detail:"Default Provider",$$slots:{right:[create_right_slot_1]},$$scope:{ctx:e}}}),t.$on("click",r),{c(){create_component(t.$$.fragment)},m(i,o){mount_component(t,i,o),n=!0},p(i,o){e=i;const a={};o[0]&512|o[1]&67108864&&(a.$$scope={dirty:o,ctx:e}),t.$set(a)},i(i){n||(transition_in(t.$$.fragment,i),n=!0)},o(i){transition_out(t.$$.fragment,i),n=!1},d(i){destroy_component(t,i)}}}function create_pending_block_1$2(e){let t;return{c(){t=text("...")},m(n,r){insert(n,t,r)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_rows_slot_1(e){let t,n,r={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$2,then:create_then_block_1$2,catch:create_catch_block_1$2,value:52,blocks:[,,,]};return handle_promise(Chains.read(),r),{c(){t=empty(),r.block.c()},m(i,o){insert(i,t,o),r.block.m(i,r.anchor=o),r.mount=()=>t.parentNode,r.anchor=t,n=!0},p(i,o){e=i,update_await_block_branch(r,e,o)},i(i){n||(transition_in(r.block),n=!0)},o(i){for(let o=0;o<3;o+=1){const a=r.blocks[o];transition_out(a)}n=!1},d(i){i&&detach(t),r.block.d(i),r.token=null,r=null}}}function create_if_block_2$8(e){let t,n=e[11],r,i,o,a,s,c=create_key_block$1(e),l=e[10]&&create_if_block_3$5(e);return{c(){t=element("span"),c.c(),r=space(),l&&l.c(),i=empty(),attr(t,"class","account svelte-1fcz7ql")},m(u,f){insert(u,t,f),c.m(t,null),insert(u,r,f),l&&l.m(u,f),insert(u,i,f),o=!0,a||(s=listen(t,"click",e[37]),a=!0)},p(u,f){f[0]&2048&&safe_not_equal(n,n=u[11])?(group_outros(),transition_out(c,1,1,noop$1),check_outros(),c=create_key_block$1(u),c.c(),transition_in(c,1),c.m(t,null)):c.p(u,f),u[10]?l?(l.p(u,f),f[0]&1024&&transition_in(l,1)):(l=create_if_block_3$5(u),l.c(),transition_in(l,1),l.m(i.parentNode,i)):l&&(group_outros(),transition_out(l,1,1,()=>{l=null}),check_outros())},i(u){o||(transition_in(c),transition_in(l),o=!0)},o(u){transition_out(c),transition_out(l),o=!1},d(u){u&&detach(t),c.d(u),u&&detach(r),l&&l.d(u),u&&detach(i),a=!1,s()}}}function create_key_block$1(e){let t,n;const r=[{resource:e[11]},e[21](!0)];let i={};for(let o=0;o<r.length;o+=1)i=assign(i,r[o]);return t=new PfpDisplay({props:i}),{c(){create_component(t.$$.fragment)},m(o,a){mount_component(t,o,a),n=!0},p(o,a){const s=a[0]&2099200?get_spread_update(r,[a[0]&2048&&{resource:o[11]},a[0]&2097152&&get_spread_object(o[21](!0))]):{};t.$set(s)},i(o){n||(transition_in(t.$$.fragment,o),n=!0)},o(o){transition_out(t.$$.fragment,o),n=!1},d(o){destroy_component(t,o)}}}function create_if_block_3$5(e){let t,n,r;function i(a){e[39](a)}let o={title:"Switch Account",$$slots:{rows:[create_rows_slot]},$$scope:{ctx:e}};return e[10]!==void 0&&(o.open=e[10]),t=new OverlaySelect({props:o}),binding_callbacks.push(()=>bind(t,"open",i)),{c(){create_component(t.$$.fragment)},m(a,s){mount_component(t,a,s),r=!0},p(a,s){const c={};s[0]&5120|s[1]&67108864&&(c.$$scope={dirty:s,ctx:a}),!n&&s[0]&1024&&(n=!0,c.open=a[10],add_flush_callback(()=>n=!1)),t.$set(c)},i(a){r||(transition_in(t.$$.fragment,a),r=!0)},o(a){transition_out(t.$$.fragment,a),r=!1},d(a){destroy_component(t,a)}}}function create_catch_block$3(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$3(e){let t,n,r=e[47].entries(),i=[];for(let a=0;a<r.length;a+=1)i[a]=create_each_block$a(get_each_context$a(e,r,a));const o=a=>transition_out(i[a],1,1,()=>{i[a]=null});return{c(){for(let a=0;a<i.length;a+=1)i[a].c();t=empty()},m(a,s){for(let c=0;c<i.length;c+=1)i[c].m(a,s);insert(a,t,s),n=!0},p(a,s){if(s[0]&5120){r=a[47].entries();let c;for(c=0;c<r.length;c+=1){const l=get_each_context$a(a,r,c);i[c]?(i[c].p(l,s),transition_in(i[c],1)):(i[c]=create_each_block$a(l),i[c].c(),transition_in(i[c],1),i[c].m(t.parentNode,t))}for(group_outros(),c=r.length;c<i.length;c+=1)o(c);check_outros()}},i(a){if(!n){for(let s=0;s<r.length;s+=1)transition_in(i[s]);n=!0}},o(a){i=i.filter(Boolean);for(let s=0;s<i.length;s+=1)transition_out(i[s]);n=!1},d(a){destroy_each(i,a),a&&detach(t)}}}function create_if_block_4$4(e){let t;return{c(){t=element("span"),attr(t,"class","overlay-select icon svelte-1fcz7ql"),set_style(t,"--icon-color","var(--theme-color-primary)")},m(n,r){insert(n,t,r),t.innerHTML=SX_CHECKED},p:noop$1,d(n){n&&detach(t)}}}function create_right_slot$2(e){let t,n=e[12]===e[48]&&create_if_block_4$4();return{c(){n&&n.c(),t=space()},m(r,i){n&&n.m(r,i),insert(r,t,i)},p(r,i){r[12]===r[48]?n?n.p(r,i):(n=create_if_block_4$4(),n.c(),n.m(t.parentNode,t)):n&&(n.d(1),n=null)},d(r){n&&n.d(r),r&&detach(t)}}}function create_icon_slot$1(e){let t,n,r;return t=new PfpDisplay({props:{dim:32,resource:e[49]}}),{c(){create_component(t.$$.fragment),n=space()},m(i,o){mount_component(t,i,o),insert(i,n,o),r=!0},p:noop$1,i(i){r||(transition_in(t.$$.fragment,i),r=!0)},o(i){transition_out(t.$$.fragment,i),r=!1},d(i){destroy_component(t,i),i&&detach(n)}}}function create_each_block$a(e){let t,n;function r(){return e[38](e[48])}return t=new Row({props:{resource:e[49],resourcePath:e[48],detail:e[49].extra?.total_fiat_cache??"(?)",$$slots:{icon:[create_icon_slot$1],right:[create_right_slot$2]},$$scope:{ctx:e}}}),t.$on("click",r),{c(){create_component(t.$$.fragment)},m(i,o){mount_component(t,i,o),n=!0},p(i,o){e=i;const a={};o[0]&4096|o[1]&67108864&&(a.$$scope={dirty:o,ctx:e}),t.$set(a)},i(i){n||(transition_in(t.$$.fragment,i),n=!0)},o(i){transition_out(t.$$.fragment,i),n=!1},d(i){destroy_component(t,i)}}}function create_pending_block$3(e){let t;return{c(){t=text("...")},m(n,r){insert(n,t,r)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_rows_slot(e){let t,n,r={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block$3,then:create_then_block$3,catch:create_catch_block$3,value:47,blocks:[,,,]};return handle_promise(Accounts.read(),r),{c(){t=empty(),r.block.c()},m(i,o){insert(i,t,o),r.block.m(i,r.anchor=o),r.mount=()=>t.parentNode,r.anchor=t,n=!0},p(i,o){e=i,update_await_block_branch(r,e,o)},i(i){n||(transition_in(r.block),n=!0)},o(i){for(let o=0;o<3;o+=1){const a=r.blocks[o];transition_out(a)}n=!1},d(i){i&&detach(t),r.block.d(i),r.token=null,r=null}}}function create_if_block_1$9(e){let t,n;return t=new Close({}),t.$on("click",e[40]),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p:noop$1,i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_if_block$f(e){let t,n,r,i,o,a;return{c(){t=element("div"),n=element("input"),r=space(),i=element("span"),attr(n,"type","text"),n.autofocus=e[2],attr(n,"placeholder","Search anything: token, account, contact, txn..."),attr(i,"class","action svelte-1fcz7ql"),attr(t,"class","search svelte-1fcz7ql")},m(s,c){insert(s,t,c),append(t,n),set_input_value(n,e[5]),e[42](n),append(t,r),append(t,i),i.innerHTML=SX_ICON_SEARCH,e[2]&&n.focus(),o||(a=[listen(n,"input",e[41]),listen(n,"input",e[23])],o=!0)},p(s,c){c[0]&4&&(n.autofocus=s[2]),c[0]&32&&n.value!==s[5]&&set_input_value(n,s[5])},d(s){s&&detach(t),e[42](null),o=!1,run_all(a)}}}function create_fragment$p(e){let t,n,r,i,o,a,s,c,l,u,f,d,g,_,h,A;const m=[create_if_block_10$1,create_if_block_11],y=[];function b(C,E){return C[13]?0:!C[14]&&!C[15]?1:-1}~(r=b(e))&&(i=y[r]=m[r](e));let B=e[0]&&create_if_block_8$1(e),v=e[17]&&create_if_block_5$2(e),M=e[16]&&create_if_block_2$8(e),D=e[14]&&create_if_block_1$9(e),I=e[18]&&create_if_block$f(e);return{c(){t=element("div"),n=element("div"),i&&i.c(),o=space(),a=element("span"),s=element("div"),B&&B.c(),c=space(),l=element("div"),l.textContent=`${e[19]}`,u=space(),f=element("span"),d=element("span"),v&&v.c(),g=space(),M&&M.c(),_=space(),D&&D.c(),h=space(),I&&I.c(),attr(s,"class","title svelte-1fcz7ql"),attr(l,"class","subtitle svelte-1fcz7ql"),attr(a,"class","main svelte-1fcz7ql"),attr(d,"class","cluster svelte-1fcz7ql"),attr(f,"class","right svelte-1fcz7ql"),toggle_class(f,"heightless",!e[17]&&e[14]),attr(n,"class","top svelte-1fcz7ql"),attr(t,"class","header svelte-1fcz7ql")},m(C,E){insert(C,t,E),append(t,n),~r&&y[r].m(n,null),append(n,o),append(n,a),append(a,s),B&&B.m(s,null),append(a,c),append(a,l),append(n,u),append(n,f),append(f,d),v&&v.m(d,null),append(d,g),M&&M.m(d,null),append(f,_),D&&D.m(f,null),append(t,h),I&&I.m(t,null),e[43](t),A=!0},p(C,E){i&&i.p(C,E),C[0]?B?B.p(C,E):(B=create_if_block_8$1(C),B.c(),B.m(s,null)):B&&(B.d(1),B=null),C[17]&&v.p(C,E),C[16]&&M.p(C,E),C[14]&&D.p(C,E),C[18]&&I.p(C,E)},i(C){A||(transition_in(i),transition_in(v),transition_in(M),transition_in(D),A=!0)},o(C){transition_out(i),transition_out(v),transition_out(M),transition_out(D),A=!1},d(C){C&&detach(t),~r&&y[r].d(),B&&B.d(),v&&v.d(),M&&M.d(),D&&D.d(),I&&I.d(),e[43](null)}}}function instance$o(e,t,n){let r,i,o,a,s,c,l,u,f,d;component_subscribe(e,yw_search,x=>n(44,r=x)),component_subscribe(e,yw_cancel_search,x=>n(45,i=x)),component_subscribe(e,yw_thread,x=>n(46,o=x)),component_subscribe(e,yw_menu_vendor,x=>n(6,a=x)),component_subscribe(e,yw_overlay_network,x=>n(7,s=x)),component_subscribe(e,yw_chain,x=>n(8,c=x)),component_subscribe(e,yw_chain_ref,x=>n(9,l=x)),component_subscribe(e,yw_overlay_account,x=>n(10,u=x)),component_subscribe(e,yw_account,x=>n(11,f=x)),component_subscribe(e,yw_account_ref,x=>n(12,d=x));let{pops:g=!1}=t;const _=g;let{exits:h=!1}=t;const A=h;let{plain:m=!1}=t;const y=m;let{account:b=!1}=t;const B=b;let{network:v=!1}=t;const M=v;let{search:D=!1}=t;const I=D;let{title:C=""}=t,{symbol:E=""}=t,{subtitle:N=""}=t;const S=N,k=createEventDispatcher(),Q=(x=!1)=>({dim:21,bg:"satin",genStyle:"font-size:21px; outline:none;",rootStyle:`
			padding: 5px 6px;
			border: 2px solid var(--theme-color-border);
			border-radius: ${x?"0 4px 4px 0":"4px 0 0 4px"};
		`.replace(/\s+/g," ")}),w=getContext("page");let T,O,{isSearchScreen:P=!1}=t,{search_input:F=""}=t,L=r;yw_search.subscribe(x=>{P&&x?(console.log("search screen and search text"),n(5,L=x),O&&setTimeout(()=>{O.focus()},0)):x||n(5,L="")});function G(x){if(P)L?k("search",L):(set_store_value(yw_search,r="",r),i());else if(L){o.id;const ee=qs(T,":focus");ee&&ee.blur(),set_store_value(yw_cancel_search,i=()=>{n(5,L=""),console.log("stealing focus for cancel search"),O.focus()},i),set_store_value(yw_search,r=L,r)}}const Y=()=>w.pop(),U=()=>set_store_value(yw_menu_vendor,a=!0,a),V=x=>{x.stopPropagation(),set_store_value(yw_overlay_network,s=!s,s)},q=x=>{set_store_value(yw_chain_ref,l=x,l),set_store_value(yw_overlay_network,s=!1,s)};function X(x){s=x,yw_overlay_network.set(s)}const te=x=>{x.stopPropagation(),set_store_value(yw_overlay_account,u=!u,u)},H=x=>{set_store_value(yw_account_ref,d=x,d),set_store_value(yw_overlay_account,u=!1,u)};function Z(x){u=x,yw_overlay_account.set(u)}const ie=()=>k("close");function se(){L=this.value,n(5,L)}function ce(x){binding_callbacks[x?"unshift":"push"](()=>{O=x,n(4,O)})}function re(x){binding_callbacks[x?"unshift":"push"](()=>{T=x,n(3,T)})}return e.$$set=x=>{"pops"in x&&n(24,g=x.pops),"exits"in x&&n(25,h=x.exits),"plain"in x&&n(26,m=x.plain),"account"in x&&n(27,b=x.account),"network"in x&&n(28,v=x.network),"search"in x&&n(29,D=x.search),"title"in x&&n(0,C=x.title),"symbol"in x&&n(1,E=x.symbol),"subtitle"in x&&n(30,N=x.subtitle),"isSearchScreen"in x&&n(2,P=x.isSearchScreen),"search_input"in x&&n(31,F=x.search_input)},[C,E,P,T,O,L,a,s,c,l,u,f,d,_,A,y,B,M,I,S,k,Q,w,G,g,h,m,b,v,D,N,F,Y,U,V,q,X,te,H,Z,ie,se,ce,re]}class Header extends SvelteComponent{constructor(t){super(),init(this,t,instance$o,create_fragment$p,safe_not_equal,{pops:24,exits:25,plain:26,account:27,network:28,search:29,title:0,symbol:1,subtitle:30,isSearchScreen:2,search_input:31},null,[-1,-1])}}var SubHeader_svelte_svelte_type_style_lang="";function get_each_context$9(e,t,n){const r=e.slice();return r[10]=t[n],r}function create_each_block$9(e){let t,n,r=e[10]+"",i,o,a;function s(){return e[7](e[10])}return{c(){t=element("button"),n=element("span"),i=text(r),attr(n,"class","text"),attr(t,"class","pill")},m(c,l){insert(c,t,l),append(t,n),append(n,i),o||(a=listen(t,"click",s),o=!0)},p(c,l){e=c,l&2&&r!==(r=e[10]+"")&&set_data(i,r)},d(c){c&&detach(t),o=!1,a()}}}function create_if_block_1$8(e){let t,n,r,i,o,a;return{c(){t=element("button"),n=element("span"),r=space(),i=element("span"),i.textContent="Add New",attr(n,"class","icon svelte-44hl34"),attr(i,"class","text"),attr(t,"class","pill svelte-44hl34")},m(s,c){insert(s,t,c),append(t,n),n.innerHTML=SX_ICON_ADD$1,append(t,r),append(t,i),o||(a=listen(t,"click",e[8]),o=!0)},p:noop$1,d(s){s&&detach(t),o=!1,a()}}}function create_if_block$e(e){let t,n;return t=new Close({}),t.$on("click",e[9]),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p:noop$1,i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_fragment$o(e){let t,n,r,i,o,a,s,c,l=e[1],u=[];for(let g=0;g<l.length;g+=1)u[g]=create_each_block$9(get_each_context$9(e,l,g));let f=!e[2]&&create_if_block_1$8(e),d=e[4]&&create_if_block$e(e);return{c(){t=element("div"),n=element("span"),r=text(e[0]),i=space(),o=element("span");for(let g=0;g<u.length;g+=1)u[g].c();a=space(),f&&f.c(),s=space(),d&&d.c(),attr(n,"class","text"),attr(o,"class","right svelte-44hl34"),attr(t,"class","title svelte-44hl34")},m(g,_){insert(g,t,_),append(t,n),append(n,r),append(t,i),append(t,o);for(let h=0;h<u.length;h+=1)u[h].m(o,null);append(o,a),f&&f.m(o,null),append(o,s),d&&d.m(o,null),c=!0},p(g,[_]){if((!c||_&1)&&set_data(r,g[0]),_&34){l=g[1];let h;for(h=0;h<l.length;h+=1){const A=get_each_context$9(g,l,h);u[h]?u[h].p(A,_):(u[h]=create_each_block$9(A),u[h].c(),u[h].m(o,a))}for(;h<u.length;h+=1)u[h].d(1);u.length=l.length}g[2]?f&&(f.d(1),f=null):f?f.p(g,_):(f=create_if_block_1$8(g),f.c(),f.m(o,s)),g[4]&&d.p(g,_)},i(g){c||(transition_in(d),c=!0)},o(g){transition_out(d),c=!1},d(g){g&&detach(t),destroy_each(u,g),f&&f.d(),d&&d.d()}}}function instance$n(e,t,n){let r;component_subscribe(e,yw_popup,g=>n(3,r=g));let{title:i}=t,{buttons:o=[]}=t,{bare:a=!1}=t,{closes:s=!1}=t;const c=s,l=createEventDispatcher(),u=g=>l(g.toLowerCase().replace(/\s/g,"_")),f=()=>l("add_new"),d=()=>set_store_value(yw_popup,r=null,r);return e.$$set=g=>{"title"in g&&n(0,i=g.title),"buttons"in g&&n(1,o=g.buttons),"bare"in g&&n(2,a=g.bare),"closes"in g&&n(6,s=g.closes)},[i,o,a,r,c,l,s,u,f,d]}class SubHeader extends SvelteComponent{constructor(t){super(),init(this,t,instance$n,create_fragment$o,safe_not_equal,{title:0,buttons:1,bare:2,closes:6})}}var Field_svelte_svelte_type_style_lang="";const get_post_slot_changes=e=>({}),get_post_slot_context=e=>({});function create_fragment$n(e){let t,n,r,i,o,a,s,c,l,u,f;const d=e[6].default,g=create_slot(d,e,e[5],null),_=e[6].post,h=create_slot(_,e,e[5],get_post_slot_context);return{c(){t=element("div"),n=element("div"),r=element("label"),i=text(e[0]),a=space(),s=element("div"),g&&g.c(),l=space(),h&&h.c(),attr(r,"for",e[1]),attr(n,"class","field-name svelte-yry0w8"),attr(s,"class","field-value svelte-yry0w8"),attr(t,"class","field svelte-yry0w8"),attr(t,"id",u="field-"+e[1]),toggle_class(t,"short",e[2]),toggle_class(t,"double",e[4])},m(A,m){insert(A,t,m),append(t,n),append(n,r),append(r,i),append(t,a),append(t,s),g&&g.m(s,null),append(t,l),h&&h.m(t,null),f=!0},p(A,[m]){e=A,(!f||m&1)&&set_data(i,e[0]),(!f||m&2)&&attr(r,"for",e[1]),g&&g.p&&(!f||m&32)&&update_slot_base(g,d,e,e[5],f?get_slot_changes(d,e[5],m,null):get_all_dirty_from_scope(e[5]),null),h&&h.p&&(!f||m&32)&&update_slot_base(h,_,e,e[5],f?get_slot_changes(_,e[5],m,get_post_slot_changes):get_all_dirty_from_scope(e[5]),get_post_slot_context),(!f||m&2&&u!==(u="field-"+e[1]))&&attr(t,"id",u),m&4&&toggle_class(t,"short",e[2]),m&16&&toggle_class(t,"double",e[4])},i(A){f||(add_render_callback(()=>{o||(o=create_bidirectional_transition(n,slide,{duration:e[3]?350:0},!0)),o.run(1)}),transition_in(g,A),add_render_callback(()=>{c||(c=create_bidirectional_transition(s,slide,{duration:e[3]?350:0},!0)),c.run(1)}),transition_in(h,A),f=!0)},o(A){o||(o=create_bidirectional_transition(n,slide,{duration:e[3]?350:0},!1)),o.run(0),transition_out(g,A),c||(c=create_bidirectional_transition(s,slide,{duration:e[3]?350:0},!1)),c.run(0),transition_out(h,A),f=!1},d(A){A&&detach(t),A&&o&&o.end(),g&&g.d(A),A&&c&&c.end(),h&&h.d(A)}}}function instance$m(e,t,n){let{$$slots:r={},$$scope:i}=t,{name:o=""}=t,{key:a}=t,{short:s=!1}=t,{slides:c=!1}=t,{double:l=!1}=t;return e.$$set=u=>{"name"in u&&n(0,o=u.name),"key"in u&&n(1,a=u.key),"short"in u&&n(2,s=u.short),"slides"in u&&n(3,c=u.slides),"double"in u&&n(4,l=u.double),"$$scope"in u&&n(5,i=u.$$scope)},[o,a,s,c,l,i,r]}class Field extends SvelteComponent{constructor(t){super(),init(this,t,instance$m,create_fragment$n,safe_not_equal,{name:0,key:1,short:2,slides:3,double:4})}}var Log_svelte_svelte_type_style_lang="",ActionsLine_svelte_svelte_type_style_lang="";function create_if_block$d(e){let t,n=e[5]?"Cancel":"Back",r,i,o,a;return{c(){t=element("button"),r=text(n),t.disabled=i=e[0]||e[2],attr(t,"class","svelte-1iwdvsv")},m(s,c){insert(s,t,c),append(t,r),o||(a=listen(t,"click",e[15]),o=!0)},p(s,c){c&5&&i!==(i=s[0]||s[2])&&(t.disabled=i)},d(s){s&&detach(t),o=!1,a()}}}function create_fragment$m(e){let t,n,r,i,o,a,s,c=(e[5]||e[6])&&create_if_block$d(e);return{c(){t=element("div"),c&&c.c(),n=space(),r=element("button"),i=text(e[4]),r.disabled=o=e[3]||e[0]||e[1]||e[2],attr(r,"class","primary svelte-1iwdvsv"),attr(t,"class","actions-line svelte-1iwdvsv")},m(l,u){insert(l,t,u),c&&c.m(t,null),append(t,n),append(t,r),append(r,i),a||(s=listen(r,"click",e[16]),a=!0)},p(l,[u]){(l[5]||l[6])&&c.p(l,u),u&16&&set_data(i,l[4]),u&15&&o!==(o=l[3]||l[0]||l[1]||l[2])&&(r.disabled=o)},i:noop$1,o:noop$1,d(l){l&&detach(t),c&&c.d(),a=!1,s()}}}function instance$l(e,t,n){let r,i,{cancel:o=!1}=t;const a=!!o,s=typeof o=="function"?o:F_NOOP;let{back:c=!1}=t;const l=c;let{confirm:u=["Done",F_NOOP,!1]}=t;const[f,d]=u;let g="",{wait:_=0}=t;const h=_===!0?5e3:_||0;let A=h>0;if(A){let E=Math.round(h/1e3);g=` (${E}s)`;const N=setInterval(()=>{E-=1,n(14,g=` (${E}s)`)},1e3);setTimeout(()=>{n(1,A=!1),n(14,g=""),clearInterval(N)},h)}let m=!1,{disabled:y=!1}=t,{contd:b=null}=t;const B=b?()=>v.push(b):null,v=getContext("page");function M(){a&&s&&s(),(l||o==="pop")&&v.pop(),setTimeout(()=>{},1e3)}async function D(){let E=!0;n(2,m=!0);try{await(d||F_NOOP)()}catch(N){E=!1,console.error(N)}n(2,m=!1),B&&E&&B(),setTimeout(()=>{},1e3)}const I=()=>M(),C=()=>D();return e.$$set=E=>{"cancel"in E&&n(9,o=E.cancel),"back"in E&&n(10,c=E.back),"confirm"in E&&n(11,u=E.confirm),"wait"in E&&n(12,_=E.wait),"disabled"in E&&n(0,y=E.disabled),"contd"in E&&n(13,b=E.contd)},e.$$.update=()=>{e.$$.dirty&16384&&n(4,r=f+g),e.$$.dirty&2048&&n(3,i=u[2]||!1)},[y,A,m,i,r,a,l,M,D,o,c,u,_,b,g,I,C]}class ActionsLine extends SvelteComponent{constructor(t){super(),init(this,t,instance$l,create_fragment$m,safe_not_equal,{cancel:9,back:10,confirm:11,wait:12,disabled:0,contd:13})}}var StarShellTitle_svelte_svelte_type_style_lang="",Register_svelte_svelte_type_style_lang="",SX_SEND=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="12" y="4" width="2" height="9" />
		<rect x="5" y="6" width="2" height="9" transform="rotate(-90 5 6)" />
		<path d="M14 5.5V4H12.5L3 13.5L4.5 15L14 5.5Z" />
	</g>
</svg>
`,SX_RECV=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none">
	<style>
		.s2r-action-recv-fg-stroke {
			stroke: var(--svg-color-fg, currentColor);
		}
	</style>
	<path style="fill:var(--svg-color-fg, currentColor)" d="M3 14h12v2H3z"/>
	<path class="s2r-action-recv-fg-stroke" d="M9 12V1M4.5 7.5 9 12l4.5-4.5" stroke-width="2"/>
</svg>`,SX_ICON_ADD=`<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="10" y="4" width="2" height="14" rx="1" />
		<rect x="4" y="10" width="14" height="2" ry="1" />
	</g>
</svg>`,SX_ICON_INFO=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
</svg>`,SX_ICON_EDIT$1=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a.996.996 0 0 0 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
</svg>`,SX_ICON_DELETE=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"/>
</svg>`,SX_ICON_WRAP=`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M11,3.6L7.8,6.7L4.6,3.6c-0.3-0.3-0.8-0.3-1.1,0s-0.3,0.8,0,1.1l3.7,3.7c0.3,0.3,0.8,0.3,1.1,0L12,4.7 c0.3-0.3,0.3-0.8,0-1.1C11.8,3.3,11.3,3.3,11,3.6z M12.6,12.3c0,0.4-0.3,0.8-0.7,0.8H3.7c-0.4,0-0.8-0.4-0.8-0.8l0,0l0,0v-1.6 c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8v0.8H11v-0.8c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8V12.3C12.7,12.3,12.7,12.3,12.6,12.3 L12.6,12.3z" />
</svg>
`,SX_ICON_UNWRAP=`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
	<style>
		.star-action-unwrap-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="star-action-unwrap-fg" d="M12,7.8c0.3-0.3,0.3-0.8,0-1.1L8.3,3C8,2.7,7.5,2.7,7.2,3L3.5,6.8C3.2,7,3.2,7.5,3.5,7.8c0.3,0.3,0.8,0.3,1.1,0
	l3.2-3.1L11,7.8C11.3,8.1,11.8,8.1,12,7.8z M12.6,12.4c0,0.4-0.3,0.8-0.7,0.8H3.7c-0.4,0-0.8-0.4-0.8-0.8l0,0l0,0v-1.6
	c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8v0.8H11v-0.8c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8V12.4L12.6,12.4L12.6,12.4z" />
</svg>
`,SX_ICON_EDIT=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<circle cx="11" cy="11" r="10" fill="none" style="stroke:var(--svg-color-bg, currentColor)"/>
	<path style="fill:var(--svg-color-fg, currentColor)" d="m8.364 11.631 5.656-5.657L16 7.954l-5.657 5.657zM7.6 12.4 7 13v2h2l.6-.6z"/>
</svg>`,SX_ICON_CHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
	<style type="text/css">
		.s2r-checked-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-checked-fg" d="M16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0ZM7.71 13.29C7.32 13.68 6.69 13.68 6.3 13.29L2.71 9.7C2.32 9.31 2.32 8.68 2.71 8.29C3.1 7.9 3.73 7.9 4.12 8.29L7 11.17L13.88 4.29C14.27 3.9 14.9 3.9 15.29 4.29C15.68 4.68 15.68 5.31 15.29 5.7L7.71 13.29Z" />
</svg>
`,SX_ICON_UNCHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
	<style type="text/css">
		.s2r-unchecked-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-unchecked-fg" d="M15 16H3C2.45 16 2 15.55 2 15V3C2 2.45 2.45 2 3 2H15C15.55 2 16 2.45 16 3V15C16 15.55 15.55 16 15 16ZM16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0Z" />
</svg>
`,CheckboxField_svelte_svelte_type_style_lang="";function create_if_block$c(e){let t,n;const r=e[8].default,i=create_slot(r,e,e[7],null);return{c(){t=element("label"),i&&i.c(),attr(t,"for",e[2])},m(o,a){insert(o,t,a),i&&i.m(t,null),n=!0},p(o,a){i&&i.p&&(!n||a&128)&&update_slot_base(i,r,o,o[7],n?get_slot_changes(r,o[7],a,null):get_all_dirty_from_scope(o[7]),null)},i(o){n||(transition_in(i,o),n=!0)},o(o){transition_out(i,o),n=!1},d(o){o&&detach(t),i&&i.d(o)}}}function create_fragment$l(e){let t,n,r,i,o,a=(e[0]?SX_ICON_CHECKED:SX_ICON_UNCHECKED)+"",s,c,l,u,f,d=e[4].default&&create_if_block$c(e);return{c(){t=element("fieldset"),n=element("span"),r=element("input"),i=space(),o=element("span"),s=space(),d&&d.c(),attr(r,"id",e[2]),attr(r,"type","checkbox"),r.hidden=!0,attr(o,"class","icon svelte-f0r965"),attr(n,"class","checkbox"),attr(t,"class",c=null_to_empty(e[1])+" svelte-f0r965")},m(g,_){insert(g,t,_),append(t,n),append(n,r),r.checked=e[0],append(n,i),append(n,o),o.innerHTML=a,append(t,s),d&&d.m(t,null),l=!0,u||(f=[listen(r,"change",e[9]),listen(t,"click",e[3])],u=!0)},p(g,[_]){_&1&&(r.checked=g[0]),(!l||_&1)&&a!==(a=(g[0]?SX_ICON_CHECKED:SX_ICON_UNCHECKED)+"")&&(o.innerHTML=a),g[4].default?d?(d.p(g,_),_&16&&transition_in(d,1)):(d=create_if_block$c(g),d.c(),transition_in(d,1),d.m(t,null)):d&&(group_outros(),transition_out(d,1,1,()=>{d=null}),check_outros()),(!l||_&2&&c!==(c=null_to_empty(g[1])+" svelte-f0r965"))&&attr(t,"class",c)},i(g){l||(transition_in(d),l=!0)},o(g){transition_out(d),l=!1},d(g){g&&detach(t),d&&d.d(),u=!1,run_all(f)}}}function instance$k(e,t,n){let{$$slots:r={},$$scope:i}=t;const o=compute_slots(r);let{id:a}=t;const s=a;let{containerClass:c=""}=t,{checked:l=!1}=t,{disableHandler:u=!1}=t;function f(g){g.target.tagName!=="LABEL"&&(u||n(0,l=!l)),g.stopImmediatePropagation()}function d(){l=this.checked,n(0,l)}return e.$$set=g=>{"id"in g&&n(5,a=g.id),"containerClass"in g&&n(1,c=g.containerClass),"checked"in g&&n(0,l=g.checked),"disableHandler"in g&&n(6,u=g.disableHandler),"$$scope"in g&&n(7,i=g.$$scope)},[l,c,s,f,o,a,u,i,r,d]}class CheckboxField extends SvelteComponent{constructor(t){super(),init(this,t,instance$k,create_fragment$l,safe_not_equal,{id:5,containerClass:1,checked:0,disableHandler:6})}}var PopupTagsSelect_svelte_svelte_type_style_lang="";function get_each_context$8(e,t,n){const r=e.slice();return r[11]=t[n].tag,r[12]=t[n].selected,r[13]=t,r[14]=n,r}function create_right_slot$1(e){let t,n,r,i;function o(s){e[3](s,e[12],e[13],e[14])}let a={id:"tag-$"+e[11].index,disableHandler:!0};return e[12]!==void 0&&(a.checked=e[12]),t=new CheckboxField({props:a}),binding_callbacks.push(()=>bind(t,"checked",o)),{c(){create_component(t.$$.fragment),r=space()},m(s,c){mount_component(t,s,c),insert(s,r,c),i=!0},p(s,c){e=s;const l={};c&1&&(l.id="tag-$"+e[11].index),!n&&c&1&&(n=!0,l.checked=e[12],add_flush_callback(()=>n=!1)),t.$set(l)},i(s){i||(transition_in(t.$$.fragment,s),i=!0)},o(s){transition_out(t.$$.fragment,s),i=!1},d(s){destroy_component(t,s),s&&detach(r)}}}function create_each_block$8(e){let t,n;function r(){return e[4](e[11])}return t=new Row({props:{rootStyle:"--app-icon-diameter:12px;",iconClass:"align-self_center",name:e[11].name,$$slots:{right:[create_right_slot$1]},$$scope:{ctx:e}}}),t.$on("click",r),{c(){create_component(t.$$.fragment)},m(i,o){mount_component(t,i,o),n=!0},p(i,o){e=i;const a={};o&1&&(a.name=e[11].name),o&32769&&(a.$$scope={dirty:o,ctx:e}),t.$set(a)},i(i){n||(transition_in(t.$$.fragment,i),n=!0)},o(i){transition_out(t.$$.fragment,i),n=!1},d(i){destroy_component(t,i)}}}function create_fragment$k(e){let t,n,r,i,o,a,s,c;n=new SubHeader({props:{title:"Select Tag(s)",bare:!0,closes:!0}});let l=e[0],u=[];for(let d=0;d<l.length;d+=1)u[d]=create_each_block$8(get_each_context$8(e,l,d));const f=d=>transition_out(u[d],1,1,()=>{u[d]=null});return s=new ActionsLine({props:{confirm:["Apply",e[2]]}}),{c(){t=element("section"),create_component(n.$$.fragment),r=space(),i=element("div");for(let d=0;d<u.length;d+=1)u[d].c();o=space(),a=element("div"),create_component(s.$$.fragment),attr(i,"class","rows svelte-vooes4"),attr(a,"class","float svelte-vooes4"),attr(t,"class","screen")},m(d,g){insert(d,t,g),mount_component(n,t,null),append(t,r),append(t,i);for(let _=0;_<u.length;_+=1)u[_].m(i,null);append(t,o),append(t,a),mount_component(s,a,null),c=!0},p(d,[g]){if(g&3){l=d[0];let _;for(_=0;_<l.length;_+=1){const h=get_each_context$8(d,l,_);u[_]?(u[_].p(h,g),transition_in(u[_],1)):(u[_]=create_each_block$8(h),u[_].c(),transition_in(u[_],1),u[_].m(i,null))}for(group_outros(),_=l.length;_<u.length;_+=1)f(_);check_outros()}},i(d){if(!c){transition_in(n.$$.fragment,d);for(let g=0;g<l.length;g+=1)transition_in(u[g]);transition_in(s.$$.fragment,d),c=!0}},o(d){transition_out(n.$$.fragment,d),u=u.filter(Boolean);for(let g=0;g<u.length;g+=1)transition_out(u[g]);transition_out(s.$$.fragment,d),c=!1},d(d){d&&detach(t),destroy_component(n),destroy_each(u,d),destroy_component(s)}}}function instance$j(e,t,n){let r,i,o;component_subscribe(e,yw_popup,_=>n(5,r=_)),component_subscribe(e,yw_store_tags,_=>n(6,i=_)),component_subscribe(e,yw_context_popup,_=>n(7,o=_));const a=o.resource,s=(_,h)=>_.index-h.index,c=new Set(i.getIdsFor(a));let l=i.raw.registry.sort(s).map(_=>({tag:_,selected:c.has(_.index)}));function u(_){const h=l.find(A=>_===A.tag.index);h.selected=!h.selected,n(0,l)}async function f(){await i.setTagsFor(a,a_tags),set_store_value(yw_popup,r=null,r)}function d(_,h,A,m){A[m].selected=_,n(0,l)}return[l,u,f,d,_=>u(_.index)]}class PopupTagsSelect extends SvelteComponent{constructor(t){super(),init(this,t,instance$j,create_fragment$k,safe_not_equal,{})}}var InlineTags_svelte_svelte_type_style_lang="";const get_suffix_slot_changes=e=>({}),get_suffix_slot_context=e=>({});function get_each_context$7(e,t,n){const r=e.slice();return r[26]=t[n],r[28]=n,r}const get_prefix_slot_changes=e=>({}),get_prefix_slot_context=e=>({});function create_if_block_4$3(e){let t,n,r;const i=e[17].prefix,o=create_slot(i,e,e[16],get_prefix_slot_context);return{c(){t=element("span"),o&&o.c(),attr(t,"class",n="prefix "+e[0]+" svelte-r4i5a9")},m(a,s){insert(a,t,s),o&&o.m(t,null),r=!0},p(a,s){o&&o.p&&(!r||s&65536)&&update_slot_base(o,i,a,a[16],r?get_slot_changes(i,a[16],s,get_prefix_slot_changes):get_all_dirty_from_scope(a[16]),get_prefix_slot_context),(!r||s&1&&n!==(n="prefix "+a[0]+" svelte-r4i5a9"))&&attr(t,"class",n)},i(a){r||(transition_in(o,a),r=!0)},o(a){transition_out(o,a),r=!1},d(a){a&&detach(t),o&&o.d(a)}}}function create_if_block_3$4(e){let t,n=e[26].name+"",r;return{c(){t=element("span"),r=text(n),attr(t,"class","label svelte-r4i5a9")},m(i,o){insert(i,t,o),append(t,r)},p(i,o){o&32&&n!==(n=i[26].name+"")&&set_data(r,n)},d(i){i&&detach(t)}}}function create_if_block_2$7(e){let t,n,r;function i(){return e[18](e[26])}return{c(){t=element("span"),attr(t,"class","delete icon svelte-r4i5a9")},m(o,a){insert(o,t,a),t.innerHTML=SX_ICON_ADD,n||(r=listen(t,"click",i),n=!0)},p(o,a){e=o},d(o){o&&detach(t),n=!1,r()}}}function create_each_block$7(e){let t,n,r,i,o,a=!e[7]&&create_if_block_3$4(e),s=e[6]&&create_if_block_2$7(e);return{c(){t=element("span"),a&&a.c(),n=space(),s&&s.c(),r=space(),attr(t,"class","tag svelte-r4i5a9"),set_style(t,"background-color",e[26].color),toggle_class(t,"collapsed",e[7])},m(c,l){insert(c,t,l),a&&a.m(t,null),append(t,n),s&&s.m(t,null),append(t,r),o=!0},p(c,l){e=c,e[7]||a.p(e,l),e[6]&&s.p(e,l),(!o||l&32)&&set_style(t,"background-color",e[26].color)},i(c){o||(i&&i.end(1),o=!0)},o(c){i=create_out_transition(t,e[10],{duration:e[6]?300:0}),o=!1},d(c){c&&detach(t),a&&a.d(),s&&s.d(),c&&i&&i.end()}}}function create_key_block(e){let t,n,r=e[5],i=[];for(let a=0;a<r.length;a+=1)i[a]=create_each_block$7(get_each_context$7(e,r,a));const o=a=>transition_out(i[a],1,1,()=>{i[a]=null});return{c(){for(let a=0;a<i.length;a+=1)i[a].c();t=empty()},m(a,s){for(let c=0;c<i.length;c+=1)i[c].m(a,s);insert(a,t,s),n=!0},p(a,s){if(s&736){r=a[5];let c;for(c=0;c<r.length;c+=1){const l=get_each_context$7(a,r,c);i[c]?(i[c].p(l,s),transition_in(i[c],1)):(i[c]=create_each_block$7(l),i[c].c(),transition_in(i[c],1),i[c].m(t.parentNode,t))}for(group_outros(),c=r.length;c<i.length;c+=1)o(c);check_outros()}},i(a){if(!n){for(let s=0;s<r.length;s+=1)transition_in(i[s]);n=!0}},o(a){i=i.filter(Boolean);for(let s=0;s<i.length;s+=1)transition_out(i[s]);n=!1},d(a){destroy_each(i,a),a&&detach(t)}}}function create_if_block_1$7(e){let t,n,r,i;return{c(){t=element("span"),n=element("span"),attr(n,"class","icon svelte-r4i5a9"),attr(t,"class","edit svelte-r4i5a9")},m(o,a){insert(o,t,a),append(t,n),n.innerHTML=SX_ICON_EDIT,r||(i=listen(t,"click",e[19]),r=!0)},p:noop$1,d(o){o&&detach(t),r=!1,i()}}}function create_if_block$b(e){let t,n,r;const i=e[17].suffix,o=create_slot(i,e,e[16],get_suffix_slot_context);return{c(){t=element("span"),o&&o.c(),attr(t,"class",n="suffix "+e[1]+" svelte-r4i5a9")},m(a,s){insert(a,t,s),o&&o.m(t,null),r=!0},p(a,s){o&&o.p&&(!r||s&65536)&&update_slot_base(o,i,a,a[16],r?get_slot_changes(i,a[16],s,get_suffix_slot_changes):get_all_dirty_from_scope(a[16]),get_suffix_slot_context),(!r||s&2&&n!==(n="suffix "+a[1]+" svelte-r4i5a9"))&&attr(t,"class",n)},i(a){r||(transition_in(o,a),r=!0)},o(a){transition_out(o,a),r=!1},d(a){a&&detach(t),o&&o.d(a)}}}function create_fragment$j(e){let t,n,r=e[3],i,o,a,s=e[11].prefix&&create_if_block_4$3(e),c=create_key_block(e),l=e[6]&&create_if_block_1$7(e),u=e[11].suffix&&create_if_block$b(e);return{c(){t=element("span"),s&&s.c(),n=space(),c.c(),i=space(),l&&l.c(),o=space(),u&&u.c(),attr(t,"class","cluster svelte-r4i5a9"),attr(t,"style",e[2]),toggle_class(t,"editable",e[6]),toggle_class(t,"collapsed",e[7])},m(f,d){insert(f,t,d),s&&s.m(t,null),append(t,n),c.m(t,null),append(t,i),l&&l.m(t,null),append(t,o),u&&u.m(t,null),e[20](t),a=!0},p(f,[d]){f[11].prefix?s?(s.p(f,d),d&2048&&transition_in(s,1)):(s=create_if_block_4$3(f),s.c(),transition_in(s,1),s.m(t,n)):s&&(group_outros(),transition_out(s,1,1,()=>{s=null}),check_outros()),d&8&&safe_not_equal(r,r=f[3])?(group_outros(),transition_out(c,1,1,noop$1),check_outros(),c=create_key_block(f),c.c(),transition_in(c,1),c.m(t,i)):c.p(f,d),f[6]&&l.p(f,d),f[11].suffix?u?(u.p(f,d),d&2048&&transition_in(u,1)):(u=create_if_block$b(f),u.c(),transition_in(u,1),u.m(t,null)):u&&(group_outros(),transition_out(u,1,1,()=>{u=null}),check_outros()),(!a||d&4)&&attr(t,"style",f[2])},i(f){a||(transition_in(s),transition_in(c),transition_in(u),a=!0)},o(f){transition_out(s),transition_out(c),transition_out(u),a=!1},d(f){f&&detach(t),s&&s.d(),c.d(f),l&&l.d(),u&&u.d(),e[20](null)}}}function instance$i(e,t,n){let r,i,o,a;component_subscribe(e,yw_popup,k=>n(21,i=k)),component_subscribe(e,yw_context_popup,k=>n(22,o=k)),component_subscribe(e,yw_store_tags,k=>n(15,a=k));let{$$slots:s={},$$scope:c}=t;const l=compute_slots(s);let{resourcePath:u}=t;const f=u;let{editable:d=!1}=t;const g=d;let{collapsed:_=!1}=t;const h=_;let{prefixClass:A=""}=t,{suffixClass:m=""}=t,{rootStyle:y=""}=t,b=0;const B=yw_store_tags.subscribe(()=>n(3,b++,b));onDestroy(()=>{B()});let v;g&&(yw_context_popup.subscribe(k=>{k?.tags&&n(5,r=k.tags)}),onDestroy(()=>{set_store_value(yw_context_popup,o=null,o)}));function M(){set_store_value(yw_context_popup,o={resource:f},o),set_store_value(yw_popup,i=PopupTagsSelect,i)}let D;async function I(k){const Q=r.findIndex(w=>w.index===k.index);r.splice(Q,1),await v.save()}function C(k,{delay:Q=0,duration:w=400,easing:T=cubicOut}={}){const O=getComputedStyle(k),P=+O.opacity,F=parseFloat(O.width),L=parseFloat(O.paddingLeft),G=parseFloat(O.paddingRight),Y=parseFloat(O.marginLeft),U=parseFloat(O.marginRight),V=parseFloat(O.borderLeftWidth),q=parseFloat(O.borderRightWidth);return{delay:Q,duration:w,easing:T,css:X=>`--delete-display: none;overflow: hidden;opacity: ${Math.min(X*20,1)*P};width: ${X*F}px;padding-left: ${X*L}px;padding-right: ${X*G}px;margin-left: ${X*Y}px;margin-right: ${X*U}px;border-left-width: ${X*V}px;border-right-width: ${X*q}px;`}}const E=k=>I(k),N=()=>M();function S(k){binding_callbacks[k?"unshift":"push"](()=>{D=k,n(4,D)})}return e.$$set=k=>{"resourcePath"in k&&n(12,u=k.resourcePath),"editable"in k&&n(13,d=k.editable),"collapsed"in k&&n(14,_=k.collapsed),"prefixClass"in k&&n(0,A=k.prefixClass),"suffixClass"in k&&n(1,m=k.suffixClass),"rootStyle"in k&&n(2,y=k.rootStyle),"$$scope"in k&&n(16,c=k.$$scope)},e.$$.update=()=>{e.$$.dirty&32768&&n(5,r=a.getTagsFor(f))},[A,m,y,b,D,r,g,h,M,I,C,l,u,d,_,a,c,s,E,N,S]}class InlineTags extends SvelteComponent{constructor(t){super(),init(this,t,instance$i,create_fragment$j,safe_not_equal,{resourcePath:12,editable:13,collapsed:14,prefixClass:0,suffixClass:1,rootStyle:2})}}var Portrait_svelte_svelte_type_style_lang="";function get_each_context$6(e,t,n){const r=e.slice();return r[22]=t[n][0],r[23]=t[n][1],r}const get_subtitle_slot_changes=e=>({}),get_subtitle_slot_context=e=>({}),get_pfp_slot_changes=e=>({}),get_pfp_slot_context=e=>({});function create_if_block_3$3(e){let t,n,r,i;const o=[create_if_block_4$2,create_else_block$5],a=[];function s(c,l){return c[11].pfp?0:1}return n=s(e),r=a[n]=o[n](e),{c(){t=element("div"),r.c(),attr(t,"class","pfp svelte-1ilena7")},m(c,l){insert(c,t,l),a[n].m(t,null),i=!0},p(c,l){let u=n;n=s(c),n===u?a[n].p(c,l):(group_outros(),transition_out(a[u],1,1,()=>{a[u]=null}),check_outros(),r=a[n],r?r.p(c,l):(r=a[n]=o[n](c),r.c()),transition_in(r,1),r.m(t,null))},i(c){i||(transition_in(r),i=!0)},o(c){transition_out(r),i=!1},d(c){c&&detach(t),a[n].d()}}}function create_else_block$5(e){let t,n;return t=new PfpDisplay({props:{ref:e[1],resource:e[0],dim:64,circular:e[6]}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&2&&(o.ref=r[1]),i&1&&(o.resource=r[0]),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_if_block_4$2(e){let t,n;const r=e[19].pfp,i=create_slot(r,e,e[18],get_pfp_slot_context),o=i||fallback_block_1();return{c(){t=element("span"),o&&o.c(),attr(t,"class","icon svelte-1ilena7")},m(a,s){insert(a,t,s),o&&o.m(t,null),n=!0},p(a,s){i&&i.p&&(!n||s&262144)&&update_slot_base(i,r,a,a[18],n?get_slot_changes(r,a[18],s,get_pfp_slot_changes):get_all_dirty_from_scope(a[18]),get_pfp_slot_context)},i(a){n||(transition_in(o,a),n=!0)},o(a){transition_out(o,a),n=!1},d(a){a&&detach(t),o&&o.d(a)}}}function fallback_block_1(e){let t;return{c(){t=text("Empty pfp slot")},m(n,r){insert(n,t,r)},d(n){n&&detach(t)}}}function create_if_block_2$6(e){let t;return{c(){t=element("span"),attr(t,"class","info svelte-1ilena7")},m(n,r){insert(n,t,r),t.innerHTML=SX_ICON_INFO},p:noop$1,d(n){n&&detach(t)}}}function create_if_block_1$6(e){let t,n,r;const i=e[19].subtitle,o=create_slot(i,e,e[18],get_subtitle_slot_context),a=o||fallback_block$1(e);return{c(){t=element("div"),n=element("span"),a&&a.c(),attr(n,"class","text"),attr(t,"class","subtitle svelte-1ilena7")},m(s,c){insert(s,t,c),append(t,n),a&&a.m(n,null),r=!0},p(s,c){o?o.p&&(!r||c&262144)&&update_slot_base(o,i,s,s[18],r?get_slot_changes(i,s[18],c,get_subtitle_slot_changes):get_all_dirty_from_scope(s[18]),get_subtitle_slot_context):a&&a.p&&(!r||c&8)&&a.p(s,r?c:-1)},i(s){r||(transition_in(a,s),r=!0)},o(s){transition_out(a,s),r=!1},d(s){s&&detach(t),a&&a.d(s)}}}function fallback_block$1(e){let t;return{c(){t=text(e[3])},m(n,r){insert(n,t,r)},p(n,r){r&8&&set_data(t,n[3])},d(n){n&&detach(t)}}}function create_if_block$a(e){let t,n=ode(e[10]),r=[];for(let i=0;i<n.length;i+=1)r[i]=create_each_block$6(get_each_context$6(e,n,i));return{c(){t=element("div");for(let i=0;i<r.length;i+=1)r[i].c();attr(t,"class","actions svelte-1ilena7")},m(i,o){insert(i,t,o);for(let a=0;a<r.length;a+=1)r[a].m(t,null)},p(i,o){if(o&1056){n=ode(i[10]);let a;for(a=0;a<n.length;a+=1){const s=get_each_context$6(i,n,a);r[a]?r[a].p(s,o):(r[a]=create_each_block$6(s),r[a].c(),r[a].m(t,null))}for(;a<r.length;a+=1)r[a].d(1);r.length=n.length}},d(i){i&&detach(t),destroy_each(r,i)}}}function create_each_block$6(e){let t,n,r=e[5][e[22]]+"",i,o,a=e[23].label+"",s,c,l,u;function f(){return e[20](e[23])}return{c(){t=element("span"),n=element("span"),i=space(),o=element("span"),s=text(a),c=space(),attr(n,"class","icon svelte-1ilena7"),attr(o,"class","label"),attr(t,"class","action action-"+e[22]+" svelte-1ilena7")},m(d,g){insert(d,t,g),append(t,n),n.innerHTML=r,append(t,i),append(t,o),append(o,s),append(t,c),l||(u=listen(t,"click",f),l=!0)},p(d,g){e=d},d(d){d&&detach(t),l=!1,u()}}}function create_fragment$i(e){let t,n,r,i,o,a,s,c,l,u,f=!e[7]&&create_if_block_3$3(e);i=new Load({props:{input:e[2],classes:"text"}});let d=e[4]&&create_if_block_2$6(),g=(e[3]||e[11].subtitle)&&create_if_block_1$6(e);c=new InlineTags({props:{resourcePath:e[8],rootStyle:"margin: var(--ui-padding) 0 0 0;"}});let _=e[10]&&create_if_block$a(e);return{c(){t=element("div"),f&&f.c(),n=space(),r=element("div"),create_component(i.$$.fragment),o=space(),d&&d.c(),a=space(),g&&g.c(),s=space(),create_component(c.$$.fragment),l=space(),_&&_.c(),attr(r,"class","title svelte-1ilena7"),attr(t,"class","portrait "+e[9]+" svelte-1ilena7"),attr(t,"data-path",e[8])},m(h,A){insert(h,t,A),f&&f.m(t,null),append(t,n),append(t,r),mount_component(i,r,null),append(r,o),d&&d.m(r,null),append(t,a),g&&g.m(t,null),append(t,s),mount_component(c,t,null),append(t,l),_&&_.m(t,null),u=!0},p(h,[A]){h[7]||f.p(h,A);const m={};A&4&&(m.input=h[2]),i.$set(m),h[4]?d?d.p(h,A):(d=create_if_block_2$6(),d.c(),d.m(r,null)):d&&(d.d(1),d=null),h[3]||h[11].subtitle?g?(g.p(h,A),A&2056&&transition_in(g,1)):(g=create_if_block_1$6(h),g.c(),transition_in(g,1),g.m(t,s)):g&&(group_outros(),transition_out(g,1,1,()=>{g=null}),check_outros()),h[10]&&_.p(h,A)},i(h){u||(transition_in(f),transition_in(i.$$.fragment,h),transition_in(g),transition_in(c.$$.fragment,h),u=!0)},o(h){transition_out(f),transition_out(i.$$.fragment,h),transition_out(g),transition_out(c.$$.fragment,h),u=!1},d(h){h&&detach(t),f&&f.d(),destroy_component(i),d&&d.d(),g&&g.d(),destroy_component(c),_&&_.d()}}}var ActionId;(function(e){e.SEND="send",e.RECV="recv",e.ADD="add",e.EDIT="edit",e.WRAP="wrap",e.UNWRAP="unwrap"})(ActionId||(ActionId={}));function instance$h(e,t,n){let r;component_subscribe(e,yw_store_tags,I=>n(17,r=I));let{$$slots:i={},$$scope:o}=t;const a=compute_slots(i),s={send:SX_SEND,recv:SX_RECV,add:SX_ICON_ADD,edit:SX_ICON_EDIT$1,wrap:SX_ICON_WRAP,unwrap:SX_ICON_UNWRAP,delete:SX_ICON_DELETE};let{resource:c=null}=t,{pfp:l=c?.pfp||""}=t,{circular:u=!1}=t;const f=u;let{noPfp:d=!1}=t;const g=d;let{resourcePath:_}=t;const h=_;let{rootClasses:A=""}=t;const m=A;let{title:y=c?.name||""}=t,{subtitle:b=""}=t,{actions:B=null}=t;const v=B;let{info:M=!1}=t;const D=I=>I.trigger();return e.$$set=I=>{"resource"in I&&n(0,c=I.resource),"pfp"in I&&n(1,l=I.pfp),"circular"in I&&n(12,u=I.circular),"noPfp"in I&&n(13,d=I.noPfp),"resourcePath"in I&&n(14,_=I.resourcePath),"rootClasses"in I&&n(15,A=I.rootClasses),"title"in I&&n(2,y=I.title),"subtitle"in I&&n(3,b=I.subtitle),"actions"in I&&n(16,B=I.actions),"info"in I&&n(4,M=I.info),"$$scope"in I&&n(18,o=I.$$scope)},e.$$.update=()=>{e.$$.dirty&131072&&r.getTagsFor(h)},[c,l,y,b,M,s,f,g,h,m,v,a,u,d,_,A,B,r,o,i,D]}class Portrait extends SvelteComponent{constructor(t){super(),init(this,t,instance$h,create_fragment$i,safe_not_equal,{resource:0,pfp:1,circular:12,noPfp:13,resourcePath:14,rootClasses:15,title:2,subtitle:3,actions:16,info:4})}}var SX_ICON_DROPDOWN=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M8.70956 11.71L11.2996 14.3C11.6896 14.69 12.3196 14.69 12.7096 14.3L15.2996 11.71C15.9296 11.08 15.4796 10 14.5896 10H9.40956C8.51956 10 8.07956 11.08 8.70956 11.71Z" />
</svg>
`;function isOutOfViewport(e,t){const n=e.getBoundingClientRect(),r=t.getBoundingClientRect(),i={};return i.top=n.top<0,i.left=n.left<0,i.bottom=n.bottom+r.height>(window.innerHeight||document.documentElement.clientHeight),i.right=n.right>(window.innerWidth||document.documentElement.clientWidth),i.any=i.top||i.left||i.bottom||i.right,i}var Item_svelte_svelte_type_style_lang="";function create_fragment$h(e){let t,n=e[0](e[1],e[2])+"",r;return{c(){t=element("div"),attr(t,"class",r="item "+e[3]+" svelte-3e0qet")},m(i,o){insert(i,t,o),t.innerHTML=n},p(i,[o]){o&7&&n!==(n=i[0](i[1],i[2])+"")&&(t.innerHTML=n),o&8&&r!==(r="item "+i[3]+" svelte-3e0qet")&&attr(t,"class",r)},i:noop$1,o:noop$1,d(i){i&&detach(t)}}}function instance$g(e,t,n){let{isActive:r=!1}=t,{isFirst:i=!1}=t,{isHover:o=!1}=t,{isSelectable:a=!1}=t,{getOptionLabel:s=void 0}=t,{item:c=void 0}=t,{filterText:l=""}=t,u="";return e.$$set=f=>{"isActive"in f&&n(4,r=f.isActive),"isFirst"in f&&n(5,i=f.isFirst),"isHover"in f&&n(6,o=f.isHover),"isSelectable"in f&&n(7,a=f.isSelectable),"getOptionLabel"in f&&n(0,s=f.getOptionLabel),"item"in f&&n(1,c=f.item),"filterText"in f&&n(2,l=f.filterText)},e.$$.update=()=>{if(e.$$.dirty&242){const f=[];r&&f.push("active"),i&&f.push("first"),o&&f.push("hover"),c.isGroupHeader&&f.push("groupHeader"),c.isGroupItem&&f.push("groupItem"),a||f.push("notSelectable"),n(3,u=f.join(" "))}},[s,c,l,u,r,i,o,a]}class Item extends SvelteComponent{constructor(t){super(),init(this,t,instance$g,create_fragment$h,safe_not_equal,{isActive:4,isFirst:5,isHover:6,isSelectable:7,getOptionLabel:0,item:1,filterText:2})}}var List_svelte_svelte_type_style_lang="";function get_each_context$5(e,t,n){const r=e.slice();return r[41]=t[n],r[42]=n,r}function create_else_block$4(e){let t,n,r=e[1],i=[];for(let s=0;s<r.length;s+=1)i[s]=create_each_block$5(get_each_context$5(e,r,s));const o=s=>transition_out(i[s],1,1,()=>{i[s]=null});let a=null;return r.length||(a=create_else_block_2(e)),{c(){for(let s=0;s<i.length;s+=1)i[s].c();t=empty(),a&&a.c()},m(s,c){for(let l=0;l<i.length;l+=1)i[l].m(s,c);insert(s,t,c),a&&a.m(s,c),n=!0},p(s,c){if(c[0]&114390){r=s[1];let l;for(l=0;l<r.length;l+=1){const u=get_each_context$5(s,r,l);i[l]?(i[l].p(u,c),transition_in(i[l],1)):(i[l]=create_each_block$5(u),i[l].c(),transition_in(i[l],1),i[l].m(t.parentNode,t))}for(group_outros(),l=r.length;l<i.length;l+=1)o(l);check_outros(),!r.length&&a?a.p(s,c):r.length?a&&(a.d(1),a=null):(a=create_else_block_2(s),a.c(),a.m(t.parentNode,t))}},i(s){if(!n){for(let c=0;c<r.length;c+=1)transition_in(i[c]);n=!0}},o(s){i=i.filter(Boolean);for(let c=0;c<i.length;c+=1)transition_out(i[c]);n=!1},d(s){destroy_each(i,s),s&&detach(t),a&&a.d(s)}}}function create_if_block$9(e){let t,n,r;var i=e[3];function o(a){return{props:{items:a[1],itemHeight:a[8],$$slots:{default:[create_default_slot$3,({item:s,i:c})=>({41:s,42:c}),({item:s,i:c})=>[0,(s?1024:0)|(c?2048:0)]]},$$scope:{ctx:a}}}}return i&&(t=new i(o(e))),{c(){t&&create_component(t.$$.fragment),n=empty()},m(a,s){t&&mount_component(t,a,s),insert(a,n,s),r=!0},p(a,s){const c={};if(s[0]&2&&(c.items=a[1]),s[0]&256&&(c.itemHeight=a[8]),s[0]&9814|s[1]&11264&&(c.$$scope={dirty:s,ctx:a}),i!==(i=a[3])){if(t){group_outros();const l=t;transition_out(l.$$.fragment,1,0,()=>{destroy_component(l,1)}),check_outros()}i?(t=new i(o(a)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,n.parentNode,n)):t=null}else i&&t.$set(c)},i(a){r||(t&&transition_in(t.$$.fragment,a),r=!0)},o(a){t&&transition_out(t.$$.fragment,a),r=!1},d(a){a&&detach(n),t&&destroy_component(t,a)}}}function create_else_block_2(e){let t,n=!e[11]&&create_if_block_2$5(e);return{c(){n&&n.c(),t=empty()},m(r,i){n&&n.m(r,i),insert(r,t,i)},p(r,i){r[11]?n&&(n.d(1),n=null):n?n.p(r,i):(n=create_if_block_2$5(r),n.c(),n.m(t.parentNode,t))},d(r){n&&n.d(r),r&&detach(t)}}}function create_if_block_2$5(e){let t,n;return{c(){t=element("div"),n=text(e[12]),attr(t,"class","empty svelte-1uyqfml")},m(r,i){insert(r,t,i),append(t,n)},p(r,i){i[0]&4096&&set_data(n,r[12])},d(r){r&&detach(t)}}}function create_else_block_1$2(e){let t,n,r,i,o,a;var s=e[4];function c(d){return{props:{item:d[41],filterText:d[13],getOptionLabel:d[6],isFirst:isItemFirst(d[42]),isActive:isItemActive(d[41],d[9],d[10]),isHover:isItemHover(d[2],d[41],d[42],d[1]),isSelectable:isItemSelectable(d[41])}}}s&&(n=new s(c(e)));function l(){return e[29](e[42])}function u(){return e[30](e[42])}function f(...d){return e[31](e[41],e[42],...d)}return{c(){t=element("div"),n&&create_component(n.$$.fragment),r=space(),attr(t,"class","listItem"),attr(t,"tabindex","-1")},m(d,g){insert(d,t,g),n&&mount_component(n,t,null),append(t,r),i=!0,o||(a=[listen(t,"mouseover",l),listen(t,"focus",u),listen(t,"click",f)],o=!0)},p(d,g){e=d;const _={};if(g[0]&2&&(_.item=e[41]),g[0]&8192&&(_.filterText=e[13]),g[0]&64&&(_.getOptionLabel=e[6]),g[0]&1538&&(_.isActive=isItemActive(e[41],e[9],e[10])),g[0]&6&&(_.isHover=isItemHover(e[2],e[41],e[42],e[1])),g[0]&2&&(_.isSelectable=isItemSelectable(e[41])),s!==(s=e[4])){if(n){group_outros();const h=n;transition_out(h.$$.fragment,1,0,()=>{destroy_component(h,1)}),check_outros()}s?(n=new s(c(e)),create_component(n.$$.fragment),transition_in(n.$$.fragment,1),mount_component(n,t,r)):n=null}else s&&n.$set(_)},i(d){i||(n&&transition_in(n.$$.fragment,d),i=!0)},o(d){n&&transition_out(n.$$.fragment,d),i=!1},d(d){d&&detach(t),n&&destroy_component(n),o=!1,run_all(a)}}}function create_if_block_1$5(e){let t,n=e[7](e[41])+"",r;return{c(){t=element("div"),r=text(n),attr(t,"class","listGroupTitle svelte-1uyqfml")},m(i,o){insert(i,t,o),append(t,r)},p(i,o){o[0]&130&&n!==(n=i[7](i[41])+"")&&set_data(r,n)},i:noop$1,o:noop$1,d(i){i&&detach(t)}}}function create_each_block$5(e){let t,n,r,i;const o=[create_if_block_1$5,create_else_block_1$2],a=[];function s(c,l){return c[41].isGroupHeader&&!c[41].isSelectable?0:1}return t=s(e),n=a[t]=o[t](e),{c(){n.c(),r=empty()},m(c,l){a[t].m(c,l),insert(c,r,l),i=!0},p(c,l){let u=t;t=s(c),t===u?a[t].p(c,l):(group_outros(),transition_out(a[u],1,1,()=>{a[u]=null}),check_outros(),n=a[t],n?n.p(c,l):(n=a[t]=o[t](c),n.c()),transition_in(n,1),n.m(r.parentNode,r))},i(c){i||(transition_in(n),i=!0)},o(c){transition_out(n),i=!1},d(c){a[t].d(c),c&&detach(r)}}}function create_default_slot$3(e){let t,n,r,i,o;var a=e[4];function s(f){return{props:{item:f[41],filterText:f[13],getOptionLabel:f[6],isFirst:isItemFirst(f[42]),isActive:isItemActive(f[41],f[9],f[10]),isHover:isItemHover(f[2],f[41],f[42],f[1]),isSelectable:isItemSelectable(f[41])}}}a&&(n=new a(s(e)));function c(){return e[26](e[42])}function l(){return e[27](e[42])}function u(...f){return e[28](e[41],e[42],...f)}return{c(){t=element("div"),n&&create_component(n.$$.fragment),attr(t,"class","listItem")},m(f,d){insert(f,t,d),n&&mount_component(n,t,null),r=!0,i||(o=[listen(t,"mouseover",c),listen(t,"focus",l),listen(t,"click",u)],i=!0)},p(f,d){e=f;const g={};if(d[1]&1024&&(g.item=e[41]),d[0]&8192&&(g.filterText=e[13]),d[0]&64&&(g.getOptionLabel=e[6]),d[1]&2048&&(g.isFirst=isItemFirst(e[42])),d[0]&1536|d[1]&1024&&(g.isActive=isItemActive(e[41],e[9],e[10])),d[0]&6|d[1]&3072&&(g.isHover=isItemHover(e[2],e[41],e[42],e[1])),d[1]&1024&&(g.isSelectable=isItemSelectable(e[41])),a!==(a=e[4])){if(n){group_outros();const _=n;transition_out(_.$$.fragment,1,0,()=>{destroy_component(_,1)}),check_outros()}a?(n=new a(s(e)),create_component(n.$$.fragment),transition_in(n.$$.fragment,1),mount_component(n,t,null)):n=null}else a&&n.$set(g)},i(f){r||(n&&transition_in(n.$$.fragment,f),r=!0)},o(f){n&&transition_out(n.$$.fragment,f),r=!1},d(f){f&&detach(t),n&&destroy_component(n),i=!1,run_all(o)}}}function create_fragment$g(e){let t,n,r,i,o,a;const s=[create_if_block$9,create_else_block$4],c=[];function l(u,f){return u[5]?0:1}return n=l(e),r=c[n]=s[n](e),{c(){t=element("div"),r.c(),attr(t,"class","listContainer svelte-1uyqfml"),attr(t,"style",e[14]),toggle_class(t,"virtualList",e[5])},m(u,f){insert(u,t,f),c[n].m(t,null),e[32](t),i=!0,o||(a=[listen(window,"keydown",e[17]),listen(window,"resize",e[18])],o=!0)},p(u,f){let d=n;n=l(u),n===d?c[n].p(u,f):(group_outros(),transition_out(c[d],1,1,()=>{c[d]=null}),check_outros(),r=c[n],r?r.p(u,f):(r=c[n]=s[n](u),r.c()),transition_in(r,1),r.m(t,null)),(!i||f[0]&16384)&&attr(t,"style",u[14]),f[0]&32&&toggle_class(t,"virtualList",u[5])},i(u){i||(transition_in(r),i=!0)},o(u){transition_out(r),i=!1},d(u){u&&detach(t),c[n].d(),e[32](null),o=!1,run_all(a)}}}function isItemActive(e,t,n){return t&&t[n]===e[n]}function isItemFirst(e){return e===0}function isItemHover(e,t,n,r){return isItemSelectable(t)&&(e===n||r.length===1)}function isItemSelectable(e){return e.isGroupHeader&&e.isSelectable||e.selectable||!e.hasOwnProperty("selectable")}function instance$f(e,t,n){const r=createEventDispatcher();let{container:i=void 0}=t,{VirtualList:o=null}=t,{Item:a=Item}=t,{isVirtualList:s=!1}=t,{items:c=[]}=t,{labelIdentifier:l="label"}=t,{getOptionLabel:u=(H,Z)=>{if(H)return H.isCreator?`Create "${Z}"`:H[l]}}=t,{getGroupHeaderLabel:f=null}=t,{itemHeight:d=40}=t,{hoverItemIndex:g=0}=t,{value:_=void 0}=t,{optionIdentifier:h="value"}=t,{hideEmptyState:A=!1}=t,{noOptionsMessage:m="No options"}=t,{isMulti:y=!1}=t,{activeItemIndex:b=0}=t,{filterText:B=""}=t,{parent:v=null}=t,{listPlacement:M=null}=t,{listAutoWidth:D=null}=t,{listOffset:I=5}=t,C=0,E=!1,N;onMount(()=>{if(c.length>0&&!y&&_){const H=c.findIndex(Z=>Z[h]===_[h]);H&&n(2,g=H)}P("active"),i.addEventListener("scroll",()=>{clearTimeout(C),C=setTimeout(()=>{E=!1},100)},!1)}),beforeUpdate(()=>{c||n(1,c=[]),c!==N&&c.length>0&&n(2,g=0),N=c});function S(H){H.isCreator||r("itemSelected",H)}function k(H){E||n(2,g=H)}function Q(H){const{item:Z,i:ie,event:se}=H;if(se.stopPropagation(),_&&!y&&_[h]===Z[h])return w();Z.isCreator?r("itemCreated",B):isItemSelectable(Z)&&(n(19,b=ie),n(2,g=ie),S(Z))}function w(){r("closeList")}async function T(H){if(s)return;let Z=!0;for(;Z;)H>0&&g===c.length-1?n(2,g=0):H<0&&g===0?n(2,g=c.length-1):n(2,g=g+H),Z=!isItemSelectable(c[g]);await tick(),P("hover")}function O(H){switch(H.key){case"Escape":H.preventDefault(),w();break;case"ArrowDown":H.preventDefault(),c.length&&T(1);break;case"ArrowUp":H.preventDefault(),c.length&&T(-1);break;case"Enter":if(H.preventDefault(),c.length===0)break;const Z=c[g];if(_&&!y&&_[h]===Z[h]){w();break}Z.isCreator?r("itemCreated",B):(n(19,b=g),S(c[g]));break;case"Tab":if(H.preventDefault(),c.length===0||_&&_[h]===c[g][h])return w();n(19,b=g),S(c[g]);break}}function P(H){if(s||!i)return;let Z;const ie=i.querySelector(`.listItem .${H}`);ie&&(Z=i.getBoundingClientRect().bottom-ie.getBoundingClientRect().bottom),n(0,i.scrollTop-=Z,i)}let F;function L(){const{height:H,width:Z}=v.getBoundingClientRect();n(14,F=""),n(14,F+=`min-width:${Z}px;width:${D?"auto":"100%"};`),M==="top"||M==="auto"&&isOutOfViewport(v,i).bottom?n(14,F+=`bottom:${H+I}px;`):n(14,F+=`top:${H+I}px;`)}const G=H=>k(H),Y=H=>k(H),U=(H,Z,ie)=>Q({item:H,i:Z,event:ie}),V=H=>k(H),q=H=>k(H),X=(H,Z,ie)=>Q({item:H,i:Z,event:ie});function te(H){binding_callbacks[H?"unshift":"push"](()=>{i=H,n(0,i)})}return e.$$set=H=>{"container"in H&&n(0,i=H.container),"VirtualList"in H&&n(3,o=H.VirtualList),"Item"in H&&n(4,a=H.Item),"isVirtualList"in H&&n(5,s=H.isVirtualList),"items"in H&&n(1,c=H.items),"labelIdentifier"in H&&n(20,l=H.labelIdentifier),"getOptionLabel"in H&&n(6,u=H.getOptionLabel),"getGroupHeaderLabel"in H&&n(7,f=H.getGroupHeaderLabel),"itemHeight"in H&&n(8,d=H.itemHeight),"hoverItemIndex"in H&&n(2,g=H.hoverItemIndex),"value"in H&&n(9,_=H.value),"optionIdentifier"in H&&n(10,h=H.optionIdentifier),"hideEmptyState"in H&&n(11,A=H.hideEmptyState),"noOptionsMessage"in H&&n(12,m=H.noOptionsMessage),"isMulti"in H&&n(21,y=H.isMulti),"activeItemIndex"in H&&n(19,b=H.activeItemIndex),"filterText"in H&&n(13,B=H.filterText),"parent"in H&&n(22,v=H.parent),"listPlacement"in H&&n(23,M=H.listPlacement),"listAutoWidth"in H&&n(24,D=H.listAutoWidth),"listOffset"in H&&n(25,I=H.listOffset)},e.$$.update=()=>{e.$$.dirty[0]&4194305&&v&&i&&L()},[i,c,g,o,a,s,u,f,d,_,h,A,m,B,F,k,Q,O,L,b,l,y,v,M,D,I,G,Y,U,V,q,X,te]}class List extends SvelteComponent{constructor(t){super(),init(this,t,instance$f,create_fragment$g,safe_not_equal,{container:0,VirtualList:3,Item:4,isVirtualList:5,items:1,labelIdentifier:20,getOptionLabel:6,getGroupHeaderLabel:7,itemHeight:8,hoverItemIndex:2,value:9,optionIdentifier:10,hideEmptyState:11,noOptionsMessage:12,isMulti:21,activeItemIndex:19,filterText:13,parent:22,listPlacement:23,listAutoWidth:24,listOffset:25},null,[-1,-1])}}var Selection_svelte_svelte_type_style_lang="";function create_fragment$f(e){let t,n=e[0](e[1])+"";return{c(){t=element("div"),attr(t,"class","selection svelte-pu1q1n")},m(r,i){insert(r,t,i),t.innerHTML=n},p(r,[i]){i&3&&n!==(n=r[0](r[1])+"")&&(t.innerHTML=n)},i:noop$1,o:noop$1,d(r){r&&detach(t)}}}function instance$e(e,t,n){let{getSelectionLabel:r=void 0}=t,{item:i=void 0}=t;return e.$$set=o=>{"getSelectionLabel"in o&&n(0,r=o.getSelectionLabel),"item"in o&&n(1,i=o.item)},[r,i]}class Selection extends SvelteComponent{constructor(t){super(),init(this,t,instance$e,create_fragment$f,safe_not_equal,{getSelectionLabel:0,item:1})}}var MultiSelection_svelte_svelte_type_style_lang="";function get_each_context$4(e,t,n){const r=e.slice();return r[9]=t[n],r[11]=n,r}function create_if_block$8(e){let t,n,r;function i(...o){return e[6](e[11],...o)}return{c(){t=element("div"),t.innerHTML='<svg width="100%" height="100%" viewBox="-2 -2 50 50" focusable="false" aria-hidden="true" role="presentation" class="svelte-liu9pa"><path d="M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z"></path></svg>',attr(t,"class","multiSelectItem_clear svelte-liu9pa")},m(o,a){insert(o,t,a),n||(r=listen(t,"click",i),n=!0)},p(o,a){e=o},d(o){o&&detach(t),n=!1,r()}}}function create_each_block$4(e){let t,n,r=e[4](e[9])+"",i,o,a,s,c,l=!e[2]&&!e[3]&&create_if_block$8(e);function u(...f){return e[7](e[11],...f)}return{c(){t=element("div"),n=element("div"),i=space(),l&&l.c(),o=space(),attr(n,"class","multiSelectItem_label svelte-liu9pa"),attr(t,"class",a="multiSelectItem "+(e[1]===e[11]?"active":"")+" "+(e[2]?"disabled":"")+" svelte-liu9pa")},m(f,d){insert(f,t,d),append(t,n),n.innerHTML=r,append(t,i),l&&l.m(t,null),append(t,o),s||(c=listen(t,"click",u),s=!0)},p(f,d){e=f,d&17&&r!==(r=e[4](e[9])+"")&&(n.innerHTML=r),!e[2]&&!e[3]?l?l.p(e,d):(l=create_if_block$8(e),l.c(),l.m(t,o)):l&&(l.d(1),l=null),d&6&&a!==(a="multiSelectItem "+(e[1]===e[11]?"active":"")+" "+(e[2]?"disabled":"")+" svelte-liu9pa")&&attr(t,"class",a)},d(f){f&&detach(t),l&&l.d(),s=!1,c()}}}function create_fragment$e(e){let t,n=e[0],r=[];for(let i=0;i<n.length;i+=1)r[i]=create_each_block$4(get_each_context$4(e,n,i));return{c(){for(let i=0;i<r.length;i+=1)r[i].c();t=empty()},m(i,o){for(let a=0;a<r.length;a+=1)r[a].m(i,o);insert(i,t,o)},p(i,[o]){if(o&63){n=i[0];let a;for(a=0;a<n.length;a+=1){const s=get_each_context$4(i,n,a);r[a]?r[a].p(s,o):(r[a]=create_each_block$4(s),r[a].c(),r[a].m(t.parentNode,t))}for(;a<r.length;a+=1)r[a].d(1);r.length=n.length}},i:noop$1,o:noop$1,d(i){destroy_each(r,i),i&&detach(t)}}}function instance$d(e,t,n){const r=createEventDispatcher();let{value:i=[]}=t,{activeValue:o=void 0}=t,{isDisabled:a=!1}=t,{multiFullItemClearable:s=!1}=t,{getSelectionLabel:c=void 0}=t;function l(d,g){g.stopPropagation(),r("multiItemClear",{i:d})}const u=(d,g)=>l(d,g),f=(d,g)=>s?l(d,g):{};return e.$$set=d=>{"value"in d&&n(0,i=d.value),"activeValue"in d&&n(1,o=d.activeValue),"isDisabled"in d&&n(2,a=d.isDisabled),"multiFullItemClearable"in d&&n(3,s=d.multiFullItemClearable),"getSelectionLabel"in d&&n(4,c=d.getSelectionLabel)},[i,o,a,s,c,l,u,f]}class MultiSelection extends SvelteComponent{constructor(t){super(),init(this,t,instance$d,create_fragment$e,safe_not_equal,{value:0,activeValue:1,isDisabled:2,multiFullItemClearable:3,getSelectionLabel:4})}}var VirtualList_svelte_svelte_type_style_lang="";function get_each_context$3(e,t,n){const r=e.slice();return r[23]=t[n],r}const get_default_slot_changes=e=>({item:e&32,i:e&32,hoverItemIndex:e&2}),get_default_slot_context=e=>({item:e[23].data,i:e[23].index,hoverItemIndex:e[1]});function fallback_block(e){let t;return{c(){t=text("Missing template")},m(n,r){insert(n,t,r)},d(n){n&&detach(t)}}}function create_each_block$3(e,t){let n,r,i;const o=t[15].default,a=create_slot(o,t,t[14],get_default_slot_context),s=a||fallback_block();return{key:e,first:null,c(){n=element("svelte-virtual-list-row"),s&&s.c(),r=space(),set_custom_element_data(n,"class","svelte-g2cagw"),this.first=n},m(c,l){insert(c,n,l),s&&s.m(n,null),append(n,r),i=!0},p(c,l){t=c,a&&a.p&&(!i||l&16418)&&update_slot_base(a,o,t,t[14],i?get_slot_changes(o,t[14],l,get_default_slot_changes):get_all_dirty_from_scope(t[14]),get_default_slot_context)},i(c){i||(transition_in(s,c),i=!0)},o(c){transition_out(s,c),i=!1},d(c){c&&detach(n),s&&s.d(c)}}}function create_fragment$d(e){let t,n,r=[],i=new Map,o,a,s,c,l=e[5];const u=f=>f[23].index;for(let f=0;f<l.length;f+=1){let d=get_each_context$3(e,l,f),g=u(d);i.set(g,r[f]=create_each_block$3(g,d))}return{c(){t=element("svelte-virtual-list-viewport"),n=element("svelte-virtual-list-contents");for(let f=0;f<r.length;f+=1)r[f].c();set_style(n,"padding-top",e[6]+"px"),set_style(n,"padding-bottom",e[7]+"px"),set_custom_element_data(n,"class","svelte-g2cagw"),set_style(t,"height",e[0]),set_custom_element_data(t,"class","svelte-g2cagw"),add_render_callback(()=>e[18].call(t))},m(f,d){insert(f,t,d),append(t,n);for(let g=0;g<r.length;g+=1)r[g].m(n,null);e[16](n),e[17](t),o=add_resize_listener(t,e[18].bind(t)),a=!0,s||(c=listen(t,"scroll",e[8]),s=!0)},p(f,[d]){d&16418&&(l=f[5],group_outros(),r=update_keyed_each(r,d,u,1,f,l,i,n,outro_and_destroy_block,create_each_block$3,null,get_each_context$3),check_outros()),(!a||d&64)&&set_style(n,"padding-top",f[6]+"px"),(!a||d&128)&&set_style(n,"padding-bottom",f[7]+"px"),(!a||d&1)&&set_style(t,"height",f[0])},i(f){if(!a){for(let d=0;d<l.length;d+=1)transition_in(r[d]);a=!0}},o(f){for(let d=0;d<r.length;d+=1)transition_out(r[d]);a=!1},d(f){f&&detach(t);for(let d=0;d<r.length;d+=1)r[d].d();e[16](null),e[17](null),o(),s=!1,c()}}}function instance$c(e,t,n){let{$$slots:r={},$$scope:i}=t,{items:o=void 0}=t,{height:a="100%"}=t,{itemHeight:s=40}=t,{hoverItemIndex:c=0}=t,{start:l=0}=t,{end:u=0}=t,f=[],d,g,_,h=0,A,m,y=0,b=0,B;async function v(E,N,S){const{scrollTop:k}=g;await tick();let Q=y-k,w=l;for(;Q<N&&w<E.length;){let O=d[w-l];O||(n(10,u=w+1),await tick(),O=d[w-l]),Q+=f[w]=S||O.offsetHeight,w+=1}n(10,u=w);const T=E.length-u;B=(y+Q)/u,n(7,b=T*B),f.length=E.length,g&&n(3,g.scrollTop=0,g)}async function M(){const{scrollTop:E}=g,N=l;for(let w=0;w<d.length;w+=1)f[l+w]=s||d[w].offsetHeight;let S=0,k=0;for(;S<o.length;){const w=f[S]||B;if(k+w>E){n(9,l=S),n(6,y=k);break}k+=w,S+=1}for(;S<o.length&&(k+=f[S]||B,S+=1,!(k>E+h)););n(10,u=S);const Q=o.length-u;for(B=k/u;S<o.length;)f[S++]=B;if(n(7,b=Q*B),l<N){await tick();let w=0,T=0;for(let P=l;P<N;P+=1)d[P-l]&&(w+=f[P],T+=s||d[P-l].offsetHeight);const O=T-w;g.scrollTo(0,E+O)}}onMount(()=>{d=_.getElementsByTagName("svelte-virtual-list-row"),n(13,m=!0)});function D(E){binding_callbacks[E?"unshift":"push"](()=>{_=E,n(4,_)})}function I(E){binding_callbacks[E?"unshift":"push"](()=>{g=E,n(3,g)})}function C(){h=this.offsetHeight,n(2,h)}return e.$$set=E=>{"items"in E&&n(11,o=E.items),"height"in E&&n(0,a=E.height),"itemHeight"in E&&n(12,s=E.itemHeight),"hoverItemIndex"in E&&n(1,c=E.hoverItemIndex),"start"in E&&n(9,l=E.start),"end"in E&&n(10,u=E.end),"$$scope"in E&&n(14,i=E.$$scope)},e.$$.update=()=>{e.$$.dirty&3584&&n(5,A=o.slice(l,u).map((E,N)=>({index:N+l,data:E}))),e.$$.dirty&14340&&m&&v(o,h,s)},[a,c,h,g,_,A,y,b,M,l,u,o,s,m,i,r,D,I,C]}class VirtualList extends SvelteComponent{constructor(t){super(),init(this,t,instance$c,create_fragment$d,safe_not_equal,{items:11,height:0,itemHeight:12,hoverItemIndex:1,start:9,end:10})}}function create_fragment$c(e){let t,n;return{c(){t=svg_element("svg"),n=svg_element("path"),attr(n,"fill","currentColor"),attr(n,"d",`M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124
    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z`),attr(t,"width","100%"),attr(t,"height","100%"),attr(t,"viewBox","-2 -2 50 50"),attr(t,"focusable","false"),attr(t,"aria-hidden","true"),attr(t,"role","presentation")},m(r,i){insert(r,t,i),append(t,n)},p:noop$1,i:noop$1,o:noop$1,d(r){r&&detach(t)}}}class ClearIcon extends SvelteComponent{constructor(t){super(),init(this,t,null,create_fragment$c,safe_not_equal,{})}}function debounce(e,t,n){let r;return function(){let o=this,a=arguments,s=function(){r=null,n||e.apply(o,a)},c=n&&!r;clearTimeout(r),r=setTimeout(s,t),c&&e.apply(o,a)}}var Select_svelte_svelte_type_style_lang="";function get_each_context$2(e,t,n){const r=e.slice();return r[103]=t[n],r}function create_if_block_10(e){let t,n,r,i,o;return{c(){t=element("span"),n=text(e[33]),r=space(),i=element("span"),o=text(e[32]),attr(t,"id","aria-selection"),attr(i,"id","aria-context")},m(a,s){insert(a,t,s),append(t,n),insert(a,r,s),insert(a,i,s),append(i,o)},p(a,s){s[1]&4&&set_data(n,a[33]),s[1]&2&&set_data(o,a[32])},d(a){a&&detach(t),a&&detach(r),a&&detach(i)}}}function create_if_block_9(e){let t,n,r;const i=[e[18]];var o=e[17];function a(s){let c={};for(let l=0;l<i.length;l+=1)c=assign(c,i[l]);return{props:c}}return o&&(t=new o(a())),{c(){t&&create_component(t.$$.fragment),n=empty()},m(s,c){t&&mount_component(t,s,c),insert(s,n,c),r=!0},p(s,c){const l=c[0]&262144?get_spread_update(i,[get_spread_object(s[18])]):{};if(o!==(o=s[17])){if(t){group_outros();const u=t;transition_out(u.$$.fragment,1,0,()=>{destroy_component(u,1)}),check_outros()}o?(t=new o(a()),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,n.parentNode,n)):t=null}else o&&t.$set(l)},i(s){r||(t&&transition_in(t.$$.fragment,s),r=!0)},o(s){t&&transition_out(t.$$.fragment,s),r=!1},d(s){s&&detach(n),t&&destroy_component(t,s)}}}function create_if_block_8(e){let t,n,r;var i=e[26];function o(a){return{props:{value:a[2],getSelectionLabel:a[12],activeValue:a[30],isDisabled:a[9],multiFullItemClearable:a[8]}}}return i&&(t=new i(o(e)),t.$on("multiItemClear",e[38]),t.$on("focus",e[40])),{c(){t&&create_component(t.$$.fragment),n=empty()},m(a,s){t&&mount_component(t,a,s),insert(a,n,s),r=!0},p(a,s){const c={};if(s[0]&4&&(c.value=a[2]),s[0]&4096&&(c.getSelectionLabel=a[12]),s[0]&1073741824&&(c.activeValue=a[30]),s[0]&512&&(c.isDisabled=a[9]),s[0]&256&&(c.multiFullItemClearable=a[8]),i!==(i=a[26])){if(t){group_outros();const l=t;transition_out(l.$$.fragment,1,0,()=>{destroy_component(l,1)}),check_outros()}i?(t=new i(o(a)),t.$on("multiItemClear",a[38]),t.$on("focus",a[40]),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,n.parentNode,n)):t=null}else i&&t.$set(c)},i(a){r||(t&&transition_in(t.$$.fragment,a),r=!0)},o(a){t&&transition_out(t.$$.fragment,a),r=!1},d(a){a&&detach(n),t&&destroy_component(t,a)}}}function create_if_block_7$1(e){let t,n,r,i,o;var a=e[25];function s(c){return{props:{item:c[2],getSelectionLabel:c[12]}}}return a&&(n=new a(s(e))),{c(){t=element("div"),n&&create_component(n.$$.fragment),attr(t,"class","selectedItem svelte-17l1npl")},m(c,l){insert(c,t,l),n&&mount_component(n,t,null),r=!0,i||(o=listen(t,"focus",e[40]),i=!0)},p(c,l){const u={};if(l[0]&4&&(u.item=c[2]),l[0]&4096&&(u.getSelectionLabel=c[12]),a!==(a=c[25])){if(n){group_outros();const f=n;transition_out(f.$$.fragment,1,0,()=>{destroy_component(f,1)}),check_outros()}a?(n=new a(s(c)),create_component(n.$$.fragment),transition_in(n.$$.fragment,1),mount_component(n,t,null)):n=null}else a&&n.$set(u)},i(c){r||(n&&transition_in(n.$$.fragment,c),r=!0)},o(c){n&&transition_out(n.$$.fragment,c),r=!1},d(c){c&&detach(t),n&&destroy_component(n),i=!1,o()}}}function create_if_block_6$1(e){let t,n,r,i,o;var a=e[23];function s(c){return{}}return a&&(n=new a(s())),{c(){t=element("div"),n&&create_component(n.$$.fragment),attr(t,"class","clearSelect svelte-17l1npl"),attr(t,"aria-hidden","true")},m(c,l){insert(c,t,l),n&&mount_component(n,t,null),r=!0,i||(o=listen(t,"click",prevent_default(e[27])),i=!0)},p(c,l){if(a!==(a=c[23])){if(n){group_outros();const u=n;transition_out(u.$$.fragment,1,0,()=>{destroy_component(u,1)}),check_outros()}a?(n=new a(s()),create_component(n.$$.fragment),transition_in(n.$$.fragment,1),mount_component(n,t,null)):n=null}},i(c){r||(n&&transition_in(n.$$.fragment,c),r=!0)},o(c){n&&transition_out(n.$$.fragment,c),r=!1},d(c){c&&detach(t),n&&destroy_component(n),i=!1,o()}}}function create_if_block_4$1(e){let t;function n(o,a){return o[22]?create_if_block_5$1:create_else_block$3}let r=n(e),i=r(e);return{c(){t=element("div"),i.c(),attr(t,"class","indicator svelte-17l1npl"),attr(t,"aria-hidden","true")},m(o,a){insert(o,t,a),i.m(t,null)},p(o,a){r===(r=n(o))&&i?i.p(o,a):(i.d(1),i=r(o),i&&(i.c(),i.m(t,null)))},d(o){o&&detach(t),i.d()}}}function create_else_block$3(e){let t,n;return{c(){t=svg_element("svg"),n=svg_element("path"),attr(n,"d",`M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747
          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0
          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502
          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0
          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z`),attr(t,"width","100%"),attr(t,"height","100%"),attr(t,"viewBox","0 0 20 20"),attr(t,"focusable","false"),attr(t,"aria-hidden","true"),attr(t,"class","svelte-17l1npl")},m(r,i){insert(r,t,i),append(t,n)},p:noop$1,d(r){r&&detach(t)}}}function create_if_block_5$1(e){let t,n;return{c(){t=new HtmlTag(!1),n=empty(),t.a=n},m(r,i){t.m(e[22],r,i),insert(r,n,i)},p(r,i){i[0]&4194304&&t.p(r[22])},d(r){r&&detach(n),r&&t.d()}}}function create_if_block_3$2(e){let t;return{c(){t=element("div"),t.innerHTML='<svg class="spinner_icon svelte-17l1npl" viewBox="25 25 50 50"><circle class="spinner_path svelte-17l1npl" cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="5" stroke-miterlimit="10"></circle></svg>',attr(t,"class","spinner svelte-17l1npl")},m(n,r){insert(n,t,r)},d(n){n&&detach(t)}}}function create_if_block_2$4(e){let t,n,r,i;const o=[e[34]];function a(l){e[84](l)}var s=e[24];function c(l){let u={};for(let f=0;f<o.length;f+=1)u=assign(u,o[f]);return l[28]!==void 0&&(u.hoverItemIndex=l[28]),{props:u}}return s&&(t=new s(c(e)),binding_callbacks.push(()=>bind(t,"hoverItemIndex",a)),t.$on("itemSelected",e[43]),t.$on("itemCreated",e[44]),t.$on("closeList",e[45])),{c(){t&&create_component(t.$$.fragment),r=empty()},m(l,u){t&&mount_component(t,l,u),insert(l,r,u),i=!0},p(l,u){const f=u[1]&8?get_spread_update(o,[get_spread_object(l[34])]):{};if(!n&&u[0]&268435456&&(n=!0,f.hoverItemIndex=l[28],add_flush_callback(()=>n=!1)),s!==(s=l[24])){if(t){group_outros();const d=t;transition_out(d.$$.fragment,1,0,()=>{destroy_component(d,1)}),check_outros()}s?(t=new s(c(l)),binding_callbacks.push(()=>bind(t,"hoverItemIndex",a)),t.$on("itemSelected",l[43]),t.$on("itemCreated",l[44]),t.$on("closeList",l[45]),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,r.parentNode,r)):t=null}else s&&t.$set(f)},i(l){i||(t&&transition_in(t.$$.fragment,l),i=!0)},o(l){t&&transition_out(t.$$.fragment,l),i=!1},d(l){l&&detach(r),t&&destroy_component(t,l)}}}function create_if_block_1$4(e){let t,n,r;return{c(){t=element("input"),attr(t,"name",n=e[16].name),attr(t,"type","hidden"),t.value=r=e[2]?e[12](e[2]):null,attr(t,"class","svelte-17l1npl")},m(i,o){insert(i,t,o)},p(i,o){o[0]&65536&&n!==(n=i[16].name)&&attr(t,"name",n),o[0]&4100&&r!==(r=i[2]?i[12](i[2]):null)&&(t.value=r)},d(i){i&&detach(t)}}}function create_if_block$7(e){let t,n=e[2],r=[];for(let i=0;i<n.length;i+=1)r[i]=create_each_block$2(get_each_context$2(e,n,i));return{c(){for(let i=0;i<r.length;i+=1)r[i].c();t=empty()},m(i,o){for(let a=0;a<r.length;a+=1)r[a].m(i,o);insert(i,t,o)},p(i,o){if(o[0]&69636){n=i[2];let a;for(a=0;a<n.length;a+=1){const s=get_each_context$2(i,n,a);r[a]?r[a].p(s,o):(r[a]=create_each_block$2(s),r[a].c(),r[a].m(t.parentNode,t))}for(;a<r.length;a+=1)r[a].d(1);r.length=n.length}},d(i){destroy_each(r,i),i&&detach(t)}}}function create_each_block$2(e){let t,n,r;return{c(){t=element("input"),attr(t,"name",n=e[16].name),attr(t,"type","hidden"),t.value=r=e[103]?e[12](e[103]):null,attr(t,"class","svelte-17l1npl")},m(i,o){insert(i,t,o)},p(i,o){o[0]&65536&&n!==(n=i[16].name)&&attr(t,"name",n),o[0]&4100&&r!==(r=i[103]?i[12](i[103]):null)&&(t.value=r)},d(i){i&&detach(t)}}}function create_fragment$b(e){let t,n,r,i,o,a,s,c,l,u,f,d,g,_,h,A,m,y,b=e[1]&&create_if_block_10(e),B=e[17]&&create_if_block_9(e),v=e[35]&&create_if_block_8(e),M=[{readOnly:s=!e[13]},e[31],{placeholder:e[36]},{style:e[14]},{disabled:e[9]}],D={};for(let w=0;w<M.length;w+=1)D=assign(D,M[w]);let I=!e[7]&&e[29]&&create_if_block_7$1(e),C=e[37]&&create_if_block_6$1(e),E=!e[37]&&(e[20]||e[19]&&!e[2]||!e[13]&&!e[9]&&!e[4]&&(e[29]&&!e[15]||!e[29]))&&create_if_block_4$1(e),N=e[4]&&create_if_block_3$2(),S=e[5]&&create_if_block_2$4(e),k=(!e[7]||e[7]&&!e[35])&&create_if_block_1$4(e),Q=e[7]&&e[35]&&create_if_block$7(e);return{c(){t=element("div"),n=element("span"),b&&b.c(),r=space(),B&&B.c(),i=space(),v&&v.c(),o=space(),a=element("input"),c=space(),I&&I.c(),l=space(),C&&C.c(),u=space(),E&&E.c(),f=space(),N&&N.c(),d=space(),S&&S.c(),g=space(),k&&k.c(),_=space(),Q&&Q.c(),attr(n,"aria-live","polite"),attr(n,"aria-atomic","false"),attr(n,"aria-relevant","additions text"),attr(n,"class","a11yText svelte-17l1npl"),set_attributes(a,D),toggle_class(a,"svelte-17l1npl",!0),attr(t,"class",h="selectContainer "+e[21]+" svelte-17l1npl"),attr(t,"style",e[11]),toggle_class(t,"hasError",e[10]),toggle_class(t,"multiSelect",e[7]),toggle_class(t,"disabled",e[9]),toggle_class(t,"focused",e[1])},m(w,T){insert(w,t,T),append(t,n),b&&b.m(n,null),append(t,r),B&&B.m(t,null),append(t,i),v&&v.m(t,null),append(t,o),append(t,a),a.autofocus&&a.focus(),e[82](a),set_input_value(a,e[3]),append(t,c),I&&I.m(t,null),append(t,l),C&&C.m(t,null),append(t,u),E&&E.m(t,null),append(t,f),N&&N.m(t,null),append(t,d),S&&S.m(t,null),append(t,g),k&&k.m(t,null),append(t,_),Q&&Q.m(t,null),e[85](t),A=!0,m||(y=[listen(window,"click",e[41]),listen(window,"focusin",e[41]),listen(window,"keydown",e[39]),listen(a,"focus",e[40]),listen(a,"input",e[83]),listen(t,"click",e[42])],m=!0)},p(w,T){w[1]?b?b.p(w,T):(b=create_if_block_10(w),b.c(),b.m(n,null)):b&&(b.d(1),b=null),w[17]?B?(B.p(w,T),T[0]&131072&&transition_in(B,1)):(B=create_if_block_9(w),B.c(),transition_in(B,1),B.m(t,i)):B&&(group_outros(),transition_out(B,1,1,()=>{B=null}),check_outros()),w[35]?v?(v.p(w,T),T[1]&16&&transition_in(v,1)):(v=create_if_block_8(w),v.c(),transition_in(v,1),v.m(t,o)):v&&(group_outros(),transition_out(v,1,1,()=>{v=null}),check_outros()),set_attributes(a,D=get_spread_update(M,[(!A||T[0]&8192&&s!==(s=!w[13]))&&{readOnly:s},T[1]&1&&w[31],(!A||T[1]&32)&&{placeholder:w[36]},(!A||T[0]&16384)&&{style:w[14]},(!A||T[0]&512)&&{disabled:w[9]}])),T[0]&8&&a.value!==w[3]&&set_input_value(a,w[3]),toggle_class(a,"svelte-17l1npl",!0),!w[7]&&w[29]?I?(I.p(w,T),T[0]&536871040&&transition_in(I,1)):(I=create_if_block_7$1(w),I.c(),transition_in(I,1),I.m(t,l)):I&&(group_outros(),transition_out(I,1,1,()=>{I=null}),check_outros()),w[37]?C?(C.p(w,T),T[1]&64&&transition_in(C,1)):(C=create_if_block_6$1(w),C.c(),transition_in(C,1),C.m(t,u)):C&&(group_outros(),transition_out(C,1,1,()=>{C=null}),check_outros()),!w[37]&&(w[20]||w[19]&&!w[2]||!w[13]&&!w[9]&&!w[4]&&(w[29]&&!w[15]||!w[29]))?E?E.p(w,T):(E=create_if_block_4$1(w),E.c(),E.m(t,f)):E&&(E.d(1),E=null),w[4]?N||(N=create_if_block_3$2(),N.c(),N.m(t,d)):N&&(N.d(1),N=null),w[5]?S?(S.p(w,T),T[0]&32&&transition_in(S,1)):(S=create_if_block_2$4(w),S.c(),transition_in(S,1),S.m(t,g)):S&&(group_outros(),transition_out(S,1,1,()=>{S=null}),check_outros()),!w[7]||w[7]&&!w[35]?k?k.p(w,T):(k=create_if_block_1$4(w),k.c(),k.m(t,_)):k&&(k.d(1),k=null),w[7]&&w[35]?Q?Q.p(w,T):(Q=create_if_block$7(w),Q.c(),Q.m(t,null)):Q&&(Q.d(1),Q=null),(!A||T[0]&2097152&&h!==(h="selectContainer "+w[21]+" svelte-17l1npl"))&&attr(t,"class",h),(!A||T[0]&2048)&&attr(t,"style",w[11]),T[0]&2098176&&toggle_class(t,"hasError",w[10]),T[0]&2097280&&toggle_class(t,"multiSelect",w[7]),T[0]&2097664&&toggle_class(t,"disabled",w[9]),T[0]&2097154&&toggle_class(t,"focused",w[1])},i(w){A||(transition_in(B),transition_in(v),transition_in(I),transition_in(C),transition_in(S),A=!0)},o(w){transition_out(B),transition_out(v),transition_out(I),transition_out(C),transition_out(S),A=!1},d(w){w&&detach(t),b&&b.d(),B&&B.d(),v&&v.d(),e[82](null),I&&I.d(),C&&C.d(),E&&E.d(),N&&N.d(),S&&S.d(),k&&k.d(),Q&&Q.d(),e[85](null),m=!1,run_all(y)}}}function convertStringItemsToObjects(e){return e.map((t,n)=>({index:n,value:t,label:`${t}`}))}function instance$b(e,t,n){let r,i,o,a,s,c,l,u;const f=createEventDispatcher();let{id:d=null}=t,{container:g=void 0}=t,{input:_=void 0}=t,{isMulti:h=!1}=t,{multiFullItemClearable:A=!1}=t,{isDisabled:m=!1}=t,{isCreatable:y=!1}=t,{isFocused:b=!1}=t,{value:B=null}=t,{filterText:v=""}=t,{placeholder:M="Select..."}=t,{placeholderAlwaysShow:D=!1}=t,{items:I=null}=t,{itemFilter:C=(R,j,oe)=>`${R}`.toLowerCase().includes(j.toLowerCase())}=t,{groupBy:E=void 0}=t,{groupFilter:N=R=>R}=t,{isGroupHeaderSelectable:S=!1}=t,{getGroupHeaderLabel:k=R=>R[Q]||R.id}=t,{labelIdentifier:Q="label"}=t,{getOptionLabel:w=(R,j)=>R.isCreator?`Create "${j}"`:R[Q]}=t,{optionIdentifier:T="value"}=t,{loadOptions:O=void 0}=t,{hasError:P=!1}=t,{containerStyles:F=""}=t,{getSelectionLabel:L=R=>R?R[Q]:null}=t,{createGroupHeaderItem:G=R=>({value:R,label:R})}=t,{createItem:Y=R=>({value:R,label:R})}=t;const U=()=>r;let{isSearchable:V=!0}=t,{inputStyles:q=""}=t,{isClearable:X=!0}=t,{isWaiting:te=!1}=t,{listPlacement:H="auto"}=t,{listOpen:Z=!1}=t,{isVirtualList:ie=!1}=t,{loadOptionsInterval:se=300}=t,{noOptionsMessage:ce="No options"}=t,{hideEmptyState:re=!1}=t,{inputAttributes:x={}}=t,{listAutoWidth:ee=!0}=t,{itemHeight:ge=40}=t,{Icon:J=void 0}=t,{iconProps:z={}}=t,{showChevron:ne=!1}=t,{showIndicator:ue=!1}=t,{containerClasses:le=""}=t,{indicatorSvg:Ae=void 0}=t,{listOffset:_e=5}=t,{ClearIcon:we=ClearIcon}=t,{Item:ve=Item}=t,{List:me=List}=t,{Selection:Ce=Selection}=t,{MultiSelection:Pe=MultiSelection}=t,{VirtualList:Qe=VirtualList}=t;function Fe(R){if(R.loadOptions&&R.filterText.length>0)return;if(!R.items)return[];R.items&&R.items.length>0&&typeof R.items[0]!="object"&&(R.items=convertStringItemsToObjects(R.items));let j=R.items.filter(oe=>{let he=C(w(oe,R.filterText),R.filterText,oe);return he&&R.isMulti&&R.value&&Array.isArray(R.value)&&(he=!R.value.some(ke=>ke[R.optionIdentifier]===oe[R.optionIdentifier])),he});return R.groupBy&&(j=Ve(j)),R.isCreatable&&(j=ye(j,R.filterText)),j}function ye(R,j){if(j.length===0)return R;const oe=Y(j);return R[0]&&j===R[0][Q]?R:(oe.isCreator=!0,[...R,oe])}let{selectedValue:Ie=null}=t,ae,be,Ne,Oe,Re,Se;const Ye=debounce(async()=>{n(4,te=!0);let R=await O(v).catch(j=>{console.warn("svelte-select loadOptions error :>> ",j),f("error",{type:"loadOptions",details:j})});R&&!R.cancelled&&(R?(R&&R.length>0&&typeof R[0]!="object"&&(R=convertStringItemsToObjects(R)),n(81,r=[...R]),f("loaded",{items:r})):n(81,r=[]),y&&n(81,r=ye(r,v)),n(4,te=!1),n(1,b=!0),n(5,Z=!0))},se);function Le(){typeof B=="string"?n(2,B={[T]:B,label:B}):h&&Array.isArray(B)&&B.length>0&&n(2,B=B.map(R=>typeof R=="string"?{value:R,label:R}:R))}let Ee;function He(){n(31,Ee=Object.assign({autocapitalize:"none",autocomplete:"off",autocorrect:"off",spellcheck:!1,tabindex:0,type:"text","aria-autocomplete":"list"},x)),d&&n(31,Ee.id=d,Ee),V||n(31,Ee.readonly=!0,Ee)}function Ve(R){const j=[],oe={};R.forEach(ke=>{const Be=E(ke);j.includes(Be)||(j.push(Be),oe[Be]=[],Be&&oe[Be].push(Object.assign(G(Be,ke),{id:Be,isGroupHeader:!0,isSelectable:S}))),oe[Be].push(Object.assign({isGroupItem:!!Be},ke))});const he=[];return N(j).forEach(ke=>{he.push(...oe[ke])}),he}function $e(){if(h){JSON.stringify(B)!==JSON.stringify(be)&&De()&&f("select",B);return}(!be||JSON.stringify(B[T])!==JSON.stringify(be[T]))&&f("select",B)}function ze(){b||Z?Te():_&&_.blur()}function xe(){B&&(Array.isArray(B)?n(2,B=[...B]):n(2,B=[B]))}function We(){B&&n(2,B=null)}function Xe(){v.length!==0&&(n(1,b=!0),n(5,Z=!0),O?Ye():(n(5,Z=!0),h&&n(30,ae=void 0)))}beforeUpdate(async()=>{n(77,be=B),n(78,Ne=v),n(79,Oe=b),n(80,Re=h)});function De(){let R=!0;if(B){const j=[],oe=[];B.forEach(he=>{j.includes(he[T])?R=!1:(j.push(he[T]),oe.push(he))}),R||n(2,B=oe)}return R}function Ue(R){let j=R?R[T]:B[T];return I.find(oe=>oe[T]===j)}function Ge(R){!R||R.length===0||R.some(j=>typeof j!="object")||!B||(h?B.some(j=>!j||!j[T]):!B[T])||(Array.isArray(B)?n(2,B=B.map(j=>Ue(j)||j)):n(2,B=Ue()||B))}function fe(R){const{detail:j}=R,oe=B[j?j.i:B.length-1];B.length===1?n(2,B=void 0):n(2,B=B.filter(he=>he!==oe)),f("clear",oe)}function pe(R){if(!!b)switch(R.key){case"ArrowDown":R.preventDefault(),n(5,Z=!0),n(30,ae=void 0);break;case"ArrowUp":R.preventDefault(),n(5,Z=!0),n(30,ae=void 0);break;case"Tab":Z||n(1,b=!1);break;case"Backspace":if(!h||v.length>0)return;if(h&&B&&B.length>0){if(fe(ae!==void 0?ae:B.length-1),ae===0||ae===void 0)break;n(30,ae=B.length>ae?ae-1:void 0)}break;case"ArrowLeft":if(!h||v.length>0)return;ae===void 0?n(30,ae=B.length-1):B.length>ae&&ae!==0&&n(30,ae-=1);break;case"ArrowRight":if(!h||v.length>0||ae===void 0)return;ae===B.length-1?n(30,ae=void 0):ae<B.length-1&&n(30,ae+=1);break}}function Te(){n(1,b=!0),_&&_.focus()}function Ze(R){if(!g)return;const j=R.path&&R.path.length>0?R.path[0]:R.target;g.contains(j)||g.contains(R.relatedTarget)||(n(1,b=!1),n(5,Z=!1),n(30,ae=void 0),_&&_.blur())}function at(){m||(n(1,b=!0),n(5,Z=!Z))}function st(){n(2,B=void 0),n(5,Z=!1),f("clear",B),Te()}onMount(()=>{b&&_&&_.focus()});function ct(R){const{detail:j}=R;if(j){n(3,v="");const oe=Object.assign({},j);(!oe.isGroupHeader||oe.isSelectable)&&(h?n(2,B=B?B.concat([oe]):[oe]):n(2,B=oe),n(2,B),setTimeout(()=>{n(5,Z=!1),n(30,ae=void 0)}))}}function lt(R){const{detail:j}=R;h?(n(2,B=B||[]),n(2,B=[...B,Y(j)])):n(2,B=Y(j)),f("itemCreated",j),n(3,v=""),n(5,Z=!1),n(30,ae=void 0)}function ut(){n(3,v=""),n(5,Z=!1)}let{ariaValues:je=R=>`Option ${R}, selected.`}=t,{ariaListOpen:et=(R,j)=>`You are currently focused on option ${R}. There are ${j} results available.`}=t,{ariaFocused:tt=()=>"Select is focused, type to refine list, press down to open the menu."}=t;function ft(){let R;return h&&B.length>0?R=B.map(j=>L(j)).join(", "):R=L(B),je(R)}function dt(){if(!b||!r||r.length===0)return"";let R=r[Se];if(Z&&R){let j=L(R),oe=r?r.length:0;return et(j,oe)}else return tt()}function At(R){binding_callbacks[R?"unshift":"push"](()=>{_=R,n(6,_)})}function gt(){v=this.value,n(3,v)}function _t(R){Se=R,n(28,Se)}function ht(R){binding_callbacks[R?"unshift":"push"](()=>{g=R,n(0,g)})}return e.$$set=R=>{"id"in R&&n(46,d=R.id),"container"in R&&n(0,g=R.container),"input"in R&&n(6,_=R.input),"isMulti"in R&&n(7,h=R.isMulti),"multiFullItemClearable"in R&&n(8,A=R.multiFullItemClearable),"isDisabled"in R&&n(9,m=R.isDisabled),"isCreatable"in R&&n(47,y=R.isCreatable),"isFocused"in R&&n(1,b=R.isFocused),"value"in R&&n(2,B=R.value),"filterText"in R&&n(3,v=R.filterText),"placeholder"in R&&n(48,M=R.placeholder),"placeholderAlwaysShow"in R&&n(49,D=R.placeholderAlwaysShow),"items"in R&&n(50,I=R.items),"itemFilter"in R&&n(51,C=R.itemFilter),"groupBy"in R&&n(52,E=R.groupBy),"groupFilter"in R&&n(53,N=R.groupFilter),"isGroupHeaderSelectable"in R&&n(54,S=R.isGroupHeaderSelectable),"getGroupHeaderLabel"in R&&n(55,k=R.getGroupHeaderLabel),"labelIdentifier"in R&&n(56,Q=R.labelIdentifier),"getOptionLabel"in R&&n(57,w=R.getOptionLabel),"optionIdentifier"in R&&n(58,T=R.optionIdentifier),"loadOptions"in R&&n(59,O=R.loadOptions),"hasError"in R&&n(10,P=R.hasError),"containerStyles"in R&&n(11,F=R.containerStyles),"getSelectionLabel"in R&&n(12,L=R.getSelectionLabel),"createGroupHeaderItem"in R&&n(60,G=R.createGroupHeaderItem),"createItem"in R&&n(61,Y=R.createItem),"isSearchable"in R&&n(13,V=R.isSearchable),"inputStyles"in R&&n(14,q=R.inputStyles),"isClearable"in R&&n(15,X=R.isClearable),"isWaiting"in R&&n(4,te=R.isWaiting),"listPlacement"in R&&n(63,H=R.listPlacement),"listOpen"in R&&n(5,Z=R.listOpen),"isVirtualList"in R&&n(64,ie=R.isVirtualList),"loadOptionsInterval"in R&&n(65,se=R.loadOptionsInterval),"noOptionsMessage"in R&&n(66,ce=R.noOptionsMessage),"hideEmptyState"in R&&n(67,re=R.hideEmptyState),"inputAttributes"in R&&n(16,x=R.inputAttributes),"listAutoWidth"in R&&n(68,ee=R.listAutoWidth),"itemHeight"in R&&n(69,ge=R.itemHeight),"Icon"in R&&n(17,J=R.Icon),"iconProps"in R&&n(18,z=R.iconProps),"showChevron"in R&&n(19,ne=R.showChevron),"showIndicator"in R&&n(20,ue=R.showIndicator),"containerClasses"in R&&n(21,le=R.containerClasses),"indicatorSvg"in R&&n(22,Ae=R.indicatorSvg),"listOffset"in R&&n(70,_e=R.listOffset),"ClearIcon"in R&&n(23,we=R.ClearIcon),"Item"in R&&n(71,ve=R.Item),"List"in R&&n(24,me=R.List),"Selection"in R&&n(25,Ce=R.Selection),"MultiSelection"in R&&n(26,Pe=R.MultiSelection),"VirtualList"in R&&n(72,Qe=R.VirtualList),"selectedValue"in R&&n(73,Ie=R.selectedValue),"ariaValues"in R&&n(74,je=R.ariaValues),"ariaListOpen"in R&&n(75,et=R.ariaListOpen),"ariaFocused"in R&&n(76,tt=R.ariaFocused)},e.$$.update=()=>{e.$$.dirty[0]&140|e.$$.dirty[1]&405340160&&n(81,r=Fe({loadOptions:O,filterText:v,items:I,value:B,isMulti:h,optionIdentifier:T,groupBy:E,isCreatable:y})),e.$$.dirty[2]&2048&&Ie&&console.warn("selectedValue is no longer used. Please use value instead."),e.$$.dirty[1]&524288&&Ge(I),e.$$.dirty[0]&4&&B&&Le(),e.$$.dirty[0]&73728&&(x||!V)&&He(),e.$$.dirty[0]&128|e.$$.dirty[2]&262144&&(h&&xe(),Re&&!h&&We()),e.$$.dirty[0]&132&&h&&B&&B.length>1&&De(),e.$$.dirty[0]&4&&B&&$e(),e.$$.dirty[0]&132|e.$$.dirty[2]&32768&&!B&&h&&be&&f("select",B),e.$$.dirty[0]&2|e.$$.dirty[2]&131072&&b!==Oe&&ze(),e.$$.dirty[0]&8|e.$$.dirty[2]&65536&&v!==Ne&&Xe(),e.$$.dirty[0]&12&&n(29,i=B&&v.length===0),e.$$.dirty[0]&536904208&&n(37,o=i&&X&&!m&&!te),e.$$.dirty[0]&132|e.$$.dirty[1]&393216&&n(36,a=D&&h?M:B?"":M),e.$$.dirty[0]&132&&n(35,s=h&&B&&B.length>0),e.$$.dirty[0]&141|e.$$.dirty[1]&218103808|e.$$.dirty[2]&526326&&n(34,c={Item:ve,filterText:v,optionIdentifier:T,noOptionsMessage:ce,hideEmptyState:re,isVirtualList:ie,VirtualList:Qe,value:B,isMulti:h,getGroupHeaderLabel:k,items:r,itemHeight:ge,getOptionLabel:w,listPlacement:H,parent:g,listAutoWidth:ee,listOffset:_e}),e.$$.dirty[0]&132&&n(33,l=B?ft():""),e.$$.dirty[0]&268435490|e.$$.dirty[2]&524288&&n(32,u=dt())},[g,b,B,v,te,Z,_,h,A,m,P,F,L,V,q,X,x,J,z,ne,ue,le,Ae,we,me,Ce,Pe,st,Se,i,ae,Ee,u,l,c,s,a,o,fe,pe,Te,Ze,at,ct,lt,ut,d,y,M,D,I,C,E,N,S,k,Q,w,T,O,G,Y,U,H,ie,se,ce,re,ee,ge,_e,ve,Qe,Ie,je,et,tt,be,Ne,Oe,Re,r,At,gt,_t,ht]}class Select extends SvelteComponent{constructor(t){super(),init(this,t,instance$b,create_fragment$b,safe_not_equal,{id:46,container:0,input:6,isMulti:7,multiFullItemClearable:8,isDisabled:9,isCreatable:47,isFocused:1,value:2,filterText:3,placeholder:48,placeholderAlwaysShow:49,items:50,itemFilter:51,groupBy:52,groupFilter:53,isGroupHeaderSelectable:54,getGroupHeaderLabel:55,labelIdentifier:56,getOptionLabel:57,optionIdentifier:58,loadOptions:59,hasError:10,containerStyles:11,getSelectionLabel:12,createGroupHeaderItem:60,createItem:61,getFilteredItems:62,isSearchable:13,inputStyles:14,isClearable:15,isWaiting:4,listPlacement:63,listOpen:5,isVirtualList:64,loadOptionsInterval:65,noOptionsMessage:66,hideEmptyState:67,inputAttributes:16,listAutoWidth:68,itemHeight:69,Icon:17,iconProps:18,showChevron:19,showIndicator:20,containerClasses:21,indicatorSvg:22,listOffset:70,ClearIcon:23,Item:71,List:24,Selection:25,MultiSelection:26,VirtualList:72,selectedValue:73,handleClear:27,ariaValues:74,ariaListOpen:75,ariaFocused:76},null,[-1,-1,-1,-1])}get getFilteredItems(){return this.$$.ctx[62]}get handleClear(){return this.$$.ctx[27]}}var StarSelect_svelte_svelte_type_style_lang="";function create_fragment$a(e){let t,n,r,i,o,a;function s(l){e[14](l)}let c={id:"sender-select",placeholder:e[1],listOffset:e[2],isClearable:e[3],showIndicator:e[4],indicatorSvg:SX_ICON_DROPDOWN,listPlacement:"bottom",items:e[5],getOptionLabel:e[9],getSelectionLabel:e[9]};return e[0]!==void 0&&(c.value=e[0]),n=new Select({props:c}),binding_callbacks.push(()=>bind(n,"value",s)),{c(){t=element("div"),r=element("div"),create_component(n.$$.fragment),set_style(r,"display","contents"),set_style(r,"--listMaxHeight",e[8]),attr(t,"class",o="star-select "+e[6]+" svelte-dvjau7")},m(l,u){insert(l,t,u),append(t,r),mount_component(n,r,null),e[15](t),a=!0},p(l,[u]){u&256&&set_style(r,"--listMaxHeight",l[8]);const f={};u&2&&(f.placeholder=l[1]),u&4&&(f.listOffset=l[2]),u&8&&(f.isClearable=l[3]),u&16&&(f.showIndicator=l[4]),u&32&&(f.items=l[5]),!i&&u&1&&(i=!0,f.value=l[0],add_flush_callback(()=>i=!1)),n.$set(f),(!a||u&64&&o!==(o="star-select "+l[6]+" svelte-dvjau7"))&&attr(t,"class",o)},i(l){a||(transition_in(n.$$.fragment,l),a=!0)},o(l){transition_out(n.$$.fragment,l),a=!1},d(l){l&&detach(t),destroy_component(n),e[15](null)}}}function instance$a(e,t,n){let{id:r=""}=t,{placeholder:i=""}=t,{listOffset:o=1}=t,{isClearable:a=!1}=t,{showIndicator:s=!0}=t,{items:c}=t,{value:l=void 0}=t,{pfpMap:u=null}=t;const f=u;let{primaryClass:d=""}=t,{secondaryClass:g=""}=t,{containerClasses:_=""}=t;function h(B){return B.primary?dd("span",{class:"global_select-item"},[f&&f[B.object.pfp]||"",dd("span",{class:"name "+d},[B.primary]),dd("span",{class:"secondary "+g},[B.secondary||""])]).outerHTML:B.value}let A,m="500px";onMount(()=>{setTimeout(()=>{try{const B=A.getBoundingClientRect().bottom;n(8,m=Math.min(window.innerHeight-B-20,500)+"px")}catch{}},1e3)});function y(B){l=B,n(0,l)}function b(B){binding_callbacks[B?"unshift":"push"](()=>{A=B,n(7,A)})}return e.$$set=B=>{"id"in B&&n(10,r=B.id),"placeholder"in B&&n(1,i=B.placeholder),"listOffset"in B&&n(2,o=B.listOffset),"isClearable"in B&&n(3,a=B.isClearable),"showIndicator"in B&&n(4,s=B.showIndicator),"items"in B&&n(5,c=B.items),"value"in B&&n(0,l=B.value),"pfpMap"in B&&n(11,u=B.pfpMap),"primaryClass"in B&&n(12,d=B.primaryClass),"secondaryClass"in B&&n(13,g=B.secondaryClass),"containerClasses"in B&&n(6,_=B.containerClasses)},[l,i,o,a,s,c,_,A,m,h,r,u,d,g,y,b]}class StarSelect extends SvelteComponent{constructor(t){super(),init(this,t,instance$a,create_fragment$a,safe_not_equal,{id:10,placeholder:1,listOffset:2,isClearable:3,showIndicator:4,items:5,value:0,pfpMap:11,primaryClass:12,secondaryClass:13,containerClasses:6})}}function once_store_updates(e,t=!1){return new Promise(n=>{let r=!1;const i=e.subscribe(o=>{if(!r){r=!0;return}(!t||o)&&(i(),n(o))})})}async function load_pfps(e,t){return ofe(await Promise.all(ode(e).map(([n,r])=>new Promise(i=>{const o=dd("span"),a=new PfpDisplay({target:o,props:{...t,resource:r,settle(){const s=o.firstChild?.cloneNode(!0);a.$destroy(),i([r.pfp,s])}}})}))))}const D_INTL_USD=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",currencyDisplay:"symbol"}),D_INTL_USD_LT1=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",currencyDisplay:"symbol",minimumFractionDigits:2,maximumFractionDigits:5}),A_NUMERIC_GT1=[{order:1e21,suffix:"sept",metric:"yotta",m:"Y"},{order:1e21,suffix:"sext",metric:"zetta",m:"Z"},{order:1e18,suffix:"quint",metric:"exa",m:"E"},{order:1e15,suffix:"quad",metric:"peta",m:"P"},{order:1e12,suffix:"tril",metric:"terra",m:"T"},{order:1e9,suffix:"bil",metric:"giga",m:"G"},{order:1e6,suffix:"mil",metric:"mega",m:"M"}],A_NUMERIC_LT1=[{order:1e-24,suffix:"septh",metric:"yocto",m:"y"},{order:1e-21,suffix:"sexth",metric:"zepto",m:"z"},{order:1e-18,suffix:"quinth",metric:"atto",m:"a"},{order:1e-15,suffix:"quadth",metric:"femto",m:"f"},{order:1e-12,suffix:"trilth",metric:"pico",m:"p"},{order:1e-9,suffix:"bilth",metric:"nano",m:"n"},{order:1e-6,suffix:"milth",metric:"mirco",m:"\u03BC"},{order:.001,suffix:"thsth",metric:"milli",m:"m"}],D_INTL_AMOUNT_LT1=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:6}),D_INTL_AMOUNT_GT1=new Intl.NumberFormat("en-US",{notation:"standard",maximumFractionDigits:3}),D_INTL_AMOUNT_GT1E3=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:6}),D_INTL_AMOUNT_I1E3=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:4});function format_amount(e,t=!1){const n=t?r=>r.replace(/(?:(\.)|(\.\d+?))0+(\s+.*)?$/,"$2$3"):F_IDENTITY;if(e===0)return"0";if(e>=1e6){for(const r of A_NUMERIC_GT1)if(e>=r.order)return n((e/r.order).toPrecision(3))+" "+r.suffix}else if(e<1){for(const r of A_NUMERIC_LT1)if(e<=r.order)return n((e/r.order).toPrecision(3))+" "+r.metric;return n(D_INTL_AMOUNT_LT1.format(e))}return e>=1e3?t?n(D_INTL_AMOUNT_I1E3.format(e/1e3))+" k":n(D_INTL_AMOUNT_GT1E3.format(e)):n(D_INTL_AMOUNT_GT1.format(e))}function format_fiat(e,t="usd",n=!1,r=2){const i=e<1?D_INTL_USD_LT1.format(e):D_INTL_USD.format(e);return n?i.replace(/^[$]/,""):i}function abbreviate_addr(e){return e.replace(/^(\w+1...).+(.{7})/,"$1[...]$2")}const D_INTL_DATE=new Intl.DateTimeFormat("en-US",{month:"short",day:"numeric",year:"numeric",hour:"numeric",minute:"numeric"}),timestamp_to_parts=(e=Date.now())=>fold(D_INTL_DATE.formatToParts(),t=>({[t.type]:t.value}));function format_time(e){const t=timestamp_to_parts(),n=timestamp_to_parts(e);let r=`${n.month} ${n.day}`;return t.year!==n.year&&(r+=`, ${n.year}`),`${r} at ${n.hour}:${n.minute} ${n.dayPeriod}`}const coingecko_url=(e,t)=>"https://api.coingecko.com/api/v3/simple/price?"+new URLSearchParams(ode({ids:e.join(","),vs_currencies:t,include_last_updated_at:"true"})),CoinGecko={async coinsVersus(e,t="usd",n=5*XT_MINUTES){const r=e.map(i=>WebApis.pathFor("GET",coingecko_url([i],t)));return await WebApis.open(async i=>{const o={};if(n>0){const u=Date.now()-n;let f=!0;for(let d=0;d<e.length;d++){const g=i.at(r[d]);if(g&&g.time>u){const _=e[d];o[_]=g.response.cache[_][t]}else{f=!1;break}}if(f)return o}const s=await(await fetch(coingecko_url(e,t))).json(),c=i.raw,l=Date.now();for(const[u,f]of ode(s)){const d=c[u]=c[u]||{};d.response=f,d.time=l,o[u]=f[t]}return o})}},WebApis=create_store_class({store:SI_STORE_WEB_APIS,extension:"map",class:class ot extends WritableStoreMap{static pathFor(t,n){return`/cache.web-api/sha256.${buffer_to_base64(sha256_sync$1(text_to_buffer(t+" "+n)))}`}static pathFrom(t){return ot.pathFor(t.method,t.path)}}});var AmountInput_svelte_svelte_type_style_lang="";const Agents=create_store_class({store:SI_STORE_AGENTS,extension:"map",class:class qe extends WritableStoreMap{static pathForAgent(t,n=yw_family.get()){return`/family.${n}/agent.${t.replace(/^\w+1/,"")}`}static pathForContact(t,n=yw_family.get()){return`${qe.pathForAgent(t,n)}/as.contact`}static pathFromContact(t){return qe.pathForContact(t.address,t.family)}static async getContact(t){return(await Agents.read()).at(t)}*contacts(t=yw_family.get()){const n=this._w_cache,r=`/family.${t}/agent.`;for(const i in n)!i.startsWith(r)||!i.endsWith("/as.contact")||(yield[i,n[i]])}async putContact(t){const n=qe.pathFromContact(t);return this._w_cache[n]=t,await this.save(),n}}});var SX_ICON_COPY=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M3 13H5V11H3V13ZM3 17H5V15H3V17ZM5 21V19H3C3 20.1 3.89 21 5 21ZM3 9H5V7H3V9ZM15 21H17V19H15V21ZM19 3H9C7.89 3 7 3.9 7 5V15C7 16.1 7.89 17 9 17H19C20.1 17 21 16.1 21 15V5C21 3.9 20.1 3 19 3ZM19 15H9V5H19V15ZM11 21H13V19H11V21ZM7 21H9V19H7V21Z" />
</svg>
`,Address_svelte_svelte_type_style_lang="";function create_if_block_2$3(e){let t,n;return{c(){t=element("span"),n=text(e[0]),attr(t,"class","prefix svelte-1f41ddv")},m(r,i){insert(r,t,i),append(t,n)},p(r,i){i&1&&set_data(n,r[0])},d(r){r&&detach(t)}}}function create_if_block$6(e){let t,n;function r(a,s){return a[7]==="icon"?create_if_block_1$3:create_else_block$2}let o=r(e)(e);return{c(){o.c(),t=space(),n=element("span"),n.textContent="Copied!",attr(n,"class","copied svelte-1f41ddv"),toggle_class(n,"confirm",e[3])},m(a,s){o.m(a,s),insert(a,t,s),insert(a,n,s),e[11](n)},p(a,s){o.p(a,s),s&8&&toggle_class(n,"confirm",a[3])},d(a){o.d(a),a&&detach(t),a&&detach(n),e[11](null)}}}function create_else_block$2(e){let t;return{c(){t=element("span"),t.textContent="Copy",attr(t,"class","copy svelte-1f41ddv")},m(n,r){insert(n,t,r)},p:noop$1,d(n){n&&detach(t)}}}function create_if_block_1$3(e){let t;return{c(){t=element("span"),attr(t,"class","copy icon svelte-1f41ddv")},m(n,r){insert(n,t,r),t.innerHTML=SX_ICON_COPY},p:noop$1,d(n){n&&detach(t)}}}function create_fragment$9(e){let t,n,r,i,o,a,s,c,l,u,f=e[0]&&create_if_block_2$3(e),d=e[6]&&create_if_block$6(e);return{c(){t=element("span"),f&&f.c(),n=space(),r=element("span"),i=text(e[1]),o=space(),a=element("span"),s=text(e[1]),c=space(),d&&d.c(),attr(r,"class","head svelte-1f41ddv"),attr(a,"class","tail svelte-1f41ddv"),toggle_class(a,"display_none",!e[5]),attr(t,"class","address svelte-1f41ddv"),toggle_class(t,"copyable",e[6])},m(g,_){insert(g,t,_),f&&f.m(t,null),append(t,n),append(t,r),append(r,i),e[10](r),append(t,o),append(t,a),append(a,s),append(t,c),d&&d.m(t,null),l||(u=listen(t,"click",e[6]?e[12]:void 0),l=!0)},p(g,[_]){g[0]?f?f.p(g,_):(f=create_if_block_2$3(g),f.c(),f.m(t,n)):f&&(f.d(1),f=null),_&2&&set_data(i,g[1]),_&2&&set_data(s,g[1]),_&32&&toggle_class(a,"display_none",!g[5]),g[6]&&d.p(g,_)},i:noop$1,o:noop$1,d(g){g&&detach(t),f&&f.d(),e[10](null),d&&d.d(),l=!1,u()}}}function instance$9(e,t,n){let{prefix:r=""}=t,{address:i}=t,{copyable:o=!1}=t;const a=!!o,s=o===!0?"icon":o||"";let c,l=!1;async function u(){try{await navigator.clipboard.writeText(i)}catch(A){syserr({title:"Browser API Failure",text:"Failed to write to the navigator clipboard.",error:A});return}n(3,l=!0),setTimeout(()=>{n(3,l=!1)},800)}let f,d=!1;onMount(()=>{n(5,d=f.scrollWidth>f.offsetWidth)});function g(A){binding_callbacks[A?"unshift":"push"](()=>{f=A,n(4,f)})}function _(A){binding_callbacks[A?"unshift":"push"](()=>{c=A,n(2,c)})}const h=()=>u();return e.$$set=A=>{"prefix"in A&&n(0,r=A.prefix),"address"in A&&n(1,i=A.address),"copyable"in A&&n(9,o=A.copyable)},[r,i,c,l,f,d,a,s,u,o,g,_,h]}class Address extends SvelteComponent{constructor(t){super(),init(this,t,instance$9,create_fragment$9,safe_not_equal,{prefix:0,address:1,copyable:9})}}var InlineContactSelection_svelte_svelte_type_style_lang="",RecipientSelectItem_svelte_svelte_type_style_lang="",RecipientSelectSelection_svelte_svelte_type_style_lang="",RecipientSelect_svelte_svelte_type_style_lang="";let id=1;function getId(){return`svelte-tabs-${id++}`}function create_fragment$8(e){let t,n,r,i;const o=e[4].default,a=create_slot(o,e,e[3],null);return{c(){t=element("div"),a&&a.c(),attr(t,"class","svelte-tabs")},m(s,c){insert(s,t,c),a&&a.m(t,null),n=!0,r||(i=listen(t,"keydown",e[1]),r=!0)},p(s,[c]){a&&a.p&&(!n||c&8)&&update_slot_base(a,o,s,s[3],n?get_slot_changes(o,s[3],c,null):get_all_dirty_from_scope(s[3]),null)},i(s){n||(transition_in(a,s),n=!0)},o(s){transition_out(a,s),n=!1},d(s){s&&detach(t),a&&a.d(s),r=!1,i()}}}const TABS={};function removeAndUpdateSelected(e,t,n){const r=e.indexOf(t);e.splice(r,1),n.update(i=>i===t?e[r]||e[e.length-1]:i)}function instance$8(e,t,n){let r,{$$slots:i={},$$scope:o}=t,{initialSelectedIndex:a=0}=t;const s=[],c=[],l=[],u=writable({}),f=writable({}),d=writable(null);component_subscribe(e,d,m=>n(5,r=m));const g=writable(null);function _(m,y,b){m.push(y),b.update(B=>B||y),onDestroy(()=>removeAndUpdateSelected(m,y,b))}function h(m){const y=c.indexOf(m);d.set(m),g.set(l[y])}setContext(TABS,{registerTab(m){_(c,m,d)},registerTabElement(m){s.push(m)},registerPanel(m){_(l,m,g)},selectTab:h,selectedTab:d,selectedPanel:g,controls:u,labeledBy:f}),onMount(()=>{h(c[a])}),afterUpdate(()=>{for(let m=0;m<c.length;m++)u.update(y=>({...y,[c[m].id]:l[m].id})),f.update(y=>({...y,[l[m].id]:c[m].id}))});async function A(m){if(m.target.classList.contains("svelte-tabs__tab")){let y=c.indexOf(r);switch(m.key){case"ArrowRight":y+=1,y>c.length-1&&(y=0),h(c[y]),s[y].focus();break;case"ArrowLeft":y-=1,y<0&&(y=c.length-1),h(c[y]),s[y].focus()}}}return e.$$set=m=>{"initialSelectedIndex"in m&&n(2,a=m.initialSelectedIndex),"$$scope"in m&&n(3,o=m.$$scope)},[d,A,a,o,i]}class Tabs extends SvelteComponent{constructor(t){super(),init(this,t,instance$8,create_fragment$8,safe_not_equal,{initialSelectedIndex:2})}}var Tab_svelte_svelte_type_style_lang="";function create_fragment$7(e){let t,n,r,i,o,a;const s=e[9].default,c=create_slot(s,e,e[8],null);return{c(){t=element("li"),c&&c.c(),attr(t,"role","tab"),attr(t,"id",e[3].id),attr(t,"aria-controls",n=e[2][e[3].id]),attr(t,"aria-selected",e[1]),attr(t,"tabindex",r=e[1]?0:-1),attr(t,"class","svelte-tabs__tab svelte-1fbofsd"),toggle_class(t,"svelte-tabs__selected",e[1])},m(l,u){insert(l,t,u),c&&c.m(t,null),e[10](t),i=!0,o||(a=listen(t,"click",e[11]),o=!0)},p(l,[u]){c&&c.p&&(!i||u&256)&&update_slot_base(c,s,l,l[8],i?get_slot_changes(s,l[8],u,null):get_all_dirty_from_scope(l[8]),null),(!i||u&4&&n!==(n=l[2][l[3].id]))&&attr(t,"aria-controls",n),(!i||u&2)&&attr(t,"aria-selected",l[1]),(!i||u&2&&r!==(r=l[1]?0:-1))&&attr(t,"tabindex",r),u&2&&toggle_class(t,"svelte-tabs__selected",l[1])},i(l){i||(transition_in(c,l),i=!0)},o(l){transition_out(c,l),i=!1},d(l){l&&detach(t),c&&c.d(l),e[10](null),o=!1,a()}}}function instance$7(e,t,n){let r,i,{$$slots:o={},$$scope:a}=t,s;const c={id:getId()},{registerTab:l,registerTabElement:u,selectTab:f,selectedTab:d,controls:g}=getContext(TABS);component_subscribe(e,d,m=>n(7,r=m)),component_subscribe(e,g,m=>n(2,i=m));let _;l(c),onMount(async()=>{await tick(),u(s)});function h(m){binding_callbacks[m?"unshift":"push"](()=>{s=m,n(0,s)})}const A=()=>f(c);return e.$$set=m=>{"$$scope"in m&&n(8,a=m.$$scope)},e.$$.update=()=>{e.$$.dirty&128&&n(1,_=r===c)},[s,_,i,c,f,d,g,r,a,o,h,A]}class Tab extends SvelteComponent{constructor(t){super(),init(this,t,instance$7,create_fragment$7,safe_not_equal,{})}}var TabList_svelte_svelte_type_style_lang="";function create_fragment$6(e){let t,n;const r=e[1].default,i=create_slot(r,e,e[0],null);return{c(){t=element("ul"),i&&i.c(),attr(t,"role","tablist"),attr(t,"class","svelte-tabs__tab-list svelte-12yby2a")},m(o,a){insert(o,t,a),i&&i.m(t,null),n=!0},p(o,[a]){i&&i.p&&(!n||a&1)&&update_slot_base(i,r,o,o[0],n?get_slot_changes(r,o[0],a,null):get_all_dirty_from_scope(o[0]),null)},i(o){n||(transition_in(i,o),n=!0)},o(o){transition_out(i,o),n=!1},d(o){o&&detach(t),i&&i.d(o)}}}function instance$6(e,t,n){let{$$slots:r={},$$scope:i}=t;return e.$$set=o=>{"$$scope"in o&&n(0,i=o.$$scope)},[i,r]}class TabList extends SvelteComponent{constructor(t){super(),init(this,t,instance$6,create_fragment$6,safe_not_equal,{})}}var TabPanel_svelte_svelte_type_style_lang="";function create_if_block$5(e){let t;const n=e[6].default,r=create_slot(n,e,e[5],null);return{c(){r&&r.c()},m(i,o){r&&r.m(i,o),t=!0},p(i,o){r&&r.p&&(!t||o&32)&&update_slot_base(r,n,i,i[5],t?get_slot_changes(n,i[5],o,null):get_all_dirty_from_scope(i[5]),null)},i(i){t||(transition_in(r,i),t=!0)},o(i){transition_out(r,i),t=!1},d(i){r&&r.d(i)}}}function create_fragment$5(e){let t,n,r,i=e[1]===e[2]&&create_if_block$5(e);return{c(){t=element("div"),i&&i.c(),attr(t,"id",e[2].id),attr(t,"aria-labelledby",n=e[0][e[2].id]),attr(t,"class","svelte-tabs__tab-panel svelte-epfyet"),attr(t,"role","tabpanel")},m(o,a){insert(o,t,a),i&&i.m(t,null),r=!0},p(o,[a]){o[1]===o[2]?i?(i.p(o,a),a&2&&transition_in(i,1)):(i=create_if_block$5(o),i.c(),transition_in(i,1),i.m(t,null)):i&&(group_outros(),transition_out(i,1,1,()=>{i=null}),check_outros()),(!r||a&1&&n!==(n=o[0][o[2].id]))&&attr(t,"aria-labelledby",n)},i(o){r||(transition_in(i),r=!0)},o(o){transition_out(i),r=!1},d(o){o&&detach(t),i&&i.d()}}}function instance$5(e,t,n){let r,i,{$$slots:o={},$$scope:a}=t;const s={id:getId()},{registerPanel:c,selectedPanel:l,labeledBy:u}=getContext(TABS);return component_subscribe(e,l,f=>n(1,i=f)),component_subscribe(e,u,f=>n(0,r=f)),c(s),e.$$set=f=>{"$$scope"in f&&n(5,a=f.$$scope)},[r,i,s,l,u,a,o]}class TabPanel extends SvelteComponent{constructor(t){super(),init(this,t,instance$5,create_fragment$5,safe_not_equal,{})}}function create_else_block_1$1(e){let t;return{c(){t=element("span"),t.textContent="(empty)",attr(t,"class","empty-memo")},m(n,r){insert(n,t,r)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_if_block_3$1(e){let t;return{c(){t=element("textarea"),t.disabled=!0,t.value=e[0]},m(n,r){insert(n,t,r)},p(n,r){r&1&&(t.value=n[0])},i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_if_block$4(e){let t,n;return t=new Tabs({props:{$$slots:{default:[create_default_slot_1$2]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&7&&(o.$$scope={dirty:i,ctx:r}),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_default_slot_6(e){let t;return{c(){t=text("Plaintext")},m(n,r){insert(n,t,r)},d(n){n&&detach(t)}}}function create_default_slot_5(e){let t;return{c(){t=text("Encrypted")},m(n,r){insert(n,t,r)},d(n){n&&detach(t)}}}function create_default_slot_4(e){let t,n,r,i;return t=new Tab({props:{$$slots:{default:[create_default_slot_6]},$$scope:{ctx:e}}}),r=new Tab({props:{$$slots:{default:[create_default_slot_5]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment),n=space(),create_component(r.$$.fragment)},m(o,a){mount_component(t,o,a),insert(o,n,a),mount_component(r,o,a),i=!0},p(o,a){const s={};a&4&&(s.$$scope={dirty:a,ctx:o}),t.$set(s);const c={};a&4&&(c.$$scope={dirty:a,ctx:o}),r.$set(c)},i(o){i||(transition_in(t.$$.fragment,o),transition_in(r.$$.fragment,o),i=!0)},o(o){transition_out(t.$$.fragment,o),transition_out(r.$$.fragment,o),i=!1},d(o){destroy_component(t,o),o&&detach(n),destroy_component(r,o)}}}function create_else_block$1(e){let t;return{c(){t=element("i"),t.textContent="Corrupted memo, unable to decrypt"},m(n,r){insert(n,t,r)},p:noop$1,d(n){n&&detach(t)}}}function create_if_block_2$2(e){let t;return{c(){t=element("i"),t.textContent="Empty memo"},m(n,r){insert(n,t,r)},p:noop$1,d(n){n&&detach(t)}}}function create_if_block_1$2(e){let t;return{c(){t=element("textarea"),t.disabled=!0,t.value=e[0]},m(n,r){insert(n,t,r)},p(n,r){r&1&&(t.value=n[0])},d(n){n&&detach(t)}}}function create_default_slot_3(e){let t;function n(o,a){return o[0]?create_if_block_1$2:o[0]===""?create_if_block_2$2:create_else_block$1}let r=n(e),i=r(e);return{c(){i.c(),t=empty()},m(o,a){i.m(o,a),insert(o,t,a)},p(o,a){r===(r=n(o))&&i?i.p(o,a):(i.d(1),i=r(o),i&&(i.c(),i.m(t.parentNode,t)))},d(o){i.d(o),o&&detach(t)}}}function create_default_slot_2$2(e){let t;return{c(){t=element("textarea"),attr(t,"class","ciphertext"),t.disabled=!0,t.value=e[1]},m(n,r){insert(n,t,r)},p(n,r){r&2&&(t.value=n[1])},d(n){n&&detach(t)}}}function create_default_slot_1$2(e){let t,n,r,i,o,a;return t=new TabList({props:{$$slots:{default:[create_default_slot_4]},$$scope:{ctx:e}}}),r=new TabPanel({props:{$$slots:{default:[create_default_slot_3]},$$scope:{ctx:e}}}),o=new TabPanel({props:{$$slots:{default:[create_default_slot_2$2]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment),n=space(),create_component(r.$$.fragment),i=space(),create_component(o.$$.fragment)},m(s,c){mount_component(t,s,c),insert(s,n,c),mount_component(r,s,c),insert(s,i,c),mount_component(o,s,c),a=!0},p(s,c){const l={};c&4&&(l.$$scope={dirty:c,ctx:s}),t.$set(l);const u={};c&5&&(u.$$scope={dirty:c,ctx:s}),r.$set(u);const f={};c&6&&(f.$$scope={dirty:c,ctx:s}),o.$set(f)},i(s){a||(transition_in(t.$$.fragment,s),transition_in(r.$$.fragment,s),transition_in(o.$$.fragment,s),a=!0)},o(s){transition_out(t.$$.fragment,s),transition_out(r.$$.fragment,s),transition_out(o.$$.fragment,s),a=!1},d(s){destroy_component(t,s),s&&detach(n),destroy_component(r,s),s&&detach(i),destroy_component(o,s)}}}function create_default_slot$2(e){let t,n,r,i;const o=[create_if_block$4,create_if_block_3$1,create_else_block_1$1],a=[];function s(c,l){return c[1]?0:c[0]?1:2}return t=s(e),n=a[t]=o[t](e),{c(){n.c(),r=empty()},m(c,l){a[t].m(c,l),insert(c,r,l),i=!0},p(c,l){let u=t;t=s(c),t===u?a[t].p(c,l):(group_outros(),transition_out(a[u],1,1,()=>{a[u]=null}),check_outros(),n=a[t],n?n.p(c,l):(n=a[t]=o[t](c),n.c()),transition_in(n,1),n.m(r.parentNode,r))},i(c){i||(transition_in(n),i=!0)},o(c){transition_out(n),i=!1},d(c){a[t].d(c),c&&detach(r)}}}function create_fragment$4(e){let t,n;return t=new Field({props:{key:"memo",name:"Memo",$$slots:{default:[create_default_slot$2]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,[i]){const o={};i&7&&(o.$$scope={dirty:i,ctx:r}),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function instance$4(e,t,n){let{memoPlaintext:r}=t,{memoCiphertext:i=""}=t;return e.$$set=o=>{"memoPlaintext"in o&&n(0,r=o.memoPlaintext),"memoCiphertext"in o&&n(1,i=o.memoCiphertext)},[r,i]}class MemoReview extends SvelteComponent{constructor(t){super(),init(this,t,instance$4,create_fragment$4,safe_not_equal,{memoPlaintext:0,memoCiphertext:1})}}function ecdhNonce(e,t){return console.log({nonce:{s_sequence:e,s_gas_wanted:t}}),sha256$1(text_to_buffer(["StarShell",e,t].join("\0")))}function compileMemoPlaintext(e){return"\u{1F512}1"+buffer_to_base93(e)}function extractMemoCiphertext(e){if(!e.startsWith("\u{1F512}1"))throw syserr({title:"Memo Invalid",text:"Attempted to decrypt invalid memo"});return base93_to_buffer(e.slice(3))}var SendNative_svelte_svelte_type_style_lang="";const Settings=create_store_class({store:SI_STORE_SETTINGS,extension:"dict",class:class extends WritableStoreDict{}});var Notice_svelte_svelte_type_style_lang="",Toggle_svelte_svelte_type_style_lang="",Send_svelte_svelte_type_style_lang="",qrcode={exports:{}};(function(e){function t(_){this.mode=r.MODE_8BIT_BYTE,this.data=_,this.parsedData=[];for(var h=0,A=this.data.length;h<A;h++){var m=[],y=this.data.charCodeAt(h);y>65536?(m[0]=240|(y&1835008)>>>18,m[1]=128|(y&258048)>>>12,m[2]=128|(y&4032)>>>6,m[3]=128|y&63):y>2048?(m[0]=224|(y&61440)>>>12,m[1]=128|(y&4032)>>>6,m[2]=128|y&63):y>128?(m[0]=192|(y&1984)>>>6,m[1]=128|y&63):m[0]=y,this.parsedData.push(m)}this.parsedData=Array.prototype.concat.apply([],this.parsedData),this.parsedData.length!=this.data.length&&(this.parsedData.unshift(191),this.parsedData.unshift(187),this.parsedData.unshift(239))}t.prototype={getLength:function(_){return this.parsedData.length},write:function(_){for(var h=0,A=this.parsedData.length;h<A;h++)_.put(this.parsedData[h],8)}};function n(_,h){this.typeNumber=_,this.errorCorrectLevel=h,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}n.prototype={addData:function(_){var h=new t(_);this.dataList.push(h),this.dataCache=null},isDark:function(_,h){if(_<0||this.moduleCount<=_||h<0||this.moduleCount<=h)throw new Error(_+","+h);return this.modules[_][h]},getModuleCount:function(){return this.moduleCount},make:function(){this.makeImpl(!1,this.getBestMaskPattern())},makeImpl:function(_,h){this.moduleCount=this.typeNumber*4+17,this.modules=new Array(this.moduleCount);for(var A=0;A<this.moduleCount;A++){this.modules[A]=new Array(this.moduleCount);for(var m=0;m<this.moduleCount;m++)this.modules[A][m]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(_,h),this.typeNumber>=7&&this.setupTypeNumber(_),this.dataCache==null&&(this.dataCache=n.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,h)},setupPositionProbePattern:function(_,h){for(var A=-1;A<=7;A++)if(!(_+A<=-1||this.moduleCount<=_+A))for(var m=-1;m<=7;m++)h+m<=-1||this.moduleCount<=h+m||(0<=A&&A<=6&&(m==0||m==6)||0<=m&&m<=6&&(A==0||A==6)||2<=A&&A<=4&&2<=m&&m<=4?this.modules[_+A][h+m]=!0:this.modules[_+A][h+m]=!1)},getBestMaskPattern:function(){for(var _=0,h=0,A=0;A<8;A++){this.makeImpl(!0,A);var m=a.getLostPoint(this);(A==0||_>m)&&(_=m,h=A)}return h},createMovieClip:function(_,h,A){var m=_.createEmptyMovieClip(h,A),y=1;this.make();for(var b=0;b<this.modules.length;b++)for(var B=b*y,v=0;v<this.modules[b].length;v++){var M=v*y,D=this.modules[b][v];D&&(m.beginFill(0,100),m.moveTo(M,B),m.lineTo(M+y,B),m.lineTo(M+y,B+y),m.lineTo(M,B+y),m.endFill())}return m},setupTimingPattern:function(){for(var _=8;_<this.moduleCount-8;_++)this.modules[_][6]==null&&(this.modules[_][6]=_%2==0);for(var h=8;h<this.moduleCount-8;h++)this.modules[6][h]==null&&(this.modules[6][h]=h%2==0)},setupPositionAdjustPattern:function(){for(var _=a.getPatternPosition(this.typeNumber),h=0;h<_.length;h++)for(var A=0;A<_.length;A++){var m=_[h],y=_[A];if(this.modules[m][y]==null)for(var b=-2;b<=2;b++)for(var B=-2;B<=2;B++)b==-2||b==2||B==-2||B==2||b==0&&B==0?this.modules[m+b][y+B]=!0:this.modules[m+b][y+B]=!1}},setupTypeNumber:function(_){for(var h=a.getBCHTypeNumber(this.typeNumber),A=0;A<18;A++){var m=!_&&(h>>A&1)==1;this.modules[Math.floor(A/3)][A%3+this.moduleCount-8-3]=m}for(var A=0;A<18;A++){var m=!_&&(h>>A&1)==1;this.modules[A%3+this.moduleCount-8-3][Math.floor(A/3)]=m}},setupTypeInfo:function(_,h){for(var A=this.errorCorrectLevel<<3|h,m=a.getBCHTypeInfo(A),y=0;y<15;y++){var b=!_&&(m>>y&1)==1;y<6?this.modules[y][8]=b:y<8?this.modules[y+1][8]=b:this.modules[this.moduleCount-15+y][8]=b}for(var y=0;y<15;y++){var b=!_&&(m>>y&1)==1;y<8?this.modules[8][this.moduleCount-y-1]=b:y<9?this.modules[8][15-y-1+1]=b:this.modules[8][15-y-1]=b}this.modules[this.moduleCount-8][8]=!_},mapData:function(_,h){for(var A=-1,m=this.moduleCount-1,y=7,b=0,B=this.moduleCount-1;B>0;B-=2)for(B==6&&B--;;){for(var v=0;v<2;v++)if(this.modules[m][B-v]==null){var M=!1;b<_.length&&(M=(_[b]>>>y&1)==1);var D=a.getMask(h,m,B-v);D&&(M=!M),this.modules[m][B-v]=M,y--,y==-1&&(b++,y=7)}if(m+=A,m<0||this.moduleCount<=m){m-=A,A=-A;break}}}},n.PAD0=236,n.PAD1=17,n.createData=function(_,h,A){for(var m=u.getRSBlocks(_,h),y=new f,b=0;b<A.length;b++){var B=A[b];y.put(B.mode,4),y.put(B.getLength(),a.getLengthInBits(B.mode,_)),B.write(y)}for(var v=0,b=0;b<m.length;b++)v+=m[b].dataCount;if(y.getLengthInBits()>v*8)throw new Error("code length overflow. ("+y.getLengthInBits()+">"+v*8+")");for(y.getLengthInBits()+4<=v*8&&y.put(0,4);y.getLengthInBits()%8!=0;)y.putBit(!1);for(;!(y.getLengthInBits()>=v*8||(y.put(n.PAD0,8),y.getLengthInBits()>=v*8));)y.put(n.PAD1,8);return n.createBytes(y,m)},n.createBytes=function(_,h){for(var A=0,m=0,y=0,b=new Array(h.length),B=new Array(h.length),v=0;v<h.length;v++){var M=h[v].dataCount,D=h[v].totalCount-M;m=Math.max(m,M),y=Math.max(y,D),b[v]=new Array(M);for(var I=0;I<b[v].length;I++)b[v][I]=255&_.buffer[I+A];A+=M;var C=a.getErrorCorrectPolynomial(D),E=new l(b[v],C.getLength()-1),N=E.mod(C);B[v]=new Array(C.getLength()-1);for(var I=0;I<B[v].length;I++){var S=I+N.getLength()-B[v].length;B[v][I]=S>=0?N.get(S):0}}for(var k=0,I=0;I<h.length;I++)k+=h[I].totalCount;for(var Q=new Array(k),w=0,I=0;I<m;I++)for(var v=0;v<h.length;v++)I<b[v].length&&(Q[w++]=b[v][I]);for(var I=0;I<y;I++)for(var v=0;v<h.length;v++)I<B[v].length&&(Q[w++]=B[v][I]);return Q};for(var r={MODE_NUMBER:1<<0,MODE_ALPHA_NUM:1<<1,MODE_8BIT_BYTE:1<<2,MODE_KANJI:1<<3},i={L:1,M:0,Q:3,H:2},o={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7},a={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1<<10|1<<8|1<<5|1<<4|1<<2|1<<1|1<<0,G18:1<<12|1<<11|1<<10|1<<9|1<<8|1<<5|1<<2|1<<0,G15_MASK:1<<14|1<<12|1<<10|1<<4|1<<1,getBCHTypeInfo:function(_){for(var h=_<<10;a.getBCHDigit(h)-a.getBCHDigit(a.G15)>=0;)h^=a.G15<<a.getBCHDigit(h)-a.getBCHDigit(a.G15);return(_<<10|h)^a.G15_MASK},getBCHTypeNumber:function(_){for(var h=_<<12;a.getBCHDigit(h)-a.getBCHDigit(a.G18)>=0;)h^=a.G18<<a.getBCHDigit(h)-a.getBCHDigit(a.G18);return _<<12|h},getBCHDigit:function(_){for(var h=0;_!=0;)h++,_>>>=1;return h},getPatternPosition:function(_){return a.PATTERN_POSITION_TABLE[_-1]},getMask:function(_,h,A){switch(_){case o.PATTERN000:return(h+A)%2==0;case o.PATTERN001:return h%2==0;case o.PATTERN010:return A%3==0;case o.PATTERN011:return(h+A)%3==0;case o.PATTERN100:return(Math.floor(h/2)+Math.floor(A/3))%2==0;case o.PATTERN101:return h*A%2+h*A%3==0;case o.PATTERN110:return(h*A%2+h*A%3)%2==0;case o.PATTERN111:return(h*A%3+(h+A)%2)%2==0;default:throw new Error("bad maskPattern:"+_)}},getErrorCorrectPolynomial:function(_){for(var h=new l([1],0),A=0;A<_;A++)h=h.multiply(new l([1,s.gexp(A)],0));return h},getLengthInBits:function(_,h){if(1<=h&&h<10)switch(_){case r.MODE_NUMBER:return 10;case r.MODE_ALPHA_NUM:return 9;case r.MODE_8BIT_BYTE:return 8;case r.MODE_KANJI:return 8;default:throw new Error("mode:"+_)}else if(h<27)switch(_){case r.MODE_NUMBER:return 12;case r.MODE_ALPHA_NUM:return 11;case r.MODE_8BIT_BYTE:return 16;case r.MODE_KANJI:return 10;default:throw new Error("mode:"+_)}else if(h<41)switch(_){case r.MODE_NUMBER:return 14;case r.MODE_ALPHA_NUM:return 13;case r.MODE_8BIT_BYTE:return 16;case r.MODE_KANJI:return 12;default:throw new Error("mode:"+_)}else throw new Error("type:"+h)},getLostPoint:function(_){for(var h=_.getModuleCount(),A=0,m=0;m<h;m++)for(var y=0;y<h;y++){for(var b=0,B=_.isDark(m,y),v=-1;v<=1;v++)if(!(m+v<0||h<=m+v))for(var M=-1;M<=1;M++)y+M<0||h<=y+M||v==0&&M==0||B==_.isDark(m+v,y+M)&&b++;b>5&&(A+=3+b-5)}for(var m=0;m<h-1;m++)for(var y=0;y<h-1;y++){var D=0;_.isDark(m,y)&&D++,_.isDark(m+1,y)&&D++,_.isDark(m,y+1)&&D++,_.isDark(m+1,y+1)&&D++,(D==0||D==4)&&(A+=3)}for(var m=0;m<h;m++)for(var y=0;y<h-6;y++)_.isDark(m,y)&&!_.isDark(m,y+1)&&_.isDark(m,y+2)&&_.isDark(m,y+3)&&_.isDark(m,y+4)&&!_.isDark(m,y+5)&&_.isDark(m,y+6)&&(A+=40);for(var y=0;y<h;y++)for(var m=0;m<h-6;m++)_.isDark(m,y)&&!_.isDark(m+1,y)&&_.isDark(m+2,y)&&_.isDark(m+3,y)&&_.isDark(m+4,y)&&!_.isDark(m+5,y)&&_.isDark(m+6,y)&&(A+=40);for(var I=0,y=0;y<h;y++)for(var m=0;m<h;m++)_.isDark(m,y)&&I++;var C=Math.abs(100*I/h/h-50)/5;return A+=C*10,A}},s={glog:function(_){if(_<1)throw new Error("glog("+_+")");return s.LOG_TABLE[_]},gexp:function(_){for(;_<0;)_+=255;for(;_>=256;)_-=255;return s.EXP_TABLE[_]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},c=0;c<8;c++)s.EXP_TABLE[c]=1<<c;for(var c=8;c<256;c++)s.EXP_TABLE[c]=s.EXP_TABLE[c-4]^s.EXP_TABLE[c-5]^s.EXP_TABLE[c-6]^s.EXP_TABLE[c-8];for(var c=0;c<255;c++)s.LOG_TABLE[s.EXP_TABLE[c]]=c;function l(_,h){if(_.length==null)throw new Error(_.length+"/"+h);for(var A=0;A<_.length&&_[A]==0;)A++;this.num=new Array(_.length-A+h);for(var m=0;m<_.length-A;m++)this.num[m]=_[m+A]}l.prototype={get:function(_){return this.num[_]},getLength:function(){return this.num.length},multiply:function(_){for(var h=new Array(this.getLength()+_.getLength()-1),A=0;A<this.getLength();A++)for(var m=0;m<_.getLength();m++)h[A+m]^=s.gexp(s.glog(this.get(A))+s.glog(_.get(m)));return new l(h,0)},mod:function(_){if(this.getLength()-_.getLength()<0)return this;for(var h=s.glog(this.get(0))-s.glog(_.get(0)),A=new Array(this.getLength()),m=0;m<this.getLength();m++)A[m]=this.get(m);for(var m=0;m<_.getLength();m++)A[m]^=s.gexp(s.glog(_.get(m))+h);return new l(A,0).mod(_)}};function u(_,h){this.totalCount=_,this.dataCount=h}u.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],u.getRSBlocks=function(_,h){var A=u.getRsBlockTable(_,h);if(A==null)throw new Error("bad rs block @ typeNumber:"+_+"/errorCorrectLevel:"+h);for(var m=A.length/3,y=[],b=0;b<m;b++)for(var B=A[b*3+0],v=A[b*3+1],M=A[b*3+2],D=0;D<B;D++)y.push(new u(v,M));return y},u.getRsBlockTable=function(_,h){switch(h){case i.L:return u.RS_BLOCK_TABLE[(_-1)*4+0];case i.M:return u.RS_BLOCK_TABLE[(_-1)*4+1];case i.Q:return u.RS_BLOCK_TABLE[(_-1)*4+2];case i.H:return u.RS_BLOCK_TABLE[(_-1)*4+3];default:return}};function f(){this.buffer=[],this.length=0}f.prototype={get:function(_){var h=Math.floor(_/8);return(this.buffer[h]>>>7-_%8&1)==1},put:function(_,h){for(var A=0;A<h;A++)this.putBit((_>>>h-A-1&1)==1)},getLengthInBits:function(){return this.length},putBit:function(_){var h=Math.floor(this.length/8);this.buffer.length<=h&&this.buffer.push(0),_&&(this.buffer[h]|=128>>>this.length%8),this.length++}};var d=[[17,14,11,7],[32,26,20,14],[53,42,32,24],[78,62,46,34],[106,84,60,44],[134,106,74,58],[154,122,86,64],[192,152,108,84],[230,180,130,98],[271,213,151,119],[321,251,177,137],[367,287,203,155],[425,331,241,177],[458,362,258,194],[520,412,292,220],[586,450,322,250],[644,504,364,280],[718,560,394,310],[792,624,442,338],[858,666,482,382],[929,711,509,403],[1003,779,565,439],[1091,857,611,461],[1171,911,661,511],[1273,997,715,535],[1367,1059,751,593],[1465,1125,805,625],[1528,1190,868,658],[1628,1264,908,698],[1732,1370,982,742],[1840,1452,1030,790],[1952,1538,1112,842],[2068,1628,1168,898],[2188,1722,1228,958],[2303,1809,1283,983],[2431,1911,1351,1051],[2563,1989,1423,1093],[2699,2099,1499,1139],[2809,2213,1579,1219],[2953,2331,1663,1273]];function g(_){if(this.options={padding:4,width:256,height:256,typeNumber:4,color:"#000000",background:"#ffffff",ecl:"M"},typeof _=="string"&&(_={content:_}),_)for(var h in _)this.options[h]=_[h];if(typeof this.options.content!="string")throw new Error("Expected 'content' as string!");if(this.options.content.length===0)throw new Error("Expected 'content' to be non-empty!");if(!(this.options.padding>=0))throw new Error("Expected 'padding' value to be non-negative!");if(!(this.options.width>0)||!(this.options.height>0))throw new Error("Expected 'width' or 'height' value to be higher than zero!");function A(M){switch(M){case"L":return i.L;case"M":return i.M;case"Q":return i.Q;case"H":return i.H;default:throw new Error("Unknwon error correction level: "+M)}}function m(M,D){for(var I=y(M),C=1,E=0,N=0,S=d.length;N<=S;N++){var k=d[N];if(!k)throw new Error("Content too long: expected "+E+" but got "+I);switch(D){case"L":E=k[0];break;case"M":E=k[1];break;case"Q":E=k[2];break;case"H":E=k[3];break;default:throw new Error("Unknwon error correction level: "+D)}if(I<=E)break;C++}if(C>d.length)throw new Error("Content too long");return C}function y(M){var D=encodeURI(M).toString().replace(/\%[0-9a-fA-F]{2}/g,"a");return D.length+(D.length!=M?3:0)}var b=this.options.content,B=m(b,this.options.ecl),v=A(this.options.ecl);this.qrcode=new n(B,v),this.qrcode.addData(b),this.qrcode.make()}g.prototype.svg=function(_){var h=this.options||{},A=this.qrcode.modules;typeof _>"u"&&(_={container:h.container||"svg"});for(var m=typeof h.pretty<"u"?!!h.pretty:!0,y=m?"  ":"",b=m?`\r
`:"",B=h.width,v=h.height,M=A.length,D=B/(M+2*h.padding),I=v/(M+2*h.padding),C=typeof h.join<"u"?!!h.join:!1,E=typeof h.swap<"u"?!!h.swap:!1,N=typeof h.xmlDeclaration<"u"?!!h.xmlDeclaration:!0,S=typeof h.predefined<"u"?!!h.predefined:!1,k=S?y+'<defs><path id="qrmodule" d="M0 0 h'+I+" v"+D+' H0 z" style="fill:'+h.color+';shape-rendering:crispEdges;" /></defs>'+b:"",Q=y+'<rect x="0" y="0" width="'+B+'" height="'+v+'" style="fill:'+h.background+';shape-rendering:crispEdges;"/>'+b,w="",T="",O=0;O<M;O++)for(var P=0;P<M;P++){var F=A[P][O];if(F){var L=P*D+h.padding*D,G=O*I+h.padding*I;if(E){var Y=L;L=G,G=Y}if(C){var U=D+L,V=I+G;L=Number.isInteger(L)?Number(L):L.toFixed(2),G=Number.isInteger(G)?Number(G):G.toFixed(2),U=Number.isInteger(U)?Number(U):U.toFixed(2),V=Number.isInteger(V)?Number(V):V.toFixed(2),T+="M"+L+","+G+" V"+V+" H"+U+" V"+G+" H"+L+" Z "}else S?w+=y+'<use x="'+L.toString()+'" y="'+G.toString()+'" href="#qrmodule" />'+b:w+=y+'<rect x="'+L.toString()+'" y="'+G.toString()+'" width="'+D+'" height="'+I+'" style="fill:'+h.color+';shape-rendering:crispEdges;"/>'+b}}C&&(w=y+'<path x="0" y="0" style="fill:'+h.color+';shape-rendering:crispEdges;" d="'+T+'" />');var q="";switch(_.container){case"svg":N&&(q+='<?xml version="1.0" standalone="yes"?>'+b),q+='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="'+B+'" height="'+v+'">'+b,q+=k+Q+w,q+="</svg>";break;case"svg-viewbox":N&&(q+='<?xml version="1.0" standalone="yes"?>'+b),q+='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 '+B+" "+v+'">'+b,q+=k+Q+w,q+="</svg>";break;case"g":q+='<g width="'+B+'" height="'+v+'">'+b,q+=k+Q+w,q+="</g>";break;default:q+=(k+Q+w).replace(/^\s+/,"");break}return q},g.prototype.save=function(_,h){var A=this.svg();typeof h!="function"&&(h=function(y,b){});try{var m=require("fs");m.writeFile(_,A,h)}catch(y){h(y)}},e.exports=g})(qrcode);var QRCode=qrcode.exports,Info_svelte_svelte_type_style_lang="";function create_if_block$3(e){let t;return{c(){t=element("span"),attr(t,"class","icon svelte-1ytw09y")},m(n,r){insert(n,t,r),t.innerHTML=SX_ICON_COPY},p:noop$1,d(n){n&&detach(t)}}}function create_fragment$3(e){let t,n,r,i;const o=e[8].default,a=create_slot(o,e,e[7],null);let s=e[2]&&create_if_block$3();return{c(){t=element("div"),n=element("span"),a&&a.c(),r=space(),s&&s.c(),attr(n,"id",e[0]),attr(n,"class","info-value svelte-1ytw09y"),attr(t,"class","info svelte-1ytw09y"),toggle_class(t,"copyable",e[2]),toggle_class(t,"center",e[1])},m(c,l){insert(c,t,l),append(t,n),a&&a.m(n,null),append(t,r),s&&s.m(t,null),i=!0},p(c,[l]){a&&a.p&&(!i||l&128)&&update_slot_base(a,o,c,c[7],i?get_slot_changes(o,c[7],l,null):get_all_dirty_from_scope(c[7]),null),c[2]&&s.p(c,l)},i(c){i||(transition_in(a,c),i=!0)},o(c){transition_out(a,c),i=!1},d(c){c&&detach(t),a&&a.d(c),s&&s.d()}}}function instance$3(e,t,n){let{$$slots:r={},$$scope:i}=t,{key:o}=t;const a=o;let{address:s=!1}=t;const c=s;let{center:l=c}=t;const u=l;let{copyable:f=!1}=t;const d=f;return e.$$set=g=>{"key"in g&&n(3,o=g.key),"address"in g&&n(4,s=g.address),"center"in g&&n(5,l=g.center),"copyable"in g&&n(6,f=g.copyable),"$$scope"in g&&n(7,i=g.$$scope)},[a,u,d,o,s,l,f,i,r]}class Info extends SvelteComponent{constructor(t){super(),init(this,t,instance$3,create_fragment$3,safe_not_equal,{key:3,address:4,center:5,copyable:6})}}var PopupReceive_svelte_svelte_type_style_lang="";function create_catch_block_1$1(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block_1$1(e){let t,n,r;function i(a){e[13](a)}let o={id:"chain-select",pfpMap:e[6],placeholder:"Select chain",items:e[23]};return e[2]!==void 0&&(o.value=e[2]),t=new StarSelect({props:o}),binding_callbacks.push(()=>bind(t,"value",i)),{c(){create_component(t.$$.fragment)},m(a,s){mount_component(t,a,s),r=!0},p(a,s){const c={};s&64&&(c.pfpMap=a[6]),!n&&s&4&&(n=!0,c.value=a[2],add_flush_callback(()=>n=!1)),t.$set(c)},i(a){r||(transition_in(t.$$.fragment,a),r=!0)},o(a){transition_out(t.$$.fragment,a),r=!1},d(a){destroy_component(t,a)}}}function create_pending_block_1$1(e){let t;return{c(){t=text("Loading chains...")},m(n,r){insert(n,t,r)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_default_slot_2$1(e){let t,n,r={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$1,then:create_then_block_1$1,catch:create_catch_block_1$1,value:23,blocks:[,,,]};return handle_promise(e[9](),r),{c(){t=empty(),r.block.c()},m(i,o){insert(i,t,o),r.block.m(i,r.anchor=o),r.mount=()=>t.parentNode,r.anchor=t,n=!0},p(i,o){e=i,update_await_block_branch(r,e,o)},i(i){n||(transition_in(r.block),n=!0)},o(i){for(let o=0;o<3;o+=1){const a=r.blocks[o];transition_out(a)}n=!1},d(i){i&&detach(t),r.block.d(i),r.token=null,r=null}}}function create_catch_block$2(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$2(e){let t,n,r;function i(a){e[14](a)}let o={id:"account-select",pfpMap:e[5],placeholder:"Select account",secondaryClass:"balance",items:e[22]};return e[0]!==void 0&&(o.value=e[0]),t=new StarSelect({props:o}),binding_callbacks.push(()=>bind(t,"value",i)),{c(){create_component(t.$$.fragment)},m(a,s){mount_component(t,a,s),r=!0},p(a,s){const c={};s&32&&(c.pfpMap=a[5]),!n&&s&1&&(n=!0,c.value=a[0],add_flush_callback(()=>n=!1)),t.$set(c)},i(a){r||(transition_in(t.$$.fragment,a),r=!0)},o(a){transition_out(t.$$.fragment,a),r=!1},d(a){destroy_component(t,a)}}}function create_pending_block$2(e){let t;return{c(){t=text("Loading Accounts...")},m(n,r){insert(n,t,r)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_default_slot_1$1(e){let t,n,r={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block$2,then:create_then_block$2,catch:create_catch_block$2,value:22,blocks:[,,,]};return handle_promise(e[8](),r),{c(){t=empty(),r.block.c()},m(i,o){insert(i,t,o),r.block.m(i,r.anchor=o),r.mount=()=>t.parentNode,r.anchor=t,n=!0},p(i,o){e=i,update_await_block_branch(r,e,o)},i(i){n||(transition_in(r.block),n=!0)},o(i){for(let o=0;o<3;o+=1){const a=r.blocks[o];transition_out(a)}n=!1},d(i){i&&detach(t),r.block.d(i),r.token=null,r=null}}}function create_if_block$2(e){let t,n;return t=new Address({props:{copyable:!0,address:Chains.addressFor(e[1]?.pubkey,e[3])||""}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&10&&(o.address=Chains.addressFor(r[1]?.pubkey,r[3])||""),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_default_slot$1(e){let t,n,r=e[1]&&e[3]&&create_if_block$2(e);return{c(){r&&r.c(),t=empty()},m(i,o){r&&r.m(i,o),insert(i,t,o),n=!0},p(i,o){i[1]&&i[3]?r?(r.p(i,o),o&10&&transition_in(r,1)):(r=create_if_block$2(i),r.c(),transition_in(r,1),r.m(t.parentNode,t)):r&&(group_outros(),transition_out(r,1,1,()=>{r=null}),check_outros())},i(i){n||(transition_in(r),n=!0)},o(i){transition_out(r),n=!1},d(i){r&&r.d(i),i&&detach(t)}}}function create_fragment$2(e){let t,n,r,i,o,a,s,c,l,u,f,d,g,_,h;return r=new Close({props:{absolute:!0}}),r.$on("click",e[12]),a=new Field({props:{short:!0,key:"chain-select",name:"Chain",$$slots:{default:[create_default_slot_2$1]},$$scope:{ctx:e}}}),c=new Field({props:{short:!0,key:"account-select",name:"Account",$$slots:{default:[create_default_slot_1$1]},$$scope:{ctx:e}}}),u=new Info({props:{address:!0,key:"receive-address",$$slots:{default:[create_default_slot$1]},$$scope:{ctx:e}}}),{c(){t=element("h3"),t.textContent="Receive",n=space(),i=element("div"),create_component(r.$$.fragment),o=space(),create_component(a.$$.fragment),s=space(),create_component(c.$$.fragment),l=space(),create_component(u.$$.fragment),f=space(),d=element("div"),g=space(),_=element("div"),_.textContent="Scan QR code to receive to this address",set_style(i,"display","contents"),set_style(i,"--margin","5px"),attr(d,"class","qr-code svelte-2npbym"),attr(_,"class","info svelte-2npbym")},m(A,m){insert(A,t,m),insert(A,n,m),insert(A,i,m),mount_component(r,i,null),insert(A,o,m),mount_component(a,A,m),insert(A,s,m),mount_component(c,A,m),insert(A,l,m),mount_component(u,A,m),insert(A,f,m),insert(A,d,m),e[15](d),insert(A,g,m),insert(A,_,m),h=!0},p(A,[m]){const y={};m&16777284&&(y.$$scope={dirty:m,ctx:A}),a.$set(y);const b={};m&16777249&&(b.$$scope={dirty:m,ctx:A}),c.$set(b);const B={};m&16777226&&(B.$$scope={dirty:m,ctx:A}),u.$set(B)},i(A){h||(transition_in(r.$$.fragment,A),transition_in(a.$$.fragment,A),transition_in(c.$$.fragment,A),transition_in(u.$$.fragment,A),h=!0)},o(A){transition_out(r.$$.fragment,A),transition_out(a.$$.fragment,A),transition_out(c.$$.fragment,A),transition_out(u.$$.fragment,A),h=!1},d(A){A&&detach(t),A&&detach(n),A&&detach(i),destroy_component(r,A),A&&detach(o),destroy_component(a,A),A&&detach(s),destroy_component(c,A),A&&detach(l),destroy_component(u,A),A&&detach(f),A&&detach(d),e[15](null),A&&detach(g),A&&detach(_)}}}function instance$2(e,t,n){let r,i,o,a,s,c;component_subscribe(e,yw_account_ref,C=>n(16,o=C)),component_subscribe(e,yw_context_popup,C=>n(17,a=C)),component_subscribe(e,yw_chain_ref,C=>n(18,s=C)),component_subscribe(e,yw_popup,C=>n(7,c=C));let l={value:o},u;const f=(C,E)=>({object:E,value:C,primary:E.name,secondary:E.extra?.total_fiat_cache||"(?)"});let d={};async function g(){const C=await Accounts.read();return n(5,d=ofe(await Promise.all(ode(C.raw).map(([E,N])=>new Promise(S=>{const k=dd("span"),Q=new PfpDisplay({target:k,props:{dim:28,genStyle:"font-size: 18px;",resource:N,settle(){const w=k.firstChild?.cloneNode(!0);Q.$destroy(),S([N.pfp,w])}}})}))))),oderac(C.raw,f)}let _={value:s},h;const A=(C,E)=>({object:E,value:C,primary:E.name,secondary:E.id,pfp:E.pfp});let m={};async function y(){const C=await Chains.read();return n(6,m=await B(C.raw)),oderac(C.raw,A)}a?.account||set_store_value(yw_context_popup,a={account:o},a);let b;async function B(C){return ofe(await Promise.all(ode(C).map(([E,N])=>new Promise(S=>{const k=dd("span"),Q=new PfpDisplay({target:k,props:{dim:28,genStyle:"font-size: 18px;",resource:N,settle(){const w=k.firstChild?.cloneNode(!0);Q.$destroy(),S([N.pfp,w])}}})}))))}const v=()=>set_store_value(yw_popup,c=null,c);function M(C){_=C,n(2,_)}function D(C){l=C,n(0,l)}function I(C){binding_callbacks[C?"unshift":"push"](()=>{b=C,n(4,b),n(1,u),n(3,h),n(11,r),n(10,i),n(0,l),n(2,_)})}return e.$$.update=()=>{if(e.$$.dirty&1&&n(11,r=l.value),e.$$.dirty&2048&&r&&Accounts.read().then(C=>{n(1,u=C.at(r))}),e.$$.dirty&4&&n(10,i=_.value),e.$$.dirty&1024&&i&&Chains.read().then(C=>{n(3,h=C.at(i))}),e.$$.dirty&26&&b&&u&&h){const C=new QRCode({content:`starshell:${Chains.addressFor(u.pubkey,h)||""}`,width:220,height:220,padding:3,ecl:"H",join:!0}).svg();n(4,b.innerHTML=C,b)}},[l,u,_,h,b,d,m,c,g,y,i,r,v,M,D,I]}class PopupReceive extends SvelteComponent{constructor(t){super(),init(this,t,instance$2,create_fragment$2,safe_not_equal,{})}}var Gap_svelte_svelte_type_style_lang="",InlinePills_svelte_svelte_type_style_lang="",TokensAdd_svelte_svelte_type_style_lang="";function as_amount(e,t){const n=e.amount.padStart(t.decimals+2,"0");return n.slice(0,-t.decimals).replace(/^0+/,"0")+"."+n.slice(-t.decimals)}async function to_fiat(e,t,n="usd"){if(e.amount==="0")return new BigNumber(0);const r=t.extra.coingecko_id,i=await CoinGecko.coinsVersus([r],n);return new BigNumber(e.amount).shiftedBy(-t.decimals).times(i[r])}async function coin_formats(e,t,n="usd"){const r=t.extra.coingecko_id,o=(await CoinGecko.coinsVersus([r],n))[r],a=new BigNumber(e.amount).shiftedBy(-t.decimals).times(o);return{versus:n,balance:a,fiat:a.times(o).toNumber(),worth:o}}class CoinParseError extends Error{}class DenomNotFoundError extends Error{}function parse_coin_amount(e,t){const n=R_TRANSFER_AMOUNT.exec(e);if(n){const[,r,i]=n;for(const[o,a]of ode(t.coins))if(i===a.denom)return[BigInt(r),o,a];throw new DenomNotFoundError(`Did not find "${i}" denomination in ${t.name}`)}else throw new CoinParseError(`Failed to parse transfer amount "${e}"`)}var HoldingView_svelte_svelte_type_style_lang="",HoldingsHome_svelte_svelte_type_style_lang="",AccountCreate_svelte_svelte_type_style_lang="",AccountsHome_svelte_svelte_type_style_lang="",DeadEnd_svelte_svelte_type_style_lang="",IconEditor_svelte_svelte_type_style_lang="",ContactEdit_svelte_svelte_type_style_lang="",ContactList_svelte_svelte_type_style_lang="",ContactsHome_svelte_svelte_type_style_lang="";const Apps=create_store_class({store:SI_STORE_APPS,class:class Ke extends WritableStoreMap{static pathFor(t,n){return`/scheme.${n}/host.${t.replace(/:/g,"+")}`}static pathFrom(t){return Ke.pathFor(t.host,t.scheme)}static get(t,n){return Apps.open(r=>r.get(t,n))}get(t,n){const r=Ke.pathFor(t,n);return this._w_cache[r]??null}async put(t){const n=Ke.pathFor(t.host,t.scheme);this._w_cache[n]=t,await this.save()}}});var NetworkView_svelte_svelte_type_style_lang="",defaultLocale$1="en",localesData$1={},lowercaseLocaleLookup={};function getDefaultLocale(){return defaultLocale$1}function setDefaultLocale(e){defaultLocale$1=e}function getLocaleData$1(e){return localesData$1[e]}function addLocaleData$1(e){if(!e)throw new Error("No locale data passed");localesData$1[e.locale]=e,lowercaseLocaleLookup[e.locale.toLowerCase()]=e.locale}function resolveLocale$1(e){if(localesData$1[e])return e;if(lowercaseLocaleLookup[e.toLowerCase()])return lowercaseLocaleLookup[e.toLowerCase()]}function resolveLocale(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=t.localeMatcher||"lookup";switch(n){case"lookup":return resolveLocaleLookup(e);case"best fit":return resolveLocaleLookup(e);default:throw new RangeError('Invalid "localeMatcher" option: '.concat(n))}}function resolveLocaleLookup(e){var t=resolveLocale$1(e);if(t)return t;for(var n=e.split("-");e.length>1;){n.pop(),e=n.join("-");var r=resolveLocale$1(e);if(r)return r}}var $={af:function e(t){return t==1?"one":"other"},am:function e(t){return t>=0&&t<=1?"one":"other"},ar:function e(t){var n=String(t).split("."),r=Number(n[0])==t,i=r&&n[0].slice(-2);return t==0?"zero":t==1?"one":t==2?"two":i>=3&&i<=10?"few":i>=11&&i<=99?"many":"other"},ast:function e(t){var n=String(t).split("."),r=!n[1];return t==1&&r?"one":"other"},be:function e(t){var n=String(t).split("."),r=Number(n[0])==t,i=r&&n[0].slice(-1),o=r&&n[0].slice(-2);return i==1&&o!=11?"one":i>=2&&i<=4&&(o<12||o>14)?"few":r&&i==0||i>=5&&i<=9||o>=11&&o<=14?"many":"other"},br:function e(t){var n=String(t).split("."),r=Number(n[0])==t,i=r&&n[0].slice(-1),o=r&&n[0].slice(-2),a=r&&n[0].slice(-6);return i==1&&o!=11&&o!=71&&o!=91?"one":i==2&&o!=12&&o!=72&&o!=92?"two":(i==3||i==4||i==9)&&(o<10||o>19)&&(o<70||o>79)&&(o<90||o>99)?"few":t!=0&&r&&a==0?"many":"other"},bs:function e(t){var n=String(t).split("."),r=n[0],i=n[1]||"",o=!n[1],a=r.slice(-1),s=r.slice(-2),c=i.slice(-1),l=i.slice(-2);return o&&a==1&&s!=11||c==1&&l!=11?"one":o&&a>=2&&a<=4&&(s<12||s>14)||c>=2&&c<=4&&(l<12||l>14)?"few":"other"},ceb:function e(t){var n=String(t).split("."),r=n[0],i=n[1]||"",o=!n[1],a=r.slice(-1),s=i.slice(-1);return o&&(r==1||r==2||r==3)||o&&a!=4&&a!=6&&a!=9||!o&&s!=4&&s!=6&&s!=9?"one":"other"},cs:function e(t){var n=String(t).split("."),r=n[0],i=!n[1];return t==1&&i?"one":r>=2&&r<=4&&i?"few":i?"other":"many"},cy:function e(t){return t==0?"zero":t==1?"one":t==2?"two":t==3?"few":t==6?"many":"other"},da:function e(t){var n=String(t).split("."),r=n[0],i=Number(n[0])==t;return t==1||!i&&(r==0||r==1)?"one":"other"},dsb:function e(t){var n=String(t).split("."),r=n[0],i=n[1]||"",o=!n[1],a=r.slice(-2),s=i.slice(-2);return o&&a==1||s==1?"one":o&&a==2||s==2?"two":o&&(a==3||a==4)||s==3||s==4?"few":"other"},dz:function e(t){return"other"},es:function e(t){var n=String(t).split("."),r=n[0],i=!n[1],o=r.slice(-6);return t==1?"one":r!=0&&o==0&&i?"many":"other"},ff:function e(t){return t>=0&&t<2?"one":"other"},fr:function e(t){var n=String(t).split("."),r=n[0],i=!n[1],o=r.slice(-6);return t>=0&&t<2?"one":r!=0&&o==0&&i?"many":"other"},ga:function e(t){var n=String(t).split("."),r=Number(n[0])==t;return t==1?"one":t==2?"two":r&&t>=3&&t<=6?"few":r&&t>=7&&t<=10?"many":"other"},gd:function e(t){var n=String(t).split("."),r=Number(n[0])==t;return t==1||t==11?"one":t==2||t==12?"two":r&&t>=3&&t<=10||r&&t>=13&&t<=19?"few":"other"},he:function e(t){var n=String(t).split("."),r=n[0],i=!n[1],o=Number(n[0])==t,a=o&&n[0].slice(-1);return t==1&&i?"one":r==2&&i?"two":i&&(t<0||t>10)&&o&&a==0?"many":"other"},is:function e(t){var n=String(t).split("."),r=n[0],i=Number(n[0])==t,o=r.slice(-1),a=r.slice(-2);return i&&o==1&&a!=11||!i?"one":"other"},it:function e(t){var n=String(t).split("."),r=n[0],i=!n[1],o=r.slice(-6);return t==1&&i?"one":r!=0&&o==0&&i?"many":"other"},ksh:function e(t){return t==0?"zero":t==1?"one":"other"},lt:function e(t){var n=String(t).split("."),r=n[1]||"",i=Number(n[0])==t,o=i&&n[0].slice(-1),a=i&&n[0].slice(-2);return o==1&&(a<11||a>19)?"one":o>=2&&o<=9&&(a<11||a>19)?"few":r!=0?"many":"other"},lv:function e(t){var n=String(t).split("."),r=n[1]||"",i=r.length,o=Number(n[0])==t,a=o&&n[0].slice(-1),s=o&&n[0].slice(-2),c=r.slice(-2),l=r.slice(-1);return o&&a==0||s>=11&&s<=19||i==2&&c>=11&&c<=19?"zero":a==1&&s!=11||i==2&&l==1&&c!=11||i!=2&&l==1?"one":"other"},mk:function e(t){var n=String(t).split("."),r=n[0],i=n[1]||"",o=!n[1],a=r.slice(-1),s=r.slice(-2),c=i.slice(-1),l=i.slice(-2);return o&&a==1&&s!=11||c==1&&l!=11?"one":"other"},mt:function e(t){var n=String(t).split("."),r=Number(n[0])==t,i=r&&n[0].slice(-2);return t==1?"one":t==0||i>=2&&i<=10?"few":i>=11&&i<=19?"many":"other"},pa:function e(t){return t==0||t==1?"one":"other"},pl:function e(t){var n=String(t).split("."),r=n[0],i=!n[1],o=r.slice(-1),a=r.slice(-2);return t==1&&i?"one":i&&o>=2&&o<=4&&(a<12||a>14)?"few":i&&r!=1&&(o==0||o==1)||i&&o>=5&&o<=9||i&&a>=12&&a<=14?"many":"other"},pt:function e(t){var n=String(t).split("."),r=n[0],i=!n[1],o=r.slice(-6);return r==0||r==1?"one":r!=0&&o==0&&i?"many":"other"},ro:function e(t){var n=String(t).split("."),r=!n[1],i=Number(n[0])==t,o=i&&n[0].slice(-2);return t==1&&r?"one":!r||t==0||o>=2&&o<=19?"few":"other"},ru:function e(t){var n=String(t).split("."),r=n[0],i=!n[1],o=r.slice(-1),a=r.slice(-2);return i&&o==1&&a!=11?"one":i&&o>=2&&o<=4&&(a<12||a>14)?"few":i&&o==0||i&&o>=5&&o<=9||i&&a>=11&&a<=14?"many":"other"},se:function e(t){return t==1?"one":t==2?"two":"other"},si:function e(t){var n=String(t).split("."),r=n[0],i=n[1]||"";return t==0||t==1||r==0&&i==1?"one":"other"},sl:function e(t){var n=String(t).split("."),r=n[0],i=!n[1],o=r.slice(-2);return i&&o==1?"one":i&&o==2?"two":i&&(o==3||o==4)||!i?"few":"other"}};$.as=$.am;$.az=$.af;$.bg=$.af;$.bn=$.am;$.brx=$.af;$.ca=$.ast;$.ce=$.af;$.chr=$.af;$.de=$.ast;$.ee=$.af;$.el=$.af;$.en=$.ast;$.et=$.ast;$.eu=$.af;$.fa=$.am;$.fi=$.ast;$.fil=$.ceb;$.fo=$.af;$.fur=$.af;$.fy=$.ast;$.gl=$.ast;$.gu=$.am;$.ha=$.af;$.hi=$.am;$.hr=$.bs;$.hsb=$.dsb;$.hu=$.af;$.hy=$.ff;$.ia=$.ast;$.id=$.dz;$.ig=$.dz;$.ja=$.dz;$.jgo=$.af;$.jv=$.dz;$.ka=$.af;$.kea=$.dz;$.kk=$.af;$.kl=$.af;$.km=$.dz;$.kn=$.am;$.ko=$.dz;$.ku=$.af;$.ky=$.af;$.lb=$.af;$.lkt=$.dz;$.lo=$.dz;$.ml=$.af;$.mn=$.af;$.mr=$.af;$.ms=$.dz;$.my=$.dz;$.nb=$.af;$.ne=$.af;$.nl=$.ast;$.nn=$.af;$.no=$.af;$.or=$.af;$.pcm=$.am;$.ps=$.af;$.rm=$.af;$.sah=$.dz;$.sc=$.ast;$.sd=$.af;$.sk=$.cs;$.so=$.af;$.sq=$.af;$.sr=$.bs;$.su=$.dz;$.sv=$.ast;$.sw=$.ast;$.ta=$.af;$.te=$.af;$.th=$.dz;$.ti=$.pa;$.tk=$.af;$.to=$.dz;$.tr=$.af;$.ug=$.af;$.uk=$.ru;$.ur=$.ast;$.uz=$.af;$.vi=$.dz;$.wae=$.af;$.wo=$.dz;$.yi=$.ast;$.yo=$.dz;$.yue=$.dz;$.zh=$.dz;$.zu=$.am;var PluralRuleFunctions=$;function getPluralRulesLocale(e){return e==="pt-PT"?e:getLanguageFromLanguageTag(e)}var LANGUAGE_REG_EXP=/^([a-z0-9]+)/i;function getLanguageFromLanguageTag(e){var t=e.match(LANGUAGE_REG_EXP);if(!t)throw new TypeError("Invalid locale: ".concat(e));return t[1]}function _classCallCheck$3(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$3(e,t,n){return t&&_defineProperties$3(e.prototype,t),n&&_defineProperties$3(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var PluralRules=function(){function e(t,n){_classCallCheck$3(this,e);var r=e.supportedLocalesOf(t);if(r.length===0)throw new RangeError("Unsupported locale: "+t);if(n&&n.type!=="cardinal")throw new RangeError('Only "cardinal" "type" is supported');this.$=PluralRuleFunctions[getPluralRulesLocale(r[0])]}return _createClass$3(e,[{key:"select",value:function(n){return this.$(n)}}],[{key:"supportedLocalesOf",value:function(n){return typeof n=="string"&&(n=[n]),n.filter(function(r){return PluralRuleFunctions[getPluralRulesLocale(r)]})}}]),e}();function _typeof$5(e){return _typeof$5=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$5(e)}function ownKeys$9(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread$9(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys$9(Object(n),!0).forEach(function(r){_defineProperty$9(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys$9(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty$9(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _slicedToArray$1(e,t){return _arrayWithHoles$1(e)||_iterableToArrayLimit$1(e,t)||_unsupportedIterableToArray$2(e,t)||_nonIterableRest$1()}function _nonIterableRest$1(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray$2(e,t){if(!!e){if(typeof e=="string")return _arrayLikeToArray$2(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if(n==="Object"&&e.constructor&&(n=e.constructor.name),n==="Map"||n==="Set")return Array.from(e);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray$2(e,t)}}function _arrayLikeToArray$2(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _iterableToArrayLimit$1(e,t){var n=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(n!=null){var r=[],i=!0,o=!1,a,s;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(r.push(a.value),!(t&&r.length===t));i=!0);}catch(c){o=!0,s=c}finally{try{!i&&n.return!=null&&n.return()}finally{if(o)throw s}}return r}}function _arrayWithHoles$1(e){if(Array.isArray(e))return e}function _classCallCheck$2(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$2(e,t,n){return t&&_defineProperties$2(e.prototype,t),n&&_defineProperties$2(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var UNITS=["second","minute","hour","day","week","month","quarter","year"],NUMERIC_VALUES=["auto","always"],STYLE_VALUES=["long","short","narrow"],LOCALE_MATCHER_VALUES=["lookup","best fit"],RelativeTimeFormat=function(){function e(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};_classCallCheck$2(this,e);var r=n.numeric,i=n.style,o=n.localeMatcher;if(this.numeric="always",this.style="long",this.localeMatcher="lookup",r!==void 0){if(NUMERIC_VALUES.indexOf(r)<0)throw new RangeError('Invalid "numeric" option: '.concat(r));this.numeric=r}if(i!==void 0){if(STYLE_VALUES.indexOf(i)<0)throw new RangeError('Invalid "style" option: '.concat(i));this.style=i}if(o!==void 0){if(LOCALE_MATCHER_VALUES.indexOf(o)<0)throw new RangeError('Invalid "localeMatcher" option: '.concat(o));this.localeMatcher=o}if(typeof t=="string"&&(t=[t]),t.push(getDefaultLocale()),this.locale=e.supportedLocalesOf(t,{localeMatcher:this.localeMatcher})[0],!this.locale)throw new Error("No supported locale was found");PluralRules.supportedLocalesOf(this.locale).length>0?this.pluralRules=new PluralRules(this.locale):console.warn('"'.concat(this.locale,'" locale is not supported')),typeof Intl<"u"&&Intl.NumberFormat?(this.numberFormat=new Intl.NumberFormat(this.locale),this.numberingSystem=this.numberFormat.resolvedOptions().numberingSystem):this.numberingSystem="latn",this.locale=resolveLocale(this.locale,{localeMatcher:this.localeMatcher})}return _createClass$2(e,[{key:"format",value:function(){var n=parseFormatArgs(arguments),r=_slicedToArray$1(n,2),i=r[0],o=r[1];return this.getRule(i,o).replace("{0}",this.formatNumber(Math.abs(i)))}},{key:"formatToParts",value:function(){var n=parseFormatArgs(arguments),r=_slicedToArray$1(n,2),i=r[0],o=r[1],a=this.getRule(i,o),s=a.indexOf("{0}");if(s<0)return[{type:"literal",value:a}];var c=[];return s>0&&c.push({type:"literal",value:a.slice(0,s)}),c=c.concat(this.formatNumberToParts(Math.abs(i)).map(function(l){return _objectSpread$9(_objectSpread$9({},l),{},{unit:o})})),s+3<a.length-1&&c.push({type:"literal",value:a.slice(s+3)}),c}},{key:"getRule",value:function(n,r){var i=getLocaleData$1(this.locale)[this.style][r];if(typeof i=="string")return i;if(this.numeric==="auto"){if(n===-2||n===-1){var o=i["previous".concat(n===-1?"":"-"+Math.abs(n))];if(o)return o}else if(n===1||n===2){var a=i["next".concat(n===1?"":"-"+Math.abs(n))];if(a)return a}else if(n===0&&i.current)return i.current}var s=i[isNegative(n)?"past":"future"];if(typeof s=="string")return s;var c=this.pluralRules&&this.pluralRules.select(Math.abs(n))||"other";return s[c]||s.other}},{key:"formatNumber",value:function(n){return this.numberFormat?this.numberFormat.format(n):String(n)}},{key:"formatNumberToParts",value:function(n){return this.numberFormat&&this.numberFormat.formatToParts?this.numberFormat.formatToParts(n):[{type:"integer",value:this.formatNumber(n)}]}},{key:"resolvedOptions",value:function(){return{locale:this.locale,style:this.style,numeric:this.numeric,numberingSystem:this.numberingSystem}}}]),e}();RelativeTimeFormat.supportedLocalesOf=function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(typeof e=="string")e=[e];else if(!Array.isArray(e))throw new TypeError('Invalid "locales" argument');return e.filter(function(n){return resolveLocale(n,t)})};RelativeTimeFormat.addLocale=addLocaleData$1;RelativeTimeFormat.setDefaultLocale=setDefaultLocale;RelativeTimeFormat.getDefaultLocale=getDefaultLocale;RelativeTimeFormat.PluralRules=PluralRules;var UNIT_ERROR='Invalid "unit" argument';function parseUnit(e){if(_typeof$5(e)==="symbol")throw new TypeError(UNIT_ERROR);if(typeof e!="string")throw new RangeError("".concat(UNIT_ERROR,": ").concat(e));if(e[e.length-1]==="s"&&(e=e.slice(0,e.length-1)),UNITS.indexOf(e)<0)throw new RangeError("".concat(UNIT_ERROR,": ").concat(e));return e}var NUMBER_ERROR='Invalid "number" argument';function parseNumber(e){if(e=Number(e),Number.isFinite&&!Number.isFinite(e))throw new RangeError("".concat(NUMBER_ERROR,": ").concat(e));return e}function isNegativeZero(e){return 1/e===-1/0}function isNegative(e){return e<0||e===0&&isNegativeZero(e)}function parseFormatArgs(e){if(e.length<2)throw new TypeError('"unit" argument is required');return[parseNumber(e[0]),parseUnit(e[1])]}function _typeof$4(e){return _typeof$4=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$4(e)}function _classCallCheck$1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$1(e,t,n){return t&&_defineProperties$1(e.prototype,t),n&&_defineProperties$1(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var Cache=function(){function e(){_classCallCheck$1(this,e),this.cache={}}return _createClass$1(e,[{key:"get",value:function(){for(var n=this.cache,r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];for(var a=0,s=i;a<s.length;a++){var c=s[a];if(_typeof$4(n)!=="object")return;n=n[c]}return n}},{key:"put",value:function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];for(var o=r.pop(),a=r.pop(),s=this.cache,c=0,l=r;c<l.length;c++){var u=l[c];_typeof$4(s[u])!=="object"&&(s[u]={}),s=s[u]}return s[a]=o}}]),e}();function _typeof$3(e){return _typeof$3=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$3(e)}function _createForOfIteratorHelperLoose$1(e,t){var n=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=_unsupportedIterableToArray$1(e))||t&&e&&typeof e.length=="number"){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray$1(e,t){if(!!e){if(typeof e=="string")return _arrayLikeToArray$1(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if(n==="Object"&&e.constructor&&(n=e.constructor.name),n==="Map"||n==="Set")return Array.from(e);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray$1(e,t)}}function _arrayLikeToArray$1(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function chooseLocale(e,t){for(var n=_createForOfIteratorHelperLoose$1(e),r;!(r=n()).done;){var i=r.value;if(t(i))return i;for(var o=i.split("-");o.length>1;)if(o.pop(),i=o.join("-"),t(i))return i}throw new Error("No locale data has been registered for any of the locales: ".concat(e.join(", ")))}function intlDateTimeFormatSupported(){var e=(typeof Intl>"u"?"undefined":_typeof$3(Intl))==="object";return e&&typeof Intl.DateTimeFormat=="function"}function _typeof$2(e){return _typeof$2=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$2(e)}function isStyleObject(e){return isObject(e)&&(Array.isArray(e.steps)||Array.isArray(e.gradation)||Array.isArray(e.flavour)||typeof e.flavour=="string"||Array.isArray(e.labels)||typeof e.labels=="string"||Array.isArray(e.units)||typeof e.custom=="function")}var OBJECT_CONSTRUCTOR={}.constructor;function isObject(e){return _typeof$2(e)!==void 0&&e!==null&&e.constructor===OBJECT_CONSTRUCTOR}var minute=60,hour=60*minute,day=24*hour,week=7*day,month=30.44*day,year=146097/400*day;function getSecondsInUnit(e){switch(e){case"second":return 1;case"minute":return minute;case"hour":return hour;case"day":return day;case"week":return week;case"month":return month;case"year":return year}}function getStepDenominator(e){return e.factor!==void 0?e.factor:getSecondsInUnit(e.unit||e.formatAs)||1}function getRoundFunction(e){switch(e){case"floor":return Math.floor;default:return Math.round}}function getDiffRatioToNextRoundedNumber(e){switch(e){case"floor":return 1;default:return .5}}function _typeof$1(e){return _typeof$1=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$1(e)}function getStepMinTime(e,t){var n=t.prevStep,r=t.timestamp,i=t.now,o=t.future,a=t.round,s;return n&&(n.id||n.unit)&&(s=e["threshold_for_".concat(n.id||n.unit)]),s===void 0&&e.threshold!==void 0&&(s=e.threshold,typeof s=="function"&&(s=s(i,o))),s===void 0&&(s=e.minTime),_typeof$1(s)==="object"&&(n&&n.id&&s[n.id]!==void 0?s=s[n.id]:s=s.default),typeof s=="function"&&(s=s(r,{future:o,getMinTimeForUnit:function(l,u){return _getMinTimeForUnit(l,u||n&&n.formatAs,{round:a})}})),s===void 0&&e.test&&(e.test(r,{now:i,future:o})?s=0:s=9007199254740991),s===void 0&&(n?e.formatAs&&n.formatAs&&(s=_getMinTimeForUnit(e.formatAs,n.formatAs,{round:a})):s=0),s===void 0&&console.warn("[javascript-time-ago] A step should specify `minTime`:\n"+JSON.stringify(e,null,2)),s}function _getMinTimeForUnit(e,t,n){var r=n.round,i=getSecondsInUnit(e),o;if(t==="now"?o=getSecondsInUnit(e):o=getSecondsInUnit(t),i!==void 0&&o!==void 0)return i-o*(1-getDiffRatioToNextRoundedNumber(r))}function ownKeys$8(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread$8(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys$8(Object(n),!0).forEach(function(r){_defineProperty$8(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys$8(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty$8(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function getStep(e,t,n){var r=n.now,i=n.future,o=n.round,a=n.units,s=n.getNextStep;e=filterStepsByUnits(e,a);var c=_getStep(e,t,{now:r,future:i,round:o});if(s){if(c){var l=e[e.indexOf(c)-1],u=e[e.indexOf(c)+1];return[l,c,u]}return[void 0,void 0,e[0]]}return c}function _getStep(e,t,n){var r=n.now,i=n.future,o=n.round;if(e.length!==0){var a=getStepIndex(e,t,{now:r,future:i||t<0,round:o});if(a!==-1){var s=e[a];if(s.granularity){var c=getRoundFunction(o)(Math.abs(t)/getStepDenominator(s)/s.granularity)*s.granularity;if(c===0&&a>0)return e[a-1]}return s}}}function getStepIndex(e,t,n){var r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,i=getStepMinTime(e[r],_objectSpread$8({prevStep:e[r-1],timestamp:n.now-t*1e3},n));return i===void 0||Math.abs(t)<i?r-1:r===e.length-1?r:getStepIndex(e,t,n,r+1)}function filterStepsByUnits(e,t){return e.filter(function(n){var r=n.unit,i=n.formatAs;return r=r||i,r?t.indexOf(r)>=0:!0})}function getTimeToNextUpdateForUnit(e,t,n){var r=n.now,i=n.round;if(!!getSecondsInUnit(e)){var o=getSecondsInUnit(e)*1e3,a=t>r,s=Math.abs(t-r),c=getRoundFunction(i)(s/o)*o;return a?c>0?s-c+getDiffToPreviousRoundedNumber(i,o):s-c+1:-(s-c)+getDiffToNextRoundedNumber(i,o)}}function getDiffToNextRoundedNumber(e,t){return getDiffRatioToNextRoundedNumber(e)*t}function getDiffToPreviousRoundedNumber(e,t){return(1-getDiffRatioToNextRoundedNumber(e))*t+1}var YEAR=365*24*60*60*1e3,INFINITY=1e3*YEAR;function getTimeToNextUpdate(e,t,n){var r=n.prevStep,i=n.nextStep,o=n.now,a=n.future,s=n.round,c=e.getTime?e.getTime():e,l=function(_){return getTimeToNextUpdateForUnit(_,c,{now:o,round:s})},u=getTimeToStepChange(a?t:i,c,{future:a,now:o,round:s,prevStep:a?r:t});if(u!==void 0){var f;if(t&&(t.getTimeToNextUpdate&&(f=t.getTimeToNextUpdate(c,{getTimeToNextUpdateForUnit:l,getRoundFunction,now:o,future:a,round:s})),f===void 0)){var d=t.unit||t.formatAs;d&&(f=l(d))}return f===void 0?u:Math.min(f,u)}}function getStepChangesAt(e,t,n){var r=n.now,i=n.future,o=n.round,a=n.prevStep,s=getStepMinTime(e,{timestamp:t,now:r,future:i,round:o,prevStep:a});if(s!==void 0)return i?t-s*1e3+1:s===0&&t===r?INFINITY:t+s*1e3}function getTimeToStepChange(e,t,n){var r=n.now,i=n.future,o=n.round,a=n.prevStep;if(e){var s=getStepChangesAt(e,t,{now:r,future:i,round:o,prevStep:a});return s===void 0?void 0:s-r}else return i?t-r+1:INFINITY}var localesData={};function getLocaleData(e){return localesData[e]}function addLocaleData(e){if(!e)throw new Error("[javascript-time-ago] No locale data passed.");localesData[e.locale]=e}var round$1=[{formatAs:"now"},{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"}],round={steps:round$1,labels:"long"};function ownKeys$7(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread$7(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys$7(Object(n),!0).forEach(function(r){_defineProperty$7(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys$7(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty$7(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var defaultStyle=_objectSpread$7(_objectSpread$7({},round),{},{steps:round.steps.filter(function(e){return e.formatAs!=="second"})}),approximate$1=[{factor:1,unit:"now"},{threshold:1,threshold_for_now:45.5,factor:1,unit:"second"},{threshold:45.5,factor:minute,unit:"minute"},{threshold:2.5*minute,granularity:5,factor:minute,unit:"minute"},{threshold:22.5*minute,factor:.5*hour,unit:"half-hour"},{threshold:42.5*minute,threshold_for_minute:52.5*minute,factor:hour,unit:"hour"},{threshold:20.5/24*day,factor:day,unit:"day"},{threshold:5.5*day,factor:week,unit:"week"},{threshold:3.5*week,factor:month,unit:"month"},{threshold:10.5*month,factor:year,unit:"year"}],approximate={gradation:approximate$1,flavour:"long",units:["now","minute","hour","day","week","month","year"]},approximateTime={gradation:approximate$1,flavour:"long-time",units:["now","minute","hour","day","week","month","year"]};function getDate(e){return e instanceof Date?e:new Date(e)}var steps=[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"}],formatters={},monthAndDay={minTime:function e(t,n){n.future;var r=n.getMinTimeForUnit;return r("day")},format:function e(t,n){return formatters[n]||(formatters[n]={}),formatters[n].dayMonth||(formatters[n].dayMonth=new Intl.DateTimeFormat(n,{month:"short",day:"numeric"})),formatters[n].dayMonth.format(getDate(t))}},yearMonthAndDay={minTime:function e(t,n){var r=n.future;if(r){var i=new Date(new Date(t).getFullYear(),0).getTime()-1;return(t-i)/1e3}else{var o=new Date(new Date(t).getFullYear()+1,0).getTime();return(o-t)/1e3}},format:function e(t,n){return formatters[n]||(formatters[n]={}),formatters[n].dayMonthYear||(formatters[n].dayMonthYear=new Intl.DateTimeFormat(n,{year:"numeric",month:"short",day:"numeric"})),formatters[n].dayMonthYear.format(getDate(t))}};intlDateTimeFormatSupported()?steps.push(monthAndDay,yearMonthAndDay):steps.push({formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"});var twitter={steps,labels:["mini","short-time","narrow","short"]};function ownKeys$6(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread$6(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys$6(Object(n),!0).forEach(function(r){_defineProperty$6(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys$6(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty$6(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var twitterNow=_objectSpread$6(_objectSpread$6({},twitter),{},{steps:[{formatAs:"now"}].concat(twitter.steps)});function ownKeys$5(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread$5(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys$5(Object(n),!0).forEach(function(r){_defineProperty$5(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys$5(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty$5(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var twitterMinute=_objectSpread$5(_objectSpread$5({},twitter),{},{steps:twitter.steps.filter(function(e){return e.formatAs!=="second"})});function ownKeys$4(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread$4(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys$4(Object(n),!0).forEach(function(r){_defineProperty$4(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys$4(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty$4(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var twitterMinuteNow=_objectSpread$4(_objectSpread$4({},twitterMinute),{},{steps:[{formatAs:"now"}].concat(twitterMinute.steps)});function ownKeys$3(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread$3(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys$3(Object(n),!0).forEach(function(r){_defineProperty$3(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys$3(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty$3(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var twitterFirstMinute=_objectSpread$3(_objectSpread$3({},twitter),{},{steps:twitter.steps.filter(function(e){return e.formatAs!=="second"}).map(function(e){return e.formatAs==="minute"?_objectSpread$3(_objectSpread$3({},e),{},{minTime:minute}):e})}),mini={steps:[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"month"},{formatAs:"year"}],labels:["mini","short-time","narrow","short"]};function ownKeys$2(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread$2(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys$2(Object(n),!0).forEach(function(r){_defineProperty$2(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys$2(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty$2(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var miniNow=_objectSpread$2(_objectSpread$2({},mini),{},{steps:[{formatAs:"now"}].concat(mini.steps)});function ownKeys$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread$1(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys$1(Object(n),!0).forEach(function(r){_defineProperty$1(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys$1(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty$1(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var miniMinute=_objectSpread$1(_objectSpread$1({},mini),{},{steps:mini.steps.filter(function(e){return e.formatAs!=="second"})});function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach(function(r){_defineProperty(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var miniMinuteNow=_objectSpread(_objectSpread({},miniMinute),{},{steps:[{formatAs:"now"}].concat(miniMinute.steps)});function getStyleByName(e){switch(e){case"default":case"round":return round;case"round-minute":return defaultStyle;case"approximate":return approximate;case"time":case"approximate-time":return approximateTime;case"mini":return mini;case"mini-now":return miniNow;case"mini-minute":return miniMinute;case"mini-minute-now":return miniMinuteNow;case"twitter":return twitter;case"twitter-now":return twitterNow;case"twitter-minute":return twitterMinute;case"twitter-minute-now":return twitterMinuteNow;case"twitter-first-minute":return twitterFirstMinute;default:return approximate}}function _typeof(e){return _typeof=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(e)}function _createForOfIteratorHelperLoose(e,t){var n=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=_unsupportedIterableToArray(e))||t&&e&&typeof e.length=="number"){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray(e,t){if(!!e){if(typeof e=="string")return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if(n==="Object"&&e.constructor&&(n=e.constructor.name),n==="Map"||n==="Set")return Array.from(e);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(e,t)}}function _arrayLikeToArray(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _iterableToArrayLimit(e,t){var n=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(n!=null){var r=[],i=!0,o=!1,a,s;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(r.push(a.value),!(t&&r.length===t));i=!0);}catch(c){o=!0,s=c}finally{try{!i&&n.return!=null&&n.return()}finally{if(o)throw s}}return r}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var TimeAgo=function(){function e(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=n.polyfill;_classCallCheck(this,e),typeof t=="string"&&(t=[t]),this.locale=chooseLocale(t.concat(e.getDefaultLocale()),getLocaleData),typeof Intl<"u"&&Intl.NumberFormat&&(this.numberFormat=new Intl.NumberFormat(this.locale)),r===!1?(this.IntlRelativeTimeFormat=Intl.RelativeTimeFormat,this.IntlPluralRules=Intl.PluralRules):(this.IntlRelativeTimeFormat=RelativeTimeFormat,this.IntlPluralRules=RelativeTimeFormat.PluralRules),this.relativeTimeFormatCache=new Cache,this.pluralRulesCache=new Cache}return _createClass(e,[{key:"format",value:function(n,r,i){i||(r&&!isStyle(r)?(i=r,r=void 0):i={}),r||(r=defaultStyle),typeof r=="string"&&(r=getStyleByName(r));var o=getTimestamp(n),a=this.getLabels(r.flavour||r.labels),s=a.labels,c=a.labelsType,l;r.now!==void 0&&(l=r.now),l===void 0&&i.now!==void 0&&(l=i.now),l===void 0&&(l=Date.now());var u=(l-o)/1e3,f=i.future||u<0,d=getNowLabel(s,getLocaleData(this.locale).now,getLocaleData(this.locale).long,f);if(r.custom){var g=r.custom({now:l,date:new Date(o),time:o,elapsed:u,locale:this.locale});if(g!==void 0)return g}var _=getTimeIntervalMeasurementUnits(r.units,s,d),h=i.round||r.round,A=getStep(r.gradation||r.steps||defaultStyle.steps,u,{now:l,units:_,round:h,future:f,getNextStep:!0}),m=_slicedToArray(A,3),y=m[0],b=m[1],B=m[2],v=this.formatDateForStep(o,b,u,{labels:s,labelsType:c,nowLabel:d,now:l,future:f,round:h})||"";if(i.getTimeToNextUpdate){var M=getTimeToNextUpdate(o,b,{nextStep:B,prevStep:y,now:l,future:f,round:h});return[v,M]}return v}},{key:"formatDateForStep",value:function(n,r,i,o){var a=this,s=o.labels,c=o.labelsType,l=o.nowLabel,u=o.now,f=o.future,d=o.round;if(!!r){if(r.format)return r.format(n,this.locale,{formatAs:function(m,y){return a.formatValue(y,m,{labels:s,future:f})},now:u,future:f});var g=r.unit||r.formatAs;if(!g)throw new Error("[javascript-time-ago] Each step must define either `formatAs` or `format()`. Step: ".concat(JSON.stringify(r)));if(g==="now")return l;var _=Math.abs(i)/getStepDenominator(r);r.granularity&&(_=getRoundFunction(d)(_/r.granularity)*r.granularity);var h=-1*Math.sign(i)*getRoundFunction(d)(_);switch(h===0&&(f?h=0:h=-0),c){case"long":case"short":case"narrow":return this.getFormatter(c).format(h,g);default:return this.formatValue(h,g,{labels:s,future:f})}}}},{key:"formatValue",value:function(n,r,i){var o=i.labels,a=i.future;return this.getFormattingRule(o,r,n,{future:a}).replace("{0}",this.formatNumber(Math.abs(n)))}},{key:"getFormattingRule",value:function(n,r,i,o){var a=o.future;if(this.locale,n=n[r],typeof n=="string")return n;var s=i===0?a?"future":"past":i<0?"past":"future",c=n[s]||n;if(typeof c=="string")return c;var l=this.getPluralRules().select(Math.abs(i));return c[l]||c.other}},{key:"formatNumber",value:function(n){return this.numberFormat?this.numberFormat.format(n):String(n)}},{key:"getFormatter",value:function(n){return this.relativeTimeFormatCache.get(this.locale,n)||this.relativeTimeFormatCache.put(this.locale,n,new this.IntlRelativeTimeFormat(this.locale,{style:n}))}},{key:"getPluralRules",value:function(){return this.pluralRulesCache.get(this.locale)||this.pluralRulesCache.put(this.locale,new this.IntlPluralRules(this.locale))}},{key:"getLabels",value:function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];typeof n=="string"&&(n=[n]),n=n.map(function(s){switch(s){case"tiny":case"mini-time":return"mini";default:return s}}),n=n.concat("long");for(var r=getLocaleData(this.locale),i=_createForOfIteratorHelperLoose(n),o;!(o=i()).done;){var a=o.value;if(r[a])return{labelsType:a,labels:r[a]}}}}]),e}(),defaultLocale="en";TimeAgo.getDefaultLocale=function(){return defaultLocale};TimeAgo.setDefaultLocale=function(e){return defaultLocale=e};TimeAgo.addDefaultLocale=function(e){if(defaultLocaleHasBeenSpecified)return console.error("[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.");defaultLocaleHasBeenSpecified=!0,TimeAgo.setDefaultLocale(e.locale),TimeAgo.addLocale(e)};var defaultLocaleHasBeenSpecified;TimeAgo.addLocale=function(e){addLocaleData(e),RelativeTimeFormat.addLocale(e)};TimeAgo.locale=TimeAgo.addLocale;TimeAgo.addLabels=function(e,t,n){var r=getLocaleData(e);r||(addLocaleData({locale:e}),r=getLocaleData(e)),r[t]=n};function getTimestamp(e){if(e.constructor===Date||isMockedDate(e))return e.getTime();if(typeof e=="number")return e;throw new Error("Unsupported relative time formatter input: ".concat(_typeof(e),", ").concat(e))}function isMockedDate(e){return _typeof(e)==="object"&&typeof e.getTime=="function"}function getTimeIntervalMeasurementUnits(e,t,n){var r=Object.keys(t);return n&&r.push("now"),e&&(r=e.filter(function(i){return i==="now"||r.indexOf(i)>=0})),r}function getNowLabel(e,t,n,r){var i=e.now||t&&t.now;if(i)return typeof i=="string"?i:r?i.future:i.past;if(n&&n.second&&n.second.current)return n.second.current}function isStyle(e){return typeof e=="string"||isStyleObject(e)}var english_locale={locale:"en",long:{year:{previous:"last year",current:"this year",next:"next year",past:{one:"{0} year ago",other:"{0} years ago"},future:{one:"in {0} year",other:"in {0} years"}},quarter:{previous:"last quarter",current:"this quarter",next:"next quarter",past:{one:"{0} quarter ago",other:"{0} quarters ago"},future:{one:"in {0} quarter",other:"in {0} quarters"}},month:{previous:"last month",current:"this month",next:"next month",past:{one:"{0} month ago",other:"{0} months ago"},future:{one:"in {0} month",other:"in {0} months"}},week:{previous:"last week",current:"this week",next:"next week",past:{one:"{0} week ago",other:"{0} weeks ago"},future:{one:"in {0} week",other:"in {0} weeks"}},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:{one:"{0} hour ago",other:"{0} hours ago"},future:{one:"in {0} hour",other:"in {0} hours"}},minute:{current:"this minute",past:{one:"{0} minute ago",other:"{0} minutes ago"},future:{one:"in {0} minute",other:"in {0} minutes"}},second:{current:"now",past:{one:"{0} second ago",other:"{0} seconds ago"},future:{one:"in {0} second",other:"in {0} seconds"}}},short:{year:{previous:"last yr.",current:"this yr.",next:"next yr.",past:"{0} yr. ago",future:"in {0} yr."},quarter:{previous:"last qtr.",current:"this qtr.",next:"next qtr.",past:{one:"{0} qtr. ago",other:"{0} qtrs. ago"},future:{one:"in {0} qtr.",other:"in {0} qtrs."}},month:{previous:"last mo.",current:"this mo.",next:"next mo.",past:"{0} mo. ago",future:"in {0} mo."},week:{previous:"last wk.",current:"this wk.",next:"next wk.",past:"{0} wk. ago",future:"in {0} wk."},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:"{0} hr. ago",future:"in {0} hr."},minute:{current:"this minute",past:"{0} min. ago",future:"in {0} min."},second:{current:"now",past:"{0} sec. ago",future:"in {0} sec."}},narrow:{year:{previous:"last yr.",current:"this yr.",next:"next yr.",past:"{0} yr. ago",future:"in {0} yr."},quarter:{previous:"last qtr.",current:"this qtr.",next:"next qtr.",past:{one:"{0} qtr. ago",other:"{0} qtrs. ago"},future:{one:"in {0} qtr.",other:"in {0} qtrs."}},month:{previous:"last mo.",current:"this mo.",next:"next mo.",past:"{0} mo. ago",future:"in {0} mo."},week:{previous:"last wk.",current:"this wk.",next:"next wk.",past:"{0} wk. ago",future:"in {0} wk."},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:"{0} hr. ago",future:"in {0} hr."},minute:{current:"this minute",past:"{0} min. ago",future:"in {0} min."},second:{current:"now",past:"{0} sec. ago",future:"in {0} sec."}},now:{now:{current:"now",future:"in a moment",past:"just now"}},mini:{year:"{0}yr",month:"{0}mo",week:"{0}wk",day:"{0}d",hour:"{0}h",minute:"{0}m",second:"{0}s",now:"now"},"short-time":{year:"{0} yr.",month:"{0} mo.",week:"{0} wk.",day:{one:"{0} day",other:"{0} days"},hour:"{0} hr.",minute:"{0} min.",second:"{0} sec."},"long-time":{year:{one:"{0} year",other:"{0} years"},month:{one:"{0} month",other:"{0} months"},week:{one:"{0} week",other:"{0} weeks"},day:{one:"{0} day",other:"{0} days"},hour:{one:"{0} hour",other:"{0} hours"},minute:{one:"{0} minute",other:"{0} minutes"},second:{one:"{0} second",other:"{0} seconds"}}},SX_ACC_CREATED=`<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12 6H18V8H12V6Z" fill="#F7F7F7"/>
<path d="M14 10L14 4L16 4L16 10L14 10Z" fill="#F7F7F7"/>
<circle cx="7" cy="5" r="2" stroke="#F7F7F7" stroke-width="2"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M1 15C1.47608 12.1623 3.94405 10 6.91704 10C9.89004 10 12.358 12.1623 12.8341 15H10.791C10.347 13.2748 8.78088 12 6.91704 12C5.0532 12 3.4871 13.2748 3.04306 15H1Z" fill="#F7F7F7"/>
</svg>
`,SX_ICON_LAUNCH=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M19 19H5V5h7V3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"/>
</svg>`,IncidentView_svelte_svelte_type_style_lang="";function get_each_context$1(e,t,n){const r=e.slice();return r[13]=t[n],r}function get_each_context_1(e,t,n){const r=e.slice();return r[19]=t[n],r}function create_if_block_6(e){let t,n,r,i={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block_2,then:create_then_block_2,catch:create_catch_block_2,value:18,blocks:[,,,]};return handle_promise(n=e[13].value,i),{c(){t=element("div"),i.block.c(),attr(t,"class","links")},m(o,a){insert(o,t,a),i.block.m(t,i.anchor=null),i.mount=()=>t,i.anchor=null,r=!0},p(o,a){e=o,i.ctx=e,a&4&&n!==(n=e[13].value)&&handle_promise(n,i)||update_await_block_branch(i,e,a)},i(o){r||(transition_in(i.block),r=!0)},o(o){for(let a=0;a<3;a+=1){const s=i.blocks[a];transition_out(s)}r=!1},d(o){o&&detach(t),i.block.d(),i.token=null,i=null}}}function create_if_block_4(e){let t,n,r,i,o;const a=[create_if_block_5,create_else_block_1],s=[];function c(l,u){return u&4&&(t=null),t==null&&(t=!!l[13].value?.startsWith("\u{1F512}1")),t?0:1}return n=c(e,-1),r=s[n]=a[n](e),{c(){r.c(),i=empty()},m(l,u){s[n].m(l,u),insert(l,i,u),o=!0},p(l,u){let f=n;n=c(l,u),n===f?s[n].p(l,u):(group_outros(),transition_out(s[f],1,1,()=>{s[f]=null}),check_outros(),r=s[n],r?r.p(l,u):(r=s[n]=a[n](l),r.c()),transition_in(r,1),r.m(i.parentNode,i))},i(l){o||(transition_in(r),o=!0)},o(l){transition_out(r),o=!1},d(l){s[n].d(l),l&&detach(i)}}}function create_if_block_1$1(e){let t,n;return t=new Field({props:{short:!0,key:e[13].key.toLowerCase(),name:e[13].key,$$slots:{default:[create_default_slot_1]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&4&&(o.key=r[13].key.toLowerCase()),i&4&&(o.name=r[13].key),i&4194308&&(o.$$scope={dirty:i,ctx:r}),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_catch_block_2(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block_2(e){let t,n=e[18],r=[];for(let i=0;i<n.length;i+=1)r[i]=create_each_block_1(get_each_context_1(e,n,i));return{c(){for(let i=0;i<r.length;i+=1)r[i].c();t=empty()},m(i,o){for(let a=0;a<r.length;a+=1)r[a].m(i,o);insert(i,t,o)},p(i,o){if(o&4){n=i[18];let a;for(a=0;a<n.length;a+=1){const s=get_each_context_1(i,n,a);r[a]?r[a].p(s,o):(r[a]=create_each_block_1(s),r[a].c(),r[a].m(t.parentNode,t))}for(;a<r.length;a+=1)r[a].d(1);r.length=n.length}},i:noop$1,o:noop$1,d(i){destroy_each(r,i),i&&detach(t)}}}function create_if_block_7(e){let t,n=e[19].icon+"";return{c(){t=element("span"),attr(t,"class","global_svg-icon icon-diameter_20px")},m(r,i){insert(r,t,i),t.innerHTML=n},p(r,i){i&4&&n!==(n=r[19].icon+"")&&(t.innerHTML=n)},d(r){r&&detach(t)}}}function create_each_block_1(e){let t,n,r,i=e[19].text+"",o,a,s,c=e[19].icon&&create_if_block_7(e);function l(){return e[7](e[19])}return{c(){t=element("span"),c&&c.c(),n=space(),r=element("span"),o=text(i),attr(r,"class","text"),attr(t,"class","link")},m(u,f){insert(u,t,f),c&&c.m(t,null),append(t,n),append(t,r),append(r,o),a||(s=listen(t,"click",l),a=!0)},p(u,f){e=u,e[19].icon?c?c.p(e,f):(c=create_if_block_7(e),c.c(),c.m(t,n)):c&&(c.d(1),c=null),f&4&&i!==(i=e[19].text+"")&&set_data(o,i)},d(u){u&&detach(t),c&&c.d(),a=!1,s()}}}function create_pending_block_2(e){let t,n;return t=new Load({props:{forever:!0}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p:noop$1,i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_else_block_1(e){let t,n;return t=new MemoReview({props:{memoPlaintext:e[13].value||""}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&4&&(o.memoPlaintext=r[13].value||""),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_if_block_5(e){let t,n,r,i={ctx:e,current:null,token:null,hasCatch:!0,pending:create_pending_block_1,then:create_then_block_1,catch:create_catch_block_1,value:17,blocks:[,,,]};return handle_promise(n=e[5](e[13].value),i),{c(){t=empty(),i.block.c()},m(o,a){insert(o,t,a),i.block.m(o,i.anchor=a),i.mount=()=>t.parentNode,i.anchor=t,r=!0},p(o,a){e=o,i.ctx=e,a&4&&n!==(n=e[5](e[13].value))&&handle_promise(n,i)||update_await_block_branch(i,e,a)},i(o){r||(transition_in(i.block),r=!0)},o(o){for(let a=0;a<3;a+=1){const s=i.blocks[a];transition_out(s)}r=!1},d(o){o&&detach(t),i.block.d(o),i.token=null,i=null}}}function create_catch_block_1(e){let t,n;return t=new MemoReview({props:{memoPlaintext:null,memoCiphertext:e[13].value}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&4&&(o.memoCiphertext=r[13].value),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_then_block_1(e){let t,n;return t=new MemoReview({props:{memoPlaintext:e[17],memoCiphertext:e[13].value}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&4&&(o.memoPlaintext=r[17]),i&4&&(o.memoCiphertext=r[13].value),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_pending_block_1(e){let t,n;return t=new Field({props:{key:"memo",name:"Memo",$$slots:{default:[create_default_slot_2]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&4194304&&(o.$$scope={dirty:i,ctx:r}),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_default_slot_2(e){let t,n;return t=new Load({props:{forever:!0}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p:noop$1,i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_catch_block$1(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$1(e){let t,n,r,i;const o=[create_if_block_3,create_else_block],a=[];function s(c,l){return c[13].render==="address"?0:1}return t=s(e),n=a[t]=o[t](e),{c(){n.c(),r=empty()},m(c,l){a[t].m(c,l),insert(c,r,l),i=!0},p(c,l){let u=t;t=s(c),t===u?a[t].p(c,l):(group_outros(),transition_out(a[u],1,1,()=>{a[u]=null}),check_outros(),n=a[t],n?n.p(c,l):(n=a[t]=o[t](c),n.c()),transition_in(n,1),n.m(r.parentNode,r))},i(c){i||(transition_in(n),i=!0)},o(c){transition_out(n),i=!1},d(c){a[t].d(c),c&&detach(r)}}}function create_else_block(e){let t=e[16]+"",n;return{c(){n=text(t)},m(r,i){insert(r,n,i)},p(r,i){i&4&&t!==(t=r[16]+"")&&set_data(n,t)},i:noop$1,o:noop$1,d(r){r&&detach(n)}}}function create_if_block_3(e){let t,n;return t=new Address({props:{address:e[16],copyable:!0}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&4&&(o.address=r[16]),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_pending_block$1(e){let t,n;return t=new Load({props:{forever:!0}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p:noop$1,i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_if_block_2$1(e){let t,n,r;return n=new Load({props:{input:e[13].subvalue}}),{c(){t=element("div"),create_component(n.$$.fragment),attr(t,"class","subvalue svelte-xhjy2y")},m(i,o){insert(i,t,o),mount_component(n,t,null),r=!0},p(i,o){const a={};o&4&&(a.input=i[13].subvalue),n.$set(a)},i(i){r||(transition_in(n.$$.fragment,i),r=!0)},o(i){transition_out(n.$$.fragment,i),r=!1},d(i){i&&detach(t),destroy_component(n)}}}function create_default_slot_1(e){let t,n,r,i,o={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block$1,then:create_then_block$1,catch:create_catch_block$1,value:16,blocks:[,,,]};handle_promise(t=e[13].value,o);let a=e[13].subvalue&&create_if_block_2$1(e);return{c(){o.block.c(),n=space(),a&&a.c(),r=empty()},m(s,c){o.block.m(s,o.anchor=c),o.mount=()=>n.parentNode,o.anchor=n,insert(s,n,c),a&&a.m(s,c),insert(s,r,c),i=!0},p(s,c){e=s,o.ctx=e,c&4&&t!==(t=e[13].value)&&handle_promise(t,o)||update_await_block_branch(o,e,c),e[13].subvalue?a?(a.p(e,c),c&4&&transition_in(a,1)):(a=create_if_block_2$1(e),a.c(),transition_in(a,1),a.m(r.parentNode,r)):a&&(group_outros(),transition_out(a,1,1,()=>{a=null}),check_outros())},i(s){i||(transition_in(o.block),transition_in(a),i=!0)},o(s){for(let c=0;c<3;c+=1){const l=o.blocks[c];transition_out(l)}transition_out(a),i=!1},d(s){o.block.d(s),o.token=null,o=null,s&&detach(n),a&&a.d(s),s&&detach(r)}}}function create_each_block$1(e){let t,n,r,i,o,a;const s=[create_if_block_1$1,create_if_block_4,create_if_block_6],c=[];function l(u,f){return u[13].type==="key_value"?0:u[13].type==="memo"?1:u[13].type==="links"?2:-1}return~(r=l(e))&&(i=c[r]=s[r](e)),{c(){t=element("hr"),n=space(),i&&i.c(),o=empty()},m(u,f){insert(u,t,f),insert(u,n,f),~r&&c[r].m(u,f),insert(u,o,f),a=!0},p(u,f){let d=r;r=l(u),r===d?~r&&c[r].p(u,f):(i&&(group_outros(),transition_out(c[d],1,1,()=>{c[d]=null}),check_outros()),~r?(i=c[r],i?i.p(u,f):(i=c[r]=s[r](u),i.c()),transition_in(i,1),i.m(o.parentNode,o)):i=null)},i(u){a||(transition_in(i),a=!0)},o(u){transition_out(i),a=!1},d(u){u&&detach(t),u&&detach(n),~r&&c[r].d(u),u&&detach(o)}}}function create_if_block$1(e){let t,n;return t=new ActionsLine({props:{confirm:["Done",e[4]]}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p:noop$1,i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_default_slot(e){let t,n,r,i,o;t=new Header({props:{pops:!e[3],title:e[1],subtitle:e[0]}});let a=e[2],s=[];for(let u=0;u<a.length;u+=1)s[u]=create_each_block$1(get_each_context$1(e,a,u));const c=u=>transition_out(s[u],1,1,()=>{s[u]=null});let l=e[3]&&create_if_block$1(e);return{c(){create_component(t.$$.fragment),n=space();for(let u=0;u<s.length;u+=1)s[u].c();r=space(),l&&l.c(),i=empty()},m(u,f){mount_component(t,u,f),insert(u,n,f);for(let d=0;d<s.length;d+=1)s[d].m(u,f);insert(u,r,f),l&&l.m(u,f),insert(u,i,f),o=!0},p(u,f){const d={};if(f&2&&(d.title=u[1]),f&1&&(d.subtitle=u[0]),t.$set(d),f&36){a=u[2];let g;for(g=0;g<a.length;g+=1){const _=get_each_context$1(u,a,g);s[g]?(s[g].p(_,f),transition_in(s[g],1)):(s[g]=create_each_block$1(_),s[g].c(),transition_in(s[g],1),s[g].m(r.parentNode,r))}for(group_outros(),g=a.length;g<s.length;g+=1)c(g);check_outros()}u[3]&&l.p(u,f)},i(u){if(!o){transition_in(t.$$.fragment,u);for(let f=0;f<a.length;f+=1)transition_in(s[f]);transition_in(l),o=!0}},o(u){transition_out(t.$$.fragment,u),s=s.filter(Boolean);for(let f=0;f<s.length;f+=1)transition_out(s[f]);transition_out(l),o=!1},d(u){destroy_component(t,u),u&&detach(n),destroy_each(s,u),u&&detach(r),l&&l.d(u),u&&detach(i)}}}function create_fragment$1(e){let t,n;return t=new Screen({props:{$$slots:{default:[create_default_slot]},$$scope:{ctx:e}}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,[i]){const o={};i&4194311&&(o.$$scope={dirty:i,ctx:r}),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function instance$1(e,t,n){const r=getContext("completed");function i(){r(!0)}let{incident:o}=t;const a=o;async function s(A,m){const y=R_TRANSFER_AMOUNT.exec(A);if(!y)syswarn({text:`Failed to parse transfer amount "${A}"`});else{const[,b,B]=y,v=await Chains.at(m);for(const[M,D]of ode(v.coins))if(B===D.denom){const I=new BigNumber(b).shiftedBy(-D.decimals).toNumber();return`${format_amount(I,!0)} ${M}`}}return A}const c=A=>[...typeof A.memo=="string"?[{type:"memo",value:A.memo}]:[],...A.hash&&[{type:"links",value:(async()=>{const m=await Chains.at(A.chain);return[{href:Chains.blockExplorer("transaction",{...A,chain_prefix:m.id.replace(/-.+$/,"")},m),icon:SX_ICON_LAUNCH,text:"Block explorer"}]})()}]],l={tx_out:(A,m)=>{if(A.stage==="confirmed"||A.stage==="synced"){const b=A.msgs[0].events;if(b.transfer){const B=b.transfer,[v,M,D]=parse_coin_amount(B.amount,m);return{s_title:`Sent ${M}`,a_fields:[{type:"key_value",key:"Status",value:"Confirmed"},{type:"key_value",key:"Sender",value:B.sender,render:"address"},{type:"key_value",key:"Recipient",value:B.recipient,render:"address"},{type:"key_value",key:"Amount",value:s(B.amount,A.chain)},{type:"key_value",key:"Fee",value:`${format_amount(new BigNumber(A.gas_wanted).shiftedBy(-D.decimals).toNumber())} ${M}`,subvalue:`${format_amount(+A.gas_wanted)} ${D.denom}`},...c(A)]}}}else{const b=A.msgs[0].events;if(b.transfer){const B=b.transfer,[v,M,D]=parse_coin_amount(B.amount,m);return{s_title:`Send ${M}`,a_fields:[{type:"key_value",key:"Status",value:"Confirmed"},{type:"key_value",key:"Sender",value:B.sender,render:"address"},{type:"key_value",key:"Recipient",value:B.recipient,render:"address"},{type:"key_value",key:"Amount",value:s(B.amount,A.chain)},{type:"key_value",key:"Fee",value:`${format_amount(new BigNumber(A.gas_wanted).shiftedBy(-D.decimals).toNumber())} ${M}`,subvalue:`${format_amount(+A.gas_wanted)} ${D.denom}`},...c(A)]}}}return{s_title:"Pending",a_fields:[]}},tx_in:(A,m)=>{const b=A.msgs[0].events;if(b.transfer){const B=b.transfer,[v,M,D]=parse_coin_amount(B.amount,m);return{s_title:`Received ${M}`,a_fields:[{type:"key_value",key:"Status",value:"Confirmed"},{type:"key_value",key:"Sender",value:B.sender,render:"address"},{type:"key_value",key:"Recipient",value:B.recipient,render:"address"},{type:"key_value",key:"Amount",value:s(B.amount,A.chain),subvalue:`${new BigNumber(""+v).shiftedBy(-D.decimals).toString()} ${M}`},...c(A)]}}return{s_title:"pending",a_fields:[]}},account_created:A=>({s_title:"Created Account",a_fields:[]})};let u,f="",d="",g=[];(async()=>{u=await Incidents.at(a),console.log({p_incident:a,g_incident:u}),n(0,f=format_time(u.time));const A=u.data,m=A.chain?await Chains.at(A.chain):null;n(1,{s_title:d,a_fields:g}=l[u.type](A,m),d,n(2,g))})();async function _(A){const{chain:m,height:y,msgs:[{events:{transfer:b}}],gas_wanted:B,signers:v}=u.data,M=v[0].sequence,{recipient:D,sender:I}=b,C=u.type==="tx_out",E=C?I:D,N=C?D:I,[,S]=await Accounts.find(E),k=await Chains.at(m),Q=await Networks.activateDefaultFor(k);let w;try{({pubkey:w}=await Q.e2eInfoFor(N))}catch(F){throw syserr({title:"Other Account Unpublished",error:F})}const T=await ecdhNonce(M,B),O=extractMemoCiphertext(A),P=await Q.ecdhDecrypt(w,O,T,k,S);return buffer_to_text(P).replace(/\0+$/,"")}const h=A=>open_external_link(A.href);return e.$$set=A=>{"incident"in A&&n(6,o=A.incident)},[f,d,g,r,i,_,o,h]}class IncidentView extends SvelteComponent{constructor(t){super(),init(this,t,instance$1,create_fragment$1,safe_not_equal,{incident:6})}}var TxnList_svelte_svelte_type_style_lang="";function get_each_context(e,t,n){const r=e.slice();return r[17]=t[n],r}const get_first_slot_changes=e=>({}),get_first_slot_context=e=>({});function create_catch_block(e){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block(e){let t,n;function r(){return e[6](e[17])}return t=new Row({props:{name:e[20].title,detail:e[20].subtitle,amount:e[20].amount||"",fiat:e[20].fiat||"",$$slots:{below:[create_below_slot],right:[create_right_slot],icon:[create_icon_slot]},$$scope:{ctx:e}}}),t.$on("click",r),{c(){create_component(t.$$.fragment)},m(i,o){mount_component(t,i,o),n=!0},p(i,o){e=i;const a={};o&1&&(a.name=e[20].title),o&1&&(a.detail=e[20].subtitle),o&1&&(a.amount=e[20].amount||""),o&1&&(a.fiat=e[20].fiat||""),o&129&&(a.$$scope={dirty:o,ctx:e}),t.$set(a)},i(i){n||(transition_in(t.$$.fragment,i),n=!0)},o(i){transition_out(t.$$.fragment,i),n=!1},d(i){destroy_component(t,i)}}}function create_icon_slot(e){let t,n;return t=new Put({props:{element:e[20].icon}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&1&&(o.element=r[20].icon),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_if_block_2(e){let t,n;return t=new PfpDisplay({props:{dim:36,name:e[20].name,ref:e[20].pfp,circular:e[17].type==="pending",rootStyle:"margin-left: 1em;"}}),{c(){create_component(t.$$.fragment)},m(r,i){mount_component(t,r,i),n=!0},p(r,i){const o={};i&1&&(o.name=r[20].name),i&1&&(o.ref=r[20].pfp),i&1&&(o.circular=r[17].type==="pending"),t.$set(o)},i(r){n||(transition_in(t.$$.fragment,r),n=!0)},o(r){transition_out(t.$$.fragment,r),n=!1},d(r){destroy_component(t,r)}}}function create_right_slot(e){let t,n,r=typeof e[20].pfp=="string"&&create_if_block_2(e);return{c(){r&&r.c(),t=empty()},m(i,o){r&&r.m(i,o),insert(i,t,o),n=!0},p(i,o){typeof i[20].pfp=="string"?r?(r.p(i,o),o&1&&transition_in(r,1)):(r=create_if_block_2(i),r.c(),transition_in(r,1),r.m(t.parentNode,t)):r&&(group_outros(),transition_out(r,1,1,()=>{r=null}),check_outros())},i(i){n||(transition_in(r),n=!0)},o(i){transition_out(r),n=!1},d(i){r&&r.d(i),i&&detach(t)}}}function create_if_block_1(e){let t;return{c(){t=element("span"),t.textContent="Pending",attr(t,"class","pill svelte-krovk1"),toggle_class(t,"display_none",!e[20].pending)},m(n,r){insert(n,t,r)},p(n,r){r&5&&toggle_class(t,"display_none",!n[20].pending)},d(n){n&&detach(t)}}}function create_if_block(e){let t,n,r=e[20].link.text+"",i,o,a,s;function c(){return e[5](e[20])}return{c(){t=element("span"),n=element("a"),i=text(r),attr(n,"href",o=e[20].link.href),attr(t,"class","link")},m(l,u){insert(l,t,u),append(t,n),append(n,i),a||(s=listen(n,"click",c),a=!0)},p(l,u){e=l,u&1&&r!==(r=e[20].link.text+"")&&set_data(i,r),u&1&&o!==(o=e[20].link.href)&&attr(n,"href",o)},d(l){l&&detach(t),a=!1,s()}}}function create_below_slot(e){let t,n,r=e[20].pending&&create_if_block_1(e),i=e[20].link&&create_if_block(e);return{c(){r&&r.c(),t=space(),i&&i.c(),n=empty()},m(o,a){r&&r.m(o,a),insert(o,t,a),i&&i.m(o,a),insert(o,n,a)},p(o,a){o[20].pending?r?r.p(o,a):(r=create_if_block_1(o),r.c(),r.m(t.parentNode,t)):r&&(r.d(1),r=null),o[20].link?i?i.p(o,a):(i=create_if_block(o),i.c(),i.m(n.parentNode,n)):i&&(i.d(1),i=null)},d(o){r&&r.d(o),o&&detach(t),i&&i.d(o),o&&detach(n)}}}function create_pending_block(e){let t;return{c(){t=text("Loading event...")},m(n,r){insert(n,t,r)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_each_block(e){let t,n,r,i={ctx:e,current:null,token:null,hasCatch:!1,pending:create_pending_block,then:create_then_block,catch:create_catch_block,value:20,blocks:[,,,]};return handle_promise(t=e[2](e[17]),i),{c(){i.block.c(),n=space()},m(o,a){i.block.m(o,i.anchor=a),i.mount=()=>n.parentNode,i.anchor=n,insert(o,n,a),r=!0},p(o,a){e=o,i.ctx=e,a&1&&t!==(t=e[2](e[17]))&&handle_promise(t,i)||update_await_block_branch(i,e,a)},i(o){r||(transition_in(i.block),r=!0)},o(o){for(let a=0;a<3;a+=1){const s=i.blocks[a];transition_out(s)}r=!1},d(o){i.block.d(o),i.token=null,i=null,o&&detach(n)}}}function create_fragment(e){let t,n,r;const i=e[4].first,o=create_slot(i,e,e[7],get_first_slot_context);let a=e[0],s=[];for(let l=0;l<a.length;l+=1)s[l]=create_each_block(get_each_context(e,a,l));const c=l=>transition_out(s[l],1,1,()=>{s[l]=null});return{c(){t=element("div"),o&&o.c(),n=space();for(let l=0;l<s.length;l+=1)s[l].c();attr(t,"class","txns no-margin")},m(l,u){insert(l,t,u),o&&o.m(t,null),append(t,n);for(let f=0;f<s.length;f+=1)s[f].m(t,null);r=!0},p(l,[u]){if(o&&o.p&&(!r||u&128)&&update_slot_base(o,i,l,l[7],r?get_slot_changes(i,l[7],u,get_first_slot_changes):get_all_dirty_from_scope(l[7]),get_first_slot_context),u&7){a=l[0];let f;for(f=0;f<a.length;f+=1){const d=get_each_context(l,a,f);s[f]?(s[f].p(d,u),transition_in(s[f],1)):(s[f]=create_each_block(d),s[f].c(),transition_in(s[f],1),s[f].m(t,null))}for(group_outros(),f=a.length;f<s.length;f+=1)c(f);check_outros()}},i(l){if(!r){transition_in(o,l);for(let u=0;u<a.length;u+=1)transition_in(s[u]);r=!0}},o(l){transition_out(o,l),s=s.filter(Boolean);for(let u=0;u<s.length;u+=1)transition_out(s[u]);r=!1},d(l){l&&detach(t),o&&o.d(l),destroy_each(s,l)}}}var TxnContext;(function(e){e.NONE="none",e.TOKEN="token",e.CONTACT="contact"})(TxnContext||(TxnContext={}));function instance(e,t,n){let{$$slots:r={},$$scope:i}=t,{incidents:o}=t,{context:a=TxnContext.NONE}=t;TxnContext.CONTACT,TxnContext.TOKEN;const s=getContext("page"),c=h=>{const A=dd("span",{class:"event-icon"});return A.innerHTML=h,A};c(SX_SEND),c(SX_RECV),c(SX_ACC_CREATED),TimeAgo.addDefaultLocale(english_locale);const l=new TimeAgo("en-US");function u(h){return l.format(h,"twitter")}const f={async tx_out(h){const{time:A,data:m,data:{chain:y,stage:b,hash:B}}=h,v=await Chains.at(y);if(b==="confirmed"||b==="synced"){const{msgs:I,code:C}=m;if(I.length===1){const{events:E}=I[0];if(E.transfer){const N=E.transfer,[S,k,Q]=parse_coin_amount(N.amount,v),w=new BigNumber(S+"").shiftedBy(-Q.decimals).toNumber(),T=N.recipient,O=Agents.pathForContact(T),P=await Agents.getContact(O);return{title:`Sent ${Q.name}`,name:k,icon:c(SX_SEND),subtitle:`${u(A)} / ${P?P.name:abbreviate_addr(T)}`,amount:`${format_amount(w,!0)} ${k}`,pfp:Q.pfp}}}}return{title:"Outgoing Transaction",name:"",icon:c(SX_SEND)}},async tx_in(h){const{time:A,data:m,data:{chain:y,stage:b,hash:B,msgs:v,code:M}}=h,D=await Chains.at(y);if(v.length===1){const{events:I}=v[0];if(I.transfer){const C=I.transfer,[E,N,S]=parse_coin_amount(C.amount,D),k=new BigNumber(E+"").shiftedBy(-S.decimals).toNumber(),Q=C.sender,w=Agents.pathForContact(Q),T=await Agents.getContact(w);return{title:`Received ${S.name}`,name:N,icon:c(SX_RECV),subtitle:`${u(A)} / ${T?T.name:abbreviate_addr(Q)}`,amount:`${format_amount(k,!0)} ${N}`,pfp:S.pfp}}}return{title:"Incoming Transaction",name:"",icon:c(SX_RECV)}},async account_created(h){const{time:A,data:{account:m}}=h,y=await Accounts.at(m);return{title:"Account created",subtitle:`${u(A)} / ${y.name}`,name:y.name,icon:c(SX_ACC_CREATED),pfp:y.pfp||""}}};async function d(h){return await f[h.type](h)}const g=h=>open_external_link(h.link.href),_=h=>{s.push({creator:IncidentView,props:{incident:Incidents.pathFrom(h)}})};return e.$$set=h=>{"incidents"in h&&n(0,o=h.incidents),"context"in h&&n(3,a=h.context),"$$scope"in h&&n(7,i=h.$$scope)},[o,s,d,a,r,g,_,i]}class TxnList extends SvelteComponent{constructor(t){super(),init(this,t,instance,create_fragment,safe_not_equal,{incidents:0,context:3})}}function writableSync(e){const t=writable(e);return Object.assign(Object.create(t),{set(n){return e=n,t.set(n)},get(){return e}})}function derivedSync(e,t){if(Array.isArray(e))return Object.assign(Object.create(derived(e,t)),{get(){return t(...e)}});{let n;const r=derived(e,(i,o)=>{t(i,a=>{n=a,o(a)})});return Object.assign(Object.create(r),{get(){return n}})}}const yw_navigator=writableSync(null),yw_chain_ref=writableSync(""),yw_chain=derivedSync(yw_chain_ref,(e,t)=>{Chains.read().then(n=>t(n.at(e))).catch(n=>{t(null)}),Networks.read().then(n=>n.entries().some(([r,i])=>e===i.chain?(yw_network_ref.set(r),!0):!1)).catch(n=>{yw_network_ref.set("")})}),yw_network_ref=writableSync(""),yw_network=writableSync(null),yw_network_active=derivedSync(yw_network_ref,(e,t)=>{e?(async()=>{const r=(await Networks.read()).at(e);yw_network.set(r),r.chain!==yw_chain_ref.get()&&yw_chain_ref.set(r.chain);const o=(await Chains.read()).at(r.chain);t(Networks.activate(r,o))})():(yw_network.set(null),t(null))}),yw_family=writableSync("");yw_chain.subscribe(e=>yw_family.set(e?.family||""));const yw_account_ref=writableSync(""),yw_account=derivedSync(yw_account_ref,(e,t)=>{Accounts.read().then(n=>t(n.at(e))).catch(n=>{t(null)})}),yw_owner=derived([yw_account,yw_chain],([e,t],n)=>{n(Chains.addressFor(e.pubkey,t))}),yw_menu_vendor=writableSync(!1),yw_overlay_account=writableSync(!1),yw_overlay_network=writableSync(!1),store_cache=e=>writableSync(null);async function reload(e){switch(e){case SI_STORE_MEDIA:{const t=await Medias.read();yw_store_medias.update(()=>t);break}case SI_STORE_TAGS:{const t=await Tags.read();yw_store_tags.update(()=>t)}}}const yw_store_medias=store_cache(),yw_store_tags=store_cache();global_receive({updateStore({key:e}){reload(e)}});async function initialize_caches(){await Promise.all([reload(SI_STORE_MEDIA),reload(SI_STORE_TAGS)])}const yw_page=writableSync(null),yw_thread=writableSync(null),yw_path=writableSync("");derivedSync(yw_path,e=>`s2r://root/${e}`);writableSync("");const yw_notifications=writableSync([]),yw_nav_collapsed=writable(!1),yw_nav_visible=writableSync(!1),yw_progress=writableSync([0,0]),yw_search=writable(""),yw_cancel_search=writableSync(F_NOOP);writableSync(null);writableSync(0);writableSync([]);const yw_header_props=writableSync({});writableSync(null);const yw_menu_expanded=writableSync(!1),yw_overscroll_pct=writableSync(0),yw_context_popup=writableSync(null),yw_popup=writableSync(null);function popup_receive(e){yw_context_popup.set({account:e}),yw_popup.set(PopupReceive)}const yw_blur=writableSync(!1);once_store_updates(yw_navigator).then(()=>{const e=document.documentElement.style;window.addEventListener("resize",()=>{e.setProperty("--app-window-width",`${window.innerWidth}px`),e.setProperty("--app-window-height",`${window.innerHeight}px`)}),window.dispatchEvent(new Event("resize")),window.addEventListener("keydown",t=>{t.key==="Escape"&&yw_popup.get()&&yw_popup.set(null)})});const $_EXISTING=Symbol("use-existing-cache"),H_REGISTRY={[P_PUBLIC_SUFFIX_LIST]:{format:"text",parse(e){if(!e)return $_EXISTING;const t=[];for(let n of e.split(/\n/g))n=n.replace(/\s+|\/\/.*$/,""),n&&t.push(n);return t}},[P_STARSHELL_DECREES]:{format:"json",filter(e){return e.filter(t=>!0)}}};async function cache_put(e,t){return await browser.storage.local.set({[`@cache:${e}`]:t})}async function cache_get(e){return await storage_get(`@cache:${e}`)}class WebResourceCache{static async updateAll(){for(const t in H_REGISTRY){const n=H_REGISTRY[t],r=await fetch(t);switch(n.format){case"text":{const i=await r.text(),o=n.parse(i);if($_EXISTING===o)continue;await cache_put(t,{etag:r.headers.get("etag")??"",data:i});break}case"json":{let i=await r.json();"filter"in n&&(i=n.filter(i)),await cache_put(t,{etag:r.headers.get("etag")??"",data:i});break}}}}static async get(t){return(await cache_get(t))?.data||null}}export{acceptable as $,ActionsLine as A,SI_VERSION as B,CheckboxField as C,StarShellLogo as D,open_external_link as E,qs as F,global_receive as G,Header as H,Incidents as I,initialize_caches as J,yw_navigator as K,ode as L,register as M,login as N,F_NOOP as O,P_STARSHELL_DECREES as P,set_style as Q,toggle_class as R,SvelteComponent as S,append as T,destroy_each as U,Vault as V,WebResourceCache as W,XT_SECONDS as X,set_data as Y,src_url_equal as Z,getContext as _,Screen as a,UnpublishedAccountError as a$,Field as a0,NL_PASSPHRASE_MINIMUM as a1,NL_PASSPHRASE_MAXIMUM as a2,ATU8_DUMMY_PHRASE as a3,ATU8_DUMMY_VECTOR as a4,AlreadyRegisteredError as a5,InvalidPassphraseError as a6,empty as a7,set_input_value as a8,listen as a9,Select as aA,yw_network_ref as aB,text_to_buffer as aC,NB_MAX_MEMO as aD,syserr as aE,ecdhNonce as aF,compileMemoPlaintext as aG,base93_to_buffer as aH,buffer_to_text as aI,MemoReview as aJ,format_fiat as aK,createEventDispatcher as aL,Settings as aM,create_slot as aN,update_slot_base as aO,get_all_dirty_from_scope as aP,get_slot_changes as aQ,Close as aR,Row as aS,compute_rest_props as aT,assign as aU,exclude_internal_props as aV,bubble as aW,set_attributes as aX,get_spread_update as aY,yw_account as aZ,Networks as a_,group_outros as aa,check_outros as ab,run_all as ac,add_render_callback as ad,create_bidirectional_transition as ae,slide as af,handle_promise as ag,update_await_block_branch as ah,yw_owner as ai,yw_chain as aj,load_pfps as ak,Entities as al,StarSelect as am,yw_network_active as an,BigNumber as ao,XT_MINUTES as ap,CoinGecko as aq,format_amount as ar,oderac as as,yw_family as at,subscribe_store as au,onDestroy as av,Agents as aw,Chains as ax,Address as ay,PfpDisplay as az,transition_out as b,R_DOMAIN_LOCALHOST as b$,yw_chain_ref as b0,SX_ICON_DROPDOWN as b1,fold as b2,string8_to_buffer as b3,create_in_transition as b4,create_out_transition as b5,Portrait as b6,coin_formats as b7,oderom as b8,popup_receive as b9,yw_overlay_account as bA,yw_overlay_network as bB,yw_blur as bC,yw_notifications as bD,yw_nav_collapsed as bE,yw_nav_visible as bF,HtmlTag as bG,yw_search as bH,yw_header_props as bI,get_spread_object as bJ,yw_progress as bK,SX_ICON_CLOSE as bL,logout as bM,yw_network as bN,yw_menu_vendor as bO,on_error as bP,dd as bQ,objects_might_differ as bR,getAllContexts as bS,onMount as bT,tick as bU,once_store_updates as bV,timeout as bW,UnregisteredError as bX,RecoverableVaultError as bY,CorruptedVaultError as bZ,P_PUBLIC_SUFFIX_LIST as b_,as_amount as ba,forever as bb,to_fiat as bc,Info as bd,SubHeader as be,Pfps as bf,ofe as bg,ContactAgentType as bh,R_BECH32 as bi,InlineTags as bj,proper as bk,SX_ICON_EDIT$1 as bl,SX_ICON_DELETE as bm,quintOut as bn,Tabs as bo,TabList as bp,TabPanel as bq,Tab as br,Apps as bs,TxnList as bt,svg_element as bu,yw_overscroll_pct as bv,yw_popup as bw,yw_thread as bx,yw_page as by,yw_menu_expanded as bz,create_component as c,R_DOMAIN_IP as c0,session_storage_remove as c1,IncidentView as c2,create_store_class as c3,SI_STORE_APP_POLICIES as c4,WritableStore as c5,session_storage_get as c6,global_broadcast as c7,fold_attrs as c8,R_TRANSFER_AMOUNT as c9,syswarn as ca,abbreviate_addr as cb,BroadcastMode as cc,destroy_component as d,component_subscribe as e,binding_callbacks as f,bind as g,space as h,init as i,element as j,insert as k,add_flush_callback as l,mount_component as m,detach as n,Secp256k1Key as o,Secrets as p,buffer_to_string8 as q,buffer_to_base64 as r,safe_not_equal as s,transition_in as t,set_store_value as u,Accounts as v,text as w,attr as x,yw_account_ref as y,noop$1 as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
