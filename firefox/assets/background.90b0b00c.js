import{c3 as je,c4 as Ke,c5 as Ge,c6 as Xe,X as Ve,c1 as Je,W as Qe,V as ve,v as Te,ax as _e,a_ as ue,L as $e,c7 as Ne,aE as Ae,G as Ye,ap as Ze,c8 as et,c9 as tt,ca as rt,ao as nt,ar as ot,aw as Be,cb as st,I as fe,bs as it,cc as at,b$ as ct,aM as ft}from"./web-resource-cache.fb3e84c9.js";import"./index.5cb01ff5.js";function lt({session:r}){const n=function(){var a=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},$={exports:{}};function k(Z){throw new Error('Could not dynamically require "'+Z+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var N={exports:{}},U;function W(){return U||(U=1,function(Z,oe){(function(M,b){Z.exports=b()})(a,function(){var M=M||function(b,E){var B;if(typeof window<"u"&&window.crypto&&(B=window.crypto),typeof self<"u"&&self.crypto&&(B=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(B=globalThis.crypto),!B&&typeof window<"u"&&window.msCrypto&&(B=window.msCrypto),!B&&typeof a<"u"&&a.crypto&&(B=a.crypto),!B&&typeof k=="function")try{B=require("crypto")}catch{}var ee=function(){if(B){if(typeof B.getRandomValues=="function")try{return B.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof B.randomBytes=="function")try{return B.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},O=Object.create||function(){function e(){}return function(o){var y;return e.prototype=o,y=new e,e.prototype=null,y}}(),q={},l=q.lib={},h=l.Base=function(){return{extend:function(e){var o=O(this);return e&&o.mixIn(e),(!o.hasOwnProperty("init")||this.init===o.init)&&(o.init=function(){o.$super.init.apply(this,arguments)}),o.init.prototype=o,o.$super=this,o},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var o in e)e.hasOwnProperty(o)&&(this[o]=e[o]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),C=l.WordArray=h.extend({init:function(e,o){e=this.words=e||[],o!=E?this.sigBytes=o:this.sigBytes=e.length*4},toString:function(e){return(e||s).stringify(this)},concat:function(e){var o=this.words,y=e.words,S=this.sigBytes,L=e.sigBytes;if(this.clamp(),S%4)for(var K=0;K<L;K++){var J=y[K>>>2]>>>24-K%4*8&255;o[S+K>>>2]|=J<<24-(S+K)%4*8}else for(var Q=0;Q<L;Q+=4)o[S+Q>>>2]=y[Q>>>2];return this.sigBytes+=L,this},clamp:function(){var e=this.words,o=this.sigBytes;e[o>>>2]&=4294967295<<32-o%4*8,e.length=b.ceil(o/4)},clone:function(){var e=h.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var o=[],y=0;y<e;y+=4)o.push(ee());return new C.init(o,e)}}),t=q.enc={},s=t.Hex={stringify:function(e){for(var o=e.words,y=e.sigBytes,S=[],L=0;L<y;L++){var K=o[L>>>2]>>>24-L%4*8&255;S.push((K>>>4).toString(16)),S.push((K&15).toString(16))}return S.join("")},parse:function(e){for(var o=e.length,y=[],S=0;S<o;S+=2)y[S>>>3]|=parseInt(e.substr(S,2),16)<<24-S%8*4;return new C.init(y,o/2)}},u=t.Latin1={stringify:function(e){for(var o=e.words,y=e.sigBytes,S=[],L=0;L<y;L++){var K=o[L>>>2]>>>24-L%4*8&255;S.push(String.fromCharCode(K))}return S.join("")},parse:function(e){for(var o=e.length,y=[],S=0;S<o;S++)y[S>>>2]|=(e.charCodeAt(S)&255)<<24-S%4*8;return new C.init(y,o)}},i=t.Utf8={stringify:function(e){try{return decodeURIComponent(escape(u.stringify(e)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(e){return u.parse(unescape(encodeURIComponent(e)))}},_=l.BufferedBlockAlgorithm=h.extend({reset:function(){this._data=new C.init,this._nDataBytes=0},_append:function(e){typeof e=="string"&&(e=i.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(e){var o,y=this._data,S=y.words,L=y.sigBytes,K=this.blockSize,J=K*4,Q=L/J;e?Q=b.ceil(Q):Q=b.max((Q|0)-this._minBufferSize,0);var ae=Q*K,se=b.min(ae*4,L);if(ae){for(var ce=0;ce<ae;ce+=K)this._doProcessBlock(S,ce);o=S.splice(0,ae),y.sigBytes-=se}return new C.init(o,se)},clone:function(){var e=h.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0});l.Hasher=_.extend({cfg:h.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){_.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){e&&this._append(e);var o=this._doFinalize();return o},blockSize:16,_createHelper:function(e){return function(o,y){return new e.init(y).finalize(o)}},_createHmacHelper:function(e){return function(o,y){return new x.HMAC.init(e,y).finalize(o)}}});var x=q.algo={};return q}(Math);return M})}(N)),N.exports}var ne={exports:{}},X;function te(){return X||(X=1,function(Z,oe){(function(M,b){Z.exports=b(W())})(a,function(M){return function(b){var E=M,B=E.lib,ee=B.WordArray,O=B.Hasher,q=E.algo,l=[],h=[];(function(){function s(x){for(var e=b.sqrt(x),o=2;o<=e;o++)if(!(x%o))return!1;return!0}function u(x){return(x-(x|0))*4294967296|0}for(var i=2,_=0;_<64;)s(i)&&(_<8&&(l[_]=u(b.pow(i,.5))),h[_]=u(b.pow(i,.3333333333333333)),_++),i++})();var C=[],t=q.SHA256=O.extend({_doReset:function(){this._hash=new ee.init(l.slice(0))},_doProcessBlock:function(s,u){for(var i=this._hash.words,_=i[0],x=i[1],e=i[2],o=i[3],y=i[4],S=i[5],L=i[6],K=i[7],J=0;J<64;J++){if(J<16)C[J]=s[u+J]|0;else{var Q=C[J-15],ae=(Q<<25|Q>>>7)^(Q<<14|Q>>>18)^Q>>>3,se=C[J-2],ce=(se<<15|se>>>17)^(se<<13|se>>>19)^se>>>10;C[J]=ae+C[J-7]+ce+C[J-16]}var We=y&S^~y&L,ze=_&x^_&e^x&e,De=(_<<30|_>>>2)^(_<<19|_>>>13)^(_<<10|_>>>22),Me=(y<<26|y>>>6)^(y<<21|y>>>11)^(y<<7|y>>>25),Se=K+Me+We+h[J]+C[J],Fe=De+ze;K=L,L=S,S=y,y=o+Se|0,o=e,e=x,x=_,_=Se+Fe|0}i[0]=i[0]+_|0,i[1]=i[1]+x|0,i[2]=i[2]+e|0,i[3]=i[3]+o|0,i[4]=i[4]+y|0,i[5]=i[5]+S|0,i[6]=i[6]+L|0,i[7]=i[7]+K|0},_doFinalize:function(){var s=this._data,u=s.words,i=this._nDataBytes*8,_=s.sigBytes*8;return u[_>>>5]|=128<<24-_%32,u[(_+64>>>9<<4)+14]=b.floor(i/4294967296),u[(_+64>>>9<<4)+15]=i,s.sigBytes=u.length*4,this._process(),this._hash},clone:function(){var s=O.clone.call(this);return s._hash=this._hash.clone(),s}});E.SHA256=O._createHelper(t),E.HmacSHA256=O._createHmacHelper(t)}(Math),M.SHA256})}(ne)),ne.exports}var v={exports:{}},P;function re(){return P||(P=1,function(Z,oe){(function(M,b){Z.exports=b(W())})(a,function(M){(function(){var b=M,E=b.lib,B=E.Base,ee=b.enc,O=ee.Utf8,q=b.algo;q.HMAC=B.extend({init:function(l,h){l=this._hasher=new l.init,typeof h=="string"&&(h=O.parse(h));var C=l.blockSize,t=C*4;h.sigBytes>t&&(h=l.finalize(h)),h.clamp();for(var s=this._oKey=h.clone(),u=this._iKey=h.clone(),i=s.words,_=u.words,x=0;x<C;x++)i[x]^=1549556828,_[x]^=909522486;s.sigBytes=u.sigBytes=t,this.reset()},reset:function(){var l=this._hasher;l.reset(),l.update(this._iKey)},update:function(l){return this._hasher.update(l),this},finalize:function(l){var h=this._hasher,C=h.finalize(l);h.reset();var t=h.finalize(this._oKey.clone().concat(C));return t}})})()})}(v)),v.exports}(function(Z,oe){(function(M,b,E){Z.exports=b(W(),te(),re())})(a,function(M){return M.HmacSHA256})})($);var z=$.exports;return z}(),{A_CHAIN_CATEGORIES:c,A_CHAIN_FAMILIES:f,R_CHAIN_ID:p,R_CHAIN_NAME:d}=function(a){const U=["cosmos"],W=["mainnet","testnet"],ne=/^[a-z0-9][a-z0-9-]{2,64}$/,X=/^[\p{L}\p{S}](\p{Zs}?[\p{L}\p{N}\p{S}._:/-])+$/u;return a.A_CHAIN_CATEGORIES=W,a.A_CHAIN_FAMILIES=U,a.NB_MAX_MESSAGE=2097152,a.N_PX_HEIGHT_POPUP=600,a.N_PX_WIDTH_POPUP=360,a.R_CHAIN_ID=ne,a.R_CHAIN_NAME=X,Object.defineProperty(a,"__esModule",{value:!0}),a}({}),{locate_script:m}=function(a){function $(k){const N=browser.runtime.getManifest();for(const U of N.content_scripts||[])for(const W of U.js??[])if(W.startsWith(k))return W;for(const U of N.web_accessible_resources||[])if(typeof U=="string"){if(U.startsWith(k))return U}else for(const W of U.resources)if(W.startsWith(k))return W;return null}return a.locate_script=$,Object.defineProperty(a,"__esModule",{value:!0}),a}({}),A=browser.runtime,R=(a,...$)=>console.debug(`StarShell.ics-host: ${a}`,...$);R(`Launched on <${location.href}>`);class I extends Error{}let g,T=!1,D=!1;function V(a){throw D=!0,A.sendMessage({type:"panic",value:""+a}),new I(`StarShell threw a security error: "${a}"`)}function w(){if(D)throw new Error("StarShell withdrew wallet access from this website due to a security violation")}const F={async requestConnect(a){const{index:$,manifest:k}=a,N=te=>{g.postMessage({type:"respondConnect",value:{index:$,answer:{error:te}}})};if(typeof k!="object"||typeof k.schema!="string")return N("Invalid manifest structure");if(k.schema!=="1")return N("Unknown or unsupported manifest schema version");if(!Array.isArray(k.chains)||!k.chains.length)return N("No chains were specified in request");const{chains:U}=k,W=new Set,ne=[];for(let te=0;te<U.length;te++){const v=U[te],P=Z=>N(`${Z} at .chains[${te}]`);if(typeof v!="object"||typeof v.category!="string"||typeof v.family!="string"||typeof v.id!="string")return P("Invalid chain descriptor structure");if(!f.includes(v.family))continue;if(!c.includes(v.category))return P(`Invalid category value "${v.category}"; must be one of (${c.join(", ")})`);if(!p.test(v.id))return P(`Invalid chain id "${v.id}" for ${v.family} family; failed to match regular expression /${p.source}/`);if(v.name){if(!d.test(v.name))return P(`Invalid chain name "${v.name}"; failed to match regular expression /${d.source}/`);if(v.name.length>64)return P("Chain name too long")}const re=v.family+`
`+v.id;if(W.has(re))return P(`Duplicate chain IDs in '${v.family}' family: '${v.id}'`);const z=v.name||v.id;ne.push({...v,label:z})}A.sendMessage({type:"requestConnection",value:{chains:ne}});const X=[];X.push(null);for(const te of U){const v=new MessageChannel;await HostConnection.create(te,v.port1),X.push(v.port2)}g.postMessage({type:"respondConnect",value:{index:$,answer:{config:{features:a_features}}}},X)},reportWebsiteError(a){}};function G(a){const{type:$,value:k}=a.data,N=F[$];if(!N){console.error(`Received relay port message having an unregistered type "${$}"`);return}R("Received relay port message having registered type %o",a.data),N(k)}const H={establishChannel(a,$){if(w(),T)return V("Relay frame attempted to establish connection more than once");if(T=!0,!Y)return V("Reference to relay frame window not defined");if(!$||$.length!==1)return V("Expected exactly one MessagePort but none were transfered from relay frame");g=$[0],g.onmessage=G,g.postMessage({type:"acknowledgeChannel"}),window.postMessage({type:"ratifyGlobal"},window.origin)}};let Y,j;{const a={session:r,csurl:browser.runtime.getURL("assets/src/script/mcs-relay.js")},$=document.createElement("script");$.setAttribute("type","application/json"),$.setAttribute("id","starshell-mcs-relay-payload"),$.textContent=JSON.stringify(a);const k=document.createElement("script"),N=m("assets/src/script/mcs-relay");if(!N)throw new Error("Unable to locate relay script!");k.src=browser.runtime.getURL(N),k.type="module";const U=document.createElement("iframe"),W=document.createElement("div");W.style.display="none !important",W.attachShadow({mode:"closed"}).append(U);try{document.head.append(W)}catch{document.body.append(W)}Y=U.contentWindow,j=U.contentDocument,j.body.append($),j.body.append(k),R("Injected relay iframe")}Y.addEventListener("message",a=>{if(R("Observed relay window message %o",a),!a.isTrusted){console.warn("Ignored untrusted event %o",a);return}if(a.source!==a.target){console.warn("Ignored cross-window message %o",a);return}const $=a.target;if(window.origin!==a.origin||window!==$.parent||$.location.href!=="about:blank"){console.warn("Ignored message from 3rd party %o",a);return}const k=a.data;if(typeof k!="object"||typeof k.type!="string"){R("Ignored invalid message data %o",k);return}const{type:N,auth:U}=k,W=H[N];if(!W){console.error(`Received message having an unregistered type "${N}"`);return}if(typeof U!="string"){R("Ignored message missing auth data %o",k);return}if(JSON.stringify(n(JSON.stringify({...k,auth:void 0}),r))!==k.auth)return V("Relay frame sent invalid auth signature");R("Received message having registered type %o",a.data),W(null,a.ports)})}function ut({session:r}){const n=(w,...F)=>console.debug(`StarShell.mcs-ratifier: ${w}`,...F);n(`Launched on <${location.href}>`);const c=function(){var w=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},F={exports:{}};function G(X){throw new Error('Could not dynamically require "'+X+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var H={exports:{}},Y;function j(){return Y||(Y=1,function(X,te){(function(v,P){X.exports=P()})(w,function(){var v=v||function(P,re){var z;if(typeof window<"u"&&window.crypto&&(z=window.crypto),typeof self<"u"&&self.crypto&&(z=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(z=globalThis.crypto),!z&&typeof window<"u"&&window.msCrypto&&(z=window.msCrypto),!z&&typeof w<"u"&&w.crypto&&(z=w.crypto),!z&&typeof G=="function")try{z=require("crypto")}catch{}var Z=function(){if(z){if(typeof z.getRandomValues=="function")try{return z.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof z.randomBytes=="function")try{return z.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},oe=Object.create||function(){function t(){}return function(s){var u;return t.prototype=s,u=new t,t.prototype=null,u}}(),M={},b=M.lib={},E=b.Base=function(){return{extend:function(t){var s=oe(this);return t&&s.mixIn(t),(!s.hasOwnProperty("init")||this.init===s.init)&&(s.init=function(){s.$super.init.apply(this,arguments)}),s.init.prototype=s,s.$super=this,s},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var s in t)t.hasOwnProperty(s)&&(this[s]=t[s]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),B=b.WordArray=E.extend({init:function(t,s){t=this.words=t||[],s!=re?this.sigBytes=s:this.sigBytes=t.length*4},toString:function(t){return(t||O).stringify(this)},concat:function(t){var s=this.words,u=t.words,i=this.sigBytes,_=t.sigBytes;if(this.clamp(),i%4)for(var x=0;x<_;x++){var e=u[x>>>2]>>>24-x%4*8&255;s[i+x>>>2]|=e<<24-(i+x)%4*8}else for(var o=0;o<_;o+=4)s[i+o>>>2]=u[o>>>2];return this.sigBytes+=_,this},clamp:function(){var t=this.words,s=this.sigBytes;t[s>>>2]&=4294967295<<32-s%4*8,t.length=P.ceil(s/4)},clone:function(){var t=E.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var s=[],u=0;u<t;u+=4)s.push(Z());return new B.init(s,t)}}),ee=M.enc={},O=ee.Hex={stringify:function(t){for(var s=t.words,u=t.sigBytes,i=[],_=0;_<u;_++){var x=s[_>>>2]>>>24-_%4*8&255;i.push((x>>>4).toString(16)),i.push((x&15).toString(16))}return i.join("")},parse:function(t){for(var s=t.length,u=[],i=0;i<s;i+=2)u[i>>>3]|=parseInt(t.substr(i,2),16)<<24-i%8*4;return new B.init(u,s/2)}},q=ee.Latin1={stringify:function(t){for(var s=t.words,u=t.sigBytes,i=[],_=0;_<u;_++){var x=s[_>>>2]>>>24-_%4*8&255;i.push(String.fromCharCode(x))}return i.join("")},parse:function(t){for(var s=t.length,u=[],i=0;i<s;i++)u[i>>>2]|=(t.charCodeAt(i)&255)<<24-i%4*8;return new B.init(u,s)}},l=ee.Utf8={stringify:function(t){try{return decodeURIComponent(escape(q.stringify(t)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(t){return q.parse(unescape(encodeURIComponent(t)))}},h=b.BufferedBlockAlgorithm=E.extend({reset:function(){this._data=new B.init,this._nDataBytes=0},_append:function(t){typeof t=="string"&&(t=l.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(t){var s,u=this._data,i=u.words,_=u.sigBytes,x=this.blockSize,e=x*4,o=_/e;t?o=P.ceil(o):o=P.max((o|0)-this._minBufferSize,0);var y=o*x,S=P.min(y*4,_);if(y){for(var L=0;L<y;L+=x)this._doProcessBlock(i,L);s=i.splice(0,y),u.sigBytes-=S}return new B.init(s,S)},clone:function(){var t=E.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});b.Hasher=h.extend({cfg:E.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){h.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){t&&this._append(t);var s=this._doFinalize();return s},blockSize:16,_createHelper:function(t){return function(s,u){return new t.init(u).finalize(s)}},_createHmacHelper:function(t){return function(s,u){return new C.HMAC.init(t,u).finalize(s)}}});var C=M.algo={};return M}(Math);return v})}(H)),H.exports}var a={exports:{}},$;function k(){return $||($=1,function(X,te){(function(v,P){X.exports=P(j())})(w,function(v){return function(P){var re=v,z=re.lib,Z=z.WordArray,oe=z.Hasher,M=re.algo,b=[],E=[];(function(){function O(C){for(var t=P.sqrt(C),s=2;s<=t;s++)if(!(C%s))return!1;return!0}function q(C){return(C-(C|0))*4294967296|0}for(var l=2,h=0;h<64;)O(l)&&(h<8&&(b[h]=q(P.pow(l,1/2))),E[h]=q(P.pow(l,1/3)),h++),l++})();var B=[],ee=M.SHA256=oe.extend({_doReset:function(){this._hash=new Z.init(b.slice(0))},_doProcessBlock:function(O,q){for(var l=this._hash.words,h=l[0],C=l[1],t=l[2],s=l[3],u=l[4],i=l[5],_=l[6],x=l[7],e=0;e<64;e++){if(e<16)B[e]=O[q+e]|0;else{var o=B[e-15],y=(o<<25|o>>>7)^(o<<14|o>>>18)^o>>>3,S=B[e-2],L=(S<<15|S>>>17)^(S<<13|S>>>19)^S>>>10;B[e]=y+B[e-7]+L+B[e-16]}var K=u&i^~u&_,J=h&C^h&t^C&t,Q=(h<<30|h>>>2)^(h<<19|h>>>13)^(h<<10|h>>>22),ae=(u<<26|u>>>6)^(u<<21|u>>>11)^(u<<7|u>>>25),se=x+ae+K+E[e]+B[e],ce=Q+J;x=_,_=i,i=u,u=s+se|0,s=t,t=C,C=h,h=se+ce|0}l[0]=l[0]+h|0,l[1]=l[1]+C|0,l[2]=l[2]+t|0,l[3]=l[3]+s|0,l[4]=l[4]+u|0,l[5]=l[5]+i|0,l[6]=l[6]+_|0,l[7]=l[7]+x|0},_doFinalize:function(){var O=this._data,q=O.words,l=this._nDataBytes*8,h=O.sigBytes*8;return q[h>>>5]|=128<<24-h%32,q[(h+64>>>9<<4)+14]=P.floor(l/4294967296),q[(h+64>>>9<<4)+15]=l,O.sigBytes=q.length*4,this._process(),this._hash},clone:function(){var O=oe.clone.call(this);return O._hash=this._hash.clone(),O}});re.SHA256=oe._createHelper(ee),re.HmacSHA256=oe._createHmacHelper(ee)}(Math),v.SHA256})}(a)),a.exports}var N={exports:{}},U;function W(){return U||(U=1,function(X,te){(function(v,P){X.exports=P(j())})(w,function(v){(function(){var P=v,re=P.lib,z=re.Base,Z=P.enc,oe=Z.Utf8,M=P.algo;M.HMAC=z.extend({init:function(b,E){b=this._hasher=new b.init,typeof E=="string"&&(E=oe.parse(E));var B=b.blockSize,ee=B*4;E.sigBytes>ee&&(E=b.finalize(E)),E.clamp();for(var O=this._oKey=E.clone(),q=this._iKey=E.clone(),l=O.words,h=q.words,C=0;C<B;C++)l[C]^=1549556828,h[C]^=909522486;O.sigBytes=q.sigBytes=ee,this.reset()},reset:function(){var b=this._hasher;b.reset(),b.update(this._iKey)},update:function(b){return this._hasher.update(b),this},finalize:function(b){var E=this._hasher,B=E.finalize(b);E.reset();var ee=E.finalize(this._oKey.clone().concat(B));return ee}})})()})}(N)),N.exports}(function(X,te){(function(v,P,re){X.exports=P(j(),k(),W())})(w,function(v){return v.HmacSHA256})})(F);var ne=F.exports;return ne}();class f extends Error{}let p=!1;function d(w){throw p=!0,window.postMessage({type:"s2r:abort",value:{reason:""+w,signature:c(""+w,r)}}),new f(`StarShell threw a security error: "${w}"`)}function m(w){console.error(w),p=!0}const{addEventListener:A,Reflect:R,Reflect:{getOwnPropertyDescriptor:I,getPrototypeOf:g}}=window;function T(w,F,G=[]){try{const H=I.call(R,w,F);if(!H){G.push(w);const Y=g.call(R,w);return!Y||G.includes(Y)?null:T(Y,F,G)}return H}catch{return null}}function D(w,F,G=!1){try{const H=T(w,F);return H?"value"in H?H.value:G?w[F]:null:null}catch{return null}}const V={ratifyGlobal(){if(r){if(!T(window,"starshell"))return m("StarShell failed to ratify global since it is not defined.")}else return m("StarShell is refusing to ratify global since it never received a signing key from the extension.");const w=window.starshell;w.verify(G=>{if(p)return;if(G!==JSON.stringify(c("starshell",r)))return d("Invalid auth signature passed to ratifier");const H=w.verifiableStack();return{proof:H,signature:JSON.stringify(c(JSON.stringify(H),r))}})(w)}};window.addEventListener("message",w=>{if(n("Observed window message %o",w),!p&&window===D(w,"source",!0)){const F=D(w,"data",!0);let G;if(F&&typeof F=="object"&&typeof(G=D(F,"type"))=="string"){const H=V[G];if(!H)return;n("Received relay port message having registered type %o",w.data),H(F)}}})}function dt(r){const n=browser.runtime.getManifest();for(const c of n.content_scripts||[])for(const f of c.js??[])if(f.startsWith(r))return f;for(const c of n.web_accessible_resources||[])if(typeof c=="string"){if(c.startsWith(r))return c}else for(const f of c.resources)if(f.startsWith(r))return f;return null}const ht=["file://*/*","http://*/*","https://*/*"],pt={matches:ht,runAt:"document_start",persistAcrossSessions:!0,allFrames:!0,world:"MAIN"},_t={mcs_keplr(r){return{...pt,id:"keplr_polyfill",js:[dt("assets/src/script/mcs-keplr")],persistAcrossSessions:!0,...r}}},xe={blocked:!0};function Ce(r,n){let c;try{c=new RegExp(r.matches)}catch{return console.error(`Failed to parse policy match pattern "${r.matches}"`),!1}if(c.test(n.host)&&r.except){let f;try{f=new RegExp(r.except)}catch{return console.error(`Failed to parse policy match pattern "${r.except}"`),!1}if(f.test(n.host))return!1}return!0}const Le=je({store:Ke,class:class extends Ge{static forApp(n){return Le.open(c=>c.forApp(n))}forApp(n){let c=!1;for(const f of this._w_cache.hq)if(Ce(f,n)){if(f.action==="block")return xe;console.error(`Unknown hq policy action "${f.action}"`);continue}for(const f of this._w_cache.user)if(Ce(f,n)){if(f.action==="block")return xe;if(f.action==="trust")c=!0;else{console.error(`Unknown policy action "${f.action}"`);continue}}return{blocked:!1,trusted:c}}}}),ye=360,ge=600;async function wt(r){const n=browser.runtime.getURL("src/entry/flow.html"),c=n+"?"+new URLSearchParams(r).toString(),[f,p]=await Promise.all([browser.system.display.getInfo(),(async()=>{const g=(await browser.storage.session.get(["display_info"]))?.display_info;if(g)return g;browser.windows.create({type:"popup",url:n+"?"+new URLSearchParams({headless:"info"}).toString(),focused:!0,width:ye,height:ge});try{return(await yt("session","display_info",5*Ve))?.newValue}catch{}})()]),d={};for(const g of f)g.isEnabled&&(d[g.bounds.width+":"+g.bounds.height]=g);let m={};if(p){const g=p.width+":"+p.height,T=d[g];T&&(m={left:T.bounds.left+Math.round(p.width/2-ye/2),top:T.bounds.top+Math.round(p.height*.45-ge/2)})}const A=await browser.windows.create({type:"popup",url:c,focused:!0,width:ye,height:ge,...m});if(typeof A.id!="number")throw new Error("Failed to create popup window");if(!await browser.windows.get(A.id,{windowTypes:["popup"]}))throw new Error("Failed to locate popup window");const I=await new Promise(g=>{browser.tabs.onUpdated.addListener(function T(D,V,w){A.id===w.windowId&&typeof D=="number"&&V.status==="complete"&&(browser.tabs.onUpdated.removeListener(T),g(w))})});return{window:A,tab:I}}async function le(r,n=""){const c=`flow_${crypto.randomUUID()}`;await Xe("flow");const{window:f,tab:p}=await wt({comm:"broadcast",name:c}),d=new BroadcastChannel(c);return new Promise(m=>{function A(g){browser.windows.onRemoved.removeListener(I),d.removeEventListener("message",R),Je("flow"),m(g)}function R(g){const T=g.data;T.type==="completeFlow"&&(browser.windows.remove(f.id),A(T.value.answer))}d.onmessage=R;function I(g){g===f.id&&A(!1)}browser.windows.onRemoved.addListener(I,{windowTypes:["popup"]}),d.postMessage(r.flow)})}const Ue={sync:{},local:{},session:{},managed:{}};function yt(r,n,c=0){return new Promise((f,p)=>{const d=Ue[r],m=d[n]=d[n]||[];let A=-1,R=0;c>0&&(R=globalThis.setTimeout(()=>{m.splice(A,1),p(new Error("Timed out"))},c)),A=m.push(I=>{globalThis.clearTimeout(R),f(I)})})}function gt(r,n,c){const f=Ue[r],p=f[n];if(p?.length){f[n]=[];for(const d of p)d(c)}}browser.storage.onChanged.addListener((r,n)=>{const f={sync:{async keplr_polyfill(p){const d=browser.scripting,m=_t.mcs_keplr(),A=!!(await d.getRegisteredContentScripts({ids:[m.id]})).length;p.newValue===!0?A||await d.registerContentScripts([m]):A||await d.unregisterContentScripts({ids:[m.id]})}},local:{},session:{},managed:{}}[n];if(f)for(const p in r){const d=r[p];gt(n,p,d);const m=f[p];m&&m(d)}});function Ie(r){const{protocol:n,host:c}=new URL(r);return[(n||"").replace(/:$/,""),c]}function he(r,n){return console.warn(`${n}; blocked request from <${r.url}>`),!0}async function He(r,n,c){if(r==="http"){if(!ct.test(n))return he(c,"Non-secure HTTP contexts are not allowed to connect to wallet except for localhost")}else if(r==="file"){if(!await ft.get("allow_file_urls"))return he(c,"File URLs are not allowed to connect to wallet, unless 'allow_file_urls' setting is enabled")}else if(r!=="https")return he(c,`Scheme not allowed "${r}"`);return!1}function vt(r=64){const n=new Uint8Array(r);return crypto.getRandomValues(n),Array.from(n).map(c=>c.toString(16).padStart(2,"0")).join("")}const pe={panic(r,n){},async requestAdvertisement(r,n,c){const f=n.tab.id;if(!n.url){console.debug("Silently ignoring advertisement request from unknown source");return}const[p,d]=Ie(n.url),m={tabId:f,href:n.url+""};if(console.info("get root key"),!await ve.getRootKey()){console.info("no root key");const I=await le({flow:{type:"authenticate",page:m}});return console.info("flow completed"),I?await pe.requestAdvertisement(r,n,c):void 0}if(console.info("root key exists"),await He(p,d,n))return;console.info("app passed scheme check");{let I=await it.get(d,p),g=!1;I?g=!0:I={scheme:p,host:d,connections:{}};const T=await Le.forApp(I);if(console.info("got policy for app %o",T),T.blocked)return he(n,"App connection blocked by policy");if(!g&&!T.trusted){if(await le({flow:{type:"requestAdvertisement",value:{app:I},page:m}}))return await pe.requestAdvertisement(r,n,c);console.debug("User cancelled request");return}}console.debug(`Allowing <${n.url}> to receive advertisement`);const R={session:vt()};browser.scripting.executeScript({target:{tabId:f},func:lt,args:[R],world:"ISOLATED"}),browser.scripting.executeScript({target:{tabId:f},func:ut,args:[R],world:"MAIN"}),c(R)},async flowBroadcast(r,n,c){const{key:f,config:p}=r;if(!n.url){console.debug("Silently ignoring advertisement request from unknown source");return}const d=p.flow.page={tabId:n.tab.id,href:n.url||p.flow.page?.href||""};if(console.info("get root key"),!await ve.getRootKey()){console.info("no root key");const g=await le({flow:{type:"authenticate",page:d}});return console.info("flow completed"),g?await pe.flowBroadcast(r,n,c):void 0}const[A,R]=Ie(n.url);if(await He(A,R,n))return;console.info("app passed scheme check");const I={scheme:A,host:R,connections:{}};p.flow.value.app=I,le(p,f)}},mt={wake(){de()},async bankSend(r,n,c){c(!0);const f=await ue.at(r.network),p=await _e.at(f.chain),d=ue.activate(f,p),[,m]=await Te.find(r.sender,p);await be(`${f.chain}
${f.rpcHost}
`,d,p,m,r.sender,"Send");const A=await d.bankSend(r.sender,r.recipient,r.coin,BigInt(r.amount),BigInt(r.limit),r.price,r.memo,at.BROADCAST_MODE_SYNC,p),R=`outgoing:${A.hash||crypto.randomUUID()}`;let I="",g="";A.code!==0?(I="\u274C Network rejected transaction",g=`Error #${A.code}:: ${A.raw_log}`):A.hash?(I="Transaction sent to network",g=`Waiting for confirmation on ${p.name}...`):(I="\u26A0\uFE0F Network issues",g="Transaction was accepted but might have gotten lost"),we(R,{title:I,message:g}),await fe.record(A.hash,{type:"tx_out",time:Date.now(),data:A})}},bt=(r,n,c)=>{if(console.debug("Service received message %o",r),typeof r=="object"&&typeof r.type=="string"){let f=pe;if(!n.tab||typeof n.tab.id!="number")if(n.origin&&browser.runtime.id===n.id)f=mt;else{console.error("Refusing request from unknown sender");return}const p=r.type,d=f[p];if(d){const m=d(r.value,n,c);if(m&&typeof m.then=="function")return!0}}};browser.runtime.onMessage.addListener(bt);browser.runtime.onInstalled.addListener(async()=>{});browser.alarms.clearAll(()=>{console.warn("clear all"),browser.alarms.create("periodicChainQueries",{periodInMinutes:2}),browser.alarms.onAlarm.addListener(r=>{switch(r.name){case"periodicChainQueries":{de();break}}}),de()});let me=!1;const ie={},Oe=()=>setTimeout(()=>{me=!1,de()},30*Ze);let St=Oe();const qe={};browser.notifications.onClicked.addListener(r=>{const n=qe[r];n?.click&&n.click()});function we(r,n){browser.notifications.create(r,{type:"basic",priority:1,iconUrl:"/media/vendor/logo-192px.png",isClickable:!0,eventTime:Date.now(),...n})}function Re(r,n,c={}){if(c){const f={};c.incident&&(f.click=()=>{le({flow:{type:"inspectIncident",page:null,value:{incident:c.incident}}})}),qe[r]=f}return we(r,n)}async function be(r,n,c,f,p,d){const m=r+":"+d;if(_e.pathFrom(c),ie[m])try{ie[m]()}catch{}return ie[m]=await n[`on${d}`](p,async(A,R)=>{if(A)delete ie[m],console.error(A);else if(R){const I=JSON.parse(R.result?.log||"[]");if(I?.length){for(const g of I[0].events)if(g.type==="transfer"){const T=et(g);let D=T.amount;const V=tt.exec(T.amount);if(!V)rt({text:`Failed to parse transfer amount "${T.amount}"`});else{const[,j,a]=V;for(const[$,k]of $e(c.coins))if(a===k.denom){const N=new nt(j).shiftedBy(-k.decimals).toNumber();D=`${ot(N,!0)} ${$}`;break}}let w=T.sender;const F=Be.pathForContact(w,c.family),G=await Be.getContact(F);G?w=G.name:w=st(w);const H=R.hash,Y=(d==="Send"?"outgoing":"incoming")+":"+H;if(d==="Receive"){Re(Y,{title:`\u{1F4B8} Received ${D} on ${c.name}`,message:`${w} sent ${D} to your ${f.name} account`},{incident:fe.pathFor("tx_in",H)});const j=await n.downloadTxn(H);await fe.record(H,{type:"tx_in",time:new Date(j.timestamp).getTime(),data:j})}else if(d==="Send"){Re(Y,{title:`\u2705 Sent ${D} on ${c.name}`,message:`${D} sent to ${w} from ${f.name} account`},{incident:fe.pathFor("tx_out",H)});const j=await n.downloadTxn(H);await fe.record(H,{type:"tx_out",time:new Date(j.timestamp).getTime(),data:j})}}}}})}const ke=1e3;let Ee=0,Pe=0;function At(){Date.now()-Pe>ke*1.5&&(globalThis.clearInterval(Ee),Ee=globalThis.setInterval(()=>{Ne({type:"heartbeat"}),Pe=Date.now()},ke))}async function de(r=!1){if(At(),await Qe.updateAll(),!await ve.getRootKey()||me)return;me=!0,clearTimeout(St);const[n,c,f]=await Promise.all([Te.read(),_e.read(),ue.read()]),p={};for(const[d,m]of f.entries())p[m.chain]=p[m.chain]||m;for(const[d,m]of $e(p)){if(d==="/family.cosmos/chain.theta-testnet-001"||ie[d])continue;const A=c.at(d),R=ue.pathFrom(m),I=ue.activate(m,A),g=[];try{ie[d]=await I.listen(["tm.event='NewBlock'"],(T,D)=>{if(T)delete ie[d];else if(D){g.push(Date.now());const V=D.block;for(;g.length>16;)g.shift();Ne({type:"blockInfo",value:{header:V.header,chain:d,network:R,recents:g,txCount:V.data.txs.length}})}}),console.info({h_sockets:ie})}catch(T){Ae({title:"Websocket Error",error:T})}for(const[T,D]of n.entries()){const V=_e.addressFor(D.pubkey,A);if(I.hasRpc){const w=d+`
`+m.rpcHost+`
`;if(!ie[w])try{await Promise.all([be(w,I,A,D,V,"Receive"),be(w,I,A,D,V,"Send")])}catch(a){Ae({title:"Provider Error",error:a})}const G=[],H=[];for await(const a of I.synchronizeAll(V))a.type==="tx_in"?G.push(a):a.type==="tx_out"&&H.push(a);const Y=H.length,j=G.length;if(Y>=1)if(Y<=0)for(const a of H);else we(crypto.randomUUID(),{title:`\u2705 Sent ${Y===1?"a transfer":`${j} transfers`}`,message:"While you were away..."});if(j>=1)if(j<=0)for(const a of H);else we(crypto.randomUUID(),{title:`\u{1F4B8} Received ${j===1?"a transfer":`${j} transfers`}`,message:"While you were away..."})}}}Oe()}Ye({login(){de(!0)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
