var le=Object.defineProperty;var fe=(A,e,t)=>e in A?le(A,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):A[e]=t;var lA=(A,e,t)=>(fe(A,typeof e!="symbol"?e+"":e,t),t);const p=function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const g of n)if(g.type==="childList")for(const I of g.addedNodes)I.tagName==="LINK"&&I.rel==="modulepreload"&&i(I)}).observe(document,{childList:!0,subtree:!0});function t(n){const g={};return n.integrity&&(g.integrity=n.integrity),n.referrerpolicy&&(g.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?g.credentials="include":n.crossorigin==="anonymous"?g.credentials="omit":g.credentials="same-origin",g}function i(n){if(n.ep)return;n.ep=!0;const g=t(n);fetch(n.href,g)}};p();function noop$1(){}const identity=A=>A;function assign(A,e){for(const t in e)A[t]=e[t];return A}function is_promise(A){return A&&typeof A=="object"&&typeof A.then=="function"}function run(A){return A()}function blank_object(){return Object.create(null)}function run_all(A){A.forEach(run)}function is_function(A){return typeof A=="function"}function safe_not_equal(A,e){return A!=A?e==e:A!==e||A&&typeof A=="object"||typeof A=="function"}let src_url_equal_anchor;function src_url_equal(A,e){return src_url_equal_anchor||(src_url_equal_anchor=document.createElement("a")),src_url_equal_anchor.href=e,A===src_url_equal_anchor.href}function is_empty(A){return Object.keys(A).length===0}function subscribe(A,...e){if(A==null)return noop$1;const t=A.subscribe(...e);return t.unsubscribe?()=>t.unsubscribe():t}function component_subscribe(A,e,t){A.$$.on_destroy.push(subscribe(e,t))}function create_slot(A,e,t,i){if(A){const n=get_slot_context(A,e,t,i);return A[0](n)}}function get_slot_context(A,e,t,i){return A[1]&&i?assign(t.ctx.slice(),A[1](i(e))):t.ctx}function get_slot_changes(A,e,t,i){if(A[2]&&i){const n=A[2](i(t));if(e.dirty===void 0)return n;if(typeof n=="object"){const g=[],I=Math.max(e.dirty.length,n.length);for(let o=0;o<I;o+=1)g[o]=e.dirty[o]|n[o];return g}return e.dirty|n}return e.dirty}function update_slot_base(A,e,t,i,n,g){if(n){const I=get_slot_context(e,t,i,g);A.p(I,n)}}function get_all_dirty_from_scope(A){if(A.ctx.length>32){const e=[],t=A.ctx.length/32;for(let i=0;i<t;i++)e[i]=-1;return e}return-1}function compute_slots(A){const e={};for(const t in A)e[t]=!0;return e}function null_to_empty(A){return A??""}function set_store_value(A,e,t){return A.set(t),e}const is_client=typeof window<"u";let now=is_client?()=>window.performance.now():()=>Date.now(),raf=is_client?A=>requestAnimationFrame(A):noop$1;const tasks=new Set;function run_tasks(A){tasks.forEach(e=>{e.c(A)||(tasks.delete(e),e.f())}),tasks.size!==0&&raf(run_tasks)}function loop(A){let e;return tasks.size===0&&raf(run_tasks),{promise:new Promise(t=>{tasks.add(e={c:A,f:t})}),abort(){tasks.delete(e)}}}function append(A,e){A.appendChild(e)}function get_root_for_style(A){if(!A)return document;const e=A.getRootNode?A.getRootNode():A.ownerDocument;return e&&e.host?e:A.ownerDocument}function append_empty_stylesheet(A){const e=element("style");return append_stylesheet(get_root_for_style(A),e),e.sheet}function append_stylesheet(A,e){append(A.head||A,e)}function insert(A,e,t){A.insertBefore(e,t||null)}function detach(A){A.parentNode.removeChild(A)}function destroy_each(A,e){for(let t=0;t<A.length;t+=1)A[t]&&A[t].d(e)}function element(A){return document.createElement(A)}function svg_element(A){return document.createElementNS("http://www.w3.org/2000/svg",A)}function text(A){return document.createTextNode(A)}function space(){return text(" ")}function empty(){return text("")}function listen(A,e,t,i){return A.addEventListener(e,t,i),()=>A.removeEventListener(e,t,i)}function prevent_default(A){return function(e){return e.preventDefault(),A.call(this,e)}}function attr(A,e,t){t==null?A.removeAttribute(e):A.getAttribute(e)!==t&&A.setAttribute(e,t)}function set_attributes(A,e){const t=Object.getOwnPropertyDescriptors(A.__proto__);for(const i in e)e[i]==null?A.removeAttribute(i):i==="style"?A.style.cssText=e[i]:i==="__value"?A.value=A[i]=e[i]:t[i]&&t[i].set?A[i]=e[i]:attr(A,i,e[i])}function set_custom_element_data(A,e,t){e in A?A[e]=typeof A[e]=="boolean"&&t===""?!0:t:attr(A,e,t)}function children(A){return Array.from(A.childNodes)}function set_data(A,e){e=""+e,A.wholeText!==e&&(A.data=e)}function set_input_value(A,e){A.value=e??""}function set_style(A,e,t,i){t===null?A.style.removeProperty(e):A.style.setProperty(e,t,i?"important":"")}let crossorigin;function is_crossorigin(){if(crossorigin===void 0){crossorigin=!1;try{typeof window<"u"&&window.parent&&window.parent.document}catch{crossorigin=!0}}return crossorigin}function add_resize_listener(A,e){getComputedStyle(A).position==="static"&&(A.style.position="relative");const i=element("iframe");i.setAttribute("style","display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"),i.setAttribute("aria-hidden","true"),i.tabIndex=-1;const n=is_crossorigin();let g;return n?(i.src="data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>",g=listen(window,"message",I=>{I.source===i.contentWindow&&e()})):(i.src="about:blank",i.onload=()=>{g=listen(i.contentWindow,"resize",e)}),append(A,i),()=>{(n||g&&i.contentWindow)&&g(),detach(i)}}function toggle_class(A,e,t){A.classList[t?"add":"remove"](e)}function custom_event(A,e,{bubbles:t=!1,cancelable:i=!1}={}){const n=document.createEvent("CustomEvent");return n.initCustomEvent(A,t,i,e),n}class HtmlTag{constructor(e=!1){this.is_svg=!1,this.is_svg=e,this.e=this.n=null}c(e){this.h(e)}m(e,t,i=null){this.e||(this.is_svg?this.e=svg_element(t.nodeName):this.e=element(t.nodeName),this.t=t,this.c(e)),this.i(i)}h(e){this.e.innerHTML=e,this.n=Array.from(this.e.childNodes)}i(e){for(let t=0;t<this.n.length;t+=1)insert(this.t,this.n[t],e)}p(e){this.d(),this.h(e),this.i(this.a)}d(){this.n.forEach(detach)}}const managed_styles=new Map;let active=0;function hash(A){let e=5381,t=A.length;for(;t--;)e=(e<<5)-e^A.charCodeAt(t);return e>>>0}function create_style_information(A,e){const t={stylesheet:append_empty_stylesheet(e),rules:{}};return managed_styles.set(A,t),t}function create_rule(A,e,t,i,n,g,I,o=0){const a=16.666/i;let r=`{
`;for(let E=0;E<=1;E+=a){const f=e+(t-e)*g(E);r+=E*100+`%{${I(f,1-f)}}
`}const s=r+`100% {${I(t,1-t)}}
}`,B=`__svelte_${hash(s)}_${o}`,C=get_root_for_style(A),{stylesheet:l,rules:c}=managed_styles.get(C)||create_style_information(C,A);c[B]||(c[B]=!0,l.insertRule(`@keyframes ${B} ${s}`,l.cssRules.length));const Q=A.style.animation||"";return A.style.animation=`${Q?`${Q}, `:""}${B} ${i}ms linear ${n}ms 1 both`,active+=1,B}function delete_rule(A,e){const t=(A.style.animation||"").split(", "),i=t.filter(e?g=>g.indexOf(e)<0:g=>g.indexOf("__svelte")===-1),n=t.length-i.length;n&&(A.style.animation=i.join(", "),active-=n,active||clear_rules())}function clear_rules(){raf(()=>{active||(managed_styles.forEach(A=>{const{stylesheet:e}=A;let t=e.cssRules.length;for(;t--;)e.deleteRule(t);A.rules={}}),managed_styles.clear())})}let current_component;function set_current_component(A){current_component=A}function get_current_component(){if(!current_component)throw new Error("Function called outside component initialization");return current_component}function beforeUpdate(A){get_current_component().$$.before_update.push(A)}function onMount(A){get_current_component().$$.on_mount.push(A)}function afterUpdate(A){get_current_component().$$.after_update.push(A)}function onDestroy(A){get_current_component().$$.on_destroy.push(A)}function createEventDispatcher(){const A=get_current_component();return(e,t,{cancelable:i=!1}={})=>{const n=A.$$.callbacks[e];if(n){const g=custom_event(e,t,{cancelable:i});return n.slice().forEach(I=>{I.call(A,g)}),!g.defaultPrevented}return!0}}function setContext(A,e){return get_current_component().$$.context.set(A,e),e}function getContext(A){return get_current_component().$$.context.get(A)}function getAllContexts(){return get_current_component().$$.context}function bubble(A,e){const t=A.$$.callbacks[e.type];t&&t.slice().forEach(i=>i.call(this,e))}const dirty_components=[],binding_callbacks=[],render_callbacks=[],flush_callbacks=[],resolved_promise=Promise.resolve();let update_scheduled=!1;function schedule_update(){update_scheduled||(update_scheduled=!0,resolved_promise.then(flush))}function tick(){return schedule_update(),resolved_promise}function add_render_callback(A){render_callbacks.push(A)}function add_flush_callback(A){flush_callbacks.push(A)}const seen_callbacks=new Set;let flushidx=0;function flush(){const A=current_component;do{for(;flushidx<dirty_components.length;){const e=dirty_components[flushidx];flushidx++,set_current_component(e),update(e.$$)}for(set_current_component(null),dirty_components.length=0,flushidx=0;binding_callbacks.length;)binding_callbacks.pop()();for(let e=0;e<render_callbacks.length;e+=1){const t=render_callbacks[e];seen_callbacks.has(t)||(seen_callbacks.add(t),t())}render_callbacks.length=0}while(dirty_components.length);for(;flush_callbacks.length;)flush_callbacks.pop()();update_scheduled=!1,seen_callbacks.clear(),set_current_component(A)}function update(A){if(A.fragment!==null){A.update(),run_all(A.before_update);const e=A.dirty;A.dirty=[-1],A.fragment&&A.fragment.p(A.ctx,e),A.after_update.forEach(add_render_callback)}}let promise;function wait(){return promise||(promise=Promise.resolve(),promise.then(()=>{promise=null})),promise}function dispatch(A,e,t){A.dispatchEvent(custom_event(`${e?"intro":"outro"}${t}`))}const outroing=new Set;let outros;function group_outros(){outros={r:0,c:[],p:outros}}function check_outros(){outros.r||run_all(outros.c),outros=outros.p}function transition_in(A,e){A&&A.i&&(outroing.delete(A),A.i(e))}function transition_out(A,e,t,i){if(A&&A.o){if(outroing.has(A))return;outroing.add(A),outros.c.push(()=>{outroing.delete(A),i&&(t&&A.d(1),i())}),A.o(e)}else i&&i()}const null_transition={duration:0};function create_out_transition(A,e,t){let i=e(A,t),n=!0,g;const I=outros;I.r+=1;function o(){const{delay:a=0,duration:r=300,easing:s=identity,tick:B=noop$1,css:C}=i||null_transition;C&&(g=create_rule(A,1,0,r,a,s,C));const l=now()+a,c=l+r;add_render_callback(()=>dispatch(A,!1,"start")),loop(Q=>{if(n){if(Q>=c)return B(0,1),dispatch(A,!1,"end"),--I.r||run_all(I.c),!1;if(Q>=l){const E=s((Q-l)/r);B(1-E,E)}}return n})}return is_function(i)?wait().then(()=>{i=i(),o()}):o(),{end(a){a&&i.tick&&i.tick(1,0),n&&(g&&delete_rule(A,g),n=!1)}}}function create_bidirectional_transition(A,e,t,i){let n=e(A,t),g=i?0:1,I=null,o=null,a=null;function r(){a&&delete_rule(A,a)}function s(C,l){const c=C.b-g;return l*=Math.abs(c),{a:g,b:C.b,d:c,duration:l,start:C.start,end:C.start+l,group:C.group}}function B(C){const{delay:l=0,duration:c=300,easing:Q=identity,tick:E=noop$1,css:f}=n||null_transition,u={start:now()+l,b:C};C||(u.group=outros,outros.r+=1),I||o?o=u:(f&&(r(),a=create_rule(A,g,C,c,l,Q,f)),C&&E(0,1),I=s(u,c),add_render_callback(()=>dispatch(A,C,"start")),loop(h=>{if(o&&h>o.start&&(I=s(o,c),o=null,dispatch(A,I.b,"start"),f&&(r(),a=create_rule(A,g,I.b,I.duration,0,Q,n.css))),I){if(h>=I.end)E(g=I.b,1-g),dispatch(A,I.b,"end"),o||(I.b?r():--I.group.r||run_all(I.group.c)),I=null;else if(h>=I.start){const w=h-I.start;g=I.a+I.d*Q(w/I.duration),E(g,1-g)}}return!!(I||o)}))}return{run(C){is_function(n)?wait().then(()=>{n=n(),B(C)}):B(C)},end(){r(),I=o=null}}}function handle_promise(A,e){const t=e.token={};function i(n,g,I,o){if(e.token!==t)return;e.resolved=o;let a=e.ctx;I!==void 0&&(a=a.slice(),a[I]=o);const r=n&&(e.current=n)(a);let s=!1;e.block&&(e.blocks?e.blocks.forEach((B,C)=>{C!==g&&B&&(group_outros(),transition_out(B,1,1,()=>{e.blocks[C]===B&&(e.blocks[C]=null)}),check_outros())}):e.block.d(1),r.c(),transition_in(r,1),r.m(e.mount(),e.anchor),s=!0),e.block=r,e.blocks&&(e.blocks[g]=r),s&&flush()}if(is_promise(A)){const n=get_current_component();if(A.then(g=>{set_current_component(n),i(e.then,1,e.value,g),set_current_component(null)},g=>{if(set_current_component(n),i(e.catch,2,e.error,g),set_current_component(null),!e.hasCatch)throw g}),e.current!==e.pending)return i(e.pending,0),!0}else{if(e.current!==e.then)return i(e.then,1,e.value,A),!0;e.resolved=A}}function update_await_block_branch(A,e,t){const i=e.slice(),{resolved:n}=A;A.current===A.then&&(i[A.value]=n),A.current===A.catch&&(i[A.error]=n),A.block.p(i,t)}function outro_and_destroy_block(A,e){transition_out(A,1,1,()=>{e.delete(A.key)})}function update_keyed_each(A,e,t,i,n,g,I,o,a,r,s,B){let C=A.length,l=g.length,c=C;const Q={};for(;c--;)Q[A[c].key]=c;const E=[],f=new Map,u=new Map;for(c=l;c--;){const U=B(n,g,c),Y=t(U);let d=I.get(Y);d?i&&d.p(U,e):(d=r(Y,U),d.c()),f.set(Y,E[c]=d),Y in Q&&u.set(Y,Math.abs(c-Q[Y]))}const h=new Set,w=new Set;function N(U){transition_in(U,1),U.m(o,s),I.set(U.key,U),s=U.first,l--}for(;C&&l;){const U=E[l-1],Y=A[C-1],d=U.key,y=Y.key;U===Y?(s=U.first,C--,l--):f.has(y)?!I.has(d)||h.has(d)?N(U):w.has(y)?C--:u.get(d)>u.get(y)?(w.add(d),N(U)):(h.add(y),C--):(a(Y,I),C--)}for(;C--;){const U=A[C];f.has(U.key)||a(U,I)}for(;l;)N(E[l-1]);return E}function get_spread_update(A,e){const t={},i={},n={$$scope:1};let g=A.length;for(;g--;){const I=A[g],o=e[g];if(o){for(const a in I)a in o||(i[a]=1);for(const a in o)n[a]||(t[a]=o[a],n[a]=1);A[g]=o}else for(const a in I)n[a]=1}for(const I in i)I in t||(t[I]=void 0);return t}function get_spread_object(A){return typeof A=="object"&&A!==null?A:{}}function bind(A,e,t){const i=A.$$.props[e];i!==void 0&&(A.$$.bound[i]=t,t(A.$$.ctx[i]))}function create_component(A){A&&A.c()}function mount_component(A,e,t,i){const{fragment:n,on_mount:g,on_destroy:I,after_update:o}=A.$$;n&&n.m(e,t),i||add_render_callback(()=>{const a=g.map(run).filter(is_function);I?I.push(...a):run_all(a),A.$$.on_mount=[]}),o.forEach(add_render_callback)}function destroy_component(A,e){const t=A.$$;t.fragment!==null&&(run_all(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function make_dirty(A,e){A.$$.dirty[0]===-1&&(dirty_components.push(A),schedule_update(),A.$$.dirty.fill(0)),A.$$.dirty[e/31|0]|=1<<e%31}function init(A,e,t,i,n,g,I,o=[-1]){const a=current_component;set_current_component(A);const r=A.$$={fragment:null,ctx:null,props:g,update:noop$1,not_equal:n,bound:blank_object(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(a?a.$$.context:[])),callbacks:blank_object(),dirty:o,skip_bound:!1,root:e.target||a.$$.root};I&&I(r.root);let s=!1;if(r.ctx=t?t(A,e.props||{},(B,C,...l)=>{const c=l.length?l[0]:C;return r.ctx&&n(r.ctx[B],r.ctx[B]=c)&&(!r.skip_bound&&r.bound[B]&&r.bound[B](c),s&&make_dirty(A,B)),C}):[],r.update(),s=!0,run_all(r.before_update),r.fragment=i?i(r.ctx):!1,e.target){if(e.hydrate){const B=children(e.target);r.fragment&&r.fragment.l(B),B.forEach(detach)}else r.fragment&&r.fragment.c();e.intro&&transition_in(A.$$.fragment),mount_component(A,e.target,e.anchor,e.customElement),flush()}set_current_component(a)}class SvelteComponent{$destroy(){destroy_component(this,1),this.$destroy=noop$1}$on(e,t){const i=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return i.push(t),()=>{const n=i.indexOf(t);n!==-1&&i.splice(n,1)}}$set(e){this.$$set&&!is_empty(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const F_NOOP=()=>{},proper=A=>A.split(/\s+/g).map(e=>e[0].toUpperCase()+e.slice(1)).join(" ");function objects_might_differ(A,e){const t=Object.keys(A),i=Object.keys(e);if(t.length!==i.length)return!0;for(const g in A)if(e[g]!==A[g])return!0;return!1}function fold(A,e){const t={};let i=0;for(const n of A)Object.assign(t,e(n,i++));return t}function ode(A){return Object.entries(A)}function ofe(A){return Object.fromEntries(A)}function oderac(A,e,t=!1){return ode(A).reduce((i,[n,g],I)=>[...i,e(n,g,I)],[])}function oderom(A,e){return ode(A).reduce((t,[i,n])=>({...t,...e(i,n)}),{})}function timeout(A){return new Promise(e=>{setTimeout(()=>{e()},A)})}function forever(A){return new Promise(F_NOOP)}var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function commonjsRequire(A){throw new Error('Could not dynamically require "'+A+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var dist={};Object.defineProperty(dist,"__esModule",{value:!0});dist.bech32m=bech32=dist.bech32=void 0;const ALPHABET="qpzry9x8gf2tvdw0s3jn54khce6mua7l",ALPHABET_MAP={};for(let A=0;A<ALPHABET.length;A++){const e=ALPHABET.charAt(A);ALPHABET_MAP[e]=A}function polymodStep(A){const e=A>>25;return(A&33554431)<<5^-(e>>0&1)&996825010^-(e>>1&1)&642813549^-(e>>2&1)&513874426^-(e>>3&1)&1027748829^-(e>>4&1)&705979059}function prefixChk(A){let e=1;for(let t=0;t<A.length;++t){const i=A.charCodeAt(t);if(i<33||i>126)return"Invalid prefix ("+A+")";e=polymodStep(e)^i>>5}e=polymodStep(e);for(let t=0;t<A.length;++t){const i=A.charCodeAt(t);e=polymodStep(e)^i&31}return e}function convert(A,e,t,i){let n=0,g=0;const I=(1<<t)-1,o=[];for(let a=0;a<A.length;++a)for(n=n<<e|A[a],g+=e;g>=t;)g-=t,o.push(n>>g&I);if(i)g>0&&o.push(n<<t-g&I);else{if(g>=e)return"Excess padding";if(n<<t-g&I)return"Non-zero padding"}return o}function toWords(A){return convert(A,8,5,!0)}function fromWordsUnsafe(A){const e=convert(A,5,8,!1);if(Array.isArray(e))return e}function fromWords(A){const e=convert(A,5,8,!1);if(Array.isArray(e))return e;throw new Error(e)}function getLibraryFromEncoding(A){let e;A==="bech32"?e=1:e=734539939;function t(I,o,a){if(a=a||90,I.length+7+o.length>a)throw new TypeError("Exceeds length limit");I=I.toLowerCase();let r=prefixChk(I);if(typeof r=="string")throw new Error(r);let s=I+"1";for(let B=0;B<o.length;++B){const C=o[B];if(C>>5!==0)throw new Error("Non 5-bit word");r=polymodStep(r)^C,s+=ALPHABET.charAt(C)}for(let B=0;B<6;++B)r=polymodStep(r);r^=e;for(let B=0;B<6;++B){const C=r>>(5-B)*5&31;s+=ALPHABET.charAt(C)}return s}function i(I,o){if(o=o||90,I.length<8)return I+" too short";if(I.length>o)return"Exceeds length limit";const a=I.toLowerCase(),r=I.toUpperCase();if(I!==a&&I!==r)return"Mixed-case string "+I;I=a;const s=I.lastIndexOf("1");if(s===-1)return"No separator character for "+I;if(s===0)return"Missing prefix for "+I;const B=I.slice(0,s),C=I.slice(s+1);if(C.length<6)return"Data too short";let l=prefixChk(B);if(typeof l=="string")return l;const c=[];for(let Q=0;Q<C.length;++Q){const E=C.charAt(Q),f=ALPHABET_MAP[E];if(f===void 0)return"Unknown character "+E;l=polymodStep(l)^f,!(Q+6>=C.length)&&c.push(f)}return l!==e?"Invalid checksum for "+I:{prefix:B,words:c}}function n(I,o){const a=i(I,o);if(typeof a=="object")return a}function g(I,o){const a=i(I,o);if(typeof a=="object")return a;throw new Error(a)}return{decodeUnsafe:n,decode:g,encode:t,toWords,fromWordsUnsafe,fromWords}}var bech32=dist.bech32=getLibraryFromEncoding("bech32");dist.bech32m=getLibraryFromEncoding("bech32m");if(typeof window<"u"&&window?.location?.hostname==="localhost"){const A=globalThis.chrome;if(!A.storage){let e=function(t){return{async get(i){const n=Array.isArray(i)?i:[i];return fold(n,g=>{const I=localStorage.getItem(`chrome.${t}:${g}`);return{[g]:typeof I=="string"?JSON.parse(I):void 0}})},async set(i){for(const[n,g]of ode(i))localStorage.setItem(`chrome.${t}:${n}`,JSON.stringify(g))},async clear(){const i=localStorage.length;for(let n=i;n>=0;n--){const g=localStorage.key(n);!g||g.startsWith(`chrome.${t}:`)&&localStorage.removeItem(g)}},async remove(i){const n=Array.isArray(i)?i:[i];for(const g of n)localStorage.removeItem(`chrome.${t}:${g}`)}}};A.storage={local:e("local"),sync:e("sync"),session:e("session")}}A.runtime||(A.runtime={getURL(e){debugger},getManifest(){debugger},sendMessage(e){debugger},onMessage:{addListener(e){debugger},removeListener(){debugger}},onInstalled:{addListener(e){debugger},removeListener(){debugger}}}),A.tabs||(A.tabs={create(e){window.open(e.url,"_blank")},get(e){debugger},reload(e){debugger},onUpdated:{addEventListener(){debugger},removeListener(){debugger}}}),A.windows||(A.windows={create(e){window.open(e.url,"_blank")},get(e){debugger},remove(e){debugger},onRemoved:{addEventListener(){debugger},removeListener(){debugger}}}),A.extension||(A.extension={getBackgroundPage(){debugger}}),A.scripting||(A.scripting={executeScript(){debugger}})}const chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",base64ToBin=A=>{const e=new Uint8Array(123);for(let a=0;a<chars.length;a++)e[chars.charCodeAt(a)]=a;const t=A.length*.75,i=A.length,n=A[A.length-1]==="="?A[A.length-2]==="="?t-2:t-1:t,g=new ArrayBuffer(n),I=new Uint8Array(g);let o=0;for(let a=0;a<i;a+=4){const r=e[A.charCodeAt(a)],s=e[A.charCodeAt(a+1)],B=e[A.charCodeAt(a+2)],C=e[A.charCodeAt(a+3)];I[o++]=r<<2|s>>4,I[o++]=(s&15)<<4|B>>2,I[o++]=(B&3)<<6|C&63}return I},instantiateRustWasm=async(A,e,t,i,n,g)=>{const I=(await WebAssembly.instantiate(A,{[e]:{__wbindgen_throw:(h,w)=>{throw new Error(Array.from(B().subarray(h,h+w)).map(N=>String.fromCharCode(N)).join(""))}}})).instance.exports;let o,a,r;const s=()=>(r===void 0&&(r=I.__wbindgen_global_argument_ptr()),r);function B(){return(o===void 0||o.buffer!==I.memory.buffer)&&(o=new Uint8Array(I.memory.buffer)),o}const C=()=>((a===void 0||a.buffer!==I.memory.buffer)&&(a=new Uint32Array(I.memory.buffer)),a),l=h=>{const w=I.__wbindgen_malloc(h.length);return B().set(h,w),[w,h.length]},c=(h,w)=>B().subarray(h,h+w);return{final:h=>{const[w,N]=l(h),U=s();try{I[g](U,w,N);const Y=C(),d=Y[U/4],y=Y[U/4+1],_=c(d,y).slice();return I.__wbindgen_free(d,y),_}finally{h.set(B().subarray(w/1,w/1+N)),I.__wbindgen_free(w,N)}},hash:h=>{const[w,N]=l(h),U=s();try{I[t](U,w,N);const Y=C(),d=Y[U/4],y=Y[U/4+1],_=c(d,y).slice();return I.__wbindgen_free(d,y),_}finally{I.__wbindgen_free(w,N)}},init:()=>{const h=s();I[i](h);const w=C(),N=w[h/4],U=w[h/4+1],Y=c(N,U).slice();return I.__wbindgen_free(N,U),Y},update:(h,w)=>{const[N,U]=l(h),[Y,d]=l(w),y=s();try{I[n](y,N,U,Y,d);const _=C(),R=_[y/4],m=_[y/4+1],S=c(R,m).slice();return I.__wbindgen_free(R,m),S}finally{h.set(B().subarray(N/1,N/1+U)),I.__wbindgen_free(N,U),I.__wbindgen_free(Y,d)}}}},ripemd160Base64Bytes="",SECP256K1_FLAGS_TYPE_CONTEXT=1<<0,SECP256K1_FLAGS_TYPE_COMPRESSION=1<<1,SECP256K1_FLAGS_BIT_CONTEXT_VERIFY=1<<8,SECP256K1_FLAGS_BIT_CONTEXT_SIGN=1<<9,SECP256K1_FLAGS_BIT_COMPRESSION=1<<8,SECP256K1_CONTEXT_VERIFY=SECP256K1_FLAGS_TYPE_CONTEXT|SECP256K1_FLAGS_BIT_CONTEXT_VERIFY,SECP256K1_CONTEXT_SIGN=SECP256K1_FLAGS_TYPE_CONTEXT|SECP256K1_FLAGS_BIT_CONTEXT_SIGN,SECP256K1_CONTEXT_NONE=SECP256K1_FLAGS_TYPE_CONTEXT,SECP256K1_EC_COMPRESSED=SECP256K1_FLAGS_TYPE_COMPRESSION|SECP256K1_FLAGS_BIT_COMPRESSION,SECP256K1_EC_UNCOMPRESSED=SECP256K1_FLAGS_TYPE_COMPRESSION;var ContextFlag;(function(A){A[A.NONE=SECP256K1_CONTEXT_NONE]="NONE",A[A.VERIFY=SECP256K1_CONTEXT_VERIFY]="VERIFY",A[A.SIGN=SECP256K1_CONTEXT_SIGN]="SIGN",A[A.BOTH=SECP256K1_CONTEXT_SIGN|SECP256K1_CONTEXT_VERIFY]="BOTH"})(ContextFlag||(ContextFlag={}));var CompressionFlag;(function(A){A[A.COMPRESSED=SECP256K1_EC_COMPRESSED]="COMPRESSED",A[A.UNCOMPRESSED=SECP256K1_EC_UNCOMPRESSED]="UNCOMPRESSED"})(CompressionFlag||(CompressionFlag={}));const secp256k1Base64Bytes="",wrapSecp256k1Wasm$1=(A,e,t)=>({contextCreate:i=>A.exports._secp256k1_context_create(i),contextRandomize:(i,n)=>A.exports._secp256k1_context_randomize(i,n),ecdh:(i,n,g,I)=>A.exports._secp256k1_ecdh(i,n,g,I),free:i=>A.exports._free(i),heapU32:t,heapU8:e,instance:A,malloc:i=>A.exports._malloc(i),mallocSizeT:i=>{const n=A.exports._malloc(4),g=n>>2;return t.set([i],g),n},mallocUint8Array:i=>{const n=A.exports._malloc(i.length);return e.set(i,n),n},privkeyTweakAdd:(i,n,g)=>A.exports._secp256k1_ec_privkey_tweak_add(i,n,g),privkeyTweakMul:(i,n,g)=>A.exports._secp256k1_ec_privkey_tweak_mul(i,n,g),pubkeyCreate:(i,n,g)=>A.exports._secp256k1_ec_pubkey_create(i,n,g),pubkeyParse:(i,n,g,I)=>A.exports._secp256k1_ec_pubkey_parse(i,n,g,I),pubkeySerialize:(i,n,g,I,o)=>A.exports._secp256k1_ec_pubkey_serialize(i,n,g,I,o),pubkeyTweakAdd:(i,n,g)=>A.exports._secp256k1_ec_pubkey_tweak_add(i,n,g),pubkeyTweakMul:(i,n,g)=>A.exports._secp256k1_ec_pubkey_tweak_mul(i,n,g),readHeapU8:(i,n)=>new Uint8Array(e.buffer,i,n),readSizeT:i=>{const n=i>>2;return t[n]},recover:(i,n,g,I)=>A.exports._secp256k1_ecdsa_recover(i,n,g,I),recoverableSignatureParse:(i,n,g,I)=>A.exports._secp256k1_ecdsa_recoverable_signature_parse_compact(i,n,g,I),recoverableSignatureSerialize:(i,n,g,I)=>A.exports._secp256k1_ecdsa_recoverable_signature_serialize_compact(i,n,g,I),schnorrSign:(i,n,g,I)=>A.exports._secp256k1_schnorrsig_sign(i,n,g,I),schnorrVerify:(i,n,g,I)=>A.exports._secp256k1_schnorrsig_verify(i,n,g,I),seckeyVerify:(i,n)=>A.exports._secp256k1_ec_seckey_verify(i,n),sign:(i,n,g,I,o)=>A.exports._secp256k1_ecdsa_sign(i,n,g,I,0,o),signRecoverable:(i,n,g,I)=>A.exports._secp256k1_ecdsa_sign_recoverable(i,n,g,I),signatureNormalize:(i,n,g)=>A.exports._secp256k1_ecdsa_signature_normalize(i,n,g),signatureParseCompact:(i,n,g)=>A.exports._secp256k1_ecdsa_signature_parse_compact(i,n,g),signatureParseDER:(i,n,g,I)=>A.exports._secp256k1_ecdsa_signature_parse_der(i,n,g,I),signatureSerializeCompact:(i,n,g)=>A.exports._secp256k1_ecdsa_signature_serialize_compact(i,n,g),signatureSerializeDER:(i,n,g,I)=>A.exports._secp256k1_ecdsa_signature_serialize_der(i,n,g,I),verify:(i,n,g,I)=>A.exports._secp256k1_ecdsa_verify(i,n,g,I)}),isLittleEndian=A=>{const i=new Int16Array(A),n=new Int32Array(A),g=new Uint8Array(A);return n[0]=1668509029,i[1]=25459,!(g[2]!==115||g[3]!==99)},alignMemory=(A,e)=>Math.ceil(e/A)*A,instantiateSecp256k1WasmBytes=async A=>{const I=new WebAssembly.Memory({initial:256,maximum:256});if(!isLittleEndian(I.buffer))throw new Error("Runtime error: expected the system to be little-endian.");const o=1024,a=o+67696+16,r=a,B=a+4+15&-16,C=alignMemory(16,B),c=C+5242880,Q=alignMemory(16,c),E=new Uint8Array(I.buffer),f=new Int32Array(I.buffer),u=new Uint32Array(I.buffer);f[r>>2]=Q;const h=16,w=16;let N;const Y={env:{...{DYNAMICTOP_PTR:r,STACKTOP:C,___setErrNo:d=>(N!==void 0&&(f[N()>>2]=d),d),___syscall140:()=>{throw new Error("___syscall140")},___syscall146:()=>{throw new Error("___syscall146")},___syscall6:()=>{throw new Error("___syscall6")},_abort:(d="Secp256k1 Error")=>{throw new Error(d)},_emscripten_memcpy_big:(d,y,_)=>(E.set(E.subarray(y,y+_),d),d),abort:(d="Secp256k1 Error")=>{throw new Error(d)},abortOnCannotGrowMemory:()=>{throw new Error("Secp256k1 Error: abortOnCannotGrowMemory was called.")},enlargeMemory:()=>{throw new Error("Secp256k1 Error: enlargeMemory was called.")},getTotalMemory:()=>16777216},memory:I,memoryBase:o,table:new WebAssembly.Table({element:"anyfunc",initial:h,maximum:w}),tableBase:0},global:{Infinity:1/0,NaN:NaN}};return WebAssembly.instantiate(A,Y).then(d=>(N=d.instance.exports.___errno_location,wrapSecp256k1Wasm$1(d.instance,E,u)))},getEmbeddedSecp256k1Binary=()=>base64ToBin(secp256k1Base64Bytes).buffer,instantiateSecp256k1Wasm=async()=>instantiateSecp256k1WasmBytes(getEmbeddedSecp256k1Binary()),sha256Base64Bytes="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IAJHDQUgAygCGCABIAIQKxoMAwsgAiEEDAELIANBMGogASACIAQQFiADQTxqKAIAIQQgAygCOCEBIAMoAjAhBSADKAI0IQIgA0EgaiAAQQxqIgYgACgCCBAXIAIgAygCJEcNBCADKAIgIAUgAhArGiAAQQhqQQA2AgAgA0EsaiAGEBgLIANBPGohAiADQThqIQUCQANAIARBP00NASADQTBqIAEgBEHAABAWIAIoAgAhBCAFKAIAIQEgA0EIakEAQcAAIAMoAjAgAygCNBAZIANBLGogAygCCBAYDAALAAsgA0EQaiAAQQxqIAQQGiADKAIUIARHDQEgAygCECABIAQQKxoLIABBCGogBDYCACADQUBrJAAPC0GEFBAHAAtBhBQQBwALQYQUEAcAC98EAgN/AX4jAEHQAGsiAiQAIAIgAUHMAGo2AiQgASkDACEFIAEoAgghBCACIAJBJGo2AigCQCAEQT9NBEAgAUEMaiIDIARqQYABOgAAIAEgASgCCEEBaiIENgIIIAJBGGogAyAEEBcgAigCGEEAIAIoAhwQLRpBwAAgASgCCGtBB00EQCACQShqIAMQGCACQRBqIAMgAUEIaigCABAaIAIoAhBBACACKAIUEC0aCyACQQhqIANBOBAXIAIoAgxBCEcNASACKAIIIAVCOIYgBUIohkKAgICAgIDA/wCDhCAFQhiGQoCAgICA4D+DIAVCCIZCgICAgPAfg4SEIAVCCIhCgICA+A+DIAVCGIhCgID8B4OEIAVCKIhCgP4DgyAFQjiIhISENwAAIAJBKGogAxAYIAFBCGpBADYCACACQQA2AiggAkEoakEEciEEQQAhAwJAA0AgA0EgRg0BIAQgA2pBADoAACACIAIoAihBAWo2AiggA0EBaiEDDAALAAsgAkFAayABQeQAaikAADcDACACQThqIAFB3ABqKQAANwMAIAJBMGogAUHUAGopAAA3AwAgAiABKQBMNwMoQQAhAwJAA0AgA0EgRg0BIAJBKGogA2oiBCAEKAIAIgRBGHQgBEEIdEGAgPwHcXIgBEEIdkGA/gNxIARBGHZycjYCACADQQRqIQMMAAsACyAAIAIpAyg3AAAgAEEYaiACQUBrKQMANwAAIABBEGogAkE4aikDADcAACAAQQhqIAJBMGopAwA3AAAgAkHQAGokAA8LQdwTIARBwAAQ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KAJsIQggASAPNgJkIAEgDjYCYCABIBM2AmggASAYNgJsIAEgAjYCdCABIBc2AnAgASAQNgJ4IAEgDDYCfCABQdAAaiABQeAAaiABQfAAaiAHQevZwaJ6aiAIQfr/+4V5ahAeIAEoAlwhByABKAJYIQggASgCUCEKIAEoAlQhESABIAI2AmQgASAXNgJgIAEgEDYCaCABIAw2AmwgASARNgJ0IAEgCjYCcCABIAg2AnggASAHNgJ8IAFB0ABqIAFB4ABqIAFB8ABqIA1B8vHFs3xqIBlB98fm93tqEB4gASgCXCENIAEoAlghGCABKAJQIRMgACAeIAEoAlRqNgIEIAAgEyAdajYCACAAIAogIWo2AgggACARICJqNgIMIAAgGCAcajYCECAAIA0gG2o2AhQgACAIICBqNgIYIAAgByAfajYCHCABQYABaiQAC30BAX8jAEEwayICJAAgAiABNgIEIAIgADYCACACQSxqQQE2AgAgAkEUakECNgIAIAJBHGpBAjYCACACQQE2AiQgAkGMFTYCCCACQQI2AgwgAkHMDTYCECACIAI2AiAgAiACQQRqNgIoIAIgAkEgajYCGCACQQhqQZwVECgAC3wBAX8jAEEwayIDJAAgAyACNgIEIAMgATYCACADQSxqQQE2AgAgA0EUakECNgIAIANBHGpBAjYCACADQQE2AiQgA0HcFDYCCCADQQI2AgwgA0HMDTYCECADIANBBGo2AiAgAyADNgIoIAMgA0EgajYCGCADQQhqIAAQKAAL1gEBBn8gACABKAIAIgggAigCBCIHcyACKAIAIgVxIAggB3FzIAVBHncgBUETd3MgBUEKd3NqIAIoAggiBkEadyAGQRV3cyAGQQd3cyAEaiABKAIMaiABKAIIIgQgAigCDCIJcyAGcSAEc2oiCmoiAjYCBCAAIAogASgCBGoiATYCDCAAIAJBHncgAkETd3MgAkEKd3MgAiAHIAVzcSAHIAVxc2ogBCADaiAJIAEgCSAGc3FzaiABQRp3IAFBFXdzIAFBB3dzaiIFajYCACAAIAUgCGo2AggLeAAgACACQRl3IAJBA3ZzIAJBDndzIAEoAgAiAmo2AgAgACACQRl3IAJBA3ZzIAJBDndzIAEoAgQiAmo2AgQgACACQRl3IAJBA3ZzIAJBDndzIAEoAggiAmo2AgggACACQRl3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",instantiateRipemd160Bytes=async A=>{const e=await instantiateRustWasm(A,"./ripemd160","ripemd160","ripemd160_init","ripemd160_update","ripemd160_final");return{final:e.final,hash:e.hash,init:e.init,update:e.update}},getEmbeddedRipemd160Binary=()=>base64ToBin(ripemd160Base64Bytes).buffer,cachedRipemd160={},instantiateRipemd160=async()=>{if(cachedRipemd160.cache!==void 0)return cachedRipemd160.cache;const A=instantiateRipemd160Bytes(getEmbeddedRipemd160Binary());return cachedRipemd160.cache=A,A},wrapSecp256k1Wasm=(A,e)=>{const t=A.contextCreate(ContextFlag.BOTH),i=A.malloc(72),n=A.malloc(65),g=A.malloc(32),I=A.malloc(32),o=A.malloc(64),a=A.malloc(32),r=A.malloc(64),s=A.malloc(64),B=A.malloc(32),C=A.malloc(65),l=A.malloc(4),c=l>>2,Q=()=>A.heapU32[c],E=A.malloc(4),f=E>>2,u=(x,P)=>{const eA=new Uint8Array(P);return eA.set(x),eA},h=x=>{const P=u(x,65);return A.heapU8.set(P,n),A.pubkeyParse(t,o,n,x.length)===1},w=x=>{A.heapU32.set([x],f)},N=()=>A.heapU32[f],U=(x,P)=>(w(x),A.pubkeySerialize(t,n,E,o,P),A.readHeapU8(n,N()).slice()),Y=x=>x?U(33,CompressionFlag.COMPRESSED):U(65,CompressionFlag.UNCOMPRESSED),d=x=>P=>{if(!h(P))throw new Error("Failed to parse public key.");return Y(x)},y=(x,P)=>{const eA=u(x,72);return A.heapU8.set(eA,i),P?A.signatureParseDER(t,r,i,x.length)===1:A.signatureParseCompact(t,r,i)===1},_=(x,P)=>{if(!y(x,P))throw new Error("Failed to parse signature.")},R=()=>(A.signatureSerializeCompact(t,i,r),A.readHeapU8(i,64).slice()),m=()=>(w(72),A.signatureSerializeDER(t,i,E,r),A.readHeapU8(i,N()).slice()),S=x=>P=>(_(P,x),x?R():m()),F=x=>{const P=u(x,32);A.heapU8.set(P,B)},D=(x,P)=>{A.heapU8.fill(0,x,x+P)},k=()=>{D(B,32)},G=(x,P)=>{F(x);const eA=P();return k(),eA},M=x=>P=>{if(G(P,()=>A.pubkeyCreate(t,o,B)!==1))throw new Error("Cannot derive public key from invalid private key.");return Y(x)},H=x=>{const P=u(x,32);A.heapU8.set(P,g)},J=x=>{const P=u(x,32);A.heapU8.set(P,I)},L=()=>{A.signatureNormalize(t,r,r)},O=(x,P)=>eA=>(_(eA,x),P&&L(),x?m():R()),q=(x,P,eA)=>{const sA=y(x,P);return eA&&L(),sA},Z=x=>(P,eA,sA)=>(H(eA),sA&&J(sA),G(P,()=>{if(A.sign(t,r,g,B,sA?I:0)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return x?(w(72),A.signatureSerializeDER(t,i,E,r),A.readHeapU8(i,N()).slice()):(A.signatureSerializeCompact(t,i,r),A.readHeapU8(i,64).slice())})),T=()=>(x,P)=>(H(P),G(x,()=>{if(A.schnorrSign(t,s,g,B)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return A.readHeapU8(s,64).slice()})),X=()=>(x,P)=>{if(!h(P))throw new Error("ECDH Key Exchange failed. Failed to parse public key.");return G(x,()=>{if(A.ecdh(t,a,o,B)!==1)throw new Error("ECDH Key Exchange failed. The private key is not valid.");return A.readHeapU8(a,32).slice()})},tA=x=>(H(x),A.verify(t,r,g,o)===1),v=(x,P)=>(eA,sA,rA)=>h(sA)&&q(eA,x,P)&&tA(rA),z=(x,P)=>{H(x);const eA=u(P,64);return A.heapU8.set(eA,s),A.schnorrVerify(t,s,g,o)===1},gA=()=>(x,P,eA)=>h(P)?z(eA,x):!1,oA=(x,P)=>(H(P),G(x,()=>{if(A.signRecoverable(t,C,g,B)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return A.recoverableSignatureSerialize(t,i,l,C),{recoveryId:Q(),signature:A.readHeapU8(i,64).slice()}})),aA=x=>(P,eA,sA)=>{H(sA);const rA=u(P,72);if(A.heapU8.set(rA,i),A.recoverableSignatureParse(t,C,i,eA)!==1)throw new Error("Failed to recover public key. Could not parse signature.");if(A.recover(t,o,C,g)!==1)throw new Error("Failed to recover public key. The compact signature, recovery, or message hash is invalid.");return Y(x)},iA=(x,P)=>(H(P),G(x,()=>{if(A.privkeyTweakAdd(t,B,g)!==1)throw new Error("Private key is invalid or adding failed.");return A.readHeapU8(B,32).slice()})),j=(x,P)=>(H(P),G(x,()=>{if(A.privkeyTweakMul(t,B,g)!==1)throw new Error("Private key is invalid or multiplying failed.");return A.readHeapU8(B,32).slice()})),AA=x=>(P,eA)=>{if(!h(P))throw new Error("Failed to parse public key.");if(H(eA),A.pubkeyTweakAdd(t,o,g)!==1)throw new Error("Adding failed");return Y(x)},cA=x=>(P,eA)=>{if(!h(P))throw new Error("Failed to parse public key.");if(H(eA),A.pubkeyTweakMul(t,o,g)!==1)throw new Error("Multiplying failed");return Y(x)};if(e!==void 0){const x=g,P=u(e,32);A.heapU8.set(P,x),A.contextRandomize(t,x),D(x,32)}return{addTweakPrivateKey:iA,addTweakPublicKeyCompressed:AA(!0),addTweakPublicKeyUncompressed:AA(!1),compressPublicKey:d(!0),derivePublicKeyCompressed:M(!0),derivePublicKeyUncompressed:M(!1),ecdh:X(),malleateSignatureCompact:O(!1,!1),malleateSignatureDER:O(!0,!1),mulTweakPrivateKey:j,mulTweakPublicKeyCompressed:cA(!0),mulTweakPublicKeyUncompressed:cA(!1),normalizeSignatureCompact:O(!1,!0),normalizeSignatureDER:O(!0,!0),recoverPublicKeyCompressed:aA(!0),recoverPublicKeyUncompressed:aA(!1),signMessageHashCompact:Z(!1),signMessageHashDER:Z(!0),signMessageHashRecoverableCompact:oA,signMessageHashSchnorr:T(),signatureCompactToDER:S(!1),signatureDERToCompact:S(!0),uncompressPublicKey:d(!1),validatePrivateKey:x=>G(x,()=>A.seckeyVerify(t,B)===1),validatePublicKey:h,verifySignatureCompact:v(!1,!0),verifySignatureCompactLowS:v(!1,!1),verifySignatureDER:v(!0,!0),verifySignatureDERLowS:v(!0,!1),verifySignatureSchnorr:gA()}},cachedSecp256k1={},instantiateSecp256k1=async A=>{if(cachedSecp256k1.cache!==void 0)return cachedSecp256k1.cache;const e=Promise.resolve(wrapSecp256k1Wasm(await instantiateSecp256k1Wasm(),A));return cachedSecp256k1.cache=e,e},instantiateSha256Bytes=async A=>{const e=await instantiateRustWasm(A,"./sha256","sha256","sha256_init","sha256_update","sha256_final");return{final:e.final,hash:e.hash,init:e.init,update:e.update}},getEmbeddedSha256Binary=()=>base64ToBin(sha256Base64Bytes).buffer,cachedSha256={},instantiateSha256=async()=>{if(cachedSha256.cache!==void 0)return cachedSha256.cache;const A=instantiateSha256Bytes(getEmbeddedSha256Binary());return cachedSha256.cache=A,A};var sha256Uint8array={};Object.defineProperty(sha256Uint8array,"__esModule",{value:!0});sha256Uint8array.Hash=createHash_1=sha256Uint8array.createHash=void 0;const K=[1116352408,1899447441,-1245643825,-373957723,961987163,1508970993,-1841331548,-1424204075,-670586216,310598401,607225278,1426881987,1925078388,-2132889090,-1680079193,-1046744716,-459576895,-272742522,264347078,604807628,770255983,1249150122,1555081692,1996064986,-1740746414,-1473132947,-1341970488,-1084653625,-958395405,-710438585,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,-2117940946,-1838011259,-1564481375,-1474664885,-1035236496,-949202525,-778901479,-694614492,-200395387,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,-2067236844,-1933114872,-1866530822,-1538233109,-1090935817,-965641998],algorithms={sha256:1};function createHash(A){if(A&&!algorithms[A]&&!algorithms[A.toLowerCase()])throw new Error("Digest method not supported");return new Hash}var createHash_1=sha256Uint8array.createHash=createHash;class Hash{constructor(){this.A=1779033703,this.B=-1150833019,this.C=1013904242,this.D=-1521486534,this.E=1359893119,this.F=-1694144372,this.G=528734635,this.H=1541459225,this._size=0,this._sp=0,(!sharedBuffer||sharedOffset>=8e3)&&(sharedBuffer=new ArrayBuffer(8e3),sharedOffset=0),this._byte=new Uint8Array(sharedBuffer,sharedOffset,80),this._word=new Int32Array(sharedBuffer,sharedOffset,20),sharedOffset+=80}update(e){if(typeof e=="string")return this._utf8(e);if(e==null)throw new TypeError("Invalid type: "+typeof e);const t=e.byteOffset,i=e.byteLength;let n=i/64|0,g=0;if(n&&!(t&3)&&!(this._size%64)){const o=new Int32Array(e.buffer,t,n*16);for(;n--;)this._int32(o,g>>2),g+=64;this._size+=g}if(e.BYTES_PER_ELEMENT!==1&&e.buffer){const o=new Uint8Array(e.buffer,t+g,i-g);return this._uint8(o)}return g===i?this:this._uint8(e,g)}_uint8(e,t){const{_byte:i,_word:n}=this,g=e.length;for(t=t|0;t<g;){const I=this._size%64;let o=I;for(;t<g&&o<64;)i[o++]=e[t++];o>=64&&this._int32(n),this._size+=o-I}return this}_utf8(e){const{_byte:t,_word:i}=this,n=e.length;let g=this._sp;for(let I=0;I<n;){const o=this._size%64;let a=o;for(;I<n&&a<64;){let r=e.charCodeAt(I++)|0;r<128?t[a++]=r:r<2048?(t[a++]=192|r>>>6,t[a++]=128|r&63):r<55296||r>57343?(t[a++]=224|r>>>12,t[a++]=128|r>>>6&63,t[a++]=128|r&63):g?(r=((g&1023)<<10)+(r&1023)+65536,t[a++]=240|r>>>18,t[a++]=128|r>>>12&63,t[a++]=128|r>>>6&63,t[a++]=128|r&63,g=0):g=r}a>=64&&(this._int32(i),i[0]=i[16]),this._size+=a-o}return this._sp=g,this}_int32(e,t){let{A:i,B:n,C:g,D:I,E:o,F:a,G:r,H:s}=this,B=0;for(t=t|0;B<16;)W[B++]=swap32(e[t++]);for(B=16;B<64;B++)W[B]=gamma1(W[B-2])+W[B-7]+gamma0(W[B-15])+W[B-16]|0;for(B=0;B<64;B++){const C=s+sigma1(o)+ch(o,a,r)+K[B]+W[B]|0,l=sigma0(i)+maj(i,n,g)|0;s=r,r=a,a=o,o=I+C|0,I=g,g=n,n=i,i=C+l|0}this.A=i+this.A|0,this.B=n+this.B|0,this.C=g+this.C|0,this.D=I+this.D|0,this.E=o+this.E|0,this.F=a+this.F|0,this.G=r+this.G|0,this.H=s+this.H|0}digest(e){const{_byte:t,_word:i}=this;let n=this._size%64|0;for(t[n++]=128;n&3;)t[n++]=0;if(n>>=2,n>14){for(;n<16;)i[n++]=0;n=0,this._int32(i)}for(;n<16;)i[n++]=0;const g=this._size*8,I=(g&4294967295)>>>0,o=(g-I)/4294967296;return o&&(i[14]=swap32(o)),I&&(i[15]=swap32(I)),this._int32(i),e==="hex"?this._hex():this._bin()}_hex(){const{A:e,B:t,C:i,D:n,E:g,F:I,G:o,H:a}=this;return hex32(e)+hex32(t)+hex32(i)+hex32(n)+hex32(g)+hex32(I)+hex32(o)+hex32(a)}_bin(){const{A:e,B:t,C:i,D:n,E:g,F:I,G:o,H:a,_byte:r,_word:s}=this;return s[0]=swap32(e),s[1]=swap32(t),s[2]=swap32(i),s[3]=swap32(n),s[4]=swap32(g),s[5]=swap32(I),s[6]=swap32(o),s[7]=swap32(a),r.slice(0,32)}}sha256Uint8array.Hash=Hash;const W=new Int32Array(64);let sharedBuffer,sharedOffset=0;const hex32=A=>(A+4294967296).toString(16).substr(-8),swapLE=A=>A<<24&4278190080|A<<8&16711680|A>>8&65280|A>>24&255,swapBE=A=>A,swap32=isBE()?swapBE:swapLE,ch=(A,e,t)=>t^A&(e^t),maj=(A,e,t)=>A&e|t&(A|e),sigma0=A=>(A>>>2|A<<30)^(A>>>13|A<<19)^(A>>>22|A<<10),sigma1=A=>(A>>>6|A<<26)^(A>>>11|A<<21)^(A>>>25|A<<7),gamma0=A=>(A>>>7|A<<25)^(A>>>18|A<<14)^A>>>3,gamma1=A=>(A>>>17|A<<15)^(A>>>19|A<<13)^A>>>10;function isBE(){return new Uint8Array(new Uint16Array([65279]).buffer)[0]===254}async function sha256$1(A){return new Uint8Array(await crypto.subtle.digest("SHA-256",A))}const sha256_sync_insecure=A=>createHash_1().update(A).digest();let y_sha256;instantiateSha256().then(A=>y_sha256=A);const sha256_sync$1=A=>y_sha256.final(y_sha256.update(y_sha256.init(),A));let y_ripemd;instantiateRipemd160().then(A=>y_ripemd=A);const ripemd160_sync=A=>y_ripemd.final(y_ripemd.update(y_ripemd.init(),A));function zero_out(A){if(A.fill(0),A.reduce((e,t)=>e+t,0)!==0)throw new Error("Failed to zero out sensitive memory region")}function text_to_buffer(A){return new TextEncoder().encode(A)}function buffer_to_text(A){return new TextDecoder().decode(A)}const sfcc=String.fromCharCode;function buffer_to_hex(A){let e="";for(const t of A)e+=t.toString(16).padStart(2,"0");return e}function hex_to_buffer(A){const e=A.length;if(e%2!==0)throw new Error("Invalid hex string length is not a multiple of 2");const t=e/2,i=new Uint8Array(t);for(let n=0;n<t;n++)i[n]=parseInt(A.slice(n+n,n+n+2),16);return i}function buffer_to_base64(A){return globalThis.btoa(buffer_to_string8(A))}function base64_to_buffer(A){return string8_to_buffer(globalThis.atob(A))}function buffer_to_string8(A){let e="";for(const t of A)e+=sfcc(t);return e}function string8_to_buffer(A){const e=A.length,t=new Uint8Array(e);for(let i=0;i<e;i++)t[i]=A.charCodeAt(i);return t}var sha256={exports:{}},core={exports:{}};(function(A,e){(function(t,i){A.exports=i()})(commonjsGlobal,function(){var t=t||function(i,n){var g;if(typeof window<"u"&&window.crypto&&(g=window.crypto),typeof self<"u"&&self.crypto&&(g=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(g=globalThis.crypto),!g&&typeof window<"u"&&window.msCrypto&&(g=window.msCrypto),!g&&typeof commonjsGlobal<"u"&&commonjsGlobal.crypto&&(g=commonjsGlobal.crypto),!g&&typeof commonjsRequire=="function")try{g=require("crypto")}catch{}var I=function(){if(g){if(typeof g.getRandomValues=="function")try{return g.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof g.randomBytes=="function")try{return g.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},o=Object.create||function(){function u(){}return function(h){var w;return u.prototype=h,w=new u,u.prototype=null,w}}(),a={},r=a.lib={},s=r.Base=function(){return{extend:function(u){var h=o(this);return u&&h.mixIn(u),(!h.hasOwnProperty("init")||this.init===h.init)&&(h.init=function(){h.$super.init.apply(this,arguments)}),h.init.prototype=h,h.$super=this,h},create:function(){var u=this.extend();return u.init.apply(u,arguments),u},init:function(){},mixIn:function(u){for(var h in u)u.hasOwnProperty(h)&&(this[h]=u[h]);u.hasOwnProperty("toString")&&(this.toString=u.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),B=r.WordArray=s.extend({init:function(u,h){u=this.words=u||[],h!=n?this.sigBytes=h:this.sigBytes=u.length*4},toString:function(u){return(u||l).stringify(this)},concat:function(u){var h=this.words,w=u.words,N=this.sigBytes,U=u.sigBytes;if(this.clamp(),N%4)for(var Y=0;Y<U;Y++){var d=w[Y>>>2]>>>24-Y%4*8&255;h[N+Y>>>2]|=d<<24-(N+Y)%4*8}else for(var y=0;y<U;y+=4)h[N+y>>>2]=w[y>>>2];return this.sigBytes+=U,this},clamp:function(){var u=this.words,h=this.sigBytes;u[h>>>2]&=4294967295<<32-h%4*8,u.length=i.ceil(h/4)},clone:function(){var u=s.clone.call(this);return u.words=this.words.slice(0),u},random:function(u){for(var h=[],w=0;w<u;w+=4)h.push(I());return new B.init(h,u)}}),C=a.enc={},l=C.Hex={stringify:function(u){for(var h=u.words,w=u.sigBytes,N=[],U=0;U<w;U++){var Y=h[U>>>2]>>>24-U%4*8&255;N.push((Y>>>4).toString(16)),N.push((Y&15).toString(16))}return N.join("")},parse:function(u){for(var h=u.length,w=[],N=0;N<h;N+=2)w[N>>>3]|=parseInt(u.substr(N,2),16)<<24-N%8*4;return new B.init(w,h/2)}},c=C.Latin1={stringify:function(u){for(var h=u.words,w=u.sigBytes,N=[],U=0;U<w;U++){var Y=h[U>>>2]>>>24-U%4*8&255;N.push(String.fromCharCode(Y))}return N.join("")},parse:function(u){for(var h=u.length,w=[],N=0;N<h;N++)w[N>>>2]|=(u.charCodeAt(N)&255)<<24-N%4*8;return new B.init(w,h)}},Q=C.Utf8={stringify:function(u){try{return decodeURIComponent(escape(c.stringify(u)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(u){return c.parse(unescape(encodeURIComponent(u)))}},E=r.BufferedBlockAlgorithm=s.extend({reset:function(){this._data=new B.init,this._nDataBytes=0},_append:function(u){typeof u=="string"&&(u=Q.parse(u)),this._data.concat(u),this._nDataBytes+=u.sigBytes},_process:function(u){var h,w=this._data,N=w.words,U=w.sigBytes,Y=this.blockSize,d=Y*4,y=U/d;u?y=i.ceil(y):y=i.max((y|0)-this._minBufferSize,0);var _=y*Y,R=i.min(_*4,U);if(_){for(var m=0;m<_;m+=Y)this._doProcessBlock(N,m);h=N.splice(0,_),w.sigBytes-=R}return new B.init(h,R)},clone:function(){var u=s.clone.call(this);return u._data=this._data.clone(),u},_minBufferSize:0});r.Hasher=E.extend({cfg:s.extend(),init:function(u){this.cfg=this.cfg.extend(u),this.reset()},reset:function(){E.reset.call(this),this._doReset()},update:function(u){return this._append(u),this._process(),this},finalize:function(u){u&&this._append(u);var h=this._doFinalize();return h},blockSize:16,_createHelper:function(u){return function(h,w){return new u.init(w).finalize(h)}},_createHmacHelper:function(u){return function(h,w){return new f.HMAC.init(u,w).finalize(h)}}});var f=a.algo={};return a}(Math);return t})})(core);(function(A,e){(function(t,i){A.exports=i(core.exports)})(commonjsGlobal,function(t){return function(i){var n=t,g=n.lib,I=g.WordArray,o=g.Hasher,a=n.algo,r=[],s=[];(function(){function l(f){for(var u=i.sqrt(f),h=2;h<=u;h++)if(!(f%h))return!1;return!0}function c(f){return(f-(f|0))*4294967296|0}for(var Q=2,E=0;E<64;)l(Q)&&(E<8&&(r[E]=c(i.pow(Q,1/2))),s[E]=c(i.pow(Q,1/3)),E++),Q++})();var B=[],C=a.SHA256=o.extend({_doReset:function(){this._hash=new I.init(r.slice(0))},_doProcessBlock:function(l,c){for(var Q=this._hash.words,E=Q[0],f=Q[1],u=Q[2],h=Q[3],w=Q[4],N=Q[5],U=Q[6],Y=Q[7],d=0;d<64;d++){if(d<16)B[d]=l[c+d]|0;else{var y=B[d-15],_=(y<<25|y>>>7)^(y<<14|y>>>18)^y>>>3,R=B[d-2],m=(R<<15|R>>>17)^(R<<13|R>>>19)^R>>>10;B[d]=_+B[d-7]+m+B[d-16]}var S=w&N^~w&U,F=E&f^E&u^f&u,D=(E<<30|E>>>2)^(E<<19|E>>>13)^(E<<10|E>>>22),k=(w<<26|w>>>6)^(w<<21|w>>>11)^(w<<7|w>>>25),G=Y+k+S+s[d]+B[d],M=D+F;Y=U,U=N,N=w,w=h+G|0,h=u,u=f,f=E,E=G+M|0}Q[0]=Q[0]+E|0,Q[1]=Q[1]+f|0,Q[2]=Q[2]+u|0,Q[3]=Q[3]+h|0,Q[4]=Q[4]+w|0,Q[5]=Q[5]+N|0,Q[6]=Q[6]+U|0,Q[7]=Q[7]+Y|0},_doFinalize:function(){var l=this._data,c=l.words,Q=this._nDataBytes*8,E=l.sigBytes*8;return c[E>>>5]|=128<<24-E%32,c[(E+64>>>9<<4)+14]=i.floor(Q/4294967296),c[(E+64>>>9<<4)+15]=Q,l.sigBytes=c.length*4,this._process(),this._hash},clone:function(){var l=o.clone.call(this);return l._hash=this._hash.clone(),l}});n.SHA256=o._createHelper(C),n.HmacSHA256=o._createHmacHelper(C)}(Math),t.SHA256})})(sha256);var sha256_sync=sha256.exports,sha512={exports:{}},x64Core={exports:{}};(function(A,e){(function(t,i){A.exports=i(core.exports)})(commonjsGlobal,function(t){return function(i){var n=t,g=n.lib,I=g.Base,o=g.WordArray,a=n.x64={};a.Word=I.extend({init:function(r,s){this.high=r,this.low=s}}),a.WordArray=I.extend({init:function(r,s){r=this.words=r||[],s!=i?this.sigBytes=s:this.sigBytes=r.length*8},toX32:function(){for(var r=this.words,s=r.length,B=[],C=0;C<s;C++){var l=r[C];B.push(l.high),B.push(l.low)}return o.create(B,this.sigBytes)},clone:function(){for(var r=I.clone.call(this),s=r.words=this.words.slice(0),B=s.length,C=0;C<B;C++)s[C]=s[C].clone();return r}})}(),t})})(x64Core);(function(A,e){(function(t,i,n){A.exports=i(core.exports,x64Core.exports)})(commonjsGlobal,function(t){return function(){var i=t,n=i.lib,g=n.Hasher,I=i.x64,o=I.Word,a=I.WordArray,r=i.algo;function s(){return o.create.apply(o,arguments)}var B=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],C=[];(function(){for(var c=0;c<80;c++)C[c]=s()})();var l=r.SHA512=g.extend({_doReset:function(){this._hash=new a.init([new o.init(1779033703,4089235720),new o.init(3144134277,2227873595),new o.init(1013904242,4271175723),new o.init(2773480762,1595750129),new o.init(1359893119,2917565137),new o.init(2600822924,725511199),new o.init(528734635,4215389547),new o.init(1541459225,327033209)])},_doProcessBlock:function(c,Q){for(var E=this._hash.words,f=E[0],u=E[1],h=E[2],w=E[3],N=E[4],U=E[5],Y=E[6],d=E[7],y=f.high,_=f.low,R=u.high,m=u.low,S=h.high,F=h.low,D=w.high,k=w.low,G=N.high,M=N.low,H=U.high,J=U.low,L=Y.high,O=Y.low,q=d.high,Z=d.low,T=y,X=_,tA=R,v=m,z=S,gA=F,oA=D,aA=k,iA=G,j=M,AA=H,cA=J,x=L,P=O,eA=q,sA=Z,rA=0;rA<80;rA++){var BA,EA,DA=C[rA];if(rA<16)EA=DA.high=c[Q+rA*2]|0,BA=DA.low=c[Q+rA*2+1]|0;else{var NA=C[rA-15],uA=NA.high,wA=NA.low,MA=(uA>>>1|wA<<31)^(uA>>>8|wA<<24)^uA>>>7,kA=(wA>>>1|uA<<31)^(wA>>>8|uA<<24)^(wA>>>7|uA<<25),KA=C[rA-2],dA=KA.high,hA=KA.low,IA=(dA>>>19|hA<<13)^(dA<<3|hA>>>29)^dA>>>6,yA=(hA>>>19|dA<<13)^(hA<<3|dA>>>29)^(hA>>>6|dA<<26),RA=C[rA-7],FA=RA.high,GA=RA.low,mA=C[rA-16],PA=mA.high,YA=mA.low;BA=kA+GA,EA=MA+FA+(BA>>>0<kA>>>0?1:0),BA=BA+yA,EA=EA+IA+(BA>>>0<yA>>>0?1:0),BA=BA+YA,EA=EA+PA+(BA>>>0<YA>>>0?1:0),DA.high=EA,DA.low=BA}var _A=iA&AA^~iA&x,JA=j&cA^~j&P,ZA=T&tA^T&z^tA&z,XA=X&v^X&gA^v&gA,zA=(T>>>28|X<<4)^(T<<30|X>>>2)^(T<<25|X>>>7),vA=(X>>>28|T<<4)^(X<<30|T>>>2)^(X<<25|T>>>7),VA=(iA>>>14|j<<18)^(iA>>>18|j<<14)^(iA<<23|j>>>9),WA=(j>>>14|iA<<18)^(j>>>18|iA<<14)^(j<<23|iA>>>9),HA=B[rA],qA=HA.high,LA=HA.low,CA=sA+WA,fA=eA+VA+(CA>>>0<sA>>>0?1:0),CA=CA+JA,fA=fA+_A+(CA>>>0<JA>>>0?1:0),CA=CA+LA,fA=fA+qA+(CA>>>0<LA>>>0?1:0),CA=CA+BA,fA=fA+EA+(CA>>>0<BA>>>0?1:0),bA=vA+XA,jA=zA+ZA+(bA>>>0<vA>>>0?1:0);eA=x,sA=P,x=AA,P=cA,AA=iA,cA=j,j=aA+CA|0,iA=oA+fA+(j>>>0<aA>>>0?1:0)|0,oA=z,aA=gA,z=tA,gA=v,tA=T,v=X,X=CA+bA|0,T=fA+jA+(X>>>0<CA>>>0?1:0)|0}_=f.low=_+X,f.high=y+T+(_>>>0<X>>>0?1:0),m=u.low=m+v,u.high=R+tA+(m>>>0<v>>>0?1:0),F=h.low=F+gA,h.high=S+z+(F>>>0<gA>>>0?1:0),k=w.low=k+aA,w.high=D+oA+(k>>>0<aA>>>0?1:0),M=N.low=M+j,N.high=G+iA+(M>>>0<j>>>0?1:0),J=U.low=J+cA,U.high=H+AA+(J>>>0<cA>>>0?1:0),O=Y.low=O+P,Y.high=L+x+(O>>>0<P>>>0?1:0),Z=d.low=Z+sA,d.high=q+eA+(Z>>>0<sA>>>0?1:0)},_doFinalize:function(){var c=this._data,Q=c.words,E=this._nDataBytes*8,f=c.sigBytes*8;Q[f>>>5]|=128<<24-f%32,Q[(f+128>>>10<<5)+30]=Math.floor(E/4294967296),Q[(f+128>>>10<<5)+31]=E,c.sigBytes=Q.length*4,this._process();var u=this._hash.toX32();return u},clone:function(){var c=g.clone.call(this);return c._hash=this._hash.clone(),c},blockSize:1024/32});i.SHA512=g._createHelper(l),i.HmacSHA512=g._createHmacHelper(l)}(),t.SHA512})})(sha512);var sha512_sync=sha512.exports;function destroyed(){throw new Error("Method called on destroyed SensitiveBytes instance")}class SensitiveBytesContext{constructor(){lA(this,"_a_biguints",[])}random(e){const t=SensitiveBytes.random(e);return this._a_biguints.push(t),t}empty(e){const t=SensitiveBytes.random(e);return this._a_biguints.push(t),t}new(e){const t=new SensitiveBytes(e,this);return this._a_biguints.push(t),t}wipe(){for(const e of this._a_biguints)e.wipe()}}class SensitiveBytes{constructor(e,t=null){this._atu8_data=e,this._kc_context=t}static context(){return new SensitiveBytesContext}static random(e){return new SensitiveBytes(crypto.getRandomValues(new Uint8Array(e)))}static empty(e=0){return new SensitiveBytes(new Uint8Array(e))}get data(){return this._atu8_data}clone(){return new SensitiveBytes(Uint8Array.from(this._atu8_data),this._kc_context)}wipe(){this._atu8_data.fill(0),this.clone=this.wipe=this.diff=this.compare=this.mod=destroyed,Object.defineProperties(this,{data:{get:destroyed},digits:{get:destroyed}})}leftShift(e){if(Number.isInteger(e)||e<0)throw this.wipe(),new Error("Refusing to left shift by argument that is not a non-negative integer");if(e===0)return this.clone();const t=this._atu8_data.byteLength,i=new Uint8Array(t),n=e>>>3,g=this._atu8_data.subarray(n),I=e%8;if(I===0)return i.set(g),new SensitiveBytes(i);const o=255>>>I,a=8-I;let r=0;for(;r<t-1-n;r++)i[r]=(g[r]&o)<<I|g[r+1]>>>a;return n===0&&(i[r]<<=e),new SensitiveBytes(i)}rightShift(e){if(Number.isInteger(e)||e<0)throw this.wipe(),new Error("Refusing to left shift by argument that is not a non-negative integer");if(e===0)return this.clone();const t=this._atu8_data,i=t.byteLength,n=new Uint8Array(i),g=e%8,I=e>>>3;if(g===0)return n.set(t,I),new SensitiveBytes(n);const o=t.subarray(0,i-(e>>>3)),a=8-g;I===0&&(n[0]>>=e);let r=1;for(;r<i-1;r++)n[r]=o[r-1]<<a&255|o[r]>>>g;return new SensitiveBytes(n)}xor(e){const t=this._atu8_data,i=e._atu8_data,n=t.byteLength;if(n!==i.byteLength)throw this.wipe(),e.wipe(),new Error("Refusing to XOR buffers of different byte length");const g=new Uint8Array(n);for(let I=0;I<n;I++)g[I]=t[I]^i[I];return new SensitiveBytes(g)}split(e){const t=this.data,i=t.byteLength,n=[];let g=0;for(let I=0;I<i;I++)e===t[I]&&(n.push(t.subarray(g,I)),g=I+1);return n}}const d_broadcast_global=new BroadcastChannel("global");function global_broadcast(A){d_broadcast_global.postMessage(A),d_broadcast_global.dispatchEvent(new MessageEvent("message",{data:A}))}function global_receive(A){const e=t=>{const i=t.data;if(!i||!i.type)throw new Error("Ignored invalid message received on global broadcast channel");const{type:n,value:g=null}=i,I=A[n];!I||I(g)};return d_broadcast_global.addEventListener("message",e),()=>{d_broadcast_global.removeEventListener("message",e)}}async function global_wait(A,e,t=0){const i=new Error().stack||"";return new Promise((n,g)=>{let I=0;const o=global_receive({[A]:a=>{e(a)&&(o(),clearTimeout(I),n())}});Number.isInteger(t)&&t>0&&(I=globalThis.setTimeout(()=>{o(),g(new Error(`A timeout was reached waiting for the '${A}' event
${i}`))},t))})}const SI_VERSION="0.0.5",XT_SECONDS=1e3,XT_MINUTES=60*XT_SECONDS,NB_MAX_MEMO=280,R_DOMAIN_LOCALHOST=/^(localhost|127.0.0.1)(:\d+)?$/,R_DOMAIN_IP=/^\d+(?:.\d+){3}(:\d+)?$/,R_BECH32=/^(\w+)([13])([a-zA-HJ-NP-Z0-9]{25,39})$/,P_PUBLIC_SUFFIX_LIST="https://raw.githubusercontent.com/publicsuffix/list/master/public_suffix_list.dat",P_STARSHELL_DECREES="https://raw.githubusercontent.com/SolarRepublic/wallet-decrees/main/global.json",R_TRANSFER_AMOUNT=/^(\d+)(.+)/,SI_STORE_SECRETS="secrets",SI_STORE_APPS="apps",SI_STORE_APP_POLICIES="app_policies",SI_STORE_AGENTS="agents",SI_STORE_SETTINGS="settings",SI_STORE_ACCOUNTS="accounts",SI_STORE_QUERY_CACHE="query_cache",SI_STORE_TAGS="tags",SI_STORE_MEDIA="media",SI_STORE_PFPS="pfps",SI_STORE_CHAINS="chains",SI_STORE_NETWORKS="networks",SI_STORE_ENTITIES="entities",SI_STORE_EVENTS="events",SI_STORE_WEB_RESOURCES="web_resources",SI_STORE_WEB_APIS="web_apis";function precedes(A,e){return new Version(A).precedes(new Version(e))}class Version{constructor(e){lA(this,"_a_parts");this._a_parts=e.split(/\./).map(t=>{const i=t.split("-");return{value:+i[0],tag:i.slice(1).join("-")}})}compare(e){const t=this._a_parts,i=e._a_parts;for(let n=0;n<Math.min(t.length,i.length);n++){const{value:g,tag:I}=t[n],{value:o,tag:a}=i[n];if(I!==a)return NaN;const r=g-o;if(r!==0)return r}return 0}precedes(e){return this.compare(e)===-1}follows(e){return this.compare(e)===1}}async function storage_get(A){return(await browser.storage.local.get([A]))?.[A]||null}async function public_storage_get(A){return await storage_get(`@${A}`)}async function public_storage_put(A,e){const t=`@${A}`;await browser.storage.local.set({[t]:e})}const PublicStorage={async lastSeen(){return await public_storage_get("last_seen")},async isUpgrading(){const A=await PublicStorage.lastSeen();return!A||precedes(A.version,SI_VERSION)},async markSeen(){await public_storage_put("last_seen",{time:Date.now(),version:SI_VERSION})}};class NotAuthenticatedError extends Error{}class AlreadyRegisteredError extends Error{}class InvalidPassphraseError extends Error{}class UnregisteredError extends Error{}class RecoverableVaultError extends Error{}class CorruptedVaultError extends Error{}const ATU8_DUMMY_PHRASE=text_to_buffer("32-character-long-dummy-password"),ATU8_DUMMY_VECTOR=new Uint8Array(crypto.getRandomValues(new Uint8Array(16))),NL_PASSPHRASE_MINIMUM=5,NL_PASSPHRASE_MAXIMUM=1024;function acceptable(A){return typeof A=="string"&&A.length>=NL_PASSPHRASE_MINIMUM&&A.length<=NL_PASSPHRASE_MAXIMUM}async function register(A,e=F_NOOP){e("Reading from storage");const t=await Vault.getBase();if(Vault.isValidBase(t))throw new AlreadyRegisteredError;if(!A||!acceptable(A))throw new InvalidPassphraseError;const i=text_to_buffer(A);e("Deriving root keys");const n=crypto.getRandomValues(new Uint8Array(8)),I=new DataView(crypto.getRandomValues(new Uint32Array(2)).buffer).getBigUint64(0,!1);await PublicStorage.markSeen();const{new:{key:o,nonce:a}}=await Vault.deriveRootKeys(i,n,I);e("Generating signature");const r=await Vault.generateRootKeySignature(o);e("Saving to storage"),await Vault.setParsedBase({entropy:n,nonce:a,signature:r})}async function login(A,e=!1,t=F_NOOP){t("Reading from storage");const i=await Vault.getBase();if(!i)throw new UnregisteredError;if(!Vault.isValidBase(i))throw new CorruptedVaultError("Storage is corrupt; root object is missing or partially damaged");const{entropy:n,nonce:g,signature:I,version:o}=Vault.parseBase(i);if(o<1)throw new CorruptedVaultError("Vault reports to be encrypted with an unknown version identifier");if(o>1)throw new CorruptedVaultError("Vault reports to be encrypted with a newer version identifier");if(!A)throw new InvalidPassphraseError;const a=text_to_buffer(A);t("Deriving root keys");const{old:{key:r,vector:s},new:{key:B,vector:C,nonce:l},export:c}=await Vault.deriveRootKeys(a,n,g,!0);try{if(!await Vault.verifyRootKey(r,I))if(await Vault.verifyRootKey(B,I)){if(!e)throw new RecoverableVaultError}else throw new InvalidPassphraseError;t("Rotating keys"),await Vault.recryptAll(r,s,B,C),t("Generating signature");const Q=await Vault.generateRootKeySignature(B);t("Saving to storage"),await Vault.setParsedBase({entropy:n,nonce:l,signature:Q}),session_storage_is_native?await session_storage_set_native({root:B,vector:C}):await session_storage_set_wrapped({root:Array.from(c.data),vector:Array.from(C)}),c?.wipe(),global_broadcast({type:"login"}),t("Done")}catch(Q){throw c?.wipe(),Q}}async function logout(){await Vault.clearRootKey()}function syserr(A){return console.error(A),A.error||new Error(A.text)}function syswarn(A){console.warn(A)}var ContactAgentType=(A=>(A.PERSON="person",A.CONTRACT="contract",A))(ContactAgentType||{});const type_check=A=>A,H_MEDIA={"/media.image/sha256.8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156":{hash:"8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156",data:"/media/chain/akash.svg"},"/media.image/sha256.4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4":{hash:"4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4",data:"/media/chain/cosmos-hub.svg"},"/media.image/sha256.da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49":{hash:"da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49",data:"/media/chain/dvpn.png"},"/media.image/sha256.8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af":{hash:"8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af",data:"/media/chain/iris.svg"},"/media.image/sha256.e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb":{hash:"e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb",data:"/media/chain/juno.svg"},"/media.image/sha256.0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625":{hash:"0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625",data:"/media/chain/luna.svg"},"/media.image/sha256.668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27":{hash:"668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27",data:"/media/chain/monero.svg"},"/media.image/sha256.63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655":{hash:"63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655",data:"/media/chain/osmosis.svg"},"/media.image/sha256.9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056":{hash:"9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056",data:"/media/chain/regen.png"},"/media.image/sha256.b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5":{hash:"b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5",data:"/media/chain/secret-network.svg"},"/media.image/sha256.4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f":{hash:"4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f",data:"/media/token/secret-secret.svg"},"/media.image/sha256.af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc":{hash:"af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc",data:"/media/vendor/logo-128px.png"},"/media.image/sha256.a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b":{hash:"a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b",data:"/media/vendor/logo-192px.png"},"/media.image/sha256.adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e":{hash:"adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e",data:"/media/vendor/logo-256px.png"},"/media.image/sha256.345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1":{hash:"345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1",data:"/media/vendor/logo-32px.png"},"/media.image/sha256.9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13":{hash:"9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13",data:"/media/vendor/logo-48px.png"},"/media.image/sha256.4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7":{hash:"4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7",data:"/media/vendor/logo-64px.png"},"/media.image/sha256.ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196":{hash:"ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196",data:"/media/vendor/logo-96px.png"},"/media.image/sha256.602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412":{hash:"602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412",data:"/media/vendor/logo.svg"},"/media.image/sha256.861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15":{hash:"861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15",data:"/media/vendor/orb-1.png"},"/media.image/sha256.88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e":{hash:"88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e",data:"/media/vendor/orb-1.svg"},"/media.image/sha256.cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b":{hash:"cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b",data:"/media/vendor/title.svg"},"/media.image/sha256.6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622":{hash:"6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622",data:"/media/other/secret-saturn.png"},"/media.image/sha256.3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff":{hash:"3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff",data:"/media/other/supdoggie.png"}},H_MEDIA_LOOKUP={"/media/chain/akash.svg":"/media.image/sha256.8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156","/media/chain/cosmos-hub.svg":"/media.image/sha256.4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4","/media/chain/dvpn.png":"/media.image/sha256.da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49","/media/chain/iris.svg":"/media.image/sha256.8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af","/media/chain/juno.svg":"/media.image/sha256.e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb","/media/chain/luna.svg":"/media.image/sha256.0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625","/media/chain/monero.svg":"/media.image/sha256.668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27","/media/chain/osmosis.svg":"/media.image/sha256.63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655","/media/chain/regen.png":"/media.image/sha256.9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056","/media/chain/secret-network.svg":"/media.image/sha256.b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5","/media/token/secret-secret.svg":"/media.image/sha256.4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f","/media/vendor/logo-128px.png":"/media.image/sha256.af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc","/media/vendor/logo-192px.png":"/media.image/sha256.a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b","/media/vendor/logo-256px.png":"/media.image/sha256.adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e","/media/vendor/logo-32px.png":"/media.image/sha256.345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1","/media/vendor/logo-48px.png":"/media.image/sha256.9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13","/media/vendor/logo-64px.png":"/media.image/sha256.4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7","/media/vendor/logo-96px.png":"/media.image/sha256.ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196","/media/vendor/logo.svg":"/media.image/sha256.602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412","/media/vendor/orb-1.png":"/media.image/sha256.861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15","/media/vendor/orb-1.svg":"/media.image/sha256.88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e","/media/vendor/title.svg":"/media.image/sha256.cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b","/media/other/secret-saturn.png":"/media.image/sha256.6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622","/media/other/supdoggie.png":"/media.image/sha256.3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff"},H_STORE_INIT_MEDIA=type_check(H_MEDIA),cosmos_bech32s=A=>({acc:{hrp:A,separator:"1"},accpub:{hrp:`${A}pub`,separator:"1"},valoper:{hrp:`${A}valoper`,separator:"1"},valoperpub:{hrp:`${A}valoperpub`,separator:"1"},valcons:{hrp:`${A}valcons`,separator:"1"},valconspub:{hrp:`${A}valconspub`,separator:"1"}}),H_STORE_INIT_PFPS=type_check(fold([{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/vendor/logo.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/chain/cosmos-hub.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/chain/secret-network.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/token/secret-secret.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/other/secret-saturn.png"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/other/supdoggie.png"]}}],(A,e)=>({[`/template.pfp/id.${e}`]:A}))),H_LOOKUP_PFP={};for(const[A,e]of ode(H_STORE_INIT_PFPS))if(e.type==="plain"){const t=H_MEDIA[e.image.default];H_LOOKUP_PFP[t.data]=A}const H_STORE_INIT_CHAINS=type_check({"/family.cosmos/chain.pulsar-2":{name:"Secret Pulsar",pfp:H_LOOKUP_PFP["/media/chain/secret-network.svg"],family:"cosmos",id:"pulsar-2",bech32s:cosmos_bech32s("secret"),bip44:{coinType:529},coins:{SCRT:{decimals:6,denom:"uscrt",name:"Secret",pfp:H_LOOKUP_PFP["/media/chain/secret-network.svg"],extra:{coingecko_id:"secret"}}},tokenInterfaces:["snip-20","snip-21","snip-721","snip-722"],testnet:!0},"/family.cosmos/chain.theta-testnet-001":{name:"Cosmos Hub Theta",pfp:H_LOOKUP_PFP["/media/chain/cosmos-hub.svg"],family:"cosmos",id:"theta-testnet-001",bech32s:cosmos_bech32s("cosmos"),bip44:{coinType:118},coins:{ATOM:{decimals:6,denom:"uatom",name:"Cosmos",pfp:H_LOOKUP_PFP["/media/chain/cosmos-hub.svg"],extra:{coingecko_id:"cosmos-hub"}}},tokenInterfaces:["cw-20"],testnet:!0}}),H_STORE_INIT_NETWORKS=type_check(fold([{name:"\u{1D54A}ecret \u{1D54A}aturn",pfp:H_LOOKUP_PFP["/media/other/secret-saturn.png"],chain:"/family.cosmos/chain.pulsar-2",grpcWebUrl:"https://grpc.testnet.secretsaturn.net",rpcHost:"rpc.testnet.secretsaturn.net"},{name:"StarShell",pfp:H_LOOKUP_PFP["/media/vendor/logo.svg"],chain:"/family.cosmos/chain.theta-testnet-001",grpcWebUrl:"https://grpc-web.cosmos-theta.starshell.net",rpcHost:"rpc.cosmos-theta.starshell.net"}],A=>({[`/network.${buffer_to_base64(sha256_sync_insecure(text_to_buffer(A.grpcWebUrl)))}`]:A}))),H_STORE_INIT_APPS=type_check(fold([{scheme:"https",host:"app.starshell.net",connections:{},pfp:H_LOOKUP_PFP["/media/vendor/logo.svg"]},{scheme:"https",host:"faucet.secrettestnet.io",connections:{},pfp:""}],A=>({[`/scheme.${A.scheme}/host.${A.host.replace(/:/g,"+")}`]:A}))),H_STORE_INIT_AGENTS=type_check(fold([{name:"supdoggie",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:H_LOOKUP_PFP["/media/other/supdoggie.png"],address:"0mtm48ul5mcgjj4hm0a4j3td4l5pt590erl3k9",origin:"built-in"},{name:"faucet.secrettestnet.io",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:"",address:"3fqtu0lxsvn8gtlf3mz5kt75spxv93ssa6vecf",origin:"built-in"}],A=>({[`/family.${A.family}/agent.${A.address}/as.contact`]:A}))),H_STORE_INITS={[SI_STORE_APPS]:H_STORE_INIT_APPS,[SI_STORE_APP_POLICIES]:{hq:[],user:[]},[SI_STORE_ACCOUNTS]:{},[SI_STORE_AGENTS]:H_STORE_INIT_AGENTS,[SI_STORE_CHAINS]:H_STORE_INIT_CHAINS,[SI_STORE_NETWORKS]:H_STORE_INIT_NETWORKS,[SI_STORE_SETTINGS]:{},[SI_STORE_MEDIA]:H_STORE_INIT_MEDIA,[SI_STORE_PFPS]:H_STORE_INIT_PFPS,[SI_STORE_ENTITIES]:{},[SI_STORE_EVENTS]:[],[SI_STORE_SECRETS]:{},[SI_STORE_TAGS]:{registry:oderac({pink:"#D500F9",hot:"#C51162",orange:"#FF4D21",gold:"#FF8622",yellow:"#EEB521",autum:"#7E9E24",grass:"#3A6F16",teal:"#009688",sky:"#1976D2",violet:"#6200EA",gray:"#607D8B",brown:"#795548",bright:"#ffffff"},(A,e,t)=>({index:t,color:e,name:A,info:""})),map:{}},[SI_STORE_QUERY_CACHE]:{},[SI_STORE_WEB_RESOURCES]:{},[SI_STORE_WEB_APIS]:{}},ATU8_SHA256_STARSHELL=hex_to_buffer(sha256_sync("starshell").toString());hex_to_buffer(sha512_sync("starshell").toString());const N_ITERATIONS=20,NB_SALT=32,SI_PRF="SHA-512",NI_DERIVED_AES_KEY=256,NB_RECRYPTION_THRESHOLD=32*1024,GC_DERIVE_ROOT_SIGNING={name:"HMAC",hash:"SHA-256"},GC_DERIVE_ROOT_CIPHER={name:"AES-GCM",length:NI_DERIVED_AES_KEY},GC_HKDF_COMMON={name:"HKDF",hash:"SHA-256",salt:ATU8_SHA256_STARSHELL,info:Uint8Array.from([])},A_STORE_KEYS=["keys",...Object.keys(H_STORE_INITS)],SI_FRAME_LOCAL=crypto.randomUUID().slice(24),hm_privates$3=new WeakMap;async function restore_as_key(A,e,t,i){return Array.isArray(A)?await crypto.subtle.importKey("raw",Uint8Array.from(A),e,!1,i):A}function restore_as_buffer(A){return Array.isArray(A)?Uint8Array.from(A):A}const{session_storage_get,session_storage_set_native,session_storage_set_wrapped,session_storage_remove,session_storage_clear,session_storage_is_native}=(()=>{if(browser.storage.session){const A=browser.storage.session;return{async session_storage_get(e){return(await A.get([e]))[e]},session_storage_set_native(e){throw new Error("Implementation bug; cannot use native session storage")},async session_storage_set_wrapped(e){return await A.set(e)},async session_storage_remove(e){return await A.remove(e)},async session_storage_clear(){return await A.clear()},session_storage_is_native:!1}}else{const A=browser.extension.getBackgroundPage();if(!A)throw new Error("Browser does not support any type of session storage");let e=A._g_session={};return{async session_storage_get(t){return e[t]??null},async session_storage_set_native(t){for(const[i,n]of ode(t))session_storage_remove(i),e[i]=n},async session_storage_set_wrapped(t){throw new Error("Implementation bug; cannot use wrapped session storage")},async session_storage_remove(t){const i=e[t];i&&typeof i=="object"&&(Array.isArray(i)||ArrayBuffer.isView(i))&&zero_out(i),delete e[t]},async session_storage_clear(){for(const[t,i]of ode(e))session_storage_remove(t);A._g_session=e={}},session_storage_is_native:!0}}})();async function session_storage_set_isomorphic(A){session_storage_is_native?await session_storage_set_native(A):await session_storage_set_wrapped(A)}async function hkdf_params(){const A=await Vault.getBase();let e;if(Vault.isValidBase(A)){if(e=await Vault.getSalt(),!e||NB_SALT!==e.byteLength)throw new Error("Vault is irreparably corrupted. No salt was found.")}else e=crypto.getRandomValues(new Uint8Array(NB_SALT)),await Vault.setSalt(e);return{...GC_HKDF_COMMON,salt:e}}function pbkdf2_derive2(A,e=0){return async function(t){return new SensitiveBytes(new Uint8Array(await crypto.subtle.deriveBits({name:"PBKDF2",salt:A,iterations:e?Math.ceil(N_ITERATIONS*e):N_ITERATIONS,hash:SI_PRF},t,256)))}}class DecryptionError extends Error{constructor(e){super("Failed to decrypt data: "+e),this.original=e}}async function decrypt(A,e,t,i=ATU8_SHA256_STARSHELL){try{return new Uint8Array(await crypto.subtle.decrypt({name:"AES-GCM",iv:t,additionalData:i},e,A))}catch(n){throw new DecryptionError(n)}}class EncryptionError extends Error{constructor(e){super("Failed to encrypt data: "+e),this.original=e}}async function encrypt(A,e,t,i=ATU8_SHA256_STARSHELL){try{return new Uint8Array(await crypto.subtle.encrypt({name:"AES-GCM",iv:t,additionalData:i},e,A))}catch(n){throw new EncryptionError(n)}}const h_release_waiters_local={},Vault={async getBase(){return await storage_get("base")||void 0},isValidBase(A){return!!A&&typeof A=="object"&&typeof A.version=="number"&&typeof A.entropy=="string"&&typeof A.nonce=="string"&&typeof A.signature=="string"},parseBase(A){return{version:A.version,entropy:hex_to_buffer(A.entropy),nonce:BigInt(A.nonce),signature:hex_to_buffer(A.signature)}},async setParsedBase(A){return await browser.storage.local.set({base:{version:1,entropy:buffer_to_hex(A.entropy),nonce:A.nonce+"",signature:buffer_to_hex(A.signature)}})},async eraseBase(){return await browser.storage.local.remove(["base"])},async getSalt(){const A=await storage_get("salt");return A?hex_to_buffer(A):void 0},async setSalt(A){return await browser.storage.local.set({salt:buffer_to_hex(A)})},async getRootKey(){const A=await session_storage_get("root");return A?await restore_as_key(A,"HKDF",!1,["deriveKey"]):null},async clearRootKey(){let A;browser.extension.getBackgroundPage&&(A=browser.extension.getBackgroundPage())&&delete A._dk_root,global_broadcast({type:"logout"}),await Promise.all([session_storage_clear()])},deriveRootBits(A,e,t=0){return crypto.subtle.importKey("raw",A,"PBKDF2",!1,["deriveBits"]).then(pbkdf2_derive2(e,t))},async deriveRootKeys(A,e,t,i=!1){const n=(t+1n)%2n**64n,g=new Uint8Array(16),I=new Uint8Array(16);g.set(e,0),I.set(e,0),new DataView(g.buffer).setBigUint64(8,t,!1),new DataView(I.buffer).setBigUint64(8,n,!1);let o=0;await PublicStorage.lastSeen()||(o=20/N_ITERATIONS);const[a,r]=await Promise.all([Vault.deriveRootBits(A,g,o),Vault.deriveRootBits(A,I)]);zero_out(A);const[s,B]=await Promise.all([crypto.subtle.importKey("raw",a.data,"HKDF",!1,["deriveKey"]),crypto.subtle.importKey("raw",r.data,"HKDF",!1,["deriveKey"])]);return a.wipe(),i||r.wipe(),await PublicStorage.markSeen(),{old:{key:s,vector:g,nonce:t},new:{key:B,vector:I,nonce:n},export:i?r:null}},async cipherKey(A,e=!1){return crypto.subtle.deriveKey(await hkdf_params(),A,GC_DERIVE_ROOT_CIPHER,!0,e?["encrypt","decrypt"]:["decrypt"])},async signatureKey(A,e=!1){return crypto.subtle.deriveKey(await hkdf_params(),A,GC_DERIVE_ROOT_SIGNING,!1,e?["sign"]:["verify"])},async generateRootKeySignature(A){const e=await Vault.signatureKey(A,!0);return new Uint8Array(await crypto.subtle.sign("HMAC",e,ATU8_SHA256_STARSHELL))},async verifyRootKey(A,e){const t=await Vault.signatureKey(A,!1);return await crypto.subtle.verify("HMAC",t,e,ATU8_SHA256_STARSHELL)},async recryptAll(A,e,t,i){const n=[];let g=0;const[I,o]=await Promise.all([Vault.cipherKey(A,!1),Vault.cipherKey(t,!0)]);for(const a of A_STORE_KEYS){const r=await storage_get(a);if(!r)continue;const s=string8_to_buffer(r);g+=s.byteLength,n.push((async()=>{let B;try{B=await decrypt(s,I,e)}catch{B=await decrypt(s,o,e)}const C=await encrypt(B,o,i);await browser.storage.local.set({[a]:buffer_to_string8(C)}),g-=s.byteLength})()),g>NB_RECRYPTION_THRESHOLD&&(await Promise.all(n),n.length=0)}await Promise.all(n)},async peekJson(A,e){const t=await Vault.acquire(A),i=t.readJson(e);return await t.release(),i},async readonly(A){const e=await storage_get(A);return new VaultEntry(A,e??"")},async acquire(A,e=0){const t=`lock_${A}`,i=await session_storage_get(t);if(i){const[I,o]=i.split(":");if(SI_FRAME_LOCAL===I)await new Promise(a=>{let r=0;(h_release_waiters_local[A]=h_release_waiters_local[A]||[]).push(()=>{clearTimeout(r),a(void 0)}),r=globalThis.setTimeout(()=>{syserr({text:`Local lock on '${A}' lasted more than 5 seconds; possible bug in implementation.`})},5e3)});else{console.warn(`'${A}' store is currently locked on a remote frame: ${i}; waiting for release`);try{await global_wait("releaseStore",a=>A===a.key,5e3)}catch{syswarn({text:"Recovered from previous interrupted shutdown."}),await session_storage_remove(`lock_${A}`)}}}const n=SI_FRAME_LOCAL+":"+crypto.randomUUID().slice(24);if(await session_storage_set_isomorphic({[t]:n}),n!==await session_storage_get(t)){if(e>10)throw new Error(`Exceeded maximum retry count while trying to checkout "${A}" from the vault`);return await Vault.acquire(A,e+1)}global_broadcast({type:"acquireStore",value:{key:A}});const g=await storage_get(A);return new WritableVaultEntry(A,g??"")}};function VaultEntry$_fields(A){const e=hm_privates$3.get(A);if(!e)throw new Error(`Attempted to use '${A._si_key}' store after it was released or it was never opened for writing.`);return e}class VaultEntry{constructor(e,t){this._si_key=e,hm_privates$3.set(this,{atu8_ciphertext:string8_to_buffer(t)})}async read(e){const t=restore_as_buffer(await session_storage_get("vector"));if(!t)throw new NotAuthenticatedError;const i=VaultEntry$_fields(this);return i.atu8_ciphertext.byteLength?await decrypt(i.atu8_ciphertext,e,t):new Uint8Array(0)}async readJson(e){let t={};try{const i=await this.read(e);if(!i.byteLength)return null;t=JSON.parse(buffer_to_text(i)),zero_out(i)}catch(i){try{this instanceof WritableVaultEntry&&this.release()}catch{}throw i}return t}}class WritableVaultEntry extends VaultEntry{async release(){if(VaultEntry$_fields(this),hm_privates$3.delete(this),await session_storage_remove(`lock_${this._si_key}`),this._si_key in h_release_waiters_local)for(const e of h_release_waiters_local[this._si_key])e();global_broadcast({type:"releaseStore",value:{key:this._si_key}})}async write(e,t,i=!1){const n=VaultEntry$_fields(this),g=restore_as_buffer(await session_storage_get("vector"));if(!g)throw new NotAuthenticatedError;const I=await encrypt(e,t,g);await browser.storage.local.set({[this._si_key]:buffer_to_string8(I)}),zero_out(n.atu8_ciphertext),n.atu8_ciphertext=I,queueMicrotask(()=>{global_broadcast({type:"updateStore",value:{key:this._si_key,init:i}})})}async writeJson(e,t,i=!1){const n=text_to_buffer(JSON.stringify(e));return await this.write(n,t,i)}}const hm_privates$2=new WeakMap;class WritableStore{constructor(e,t,i){this._kv_store=e,this._w_cache=t,hm_privates$2.set(this,{dk_cipher:i})}get raw(){return this._w_cache}release(){return this._kv_store.release()}save(e=!1){return this._kv_store.writeJson(this._w_cache,hm_privates$2.get(this).dk_cipher,e)}}class WritableStoreArray extends WritableStore{get size(){return this._w_cache.length}at(e){return this._w_cache[e]??null}map(e){return this._w_cache.map(e)}async prepend(e){this._w_cache.unshift(e),await this.save()}async append(e){this._w_cache.unshift(e),await this.save()}}class WritableStoreMap extends WritableStore{*[Symbol.iterator](){for(const e of ode(this._w_cache))yield e}at(e){return this._w_cache[e]??null}reduce(e){return oderac(this._w_cache,e)}entries(){return ode(this._w_cache)}}class WritableStoreDict extends WritableStore{get(e){return this._w_cache[e]??null}async set(e,t){this._w_cache[e]=t,await this.save()}}async function fetch_cipher(){const A=await Vault.getRootKey();if(!A)throw new NotAuthenticatedError;return await Vault.cipherKey(A,!0)}function create_store_class({store:A,class:e,extension:t}){return Object.assign(e,{async open(i){const n=await fetch_cipher(),g=await Vault.acquire(A);let I=await g.readJson(n),o=!1;I||(I=H_STORE_INITS[A],o=!0);const a=new e(g,I,n);o&&await a.save(!0);const r=await i(a);return await a.release(),r},read(){return e.open(i=>i)},...t==="array"&&{async prepend(i){return await e.open(n=>n.prepend(i))},async append(i){return await e.open(n=>n.append(i))}},...t==="map"&&{async at(i){return await e.open(n=>n.at(i))}},...t==="dict"&&{async get(i){return await e.open(n=>n.get(i))},async set(i,n){return await e.open(g=>g.put(i,n))}}})}function subscribe_store(A,e){return global_receive({updateStore({key:t,init:i}){t===A&&e(i)}})}(async()=>await instantiateRipemd160())();const Chains=create_store_class({store:SI_STORE_CHAINS,class:class UA extends WritableStoreMap{static pathFor(e,t){return`/family.${e}/chain.${t}`}static pathFrom(e){return UA.pathFor(e.family,e.id)}static addressFor(e,t=yw_chain.get(),i=t.bech32s.acc){const n=sha256_sync$1(base64_to_buffer(e)),g=ripemd160_sync(n);return bech32.encode(i.hrp,bech32.toWords(g))}static bech32(e,t=yw_chain.get(),i=t.bech32s.acc){return`${i.hrp}${i.separator}${e}`}static get(e,t){return Chains.read().then(i=>i.get(e,t))}static at(e){return Chains.read().then(t=>t.at(e))}static isValidAddressFor(e,t,i="acc"){if(e.bech32s){const n=R_BECH32.exec(t);return n&&n[1]===e.bech32s[i].hrp&&n[2]===e.bech32s[i].separator}else return!1}*inFamily(e){const t=UA.pathFor(e,"");for(const[i,n]of ode(this._w_cache))i.startsWith(t)&&(yield[i,n])}get(e,t){const i=UA.pathFor(e,t);return this._w_cache[i]??null}async put(e){const t=UA.pathFrom(e);return this._w_cache[t]=e,await this.save(),t}}}),TokenRegistry={"cw-20":{attributes:{fungible:!1}},"snip-20":{attributes:{fungible:!0}},"snip-21":{extends:"snip-20",attributes:{fungible:!0}},"snip-721":{attributes:{fungible:!1}},"snip-722":{extends:"snip-721",attributes:{fungible:!1}}},Entities=create_store_class({store:SI_STORE_ENTITIES,class:class extends WritableStoreDict{static pathFrom(e,t=yw_chain.get()){return`${Chains.pathFrom(t)}/bech32.${e.bech32}`}static parseEntityPath(e){const t=e.slice(1).split("/");if(t.length<3||!t[0].startsWith("family.")||!t[1].startsWith("chain.")||!t[2].startsWith("bech32."))return null;let i,n="";if(t[3]==="as.contract")i="contract";else if(t[3]==="as.token")i="token";else if(t[3].startsWith("holding."))i="holding",n=t[3].slice(t[3].indexOf(".")+1);else return null;const g="/"+t.slice(0,2).join("/");return{chainRef:g,entityRef:`${g}/${t[3]}`,bech32:t[2].slice(t[2].indexOf(".")+1),type:i,...n&&{coin:n}}}static holdingPathFor(e,t,i=yw_chain_ref.get()){return`${i}/bech32.${e}/holding.${t}`}static async readTokens(e,t=null){return(await Entities.read()).tokens(Chains.pathFrom(e),t)}static async readFungibleTokens(e){const t=await Entities.read(),i=fold(e.tokenInterfaces,n=>TokenRegistry[n].attributes.fungible?{[n]:{}}:{});return t.tokens(Chains.pathFrom(e),i)}static fungibleInterfacesFor(e){return fold(e.tokenInterfaces,t=>TokenRegistry[t].attributes.fungible?{[t]:{}}:{})}static async infoForToken(e){}filteredMap(e){const t=this._w_cache,i={};for(const n in t){const g=e(n,t[n]);g&&(i[n]=g)}return i}every(e){const t=this._w_cache;for(const i in t)if(!e(i,t[i]))return!1;return!0}tokens(e,t=null){const i={};return this.every((n,g)=>{let I;if(n.startsWith(e)&&(I=g["as.contract"]))for(const o in I){if(!o.startsWith("token."))continue;const a=o.slice(6);(!t||a in t)&&(i[a][n]=I[o])}return!0}),i}}}),QueryCache=create_store_class({store:SI_STORE_QUERY_CACHE,extension:"map",class:class extends WritableStoreMap{async set(e,t){this._w_cache[e]=t,await this.save()}}});var grpcWebClient_umd$1={exports:{}};(function(A,e){(function(t,i){A.exports=i()})(commonjsGlobal,function(){return t={418:function(n,g){(function(I,o){for(var a in o)I[a]=o[a]})(g,function(I){var o={};function a(r){if(o[r])return o[r].exports;var s=o[r]={i:r,l:!1,exports:{}};return I[r].call(s.exports,s,s.exports,a),s.l=!0,s.exports}return a.m=I,a.c=o,a.i=function(r){return r},a.d=function(r,s,B){a.o(r,s)||Object.defineProperty(r,s,{configurable:!1,enumerable:!0,get:B})},a.n=function(r){var s=r&&r.__esModule?function(){return r.default}:function(){return r};return a.d(s,"a",s),s},a.o=function(r,s){return Object.prototype.hasOwnProperty.call(r,s)},a.p="",a(a.s=1)}([function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(3),s=function(){function B(C,l){C===void 0&&(C={}),l===void 0&&(l={splitValues:!1});var c,Q=this;this.headersMap={},C&&(typeof Headers<"u"&&C instanceof Headers?r.getHeaderKeys(C).forEach(function(E){r.getHeaderValues(C,E).forEach(function(f){l.splitValues?Q.append(E,r.splitHeaderValue(f)):Q.append(E,f)})}):typeof(c=C)=="object"&&typeof c.headersMap=="object"&&typeof c.forEach=="function"?C.forEach(function(E,f){Q.append(E,f)}):typeof Map<"u"&&C instanceof Map?C.forEach(function(E,f){Q.append(f,E)}):typeof C=="string"?this.appendFromString(C):typeof C=="object"&&Object.getOwnPropertyNames(C).forEach(function(E){var f=C[E];Array.isArray(f)?f.forEach(function(u){Q.append(E,u)}):Q.append(E,f)}))}return B.prototype.appendFromString=function(C){for(var l=C.split(`\r
`),c=0;c<l.length;c++){var Q=l[c],E=Q.indexOf(":");if(E>0){var f=Q.substring(0,E).trim(),u=Q.substring(E+1).trim();this.append(f,u)}}},B.prototype.delete=function(C,l){var c=r.normalizeName(C);if(l===void 0)delete this.headersMap[c];else{var Q=this.headersMap[c];if(Q){var E=Q.indexOf(l);E>=0&&Q.splice(E,1),Q.length===0&&delete this.headersMap[c]}}},B.prototype.append=function(C,l){var c=this,Q=r.normalizeName(C);Array.isArray(this.headersMap[Q])||(this.headersMap[Q]=[]),Array.isArray(l)?l.forEach(function(E){c.headersMap[Q].push(r.normalizeValue(E))}):this.headersMap[Q].push(r.normalizeValue(l))},B.prototype.set=function(C,l){var c=r.normalizeName(C);if(Array.isArray(l)){var Q=[];l.forEach(function(E){Q.push(r.normalizeValue(E))}),this.headersMap[c]=Q}else this.headersMap[c]=[r.normalizeValue(l)]},B.prototype.has=function(C,l){var c=this.headersMap[r.normalizeName(C)];if(!Array.isArray(c))return!1;if(l!==void 0){var Q=r.normalizeValue(l);return c.indexOf(Q)>=0}return!0},B.prototype.get=function(C){var l=this.headersMap[r.normalizeName(C)];return l!==void 0?l.concat():[]},B.prototype.forEach=function(C){var l=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(c){C(c,l.headersMap[c])},this)},B.prototype.toHeaders=function(){if(typeof Headers<"u"){var C=new Headers;return this.forEach(function(l,c){c.forEach(function(Q){C.append(l,Q)})}),C}throw new Error("Headers class is not defined")},B}();o.BrowserHeaders=s},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(0);o.BrowserHeaders=r.BrowserHeaders},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.iterateHeaders=function(r,s){for(var B=r[Symbol.iterator](),C=B.next();!C.done;)s(C.value[0]),C=B.next()},o.iterateHeadersKeys=function(r,s){for(var B=r.keys(),C=B.next();!C.done;)s(C.value),C=B.next()}},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(2);o.normalizeName=function(s){if(typeof s!="string"&&(s=String(s)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(s))throw new TypeError("Invalid character in header field name");return s.toLowerCase()},o.normalizeValue=function(s){return typeof s!="string"&&(s=String(s)),s},o.getHeaderValues=function(s,B){var C=s;if(C instanceof Headers&&C.getAll)return C.getAll(B);var l=C.get(B);return l&&typeof l=="string"?[l]:l},o.getHeaderKeys=function(s){var B=s,C={},l=[];return B.keys?r.iterateHeadersKeys(B,function(c){C[c]||(C[c]=!0,l.push(c))}):B.forEach?B.forEach(function(c,Q){C[Q]||(C[Q]=!0,l.push(Q))}):r.iterateHeaders(B,function(c){var Q=c[0];C[Q]||(C[Q]=!0,l.push(Q))}),l},o.splitHeaderValue=function(s){var B=[];return s.split(", ").forEach(function(C){C.split(",").forEach(function(l){B.push(l)})}),B}}]))},617:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.ChunkParser=g.ChunkType=g.encodeASCII=g.decodeASCII=void 0;var o,a=I(65);function r(E){return(f=E)===9||f===10||f===13||E>=32&&E<=126;var f}function s(E){for(var f=0;f!==E.length;++f)if(!r(E[f]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(E))}function B(E){return(128&E.getUint8(0))==128}function C(E){return E.getUint32(1,!1)}function l(E,f,u){return E.byteLength-f>=u}function c(E,f,u){if(E.slice)return E.slice(f,u);var h=E.length;u!==void 0&&(h=u);for(var w=new Uint8Array(h-f),N=0,U=f;U<h;U++)w[N++]=E[U];return w}g.decodeASCII=s,g.encodeASCII=function(E){for(var f=new Uint8Array(E.length),u=0;u!==E.length;++u){var h=E.charCodeAt(u);if(!r(h))throw new Error("Metadata contains invalid ASCII");f[u]=h}return f},function(E){E[E.MESSAGE=1]="MESSAGE",E[E.TRAILERS=2]="TRAILERS"}(o=g.ChunkType||(g.ChunkType={}));var Q=function(){function E(){this.buffer=null,this.position=0}return E.prototype.parse=function(f,u){if(f.length===0&&u)return[];var h,w=[];if(this.buffer==null)this.buffer=f,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=f,this.position=0;else{var N=this.buffer.byteLength-this.position,U=new Uint8Array(N+f.byteLength),Y=c(this.buffer,this.position);U.set(Y,0);var d=new Uint8Array(f);U.set(d,N),this.buffer=U,this.position=0}for(;;){if(!l(this.buffer,this.position,5))return w;var y=c(this.buffer,this.position,this.position+5),_=new DataView(y.buffer,y.byteOffset,y.byteLength),R=C(_);if(!l(this.buffer,this.position,5+R))return w;var m=c(this.buffer,this.position+5,this.position+5+R);if(this.position+=5+R,B(_))return w.push({chunkType:o.TRAILERS,trailers:(h=m,new a.Metadata(s(h)))}),w;w.push({chunkType:o.MESSAGE,data:m})}},E}();g.ChunkParser=Q},8:function(n,g){var I;Object.defineProperty(g,"__esModule",{value:!0}),g.httpStatusToCode=g.Code=void 0,function(o){o[o.OK=0]="OK",o[o.Canceled=1]="Canceled",o[o.Unknown=2]="Unknown",o[o.InvalidArgument=3]="InvalidArgument",o[o.DeadlineExceeded=4]="DeadlineExceeded",o[o.NotFound=5]="NotFound",o[o.AlreadyExists=6]="AlreadyExists",o[o.PermissionDenied=7]="PermissionDenied",o[o.ResourceExhausted=8]="ResourceExhausted",o[o.FailedPrecondition=9]="FailedPrecondition",o[o.Aborted=10]="Aborted",o[o.OutOfRange=11]="OutOfRange",o[o.Unimplemented=12]="Unimplemented",o[o.Internal=13]="Internal",o[o.Unavailable=14]="Unavailable",o[o.DataLoss=15]="DataLoss",o[o.Unauthenticated=16]="Unauthenticated"}(I=g.Code||(g.Code={})),g.httpStatusToCode=function(o){switch(o){case 0:return I.Internal;case 200:return I.OK;case 400:return I.InvalidArgument;case 401:return I.Unauthenticated;case 403:return I.PermissionDenied;case 404:return I.NotFound;case 409:return I.Aborted;case 412:return I.FailedPrecondition;case 429:return I.ResourceExhausted;case 499:return I.Canceled;case 500:return I.Unknown;case 501:return I.Unimplemented;case 503:return I.Unavailable;case 504:return I.DeadlineExceeded;default:return I.Unknown}}},934:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.client=void 0;var o=I(65),a=I(617),r=I(8),s=I(346),B=I(57),C=I(882);g.client=function(Q,E){return new l(Q,E)};var l=function(){function Q(E,f){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new a.ChunkParser,this.methodDefinition=E,this.props=f,this.createTransport()}return Q.prototype.createTransport=function(){var E=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,f={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:E,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(f):this.transport=B.makeDefaultTransport(f)},Q.prototype.onTransportHeaders=function(E,f){if(this.props.debug&&s.debug("onHeaders",E,f),this.closed)this.props.debug&&s.debug("grpc.onHeaders received after request was closed - ignoring");else if(f!==0){this.responseHeaders=E,this.props.debug&&s.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var u=c(E);this.props.debug&&s.debug("onHeaders.gRPCStatus",u);var h=u&&u>=0?u:r.httpStatusToCode(f);this.props.debug&&s.debug("onHeaders.code",h);var w=E.get("grpc-message")||[];if(this.props.debug&&s.debug("onHeaders.gRPCMessage",w),this.rawOnHeaders(E),h!==r.Code.OK){var N=this.decodeGRPCStatus(w[0]);this.rawOnError(h,N,E)}}},Q.prototype.onTransportChunk=function(E){var f=this;if(this.closed)this.props.debug&&s.debug("grpc.onChunk received after request was closed - ignoring");else{var u=[];try{u=this.parser.parse(E)}catch(h){return this.props.debug&&s.debug("onChunk.parsing error",h,h.message),void this.rawOnError(r.Code.Internal,"parsing error: "+h.message)}u.forEach(function(h){if(h.chunkType===a.ChunkType.MESSAGE){var w=f.methodDefinition.responseType.deserializeBinary(h.data);f.rawOnMessage(w)}else h.chunkType===a.ChunkType.TRAILERS&&(f.responseHeaders?(f.responseTrailers=new o.Metadata(h.trailers),f.props.debug&&s.debug("onChunk.trailers",f.responseTrailers)):(f.responseHeaders=new o.Metadata(h.trailers),f.rawOnHeaders(f.responseHeaders)))})}},Q.prototype.onTransportEnd=function(){if(this.props.debug&&s.debug("grpc.onEnd"),this.closed)this.props.debug&&s.debug("grpc.onEnd received after request was closed - ignoring");else if(this.responseTrailers!==void 0){var E=c(this.responseTrailers);if(E!==null){var f=this.responseTrailers.get("grpc-message"),u=this.decodeGRPCStatus(f[0]);this.rawOnEnd(E,u,this.responseTrailers)}else this.rawOnError(r.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(this.responseHeaders===void 0)return void this.rawOnError(r.Code.Unknown,"Response closed without headers");var h=c(this.responseHeaders),w=this.responseHeaders.get("grpc-message");if(this.props.debug&&s.debug("grpc.headers only response ",h,w),h===null)return void this.rawOnEnd(r.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var N=this.decodeGRPCStatus(w[0]);this.rawOnEnd(h,N,this.responseHeaders)}},Q.prototype.decodeGRPCStatus=function(E){if(!E)return"";try{return decodeURIComponent(E)}catch{return E}},Q.prototype.rawOnEnd=function(E,f,u){var h=this;this.props.debug&&s.debug("rawOnEnd",E,f,u),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(w){if(!h.closed)try{w(E,f,u)}catch(N){setTimeout(function(){throw N},0)}}))},Q.prototype.rawOnHeaders=function(E){this.props.debug&&s.debug("rawOnHeaders",E),this.completed||this.onHeadersCallbacks.forEach(function(f){try{f(E)}catch(u){setTimeout(function(){throw u},0)}})},Q.prototype.rawOnError=function(E,f,u){var h=this;u===void 0&&(u=new o.Metadata),this.props.debug&&s.debug("rawOnError",E,f),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(w){if(!h.closed)try{w(E,f,u)}catch(N){setTimeout(function(){throw N},0)}}))},Q.prototype.rawOnMessage=function(E){var f=this;this.props.debug&&s.debug("rawOnMessage",E.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach(function(u){if(!f.closed)try{u(E)}catch(h){setTimeout(function(){throw h},0)}})},Q.prototype.onHeaders=function(E){this.onHeadersCallbacks.push(E)},Q.prototype.onMessage=function(E){this.onMessageCallbacks.push(E)},Q.prototype.onEnd=function(E){this.onEndCallbacks.push(E)},Q.prototype.start=function(E){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var f=new o.Metadata(E||{});f.set("content-type","application/grpc-web+proto"),f.set("x-grpc-web","1"),this.transport.start(f)},Q.prototype.send=function(E){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var f=C.frameRequest(E);this.transport.sendMessage(f)},Q.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},Q.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&s.debug("request.abort aborting request"),this.transport.cancel()},Q}();function c(Q){var E=Q.get("grpc-status")||[];if(E.length>0)try{var f=E[0];return parseInt(f,10)}catch{return null}return null}},346:function(n,g){Object.defineProperty(g,"__esModule",{value:!0}),g.debug=void 0,g.debug=function(){for(var I=[],o=0;o<arguments.length;o++)I[o]=arguments[o];console.debug?console.debug.apply(null,I):console.log.apply(null,I)}},607:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.grpc=void 0;var o,a=I(418),r=I(57),s=I(229),B=I(540),C=I(210),l=I(859),c=I(8),Q=I(938),E=I(35),f=I(934);(o=g.grpc||(g.grpc={})).setDefaultTransport=r.setDefaultTransportFactory,o.CrossBrowserHttpTransport=l.CrossBrowserHttpTransport,o.FetchReadableStreamTransport=s.FetchReadableStreamTransport,o.XhrTransport=C.XhrTransport,o.WebsocketTransport=B.WebsocketTransport,o.Code=c.Code,o.Metadata=a.BrowserHeaders,o.client=function(u,h){return f.client(u,h)},o.invoke=Q.invoke,o.unary=E.unary},938:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.invoke=void 0;var o=I(934);g.invoke=function(a,r){if(a.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var s=o.client(a,{host:r.host,transport:r.transport,debug:r.debug});return r.onHeaders&&s.onHeaders(r.onHeaders),r.onMessage&&s.onMessage(r.onMessage),r.onEnd&&s.onEnd(r.onEnd),s.start(r.metadata),s.send(r.request),s.finishSend(),{close:function(){s.close()}}}},65:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.Metadata=void 0;var o=I(418);Object.defineProperty(g,"Metadata",{enumerable:!0,get:function(){return o.BrowserHeaders}})},57:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.makeDefaultTransport=g.setDefaultTransportFactory=void 0;var o=I(859),a=function(r){return o.CrossBrowserHttpTransport({withCredentials:!1})(r)};g.setDefaultTransportFactory=function(r){a=r},g.makeDefaultTransport=function(r){return a(r)}},229:function(n,g,I){var o=this&&this.__assign||function(){return(o=Object.assign||function(B){for(var C,l=1,c=arguments.length;l<c;l++)for(var Q in C=arguments[l])Object.prototype.hasOwnProperty.call(C,Q)&&(B[Q]=C[Q]);return B}).apply(this,arguments)};Object.defineProperty(g,"__esModule",{value:!0}),g.detectFetchSupport=g.FetchReadableStreamTransport=void 0;var a=I(65),r=I(346);g.FetchReadableStreamTransport=function(B){return function(C){return function(l,c){return l.debug&&r.debug("fetchRequest",l),new s(l,c)}(C,B)}};var s=function(){function B(C,l){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=C,this.init=l}return B.prototype.pump=function(C,l){var c=this;if(this.reader=C,this.cancelled)return this.options.debug&&r.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch(function(Q){c.options.debug&&r.debug("Fetch.pump.reader.cancel exception",Q)});this.reader.read().then(function(Q){if(Q.done)return c.options.onEnd(),l;c.options.onChunk(Q.value),c.pump(c.reader,l)}).catch(function(Q){c.cancelled?c.options.debug&&r.debug("Fetch.catch - request cancelled"):(c.cancelled=!0,c.options.debug&&r.debug("Fetch.catch",Q.message),c.options.onEnd(Q))})},B.prototype.send=function(C){var l=this;fetch(this.options.url,o(o({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:C,signal:this.controller&&this.controller.signal})).then(function(c){if(l.options.debug&&r.debug("Fetch.response",c),l.options.onHeaders(new a.Metadata(c.headers),c.status),!c.body)return c;l.pump(c.body.getReader(),c)}).catch(function(c){l.cancelled?l.options.debug&&r.debug("Fetch.catch - request cancelled"):(l.cancelled=!0,l.options.debug&&r.debug("Fetch.catch",c.message),l.options.onEnd(c))})},B.prototype.sendMessage=function(C){this.send(C)},B.prototype.finishSend=function(){},B.prototype.start=function(C){this.metadata=C},B.prototype.cancel=function(){var C=this;this.cancelled?this.options.debug&&r.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&r.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&r.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&r.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch(function(l){C.options.debug&&r.debug("Fetch.cancel.reader.cancel exception",l)})):this.options.debug&&r.debug("Fetch.cancel before reader"))},B}();g.detectFetchSupport=function(){return typeof Response<"u"&&Response.prototype.hasOwnProperty("body")&&typeof Headers=="function"}},859:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.CrossBrowserHttpTransport=void 0;var o=I(229),a=I(210);g.CrossBrowserHttpTransport=function(r){if(o.detectFetchSupport()){var s={credentials:r.withCredentials?"include":"same-origin"};return o.FetchReadableStreamTransport(s)}return a.XhrTransport({withCredentials:r.withCredentials})}},210:function(n,g,I){var o,a=this&&this.__extends||(o=function(E,f){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(u,h){u.__proto__=h}||function(u,h){for(var w in h)Object.prototype.hasOwnProperty.call(h,w)&&(u[w]=h[w])})(E,f)},function(E,f){function u(){this.constructor=E}o(E,f),E.prototype=f===null?Object.create(f):(u.prototype=f.prototype,new u)});Object.defineProperty(g,"__esModule",{value:!0}),g.stringToArrayBuffer=g.MozChunkedArrayBufferXHR=g.XHR=g.XhrTransport=void 0;var r=I(65),s=I(346),B=I(849);g.XhrTransport=function(E){return function(f){if(B.detectMozXHRSupport())return new l(f,E);if(B.detectXHROverrideMimeTypeSupport())return new C(f,E);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var C=function(){function E(f,u){this.options=f,this.init=u}return E.prototype.onProgressEvent=function(){this.options.debug&&s.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var f=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var u=Q(f);this.options.onChunk(u)},E.prototype.onLoadEvent=function(){this.options.debug&&s.debug("XHR.onLoadEvent"),this.options.onEnd()},E.prototype.onStateChange=function(){this.options.debug&&s.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new r.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},E.prototype.sendMessage=function(f){this.xhr.send(f)},E.prototype.finishSend=function(){},E.prototype.start=function(f){var u=this;this.metadata=f;var h=new XMLHttpRequest;this.xhr=h,h.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach(function(w,N){h.setRequestHeader(w,N.join(", "))}),h.withCredentials=Boolean(this.init.withCredentials),h.addEventListener("readystatechange",this.onStateChange.bind(this)),h.addEventListener("progress",this.onProgressEvent.bind(this)),h.addEventListener("loadend",this.onLoadEvent.bind(this)),h.addEventListener("error",function(w){u.options.debug&&s.debug("XHR.error",w),u.options.onEnd(w.error)})},E.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},E.prototype.cancel=function(){this.options.debug&&s.debug("XHR.abort"),this.xhr.abort()},E}();g.XHR=C;var l=function(E){function f(){return E!==null&&E.apply(this,arguments)||this}return a(f,E),f.prototype.configureXhr=function(){this.options.debug&&s.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},f.prototype.onProgressEvent=function(){var u=this.xhr.response;this.options.debug&&s.debug("MozXHR.onProgressEvent: ",new Uint8Array(u)),this.options.onChunk(new Uint8Array(u))},f}(C);function c(E,f){var u=E.charCodeAt(f);if(u>=55296&&u<=56319){var h=E.charCodeAt(f+1);h>=56320&&h<=57343&&(u=65536+(u-55296<<10)+(h-56320))}return u}function Q(E){for(var f=new Uint8Array(E.length),u=0,h=0;h<E.length;h++){var w=String.prototype.codePointAt?E.codePointAt(h):c(E,h);f[u++]=255&w}return f}g.MozChunkedArrayBufferXHR=l,g.stringToArrayBuffer=Q},849:function(n,g){var I;function o(){if(I!==void 0)return I;if(XMLHttpRequest){I=new XMLHttpRequest;try{I.open("GET","https://localhost")}catch{}}return I}function a(r){var s=o();if(!s)return!1;try{return s.responseType=r,s.responseType===r}catch{}return!1}Object.defineProperty(g,"__esModule",{value:!0}),g.detectXHROverrideMimeTypeSupport=g.detectMozXHRSupport=g.xhrSupportsResponseType=void 0,g.xhrSupportsResponseType=a,g.detectMozXHRSupport=function(){return typeof XMLHttpRequest<"u"&&a("moz-chunked-arraybuffer")},g.detectXHROverrideMimeTypeSupport=function(){return typeof XMLHttpRequest<"u"&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.WebsocketTransport=void 0;var o,a=I(346),r=I(617);(function(B){B[B.FINISH_SEND=1]="FINISH_SEND"})(o||(o={}));var s=new Uint8Array([1]);g.WebsocketTransport=function(){return function(B){return function(C){C.debug&&a.debug("websocketRequest",C);var l,c=function(f){if(f.substr(0,8)==="https://")return"wss://"+f.substr(8);if(f.substr(0,7)==="http://")return"ws://"+f.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(C.url),Q=[];function E(f){if(f===o.FINISH_SEND)l.send(s);else{var u=f,h=new Int8Array(u.byteLength+1);h.set(new Uint8Array([0])),h.set(u,1),l.send(h)}}return{sendMessage:function(f){l&&l.readyState!==l.CONNECTING?E(f):Q.push(f)},finishSend:function(){l&&l.readyState!==l.CONNECTING?E(o.FINISH_SEND):Q.push(o.FINISH_SEND)},start:function(f){(l=new WebSocket(c,["grpc-websockets"])).binaryType="arraybuffer",l.onopen=function(){var u;C.debug&&a.debug("websocketRequest.onopen"),l.send((u="",f.forEach(function(h,w){u+=h+": "+w.join(", ")+`\r
`}),r.encodeASCII(u))),Q.forEach(function(h){E(h)})},l.onclose=function(u){C.debug&&a.debug("websocketRequest.onclose",u),C.onEnd()},l.onerror=function(u){C.debug&&a.debug("websocketRequest.onerror",u)},l.onmessage=function(u){C.onChunk(new Uint8Array(u.data))}},cancel:function(){C.debug&&a.debug("websocket.abort"),l.close()}}}(B)}}},35:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.unary=void 0;var o=I(65),a=I(934);g.unary=function(r,s){if(r.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(r.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var B=null,C=null,l=a.client(r,{host:s.host,transport:s.transport,debug:s.debug});return l.onHeaders(function(c){B=c}),l.onMessage(function(c){C=c}),l.onEnd(function(c,Q,E){s.onEnd({status:c,statusMessage:Q,headers:B||new o.Metadata,message:C,trailers:E})}),l.start(s.metadata),l.send(s.request),l.finishSend(),{close:function(){l.close()}}}},882:function(n,g){Object.defineProperty(g,"__esModule",{value:!0}),g.frameRequest=void 0,g.frameRequest=function(I){var o=I.serializeBinary(),a=new ArrayBuffer(o.byteLength+5);return new DataView(a,1,4).setUint32(0,o.length,!1),new Uint8Array(a,5).set(o),new Uint8Array(a)}}},i={},function n(g){if(i[g])return i[g].exports;var I=i[g]={exports:{}};return t[g].call(I.exports,I,I.exports,n),I.exports}(607);var t,i})})(grpcWebClient_umd$1);var grpcWebClient_umd={exports:{}};(function(A,e){(function(t,i){A.exports=i()})(commonjsGlobal,function(){return t={418:function(n,g){(function(I,o){for(var a in o)I[a]=o[a]})(g,function(I){var o={};function a(r){if(o[r])return o[r].exports;var s=o[r]={i:r,l:!1,exports:{}};return I[r].call(s.exports,s,s.exports,a),s.l=!0,s.exports}return a.m=I,a.c=o,a.i=function(r){return r},a.d=function(r,s,B){a.o(r,s)||Object.defineProperty(r,s,{configurable:!1,enumerable:!0,get:B})},a.n=function(r){var s=r&&r.__esModule?function(){return r.default}:function(){return r};return a.d(s,"a",s),s},a.o=function(r,s){return Object.prototype.hasOwnProperty.call(r,s)},a.p="",a(a.s=1)}([function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(3),s=function(){function B(C,l){C===void 0&&(C={}),l===void 0&&(l={splitValues:!1});var c,Q=this;this.headersMap={},C&&(typeof Headers<"u"&&C instanceof Headers?r.getHeaderKeys(C).forEach(function(E){r.getHeaderValues(C,E).forEach(function(f){l.splitValues?Q.append(E,r.splitHeaderValue(f)):Q.append(E,f)})}):typeof(c=C)=="object"&&typeof c.headersMap=="object"&&typeof c.forEach=="function"?C.forEach(function(E,f){Q.append(E,f)}):typeof Map<"u"&&C instanceof Map?C.forEach(function(E,f){Q.append(f,E)}):typeof C=="string"?this.appendFromString(C):typeof C=="object"&&Object.getOwnPropertyNames(C).forEach(function(E){var f=C[E];Array.isArray(f)?f.forEach(function(u){Q.append(E,u)}):Q.append(E,f)}))}return B.prototype.appendFromString=function(C){for(var l=C.split(`\r
`),c=0;c<l.length;c++){var Q=l[c],E=Q.indexOf(":");if(E>0){var f=Q.substring(0,E).trim(),u=Q.substring(E+1).trim();this.append(f,u)}}},B.prototype.delete=function(C,l){var c=r.normalizeName(C);if(l===void 0)delete this.headersMap[c];else{var Q=this.headersMap[c];if(Q){var E=Q.indexOf(l);E>=0&&Q.splice(E,1),Q.length===0&&delete this.headersMap[c]}}},B.prototype.append=function(C,l){var c=this,Q=r.normalizeName(C);Array.isArray(this.headersMap[Q])||(this.headersMap[Q]=[]),Array.isArray(l)?l.forEach(function(E){c.headersMap[Q].push(r.normalizeValue(E))}):this.headersMap[Q].push(r.normalizeValue(l))},B.prototype.set=function(C,l){var c=r.normalizeName(C);if(Array.isArray(l)){var Q=[];l.forEach(function(E){Q.push(r.normalizeValue(E))}),this.headersMap[c]=Q}else this.headersMap[c]=[r.normalizeValue(l)]},B.prototype.has=function(C,l){var c=this.headersMap[r.normalizeName(C)];if(!Array.isArray(c))return!1;if(l!==void 0){var Q=r.normalizeValue(l);return c.indexOf(Q)>=0}return!0},B.prototype.get=function(C){var l=this.headersMap[r.normalizeName(C)];return l!==void 0?l.concat():[]},B.prototype.forEach=function(C){var l=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(c){C(c,l.headersMap[c])},this)},B.prototype.toHeaders=function(){if(typeof Headers<"u"){var C=new Headers;return this.forEach(function(l,c){c.forEach(function(Q){C.append(l,Q)})}),C}throw new Error("Headers class is not defined")},B}();o.BrowserHeaders=s},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(0);o.BrowserHeaders=r.BrowserHeaders},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.iterateHeaders=function(r,s){for(var B=r[Symbol.iterator](),C=B.next();!C.done;)s(C.value[0]),C=B.next()},o.iterateHeadersKeys=function(r,s){for(var B=r.keys(),C=B.next();!C.done;)s(C.value),C=B.next()}},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(2);o.normalizeName=function(s){if(typeof s!="string"&&(s=String(s)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(s))throw new TypeError("Invalid character in header field name");return s.toLowerCase()},o.normalizeValue=function(s){return typeof s!="string"&&(s=String(s)),s},o.getHeaderValues=function(s,B){var C=s;if(C instanceof Headers&&C.getAll)return C.getAll(B);var l=C.get(B);return l&&typeof l=="string"?[l]:l},o.getHeaderKeys=function(s){var B=s,C={},l=[];return B.keys?r.iterateHeadersKeys(B,function(c){C[c]||(C[c]=!0,l.push(c))}):B.forEach?B.forEach(function(c,Q){C[Q]||(C[Q]=!0,l.push(Q))}):r.iterateHeaders(B,function(c){var Q=c[0];C[Q]||(C[Q]=!0,l.push(Q))}),l},o.splitHeaderValue=function(s){var B=[];return s.split(", ").forEach(function(C){C.split(",").forEach(function(l){B.push(l)})}),B}}]))},617:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.ChunkParser=g.ChunkType=g.encodeASCII=g.decodeASCII=void 0;var o,a=I(65);function r(E){return(f=E)===9||f===10||f===13||E>=32&&E<=126;var f}function s(E){for(var f=0;f!==E.length;++f)if(!r(E[f]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(E))}function B(E){return(128&E.getUint8(0))==128}function C(E){return E.getUint32(1,!1)}function l(E,f,u){return E.byteLength-f>=u}function c(E,f,u){if(E.slice)return E.slice(f,u);var h=E.length;u!==void 0&&(h=u);for(var w=new Uint8Array(h-f),N=0,U=f;U<h;U++)w[N++]=E[U];return w}g.decodeASCII=s,g.encodeASCII=function(E){for(var f=new Uint8Array(E.length),u=0;u!==E.length;++u){var h=E.charCodeAt(u);if(!r(h))throw new Error("Metadata contains invalid ASCII");f[u]=h}return f},function(E){E[E.MESSAGE=1]="MESSAGE",E[E.TRAILERS=2]="TRAILERS"}(o=g.ChunkType||(g.ChunkType={}));var Q=function(){function E(){this.buffer=null,this.position=0}return E.prototype.parse=function(f,u){if(f.length===0&&u)return[];var h,w=[];if(this.buffer==null)this.buffer=f,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=f,this.position=0;else{var N=this.buffer.byteLength-this.position,U=new Uint8Array(N+f.byteLength),Y=c(this.buffer,this.position);U.set(Y,0);var d=new Uint8Array(f);U.set(d,N),this.buffer=U,this.position=0}for(;;){if(!l(this.buffer,this.position,5))return w;var y=c(this.buffer,this.position,this.position+5),_=new DataView(y.buffer,y.byteOffset,y.byteLength),R=C(_);if(!l(this.buffer,this.position,5+R))return w;var m=c(this.buffer,this.position+5,this.position+5+R);if(this.position+=5+R,B(_))return w.push({chunkType:o.TRAILERS,trailers:(h=m,new a.Metadata(s(h)))}),w;w.push({chunkType:o.MESSAGE,data:m})}},E}();g.ChunkParser=Q},8:function(n,g){var I;Object.defineProperty(g,"__esModule",{value:!0}),g.httpStatusToCode=g.Code=void 0,function(o){o[o.OK=0]="OK",o[o.Canceled=1]="Canceled",o[o.Unknown=2]="Unknown",o[o.InvalidArgument=3]="InvalidArgument",o[o.DeadlineExceeded=4]="DeadlineExceeded",o[o.NotFound=5]="NotFound",o[o.AlreadyExists=6]="AlreadyExists",o[o.PermissionDenied=7]="PermissionDenied",o[o.ResourceExhausted=8]="ResourceExhausted",o[o.FailedPrecondition=9]="FailedPrecondition",o[o.Aborted=10]="Aborted",o[o.OutOfRange=11]="OutOfRange",o[o.Unimplemented=12]="Unimplemented",o[o.Internal=13]="Internal",o[o.Unavailable=14]="Unavailable",o[o.DataLoss=15]="DataLoss",o[o.Unauthenticated=16]="Unauthenticated"}(I=g.Code||(g.Code={})),g.httpStatusToCode=function(o){switch(o){case 0:return I.Internal;case 200:return I.OK;case 400:return I.InvalidArgument;case 401:return I.Unauthenticated;case 403:return I.PermissionDenied;case 404:return I.NotFound;case 409:return I.Aborted;case 412:return I.FailedPrecondition;case 429:return I.ResourceExhausted;case 499:return I.Canceled;case 500:return I.Unknown;case 501:return I.Unimplemented;case 503:return I.Unavailable;case 504:return I.DeadlineExceeded;default:return I.Unknown}}},934:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.client=void 0;var o=I(65),a=I(617),r=I(8),s=I(346),B=I(57),C=I(882);g.client=function(Q,E){return new l(Q,E)};var l=function(){function Q(E,f){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new a.ChunkParser,this.methodDefinition=E,this.props=f,this.createTransport()}return Q.prototype.createTransport=function(){var E=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,f={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:E,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(f):this.transport=B.makeDefaultTransport(f)},Q.prototype.onTransportHeaders=function(E,f){if(this.props.debug&&s.debug("onHeaders",E,f),this.closed)this.props.debug&&s.debug("grpc.onHeaders received after request was closed - ignoring");else if(f!==0){this.responseHeaders=E,this.props.debug&&s.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var u=c(E);this.props.debug&&s.debug("onHeaders.gRPCStatus",u);var h=u&&u>=0?u:r.httpStatusToCode(f);this.props.debug&&s.debug("onHeaders.code",h);var w=E.get("grpc-message")||[];if(this.props.debug&&s.debug("onHeaders.gRPCMessage",w),this.rawOnHeaders(E),h!==r.Code.OK){var N=this.decodeGRPCStatus(w[0]);this.rawOnError(h,N,E)}}},Q.prototype.onTransportChunk=function(E){var f=this;if(this.closed)this.props.debug&&s.debug("grpc.onChunk received after request was closed - ignoring");else{var u=[];try{u=this.parser.parse(E)}catch(h){return this.props.debug&&s.debug("onChunk.parsing error",h,h.message),void this.rawOnError(r.Code.Internal,"parsing error: "+h.message)}u.forEach(function(h){if(h.chunkType===a.ChunkType.MESSAGE){var w=f.methodDefinition.responseType.deserializeBinary(h.data);f.rawOnMessage(w)}else h.chunkType===a.ChunkType.TRAILERS&&(f.responseHeaders?(f.responseTrailers=new o.Metadata(h.trailers),f.props.debug&&s.debug("onChunk.trailers",f.responseTrailers)):(f.responseHeaders=new o.Metadata(h.trailers),f.rawOnHeaders(f.responseHeaders)))})}},Q.prototype.onTransportEnd=function(){if(this.props.debug&&s.debug("grpc.onEnd"),this.closed)this.props.debug&&s.debug("grpc.onEnd received after request was closed - ignoring");else if(this.responseTrailers!==void 0){var E=c(this.responseTrailers);if(E!==null){var f=this.responseTrailers.get("grpc-message"),u=this.decodeGRPCStatus(f[0]);this.rawOnEnd(E,u,this.responseTrailers)}else this.rawOnError(r.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(this.responseHeaders===void 0)return void this.rawOnError(r.Code.Unknown,"Response closed without headers");var h=c(this.responseHeaders),w=this.responseHeaders.get("grpc-message");if(this.props.debug&&s.debug("grpc.headers only response ",h,w),h===null)return void this.rawOnEnd(r.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var N=this.decodeGRPCStatus(w[0]);this.rawOnEnd(h,N,this.responseHeaders)}},Q.prototype.decodeGRPCStatus=function(E){if(!E)return"";try{return decodeURIComponent(E)}catch{return E}},Q.prototype.rawOnEnd=function(E,f,u){var h=this;this.props.debug&&s.debug("rawOnEnd",E,f,u),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(w){if(!h.closed)try{w(E,f,u)}catch(N){setTimeout(function(){throw N},0)}}))},Q.prototype.rawOnHeaders=function(E){this.props.debug&&s.debug("rawOnHeaders",E),this.completed||this.onHeadersCallbacks.forEach(function(f){try{f(E)}catch(u){setTimeout(function(){throw u},0)}})},Q.prototype.rawOnError=function(E,f,u){var h=this;u===void 0&&(u=new o.Metadata),this.props.debug&&s.debug("rawOnError",E,f),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(w){if(!h.closed)try{w(E,f,u)}catch(N){setTimeout(function(){throw N},0)}}))},Q.prototype.rawOnMessage=function(E){var f=this;this.props.debug&&s.debug("rawOnMessage",E.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach(function(u){if(!f.closed)try{u(E)}catch(h){setTimeout(function(){throw h},0)}})},Q.prototype.onHeaders=function(E){this.onHeadersCallbacks.push(E)},Q.prototype.onMessage=function(E){this.onMessageCallbacks.push(E)},Q.prototype.onEnd=function(E){this.onEndCallbacks.push(E)},Q.prototype.start=function(E){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var f=new o.Metadata(E||{});f.set("content-type","application/grpc-web+proto"),f.set("x-grpc-web","1"),this.transport.start(f)},Q.prototype.send=function(E){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var f=C.frameRequest(E);this.transport.sendMessage(f)},Q.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},Q.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&s.debug("request.abort aborting request"),this.transport.cancel()},Q}();function c(Q){var E=Q.get("grpc-status")||[];if(E.length>0)try{var f=E[0];return parseInt(f,10)}catch{return null}return null}},346:function(n,g){Object.defineProperty(g,"__esModule",{value:!0}),g.debug=void 0,g.debug=function(){for(var I=[],o=0;o<arguments.length;o++)I[o]=arguments[o];console.debug?console.debug.apply(null,I):console.log.apply(null,I)}},607:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.grpc=void 0;var o,a=I(418),r=I(57),s=I(229),B=I(540),C=I(210),l=I(859),c=I(8),Q=I(938),E=I(35),f=I(934);(o=g.grpc||(g.grpc={})).setDefaultTransport=r.setDefaultTransportFactory,o.CrossBrowserHttpTransport=l.CrossBrowserHttpTransport,o.FetchReadableStreamTransport=s.FetchReadableStreamTransport,o.XhrTransport=C.XhrTransport,o.WebsocketTransport=B.WebsocketTransport,o.Code=c.Code,o.Metadata=a.BrowserHeaders,o.client=function(u,h){return f.client(u,h)},o.invoke=Q.invoke,o.unary=E.unary},938:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.invoke=void 0;var o=I(934);g.invoke=function(a,r){if(a.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var s=o.client(a,{host:r.host,transport:r.transport,debug:r.debug});return r.onHeaders&&s.onHeaders(r.onHeaders),r.onMessage&&s.onMessage(r.onMessage),r.onEnd&&s.onEnd(r.onEnd),s.start(r.metadata),s.send(r.request),s.finishSend(),{close:function(){s.close()}}}},65:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.Metadata=void 0;var o=I(418);Object.defineProperty(g,"Metadata",{enumerable:!0,get:function(){return o.BrowserHeaders}})},57:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.makeDefaultTransport=g.setDefaultTransportFactory=void 0;var o=I(859),a=function(r){return o.CrossBrowserHttpTransport({withCredentials:!1})(r)};g.setDefaultTransportFactory=function(r){a=r},g.makeDefaultTransport=function(r){return a(r)}},229:function(n,g,I){var o=this&&this.__assign||function(){return(o=Object.assign||function(B){for(var C,l=1,c=arguments.length;l<c;l++)for(var Q in C=arguments[l])Object.prototype.hasOwnProperty.call(C,Q)&&(B[Q]=C[Q]);return B}).apply(this,arguments)};Object.defineProperty(g,"__esModule",{value:!0}),g.detectFetchSupport=g.FetchReadableStreamTransport=void 0;var a=I(65),r=I(346);g.FetchReadableStreamTransport=function(B){return function(C){return function(l,c){return l.debug&&r.debug("fetchRequest",l),new s(l,c)}(C,B)}};var s=function(){function B(C,l){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=C,this.init=l}return B.prototype.pump=function(C,l){var c=this;if(this.reader=C,this.cancelled)return this.options.debug&&r.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch(function(Q){c.options.debug&&r.debug("Fetch.pump.reader.cancel exception",Q)});this.reader.read().then(function(Q){if(Q.done)return c.options.onEnd(),l;c.options.onChunk(Q.value),c.pump(c.reader,l)}).catch(function(Q){c.cancelled?c.options.debug&&r.debug("Fetch.catch - request cancelled"):(c.cancelled=!0,c.options.debug&&r.debug("Fetch.catch",Q.message),c.options.onEnd(Q))})},B.prototype.send=function(C){var l=this;fetch(this.options.url,o(o({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:C,signal:this.controller&&this.controller.signal})).then(function(c){if(l.options.debug&&r.debug("Fetch.response",c),l.options.onHeaders(new a.Metadata(c.headers),c.status),!c.body)return c;l.pump(c.body.getReader(),c)}).catch(function(c){l.cancelled?l.options.debug&&r.debug("Fetch.catch - request cancelled"):(l.cancelled=!0,l.options.debug&&r.debug("Fetch.catch",c.message),l.options.onEnd(c))})},B.prototype.sendMessage=function(C){this.send(C)},B.prototype.finishSend=function(){},B.prototype.start=function(C){this.metadata=C},B.prototype.cancel=function(){var C=this;this.cancelled?this.options.debug&&r.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&r.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&r.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&r.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch(function(l){C.options.debug&&r.debug("Fetch.cancel.reader.cancel exception",l)})):this.options.debug&&r.debug("Fetch.cancel before reader"))},B}();g.detectFetchSupport=function(){return typeof Response<"u"&&Response.prototype.hasOwnProperty("body")&&typeof Headers=="function"}},859:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.CrossBrowserHttpTransport=void 0;var o=I(229),a=I(210);g.CrossBrowserHttpTransport=function(r){if(o.detectFetchSupport()){var s={credentials:r.withCredentials?"include":"same-origin"};return o.FetchReadableStreamTransport(s)}return a.XhrTransport({withCredentials:r.withCredentials})}},210:function(n,g,I){var o,a=this&&this.__extends||(o=function(E,f){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(u,h){u.__proto__=h}||function(u,h){for(var w in h)Object.prototype.hasOwnProperty.call(h,w)&&(u[w]=h[w])})(E,f)},function(E,f){function u(){this.constructor=E}o(E,f),E.prototype=f===null?Object.create(f):(u.prototype=f.prototype,new u)});Object.defineProperty(g,"__esModule",{value:!0}),g.stringToArrayBuffer=g.MozChunkedArrayBufferXHR=g.XHR=g.XhrTransport=void 0;var r=I(65),s=I(346),B=I(849);g.XhrTransport=function(E){return function(f){if(B.detectMozXHRSupport())return new l(f,E);if(B.detectXHROverrideMimeTypeSupport())return new C(f,E);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var C=function(){function E(f,u){this.options=f,this.init=u}return E.prototype.onProgressEvent=function(){this.options.debug&&s.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var f=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var u=Q(f);this.options.onChunk(u)},E.prototype.onLoadEvent=function(){this.options.debug&&s.debug("XHR.onLoadEvent"),this.options.onEnd()},E.prototype.onStateChange=function(){this.options.debug&&s.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new r.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},E.prototype.sendMessage=function(f){this.xhr.send(f)},E.prototype.finishSend=function(){},E.prototype.start=function(f){var u=this;this.metadata=f;var h=new XMLHttpRequest;this.xhr=h,h.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach(function(w,N){h.setRequestHeader(w,N.join(", "))}),h.withCredentials=Boolean(this.init.withCredentials),h.addEventListener("readystatechange",this.onStateChange.bind(this)),h.addEventListener("progress",this.onProgressEvent.bind(this)),h.addEventListener("loadend",this.onLoadEvent.bind(this)),h.addEventListener("error",function(w){u.options.debug&&s.debug("XHR.error",w),u.options.onEnd(w.error)})},E.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},E.prototype.cancel=function(){this.options.debug&&s.debug("XHR.abort"),this.xhr.abort()},E}();g.XHR=C;var l=function(E){function f(){return E!==null&&E.apply(this,arguments)||this}return a(f,E),f.prototype.configureXhr=function(){this.options.debug&&s.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},f.prototype.onProgressEvent=function(){var u=this.xhr.response;this.options.debug&&s.debug("MozXHR.onProgressEvent: ",new Uint8Array(u)),this.options.onChunk(new Uint8Array(u))},f}(C);function c(E,f){var u=E.charCodeAt(f);if(u>=55296&&u<=56319){var h=E.charCodeAt(f+1);h>=56320&&h<=57343&&(u=65536+(u-55296<<10)+(h-56320))}return u}function Q(E){for(var f=new Uint8Array(E.length),u=0,h=0;h<E.length;h++){var w=String.prototype.codePointAt?E.codePointAt(h):c(E,h);f[u++]=255&w}return f}g.MozChunkedArrayBufferXHR=l,g.stringToArrayBuffer=Q},849:function(n,g){var I;function o(){if(I!==void 0)return I;if(XMLHttpRequest){I=new XMLHttpRequest;try{I.open("GET","https://localhost")}catch{}}return I}function a(r){var s=o();if(!s)return!1;try{return s.responseType=r,s.responseType===r}catch{}return!1}Object.defineProperty(g,"__esModule",{value:!0}),g.detectXHROverrideMimeTypeSupport=g.detectMozXHRSupport=g.xhrSupportsResponseType=void 0,g.xhrSupportsResponseType=a,g.detectMozXHRSupport=function(){return typeof XMLHttpRequest<"u"&&a("moz-chunked-arraybuffer")},g.detectXHROverrideMimeTypeSupport=function(){return typeof XMLHttpRequest<"u"&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.WebsocketTransport=void 0;var o,a=I(346),r=I(617);(function(B){B[B.FINISH_SEND=1]="FINISH_SEND"})(o||(o={}));var s=new Uint8Array([1]);g.WebsocketTransport=function(){return function(B){return function(C){C.debug&&a.debug("websocketRequest",C);var l,c=function(f){if(f.substr(0,8)==="https://")return"wss://"+f.substr(8);if(f.substr(0,7)==="http://")return"ws://"+f.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(C.url),Q=[];function E(f){if(f===o.FINISH_SEND)l.send(s);else{var u=f,h=new Int8Array(u.byteLength+1);h.set(new Uint8Array([0])),h.set(u,1),l.send(h)}}return{sendMessage:function(f){l&&l.readyState!==l.CONNECTING?E(f):Q.push(f)},finishSend:function(){l&&l.readyState!==l.CONNECTING?E(o.FINISH_SEND):Q.push(o.FINISH_SEND)},start:function(f){(l=new WebSocket(c,["grpc-websockets"])).binaryType="arraybuffer",l.onopen=function(){var u;C.debug&&a.debug("websocketRequest.onopen"),l.send((u="",f.forEach(function(h,w){u+=h+": "+w.join(", ")+`\r
`}),r.encodeASCII(u))),Q.forEach(function(h){E(h)})},l.onclose=function(u){C.debug&&a.debug("websocketRequest.onclose",u),C.onEnd()},l.onerror=function(u){C.debug&&a.debug("websocketRequest.onerror",u)},l.onmessage=function(u){C.onChunk(new Uint8Array(u.data))}},cancel:function(){C.debug&&a.debug("websocket.abort"),l.close()}}}(B)}}},35:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.unary=void 0;var o=I(65),a=I(934);g.unary=function(r,s){if(r.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(r.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var B=null,C=null,l=a.client(r,{host:s.host,transport:s.transport,debug:s.debug});return l.onHeaders(function(c){B=c}),l.onMessage(function(c){C=c}),l.onEnd(function(c,Q,E){s.onEnd({status:c,statusMessage:Q,headers:B||new o.Metadata,message:C,trailers:E})}),l.start(s.metadata),l.send(s.request),l.finishSend(),{close:function(){l.close()}}}},882:function(n,g){Object.defineProperty(g,"__esModule",{value:!0}),g.frameRequest=void 0,g.frameRequest=function(I){var o=I.serializeBinary(),a=new ArrayBuffer(o.byteLength+5);return new DataView(a,1,4).setUint32(0,o.length,!1),new Uint8Array(a,5).set(o),new Uint8Array(a)}}},i={},function n(g){if(i[g])return i[g].exports;var I=i[g]={exports:{}};return t[g].call(I.exports,I,I.exports,n),I.exports}(607);var t,i})})(grpcWebClient_umd);var indexMinimal={},minimal$1={},aspromise=asPromise;function asPromise(A,e){for(var t=new Array(arguments.length-1),i=0,n=2,g=!0;n<arguments.length;)t[i++]=arguments[n++];return new Promise(function(o,a){t[i]=function(s){if(g)if(g=!1,s)a(s);else{for(var B=new Array(arguments.length-1),C=0;C<B.length;)B[C++]=arguments[C];o.apply(null,B)}};try{A.apply(e||null,t)}catch(r){g&&(g=!1,a(r))}})}var base64$1={};(function(A){var e=A;e.length=function(o){var a=o.length;if(!a)return 0;for(var r=0;--a%4>1&&o.charAt(a)==="=";)++r;return Math.ceil(o.length*3)/4-r};for(var t=new Array(64),i=new Array(123),n=0;n<64;)i[t[n]=n<26?n+65:n<52?n+71:n<62?n-4:n-59|43]=n++;e.encode=function(o,a,r){for(var s=null,B=[],C=0,l=0,c;a<r;){var Q=o[a++];switch(l){case 0:B[C++]=t[Q>>2],c=(Q&3)<<4,l=1;break;case 1:B[C++]=t[c|Q>>4],c=(Q&15)<<2,l=2;break;case 2:B[C++]=t[c|Q>>6],B[C++]=t[Q&63],l=0;break}C>8191&&((s||(s=[])).push(String.fromCharCode.apply(String,B)),C=0)}return l&&(B[C++]=t[c],B[C++]=61,l===1&&(B[C++]=61)),s?(C&&s.push(String.fromCharCode.apply(String,B.slice(0,C))),s.join("")):String.fromCharCode.apply(String,B.slice(0,C))};var g="invalid encoding";e.decode=function(o,a,r){for(var s=r,B=0,C,l=0;l<o.length;){var c=o.charCodeAt(l++);if(c===61&&B>1)break;if((c=i[c])===void 0)throw Error(g);switch(B){case 0:C=c,B=1;break;case 1:a[r++]=C<<2|(c&48)>>4,C=c,B=2;break;case 2:a[r++]=(C&15)<<4|(c&60)>>2,C=c,B=3;break;case 3:a[r++]=(C&3)<<6|c,B=0;break}}if(B===1)throw Error(g);return r-s},e.test=function(o){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(o)}})(base64$1);var eventemitter=EventEmitter;function EventEmitter(){this._listeners={}}EventEmitter.prototype.on=function(e,t,i){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:i||this}),this};EventEmitter.prototype.off=function(e,t){if(e===void 0)this._listeners={};else if(t===void 0)this._listeners[e]=[];else for(var i=this._listeners[e],n=0;n<i.length;)i[n].fn===t?i.splice(n,1):++n;return this};EventEmitter.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var i=[],n=1;n<arguments.length;)i.push(arguments[n++]);for(n=0;n<t.length;)t[n].fn.apply(t[n++].ctx,i)}return this};var float=factory(factory);function factory(A){return typeof Float32Array<"u"?function(){var e=new Float32Array([-0]),t=new Uint8Array(e.buffer),i=t[3]===128;function n(a,r,s){e[0]=a,r[s]=t[0],r[s+1]=t[1],r[s+2]=t[2],r[s+3]=t[3]}function g(a,r,s){e[0]=a,r[s]=t[3],r[s+1]=t[2],r[s+2]=t[1],r[s+3]=t[0]}A.writeFloatLE=i?n:g,A.writeFloatBE=i?g:n;function I(a,r){return t[0]=a[r],t[1]=a[r+1],t[2]=a[r+2],t[3]=a[r+3],e[0]}function o(a,r){return t[3]=a[r],t[2]=a[r+1],t[1]=a[r+2],t[0]=a[r+3],e[0]}A.readFloatLE=i?I:o,A.readFloatBE=i?o:I}():function(){function e(i,n,g,I){var o=n<0?1:0;if(o&&(n=-n),n===0)i(1/n>0?0:2147483648,g,I);else if(isNaN(n))i(2143289344,g,I);else if(n>34028234663852886e22)i((o<<31|2139095040)>>>0,g,I);else if(n<11754943508222875e-54)i((o<<31|Math.round(n/1401298464324817e-60))>>>0,g,I);else{var a=Math.floor(Math.log(n)/Math.LN2),r=Math.round(n*Math.pow(2,-a)*8388608)&8388607;i((o<<31|a+127<<23|r)>>>0,g,I)}}A.writeFloatLE=e.bind(null,writeUintLE),A.writeFloatBE=e.bind(null,writeUintBE);function t(i,n,g){var I=i(n,g),o=(I>>31)*2+1,a=I>>>23&255,r=I&8388607;return a===255?r?NaN:o*(1/0):a===0?o*1401298464324817e-60*r:o*Math.pow(2,a-150)*(r+8388608)}A.readFloatLE=t.bind(null,readUintLE),A.readFloatBE=t.bind(null,readUintBE)}(),typeof Float64Array<"u"?function(){var e=new Float64Array([-0]),t=new Uint8Array(e.buffer),i=t[7]===128;function n(a,r,s){e[0]=a,r[s]=t[0],r[s+1]=t[1],r[s+2]=t[2],r[s+3]=t[3],r[s+4]=t[4],r[s+5]=t[5],r[s+6]=t[6],r[s+7]=t[7]}function g(a,r,s){e[0]=a,r[s]=t[7],r[s+1]=t[6],r[s+2]=t[5],r[s+3]=t[4],r[s+4]=t[3],r[s+5]=t[2],r[s+6]=t[1],r[s+7]=t[0]}A.writeDoubleLE=i?n:g,A.writeDoubleBE=i?g:n;function I(a,r){return t[0]=a[r],t[1]=a[r+1],t[2]=a[r+2],t[3]=a[r+3],t[4]=a[r+4],t[5]=a[r+5],t[6]=a[r+6],t[7]=a[r+7],e[0]}function o(a,r){return t[7]=a[r],t[6]=a[r+1],t[5]=a[r+2],t[4]=a[r+3],t[3]=a[r+4],t[2]=a[r+5],t[1]=a[r+6],t[0]=a[r+7],e[0]}A.readDoubleLE=i?I:o,A.readDoubleBE=i?o:I}():function(){function e(i,n,g,I,o,a){var r=I<0?1:0;if(r&&(I=-I),I===0)i(0,o,a+n),i(1/I>0?0:2147483648,o,a+g);else if(isNaN(I))i(0,o,a+n),i(2146959360,o,a+g);else if(I>17976931348623157e292)i(0,o,a+n),i((r<<31|2146435072)>>>0,o,a+g);else{var s;if(I<22250738585072014e-324)s=I/5e-324,i(s>>>0,o,a+n),i((r<<31|s/4294967296)>>>0,o,a+g);else{var B=Math.floor(Math.log(I)/Math.LN2);B===1024&&(B=1023),s=I*Math.pow(2,-B),i(s*4503599627370496>>>0,o,a+n),i((r<<31|B+1023<<20|s*1048576&1048575)>>>0,o,a+g)}}}A.writeDoubleLE=e.bind(null,writeUintLE,0,4),A.writeDoubleBE=e.bind(null,writeUintBE,4,0);function t(i,n,g,I,o){var a=i(I,o+n),r=i(I,o+g),s=(r>>31)*2+1,B=r>>>20&2047,C=4294967296*(r&1048575)+a;return B===2047?C?NaN:s*(1/0):B===0?s*5e-324*C:s*Math.pow(2,B-1075)*(C+4503599627370496)}A.readDoubleLE=t.bind(null,readUintLE,0,4),A.readDoubleBE=t.bind(null,readUintBE,4,0)}(),A}function writeUintLE(A,e,t){e[t]=A&255,e[t+1]=A>>>8&255,e[t+2]=A>>>16&255,e[t+3]=A>>>24}function writeUintBE(A,e,t){e[t]=A>>>24,e[t+1]=A>>>16&255,e[t+2]=A>>>8&255,e[t+3]=A&255}function readUintLE(A,e){return(A[e]|A[e+1]<<8|A[e+2]<<16|A[e+3]<<24)>>>0}function readUintBE(A,e){return(A[e]<<24|A[e+1]<<16|A[e+2]<<8|A[e+3])>>>0}var inquire_1=inquire;function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(A){}return null}var utf8$2={};(function(A){var e=A;e.length=function(i){for(var n=0,g=0,I=0;I<i.length;++I)g=i.charCodeAt(I),g<128?n+=1:g<2048?n+=2:(g&64512)===55296&&(i.charCodeAt(I+1)&64512)===56320?(++I,n+=4):n+=3;return n},e.read=function(i,n,g){var I=g-n;if(I<1)return"";for(var o=null,a=[],r=0,s;n<g;)s=i[n++],s<128?a[r++]=s:s>191&&s<224?a[r++]=(s&31)<<6|i[n++]&63:s>239&&s<365?(s=((s&7)<<18|(i[n++]&63)<<12|(i[n++]&63)<<6|i[n++]&63)-65536,a[r++]=55296+(s>>10),a[r++]=56320+(s&1023)):a[r++]=(s&15)<<12|(i[n++]&63)<<6|i[n++]&63,r>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,a)),r=0);return o?(r&&o.push(String.fromCharCode.apply(String,a.slice(0,r))),o.join("")):String.fromCharCode.apply(String,a.slice(0,r))},e.write=function(i,n,g){for(var I=g,o,a,r=0;r<i.length;++r)o=i.charCodeAt(r),o<128?n[g++]=o:o<2048?(n[g++]=o>>6|192,n[g++]=o&63|128):(o&64512)===55296&&((a=i.charCodeAt(r+1))&64512)===56320?(o=65536+((o&1023)<<10)+(a&1023),++r,n[g++]=o>>18|240,n[g++]=o>>12&63|128,n[g++]=o>>6&63|128,n[g++]=o&63|128):(n[g++]=o>>12|224,n[g++]=o>>6&63|128,n[g++]=o&63|128);return g-I}})(utf8$2);var pool_1=pool;function pool(A,e,t){var i=t||8192,n=i>>>1,g=null,I=i;return function(a){if(a<1||a>n)return A(a);I+a>i&&(g=A(i),I=0);var r=e.call(g,I,I+=a);return I&7&&(I=(I|7)+1),r}}var longbits=LongBits$2,util$5=minimal$1;function LongBits$2(A,e){this.lo=A>>>0,this.hi=e>>>0}var zero=LongBits$2.zero=new LongBits$2(0,0);zero.toNumber=function(){return 0};zero.zzEncode=zero.zzDecode=function(){return this};zero.length=function(){return 1};var zeroHash=LongBits$2.zeroHash="\0\0\0\0\0\0\0\0";LongBits$2.fromNumber=function A(e){if(e===0)return zero;var t=e<0;t&&(e=-e);var i=e>>>0,n=(e-i)/4294967296>>>0;return t&&(n=~n>>>0,i=~i>>>0,++i>4294967295&&(i=0,++n>4294967295&&(n=0))),new LongBits$2(i,n)};LongBits$2.from=function A(e){if(typeof e=="number")return LongBits$2.fromNumber(e);if(util$5.isString(e))if(util$5.Long)e=util$5.Long.fromString(e);else return LongBits$2.fromNumber(parseInt(e,10));return e.low||e.high?new LongBits$2(e.low>>>0,e.high>>>0):zero};LongBits$2.prototype.toNumber=function A(e){if(!e&&this.hi>>>31){var t=~this.lo+1>>>0,i=~this.hi>>>0;return t||(i=i+1>>>0),-(t+i*4294967296)}return this.lo+this.hi*4294967296};LongBits$2.prototype.toLong=function A(e){return util$5.Long?new util$5.Long(this.lo|0,this.hi|0,Boolean(e)):{low:this.lo|0,high:this.hi|0,unsigned:Boolean(e)}};var charCodeAt=String.prototype.charCodeAt;LongBits$2.fromHash=function A(e){return e===zeroHash?zero:new LongBits$2((charCodeAt.call(e,0)|charCodeAt.call(e,1)<<8|charCodeAt.call(e,2)<<16|charCodeAt.call(e,3)<<24)>>>0,(charCodeAt.call(e,4)|charCodeAt.call(e,5)<<8|charCodeAt.call(e,6)<<16|charCodeAt.call(e,7)<<24)>>>0)};LongBits$2.prototype.toHash=function A(){return String.fromCharCode(this.lo&255,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,this.hi&255,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)};LongBits$2.prototype.zzEncode=function A(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this};LongBits$2.prototype.zzDecode=function A(){var e=-(this.lo&1);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this};LongBits$2.prototype.length=function A(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,i=this.hi>>>24;return i===0?t===0?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:i<128?9:10};(function(A){var e=A;e.asPromise=aspromise,e.base64=base64$1,e.EventEmitter=eventemitter,e.float=float,e.inquire=inquire_1,e.utf8=utf8$2,e.pool=pool_1,e.LongBits=longbits,e.isNode=Boolean(typeof commonjsGlobal<"u"&&commonjsGlobal&&commonjsGlobal.process&&commonjsGlobal.process.versions&&commonjsGlobal.process.versions.node),e.global=e.isNode&&commonjsGlobal||typeof window<"u"&&window||typeof self<"u"&&self||commonjsGlobal,e.emptyArray=Object.freeze?Object.freeze([]):[],e.emptyObject=Object.freeze?Object.freeze({}):{},e.isInteger=Number.isInteger||function(g){return typeof g=="number"&&isFinite(g)&&Math.floor(g)===g},e.isString=function(g){return typeof g=="string"||g instanceof String},e.isObject=function(g){return g&&typeof g=="object"},e.isset=e.isSet=function(g,I){var o=g[I];return o!=null&&g.hasOwnProperty(I)?typeof o!="object"||(Array.isArray(o)?o.length:Object.keys(o).length)>0:!1},e.Buffer=function(){try{var n=e.inquire("buffer").Buffer;return n.prototype.utf8Write?n:null}catch{return null}}(),e._Buffer_from=null,e._Buffer_allocUnsafe=null,e.newBuffer=function(g){return typeof g=="number"?e.Buffer?e._Buffer_allocUnsafe(g):new e.Array(g):e.Buffer?e._Buffer_from(g):typeof Uint8Array>"u"?g:new Uint8Array(g)},e.Array=typeof Uint8Array<"u"?Uint8Array:Array,e.Long=e.global.dcodeIO&&e.global.dcodeIO.Long||e.global.Long||e.inquire("long"),e.key2Re=/^true|false|0|1$/,e.key32Re=/^-?(?:0|[1-9][0-9]*)$/,e.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,e.longToHash=function(g){return g?e.LongBits.from(g).toHash():e.LongBits.zeroHash},e.longFromHash=function(g,I){var o=e.LongBits.fromHash(g);return e.Long?e.Long.fromBits(o.lo,o.hi,I):o.toNumber(Boolean(I))};function t(n,g,I){for(var o=Object.keys(g),a=0;a<o.length;++a)(n[o[a]]===void 0||!I)&&(n[o[a]]=g[o[a]]);return n}e.merge=t,e.lcFirst=function(g){return g.charAt(0).toLowerCase()+g.substring(1)};function i(n){function g(I,o){if(!(this instanceof g))return new g(I,o);Object.defineProperty(this,"message",{get:function(){return I}}),Error.captureStackTrace?Error.captureStackTrace(this,g):Object.defineProperty(this,"stack",{value:new Error().stack||""}),o&&t(this,o)}return g.prototype=Object.create(Error.prototype,{constructor:{value:g,writable:!0,enumerable:!1,configurable:!0},name:{get(){return n},set:void 0,enumerable:!1,configurable:!0},toString:{value(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),g}e.newError=i,e.ProtocolError=i("ProtocolError"),e.oneOfGetter=function(g){for(var I={},o=0;o<g.length;++o)I[g[o]]=1;return function(){for(var a=Object.keys(this),r=a.length-1;r>-1;--r)if(I[a[r]]===1&&this[a[r]]!==void 0&&this[a[r]]!==null)return a[r]}},e.oneOfSetter=function(g){return function(I){for(var o=0;o<g.length;++o)g[o]!==I&&delete this[g[o]]}},e.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},e._configure=function(){var n=e.Buffer;if(!n){e._Buffer_from=e._Buffer_allocUnsafe=null;return}e._Buffer_from=n.from!==Uint8Array.from&&n.from||function(I,o){return new n(I,o)},e._Buffer_allocUnsafe=n.allocUnsafe||function(I){return new n(I)}}})(minimal$1);var writer=Writer$1,util$4=minimal$1,BufferWriter$1,LongBits$1=util$4.LongBits,base64=util$4.base64,utf8$1=util$4.utf8;function Op(A,e,t){this.fn=A,this.len=e,this.next=void 0,this.val=t}function noop(){}function State(A){this.head=A.head,this.tail=A.tail,this.len=A.len,this.next=A.states}function Writer$1(){this.len=0,this.head=new Op(noop,0,0),this.tail=this.head,this.states=null}var create$1=function A(){return util$4.Buffer?function(){return(Writer$1.create=function(){return new BufferWriter$1})()}:function(){return new Writer$1}};Writer$1.create=create$1();Writer$1.alloc=function A(e){return new util$4.Array(e)};util$4.Array!==Array&&(Writer$1.alloc=util$4.pool(Writer$1.alloc,util$4.Array.prototype.subarray));Writer$1.prototype._push=function A(e,t,i){return this.tail=this.tail.next=new Op(e,t,i),this.len+=t,this};function writeByte(A,e,t){e[t]=A&255}function writeVarint32(A,e,t){for(;A>127;)e[t++]=A&127|128,A>>>=7;e[t]=A}function VarintOp(A,e){this.len=A,this.next=void 0,this.val=e}VarintOp.prototype=Object.create(Op.prototype);VarintOp.prototype.fn=writeVarint32;Writer$1.prototype.uint32=function A(e){return this.len+=(this.tail=this.tail.next=new VarintOp((e=e>>>0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this};Writer$1.prototype.int32=function A(e){return e<0?this._push(writeVarint64,10,LongBits$1.fromNumber(e)):this.uint32(e)};Writer$1.prototype.sint32=function A(e){return this.uint32((e<<1^e>>31)>>>0)};function writeVarint64(A,e,t){for(;A.hi;)e[t++]=A.lo&127|128,A.lo=(A.lo>>>7|A.hi<<25)>>>0,A.hi>>>=7;for(;A.lo>127;)e[t++]=A.lo&127|128,A.lo=A.lo>>>7;e[t++]=A.lo}Writer$1.prototype.uint64=function A(e){var t=LongBits$1.from(e);return this._push(writeVarint64,t.length(),t)};Writer$1.prototype.int64=Writer$1.prototype.uint64;Writer$1.prototype.sint64=function A(e){var t=LongBits$1.from(e).zzEncode();return this._push(writeVarint64,t.length(),t)};Writer$1.prototype.bool=function A(e){return this._push(writeByte,1,e?1:0)};function writeFixed32(A,e,t){e[t]=A&255,e[t+1]=A>>>8&255,e[t+2]=A>>>16&255,e[t+3]=A>>>24}Writer$1.prototype.fixed32=function A(e){return this._push(writeFixed32,4,e>>>0)};Writer$1.prototype.sfixed32=Writer$1.prototype.fixed32;Writer$1.prototype.fixed64=function A(e){var t=LongBits$1.from(e);return this._push(writeFixed32,4,t.lo)._push(writeFixed32,4,t.hi)};Writer$1.prototype.sfixed64=Writer$1.prototype.fixed64;Writer$1.prototype.float=function A(e){return this._push(util$4.float.writeFloatLE,4,e)};Writer$1.prototype.double=function A(e){return this._push(util$4.float.writeDoubleLE,8,e)};var writeBytes=util$4.Array.prototype.set?function A(e,t,i){t.set(e,i)}:function A(e,t,i){for(var n=0;n<e.length;++n)t[i+n]=e[n]};Writer$1.prototype.bytes=function A(e){var t=e.length>>>0;if(!t)return this._push(writeByte,1,0);if(util$4.isString(e)){var i=Writer$1.alloc(t=base64.length(e));base64.decode(e,i,0),e=i}return this.uint32(t)._push(writeBytes,t,e)};Writer$1.prototype.string=function A(e){var t=utf8$1.length(e);return t?this.uint32(t)._push(utf8$1.write,t,e):this._push(writeByte,1,0)};Writer$1.prototype.fork=function A(){return this.states=new State(this),this.head=this.tail=new Op(noop,0,0),this.len=0,this};Writer$1.prototype.reset=function A(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Op(noop,0,0),this.len=0),this};Writer$1.prototype.ldelim=function A(){var e=this.head,t=this.tail,i=this.len;return this.reset().uint32(i),i&&(this.tail.next=e.next,this.tail=t,this.len+=i),this};Writer$1.prototype.finish=function A(){for(var e=this.head.next,t=this.constructor.alloc(this.len),i=0;e;)e.fn(e.val,t,i),i+=e.len,e=e.next;return t};Writer$1._configure=function(A){BufferWriter$1=A,Writer$1.create=create$1(),BufferWriter$1._configure()};var writer_buffer=BufferWriter,Writer=writer;(BufferWriter.prototype=Object.create(Writer.prototype)).constructor=BufferWriter;var util$3=minimal$1;function BufferWriter(){Writer.call(this)}BufferWriter._configure=function(){BufferWriter.alloc=util$3._Buffer_allocUnsafe,BufferWriter.writeBytesBuffer=util$3.Buffer&&util$3.Buffer.prototype instanceof Uint8Array&&util$3.Buffer.prototype.set.name==="set"?function(e,t,i){t.set(e,i)}:function(e,t,i){if(e.copy)e.copy(t,i,0,e.length);else for(var n=0;n<e.length;)t[i++]=e[n++]}};BufferWriter.prototype.bytes=function A(e){util$3.isString(e)&&(e=util$3._Buffer_from(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this._push(BufferWriter.writeBytesBuffer,t,e),this};function writeStringBuffer(A,e,t){A.length<40?util$3.utf8.write(A,e,t):e.utf8Write?e.utf8Write(A,t):e.write(A,t)}BufferWriter.prototype.string=function A(e){var t=util$3.Buffer.byteLength(e);return this.uint32(t),t&&this._push(writeStringBuffer,t,e),this};BufferWriter._configure();var reader=Reader$1,util$2=minimal$1,BufferReader$1,LongBits=util$2.LongBits,utf8=util$2.utf8;function indexOutOfRange(A,e){return RangeError("index out of range: "+A.pos+" + "+(e||1)+" > "+A.len)}function Reader$1(A){this.buf=A,this.pos=0,this.len=A.length}var create_array=typeof Uint8Array<"u"?function A(e){if(e instanceof Uint8Array||Array.isArray(e))return new Reader$1(e);throw Error("illegal buffer")}:function A(e){if(Array.isArray(e))return new Reader$1(e);throw Error("illegal buffer")},create=function A(){return util$2.Buffer?function(t){return(Reader$1.create=function(n){return util$2.Buffer.isBuffer(n)?new BufferReader$1(n):create_array(n)})(t)}:create_array};Reader$1.create=create();Reader$1.prototype._slice=util$2.Array.prototype.subarray||util$2.Array.prototype.slice;Reader$1.prototype.uint32=function A(){var e=4294967295;return function(){if(e=(this.buf[this.pos]&127)>>>0,this.buf[this.pos++]<128||(e=(e|(this.buf[this.pos]&127)<<7)>>>0,this.buf[this.pos++]<128)||(e=(e|(this.buf[this.pos]&127)<<14)>>>0,this.buf[this.pos++]<128)||(e=(e|(this.buf[this.pos]&127)<<21)>>>0,this.buf[this.pos++]<128)||(e=(e|(this.buf[this.pos]&15)<<28)>>>0,this.buf[this.pos++]<128))return e;if((this.pos+=5)>this.len)throw this.pos=this.len,indexOutOfRange(this,10);return e}}();Reader$1.prototype.int32=function A(){return this.uint32()|0};Reader$1.prototype.sint32=function A(){var e=this.uint32();return e>>>1^-(e&1)|0};function readLongVarint(){var A=new LongBits(0,0),e=0;if(this.len-this.pos>4){for(;e<4;++e)if(A.lo=(A.lo|(this.buf[this.pos]&127)<<e*7)>>>0,this.buf[this.pos++]<128)return A;if(A.lo=(A.lo|(this.buf[this.pos]&127)<<28)>>>0,A.hi=(A.hi|(this.buf[this.pos]&127)>>4)>>>0,this.buf[this.pos++]<128)return A;e=0}else{for(;e<3;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(A.lo=(A.lo|(this.buf[this.pos]&127)<<e*7)>>>0,this.buf[this.pos++]<128)return A}return A.lo=(A.lo|(this.buf[this.pos++]&127)<<e*7)>>>0,A}if(this.len-this.pos>4){for(;e<5;++e)if(A.hi=(A.hi|(this.buf[this.pos]&127)<<e*7+3)>>>0,this.buf[this.pos++]<128)return A}else for(;e<5;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(A.hi=(A.hi|(this.buf[this.pos]&127)<<e*7+3)>>>0,this.buf[this.pos++]<128)return A}throw Error("invalid varint encoding")}Reader$1.prototype.bool=function A(){return this.uint32()!==0};function readFixed32_end(A,e){return(A[e-4]|A[e-3]<<8|A[e-2]<<16|A[e-1]<<24)>>>0}Reader$1.prototype.fixed32=function A(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)};Reader$1.prototype.sfixed32=function A(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)|0};function readFixed64(){if(this.pos+8>this.len)throw indexOutOfRange(this,8);return new LongBits(readFixed32_end(this.buf,this.pos+=4),readFixed32_end(this.buf,this.pos+=4))}Reader$1.prototype.float=function A(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);var e=util$2.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e};Reader$1.prototype.double=function A(){if(this.pos+8>this.len)throw indexOutOfRange(this,4);var e=util$2.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e};Reader$1.prototype.bytes=function A(){var e=this.uint32(),t=this.pos,i=this.pos+e;if(i>this.len)throw indexOutOfRange(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,i):t===i?new this.buf.constructor(0):this._slice.call(this.buf,t,i)};Reader$1.prototype.string=function A(){var e=this.bytes();return utf8.read(e,0,e.length)};Reader$1.prototype.skip=function A(e){if(typeof e=="number"){if(this.pos+e>this.len)throw indexOutOfRange(this,e);this.pos+=e}else do if(this.pos>=this.len)throw indexOutOfRange(this);while(this.buf[this.pos++]&128);return this};Reader$1.prototype.skipType=function(A){switch(A){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;(A=this.uint32()&7)!==4;)this.skipType(A);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+A+" at offset "+this.pos)}return this};Reader$1._configure=function(A){BufferReader$1=A,Reader$1.create=create(),BufferReader$1._configure();var e=util$2.Long?"toLong":"toNumber";util$2.merge(Reader$1.prototype,{int64:function(){return readLongVarint.call(this)[e](!1)},uint64:function(){return readLongVarint.call(this)[e](!0)},sint64:function(){return readLongVarint.call(this).zzDecode()[e](!1)},fixed64:function(){return readFixed64.call(this)[e](!0)},sfixed64:function(){return readFixed64.call(this)[e](!1)}})};var reader_buffer=BufferReader,Reader=reader;(BufferReader.prototype=Object.create(Reader.prototype)).constructor=BufferReader;var util$1=minimal$1;function BufferReader(A){Reader.call(this,A)}BufferReader._configure=function(){util$1.Buffer&&(BufferReader.prototype._slice=util$1.Buffer.prototype.slice)};BufferReader.prototype.string=function A(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+e,this.len))};BufferReader._configure();var rpc={},service=Service,util=minimal$1;(Service.prototype=Object.create(util.EventEmitter.prototype)).constructor=Service;function Service(A,e,t){if(typeof A!="function")throw TypeError("rpcImpl must be a function");util.EventEmitter.call(this),this.rpcImpl=A,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(t)}Service.prototype.rpcCall=function A(e,t,i,n,g){if(!n)throw TypeError("request must be specified");var I=this;if(!g)return util.asPromise(A,I,e,t,i,n);if(!I.rpcImpl){setTimeout(function(){g(Error("already ended"))},0);return}try{return I.rpcImpl(e,t[I.requestDelimited?"encodeDelimited":"encode"](n).finish(),function(a,r){if(a)return I.emit("error",a,e),g(a);if(r===null){I.end(!0);return}if(!(r instanceof i))try{r=i[I.responseDelimited?"decodeDelimited":"decode"](r)}catch(s){return I.emit("error",s,e),g(s)}return I.emit("data",r,e),g(null,r)})}catch(o){I.emit("error",o,e),setTimeout(function(){g(o)},0);return}};Service.prototype.end=function A(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this};(function(A){var e=A;e.Service=service})(rpc);var roots={};(function(A){var e=A;e.build="minimal",e.Writer=writer,e.BufferWriter=writer_buffer,e.Reader=reader,e.BufferReader=reader_buffer,e.util=minimal$1,e.rpc=rpc,e.roots=roots,e.configure=t;function t(){e.util._configure(),e.Writer._configure(e.BufferWriter),e.Reader._configure(e.BufferReader)}t()})(indexMinimal);var minimal=indexMinimal;function createBaseCoin(){return{denom:"",amount:""}}const Coin={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),A.amount!==""&&e.uint32(18).string(A.amount),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseCoin();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;case 2:n.amount=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$d(A.denom)?String(A.denom):"",amount:isSet$d(A.amount)?String(A.amount):""}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),A.amount!==void 0&&(e.amount=A.amount),e},fromPartial(A){const e=createBaseCoin();return e.denom=A.denom??"",e.amount=A.amount??"",e}};function isSet$d(A){return A!=null}var long=Long,wasm=null;try{wasm=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(A){}function Long(A,e,t){this.low=A|0,this.high=e|0,this.unsigned=!!t}Long.prototype.__isLong__;Object.defineProperty(Long.prototype,"__isLong__",{value:!0});function isLong(A){return(A&&A.__isLong__)===!0}Long.isLong=isLong;var INT_CACHE={},UINT_CACHE={};function fromInt(A,e){var t,i,n;return e?(A>>>=0,(n=0<=A&&A<256)&&(i=UINT_CACHE[A],i)?i:(t=fromBits(A,(A|0)<0?-1:0,!0),n&&(UINT_CACHE[A]=t),t)):(A|=0,(n=-128<=A&&A<128)&&(i=INT_CACHE[A],i)?i:(t=fromBits(A,A<0?-1:0,!1),n&&(INT_CACHE[A]=t),t))}Long.fromInt=fromInt;function fromNumber(A,e){if(isNaN(A))return e?UZERO:ZERO;if(e){if(A<0)return UZERO;if(A>=TWO_PWR_64_DBL)return MAX_UNSIGNED_VALUE}else{if(A<=-TWO_PWR_63_DBL)return MIN_VALUE;if(A+1>=TWO_PWR_63_DBL)return MAX_VALUE}return A<0?fromNumber(-A,e).neg():fromBits(A%TWO_PWR_32_DBL|0,A/TWO_PWR_32_DBL|0,e)}Long.fromNumber=fromNumber;function fromBits(A,e,t){return new Long(A,e,t)}Long.fromBits=fromBits;var pow_dbl=Math.pow;function fromString(A,e,t){if(A.length===0)throw Error("empty string");if(A==="NaN"||A==="Infinity"||A==="+Infinity"||A==="-Infinity")return ZERO;if(typeof e=="number"?(t=e,e=!1):e=!!e,t=t||10,t<2||36<t)throw RangeError("radix");var i;if((i=A.indexOf("-"))>0)throw Error("interior hyphen");if(i===0)return fromString(A.substring(1),e,t).neg();for(var n=fromNumber(pow_dbl(t,8)),g=ZERO,I=0;I<A.length;I+=8){var o=Math.min(8,A.length-I),a=parseInt(A.substring(I,I+o),t);if(o<8){var r=fromNumber(pow_dbl(t,o));g=g.mul(r).add(fromNumber(a))}else g=g.mul(n),g=g.add(fromNumber(a))}return g.unsigned=e,g}Long.fromString=fromString;function fromValue(A,e){return typeof A=="number"?fromNumber(A,e):typeof A=="string"?fromString(A,e):fromBits(A.low,A.high,typeof e=="boolean"?e:A.unsigned)}Long.fromValue=fromValue;var TWO_PWR_16_DBL=1<<16,TWO_PWR_24_DBL=1<<24,TWO_PWR_32_DBL=TWO_PWR_16_DBL*TWO_PWR_16_DBL,TWO_PWR_64_DBL=TWO_PWR_32_DBL*TWO_PWR_32_DBL,TWO_PWR_63_DBL=TWO_PWR_64_DBL/2,TWO_PWR_24=fromInt(TWO_PWR_24_DBL),ZERO=fromInt(0);Long.ZERO=ZERO;var UZERO=fromInt(0,!0);Long.UZERO=UZERO;var ONE=fromInt(1);Long.ONE=ONE;var UONE=fromInt(1,!0);Long.UONE=UONE;var NEG_ONE=fromInt(-1);Long.NEG_ONE=NEG_ONE;var MAX_VALUE=fromBits(-1,2147483647,!1);Long.MAX_VALUE=MAX_VALUE;var MAX_UNSIGNED_VALUE=fromBits(-1,-1,!0);Long.MAX_UNSIGNED_VALUE=MAX_UNSIGNED_VALUE;var MIN_VALUE=fromBits(0,-2147483648,!1);Long.MIN_VALUE=MIN_VALUE;var LongPrototype=Long.prototype;LongPrototype.toInt=function A(){return this.unsigned?this.low>>>0:this.low};LongPrototype.toNumber=function A(){return this.unsigned?(this.high>>>0)*TWO_PWR_32_DBL+(this.low>>>0):this.high*TWO_PWR_32_DBL+(this.low>>>0)};LongPrototype.toString=function A(e){if(e=e||10,e<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(MIN_VALUE)){var t=fromNumber(e),i=this.div(t),n=i.mul(t).sub(this);return i.toString(e)+n.toInt().toString(e)}else return"-"+this.neg().toString(e);for(var g=fromNumber(pow_dbl(e,6),this.unsigned),I=this,o="";;){var a=I.div(g),r=I.sub(a.mul(g)).toInt()>>>0,s=r.toString(e);if(I=a,I.isZero())return s+o;for(;s.length<6;)s="0"+s;o=""+s+o}};LongPrototype.getHighBits=function A(){return this.high};LongPrototype.getHighBitsUnsigned=function A(){return this.high>>>0};LongPrototype.getLowBits=function A(){return this.low};LongPrototype.getLowBitsUnsigned=function A(){return this.low>>>0};LongPrototype.getNumBitsAbs=function A(){if(this.isNegative())return this.eq(MIN_VALUE)?64:this.neg().getNumBitsAbs();for(var e=this.high!=0?this.high:this.low,t=31;t>0&&(e&1<<t)==0;t--);return this.high!=0?t+33:t+1};LongPrototype.isZero=function A(){return this.high===0&&this.low===0};LongPrototype.eqz=LongPrototype.isZero;LongPrototype.isNegative=function A(){return!this.unsigned&&this.high<0};LongPrototype.isPositive=function A(){return this.unsigned||this.high>=0};LongPrototype.isOdd=function A(){return(this.low&1)===1};LongPrototype.isEven=function A(){return(this.low&1)===0};LongPrototype.equals=function A(e){return isLong(e)||(e=fromValue(e)),this.unsigned!==e.unsigned&&this.high>>>31===1&&e.high>>>31===1?!1:this.high===e.high&&this.low===e.low};LongPrototype.eq=LongPrototype.equals;LongPrototype.notEquals=function A(e){return!this.eq(e)};LongPrototype.neq=LongPrototype.notEquals;LongPrototype.ne=LongPrototype.notEquals;LongPrototype.lessThan=function A(e){return this.comp(e)<0};LongPrototype.lt=LongPrototype.lessThan;LongPrototype.lessThanOrEqual=function A(e){return this.comp(e)<=0};LongPrototype.lte=LongPrototype.lessThanOrEqual;LongPrototype.le=LongPrototype.lessThanOrEqual;LongPrototype.greaterThan=function A(e){return this.comp(e)>0};LongPrototype.gt=LongPrototype.greaterThan;LongPrototype.greaterThanOrEqual=function A(e){return this.comp(e)>=0};LongPrototype.gte=LongPrototype.greaterThanOrEqual;LongPrototype.ge=LongPrototype.greaterThanOrEqual;LongPrototype.compare=function A(e){if(isLong(e)||(e=fromValue(e)),this.eq(e))return 0;var t=this.isNegative(),i=e.isNegative();return t&&!i?-1:!t&&i?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1};LongPrototype.comp=LongPrototype.compare;LongPrototype.negate=function A(){return!this.unsigned&&this.eq(MIN_VALUE)?MIN_VALUE:this.not().add(ONE)};LongPrototype.neg=LongPrototype.negate;LongPrototype.add=function A(e){isLong(e)||(e=fromValue(e));var t=this.high>>>16,i=this.high&65535,n=this.low>>>16,g=this.low&65535,I=e.high>>>16,o=e.high&65535,a=e.low>>>16,r=e.low&65535,s=0,B=0,C=0,l=0;return l+=g+r,C+=l>>>16,l&=65535,C+=n+a,B+=C>>>16,C&=65535,B+=i+o,s+=B>>>16,B&=65535,s+=t+I,s&=65535,fromBits(C<<16|l,s<<16|B,this.unsigned)};LongPrototype.subtract=function A(e){return isLong(e)||(e=fromValue(e)),this.add(e.neg())};LongPrototype.sub=LongPrototype.subtract;LongPrototype.multiply=function A(e){if(this.isZero())return ZERO;if(isLong(e)||(e=fromValue(e)),wasm){var t=wasm.mul(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}if(e.isZero())return ZERO;if(this.eq(MIN_VALUE))return e.isOdd()?MIN_VALUE:ZERO;if(e.eq(MIN_VALUE))return this.isOdd()?MIN_VALUE:ZERO;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(TWO_PWR_24)&&e.lt(TWO_PWR_24))return fromNumber(this.toNumber()*e.toNumber(),this.unsigned);var i=this.high>>>16,n=this.high&65535,g=this.low>>>16,I=this.low&65535,o=e.high>>>16,a=e.high&65535,r=e.low>>>16,s=e.low&65535,B=0,C=0,l=0,c=0;return c+=I*s,l+=c>>>16,c&=65535,l+=g*s,C+=l>>>16,l&=65535,l+=I*r,C+=l>>>16,l&=65535,C+=n*s,B+=C>>>16,C&=65535,C+=g*r,B+=C>>>16,C&=65535,C+=I*a,B+=C>>>16,C&=65535,B+=i*s+n*r+g*a+I*o,B&=65535,fromBits(l<<16|c,B<<16|C,this.unsigned)};LongPrototype.mul=LongPrototype.multiply;LongPrototype.divide=function A(e){if(isLong(e)||(e=fromValue(e)),e.isZero())throw Error("division by zero");if(wasm){if(!this.unsigned&&this.high===-2147483648&&e.low===-1&&e.high===-1)return this;var t=(this.unsigned?wasm.div_u:wasm.div_s)(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?UZERO:ZERO;var i,n,g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return UZERO;if(e.gt(this.shru(1)))return UONE;g=UZERO}else{if(this.eq(MIN_VALUE)){if(e.eq(ONE)||e.eq(NEG_ONE))return MIN_VALUE;if(e.eq(MIN_VALUE))return ONE;var I=this.shr(1);return i=I.div(e).shl(1),i.eq(ZERO)?e.isNegative()?ONE:NEG_ONE:(n=this.sub(e.mul(i)),g=i.add(n.div(e)),g)}else if(e.eq(MIN_VALUE))return this.unsigned?UZERO:ZERO;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();g=ZERO}for(n=this;n.gte(e);){i=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(i)/Math.LN2),a=o<=48?1:pow_dbl(2,o-48),r=fromNumber(i),s=r.mul(e);s.isNegative()||s.gt(n);)i-=a,r=fromNumber(i,this.unsigned),s=r.mul(e);r.isZero()&&(r=ONE),g=g.add(r),n=n.sub(s)}return g};LongPrototype.div=LongPrototype.divide;LongPrototype.modulo=function A(e){if(isLong(e)||(e=fromValue(e)),wasm){var t=(this.unsigned?wasm.rem_u:wasm.rem_s)(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}return this.sub(this.div(e).mul(e))};LongPrototype.mod=LongPrototype.modulo;LongPrototype.rem=LongPrototype.modulo;LongPrototype.not=function A(){return fromBits(~this.low,~this.high,this.unsigned)};LongPrototype.and=function A(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low&e.low,this.high&e.high,this.unsigned)};LongPrototype.or=function A(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low|e.low,this.high|e.high,this.unsigned)};LongPrototype.xor=function A(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low^e.low,this.high^e.high,this.unsigned)};LongPrototype.shiftLeft=function A(e){return isLong(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?fromBits(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):fromBits(0,this.low<<e-32,this.unsigned)};LongPrototype.shl=LongPrototype.shiftLeft;LongPrototype.shiftRight=function A(e){return isLong(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?fromBits(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):fromBits(this.high>>e-32,this.high>=0?0:-1,this.unsigned)};LongPrototype.shr=LongPrototype.shiftRight;LongPrototype.shiftRightUnsigned=function A(e){if(isLong(e)&&(e=e.toInt()),e&=63,e===0)return this;var t=this.high;if(e<32){var i=this.low;return fromBits(i>>>e|t<<32-e,t>>>e,this.unsigned)}else return e===32?fromBits(t,0,this.unsigned):fromBits(t>>>e-32,0,this.unsigned)};LongPrototype.shru=LongPrototype.shiftRightUnsigned;LongPrototype.shr_u=LongPrototype.shiftRightUnsigned;LongPrototype.toSigned=function A(){return this.unsigned?fromBits(this.low,this.high,!1):this};LongPrototype.toUnsigned=function A(){return this.unsigned?this:fromBits(this.low,this.high,!0)};LongPrototype.toBytes=function A(e){return e?this.toBytesLE():this.toBytesBE()};LongPrototype.toBytesLE=function A(){var e=this.high,t=this.low;return[t&255,t>>>8&255,t>>>16&255,t>>>24,e&255,e>>>8&255,e>>>16&255,e>>>24]};LongPrototype.toBytesBE=function A(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,e&255,t>>>24,t>>>16&255,t>>>8&255,t&255]};Long.fromBytes=function A(e,t,i){return i?Long.fromBytesLE(e,t):Long.fromBytesBE(e,t)};Long.fromBytesLE=function A(e,t){return new Long(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)};Long.fromBytesBE=function A(e,t){return new Long(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};function createBasePageRequest(){return{key:new Uint8Array,offset:"0",limit:"0",countTotal:!1,reverse:!1}}const PageRequest={encode(A,e=minimal.Writer.create()){return A.key.length!==0&&e.uint32(10).bytes(A.key),A.offset!=="0"&&e.uint32(16).uint64(A.offset),A.limit!=="0"&&e.uint32(24).uint64(A.limit),A.countTotal===!0&&e.uint32(32).bool(A.countTotal),A.reverse===!0&&e.uint32(40).bool(A.reverse),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBasePageRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.key=t.bytes();break;case 2:n.offset=longToString$3(t.uint64());break;case 3:n.limit=longToString$3(t.uint64());break;case 4:n.countTotal=t.bool();break;case 5:n.reverse=t.bool();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{key:isSet$c(A.key)?bytesFromBase64$7(A.key):new Uint8Array,offset:isSet$c(A.offset)?String(A.offset):"0",limit:isSet$c(A.limit)?String(A.limit):"0",countTotal:isSet$c(A.countTotal)?Boolean(A.countTotal):!1,reverse:isSet$c(A.reverse)?Boolean(A.reverse):!1}},toJSON(A){const e={};return A.key!==void 0&&(e.key=base64FromBytes$7(A.key!==void 0?A.key:new Uint8Array)),A.offset!==void 0&&(e.offset=A.offset),A.limit!==void 0&&(e.limit=A.limit),A.countTotal!==void 0&&(e.countTotal=A.countTotal),A.reverse!==void 0&&(e.reverse=A.reverse),e},fromPartial(A){const e=createBasePageRequest();return e.key=A.key??new Uint8Array,e.offset=A.offset??"0",e.limit=A.limit??"0",e.countTotal=A.countTotal??!1,e.reverse=A.reverse??!1,e}};function createBasePageResponse(){return{nextKey:new Uint8Array,total:"0"}}const PageResponse={encode(A,e=minimal.Writer.create()){return A.nextKey.length!==0&&e.uint32(10).bytes(A.nextKey),A.total!=="0"&&e.uint32(16).uint64(A.total),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBasePageResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.nextKey=t.bytes();break;case 2:n.total=longToString$3(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{nextKey:isSet$c(A.nextKey)?bytesFromBase64$7(A.nextKey):new Uint8Array,total:isSet$c(A.total)?String(A.total):"0"}},toJSON(A){const e={};return A.nextKey!==void 0&&(e.nextKey=base64FromBytes$7(A.nextKey!==void 0?A.nextKey:new Uint8Array)),A.total!==void 0&&(e.total=A.total),e},fromPartial(A){const e=createBasePageResponse();return e.nextKey=A.nextKey??new Uint8Array,e.total=A.total??"0",e}};var globalThis$d=(()=>{if(typeof globalThis$d<"u")return globalThis$d;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$7=globalThis$d.atob||(A=>globalThis$d.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$7(A){const e=atob$7(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$7=globalThis$d.btoa||(A=>globalThis$d.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$7(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$7(e.join(""))}function longToString$3(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$c(A){return A!=null}function createBaseParams$1(){return{sendEnabled:[],defaultSendEnabled:!1}}const Params$1={encode(A,e=minimal.Writer.create()){for(const t of A.sendEnabled)SendEnabled.encode(t,e.uint32(10).fork()).ldelim();return A.defaultSendEnabled===!0&&e.uint32(16).bool(A.defaultSendEnabled),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseParams$1();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.sendEnabled.push(SendEnabled.decode(t,t.uint32()));break;case 2:n.defaultSendEnabled=t.bool();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{sendEnabled:Array.isArray(A?.sendEnabled)?A.sendEnabled.map(e=>SendEnabled.fromJSON(e)):[],defaultSendEnabled:isSet$b(A.defaultSendEnabled)?Boolean(A.defaultSendEnabled):!1}},toJSON(A){const e={};return A.sendEnabled?e.sendEnabled=A.sendEnabled.map(t=>t?SendEnabled.toJSON(t):void 0):e.sendEnabled=[],A.defaultSendEnabled!==void 0&&(e.defaultSendEnabled=A.defaultSendEnabled),e},fromPartial(A){const e=createBaseParams$1();return e.sendEnabled=A.sendEnabled?.map(t=>SendEnabled.fromPartial(t))||[],e.defaultSendEnabled=A.defaultSendEnabled??!1,e}};function createBaseSendEnabled(){return{denom:"",enabled:!1}}const SendEnabled={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),A.enabled===!0&&e.uint32(16).bool(A.enabled),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSendEnabled();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;case 2:n.enabled=t.bool();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$b(A.denom)?String(A.denom):"",enabled:isSet$b(A.enabled)?Boolean(A.enabled):!1}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),A.enabled!==void 0&&(e.enabled=A.enabled),e},fromPartial(A){const e=createBaseSendEnabled();return e.denom=A.denom??"",e.enabled=A.enabled??!1,e}};function createBaseDenomUnit(){return{denom:"",exponent:0,aliases:[]}}const DenomUnit={encode(A,e=minimal.Writer.create()){A.denom!==""&&e.uint32(10).string(A.denom),A.exponent!==0&&e.uint32(16).uint32(A.exponent);for(const t of A.aliases)e.uint32(26).string(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseDenomUnit();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;case 2:n.exponent=t.uint32();break;case 3:n.aliases.push(t.string());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$b(A.denom)?String(A.denom):"",exponent:isSet$b(A.exponent)?Number(A.exponent):0,aliases:Array.isArray(A?.aliases)?A.aliases.map(e=>String(e)):[]}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),A.exponent!==void 0&&(e.exponent=Math.round(A.exponent)),A.aliases?e.aliases=A.aliases.map(t=>t):e.aliases=[],e},fromPartial(A){const e=createBaseDenomUnit();return e.denom=A.denom??"",e.exponent=A.exponent??0,e.aliases=A.aliases?.map(t=>t)||[],e}};function createBaseMetadata(){return{description:"",denomUnits:[],base:"",display:"",name:"",symbol:""}}const Metadata={encode(A,e=minimal.Writer.create()){A.description!==""&&e.uint32(10).string(A.description);for(const t of A.denomUnits)DenomUnit.encode(t,e.uint32(18).fork()).ldelim();return A.base!==""&&e.uint32(26).string(A.base),A.display!==""&&e.uint32(34).string(A.display),A.name!==""&&e.uint32(42).string(A.name),A.symbol!==""&&e.uint32(50).string(A.symbol),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseMetadata();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.description=t.string();break;case 2:n.denomUnits.push(DenomUnit.decode(t,t.uint32()));break;case 3:n.base=t.string();break;case 4:n.display=t.string();break;case 5:n.name=t.string();break;case 6:n.symbol=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{description:isSet$b(A.description)?String(A.description):"",denomUnits:Array.isArray(A?.denomUnits)?A.denomUnits.map(e=>DenomUnit.fromJSON(e)):[],base:isSet$b(A.base)?String(A.base):"",display:isSet$b(A.display)?String(A.display):"",name:isSet$b(A.name)?String(A.name):"",symbol:isSet$b(A.symbol)?String(A.symbol):""}},toJSON(A){const e={};return A.description!==void 0&&(e.description=A.description),A.denomUnits?e.denomUnits=A.denomUnits.map(t=>t?DenomUnit.toJSON(t):void 0):e.denomUnits=[],A.base!==void 0&&(e.base=A.base),A.display!==void 0&&(e.display=A.display),A.name!==void 0&&(e.name=A.name),A.symbol!==void 0&&(e.symbol=A.symbol),e},fromPartial(A){const e=createBaseMetadata();return e.description=A.description??"",e.denomUnits=A.denomUnits?.map(t=>DenomUnit.fromPartial(t))||[],e.base=A.base??"",e.display=A.display??"",e.name=A.name??"",e.symbol=A.symbol??"",e}};function isSet$b(A){return A!=null}var browserHeaders_umd={exports:{}};(function(A,e){(function(i,n){A.exports=n()})(commonjsGlobal,function(){return function(t){var i={};function n(g){if(i[g])return i[g].exports;var I=i[g]={i:g,l:!1,exports:{}};return t[g].call(I.exports,I,I.exports,n),I.l=!0,I.exports}return n.m=t,n.c=i,n.i=function(g){return g},n.d=function(g,I,o){n.o(g,I)||Object.defineProperty(g,I,{configurable:!1,enumerable:!0,get:o})},n.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return n.d(I,"a",I),I},n.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},n.p="",n(n.s=1)}([function(t,i,n){Object.defineProperty(i,"__esModule",{value:!0});var g=n(3);function I(a){return typeof a=="object"&&typeof a.headersMap=="object"&&typeof a.forEach=="function"}var o=function(){function a(r,s){r===void 0&&(r={}),s===void 0&&(s={splitValues:!1});var B=this;if(this.headersMap={},r)if(typeof Headers<"u"&&r instanceof Headers){var C=g.getHeaderKeys(r);C.forEach(function(c){var Q=g.getHeaderValues(r,c);Q.forEach(function(E){s.splitValues?B.append(c,g.splitHeaderValue(E)):B.append(c,E)})})}else if(I(r))r.forEach(function(c,Q){B.append(c,Q)});else if(typeof Map<"u"&&r instanceof Map){var l=r;l.forEach(function(c,Q){B.append(Q,c)})}else typeof r=="string"?this.appendFromString(r):typeof r=="object"&&Object.getOwnPropertyNames(r).forEach(function(c){var Q=r,E=Q[c];Array.isArray(E)?E.forEach(function(f){B.append(c,f)}):B.append(c,E)})}return a.prototype.appendFromString=function(r){for(var s=r.split(`\r
`),B=0;B<s.length;B++){var C=s[B],l=C.indexOf(":");if(l>0){var c=C.substring(0,l).trim(),Q=C.substring(l+1).trim();this.append(c,Q)}}},a.prototype.delete=function(r,s){var B=g.normalizeName(r);if(s===void 0)delete this.headersMap[B];else{var C=this.headersMap[B];if(C){var l=C.indexOf(s);l>=0&&C.splice(l,1),C.length===0&&delete this.headersMap[B]}}},a.prototype.append=function(r,s){var B=this,C=g.normalizeName(r);Array.isArray(this.headersMap[C])||(this.headersMap[C]=[]),Array.isArray(s)?s.forEach(function(l){B.headersMap[C].push(g.normalizeValue(l))}):this.headersMap[C].push(g.normalizeValue(s))},a.prototype.set=function(r,s){var B=g.normalizeName(r);if(Array.isArray(s)){var C=[];s.forEach(function(l){C.push(g.normalizeValue(l))}),this.headersMap[B]=C}else this.headersMap[B]=[g.normalizeValue(s)]},a.prototype.has=function(r,s){var B=this.headersMap[g.normalizeName(r)],C=Array.isArray(B);if(!C)return!1;if(s!==void 0){var l=g.normalizeValue(s);return B.indexOf(l)>=0}else return!0},a.prototype.get=function(r){var s=this.headersMap[g.normalizeName(r)];return s!==void 0?s.concat():[]},a.prototype.forEach=function(r){var s=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(B){r(B,s.headersMap[B])},this)},a.prototype.toHeaders=function(){if(typeof Headers<"u"){var r=new Headers;return this.forEach(function(s,B){B.forEach(function(C){r.append(s,C)})}),r}else throw new Error("Headers class is not defined")},a}();i.BrowserHeaders=o},function(t,i,n){Object.defineProperty(i,"__esModule",{value:!0});var g=n(0);i.BrowserHeaders=g.BrowserHeaders},function(t,i,n){Object.defineProperty(i,"__esModule",{value:!0});function g(o,a){for(var r=o[Symbol.iterator](),s=r.next();!s.done;)a(s.value[0]),s=r.next()}i.iterateHeaders=g;function I(o,a){for(var r=o.keys(),s=r.next();!s.done;)a(s.value),s=r.next()}i.iterateHeadersKeys=I},function(t,i,n){Object.defineProperty(i,"__esModule",{value:!0});var g=n(2);function I(C){if(typeof C!="string"&&(C=String(C)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(C))throw new TypeError("Invalid character in header field name");return C.toLowerCase()}i.normalizeName=I;function o(C){return typeof C!="string"&&(C=String(C)),C}i.normalizeValue=o;function a(C,l){var c=C;if(c instanceof Headers&&c.getAll)return c.getAll(l);var Q=c.get(l);return Q&&typeof Q=="string"?[Q]:Q}i.getHeaderValues=a;function r(C){return C}function s(C){var l=C,c={},Q=[];return l.keys?g.iterateHeadersKeys(l,function(E){c[E]||(c[E]=!0,Q.push(E))}):l.forEach?l.forEach(function(E,f){c[f]||(c[f]=!0,Q.push(f))}):g.iterateHeaders(l,function(E){var f=E[0];c[f]||(c[f]=!0,Q.push(f))}),Q}i.getHeaderKeys=s;function B(C){var l=[],c=C.split(", ");return c.forEach(function(Q){Q.split(",").forEach(function(E){l.push(E)})}),l}i.splitHeaderValue=B}])})})(browserHeaders_umd);function createBaseQueryBalanceRequest(){return{address:"",denom:""}}const QueryBalanceRequest={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.denom!==""&&e.uint32(18).string(A.denom),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryBalanceRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.address=t.string();break;case 2:n.denom=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{address:isSet$a(A.address)?String(A.address):"",denom:isSet$a(A.denom)?String(A.denom):""}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.denom!==void 0&&(e.denom=A.denom),e},fromPartial(A){const e=createBaseQueryBalanceRequest();return e.address=A.address??"",e.denom=A.denom??"",e}};function createBaseQueryBalanceResponse(){return{balance:void 0}}const QueryBalanceResponse={encode(A,e=minimal.Writer.create()){return A.balance!==void 0&&Coin.encode(A.balance,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryBalanceResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.balance=Coin.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{balance:isSet$a(A.balance)?Coin.fromJSON(A.balance):void 0}},toJSON(A){const e={};return A.balance!==void 0&&(e.balance=A.balance?Coin.toJSON(A.balance):void 0),e},fromPartial(A){const e=createBaseQueryBalanceResponse();return e.balance=A.balance!==void 0&&A.balance!==null?Coin.fromPartial(A.balance):void 0,e}};function createBaseQueryAllBalancesRequest(){return{address:"",pagination:void 0}}const QueryAllBalancesRequest={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAllBalancesRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.address=t.string();break;case 2:n.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{address:isSet$a(A.address)?String(A.address):"",pagination:isSet$a(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAllBalancesRequest();return e.address=A.address??"",e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryAllBalancesResponse(){return{balances:[],pagination:void 0}}const QueryAllBalancesResponse={encode(A,e=minimal.Writer.create()){for(const t of A.balances)Coin.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAllBalancesResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.balances.push(Coin.decode(t,t.uint32()));break;case 2:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{balances:Array.isArray(A?.balances)?A.balances.map(e=>Coin.fromJSON(e)):[],pagination:isSet$a(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.balances?e.balances=A.balances.map(t=>t?Coin.toJSON(t):void 0):e.balances=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAllBalancesResponse();return e.balances=A.balances?.map(t=>Coin.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQueryTotalSupplyRequest(){return{pagination:void 0}}const QueryTotalSupplyRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryTotalSupplyRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{pagination:isSet$a(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryTotalSupplyRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryTotalSupplyResponse(){return{supply:[],pagination:void 0}}const QueryTotalSupplyResponse={encode(A,e=minimal.Writer.create()){for(const t of A.supply)Coin.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryTotalSupplyResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.supply.push(Coin.decode(t,t.uint32()));break;case 2:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{supply:Array.isArray(A?.supply)?A.supply.map(e=>Coin.fromJSON(e)):[],pagination:isSet$a(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.supply?e.supply=A.supply.map(t=>t?Coin.toJSON(t):void 0):e.supply=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryTotalSupplyResponse();return e.supply=A.supply?.map(t=>Coin.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQuerySupplyOfRequest(){return{denom:""}}const QuerySupplyOfRequest={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQuerySupplyOfRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$a(A.denom)?String(A.denom):""}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),e},fromPartial(A){const e=createBaseQuerySupplyOfRequest();return e.denom=A.denom??"",e}};function createBaseQuerySupplyOfResponse(){return{amount:void 0}}const QuerySupplyOfResponse={encode(A,e=minimal.Writer.create()){return A.amount!==void 0&&Coin.encode(A.amount,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQuerySupplyOfResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.amount=Coin.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{amount:isSet$a(A.amount)?Coin.fromJSON(A.amount):void 0}},toJSON(A){const e={};return A.amount!==void 0&&(e.amount=A.amount?Coin.toJSON(A.amount):void 0),e},fromPartial(A){const e=createBaseQuerySupplyOfResponse();return e.amount=A.amount!==void 0&&A.amount!==null?Coin.fromPartial(A.amount):void 0,e}};function createBaseQueryParamsRequest$1(){return{}}const QueryParamsRequest$1={encode(A,e=minimal.Writer.create()){return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryParamsRequest$1();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){default:t.skipType(g&7);break}}return n},fromJSON(A){return{}},toJSON(A){return{}},fromPartial(A){return createBaseQueryParamsRequest$1()}};function createBaseQueryParamsResponse$1(){return{params:void 0}}const QueryParamsResponse$1={encode(A,e=minimal.Writer.create()){return A.params!==void 0&&Params$1.encode(A.params,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryParamsResponse$1();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.params=Params$1.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{params:isSet$a(A.params)?Params$1.fromJSON(A.params):void 0}},toJSON(A){const e={};return A.params!==void 0&&(e.params=A.params?Params$1.toJSON(A.params):void 0),e},fromPartial(A){const e=createBaseQueryParamsResponse$1();return e.params=A.params!==void 0&&A.params!==null?Params$1.fromPartial(A.params):void 0,e}};function createBaseQueryDenomsMetadataRequest(){return{pagination:void 0}}const QueryDenomsMetadataRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryDenomsMetadataRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{pagination:isSet$a(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryDenomsMetadataRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryDenomsMetadataResponse(){return{metadatas:[],pagination:void 0}}const QueryDenomsMetadataResponse={encode(A,e=minimal.Writer.create()){for(const t of A.metadatas)Metadata.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryDenomsMetadataResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.metadatas.push(Metadata.decode(t,t.uint32()));break;case 2:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{metadatas:Array.isArray(A?.metadatas)?A.metadatas.map(e=>Metadata.fromJSON(e)):[],pagination:isSet$a(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.metadatas?e.metadatas=A.metadatas.map(t=>t?Metadata.toJSON(t):void 0):e.metadatas=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryDenomsMetadataResponse();return e.metadatas=A.metadatas?.map(t=>Metadata.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQueryDenomMetadataRequest(){return{denom:""}}const QueryDenomMetadataRequest={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryDenomMetadataRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$a(A.denom)?String(A.denom):""}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),e},fromPartial(A){const e=createBaseQueryDenomMetadataRequest();return e.denom=A.denom??"",e}};function createBaseQueryDenomMetadataResponse(){return{metadata:void 0}}const QueryDenomMetadataResponse={encode(A,e=minimal.Writer.create()){return A.metadata!==void 0&&Metadata.encode(A.metadata,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryDenomMetadataResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.metadata=Metadata.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{metadata:isSet$a(A.metadata)?Metadata.fromJSON(A.metadata):void 0}},toJSON(A){const e={};return A.metadata!==void 0&&(e.metadata=A.metadata?Metadata.toJSON(A.metadata):void 0),e},fromPartial(A){const e=createBaseQueryDenomMetadataResponse();return e.metadata=A.metadata!==void 0&&A.metadata!==null?Metadata.fromPartial(A.metadata):void 0,e}};class QueryClientImpl$1{constructor(e){lA(this,"rpc");this.rpc=e,this.balance=this.balance.bind(this),this.allBalances=this.allBalances.bind(this),this.totalSupply=this.totalSupply.bind(this),this.supplyOf=this.supplyOf.bind(this),this.params=this.params.bind(this),this.denomMetadata=this.denomMetadata.bind(this),this.denomsMetadata=this.denomsMetadata.bind(this)}balance(e,t){return this.rpc.unary(QueryBalanceDesc,QueryBalanceRequest.fromPartial(e),t)}allBalances(e,t){return this.rpc.unary(QueryAllBalancesDesc,QueryAllBalancesRequest.fromPartial(e),t)}totalSupply(e,t){return this.rpc.unary(QueryTotalSupplyDesc,QueryTotalSupplyRequest.fromPartial(e),t)}supplyOf(e,t){return this.rpc.unary(QuerySupplyOfDesc,QuerySupplyOfRequest.fromPartial(e),t)}params(e,t){return this.rpc.unary(QueryParamsDesc$1,QueryParamsRequest$1.fromPartial(e),t)}denomMetadata(e,t){return this.rpc.unary(QueryDenomMetadataDesc,QueryDenomMetadataRequest.fromPartial(e),t)}denomsMetadata(e,t){return this.rpc.unary(QueryDenomsMetadataDesc,QueryDenomsMetadataRequest.fromPartial(e),t)}}const QueryDesc$1={serviceName:"cosmos.bank.v1beta1.Query"},QueryBalanceDesc={methodName:"Balance",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryBalanceRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryBalanceResponse.decode(A),toObject(){return this}}}}},QueryAllBalancesDesc={methodName:"AllBalances",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAllBalancesRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryAllBalancesResponse.decode(A),toObject(){return this}}}}},QueryTotalSupplyDesc={methodName:"TotalSupply",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryTotalSupplyRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryTotalSupplyResponse.decode(A),toObject(){return this}}}}},QuerySupplyOfDesc={methodName:"SupplyOf",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QuerySupplyOfRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QuerySupplyOfResponse.decode(A),toObject(){return this}}}}},QueryParamsDesc$1={methodName:"Params",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryParamsRequest$1.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryParamsResponse$1.decode(A),toObject(){return this}}}}},QueryDenomMetadataDesc={methodName:"DenomMetadata",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryDenomMetadataRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryDenomMetadataResponse.decode(A),toObject(){return this}}}}},QueryDenomsMetadataDesc={methodName:"DenomsMetadata",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryDenomsMetadataRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryDenomsMetadataResponse.decode(A),toObject(){return this}}}}};class GrpcWebImpl{constructor(e,t){lA(this,"host");lA(this,"options");this.host=e,this.options=t}unary(e,t,i){const n={...t,...e.requestType},g=i&&this.options.metadata?new browserHeaders_umd.exports.BrowserHeaders({...this.options?.metadata.headersMap,...i?.headersMap}):i||this.options.metadata;return new Promise((I,o)=>{grpcWebClient_umd.exports.grpc.unary(e,{request:n,host:this.host,metadata:g,transport:this.options.transport,debug:this.options.debug,onEnd:function(a){if(a.status===grpcWebClient_umd.exports.grpc.Code.OK)I(a.message);else{const r=new Error(a.statusMessage);r.code=a.status,r.metadata=a.trailers,o(r)}}})})}}function isSet$a(A){return A!=null}function createBaseAny(){return{typeUrl:"",value:new Uint8Array}}const Any={encode(A,e=minimal.Writer.create()){return A.typeUrl!==""&&e.uint32(10).string(A.typeUrl),A.value.length!==0&&e.uint32(18).bytes(A.value),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseAny();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.typeUrl=t.string();break;case 2:n.value=t.bytes();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{typeUrl:isSet$9(A.typeUrl)?String(A.typeUrl):"",value:isSet$9(A.value)?bytesFromBase64$6(A.value):new Uint8Array}},toJSON(A){const e={};return A.typeUrl!==void 0&&(e.typeUrl=A.typeUrl),A.value!==void 0&&(e.value=base64FromBytes$6(A.value!==void 0?A.value:new Uint8Array)),e},fromPartial(A){const e=createBaseAny();return e.typeUrl=A.typeUrl??"",e.value=A.value??new Uint8Array,e}};var globalThis$c=(()=>{if(typeof globalThis$c<"u")return globalThis$c;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$6=globalThis$c.atob||(A=>globalThis$c.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$6(A){const e=atob$6(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$6=globalThis$c.btoa||(A=>globalThis$c.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$6(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$6(e.join(""))}function isSet$9(A){return A!=null}function createBaseBaseAccount(){return{address:"",pubKey:void 0,accountNumber:"0",sequence:"0"}}const BaseAccount={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.pubKey!==void 0&&Any.encode(A.pubKey,e.uint32(18).fork()).ldelim(),A.accountNumber!=="0"&&e.uint32(24).uint64(A.accountNumber),A.sequence!=="0"&&e.uint32(32).uint64(A.sequence),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseBaseAccount();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.address=t.string();break;case 2:n.pubKey=Any.decode(t,t.uint32());break;case 3:n.accountNumber=longToString$2(t.uint64());break;case 4:n.sequence=longToString$2(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{address:isSet$8(A.address)?String(A.address):"",pubKey:isSet$8(A.pubKey)?Any.fromJSON(A.pubKey):void 0,accountNumber:isSet$8(A.accountNumber)?String(A.accountNumber):"0",sequence:isSet$8(A.sequence)?String(A.sequence):"0"}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.pubKey!==void 0&&(e.pubKey=A.pubKey?Any.toJSON(A.pubKey):void 0),A.accountNumber!==void 0&&(e.accountNumber=A.accountNumber),A.sequence!==void 0&&(e.sequence=A.sequence),e},fromPartial(A){const e=createBaseBaseAccount();return e.address=A.address??"",e.pubKey=A.pubKey!==void 0&&A.pubKey!==null?Any.fromPartial(A.pubKey):void 0,e.accountNumber=A.accountNumber??"0",e.sequence=A.sequence??"0",e}};function createBaseParams(){return{maxMemoCharacters:"0",txSigLimit:"0",txSizeCostPerByte:"0",sigVerifyCostEd25519:"0",sigVerifyCostSecp256k1:"0"}}const Params={encode(A,e=minimal.Writer.create()){return A.maxMemoCharacters!=="0"&&e.uint32(8).uint64(A.maxMemoCharacters),A.txSigLimit!=="0"&&e.uint32(16).uint64(A.txSigLimit),A.txSizeCostPerByte!=="0"&&e.uint32(24).uint64(A.txSizeCostPerByte),A.sigVerifyCostEd25519!=="0"&&e.uint32(32).uint64(A.sigVerifyCostEd25519),A.sigVerifyCostSecp256k1!=="0"&&e.uint32(40).uint64(A.sigVerifyCostSecp256k1),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseParams();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.maxMemoCharacters=longToString$2(t.uint64());break;case 2:n.txSigLimit=longToString$2(t.uint64());break;case 3:n.txSizeCostPerByte=longToString$2(t.uint64());break;case 4:n.sigVerifyCostEd25519=longToString$2(t.uint64());break;case 5:n.sigVerifyCostSecp256k1=longToString$2(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{maxMemoCharacters:isSet$8(A.maxMemoCharacters)?String(A.maxMemoCharacters):"0",txSigLimit:isSet$8(A.txSigLimit)?String(A.txSigLimit):"0",txSizeCostPerByte:isSet$8(A.txSizeCostPerByte)?String(A.txSizeCostPerByte):"0",sigVerifyCostEd25519:isSet$8(A.sigVerifyCostEd25519)?String(A.sigVerifyCostEd25519):"0",sigVerifyCostSecp256k1:isSet$8(A.sigVerifyCostSecp256k1)?String(A.sigVerifyCostSecp256k1):"0"}},toJSON(A){const e={};return A.maxMemoCharacters!==void 0&&(e.maxMemoCharacters=A.maxMemoCharacters),A.txSigLimit!==void 0&&(e.txSigLimit=A.txSigLimit),A.txSizeCostPerByte!==void 0&&(e.txSizeCostPerByte=A.txSizeCostPerByte),A.sigVerifyCostEd25519!==void 0&&(e.sigVerifyCostEd25519=A.sigVerifyCostEd25519),A.sigVerifyCostSecp256k1!==void 0&&(e.sigVerifyCostSecp256k1=A.sigVerifyCostSecp256k1),e},fromPartial(A){const e=createBaseParams();return e.maxMemoCharacters=A.maxMemoCharacters??"0",e.txSigLimit=A.txSigLimit??"0",e.txSizeCostPerByte=A.txSizeCostPerByte??"0",e.sigVerifyCostEd25519=A.sigVerifyCostEd25519??"0",e.sigVerifyCostSecp256k1=A.sigVerifyCostSecp256k1??"0",e}};function longToString$2(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$8(A){return A!=null}function createBaseQueryAccountsRequest(){return{pagination:void 0}}const QueryAccountsRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAccountsRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{pagination:isSet$7(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAccountsRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryAccountsResponse(){return{accounts:[],pagination:void 0}}const QueryAccountsResponse={encode(A,e=minimal.Writer.create()){for(const t of A.accounts)Any.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAccountsResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.accounts.push(Any.decode(t,t.uint32()));break;case 2:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{accounts:Array.isArray(A?.accounts)?A.accounts.map(e=>Any.fromJSON(e)):[],pagination:isSet$7(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.accounts?e.accounts=A.accounts.map(t=>t?Any.toJSON(t):void 0):e.accounts=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAccountsResponse();return e.accounts=A.accounts?.map(t=>Any.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQueryAccountRequest(){return{address:""}}const QueryAccountRequest={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAccountRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.address=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{address:isSet$7(A.address)?String(A.address):""}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),e},fromPartial(A){const e=createBaseQueryAccountRequest();return e.address=A.address??"",e}};function createBaseQueryAccountResponse(){return{account:void 0}}const QueryAccountResponse={encode(A,e=minimal.Writer.create()){return A.account!==void 0&&Any.encode(A.account,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAccountResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.account=Any.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{account:isSet$7(A.account)?Any.fromJSON(A.account):void 0}},toJSON(A){const e={};return A.account!==void 0&&(e.account=A.account?Any.toJSON(A.account):void 0),e},fromPartial(A){const e=createBaseQueryAccountResponse();return e.account=A.account!==void 0&&A.account!==null?Any.fromPartial(A.account):void 0,e}};function createBaseQueryParamsRequest(){return{}}const QueryParamsRequest={encode(A,e=minimal.Writer.create()){return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryParamsRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){default:t.skipType(g&7);break}}return n},fromJSON(A){return{}},toJSON(A){return{}},fromPartial(A){return createBaseQueryParamsRequest()}};function createBaseQueryParamsResponse(){return{params:void 0}}const QueryParamsResponse={encode(A,e=minimal.Writer.create()){return A.params!==void 0&&Params.encode(A.params,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryParamsResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.params=Params.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{params:isSet$7(A.params)?Params.fromJSON(A.params):void 0}},toJSON(A){const e={};return A.params!==void 0&&(e.params=A.params?Params.toJSON(A.params):void 0),e},fromPartial(A){const e=createBaseQueryParamsResponse();return e.params=A.params!==void 0&&A.params!==null?Params.fromPartial(A.params):void 0,e}};class QueryClientImpl{constructor(e){lA(this,"rpc");this.rpc=e,this.accounts=this.accounts.bind(this),this.account=this.account.bind(this),this.params=this.params.bind(this)}accounts(e,t){return this.rpc.unary(QueryAccountsDesc,QueryAccountsRequest.fromPartial(e),t)}account(e,t){return this.rpc.unary(QueryAccountDesc,QueryAccountRequest.fromPartial(e),t)}params(e,t){return this.rpc.unary(QueryParamsDesc,QueryParamsRequest.fromPartial(e),t)}}const QueryDesc={serviceName:"cosmos.auth.v1beta1.Query"},QueryAccountsDesc={methodName:"Accounts",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAccountsRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryAccountsResponse.decode(A),toObject(){return this}}}}},QueryAccountDesc={methodName:"Account",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAccountRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryAccountResponse.decode(A),toObject(){return this}}}}},QueryParamsDesc={methodName:"Params",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryParamsRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryParamsResponse.decode(A),toObject(){return this}}}}};function isSet$7(A){return A!=null}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var globalThis$b=(()=>{if(typeof globalThis$b<"u")return globalThis$b;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$b.atob;globalThis$b.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var globalThis$a=(()=>{if(typeof globalThis$a<"u")return globalThis$a;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$a.atob;globalThis$a.btoa;var globalThis$9=(()=>{if(typeof globalThis$9<"u")return globalThis$9;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$9.atob;globalThis$9.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var BlockIDFlag;(function(A){A[A.BLOCK_ID_FLAG_UNKNOWN=0]="BLOCK_ID_FLAG_UNKNOWN",A[A.BLOCK_ID_FLAG_ABSENT=1]="BLOCK_ID_FLAG_ABSENT",A[A.BLOCK_ID_FLAG_COMMIT=2]="BLOCK_ID_FLAG_COMMIT",A[A.BLOCK_ID_FLAG_NIL=3]="BLOCK_ID_FLAG_NIL",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(BlockIDFlag||(BlockIDFlag={}));var SignedMsgType;(function(A){A[A.SIGNED_MSG_TYPE_UNKNOWN=0]="SIGNED_MSG_TYPE_UNKNOWN",A[A.SIGNED_MSG_TYPE_PREVOTE=1]="SIGNED_MSG_TYPE_PREVOTE",A[A.SIGNED_MSG_TYPE_PRECOMMIT=2]="SIGNED_MSG_TYPE_PRECOMMIT",A[A.SIGNED_MSG_TYPE_PROPOSAL=32]="SIGNED_MSG_TYPE_PROPOSAL",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(SignedMsgType||(SignedMsgType={}));var globalThis$8=(()=>{if(typeof globalThis$8<"u")return globalThis$8;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$8.atob;globalThis$8.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var CheckTxType;(function(A){A[A.NEW=0]="NEW",A[A.RECHECK=1]="RECHECK",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(CheckTxType||(CheckTxType={}));var EvidenceType;(function(A){A[A.UNKNOWN=0]="UNKNOWN",A[A.DUPLICATE_VOTE=1]="DUPLICATE_VOTE",A[A.LIGHT_CLIENT_ATTACK=2]="LIGHT_CLIENT_ATTACK",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(EvidenceType||(EvidenceType={}));var ResponseOfferSnapshot_Result;(function(A){A[A.UNKNOWN=0]="UNKNOWN",A[A.ACCEPT=1]="ACCEPT",A[A.ABORT=2]="ABORT",A[A.REJECT=3]="REJECT",A[A.REJECT_FORMAT=4]="REJECT_FORMAT",A[A.REJECT_SENDER=5]="REJECT_SENDER",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(ResponseOfferSnapshot_Result||(ResponseOfferSnapshot_Result={}));var ResponseApplySnapshotChunk_Result;(function(A){A[A.UNKNOWN=0]="UNKNOWN",A[A.ACCEPT=1]="ACCEPT",A[A.ABORT=2]="ABORT",A[A.RETRY=3]="RETRY",A[A.RETRY_SNAPSHOT=4]="RETRY_SNAPSHOT",A[A.REJECT_SNAPSHOT=5]="REJECT_SNAPSHOT",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(ResponseApplySnapshotChunk_Result||(ResponseApplySnapshotChunk_Result={}));function createBaseEvent(){return{type:"",attributes:[]}}const Event$1={encode(A,e=minimal.Writer.create()){A.type!==""&&e.uint32(10).string(A.type);for(const t of A.attributes)EventAttribute.encode(t,e.uint32(18).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseEvent();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.type=t.string();break;case 2:n.attributes.push(EventAttribute.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{type:isSet$6(A.type)?String(A.type):"",attributes:Array.isArray(A?.attributes)?A.attributes.map(e=>EventAttribute.fromJSON(e)):[]}},toJSON(A){const e={};return A.type!==void 0&&(e.type=A.type),A.attributes?e.attributes=A.attributes.map(t=>t?EventAttribute.toJSON(t):void 0):e.attributes=[],e},fromPartial(A){const e=createBaseEvent();return e.type=A.type??"",e.attributes=A.attributes?.map(t=>EventAttribute.fromPartial(t))||[],e}};function createBaseEventAttribute(){return{key:new Uint8Array,value:new Uint8Array,index:!1}}const EventAttribute={encode(A,e=minimal.Writer.create()){return A.key.length!==0&&e.uint32(10).bytes(A.key),A.value.length!==0&&e.uint32(18).bytes(A.value),A.index===!0&&e.uint32(24).bool(A.index),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseEventAttribute();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.key=t.bytes();break;case 2:n.value=t.bytes();break;case 3:n.index=t.bool();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{key:isSet$6(A.key)?bytesFromBase64$5(A.key):new Uint8Array,value:isSet$6(A.value)?bytesFromBase64$5(A.value):new Uint8Array,index:isSet$6(A.index)?Boolean(A.index):!1}},toJSON(A){const e={};return A.key!==void 0&&(e.key=base64FromBytes$5(A.key!==void 0?A.key:new Uint8Array)),A.value!==void 0&&(e.value=base64FromBytes$5(A.value!==void 0?A.value:new Uint8Array)),A.index!==void 0&&(e.index=A.index),e},fromPartial(A){const e=createBaseEventAttribute();return e.key=A.key??new Uint8Array,e.value=A.value??new Uint8Array,e.index=A.index??!1,e}};var globalThis$7=(()=>{if(typeof globalThis$7<"u")return globalThis$7;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$5=globalThis$7.atob||(A=>globalThis$7.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$5(A){const e=atob$5(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$5=globalThis$7.btoa||(A=>globalThis$7.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$5(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$5(e.join(""))}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$6(A){return A!=null}function createBaseTxResponse(){return{height:"0",txhash:"",codespace:"",code:0,data:"",rawLog:"",logs:[],info:"",gasWanted:"0",gasUsed:"0",tx:void 0,timestamp:"",events:[]}}const TxResponse={encode(A,e=minimal.Writer.create()){A.height!=="0"&&e.uint32(8).int64(A.height),A.txhash!==""&&e.uint32(18).string(A.txhash),A.codespace!==""&&e.uint32(26).string(A.codespace),A.code!==0&&e.uint32(32).uint32(A.code),A.data!==""&&e.uint32(42).string(A.data),A.rawLog!==""&&e.uint32(50).string(A.rawLog);for(const t of A.logs)ABCIMessageLog.encode(t,e.uint32(58).fork()).ldelim();A.info!==""&&e.uint32(66).string(A.info),A.gasWanted!=="0"&&e.uint32(72).int64(A.gasWanted),A.gasUsed!=="0"&&e.uint32(80).int64(A.gasUsed),A.tx!==void 0&&Any.encode(A.tx,e.uint32(90).fork()).ldelim(),A.timestamp!==""&&e.uint32(98).string(A.timestamp);for(const t of A.events)Event$1.encode(t,e.uint32(106).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseTxResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.height=longToString$1(t.int64());break;case 2:n.txhash=t.string();break;case 3:n.codespace=t.string();break;case 4:n.code=t.uint32();break;case 5:n.data=t.string();break;case 6:n.rawLog=t.string();break;case 7:n.logs.push(ABCIMessageLog.decode(t,t.uint32()));break;case 8:n.info=t.string();break;case 9:n.gasWanted=longToString$1(t.int64());break;case 10:n.gasUsed=longToString$1(t.int64());break;case 11:n.tx=Any.decode(t,t.uint32());break;case 12:n.timestamp=t.string();break;case 13:n.events.push(Event$1.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{height:isSet$5(A.height)?String(A.height):"0",txhash:isSet$5(A.txhash)?String(A.txhash):"",codespace:isSet$5(A.codespace)?String(A.codespace):"",code:isSet$5(A.code)?Number(A.code):0,data:isSet$5(A.data)?String(A.data):"",rawLog:isSet$5(A.rawLog)?String(A.rawLog):"",logs:Array.isArray(A?.logs)?A.logs.map(e=>ABCIMessageLog.fromJSON(e)):[],info:isSet$5(A.info)?String(A.info):"",gasWanted:isSet$5(A.gasWanted)?String(A.gasWanted):"0",gasUsed:isSet$5(A.gasUsed)?String(A.gasUsed):"0",tx:isSet$5(A.tx)?Any.fromJSON(A.tx):void 0,timestamp:isSet$5(A.timestamp)?String(A.timestamp):"",events:Array.isArray(A?.events)?A.events.map(e=>Event$1.fromJSON(e)):[]}},toJSON(A){const e={};return A.height!==void 0&&(e.height=A.height),A.txhash!==void 0&&(e.txhash=A.txhash),A.codespace!==void 0&&(e.codespace=A.codespace),A.code!==void 0&&(e.code=Math.round(A.code)),A.data!==void 0&&(e.data=A.data),A.rawLog!==void 0&&(e.rawLog=A.rawLog),A.logs?e.logs=A.logs.map(t=>t?ABCIMessageLog.toJSON(t):void 0):e.logs=[],A.info!==void 0&&(e.info=A.info),A.gasWanted!==void 0&&(e.gasWanted=A.gasWanted),A.gasUsed!==void 0&&(e.gasUsed=A.gasUsed),A.tx!==void 0&&(e.tx=A.tx?Any.toJSON(A.tx):void 0),A.timestamp!==void 0&&(e.timestamp=A.timestamp),A.events?e.events=A.events.map(t=>t?Event$1.toJSON(t):void 0):e.events=[],e},fromPartial(A){const e=createBaseTxResponse();return e.height=A.height??"0",e.txhash=A.txhash??"",e.codespace=A.codespace??"",e.code=A.code??0,e.data=A.data??"",e.rawLog=A.rawLog??"",e.logs=A.logs?.map(t=>ABCIMessageLog.fromPartial(t))||[],e.info=A.info??"",e.gasWanted=A.gasWanted??"0",e.gasUsed=A.gasUsed??"0",e.tx=A.tx!==void 0&&A.tx!==null?Any.fromPartial(A.tx):void 0,e.timestamp=A.timestamp??"",e.events=A.events?.map(t=>Event$1.fromPartial(t))||[],e}};function createBaseABCIMessageLog(){return{msgIndex:0,log:"",events:[]}}const ABCIMessageLog={encode(A,e=minimal.Writer.create()){A.msgIndex!==0&&e.uint32(8).uint32(A.msgIndex),A.log!==""&&e.uint32(18).string(A.log);for(const t of A.events)StringEvent.encode(t,e.uint32(26).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseABCIMessageLog();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.msgIndex=t.uint32();break;case 2:n.log=t.string();break;case 3:n.events.push(StringEvent.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{msgIndex:isSet$5(A.msgIndex)?Number(A.msgIndex):0,log:isSet$5(A.log)?String(A.log):"",events:Array.isArray(A?.events)?A.events.map(e=>StringEvent.fromJSON(e)):[]}},toJSON(A){const e={};return A.msgIndex!==void 0&&(e.msgIndex=Math.round(A.msgIndex)),A.log!==void 0&&(e.log=A.log),A.events?e.events=A.events.map(t=>t?StringEvent.toJSON(t):void 0):e.events=[],e},fromPartial(A){const e=createBaseABCIMessageLog();return e.msgIndex=A.msgIndex??0,e.log=A.log??"",e.events=A.events?.map(t=>StringEvent.fromPartial(t))||[],e}};function createBaseStringEvent(){return{type:"",attributes:[]}}const StringEvent={encode(A,e=minimal.Writer.create()){A.type!==""&&e.uint32(10).string(A.type);for(const t of A.attributes)Attribute.encode(t,e.uint32(18).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseStringEvent();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.type=t.string();break;case 2:n.attributes.push(Attribute.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{type:isSet$5(A.type)?String(A.type):"",attributes:Array.isArray(A?.attributes)?A.attributes.map(e=>Attribute.fromJSON(e)):[]}},toJSON(A){const e={};return A.type!==void 0&&(e.type=A.type),A.attributes?e.attributes=A.attributes.map(t=>t?Attribute.toJSON(t):void 0):e.attributes=[],e},fromPartial(A){const e=createBaseStringEvent();return e.type=A.type??"",e.attributes=A.attributes?.map(t=>Attribute.fromPartial(t))||[],e}};function createBaseAttribute(){return{key:"",value:""}}const Attribute={encode(A,e=minimal.Writer.create()){return A.key!==""&&e.uint32(10).string(A.key),A.value!==""&&e.uint32(18).string(A.value),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseAttribute();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.key=t.string();break;case 2:n.value=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{key:isSet$5(A.key)?String(A.key):"",value:isSet$5(A.value)?String(A.value):""}},toJSON(A){const e={};return A.key!==void 0&&(e.key=A.key),A.value!==void 0&&(e.value=A.value),e},fromPartial(A){const e=createBaseAttribute();return e.key=A.key??"",e.value=A.value??"",e}};function createBaseGasInfo(){return{gasWanted:"0",gasUsed:"0"}}const GasInfo={encode(A,e=minimal.Writer.create()){return A.gasWanted!=="0"&&e.uint32(8).uint64(A.gasWanted),A.gasUsed!=="0"&&e.uint32(16).uint64(A.gasUsed),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGasInfo();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.gasWanted=longToString$1(t.uint64());break;case 2:n.gasUsed=longToString$1(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{gasWanted:isSet$5(A.gasWanted)?String(A.gasWanted):"0",gasUsed:isSet$5(A.gasUsed)?String(A.gasUsed):"0"}},toJSON(A){const e={};return A.gasWanted!==void 0&&(e.gasWanted=A.gasWanted),A.gasUsed!==void 0&&(e.gasUsed=A.gasUsed),e},fromPartial(A){const e=createBaseGasInfo();return e.gasWanted=A.gasWanted??"0",e.gasUsed=A.gasUsed??"0",e}};function createBaseResult(){return{data:new Uint8Array,log:"",events:[]}}const Result={encode(A,e=minimal.Writer.create()){A.data.length!==0&&e.uint32(10).bytes(A.data),A.log!==""&&e.uint32(18).string(A.log);for(const t of A.events)Event$1.encode(t,e.uint32(26).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseResult();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.data=t.bytes();break;case 2:n.log=t.string();break;case 3:n.events.push(Event$1.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{data:isSet$5(A.data)?bytesFromBase64$4(A.data):new Uint8Array,log:isSet$5(A.log)?String(A.log):"",events:Array.isArray(A?.events)?A.events.map(e=>Event$1.fromJSON(e)):[]}},toJSON(A){const e={};return A.data!==void 0&&(e.data=base64FromBytes$4(A.data!==void 0?A.data:new Uint8Array)),A.log!==void 0&&(e.log=A.log),A.events?e.events=A.events.map(t=>t?Event$1.toJSON(t):void 0):e.events=[],e},fromPartial(A){const e=createBaseResult();return e.data=A.data??new Uint8Array,e.log=A.log??"",e.events=A.events?.map(t=>Event$1.fromPartial(t))||[],e}};var globalThis$6=(()=>{if(typeof globalThis$6<"u")return globalThis$6;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$4=globalThis$6.atob||(A=>globalThis$6.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$4(A){const e=atob$4(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$4=globalThis$6.btoa||(A=>globalThis$6.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$4(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$4(e.join(""))}function longToString$1(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$5(A){return A!=null}function createBaseCompactBitArray(){return{extraBitsStored:0,elems:new Uint8Array}}const CompactBitArray={encode(A,e=minimal.Writer.create()){return A.extraBitsStored!==0&&e.uint32(8).uint32(A.extraBitsStored),A.elems.length!==0&&e.uint32(18).bytes(A.elems),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseCompactBitArray();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.extraBitsStored=t.uint32();break;case 2:n.elems=t.bytes();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{extraBitsStored:isSet$4(A.extraBitsStored)?Number(A.extraBitsStored):0,elems:isSet$4(A.elems)?bytesFromBase64$3(A.elems):new Uint8Array}},toJSON(A){const e={};return A.extraBitsStored!==void 0&&(e.extraBitsStored=Math.round(A.extraBitsStored)),A.elems!==void 0&&(e.elems=base64FromBytes$3(A.elems!==void 0?A.elems:new Uint8Array)),e},fromPartial(A){const e=createBaseCompactBitArray();return e.extraBitsStored=A.extraBitsStored??0,e.elems=A.elems??new Uint8Array,e}};var globalThis$5=(()=>{if(typeof globalThis$5<"u")return globalThis$5;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$3=globalThis$5.atob||(A=>globalThis$5.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$3(A){const e=atob$3(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$3=globalThis$5.btoa||(A=>globalThis$5.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$3(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$3(e.join(""))}function isSet$4(A){return A!=null}var SignMode;(function(A){A[A.SIGN_MODE_UNSPECIFIED=0]="SIGN_MODE_UNSPECIFIED",A[A.SIGN_MODE_DIRECT=1]="SIGN_MODE_DIRECT",A[A.SIGN_MODE_TEXTUAL=2]="SIGN_MODE_TEXTUAL",A[A.SIGN_MODE_LEGACY_AMINO_JSON=127]="SIGN_MODE_LEGACY_AMINO_JSON",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(SignMode||(SignMode={}));function signModeFromJSON(A){switch(A){case 0:case"SIGN_MODE_UNSPECIFIED":return SignMode.SIGN_MODE_UNSPECIFIED;case 1:case"SIGN_MODE_DIRECT":return SignMode.SIGN_MODE_DIRECT;case 2:case"SIGN_MODE_TEXTUAL":return SignMode.SIGN_MODE_TEXTUAL;case 127:case"SIGN_MODE_LEGACY_AMINO_JSON":return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;case-1:case"UNRECOGNIZED":default:return SignMode.UNRECOGNIZED}}function signModeToJSON(A){switch(A){case SignMode.SIGN_MODE_UNSPECIFIED:return"SIGN_MODE_UNSPECIFIED";case SignMode.SIGN_MODE_DIRECT:return"SIGN_MODE_DIRECT";case SignMode.SIGN_MODE_TEXTUAL:return"SIGN_MODE_TEXTUAL";case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:return"SIGN_MODE_LEGACY_AMINO_JSON";case SignMode.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var globalThis$4=(()=>{if(typeof globalThis$4<"u")return globalThis$4;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$4.atob;globalThis$4.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function createBaseTx(){return{body:void 0,authInfo:void 0,signatures:[]}}const Tx={encode(A,e=minimal.Writer.create()){A.body!==void 0&&TxBody.encode(A.body,e.uint32(10).fork()).ldelim(),A.authInfo!==void 0&&AuthInfo.encode(A.authInfo,e.uint32(18).fork()).ldelim();for(const t of A.signatures)e.uint32(26).bytes(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseTx();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.body=TxBody.decode(t,t.uint32());break;case 2:n.authInfo=AuthInfo.decode(t,t.uint32());break;case 3:n.signatures.push(t.bytes());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{body:isSet$3(A.body)?TxBody.fromJSON(A.body):void 0,authInfo:isSet$3(A.authInfo)?AuthInfo.fromJSON(A.authInfo):void 0,signatures:Array.isArray(A?.signatures)?A.signatures.map(e=>bytesFromBase64$2(e)):[]}},toJSON(A){const e={};return A.body!==void 0&&(e.body=A.body?TxBody.toJSON(A.body):void 0),A.authInfo!==void 0&&(e.authInfo=A.authInfo?AuthInfo.toJSON(A.authInfo):void 0),A.signatures?e.signatures=A.signatures.map(t=>base64FromBytes$2(t!==void 0?t:new Uint8Array)):e.signatures=[],e},fromPartial(A){const e=createBaseTx();return e.body=A.body!==void 0&&A.body!==null?TxBody.fromPartial(A.body):void 0,e.authInfo=A.authInfo!==void 0&&A.authInfo!==null?AuthInfo.fromPartial(A.authInfo):void 0,e.signatures=A.signatures?.map(t=>t)||[],e}};function createBaseTxRaw(){return{bodyBytes:new Uint8Array,authInfoBytes:new Uint8Array,signatures:[]}}const TxRaw={encode(A,e=minimal.Writer.create()){A.bodyBytes.length!==0&&e.uint32(10).bytes(A.bodyBytes),A.authInfoBytes.length!==0&&e.uint32(18).bytes(A.authInfoBytes);for(const t of A.signatures)e.uint32(26).bytes(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseTxRaw();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.bodyBytes=t.bytes();break;case 2:n.authInfoBytes=t.bytes();break;case 3:n.signatures.push(t.bytes());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{bodyBytes:isSet$3(A.bodyBytes)?bytesFromBase64$2(A.bodyBytes):new Uint8Array,authInfoBytes:isSet$3(A.authInfoBytes)?bytesFromBase64$2(A.authInfoBytes):new Uint8Array,signatures:Array.isArray(A?.signatures)?A.signatures.map(e=>bytesFromBase64$2(e)):[]}},toJSON(A){const e={};return A.bodyBytes!==void 0&&(e.bodyBytes=base64FromBytes$2(A.bodyBytes!==void 0?A.bodyBytes:new Uint8Array)),A.authInfoBytes!==void 0&&(e.authInfoBytes=base64FromBytes$2(A.authInfoBytes!==void 0?A.authInfoBytes:new Uint8Array)),A.signatures?e.signatures=A.signatures.map(t=>base64FromBytes$2(t!==void 0?t:new Uint8Array)):e.signatures=[],e},fromPartial(A){const e=createBaseTxRaw();return e.bodyBytes=A.bodyBytes??new Uint8Array,e.authInfoBytes=A.authInfoBytes??new Uint8Array,e.signatures=A.signatures?.map(t=>t)||[],e}};function createBaseSignDoc(){return{bodyBytes:new Uint8Array,authInfoBytes:new Uint8Array,chainId:"",accountNumber:"0"}}const SignDoc={encode(A,e=minimal.Writer.create()){return A.bodyBytes.length!==0&&e.uint32(10).bytes(A.bodyBytes),A.authInfoBytes.length!==0&&e.uint32(18).bytes(A.authInfoBytes),A.chainId!==""&&e.uint32(26).string(A.chainId),A.accountNumber!=="0"&&e.uint32(32).uint64(A.accountNumber),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSignDoc();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.bodyBytes=t.bytes();break;case 2:n.authInfoBytes=t.bytes();break;case 3:n.chainId=t.string();break;case 4:n.accountNumber=longToString(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{bodyBytes:isSet$3(A.bodyBytes)?bytesFromBase64$2(A.bodyBytes):new Uint8Array,authInfoBytes:isSet$3(A.authInfoBytes)?bytesFromBase64$2(A.authInfoBytes):new Uint8Array,chainId:isSet$3(A.chainId)?String(A.chainId):"",accountNumber:isSet$3(A.accountNumber)?String(A.accountNumber):"0"}},toJSON(A){const e={};return A.bodyBytes!==void 0&&(e.bodyBytes=base64FromBytes$2(A.bodyBytes!==void 0?A.bodyBytes:new Uint8Array)),A.authInfoBytes!==void 0&&(e.authInfoBytes=base64FromBytes$2(A.authInfoBytes!==void 0?A.authInfoBytes:new Uint8Array)),A.chainId!==void 0&&(e.chainId=A.chainId),A.accountNumber!==void 0&&(e.accountNumber=A.accountNumber),e},fromPartial(A){const e=createBaseSignDoc();return e.bodyBytes=A.bodyBytes??new Uint8Array,e.authInfoBytes=A.authInfoBytes??new Uint8Array,e.chainId=A.chainId??"",e.accountNumber=A.accountNumber??"0",e}};function createBaseTxBody(){return{messages:[],memo:"",timeoutHeight:"0",extensionOptions:[],nonCriticalExtensionOptions:[]}}const TxBody={encode(A,e=minimal.Writer.create()){for(const t of A.messages)Any.encode(t,e.uint32(10).fork()).ldelim();A.memo!==""&&e.uint32(18).string(A.memo),A.timeoutHeight!=="0"&&e.uint32(24).uint64(A.timeoutHeight);for(const t of A.extensionOptions)Any.encode(t,e.uint32(8186).fork()).ldelim();for(const t of A.nonCriticalExtensionOptions)Any.encode(t,e.uint32(16378).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseTxBody();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.messages.push(Any.decode(t,t.uint32()));break;case 2:n.memo=t.string();break;case 3:n.timeoutHeight=longToString(t.uint64());break;case 1023:n.extensionOptions.push(Any.decode(t,t.uint32()));break;case 2047:n.nonCriticalExtensionOptions.push(Any.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{messages:Array.isArray(A?.messages)?A.messages.map(e=>Any.fromJSON(e)):[],memo:isSet$3(A.memo)?String(A.memo):"",timeoutHeight:isSet$3(A.timeoutHeight)?String(A.timeoutHeight):"0",extensionOptions:Array.isArray(A?.extensionOptions)?A.extensionOptions.map(e=>Any.fromJSON(e)):[],nonCriticalExtensionOptions:Array.isArray(A?.nonCriticalExtensionOptions)?A.nonCriticalExtensionOptions.map(e=>Any.fromJSON(e)):[]}},toJSON(A){const e={};return A.messages?e.messages=A.messages.map(t=>t?Any.toJSON(t):void 0):e.messages=[],A.memo!==void 0&&(e.memo=A.memo),A.timeoutHeight!==void 0&&(e.timeoutHeight=A.timeoutHeight),A.extensionOptions?e.extensionOptions=A.extensionOptions.map(t=>t?Any.toJSON(t):void 0):e.extensionOptions=[],A.nonCriticalExtensionOptions?e.nonCriticalExtensionOptions=A.nonCriticalExtensionOptions.map(t=>t?Any.toJSON(t):void 0):e.nonCriticalExtensionOptions=[],e},fromPartial(A){const e=createBaseTxBody();return e.messages=A.messages?.map(t=>Any.fromPartial(t))||[],e.memo=A.memo??"",e.timeoutHeight=A.timeoutHeight??"0",e.extensionOptions=A.extensionOptions?.map(t=>Any.fromPartial(t))||[],e.nonCriticalExtensionOptions=A.nonCriticalExtensionOptions?.map(t=>Any.fromPartial(t))||[],e}};function createBaseAuthInfo(){return{signerInfos:[],fee:void 0}}const AuthInfo={encode(A,e=minimal.Writer.create()){for(const t of A.signerInfos)SignerInfo.encode(t,e.uint32(10).fork()).ldelim();return A.fee!==void 0&&Fee.encode(A.fee,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseAuthInfo();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.signerInfos.push(SignerInfo.decode(t,t.uint32()));break;case 2:n.fee=Fee.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{signerInfos:Array.isArray(A?.signerInfos)?A.signerInfos.map(e=>SignerInfo.fromJSON(e)):[],fee:isSet$3(A.fee)?Fee.fromJSON(A.fee):void 0}},toJSON(A){const e={};return A.signerInfos?e.signerInfos=A.signerInfos.map(t=>t?SignerInfo.toJSON(t):void 0):e.signerInfos=[],A.fee!==void 0&&(e.fee=A.fee?Fee.toJSON(A.fee):void 0),e},fromPartial(A){const e=createBaseAuthInfo();return e.signerInfos=A.signerInfos?.map(t=>SignerInfo.fromPartial(t))||[],e.fee=A.fee!==void 0&&A.fee!==null?Fee.fromPartial(A.fee):void 0,e}};function createBaseSignerInfo(){return{publicKey:void 0,modeInfo:void 0,sequence:"0"}}const SignerInfo={encode(A,e=minimal.Writer.create()){return A.publicKey!==void 0&&Any.encode(A.publicKey,e.uint32(10).fork()).ldelim(),A.modeInfo!==void 0&&ModeInfo.encode(A.modeInfo,e.uint32(18).fork()).ldelim(),A.sequence!=="0"&&e.uint32(24).uint64(A.sequence),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSignerInfo();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.publicKey=Any.decode(t,t.uint32());break;case 2:n.modeInfo=ModeInfo.decode(t,t.uint32());break;case 3:n.sequence=longToString(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{publicKey:isSet$3(A.publicKey)?Any.fromJSON(A.publicKey):void 0,modeInfo:isSet$3(A.modeInfo)?ModeInfo.fromJSON(A.modeInfo):void 0,sequence:isSet$3(A.sequence)?String(A.sequence):"0"}},toJSON(A){const e={};return A.publicKey!==void 0&&(e.publicKey=A.publicKey?Any.toJSON(A.publicKey):void 0),A.modeInfo!==void 0&&(e.modeInfo=A.modeInfo?ModeInfo.toJSON(A.modeInfo):void 0),A.sequence!==void 0&&(e.sequence=A.sequence),e},fromPartial(A){const e=createBaseSignerInfo();return e.publicKey=A.publicKey!==void 0&&A.publicKey!==null?Any.fromPartial(A.publicKey):void 0,e.modeInfo=A.modeInfo!==void 0&&A.modeInfo!==null?ModeInfo.fromPartial(A.modeInfo):void 0,e.sequence=A.sequence??"0",e}};function createBaseModeInfo(){return{single:void 0,multi:void 0}}const ModeInfo={encode(A,e=minimal.Writer.create()){return A.single!==void 0&&ModeInfo_Single.encode(A.single,e.uint32(10).fork()).ldelim(),A.multi!==void 0&&ModeInfo_Multi.encode(A.multi,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseModeInfo();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.single=ModeInfo_Single.decode(t,t.uint32());break;case 2:n.multi=ModeInfo_Multi.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{single:isSet$3(A.single)?ModeInfo_Single.fromJSON(A.single):void 0,multi:isSet$3(A.multi)?ModeInfo_Multi.fromJSON(A.multi):void 0}},toJSON(A){const e={};return A.single!==void 0&&(e.single=A.single?ModeInfo_Single.toJSON(A.single):void 0),A.multi!==void 0&&(e.multi=A.multi?ModeInfo_Multi.toJSON(A.multi):void 0),e},fromPartial(A){const e=createBaseModeInfo();return e.single=A.single!==void 0&&A.single!==null?ModeInfo_Single.fromPartial(A.single):void 0,e.multi=A.multi!==void 0&&A.multi!==null?ModeInfo_Multi.fromPartial(A.multi):void 0,e}};function createBaseModeInfo_Single(){return{mode:0}}const ModeInfo_Single={encode(A,e=minimal.Writer.create()){return A.mode!==0&&e.uint32(8).int32(A.mode),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseModeInfo_Single();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.mode=t.int32();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{mode:isSet$3(A.mode)?signModeFromJSON(A.mode):0}},toJSON(A){const e={};return A.mode!==void 0&&(e.mode=signModeToJSON(A.mode)),e},fromPartial(A){const e=createBaseModeInfo_Single();return e.mode=A.mode??0,e}};function createBaseModeInfo_Multi(){return{bitarray:void 0,modeInfos:[]}}const ModeInfo_Multi={encode(A,e=minimal.Writer.create()){A.bitarray!==void 0&&CompactBitArray.encode(A.bitarray,e.uint32(10).fork()).ldelim();for(const t of A.modeInfos)ModeInfo.encode(t,e.uint32(18).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseModeInfo_Multi();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.bitarray=CompactBitArray.decode(t,t.uint32());break;case 2:n.modeInfos.push(ModeInfo.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{bitarray:isSet$3(A.bitarray)?CompactBitArray.fromJSON(A.bitarray):void 0,modeInfos:Array.isArray(A?.modeInfos)?A.modeInfos.map(e=>ModeInfo.fromJSON(e)):[]}},toJSON(A){const e={};return A.bitarray!==void 0&&(e.bitarray=A.bitarray?CompactBitArray.toJSON(A.bitarray):void 0),A.modeInfos?e.modeInfos=A.modeInfos.map(t=>t?ModeInfo.toJSON(t):void 0):e.modeInfos=[],e},fromPartial(A){const e=createBaseModeInfo_Multi();return e.bitarray=A.bitarray!==void 0&&A.bitarray!==null?CompactBitArray.fromPartial(A.bitarray):void 0,e.modeInfos=A.modeInfos?.map(t=>ModeInfo.fromPartial(t))||[],e}};function createBaseFee(){return{amount:[],gasLimit:"0",payer:"",granter:""}}const Fee={encode(A,e=minimal.Writer.create()){for(const t of A.amount)Coin.encode(t,e.uint32(10).fork()).ldelim();return A.gasLimit!=="0"&&e.uint32(16).uint64(A.gasLimit),A.payer!==""&&e.uint32(26).string(A.payer),A.granter!==""&&e.uint32(34).string(A.granter),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseFee();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.amount.push(Coin.decode(t,t.uint32()));break;case 2:n.gasLimit=longToString(t.uint64());break;case 3:n.payer=t.string();break;case 4:n.granter=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{amount:Array.isArray(A?.amount)?A.amount.map(e=>Coin.fromJSON(e)):[],gasLimit:isSet$3(A.gasLimit)?String(A.gasLimit):"0",payer:isSet$3(A.payer)?String(A.payer):"",granter:isSet$3(A.granter)?String(A.granter):""}},toJSON(A){const e={};return A.amount?e.amount=A.amount.map(t=>t?Coin.toJSON(t):void 0):e.amount=[],A.gasLimit!==void 0&&(e.gasLimit=A.gasLimit),A.payer!==void 0&&(e.payer=A.payer),A.granter!==void 0&&(e.granter=A.granter),e},fromPartial(A){const e=createBaseFee();return e.amount=A.amount?.map(t=>Coin.fromPartial(t))||[],e.gasLimit=A.gasLimit??"0",e.payer=A.payer??"",e.granter=A.granter??"",e}};var globalThis$3=(()=>{if(typeof globalThis$3<"u")return globalThis$3;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$2=globalThis$3.atob||(A=>globalThis$3.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$2(A){const e=atob$2(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$2=globalThis$3.btoa||(A=>globalThis$3.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$2(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$2(e.join(""))}function longToString(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$3(A){return A!=null}var OrderBy;(function(A){A[A.ORDER_BY_UNSPECIFIED=0]="ORDER_BY_UNSPECIFIED",A[A.ORDER_BY_ASC=1]="ORDER_BY_ASC",A[A.ORDER_BY_DESC=2]="ORDER_BY_DESC",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(OrderBy||(OrderBy={}));function orderByFromJSON(A){switch(A){case 0:case"ORDER_BY_UNSPECIFIED":return OrderBy.ORDER_BY_UNSPECIFIED;case 1:case"ORDER_BY_ASC":return OrderBy.ORDER_BY_ASC;case 2:case"ORDER_BY_DESC":return OrderBy.ORDER_BY_DESC;case-1:case"UNRECOGNIZED":default:return OrderBy.UNRECOGNIZED}}function orderByToJSON(A){switch(A){case OrderBy.ORDER_BY_UNSPECIFIED:return"ORDER_BY_UNSPECIFIED";case OrderBy.ORDER_BY_ASC:return"ORDER_BY_ASC";case OrderBy.ORDER_BY_DESC:return"ORDER_BY_DESC";case OrderBy.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var BroadcastMode;(function(A){A[A.BROADCAST_MODE_UNSPECIFIED=0]="BROADCAST_MODE_UNSPECIFIED",A[A.BROADCAST_MODE_BLOCK=1]="BROADCAST_MODE_BLOCK",A[A.BROADCAST_MODE_SYNC=2]="BROADCAST_MODE_SYNC",A[A.BROADCAST_MODE_ASYNC=3]="BROADCAST_MODE_ASYNC",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(BroadcastMode||(BroadcastMode={}));function broadcastModeFromJSON(A){switch(A){case 0:case"BROADCAST_MODE_UNSPECIFIED":return BroadcastMode.BROADCAST_MODE_UNSPECIFIED;case 1:case"BROADCAST_MODE_BLOCK":return BroadcastMode.BROADCAST_MODE_BLOCK;case 2:case"BROADCAST_MODE_SYNC":return BroadcastMode.BROADCAST_MODE_SYNC;case 3:case"BROADCAST_MODE_ASYNC":return BroadcastMode.BROADCAST_MODE_ASYNC;case-1:case"UNRECOGNIZED":default:return BroadcastMode.UNRECOGNIZED}}function broadcastModeToJSON(A){switch(A){case BroadcastMode.BROADCAST_MODE_UNSPECIFIED:return"BROADCAST_MODE_UNSPECIFIED";case BroadcastMode.BROADCAST_MODE_BLOCK:return"BROADCAST_MODE_BLOCK";case BroadcastMode.BROADCAST_MODE_SYNC:return"BROADCAST_MODE_SYNC";case BroadcastMode.BROADCAST_MODE_ASYNC:return"BROADCAST_MODE_ASYNC";case BroadcastMode.UNRECOGNIZED:default:return"UNRECOGNIZED"}}function createBaseGetTxsEventRequest(){return{events:[],pagination:void 0,orderBy:0}}const GetTxsEventRequest={encode(A,e=minimal.Writer.create()){for(const t of A.events)e.uint32(10).string(t);return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(18).fork()).ldelim(),A.orderBy!==0&&e.uint32(24).int32(A.orderBy),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGetTxsEventRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.events.push(t.string());break;case 2:n.pagination=PageRequest.decode(t,t.uint32());break;case 3:n.orderBy=t.int32();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{events:Array.isArray(A?.events)?A.events.map(e=>String(e)):[],pagination:isSet$2(A.pagination)?PageRequest.fromJSON(A.pagination):void 0,orderBy:isSet$2(A.orderBy)?orderByFromJSON(A.orderBy):0}},toJSON(A){const e={};return A.events?e.events=A.events.map(t=>t):e.events=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),A.orderBy!==void 0&&(e.orderBy=orderByToJSON(A.orderBy)),e},fromPartial(A){const e=createBaseGetTxsEventRequest();return e.events=A.events?.map(t=>t)||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e.orderBy=A.orderBy??0,e}};function createBaseGetTxsEventResponse(){return{txs:[],txResponses:[],pagination:void 0}}const GetTxsEventResponse={encode(A,e=minimal.Writer.create()){for(const t of A.txs)Tx.encode(t,e.uint32(10).fork()).ldelim();for(const t of A.txResponses)TxResponse.encode(t,e.uint32(18).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(26).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGetTxsEventResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.txs.push(Tx.decode(t,t.uint32()));break;case 2:n.txResponses.push(TxResponse.decode(t,t.uint32()));break;case 3:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{txs:Array.isArray(A?.txs)?A.txs.map(e=>Tx.fromJSON(e)):[],txResponses:Array.isArray(A?.txResponses)?A.txResponses.map(e=>TxResponse.fromJSON(e)):[],pagination:isSet$2(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.txs?e.txs=A.txs.map(t=>t?Tx.toJSON(t):void 0):e.txs=[],A.txResponses?e.txResponses=A.txResponses.map(t=>t?TxResponse.toJSON(t):void 0):e.txResponses=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseGetTxsEventResponse();return e.txs=A.txs?.map(t=>Tx.fromPartial(t))||[],e.txResponses=A.txResponses?.map(t=>TxResponse.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseBroadcastTxRequest(){return{txBytes:new Uint8Array,mode:0}}const BroadcastTxRequest={encode(A,e=minimal.Writer.create()){return A.txBytes.length!==0&&e.uint32(10).bytes(A.txBytes),A.mode!==0&&e.uint32(16).int32(A.mode),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseBroadcastTxRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.txBytes=t.bytes();break;case 2:n.mode=t.int32();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{txBytes:isSet$2(A.txBytes)?bytesFromBase64$1(A.txBytes):new Uint8Array,mode:isSet$2(A.mode)?broadcastModeFromJSON(A.mode):0}},toJSON(A){const e={};return A.txBytes!==void 0&&(e.txBytes=base64FromBytes$1(A.txBytes!==void 0?A.txBytes:new Uint8Array)),A.mode!==void 0&&(e.mode=broadcastModeToJSON(A.mode)),e},fromPartial(A){const e=createBaseBroadcastTxRequest();return e.txBytes=A.txBytes??new Uint8Array,e.mode=A.mode??0,e}};function createBaseBroadcastTxResponse(){return{txResponse:void 0}}const BroadcastTxResponse={encode(A,e=minimal.Writer.create()){return A.txResponse!==void 0&&TxResponse.encode(A.txResponse,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseBroadcastTxResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.txResponse=TxResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{txResponse:isSet$2(A.txResponse)?TxResponse.fromJSON(A.txResponse):void 0}},toJSON(A){const e={};return A.txResponse!==void 0&&(e.txResponse=A.txResponse?TxResponse.toJSON(A.txResponse):void 0),e},fromPartial(A){const e=createBaseBroadcastTxResponse();return e.txResponse=A.txResponse!==void 0&&A.txResponse!==null?TxResponse.fromPartial(A.txResponse):void 0,e}};function createBaseSimulateRequest(){return{tx:void 0,txBytes:new Uint8Array}}const SimulateRequest={encode(A,e=minimal.Writer.create()){return A.tx!==void 0&&Tx.encode(A.tx,e.uint32(10).fork()).ldelim(),A.txBytes.length!==0&&e.uint32(18).bytes(A.txBytes),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSimulateRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.tx=Tx.decode(t,t.uint32());break;case 2:n.txBytes=t.bytes();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{tx:isSet$2(A.tx)?Tx.fromJSON(A.tx):void 0,txBytes:isSet$2(A.txBytes)?bytesFromBase64$1(A.txBytes):new Uint8Array}},toJSON(A){const e={};return A.tx!==void 0&&(e.tx=A.tx?Tx.toJSON(A.tx):void 0),A.txBytes!==void 0&&(e.txBytes=base64FromBytes$1(A.txBytes!==void 0?A.txBytes:new Uint8Array)),e},fromPartial(A){const e=createBaseSimulateRequest();return e.tx=A.tx!==void 0&&A.tx!==null?Tx.fromPartial(A.tx):void 0,e.txBytes=A.txBytes??new Uint8Array,e}};function createBaseSimulateResponse(){return{gasInfo:void 0,result:void 0}}const SimulateResponse={encode(A,e=minimal.Writer.create()){return A.gasInfo!==void 0&&GasInfo.encode(A.gasInfo,e.uint32(10).fork()).ldelim(),A.result!==void 0&&Result.encode(A.result,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSimulateResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.gasInfo=GasInfo.decode(t,t.uint32());break;case 2:n.result=Result.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{gasInfo:isSet$2(A.gasInfo)?GasInfo.fromJSON(A.gasInfo):void 0,result:isSet$2(A.result)?Result.fromJSON(A.result):void 0}},toJSON(A){const e={};return A.gasInfo!==void 0&&(e.gasInfo=A.gasInfo?GasInfo.toJSON(A.gasInfo):void 0),A.result!==void 0&&(e.result=A.result?Result.toJSON(A.result):void 0),e},fromPartial(A){const e=createBaseSimulateResponse();return e.gasInfo=A.gasInfo!==void 0&&A.gasInfo!==null?GasInfo.fromPartial(A.gasInfo):void 0,e.result=A.result!==void 0&&A.result!==null?Result.fromPartial(A.result):void 0,e}};function createBaseGetTxRequest(){return{hash:""}}const GetTxRequest={encode(A,e=minimal.Writer.create()){return A.hash!==""&&e.uint32(10).string(A.hash),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGetTxRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.hash=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{hash:isSet$2(A.hash)?String(A.hash):""}},toJSON(A){const e={};return A.hash!==void 0&&(e.hash=A.hash),e},fromPartial(A){const e=createBaseGetTxRequest();return e.hash=A.hash??"",e}};function createBaseGetTxResponse(){return{tx:void 0,txResponse:void 0}}const GetTxResponse={encode(A,e=minimal.Writer.create()){return A.tx!==void 0&&Tx.encode(A.tx,e.uint32(10).fork()).ldelim(),A.txResponse!==void 0&&TxResponse.encode(A.txResponse,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGetTxResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.tx=Tx.decode(t,t.uint32());break;case 2:n.txResponse=TxResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{tx:isSet$2(A.tx)?Tx.fromJSON(A.tx):void 0,txResponse:isSet$2(A.txResponse)?TxResponse.fromJSON(A.txResponse):void 0}},toJSON(A){const e={};return A.tx!==void 0&&(e.tx=A.tx?Tx.toJSON(A.tx):void 0),A.txResponse!==void 0&&(e.txResponse=A.txResponse?TxResponse.toJSON(A.txResponse):void 0),e},fromPartial(A){const e=createBaseGetTxResponse();return e.tx=A.tx!==void 0&&A.tx!==null?Tx.fromPartial(A.tx):void 0,e.txResponse=A.txResponse!==void 0&&A.txResponse!==null?TxResponse.fromPartial(A.txResponse):void 0,e}};class ServiceClientImpl{constructor(e){lA(this,"rpc");this.rpc=e,this.simulate=this.simulate.bind(this),this.getTx=this.getTx.bind(this),this.broadcastTx=this.broadcastTx.bind(this),this.getTxsEvent=this.getTxsEvent.bind(this)}simulate(e,t){return this.rpc.unary(ServiceSimulateDesc,SimulateRequest.fromPartial(e),t)}getTx(e,t){return this.rpc.unary(ServiceGetTxDesc,GetTxRequest.fromPartial(e),t)}broadcastTx(e,t){return this.rpc.unary(ServiceBroadcastTxDesc,BroadcastTxRequest.fromPartial(e),t)}getTxsEvent(e,t){return this.rpc.unary(ServiceGetTxsEventDesc,GetTxsEventRequest.fromPartial(e),t)}}const ServiceDesc={serviceName:"cosmos.tx.v1beta1.Service"},ServiceSimulateDesc={methodName:"Simulate",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return SimulateRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...SimulateResponse.decode(A),toObject(){return this}}}}},ServiceGetTxDesc={methodName:"GetTx",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetTxRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetTxResponse.decode(A),toObject(){return this}}}}},ServiceBroadcastTxDesc={methodName:"BroadcastTx",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return BroadcastTxRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...BroadcastTxResponse.decode(A),toObject(){return this}}}}},ServiceGetTxsEventDesc={methodName:"GetTxsEvent",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetTxsEventRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetTxsEventResponse.decode(A),toObject(){return this}}}}};var globalThis$2=(()=>{if(typeof globalThis$2<"u")return globalThis$2;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$1=globalThis$2.atob||(A=>globalThis$2.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$1(A){const e=atob$1(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$1=globalThis$2.btoa||(A=>globalThis$2.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$1(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$1(e.join(""))}function isSet$2(A){return A!=null}function createBaseMsgSend(){return{fromAddress:"",toAddress:"",amount:[]}}const MsgSend={encode(A,e=minimal.Writer.create()){A.fromAddress!==""&&e.uint32(10).string(A.fromAddress),A.toAddress!==""&&e.uint32(18).string(A.toAddress);for(const t of A.amount)Coin.encode(t,e.uint32(26).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseMsgSend();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.fromAddress=t.string();break;case 2:n.toAddress=t.string();break;case 3:n.amount.push(Coin.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{fromAddress:isSet$1(A.fromAddress)?String(A.fromAddress):"",toAddress:isSet$1(A.toAddress)?String(A.toAddress):"",amount:Array.isArray(A?.amount)?A.amount.map(e=>Coin.fromJSON(e)):[]}},toJSON(A){const e={};return A.fromAddress!==void 0&&(e.fromAddress=A.fromAddress),A.toAddress!==void 0&&(e.toAddress=A.toAddress),A.amount?e.amount=A.amount.map(t=>t?Coin.toJSON(t):void 0):e.amount=[],e},fromPartial(A){const e=createBaseMsgSend();return e.fromAddress=A.fromAddress??"",e.toAddress=A.toAddress??"",e.amount=A.amount?.map(t=>Coin.fromPartial(t))||[],e}};function isSet$1(A){return A!=null}function createBasePubKey(){return{key:new Uint8Array}}const PubKey={encode(A,e=minimal.Writer.create()){return A.key.length!==0&&e.uint32(10).bytes(A.key),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBasePubKey();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.key=t.bytes();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{key:isSet(A.key)?bytesFromBase64(A.key):new Uint8Array}},toJSON(A){const e={};return A.key!==void 0&&(e.key=base64FromBytes(A.key!==void 0?A.key:new Uint8Array)),e},fromPartial(A){const e=createBasePubKey();return e.key=A.key??new Uint8Array,e}};var globalThis$1=(()=>{if(typeof globalThis$1<"u")return globalThis$1;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob=globalThis$1.atob||(A=>globalThis$1.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64(A){const e=atob(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa=globalThis$1.btoa||(A=>globalThis$1.Buffer.from(A,"binary").toString("base64"));function base64FromBytes(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa(e.join(""))}function isSet(A){return A!=null}async function fetch_derived(A,e,t=256,i=new Uint8Array(0)){return new Uint8Array(await crypto.subtle.deriveBits({name:"HKDF",hash:"SHA-256",salt:e,info:i},A,t))}async function generate_pair(A,e,t=256){const i=crypto.getRandomValues(new Uint8Array(t>>3)),n=await crypto.subtle.importKey("raw",i,{name:"HKDF",hash:"SHA-256"},!1,["deriveBits"]);zero_out(i);const g=new SensitiveBytes(await fetch_derived(n,e,t)),I=new SensitiveBytes(await A()),o=I.xor(g);return I.wipe(),g.wipe(),[n,o]}const hm_privates$1=new Map;class RuntimeKey{static async create(e,t=256){const i=new RuntimeKey,n=hm_privates$1.get(i),[g,I]=await generate_pair(e,n.atu8_salt,t);return Object.assign(n,{dk_base:g,kn_xor:I}),i}static async createRaw(e,t=256){return RuntimeKey.create(()=>e,t)}constructor(){const e=crypto.getRandomValues(new Uint8Array(32));hm_privates$1.set(this,{atu8_salt:e,kn_xor:null,dk_base:null})}async access(e){const t=hm_privates$1.get(this),{dk_base:i,atu8_salt:n,kn_xor:g}=t;let I,o;const[a,r]=await generate_pair(()=>new Promise(async s=>{const B=new SensitiveBytes(await fetch_derived(i,n,256)),C=g.xor(B);B.wipe();try{I=e(C.data)}catch(l){o=l}s(C.data),queueMicrotask(()=>{C.wipe()})}),n);if(t.dk_base=a,t.kn_xor=r,o)throw o;return I}destroy(){const{atu8_salt:e,kn_xor:t}=hm_privates$1.get(this);t?.wipe(),zero_out(e),hm_privates$1.delete(this)}}class SensitiveBigUint extends SensitiveBytes{static random(e){return new SensitiveBigUint(crypto.getRandomValues(new Uint8Array(e)))}static empty(e=0){return new SensitiveBigUint(new Uint8Array(e))}static max(e,t){return e.gte(t)?e.clone():t.clone()}static min(e,t){return e.lte(t)?e.clone():t.clone()}clone(){return new SensitiveBigUint(Uint8Array.from(this.data))}compare(e){const t=this.data,i=t.byteLength,n=e.data;if(n.byteLength!==i)throw this.wipe(),e.wipe(),new Error("Refusing to compare buffers of different byte length");for(let I=0;I<i;I++){const o=t[I],a=n[I];if(o!==a)return o>a?1:-1}return 0}eq(e){return this.compare(e)===0}gt(e){return this.compare(e)>0}gte(e){return this.compare(e)>=0}lt(e){return this.compare(e)<0}lte(e){return this.compare(e)<=0}diff(e){const t=this.data,i=t.byteLength,n=this.compare(e);if(n<0)return e.diff(this);if(n===0)return SensitiveBigUint.empty(i);const g=e.data,I=new Uint8Array(i);let o=0;for(let a=i-1;a>=0;a--){let r=t[a]-g[a]-o;r<0?(r+=256,o=1):o=0,I[a]=r}return new SensitiveBigUint(I)}mod(e){const i=this.data.byteLength;let n=this.compare(e);if(n<0)return this.clone();if(n===0)return SensitiveBigUint.empty(i);e.data.byteLength;let I=this.clone();for(;;){const o=I.diff(e);if(I.wipe(),n=o.compare(e),n<=0)return o;I=o}}modulus(e){const i=this.data.byteLength;let n=this.compare(e);if(n<0)return this.clone();if(n===0)return SensitiveBigUint.empty(i);e.data.byteLength}}const KN_ZERO_32=SensitiveBigUint.empty(32),KN_CURVE_N_SECP256K1=new SensitiveBigUint(hex_to_buffer("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")),NI_MINIMUM_BORDER=64,KN_DANGER_LO=new SensitiveBigUint(hex_to_buffer(((1<<NI_MINIMUM_BORDER%8).toString(16)+"00".repeat(NI_MINIMUM_BORDER>>>3)).padStart(64,"0")));KN_CURVE_N_SECP256K1.diff(KN_DANGER_LO);let y_secp256k1,a_wait_secp256k1=null;async function init_secp256k1(){if(y_secp256k1)return y_secp256k1;if(a_wait_secp256k1)return new Promise(e=>{a_wait_secp256k1.push(e)});a_wait_secp256k1=[],y_secp256k1=await instantiateSecp256k1(crypto.getRandomValues(new Uint8Array(32)));const A=a_wait_secp256k1.slice();a_wait_secp256k1=null;for(const e of A)e(y_secp256k1);return y_secp256k1}const hm_privates=new Map;class Secp256k1Key{constructor(e){lA(this,"_b_init",!1);this._y_secp256k1=e}static withinCurve(e){return KN_ZERO_32.lt(e)&&KN_CURVE_N_SECP256K1.gt(e)}static async verify(e,t,i){y_secp256k1||await init_secp256k1();const n=await sha256$1(t);return y_secp256k1.verifySignatureCompactLowS(e,i,n)}static async generatePrivateKey(e=!1){y_secp256k1||await init_secp256k1();const t=await RuntimeKey.create(()=>{let i;for(;!y_secp256k1.validatePrivateKey(i=crypto.getRandomValues(new Uint8Array(32))););return i});return[t,await Secp256k1Key.import(t,e)]}static uncompressPublicKey(e){return y_secp256k1.uncompressPublicKey(e)}static async import(e,t=!1){return y_secp256k1||await init_secp256k1(),await new Secp256k1Key(y_secp256k1).import(e,t)}async import(e,t=!1){const i=this._y_secp256k1;await e.access(I=>{if(!this._y_secp256k1.validatePrivateKey(I))throw new Error("Failed to validate secp256k1 private key");hm_privates.set(this,{kk_sk:e,atu8_pk33:i.derivePublicKeyCompressed(I),atu8_pk65:i.derivePublicKeyUncompressed(I),b_exportable:t})});const{atu8_pk33:n,atu8_pk65:g}=hm_privates.get(this);if(!i.validatePublicKey(n))throw new Error("Failed to validate secp256k1 compressed public key");if(!i.validatePublicKey(g))throw new Error("Failed to validate secp256k1 uncompressed public key");return this._b_init=!0,this}exportPublicKey(e=!1){const{atu8_pk33:t,atu8_pk65:i,b_exportable:n}=hm_privates.get(this);if(n===!0)return e?i:t;throw new Error("Public key is not exportable")}async sign(e,t=!1){const i=await sha256$1(e),{kk_sk:n}=hm_privates.get(this);return await n.access(g=>t?this._y_secp256k1.signMessageHashCompact(g,i,crypto.getRandomValues(new Uint8Array(32))):this._y_secp256k1.signMessageHashCompact(g,i))}async verify(e,t){const i=await sha256$1(t),{atu8_pk65:n}=hm_privates.get(this);return this._y_secp256k1.verifySignatureCompactLowS(e,n,i)}async ecdh(e){const{kk_sk:t}=hm_privates.get(this);return await t.access(i=>this._y_secp256k1.ecdh(i,e))}add(e){const{kk_sk:t}=hm_privates.get(this);return t.access(i=>this._y_secp256k1.addTweakPrivateKey(i,e))}}const Secrets=create_store_class({store:SI_STORE_SECRETS,extension:"dict",class:class te extends WritableStoreDict{static pathFrom(e){return`/secret.${e.type}/uuid.${e.uuid}`}async put(e){const t=te.pathFrom(e);return this._w_cache[t]=e,await this.save(),t}}}),Accounts=create_store_class({store:SI_STORE_ACCOUNTS,extension:"map",class:class xA extends WritableStoreMap{static pathFor(e,t){return`/family.${e}/account.${t.replace(/:/g,"+")}`}static pathFrom(e){return xA.pathFor(e.family,e.pubkey)}static get(e,t){return Accounts.open(i=>i.get(e,t))}get(e,t){const i=xA.pathFor(e,t);return this._w_cache[i]??null}async put(e){const t=xA.pathFrom(e);return this._w_cache[t]=e,await this.save(),t}}});var isNumeric=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,mathceil=Math.ceil,mathfloor=Math.floor,bignumberError="[BigNumber Error] ",tooManyDigits=bignumberError+"Number primitive has more than 15 significant digits: ",BASE=1e14,LOG_BASE=14,MAX_SAFE_INTEGER=9007199254740991,POWS_TEN=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],SQRT_BASE=1e7,MAX=1e9;function clone(A){var e,t,i,n=u.prototype={constructor:u,toString:null,valueOf:null},g=new u(1),I=20,o=4,a=-7,r=21,s=-1e7,B=1e7,C=!1,l=1,c=0,Q={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"\xA0",suffix:""},E="0123456789abcdefghijklmnopqrstuvwxyz",f=!0;function u(d,y){var _,R,m,S,F,D,k,G,M=this;if(!(M instanceof u))return new u(d,y);if(y==null){if(d&&d._isBigNumber===!0){M.s=d.s,!d.c||d.e>B?M.c=M.e=null:d.e<s?M.c=[M.e=0]:(M.e=d.e,M.c=d.c.slice());return}if((D=typeof d=="number")&&d*0==0){if(M.s=1/d<0?(d=-d,-1):1,d===~~d){for(S=0,F=d;F>=10;F/=10,S++);S>B?M.c=M.e=null:(M.e=S,M.c=[d]);return}G=String(d)}else{if(!isNumeric.test(G=String(d)))return i(M,G,D);M.s=G.charCodeAt(0)==45?(G=G.slice(1),-1):1}(S=G.indexOf("."))>-1&&(G=G.replace(".","")),(F=G.search(/e/i))>0?(S<0&&(S=F),S+=+G.slice(F+1),G=G.substring(0,F)):S<0&&(S=G.length)}else{if(intCheck(y,2,E.length,"Base"),y==10&&f)return M=new u(d),U(M,I+M.e+1,o);if(G=String(d),D=typeof d=="number"){if(d*0!=0)return i(M,G,D,y);if(M.s=1/d<0?(G=G.slice(1),-1):1,u.DEBUG&&G.replace(/^0\.0*|\./,"").length>15)throw Error(tooManyDigits+d)}else M.s=G.charCodeAt(0)===45?(G=G.slice(1),-1):1;for(_=E.slice(0,y),S=F=0,k=G.length;F<k;F++)if(_.indexOf(R=G.charAt(F))<0){if(R=="."){if(F>S){S=k;continue}}else if(!m&&(G==G.toUpperCase()&&(G=G.toLowerCase())||G==G.toLowerCase()&&(G=G.toUpperCase()))){m=!0,F=-1,S=0;continue}return i(M,String(d),D,y)}D=!1,G=t(G,y,10,M.s),(S=G.indexOf("."))>-1?G=G.replace(".",""):S=G.length}for(F=0;G.charCodeAt(F)===48;F++);for(k=G.length;G.charCodeAt(--k)===48;);if(G=G.slice(F,++k)){if(k-=F,D&&u.DEBUG&&k>15&&(d>MAX_SAFE_INTEGER||d!==mathfloor(d)))throw Error(tooManyDigits+M.s*d);if((S=S-F-1)>B)M.c=M.e=null;else if(S<s)M.c=[M.e=0];else{if(M.e=S,M.c=[],F=(S+1)%LOG_BASE,S<0&&(F+=LOG_BASE),F<k){for(F&&M.c.push(+G.slice(0,F)),k-=LOG_BASE;F<k;)M.c.push(+G.slice(F,F+=LOG_BASE));F=LOG_BASE-(G=G.slice(F)).length}else F-=k;for(;F--;G+="0");M.c.push(+G)}}else M.c=[M.e=0]}u.clone=clone,u.ROUND_UP=0,u.ROUND_DOWN=1,u.ROUND_CEIL=2,u.ROUND_FLOOR=3,u.ROUND_HALF_UP=4,u.ROUND_HALF_DOWN=5,u.ROUND_HALF_EVEN=6,u.ROUND_HALF_CEIL=7,u.ROUND_HALF_FLOOR=8,u.EUCLID=9,u.config=u.set=function(d){var y,_;if(d!=null)if(typeof d=="object"){if(d.hasOwnProperty(y="DECIMAL_PLACES")&&(_=d[y],intCheck(_,0,MAX,y),I=_),d.hasOwnProperty(y="ROUNDING_MODE")&&(_=d[y],intCheck(_,0,8,y),o=_),d.hasOwnProperty(y="EXPONENTIAL_AT")&&(_=d[y],_&&_.pop?(intCheck(_[0],-MAX,0,y),intCheck(_[1],0,MAX,y),a=_[0],r=_[1]):(intCheck(_,-MAX,MAX,y),a=-(r=_<0?-_:_))),d.hasOwnProperty(y="RANGE"))if(_=d[y],_&&_.pop)intCheck(_[0],-MAX,-1,y),intCheck(_[1],1,MAX,y),s=_[0],B=_[1];else if(intCheck(_,-MAX,MAX,y),_)s=-(B=_<0?-_:_);else throw Error(bignumberError+y+" cannot be zero: "+_);if(d.hasOwnProperty(y="CRYPTO"))if(_=d[y],_===!!_)if(_)if(typeof crypto<"u"&&crypto&&(crypto.getRandomValues||crypto.randomBytes))C=_;else throw C=!_,Error(bignumberError+"crypto unavailable");else C=_;else throw Error(bignumberError+y+" not true or false: "+_);if(d.hasOwnProperty(y="MODULO_MODE")&&(_=d[y],intCheck(_,0,9,y),l=_),d.hasOwnProperty(y="POW_PRECISION")&&(_=d[y],intCheck(_,0,MAX,y),c=_),d.hasOwnProperty(y="FORMAT"))if(_=d[y],typeof _=="object")Q=_;else throw Error(bignumberError+y+" not an object: "+_);if(d.hasOwnProperty(y="ALPHABET"))if(_=d[y],typeof _=="string"&&!/^.?$|[+\-.\s]|(.).*\1/.test(_))f=_.slice(0,10)=="0123456789",E=_;else throw Error(bignumberError+y+" invalid: "+_)}else throw Error(bignumberError+"Object expected: "+d);return{DECIMAL_PLACES:I,ROUNDING_MODE:o,EXPONENTIAL_AT:[a,r],RANGE:[s,B],CRYPTO:C,MODULO_MODE:l,POW_PRECISION:c,FORMAT:Q,ALPHABET:E}},u.isBigNumber=function(d){if(!d||d._isBigNumber!==!0)return!1;if(!u.DEBUG)return!0;var y,_,R=d.c,m=d.e,S=d.s;A:if({}.toString.call(R)=="[object Array]"){if((S===1||S===-1)&&m>=-MAX&&m<=MAX&&m===mathfloor(m)){if(R[0]===0){if(m===0&&R.length===1)return!0;break A}if(y=(m+1)%LOG_BASE,y<1&&(y+=LOG_BASE),String(R[0]).length==y){for(y=0;y<R.length;y++)if(_=R[y],_<0||_>=BASE||_!==mathfloor(_))break A;if(_!==0)return!0}}}else if(R===null&&m===null&&(S===null||S===1||S===-1))return!0;throw Error(bignumberError+"Invalid BigNumber: "+d)},u.maximum=u.max=function(){return w(arguments,n.lt)},u.minimum=u.min=function(){return w(arguments,n.gt)},u.random=function(){var d=9007199254740992,y=Math.random()*d&2097151?function(){return mathfloor(Math.random()*d)}:function(){return(Math.random()*1073741824|0)*8388608+(Math.random()*8388608|0)};return function(_){var R,m,S,F,D,k=0,G=[],M=new u(g);if(_==null?_=I:intCheck(_,0,MAX),F=mathceil(_/LOG_BASE),C)if(crypto.getRandomValues){for(R=crypto.getRandomValues(new Uint32Array(F*=2));k<F;)D=R[k]*131072+(R[k+1]>>>11),D>=9e15?(m=crypto.getRandomValues(new Uint32Array(2)),R[k]=m[0],R[k+1]=m[1]):(G.push(D%1e14),k+=2);k=F/2}else if(crypto.randomBytes){for(R=crypto.randomBytes(F*=7);k<F;)D=(R[k]&31)*281474976710656+R[k+1]*1099511627776+R[k+2]*4294967296+R[k+3]*16777216+(R[k+4]<<16)+(R[k+5]<<8)+R[k+6],D>=9e15?crypto.randomBytes(7).copy(R,k):(G.push(D%1e14),k+=7);k=F/7}else throw C=!1,Error(bignumberError+"crypto unavailable");if(!C)for(;k<F;)D=y(),D<9e15&&(G[k++]=D%1e14);for(F=G[--k],_%=LOG_BASE,F&&_&&(D=POWS_TEN[LOG_BASE-_],G[k]=mathfloor(F/D)*D);G[k]===0;G.pop(),k--);if(k<0)G=[S=0];else{for(S=-1;G[0]===0;G.splice(0,1),S-=LOG_BASE);for(k=1,D=G[0];D>=10;D/=10,k++);k<LOG_BASE&&(S-=LOG_BASE-k)}return M.e=S,M.c=G,M}}(),u.sum=function(){for(var d=1,y=arguments,_=new u(y[0]);d<y.length;)_=_.plus(y[d++]);return _},t=function(){var d="0123456789";function y(_,R,m,S){for(var F,D=[0],k,G=0,M=_.length;G<M;){for(k=D.length;k--;D[k]*=R);for(D[0]+=S.indexOf(_.charAt(G++)),F=0;F<D.length;F++)D[F]>m-1&&(D[F+1]==null&&(D[F+1]=0),D[F+1]+=D[F]/m|0,D[F]%=m)}return D.reverse()}return function(_,R,m,S,F){var D,k,G,M,H,J,L,O,q=_.indexOf("."),Z=I,T=o;for(q>=0&&(M=c,c=0,_=_.replace(".",""),O=new u(R),J=O.pow(_.length-q),c=M,O.c=y(toFixedPoint(coeffToString(J.c),J.e,"0"),10,m,d),O.e=O.c.length),L=y(_,R,m,F?(D=E,d):(D=d,E)),G=M=L.length;L[--M]==0;L.pop());if(!L[0])return D.charAt(0);if(q<0?--G:(J.c=L,J.e=G,J.s=S,J=e(J,O,Z,T,m),L=J.c,H=J.r,G=J.e),k=G+Z+1,q=L[k],M=m/2,H=H||k<0||L[k+1]!=null,H=T<4?(q!=null||H)&&(T==0||T==(J.s<0?3:2)):q>M||q==M&&(T==4||H||T==6&&L[k-1]&1||T==(J.s<0?8:7)),k<1||!L[0])_=H?toFixedPoint(D.charAt(1),-Z,D.charAt(0)):D.charAt(0);else{if(L.length=k,H)for(--m;++L[--k]>m;)L[k]=0,k||(++G,L=[1].concat(L));for(M=L.length;!L[--M];);for(q=0,_="";q<=M;_+=D.charAt(L[q++]));_=toFixedPoint(_,G,D.charAt(0))}return _}}(),e=function(){function d(R,m,S){var F,D,k,G,M=0,H=R.length,J=m%SQRT_BASE,L=m/SQRT_BASE|0;for(R=R.slice();H--;)k=R[H]%SQRT_BASE,G=R[H]/SQRT_BASE|0,F=L*k+G*J,D=J*k+F%SQRT_BASE*SQRT_BASE+M,M=(D/S|0)+(F/SQRT_BASE|0)+L*G,R[H]=D%S;return M&&(R=[M].concat(R)),R}function y(R,m,S,F){var D,k;if(S!=F)k=S>F?1:-1;else for(D=k=0;D<S;D++)if(R[D]!=m[D]){k=R[D]>m[D]?1:-1;break}return k}function _(R,m,S,F){for(var D=0;S--;)R[S]-=D,D=R[S]<m[S]?1:0,R[S]=D*F+R[S]-m[S];for(;!R[0]&&R.length>1;R.splice(0,1));}return function(R,m,S,F,D){var k,G,M,H,J,L,O,q,Z,T,X,tA,v,z,gA,oA,aA,iA=R.s==m.s?1:-1,j=R.c,AA=m.c;if(!j||!j[0]||!AA||!AA[0])return new u(!R.s||!m.s||(j?AA&&j[0]==AA[0]:!AA)?NaN:j&&j[0]==0||!AA?iA*0:iA/0);for(q=new u(iA),Z=q.c=[],G=R.e-m.e,iA=S+G+1,D||(D=BASE,G=bitFloor(R.e/LOG_BASE)-bitFloor(m.e/LOG_BASE),iA=iA/LOG_BASE|0),M=0;AA[M]==(j[M]||0);M++);if(AA[M]>(j[M]||0)&&G--,iA<0)Z.push(1),H=!0;else{for(z=j.length,oA=AA.length,M=0,iA+=2,J=mathfloor(D/(AA[0]+1)),J>1&&(AA=d(AA,J,D),j=d(j,J,D),oA=AA.length,z=j.length),v=oA,T=j.slice(0,oA),X=T.length;X<oA;T[X++]=0);aA=AA.slice(),aA=[0].concat(aA),gA=AA[0],AA[1]>=D/2&&gA++;do{if(J=0,k=y(AA,T,oA,X),k<0){if(tA=T[0],oA!=X&&(tA=tA*D+(T[1]||0)),J=mathfloor(tA/gA),J>1)for(J>=D&&(J=D-1),L=d(AA,J,D),O=L.length,X=T.length;y(L,T,O,X)==1;)J--,_(L,oA<O?aA:AA,O,D),O=L.length,k=1;else J==0&&(k=J=1),L=AA.slice(),O=L.length;if(O<X&&(L=[0].concat(L)),_(T,L,X,D),X=T.length,k==-1)for(;y(AA,T,oA,X)<1;)J++,_(T,oA<X?aA:AA,X,D),X=T.length}else k===0&&(J++,T=[0]);Z[M++]=J,T[0]?T[X++]=j[v]||0:(T=[j[v]],X=1)}while((v++<z||T[0]!=null)&&iA--);H=T[0]!=null,Z[0]||Z.splice(0,1)}if(D==BASE){for(M=1,iA=Z[0];iA>=10;iA/=10,M++);U(q,S+(q.e=M+G*LOG_BASE-1)+1,F,H)}else q.e=G,q.r=+H;return q}}();function h(d,y,_,R){var m,S,F,D,k;if(_==null?_=o:intCheck(_,0,8),!d.c)return d.toString();if(m=d.c[0],F=d.e,y==null)k=coeffToString(d.c),k=R==1||R==2&&(F<=a||F>=r)?toExponential(k,F):toFixedPoint(k,F,"0");else if(d=U(new u(d),y,_),S=d.e,k=coeffToString(d.c),D=k.length,R==1||R==2&&(y<=S||S<=a)){for(;D<y;k+="0",D++);k=toExponential(k,S)}else if(y-=F,k=toFixedPoint(k,S,"0"),S+1>D){if(--y>0)for(k+=".";y--;k+="0");}else if(y+=S-D,y>0)for(S+1==D&&(k+=".");y--;k+="0");return d.s<0&&m?"-"+k:k}function w(d,y){for(var _,R=1,m=new u(d[0]);R<d.length;R++)if(_=new u(d[R]),_.s)y.call(m,_)&&(m=_);else{m=_;break}return m}function N(d,y,_){for(var R=1,m=y.length;!y[--m];y.pop());for(m=y[0];m>=10;m/=10,R++);return(_=R+_*LOG_BASE-1)>B?d.c=d.e=null:_<s?d.c=[d.e=0]:(d.e=_,d.c=y),d}i=function(){var d=/^(-?)0([xbo])(?=\w[\w.]*$)/i,y=/^([^.]+)\.$/,_=/^\.([^.]+)$/,R=/^-?(Infinity|NaN)$/,m=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(S,F,D,k){var G,M=D?F:F.replace(m,"");if(R.test(M))S.s=isNaN(M)?null:M<0?-1:1;else{if(!D&&(M=M.replace(d,function(H,J,L){return G=(L=L.toLowerCase())=="x"?16:L=="b"?2:8,!k||k==G?J:H}),k&&(G=k,M=M.replace(y,"$1").replace(_,"0.$1")),F!=M))return new u(M,G);if(u.DEBUG)throw Error(bignumberError+"Not a"+(k?" base "+k:"")+" number: "+F);S.s=null}S.c=S.e=null}}();function U(d,y,_,R){var m,S,F,D,k,G,M,H=d.c,J=POWS_TEN;if(H){A:{for(m=1,D=H[0];D>=10;D/=10,m++);if(S=y-m,S<0)S+=LOG_BASE,F=y,k=H[G=0],M=k/J[m-F-1]%10|0;else if(G=mathceil((S+1)/LOG_BASE),G>=H.length)if(R){for(;H.length<=G;H.push(0));k=M=0,m=1,S%=LOG_BASE,F=S-LOG_BASE+1}else break A;else{for(k=D=H[G],m=1;D>=10;D/=10,m++);S%=LOG_BASE,F=S-LOG_BASE+m,M=F<0?0:k/J[m-F-1]%10|0}if(R=R||y<0||H[G+1]!=null||(F<0?k:k%J[m-F-1]),R=_<4?(M||R)&&(_==0||_==(d.s<0?3:2)):M>5||M==5&&(_==4||R||_==6&&(S>0?F>0?k/J[m-F]:0:H[G-1])%10&1||_==(d.s<0?8:7)),y<1||!H[0])return H.length=0,R?(y-=d.e+1,H[0]=J[(LOG_BASE-y%LOG_BASE)%LOG_BASE],d.e=-y||0):H[0]=d.e=0,d;if(S==0?(H.length=G,D=1,G--):(H.length=G+1,D=J[LOG_BASE-S],H[G]=F>0?mathfloor(k/J[m-F]%J[F])*D:0),R)for(;;)if(G==0){for(S=1,F=H[0];F>=10;F/=10,S++);for(F=H[0]+=D,D=1;F>=10;F/=10,D++);S!=D&&(d.e++,H[0]==BASE&&(H[0]=1));break}else{if(H[G]+=D,H[G]!=BASE)break;H[G--]=0,D=1}for(S=H.length;H[--S]===0;H.pop());}d.e>B?d.c=d.e=null:d.e<s&&(d.c=[d.e=0])}return d}function Y(d){var y,_=d.e;return _===null?d.toString():(y=coeffToString(d.c),y=_<=a||_>=r?toExponential(y,_):toFixedPoint(y,_,"0"),d.s<0?"-"+y:y)}return n.absoluteValue=n.abs=function(){var d=new u(this);return d.s<0&&(d.s=1),d},n.comparedTo=function(d,y){return compare(this,new u(d,y))},n.decimalPlaces=n.dp=function(d,y){var _,R,m,S=this;if(d!=null)return intCheck(d,0,MAX),y==null?y=o:intCheck(y,0,8),U(new u(S),d+S.e+1,y);if(!(_=S.c))return null;if(R=((m=_.length-1)-bitFloor(this.e/LOG_BASE))*LOG_BASE,m=_[m])for(;m%10==0;m/=10,R--);return R<0&&(R=0),R},n.dividedBy=n.div=function(d,y){return e(this,new u(d,y),I,o)},n.dividedToIntegerBy=n.idiv=function(d,y){return e(this,new u(d,y),0,1)},n.exponentiatedBy=n.pow=function(d,y){var _,R,m,S,F,D,k,G,M,H=this;if(d=new u(d),d.c&&!d.isInteger())throw Error(bignumberError+"Exponent not an integer: "+Y(d));if(y!=null&&(y=new u(y)),D=d.e>14,!H.c||!H.c[0]||H.c[0]==1&&!H.e&&H.c.length==1||!d.c||!d.c[0])return M=new u(Math.pow(+Y(H),D?2-isOdd(d):+Y(d))),y?M.mod(y):M;if(k=d.s<0,y){if(y.c?!y.c[0]:!y.s)return new u(NaN);R=!k&&H.isInteger()&&y.isInteger(),R&&(H=H.mod(y))}else{if(d.e>9&&(H.e>0||H.e<-1||(H.e==0?H.c[0]>1||D&&H.c[1]>=24e7:H.c[0]<8e13||D&&H.c[0]<=9999975e7)))return S=H.s<0&&isOdd(d)?-0:0,H.e>-1&&(S=1/S),new u(k?1/S:S);c&&(S=mathceil(c/LOG_BASE+2))}for(D?(_=new u(.5),k&&(d.s=1),G=isOdd(d)):(m=Math.abs(+Y(d)),G=m%2),M=new u(g);;){if(G){if(M=M.times(H),!M.c)break;S?M.c.length>S&&(M.c.length=S):R&&(M=M.mod(y))}if(m){if(m=mathfloor(m/2),m===0)break;G=m%2}else if(d=d.times(_),U(d,d.e+1,1),d.e>14)G=isOdd(d);else{if(m=+Y(d),m===0)break;G=m%2}H=H.times(H),S?H.c&&H.c.length>S&&(H.c.length=S):R&&(H=H.mod(y))}return R?M:(k&&(M=g.div(M)),y?M.mod(y):S?U(M,c,o,F):M)},n.integerValue=function(d){var y=new u(this);return d==null?d=o:intCheck(d,0,8),U(y,y.e+1,d)},n.isEqualTo=n.eq=function(d,y){return compare(this,new u(d,y))===0},n.isFinite=function(){return!!this.c},n.isGreaterThan=n.gt=function(d,y){return compare(this,new u(d,y))>0},n.isGreaterThanOrEqualTo=n.gte=function(d,y){return(y=compare(this,new u(d,y)))===1||y===0},n.isInteger=function(){return!!this.c&&bitFloor(this.e/LOG_BASE)>this.c.length-2},n.isLessThan=n.lt=function(d,y){return compare(this,new u(d,y))<0},n.isLessThanOrEqualTo=n.lte=function(d,y){return(y=compare(this,new u(d,y)))===-1||y===0},n.isNaN=function(){return!this.s},n.isNegative=function(){return this.s<0},n.isPositive=function(){return this.s>0},n.isZero=function(){return!!this.c&&this.c[0]==0},n.minus=function(d,y){var _,R,m,S,F=this,D=F.s;if(d=new u(d,y),y=d.s,!D||!y)return new u(NaN);if(D!=y)return d.s=-y,F.plus(d);var k=F.e/LOG_BASE,G=d.e/LOG_BASE,M=F.c,H=d.c;if(!k||!G){if(!M||!H)return M?(d.s=-y,d):new u(H?F:NaN);if(!M[0]||!H[0])return H[0]?(d.s=-y,d):new u(M[0]?F:o==3?-0:0)}if(k=bitFloor(k),G=bitFloor(G),M=M.slice(),D=k-G){for((S=D<0)?(D=-D,m=M):(G=k,m=H),m.reverse(),y=D;y--;m.push(0));m.reverse()}else for(R=(S=(D=M.length)<(y=H.length))?D:y,D=y=0;y<R;y++)if(M[y]!=H[y]){S=M[y]<H[y];break}if(S&&(m=M,M=H,H=m,d.s=-d.s),y=(R=H.length)-(_=M.length),y>0)for(;y--;M[_++]=0);for(y=BASE-1;R>D;){if(M[--R]<H[R]){for(_=R;_&&!M[--_];M[_]=y);--M[_],M[R]+=BASE}M[R]-=H[R]}for(;M[0]==0;M.splice(0,1),--G);return M[0]?N(d,M,G):(d.s=o==3?-1:1,d.c=[d.e=0],d)},n.modulo=n.mod=function(d,y){var _,R,m=this;return d=new u(d,y),!m.c||!d.s||d.c&&!d.c[0]?new u(NaN):!d.c||m.c&&!m.c[0]?new u(m):(l==9?(R=d.s,d.s=1,_=e(m,d,0,3),d.s=R,_.s*=R):_=e(m,d,0,l),d=m.minus(_.times(d)),!d.c[0]&&l==1&&(d.s=m.s),d)},n.multipliedBy=n.times=function(d,y){var _,R,m,S,F,D,k,G,M,H,J,L,O,q,Z,T=this,X=T.c,tA=(d=new u(d,y)).c;if(!X||!tA||!X[0]||!tA[0])return!T.s||!d.s||X&&!X[0]&&!tA||tA&&!tA[0]&&!X?d.c=d.e=d.s=null:(d.s*=T.s,!X||!tA?d.c=d.e=null:(d.c=[0],d.e=0)),d;for(R=bitFloor(T.e/LOG_BASE)+bitFloor(d.e/LOG_BASE),d.s*=T.s,k=X.length,H=tA.length,k<H&&(O=X,X=tA,tA=O,m=k,k=H,H=m),m=k+H,O=[];m--;O.push(0));for(q=BASE,Z=SQRT_BASE,m=H;--m>=0;){for(_=0,J=tA[m]%Z,L=tA[m]/Z|0,F=k,S=m+F;S>m;)G=X[--F]%Z,M=X[F]/Z|0,D=L*G+M*J,G=J*G+D%Z*Z+O[S]+_,_=(G/q|0)+(D/Z|0)+L*M,O[S--]=G%q;O[S]=_}return _?++R:O.splice(0,1),N(d,O,R)},n.negated=function(){var d=new u(this);return d.s=-d.s||null,d},n.plus=function(d,y){var _,R=this,m=R.s;if(d=new u(d,y),y=d.s,!m||!y)return new u(NaN);if(m!=y)return d.s=-y,R.minus(d);var S=R.e/LOG_BASE,F=d.e/LOG_BASE,D=R.c,k=d.c;if(!S||!F){if(!D||!k)return new u(m/0);if(!D[0]||!k[0])return k[0]?d:new u(D[0]?R:m*0)}if(S=bitFloor(S),F=bitFloor(F),D=D.slice(),m=S-F){for(m>0?(F=S,_=k):(m=-m,_=D),_.reverse();m--;_.push(0));_.reverse()}for(m=D.length,y=k.length,m-y<0&&(_=k,k=D,D=_,y=m),m=0;y;)m=(D[--y]=D[y]+k[y]+m)/BASE|0,D[y]=BASE===D[y]?0:D[y]%BASE;return m&&(D=[m].concat(D),++F),N(d,D,F)},n.precision=n.sd=function(d,y){var _,R,m,S=this;if(d!=null&&d!==!!d)return intCheck(d,1,MAX),y==null?y=o:intCheck(y,0,8),U(new u(S),d,y);if(!(_=S.c))return null;if(m=_.length-1,R=m*LOG_BASE+1,m=_[m]){for(;m%10==0;m/=10,R--);for(m=_[0];m>=10;m/=10,R++);}return d&&S.e+1>R&&(R=S.e+1),R},n.shiftedBy=function(d){return intCheck(d,-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER),this.times("1e"+d)},n.squareRoot=n.sqrt=function(){var d,y,_,R,m,S=this,F=S.c,D=S.s,k=S.e,G=I+4,M=new u("0.5");if(D!==1||!F||!F[0])return new u(!D||D<0&&(!F||F[0])?NaN:F?S:1/0);if(D=Math.sqrt(+Y(S)),D==0||D==1/0?(y=coeffToString(F),(y.length+k)%2==0&&(y+="0"),D=Math.sqrt(+y),k=bitFloor((k+1)/2)-(k<0||k%2),D==1/0?y="5e"+k:(y=D.toExponential(),y=y.slice(0,y.indexOf("e")+1)+k),_=new u(y)):_=new u(D+""),_.c[0]){for(k=_.e,D=k+G,D<3&&(D=0);;)if(m=_,_=M.times(m.plus(e(S,m,G,1))),coeffToString(m.c).slice(0,D)===(y=coeffToString(_.c)).slice(0,D))if(_.e<k&&--D,y=y.slice(D-3,D+1),y=="9999"||!R&&y=="4999"){if(!R&&(U(m,m.e+I+2,0),m.times(m).eq(S))){_=m;break}G+=4,D+=4,R=1}else{(!+y||!+y.slice(1)&&y.charAt(0)=="5")&&(U(_,_.e+I+2,1),d=!_.times(_).eq(S));break}}return U(_,_.e+I+1,o,d)},n.toExponential=function(d,y){return d!=null&&(intCheck(d,0,MAX),d++),h(this,d,y,1)},n.toFixed=function(d,y){return d!=null&&(intCheck(d,0,MAX),d=d+this.e+1),h(this,d,y)},n.toFormat=function(d,y,_){var R,m=this;if(_==null)d!=null&&y&&typeof y=="object"?(_=y,y=null):d&&typeof d=="object"?(_=d,d=y=null):_=Q;else if(typeof _!="object")throw Error(bignumberError+"Argument not an object: "+_);if(R=m.toFixed(d,y),m.c){var S,F=R.split("."),D=+_.groupSize,k=+_.secondaryGroupSize,G=_.groupSeparator||"",M=F[0],H=F[1],J=m.s<0,L=J?M.slice(1):M,O=L.length;if(k&&(S=D,D=k,k=S,O-=S),D>0&&O>0){for(S=O%D||D,M=L.substr(0,S);S<O;S+=D)M+=G+L.substr(S,D);k>0&&(M+=G+L.slice(S)),J&&(M="-"+M)}R=H?M+(_.decimalSeparator||"")+((k=+_.fractionGroupSize)?H.replace(new RegExp("\\d{"+k+"}\\B","g"),"$&"+(_.fractionGroupSeparator||"")):H):M}return(_.prefix||"")+R+(_.suffix||"")},n.toFraction=function(d){var y,_,R,m,S,F,D,k,G,M,H,J,L=this,O=L.c;if(d!=null&&(D=new u(d),!D.isInteger()&&(D.c||D.s!==1)||D.lt(g)))throw Error(bignumberError+"Argument "+(D.isInteger()?"out of range: ":"not an integer: ")+Y(D));if(!O)return new u(L);for(y=new u(g),G=_=new u(g),R=k=new u(g),J=coeffToString(O),S=y.e=J.length-L.e-1,y.c[0]=POWS_TEN[(F=S%LOG_BASE)<0?LOG_BASE+F:F],d=!d||D.comparedTo(y)>0?S>0?y:G:D,F=B,B=1/0,D=new u(J),k.c[0]=0;M=e(D,y,0,1),m=_.plus(M.times(R)),m.comparedTo(d)!=1;)_=R,R=m,G=k.plus(M.times(m=G)),k=m,y=D.minus(M.times(m=y)),D=m;return m=e(d.minus(_),R,0,1),k=k.plus(m.times(G)),_=_.plus(m.times(R)),k.s=G.s=L.s,S=S*2,H=e(G,R,S,o).minus(L).abs().comparedTo(e(k,_,S,o).minus(L).abs())<1?[G,R]:[k,_],B=F,H},n.toNumber=function(){return+Y(this)},n.toPrecision=function(d,y){return d!=null&&intCheck(d,1,MAX),h(this,d,y,2)},n.toString=function(d){var y,_=this,R=_.s,m=_.e;return m===null?R?(y="Infinity",R<0&&(y="-"+y)):y="NaN":(d==null?y=m<=a||m>=r?toExponential(coeffToString(_.c),m):toFixedPoint(coeffToString(_.c),m,"0"):d===10&&f?(_=U(new u(_),I+m+1,o),y=toFixedPoint(coeffToString(_.c),_.e,"0")):(intCheck(d,2,E.length,"Base"),y=t(toFixedPoint(coeffToString(_.c),m,"0"),10,d,R,!0)),R<0&&_.c[0]&&(y="-"+y)),y},n.valueOf=n.toJSON=function(){return Y(this)},n._isBigNumber=!0,n[Symbol.toStringTag]="BigNumber",n[Symbol.for("nodejs.util.inspect.custom")]=n.valueOf,A!=null&&u.set(A),u}function bitFloor(A){var e=A|0;return A>0||A===e?e:e-1}function coeffToString(A){for(var e,t,i=1,n=A.length,g=A[0]+"";i<n;){for(e=A[i++]+"",t=LOG_BASE-e.length;t--;e="0"+e);g+=e}for(n=g.length;g.charCodeAt(--n)===48;);return g.slice(0,n+1||1)}function compare(A,e){var t,i,n=A.c,g=e.c,I=A.s,o=e.s,a=A.e,r=e.e;if(!I||!o)return null;if(t=n&&!n[0],i=g&&!g[0],t||i)return t?i?0:-o:I;if(I!=o)return I;if(t=I<0,i=a==r,!n||!g)return i?0:!n^t?1:-1;if(!i)return a>r^t?1:-1;for(o=(a=n.length)<(r=g.length)?a:r,I=0;I<o;I++)if(n[I]!=g[I])return n[I]>g[I]^t?1:-1;return a==r?0:a>r^t?1:-1}function intCheck(A,e,t,i){if(A<e||A>t||A!==mathfloor(A))throw Error(bignumberError+(i||"Argument")+(typeof A=="number"?A<e||A>t?" out of range: ":" not an integer: ":" not a primitive number: ")+String(A))}function isOdd(A){var e=A.c.length-1;return bitFloor(A.e/LOG_BASE)==e&&A.c[e]%2!=0}function toExponential(A,e){return(A.length>1?A.charAt(0)+"."+A.slice(1):A)+(e<0?"e":"e+")+e}function toFixedPoint(A,e,t){var i,n;if(e<0){for(n=t+".";++e;n+=t);A=n+A}else if(i=A.length,++e>i){for(n=t,e-=i;--e;n+=t);A+=n}else e<i&&(A=A.slice(0,e)+"."+A.slice(e));return A}var BigNumber=clone();const fold_attrs=A=>fold(A.attributes,e=>({[e.key]:e.value}));async function sign_doc(A,e,t,i){const n=SignDoc.fromPartial({accountNumber:A+"",authInfoBytes:e,bodyBytes:t,chainId:i}),g=SignDoc.encode(n).finish(),I=yw_account.get().secret,o=await Secrets.get(I);if(o?.security.type!=="none")throw new Error("Keyring not yet implemented");return await(await Secp256k1Key.import(await RuntimeKey.createRaw(string8_to_buffer(o.data)))).sign(g,!0)}class CosmosNetwork{constructor(e,t){lA(this,"_p_chain");lA(this,"_y_grpc");lA(this,"_ks_cache");this._g_network=e,this._g_chain=t,this._p_chain=Chains.pathFrom(t),this._y_grpc=new GrpcWebImpl(e.grpcWebUrl,{transport:grpcWebClient_umd$1.exports.grpc.CrossBrowserHttpTransport({withCredentials:!1})}),this.reloadCached()}async _signer_data(e){const t=await new QueryClientImpl(this._y_grpc).account({address:e}),{typeUrl:i,value:n}=t?.account||{};if(i){if(i!=="/cosmos.auth.v1beta1.BaseAccount")throw new Error(`Cannot sign with account of type "${i}", can only sign with BaseAccount.`)}else throw new Error(`Account for ${e} was not found on chain. Likely has zero balance.`);const g=BaseAccount.decode(n);return{chainId:this._g_chain.id,accountNumber:BigInt(g.accountNumber),sequence:BigInt(g.sequence)}}async _update_balance(e,t,i,n){const g=Entities.holdingPathFor(e,t,this._p_chain),I=this._ks_cache.at(g);return await QueryCache.open(async o=>{await o.set(g,{timestamp:n,data:JSON.parse(JSON.stringify(i))}),this._ks_cache=o}),[g,I]}async reloadCached(){this._ks_cache=await QueryCache.read()}cachedBalance(e,t){const i=Entities.holdingPathFor(e,t,this._p_chain);return this._ks_cache.at(i)}async bankBalance(e,t,i=0){const n=Date.now();t=t||Object.keys(this._g_chain.coins)[0];const g=await new QueryClientImpl$1(this._y_grpc).balance({address:e,denom:this._g_chain.coins[t].denom}),{balance:I}=g;if(!I)throw new Error("Failed to fetch balance");const[o,a]=await this._update_balance(e,t,I,n);return{balance:I,cached:a,holding:o}}async bankBalances(e){const t=Date.now(),i=await new QueryClientImpl$1(this._y_grpc).allBalances({address:e}),{balances:n}=i,g=this._g_chain.coins,I=oderom(g,(a,r)=>({[r.denom]:a})),o={};for(const a of n){const r=I[a.denom];g[r];const[s,B]=await this._update_balance(e,r,a,t);o[r]={balance:a,cached:B,holding:s}}return o}get hasRpc(){return!!this._g_network.rpcHost}listen(e,t){const i=this._g_network.rpcHost;if(!i)throw new Error("Cannot subscribe to events; no RPC host configured on network");const n=new WebSocket(`wss://${i}/websocket`);n.onopen=I=>{n.send(JSON.stringify({jsonrpc:"2.0",method:"subscribe",id:"0",params:{query:e.join(" AND ")}}))},n.onmessage=I=>{const a=JSON.parse(I.data||"{}")?.result?.data?.value;a&&t(null,a)};let g=!1;return n.onclose=I=>{g||t(I)},n.onerror=I=>{t(I)},()=>{g=!0,n.close()}}onReceive(e,t){return this.listen(["tm.event='Tx'",`transfer.recipient='${e}'`],(i,n)=>{t(i,n?.TxResult||void 0)})}onSend(e,t){return this.listen(["tm.event='Tx'",`transfer.sender='${e}'`],(i,n)=>{t(i,n?.TxResult||void 0)})}async e2eInfoFor(e){const t=await new ServiceClientImpl(this._y_grpc).getTxsEvent({events:[`message.sender='${e}'`],pagination:{limit:"1"},orderBy:OrderBy.ORDER_BY_DESC});if(!t?.txs?.length)throw new Error("Owner has not signed any messages yet on-chain");const i=t.txs[0].authInfo.signerInfos;if(i.length!==1)throw new Error("Multiple owners");const{typeUrl:n,value:g}=i[0].publicKey;if(n!=="/cosmos.crypto.secp256k1.PubKey")throw new Error("Unexpected public key type");return{sequence:i[0].sequence,height:t.txResponses[0].height,pubkey:Secp256k1Key.uncompressPublicKey(g)}}async ecdhEncrypt(e,t,i,n=yw_chain.get()){const g=yw_account.get().secret,I=await Secrets.get(g);if(I?.security.type!=="none")throw new Error("Keyring not yet implemented");const a=await(await Secp256k1Key.import(await RuntimeKey.createRaw(string8_to_buffer(I.data)))).ecdh(e),r=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]);await crypto.subtle.deriveBits({name:"HKDF",hash:"SHA-256",salt:ATU8_SHA256_STARSHELL,info:sha256_sync$1(text_to_buffer(n.id))},r,256);const s=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",info:sha256_sync$1(text_to_buffer(n.id))},r,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);return await encrypt(t,s,i)}async isContract(e){return(await new ServiceClientImpl(this._y_grpc).getTxsEvent({events:[`message.contract_address='${e}'`],orderBy:OrderBy.ORDER_BY_ASC,pagination:{limit:"1"}})).txResponses.length>0}async received(e,t=0){const i=await new ServiceClientImpl(this._y_grpc).getTxsEvent({events:[`transfer.recipient='${e}'`,`tx.height>=${t}`],pagination:{limit:"100"}}),n=grpcWebClient_umd$1.exports.grpc.client(ServiceGetTxsEventDesc,{host:"wss://rpc.testnet.secretsaturn.net/websocket",transport:grpcWebClient_umd$1.exports.grpc.WebsocketTransport(),debug:!0});n.onHeaders(a=>{console.log(a);debugger}),n.onMessage(a=>{console.log(a);debugger}),n.onEnd((a,r,s)=>{console.log({w_status:a,s_msg:r,g_trailers:s});debugger;console.log("#end")}),n.start();const g=GetTxsEventRequest.fromPartial({events:["tm.event='Tx'"]});debugger;if(n.send({...g,...ServiceGetTxsEventDesc.requestType}),n.finishSend(),!i)throw new Error("Failed to fetch transaction");if(+(i.pagination?.total||1)>1)throw new Error("Not yet implemented");const o=[];for(const a of i.txResponses){const r=JSON.parse(a.rawLog)[0].events;for(const s of r)if(s.type==="transfer"){const B=fold_attrs(s);o.push({...B,height:a.height,timestamp:a.timestamp,txhash:a.txhash})}}return console.log(o),o}async bankSend(e,t,i,n,g="",I=yw_chain.get()){const o=I.coins[i],a=MsgSend.fromPartial({amount:[{denom:o.denom,amount:n.toString()}],fromAddress:e,toAddress:t}),r={typeUrl:"/cosmos.bank.v1beta1.MsgSend",value:MsgSend.encode(a).finish()},[s,B]=await this.broadcast({msgs:[r],memo:g,gasLimit:20000n,gasFee:{price:.25}});return{chain:yw_chain_ref.get(),owner:e,hash:s,coin:i,msg:a,raw:buffer_to_string8(B)}}async broadcast(e){const{msgs:t,memo:i,gasLimit:n,gasFee:g,account:I=yw_account.get()}=e;let{amount:o,denom:a}=g;g.price&&(o=new BigNumber(g.price).times(n.toString()).toString(),a=Object.values(yw_chain.get().coins)[0].denom);const r=Chains.addressFor(I.pubkey,this._g_chain),s=yw_account.get().secret,B=await Secrets.get(s);if(B?.security.type!=="none")throw new Error("Keyring not yet implemented");const l=(await Secp256k1Key.import(await RuntimeKey.create(()=>string8_to_buffer(B.data)),!0)).exportPublicKey(),c=TxBody.fromPartial({messages:t,memo:i}),Q=TxBody.encode(c).finish(),E=await this._signer_data(r),f=AuthInfo.fromPartial({signerInfos:[{publicKey:{typeUrl:"/cosmos.crypto.secp256k1.PubKey",value:PubKey.encode(PubKey.fromPartial({key:l})).finish()},modeInfo:{single:{mode:SignMode.SIGN_MODE_DIRECT}},sequence:E.sequence+""}],fee:{amount:[{amount:o,denom:a}],gasLimit:n+""}}),u=AuthInfo.encode(f).finish(),h=await sign_doc(E.accountNumber,u,Q,yw_chain.get().id),w=TxRaw.encode(TxRaw.fromPartial({bodyBytes:Q,authInfoBytes:u,signatures:[h]})).finish(),U=(await new ServiceClientImpl(this._y_grpc).broadcastTx({txBytes:w,mode:BroadcastMode.BROADCAST_MODE_ASYNC})).txResponse?.txhash;if(!U)throw syserr({text:"Txn failed to broadcast"});return[U,w]}}const Medias=create_store_class({store:SI_STORE_MEDIA,extension:"map",class:class extends WritableStoreMap{}}),Networks=create_store_class({store:SI_STORE_NETWORKS,extension:"map",class:class ie extends WritableStoreMap{static pathFor(e){return`/network.${buffer_to_base64(sha256_sync$1(text_to_buffer(e)))}`}static pathFrom(e){return ie.pathFor(e.grpcWebUrl)}static activate(e,t=yw_chain.get()){return new CosmosNetwork(e,t)}}}),Tags=create_store_class({store:SI_STORE_TAGS,class:class extends WritableStore{static tagPathFor(e){return`/tag.${e.index}`}getTag(e){return this._w_cache.registry[e]??null}getIdsFor(e){return this._w_cache.map[e]??[]}getTagsFor(e){return this.getIdsFor(e).map(t=>this.getTag(t)).filter(t=>!!t)}setIdsFor(e,t){return this._w_cache.map[e]=t,this.save()}setTagsFor(e,t){return this.setIdsFor(e,t.map(i=>i.index))}}}),subscriber_queue=[];function readable(A,e){return{subscribe:writable(A,e).subscribe}}function writable(A,e=noop$1){let t;const i=new Set;function n(o){if(safe_not_equal(A,o)&&(A=o,t)){const a=!subscriber_queue.length;for(const r of i)r[1](),subscriber_queue.push(r,A);if(a){for(let r=0;r<subscriber_queue.length;r+=2)subscriber_queue[r][0](subscriber_queue[r+1]);subscriber_queue.length=0}}}function g(o){n(o(A))}function I(o,a=noop$1){const r=[o,a];return i.add(r),i.size===1&&(t=e(n)||noop$1),o(A),()=>{i.delete(r),i.size===0&&(t(),t=null)}}return{set:n,update:g,subscribe:I}}function derived(A,e,t){const i=!Array.isArray(A),n=i?[A]:A,g=e.length<2;return readable(t,I=>{let o=!1;const a=[];let r=0,s=noop$1;const B=()=>{if(r)return;s();const l=e(i?a[0]:a,I);g?I(l):s=is_function(l)?l:noop$1},C=n.map((l,c)=>subscribe(l,Q=>{a[c]=Q,r&=~(1<<c),o&&B()},()=>{r|=1<<c}));return o=!0,B(),function(){run_all(C),s()}})}var Screen_svelte_svelte_type_style_lang="",StarShellLogo_svelte_svelte_type_style_lang="",SX_ICON_ADD$1=`<svg xmlns="http://www.w3.org/2000/svg" width="8" height="8">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="3" width="2" height="8" />
		<rect y="5" width="2" height="8" transform="rotate(-90 0 5)" />
	</g>
</svg>`,OverlaySelect_svelte_svelte_type_style_lang="";function create_if_block$e(A){let e,t=A[0].outerHTML+"",i;return{c(){e=new HtmlTag(!1),i=empty(),e.a=i},m(n,g){e.m(t,n,g),insert(n,i,g)},p(n,g){g&1&&t!==(t=n[0].outerHTML+"")&&e.p(t)},d(n){n&&detach(i),n&&e.d()}}}function create_fragment$m(A){let e,t=A[0]?.outerHTML&&create_if_block$e(A);return{c(){t&&t.c(),e=empty()},m(i,n){t&&t.m(i,n),insert(i,e,n)},p(i,[n]){i[0]?.outerHTML?t?t.p(i,n):(t=create_if_block$e(i),t.c(),t.m(e.parentNode,e)):t&&(t.d(1),t=null)},i:noop$1,o:noop$1,d(i){t&&t.d(i),i&&detach(e)}}}function instance$l(A,e,t){let{element:i}=e;return A.$$set=n=>{"element"in n&&t(0,i=n.element)},[i]}class Put extends SvelteComponent{constructor(e){super(),init(this,e,instance$l,create_fragment$m,safe_not_equal,{element:0})}}const qs=(A,e)=>A.querySelector(e);function dd(A,e={},t=[]){const i=document.createElement(A);for(const n in e)i.setAttribute(n,e[n]+"");for(const n of t)i.append(n);return i}function open_external_link(A){browser.tabs.create({url:A})}function picture(A,e,t={}){const{default:i,16:n,32:g,48:I,64:o,96:a,128:r,256:s}=A,B=e.medias,C=n?B.at(n)?.data:null,l=g?B.at(g)?.data:null,c=I?B.at(I)?.data:null,Q=o?B.at(o)?.data:null,E=a?B.at(a)?.data:null,f=r?B.at(r)?.data:null,u=s?B.at(s)?.data:null,h=B.at(i).data,w=C||l||c||Q||E||f||u,N=e.dim,U=N*2;let Y=null,d=null;return w&&(N<=64?N<=32?N<=16?Y=w:Y=l||c||Q||E||f||u:N<=48?Y=c||Q||E||f||u:Y=Q||E||f||u:N<=128?N<=96?Y=E||f||u:Y=f||u:N<=256&&(Y=u),U<=64?U<=32?U<=16?d=w:d=l||c||Q||E||f||u:U<=48?d=c||Q||E||f||u:d=Q||E||f||u:U<=128?U<=96?d=E||f||u:d=f||u:U<=256&&(d=u)),dd("picture",{...t},[...d?[dd("source",{srcset:d,media:"(min-resolution: 2dppx)"})]:[],dd("img",{src:Y||h,alt:e.alt||""})])}const Pfps=create_store_class({store:SI_STORE_PFPS,extension:"map",class:class extends WritableStoreMap{static async load(e,t){const i=await Pfps.at(e);return i?Pfps.render(i,t):null}static render(e,t){const i=`width:${t.dim}px; height:${t.dim}px;`;switch(e.type){case"plain":return picture(e.image,t,{class:"global_pfp",style:i})}}}});var PfpDisplay_svelte_svelte_type_style_lang="";function create_else_block_1$1(A){let e,t=(A[1][0]||"")+"",i,n,g,I={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_2,then:create_then_block_2,catch:create_catch_block_2,value:21};return handle_promise(A[7](),I),{c(){e=element("span"),i=text(t),n=space(),g=empty(),I.block.c(),attr(e,"class","icon-dom svelte-mmgef2"),attr(e,"style",A[4])},m(o,a){insert(o,e,a),append(e,i),insert(o,n,a),insert(o,g,a),I.block.m(o,I.anchor=a),I.mount=()=>g.parentNode,I.anchor=g},p(o,a){A=o},i:noop$1,o:noop$1,d(o){o&&detach(e),o&&detach(n),o&&detach(g),I.block.d(o),I.token=null,I=null}}}function create_if_block$d(A){let e,t,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$4,then:create_then_block$4,catch:create_catch_block_1$2,value:20,blocks:[,,,]};return handle_promise(A[6](),i),{c(){e=empty(),i.block.c()},m(n,g){insert(n,e,g),i.block.m(n,i.anchor=g),i.mount=()=>e.parentNode,i.anchor=e,t=!0},p(n,g){A=n,update_await_block_branch(i,A,g)},i(n){t||(transition_in(i.block),t=!0)},o(n){for(let g=0;g<3;g+=1){const I=i.blocks[g];transition_out(I)}t=!1},d(n){n&&detach(e),i.block.d(n),i.token=null,i=null}}}function create_catch_block_2(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_then_block_2(A){let e;return{c(){e=text("_")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_pending_block_2(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_catch_block_1$2(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$4(A){let e,t,i,n,g;const I=[create_if_block_1$8,create_else_block$4],o=[];function a(s,B){return s[20]?0:1}e=a(A),t=o[e]=I[e](A);let r={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$2,then:create_then_block_1$2,catch:create_catch_block$4,value:21};return handle_promise(A[7](),r),{c(){t.c(),i=space(),n=empty(),r.block.c()},m(s,B){o[e].m(s,B),insert(s,i,B),insert(s,n,B),r.block.m(s,r.anchor=B),r.mount=()=>n.parentNode,r.anchor=n,g=!0},p(s,B){A=s,t.p(A,B)},i(s){g||(transition_in(t),g=!0)},o(s){transition_out(t),g=!1},d(s){o[e].d(s),s&&detach(i),s&&detach(n),r.block.d(s),r.token=null,r=null}}}function create_else_block$4(A){let e;return{c(){e=element("span"),e.textContent="Error",attr(e,"class","error")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$8(A){let e,t;return e=new Put({props:{element:A[20]}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p:noop$1,i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_catch_block$4(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_then_block_1$2(A){let e;return{c(){e=text("_")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_pending_block_1$2(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_pending_block$4(A){let e;return{c(){e=text("Loading pfp...")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_fragment$l(A){let e,t,i,n;const g=[create_if_block$d,create_else_block_1$1],I=[];function o(a,r){return a[0]?0:1}return t=o(A),i=I[t]=g[t](A),{c(){e=element("span"),i.c(),attr(e,"class","global_pfp tile "+A[2]+" svelte-mmgef2"),attr(e,"style",A[5]),attr(e,"data-path",A[0]),toggle_class(e,"satin",A[3]==="satin")},m(a,r){insert(a,e,r),I[t].m(e,null),n=!0},p(a,[r]){let s=t;t=o(a),t===s?I[t].p(a,r):(group_outros(),transition_out(I[s],1,1,()=>{I[s]=null}),check_outros(),i=I[t],i?i.p(a,r):(i=I[t]=g[t](a),i.c()),transition_in(i,1),i.m(e,null)),(!n||r&1)&&attr(e,"data-path",a[0])},i(a){n||(transition_in(i),n=!0)},o(a){transition_out(i),n=!1},d(a){a&&detach(e),I[t].d()}}}function instance$k(A,e,t){let i;component_subscribe(A,yw_store_medias,Y=>t(16,i=Y));const n=createEventDispatcher();let{resource:g=null}=e;const I=g;let{ref:o=I?.pfp||""}=e,{name:a=I?.name||""}=e;const r=a;let{dim:s}=e;const B=s;let{circular:C=!1}=e;const l=C?"":"square";let{bg:c=void 0}=e;const Q=c;let{genStyle:E=""}=e;const f=`width:${B}px; height:${B}px; `+(E||"")+(o?`font-size:${B}px;`:"")+(C?`border-radius:${B}px;`:"");let{rootStyle:u=""}=e;const h=u;let{settle:w=void 0}=e;async function N(){const Y=i||await Medias.read(),d=await Pfps.load(o,{alt:r,dim:B,medias:Y});return queueMicrotask(()=>{n("loaded")}),d}function U(){return w&&queueMicrotask(()=>w()),new Promise(F_NOOP)}return A.$$set=Y=>{"resource"in Y&&t(8,g=Y.resource),"ref"in Y&&t(0,o=Y.ref),"name"in Y&&t(9,a=Y.name),"dim"in Y&&t(10,s=Y.dim),"circular"in Y&&t(11,C=Y.circular),"bg"in Y&&t(12,c=Y.bg),"genStyle"in Y&&t(13,E=Y.genStyle),"rootStyle"in Y&&t(14,u=Y.rootStyle),"settle"in Y&&t(15,w=Y.settle)},[o,r,l,Q,f,h,N,U,g,a,s,C,c,E,u,w]}class PfpDisplay extends SvelteComponent{constructor(e){super(),init(this,e,instance$k,create_fragment$l,safe_not_equal,{resource:8,ref:0,name:9,dim:10,circular:11,bg:12,genStyle:13,rootStyle:14,settle:15})}}var SX_ICON_CLOSE=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-close-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-close-fg" d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
</svg>
`,Close_svelte_svelte_type_style_lang="";function create_fragment$k(A){let e,t,i;return{c(){e=element("div"),attr(e,"class","close icon svelte-1to5vmp"),toggle_class(e,"absolute",A[0])},m(n,g){insert(n,e,g),e.innerHTML=SX_ICON_CLOSE,t||(i=listen(e,"click",A[2]),t=!0)},p(n,[g]){g&1&&toggle_class(e,"absolute",n[0])},i:noop$1,o:noop$1,d(n){n&&detach(e),t=!1,i()}}}function instance$j(A,e,t){let{absolute:i=!1}=e,{heightless:n=!1}=e;function g(I){bubble.call(this,A,I)}return A.$$set=I=>{"absolute"in I&&t(0,i=I.absolute),"heightless"in I&&t(1,n=I.heightless)},[i,n,g]}class Close extends SvelteComponent{constructor(e){super(),init(this,e,instance$j,create_fragment$k,safe_not_equal,{absolute:0,heightless:1})}}var Row_svelte_svelte_type_style_lang="";const get_below_slot_changes=A=>({}),get_below_slot_context=A=>({}),get_tags_slot_changes=A=>({}),get_tags_slot_context=A=>({}),get_right_slot_changes=A=>({}),get_right_slot_context=A=>({}),get_status_slot_changes=A=>({}),get_status_slot_context=A=>({}),get_detail_slot_changes=A=>({}),get_detail_slot_context=A=>({}),get_icon_slot_changes_1=A=>({}),get_icon_slot_context_1=A=>({}),get_icon_slot_changes=A=>({}),get_icon_slot_context=A=>({});function fallback_block_3(A){let e,t;return e=new PfpDisplay({props:{ref:A[12],name:A[10],dim:A[13]}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p:noop$1,i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function fallback_block_2(A){let e;const t=A[26].icon,i=create_slot(t,A,A[25],get_icon_slot_context_1),n=i||fallback_block_3(A);return{c(){n&&n.c()},m(g,I){n&&n.m(g,I),e=!0},p(g,I){i&&i.p&&(!e||I[0]&33554432)&&update_slot_base(i,t,g,g[25],e?get_slot_changes(t,g[25],I,get_icon_slot_changes_1):get_all_dirty_from_scope(g[25]),get_icon_slot_context_1)},i(g){e||(transition_in(n,g),e=!0)},o(g){transition_out(n,g),e=!1},d(g){n&&n.d(g)}}}function create_if_block_9$1(A){let e;return{c(){e=element("span"),e.textContent=`(${A[11]})`,attr(e,"class","postname svelte-o4urkb")},m(t,i){insert(t,e,i)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_8$1(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_if_block_5$1(A){let e,t,i,n;const g=[create_if_block_6$1,create_if_block_7$1],I=[];function o(a,r){return a[5]||a[2]||a[17].detail?0:a[4]?1:-1}return~(t=o(A))&&(i=I[t]=g[t](A)),{c(){e=element("div"),i&&i.c(),attr(e,"class","subtitle svelte-o4urkb")},m(a,r){insert(a,e,r),~t&&I[t].m(e,null),n=!0},p(a,r){let s=t;t=o(a),t===s?~t&&I[t].p(a,r):(i&&(group_outros(),transition_out(I[s],1,1,()=>{I[s]=null}),check_outros()),~t?(i=I[t],i?i.p(a,r):(i=I[t]=g[t](a),i.c()),transition_in(i,1),i.m(e,null)):i=null)},i(a){n||(transition_in(i),n=!0)},o(a){transition_out(i),n=!1},d(a){a&&detach(e),~t&&I[t].d()}}}function create_if_block_7$1(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_if_block_6$1(A){let e,t;const i=A[26].detail,n=create_slot(i,A,A[25],get_detail_slot_context),g=n||fallback_block_1$1(A);return{c(){e=element("span"),g&&g.c(),attr(e,"class","detail svelte-o4urkb")},m(I,o){insert(I,e,o),g&&g.m(e,null),t=!0},p(I,o){n?n.p&&(!t||o[0]&33554432)&&update_slot_base(n,i,I,I[25],t?get_slot_changes(i,I[25],o,get_detail_slot_changes):get_all_dirty_from_scope(I[25]),get_detail_slot_context):g&&g.p&&(!t||o[0]&100)&&g.p(I,t?o:[-1,-1])},i(I){t||(transition_in(g,I),t=!0)},o(I){transition_out(g,I),t=!1},d(I){I&&detach(e),g&&g.d(I)}}}function fallback_block_1$1(A){let e,t=(A[5]||A[2])+"",i;return{c(){e=text(A[6]),i=text(t)},m(n,g){insert(n,e,g),insert(n,i,g)},p(n,g){g[0]&64&&set_data(e,n[6]),g[0]&36&&t!==(t=(n[5]||n[2])+"")&&set_data(i,t)},d(n){n&&detach(e),n&&detach(i)}}}function create_if_block_3$3(A){let e,t,i,n,g,I={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$1,then:create_then_block_1$1,catch:create_catch_block_1$1,value:33};handle_promise(i=A[16](A[0]),I);let o=A[1]&&create_if_block_4$3(A);return{c(){e=element("div"),t=element("span"),I.block.c(),n=space(),o&&o.c(),g=empty(),attr(t,"class","number svelte-o4urkb"),attr(e,"class","amount svelte-o4urkb")},m(a,r){insert(a,e,r),append(e,t),I.block.m(t,I.anchor=null),I.mount=()=>t,I.anchor=null,insert(a,n,r),o&&o.m(a,r),insert(a,g,r)},p(a,r){A=a,I.ctx=A,r[0]&1&&i!==(i=A[16](A[0]))&&handle_promise(i,I)||update_await_block_branch(I,A,r),A[1]?o?o.p(A,r):(o=create_if_block_4$3(A),o.c(),o.m(g.parentNode,g)):o&&(o.d(1),o=null)},i:noop$1,o:noop$1,d(a){a&&detach(e),I.block.d(),I.token=null,I=null,a&&detach(n),o&&o.d(a),a&&detach(g)}}}function create_if_block_2$6(A){let e;const t=A[26].status,i=create_slot(t,A,A[25],get_status_slot_context);return{c(){i&&i.c()},m(n,g){i&&i.m(n,g),e=!0},p(n,g){i&&i.p&&(!e||g[0]&33554432)&&update_slot_base(i,t,n,n[25],e?get_slot_changes(t,n[25],g,get_status_slot_changes):get_all_dirty_from_scope(n[25]),get_status_slot_context)},i(n){e||(transition_in(i,n),e=!0)},o(n){transition_out(i,n),e=!1},d(n){i&&i.d(n)}}}function create_catch_block_1$1(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block_1$1(A){let e,t;return{c(){e=element("span"),t=text(A[0])},m(i,n){insert(i,e,n),append(e,t)},p(i,n){n[0]&1&&set_data(t,i[0])},d(i){i&&detach(e)}}}function create_pending_block_1$1(A){let e,t;return{c(){e=element("span"),t=text(A[9]),attr(e,"class","font-family_mono svelte-o4urkb")},m(i,n){insert(i,e,n),append(e,t)},p(i,n){n[0]&512&&set_data(t,i[9])},d(i){i&&detach(e)}}}function create_if_block_4$3(A){let e,t,i,n={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$3,then:create_then_block$3,catch:create_catch_block$3,value:32};return handle_promise(i=A[1],n),{c(){e=element("div"),t=element("span"),n.block.c(),attr(t,"class","fiat svelte-o4urkb")},m(g,I){insert(g,e,I),append(e,t),n.block.m(t,n.anchor=null),n.mount=()=>t,n.anchor=null},p(g,I){A=g,n.ctx=A,I[0]&2&&i!==(i=A[1])&&handle_promise(i,n)||update_await_block_branch(n,A,I)},d(g){g&&detach(e),n.block.d(),n.token=null,n=null}}}function create_catch_block$3(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block$3(A){let e=A[32]+"",t;return{c(){t=text(e)},m(i,n){insert(i,t,n)},p(i,n){n[0]&2&&e!==(e=i[32]+"")&&set_data(t,e)},d(i){i&&detach(t)}}}function create_pending_block$3(A){let e;return{c(){e=text("$...")},m(t,i){insert(t,e,i)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$7(A){let e;const t=A[26].right,i=create_slot(t,A,A[25],get_right_slot_context);return{c(){i&&i.c()},m(n,g){i&&i.m(n,g),e=!0},p(n,g){i&&i.p&&(!e||g[0]&33554432)&&update_slot_base(i,t,n,n[25],e?get_slot_changes(t,n[25],g,get_right_slot_changes):get_all_dirty_from_scope(n[25]),get_right_slot_context)},i(n){e||(transition_in(i,n),e=!0)},o(n){transition_out(i,n),e=!1},d(n){i&&i.d(n)}}}function create_if_block$c(A){let e;const t=A[26].tags,i=create_slot(t,A,A[25],get_tags_slot_context);return{c(){i&&i.c()},m(n,g){i&&i.m(n,g),e=!0},p(n,g){i&&i.p&&(!e||g[0]&33554432)&&update_slot_base(i,t,n,n[25],e?get_slot_changes(t,n[25],g,get_tags_slot_changes):get_all_dirty_from_scope(n[25]),get_tags_slot_context)},i(n){e||(transition_in(i,n),e=!0)},o(n){transition_out(i,n),e=!1},d(n){i&&i.d(n)}}}function create_fragment$j(A){let e,t,i,n,g,I,o,a,r,s,B,C,l,c,Q,E,f,u,h,w,N,U,Y,d,y;const _=A[26].icon,R=create_slot(_,A,A[25],get_icon_slot_context),m=R||fallback_block_2(A);let S=A[11]&&create_if_block_9$1(A),F=A[3]&&create_if_block_8$1(),D=(A[4]||A[2]||A[5]||A[15].length||A[17].detail)&&create_if_block_5$1(A);const k=[create_if_block_2$6,create_if_block_3$3],G=[];function M(q,Z){return q[17].status?0:q[0]?1:-1}~(f=M(A))&&(u=G[f]=k[f](A));let H=A[17].right&&create_if_block_1$7(A),J=(A[15].length||A[17].tags)&&create_if_block$c(A);const L=A[26].below,O=create_slot(L,A,A[25],get_below_slot_context);return{c(){e=element("div"),t=element("div"),i=element("span"),m&&m.c(),g=space(),I=element("span"),o=element("span"),a=element("div"),r=element("span"),s=element("span"),B=text(A[10]),C=space(),S&&S.c(),l=space(),F&&F.c(),c=space(),D&&D.c(),Q=space(),E=element("span"),u&&u.c(),h=space(),H&&H.c(),w=space(),N=element("div"),J&&J.c(),U=space(),O&&O.c(),attr(i,"class",n="icon "+A[8]+" svelte-o4urkb"),attr(s,"class","text svelte-o4urkb"),attr(r,"class","name svelte-o4urkb"),attr(a,"class","title svelte-o4urkb"),attr(o,"class","main part svelte-o4urkb"),attr(E,"class","status part svelte-o4urkb"),attr(I,"class","content svelte-o4urkb"),attr(t,"class","banner svelte-o4urkb"),attr(N,"class","rest svelte-o4urkb"),attr(e,"class","row "+A[14]+" svelte-o4urkb"),attr(e,"style",A[7])},m(q,Z){insert(q,e,Z),append(e,t),append(t,i),m&&m.m(i,null),append(t,g),append(t,I),append(I,o),append(o,a),append(a,r),append(r,s),append(s,B),append(s,C),S&&S.m(s,null),append(a,l),F&&F.m(a,null),append(o,c),D&&D.m(o,null),append(I,Q),append(I,E),~f&&G[f].m(E,null),append(t,h),H&&H.m(t,null),append(e,w),append(e,N),J&&J.m(N,null),append(N,U),O&&O.m(N,null),Y=!0,d||(y=listen(e,"click",A[27]),d=!0)},p(q,Z){R?R.p&&(!Y||Z[0]&33554432)&&update_slot_base(R,_,q,q[25],Y?get_slot_changes(_,q[25],Z,get_icon_slot_changes):get_all_dirty_from_scope(q[25]),get_icon_slot_context):m&&m.p&&(!Y||Z[0]&33554432)&&m.p(q,Y?Z:[-1,-1]),(!Y||Z[0]&256&&n!==(n="icon "+q[8]+" svelte-o4urkb"))&&attr(i,"class",n),q[11]&&S.p(q,Z),q[3]?F||(F=create_if_block_8$1(),F.c(),F.m(a,null)):F&&(F.d(1),F=null),q[4]||q[2]||q[5]||q[15].length||q[17].detail?D?(D.p(q,Z),Z[0]&131124&&transition_in(D,1)):(D=create_if_block_5$1(q),D.c(),transition_in(D,1),D.m(o,null)):D&&(group_outros(),transition_out(D,1,1,()=>{D=null}),check_outros());let T=f;f=M(q),f===T?~f&&G[f].p(q,Z):(u&&(group_outros(),transition_out(G[T],1,1,()=>{G[T]=null}),check_outros()),~f?(u=G[f],u?u.p(q,Z):(u=G[f]=k[f](q),u.c()),transition_in(u,1),u.m(E,null)):u=null),q[17].right?H?(H.p(q,Z),Z[0]&131072&&transition_in(H,1)):(H=create_if_block_1$7(q),H.c(),transition_in(H,1),H.m(t,null)):H&&(group_outros(),transition_out(H,1,1,()=>{H=null}),check_outros()),q[15].length||q[17].tags?J?(J.p(q,Z),Z[0]&131072&&transition_in(J,1)):(J=create_if_block$c(q),J.c(),transition_in(J,1),J.m(N,U)):J&&(group_outros(),transition_out(J,1,1,()=>{J=null}),check_outros()),O&&O.p&&(!Y||Z[0]&33554432)&&update_slot_base(O,L,q,q[25],Y?get_slot_changes(L,q[25],Z,get_below_slot_changes):get_all_dirty_from_scope(q[25]),get_below_slot_context),(!Y||Z[0]&128)&&attr(e,"style",q[7])},i(q){Y||(transition_in(m,q),transition_in(D),transition_in(u),transition_in(H),transition_in(J),transition_in(O,q),Y=!0)},o(q){transition_out(m,q),transition_out(D),transition_out(u),transition_out(H),transition_out(J),transition_out(O,q),Y=!1},d(q){q&&detach(e),m&&m.d(q),S&&S.d(),F&&F.d(),D&&D.d(),~f&&G[f].d(),H&&H.d(),J&&J.d(),O&&O.d(q),d=!1,y()}}}function instance$i(A,e,t){let i;component_subscribe(A,yw_store_tags,H=>t(28,i=H));let{$$slots:n={},$$scope:g}=e;const I=compute_slots(n);let{resourcePath:o=""}=e;const a=o;let{resource:r=null}=e;const s=r;let{name:B=s?.name}=e;const C=B;let{postname:l=""}=e;const c=l;let{pfp:Q=s?.pfp}=e;const E=Q;let{pfpDim:f=48}=e;const u=f;let{amount:h=""}=e,{fiat:w=""}=e,{symbol:N=""}=e,{lockIcon:U=!1}=e,{address:Y=""}=e,{detail:d=""}=e,{prefix:y=""}=e,{rootStyle:_=""}=e,{rootClasses:R=""}=e;const m=R;let{iconClass:S=""}=e;const F=i?.getTagsFor(a)||[],D=new Set;onDestroy(()=>{for(const H of D)clearInterval(H)});let k="";async function G(H){const J=["\u25DC \u25DD"," \u02C9\u25DE"," \u02CD\u25DD","\u25DF \u25DE","\u25DC\u02CD ","\u25DF\u02C9 "];let L=0;if(t(9,k=J[0]),H instanceof Promise){const O=window.setInterval(()=>{L=(L+1)%J.length,t(9,k=J[L])},125);D.add(O);const q=await H;return clearInterval(O),q}return H}function M(H){bubble.call(this,A,H)}return A.$$set=H=>{"resourcePath"in H&&t(18,o=H.resourcePath),"resource"in H&&t(19,r=H.resource),"name"in H&&t(20,B=H.name),"postname"in H&&t(21,l=H.postname),"pfp"in H&&t(22,Q=H.pfp),"pfpDim"in H&&t(23,f=H.pfpDim),"amount"in H&&t(0,h=H.amount),"fiat"in H&&t(1,w=H.fiat),"symbol"in H&&t(2,N=H.symbol),"lockIcon"in H&&t(3,U=H.lockIcon),"address"in H&&t(4,Y=H.address),"detail"in H&&t(5,d=H.detail),"prefix"in H&&t(6,y=H.prefix),"rootStyle"in H&&t(7,_=H.rootStyle),"rootClasses"in H&&t(24,R=H.rootClasses),"iconClass"in H&&t(8,S=H.iconClass),"$$scope"in H&&t(25,g=H.$$scope)},[h,w,N,U,Y,d,y,_,S,k,C,c,E,u,m,F,G,I,o,r,B,l,Q,f,R,g,n,M]}class Row extends SvelteComponent{constructor(e){super(),init(this,e,instance$i,create_fragment$j,safe_not_equal,{resourcePath:18,resource:19,name:20,postname:21,pfp:22,pfpDim:23,amount:0,fiat:1,symbol:2,lockIcon:3,address:4,detail:5,prefix:6,rootStyle:7,rootClasses:24,iconClass:8},null,[-1,-1])}}var Header_svelte_svelte_type_style_lang="",SubHeader_svelte_svelte_type_style_lang="";function get_each_context$8(A,e,t){const i=A.slice();return i[10]=e[t],i}function create_each_block$8(A){let e,t,i=A[10]+"",n,g,I;function o(){return A[7](A[10])}return{c(){e=element("button"),t=element("span"),n=text(i),attr(t,"class","text"),attr(e,"class","pill")},m(a,r){insert(a,e,r),append(e,t),append(t,n),g||(I=listen(e,"click",o),g=!0)},p(a,r){A=a,r&2&&i!==(i=A[10]+"")&&set_data(n,i)},d(a){a&&detach(e),g=!1,I()}}}function create_if_block_1$6(A){let e,t,i,n,g,I;return{c(){e=element("button"),t=element("span"),i=space(),n=element("span"),n.textContent="Add New",attr(t,"class","icon svelte-44hl34"),attr(n,"class","text"),attr(e,"class","pill svelte-44hl34")},m(o,a){insert(o,e,a),append(e,t),t.innerHTML=SX_ICON_ADD$1,append(e,i),append(e,n),g||(I=listen(e,"click",A[8]),g=!0)},p:noop$1,d(o){o&&detach(e),g=!1,I()}}}function create_if_block$b(A){let e,t;return e=new Close({}),e.$on("click",A[9]),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p:noop$1,i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_fragment$i(A){let e,t,i,n,g,I,o,a,r=A[1],s=[];for(let l=0;l<r.length;l+=1)s[l]=create_each_block$8(get_each_context$8(A,r,l));let B=!A[2]&&create_if_block_1$6(A),C=A[4]&&create_if_block$b(A);return{c(){e=element("div"),t=element("span"),i=text(A[0]),n=space(),g=element("span");for(let l=0;l<s.length;l+=1)s[l].c();I=space(),B&&B.c(),o=space(),C&&C.c(),attr(t,"class","text"),attr(g,"class","right svelte-44hl34"),attr(e,"class","title svelte-44hl34")},m(l,c){insert(l,e,c),append(e,t),append(t,i),append(e,n),append(e,g);for(let Q=0;Q<s.length;Q+=1)s[Q].m(g,null);append(g,I),B&&B.m(g,null),append(g,o),C&&C.m(g,null),a=!0},p(l,[c]){if((!a||c&1)&&set_data(i,l[0]),c&34){r=l[1];let Q;for(Q=0;Q<r.length;Q+=1){const E=get_each_context$8(l,r,Q);s[Q]?s[Q].p(E,c):(s[Q]=create_each_block$8(E),s[Q].c(),s[Q].m(g,I))}for(;Q<s.length;Q+=1)s[Q].d(1);s.length=r.length}l[2]?B&&(B.d(1),B=null):B?B.p(l,c):(B=create_if_block_1$6(l),B.c(),B.m(g,o)),l[4]&&C.p(l,c)},i(l){a||(transition_in(C),a=!0)},o(l){transition_out(C),a=!1},d(l){l&&detach(e),destroy_each(s,l),B&&B.d(),C&&C.d()}}}function instance$h(A,e,t){let i;component_subscribe(A,yw_popup,l=>t(3,i=l));let{title:n}=e,{buttons:g=[]}=e,{bare:I=!1}=e,{closes:o=!1}=e;const a=o,r=createEventDispatcher(),s=l=>r(l.toLowerCase().replace(/\s/g,"_")),B=()=>r("add_new"),C=()=>set_store_value(yw_popup,i=null,i);return A.$$set=l=>{"title"in l&&t(0,n=l.title),"buttons"in l&&t(1,g=l.buttons),"bare"in l&&t(2,I=l.bare),"closes"in l&&t(6,o=l.closes)},[n,g,I,i,a,r,o,s,B,C]}class SubHeader extends SvelteComponent{constructor(e){super(),init(this,e,instance$h,create_fragment$i,safe_not_equal,{title:0,buttons:1,bare:2,closes:6})}}function cubicOut(A){const e=A-1;return e*e*e+1}function quintOut(A){return--A*A*A*A*A+1}function slide(A,{delay:e=0,duration:t=400,easing:i=cubicOut}={}){const n=getComputedStyle(A),g=+n.opacity,I=parseFloat(n.height),o=parseFloat(n.paddingTop),a=parseFloat(n.paddingBottom),r=parseFloat(n.marginTop),s=parseFloat(n.marginBottom),B=parseFloat(n.borderTopWidth),C=parseFloat(n.borderBottomWidth);return{delay:e,duration:t,easing:i,css:l=>`overflow: hidden;opacity: ${Math.min(l*20,1)*g};height: ${l*I}px;padding-top: ${l*o}px;padding-bottom: ${l*a}px;margin-top: ${l*r}px;margin-bottom: ${l*s}px;border-top-width: ${l*B}px;border-bottom-width: ${l*C}px;`}}var Field_svelte_svelte_type_style_lang="";const get_post_slot_changes=A=>({}),get_post_slot_context=A=>({});function create_fragment$h(A){let e,t,i,n,g,I,o,a,r,s,B;const C=A[6].default,l=create_slot(C,A,A[5],null),c=A[6].post,Q=create_slot(c,A,A[5],get_post_slot_context);return{c(){e=element("div"),t=element("div"),i=element("label"),n=text(A[0]),I=space(),o=element("div"),l&&l.c(),r=space(),Q&&Q.c(),attr(i,"for",A[1]),attr(t,"class","field-name svelte-yry0w8"),attr(o,"class","field-value svelte-yry0w8"),attr(e,"class","field svelte-yry0w8"),attr(e,"id",s="field-"+A[1]),toggle_class(e,"short",A[2]),toggle_class(e,"double",A[4])},m(E,f){insert(E,e,f),append(e,t),append(t,i),append(i,n),append(e,I),append(e,o),l&&l.m(o,null),append(e,r),Q&&Q.m(e,null),B=!0},p(E,[f]){A=E,(!B||f&1)&&set_data(n,A[0]),(!B||f&2)&&attr(i,"for",A[1]),l&&l.p&&(!B||f&32)&&update_slot_base(l,C,A,A[5],B?get_slot_changes(C,A[5],f,null):get_all_dirty_from_scope(A[5]),null),Q&&Q.p&&(!B||f&32)&&update_slot_base(Q,c,A,A[5],B?get_slot_changes(c,A[5],f,get_post_slot_changes):get_all_dirty_from_scope(A[5]),get_post_slot_context),(!B||f&2&&s!==(s="field-"+A[1]))&&attr(e,"id",s),f&4&&toggle_class(e,"short",A[2]),f&16&&toggle_class(e,"double",A[4])},i(E){B||(add_render_callback(()=>{g||(g=create_bidirectional_transition(t,slide,{duration:A[3]?350:0},!0)),g.run(1)}),transition_in(l,E),add_render_callback(()=>{a||(a=create_bidirectional_transition(o,slide,{duration:A[3]?350:0},!0)),a.run(1)}),transition_in(Q,E),B=!0)},o(E){g||(g=create_bidirectional_transition(t,slide,{duration:A[3]?350:0},!1)),g.run(0),transition_out(l,E),a||(a=create_bidirectional_transition(o,slide,{duration:A[3]?350:0},!1)),a.run(0),transition_out(Q,E),B=!1},d(E){E&&detach(e),E&&g&&g.end(),l&&l.d(E),E&&a&&a.end(),Q&&Q.d(E)}}}function instance$g(A,e,t){let{$$slots:i={},$$scope:n}=e,{name:g=""}=e,{key:I}=e,{short:o=!1}=e,{slides:a=!1}=e,{double:r=!1}=e;return A.$$set=s=>{"name"in s&&t(0,g=s.name),"key"in s&&t(1,I=s.key),"short"in s&&t(2,o=s.short),"slides"in s&&t(3,a=s.slides),"double"in s&&t(4,r=s.double),"$$scope"in s&&t(5,n=s.$$scope)},[g,I,o,a,r,n,i]}class Field extends SvelteComponent{constructor(e){super(),init(this,e,instance$g,create_fragment$h,safe_not_equal,{name:0,key:1,short:2,slides:3,double:4})}}var Log_svelte_svelte_type_style_lang="",ActionsLine_svelte_svelte_type_style_lang="";function create_if_block$a(A){let e,t=A[5]?"Cancel":"Back",i,n,g,I;return{c(){e=element("button"),i=text(t),e.disabled=n=A[0]||A[2],attr(e,"class","svelte-11kqquk")},m(o,a){insert(o,e,a),append(e,i),g||(I=listen(e,"click",A[15]),g=!0)},p(o,a){a&5&&n!==(n=o[0]||o[2])&&(e.disabled=n)},d(o){o&&detach(e),g=!1,I()}}}function create_fragment$g(A){let e,t,i,n,g,I,o,a=(A[5]||A[6])&&create_if_block$a(A);return{c(){e=element("div"),a&&a.c(),t=space(),i=element("button"),n=text(A[4]),i.disabled=g=A[3]||A[0]||A[1]||A[2],attr(i,"class","primary svelte-11kqquk"),attr(e,"class","actions-line svelte-11kqquk")},m(r,s){insert(r,e,s),a&&a.m(e,null),append(e,t),append(e,i),append(i,n),I||(o=listen(i,"click",A[16]),I=!0)},p(r,[s]){(r[5]||r[6])&&a.p(r,s),s&16&&set_data(n,r[4]),s&15&&g!==(g=r[3]||r[0]||r[1]||r[2])&&(i.disabled=g)},i:noop$1,o:noop$1,d(r){r&&detach(e),a&&a.d(),I=!1,o()}}}function instance$f(A,e,t){let i,n,{cancel:g=!1}=e;const I=!!g,o=typeof g=="function"?g:F_NOOP;let{back:a=!1}=e;const r=a;let{confirm:s=["Done",F_NOOP,!1]}=e;const[B,C]=s;let l="",{wait:c=0}=e;const Q=c===!0?5e3:c||0;let E=Q>0;if(E){let _=Math.round(Q/1e3);l=` (${_}s)`;const R=setInterval(()=>{_-=1,t(14,l=` (${_}s)`)},1e3);setTimeout(()=>{t(1,E=!1),t(14,l=""),clearInterval(R)},Q)}let f=!1,{disabled:u=!1}=e,{contd:h=null}=e;const w=h?()=>N.push(h):null,N=getContext("page");function U(){I&&o&&o(),(r||g==="pop")&&N.pop()}async function Y(){let _=!0;t(2,f=!0);try{await(C||F_NOOP)()}catch{_=!1}t(2,f=!1),w&&_&&w()}const d=()=>U(),y=()=>Y();return A.$$set=_=>{"cancel"in _&&t(9,g=_.cancel),"back"in _&&t(10,a=_.back),"confirm"in _&&t(11,s=_.confirm),"wait"in _&&t(12,c=_.wait),"disabled"in _&&t(0,u=_.disabled),"contd"in _&&t(13,h=_.contd)},A.$$.update=()=>{A.$$.dirty&16384&&t(4,i=B+l),A.$$.dirty&2048&&t(3,n=s[2]||!1)},[u,E,f,n,i,I,r,U,Y,g,a,s,c,h,l,d,y]}class ActionsLine extends SvelteComponent{constructor(e){super(),init(this,e,instance$f,create_fragment$g,safe_not_equal,{cancel:9,back:10,confirm:11,wait:12,disabled:0,contd:13})}}var StarShellTitle_svelte_svelte_type_style_lang="",Register_svelte_svelte_type_style_lang="",SX_SEND=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="12" y="4" width="2" height="9" />
		<rect x="5" y="6" width="2" height="9" transform="rotate(-90 5 6)" />
		<path d="M14 5.5V4H12.5L3 13.5L4.5 15L14 5.5Z" />
	</g>
</svg>
`,SX_RECV=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none">
	<style>
		.s2r-action-recv-fg-stroke {
			stroke: var(--svg-color-fg, currentColor);
		}
	</style>
	<path style="fill:var(--svg-color-fg, currentColor)" d="M3 14h12v2H3z"/>
	<path class="s2r-action-recv-fg-stroke" d="M9 12V1M4.5 7.5 9 12l4.5-4.5" stroke-width="2"/>
</svg>`,SX_ICON_ADD=`<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="10" y="4" width="2" height="14" rx="1" />
		<rect x="4" y="10" width="14" height="2" ry="1" />
	</g>
</svg>`,SX_ICON_INFO=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
</svg>`,SX_ICON_EDIT$1=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a.996.996 0 0 0 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
</svg>`,SX_ICON_DELETE=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"/>
</svg>`,SX_ICON_WRAP=`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
	<style>
		.star-action-wrap-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="star-action-wrap-fg" d="M11,3.6L7.8,6.7L4.6,3.6c-0.3-0.3-0.8-0.3-1.1,0s-0.3,0.8,0,1.1l3.7,3.7c0.3,0.3,0.8,0.3,1.1,0L12,4.7 c0.3-0.3,0.3-0.8,0-1.1C11.8,3.3,11.3,3.3,11,3.6z M12.6,12.3c0,0.4-0.3,0.8-0.7,0.8H3.7c-0.4,0-0.8-0.4-0.8-0.8l0,0l0,0v-1.6 c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8v0.8H11v-0.8c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8V12.3C12.7,12.3,12.7,12.3,12.6,12.3 L12.6,12.3z" />
</svg>
`,SX_ICON_UNWRAP=`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
	<style>
		.star-action-unwrap-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="star-action-unwrap-fg" d="M12,7.8c0.3-0.3,0.3-0.8,0-1.1L8.3,3C8,2.7,7.5,2.7,7.2,3L3.5,6.8C3.2,7,3.2,7.5,3.5,7.8c0.3,0.3,0.8,0.3,1.1,0
	l3.2-3.1L11,7.8C11.3,8.1,11.8,8.1,12,7.8z M12.6,12.4c0,0.4-0.3,0.8-0.7,0.8H3.7c-0.4,0-0.8-0.4-0.8-0.8l0,0l0,0v-1.6
	c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8v0.8H11v-0.8c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8V12.4L12.6,12.4L12.6,12.4z" />
</svg>
`,SX_ICON_EDIT=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<circle cx="11" cy="11" r="10" fill="none" style="stroke:var(--svg-color-bg, currentColor)"/>
	<path style="fill:var(--svg-color-fg, currentColor)" d="m8.364 11.631 5.656-5.657L16 7.954l-5.657 5.657zM7.6 12.4 7 13v2h2l.6-.6z"/>
</svg>`,SX_ICON_CHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
	<style type="text/css">
		.s2r-checked-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-checked-fg" d="M16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0ZM7.71 13.29C7.32 13.68 6.69 13.68 6.3 13.29L2.71 9.7C2.32 9.31 2.32 8.68 2.71 8.29C3.1 7.9 3.73 7.9 4.12 8.29L7 11.17L13.88 4.29C14.27 3.9 14.9 3.9 15.29 4.29C15.68 4.68 15.68 5.31 15.29 5.7L7.71 13.29Z" />
</svg>
`,SX_ICON_UNCHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
	<style type="text/css">
		.s2r-unchecked-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-unchecked-fg" d="M15 16H3C2.45 16 2 15.55 2 15V3C2 2.45 2.45 2 3 2H15C15.55 2 16 2.45 16 3V15C16 15.55 15.55 16 15 16ZM16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0Z" />
</svg>
`,CheckboxField_svelte_svelte_type_style_lang="";function create_if_block$9(A){let e,t;const i=A[8].default,n=create_slot(i,A,A[7],null);return{c(){e=element("label"),n&&n.c(),attr(e,"for",A[2])},m(g,I){insert(g,e,I),n&&n.m(e,null),t=!0},p(g,I){n&&n.p&&(!t||I&128)&&update_slot_base(n,i,g,g[7],t?get_slot_changes(i,g[7],I,null):get_all_dirty_from_scope(g[7]),null)},i(g){t||(transition_in(n,g),t=!0)},o(g){transition_out(n,g),t=!1},d(g){g&&detach(e),n&&n.d(g)}}}function create_fragment$f(A){let e,t,i,n,g,I=(A[0]?SX_ICON_CHECKED:SX_ICON_UNCHECKED)+"",o,a,r,s,B,C=A[4].default&&create_if_block$9(A);return{c(){e=element("fieldset"),t=element("span"),i=element("input"),n=space(),g=element("span"),o=space(),C&&C.c(),attr(i,"id",A[2]),attr(i,"type","checkbox"),i.hidden=!0,attr(g,"class","icon svelte-1fxz7ga"),attr(t,"class","checkbox"),attr(e,"class",a=null_to_empty(A[1])+" svelte-1fxz7ga")},m(l,c){insert(l,e,c),append(e,t),append(t,i),i.checked=A[0],append(t,n),append(t,g),g.innerHTML=I,append(e,o),C&&C.m(e,null),r=!0,s||(B=[listen(i,"change",A[9]),listen(e,"click",A[3])],s=!0)},p(l,[c]){c&1&&(i.checked=l[0]),(!r||c&1)&&I!==(I=(l[0]?SX_ICON_CHECKED:SX_ICON_UNCHECKED)+"")&&(g.innerHTML=I),l[4].default?C?(C.p(l,c),c&16&&transition_in(C,1)):(C=create_if_block$9(l),C.c(),transition_in(C,1),C.m(e,null)):C&&(group_outros(),transition_out(C,1,1,()=>{C=null}),check_outros()),(!r||c&2&&a!==(a=null_to_empty(l[1])+" svelte-1fxz7ga"))&&attr(e,"class",a)},i(l){r||(transition_in(C),r=!0)},o(l){transition_out(C),r=!1},d(l){l&&detach(e),C&&C.d(),s=!1,run_all(B)}}}function instance$e(A,e,t){let{$$slots:i={},$$scope:n}=e;const g=compute_slots(i);let{id:I}=e;const o=I;let{containerClass:a=""}=e,{checked:r=!1}=e,{disableHandler:s=!1}=e;function B(l){l.target.tagName!=="LABEL"&&(s||t(0,r=!r)),l.stopImmediatePropagation()}function C(){r=this.checked,t(0,r)}return A.$$set=l=>{"id"in l&&t(5,I=l.id),"containerClass"in l&&t(1,a=l.containerClass),"checked"in l&&t(0,r=l.checked),"disableHandler"in l&&t(6,s=l.disableHandler),"$$scope"in l&&t(7,n=l.$$scope)},[r,a,o,B,g,I,s,n,i,C]}class CheckboxField extends SvelteComponent{constructor(e){super(),init(this,e,instance$e,create_fragment$f,safe_not_equal,{id:5,containerClass:1,checked:0,disableHandler:6})}}var PopupTagsSelect_svelte_svelte_type_style_lang="";function get_each_context$7(A,e,t){const i=A.slice();return i[11]=e[t].tag,i[12]=e[t].selected,i[13]=e,i[14]=t,i}function create_right_slot$1(A){let e,t,i,n;function g(o){A[3](o,A[12],A[13],A[14])}let I={id:"tag-$"+A[11].index,disableHandler:!0};return A[12]!==void 0&&(I.checked=A[12]),e=new CheckboxField({props:I}),binding_callbacks.push(()=>bind(e,"checked",g)),{c(){create_component(e.$$.fragment),i=space()},m(o,a){mount_component(e,o,a),insert(o,i,a),n=!0},p(o,a){A=o;const r={};a&1&&(r.id="tag-$"+A[11].index),!t&&a&1&&(t=!0,r.checked=A[12],add_flush_callback(()=>t=!1)),e.$set(r)},i(o){n||(transition_in(e.$$.fragment,o),n=!0)},o(o){transition_out(e.$$.fragment,o),n=!1},d(o){destroy_component(e,o),o&&detach(i)}}}function create_each_block$7(A){let e,t;function i(){return A[4](A[11])}return e=new Row({props:{rootStyle:"--app-icon-diameter:12px;",iconClass:"align-self_center",name:A[11].name,$$slots:{right:[create_right_slot$1]},$$scope:{ctx:A}}}),e.$on("click",i),{c(){create_component(e.$$.fragment)},m(n,g){mount_component(e,n,g),t=!0},p(n,g){A=n;const I={};g&1&&(I.name=A[11].name),g&32769&&(I.$$scope={dirty:g,ctx:A}),e.$set(I)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_fragment$e(A){let e,t,i,n,g,I,o,a;t=new SubHeader({props:{title:"Select Tag(s)",bare:!0,closes:!0}});let r=A[0],s=[];for(let C=0;C<r.length;C+=1)s[C]=create_each_block$7(get_each_context$7(A,r,C));const B=C=>transition_out(s[C],1,1,()=>{s[C]=null});return o=new ActionsLine({props:{confirm:["Apply",A[2]]}}),{c(){e=element("section"),create_component(t.$$.fragment),i=space(),n=element("div");for(let C=0;C<s.length;C+=1)s[C].c();g=space(),I=element("div"),create_component(o.$$.fragment),attr(n,"class","rows svelte-vooes4"),attr(I,"class","float svelte-vooes4"),attr(e,"class","screen")},m(C,l){insert(C,e,l),mount_component(t,e,null),append(e,i),append(e,n);for(let c=0;c<s.length;c+=1)s[c].m(n,null);append(e,g),append(e,I),mount_component(o,I,null),a=!0},p(C,[l]){if(l&3){r=C[0];let c;for(c=0;c<r.length;c+=1){const Q=get_each_context$7(C,r,c);s[c]?(s[c].p(Q,l),transition_in(s[c],1)):(s[c]=create_each_block$7(Q),s[c].c(),transition_in(s[c],1),s[c].m(n,null))}for(group_outros(),c=r.length;c<s.length;c+=1)B(c);check_outros()}},i(C){if(!a){transition_in(t.$$.fragment,C);for(let l=0;l<r.length;l+=1)transition_in(s[l]);transition_in(o.$$.fragment,C),a=!0}},o(C){transition_out(t.$$.fragment,C),s=s.filter(Boolean);for(let l=0;l<s.length;l+=1)transition_out(s[l]);transition_out(o.$$.fragment,C),a=!1},d(C){C&&detach(e),destroy_component(t),destroy_each(s,C),destroy_component(o)}}}function instance$d(A,e,t){let i,n,g;component_subscribe(A,yw_popup,c=>t(5,i=c)),component_subscribe(A,yw_store_tags,c=>t(6,n=c)),component_subscribe(A,yw_context_popup,c=>t(7,g=c));const I=g.resource,o=(c,Q)=>c.index-Q.index,a=new Set(n.getIdsFor(I));let r=n.raw.registry.sort(o).map(c=>({tag:c,selected:a.has(c.index)}));function s(c){const Q=r.find(E=>c===E.tag.index);Q.selected=!Q.selected,t(0,r)}async function B(){await n.setTagsFor(I,a_tags),set_store_value(yw_popup,i=null,i)}function C(c,Q,E,f){E[f].selected=c,t(0,r)}return[r,s,B,C,c=>s(c.index)]}class PopupTagsSelect extends SvelteComponent{constructor(e){super(),init(this,e,instance$d,create_fragment$e,safe_not_equal,{})}}var InlineTags_svelte_svelte_type_style_lang="";const get_suffix_slot_changes=A=>({}),get_suffix_slot_context=A=>({});function get_each_context$6(A,e,t){const i=A.slice();return i[26]=e[t],i[28]=t,i}const get_prefix_slot_changes=A=>({}),get_prefix_slot_context=A=>({});function create_if_block_4$2(A){let e,t,i;const n=A[17].prefix,g=create_slot(n,A,A[16],get_prefix_slot_context);return{c(){e=element("span"),g&&g.c(),attr(e,"class",t="prefix "+A[0]+" svelte-r4i5a9")},m(I,o){insert(I,e,o),g&&g.m(e,null),i=!0},p(I,o){g&&g.p&&(!i||o&65536)&&update_slot_base(g,n,I,I[16],i?get_slot_changes(n,I[16],o,get_prefix_slot_changes):get_all_dirty_from_scope(I[16]),get_prefix_slot_context),(!i||o&1&&t!==(t="prefix "+I[0]+" svelte-r4i5a9"))&&attr(e,"class",t)},i(I){i||(transition_in(g,I),i=!0)},o(I){transition_out(g,I),i=!1},d(I){I&&detach(e),g&&g.d(I)}}}function create_if_block_3$2(A){let e,t=A[26].name+"",i;return{c(){e=element("span"),i=text(t),attr(e,"class","label svelte-r4i5a9")},m(n,g){insert(n,e,g),append(e,i)},p(n,g){g&32&&t!==(t=n[26].name+"")&&set_data(i,t)},d(n){n&&detach(e)}}}function create_if_block_2$5(A){let e,t,i;function n(){return A[18](A[26])}return{c(){e=element("span"),attr(e,"class","delete icon svelte-r4i5a9")},m(g,I){insert(g,e,I),e.innerHTML=SX_ICON_ADD,t||(i=listen(e,"click",n),t=!0)},p(g,I){A=g},d(g){g&&detach(e),t=!1,i()}}}function create_each_block$6(A){let e,t,i,n,g,I=!A[7]&&create_if_block_3$2(A),o=A[6]&&create_if_block_2$5(A);return{c(){e=element("span"),I&&I.c(),t=space(),o&&o.c(),i=space(),attr(e,"class","tag svelte-r4i5a9"),set_style(e,"background-color",A[26].color),toggle_class(e,"collapsed",A[7])},m(a,r){insert(a,e,r),I&&I.m(e,null),append(e,t),o&&o.m(e,null),append(e,i),g=!0},p(a,r){A=a,A[7]||I.p(A,r),A[6]&&o.p(A,r),(!g||r&32)&&set_style(e,"background-color",A[26].color)},i(a){g||(n&&n.end(1),g=!0)},o(a){n=create_out_transition(e,A[10],{duration:A[6]?300:0}),g=!1},d(a){a&&detach(e),I&&I.d(),o&&o.d(),a&&n&&n.end()}}}function create_key_block(A){let e,t,i=A[5],n=[];for(let I=0;I<i.length;I+=1)n[I]=create_each_block$6(get_each_context$6(A,i,I));const g=I=>transition_out(n[I],1,1,()=>{n[I]=null});return{c(){for(let I=0;I<n.length;I+=1)n[I].c();e=empty()},m(I,o){for(let a=0;a<n.length;a+=1)n[a].m(I,o);insert(I,e,o),t=!0},p(I,o){if(o&736){i=I[5];let a;for(a=0;a<i.length;a+=1){const r=get_each_context$6(I,i,a);n[a]?(n[a].p(r,o),transition_in(n[a],1)):(n[a]=create_each_block$6(r),n[a].c(),transition_in(n[a],1),n[a].m(e.parentNode,e))}for(group_outros(),a=i.length;a<n.length;a+=1)g(a);check_outros()}},i(I){if(!t){for(let o=0;o<i.length;o+=1)transition_in(n[o]);t=!0}},o(I){n=n.filter(Boolean);for(let o=0;o<n.length;o+=1)transition_out(n[o]);t=!1},d(I){destroy_each(n,I),I&&detach(e)}}}function create_if_block_1$5(A){let e,t,i,n;return{c(){e=element("span"),t=element("span"),attr(t,"class","icon svelte-r4i5a9"),attr(e,"class","edit svelte-r4i5a9")},m(g,I){insert(g,e,I),append(e,t),t.innerHTML=SX_ICON_EDIT,i||(n=listen(e,"click",A[19]),i=!0)},p:noop$1,d(g){g&&detach(e),i=!1,n()}}}function create_if_block$8(A){let e,t,i;const n=A[17].suffix,g=create_slot(n,A,A[16],get_suffix_slot_context);return{c(){e=element("span"),g&&g.c(),attr(e,"class",t="suffix "+A[1]+" svelte-r4i5a9")},m(I,o){insert(I,e,o),g&&g.m(e,null),i=!0},p(I,o){g&&g.p&&(!i||o&65536)&&update_slot_base(g,n,I,I[16],i?get_slot_changes(n,I[16],o,get_suffix_slot_changes):get_all_dirty_from_scope(I[16]),get_suffix_slot_context),(!i||o&2&&t!==(t="suffix "+I[1]+" svelte-r4i5a9"))&&attr(e,"class",t)},i(I){i||(transition_in(g,I),i=!0)},o(I){transition_out(g,I),i=!1},d(I){I&&detach(e),g&&g.d(I)}}}function create_fragment$d(A){let e,t,i=A[3],n,g,I,o=A[11].prefix&&create_if_block_4$2(A),a=create_key_block(A),r=A[6]&&create_if_block_1$5(A),s=A[11].suffix&&create_if_block$8(A);return{c(){e=element("span"),o&&o.c(),t=space(),a.c(),n=space(),r&&r.c(),g=space(),s&&s.c(),attr(e,"class","cluster svelte-r4i5a9"),attr(e,"style",A[2]),toggle_class(e,"editable",A[6]),toggle_class(e,"collapsed",A[7])},m(B,C){insert(B,e,C),o&&o.m(e,null),append(e,t),a.m(e,null),append(e,n),r&&r.m(e,null),append(e,g),s&&s.m(e,null),A[20](e),I=!0},p(B,[C]){B[11].prefix?o?(o.p(B,C),C&2048&&transition_in(o,1)):(o=create_if_block_4$2(B),o.c(),transition_in(o,1),o.m(e,t)):o&&(group_outros(),transition_out(o,1,1,()=>{o=null}),check_outros()),C&8&&safe_not_equal(i,i=B[3])?(group_outros(),transition_out(a,1,1,noop$1),check_outros(),a=create_key_block(B),a.c(),transition_in(a,1),a.m(e,n)):a.p(B,C),B[6]&&r.p(B,C),B[11].suffix?s?(s.p(B,C),C&2048&&transition_in(s,1)):(s=create_if_block$8(B),s.c(),transition_in(s,1),s.m(e,null)):s&&(group_outros(),transition_out(s,1,1,()=>{s=null}),check_outros()),(!I||C&4)&&attr(e,"style",B[2])},i(B){I||(transition_in(o),transition_in(a),transition_in(s),I=!0)},o(B){transition_out(o),transition_out(a),transition_out(s),I=!1},d(B){B&&detach(e),o&&o.d(),a.d(B),r&&r.d(),s&&s.d(),A[20](null)}}}function instance$c(A,e,t){let i,n,g,I;component_subscribe(A,yw_popup,S=>t(21,n=S)),component_subscribe(A,yw_context_popup,S=>t(22,g=S)),component_subscribe(A,yw_store_tags,S=>t(15,I=S));let{$$slots:o={},$$scope:a}=e;const r=compute_slots(o);let{resourcePath:s}=e;const B=s;let{editable:C=!1}=e;const l=C;let{collapsed:c=!1}=e;const Q=c;let{prefixClass:E=""}=e,{suffixClass:f=""}=e,{rootStyle:u=""}=e,h=0;const w=yw_store_tags.subscribe(()=>t(3,h++,h));onDestroy(()=>{w()});let N;l&&(yw_context_popup.subscribe(S=>{S?.tags&&t(5,i=S.tags)}),onDestroy(()=>{set_store_value(yw_context_popup,g=null,g)}));function U(){set_store_value(yw_context_popup,g={resource:B},g),set_store_value(yw_popup,n=PopupTagsSelect,n)}let Y;async function d(S){const F=i.findIndex(D=>D.index===S.index);i.splice(F,1),await N.save()}function y(S,{delay:F=0,duration:D=400,easing:k=cubicOut}={}){const G=getComputedStyle(S),M=+G.opacity,H=parseFloat(G.width),J=parseFloat(G.paddingLeft),L=parseFloat(G.paddingRight),O=parseFloat(G.marginLeft),q=parseFloat(G.marginRight),Z=parseFloat(G.borderLeftWidth),T=parseFloat(G.borderRightWidth);return{delay:F,duration:D,easing:k,css:X=>`--delete-display: none;overflow: hidden;opacity: ${Math.min(X*20,1)*M};width: ${X*H}px;padding-left: ${X*J}px;padding-right: ${X*L}px;margin-left: ${X*O}px;margin-right: ${X*q}px;border-left-width: ${X*Z}px;border-right-width: ${X*T}px;`}}const _=S=>d(S),R=()=>U();function m(S){binding_callbacks[S?"unshift":"push"](()=>{Y=S,t(4,Y)})}return A.$$set=S=>{"resourcePath"in S&&t(12,s=S.resourcePath),"editable"in S&&t(13,C=S.editable),"collapsed"in S&&t(14,c=S.collapsed),"prefixClass"in S&&t(0,E=S.prefixClass),"suffixClass"in S&&t(1,f=S.suffixClass),"rootStyle"in S&&t(2,u=S.rootStyle),"$$scope"in S&&t(16,a=S.$$scope)},A.$$.update=()=>{A.$$.dirty&32768&&t(5,i=I.getTagsFor(B))},[E,f,u,h,Y,i,l,Q,U,d,y,r,s,C,c,I,a,o,_,R,m]}class InlineTags extends SvelteComponent{constructor(e){super(),init(this,e,instance$c,create_fragment$d,safe_not_equal,{resourcePath:12,editable:13,collapsed:14,prefixClass:0,suffixClass:1,rootStyle:2})}}var Portrait_svelte_svelte_type_style_lang="";function get_each_context$5(A,e,t){const i=A.slice();return i[22]=e[t][0],i[23]=e[t][1],i}const get_subtitle_slot_changes=A=>({}),get_subtitle_slot_context=A=>({}),get_pfp_slot_changes=A=>({}),get_pfp_slot_context=A=>({});function create_if_block_3$1(A){let e,t,i,n;const g=[create_if_block_4$1,create_else_block$3],I=[];function o(a,r){return a[11].pfp?0:1}return t=o(A),i=I[t]=g[t](A),{c(){e=element("div"),i.c(),attr(e,"class","pfp svelte-1ilena7")},m(a,r){insert(a,e,r),I[t].m(e,null),n=!0},p(a,r){let s=t;t=o(a),t===s?I[t].p(a,r):(group_outros(),transition_out(I[s],1,1,()=>{I[s]=null}),check_outros(),i=I[t],i?i.p(a,r):(i=I[t]=g[t](a),i.c()),transition_in(i,1),i.m(e,null))},i(a){n||(transition_in(i),n=!0)},o(a){transition_out(i),n=!1},d(a){a&&detach(e),I[t].d()}}}function create_else_block$3(A){let e,t;return e=new PfpDisplay({props:{ref:A[1],resource:A[0],dim:64,circular:A[6]}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&2&&(g.ref=i[1]),n&1&&(g.resource=i[0]),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_if_block_4$1(A){let e,t;const i=A[19].pfp,n=create_slot(i,A,A[18],get_pfp_slot_context),g=n||fallback_block_1();return{c(){e=element("span"),g&&g.c(),attr(e,"class","icon svelte-1ilena7")},m(I,o){insert(I,e,o),g&&g.m(e,null),t=!0},p(I,o){n&&n.p&&(!t||o&262144)&&update_slot_base(n,i,I,I[18],t?get_slot_changes(i,I[18],o,get_pfp_slot_changes):get_all_dirty_from_scope(I[18]),get_pfp_slot_context)},i(I){t||(transition_in(g,I),t=!0)},o(I){transition_out(g,I),t=!1},d(I){I&&detach(e),g&&g.d(I)}}}function fallback_block_1(A){let e;return{c(){e=text("Empty pfp slot")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_catch_block$2(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block$2(A){let e=A[26]+"",t;return{c(){t=text(e)},m(i,n){insert(i,t,n)},p(i,n){n&4&&e!==(e=i[26]+"")&&set_data(t,e)},d(i){i&&detach(t)}}}function create_pending_block$2(A){let e;return{c(){e=text("...")},m(t,i){insert(t,e,i)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_2$4(A){let e;return{c(){e=element("span"),attr(e,"class","info svelte-1ilena7")},m(t,i){insert(t,e,i),e.innerHTML=SX_ICON_INFO},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$4(A){let e,t,i;const n=A[19].subtitle,g=create_slot(n,A,A[18],get_subtitle_slot_context),I=g||fallback_block$1(A);return{c(){e=element("div"),t=element("span"),I&&I.c(),attr(t,"class","text"),attr(e,"class","subtitle svelte-1ilena7")},m(o,a){insert(o,e,a),append(e,t),I&&I.m(t,null),i=!0},p(o,a){g?g.p&&(!i||a&262144)&&update_slot_base(g,n,o,o[18],i?get_slot_changes(n,o[18],a,get_subtitle_slot_changes):get_all_dirty_from_scope(o[18]),get_subtitle_slot_context):I&&I.p&&(!i||a&8)&&I.p(o,i?a:-1)},i(o){i||(transition_in(I,o),i=!0)},o(o){transition_out(I,o),i=!1},d(o){o&&detach(e),I&&I.d(o)}}}function fallback_block$1(A){let e;return{c(){e=text(A[3])},m(t,i){insert(t,e,i)},p(t,i){i&8&&set_data(e,t[3])},d(t){t&&detach(e)}}}function create_if_block$7(A){let e,t=ode(A[10]),i=[];for(let n=0;n<t.length;n+=1)i[n]=create_each_block$5(get_each_context$5(A,t,n));return{c(){e=element("div");for(let n=0;n<i.length;n+=1)i[n].c();attr(e,"class","actions svelte-1ilena7")},m(n,g){insert(n,e,g);for(let I=0;I<i.length;I+=1)i[I].m(e,null)},p(n,g){if(g&1056){t=ode(n[10]);let I;for(I=0;I<t.length;I+=1){const o=get_each_context$5(n,t,I);i[I]?i[I].p(o,g):(i[I]=create_each_block$5(o),i[I].c(),i[I].m(e,null))}for(;I<i.length;I+=1)i[I].d(1);i.length=t.length}},d(n){n&&detach(e),destroy_each(i,n)}}}function create_each_block$5(A){let e,t,i=A[5][A[22]]+"",n,g,I=A[23].label+"",o,a,r,s;function B(){return A[20](A[23])}return{c(){e=element("span"),t=element("span"),n=space(),g=element("span"),o=text(I),a=space(),attr(t,"class","icon svelte-1ilena7"),attr(g,"class","label"),attr(e,"class","action action-"+A[22]+" svelte-1ilena7")},m(C,l){insert(C,e,l),append(e,t),t.innerHTML=i,append(e,n),append(e,g),append(g,o),append(e,a),r||(s=listen(e,"click",B),r=!0)},p(C,l){A=C},d(C){C&&detach(e),r=!1,s()}}}function create_fragment$c(A){let e,t,i,n,g,I,o,a,r,s,B,C=!A[7]&&create_if_block_3$1(A),l={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$2,then:create_then_block$2,catch:create_catch_block$2,value:26};handle_promise(g=A[2],l);let c=A[4]&&create_if_block_2$4(),Q=(A[3]||A[11].subtitle)&&create_if_block_1$4(A);r=new InlineTags({props:{resourcePath:A[8],rootStyle:"margin: var(--ui-padding) 0 0 0;"}});let E=A[10]&&create_if_block$7(A);return{c(){e=element("div"),C&&C.c(),t=space(),i=element("div"),n=element("span"),l.block.c(),I=space(),c&&c.c(),o=space(),Q&&Q.c(),a=space(),create_component(r.$$.fragment),s=space(),E&&E.c(),attr(n,"class","text"),attr(i,"class","title svelte-1ilena7"),attr(e,"class","portrait "+A[9]+" svelte-1ilena7"),attr(e,"data-path",A[8])},m(f,u){insert(f,e,u),C&&C.m(e,null),append(e,t),append(e,i),append(i,n),l.block.m(n,l.anchor=null),l.mount=()=>n,l.anchor=null,append(i,I),c&&c.m(i,null),append(e,o),Q&&Q.m(e,null),append(e,a),mount_component(r,e,null),append(e,s),E&&E.m(e,null),B=!0},p(f,[u]){A=f,A[7]||C.p(A,u),l.ctx=A,u&4&&g!==(g=A[2])&&handle_promise(g,l)||update_await_block_branch(l,A,u),A[4]?c?c.p(A,u):(c=create_if_block_2$4(),c.c(),c.m(i,null)):c&&(c.d(1),c=null),A[3]||A[11].subtitle?Q?(Q.p(A,u),u&2056&&transition_in(Q,1)):(Q=create_if_block_1$4(A),Q.c(),transition_in(Q,1),Q.m(e,a)):Q&&(group_outros(),transition_out(Q,1,1,()=>{Q=null}),check_outros()),A[10]&&E.p(A,u)},i(f){B||(transition_in(C),transition_in(Q),transition_in(r.$$.fragment,f),B=!0)},o(f){transition_out(C),transition_out(Q),transition_out(r.$$.fragment,f),B=!1},d(f){f&&detach(e),C&&C.d(),l.block.d(),l.token=null,l=null,c&&c.d(),Q&&Q.d(),destroy_component(r),E&&E.d()}}}var ActionId;(function(A){A.SEND="send",A.RECV="recv",A.ADD="add",A.EDIT="edit",A.WRAP="wrap",A.UNWRAP="unwrap"})(ActionId||(ActionId={}));function instance$b(A,e,t){let i;component_subscribe(A,yw_store_tags,d=>t(17,i=d));let{$$slots:n={},$$scope:g}=e;const I=compute_slots(n),o={send:SX_SEND,recv:SX_RECV,add:SX_ICON_ADD,edit:SX_ICON_EDIT$1,wrap:SX_ICON_WRAP,unwrap:SX_ICON_UNWRAP,delete:SX_ICON_DELETE};let{resource:a=null}=e,{pfp:r=a?.pfp||""}=e,{circular:s=!1}=e;const B=s;let{noPfp:C=!1}=e;const l=C;let{resourcePath:c}=e;const Q=c;let{rootClasses:E=""}=e;const f=E;let{title:u=a?.name||""}=e,{subtitle:h=""}=e,{actions:w=null}=e;const N=w;let{info:U=!1}=e;const Y=d=>d.trigger();return A.$$set=d=>{"resource"in d&&t(0,a=d.resource),"pfp"in d&&t(1,r=d.pfp),"circular"in d&&t(12,s=d.circular),"noPfp"in d&&t(13,C=d.noPfp),"resourcePath"in d&&t(14,c=d.resourcePath),"rootClasses"in d&&t(15,E=d.rootClasses),"title"in d&&t(2,u=d.title),"subtitle"in d&&t(3,h=d.subtitle),"actions"in d&&t(16,w=d.actions),"info"in d&&t(4,U=d.info),"$$scope"in d&&t(18,g=d.$$scope)},A.$$.update=()=>{A.$$.dirty&131072&&i.getTagsFor(Q)},[a,r,u,h,U,o,B,l,Q,f,N,I,s,C,c,E,w,i,g,n,Y]}class Portrait extends SvelteComponent{constructor(e){super(),init(this,e,instance$b,create_fragment$c,safe_not_equal,{resource:0,pfp:1,circular:12,noPfp:13,resourcePath:14,rootClasses:15,title:2,subtitle:3,actions:16,info:4})}}var SX_ICON_DROPDOWN=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-drop-down-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-drop-down-fg" d="M8.70956 11.71L11.2996 14.3C11.6896 14.69 12.3196 14.69 12.7096 14.3L15.2996 11.71C15.9296 11.08 15.4796 10 14.5896 10H9.40956C8.51956 10 8.07956 11.08 8.70956 11.71Z" />
</svg>
`;function isOutOfViewport(A,e){const t=A.getBoundingClientRect(),i=e.getBoundingClientRect(),n={};return n.top=t.top<0,n.left=t.left<0,n.bottom=t.bottom+i.height>(window.innerHeight||document.documentElement.clientHeight),n.right=t.right>(window.innerWidth||document.documentElement.clientWidth),n.any=n.top||n.left||n.bottom||n.right,n}var Item_svelte_svelte_type_style_lang="";function create_fragment$b(A){let e,t=A[0](A[1],A[2])+"",i;return{c(){e=element("div"),attr(e,"class",i="item "+A[3]+" svelte-3e0qet")},m(n,g){insert(n,e,g),e.innerHTML=t},p(n,[g]){g&7&&t!==(t=n[0](n[1],n[2])+"")&&(e.innerHTML=t),g&8&&i!==(i="item "+n[3]+" svelte-3e0qet")&&attr(e,"class",i)},i:noop$1,o:noop$1,d(n){n&&detach(e)}}}function instance$a(A,e,t){let{isActive:i=!1}=e,{isFirst:n=!1}=e,{isHover:g=!1}=e,{isSelectable:I=!1}=e,{getOptionLabel:o=void 0}=e,{item:a=void 0}=e,{filterText:r=""}=e,s="";return A.$$set=B=>{"isActive"in B&&t(4,i=B.isActive),"isFirst"in B&&t(5,n=B.isFirst),"isHover"in B&&t(6,g=B.isHover),"isSelectable"in B&&t(7,I=B.isSelectable),"getOptionLabel"in B&&t(0,o=B.getOptionLabel),"item"in B&&t(1,a=B.item),"filterText"in B&&t(2,r=B.filterText)},A.$$.update=()=>{if(A.$$.dirty&242){const B=[];i&&B.push("active"),n&&B.push("first"),g&&B.push("hover"),a.isGroupHeader&&B.push("groupHeader"),a.isGroupItem&&B.push("groupItem"),I||B.push("notSelectable"),t(3,s=B.join(" "))}},[o,a,r,s,i,n,g,I]}class Item extends SvelteComponent{constructor(e){super(),init(this,e,instance$a,create_fragment$b,safe_not_equal,{isActive:4,isFirst:5,isHover:6,isSelectable:7,getOptionLabel:0,item:1,filterText:2})}}var List_svelte_svelte_type_style_lang="";function get_each_context$4(A,e,t){const i=A.slice();return i[41]=e[t],i[42]=t,i}function create_else_block$2(A){let e,t,i=A[1],n=[];for(let o=0;o<i.length;o+=1)n[o]=create_each_block$4(get_each_context$4(A,i,o));const g=o=>transition_out(n[o],1,1,()=>{n[o]=null});let I=null;return i.length||(I=create_else_block_2(A)),{c(){for(let o=0;o<n.length;o+=1)n[o].c();e=empty(),I&&I.c()},m(o,a){for(let r=0;r<n.length;r+=1)n[r].m(o,a);insert(o,e,a),I&&I.m(o,a),t=!0},p(o,a){if(a[0]&114390){i=o[1];let r;for(r=0;r<i.length;r+=1){const s=get_each_context$4(o,i,r);n[r]?(n[r].p(s,a),transition_in(n[r],1)):(n[r]=create_each_block$4(s),n[r].c(),transition_in(n[r],1),n[r].m(e.parentNode,e))}for(group_outros(),r=i.length;r<n.length;r+=1)g(r);check_outros(),!i.length&&I?I.p(o,a):i.length?I&&(I.d(1),I=null):(I=create_else_block_2(o),I.c(),I.m(e.parentNode,e))}},i(o){if(!t){for(let a=0;a<i.length;a+=1)transition_in(n[a]);t=!0}},o(o){n=n.filter(Boolean);for(let a=0;a<n.length;a+=1)transition_out(n[a]);t=!1},d(o){destroy_each(n,o),o&&detach(e),I&&I.d(o)}}}function create_if_block$6(A){let e,t,i;var n=A[3];function g(I){return{props:{items:I[1],itemHeight:I[8],$$slots:{default:[create_default_slot$1,({item:o,i:a})=>({41:o,42:a}),({item:o,i:a})=>[0,(o?1024:0)|(a?2048:0)]]},$$scope:{ctx:I}}}}return n&&(e=new n(g(A))),{c(){e&&create_component(e.$$.fragment),t=empty()},m(I,o){e&&mount_component(e,I,o),insert(I,t,o),i=!0},p(I,o){const a={};if(o[0]&2&&(a.items=I[1]),o[0]&256&&(a.itemHeight=I[8]),o[0]&9814|o[1]&11264&&(a.$$scope={dirty:o,ctx:I}),n!==(n=I[3])){if(e){group_outros();const r=e;transition_out(r.$$.fragment,1,0,()=>{destroy_component(r,1)}),check_outros()}n?(e=new n(g(I)),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,t.parentNode,t)):e=null}else n&&e.$set(a)},i(I){i||(e&&transition_in(e.$$.fragment,I),i=!0)},o(I){e&&transition_out(e.$$.fragment,I),i=!1},d(I){I&&detach(t),e&&destroy_component(e,I)}}}function create_else_block_2(A){let e,t=!A[11]&&create_if_block_2$3(A);return{c(){t&&t.c(),e=empty()},m(i,n){t&&t.m(i,n),insert(i,e,n)},p(i,n){i[11]?t&&(t.d(1),t=null):t?t.p(i,n):(t=create_if_block_2$3(i),t.c(),t.m(e.parentNode,e))},d(i){t&&t.d(i),i&&detach(e)}}}function create_if_block_2$3(A){let e,t;return{c(){e=element("div"),t=text(A[12]),attr(e,"class","empty svelte-1uyqfml")},m(i,n){insert(i,e,n),append(e,t)},p(i,n){n[0]&4096&&set_data(t,i[12])},d(i){i&&detach(e)}}}function create_else_block_1(A){let e,t,i,n,g,I;var o=A[4];function a(C){return{props:{item:C[41],filterText:C[13],getOptionLabel:C[6],isFirst:isItemFirst(C[42]),isActive:isItemActive(C[41],C[9],C[10]),isHover:isItemHover(C[2],C[41],C[42],C[1]),isSelectable:isItemSelectable(C[41])}}}o&&(t=new o(a(A)));function r(){return A[29](A[42])}function s(){return A[30](A[42])}function B(...C){return A[31](A[41],A[42],...C)}return{c(){e=element("div"),t&&create_component(t.$$.fragment),i=space(),attr(e,"class","listItem"),attr(e,"tabindex","-1")},m(C,l){insert(C,e,l),t&&mount_component(t,e,null),append(e,i),n=!0,g||(I=[listen(e,"mouseover",r),listen(e,"focus",s),listen(e,"click",B)],g=!0)},p(C,l){A=C;const c={};if(l[0]&2&&(c.item=A[41]),l[0]&8192&&(c.filterText=A[13]),l[0]&64&&(c.getOptionLabel=A[6]),l[0]&1538&&(c.isActive=isItemActive(A[41],A[9],A[10])),l[0]&6&&(c.isHover=isItemHover(A[2],A[41],A[42],A[1])),l[0]&2&&(c.isSelectable=isItemSelectable(A[41])),o!==(o=A[4])){if(t){group_outros();const Q=t;transition_out(Q.$$.fragment,1,0,()=>{destroy_component(Q,1)}),check_outros()}o?(t=new o(a(A)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,i)):t=null}else o&&t.$set(c)},i(C){n||(t&&transition_in(t.$$.fragment,C),n=!0)},o(C){t&&transition_out(t.$$.fragment,C),n=!1},d(C){C&&detach(e),t&&destroy_component(t),g=!1,run_all(I)}}}function create_if_block_1$3(A){let e,t=A[7](A[41])+"",i;return{c(){e=element("div"),i=text(t),attr(e,"class","listGroupTitle svelte-1uyqfml")},m(n,g){insert(n,e,g),append(e,i)},p(n,g){g[0]&130&&t!==(t=n[7](n[41])+"")&&set_data(i,t)},i:noop$1,o:noop$1,d(n){n&&detach(e)}}}function create_each_block$4(A){let e,t,i,n;const g=[create_if_block_1$3,create_else_block_1],I=[];function o(a,r){return a[41].isGroupHeader&&!a[41].isSelectable?0:1}return e=o(A),t=I[e]=g[e](A),{c(){t.c(),i=empty()},m(a,r){I[e].m(a,r),insert(a,i,r),n=!0},p(a,r){let s=e;e=o(a),e===s?I[e].p(a,r):(group_outros(),transition_out(I[s],1,1,()=>{I[s]=null}),check_outros(),t=I[e],t?t.p(a,r):(t=I[e]=g[e](a),t.c()),transition_in(t,1),t.m(i.parentNode,i))},i(a){n||(transition_in(t),n=!0)},o(a){transition_out(t),n=!1},d(a){I[e].d(a),a&&detach(i)}}}function create_default_slot$1(A){let e,t,i,n,g;var I=A[4];function o(B){return{props:{item:B[41],filterText:B[13],getOptionLabel:B[6],isFirst:isItemFirst(B[42]),isActive:isItemActive(B[41],B[9],B[10]),isHover:isItemHover(B[2],B[41],B[42],B[1]),isSelectable:isItemSelectable(B[41])}}}I&&(t=new I(o(A)));function a(){return A[26](A[42])}function r(){return A[27](A[42])}function s(...B){return A[28](A[41],A[42],...B)}return{c(){e=element("div"),t&&create_component(t.$$.fragment),attr(e,"class","listItem")},m(B,C){insert(B,e,C),t&&mount_component(t,e,null),i=!0,n||(g=[listen(e,"mouseover",a),listen(e,"focus",r),listen(e,"click",s)],n=!0)},p(B,C){A=B;const l={};if(C[1]&1024&&(l.item=A[41]),C[0]&8192&&(l.filterText=A[13]),C[0]&64&&(l.getOptionLabel=A[6]),C[1]&2048&&(l.isFirst=isItemFirst(A[42])),C[0]&1536|C[1]&1024&&(l.isActive=isItemActive(A[41],A[9],A[10])),C[0]&6|C[1]&3072&&(l.isHover=isItemHover(A[2],A[41],A[42],A[1])),C[1]&1024&&(l.isSelectable=isItemSelectable(A[41])),I!==(I=A[4])){if(t){group_outros();const c=t;transition_out(c.$$.fragment,1,0,()=>{destroy_component(c,1)}),check_outros()}I?(t=new I(o(A)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,null)):t=null}else I&&t.$set(l)},i(B){i||(t&&transition_in(t.$$.fragment,B),i=!0)},o(B){t&&transition_out(t.$$.fragment,B),i=!1},d(B){B&&detach(e),t&&destroy_component(t),n=!1,run_all(g)}}}function create_fragment$a(A){let e,t,i,n,g,I;const o=[create_if_block$6,create_else_block$2],a=[];function r(s,B){return s[5]?0:1}return t=r(A),i=a[t]=o[t](A),{c(){e=element("div"),i.c(),attr(e,"class","listContainer svelte-1uyqfml"),attr(e,"style",A[14]),toggle_class(e,"virtualList",A[5])},m(s,B){insert(s,e,B),a[t].m(e,null),A[32](e),n=!0,g||(I=[listen(window,"keydown",A[17]),listen(window,"resize",A[18])],g=!0)},p(s,B){let C=t;t=r(s),t===C?a[t].p(s,B):(group_outros(),transition_out(a[C],1,1,()=>{a[C]=null}),check_outros(),i=a[t],i?i.p(s,B):(i=a[t]=o[t](s),i.c()),transition_in(i,1),i.m(e,null)),(!n||B[0]&16384)&&attr(e,"style",s[14]),B[0]&32&&toggle_class(e,"virtualList",s[5])},i(s){n||(transition_in(i),n=!0)},o(s){transition_out(i),n=!1},d(s){s&&detach(e),a[t].d(),A[32](null),g=!1,run_all(I)}}}function isItemActive(A,e,t){return e&&e[t]===A[t]}function isItemFirst(A){return A===0}function isItemHover(A,e,t,i){return isItemSelectable(e)&&(A===t||i.length===1)}function isItemSelectable(A){return A.isGroupHeader&&A.isSelectable||A.selectable||!A.hasOwnProperty("selectable")}function instance$9(A,e,t){const i=createEventDispatcher();let{container:n=void 0}=e,{VirtualList:g=null}=e,{Item:I=Item}=e,{isVirtualList:o=!1}=e,{items:a=[]}=e,{labelIdentifier:r="label"}=e,{getOptionLabel:s=(v,z)=>{if(v)return v.isCreator?`Create "${z}"`:v[r]}}=e,{getGroupHeaderLabel:B=null}=e,{itemHeight:C=40}=e,{hoverItemIndex:l=0}=e,{value:c=void 0}=e,{optionIdentifier:Q="value"}=e,{hideEmptyState:E=!1}=e,{noOptionsMessage:f="No options"}=e,{isMulti:u=!1}=e,{activeItemIndex:h=0}=e,{filterText:w=""}=e,{parent:N=null}=e,{listPlacement:U=null}=e,{listAutoWidth:Y=null}=e,{listOffset:d=5}=e,y=0,_=!1,R;onMount(()=>{if(a.length>0&&!u&&c){const v=a.findIndex(z=>z[Q]===c[Q]);v&&t(2,l=v)}M("active"),n.addEventListener("scroll",()=>{clearTimeout(y),y=setTimeout(()=>{_=!1},100)},!1)}),beforeUpdate(()=>{a||t(1,a=[]),a!==R&&a.length>0&&t(2,l=0),R=a});function m(v){v.isCreator||i("itemSelected",v)}function S(v){_||t(2,l=v)}function F(v){const{item:z,i:gA,event:oA}=v;if(oA.stopPropagation(),c&&!u&&c[Q]===z[Q])return D();z.isCreator?i("itemCreated",w):isItemSelectable(z)&&(t(19,h=gA),t(2,l=gA),m(z))}function D(){i("closeList")}async function k(v){if(o)return;let z=!0;for(;z;)v>0&&l===a.length-1?t(2,l=0):v<0&&l===0?t(2,l=a.length-1):t(2,l=l+v),z=!isItemSelectable(a[l]);await tick(),M("hover")}function G(v){switch(v.key){case"Escape":v.preventDefault(),D();break;case"ArrowDown":v.preventDefault(),a.length&&k(1);break;case"ArrowUp":v.preventDefault(),a.length&&k(-1);break;case"Enter":if(v.preventDefault(),a.length===0)break;const z=a[l];if(c&&!u&&c[Q]===z[Q]){D();break}z.isCreator?i("itemCreated",w):(t(19,h=l),m(a[l]));break;case"Tab":if(v.preventDefault(),a.length===0||c&&c[Q]===a[l][Q])return D();t(19,h=l),m(a[l]);break}}function M(v){if(o||!n)return;let z;const gA=n.querySelector(`.listItem .${v}`);gA&&(z=n.getBoundingClientRect().bottom-gA.getBoundingClientRect().bottom),t(0,n.scrollTop-=z,n)}let H;function J(){const{height:v,width:z}=N.getBoundingClientRect();t(14,H=""),t(14,H+=`min-width:${z}px;width:${Y?"auto":"100%"};`),U==="top"||U==="auto"&&isOutOfViewport(N,n).bottom?t(14,H+=`bottom:${v+d}px;`):t(14,H+=`top:${v+d}px;`)}const L=v=>S(v),O=v=>S(v),q=(v,z,gA)=>F({item:v,i:z,event:gA}),Z=v=>S(v),T=v=>S(v),X=(v,z,gA)=>F({item:v,i:z,event:gA});function tA(v){binding_callbacks[v?"unshift":"push"](()=>{n=v,t(0,n)})}return A.$$set=v=>{"container"in v&&t(0,n=v.container),"VirtualList"in v&&t(3,g=v.VirtualList),"Item"in v&&t(4,I=v.Item),"isVirtualList"in v&&t(5,o=v.isVirtualList),"items"in v&&t(1,a=v.items),"labelIdentifier"in v&&t(20,r=v.labelIdentifier),"getOptionLabel"in v&&t(6,s=v.getOptionLabel),"getGroupHeaderLabel"in v&&t(7,B=v.getGroupHeaderLabel),"itemHeight"in v&&t(8,C=v.itemHeight),"hoverItemIndex"in v&&t(2,l=v.hoverItemIndex),"value"in v&&t(9,c=v.value),"optionIdentifier"in v&&t(10,Q=v.optionIdentifier),"hideEmptyState"in v&&t(11,E=v.hideEmptyState),"noOptionsMessage"in v&&t(12,f=v.noOptionsMessage),"isMulti"in v&&t(21,u=v.isMulti),"activeItemIndex"in v&&t(19,h=v.activeItemIndex),"filterText"in v&&t(13,w=v.filterText),"parent"in v&&t(22,N=v.parent),"listPlacement"in v&&t(23,U=v.listPlacement),"listAutoWidth"in v&&t(24,Y=v.listAutoWidth),"listOffset"in v&&t(25,d=v.listOffset)},A.$$.update=()=>{A.$$.dirty[0]&4194305&&N&&n&&J()},[n,a,l,g,I,o,s,B,C,c,Q,E,f,w,H,S,F,G,J,h,r,u,N,U,Y,d,L,O,q,Z,T,X,tA]}class List extends SvelteComponent{constructor(e){super(),init(this,e,instance$9,create_fragment$a,safe_not_equal,{container:0,VirtualList:3,Item:4,isVirtualList:5,items:1,labelIdentifier:20,getOptionLabel:6,getGroupHeaderLabel:7,itemHeight:8,hoverItemIndex:2,value:9,optionIdentifier:10,hideEmptyState:11,noOptionsMessage:12,isMulti:21,activeItemIndex:19,filterText:13,parent:22,listPlacement:23,listAutoWidth:24,listOffset:25},null,[-1,-1])}}var Selection_svelte_svelte_type_style_lang="";function create_fragment$9(A){let e,t=A[0](A[1])+"";return{c(){e=element("div"),attr(e,"class","selection svelte-pu1q1n")},m(i,n){insert(i,e,n),e.innerHTML=t},p(i,[n]){n&3&&t!==(t=i[0](i[1])+"")&&(e.innerHTML=t)},i:noop$1,o:noop$1,d(i){i&&detach(e)}}}function instance$8(A,e,t){let{getSelectionLabel:i=void 0}=e,{item:n=void 0}=e;return A.$$set=g=>{"getSelectionLabel"in g&&t(0,i=g.getSelectionLabel),"item"in g&&t(1,n=g.item)},[i,n]}class Selection extends SvelteComponent{constructor(e){super(),init(this,e,instance$8,create_fragment$9,safe_not_equal,{getSelectionLabel:0,item:1})}}var MultiSelection_svelte_svelte_type_style_lang="";function get_each_context$3(A,e,t){const i=A.slice();return i[9]=e[t],i[11]=t,i}function create_if_block$5(A){let e,t,i;function n(...g){return A[6](A[11],...g)}return{c(){e=element("div"),e.innerHTML='<svg width="100%" height="100%" viewBox="-2 -2 50 50" focusable="false" aria-hidden="true" role="presentation" class="svelte-liu9pa"><path d="M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z"></path></svg>',attr(e,"class","multiSelectItem_clear svelte-liu9pa")},m(g,I){insert(g,e,I),t||(i=listen(e,"click",n),t=!0)},p(g,I){A=g},d(g){g&&detach(e),t=!1,i()}}}function create_each_block$3(A){let e,t,i=A[4](A[9])+"",n,g,I,o,a,r=!A[2]&&!A[3]&&create_if_block$5(A);function s(...B){return A[7](A[11],...B)}return{c(){e=element("div"),t=element("div"),n=space(),r&&r.c(),g=space(),attr(t,"class","multiSelectItem_label svelte-liu9pa"),attr(e,"class",I="multiSelectItem "+(A[1]===A[11]?"active":"")+" "+(A[2]?"disabled":"")+" svelte-liu9pa")},m(B,C){insert(B,e,C),append(e,t),t.innerHTML=i,append(e,n),r&&r.m(e,null),append(e,g),o||(a=listen(e,"click",s),o=!0)},p(B,C){A=B,C&17&&i!==(i=A[4](A[9])+"")&&(t.innerHTML=i),!A[2]&&!A[3]?r?r.p(A,C):(r=create_if_block$5(A),r.c(),r.m(e,g)):r&&(r.d(1),r=null),C&6&&I!==(I="multiSelectItem "+(A[1]===A[11]?"active":"")+" "+(A[2]?"disabled":"")+" svelte-liu9pa")&&attr(e,"class",I)},d(B){B&&detach(e),r&&r.d(),o=!1,a()}}}function create_fragment$8(A){let e,t=A[0],i=[];for(let n=0;n<t.length;n+=1)i[n]=create_each_block$3(get_each_context$3(A,t,n));return{c(){for(let n=0;n<i.length;n+=1)i[n].c();e=empty()},m(n,g){for(let I=0;I<i.length;I+=1)i[I].m(n,g);insert(n,e,g)},p(n,[g]){if(g&63){t=n[0];let I;for(I=0;I<t.length;I+=1){const o=get_each_context$3(n,t,I);i[I]?i[I].p(o,g):(i[I]=create_each_block$3(o),i[I].c(),i[I].m(e.parentNode,e))}for(;I<i.length;I+=1)i[I].d(1);i.length=t.length}},i:noop$1,o:noop$1,d(n){destroy_each(i,n),n&&detach(e)}}}function instance$7(A,e,t){const i=createEventDispatcher();let{value:n=[]}=e,{activeValue:g=void 0}=e,{isDisabled:I=!1}=e,{multiFullItemClearable:o=!1}=e,{getSelectionLabel:a=void 0}=e;function r(C,l){l.stopPropagation(),i("multiItemClear",{i:C})}const s=(C,l)=>r(C,l),B=(C,l)=>o?r(C,l):{};return A.$$set=C=>{"value"in C&&t(0,n=C.value),"activeValue"in C&&t(1,g=C.activeValue),"isDisabled"in C&&t(2,I=C.isDisabled),"multiFullItemClearable"in C&&t(3,o=C.multiFullItemClearable),"getSelectionLabel"in C&&t(4,a=C.getSelectionLabel)},[n,g,I,o,a,r,s,B]}class MultiSelection extends SvelteComponent{constructor(e){super(),init(this,e,instance$7,create_fragment$8,safe_not_equal,{value:0,activeValue:1,isDisabled:2,multiFullItemClearable:3,getSelectionLabel:4})}}var VirtualList_svelte_svelte_type_style_lang="";function get_each_context$2(A,e,t){const i=A.slice();return i[23]=e[t],i}const get_default_slot_changes=A=>({item:A&32,i:A&32,hoverItemIndex:A&2}),get_default_slot_context=A=>({item:A[23].data,i:A[23].index,hoverItemIndex:A[1]});function fallback_block(A){let e;return{c(){e=text("Missing template")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_each_block$2(A,e){let t,i,n;const g=e[15].default,I=create_slot(g,e,e[14],get_default_slot_context),o=I||fallback_block();return{key:A,first:null,c(){t=element("svelte-virtual-list-row"),o&&o.c(),i=space(),set_custom_element_data(t,"class","svelte-g2cagw"),this.first=t},m(a,r){insert(a,t,r),o&&o.m(t,null),append(t,i),n=!0},p(a,r){e=a,I&&I.p&&(!n||r&16418)&&update_slot_base(I,g,e,e[14],n?get_slot_changes(g,e[14],r,get_default_slot_changes):get_all_dirty_from_scope(e[14]),get_default_slot_context)},i(a){n||(transition_in(o,a),n=!0)},o(a){transition_out(o,a),n=!1},d(a){a&&detach(t),o&&o.d(a)}}}function create_fragment$7(A){let e,t,i=[],n=new Map,g,I,o,a,r=A[5];const s=B=>B[23].index;for(let B=0;B<r.length;B+=1){let C=get_each_context$2(A,r,B),l=s(C);n.set(l,i[B]=create_each_block$2(l,C))}return{c(){e=element("svelte-virtual-list-viewport"),t=element("svelte-virtual-list-contents");for(let B=0;B<i.length;B+=1)i[B].c();set_style(t,"padding-top",A[6]+"px"),set_style(t,"padding-bottom",A[7]+"px"),set_custom_element_data(t,"class","svelte-g2cagw"),set_style(e,"height",A[0]),set_custom_element_data(e,"class","svelte-g2cagw"),add_render_callback(()=>A[18].call(e))},m(B,C){insert(B,e,C),append(e,t);for(let l=0;l<i.length;l+=1)i[l].m(t,null);A[16](t),A[17](e),g=add_resize_listener(e,A[18].bind(e)),I=!0,o||(a=listen(e,"scroll",A[8]),o=!0)},p(B,[C]){C&16418&&(r=B[5],group_outros(),i=update_keyed_each(i,C,s,1,B,r,n,t,outro_and_destroy_block,create_each_block$2,null,get_each_context$2),check_outros()),(!I||C&64)&&set_style(t,"padding-top",B[6]+"px"),(!I||C&128)&&set_style(t,"padding-bottom",B[7]+"px"),(!I||C&1)&&set_style(e,"height",B[0])},i(B){if(!I){for(let C=0;C<r.length;C+=1)transition_in(i[C]);I=!0}},o(B){for(let C=0;C<i.length;C+=1)transition_out(i[C]);I=!1},d(B){B&&detach(e);for(let C=0;C<i.length;C+=1)i[C].d();A[16](null),A[17](null),g(),o=!1,a()}}}function instance$6(A,e,t){let{$$slots:i={},$$scope:n}=e,{items:g=void 0}=e,{height:I="100%"}=e,{itemHeight:o=40}=e,{hoverItemIndex:a=0}=e,{start:r=0}=e,{end:s=0}=e,B=[],C,l,c,Q=0,E,f,u=0,h=0,w;async function N(_,R,m){const{scrollTop:S}=l;await tick();let F=u-S,D=r;for(;F<R&&D<_.length;){let G=C[D-r];G||(t(10,s=D+1),await tick(),G=C[D-r]),F+=B[D]=m||G.offsetHeight,D+=1}t(10,s=D);const k=_.length-s;w=(u+F)/s,t(7,h=k*w),B.length=_.length,l&&t(3,l.scrollTop=0,l)}async function U(){const{scrollTop:_}=l,R=r;for(let D=0;D<C.length;D+=1)B[r+D]=o||C[D].offsetHeight;let m=0,S=0;for(;m<g.length;){const D=B[m]||w;if(S+D>_){t(9,r=m),t(6,u=S);break}S+=D,m+=1}for(;m<g.length&&(S+=B[m]||w,m+=1,!(S>_+Q)););t(10,s=m);const F=g.length-s;for(w=S/s;m<g.length;)B[m++]=w;if(t(7,h=F*w),r<R){await tick();let D=0,k=0;for(let M=r;M<R;M+=1)C[M-r]&&(D+=B[M],k+=o||C[M-r].offsetHeight);const G=k-D;l.scrollTo(0,_+G)}}onMount(()=>{C=c.getElementsByTagName("svelte-virtual-list-row"),t(13,f=!0)});function Y(_){binding_callbacks[_?"unshift":"push"](()=>{c=_,t(4,c)})}function d(_){binding_callbacks[_?"unshift":"push"](()=>{l=_,t(3,l)})}function y(){Q=this.offsetHeight,t(2,Q)}return A.$$set=_=>{"items"in _&&t(11,g=_.items),"height"in _&&t(0,I=_.height),"itemHeight"in _&&t(12,o=_.itemHeight),"hoverItemIndex"in _&&t(1,a=_.hoverItemIndex),"start"in _&&t(9,r=_.start),"end"in _&&t(10,s=_.end),"$$scope"in _&&t(14,n=_.$$scope)},A.$$.update=()=>{A.$$.dirty&3584&&t(5,E=g.slice(r,s).map((_,R)=>({index:R+r,data:_}))),A.$$.dirty&14340&&f&&N(g,Q,o)},[I,a,Q,l,c,E,u,h,U,r,s,g,o,f,n,i,Y,d,y]}class VirtualList extends SvelteComponent{constructor(e){super(),init(this,e,instance$6,create_fragment$7,safe_not_equal,{items:11,height:0,itemHeight:12,hoverItemIndex:1,start:9,end:10})}}function create_fragment$6(A){let e,t;return{c(){e=svg_element("svg"),t=svg_element("path"),attr(t,"fill","currentColor"),attr(t,"d",`M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124
    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z`),attr(e,"width","100%"),attr(e,"height","100%"),attr(e,"viewBox","-2 -2 50 50"),attr(e,"focusable","false"),attr(e,"aria-hidden","true"),attr(e,"role","presentation")},m(i,n){insert(i,e,n),append(e,t)},p:noop$1,i:noop$1,o:noop$1,d(i){i&&detach(e)}}}class ClearIcon extends SvelteComponent{constructor(e){super(),init(this,e,null,create_fragment$6,safe_not_equal,{})}}function debounce(A,e,t){let i;return function(){let g=this,I=arguments,o=function(){i=null,t||A.apply(g,I)},a=t&&!i;clearTimeout(i),i=setTimeout(o,e),a&&A.apply(g,I)}}var Select_svelte_svelte_type_style_lang="";function get_each_context$1(A,e,t){const i=A.slice();return i[103]=e[t],i}function create_if_block_10(A){let e,t,i,n,g;return{c(){e=element("span"),t=text(A[33]),i=space(),n=element("span"),g=text(A[32]),attr(e,"id","aria-selection"),attr(n,"id","aria-context")},m(I,o){insert(I,e,o),append(e,t),insert(I,i,o),insert(I,n,o),append(n,g)},p(I,o){o[1]&4&&set_data(t,I[33]),o[1]&2&&set_data(g,I[32])},d(I){I&&detach(e),I&&detach(i),I&&detach(n)}}}function create_if_block_9(A){let e,t,i;const n=[A[18]];var g=A[17];function I(o){let a={};for(let r=0;r<n.length;r+=1)a=assign(a,n[r]);return{props:a}}return g&&(e=new g(I())),{c(){e&&create_component(e.$$.fragment),t=empty()},m(o,a){e&&mount_component(e,o,a),insert(o,t,a),i=!0},p(o,a){const r=a[0]&262144?get_spread_update(n,[get_spread_object(o[18])]):{};if(g!==(g=o[17])){if(e){group_outros();const s=e;transition_out(s.$$.fragment,1,0,()=>{destroy_component(s,1)}),check_outros()}g?(e=new g(I()),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,t.parentNode,t)):e=null}else g&&e.$set(r)},i(o){i||(e&&transition_in(e.$$.fragment,o),i=!0)},o(o){e&&transition_out(e.$$.fragment,o),i=!1},d(o){o&&detach(t),e&&destroy_component(e,o)}}}function create_if_block_8(A){let e,t,i;var n=A[26];function g(I){return{props:{value:I[2],getSelectionLabel:I[12],activeValue:I[30],isDisabled:I[9],multiFullItemClearable:I[8]}}}return n&&(e=new n(g(A)),e.$on("multiItemClear",A[38]),e.$on("focus",A[40])),{c(){e&&create_component(e.$$.fragment),t=empty()},m(I,o){e&&mount_component(e,I,o),insert(I,t,o),i=!0},p(I,o){const a={};if(o[0]&4&&(a.value=I[2]),o[0]&4096&&(a.getSelectionLabel=I[12]),o[0]&1073741824&&(a.activeValue=I[30]),o[0]&512&&(a.isDisabled=I[9]),o[0]&256&&(a.multiFullItemClearable=I[8]),n!==(n=I[26])){if(e){group_outros();const r=e;transition_out(r.$$.fragment,1,0,()=>{destroy_component(r,1)}),check_outros()}n?(e=new n(g(I)),e.$on("multiItemClear",I[38]),e.$on("focus",I[40]),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,t.parentNode,t)):e=null}else n&&e.$set(a)},i(I){i||(e&&transition_in(e.$$.fragment,I),i=!0)},o(I){e&&transition_out(e.$$.fragment,I),i=!1},d(I){I&&detach(t),e&&destroy_component(e,I)}}}function create_if_block_7(A){let e,t,i,n,g;var I=A[25];function o(a){return{props:{item:a[2],getSelectionLabel:a[12]}}}return I&&(t=new I(o(A))),{c(){e=element("div"),t&&create_component(t.$$.fragment),attr(e,"class","selectedItem svelte-17l1npl")},m(a,r){insert(a,e,r),t&&mount_component(t,e,null),i=!0,n||(g=listen(e,"focus",A[40]),n=!0)},p(a,r){const s={};if(r[0]&4&&(s.item=a[2]),r[0]&4096&&(s.getSelectionLabel=a[12]),I!==(I=a[25])){if(t){group_outros();const B=t;transition_out(B.$$.fragment,1,0,()=>{destroy_component(B,1)}),check_outros()}I?(t=new I(o(a)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,null)):t=null}else I&&t.$set(s)},i(a){i||(t&&transition_in(t.$$.fragment,a),i=!0)},o(a){t&&transition_out(t.$$.fragment,a),i=!1},d(a){a&&detach(e),t&&destroy_component(t),n=!1,g()}}}function create_if_block_6(A){let e,t,i,n,g;var I=A[23];function o(a){return{}}return I&&(t=new I(o())),{c(){e=element("div"),t&&create_component(t.$$.fragment),attr(e,"class","clearSelect svelte-17l1npl"),attr(e,"aria-hidden","true")},m(a,r){insert(a,e,r),t&&mount_component(t,e,null),i=!0,n||(g=listen(e,"click",prevent_default(A[27])),n=!0)},p(a,r){if(I!==(I=a[23])){if(t){group_outros();const s=t;transition_out(s.$$.fragment,1,0,()=>{destroy_component(s,1)}),check_outros()}I?(t=new I(o()),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,null)):t=null}},i(a){i||(t&&transition_in(t.$$.fragment,a),i=!0)},o(a){t&&transition_out(t.$$.fragment,a),i=!1},d(a){a&&detach(e),t&&destroy_component(t),n=!1,g()}}}function create_if_block_4(A){let e;function t(g,I){return g[22]?create_if_block_5:create_else_block$1}let i=t(A),n=i(A);return{c(){e=element("div"),n.c(),attr(e,"class","indicator svelte-17l1npl"),attr(e,"aria-hidden","true")},m(g,I){insert(g,e,I),n.m(e,null)},p(g,I){i===(i=t(g))&&n?n.p(g,I):(n.d(1),n=i(g),n&&(n.c(),n.m(e,null)))},d(g){g&&detach(e),n.d()}}}function create_else_block$1(A){let e,t;return{c(){e=svg_element("svg"),t=svg_element("path"),attr(t,"d",`M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747
          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0
          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502
          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0
          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z`),attr(e,"width","100%"),attr(e,"height","100%"),attr(e,"viewBox","0 0 20 20"),attr(e,"focusable","false"),attr(e,"aria-hidden","true"),attr(e,"class","svelte-17l1npl")},m(i,n){insert(i,e,n),append(e,t)},p:noop$1,d(i){i&&detach(e)}}}function create_if_block_5(A){let e,t;return{c(){e=new HtmlTag(!1),t=empty(),e.a=t},m(i,n){e.m(A[22],i,n),insert(i,t,n)},p(i,n){n[0]&4194304&&e.p(i[22])},d(i){i&&detach(t),i&&e.d()}}}function create_if_block_3(A){let e;return{c(){e=element("div"),e.innerHTML='<svg class="spinner_icon svelte-17l1npl" viewBox="25 25 50 50"><circle class="spinner_path svelte-17l1npl" cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="5" stroke-miterlimit="10"></circle></svg>',attr(e,"class","spinner svelte-17l1npl")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_if_block_2$2(A){let e,t,i,n;const g=[A[34]];function I(r){A[84](r)}var o=A[24];function a(r){let s={};for(let B=0;B<g.length;B+=1)s=assign(s,g[B]);return r[28]!==void 0&&(s.hoverItemIndex=r[28]),{props:s}}return o&&(e=new o(a(A)),binding_callbacks.push(()=>bind(e,"hoverItemIndex",I)),e.$on("itemSelected",A[43]),e.$on("itemCreated",A[44]),e.$on("closeList",A[45])),{c(){e&&create_component(e.$$.fragment),i=empty()},m(r,s){e&&mount_component(e,r,s),insert(r,i,s),n=!0},p(r,s){const B=s[1]&8?get_spread_update(g,[get_spread_object(r[34])]):{};if(!t&&s[0]&268435456&&(t=!0,B.hoverItemIndex=r[28],add_flush_callback(()=>t=!1)),o!==(o=r[24])){if(e){group_outros();const C=e;transition_out(C.$$.fragment,1,0,()=>{destroy_component(C,1)}),check_outros()}o?(e=new o(a(r)),binding_callbacks.push(()=>bind(e,"hoverItemIndex",I)),e.$on("itemSelected",r[43]),e.$on("itemCreated",r[44]),e.$on("closeList",r[45]),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,i.parentNode,i)):e=null}else o&&e.$set(B)},i(r){n||(e&&transition_in(e.$$.fragment,r),n=!0)},o(r){e&&transition_out(e.$$.fragment,r),n=!1},d(r){r&&detach(i),e&&destroy_component(e,r)}}}function create_if_block_1$2(A){let e,t,i;return{c(){e=element("input"),attr(e,"name",t=A[16].name),attr(e,"type","hidden"),e.value=i=A[2]?A[12](A[2]):null,attr(e,"class","svelte-17l1npl")},m(n,g){insert(n,e,g)},p(n,g){g[0]&65536&&t!==(t=n[16].name)&&attr(e,"name",t),g[0]&4100&&i!==(i=n[2]?n[12](n[2]):null)&&(e.value=i)},d(n){n&&detach(e)}}}function create_if_block$4(A){let e,t=A[2],i=[];for(let n=0;n<t.length;n+=1)i[n]=create_each_block$1(get_each_context$1(A,t,n));return{c(){for(let n=0;n<i.length;n+=1)i[n].c();e=empty()},m(n,g){for(let I=0;I<i.length;I+=1)i[I].m(n,g);insert(n,e,g)},p(n,g){if(g[0]&69636){t=n[2];let I;for(I=0;I<t.length;I+=1){const o=get_each_context$1(n,t,I);i[I]?i[I].p(o,g):(i[I]=create_each_block$1(o),i[I].c(),i[I].m(e.parentNode,e))}for(;I<i.length;I+=1)i[I].d(1);i.length=t.length}},d(n){destroy_each(i,n),n&&detach(e)}}}function create_each_block$1(A){let e,t,i;return{c(){e=element("input"),attr(e,"name",t=A[16].name),attr(e,"type","hidden"),e.value=i=A[103]?A[12](A[103]):null,attr(e,"class","svelte-17l1npl")},m(n,g){insert(n,e,g)},p(n,g){g[0]&65536&&t!==(t=n[16].name)&&attr(e,"name",t),g[0]&4100&&i!==(i=n[103]?n[12](n[103]):null)&&(e.value=i)},d(n){n&&detach(e)}}}function create_fragment$5(A){let e,t,i,n,g,I,o,a,r,s,B,C,l,c,Q,E,f,u,h=A[1]&&create_if_block_10(A),w=A[17]&&create_if_block_9(A),N=A[35]&&create_if_block_8(A),U=[{readOnly:o=!A[13]},A[31],{placeholder:A[36]},{style:A[14]},{disabled:A[9]}],Y={};for(let D=0;D<U.length;D+=1)Y=assign(Y,U[D]);let d=!A[7]&&A[29]&&create_if_block_7(A),y=A[37]&&create_if_block_6(A),_=!A[37]&&(A[20]||A[19]&&!A[2]||!A[13]&&!A[9]&&!A[4]&&(A[29]&&!A[15]||!A[29]))&&create_if_block_4(A),R=A[4]&&create_if_block_3(),m=A[5]&&create_if_block_2$2(A),S=(!A[7]||A[7]&&!A[35])&&create_if_block_1$2(A),F=A[7]&&A[35]&&create_if_block$4(A);return{c(){e=element("div"),t=element("span"),h&&h.c(),i=space(),w&&w.c(),n=space(),N&&N.c(),g=space(),I=element("input"),a=space(),d&&d.c(),r=space(),y&&y.c(),s=space(),_&&_.c(),B=space(),R&&R.c(),C=space(),m&&m.c(),l=space(),S&&S.c(),c=space(),F&&F.c(),attr(t,"aria-live","polite"),attr(t,"aria-atomic","false"),attr(t,"aria-relevant","additions text"),attr(t,"class","a11yText svelte-17l1npl"),set_attributes(I,Y),toggle_class(I,"svelte-17l1npl",!0),attr(e,"class",Q="selectContainer "+A[21]+" svelte-17l1npl"),attr(e,"style",A[11]),toggle_class(e,"hasError",A[10]),toggle_class(e,"multiSelect",A[7]),toggle_class(e,"disabled",A[9]),toggle_class(e,"focused",A[1])},m(D,k){insert(D,e,k),append(e,t),h&&h.m(t,null),append(e,i),w&&w.m(e,null),append(e,n),N&&N.m(e,null),append(e,g),append(e,I),I.autofocus&&I.focus(),A[82](I),set_input_value(I,A[3]),append(e,a),d&&d.m(e,null),append(e,r),y&&y.m(e,null),append(e,s),_&&_.m(e,null),append(e,B),R&&R.m(e,null),append(e,C),m&&m.m(e,null),append(e,l),S&&S.m(e,null),append(e,c),F&&F.m(e,null),A[85](e),E=!0,f||(u=[listen(window,"click",A[41]),listen(window,"focusin",A[41]),listen(window,"keydown",A[39]),listen(I,"focus",A[40]),listen(I,"input",A[83]),listen(e,"click",A[42])],f=!0)},p(D,k){D[1]?h?h.p(D,k):(h=create_if_block_10(D),h.c(),h.m(t,null)):h&&(h.d(1),h=null),D[17]?w?(w.p(D,k),k[0]&131072&&transition_in(w,1)):(w=create_if_block_9(D),w.c(),transition_in(w,1),w.m(e,n)):w&&(group_outros(),transition_out(w,1,1,()=>{w=null}),check_outros()),D[35]?N?(N.p(D,k),k[1]&16&&transition_in(N,1)):(N=create_if_block_8(D),N.c(),transition_in(N,1),N.m(e,g)):N&&(group_outros(),transition_out(N,1,1,()=>{N=null}),check_outros()),set_attributes(I,Y=get_spread_update(U,[(!E||k[0]&8192&&o!==(o=!D[13]))&&{readOnly:o},k[1]&1&&D[31],(!E||k[1]&32)&&{placeholder:D[36]},(!E||k[0]&16384)&&{style:D[14]},(!E||k[0]&512)&&{disabled:D[9]}])),k[0]&8&&I.value!==D[3]&&set_input_value(I,D[3]),toggle_class(I,"svelte-17l1npl",!0),!D[7]&&D[29]?d?(d.p(D,k),k[0]&536871040&&transition_in(d,1)):(d=create_if_block_7(D),d.c(),transition_in(d,1),d.m(e,r)):d&&(group_outros(),transition_out(d,1,1,()=>{d=null}),check_outros()),D[37]?y?(y.p(D,k),k[1]&64&&transition_in(y,1)):(y=create_if_block_6(D),y.c(),transition_in(y,1),y.m(e,s)):y&&(group_outros(),transition_out(y,1,1,()=>{y=null}),check_outros()),!D[37]&&(D[20]||D[19]&&!D[2]||!D[13]&&!D[9]&&!D[4]&&(D[29]&&!D[15]||!D[29]))?_?_.p(D,k):(_=create_if_block_4(D),_.c(),_.m(e,B)):_&&(_.d(1),_=null),D[4]?R||(R=create_if_block_3(),R.c(),R.m(e,C)):R&&(R.d(1),R=null),D[5]?m?(m.p(D,k),k[0]&32&&transition_in(m,1)):(m=create_if_block_2$2(D),m.c(),transition_in(m,1),m.m(e,l)):m&&(group_outros(),transition_out(m,1,1,()=>{m=null}),check_outros()),!D[7]||D[7]&&!D[35]?S?S.p(D,k):(S=create_if_block_1$2(D),S.c(),S.m(e,c)):S&&(S.d(1),S=null),D[7]&&D[35]?F?F.p(D,k):(F=create_if_block$4(D),F.c(),F.m(e,null)):F&&(F.d(1),F=null),(!E||k[0]&2097152&&Q!==(Q="selectContainer "+D[21]+" svelte-17l1npl"))&&attr(e,"class",Q),(!E||k[0]&2048)&&attr(e,"style",D[11]),k[0]&2098176&&toggle_class(e,"hasError",D[10]),k[0]&2097280&&toggle_class(e,"multiSelect",D[7]),k[0]&2097664&&toggle_class(e,"disabled",D[9]),k[0]&2097154&&toggle_class(e,"focused",D[1])},i(D){E||(transition_in(w),transition_in(N),transition_in(d),transition_in(y),transition_in(m),E=!0)},o(D){transition_out(w),transition_out(N),transition_out(d),transition_out(y),transition_out(m),E=!1},d(D){D&&detach(e),h&&h.d(),w&&w.d(),N&&N.d(),A[82](null),d&&d.d(),y&&y.d(),_&&_.d(),R&&R.d(),m&&m.d(),S&&S.d(),F&&F.d(),A[85](null),f=!1,run_all(u)}}}function convertStringItemsToObjects(A){return A.map((e,t)=>({index:t,value:e,label:`${e}`}))}function instance$5(A,e,t){let i,n,g,I,o,a,r,s;const B=createEventDispatcher();let{id:C=null}=e,{container:l=void 0}=e,{input:c=void 0}=e,{isMulti:Q=!1}=e,{multiFullItemClearable:E=!1}=e,{isDisabled:f=!1}=e,{isCreatable:u=!1}=e,{isFocused:h=!1}=e,{value:w=null}=e,{filterText:N=""}=e,{placeholder:U="Select..."}=e,{placeholderAlwaysShow:Y=!1}=e,{items:d=null}=e,{itemFilter:y=(b,V,nA)=>`${b}`.toLowerCase().includes(V.toLowerCase())}=e,{groupBy:_=void 0}=e,{groupFilter:R=b=>b}=e,{isGroupHeaderSelectable:m=!1}=e,{getGroupHeaderLabel:S=b=>b[F]||b.id}=e,{labelIdentifier:F="label"}=e,{getOptionLabel:D=(b,V)=>b.isCreator?`Create "${V}"`:b[F]}=e,{optionIdentifier:k="value"}=e,{loadOptions:G=void 0}=e,{hasError:M=!1}=e,{containerStyles:H=""}=e,{getSelectionLabel:J=b=>b?b[F]:null}=e,{createGroupHeaderItem:L=b=>({value:b,label:b})}=e,{createItem:O=b=>({value:b,label:b})}=e;const q=()=>i;let{isSearchable:Z=!0}=e,{inputStyles:T=""}=e,{isClearable:X=!0}=e,{isWaiting:tA=!1}=e,{listPlacement:v="auto"}=e,{listOpen:z=!1}=e,{isVirtualList:gA=!1}=e,{loadOptionsInterval:oA=300}=e,{noOptionsMessage:aA="No options"}=e,{hideEmptyState:iA=!1}=e,{inputAttributes:j={}}=e,{listAutoWidth:AA=!0}=e,{itemHeight:cA=40}=e,{Icon:x=void 0}=e,{iconProps:P={}}=e,{showChevron:eA=!1}=e,{showIndicator:sA=!1}=e,{containerClasses:rA=""}=e,{indicatorSvg:BA=void 0}=e,{listOffset:EA=5}=e,{ClearIcon:DA=ClearIcon}=e,{Item:NA=Item}=e,{List:uA=List}=e,{Selection:wA=Selection}=e,{MultiSelection:MA=MultiSelection}=e,{VirtualList:kA=VirtualList}=e;function KA(b){if(b.loadOptions&&b.filterText.length>0)return;if(!b.items)return[];b.items&&b.items.length>0&&typeof b.items[0]!="object"&&(b.items=convertStringItemsToObjects(b.items));let V=b.items.filter(nA=>{let QA=y(D(nA,b.filterText),b.filterText,nA);return QA&&b.isMulti&&b.value&&Array.isArray(b.value)&&(QA=!b.value.some(SA=>SA[b.optionIdentifier]===nA[b.optionIdentifier])),QA});return b.groupBy&&(V=ZA(V)),b.isCreatable&&(V=dA(V,b.filterText)),V}function dA(b,V){if(V.length===0)return b;const nA=O(V);return b[0]&&V===b[0][F]?b:(nA.isCreator=!0,[...b,nA])}let{selectedValue:hA=null}=e,IA,yA,RA,FA,GA,mA;const PA=debounce(async()=>{t(4,tA=!0);let b=await G(N).catch(V=>{console.warn("svelte-select loadOptions error :>> ",V),B("error",{type:"loadOptions",details:V})});b&&!b.cancelled&&(b?(b&&b.length>0&&typeof b[0]!="object"&&(b=convertStringItemsToObjects(b)),t(81,i=[...b]),B("loaded",{items:i})):t(81,i=[]),u&&t(81,i=dA(i,N)),t(4,tA=!1),t(1,h=!0),t(5,z=!0))},oA);function YA(){typeof w=="string"?t(2,w={[k]:w,label:w}):Q&&Array.isArray(w)&&w.length>0&&t(2,w=w.map(b=>typeof b=="string"?{value:b,label:b}:b))}let _A;function JA(){t(31,_A=Object.assign({autocapitalize:"none",autocomplete:"off",autocorrect:"off",spellcheck:!1,tabindex:0,type:"text","aria-autocomplete":"list"},j)),C&&t(31,_A.id=C,_A),Z||t(31,_A.readonly=!0,_A)}function ZA(b){const V=[],nA={};b.forEach(SA=>{const pA=_(SA);V.includes(pA)||(V.push(pA),nA[pA]=[],pA&&nA[pA].push(Object.assign(L(pA,SA),{id:pA,isGroupHeader:!0,isSelectable:m}))),nA[pA].push(Object.assign({isGroupItem:!!pA},SA))});const QA=[];return R(V).forEach(SA=>{QA.push(...nA[SA])}),QA}function XA(){if(Q){JSON.stringify(w)!==JSON.stringify(yA)&&HA()&&B("select",w);return}(!yA||JSON.stringify(w[k])!==JSON.stringify(yA[k]))&&B("select",w)}function zA(){h||z?bA():c&&c.blur()}function vA(){w&&(Array.isArray(w)?t(2,w=[...w]):t(2,w=[w]))}function VA(){w&&t(2,w=null)}function WA(){N.length!==0&&(t(1,h=!0),t(5,z=!0),G?PA():(t(5,z=!0),Q&&t(30,IA=void 0)))}beforeUpdate(async()=>{t(77,yA=w),t(78,RA=N),t(79,FA=h),t(80,GA=Q)});function HA(){let b=!0;if(w){const V=[],nA=[];w.forEach(QA=>{V.includes(QA[k])?b=!1:(V.push(QA[k]),nA.push(QA))}),b||t(2,w=nA)}return b}function qA(b){let V=b?b[k]:w[k];return d.find(nA=>nA[k]===V)}function LA(b){!b||b.length===0||b.some(V=>typeof V!="object")||!w||(Q?w.some(V=>!V||!V[k]):!w[k])||(Array.isArray(w)?t(2,w=w.map(V=>qA(V)||V)):t(2,w=qA()||w))}function CA(b){const{detail:V}=b,nA=w[V?V.i:w.length-1];w.length===1?t(2,w=void 0):t(2,w=w.filter(QA=>QA!==nA)),B("clear",nA)}function fA(b){if(!!h)switch(b.key){case"ArrowDown":b.preventDefault(),t(5,z=!0),t(30,IA=void 0);break;case"ArrowUp":b.preventDefault(),t(5,z=!0),t(30,IA=void 0);break;case"Tab":z||t(1,h=!1);break;case"Backspace":if(!Q||N.length>0)return;if(Q&&w&&w.length>0){if(CA(IA!==void 0?IA:w.length-1),IA===0||IA===void 0)break;t(30,IA=w.length>IA?IA-1:void 0)}break;case"ArrowLeft":if(!Q||N.length>0)return;IA===void 0?t(30,IA=w.length-1):w.length>IA&&IA!==0&&t(30,IA-=1);break;case"ArrowRight":if(!Q||N.length>0||IA===void 0)return;IA===w.length-1?t(30,IA=void 0):IA<w.length-1&&t(30,IA+=1);break}}function bA(){t(1,h=!0),c&&c.focus()}function jA(b){if(!l)return;const V=b.path&&b.path.length>0?b.path[0]:b.target;l.contains(V)||l.contains(b.relatedTarget)||(t(1,h=!1),t(5,z=!1),t(30,IA=void 0),c&&c.blur())}function ge(){f||(t(1,h=!0),t(5,z=!z))}function Ie(){t(2,w=void 0),t(5,z=!1),B("clear",w),bA()}onMount(()=>{h&&c&&c.focus()});function oe(b){const{detail:V}=b;if(V){t(3,N="");const nA=Object.assign({},V);(!nA.isGroupHeader||nA.isSelectable)&&(Q?t(2,w=w?w.concat([nA]):[nA]):t(2,w=nA),t(2,w),setTimeout(()=>{t(5,z=!1),t(30,IA=void 0)}))}}function re(b){const{detail:V}=b;Q?(t(2,w=w||[]),t(2,w=[...w,O(V)])):t(2,w=O(V)),B("itemCreated",V),t(3,N=""),t(5,z=!1),t(30,IA=void 0)}function ae(){t(3,N=""),t(5,z=!1)}let{ariaValues:$A=b=>`Option ${b}, selected.`}=e,{ariaListOpen:Ae=(b,V)=>`You are currently focused on option ${b}. There are ${V} results available.`}=e,{ariaFocused:ee=()=>"Select is focused, type to refine list, press down to open the menu."}=e;function se(){let b;return Q&&w.length>0?b=w.map(V=>J(V)).join(", "):b=J(w),$A(b)}function Ce(){if(!h||!i||i.length===0)return"";let b=i[mA];if(z&&b){let V=J(b),nA=i?i.length:0;return Ae(V,nA)}else return ee()}function Be(b){binding_callbacks[b?"unshift":"push"](()=>{c=b,t(6,c)})}function ce(){N=this.value,t(3,N)}function Ee(b){mA=b,t(28,mA)}function Qe(b){binding_callbacks[b?"unshift":"push"](()=>{l=b,t(0,l)})}return A.$$set=b=>{"id"in b&&t(46,C=b.id),"container"in b&&t(0,l=b.container),"input"in b&&t(6,c=b.input),"isMulti"in b&&t(7,Q=b.isMulti),"multiFullItemClearable"in b&&t(8,E=b.multiFullItemClearable),"isDisabled"in b&&t(9,f=b.isDisabled),"isCreatable"in b&&t(47,u=b.isCreatable),"isFocused"in b&&t(1,h=b.isFocused),"value"in b&&t(2,w=b.value),"filterText"in b&&t(3,N=b.filterText),"placeholder"in b&&t(48,U=b.placeholder),"placeholderAlwaysShow"in b&&t(49,Y=b.placeholderAlwaysShow),"items"in b&&t(50,d=b.items),"itemFilter"in b&&t(51,y=b.itemFilter),"groupBy"in b&&t(52,_=b.groupBy),"groupFilter"in b&&t(53,R=b.groupFilter),"isGroupHeaderSelectable"in b&&t(54,m=b.isGroupHeaderSelectable),"getGroupHeaderLabel"in b&&t(55,S=b.getGroupHeaderLabel),"labelIdentifier"in b&&t(56,F=b.labelIdentifier),"getOptionLabel"in b&&t(57,D=b.getOptionLabel),"optionIdentifier"in b&&t(58,k=b.optionIdentifier),"loadOptions"in b&&t(59,G=b.loadOptions),"hasError"in b&&t(10,M=b.hasError),"containerStyles"in b&&t(11,H=b.containerStyles),"getSelectionLabel"in b&&t(12,J=b.getSelectionLabel),"createGroupHeaderItem"in b&&t(60,L=b.createGroupHeaderItem),"createItem"in b&&t(61,O=b.createItem),"isSearchable"in b&&t(13,Z=b.isSearchable),"inputStyles"in b&&t(14,T=b.inputStyles),"isClearable"in b&&t(15,X=b.isClearable),"isWaiting"in b&&t(4,tA=b.isWaiting),"listPlacement"in b&&t(63,v=b.listPlacement),"listOpen"in b&&t(5,z=b.listOpen),"isVirtualList"in b&&t(64,gA=b.isVirtualList),"loadOptionsInterval"in b&&t(65,oA=b.loadOptionsInterval),"noOptionsMessage"in b&&t(66,aA=b.noOptionsMessage),"hideEmptyState"in b&&t(67,iA=b.hideEmptyState),"inputAttributes"in b&&t(16,j=b.inputAttributes),"listAutoWidth"in b&&t(68,AA=b.listAutoWidth),"itemHeight"in b&&t(69,cA=b.itemHeight),"Icon"in b&&t(17,x=b.Icon),"iconProps"in b&&t(18,P=b.iconProps),"showChevron"in b&&t(19,eA=b.showChevron),"showIndicator"in b&&t(20,sA=b.showIndicator),"containerClasses"in b&&t(21,rA=b.containerClasses),"indicatorSvg"in b&&t(22,BA=b.indicatorSvg),"listOffset"in b&&t(70,EA=b.listOffset),"ClearIcon"in b&&t(23,DA=b.ClearIcon),"Item"in b&&t(71,NA=b.Item),"List"in b&&t(24,uA=b.List),"Selection"in b&&t(25,wA=b.Selection),"MultiSelection"in b&&t(26,MA=b.MultiSelection),"VirtualList"in b&&t(72,kA=b.VirtualList),"selectedValue"in b&&t(73,hA=b.selectedValue),"ariaValues"in b&&t(74,$A=b.ariaValues),"ariaListOpen"in b&&t(75,Ae=b.ariaListOpen),"ariaFocused"in b&&t(76,ee=b.ariaFocused)},A.$$.update=()=>{A.$$.dirty[0]&140|A.$$.dirty[1]&405340160&&t(81,i=KA({loadOptions:G,filterText:N,items:d,value:w,isMulti:Q,optionIdentifier:k,groupBy:_,isCreatable:u})),A.$$.dirty[2]&2048&&hA&&console.warn("selectedValue is no longer used. Please use value instead."),A.$$.dirty[1]&524288&&LA(d),A.$$.dirty[0]&4&&w&&YA(),A.$$.dirty[0]&73728&&(j||!Z)&&JA(),A.$$.dirty[0]&128|A.$$.dirty[2]&262144&&(Q&&vA(),GA&&!Q&&VA()),A.$$.dirty[0]&132&&Q&&w&&w.length>1&&HA(),A.$$.dirty[0]&4&&w&&XA(),A.$$.dirty[0]&132|A.$$.dirty[2]&32768&&!w&&Q&&yA&&B("select",w),A.$$.dirty[0]&2|A.$$.dirty[2]&131072&&h!==FA&&zA(),A.$$.dirty[0]&8|A.$$.dirty[2]&65536&&N!==RA&&WA(),A.$$.dirty[0]&12&&t(29,n=w&&N.length===0),A.$$.dirty[0]&536904208&&t(37,g=n&&X&&!f&&!tA),A.$$.dirty[0]&132|A.$$.dirty[1]&393216&&t(36,I=Y&&Q?U:w?"":U),A.$$.dirty[0]&132&&t(35,o=Q&&w&&w.length>0),A.$$.dirty[0]&141|A.$$.dirty[1]&218103808|A.$$.dirty[2]&526326&&t(34,a={Item:NA,filterText:N,optionIdentifier:k,noOptionsMessage:aA,hideEmptyState:iA,isVirtualList:gA,VirtualList:kA,value:w,isMulti:Q,getGroupHeaderLabel:S,items:i,itemHeight:cA,getOptionLabel:D,listPlacement:v,parent:l,listAutoWidth:AA,listOffset:EA}),A.$$.dirty[0]&132&&t(33,r=w?se():""),A.$$.dirty[0]&268435490|A.$$.dirty[2]&524288&&t(32,s=Ce())},[l,h,w,N,tA,z,c,Q,E,f,M,H,J,Z,T,X,j,x,P,eA,sA,rA,BA,DA,uA,wA,MA,Ie,mA,n,IA,_A,s,r,a,o,I,g,CA,fA,bA,jA,ge,oe,re,ae,C,u,U,Y,d,y,_,R,m,S,F,D,k,G,L,O,q,v,gA,oA,aA,iA,AA,cA,EA,NA,kA,hA,$A,Ae,ee,yA,RA,FA,GA,i,Be,ce,Ee,Qe]}class Select extends SvelteComponent{constructor(e){super(),init(this,e,instance$5,create_fragment$5,safe_not_equal,{id:46,container:0,input:6,isMulti:7,multiFullItemClearable:8,isDisabled:9,isCreatable:47,isFocused:1,value:2,filterText:3,placeholder:48,placeholderAlwaysShow:49,items:50,itemFilter:51,groupBy:52,groupFilter:53,isGroupHeaderSelectable:54,getGroupHeaderLabel:55,labelIdentifier:56,getOptionLabel:57,optionIdentifier:58,loadOptions:59,hasError:10,containerStyles:11,getSelectionLabel:12,createGroupHeaderItem:60,createItem:61,getFilteredItems:62,isSearchable:13,inputStyles:14,isClearable:15,isWaiting:4,listPlacement:63,listOpen:5,isVirtualList:64,loadOptionsInterval:65,noOptionsMessage:66,hideEmptyState:67,inputAttributes:16,listAutoWidth:68,itemHeight:69,Icon:17,iconProps:18,showChevron:19,showIndicator:20,containerClasses:21,indicatorSvg:22,listOffset:70,ClearIcon:23,Item:71,List:24,Selection:25,MultiSelection:26,VirtualList:72,selectedValue:73,handleClear:27,ariaValues:74,ariaListOpen:75,ariaFocused:76},null,[-1,-1,-1,-1])}get getFilteredItems(){return this.$$.ctx[62]}get handleClear(){return this.$$.ctx[27]}}var StarSelect_svelte_svelte_type_style_lang="";function create_fragment$4(A){let e,t,i,n,g,I;function o(r){A[14](r)}let a={id:"sender-select",placeholder:A[1],listOffset:A[2],isClearable:A[3],showIndicator:A[4],indicatorSvg:SX_ICON_DROPDOWN,listPlacement:"bottom",items:A[5],getOptionLabel:A[9],getSelectionLabel:A[9]};return A[0]!==void 0&&(a.value=A[0]),t=new Select({props:a}),binding_callbacks.push(()=>bind(t,"value",o)),{c(){e=element("div"),i=element("div"),create_component(t.$$.fragment),set_style(i,"display","contents"),set_style(i,"--listMaxHeight",A[8]),attr(e,"class",g="star-select "+A[6]+" svelte-dvjau7")},m(r,s){insert(r,e,s),append(e,i),mount_component(t,i,null),A[15](e),I=!0},p(r,[s]){s&256&&set_style(i,"--listMaxHeight",r[8]);const B={};s&2&&(B.placeholder=r[1]),s&4&&(B.listOffset=r[2]),s&8&&(B.isClearable=r[3]),s&16&&(B.showIndicator=r[4]),s&32&&(B.items=r[5]),!n&&s&1&&(n=!0,B.value=r[0],add_flush_callback(()=>n=!1)),t.$set(B),(!I||s&64&&g!==(g="star-select "+r[6]+" svelte-dvjau7"))&&attr(e,"class",g)},i(r){I||(transition_in(t.$$.fragment,r),I=!0)},o(r){transition_out(t.$$.fragment,r),I=!1},d(r){r&&detach(e),destroy_component(t),A[15](null)}}}function instance$4(A,e,t){let{id:i=""}=e,{placeholder:n=""}=e,{listOffset:g=1}=e,{isClearable:I=!1}=e,{showIndicator:o=!0}=e,{items:a}=e,{value:r=void 0}=e,{pfpMap:s=null}=e;const B=s;let{primaryClass:C=""}=e,{secondaryClass:l=""}=e,{containerClasses:c=""}=e;function Q(w){return w.primary?dd("span",{class:"global_select-item"},[B&&B[w.object.pfp]||"",dd("span",{class:"name "+C},[w.primary]),dd("span",{class:"secondary "+l},[w.secondary||""])]).outerHTML:w.value}let E,f="500px";onMount(()=>{setTimeout(()=>{try{const w=E.getBoundingClientRect().bottom;t(8,f=Math.min(window.innerHeight-w-20,500)+"px")}catch{}},1e3)});function u(w){r=w,t(0,r)}function h(w){binding_callbacks[w?"unshift":"push"](()=>{E=w,t(7,E)})}return A.$$set=w=>{"id"in w&&t(10,i=w.id),"placeholder"in w&&t(1,n=w.placeholder),"listOffset"in w&&t(2,g=w.listOffset),"isClearable"in w&&t(3,I=w.isClearable),"showIndicator"in w&&t(4,o=w.showIndicator),"items"in w&&t(5,a=w.items),"value"in w&&t(0,r=w.value),"pfpMap"in w&&t(11,s=w.pfpMap),"primaryClass"in w&&t(12,C=w.primaryClass),"secondaryClass"in w&&t(13,l=w.secondaryClass),"containerClasses"in w&&t(6,c=w.containerClasses)},[r,n,g,I,o,a,c,E,f,Q,i,s,C,l,u,h]}class StarSelect extends SvelteComponent{constructor(e){super(),init(this,e,instance$4,create_fragment$4,safe_not_equal,{id:10,placeholder:1,listOffset:2,isClearable:3,showIndicator:4,items:5,value:0,pfpMap:11,primaryClass:12,secondaryClass:13,containerClasses:6})}}function once_store_updates(A,e=!1){return new Promise(t=>{let i=!1;const n=A.subscribe(g=>{if(!i){i=!0;return}(!e||g)&&(n(),t(g))})})}async function load_pfps(A,e){return ofe(await Promise.all(ode(A).map(([t,i])=>new Promise(n=>{const g=dd("span"),I=new PfpDisplay({target:g,props:{...e,resource:i,settle(){const o=g.firstChild?.cloneNode(!0);I.$destroy(),n([i.pfp,o])}}})}))))}const D_INTL_USD=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",currencyDisplay:"symbol"}),D_INTL_USD_LT1=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",currencyDisplay:"symbol",minimumFractionDigits:2,maximumFractionDigits:5}),A_NUMERIC_GT1=[{order:1e21,suffix:"sept",metric:"yotta",m:"Y"},{order:1e21,suffix:"sext",metric:"zetta",m:"Z"},{order:1e18,suffix:"quint",metric:"exa",m:"E"},{order:1e15,suffix:"quad",metric:"peta",m:"P"},{order:1e12,suffix:"tril",metric:"terra",m:"T"},{order:1e9,suffix:"bil",metric:"giga",m:"G"},{order:1e6,suffix:"mil",metric:"mega",m:"M"}],A_NUMERIC_LT1=[{order:1e-24,suffix:"septh",metric:"yocto",m:"y"},{order:1e-21,suffix:"sexth",metric:"zepto",m:"z"},{order:1e-18,suffix:"quinth",metric:"atto",m:"a"},{order:1e-15,suffix:"quadth",metric:"femto",m:"f"},{order:1e-12,suffix:"trilth",metric:"pico",m:"p"},{order:1e-9,suffix:"bilth",metric:"nano",m:"n"},{order:1e-6,suffix:"milth",metric:"mirco",m:"\u03BC"},{order:.001,suffix:"thsth",metric:"milli",m:"m"}],D_INTL_AMOUNT_LT1=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:6}),D_INTL_AMOUNT_GT1=new Intl.NumberFormat("en-US",{notation:"standard",maximumFractionDigits:3}),D_INTL_AMOUNT_GT1E3=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:6}),D_INTL_AMOUNT_I1E3=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:4});function format_amount(A,e=!1){if(A===0)return"0";if(A>=1e6){for(const t of A_NUMERIC_GT1)if(A>=t.order)return(A/t.order).toPrecision(3)+" "+t.suffix}else if(A<1){for(const t of A_NUMERIC_LT1)if(A<=t.order)return(A*t.order).toPrecision(3)+" "+t.metric;return D_INTL_AMOUNT_LT1.format(A)}return A>=1e3?e?D_INTL_AMOUNT_I1E3.format(A/1e3)+" k":D_INTL_AMOUNT_GT1E3.format(A):D_INTL_AMOUNT_GT1.format(A)}function format_fiat(A,e="usd",t=!1,i=2){const n=A<1?D_INTL_USD_LT1.format(A):D_INTL_USD.format(A);return t?n.replace(/^[$]/,""):n}function abbreviate_addr(A){return A.replace(/^(\w+1...).+(.{7})/,"$1[...]$2")}const coingecko_url=(A,e)=>"https://api.coingecko.com/api/v3/simple/price?"+new URLSearchParams(ode({ids:A.join(","),vs_currencies:e,include_last_updated_at:"true"})),CoinGecko={async coinsVersus(A,e="usd",t=5*XT_MINUTES){const i=A.map(n=>WebApis.pathFor("GET",coingecko_url([n],e)));return await WebApis.open(async n=>{const g={};if(t>0){const s=Date.now()-t;let B=!0;for(let C=0;C<A.length;C++){const l=n.at(i[C]);if(l&&l.time>s){const c=A[C];g[c]=l.response.cache[c][e]}else{B=!1;break}}if(B)return g}const o=await(await fetch(coingecko_url(A,e))).json(),a=n.raw,r=Date.now();for(const[s,B]of ode(o)){const C=a[s]=a[s]||{};C.response=B,C.time=r,g[s]=B[e]}return g})}},WebApis=create_store_class({store:SI_STORE_WEB_APIS,extension:"map",class:class ne extends WritableStoreMap{static pathFor(e,t){return`/cache.web-api/sha256.${buffer_to_base64(sha256_sync$1(text_to_buffer(e+" "+t)))}`}static pathFrom(e){return ne.pathFor(e.method,e.path)}}});var AmountInput_svelte_svelte_type_style_lang="";const Agents=create_store_class({store:SI_STORE_AGENTS,extension:"map",class:class TA extends WritableStoreMap{static pathForAgent(e,t=yw_family.get()){return`/family.${t}/agent.${e.replace(/^\w+1/,"")}`}static pathForContact(e,t=yw_family.get()){return`${TA.pathForAgent(e,t)}/as.contact`}static pathFromContact(e){return TA.pathForContact(e.address,e.family)}static async getContact(e){return(await Agents.read()).at(e)}*contacts(e=yw_family.get()){const t=this._w_cache,i=`/family.${e}/agent.`;for(const n in t)!n.startsWith(i)||!n.endsWith("/as.contact")||(yield[n,t[n]])}async putContact(e){const t=TA.pathFromContact(e);return this._w_cache[t]=e,await this.save(),t}}});var SX_ICON_COPY=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M3 13H5V11H3V13ZM3 17H5V15H3V17ZM5 21V19H3C3 20.1 3.89 21 5 21ZM3 9H5V7H3V9ZM15 21H17V19H15V21ZM19 3H9C7.89 3 7 3.9 7 5V15C7 16.1 7.89 17 9 17H19C20.1 17 21 16.1 21 15V5C21 3.9 20.1 3 19 3ZM19 15H9V5H19V15ZM11 21H13V19H11V21ZM7 21H9V19H7V21Z" />
</svg>
`,Address_svelte_svelte_type_style_lang="";function create_if_block_2$1(A){let e,t;return{c(){e=element("span"),t=text(A[0]),attr(e,"class","prefix svelte-1f41ddv")},m(i,n){insert(i,e,n),append(e,t)},p(i,n){n&1&&set_data(t,i[0])},d(i){i&&detach(e)}}}function create_if_block$3(A){let e,t;function i(I,o){return I[7]==="icon"?create_if_block_1$1:create_else_block}let g=i(A)(A);return{c(){g.c(),e=space(),t=element("span"),t.textContent="Copied!",attr(t,"class","copied svelte-1f41ddv"),toggle_class(t,"confirm",A[3])},m(I,o){g.m(I,o),insert(I,e,o),insert(I,t,o),A[11](t)},p(I,o){g.p(I,o),o&8&&toggle_class(t,"confirm",I[3])},d(I){g.d(I),I&&detach(e),I&&detach(t),A[11](null)}}}function create_else_block(A){let e;return{c(){e=element("span"),e.textContent="Copy",attr(e,"class","copy svelte-1f41ddv")},m(t,i){insert(t,e,i)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$1(A){let e;return{c(){e=element("span"),attr(e,"class","copy icon svelte-1f41ddv")},m(t,i){insert(t,e,i),e.innerHTML=SX_ICON_COPY},p:noop$1,d(t){t&&detach(e)}}}function create_fragment$3(A){let e,t,i,n,g,I,o,a,r,s,B=A[0]&&create_if_block_2$1(A),C=A[6]&&create_if_block$3(A);return{c(){e=element("span"),B&&B.c(),t=space(),i=element("span"),n=text(A[1]),g=space(),I=element("span"),o=text(A[1]),a=space(),C&&C.c(),attr(i,"class","head svelte-1f41ddv"),attr(I,"class","tail svelte-1f41ddv"),toggle_class(I,"display_none",!A[5]),attr(e,"class","address svelte-1f41ddv"),toggle_class(e,"copyable",A[6])},m(l,c){insert(l,e,c),B&&B.m(e,null),append(e,t),append(e,i),append(i,n),A[10](i),append(e,g),append(e,I),append(I,o),append(e,a),C&&C.m(e,null),r||(s=listen(e,"click",A[6]?A[12]:void 0),r=!0)},p(l,[c]){l[0]?B?B.p(l,c):(B=create_if_block_2$1(l),B.c(),B.m(e,t)):B&&(B.d(1),B=null),c&2&&set_data(n,l[1]),c&2&&set_data(o,l[1]),c&32&&toggle_class(I,"display_none",!l[5]),l[6]&&C.p(l,c)},i:noop$1,o:noop$1,d(l){l&&detach(e),B&&B.d(),A[10](null),C&&C.d(),r=!1,s()}}}function instance$3(A,e,t){let{prefix:i=""}=e,{address:n}=e,{copyable:g=!1}=e;const I=!!g,o=g===!0?"icon":g||"";let a,r=!1;async function s(){try{await navigator.clipboard.writeText(n)}catch(E){syserr({text:"Failed to write to the navigator clipboard",error:E});return}t(3,r=!0),setTimeout(()=>{t(3,r=!1)},800)}let B,C=!1;onMount(()=>{t(5,C=B.scrollWidth>B.offsetWidth)});function l(E){binding_callbacks[E?"unshift":"push"](()=>{B=E,t(4,B)})}function c(E){binding_callbacks[E?"unshift":"push"](()=>{a=E,t(2,a)})}const Q=()=>s();return A.$$set=E=>{"prefix"in E&&t(0,i=E.prefix),"address"in E&&t(1,n=E.address),"copyable"in E&&t(9,g=E.copyable)},[i,n,a,r,B,C,I,o,s,g,l,c,Q]}class Address extends SvelteComponent{constructor(e){super(),init(this,e,instance$3,create_fragment$3,safe_not_equal,{prefix:0,address:1,copyable:9})}}var InlineContactSelection_svelte_svelte_type_style_lang="",RecipientSelectItem_svelte_svelte_type_style_lang="",RecipientSelectSelection_svelte_svelte_type_style_lang="",RecipientSelect_svelte_svelte_type_style_lang="";const Events=create_store_class({store:SI_STORE_EVENTS,extension:"array",class:class extends WritableStoreArray{static async filter(e){return(await Events.read()).filter(e)}static async insert(e){return await Events.open(t=>t.insert(e))}*filter(e={}){for(const t of this._w_cache)e.type&&e.type!==t.type||e.account&&e.account!==t.data.account||e.owner&&e.owner!==t.data.owner||(yield t)}async delete(e){const t=this._w_cache,i=e.time,n=JSON.stringify(e);A:{for(let g=0,I=t.length;g<I;g++){const o=t[g];if(i===o.time&&n===JSON.stringify(o)){t.splice(g,1);break A}}return t.length}return await this.save(),t.length}async insert(e){const t=e.time,i=this._w_cache,n=JSON.stringify(e);A:{for(let g=0,I=i.length;g<I;g++){const o=i[g];if(t>o.time){i.splice(g,0,e);break A}else if(t===o.time&&n===JSON.stringify(o))return i.length}i.push(e)}return await this.save(),i.length}}});var SendNative_svelte_svelte_type_style_lang="";const Settings=create_store_class({store:SI_STORE_SETTINGS,extension:"dict",class:class extends WritableStoreDict{}});var Send_svelte_svelte_type_style_lang="",qrcode={exports:{}};(function(A){function e(c){this.mode=i.MODE_8BIT_BYTE,this.data=c,this.parsedData=[];for(var Q=0,E=this.data.length;Q<E;Q++){var f=[],u=this.data.charCodeAt(Q);u>65536?(f[0]=240|(u&1835008)>>>18,f[1]=128|(u&258048)>>>12,f[2]=128|(u&4032)>>>6,f[3]=128|u&63):u>2048?(f[0]=224|(u&61440)>>>12,f[1]=128|(u&4032)>>>6,f[2]=128|u&63):u>128?(f[0]=192|(u&1984)>>>6,f[1]=128|u&63):f[0]=u,this.parsedData.push(f)}this.parsedData=Array.prototype.concat.apply([],this.parsedData),this.parsedData.length!=this.data.length&&(this.parsedData.unshift(191),this.parsedData.unshift(187),this.parsedData.unshift(239))}e.prototype={getLength:function(c){return this.parsedData.length},write:function(c){for(var Q=0,E=this.parsedData.length;Q<E;Q++)c.put(this.parsedData[Q],8)}};function t(c,Q){this.typeNumber=c,this.errorCorrectLevel=Q,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}t.prototype={addData:function(c){var Q=new e(c);this.dataList.push(Q),this.dataCache=null},isDark:function(c,Q){if(c<0||this.moduleCount<=c||Q<0||this.moduleCount<=Q)throw new Error(c+","+Q);return this.modules[c][Q]},getModuleCount:function(){return this.moduleCount},make:function(){this.makeImpl(!1,this.getBestMaskPattern())},makeImpl:function(c,Q){this.moduleCount=this.typeNumber*4+17,this.modules=new Array(this.moduleCount);for(var E=0;E<this.moduleCount;E++){this.modules[E]=new Array(this.moduleCount);for(var f=0;f<this.moduleCount;f++)this.modules[E][f]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(c,Q),this.typeNumber>=7&&this.setupTypeNumber(c),this.dataCache==null&&(this.dataCache=t.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,Q)},setupPositionProbePattern:function(c,Q){for(var E=-1;E<=7;E++)if(!(c+E<=-1||this.moduleCount<=c+E))for(var f=-1;f<=7;f++)Q+f<=-1||this.moduleCount<=Q+f||(0<=E&&E<=6&&(f==0||f==6)||0<=f&&f<=6&&(E==0||E==6)||2<=E&&E<=4&&2<=f&&f<=4?this.modules[c+E][Q+f]=!0:this.modules[c+E][Q+f]=!1)},getBestMaskPattern:function(){for(var c=0,Q=0,E=0;E<8;E++){this.makeImpl(!0,E);var f=I.getLostPoint(this);(E==0||c>f)&&(c=f,Q=E)}return Q},createMovieClip:function(c,Q,E){var f=c.createEmptyMovieClip(Q,E),u=1;this.make();for(var h=0;h<this.modules.length;h++)for(var w=h*u,N=0;N<this.modules[h].length;N++){var U=N*u,Y=this.modules[h][N];Y&&(f.beginFill(0,100),f.moveTo(U,w),f.lineTo(U+u,w),f.lineTo(U+u,w+u),f.lineTo(U,w+u),f.endFill())}return f},setupTimingPattern:function(){for(var c=8;c<this.moduleCount-8;c++)this.modules[c][6]==null&&(this.modules[c][6]=c%2==0);for(var Q=8;Q<this.moduleCount-8;Q++)this.modules[6][Q]==null&&(this.modules[6][Q]=Q%2==0)},setupPositionAdjustPattern:function(){for(var c=I.getPatternPosition(this.typeNumber),Q=0;Q<c.length;Q++)for(var E=0;E<c.length;E++){var f=c[Q],u=c[E];if(this.modules[f][u]==null)for(var h=-2;h<=2;h++)for(var w=-2;w<=2;w++)h==-2||h==2||w==-2||w==2||h==0&&w==0?this.modules[f+h][u+w]=!0:this.modules[f+h][u+w]=!1}},setupTypeNumber:function(c){for(var Q=I.getBCHTypeNumber(this.typeNumber),E=0;E<18;E++){var f=!c&&(Q>>E&1)==1;this.modules[Math.floor(E/3)][E%3+this.moduleCount-8-3]=f}for(var E=0;E<18;E++){var f=!c&&(Q>>E&1)==1;this.modules[E%3+this.moduleCount-8-3][Math.floor(E/3)]=f}},setupTypeInfo:function(c,Q){for(var E=this.errorCorrectLevel<<3|Q,f=I.getBCHTypeInfo(E),u=0;u<15;u++){var h=!c&&(f>>u&1)==1;u<6?this.modules[u][8]=h:u<8?this.modules[u+1][8]=h:this.modules[this.moduleCount-15+u][8]=h}for(var u=0;u<15;u++){var h=!c&&(f>>u&1)==1;u<8?this.modules[8][this.moduleCount-u-1]=h:u<9?this.modules[8][15-u-1+1]=h:this.modules[8][15-u-1]=h}this.modules[this.moduleCount-8][8]=!c},mapData:function(c,Q){for(var E=-1,f=this.moduleCount-1,u=7,h=0,w=this.moduleCount-1;w>0;w-=2)for(w==6&&w--;;){for(var N=0;N<2;N++)if(this.modules[f][w-N]==null){var U=!1;h<c.length&&(U=(c[h]>>>u&1)==1);var Y=I.getMask(Q,f,w-N);Y&&(U=!U),this.modules[f][w-N]=U,u--,u==-1&&(h++,u=7)}if(f+=E,f<0||this.moduleCount<=f){f-=E,E=-E;break}}}},t.PAD0=236,t.PAD1=17,t.createData=function(c,Q,E){for(var f=s.getRSBlocks(c,Q),u=new B,h=0;h<E.length;h++){var w=E[h];u.put(w.mode,4),u.put(w.getLength(),I.getLengthInBits(w.mode,c)),w.write(u)}for(var N=0,h=0;h<f.length;h++)N+=f[h].dataCount;if(u.getLengthInBits()>N*8)throw new Error("code length overflow. ("+u.getLengthInBits()+">"+N*8+")");for(u.getLengthInBits()+4<=N*8&&u.put(0,4);u.getLengthInBits()%8!=0;)u.putBit(!1);for(;!(u.getLengthInBits()>=N*8||(u.put(t.PAD0,8),u.getLengthInBits()>=N*8));)u.put(t.PAD1,8);return t.createBytes(u,f)},t.createBytes=function(c,Q){for(var E=0,f=0,u=0,h=new Array(Q.length),w=new Array(Q.length),N=0;N<Q.length;N++){var U=Q[N].dataCount,Y=Q[N].totalCount-U;f=Math.max(f,U),u=Math.max(u,Y),h[N]=new Array(U);for(var d=0;d<h[N].length;d++)h[N][d]=255&c.buffer[d+E];E+=U;var y=I.getErrorCorrectPolynomial(Y),_=new r(h[N],y.getLength()-1),R=_.mod(y);w[N]=new Array(y.getLength()-1);for(var d=0;d<w[N].length;d++){var m=d+R.getLength()-w[N].length;w[N][d]=m>=0?R.get(m):0}}for(var S=0,d=0;d<Q.length;d++)S+=Q[d].totalCount;for(var F=new Array(S),D=0,d=0;d<f;d++)for(var N=0;N<Q.length;N++)d<h[N].length&&(F[D++]=h[N][d]);for(var d=0;d<u;d++)for(var N=0;N<Q.length;N++)d<w[N].length&&(F[D++]=w[N][d]);return F};for(var i={MODE_NUMBER:1<<0,MODE_ALPHA_NUM:1<<1,MODE_8BIT_BYTE:1<<2,MODE_KANJI:1<<3},n={L:1,M:0,Q:3,H:2},g={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7},I={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1<<10|1<<8|1<<5|1<<4|1<<2|1<<1|1<<0,G18:1<<12|1<<11|1<<10|1<<9|1<<8|1<<5|1<<2|1<<0,G15_MASK:1<<14|1<<12|1<<10|1<<4|1<<1,getBCHTypeInfo:function(c){for(var Q=c<<10;I.getBCHDigit(Q)-I.getBCHDigit(I.G15)>=0;)Q^=I.G15<<I.getBCHDigit(Q)-I.getBCHDigit(I.G15);return(c<<10|Q)^I.G15_MASK},getBCHTypeNumber:function(c){for(var Q=c<<12;I.getBCHDigit(Q)-I.getBCHDigit(I.G18)>=0;)Q^=I.G18<<I.getBCHDigit(Q)-I.getBCHDigit(I.G18);return c<<12|Q},getBCHDigit:function(c){for(var Q=0;c!=0;)Q++,c>>>=1;return Q},getPatternPosition:function(c){return I.PATTERN_POSITION_TABLE[c-1]},getMask:function(c,Q,E){switch(c){case g.PATTERN000:return(Q+E)%2==0;case g.PATTERN001:return Q%2==0;case g.PATTERN010:return E%3==0;case g.PATTERN011:return(Q+E)%3==0;case g.PATTERN100:return(Math.floor(Q/2)+Math.floor(E/3))%2==0;case g.PATTERN101:return Q*E%2+Q*E%3==0;case g.PATTERN110:return(Q*E%2+Q*E%3)%2==0;case g.PATTERN111:return(Q*E%3+(Q+E)%2)%2==0;default:throw new Error("bad maskPattern:"+c)}},getErrorCorrectPolynomial:function(c){for(var Q=new r([1],0),E=0;E<c;E++)Q=Q.multiply(new r([1,o.gexp(E)],0));return Q},getLengthInBits:function(c,Q){if(1<=Q&&Q<10)switch(c){case i.MODE_NUMBER:return 10;case i.MODE_ALPHA_NUM:return 9;case i.MODE_8BIT_BYTE:return 8;case i.MODE_KANJI:return 8;default:throw new Error("mode:"+c)}else if(Q<27)switch(c){case i.MODE_NUMBER:return 12;case i.MODE_ALPHA_NUM:return 11;case i.MODE_8BIT_BYTE:return 16;case i.MODE_KANJI:return 10;default:throw new Error("mode:"+c)}else if(Q<41)switch(c){case i.MODE_NUMBER:return 14;case i.MODE_ALPHA_NUM:return 13;case i.MODE_8BIT_BYTE:return 16;case i.MODE_KANJI:return 12;default:throw new Error("mode:"+c)}else throw new Error("type:"+Q)},getLostPoint:function(c){for(var Q=c.getModuleCount(),E=0,f=0;f<Q;f++)for(var u=0;u<Q;u++){for(var h=0,w=c.isDark(f,u),N=-1;N<=1;N++)if(!(f+N<0||Q<=f+N))for(var U=-1;U<=1;U++)u+U<0||Q<=u+U||N==0&&U==0||w==c.isDark(f+N,u+U)&&h++;h>5&&(E+=3+h-5)}for(var f=0;f<Q-1;f++)for(var u=0;u<Q-1;u++){var Y=0;c.isDark(f,u)&&Y++,c.isDark(f+1,u)&&Y++,c.isDark(f,u+1)&&Y++,c.isDark(f+1,u+1)&&Y++,(Y==0||Y==4)&&(E+=3)}for(var f=0;f<Q;f++)for(var u=0;u<Q-6;u++)c.isDark(f,u)&&!c.isDark(f,u+1)&&c.isDark(f,u+2)&&c.isDark(f,u+3)&&c.isDark(f,u+4)&&!c.isDark(f,u+5)&&c.isDark(f,u+6)&&(E+=40);for(var u=0;u<Q;u++)for(var f=0;f<Q-6;f++)c.isDark(f,u)&&!c.isDark(f+1,u)&&c.isDark(f+2,u)&&c.isDark(f+3,u)&&c.isDark(f+4,u)&&!c.isDark(f+5,u)&&c.isDark(f+6,u)&&(E+=40);for(var d=0,u=0;u<Q;u++)for(var f=0;f<Q;f++)c.isDark(f,u)&&d++;var y=Math.abs(100*d/Q/Q-50)/5;return E+=y*10,E}},o={glog:function(c){if(c<1)throw new Error("glog("+c+")");return o.LOG_TABLE[c]},gexp:function(c){for(;c<0;)c+=255;for(;c>=256;)c-=255;return o.EXP_TABLE[c]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},a=0;a<8;a++)o.EXP_TABLE[a]=1<<a;for(var a=8;a<256;a++)o.EXP_TABLE[a]=o.EXP_TABLE[a-4]^o.EXP_TABLE[a-5]^o.EXP_TABLE[a-6]^o.EXP_TABLE[a-8];for(var a=0;a<255;a++)o.LOG_TABLE[o.EXP_TABLE[a]]=a;function r(c,Q){if(c.length==null)throw new Error(c.length+"/"+Q);for(var E=0;E<c.length&&c[E]==0;)E++;this.num=new Array(c.length-E+Q);for(var f=0;f<c.length-E;f++)this.num[f]=c[f+E]}r.prototype={get:function(c){return this.num[c]},getLength:function(){return this.num.length},multiply:function(c){for(var Q=new Array(this.getLength()+c.getLength()-1),E=0;E<this.getLength();E++)for(var f=0;f<c.getLength();f++)Q[E+f]^=o.gexp(o.glog(this.get(E))+o.glog(c.get(f)));return new r(Q,0)},mod:function(c){if(this.getLength()-c.getLength()<0)return this;for(var Q=o.glog(this.get(0))-o.glog(c.get(0)),E=new Array(this.getLength()),f=0;f<this.getLength();f++)E[f]=this.get(f);for(var f=0;f<c.getLength();f++)E[f]^=o.gexp(o.glog(c.get(f))+Q);return new r(E,0).mod(c)}};function s(c,Q){this.totalCount=c,this.dataCount=Q}s.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],s.getRSBlocks=function(c,Q){var E=s.getRsBlockTable(c,Q);if(E==null)throw new Error("bad rs block @ typeNumber:"+c+"/errorCorrectLevel:"+Q);for(var f=E.length/3,u=[],h=0;h<f;h++)for(var w=E[h*3+0],N=E[h*3+1],U=E[h*3+2],Y=0;Y<w;Y++)u.push(new s(N,U));return u},s.getRsBlockTable=function(c,Q){switch(Q){case n.L:return s.RS_BLOCK_TABLE[(c-1)*4+0];case n.M:return s.RS_BLOCK_TABLE[(c-1)*4+1];case n.Q:return s.RS_BLOCK_TABLE[(c-1)*4+2];case n.H:return s.RS_BLOCK_TABLE[(c-1)*4+3];default:return}};function B(){this.buffer=[],this.length=0}B.prototype={get:function(c){var Q=Math.floor(c/8);return(this.buffer[Q]>>>7-c%8&1)==1},put:function(c,Q){for(var E=0;E<Q;E++)this.putBit((c>>>Q-E-1&1)==1)},getLengthInBits:function(){return this.length},putBit:function(c){var Q=Math.floor(this.length/8);this.buffer.length<=Q&&this.buffer.push(0),c&&(this.buffer[Q]|=128>>>this.length%8),this.length++}};var C=[[17,14,11,7],[32,26,20,14],[53,42,32,24],[78,62,46,34],[106,84,60,44],[134,106,74,58],[154,122,86,64],[192,152,108,84],[230,180,130,98],[271,213,151,119],[321,251,177,137],[367,287,203,155],[425,331,241,177],[458,362,258,194],[520,412,292,220],[586,450,322,250],[644,504,364,280],[718,560,394,310],[792,624,442,338],[858,666,482,382],[929,711,509,403],[1003,779,565,439],[1091,857,611,461],[1171,911,661,511],[1273,997,715,535],[1367,1059,751,593],[1465,1125,805,625],[1528,1190,868,658],[1628,1264,908,698],[1732,1370,982,742],[1840,1452,1030,790],[1952,1538,1112,842],[2068,1628,1168,898],[2188,1722,1228,958],[2303,1809,1283,983],[2431,1911,1351,1051],[2563,1989,1423,1093],[2699,2099,1499,1139],[2809,2213,1579,1219],[2953,2331,1663,1273]];function l(c){if(this.options={padding:4,width:256,height:256,typeNumber:4,color:"#000000",background:"#ffffff",ecl:"M"},typeof c=="string"&&(c={content:c}),c)for(var Q in c)this.options[Q]=c[Q];if(typeof this.options.content!="string")throw new Error("Expected 'content' as string!");if(this.options.content.length===0)throw new Error("Expected 'content' to be non-empty!");if(!(this.options.padding>=0))throw new Error("Expected 'padding' value to be non-negative!");if(!(this.options.width>0)||!(this.options.height>0))throw new Error("Expected 'width' or 'height' value to be higher than zero!");function E(U){switch(U){case"L":return n.L;case"M":return n.M;case"Q":return n.Q;case"H":return n.H;default:throw new Error("Unknwon error correction level: "+U)}}function f(U,Y){for(var d=u(U),y=1,_=0,R=0,m=C.length;R<=m;R++){var S=C[R];if(!S)throw new Error("Content too long: expected "+_+" but got "+d);switch(Y){case"L":_=S[0];break;case"M":_=S[1];break;case"Q":_=S[2];break;case"H":_=S[3];break;default:throw new Error("Unknwon error correction level: "+Y)}if(d<=_)break;y++}if(y>C.length)throw new Error("Content too long");return y}function u(U){var Y=encodeURI(U).toString().replace(/\%[0-9a-fA-F]{2}/g,"a");return Y.length+(Y.length!=U?3:0)}var h=this.options.content,w=f(h,this.options.ecl),N=E(this.options.ecl);this.qrcode=new t(w,N),this.qrcode.addData(h),this.qrcode.make()}l.prototype.svg=function(c){var Q=this.options||{},E=this.qrcode.modules;typeof c>"u"&&(c={container:Q.container||"svg"});for(var f=typeof Q.pretty<"u"?!!Q.pretty:!0,u=f?"  ":"",h=f?`\r
`:"",w=Q.width,N=Q.height,U=E.length,Y=w/(U+2*Q.padding),d=N/(U+2*Q.padding),y=typeof Q.join<"u"?!!Q.join:!1,_=typeof Q.swap<"u"?!!Q.swap:!1,R=typeof Q.xmlDeclaration<"u"?!!Q.xmlDeclaration:!0,m=typeof Q.predefined<"u"?!!Q.predefined:!1,S=m?u+'<defs><path id="qrmodule" d="M0 0 h'+d+" v"+Y+' H0 z" style="fill:'+Q.color+';shape-rendering:crispEdges;" /></defs>'+h:"",F=u+'<rect x="0" y="0" width="'+w+'" height="'+N+'" style="fill:'+Q.background+';shape-rendering:crispEdges;"/>'+h,D="",k="",G=0;G<U;G++)for(var M=0;M<U;M++){var H=E[M][G];if(H){var J=M*Y+Q.padding*Y,L=G*d+Q.padding*d;if(_){var O=J;J=L,L=O}if(y){var q=Y+J,Z=d+L;J=Number.isInteger(J)?Number(J):J.toFixed(2),L=Number.isInteger(L)?Number(L):L.toFixed(2),q=Number.isInteger(q)?Number(q):q.toFixed(2),Z=Number.isInteger(Z)?Number(Z):Z.toFixed(2),k+="M"+J+","+L+" V"+Z+" H"+q+" V"+L+" H"+J+" Z "}else m?D+=u+'<use x="'+J.toString()+'" y="'+L.toString()+'" href="#qrmodule" />'+h:D+=u+'<rect x="'+J.toString()+'" y="'+L.toString()+'" width="'+Y+'" height="'+d+'" style="fill:'+Q.color+';shape-rendering:crispEdges;"/>'+h}}y&&(D=u+'<path x="0" y="0" style="fill:'+Q.color+';shape-rendering:crispEdges;" d="'+k+'" />');var T="";switch(c.container){case"svg":R&&(T+='<?xml version="1.0" standalone="yes"?>'+h),T+='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="'+w+'" height="'+N+'">'+h,T+=S+F+D,T+="</svg>";break;case"svg-viewbox":R&&(T+='<?xml version="1.0" standalone="yes"?>'+h),T+='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 '+w+" "+N+'">'+h,T+=S+F+D,T+="</svg>";break;case"g":T+='<g width="'+w+'" height="'+N+'">'+h,T+=S+F+D,T+="</g>";break;default:T+=(S+F+D).replace(/^\s+/,"");break}return T},l.prototype.save=function(c,Q){var E=this.svg();typeof Q!="function"&&(Q=function(u,h){});try{var f=require("fs");f.writeFile(c,E,Q)}catch(u){Q(u)}},A.exports=l})(qrcode);var QRCode=qrcode.exports,Info_svelte_svelte_type_style_lang="";function create_if_block$2(A){let e;return{c(){e=element("span"),attr(e,"class","icon svelte-1ytw09y")},m(t,i){insert(t,e,i),e.innerHTML=SX_ICON_COPY},p:noop$1,d(t){t&&detach(e)}}}function create_fragment$2(A){let e,t,i,n;const g=A[8].default,I=create_slot(g,A,A[7],null);let o=A[2]&&create_if_block$2();return{c(){e=element("div"),t=element("span"),I&&I.c(),i=space(),o&&o.c(),attr(t,"id",A[0]),attr(t,"class","info-value svelte-1ytw09y"),attr(e,"class","info svelte-1ytw09y"),toggle_class(e,"copyable",A[2]),toggle_class(e,"center",A[1])},m(a,r){insert(a,e,r),append(e,t),I&&I.m(t,null),append(e,i),o&&o.m(e,null),n=!0},p(a,[r]){I&&I.p&&(!n||r&128)&&update_slot_base(I,g,a,a[7],n?get_slot_changes(g,a[7],r,null):get_all_dirty_from_scope(a[7]),null),a[2]&&o.p(a,r)},i(a){n||(transition_in(I,a),n=!0)},o(a){transition_out(I,a),n=!1},d(a){a&&detach(e),I&&I.d(a),o&&o.d()}}}function instance$2(A,e,t){let{$$slots:i={},$$scope:n}=e,{key:g}=e;const I=g;let{address:o=!1}=e;const a=o;let{center:r=a}=e;const s=r;let{copyable:B=!1}=e;const C=B;return A.$$set=l=>{"key"in l&&t(3,g=l.key),"address"in l&&t(4,o=l.address),"center"in l&&t(5,r=l.center),"copyable"in l&&t(6,B=l.copyable),"$$scope"in l&&t(7,n=l.$$scope)},[I,s,C,g,o,r,B,n,i]}class Info extends SvelteComponent{constructor(e){super(),init(this,e,instance$2,create_fragment$2,safe_not_equal,{key:3,address:4,center:5,copyable:6})}}var PopupReceive_svelte_svelte_type_style_lang="";function create_catch_block_1(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block_1(A){let e,t,i;function n(I){A[13](I)}let g={id:"chain-select",pfpMap:A[6],placeholder:"Select chain",items:A[23]};return A[2]!==void 0&&(g.value=A[2]),e=new StarSelect({props:g}),binding_callbacks.push(()=>bind(e,"value",n)),{c(){create_component(e.$$.fragment)},m(I,o){mount_component(e,I,o),i=!0},p(I,o){const a={};o&64&&(a.pfpMap=I[6]),!t&&o&4&&(t=!0,a.value=I[2],add_flush_callback(()=>t=!1)),e.$set(a)},i(I){i||(transition_in(e.$$.fragment,I),i=!0)},o(I){transition_out(e.$$.fragment,I),i=!1},d(I){destroy_component(e,I)}}}function create_pending_block_1(A){let e;return{c(){e=text("Loading chains...")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_default_slot_2(A){let e,t,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1,then:create_then_block_1,catch:create_catch_block_1,value:23,blocks:[,,,]};return handle_promise(A[9](),i),{c(){e=empty(),i.block.c()},m(n,g){insert(n,e,g),i.block.m(n,i.anchor=g),i.mount=()=>e.parentNode,i.anchor=e,t=!0},p(n,g){A=n,update_await_block_branch(i,A,g)},i(n){t||(transition_in(i.block),t=!0)},o(n){for(let g=0;g<3;g+=1){const I=i.blocks[g];transition_out(I)}t=!1},d(n){n&&detach(e),i.block.d(n),i.token=null,i=null}}}function create_catch_block$1(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$1(A){let e,t,i;function n(I){A[14](I)}let g={id:"account-select",pfpMap:A[5],placeholder:"Select account",secondaryClass:"balance",items:A[22]};return A[0]!==void 0&&(g.value=A[0]),e=new StarSelect({props:g}),binding_callbacks.push(()=>bind(e,"value",n)),{c(){create_component(e.$$.fragment)},m(I,o){mount_component(e,I,o),i=!0},p(I,o){const a={};o&32&&(a.pfpMap=I[5]),!t&&o&1&&(t=!0,a.value=I[0],add_flush_callback(()=>t=!1)),e.$set(a)},i(I){i||(transition_in(e.$$.fragment,I),i=!0)},o(I){transition_out(e.$$.fragment,I),i=!1},d(I){destroy_component(e,I)}}}function create_pending_block$1(A){let e;return{c(){e=text("Loading Accounts...")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_default_slot_1(A){let e,t,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$1,then:create_then_block$1,catch:create_catch_block$1,value:22,blocks:[,,,]};return handle_promise(A[8](),i),{c(){e=empty(),i.block.c()},m(n,g){insert(n,e,g),i.block.m(n,i.anchor=g),i.mount=()=>e.parentNode,i.anchor=e,t=!0},p(n,g){A=n,update_await_block_branch(i,A,g)},i(n){t||(transition_in(i.block),t=!0)},o(n){for(let g=0;g<3;g+=1){const I=i.blocks[g];transition_out(I)}t=!1},d(n){n&&detach(e),i.block.d(n),i.token=null,i=null}}}function create_if_block$1(A){let e,t;return e=new Address({props:{copyable:!0,address:Chains.addressFor(A[1]?.pubkey,A[3])||""}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&10&&(g.address=Chains.addressFor(i[1]?.pubkey,i[3])||""),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_default_slot(A){let e,t,i=A[1]&&A[3]&&create_if_block$1(A);return{c(){i&&i.c(),e=empty()},m(n,g){i&&i.m(n,g),insert(n,e,g),t=!0},p(n,g){n[1]&&n[3]?i?(i.p(n,g),g&10&&transition_in(i,1)):(i=create_if_block$1(n),i.c(),transition_in(i,1),i.m(e.parentNode,e)):i&&(group_outros(),transition_out(i,1,1,()=>{i=null}),check_outros())},i(n){t||(transition_in(i),t=!0)},o(n){transition_out(i),t=!1},d(n){i&&i.d(n),n&&detach(e)}}}function create_fragment$1(A){let e,t,i,n,g,I,o,a,r,s,B,C,l,c,Q;return i=new Close({props:{absolute:!0}}),i.$on("click",A[12]),I=new Field({props:{short:!0,key:"chain-select",name:"Chain",$$slots:{default:[create_default_slot_2]},$$scope:{ctx:A}}}),a=new Field({props:{short:!0,key:"account-select",name:"Account",$$slots:{default:[create_default_slot_1]},$$scope:{ctx:A}}}),s=new Info({props:{address:!0,key:"receive-address",$$slots:{default:[create_default_slot]},$$scope:{ctx:A}}}),{c(){e=element("h3"),e.textContent="Receive",t=space(),n=element("div"),create_component(i.$$.fragment),g=space(),create_component(I.$$.fragment),o=space(),create_component(a.$$.fragment),r=space(),create_component(s.$$.fragment),B=space(),C=element("div"),l=space(),c=element("div"),c.textContent="Scan QR code to receive to this address",set_style(n,"display","contents"),set_style(n,"--margin","5px"),attr(C,"class","qr-code svelte-rmdw72"),attr(c,"class","info svelte-rmdw72")},m(E,f){insert(E,e,f),insert(E,t,f),insert(E,n,f),mount_component(i,n,null),insert(E,g,f),mount_component(I,E,f),insert(E,o,f),mount_component(a,E,f),insert(E,r,f),mount_component(s,E,f),insert(E,B,f),insert(E,C,f),A[15](C),insert(E,l,f),insert(E,c,f),Q=!0},p(E,[f]){const u={};f&16777284&&(u.$$scope={dirty:f,ctx:E}),I.$set(u);const h={};f&16777249&&(h.$$scope={dirty:f,ctx:E}),a.$set(h);const w={};f&16777226&&(w.$$scope={dirty:f,ctx:E}),s.$set(w)},i(E){Q||(transition_in(i.$$.fragment,E),transition_in(I.$$.fragment,E),transition_in(a.$$.fragment,E),transition_in(s.$$.fragment,E),Q=!0)},o(E){transition_out(i.$$.fragment,E),transition_out(I.$$.fragment,E),transition_out(a.$$.fragment,E),transition_out(s.$$.fragment,E),Q=!1},d(E){E&&detach(e),E&&detach(t),E&&detach(n),destroy_component(i,E),E&&detach(g),destroy_component(I,E),E&&detach(o),destroy_component(a,E),E&&detach(r),destroy_component(s,E),E&&detach(B),E&&detach(C),A[15](null),E&&detach(l),E&&detach(c)}}}function instance$1(A,e,t){let i,n,g,I,o,a;component_subscribe(A,yw_account_ref,y=>t(16,g=y)),component_subscribe(A,yw_context_popup,y=>t(17,I=y)),component_subscribe(A,yw_chain_ref,y=>t(18,o=y)),component_subscribe(A,yw_popup,y=>t(7,a=y));let r={value:g},s;const B=(y,_)=>({object:_,value:y,primary:_.name,secondary:_.extra?.total_fiat_cache||"(?)"});let C={};async function l(){const y=await Accounts.read();return t(5,C=ofe(await Promise.all(ode(y.raw).map(([_,R])=>new Promise(m=>{const S=dd("span"),F=new PfpDisplay({target:S,props:{dim:28,genStyle:"font-size: 18px;",resource:R,settle(){const D=S.firstChild?.cloneNode(!0);F.$destroy(),m([R.pfp,D])}}})}))))),oderac(y.raw,B)}let c={value:o},Q;const E=(y,_)=>({object:_,value:y,primary:_.name,secondary:_.id,pfp:_.pfp});let f={};async function u(){const y=await Chains.read();return t(6,f=await w(y.raw)),oderac(y.raw,E)}I?.account||set_store_value(yw_context_popup,I={account:g},I);let h;async function w(y){return ofe(await Promise.all(ode(y).map(([_,R])=>new Promise(m=>{const S=dd("span"),F=new PfpDisplay({target:S,props:{dim:28,genStyle:"font-size: 18px;",resource:R,settle(){const D=S.firstChild?.cloneNode(!0);F.$destroy(),m([R.pfp,D])}}})}))))}const N=()=>set_store_value(yw_popup,a=null,a);function U(y){c=y,t(2,c)}function Y(y){r=y,t(0,r)}function d(y){binding_callbacks[y?"unshift":"push"](()=>{h=y,t(4,h),t(1,s),t(3,Q),t(11,i),t(10,n),t(0,r),t(2,c)})}return A.$$.update=()=>{if(A.$$.dirty&1&&t(11,i=r.value),A.$$.dirty&2048&&i&&Accounts.read().then(y=>{t(1,s=y.at(i))}),A.$$.dirty&4&&t(10,n=c.value),A.$$.dirty&1024&&n&&Chains.read().then(y=>{t(3,Q=y.at(n))}),A.$$.dirty&26&&h&&s&&Q){const y=new QRCode({content:`starshell:${Chains.addressFor(s.pubkey,Q)||""}`,width:240,height:240,padding:3,ecl:"H",join:!0}).svg();t(4,h.innerHTML=y,h)}},[r,s,c,Q,h,C,f,a,l,u,n,i,N,U,Y,d]}class PopupReceive extends SvelteComponent{constructor(e){super(),init(this,e,instance$1,create_fragment$1,safe_not_equal,{})}}var Gap_svelte_svelte_type_style_lang="",InlinePills_svelte_svelte_type_style_lang="",TokensAdd_svelte_svelte_type_style_lang="",HoldingView_svelte_svelte_type_style_lang="",HoldingsHome_svelte_svelte_type_style_lang="",AccountCreate_svelte_svelte_type_style_lang="",AccountsHome_svelte_svelte_type_style_lang="",Tab_svelte_svelte_type_style_lang="",TabList_svelte_svelte_type_style_lang="",TabPanel_svelte_svelte_type_style_lang="",DeadEnd_svelte_svelte_type_style_lang="",IconEditor_svelte_svelte_type_style_lang="",ContactEdit_svelte_svelte_type_style_lang="",ContactList_svelte_svelte_type_style_lang="",ContactsHome_svelte_svelte_type_style_lang="";const Apps=create_store_class({store:SI_STORE_APPS,class:class OA extends WritableStoreMap{static pathFor(e,t){return`/scheme.${t}/host.${e.replace(/:/g,"+")}`}static pathFrom(e){return OA.pathFor(e.host,e.scheme)}static get(e,t){return Apps.open(i=>i.get(e,t))}get(e,t){const i=OA.pathFor(e,t);return this._w_cache[i]??null}async put(e){const t=OA.pathFor(e.host,e.scheme);this._w_cache[t]=e,await this.save()}}});var NetworkView_svelte_svelte_type_style_lang="",defaultLocale$1="en",localesData$1={},lowercaseLocaleLookup={};function getDefaultLocale(){return defaultLocale$1}function setDefaultLocale(A){defaultLocale$1=A}function getLocaleData$1(A){return localesData$1[A]}function addLocaleData$1(A){if(!A)throw new Error("No locale data passed");localesData$1[A.locale]=A,lowercaseLocaleLookup[A.locale.toLowerCase()]=A.locale}function resolveLocale$1(A){if(localesData$1[A])return A;if(lowercaseLocaleLookup[A.toLowerCase()])return lowercaseLocaleLookup[A.toLowerCase()]}function resolveLocale(A){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},t=e.localeMatcher||"lookup";switch(t){case"lookup":return resolveLocaleLookup(A);case"best fit":return resolveLocaleLookup(A);default:throw new RangeError('Invalid "localeMatcher" option: '.concat(t))}}function resolveLocaleLookup(A){var e=resolveLocale$1(A);if(e)return e;for(var t=A.split("-");A.length>1;){t.pop(),A=t.join("-");var i=resolveLocale$1(A);if(i)return i}}var $={af:function A(e){return e==1?"one":"other"},am:function A(e){return e>=0&&e<=1?"one":"other"},ar:function A(e){var t=String(e).split("."),i=Number(t[0])==e,n=i&&t[0].slice(-2);return e==0?"zero":e==1?"one":e==2?"two":n>=3&&n<=10?"few":n>=11&&n<=99?"many":"other"},ast:function A(e){var t=String(e).split("."),i=!t[1];return e==1&&i?"one":"other"},be:function A(e){var t=String(e).split("."),i=Number(t[0])==e,n=i&&t[0].slice(-1),g=i&&t[0].slice(-2);return n==1&&g!=11?"one":n>=2&&n<=4&&(g<12||g>14)?"few":i&&n==0||n>=5&&n<=9||g>=11&&g<=14?"many":"other"},br:function A(e){var t=String(e).split("."),i=Number(t[0])==e,n=i&&t[0].slice(-1),g=i&&t[0].slice(-2),I=i&&t[0].slice(-6);return n==1&&g!=11&&g!=71&&g!=91?"one":n==2&&g!=12&&g!=72&&g!=92?"two":(n==3||n==4||n==9)&&(g<10||g>19)&&(g<70||g>79)&&(g<90||g>99)?"few":e!=0&&i&&I==0?"many":"other"},bs:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"",g=!t[1],I=i.slice(-1),o=i.slice(-2),a=n.slice(-1),r=n.slice(-2);return g&&I==1&&o!=11||a==1&&r!=11?"one":g&&I>=2&&I<=4&&(o<12||o>14)||a>=2&&a<=4&&(r<12||r>14)?"few":"other"},ceb:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"",g=!t[1],I=i.slice(-1),o=n.slice(-1);return g&&(i==1||i==2||i==3)||g&&I!=4&&I!=6&&I!=9||!g&&o!=4&&o!=6&&o!=9?"one":"other"},cs:function A(e){var t=String(e).split("."),i=t[0],n=!t[1];return e==1&&n?"one":i>=2&&i<=4&&n?"few":n?"other":"many"},cy:function A(e){return e==0?"zero":e==1?"one":e==2?"two":e==3?"few":e==6?"many":"other"},da:function A(e){var t=String(e).split("."),i=t[0],n=Number(t[0])==e;return e==1||!n&&(i==0||i==1)?"one":"other"},dsb:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"",g=!t[1],I=i.slice(-2),o=n.slice(-2);return g&&I==1||o==1?"one":g&&I==2||o==2?"two":g&&(I==3||I==4)||o==3||o==4?"few":"other"},dz:function A(e){return"other"},es:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-6);return e==1?"one":i!=0&&g==0&&n?"many":"other"},ff:function A(e){return e>=0&&e<2?"one":"other"},fr:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-6);return e>=0&&e<2?"one":i!=0&&g==0&&n?"many":"other"},ga:function A(e){var t=String(e).split("."),i=Number(t[0])==e;return e==1?"one":e==2?"two":i&&e>=3&&e<=6?"few":i&&e>=7&&e<=10?"many":"other"},gd:function A(e){var t=String(e).split("."),i=Number(t[0])==e;return e==1||e==11?"one":e==2||e==12?"two":i&&e>=3&&e<=10||i&&e>=13&&e<=19?"few":"other"},he:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=Number(t[0])==e,I=g&&t[0].slice(-1);return e==1&&n?"one":i==2&&n?"two":n&&(e<0||e>10)&&g&&I==0?"many":"other"},is:function A(e){var t=String(e).split("."),i=t[0],n=Number(t[0])==e,g=i.slice(-1),I=i.slice(-2);return n&&g==1&&I!=11||!n?"one":"other"},it:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-6);return e==1&&n?"one":i!=0&&g==0&&n?"many":"other"},ksh:function A(e){return e==0?"zero":e==1?"one":"other"},lt:function A(e){var t=String(e).split("."),i=t[1]||"",n=Number(t[0])==e,g=n&&t[0].slice(-1),I=n&&t[0].slice(-2);return g==1&&(I<11||I>19)?"one":g>=2&&g<=9&&(I<11||I>19)?"few":i!=0?"many":"other"},lv:function A(e){var t=String(e).split("."),i=t[1]||"",n=i.length,g=Number(t[0])==e,I=g&&t[0].slice(-1),o=g&&t[0].slice(-2),a=i.slice(-2),r=i.slice(-1);return g&&I==0||o>=11&&o<=19||n==2&&a>=11&&a<=19?"zero":I==1&&o!=11||n==2&&r==1&&a!=11||n!=2&&r==1?"one":"other"},mk:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"",g=!t[1],I=i.slice(-1),o=i.slice(-2),a=n.slice(-1),r=n.slice(-2);return g&&I==1&&o!=11||a==1&&r!=11?"one":"other"},mt:function A(e){var t=String(e).split("."),i=Number(t[0])==e,n=i&&t[0].slice(-2);return e==1?"one":e==0||n>=2&&n<=10?"few":n>=11&&n<=19?"many":"other"},pa:function A(e){return e==0||e==1?"one":"other"},pl:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-1),I=i.slice(-2);return e==1&&n?"one":n&&g>=2&&g<=4&&(I<12||I>14)?"few":n&&i!=1&&(g==0||g==1)||n&&g>=5&&g<=9||n&&I>=12&&I<=14?"many":"other"},pt:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-6);return i==0||i==1?"one":i!=0&&g==0&&n?"many":"other"},ro:function A(e){var t=String(e).split("."),i=!t[1],n=Number(t[0])==e,g=n&&t[0].slice(-2);return e==1&&i?"one":!i||e==0||g>=2&&g<=19?"few":"other"},ru:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-1),I=i.slice(-2);return n&&g==1&&I!=11?"one":n&&g>=2&&g<=4&&(I<12||I>14)?"few":n&&g==0||n&&g>=5&&g<=9||n&&I>=11&&I<=14?"many":"other"},se:function A(e){return e==1?"one":e==2?"two":"other"},si:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"";return e==0||e==1||i==0&&n==1?"one":"other"},sl:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-2);return n&&g==1?"one":n&&g==2?"two":n&&(g==3||g==4)||!n?"few":"other"}};$.as=$.am;$.az=$.af;$.bg=$.af;$.bn=$.am;$.brx=$.af;$.ca=$.ast;$.ce=$.af;$.chr=$.af;$.de=$.ast;$.ee=$.af;$.el=$.af;$.en=$.ast;$.et=$.ast;$.eu=$.af;$.fa=$.am;$.fi=$.ast;$.fil=$.ceb;$.fo=$.af;$.fur=$.af;$.fy=$.ast;$.gl=$.ast;$.gu=$.am;$.ha=$.af;$.hi=$.am;$.hr=$.bs;$.hsb=$.dsb;$.hu=$.af;$.hy=$.ff;$.ia=$.ast;$.id=$.dz;$.ig=$.dz;$.ja=$.dz;$.jgo=$.af;$.jv=$.dz;$.ka=$.af;$.kea=$.dz;$.kk=$.af;$.kl=$.af;$.km=$.dz;$.kn=$.am;$.ko=$.dz;$.ku=$.af;$.ky=$.af;$.lb=$.af;$.lkt=$.dz;$.lo=$.dz;$.ml=$.af;$.mn=$.af;$.mr=$.af;$.ms=$.dz;$.my=$.dz;$.nb=$.af;$.ne=$.af;$.nl=$.ast;$.nn=$.af;$.no=$.af;$.or=$.af;$.pcm=$.am;$.ps=$.af;$.rm=$.af;$.sah=$.dz;$.sc=$.ast;$.sd=$.af;$.sk=$.cs;$.so=$.af;$.sq=$.af;$.sr=$.bs;$.su=$.dz;$.sv=$.ast;$.sw=$.ast;$.ta=$.af;$.te=$.af;$.th=$.dz;$.ti=$.pa;$.tk=$.af;$.to=$.dz;$.tr=$.af;$.ug=$.af;$.uk=$.ru;$.ur=$.ast;$.uz=$.af;$.vi=$.dz;$.wae=$.af;$.wo=$.dz;$.yi=$.ast;$.yo=$.dz;$.yue=$.dz;$.zh=$.dz;$.zu=$.am;var PluralRuleFunctions=$;function getPluralRulesLocale(A){return A==="pt-PT"?A:getLanguageFromLanguageTag(A)}var LANGUAGE_REG_EXP=/^([a-z0-9]+)/i;function getLanguageFromLanguageTag(A){var e=A.match(LANGUAGE_REG_EXP);if(!e)throw new TypeError("Invalid locale: ".concat(A));return e[1]}function _classCallCheck$3(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(A,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(A,i.key,i)}}function _createClass$3(A,e,t){return e&&_defineProperties$3(A.prototype,e),t&&_defineProperties$3(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var PluralRules=function(){function A(e,t){_classCallCheck$3(this,A);var i=A.supportedLocalesOf(e);if(i.length===0)throw new RangeError("Unsupported locale: "+e);if(t&&t.type!=="cardinal")throw new RangeError('Only "cardinal" "type" is supported');this.$=PluralRuleFunctions[getPluralRulesLocale(i[0])]}return _createClass$3(A,[{key:"select",value:function(t){return this.$(t)}}],[{key:"supportedLocalesOf",value:function(t){return typeof t=="string"&&(t=[t]),t.filter(function(i){return PluralRuleFunctions[getPluralRulesLocale(i)]})}}]),A}();function _typeof$5(A){return _typeof$5=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$5(A)}function ownKeys$9(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$9(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$9(Object(t),!0).forEach(function(i){_defineProperty$9(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$9(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$9(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}function _slicedToArray$1(A,e){return _arrayWithHoles$1(A)||_iterableToArrayLimit$1(A,e)||_unsupportedIterableToArray$2(A,e)||_nonIterableRest$1()}function _nonIterableRest$1(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray$2(A,e){if(!!A){if(typeof A=="string")return _arrayLikeToArray$2(A,e);var t=Object.prototype.toString.call(A).slice(8,-1);if(t==="Object"&&A.constructor&&(t=A.constructor.name),t==="Map"||t==="Set")return Array.from(A);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray$2(A,e)}}function _arrayLikeToArray$2(A,e){(e==null||e>A.length)&&(e=A.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=A[t];return i}function _iterableToArrayLimit$1(A,e){var t=A==null?null:typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t!=null){var i=[],n=!0,g=!1,I,o;try{for(t=t.call(A);!(n=(I=t.next()).done)&&(i.push(I.value),!(e&&i.length===e));n=!0);}catch(a){g=!0,o=a}finally{try{!n&&t.return!=null&&t.return()}finally{if(g)throw o}}return i}}function _arrayWithHoles$1(A){if(Array.isArray(A))return A}function _classCallCheck$2(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(A,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(A,i.key,i)}}function _createClass$2(A,e,t){return e&&_defineProperties$2(A.prototype,e),t&&_defineProperties$2(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var UNITS=["second","minute","hour","day","week","month","quarter","year"],NUMERIC_VALUES=["auto","always"],STYLE_VALUES=["long","short","narrow"],LOCALE_MATCHER_VALUES=["lookup","best fit"],RelativeTimeFormat=function(){function A(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};_classCallCheck$2(this,A);var i=t.numeric,n=t.style,g=t.localeMatcher;if(this.numeric="always",this.style="long",this.localeMatcher="lookup",i!==void 0){if(NUMERIC_VALUES.indexOf(i)<0)throw new RangeError('Invalid "numeric" option: '.concat(i));this.numeric=i}if(n!==void 0){if(STYLE_VALUES.indexOf(n)<0)throw new RangeError('Invalid "style" option: '.concat(n));this.style=n}if(g!==void 0){if(LOCALE_MATCHER_VALUES.indexOf(g)<0)throw new RangeError('Invalid "localeMatcher" option: '.concat(g));this.localeMatcher=g}if(typeof e=="string"&&(e=[e]),e.push(getDefaultLocale()),this.locale=A.supportedLocalesOf(e,{localeMatcher:this.localeMatcher})[0],!this.locale)throw new Error("No supported locale was found");PluralRules.supportedLocalesOf(this.locale).length>0?this.pluralRules=new PluralRules(this.locale):console.warn('"'.concat(this.locale,'" locale is not supported')),typeof Intl<"u"&&Intl.NumberFormat?(this.numberFormat=new Intl.NumberFormat(this.locale),this.numberingSystem=this.numberFormat.resolvedOptions().numberingSystem):this.numberingSystem="latn",this.locale=resolveLocale(this.locale,{localeMatcher:this.localeMatcher})}return _createClass$2(A,[{key:"format",value:function(){var t=parseFormatArgs(arguments),i=_slicedToArray$1(t,2),n=i[0],g=i[1];return this.getRule(n,g).replace("{0}",this.formatNumber(Math.abs(n)))}},{key:"formatToParts",value:function(){var t=parseFormatArgs(arguments),i=_slicedToArray$1(t,2),n=i[0],g=i[1],I=this.getRule(n,g),o=I.indexOf("{0}");if(o<0)return[{type:"literal",value:I}];var a=[];return o>0&&a.push({type:"literal",value:I.slice(0,o)}),a=a.concat(this.formatNumberToParts(Math.abs(n)).map(function(r){return _objectSpread$9(_objectSpread$9({},r),{},{unit:g})})),o+3<I.length-1&&a.push({type:"literal",value:I.slice(o+3)}),a}},{key:"getRule",value:function(t,i){var n=getLocaleData$1(this.locale)[this.style][i];if(typeof n=="string")return n;if(this.numeric==="auto"){if(t===-2||t===-1){var g=n["previous".concat(t===-1?"":"-"+Math.abs(t))];if(g)return g}else if(t===1||t===2){var I=n["next".concat(t===1?"":"-"+Math.abs(t))];if(I)return I}else if(t===0&&n.current)return n.current}var o=n[isNegative(t)?"past":"future"];if(typeof o=="string")return o;var a=this.pluralRules&&this.pluralRules.select(Math.abs(t))||"other";return o[a]||o.other}},{key:"formatNumber",value:function(t){return this.numberFormat?this.numberFormat.format(t):String(t)}},{key:"formatNumberToParts",value:function(t){return this.numberFormat&&this.numberFormat.formatToParts?this.numberFormat.formatToParts(t):[{type:"integer",value:this.formatNumber(t)}]}},{key:"resolvedOptions",value:function(){return{locale:this.locale,style:this.style,numeric:this.numeric,numberingSystem:this.numberingSystem}}}]),A}();RelativeTimeFormat.supportedLocalesOf=function(A){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(typeof A=="string")A=[A];else if(!Array.isArray(A))throw new TypeError('Invalid "locales" argument');return A.filter(function(t){return resolveLocale(t,e)})};RelativeTimeFormat.addLocale=addLocaleData$1;RelativeTimeFormat.setDefaultLocale=setDefaultLocale;RelativeTimeFormat.getDefaultLocale=getDefaultLocale;RelativeTimeFormat.PluralRules=PluralRules;var UNIT_ERROR='Invalid "unit" argument';function parseUnit(A){if(_typeof$5(A)==="symbol")throw new TypeError(UNIT_ERROR);if(typeof A!="string")throw new RangeError("".concat(UNIT_ERROR,": ").concat(A));if(A[A.length-1]==="s"&&(A=A.slice(0,A.length-1)),UNITS.indexOf(A)<0)throw new RangeError("".concat(UNIT_ERROR,": ").concat(A));return A}var NUMBER_ERROR='Invalid "number" argument';function parseNumber(A){if(A=Number(A),Number.isFinite&&!Number.isFinite(A))throw new RangeError("".concat(NUMBER_ERROR,": ").concat(A));return A}function isNegativeZero(A){return 1/A===-1/0}function isNegative(A){return A<0||A===0&&isNegativeZero(A)}function parseFormatArgs(A){if(A.length<2)throw new TypeError('"unit" argument is required');return[parseNumber(A[0]),parseUnit(A[1])]}function _typeof$4(A){return _typeof$4=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$4(A)}function _classCallCheck$1(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(A,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(A,i.key,i)}}function _createClass$1(A,e,t){return e&&_defineProperties$1(A.prototype,e),t&&_defineProperties$1(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var Cache=function(){function A(){_classCallCheck$1(this,A),this.cache={}}return _createClass$1(A,[{key:"get",value:function(){for(var t=this.cache,i=arguments.length,n=new Array(i),g=0;g<i;g++)n[g]=arguments[g];for(var I=0,o=n;I<o.length;I++){var a=o[I];if(_typeof$4(t)!=="object")return;t=t[a]}return t}},{key:"put",value:function(){for(var t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];for(var g=i.pop(),I=i.pop(),o=this.cache,a=0,r=i;a<r.length;a++){var s=r[a];_typeof$4(o[s])!=="object"&&(o[s]={}),o=o[s]}return o[I]=g}}]),A}();function _typeof$3(A){return _typeof$3=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$3(A)}function _createForOfIteratorHelperLoose$1(A,e){var t=typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t)return(t=t.call(A)).next.bind(t);if(Array.isArray(A)||(t=_unsupportedIterableToArray$1(A))||e&&A&&typeof A.length=="number"){t&&(A=t);var i=0;return function(){return i>=A.length?{done:!0}:{done:!1,value:A[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray$1(A,e){if(!!A){if(typeof A=="string")return _arrayLikeToArray$1(A,e);var t=Object.prototype.toString.call(A).slice(8,-1);if(t==="Object"&&A.constructor&&(t=A.constructor.name),t==="Map"||t==="Set")return Array.from(A);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray$1(A,e)}}function _arrayLikeToArray$1(A,e){(e==null||e>A.length)&&(e=A.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=A[t];return i}function chooseLocale(A,e){for(var t=_createForOfIteratorHelperLoose$1(A),i;!(i=t()).done;){var n=i.value;if(e(n))return n;for(var g=n.split("-");g.length>1;)if(g.pop(),n=g.join("-"),e(n))return n}throw new Error("No locale data has been registered for any of the locales: ".concat(A.join(", ")))}function intlDateTimeFormatSupported(){var A=(typeof Intl>"u"?"undefined":_typeof$3(Intl))==="object";return A&&typeof Intl.DateTimeFormat=="function"}function _typeof$2(A){return _typeof$2=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$2(A)}function isStyleObject(A){return isObject(A)&&(Array.isArray(A.steps)||Array.isArray(A.gradation)||Array.isArray(A.flavour)||typeof A.flavour=="string"||Array.isArray(A.labels)||typeof A.labels=="string"||Array.isArray(A.units)||typeof A.custom=="function")}var OBJECT_CONSTRUCTOR={}.constructor;function isObject(A){return _typeof$2(A)!==void 0&&A!==null&&A.constructor===OBJECT_CONSTRUCTOR}var minute=60,hour=60*minute,day=24*hour,week=7*day,month=30.44*day,year=146097/400*day;function getSecondsInUnit(A){switch(A){case"second":return 1;case"minute":return minute;case"hour":return hour;case"day":return day;case"week":return week;case"month":return month;case"year":return year}}function getStepDenominator(A){return A.factor!==void 0?A.factor:getSecondsInUnit(A.unit||A.formatAs)||1}function getRoundFunction(A){switch(A){case"floor":return Math.floor;default:return Math.round}}function getDiffRatioToNextRoundedNumber(A){switch(A){case"floor":return 1;default:return .5}}function _typeof$1(A){return _typeof$1=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$1(A)}function getStepMinTime(A,e){var t=e.prevStep,i=e.timestamp,n=e.now,g=e.future,I=e.round,o;return t&&(t.id||t.unit)&&(o=A["threshold_for_".concat(t.id||t.unit)]),o===void 0&&A.threshold!==void 0&&(o=A.threshold,typeof o=="function"&&(o=o(n,g))),o===void 0&&(o=A.minTime),_typeof$1(o)==="object"&&(t&&t.id&&o[t.id]!==void 0?o=o[t.id]:o=o.default),typeof o=="function"&&(o=o(i,{future:g,getMinTimeForUnit:function(r,s){return _getMinTimeForUnit(r,s||t&&t.formatAs,{round:I})}})),o===void 0&&A.test&&(A.test(i,{now:n,future:g})?o=0:o=9007199254740991),o===void 0&&(t?A.formatAs&&t.formatAs&&(o=_getMinTimeForUnit(A.formatAs,t.formatAs,{round:I})):o=0),o===void 0&&console.warn("[javascript-time-ago] A step should specify `minTime`:\n"+JSON.stringify(A,null,2)),o}function _getMinTimeForUnit(A,e,t){var i=t.round,n=getSecondsInUnit(A),g;if(e==="now"?g=getSecondsInUnit(A):g=getSecondsInUnit(e),n!==void 0&&g!==void 0)return n-g*(1-getDiffRatioToNextRoundedNumber(i))}function ownKeys$8(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$8(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$8(Object(t),!0).forEach(function(i){_defineProperty$8(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$8(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$8(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}function getStep(A,e,t){var i=t.now,n=t.future,g=t.round,I=t.units,o=t.getNextStep;A=filterStepsByUnits(A,I);var a=_getStep(A,e,{now:i,future:n,round:g});if(o){if(a){var r=A[A.indexOf(a)-1],s=A[A.indexOf(a)+1];return[r,a,s]}return[void 0,void 0,A[0]]}return a}function _getStep(A,e,t){var i=t.now,n=t.future,g=t.round;if(A.length!==0){var I=getStepIndex(A,e,{now:i,future:n||e<0,round:g});if(I!==-1){var o=A[I];if(o.granularity){var a=getRoundFunction(g)(Math.abs(e)/getStepDenominator(o)/o.granularity)*o.granularity;if(a===0&&I>0)return A[I-1]}return o}}}function getStepIndex(A,e,t){var i=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,n=getStepMinTime(A[i],_objectSpread$8({prevStep:A[i-1],timestamp:t.now-e*1e3},t));return n===void 0||Math.abs(e)<n?i-1:i===A.length-1?i:getStepIndex(A,e,t,i+1)}function filterStepsByUnits(A,e){return A.filter(function(t){var i=t.unit,n=t.formatAs;return i=i||n,i?e.indexOf(i)>=0:!0})}function getTimeToNextUpdateForUnit(A,e,t){var i=t.now,n=t.round;if(!!getSecondsInUnit(A)){var g=getSecondsInUnit(A)*1e3,I=e>i,o=Math.abs(e-i),a=getRoundFunction(n)(o/g)*g;return I?a>0?o-a+getDiffToPreviousRoundedNumber(n,g):o-a+1:-(o-a)+getDiffToNextRoundedNumber(n,g)}}function getDiffToNextRoundedNumber(A,e){return getDiffRatioToNextRoundedNumber(A)*e}function getDiffToPreviousRoundedNumber(A,e){return(1-getDiffRatioToNextRoundedNumber(A))*e+1}var YEAR=365*24*60*60*1e3,INFINITY=1e3*YEAR;function getTimeToNextUpdate(A,e,t){var i=t.prevStep,n=t.nextStep,g=t.now,I=t.future,o=t.round,a=A.getTime?A.getTime():A,r=function(c){return getTimeToNextUpdateForUnit(c,a,{now:g,round:o})},s=getTimeToStepChange(I?e:n,a,{future:I,now:g,round:o,prevStep:I?i:e});if(s!==void 0){var B;if(e&&(e.getTimeToNextUpdate&&(B=e.getTimeToNextUpdate(a,{getTimeToNextUpdateForUnit:r,getRoundFunction,now:g,future:I,round:o})),B===void 0)){var C=e.unit||e.formatAs;C&&(B=r(C))}return B===void 0?s:Math.min(B,s)}}function getStepChangesAt(A,e,t){var i=t.now,n=t.future,g=t.round,I=t.prevStep,o=getStepMinTime(A,{timestamp:e,now:i,future:n,round:g,prevStep:I});if(o!==void 0)return n?e-o*1e3+1:o===0&&e===i?INFINITY:e+o*1e3}function getTimeToStepChange(A,e,t){var i=t.now,n=t.future,g=t.round,I=t.prevStep;if(A){var o=getStepChangesAt(A,e,{now:i,future:n,round:g,prevStep:I});return o===void 0?void 0:o-i}else return n?e-i+1:INFINITY}var localesData={};function getLocaleData(A){return localesData[A]}function addLocaleData(A){if(!A)throw new Error("[javascript-time-ago] No locale data passed.");localesData[A.locale]=A}var round$1=[{formatAs:"now"},{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"}],round={steps:round$1,labels:"long"};function ownKeys$7(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$7(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$7(Object(t),!0).forEach(function(i){_defineProperty$7(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$7(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$7(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var defaultStyle=_objectSpread$7(_objectSpread$7({},round),{},{steps:round.steps.filter(function(A){return A.formatAs!=="second"})}),approximate$1=[{factor:1,unit:"now"},{threshold:1,threshold_for_now:45.5,factor:1,unit:"second"},{threshold:45.5,factor:minute,unit:"minute"},{threshold:2.5*minute,granularity:5,factor:minute,unit:"minute"},{threshold:22.5*minute,factor:.5*hour,unit:"half-hour"},{threshold:42.5*minute,threshold_for_minute:52.5*minute,factor:hour,unit:"hour"},{threshold:20.5/24*day,factor:day,unit:"day"},{threshold:5.5*day,factor:week,unit:"week"},{threshold:3.5*week,factor:month,unit:"month"},{threshold:10.5*month,factor:year,unit:"year"}],approximate={gradation:approximate$1,flavour:"long",units:["now","minute","hour","day","week","month","year"]},approximateTime={gradation:approximate$1,flavour:"long-time",units:["now","minute","hour","day","week","month","year"]};function getDate(A){return A instanceof Date?A:new Date(A)}var steps=[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"}],formatters={},monthAndDay={minTime:function A(e,t){t.future;var i=t.getMinTimeForUnit;return i("day")},format:function A(e,t){return formatters[t]||(formatters[t]={}),formatters[t].dayMonth||(formatters[t].dayMonth=new Intl.DateTimeFormat(t,{month:"short",day:"numeric"})),formatters[t].dayMonth.format(getDate(e))}},yearMonthAndDay={minTime:function A(e,t){var i=t.future;if(i){var n=new Date(new Date(e).getFullYear(),0).getTime()-1;return(e-n)/1e3}else{var g=new Date(new Date(e).getFullYear()+1,0).getTime();return(g-e)/1e3}},format:function A(e,t){return formatters[t]||(formatters[t]={}),formatters[t].dayMonthYear||(formatters[t].dayMonthYear=new Intl.DateTimeFormat(t,{year:"numeric",month:"short",day:"numeric"})),formatters[t].dayMonthYear.format(getDate(e))}};intlDateTimeFormatSupported()?steps.push(monthAndDay,yearMonthAndDay):steps.push({formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"});var twitter={steps,labels:["mini","short-time","narrow","short"]};function ownKeys$6(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$6(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$6(Object(t),!0).forEach(function(i){_defineProperty$6(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$6(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$6(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterNow=_objectSpread$6(_objectSpread$6({},twitter),{},{steps:[{formatAs:"now"}].concat(twitter.steps)});function ownKeys$5(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$5(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$5(Object(t),!0).forEach(function(i){_defineProperty$5(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$5(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$5(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterMinute=_objectSpread$5(_objectSpread$5({},twitter),{},{steps:twitter.steps.filter(function(A){return A.formatAs!=="second"})});function ownKeys$4(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$4(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$4(Object(t),!0).forEach(function(i){_defineProperty$4(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$4(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$4(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterMinuteNow=_objectSpread$4(_objectSpread$4({},twitterMinute),{},{steps:[{formatAs:"now"}].concat(twitterMinute.steps)});function ownKeys$3(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$3(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$3(Object(t),!0).forEach(function(i){_defineProperty$3(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$3(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$3(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterFirstMinute=_objectSpread$3(_objectSpread$3({},twitter),{},{steps:twitter.steps.filter(function(A){return A.formatAs!=="second"}).map(function(A){return A.formatAs==="minute"?_objectSpread$3(_objectSpread$3({},A),{},{minTime:minute}):A})}),mini={steps:[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"month"},{formatAs:"year"}],labels:["mini","short-time","narrow","short"]};function ownKeys$2(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$2(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$2(Object(t),!0).forEach(function(i){_defineProperty$2(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$2(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$2(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var miniNow=_objectSpread$2(_objectSpread$2({},mini),{},{steps:[{formatAs:"now"}].concat(mini.steps)});function ownKeys$1(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$1(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$1(Object(t),!0).forEach(function(i){_defineProperty$1(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$1(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$1(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var miniMinute=_objectSpread$1(_objectSpread$1({},mini),{},{steps:mini.steps.filter(function(A){return A.formatAs!=="second"})});function ownKeys(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys(Object(t),!0).forEach(function(i){_defineProperty(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var miniMinuteNow=_objectSpread(_objectSpread({},miniMinute),{},{steps:[{formatAs:"now"}].concat(miniMinute.steps)});function getStyleByName(A){switch(A){case"default":case"round":return round;case"round-minute":return defaultStyle;case"approximate":return approximate;case"time":case"approximate-time":return approximateTime;case"mini":return mini;case"mini-now":return miniNow;case"mini-minute":return miniMinute;case"mini-minute-now":return miniMinuteNow;case"twitter":return twitter;case"twitter-now":return twitterNow;case"twitter-minute":return twitterMinute;case"twitter-minute-now":return twitterMinuteNow;case"twitter-first-minute":return twitterFirstMinute;default:return approximate}}function _typeof(A){return _typeof=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(A)}function _createForOfIteratorHelperLoose(A,e){var t=typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t)return(t=t.call(A)).next.bind(t);if(Array.isArray(A)||(t=_unsupportedIterableToArray(A))||e&&A&&typeof A.length=="number"){t&&(A=t);var i=0;return function(){return i>=A.length?{done:!0}:{done:!1,value:A[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _slicedToArray(A,e){return _arrayWithHoles(A)||_iterableToArrayLimit(A,e)||_unsupportedIterableToArray(A,e)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray(A,e){if(!!A){if(typeof A=="string")return _arrayLikeToArray(A,e);var t=Object.prototype.toString.call(A).slice(8,-1);if(t==="Object"&&A.constructor&&(t=A.constructor.name),t==="Map"||t==="Set")return Array.from(A);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(A,e)}}function _arrayLikeToArray(A,e){(e==null||e>A.length)&&(e=A.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=A[t];return i}function _iterableToArrayLimit(A,e){var t=A==null?null:typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t!=null){var i=[],n=!0,g=!1,I,o;try{for(t=t.call(A);!(n=(I=t.next()).done)&&(i.push(I.value),!(e&&i.length===e));n=!0);}catch(a){g=!0,o=a}finally{try{!n&&t.return!=null&&t.return()}finally{if(g)throw o}}return i}}function _arrayWithHoles(A){if(Array.isArray(A))return A}function _classCallCheck(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(A,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(A,i.key,i)}}function _createClass(A,e,t){return e&&_defineProperties(A.prototype,e),t&&_defineProperties(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var TimeAgo=function(){function A(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},i=t.polyfill;_classCallCheck(this,A),typeof e=="string"&&(e=[e]),this.locale=chooseLocale(e.concat(A.getDefaultLocale()),getLocaleData),typeof Intl<"u"&&Intl.NumberFormat&&(this.numberFormat=new Intl.NumberFormat(this.locale)),i===!1?(this.IntlRelativeTimeFormat=Intl.RelativeTimeFormat,this.IntlPluralRules=Intl.PluralRules):(this.IntlRelativeTimeFormat=RelativeTimeFormat,this.IntlPluralRules=RelativeTimeFormat.PluralRules),this.relativeTimeFormatCache=new Cache,this.pluralRulesCache=new Cache}return _createClass(A,[{key:"format",value:function(t,i,n){n||(i&&!isStyle(i)?(n=i,i=void 0):n={}),i||(i=defaultStyle),typeof i=="string"&&(i=getStyleByName(i));var g=getTimestamp(t),I=this.getLabels(i.flavour||i.labels),o=I.labels,a=I.labelsType,r;i.now!==void 0&&(r=i.now),r===void 0&&n.now!==void 0&&(r=n.now),r===void 0&&(r=Date.now());var s=(r-g)/1e3,B=n.future||s<0,C=getNowLabel(o,getLocaleData(this.locale).now,getLocaleData(this.locale).long,B);if(i.custom){var l=i.custom({now:r,date:new Date(g),time:g,elapsed:s,locale:this.locale});if(l!==void 0)return l}var c=getTimeIntervalMeasurementUnits(i.units,o,C),Q=n.round||i.round,E=getStep(i.gradation||i.steps||defaultStyle.steps,s,{now:r,units:c,round:Q,future:B,getNextStep:!0}),f=_slicedToArray(E,3),u=f[0],h=f[1],w=f[2],N=this.formatDateForStep(g,h,s,{labels:o,labelsType:a,nowLabel:C,now:r,future:B,round:Q})||"";if(n.getTimeToNextUpdate){var U=getTimeToNextUpdate(g,h,{nextStep:w,prevStep:u,now:r,future:B,round:Q});return[N,U]}return N}},{key:"formatDateForStep",value:function(t,i,n,g){var I=this,o=g.labels,a=g.labelsType,r=g.nowLabel,s=g.now,B=g.future,C=g.round;if(!!i){if(i.format)return i.format(t,this.locale,{formatAs:function(f,u){return I.formatValue(u,f,{labels:o,future:B})},now:s,future:B});var l=i.unit||i.formatAs;if(!l)throw new Error("[javascript-time-ago] Each step must define either `formatAs` or `format()`. Step: ".concat(JSON.stringify(i)));if(l==="now")return r;var c=Math.abs(n)/getStepDenominator(i);i.granularity&&(c=getRoundFunction(C)(c/i.granularity)*i.granularity);var Q=-1*Math.sign(n)*getRoundFunction(C)(c);switch(Q===0&&(B?Q=0:Q=-0),a){case"long":case"short":case"narrow":return this.getFormatter(a).format(Q,l);default:return this.formatValue(Q,l,{labels:o,future:B})}}}},{key:"formatValue",value:function(t,i,n){var g=n.labels,I=n.future;return this.getFormattingRule(g,i,t,{future:I}).replace("{0}",this.formatNumber(Math.abs(t)))}},{key:"getFormattingRule",value:function(t,i,n,g){var I=g.future;if(this.locale,t=t[i],typeof t=="string")return t;var o=n===0?I?"future":"past":n<0?"past":"future",a=t[o]||t;if(typeof a=="string")return a;var r=this.getPluralRules().select(Math.abs(n));return a[r]||a.other}},{key:"formatNumber",value:function(t){return this.numberFormat?this.numberFormat.format(t):String(t)}},{key:"getFormatter",value:function(t){return this.relativeTimeFormatCache.get(this.locale,t)||this.relativeTimeFormatCache.put(this.locale,t,new this.IntlRelativeTimeFormat(this.locale,{style:t}))}},{key:"getPluralRules",value:function(){return this.pluralRulesCache.get(this.locale)||this.pluralRulesCache.put(this.locale,new this.IntlPluralRules(this.locale))}},{key:"getLabels",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];typeof t=="string"&&(t=[t]),t=t.map(function(o){switch(o){case"tiny":case"mini-time":return"mini";default:return o}}),t=t.concat("long");for(var i=getLocaleData(this.locale),n=_createForOfIteratorHelperLoose(t),g;!(g=n()).done;){var I=g.value;if(i[I])return{labelsType:I,labels:i[I]}}}}]),A}(),defaultLocale="en";TimeAgo.getDefaultLocale=function(){return defaultLocale};TimeAgo.setDefaultLocale=function(A){return defaultLocale=A};TimeAgo.addDefaultLocale=function(A){if(defaultLocaleHasBeenSpecified)return console.error("[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.");defaultLocaleHasBeenSpecified=!0,TimeAgo.setDefaultLocale(A.locale),TimeAgo.addLocale(A)};var defaultLocaleHasBeenSpecified;TimeAgo.addLocale=function(A){addLocaleData(A),RelativeTimeFormat.addLocale(A)};TimeAgo.locale=TimeAgo.addLocale;TimeAgo.addLabels=function(A,e,t){var i=getLocaleData(A);i||(addLocaleData({locale:A}),i=getLocaleData(A)),i[e]=t};function getTimestamp(A){if(A.constructor===Date||isMockedDate(A))return A.getTime();if(typeof A=="number")return A;throw new Error("Unsupported relative time formatter input: ".concat(_typeof(A),", ").concat(A))}function isMockedDate(A){return _typeof(A)==="object"&&typeof A.getTime=="function"}function getTimeIntervalMeasurementUnits(A,e,t){var i=Object.keys(e);return t&&i.push("now"),A&&(i=A.filter(function(n){return n==="now"||i.indexOf(n)>=0})),i}function getNowLabel(A,e,t,i){var n=A.now||e&&e.now;if(n)return typeof n=="string"?n:i?n.future:n.past;if(t&&t.second&&t.second.current)return t.second.current}function isStyle(A){return typeof A=="string"||isStyleObject(A)}var english_locale={locale:"en",long:{year:{previous:"last year",current:"this year",next:"next year",past:{one:"{0} year ago",other:"{0} years ago"},future:{one:"in {0} year",other:"in {0} years"}},quarter:{previous:"last quarter",current:"this quarter",next:"next quarter",past:{one:"{0} quarter ago",other:"{0} quarters ago"},future:{one:"in {0} quarter",other:"in {0} quarters"}},month:{previous:"last month",current:"this month",next:"next month",past:{one:"{0} month ago",other:"{0} months ago"},future:{one:"in {0} month",other:"in {0} months"}},week:{previous:"last week",current:"this week",next:"next week",past:{one:"{0} week ago",other:"{0} weeks ago"},future:{one:"in {0} week",other:"in {0} weeks"}},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:{one:"{0} hour ago",other:"{0} hours ago"},future:{one:"in {0} hour",other:"in {0} hours"}},minute:{current:"this minute",past:{one:"{0} minute ago",other:"{0} minutes ago"},future:{one:"in {0} minute",other:"in {0} minutes"}},second:{current:"now",past:{one:"{0} second ago",other:"{0} seconds ago"},future:{one:"in {0} second",other:"in {0} seconds"}}},short:{year:{previous:"last yr.",current:"this yr.",next:"next yr.",past:"{0} yr. ago",future:"in {0} yr."},quarter:{previous:"last qtr.",current:"this qtr.",next:"next qtr.",past:{one:"{0} qtr. ago",other:"{0} qtrs. ago"},future:{one:"in {0} qtr.",other:"in {0} qtrs."}},month:{previous:"last mo.",current:"this mo.",next:"next mo.",past:"{0} mo. ago",future:"in {0} mo."},week:{previous:"last wk.",current:"this wk.",next:"next wk.",past:"{0} wk. ago",future:"in {0} wk."},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:"{0} hr. ago",future:"in {0} hr."},minute:{current:"this minute",past:"{0} min. ago",future:"in {0} min."},second:{current:"now",past:"{0} sec. ago",future:"in {0} sec."}},narrow:{year:{previous:"last yr.",current:"this yr.",next:"next yr.",past:"{0} yr. ago",future:"in {0} yr."},quarter:{previous:"last qtr.",current:"this qtr.",next:"next qtr.",past:{one:"{0} qtr. ago",other:"{0} qtrs. ago"},future:{one:"in {0} qtr.",other:"in {0} qtrs."}},month:{previous:"last mo.",current:"this mo.",next:"next mo.",past:"{0} mo. ago",future:"in {0} mo."},week:{previous:"last wk.",current:"this wk.",next:"next wk.",past:"{0} wk. ago",future:"in {0} wk."},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:"{0} hr. ago",future:"in {0} hr."},minute:{current:"this minute",past:"{0} min. ago",future:"in {0} min."},second:{current:"now",past:"{0} sec. ago",future:"in {0} sec."}},now:{now:{current:"now",future:"in a moment",past:"just now"}},mini:{year:"{0}yr",month:"{0}mo",week:"{0}wk",day:"{0}d",hour:"{0}h",minute:"{0}m",second:"{0}s",now:"now"},"short-time":{year:"{0} yr.",month:"{0} mo.",week:"{0} wk.",day:{one:"{0} day",other:"{0} days"},hour:"{0} hr.",minute:"{0} min.",second:"{0} sec."},"long-time":{year:{one:"{0} year",other:"{0} years"},month:{one:"{0} month",other:"{0} months"},week:{one:"{0} week",other:"{0} weeks"},day:{one:"{0} day",other:"{0} days"},hour:{one:"{0} hour",other:"{0} hours"},minute:{one:"{0} minute",other:"{0} minutes"},second:{one:"{0} second",other:"{0} seconds"}}},SX_ACC_CREATED=`<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12 6H18V8H12V6Z" fill="#F7F7F7"/>
<path d="M14 10L14 4L16 4L16 10L14 10Z" fill="#F7F7F7"/>
<circle cx="7" cy="5" r="2" stroke="#F7F7F7" stroke-width="2"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M1 15C1.47608 12.1623 3.94405 10 6.91704 10C9.89004 10 12.358 12.1623 12.8341 15H10.791C10.347 13.2748 8.78088 12 6.91704 12C5.0532 12 3.4871 13.2748 3.04306 15H1Z" fill="#F7F7F7"/>
</svg>
`,TxnList_svelte_svelte_type_style_lang="";function get_each_context(A,e,t){const i=A.slice();return i[15]=e[t],i}const get_first_slot_changes=A=>({}),get_first_slot_context=A=>({});function create_catch_block(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block(A){let e,t;return e=new Row({props:{name:A[18].title,detail:A[18].subtitle,amount:A[18].amount||"",fiat:A[18].fiat||"",$$slots:{below:[create_below_slot],right:[create_right_slot],icon:[create_icon_slot]},$$scope:{ctx:A}}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&1&&(g.name=i[18].title),n&1&&(g.detail=i[18].subtitle),n&1&&(g.amount=i[18].amount||""),n&1&&(g.fiat=i[18].fiat||""),n&33&&(g.$$scope={dirty:n,ctx:i}),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_icon_slot(A){let e,t;return e=new Put({props:{element:A[18].icon}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&1&&(g.element=i[18].icon),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_if_block_2(A){let e,t;return e=new PfpDisplay({props:{dim:36,name:A[18].name,ref:A[18].pfp,circular:A[15].type==="pending",rootStyle:"margin-left: 1em;"}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&1&&(g.name=i[18].name),n&1&&(g.ref=i[18].pfp),n&1&&(g.circular=i[15].type==="pending"),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_right_slot(A){let e,t,i=typeof A[18].pfp=="string"&&create_if_block_2(A);return{c(){i&&i.c(),e=empty()},m(n,g){i&&i.m(n,g),insert(n,e,g),t=!0},p(n,g){typeof n[18].pfp=="string"?i?(i.p(n,g),g&1&&transition_in(i,1)):(i=create_if_block_2(n),i.c(),transition_in(i,1),i.m(e.parentNode,e)):i&&(group_outros(),transition_out(i,1,1,()=>{i=null}),check_outros())},i(n){t||(transition_in(i),t=!0)},o(n){transition_out(i),t=!1},d(n){i&&i.d(n),n&&detach(e)}}}function create_if_block_1(A){let e;return{c(){e=element("span"),e.textContent="Pending",attr(e,"class","pill svelte-krovk1"),toggle_class(e,"display_none",!A[18].pending)},m(t,i){insert(t,e,i)},p(t,i){i&3&&toggle_class(e,"display_none",!t[18].pending)},d(t){t&&detach(e)}}}function create_if_block(A){let e,t,i=A[18].link.text+"",n,g,I,o;function a(){return A[4](A[18])}return{c(){e=element("span"),t=element("a"),n=text(i),attr(t,"href",g=A[18].link.href),attr(e,"class","link")},m(r,s){insert(r,e,s),append(e,t),append(t,n),I||(o=listen(t,"click",a),I=!0)},p(r,s){A=r,s&1&&i!==(i=A[18].link.text+"")&&set_data(n,i),s&1&&g!==(g=A[18].link.href)&&attr(t,"href",g)},d(r){r&&detach(e),I=!1,o()}}}function create_below_slot(A){let e,t,i=A[18].pending&&create_if_block_1(A),n=A[18].link&&create_if_block(A);return{c(){i&&i.c(),e=space(),n&&n.c(),t=empty()},m(g,I){i&&i.m(g,I),insert(g,e,I),n&&n.m(g,I),insert(g,t,I)},p(g,I){g[18].pending?i?i.p(g,I):(i=create_if_block_1(g),i.c(),i.m(e.parentNode,e)):i&&(i.d(1),i=null),g[18].link?n?n.p(g,I):(n=create_if_block(g),n.c(),n.m(t.parentNode,t)):n&&(n.d(1),n=null)},d(g){i&&i.d(g),g&&detach(e),n&&n.d(g),g&&detach(t)}}}function create_pending_block(A){let e;return{c(){e=text("Loading event...")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_each_block(A){let e,t,i,n={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block,then:create_then_block,catch:create_catch_block,value:18,blocks:[,,,]};return handle_promise(e=A[1](A[15]),n),{c(){n.block.c(),t=space()},m(g,I){n.block.m(g,n.anchor=I),n.mount=()=>t.parentNode,n.anchor=t,insert(g,t,I),i=!0},p(g,I){A=g,n.ctx=A,I&1&&e!==(e=A[1](A[15]))&&handle_promise(e,n)||update_await_block_branch(n,A,I)},i(g){i||(transition_in(n.block),i=!0)},o(g){for(let I=0;I<3;I+=1){const o=n.blocks[I];transition_out(o)}i=!1},d(g){n.block.d(g),n.token=null,n=null,g&&detach(t)}}}function create_fragment(A){let e,t,i;const n=A[3].first,g=create_slot(n,A,A[5],get_first_slot_context);let I=A[0],o=[];for(let r=0;r<I.length;r+=1)o[r]=create_each_block(get_each_context(A,I,r));const a=r=>transition_out(o[r],1,1,()=>{o[r]=null});return{c(){e=element("div"),g&&g.c(),t=space();for(let r=0;r<o.length;r+=1)o[r].c();attr(e,"class","txns no-margin")},m(r,s){insert(r,e,s),g&&g.m(e,null),append(e,t);for(let B=0;B<o.length;B+=1)o[B].m(e,null);i=!0},p(r,[s]){if(g&&g.p&&(!i||s&32)&&update_slot_base(g,n,r,r[5],i?get_slot_changes(n,r[5],s,get_first_slot_changes):get_all_dirty_from_scope(r[5]),get_first_slot_context),s&3){I=r[0];let B;for(B=0;B<I.length;B+=1){const C=get_each_context(r,I,B);o[B]?(o[B].p(C,s),transition_in(o[B],1)):(o[B]=create_each_block(C),o[B].c(),transition_in(o[B],1),o[B].m(e,null))}for(group_outros(),B=I.length;B<o.length;B+=1)a(B);check_outros()}},i(r){if(!i){transition_in(g,r);for(let s=0;s<I.length;s+=1)transition_in(o[s]);i=!0}},o(r){transition_out(g,r),o=o.filter(Boolean);for(let s=0;s<o.length;s+=1)transition_out(o[s]);i=!1},d(r){r&&detach(e),g&&g.d(r),destroy_each(o,r)}}}var TxnContext;(function(A){A.NONE="none",A.TOKEN="token",A.CONTACT="contact"})(TxnContext||(TxnContext={}));function instance(A,e,t){let{$$slots:i={},$$scope:n}=e,{events:g}=e,{context:I=TxnContext.NONE}=e;TxnContext.CONTACT,TxnContext.TOKEN;const o=c=>{const Q=dd("span",{class:"event-icon"});return Q.innerHTML=c,Q},a=o(SX_SEND);o(SX_RECV),o(SX_ACC_CREATED),TimeAgo.addDefaultLocale(english_locale);const r=new TimeAgo("en-US");function s(c){return r.format(c,"twitter")}const B={async pending(c){const{time:Q,data:{chain:E,coin:f,hash:u,owner:h,msg:w}}=c,N=await Chains.at(E),U=N.coins[f],Y=new BigNumber(c.data.msg.amount[0].amount).shiftedBy(-N.coins[f].decimals).toNumber(),d=w.toAddress,y=Agents.pathForContact(d),_=await Agents.getContact(y);return{title:`Send ${U.name}`,name:f,icon:a,subtitle:`${s(Q)} / ${_?_.name:d}`,amount:`${format_amount(Y,!0)} ${f}`,pfp:U.pfp,pending:!0}},async send(c){const{time:Q,data:{chain:E,coin:f,hash:u,owner:h,msg:w,height:N}}=c,U=await Chains.at(E),Y=U.coins[f],d=new BigNumber(c.data.msg.amount[0].amount).shiftedBy(-U.coins[f].decimals).toNumber(),y=w.toAddress,_=Agents.pathForContact(y),R=await Agents.getContact(_);return{title:`Sent ${Y.name}`,name:f,icon:o(SX_SEND),subtitle:`${s(Q)} / ${R?R.name:abbreviate_addr(y)}`,amount:`${format_amount(d,!0)} ${f}`,link:f==="SCRT"?{href:`https://secretnodes.com/secret/chains/pulsar-2/blocks/${N}/transactions/${u}`,text:"View on block explorer"}:null,pfp:Y.pfp}},async account_created(c){const{time:Q,data:{account:E}}=c,f=await Accounts.at(E);return{title:"Account created",subtitle:`${s(Q)} / ${f.name}`,name:f.name,icon:o(SX_ACC_CREATED),pfp:f.pfp||""}},async receive(c){const{time:Q,data:{height:E,amount:f,chain:u,coin:h,recipient:w,sender:N}}=c,U=N,Y=Agents.pathForContact(U),d=await Agents.getContact(Y),y=await Chains.at(u),_=y.coins[h],[,R]=R_TRANSFER_AMOUNT.exec(f),m=new BigNumber(R).shiftedBy(-y.coins[h].decimals).toNumber();return{title:`Received ${_.name}`,name:h,icon:o(SX_RECV),subtitle:`${s(Q)} / ${d?d.name:abbreviate_addr(U)}`,amount:`${format_amount(m,!0)} ${h}`,pfp:_.pfp}},transaction(c){}};async function C(c){return await B[c.type](c)}const l=c=>open_external_link(c.link.href);return A.$$set=c=>{"events"in c&&t(0,g=c.events),"context"in c&&t(2,I=c.context),"$$scope"in c&&t(5,n=c.$$scope)},[g,C,I,i,l,n]}class TxnList extends SvelteComponent{constructor(e){super(),init(this,e,instance,create_fragment,safe_not_equal,{events:0,context:2})}}function writableSync(A){const e=writable(A);return Object.assign(Object.create(e),{set(t){return A=t,e.set(t)},get(){return A}})}function derivedSync(A,e){if(Array.isArray(A))return Object.assign(Object.create(derived(A,e)),{get(){return e(...A)}});{let t;const i=derived(A,(n,g)=>{e(n,I=>{t=I,g(I)})});return Object.assign(Object.create(i),{get(){return t}})}}const yw_navigator=writableSync(null),yw_chain_ref=writableSync(""),yw_chain=derivedSync(yw_chain_ref,(A,e)=>{Chains.read().then(t=>e(t.at(A))).catch(t=>{e(null)}),Networks.read().then(t=>t.entries().some(([i,n])=>A===n.chain?(yw_network_ref.set(i),!0):!1)).catch(t=>{yw_network_ref.set("")})}),yw_network_ref=writableSync(""),yw_network=writableSync(null),yw_network_active=derivedSync(yw_network_ref,(A,e)=>{A?(async()=>{const i=(await Networks.read()).at(A);yw_network.set(i),i.chain!==yw_chain_ref.get()&&yw_chain_ref.set(i.chain);const g=(await Chains.read()).at(i.chain);e(Networks.activate(i,g))})():(yw_network.set(null),e(null))}),yw_family=writableSync("");yw_chain.subscribe(A=>yw_family.set(A?.family||""));const yw_account_ref=writableSync(""),yw_account=derivedSync(yw_account_ref,(A,e)=>{Accounts.read().then(t=>e(t.at(A))).catch(t=>{e(null)})}),yw_owner=derived([yw_account,yw_chain],([A,e],t)=>{t(Chains.addressFor(A.pubkey,e))}),yw_menu_vendor=writableSync(!1),yw_overlay_account=writableSync(!1),yw_overlay_network=writableSync(!1),store_cache=A=>writableSync(null);async function reload(A){switch(A){case SI_STORE_MEDIA:{const e=await Medias.read();yw_store_medias.update(()=>e);break}case SI_STORE_TAGS:{const e=await Tags.read();yw_store_tags.update(()=>e)}}}const yw_store_medias=store_cache(),yw_store_tags=store_cache();global_receive({updateStore({key:A}){reload(A)}});async function initialize_caches(){await Promise.all([reload(SI_STORE_MEDIA),reload(SI_STORE_TAGS)])}const yw_page=writableSync(null),yw_thread=writableSync(null),yw_path=writableSync("");derivedSync(yw_path,A=>`s2r://root/${A}`);writableSync("");const yw_notifications=writableSync([]),yw_nav_collapsed=writable(!1),yw_nav_visible=writableSync(!1),yw_progress=writableSync([0,0]),yw_search=writable(""),yw_cancel_search=writableSync(F_NOOP);writableSync(null);writableSync(0);writableSync([]);const yw_header_props=writableSync({});writableSync(null);const yw_menu_expanded=writableSync(!1),yw_overscroll_pct=writableSync(0),yw_context_popup=writableSync(null),yw_popup=writableSync(null);function popup_receive(A){yw_context_popup.set({account:A}),yw_popup.set(PopupReceive)}const yw_blur=writableSync(!1);once_store_updates(yw_navigator).then(()=>{const A=document.documentElement.style;window.addEventListener("resize",()=>{A.setProperty("--app-window-width",`${window.innerWidth}px`),A.setProperty("--app-window-height",`${window.innerHeight}px`)}),window.dispatchEvent(new Event("resize")),window.addEventListener("keydown",e=>{e.key==="Escape"&&yw_popup.get()&&yw_popup.set(null)})});const $_EXISTING=Symbol("use-existing-cache"),H_REGISTRY={[P_PUBLIC_SUFFIX_LIST]:{format:"text",parse(A){if(!A)return $_EXISTING;const e=[];for(let t of A.split(/\n/g))t=t.replace(/\s+|\/\/.*$/,""),t&&e.push(t);return e}},[P_STARSHELL_DECREES]:{format:"json",filter(A){return A.filter(e=>!0)}}};async function cache_put(A,e){return await browser.storage.local.set({[`@cache:${A}`]:e})}async function cache_get(A){return await storage_get(`@cache:${A}`)}class WebResourceCache{static async updateAll(){for(const e in H_REGISTRY){const t=H_REGISTRY[e],i=await fetch(e);switch(t.format){case"text":{const n=await i.text(),g=t.parse(n);if($_EXISTING===g)continue;await cache_put(e,{etag:i.headers.get("etag")??"",data:n});break}case"json":{let n=await i.json();"filter"in t&&(n=t.filter(n)),await cache_put(e,{etag:i.headers.get("etag")??"",data:n});break}}}}static async get(e){return(await cache_get(e))?.data||null}}export{run_all as $,ActionsLine as A,open_external_link as B,CheckboxField as C,qs as D,Events as E,global_receive as F,initialize_caches as G,yw_navigator as H,ode as I,register as J,login as K,F_NOOP as L,set_style as M,create_slot as N,toggle_class as O,P_STARSHELL_DECREES as P,append as Q,listen as R,SvelteComponent as S,update_slot_base as T,get_all_dirty_from_scope as U,Vault as V,WebResourceCache as W,XT_SECONDS as X,get_slot_changes as Y,group_outros as Z,check_outros as _,transition_out as a,Settings as a$,yw_nav_visible as a0,yw_blur as a1,compute_slots as a2,getContext as a3,createEventDispatcher as a4,onMount as a5,bubble as a6,src_url_equal as a7,set_data as a8,create_out_transition as a9,ATU8_DUMMY_VECTOR as aA,AlreadyRegisteredError as aB,InvalidPassphraseError as aC,add_render_callback as aD,create_bidirectional_transition as aE,slide as aF,yw_owner as aG,load_pfps as aH,Entities as aI,StarSelect as aJ,yw_network_active as aK,BigNumber as aL,XT_MINUTES as aM,CoinGecko as aN,format_amount as aO,oderac as aP,yw_family as aQ,subscribe_store as aR,onDestroy as aS,Agents as aT,Address as aU,Select as aV,text_to_buffer as aW,NB_MAX_MEMO as aX,syserr as aY,sha256$1 as aZ,format_fiat as a_,yw_search as aa,yw_cancel_search as ab,yw_thread as ac,yw_menu_vendor as ad,yw_overlay_network as ae,yw_chain as af,yw_chain_ref as ag,yw_overlay_account as ah,yw_account as ai,empty as aj,assign as ak,PfpDisplay as al,get_spread_update as am,get_spread_object as an,Close as ao,set_input_value as ap,handle_promise as aq,Chains as ar,update_await_block_branch as as,destroy_each as at,Row as au,acceptable as av,Field as aw,NL_PASSPHRASE_MINIMUM as ax,NL_PASSPHRASE_MAXIMUM as ay,ATU8_DUMMY_PHRASE as az,component_subscribe as b,SX_ICON_DROPDOWN as b0,fold as b1,string8_to_buffer as b2,Portrait as b3,oderom as b4,popup_receive as b5,forever as b6,Info as b7,SubHeader as b8,setContext as b9,logout as bA,yw_network as bB,dd as bC,objects_might_differ as bD,getAllContexts as bE,yw_network_ref as bF,once_store_updates as bG,timeout as bH,UnregisteredError as bI,RecoverableVaultError as bJ,CorruptedVaultError as bK,P_PUBLIC_SUFFIX_LIST as bL,R_DOMAIN_LOCALHOST as bM,R_DOMAIN_IP as bN,session_storage_remove as bO,create_store_class as bP,SI_STORE_APP_POLICIES as bQ,WritableStore as bR,session_storage_get as bS,global_broadcast as bT,fold_attrs as bU,R_TRANSFER_AMOUNT as bV,syswarn as bW,abbreviate_addr as bX,sha256_sync$1 as bY,afterUpdate as ba,writable as bb,tick as bc,Pfps as bd,ofe as be,ContactAgentType as bf,R_BECH32 as bg,InlineTags as bh,proper as bi,SX_ICON_EDIT$1 as bj,SX_ICON_DELETE as bk,quintOut as bl,Apps as bm,Networks as bn,TxnList as bo,svg_element as bp,yw_overscroll_pct as bq,yw_popup as br,yw_page as bs,yw_menu_expanded as bt,yw_notifications as bu,yw_nav_collapsed as bv,HtmlTag as bw,yw_header_props as bx,yw_progress as by,SX_ICON_CLOSE as bz,create_component as c,destroy_component as d,binding_callbacks as e,bind as f,space as g,element as h,init as i,insert as j,add_flush_callback as k,detach as l,mount_component as m,Secp256k1Key as n,Secrets as o,buffer_to_string8 as p,buffer_to_base64 as q,set_store_value as r,safe_not_equal as s,transition_in as t,Accounts as u,text as v,attr as w,noop$1 as x,yw_account_ref as y,SI_VERSION as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViLXJlc291cmNlLWNhY2hlLmIyYTRjODU3LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi92aXRlL21vZHVsZXByZWxvYWQtcG9seWZpbGwiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlL2ludGVybmFsL2luZGV4Lm1qcyIsIi4uLy4uLy4uL3NyYy91dGlsL2JlbHQudHMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmVjaDMyL2Rpc3QvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvZGV2LnRzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb2xhci1yZXB1YmxpYy93YXNtLXNlY3AyNTZrMS9idWlsZC9tb2R1bGUvbGliL2Zvcm1hdC9iYXNlNjQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNvbGFyLXJlcHVibGljL3dhc20tc2VjcDI1NmsxL2J1aWxkL21vZHVsZS9saWIvYmluL2hhc2hlcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac29sYXItcmVwdWJsaWMvd2FzbS1zZWNwMjU2azEvYnVpbGQvbW9kdWxlL2xpYi9iaW4vcmlwZW1kMTYwL3JpcGVtZDE2MC5iYXNlNjQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNvbGFyLXJlcHVibGljL3dhc20tc2VjcDI1NmsxL2J1aWxkL21vZHVsZS9saWIvYmluL3NlY3AyNTZrMS9zZWNwMjU2azEtd2FzbS10eXBlcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac29sYXItcmVwdWJsaWMvd2FzbS1zZWNwMjU2azEvYnVpbGQvbW9kdWxlL2xpYi9iaW4vc2VjcDI1NmsxL3NlY3AyNTZrMS5iYXNlNjQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNvbGFyLXJlcHVibGljL3dhc20tc2VjcDI1NmsxL2J1aWxkL21vZHVsZS9saWIvYmluL3NlY3AyNTZrMS9zZWNwMjU2azEtd2FzbS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac29sYXItcmVwdWJsaWMvd2FzbS1zZWNwMjU2azEvYnVpbGQvbW9kdWxlL2xpYi9iaW4vc2hhMjU2L3NoYTI1Ni5iYXNlNjQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNvbGFyLXJlcHVibGljL3dhc20tc2VjcDI1NmsxL2J1aWxkL21vZHVsZS9saWIvY3J5cHRvL3JpcGVtZDE2MC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac29sYXItcmVwdWJsaWMvd2FzbS1zZWNwMjU2azEvYnVpbGQvbW9kdWxlL2xpYi9jcnlwdG8vc2VjcDI1NmsxLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb2xhci1yZXB1YmxpYy93YXNtLXNlY3AyNTZrMS9idWlsZC9tb2R1bGUvbGliL2NyeXB0by9zaGEyNTYuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2hhMjU2LXVpbnQ4YXJyYXkvbGliL3NoYTI1Ni11aW50OGFycmF5LmpzIiwiLi4vLi4vLi4vc3JjL3V0aWwvZGF0YS50cyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvY29yZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvc2hhMjU2LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NyeXB0by1qcy94NjQtY29yZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvc2hhNTEyLmpzIiwiLi4vLi4vLi4vc3JjL2NyeXB0by9zZW5zaXRpdmUtYnl0ZXMudHMiLCIuLi8uLi8uLi9zcmMvc2NyaXB0L21zZy1nbG9iYWwudHMiLCIuLi8uLi8uLi9zcmMvc2hhcmUvY29uc3RhbnRzLnRzIiwiLi4vLi4vLi4vc3JjL2V4dGVuc2lvbi9zZW12ZXIudHMiLCIuLi8uLi8uLi9zcmMvZXh0ZW5zaW9uL3B1YmxpYy1zdG9yYWdlLnRzIiwiLi4vLi4vLi4vc3JjL3NoYXJlL2F1dGgudHMiLCIuLi8uLi8uLi9zcmMvYXBwL2NvbW1vbi50cyIsIi4uLy4uLy4uL3NyYy9tZXRhL2NvbnRhY3QudHMiLCIuLi8uLi8uLi9zcmMvc3RvcmUvX2luaXQudHMiLCIuLi8uLi8uLi9zcmMvY3J5cHRvL3ZhdWx0LnRzIiwiLi4vLi4vLi4vc3JjL3N0b3JlL19iYXNlLnRzIiwiLi4vLi4vLi4vc3JjL3N0b3JlL2NoYWlucy50cyIsIi4uLy4uLy4uL3NyYy9zY2hlbWEvdG9rZW4tcmVnaXN0cnkudHMiLCIuLi8uLi8uLi9zcmMvc3RvcmUvZW50aXRpZXMudHMiLCIuLi8uLi8uLi9zcmMvc3RvcmUvcXVlcnktY2FjaGUudHMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGltcHJvYmFibGUtZW5nL2dycGMtd2ViL2Rpc3QvZ3JwYy13ZWItY2xpZW50LnVtZC5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL25vZGVfbW9kdWxlcy9AaW1wcm9iYWJsZS1lbmcvZ3JwYy13ZWIvZGlzdC9ncnBjLXdlYi1jbGllbnQudW1kLmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2FzcHJvbWlzZS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9iYXNlNjQvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvZXZlbnRlbWl0dGVyL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2Zsb2F0L2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2lucXVpcmUvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvdXRmOC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9wb29sL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3V0aWwvbG9uZ2JpdHMuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdXRpbC9taW5pbWFsLmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyaXRlci5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy93cml0ZXJfYnVmZmVyLmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JlYWRlci5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yZWFkZXJfYnVmZmVyLmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JwYy9zZXJ2aWNlLmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JwYy5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290cy5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9pbmRleC1taW5pbWFsLmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvbWluaW1hbC5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL2Jhc2UvdjFiZXRhMS9jb2luLmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL2xvbmcvc3JjL2xvbmcuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9iYXNlL3F1ZXJ5L3YxYmV0YTEvcGFnaW5hdGlvbi5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL2JhbmsvdjFiZXRhMS9iYW5rLmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvbm9kZV9tb2R1bGVzL2Jyb3dzZXItaGVhZGVycy9kaXN0L2Jyb3dzZXItaGVhZGVycy51bWQuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9iYW5rL3YxYmV0YTEvcXVlcnkuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9kaXN0L2dvb2dsZS9wcm90b2J1Zi9hbnkuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9hdXRoL3YxYmV0YTEvYXV0aC5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL2F1dGgvdjFiZXRhMS9xdWVyeS5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvdGVuZGVybWludC9jcnlwdG8vcHJvb2YuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9kaXN0L3RlbmRlcm1pbnQvdmVyc2lvbi90eXBlcy5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvdGVuZGVybWludC9jcnlwdG8va2V5cy5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvdGVuZGVybWludC90eXBlcy92YWxpZGF0b3IuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9kaXN0L3RlbmRlcm1pbnQvdHlwZXMvdHlwZXMuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9kaXN0L2dvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvdGVuZGVybWludC90eXBlcy9wYXJhbXMuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9kaXN0L3RlbmRlcm1pbnQvYWJjaS90eXBlcy5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL2Jhc2UvYWJjaS92MWJldGExL2FiY2kuanMiLCIuLi8uLi8uLi8uLi9jb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9jcnlwdG8vbXVsdGlzaWcvdjFiZXRhMS9tdWx0aXNpZy5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL3R4L3NpZ25pbmcvdjFiZXRhMS9zaWduaW5nLmpzIiwiLi4vLi4vLi4vLi4vY29zbW9zLWdycGMvZGlzdC9jb3Ntb3MvdHgvdjFiZXRhMS90eC5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL3R4L3YxYmV0YTEvc2VydmljZS5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL2JhbmsvdjFiZXRhMS90eC5qcyIsIi4uLy4uLy4uLy4uL2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL2NyeXB0by9zZWNwMjU2azEva2V5cy5qcyIsIi4uLy4uLy4uL3NyYy9jcnlwdG8vcnVudGltZS1rZXkudHMiLCIuLi8uLi8uLi9zcmMvY3J5cHRvL3NlbnNpdGl2ZS1iaWctdWludC50cyIsIi4uLy4uLy4uL3NyYy9jcnlwdG8vc2VjcDI1NmsxLnRzIiwiLi4vLi4vLi4vc3JjL3N0b3JlL3NlY3JldHMudHMiLCIuLi8uLi8uLi9zcmMvc3RvcmUvYWNjb3VudHMudHMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmlnbnVtYmVyLmpzL2JpZ251bWJlci5tanMiLCIuLi8uLi8uLi9zcmMvY2hhaW4vbWFpbi50cyIsIi4uLy4uLy4uL3NyYy9zdG9yZS9tZWRpYXMudHMiLCIuLi8uLi8uLi9zcmMvc3RvcmUvbmV0d29ya3MudHMiLCIuLi8uLi8uLi9zcmMvc3RvcmUvdGFncy50cyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3RvcmUvaW5kZXgubWpzIiwiLi4vLi4vLi4vc3JjL2ljb24vYWRkLXNtYWxsLnN2Zz9yYXciLCIuLi8uLi8uLi9zcmMvYXBwL3VpL1B1dC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvdXRpbC9kb20udHMiLCIuLi8uLi8uLi9zcmMvc3RvcmUvcGZwcy50cyIsIi4uLy4uLy4uL3NyYy9hcHAvdWkvUGZwRGlzcGxheS5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvaWNvbi9jbG9zZS5zdmc/cmF3IiwiLi4vLi4vLi4vc3JjL2FwcC91aS9DbG9zZS5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvYXBwL3VpL1Jvdy5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvYXBwL3VpL1N1YkhlYWRlci5zdmVsdGUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlL2Vhc2luZy9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3RyYW5zaXRpb24vaW5kZXgubWpzIiwiLi4vLi4vLi4vc3JjL2FwcC91aS9GaWVsZC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvYXBwL3VpL0FjdGlvbnNMaW5lLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9pY29uL3NlbmQuc3ZnP3JhdyIsIi4uLy4uLy4uL3NyYy9pY29uL3JlY3Yuc3ZnP3JhdyIsIi4uLy4uLy4uL3NyYy9pY29uL2FkZC5zdmc/cmF3IiwiLi4vLi4vLi4vc3JjL2ljb24vaW5mby5zdmc/cmF3IiwiLi4vLi4vLi4vc3JjL2ljb24vZWRpdC5zdmc/cmF3IiwiLi4vLi4vLi4vc3JjL2ljb24vZGVsZXRlLnN2Zz9yYXciLCIuLi8uLi8uLi9zcmMvaWNvbi93cmFwLnN2Zz9yYXciLCIuLi8uLi8uLi9zcmMvaWNvbi91bndyYXAuc3ZnP3JhdyIsIi4uLy4uLy4uL3NyYy9pY29uL2VkaXQtc21hbGwuc3ZnP3JhdyIsIi4uLy4uLy4uL3NyYy9pY29uL2NoZWNrZWQuc3ZnP3JhdyIsIi4uLy4uLy4uL3NyYy9pY29uL3VuY2hlY2tlZC5zdmc/cmF3IiwiLi4vLi4vLi4vc3JjL2FwcC91aS9DaGVja2JveEZpZWxkLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9hcHAvdWkvUG9wdXBUYWdzU2VsZWN0LnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9hcHAvdWkvSW5saW5lVGFncy5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvYXBwL3VpL1BvcnRyYWl0LnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9pY29uL2Ryb3AtZG93bi5zdmc/cmF3IiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS1zZWxlY3Qvc3JjL3V0aWxzL2lzT3V0T2ZWaWV3cG9ydC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtc2VsZWN0L3NyYy9JdGVtLnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtc2VsZWN0L3NyYy9MaXN0LnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtc2VsZWN0L3NyYy9TZWxlY3Rpb24uc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS1zZWxlY3Qvc3JjL011bHRpU2VsZWN0aW9uLnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtc2VsZWN0L3NyYy9WaXJ0dWFsTGlzdC5zdmVsdGUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLXNlbGVjdC9zcmMvQ2xlYXJJY29uLnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtc2VsZWN0L3NyYy91dGlscy9kZWJvdW5jZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtc2VsZWN0L3NyYy9TZWxlY3Quc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2FwcC91aS9TdGFyU2VsZWN0LnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9hcHAvc3ZlbHRlLnRzIiwiLi4vLi4vLi4vc3JjL3V0aWwvZm9ybWF0LnRzIiwiLi4vLi4vLi4vc3JjL3N0b3JlL3dlYi1hcGlzLnRzIiwiLi4vLi4vLi4vc3JjL3N0b3JlL2FnZW50cy50cyIsIi4uLy4uLy4uL3NyYy9pY29uL2NvcHkuc3ZnP3JhdyIsIi4uLy4uLy4uL3NyYy9hcHAvdWkvQWRkcmVzcy5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvc3RvcmUvZXZlbnRzLnRzIiwiLi4vLi4vLi4vc3JjL3N0b3JlL3NldHRpbmdzLnRzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3FyY29kZS1zdmcvbGliL3FyY29kZS5qcyIsIi4uLy4uLy4uL3NyYy9hcHAvdWkvSW5mby5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvYXBwL3VpL1BvcHVwUmVjZWl2ZS5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvc3RvcmUvYXBwcy50cyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWxhdGl2ZS10aW1lLWZvcm1hdC9tb2R1bGVzL0xvY2FsZURhdGFTdG9yZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWxhdGl2ZS10aW1lLWZvcm1hdC9tb2R1bGVzL3Jlc29sdmVMb2NhbGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVsYXRpdmUtdGltZS1mb3JtYXQvbW9kdWxlcy9QbHVyYWxSdWxlRnVuY3Rpb25zLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlbGF0aXZlLXRpbWUtZm9ybWF0L21vZHVsZXMvZ2V0UGx1cmFsUnVsZXNMb2NhbGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVsYXRpdmUtdGltZS1mb3JtYXQvbW9kdWxlcy9QbHVyYWxSdWxlcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWxhdGl2ZS10aW1lLWZvcm1hdC9tb2R1bGVzL1JlbGF0aXZlVGltZUZvcm1hdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvY2FjaGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvamF2YXNjcmlwdC10aW1lLWFnby9tb2R1bGVzL2xvY2FsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvaXNTdHlsZU9iamVjdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3RlcHMvdW5pdHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvamF2YXNjcmlwdC10aW1lLWFnby9tb2R1bGVzL3N0ZXBzL2dldFN0ZXBEZW5vbWluYXRvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvcm91bmQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvamF2YXNjcmlwdC10aW1lLWFnby9tb2R1bGVzL3N0ZXBzL2dldFN0ZXBNaW5UaW1lLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2phdmFzY3JpcHQtdGltZS1hZ28vbW9kdWxlcy9zdGVwcy9nZXRTdGVwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2phdmFzY3JpcHQtdGltZS1hZ28vbW9kdWxlcy9zdGVwcy9nZXRUaW1lVG9OZXh0VXBkYXRlRm9yVW5pdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3RlcHMvZ2V0VGltZVRvTmV4dFVwZGF0ZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvTG9jYWxlRGF0YVN0b3JlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2phdmFzY3JpcHQtdGltZS1hZ28vbW9kdWxlcy9zdGVwcy9yb3VuZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3R5bGUvcm91bmQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvamF2YXNjcmlwdC10aW1lLWFnby9tb2R1bGVzL3N0eWxlL3JvdW5kTWludXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2phdmFzY3JpcHQtdGltZS1hZ28vbW9kdWxlcy9zdGVwcy9hcHByb3hpbWF0ZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3R5bGUvYXBwcm94aW1hdGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvamF2YXNjcmlwdC10aW1lLWFnby9tb2R1bGVzL3N0eWxlL2FwcHJveGltYXRlVGltZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3RlcHMvaGVscGVycy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3R5bGUvdHdpdHRlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3R5bGUvdHdpdHRlck5vdy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3R5bGUvdHdpdHRlck1pbnV0ZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3R5bGUvdHdpdHRlck1pbnV0ZU5vdy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvc3R5bGUvdHdpdHRlckZpcnN0TWludXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2phdmFzY3JpcHQtdGltZS1hZ28vbW9kdWxlcy9zdHlsZS9taW5pLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2phdmFzY3JpcHQtdGltZS1hZ28vbW9kdWxlcy9zdHlsZS9taW5pTm93LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2phdmFzY3JpcHQtdGltZS1hZ28vbW9kdWxlcy9zdHlsZS9taW5pTWludXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2phdmFzY3JpcHQtdGltZS1hZ28vbW9kdWxlcy9zdHlsZS9taW5pTWludXRlTm93LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2phdmFzY3JpcHQtdGltZS1hZ28vbW9kdWxlcy9zdHlsZS9nZXRTdHlsZUJ5TmFtZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL21vZHVsZXMvVGltZUFnby5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9qYXZhc2NyaXB0LXRpbWUtYWdvL2xvY2FsZS9lbi5qc29uLmpzIiwiLi4vLi4vLi4vc3JjL2ljb24vYWNjb3VudC1hZGRlZC5zdmc/cmF3IiwiLi4vLi4vLi4vc3JjL2FwcC91aS9UeG5MaXN0LnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9hcHAvbWVtLnRzIiwiLi4vLi4vLi4vc3JjL3N0b3JlL3dlYi1yZXNvdXJjZS1jYWNoZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwID0gZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gICAgY29uc3QgcmVsTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKS5yZWxMaXN0O1xuICAgIGlmIChyZWxMaXN0ICYmIHJlbExpc3Quc3VwcG9ydHMgJiYgcmVsTGlzdC5zdXBwb3J0cygnbW9kdWxlcHJlbG9hZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBsaW5rIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmtbcmVsPVwibW9kdWxlcHJlbG9hZFwiXScpKSB7XG4gICAgICAgIHByb2Nlc3NQcmVsb2FkKGxpbmspO1xuICAgIH1cbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgbXV0YXRpb24gb2YgbXV0YXRpb25zKSB7XG4gICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSAhPT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBtdXRhdGlvbi5hZGRlZE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gJ0xJTksnICYmIG5vZGUucmVsID09PSAnbW9kdWxlcHJlbG9hZCcpXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NQcmVsb2FkKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkub2JzZXJ2ZShkb2N1bWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gICAgZnVuY3Rpb24gZ2V0RmV0Y2hPcHRzKHNjcmlwdCkge1xuICAgICAgICBjb25zdCBmZXRjaE9wdHMgPSB7fTtcbiAgICAgICAgaWYgKHNjcmlwdC5pbnRlZ3JpdHkpXG4gICAgICAgICAgICBmZXRjaE9wdHMuaW50ZWdyaXR5ID0gc2NyaXB0LmludGVncml0eTtcbiAgICAgICAgaWYgKHNjcmlwdC5yZWZlcnJlcnBvbGljeSlcbiAgICAgICAgICAgIGZldGNoT3B0cy5yZWZlcnJlclBvbGljeSA9IHNjcmlwdC5yZWZlcnJlcnBvbGljeTtcbiAgICAgICAgaWYgKHNjcmlwdC5jcm9zc29yaWdpbiA9PT0gJ3VzZS1jcmVkZW50aWFscycpXG4gICAgICAgICAgICBmZXRjaE9wdHMuY3JlZGVudGlhbHMgPSAnaW5jbHVkZSc7XG4gICAgICAgIGVsc2UgaWYgKHNjcmlwdC5jcm9zc29yaWdpbiA9PT0gJ2Fub255bW91cycpXG4gICAgICAgICAgICBmZXRjaE9wdHMuY3JlZGVudGlhbHMgPSAnb21pdCc7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZldGNoT3B0cy5jcmVkZW50aWFscyA9ICdzYW1lLW9yaWdpbic7XG4gICAgICAgIHJldHVybiBmZXRjaE9wdHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQcmVsb2FkKGxpbmspIHtcbiAgICAgICAgaWYgKGxpbmsuZXApXG4gICAgICAgICAgICAvLyBlcCBtYXJrZXIgPSBwcm9jZXNzZWRcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGluay5lcCA9IHRydWU7XG4gICAgICAgIC8vIHByZXBvcHVsYXRlIHRoZSBsb2FkIHJlY29yZFxuICAgICAgICBjb25zdCBmZXRjaE9wdHMgPSBnZXRGZXRjaE9wdHMobGluayk7XG4gICAgICAgIGZldGNoKGxpbmsuaHJlZiwgZmV0Y2hPcHRzKTtcbiAgICB9XG59O19fVklURV9JU19NT0RFUk5fXyYmcCgpOyIsImZ1bmN0aW9uIG5vb3AoKSB7IH1cbmNvbnN0IGlkZW50aXR5ID0geCA9PiB4O1xuZnVuY3Rpb24gYXNzaWduKHRhciwgc3JjKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZvciAoY29uc3QgayBpbiBzcmMpXG4gICAgICAgIHRhcltrXSA9IHNyY1trXTtcbiAgICByZXR1cm4gdGFyO1xufVxuZnVuY3Rpb24gaXNfcHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYWRkX2xvY2F0aW9uKGVsZW1lbnQsIGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhcikge1xuICAgIGVsZW1lbnQuX19zdmVsdGVfbWV0YSA9IHtcbiAgICAgICAgbG9jOiB7IGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhciB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJ1bihmbikge1xuICAgIHJldHVybiBmbigpO1xufVxuZnVuY3Rpb24gYmxhbmtfb2JqZWN0KCkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuZnVuY3Rpb24gcnVuX2FsbChmbnMpIHtcbiAgICBmbnMuZm9yRWFjaChydW4pO1xufVxuZnVuY3Rpb24gaXNfZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gc2FmZV9ub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiIHx8ICgoYSAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKTtcbn1cbmxldCBzcmNfdXJsX2VxdWFsX2FuY2hvcjtcbmZ1bmN0aW9uIHNyY191cmxfZXF1YWwoZWxlbWVudF9zcmMsIHVybCkge1xuICAgIGlmICghc3JjX3VybF9lcXVhbF9hbmNob3IpIHtcbiAgICAgICAgc3JjX3VybF9lcXVhbF9hbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgfVxuICAgIHNyY191cmxfZXF1YWxfYW5jaG9yLmhyZWYgPSB1cmw7XG4gICAgcmV0dXJuIGVsZW1lbnRfc3JjID09PSBzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmO1xufVxuZnVuY3Rpb24gbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYjtcbn1cbmZ1bmN0aW9uIGlzX2VtcHR5KG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3N0b3JlKHN0b3JlLCBuYW1lKSB7XG4gICAgaWYgKHN0b3JlICE9IG51bGwgJiYgdHlwZW9mIHN0b3JlLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke25hbWV9JyBpcyBub3QgYSBzdG9yZSB3aXRoIGEgJ3N1YnNjcmliZScgbWV0aG9kYCk7XG4gICAgfVxufVxuZnVuY3Rpb24gc3Vic2NyaWJlKHN0b3JlLCAuLi5jYWxsYmFja3MpIHtcbiAgICBpZiAoc3RvcmUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG4gICAgY29uc3QgdW5zdWIgPSBzdG9yZS5zdWJzY3JpYmUoLi4uY2FsbGJhY2tzKTtcbiAgICByZXR1cm4gdW5zdWIudW5zdWJzY3JpYmUgPyAoKSA9PiB1bnN1Yi51bnN1YnNjcmliZSgpIDogdW5zdWI7XG59XG5mdW5jdGlvbiBnZXRfc3RvcmVfdmFsdWUoc3RvcmUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgc3Vic2NyaWJlKHN0b3JlLCBfID0+IHZhbHVlID0gXykoKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjb21wb25lbnRfc3Vic2NyaWJlKGNvbXBvbmVudCwgc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgY29tcG9uZW50LiQkLm9uX2Rlc3Ryb3kucHVzaChzdWJzY3JpYmUoc3RvcmUsIGNhbGxiYWNrKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVfc2xvdChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb24pIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jdHggPSBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblswXShzbG90X2N0eCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgcmV0dXJuIGRlZmluaXRpb25bMV0gJiYgZm5cbiAgICAgICAgPyBhc3NpZ24oJCRzY29wZS5jdHguc2xpY2UoKSwgZGVmaW5pdGlvblsxXShmbihjdHgpKSlcbiAgICAgICAgOiAkJHNjb3BlLmN0eDtcbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NoYW5nZXMoZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb25bMl0gJiYgZm4pIHtcbiAgICAgICAgY29uc3QgbGV0cyA9IGRlZmluaXRpb25bMl0oZm4oZGlydHkpKTtcbiAgICAgICAgaWYgKCQkc2NvcGUuZGlydHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxldHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsZXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gW107XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBNYXRoLm1heCgkJHNjb3BlLmRpcnR5Lmxlbmd0aCwgbGV0cy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIG1lcmdlZFtpXSA9ICQkc2NvcGUuZGlydHlbaV0gfCBsZXRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJCRzY29wZS5kaXJ0eSB8IGxldHM7XG4gICAgfVxuICAgIHJldHVybiAkJHNjb3BlLmRpcnR5O1xufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3RfYmFzZShzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgc2xvdF9jaGFuZ2VzLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgaWYgKHNsb3RfY2hhbmdlcykge1xuICAgICAgICBjb25zdCBzbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0KHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbiAgICAgICAgc2xvdC5wKHNsb3RfY29udGV4dCwgc2xvdF9jaGFuZ2VzKTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVfc2xvdChzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4sIGdldF9zbG90X2NvbnRleHRfZm4pIHtcbiAgICBjb25zdCBzbG90X2NoYW5nZXMgPSBnZXRfc2xvdF9jaGFuZ2VzKHNsb3RfZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4pO1xuICAgIHVwZGF0ZV9zbG90X2Jhc2Uoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIHNsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG59XG5mdW5jdGlvbiBnZXRfYWxsX2RpcnR5X2Zyb21fc2NvcGUoJCRzY29wZSkge1xuICAgIGlmICgkJHNjb3BlLmN0eC5sZW5ndGggPiAzMikge1xuICAgICAgICBjb25zdCBkaXJ0eSA9IFtdO1xuICAgICAgICBjb25zdCBsZW5ndGggPSAkJHNjb3BlLmN0eC5sZW5ndGggLyAzMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGlydHlbaV0gPSAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlydHk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMocHJvcHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmIChrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN1bHRba10gPSBwcm9wc1trXTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9yZXN0X3Byb3BzKHByb3BzLCBrZXlzKSB7XG4gICAgY29uc3QgcmVzdCA9IHt9O1xuICAgIGtleXMgPSBuZXcgU2V0KGtleXMpO1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKCFrZXlzLmhhcyhrKSAmJiBrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3Q7XG59XG5mdW5jdGlvbiBjb21wdXRlX3Nsb3RzKHNsb3RzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gb25jZShmbikge1xuICAgIGxldCByYW4gPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHJhbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgICAgZm4uY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbnVsbF90b19lbXB0eSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9zdG9yZV92YWx1ZShzdG9yZSwgcmV0LCB2YWx1ZSkge1xuICAgIHN0b3JlLnNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmNvbnN0IGhhc19wcm9wID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG5mdW5jdGlvbiBhY3Rpb25fZGVzdHJveWVyKGFjdGlvbl9yZXN1bHQpIHtcbiAgICByZXR1cm4gYWN0aW9uX3Jlc3VsdCAmJiBpc19mdW5jdGlvbihhY3Rpb25fcmVzdWx0LmRlc3Ryb3kpID8gYWN0aW9uX3Jlc3VsdC5kZXN0cm95IDogbm9vcDtcbn1cblxuY29uc3QgaXNfY2xpZW50ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5sZXQgbm93ID0gaXNfY2xpZW50XG4gICAgPyAoKSA9PiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KClcbiAgICA6ICgpID0+IERhdGUubm93KCk7XG5sZXQgcmFmID0gaXNfY2xpZW50ID8gY2IgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKSA6IG5vb3A7XG4vLyB1c2VkIGludGVybmFsbHkgZm9yIHRlc3RpbmdcbmZ1bmN0aW9uIHNldF9ub3coZm4pIHtcbiAgICBub3cgPSBmbjtcbn1cbmZ1bmN0aW9uIHNldF9yYWYoZm4pIHtcbiAgICByYWYgPSBmbjtcbn1cblxuY29uc3QgdGFza3MgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBydW5fdGFza3Mobm93KSB7XG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgaWYgKCF0YXNrLmMobm93KSkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICAgICAgdGFzay5mKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGFza3Muc2l6ZSAhPT0gMClcbiAgICAgICAgcmFmKHJ1bl90YXNrcyk7XG59XG4vKipcbiAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkhXG4gKi9cbmZ1bmN0aW9uIGNsZWFyX2xvb3BzKCkge1xuICAgIHRhc2tzLmNsZWFyKCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGFzayB0aGF0IHJ1bnMgb24gZWFjaCByYWYgZnJhbWVcbiAqIHVudGlsIGl0IHJldHVybnMgYSBmYWxzeSB2YWx1ZSBvciBpcyBhYm9ydGVkXG4gKi9cbmZ1bmN0aW9uIGxvb3AoY2FsbGJhY2spIHtcbiAgICBsZXQgdGFzaztcbiAgICBpZiAodGFza3Muc2l6ZSA9PT0gMClcbiAgICAgICAgcmFmKHJ1bl90YXNrcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvbWlzZTogbmV3IFByb21pc2UoZnVsZmlsbCA9PiB7XG4gICAgICAgICAgICB0YXNrcy5hZGQodGFzayA9IHsgYzogY2FsbGJhY2ssIGY6IGZ1bGZpbGwgfSk7XG4gICAgICAgIH0pLFxuICAgICAgICBhYm9ydCgpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8vIFRyYWNrIHdoaWNoIG5vZGVzIGFyZSBjbGFpbWVkIGR1cmluZyBoeWRyYXRpb24uIFVuY2xhaW1lZCBub2RlcyBjYW4gdGhlbiBiZSByZW1vdmVkIGZyb20gdGhlIERPTVxuLy8gYXQgdGhlIGVuZCBvZiBoeWRyYXRpb24gd2l0aG91dCB0b3VjaGluZyB0aGUgcmVtYWluaW5nIG5vZGVzLlxubGV0IGlzX2h5ZHJhdGluZyA9IGZhbHNlO1xuZnVuY3Rpb24gc3RhcnRfaHlkcmF0aW5nKCkge1xuICAgIGlzX2h5ZHJhdGluZyA9IHRydWU7XG59XG5mdW5jdGlvbiBlbmRfaHlkcmF0aW5nKCkge1xuICAgIGlzX2h5ZHJhdGluZyA9IGZhbHNlO1xufVxuZnVuY3Rpb24gdXBwZXJfYm91bmQobG93LCBoaWdoLCBrZXksIHZhbHVlKSB7XG4gICAgLy8gUmV0dXJuIGZpcnN0IGluZGV4IG9mIHZhbHVlIGxhcmdlciB0aGFuIGlucHV0IHZhbHVlIGluIHRoZSByYW5nZSBbbG93LCBoaWdoKVxuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIGNvbnN0IG1pZCA9IGxvdyArICgoaGlnaCAtIGxvdykgPj4gMSk7XG4gICAgICAgIGlmIChrZXkobWlkKSA8PSB2YWx1ZSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbn1cbmZ1bmN0aW9uIGluaXRfaHlkcmF0ZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0Lmh5ZHJhdGVfaW5pdClcbiAgICAgICAgcmV0dXJuO1xuICAgIHRhcmdldC5oeWRyYXRlX2luaXQgPSB0cnVlO1xuICAgIC8vIFdlIGtub3cgdGhhdCBhbGwgY2hpbGRyZW4gaGF2ZSBjbGFpbV9vcmRlciB2YWx1ZXMgc2luY2UgdGhlIHVuY2xhaW1lZCBoYXZlIGJlZW4gZGV0YWNoZWQgaWYgdGFyZ2V0IGlzIG5vdCA8aGVhZD5cbiAgICBsZXQgY2hpbGRyZW4gPSB0YXJnZXQuY2hpbGROb2RlcztcbiAgICAvLyBJZiB0YXJnZXQgaXMgPGhlYWQ+LCB0aGVyZSBtYXkgYmUgY2hpbGRyZW4gd2l0aG91dCBjbGFpbV9vcmRlclxuICAgIGlmICh0YXJnZXQubm9kZU5hbWUgPT09ICdIRUFEJykge1xuICAgICAgICBjb25zdCBteUNoaWxkcmVuID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmIChub2RlLmNsYWltX29yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBteUNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRyZW4gPSBteUNoaWxkcmVuO1xuICAgIH1cbiAgICAvKlxuICAgICogUmVvcmRlciBjbGFpbWVkIGNoaWxkcmVuIG9wdGltYWxseS5cbiAgICAqIFdlIGNhbiByZW9yZGVyIGNsYWltZWQgY2hpbGRyZW4gb3B0aW1hbGx5IGJ5IGZpbmRpbmcgdGhlIGxvbmdlc3Qgc3Vic2VxdWVuY2Ugb2ZcbiAgICAqIG5vZGVzIHRoYXQgYXJlIGFscmVhZHkgY2xhaW1lZCBpbiBvcmRlciBhbmQgb25seSBtb3ZpbmcgdGhlIHJlc3QuIFRoZSBsb25nZXN0XG4gICAgKiBzdWJzZXF1ZW5jZSBzdWJzZXF1ZW5jZSBvZiBub2RlcyB0aGF0IGFyZSBjbGFpbWVkIGluIG9yZGVyIGNhbiBiZSBmb3VuZCBieVxuICAgICogY29tcHV0aW5nIHRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgLmNsYWltX29yZGVyIHZhbHVlcy5cbiAgICAqXG4gICAgKiBUaGlzIGFsZ29yaXRobSBpcyBvcHRpbWFsIGluIGdlbmVyYXRpbmcgdGhlIGxlYXN0IGFtb3VudCBvZiByZW9yZGVyIG9wZXJhdGlvbnNcbiAgICAqIHBvc3NpYmxlLlxuICAgICpcbiAgICAqIFByb29mOlxuICAgICogV2Uga25vdyB0aGF0LCBnaXZlbiBhIHNldCBvZiByZW9yZGVyaW5nIG9wZXJhdGlvbnMsIHRoZSBub2RlcyB0aGF0IGRvIG5vdCBtb3ZlXG4gICAgKiBhbHdheXMgZm9ybSBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlLCBzaW5jZSB0aGV5IGRvIG5vdCBtb3ZlIGFtb25nIGVhY2ggb3RoZXJcbiAgICAqIG1lYW5pbmcgdGhhdCB0aGV5IG11c3QgYmUgYWxyZWFkeSBvcmRlcmVkIGFtb25nIGVhY2ggb3RoZXIuIFRodXMsIHRoZSBtYXhpbWFsXG4gICAgKiBzZXQgb2Ygbm9kZXMgdGhhdCBkbyBub3QgbW92ZSBmb3JtIGEgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlLlxuICAgICovXG4gICAgLy8gQ29tcHV0ZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2VcbiAgICAvLyBtOiBzdWJzZXF1ZW5jZSBsZW5ndGggaiA9PiBpbmRleCBrIG9mIHNtYWxsZXN0IHZhbHVlIHRoYXQgZW5kcyBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIGxlbmd0aCBqXG4gICAgY29uc3QgbSA9IG5ldyBJbnQzMkFycmF5KGNoaWxkcmVuLmxlbmd0aCArIDEpO1xuICAgIC8vIFByZWRlY2Vzc29yIGluZGljZXMgKyAxXG4gICAgY29uc3QgcCA9IG5ldyBJbnQzMkFycmF5KGNoaWxkcmVuLmxlbmd0aCk7XG4gICAgbVswXSA9IC0xO1xuICAgIGxldCBsb25nZXN0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBjaGlsZHJlbltpXS5jbGFpbV9vcmRlcjtcbiAgICAgICAgLy8gRmluZCB0aGUgbGFyZ2VzdCBzdWJzZXF1ZW5jZSBsZW5ndGggc3VjaCB0aGF0IGl0IGVuZHMgaW4gYSB2YWx1ZSBsZXNzIHRoYW4gb3VyIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgLy8gdXBwZXJfYm91bmQgcmV0dXJucyBmaXJzdCBncmVhdGVyIHZhbHVlLCBzbyB3ZSBzdWJ0cmFjdCBvbmVcbiAgICAgICAgLy8gd2l0aCBmYXN0IHBhdGggZm9yIHdoZW4gd2UgYXJlIG9uIHRoZSBjdXJyZW50IGxvbmdlc3Qgc3Vic2VxdWVuY2VcbiAgICAgICAgY29uc3Qgc2VxTGVuID0gKChsb25nZXN0ID4gMCAmJiBjaGlsZHJlblttW2xvbmdlc3RdXS5jbGFpbV9vcmRlciA8PSBjdXJyZW50KSA/IGxvbmdlc3QgKyAxIDogdXBwZXJfYm91bmQoMSwgbG9uZ2VzdCwgaWR4ID0+IGNoaWxkcmVuW21baWR4XV0uY2xhaW1fb3JkZXIsIGN1cnJlbnQpKSAtIDE7XG4gICAgICAgIHBbaV0gPSBtW3NlcUxlbl0gKyAxO1xuICAgICAgICBjb25zdCBuZXdMZW4gPSBzZXFMZW4gKyAxO1xuICAgICAgICAvLyBXZSBjYW4gZ3VhcmFudGVlIHRoYXQgY3VycmVudCBpcyB0aGUgc21hbGxlc3QgdmFsdWUuIE90aGVyd2lzZSwgd2Ugd291bGQgaGF2ZSBnZW5lcmF0ZWQgYSBsb25nZXIgc2VxdWVuY2UuXG4gICAgICAgIG1bbmV3TGVuXSA9IGk7XG4gICAgICAgIGxvbmdlc3QgPSBNYXRoLm1heChuZXdMZW4sIGxvbmdlc3QpO1xuICAgIH1cbiAgICAvLyBUaGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIG5vZGVzIChpbml0aWFsbHkgcmV2ZXJzZWQpXG4gICAgY29uc3QgbGlzID0gW107XG4gICAgLy8gVGhlIHJlc3Qgb2YgdGhlIG5vZGVzLCBub2RlcyB0aGF0IHdpbGwgYmUgbW92ZWRcbiAgICBjb25zdCB0b01vdmUgPSBbXTtcbiAgICBsZXQgbGFzdCA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgZm9yIChsZXQgY3VyID0gbVtsb25nZXN0XSArIDE7IGN1ciAhPSAwOyBjdXIgPSBwW2N1ciAtIDFdKSB7XG4gICAgICAgIGxpcy5wdXNoKGNoaWxkcmVuW2N1ciAtIDFdKTtcbiAgICAgICAgZm9yICg7IGxhc3QgPj0gY3VyOyBsYXN0LS0pIHtcbiAgICAgICAgICAgIHRvTW92ZS5wdXNoKGNoaWxkcmVuW2xhc3RdKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0LS07XG4gICAgfVxuICAgIGZvciAoOyBsYXN0ID49IDA7IGxhc3QtLSkge1xuICAgICAgICB0b01vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG4gICAgfVxuICAgIGxpcy5yZXZlcnNlKCk7XG4gICAgLy8gV2Ugc29ydCB0aGUgbm9kZXMgYmVpbmcgbW92ZWQgdG8gZ3VhcmFudGVlIHRoYXQgdGhlaXIgaW5zZXJ0aW9uIG9yZGVyIG1hdGNoZXMgdGhlIGNsYWltIG9yZGVyXG4gICAgdG9Nb3ZlLnNvcnQoKGEsIGIpID0+IGEuY2xhaW1fb3JkZXIgLSBiLmNsYWltX29yZGVyKTtcbiAgICAvLyBGaW5hbGx5LCB3ZSBtb3ZlIHRoZSBub2Rlc1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IHRvTW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB3aGlsZSAoaiA8IGxpcy5sZW5ndGggJiYgdG9Nb3ZlW2ldLmNsYWltX29yZGVyID49IGxpc1tqXS5jbGFpbV9vcmRlcikge1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuY2hvciA9IGogPCBsaXMubGVuZ3RoID8gbGlzW2pdIDogbnVsbDtcbiAgICAgICAgdGFyZ2V0Lmluc2VydEJlZm9yZSh0b01vdmVbaV0sIGFuY2hvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwZW5kKHRhcmdldCwgbm9kZSkge1xuICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBzdHlsZV9zaGVldF9pZCwgc3R5bGVzKSB7XG4gICAgY29uc3QgYXBwZW5kX3N0eWxlc190byA9IGdldF9yb290X2Zvcl9zdHlsZSh0YXJnZXQpO1xuICAgIGlmICghYXBwZW5kX3N0eWxlc190by5nZXRFbGVtZW50QnlJZChzdHlsZV9zaGVldF9pZCkpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBlbGVtZW50KCdzdHlsZScpO1xuICAgICAgICBzdHlsZS5pZCA9IHN0eWxlX3NoZWV0X2lkO1xuICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHN0eWxlcztcbiAgICAgICAgYXBwZW5kX3N0eWxlc2hlZXQoYXBwZW5kX3N0eWxlc190bywgc3R5bGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9yb290X2Zvcl9zdHlsZShub2RlKSB7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgY29uc3Qgcm9vdCA9IG5vZGUuZ2V0Um9vdE5vZGUgPyBub2RlLmdldFJvb3ROb2RlKCkgOiBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgaWYgKHJvb3QgJiYgcm9vdC5ob3N0KSB7XG4gICAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50O1xufVxuZnVuY3Rpb24gYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQobm9kZSkge1xuICAgIGNvbnN0IHN0eWxlX2VsZW1lbnQgPSBlbGVtZW50KCdzdHlsZScpO1xuICAgIGFwcGVuZF9zdHlsZXNoZWV0KGdldF9yb290X2Zvcl9zdHlsZShub2RlKSwgc3R5bGVfZWxlbWVudCk7XG4gICAgcmV0dXJuIHN0eWxlX2VsZW1lbnQuc2hlZXQ7XG59XG5mdW5jdGlvbiBhcHBlbmRfc3R5bGVzaGVldChub2RlLCBzdHlsZSkge1xuICAgIGFwcGVuZChub2RlLmhlYWQgfHwgbm9kZSwgc3R5bGUpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpIHtcbiAgICBpZiAoaXNfaHlkcmF0aW5nKSB7XG4gICAgICAgIGluaXRfaHlkcmF0ZSh0YXJnZXQpO1xuICAgICAgICBpZiAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID09PSB1bmRlZmluZWQpIHx8ICgodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgIT09IG51bGwpICYmICh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5wYXJlbnRFbGVtZW50ICE9PSB0YXJnZXQpKSkge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSB0YXJnZXQuZmlyc3RDaGlsZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBTa2lwIG5vZGVzIG9mIHVuZGVmaW5lZCBvcmRlcmluZ1xuICAgICAgICB3aGlsZSAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsKSAmJiAodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQuY2xhaW1fb3JkZXIgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUgIT09IHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkKSB7XG4gICAgICAgICAgICAvLyBXZSBvbmx5IGluc2VydCBpZiB0aGUgb3JkZXJpbmcgb2YgdGhpcyBub2RlIHNob3VsZCBiZSBtb2RpZmllZCBvciB0aGUgcGFyZW50IG5vZGUgaXMgbm90IHRhcmdldFxuICAgICAgICAgICAgaWYgKG5vZGUuY2xhaW1fb3JkZXIgIT09IHVuZGVmaW5lZCB8fCBub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0IHx8IG5vZGUubmV4dFNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGlmIChpc19oeWRyYXRpbmcgJiYgIWFuY2hvcikge1xuICAgICAgICBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0IHx8IG5vZGUubmV4dFNpYmxpbmcgIT0gYW5jaG9yKSB7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaChub2RlKSB7XG4gICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xufVxuZnVuY3Rpb24gZGVzdHJveV9lYWNoKGl0ZXJhdGlvbnMsIGRldGFjaGluZykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlcmF0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoaXRlcmF0aW9uc1tpXSlcbiAgICAgICAgICAgIGl0ZXJhdGlvbnNbaV0uZChkZXRhY2hpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVsZW1lbnQobmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xufVxuZnVuY3Rpb24gZWxlbWVudF9pcyhuYW1lLCBpcykge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUsIHsgaXMgfSk7XG59XG5mdW5jdGlvbiBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzKG9iaiwgZXhjbHVkZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBpbiBvYmopIHtcbiAgICAgICAgaWYgKGhhc19wcm9wKG9iaiwgaylcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICYmIGV4Y2x1ZGUuaW5kZXhPZihrKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRhcmdldFtrXSA9IG9ialtrXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gc3ZnX2VsZW1lbnQobmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgbmFtZSk7XG59XG5mdW5jdGlvbiB0ZXh0KGRhdGEpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YSk7XG59XG5mdW5jdGlvbiBzcGFjZSgpIHtcbiAgICByZXR1cm4gdGV4dCgnICcpO1xufVxuZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgcmV0dXJuIHRleHQoJycpO1xufVxuZnVuY3Rpb24gbGlzdGVuKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHByZXZlbnRfZGVmYXVsdChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN0b3BfcHJvcGFnYXRpb24oZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc2VsZihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzKVxuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRydXN0ZWQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LmlzVHJ1c3RlZClcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICBlbHNlIGlmIChub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9PSB2YWx1ZSlcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobm9kZS5fX3Byb3RvX18pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ19fdmFsdWUnKSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3JzW2tleV0gJiYgZGVzY3JpcHRvcnNba2V5XS5zZXQpIHtcbiAgICAgICAgICAgIG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N2Z19hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHByb3AgaW4gbm9kZSkge1xuICAgICAgICBub2RlW3Byb3BdID0gdHlwZW9mIG5vZGVbcHJvcF0gPT09ICdib29sZWFuJyAmJiB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhdHRyKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGdyb3VwW2ldLmNoZWNrZWQpXG4gICAgICAgICAgICB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG4gICAgfVxuICAgIGlmICghY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZS5kZWxldGUoX192YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyBudWxsIDogK3ZhbHVlO1xufVxuZnVuY3Rpb24gdGltZV9yYW5nZXNfdG9fYXJyYXkocmFuZ2VzKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJheS5wdXNoKHsgc3RhcnQ6IHJhbmdlcy5zdGFydChpKSwgZW5kOiByYW5nZXMuZW5kKGkpIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jaGlsZE5vZGVzKTtcbn1cbmZ1bmN0aW9uIGluaXRfY2xhaW1faW5mbyhub2Rlcykge1xuICAgIGlmIChub2Rlcy5jbGFpbV9pbmZvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZXMuY2xhaW1faW5mbyA9IHsgbGFzdF9pbmRleDogMCwgdG90YWxfY2xhaW1lZDogMCB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsYWltX25vZGUobm9kZXMsIHByZWRpY2F0ZSwgcHJvY2Vzc05vZGUsIGNyZWF0ZU5vZGUsIGRvbnRVcGRhdGVMYXN0SW5kZXggPSBmYWxzZSkge1xuICAgIC8vIFRyeSB0byBmaW5kIG5vZGVzIGluIGFuIG9yZGVyIHN1Y2ggdGhhdCB3ZSBsZW5ndGhlbiB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG4gICAgaW5pdF9jbGFpbV9pbmZvKG5vZGVzKTtcbiAgICBjb25zdCByZXN1bHROb2RlID0gKCgpID0+IHtcbiAgICAgICAgLy8gV2UgZmlyc3QgdHJ5IHRvIGZpbmQgYW4gZWxlbWVudCBhZnRlciB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXg7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShub2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gcHJvY2Vzc05vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkb250VXBkYXRlTGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgd2UgdHJ5IHRvIGZpbmQgb25lIGJlZm9yZVxuICAgICAgICAvLyBXZSBpdGVyYXRlIGluIHJldmVyc2Ugc28gdGhhdCB3ZSBkb24ndCBnbyB0b28gZmFyIGJhY2tcbiAgICAgICAgZm9yIChsZXQgaSA9IG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnQgPSBwcm9jZXNzTm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXSA9IHJlcGxhY2VtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRvbnRVcGRhdGVMYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBzcGxpY2VkIGJlZm9yZSB0aGUgbGFzdF9pbmRleCwgd2UgZGVjcmVhc2UgaXRcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4LS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGNhbid0IGZpbmQgYW55IG1hdGNoaW5nIG5vZGUsIHdlIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGUoKTtcbiAgICB9KSgpO1xuICAgIHJlc3VsdE5vZGUuY2xhaW1fb3JkZXIgPSBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQ7XG4gICAgbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkICs9IDE7XG4gICAgcmV0dXJuIHJlc3VsdE5vZGU7XG59XG5mdW5jdGlvbiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIGNyZWF0ZV9lbGVtZW50KSB7XG4gICAgcmV0dXJuIGNsYWltX25vZGUobm9kZXMsIChub2RlKSA9PiBub2RlLm5vZGVOYW1lID09PSBuYW1lLCAobm9kZSkgPT4ge1xuICAgICAgICBjb25zdCByZW1vdmUgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG5vZGUuYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgIGlmICghYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0pIHtcbiAgICAgICAgICAgICAgICByZW1vdmUucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlLmZvckVhY2godiA9PiBub2RlLnJlbW92ZUF0dHJpYnV0ZSh2KSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSwgKCkgPT4gY3JlYXRlX2VsZW1lbnQobmFtZSkpO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcykge1xuICAgIHJldHVybiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gY2xhaW1fc3ZnX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBzdmdfZWxlbWVudCk7XG59XG5mdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG4gICAgcmV0dXJuIGNsYWltX25vZGUobm9kZXMsIChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSAzLCAobm9kZSkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhU3RyID0gJycgKyBkYXRhO1xuICAgICAgICBpZiAobm9kZS5kYXRhLnN0YXJ0c1dpdGgoZGF0YVN0cikpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmRhdGEubGVuZ3RoICE9PSBkYXRhU3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnNwbGl0VGV4dChkYXRhU3RyLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSBkYXRhU3RyO1xuICAgICAgICB9XG4gICAgfSwgKCkgPT4gdGV4dChkYXRhKSwgdHJ1ZSAvLyBUZXh0IG5vZGVzIHNob3VsZCBub3QgdXBkYXRlIGxhc3QgaW5kZXggc2luY2UgaXQgaXMgbGlrZWx5IG5vdCB3b3J0aCBpdCB0byBlbGltaW5hdGUgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBhY3R1YWwgZWxlbWVudHNcbiAgICApO1xufVxuZnVuY3Rpb24gY2xhaW1fc3BhY2Uobm9kZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fdGV4dChub2RlcywgJyAnKTtcbn1cbmZ1bmN0aW9uIGZpbmRfY29tbWVudChub2RlcywgdGV4dCwgc3RhcnQpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4IC8qIGNvbW1lbnQgbm9kZSAqLyAmJiBub2RlLnRleHRDb250ZW50LnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGNsYWltX2h0bWxfdGFnKG5vZGVzLCBpc19zdmcpIHtcbiAgICAvLyBmaW5kIGh0bWwgb3BlbmluZyB0YWdcbiAgICBjb25zdCBzdGFydF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX1NUQVJUJywgMCk7XG4gICAgY29uc3QgZW5kX2luZGV4ID0gZmluZF9jb21tZW50KG5vZGVzLCAnSFRNTF9UQUdfRU5EJywgc3RhcnRfaW5kZXgpO1xuICAgIGlmIChzdGFydF9pbmRleCA9PT0gZW5kX2luZGV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbih1bmRlZmluZWQsIGlzX3N2Zyk7XG4gICAgfVxuICAgIGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG4gICAgY29uc3QgaHRtbF90YWdfbm9kZXMgPSBub2Rlcy5zcGxpY2Uoc3RhcnRfaW5kZXgsIGVuZF9pbmRleCAtIHN0YXJ0X2luZGV4ICsgMSk7XG4gICAgZGV0YWNoKGh0bWxfdGFnX25vZGVzWzBdKTtcbiAgICBkZXRhY2goaHRtbF90YWdfbm9kZXNbaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMV0pO1xuICAgIGNvbnN0IGNsYWltZWRfbm9kZXMgPSBodG1sX3RhZ19ub2Rlcy5zbGljZSgxLCBodG1sX3RhZ19ub2Rlcy5sZW5ndGggLSAxKTtcbiAgICBmb3IgKGNvbnN0IG4gb2YgY2xhaW1lZF9ub2Rlcykge1xuICAgICAgICBuLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBIdG1sVGFnSHlkcmF0aW9uKGNsYWltZWRfbm9kZXMsIGlzX3N2Zyk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YSh0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC53aG9sZVRleHQgIT09IGRhdGEpXG4gICAgICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdmFsdWUoaW5wdXQsIHZhbHVlKSB7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9pbnB1dF90eXBlKGlucHV0LCB0eXBlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaW5wdXQudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfc3R5bGUobm9kZSwga2V5LCB2YWx1ZSwgaW1wb3J0YW50KSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSwgaW1wb3J0YW50ID8gJ2ltcG9ydGFudCcgOiAnJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbihzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgaWYgKG9wdGlvbi5fX3ZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxlY3Quc2VsZWN0ZWRJbmRleCA9IC0xOyAvLyBubyBvcHRpb24gc2hvdWxkIGJlIHNlbGVjdGVkXG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9ucyhzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gfnZhbHVlLmluZGV4T2Yob3B0aW9uLl9fdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF92YWx1ZShzZWxlY3QpIHtcbiAgICBjb25zdCBzZWxlY3RlZF9vcHRpb24gPSBzZWxlY3QucXVlcnlTZWxlY3RvcignOmNoZWNrZWQnKSB8fCBzZWxlY3Qub3B0aW9uc1swXTtcbiAgICByZXR1cm4gc2VsZWN0ZWRfb3B0aW9uICYmIHNlbGVjdGVkX29wdGlvbi5fX3ZhbHVlO1xufVxuZnVuY3Rpb24gc2VsZWN0X211bHRpcGxlX3ZhbHVlKHNlbGVjdCkge1xuICAgIHJldHVybiBbXS5tYXAuY2FsbChzZWxlY3QucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKSwgb3B0aW9uID0+IG9wdGlvbi5fX3ZhbHVlKTtcbn1cbi8vIHVuZm9ydHVuYXRlbHkgdGhpcyBjYW4ndCBiZSBhIGNvbnN0YW50IGFzIHRoYXQgd291bGRuJ3QgYmUgdHJlZS1zaGFrZWFibGVcbi8vIHNvIHdlIGNhY2hlIHRoZSByZXN1bHQgaW5zdGVhZFxubGV0IGNyb3Nzb3JpZ2luO1xuZnVuY3Rpb24gaXNfY3Jvc3NvcmlnaW4oKSB7XG4gICAgaWYgKGNyb3Nzb3JpZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3Jvc3NvcmlnaW4gPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdm9pZCB3aW5kb3cucGFyZW50LmRvY3VtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY3Jvc3NvcmlnaW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcm9zc29yaWdpbjtcbn1cbmZ1bmN0aW9uIGFkZF9yZXNpemVfbGlzdGVuZXIobm9kZSwgZm4pIHtcbiAgICBjb25zdCBjb21wdXRlZF9zdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKGNvbXB1dGVkX3N0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG4gICAgY29uc3QgaWZyYW1lID0gZWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyAnICtcbiAgICAgICAgJ292ZXJmbG93OiBoaWRkZW47IGJvcmRlcjogMDsgb3BhY2l0eTogMDsgcG9pbnRlci1ldmVudHM6IG5vbmU7IHotaW5kZXg6IC0xOycpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICBpZnJhbWUudGFiSW5kZXggPSAtMTtcbiAgICBjb25zdCBjcm9zc29yaWdpbiA9IGlzX2Nyb3Nzb3JpZ2luKCk7XG4gICAgbGV0IHVuc3Vic2NyaWJlO1xuICAgIGlmIChjcm9zc29yaWdpbikge1xuICAgICAgICBpZnJhbWUuc3JjID0gXCJkYXRhOnRleHQvaHRtbCw8c2NyaXB0Pm9ucmVzaXplPWZ1bmN0aW9uKCl7cGFyZW50LnBvc3RNZXNzYWdlKDAsJyonKX08L3NjcmlwdD5cIjtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4od2luZG93LCAnbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gaWZyYW1lLmNvbnRlbnRXaW5kb3cpXG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJztcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKGlmcmFtZS5jb250ZW50V2luZG93LCAncmVzaXplJywgZm4pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhcHBlbmQobm9kZSwgaWZyYW1lKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5zdWJzY3JpYmUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGV0YWNoKGlmcmFtZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdFt0b2dnbGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbn1cbmZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwsIHsgYnViYmxlcyA9IGZhbHNlLCBjYW5jZWxhYmxlID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCk7XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBxdWVyeV9zZWxlY3Rvcl9hbGwoc2VsZWN0b3IsIHBhcmVudCA9IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuY2xhc3MgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoaXNfc3ZnID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5pc19zdmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc19zdmcgPSBpc19zdmc7XG4gICAgICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gICAgfVxuICAgIGMoaHRtbCkge1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgfVxuICAgIG0oaHRtbCwgdGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc19zdmcpXG4gICAgICAgICAgICAgICAgdGhpcy5lID0gc3ZnX2VsZW1lbnQodGFyZ2V0Lm5vZGVOYW1lKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmUgPSBlbGVtZW50KHRhcmdldC5ub2RlTmFtZSk7XG4gICAgICAgICAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmMoaHRtbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pKGFuY2hvcik7XG4gICAgfVxuICAgIGgoaHRtbCkge1xuICAgICAgICB0aGlzLmUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgdGhpcy5uID0gQXJyYXkuZnJvbSh0aGlzLmUuY2hpbGROb2Rlcyk7XG4gICAgfVxuICAgIGkoYW5jaG9yKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnQodGhpcy50LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcChodG1sKSB7XG4gICAgICAgIHRoaXMuZCgpO1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgICAgIHRoaXMuaSh0aGlzLmEpO1xuICAgIH1cbiAgICBkKCkge1xuICAgICAgICB0aGlzLm4uZm9yRWFjaChkZXRhY2gpO1xuICAgIH1cbn1cbmNsYXNzIEh0bWxUYWdIeWRyYXRpb24gZXh0ZW5kcyBIdG1sVGFnIHtcbiAgICBjb25zdHJ1Y3RvcihjbGFpbWVkX25vZGVzLCBpc19zdmcgPSBmYWxzZSkge1xuICAgICAgICBzdXBlcihpc19zdmcpO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgICAgICB0aGlzLmwgPSBjbGFpbWVkX25vZGVzO1xuICAgIH1cbiAgICBjKGh0bWwpIHtcbiAgICAgICAgaWYgKHRoaXMubCkge1xuICAgICAgICAgICAgdGhpcy5uID0gdGhpcy5sO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuYyhodG1sKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0X2h5ZHJhdGlvbih0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF0dHJpYnV0ZV90b19vYmplY3QoYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmVzdWx0W2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMoZWxlbWVudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGVsZW1lbnQuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIHJlc3VsdFtub2RlLnNsb3QgfHwgJ2RlZmF1bHQnXSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgaW5mb3JtYXRpb24gZm9yIG11bHRpcGxlIGRvY3VtZW50cyBiZWNhdXNlIGEgU3ZlbHRlIGFwcGxpY2F0aW9uIGNvdWxkIGFsc28gY29udGFpbiBpZnJhbWVzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy8zNjI0XG5jb25zdCBtYW5hZ2VkX3N0eWxlcyA9IG5ldyBNYXAoKTtcbmxldCBhY3RpdmUgPSAwO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2gvYmxvYi9tYXN0ZXIvaW5kZXguanNcbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gICAgbGV0IGhhc2ggPSA1MzgxO1xuICAgIGxldCBpID0gc3RyLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgXiBzdHIuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gaGFzaCA+Pj4gMDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zdHlsZV9pbmZvcm1hdGlvbihkb2MsIG5vZGUpIHtcbiAgICBjb25zdCBpbmZvID0geyBzdHlsZXNoZWV0OiBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldChub2RlKSwgcnVsZXM6IHt9IH07XG4gICAgbWFuYWdlZF9zdHlsZXMuc2V0KGRvYywgaW5mbyk7XG4gICAgcmV0dXJuIGluZm87XG59XG5mdW5jdGlvbiBjcmVhdGVfcnVsZShub2RlLCBhLCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2UsIGZuLCB1aWQgPSAwKSB7XG4gICAgY29uc3Qgc3RlcCA9IDE2LjY2NiAvIGR1cmF0aW9uO1xuICAgIGxldCBrZXlmcmFtZXMgPSAne1xcbic7XG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPD0gMTsgcCArPSBzdGVwKSB7XG4gICAgICAgIGNvbnN0IHQgPSBhICsgKGIgLSBhKSAqIGVhc2UocCk7XG4gICAgICAgIGtleWZyYW1lcyArPSBwICogMTAwICsgYCV7JHtmbih0LCAxIC0gdCl9fVxcbmA7XG4gICAgfVxuICAgIGNvbnN0IHJ1bGUgPSBrZXlmcmFtZXMgKyBgMTAwJSB7JHtmbihiLCAxIC0gYil9fVxcbn1gO1xuICAgIGNvbnN0IG5hbWUgPSBgX19zdmVsdGVfJHtoYXNoKHJ1bGUpfV8ke3VpZH1gO1xuICAgIGNvbnN0IGRvYyA9IGdldF9yb290X2Zvcl9zdHlsZShub2RlKTtcbiAgICBjb25zdCB7IHN0eWxlc2hlZXQsIHJ1bGVzIH0gPSBtYW5hZ2VkX3N0eWxlcy5nZXQoZG9jKSB8fCBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKTtcbiAgICBpZiAoIXJ1bGVzW25hbWVdKSB7XG4gICAgICAgIHJ1bGVzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgc3R5bGVzaGVldC5pbnNlcnRSdWxlKGBAa2V5ZnJhbWVzICR7bmFtZX0gJHtydWxlfWAsIHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9uID0gbm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJyc7XG4gICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBgJHthbmltYXRpb24gPyBgJHthbmltYXRpb259LCBgIDogJyd9JHtuYW1lfSAke2R1cmF0aW9ufW1zIGxpbmVhciAke2RlbGF5fW1zIDEgYm90aGA7XG4gICAgYWN0aXZlICs9IDE7XG4gICAgcmV0dXJuIG5hbWU7XG59XG5mdW5jdGlvbiBkZWxldGVfcnVsZShub2RlLCBuYW1lKSB7XG4gICAgY29uc3QgcHJldmlvdXMgPSAobm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIGNvbnN0IG5leHQgPSBwcmV2aW91cy5maWx0ZXIobmFtZVxuICAgICAgICA/IGFuaW0gPT4gYW5pbS5pbmRleE9mKG5hbWUpIDwgMCAvLyByZW1vdmUgc3BlY2lmaWMgYW5pbWF0aW9uXG4gICAgICAgIDogYW5pbSA9PiBhbmltLmluZGV4T2YoJ19fc3ZlbHRlJykgPT09IC0xIC8vIHJlbW92ZSBhbGwgU3ZlbHRlIGFuaW1hdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IGRlbGV0ZWQgPSBwcmV2aW91cy5sZW5ndGggLSBuZXh0Lmxlbmd0aDtcbiAgICBpZiAoZGVsZXRlZCkge1xuICAgICAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IG5leHQuam9pbignLCAnKTtcbiAgICAgICAgYWN0aXZlIC09IGRlbGV0ZWQ7XG4gICAgICAgIGlmICghYWN0aXZlKVxuICAgICAgICAgICAgY2xlYXJfcnVsZXMoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhcl9ydWxlcygpIHtcbiAgICByYWYoKCkgPT4ge1xuICAgICAgICBpZiAoYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBtYW5hZ2VkX3N0eWxlcy5mb3JFYWNoKGluZm8gPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBzdHlsZXNoZWV0IH0gPSBpbmZvO1xuICAgICAgICAgICAgbGV0IGkgPSBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldC5kZWxldGVSdWxlKGkpO1xuICAgICAgICAgICAgaW5mby5ydWxlcyA9IHt9O1xuICAgICAgICB9KTtcbiAgICAgICAgbWFuYWdlZF9zdHlsZXMuY2xlYXIoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX2FuaW1hdGlvbihub2RlLCBmcm9tLCBmbiwgcGFyYW1zKSB7XG4gICAgaWYgKCFmcm9tKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCB0byA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGZyb20ubGVmdCA9PT0gdG8ubGVmdCAmJiBmcm9tLnJpZ2h0ID09PSB0by5yaWdodCAmJiBmcm9tLnRvcCA9PT0gdG8udG9wICYmIGZyb20uYm90dG9tID09PSB0by5ib3R0b20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogc2hvdWxkIHRoaXMgYmUgc2VwYXJhdGVkIGZyb20gZGVzdHJ1Y3R1cmluZz8gT3Igc3RhcnQvZW5kIGFkZGVkIHRvIHB1YmxpYyBhcGkgYW5kIGRvY3VtZW50YXRpb24/XG4gICAgc3RhcnQ6IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5LCBcbiAgICAvLyBAdHMtaWdub3JlIHRvZG86XG4gICAgZW5kID0gc3RhcnRfdGltZSArIGR1cmF0aW9uLCB0aWNrID0gbm9vcCwgY3NzIH0gPSBmbihub2RlLCB7IGZyb20sIHRvIH0sIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgbGV0IG5hbWU7XG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlbGF5KSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgbmFtZSk7XG4gICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9vcChub3cgPT4ge1xuICAgICAgICBpZiAoIXN0YXJ0ZWQgJiYgbm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkICYmIG5vdyA+PSBlbmQpIHtcbiAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBzdGFydF90aW1lO1xuICAgICAgICAgICAgY29uc3QgdCA9IDAgKyAxICogZWFzaW5nKHAgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydCgpO1xuICAgIHRpY2soMCwgMSk7XG4gICAgcmV0dXJuIHN0b3A7XG59XG5mdW5jdGlvbiBmaXhfcG9zaXRpb24obm9kZSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09ICdhYnNvbHV0ZScgJiYgc3R5bGUucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBzdHlsZTtcbiAgICAgICAgY29uc3QgYSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZF90cmFuc2Zvcm0obm9kZSwgYSkge1xuICAgIGNvbnN0IGIgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChhLmxlZnQgIT09IGIubGVmdCB8fCBhLnRvcCAhPT0gYi50b3ApIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7YS5sZWZ0IC0gYi5sZWZ0fXB4LCAke2EudG9wIC0gYi50b3B9cHgpYDtcbiAgICB9XG59XG5cbmxldCBjdXJyZW50X2NvbXBvbmVudDtcbmZ1bmN0aW9uIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICBjdXJyZW50X2NvbXBvbmVudCA9IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGdldF9jdXJyZW50X2NvbXBvbmVudCgpIHtcbiAgICBpZiAoIWN1cnJlbnRfY29tcG9uZW50KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIGNhbGxlZCBvdXRzaWRlIGNvbXBvbmVudCBpbml0aWFsaXphdGlvbicpO1xuICAgIHJldHVybiBjdXJyZW50X2NvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGJlZm9yZVVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmJlZm9yZV91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbk1vdW50KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fbW91bnQucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZnRlclVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmFmdGVyX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uRGVzdHJveShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX2Rlc3Ryb3kucHVzaChmbik7XG59XG5mdW5jdGlvbiBjcmVhdGVFdmVudERpc3BhdGNoZXIoKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgcmV0dXJuICh0eXBlLCBkZXRhaWwsIHsgY2FuY2VsYWJsZSA9IGZhbHNlIH0gPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGFyZSB0aGVyZSBzaXR1YXRpb25zIHdoZXJlIGV2ZW50cyBjb3VsZCBiZSBkaXNwYXRjaGVkXG4gICAgICAgICAgICAvLyBpbiBhIHNlcnZlciAobm9uLURPTSkgZW52aXJvbm1lbnQ/XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwsIHsgY2FuY2VsYWJsZSB9KTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4ge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY29tcG9uZW50LCBldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc2V0Q29udGV4dChrZXksIGNvbnRleHQpIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0LnNldChrZXksIGNvbnRleHQpO1xuICAgIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5nZXQoa2V5KTtcbn1cbmZ1bmN0aW9uIGdldEFsbENvbnRleHRzKCkge1xuICAgIHJldHVybiBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0O1xufVxuZnVuY3Rpb24gaGFzQ29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5oYXMoa2V5KTtcbn1cbi8vIFRPRE8gZmlndXJlIG91dCBpZiB3ZSBzdGlsbCB3YW50IHRvIHN1cHBvcnRcbi8vIHNob3J0aGFuZCBldmVudHMsIG9yIGlmIHdlIHdhbnQgdG8gaW1wbGVtZW50XG4vLyBhIHJlYWwgYnViYmxpbmcgbWVjaGFuaXNtXG5mdW5jdGlvbiBidWJibGUoY29tcG9uZW50LCBldmVudCkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4gZm4uY2FsbCh0aGlzLCBldmVudCkpO1xuICAgIH1cbn1cblxuY29uc3QgZGlydHlfY29tcG9uZW50cyA9IFtdO1xuY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVzb2x2ZWRfcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuLy8gZmx1c2goKSBjYWxscyBjYWxsYmFja3MgaW4gdGhpcyBvcmRlcjpcbi8vIDEuIEFsbCBiZWZvcmVVcGRhdGUgY2FsbGJhY2tzLCBpbiBvcmRlcjogcGFyZW50cyBiZWZvcmUgY2hpbGRyZW5cbi8vIDIuIEFsbCBiaW5kOnRoaXMgY2FsbGJhY2tzLCBpbiByZXZlcnNlIG9yZGVyOiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cy5cbi8vIDMuIEFsbCBhZnRlclVwZGF0ZSBjYWxsYmFja3MsIGluIG9yZGVyOiBwYXJlbnRzIGJlZm9yZSBjaGlsZHJlbi4gRVhDRVBUXG4vLyAgICBmb3IgYWZ0ZXJVcGRhdGVzIGNhbGxlZCBkdXJpbmcgdGhlIGluaXRpYWwgb25Nb3VudCwgd2hpY2ggYXJlIGNhbGxlZCBpblxuLy8gICAgcmV2ZXJzZSBvcmRlcjogY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMuXG4vLyBTaW5jZSBjYWxsYmFja3MgbWlnaHQgdXBkYXRlIGNvbXBvbmVudCB2YWx1ZXMsIHdoaWNoIGNvdWxkIHRyaWdnZXIgYW5vdGhlclxuLy8gY2FsbCB0byBmbHVzaCgpLCB0aGUgZm9sbG93aW5nIHN0ZXBzIGd1YXJkIGFnYWluc3QgdGhpczpcbi8vIDEuIER1cmluZyBiZWZvcmVVcGRhdGUsIGFueSB1cGRhdGVkIGNvbXBvbmVudHMgd2lsbCBiZSBhZGRlZCB0byB0aGVcbi8vICAgIGRpcnR5X2NvbXBvbmVudHMgYXJyYXkgYW5kIHdpbGwgY2F1c2UgYSByZWVudHJhbnQgY2FsbCB0byBmbHVzaCgpLiBCZWNhdXNlXG4vLyAgICB0aGUgZmx1c2ggaW5kZXggaXMga2VwdCBvdXRzaWRlIHRoZSBmdW5jdGlvbiwgdGhlIHJlZW50cmFudCBjYWxsIHdpbGwgcGlja1xuLy8gICAgdXAgd2hlcmUgdGhlIGVhcmxpZXIgY2FsbCBsZWZ0IG9mZiBhbmQgZ28gdGhyb3VnaCBhbGwgZGlydHkgY29tcG9uZW50cy4gVGhlXG4vLyAgICBjdXJyZW50X2NvbXBvbmVudCB2YWx1ZSBpcyBzYXZlZCBhbmQgcmVzdG9yZWQgc28gdGhhdCB0aGUgcmVlbnRyYW50IGNhbGwgd2lsbFxuLy8gICAgbm90IGludGVyZmVyZSB3aXRoIHRoZSBcInBhcmVudFwiIGZsdXNoKCkgY2FsbC5cbi8vIDIuIGJpbmQ6dGhpcyBjYWxsYmFja3MgY2Fubm90IHRyaWdnZXIgbmV3IGZsdXNoKCkgY2FsbHMuXG4vLyAzLiBEdXJpbmcgYWZ0ZXJVcGRhdGUsIGFueSB1cGRhdGVkIGNvbXBvbmVudHMgd2lsbCBOT1QgaGF2ZSB0aGVpciBhZnRlclVwZGF0ZVxuLy8gICAgY2FsbGJhY2sgY2FsbGVkIGEgc2Vjb25kIHRpbWU7IHRoZSBzZWVuX2NhbGxiYWNrcyBzZXQsIG91dHNpZGUgdGhlIGZsdXNoKClcbi8vICAgIGZ1bmN0aW9uLCBndWFyYW50ZWVzIHRoaXMgYmVoYXZpb3IuXG5jb25zdCBzZWVuX2NhbGxiYWNrcyA9IG5ldyBTZXQoKTtcbmxldCBmbHVzaGlkeCA9IDA7IC8vIERvICpub3QqIG1vdmUgdGhpcyBpbnNpZGUgdGhlIGZsdXNoKCkgZnVuY3Rpb25cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGNvbnN0IHNhdmVkX2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgIGRvIHtcbiAgICAgICAgLy8gZmlyc3QsIGNhbGwgYmVmb3JlVXBkYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyBhbmQgdXBkYXRlIGNvbXBvbmVudHNcbiAgICAgICAgd2hpbGUgKGZsdXNoaWR4IDwgZGlydHlfY29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRpcnR5X2NvbXBvbmVudHNbZmx1c2hpZHhdO1xuICAgICAgICAgICAgZmx1c2hpZHgrKztcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIGZsdXNoaWR4ID0gMDtcbiAgICAgICAgd2hpbGUgKGJpbmRpbmdfY2FsbGJhY2tzLmxlbmd0aClcbiAgICAgICAgICAgIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgIC8vIHRoZW4sIG9uY2UgY29tcG9uZW50cyBhcmUgdXBkYXRlZCwgY2FsbFxuICAgICAgICAvLyBhZnRlclVwZGF0ZSBmdW5jdGlvbnMuIFRoaXMgbWF5IGNhdXNlXG4gICAgICAgIC8vIHN1YnNlcXVlbnQgdXBkYXRlcy4uLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gcmVuZGVyX2NhbGxiYWNrc1tpXTtcbiAgICAgICAgICAgIGlmICghc2Vlbl9jYWxsYmFja3MuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIC8vIC4uLnNvIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgbG9vcHNcbiAgICAgICAgICAgICAgICBzZWVuX2NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIH0gd2hpbGUgKGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKTtcbiAgICB3aGlsZSAoZmx1c2hfY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBmbHVzaF9jYWxsYmFja3MucG9wKCkoKTtcbiAgICB9XG4gICAgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHNlZW5fY2FsbGJhY2tzLmNsZWFyKCk7XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHNhdmVkX2NvbXBvbmVudCk7XG59XG5mdW5jdGlvbiB1cGRhdGUoJCQpIHtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgJCQudXBkYXRlKCk7XG4gICAgICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gJCQuZGlydHk7XG4gICAgICAgICQkLmRpcnR5ID0gWy0xXTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcbiAgICAgICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gICAgfVxufVxuXG5sZXQgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KGAke2RpcmVjdGlvbiA/ICdpbnRybycgOiAnb3V0cm8nfSR7a2luZH1gKSk7XG59XG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcbmxldCBvdXRyb3M7XG5mdW5jdGlvbiBncm91cF9vdXRyb3MoKSB7XG4gICAgb3V0cm9zID0ge1xuICAgICAgICByOiAwLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgcDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja19vdXRyb3MoKSB7XG4gICAgaWYgKCFvdXRyb3Mucikge1xuICAgICAgICBydW5fYWxsKG91dHJvcy5jKTtcbiAgICB9XG4gICAgb3V0cm9zID0gb3V0cm9zLnA7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuICAgIGlmIChibG9jayAmJiBibG9jay5pKSB7XG4gICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgIGJsb2NrLmkobG9jYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb3V0KGJsb2NrLCBsb2NhbCwgZGV0YWNoLCBjYWxsYmFjaykge1xuICAgIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgICAgIGlmIChvdXRyb2luZy5oYXMoYmxvY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXRyb2luZy5hZGQoYmxvY2spO1xuICAgICAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWNoKVxuICAgICAgICAgICAgICAgICAgICBibG9jay5kKDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibG9jay5vKGxvY2FsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGlmICh0YXNrKVxuICAgICAgICAgICAgdGFzay5hYm9ydCgpO1xuICAgICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCB0cnVlLCAnc3RhcnQnKSk7XG4gICAgICAgIHRhc2sgPSBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0KCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlKTtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oZ28pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBhbmltYXRpb25fbmFtZTtcbiAgICBjb25zdCBncm91cCA9IG91dHJvcztcbiAgICBncm91cC5yICs9IDE7XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDEsIDAsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdzdGFydCcpKTtcbiAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghLS1ncm91cC5yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgcmVzdWx0IGluIGBlbmQoKWAgYmVpbmcgY2FsbGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gd2UgZG9uJ3QgbmVlZCB0byBjbGVhbiB1cCBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKGdyb3VwLmMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDEgLSB0LCB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVubmluZztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnbygpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlbmQocmVzZXQpIHtcbiAgICAgICAgICAgIGlmIChyZXNldCAmJiBjb25maWcudGljaykge1xuICAgICAgICAgICAgICAgIGNvbmZpZy50aWNrKDEsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICAgICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zLCBpbnRybykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCB0ID0gaW50cm8gPyAwIDogMTtcbiAgICBsZXQgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICBsZXQgcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWUgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGNsZWFyX2FuaW1hdGlvbigpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbml0KHByb2dyYW0sIGR1cmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGQgPSAocHJvZ3JhbS5iIC0gdCk7XG4gICAgICAgIGR1cmF0aW9uICo9IE1hdGguYWJzKGQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYTogdCxcbiAgICAgICAgICAgIGI6IHByb2dyYW0uYixcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0OiBwcm9ncmFtLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBwcm9ncmFtLnN0YXJ0ICsgZHVyYXRpb24sXG4gICAgICAgICAgICBncm91cDogcHJvZ3JhbS5ncm91cFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbyhiKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogbm93KCkgKyBkZWxheSxcbiAgICAgICAgICAgIGJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFiKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgcHJvZ3JhbS5ncm91cCA9IG91dHJvcztcbiAgICAgICAgICAgIG91dHJvcy5yICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSB8fCBwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGFuIGludHJvLCBhbmQgdGhlcmUncyBhIGRlbGF5LCB3ZSBuZWVkIHRvIGRvXG4gICAgICAgICAgICAvLyBhbiBpbml0aWFsIHRpY2sgYW5kL29yIGFwcGx5IENTUyBhbmltYXRpb24gaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGIpXG4gICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBiLCAnc3RhcnQnKSk7XG4gICAgICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdfcHJvZ3JhbSAmJiBub3cgPiBwZW5kaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwZW5kaW5nX3Byb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdzdGFydCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgcnVubmluZ19wcm9ncmFtLmIsIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbiwgMCwgZWFzaW5nLCBjb25maWcuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLmVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGljayh0ID0gcnVubmluZ19wcm9ncmFtLmIsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBlbmRpbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtLmIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW50cm8g4oCUIHdlIGNhbiB0aWR5IHVwIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3V0cm8g4oCUIG5lZWRzIHRvIGJlIGNvb3JkaW5hdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghLS1ydW5uaW5nX3Byb2dyYW0uZ3JvdXAucilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwocnVubmluZ19wcm9ncmFtLmdyb3VwLmMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHJ1bm5pbmdfcHJvZ3JhbS5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBydW5uaW5nX3Byb2dyYW0uYSArIHJ1bm5pbmdfcHJvZ3JhbS5kICogZWFzaW5nKHAgLyBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKHJ1bm5pbmdfcHJvZ3JhbSB8fCBwZW5kaW5nX3Byb2dyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcnVuKGIpIHtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbmQoKSB7XG4gICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVfcHJvbWlzZShwcm9taXNlLCBpbmZvKSB7XG4gICAgY29uc3QgdG9rZW4gPSBpbmZvLnRva2VuID0ge307XG4gICAgZnVuY3Rpb24gdXBkYXRlKHR5cGUsIGluZGV4LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpbmZvLnRva2VuICE9PSB0b2tlbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHZhbHVlO1xuICAgICAgICBsZXQgY2hpbGRfY3R4ID0gaW5mby5jdHg7XG4gICAgICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2hpbGRfY3R4ID0gY2hpbGRfY3R4LnNsaWNlKCk7XG4gICAgICAgICAgICBjaGlsZF9jdHhba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdHlwZSAmJiAoaW5mby5jdXJyZW50ID0gdHlwZSkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IG5lZWRzX2ZsdXNoID0gZmFsc2U7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrKSB7XG4gICAgICAgICAgICBpZiAoaW5mby5ibG9ja3MpIHtcbiAgICAgICAgICAgICAgICBpbmZvLmJsb2Nrcy5mb3JFYWNoKChibG9jaywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gaW5kZXggJiYgYmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5ibG9ja3NbaV0gPT09IGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmZvLmJsb2NrLmQoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgICAgIGJsb2NrLm0oaW5mby5tb3VudCgpLCBpbmZvLmFuY2hvcik7XG4gICAgICAgICAgICBuZWVkc19mbHVzaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5ibG9jayA9IGJsb2NrO1xuICAgICAgICBpZiAoaW5mby5ibG9ja3MpXG4gICAgICAgICAgICBpbmZvLmJsb2Nrc1tpbmRleF0gPSBibG9jaztcbiAgICAgICAgaWYgKG5lZWRzX2ZsdXNoKSB7XG4gICAgICAgICAgICBmbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc19wcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRfY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgICAgIHByb21pc2UudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY3VycmVudF9jb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY3VycmVudF9jb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGluZm8uY2F0Y2gsIDIsIGluZm8uZXJyb3IsIGVycm9yKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgICAgIGlmICghaW5mby5oYXNDYXRjaCkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gaWYgd2UgcHJldmlvdXNseSBoYWQgYSB0aGVuL2NhdGNoIGJsb2NrLCBkZXN0cm95IGl0XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8ucGVuZGluZykge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8ucGVuZGluZywgMCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSBwcm9taXNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZV9hd2FpdF9ibG9ja19icmFuY2goaW5mbywgY3R4LCBkaXJ0eSkge1xuICAgIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICAgIGNvbnN0IHsgcmVzb2x2ZWQgfSA9IGluZm87XG4gICAgaWYgKGluZm8uY3VycmVudCA9PT0gaW5mby50aGVuKSB7XG4gICAgICAgIGNoaWxkX2N0eFtpbmZvLnZhbHVlXSA9IHJlc29sdmVkO1xuICAgIH1cbiAgICBpZiAoaW5mby5jdXJyZW50ID09PSBpbmZvLmNhdGNoKSB7XG4gICAgICAgIGNoaWxkX2N0eFtpbmZvLmVycm9yXSA9IHJlc29sdmVkO1xuICAgIH1cbiAgICBpbmZvLmJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG59XG5cbmNvbnN0IGdsb2JhbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHdpbmRvd1xuICAgIDogdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZ2xvYmFsVGhpc1xuICAgICAgICA6IGdsb2JhbCk7XG5cbmZ1bmN0aW9uIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmQoMSk7XG4gICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xufVxuZnVuY3Rpb24gb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiB1cGRhdGVfa2V5ZWRfZWFjaChvbGRfYmxvY2tzLCBkaXJ0eSwgZ2V0X2tleSwgZHluYW1pYywgY3R4LCBsaXN0LCBsb29rdXAsIG5vZGUsIGRlc3Ryb3ksIGNyZWF0ZV9lYWNoX2Jsb2NrLCBuZXh0LCBnZXRfY29udGV4dCkge1xuICAgIGxldCBvID0gb2xkX2Jsb2Nrcy5sZW5ndGg7XG4gICAgbGV0IG4gPSBsaXN0Lmxlbmd0aDtcbiAgICBsZXQgaSA9IG87XG4gICAgY29uc3Qgb2xkX2luZGV4ZXMgPSB7fTtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBvbGRfaW5kZXhlc1tvbGRfYmxvY2tzW2ldLmtleV0gPSBpO1xuICAgIGNvbnN0IG5ld19ibG9ja3MgPSBbXTtcbiAgICBjb25zdCBuZXdfbG9va3VwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGRlbHRhcyA9IG5ldyBNYXAoKTtcbiAgICBpID0gbjtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgICAgICBibG9jayA9IGNyZWF0ZV9lYWNoX2Jsb2NrKGtleSwgY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeW5hbWljKSB7XG4gICAgICAgICAgICBibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIG5ld19sb29rdXAuc2V0KGtleSwgbmV3X2Jsb2Nrc1tpXSA9IGJsb2NrKTtcbiAgICAgICAgaWYgKGtleSBpbiBvbGRfaW5kZXhlcylcbiAgICAgICAgICAgIGRlbHRhcy5zZXQoa2V5LCBNYXRoLmFicyhpIC0gb2xkX2luZGV4ZXNba2V5XSkpO1xuICAgIH1cbiAgICBjb25zdCB3aWxsX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZGlkX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gaW5zZXJ0KGJsb2NrKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICBibG9jay5tKG5vZGUsIG5leHQpO1xuICAgICAgICBsb29rdXAuc2V0KGJsb2NrLmtleSwgYmxvY2spO1xuICAgICAgICBuZXh0ID0gYmxvY2suZmlyc3Q7XG4gICAgICAgIG4tLTtcbiAgICB9XG4gICAgd2hpbGUgKG8gJiYgbikge1xuICAgICAgICBjb25zdCBuZXdfYmxvY2sgPSBuZXdfYmxvY2tzW24gLSAxXTtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvIC0gMV07XG4gICAgICAgIGNvbnN0IG5ld19rZXkgPSBuZXdfYmxvY2sua2V5O1xuICAgICAgICBjb25zdCBvbGRfa2V5ID0gb2xkX2Jsb2NrLmtleTtcbiAgICAgICAgaWYgKG5ld19ibG9jayA9PT0gb2xkX2Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICBuZXh0ID0gbmV3X2Jsb2NrLmZpcnN0O1xuICAgICAgICAgICAgby0tO1xuICAgICAgICAgICAgbi0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBibG9ja1xuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWxvb2t1cC5oYXMobmV3X2tleSkgfHwgd2lsbF9tb3ZlLmhhcyhuZXdfa2V5KSkge1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlkX21vdmUuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVsdGFzLmdldChuZXdfa2V5KSA+IGRlbHRhcy5nZXQob2xkX2tleSkpIHtcbiAgICAgICAgICAgIGRpZF9tb3ZlLmFkZChuZXdfa2V5KTtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoby0tKSB7XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG4gICAgICAgIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2Jsb2NrLmtleSkpXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICB9XG4gICAgd2hpbGUgKG4pXG4gICAgICAgIGluc2VydChuZXdfYmxvY2tzW24gLSAxXSk7XG4gICAgcmV0dXJuIG5ld19ibG9ja3M7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2tleXMoY3R4LCBsaXN0LCBnZXRfY29udGV4dCwgZ2V0X2tleSkge1xuICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKSk7XG4gICAgICAgIGlmIChrZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoYXZlIGR1cGxpY2F0ZSBrZXlzIGluIGEga2V5ZWQgZWFjaCcpO1xuICAgICAgICB9XG4gICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfc3ByZWFkX3VwZGF0ZShsZXZlbHMsIHVwZGF0ZXMpIHtcbiAgICBjb25zdCB1cGRhdGUgPSB7fTtcbiAgICBjb25zdCB0b19udWxsX291dCA9IHt9O1xuICAgIGNvbnN0IGFjY291bnRlZF9mb3IgPSB7ICQkc2NvcGU6IDEgfTtcbiAgICBsZXQgaSA9IGxldmVscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBvID0gbGV2ZWxzW2ldO1xuICAgICAgICBjb25zdCBuID0gdXBkYXRlc1tpXTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gbikpXG4gICAgICAgICAgICAgICAgICAgIHRvX251bGxfb3V0W2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbikge1xuICAgICAgICAgICAgICAgIGlmICghYWNjb3VudGVkX2ZvcltrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gbltrZXldO1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldmVsc1tpXSA9IG47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0b19udWxsX291dCkge1xuICAgICAgICBpZiAoIShrZXkgaW4gdXBkYXRlKSlcbiAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlO1xufVxuZnVuY3Rpb24gZ2V0X3NwcmVhZF9vYmplY3Qoc3ByZWFkX3Byb3BzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzcHJlYWRfcHJvcHMgPT09ICdvYmplY3QnICYmIHNwcmVhZF9wcm9wcyAhPT0gbnVsbCA/IHNwcmVhZF9wcm9wcyA6IHt9O1xufVxuXG4vLyBzb3VyY2U6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbFxuY29uc3QgYm9vbGVhbl9hdHRyaWJ1dGVzID0gbmV3IFNldChbXG4gICAgJ2FsbG93ZnVsbHNjcmVlbicsXG4gICAgJ2FsbG93cGF5bWVudHJlcXVlc3QnLFxuICAgICdhc3luYycsXG4gICAgJ2F1dG9mb2N1cycsXG4gICAgJ2F1dG9wbGF5JyxcbiAgICAnY2hlY2tlZCcsXG4gICAgJ2NvbnRyb2xzJyxcbiAgICAnZGVmYXVsdCcsXG4gICAgJ2RlZmVyJyxcbiAgICAnZGlzYWJsZWQnLFxuICAgICdmb3Jtbm92YWxpZGF0ZScsXG4gICAgJ2hpZGRlbicsXG4gICAgJ2lzbWFwJyxcbiAgICAnbG9vcCcsXG4gICAgJ211bHRpcGxlJyxcbiAgICAnbXV0ZWQnLFxuICAgICdub21vZHVsZScsXG4gICAgJ25vdmFsaWRhdGUnLFxuICAgICdvcGVuJyxcbiAgICAncGxheXNpbmxpbmUnLFxuICAgICdyZWFkb25seScsXG4gICAgJ3JlcXVpcmVkJyxcbiAgICAncmV2ZXJzZWQnLFxuICAgICdzZWxlY3RlZCdcbl0pO1xuXG5jb25zdCB2b2lkX2VsZW1lbnRfbmFtZXMgPSAvXig/OmFyZWF8YmFzZXxicnxjb2x8Y29tbWFuZHxlbWJlZHxocnxpbWd8aW5wdXR8a2V5Z2VufGxpbmt8bWV0YXxwYXJhbXxzb3VyY2V8dHJhY2t8d2JyKSQvO1xuZnVuY3Rpb24gaXNfdm9pZChuYW1lKSB7XG4gICAgcmV0dXJuIHZvaWRfZWxlbWVudF9uYW1lcy50ZXN0KG5hbWUpIHx8IG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJyFkb2N0eXBlJztcbn1cblxuY29uc3QgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIgPSAvW1xccydcIj4vPVxcdXtGREQwfS1cXHV7RkRFRn1cXHV7RkZGRX1cXHV7RkZGRn1cXHV7MUZGRkV9XFx1ezFGRkZGfVxcdXsyRkZGRX1cXHV7MkZGRkZ9XFx1ezNGRkZFfVxcdXszRkZGRn1cXHV7NEZGRkV9XFx1ezRGRkZGfVxcdXs1RkZGRX1cXHV7NUZGRkZ9XFx1ezZGRkZFfVxcdXs2RkZGRn1cXHV7N0ZGRkV9XFx1ezdGRkZGfVxcdXs4RkZGRX1cXHV7OEZGRkZ9XFx1ezlGRkZFfVxcdXs5RkZGRn1cXHV7QUZGRkV9XFx1e0FGRkZGfVxcdXtCRkZGRX1cXHV7QkZGRkZ9XFx1e0NGRkZFfVxcdXtDRkZGRn1cXHV7REZGRkV9XFx1e0RGRkZGfVxcdXtFRkZGRX1cXHV7RUZGRkZ9XFx1e0ZGRkZFfVxcdXtGRkZGRn1cXHV7MTBGRkZFfVxcdXsxMEZGRkZ9XS91O1xuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG4vLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jbm9uY2hhcmFjdGVyXG5mdW5jdGlvbiBzcHJlYWQoYXJncywgYXR0cnNfdG9fYWRkKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmFyZ3MpO1xuICAgIGlmIChhdHRyc190b19hZGQpIHtcbiAgICAgICAgY29uc3QgY2xhc3Nlc190b19hZGQgPSBhdHRyc190b19hZGQuY2xhc3NlcztcbiAgICAgICAgY29uc3Qgc3R5bGVzX3RvX2FkZCA9IGF0dHJzX3RvX2FkZC5zdHlsZXM7XG4gICAgICAgIGlmIChjbGFzc2VzX3RvX2FkZCkge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuY2xhc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgPSBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgKz0gJyAnICsgY2xhc3Nlc190b19hZGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0eWxlc190b19hZGQpIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLnN0eWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnN0eWxlID0gc3R5bGVfb2JqZWN0X3RvX3N0cmluZyhzdHlsZXNfdG9fYWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuc3R5bGUgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKG1lcmdlX3Nzcl9zdHlsZXMoYXR0cmlidXRlcy5zdHlsZSwgc3R5bGVzX3RvX2FkZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzdHIgPSAnJztcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBpZiAoaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHRydWUpXG4gICAgICAgICAgICBzdHIgKz0gJyAnICsgbmFtZTtcbiAgICAgICAgZWxzZSBpZiAoYm9vbGVhbl9hdHRyaWJ1dGVzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpXG4gICAgICAgICAgICAgICAgc3RyICs9ICcgJyArIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3RyICs9IGAgJHtuYW1lfT1cIiR7dmFsdWV9XCJgO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIG1lcmdlX3Nzcl9zdHlsZXMoc3R5bGVfYXR0cmlidXRlLCBzdHlsZV9kaXJlY3RpdmUpIHtcbiAgICBjb25zdCBzdHlsZV9vYmplY3QgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGluZGl2aWR1YWxfc3R5bGUgb2Ygc3R5bGVfYXR0cmlidXRlLnNwbGl0KCc7JykpIHtcbiAgICAgICAgY29uc3QgY29sb25faW5kZXggPSBpbmRpdmlkdWFsX3N0eWxlLmluZGV4T2YoJzonKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IGluZGl2aWR1YWxfc3R5bGUuc2xpY2UoMCwgY29sb25faW5kZXgpLnRyaW0oKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpbmRpdmlkdWFsX3N0eWxlLnNsaWNlKGNvbG9uX2luZGV4ICsgMSkudHJpbSgpO1xuICAgICAgICBpZiAoIW5hbWUpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgc3R5bGVfb2JqZWN0W25hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbmFtZSBpbiBzdHlsZV9kaXJlY3RpdmUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzdHlsZV9kaXJlY3RpdmVbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgc3R5bGVfb2JqZWN0W25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgc3R5bGVfb2JqZWN0W25hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHlsZV9vYmplY3Q7XG59XG5jb25zdCBBVFRSX1JFR0VYID0gL1smXCJdL2c7XG5jb25zdCBDT05URU5UX1JFR0VYID0gL1smPF0vZztcbi8qKlxuICogTm90ZTogdGhpcyBtZXRob2QgaXMgcGVyZm9ybWFuY2Ugc2Vuc2l0aXZlIGFuZCBoYXMgYmVlbiBvcHRpbWl6ZWRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvcHVsbC81NzAxXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZSh2YWx1ZSwgaXNfYXR0ciA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3RyID0gU3RyaW5nKHZhbHVlKTtcbiAgICBjb25zdCBwYXR0ZXJuID0gaXNfYXR0ciA/IEFUVFJfUkVHRVggOiBDT05URU5UX1JFR0VYO1xuICAgIHBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgICBsZXQgZXNjYXBlZCA9ICcnO1xuICAgIGxldCBsYXN0ID0gMDtcbiAgICB3aGlsZSAocGF0dGVybi50ZXN0KHN0cikpIHtcbiAgICAgICAgY29uc3QgaSA9IHBhdHRlcm4ubGFzdEluZGV4IC0gMTtcbiAgICAgICAgY29uc3QgY2ggPSBzdHJbaV07XG4gICAgICAgIGVzY2FwZWQgKz0gc3RyLnN1YnN0cmluZyhsYXN0LCBpKSArIChjaCA9PT0gJyYnID8gJyZhbXA7JyA6IChjaCA9PT0gJ1wiJyA/ICcmcXVvdDsnIDogJyZsdDsnKSk7XG4gICAgICAgIGxhc3QgPSBpICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIGVzY2FwZWQgKyBzdHIuc3Vic3RyaW5nKGxhc3QpO1xufVxuZnVuY3Rpb24gZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZSh2YWx1ZSkge1xuICAgIC8vIGtlZXAgYm9vbGVhbnMsIG51bGwsIGFuZCB1bmRlZmluZWQgZm9yIHRoZSBzYWtlIG9mIGBzcHJlYWRgXG4gICAgY29uc3Qgc2hvdWxkX2VzY2FwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpO1xuICAgIHJldHVybiBzaG91bGRfZXNjYXBlID8gZXNjYXBlKHZhbHVlLCB0cnVlKSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gZXNjYXBlX29iamVjdChvYmopIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlKG9ialtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGVhY2goaXRlbXMsIGZuKSB7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGZuKGl0ZW1zW2ldLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmNvbnN0IG1pc3NpbmdfY29tcG9uZW50ID0ge1xuICAgICQkcmVuZGVyOiAoKSA9PiAnJ1xufTtcbmZ1bmN0aW9uIHZhbGlkYXRlX2NvbXBvbmVudChjb21wb25lbnQsIG5hbWUpIHtcbiAgICBpZiAoIWNvbXBvbmVudCB8fCAhY29tcG9uZW50LiQkcmVuZGVyKSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnc3ZlbHRlOmNvbXBvbmVudCcpXG4gICAgICAgICAgICBuYW1lICs9ICcgdGhpcz17Li4ufSc7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgPCR7bmFtZX0+IGlzIG5vdCBhIHZhbGlkIFNTUiBjb21wb25lbnQuIFlvdSBtYXkgbmVlZCB0byByZXZpZXcgeW91ciBidWlsZCBjb25maWcgdG8gZW5zdXJlIHRoYXQgZGVwZW5kZW5jaWVzIGFyZSBjb21waWxlZCwgcmF0aGVyIHRoYW4gaW1wb3J0ZWQgYXMgcHJlLWNvbXBpbGVkIG1vZHVsZXNgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGRlYnVnKGZpbGUsIGxpbmUsIGNvbHVtbiwgdmFsdWVzKSB7XG4gICAgY29uc29sZS5sb2coYHtAZGVidWd9ICR7ZmlsZSA/IGZpbGUgKyAnICcgOiAnJ30oJHtsaW5lfToke2NvbHVtbn0pYCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKHZhbHVlcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIHJldHVybiAnJztcbn1cbmxldCBvbl9kZXN0cm95O1xuZnVuY3Rpb24gY3JlYXRlX3Nzcl9jb21wb25lbnQoZm4pIHtcbiAgICBmdW5jdGlvbiAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMsIGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgICAgICBjb25zdCAkJCA9IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3ksXG4gICAgICAgICAgICBjb250ZXh0OiBuZXcgTWFwKGNvbnRleHQgfHwgKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSkpLFxuICAgICAgICAgICAgLy8gdGhlc2Ugd2lsbCBiZSBpbW1lZGlhdGVseSBkaXNjYXJkZWRcbiAgICAgICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KClcbiAgICAgICAgfTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHsgJCQgfSk7XG4gICAgICAgIGNvbnN0IGh0bWwgPSBmbihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMpO1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXI6IChwcm9wcyA9IHt9LCB7ICQkc2xvdHMgPSB7fSwgY29udGV4dCA9IG5ldyBNYXAoKSB9ID0ge30pID0+IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3kgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdGl0bGU6ICcnLCBoZWFkOiAnJywgY3NzOiBuZXcgU2V0KCkgfTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCB7fSwgJCRzbG90cywgY29udGV4dCk7XG4gICAgICAgICAgICBydW5fYWxsKG9uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgICAgIGNzczoge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBBcnJheS5mcm9tKHJlc3VsdC5jc3MpLm1hcChjc3MgPT4gY3NzLmNvZGUpLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgICAgICAgICBtYXA6IG51bGwgLy8gVE9ET1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGVhZDogcmVzdWx0LnRpdGxlICsgcmVzdWx0LmhlYWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgICQkcmVuZGVyXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFkZF9hdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAoYm9vbGVhbiAmJiAhdmFsdWUpKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgY29uc3QgYXNzaWdubWVudCA9IChib29sZWFuICYmIHZhbHVlID09PSB0cnVlKSA/ICcnIDogYD1cIiR7ZXNjYXBlKHZhbHVlLCB0cnVlKX1cImA7XG4gICAgcmV0dXJuIGAgJHtuYW1lfSR7YXNzaWdubWVudH1gO1xufVxuZnVuY3Rpb24gYWRkX2NsYXNzZXMoY2xhc3Nlcykge1xuICAgIHJldHVybiBjbGFzc2VzID8gYCBjbGFzcz1cIiR7Y2xhc3Nlc31cImAgOiAnJztcbn1cbmZ1bmN0aW9uIHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVfb2JqZWN0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlX29iamVjdClcbiAgICAgICAgLmZpbHRlcihrZXkgPT4gc3R5bGVfb2JqZWN0W2tleV0pXG4gICAgICAgIC5tYXAoa2V5ID0+IGAke2tleX06ICR7c3R5bGVfb2JqZWN0W2tleV19O2ApXG4gICAgICAgIC5qb2luKCcgJyk7XG59XG5mdW5jdGlvbiBhZGRfc3R5bGVzKHN0eWxlX29iamVjdCkge1xuICAgIGNvbnN0IHN0eWxlcyA9IHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVfb2JqZWN0KTtcbiAgICByZXR1cm4gc3R5bGVzID8gYCBzdHlsZT1cIiR7c3R5bGVzfVwiYCA6ICcnO1xufVxuXG5mdW5jdGlvbiBiaW5kKGNvbXBvbmVudCwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IGNvbXBvbmVudC4kJC5wcm9wc1tuYW1lXTtcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb21wb25lbnQuJCQuYm91bmRbaW5kZXhdID0gY2FsbGJhY2s7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudC4kJC5jdHhbaW5kZXhdKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVfY29tcG9uZW50KGJsb2NrKSB7XG4gICAgYmxvY2sgJiYgYmxvY2suYygpO1xufVxuZnVuY3Rpb24gY2xhaW1fY29tcG9uZW50KGJsb2NrLCBwYXJlbnRfbm9kZXMpIHtcbiAgICBibG9jayAmJiBibG9jay5sKHBhcmVudF9ub2Rlcyk7XG59XG5mdW5jdGlvbiBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCB0YXJnZXQsIGFuY2hvciwgY3VzdG9tRWxlbWVudCkge1xuICAgIGNvbnN0IHsgZnJhZ21lbnQsIG9uX21vdW50LCBvbl9kZXN0cm95LCBhZnRlcl91cGRhdGUgfSA9IGNvbXBvbmVudC4kJDtcbiAgICBmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICBpZiAoIWN1c3RvbUVsZW1lbnQpIHtcbiAgICAgICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19vbl9kZXN0cm95ID0gb25fbW91bnQubWFwKHJ1bikuZmlsdGVyKGlzX2Z1bmN0aW9uKTtcbiAgICAgICAgICAgIGlmIChvbl9kZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgb25fZGVzdHJveS5wdXNoKC4uLm5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEVkZ2UgY2FzZSAtIGNvbXBvbmVudCB3YXMgZGVzdHJveWVkIGltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgICAgIC8vIG1vc3QgbGlrZWx5IGFzIGEgcmVzdWx0IG9mIGEgYmluZGluZyBpbml0aWFsaXNpbmdcbiAgICAgICAgICAgICAgICBydW5fYWxsKG5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudC4kJC5vbl9tb3VudCA9IFtdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2NvbXBvbmVudChjb21wb25lbnQsIGRldGFjaGluZykge1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkO1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICBydW5fYWxsKCQkLm9uX2Rlc3Ryb3kpO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5kKGRldGFjaGluZyk7XG4gICAgICAgIC8vIFRPRE8gbnVsbCBvdXQgb3RoZXIgcmVmcywgaW5jbHVkaW5nIGNvbXBvbmVudC4kJCAoYnV0IG5lZWQgdG9cbiAgICAgICAgLy8gcHJlc2VydmUgZmluYWwgc3RhdGU/KVxuICAgICAgICAkJC5vbl9kZXN0cm95ID0gJCQuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgICAkJC5jdHggPSBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSkge1xuICAgIGlmIChjb21wb25lbnQuJCQuZGlydHlbMF0gPT09IC0xKSB7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICAgICAgY29tcG9uZW50LiQkLmRpcnR5LmZpbGwoMCk7XG4gICAgfVxuICAgIGNvbXBvbmVudC4kJC5kaXJ0eVsoaSAvIDMxKSB8IDBdIHw9ICgxIDw8IChpICUgMzEpKTtcbn1cbmZ1bmN0aW9uIGluaXQoY29tcG9uZW50LCBvcHRpb25zLCBpbnN0YW5jZSwgY3JlYXRlX2ZyYWdtZW50LCBub3RfZXF1YWwsIHByb3BzLCBhcHBlbmRfc3R5bGVzLCBkaXJ0eSA9IFstMV0pIHtcbiAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gY3VycmVudF9jb21wb25lbnQ7XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQgPSB7XG4gICAgICAgIGZyYWdtZW50OiBudWxsLFxuICAgICAgICBjdHg6IG51bGwsXG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIHByb3BzLFxuICAgICAgICB1cGRhdGU6IG5vb3AsXG4gICAgICAgIG5vdF9lcXVhbCxcbiAgICAgICAgYm91bmQ6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICAvLyBsaWZlY3ljbGVcbiAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICBvbl9kZXN0cm95OiBbXSxcbiAgICAgICAgb25fZGlzY29ubmVjdDogW10sXG4gICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICBjb250ZXh0OiBuZXcgTWFwKG9wdGlvbnMuY29udGV4dCB8fCAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSksXG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICBkaXJ0eSxcbiAgICAgICAgc2tpcF9ib3VuZDogZmFsc2UsXG4gICAgICAgIHJvb3Q6IG9wdGlvbnMudGFyZ2V0IHx8IHBhcmVudF9jb21wb25lbnQuJCQucm9vdFxuICAgIH07XG4gICAgYXBwZW5kX3N0eWxlcyAmJiBhcHBlbmRfc3R5bGVzKCQkLnJvb3QpO1xuICAgIGxldCByZWFkeSA9IGZhbHNlO1xuICAgICQkLmN0eCA9IGluc3RhbmNlXG4gICAgICAgID8gaW5zdGFuY2UoY29tcG9uZW50LCBvcHRpb25zLnByb3BzIHx8IHt9LCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcbiAgICAgICAgICAgIGlmICgkJC5jdHggJiYgbm90X2VxdWFsKCQkLmN0eFtpXSwgJCQuY3R4W2ldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKVxuICAgICAgICAgICAgICAgICAgICAkJC5ib3VuZFtpXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KVxuICAgICAgICAgICAgICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IFtdO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgICAgc3RhcnRfaHlkcmF0aW5nKCk7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvciwgb3B0aW9ucy5jdXN0b21FbGVtZW50KTtcbiAgICAgICAgZW5kX2h5ZHJhdGluZygpO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5sZXQgU3ZlbHRlRWxlbWVudDtcbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBTdmVsdGVFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgY29uc3QgeyBvbl9tb3VudCB9ID0gdGhpcy4kJDtcbiAgICAgICAgICAgIHRoaXMuJCQub25fZGlzY29ubmVjdCA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kJC5zbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuJCQuc2xvdHRlZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpc1thdHRyXSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgcnVuX2FsbCh0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QpO1xuICAgICAgICB9XG4gICAgICAgICRkZXN0cm95KCkge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHRoaXMgZGVsZWdhdGUgdG8gYWRkRXZlbnRMaXN0ZW5lcj9cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cy4gVXNlZCB3aGVuIGRldj1mYWxzZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgIH1cbiAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdIHx8ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSA9IFtdKSk7XG4gICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLiQkc2V0ICYmICFpc19lbXB0eSgkJHByb3BzKSkge1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hfZGV2KHR5cGUsIGRldGFpbCkge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KHR5cGUsIE9iamVjdC5hc3NpZ24oeyB2ZXJzaW9uOiAnMy40OS4wJyB9LCBkZXRhaWwpLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2Rldih0YXJnZXQsIG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlIH0pO1xuICAgIGFwcGVuZCh0YXJnZXQsIG5vZGUpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2h5ZHJhdGlvbl9kZXYodGFyZ2V0LCBub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcbiAgICBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBpbnNlcnRfZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSwgYW5jaG9yIH0pO1xuICAgIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5mdW5jdGlvbiBpbnNlcnRfaHlkcmF0aW9uX2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSwgYW5jaG9yKTtcbn1cbmZ1bmN0aW9uIGRldGFjaF9kZXYobm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlJywgeyBub2RlIH0pO1xuICAgIGRldGFjaChub2RlKTtcbn1cbmZ1bmN0aW9uIGRldGFjaF9iZXR3ZWVuX2RldihiZWZvcmUsIGFmdGVyKSB7XG4gICAgd2hpbGUgKGJlZm9yZS5uZXh0U2libGluZyAmJiBiZWZvcmUubmV4dFNpYmxpbmcgIT09IGFmdGVyKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYmVmb3JlX2RldihhZnRlcikge1xuICAgIHdoaWxlIChhZnRlci5wcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihhZnRlci5wcmV2aW91c1NpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9hZnRlcl9kZXYoYmVmb3JlKSB7XG4gICAgd2hpbGUgKGJlZm9yZS5uZXh0U2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gbGlzdGVuX2Rldihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucywgaGFzX3ByZXZlbnRfZGVmYXVsdCwgaGFzX3N0b3BfcHJvcGFnYXRpb24pIHtcbiAgICBjb25zdCBtb2RpZmllcnMgPSBvcHRpb25zID09PSB0cnVlID8gWydjYXB0dXJlJ10gOiBvcHRpb25zID8gQXJyYXkuZnJvbShPYmplY3Qua2V5cyhvcHRpb25zKSkgOiBbXTtcbiAgICBpZiAoaGFzX3ByZXZlbnRfZGVmYXVsdClcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3ByZXZlbnREZWZhdWx0Jyk7XG4gICAgaWYgKGhhc19zdG9wX3Byb3BhZ2F0aW9uKVxuICAgICAgICBtb2RpZmllcnMucHVzaCgnc3RvcFByb3BhZ2F0aW9uJyk7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01BZGRFdmVudExpc3RlbmVyJywgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgIGNvbnN0IGRpc3Bvc2UgPSBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICAgICAgZGlzcG9zZSgpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyX2Rldihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmVBdHRyaWJ1dGUnLCB7IG5vZGUsIGF0dHJpYnV0ZSB9KTtcbiAgICBlbHNlXG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0QXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUsIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gcHJvcF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldFByb3BlcnR5JywgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBkYXRhc2V0X2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlLmRhdGFzZXRbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXREYXRhc2V0JywgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YV9kZXYodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ID09PSBkYXRhKVxuICAgICAgICByZXR1cm47XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXREYXRhJywgeyBub2RlOiB0ZXh0LCBkYXRhIH0pO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50KGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJyAmJiAhKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBhcmcpKSB7XG4gICAgICAgIGxldCBtc2cgPSAneyNlYWNofSBvbmx5IGl0ZXJhdGVzIG92ZXIgYXJyYXktbGlrZSBvYmplY3RzLic7XG4gICAgICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIGFyZyAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gYXJnKSB7XG4gICAgICAgICAgICBtc2cgKz0gJyBZb3UgY2FuIHVzZSBhIHNwcmVhZCB0byBjb252ZXJ0IHRoaXMgaXRlcmFibGUgaW50byBhbiBhcnJheS4nO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3Nsb3RzKG5hbWUsIHNsb3QsIGtleXMpIHtcbiAgICBmb3IgKGNvbnN0IHNsb3Rfa2V5IG9mIE9iamVjdC5rZXlzKHNsb3QpKSB7XG4gICAgICAgIGlmICghfmtleXMuaW5kZXhPZihzbG90X2tleSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgPCR7bmFtZX0+IHJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgc2xvdCBcIiR7c2xvdF9rZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9keW5hbWljX2VsZW1lbnQodGFnKSB7XG4gICAgY29uc3QgaXNfc3RyaW5nID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZyc7XG4gICAgaWYgKHRhZyAmJiAhaXNfc3RyaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignPHN2ZWx0ZTplbGVtZW50PiBleHBlY3RzIFwidGhpc1wiIGF0dHJpYnV0ZSB0byBiZSBhIHN0cmluZy4nKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV92b2lkX2R5bmFtaWNfZWxlbWVudCh0YWcpIHtcbiAgICBpZiAodGFnICYmIGlzX3ZvaWQodGFnKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYDxzdmVsdGU6ZWxlbWVudCB0aGlzPVwiJHt0YWd9XCI+IGlzIHNlbGYtY2xvc2luZyBhbmQgY2Fubm90IGhhdmUgY29udGVudC5gKTtcbiAgICB9XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIFN2ZWx0ZSBjb21wb25lbnRzIHdpdGggc29tZSBtaW5vciBkZXYtZW5oYW5jZW1lbnRzLiBVc2VkIHdoZW4gZGV2PXRydWUuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudERldiBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgKCFvcHRpb25zLnRhcmdldCAmJiAhb3B0aW9ucy4kJGlubGluZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIid0YXJnZXQnIGlzIGEgcmVxdWlyZWQgb3B0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgICRkZXN0cm95KCkge1xuICAgICAgICBzdXBlci4kZGVzdHJveSgpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb21wb25lbnQgd2FzIGFscmVhZHkgZGVzdHJveWVkJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICB9O1xuICAgIH1cbiAgICAkY2FwdHVyZV9zdGF0ZSgpIHsgfVxuICAgICRpbmplY3Rfc3RhdGUoKSB7IH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyB0byBjcmVhdGUgc3Ryb25nbHkgdHlwZWQgU3ZlbHRlIGNvbXBvbmVudHMuXG4gKiBUaGlzIG9ubHkgZXhpc3RzIGZvciB0eXBpbmcgcHVycG9zZXMgYW5kIHNob3VsZCBiZSB1c2VkIGluIGAuZC50c2AgZmlsZXMuXG4gKlxuICogIyMjIEV4YW1wbGU6XG4gKlxuICogWW91IGhhdmUgY29tcG9uZW50IGxpYnJhcnkgb24gbnBtIGNhbGxlZCBgY29tcG9uZW50LWxpYnJhcnlgLCBmcm9tIHdoaWNoXG4gKiB5b3UgZXhwb3J0IGEgY29tcG9uZW50IGNhbGxlZCBgTXlDb21wb25lbnRgLiBGb3IgU3ZlbHRlK1R5cGVTY3JpcHQgdXNlcnMsXG4gKiB5b3Ugd2FudCB0byBwcm92aWRlIHR5cGluZ3MuIFRoZXJlZm9yZSB5b3UgY3JlYXRlIGEgYGluZGV4LmQudHNgOlxuICogYGBgdHNcbiAqIGltcG9ydCB7IFN2ZWx0ZUNvbXBvbmVudFR5cGVkIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50VHlwZWQ8e2Zvbzogc3RyaW5nfT4ge31cbiAqIGBgYFxuICogVHlwaW5nIHRoaXMgbWFrZXMgaXQgcG9zc2libGUgZm9yIElERXMgbGlrZSBWUyBDb2RlIHdpdGggdGhlIFN2ZWx0ZSBleHRlbnNpb25cbiAqIHRvIHByb3ZpZGUgaW50ZWxsaXNlbnNlIGFuZCB0byB1c2UgdGhlIGNvbXBvbmVudCBsaWtlIHRoaXMgaW4gYSBTdmVsdGUgZmlsZVxuICogd2l0aCBUeXBlU2NyaXB0OlxuICogYGBgc3ZlbHRlXG4gKiA8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICogXHRpbXBvcnQgeyBNeUNvbXBvbmVudCB9IGZyb20gXCJjb21wb25lbnQtbGlicmFyeVwiO1xuICogPC9zY3JpcHQ+XG4gKiA8TXlDb21wb25lbnQgZm9vPXsnYmFyJ30gLz5cbiAqIGBgYFxuICpcbiAqICMjIyMgV2h5IG5vdCBtYWtlIHRoaXMgcGFydCBvZiBgU3ZlbHRlQ29tcG9uZW50KERldilgP1xuICogQmVjYXVzZVxuICogYGBgdHNcbiAqIGNsYXNzIEFTdWJjbGFzc09mU3ZlbHRlQ29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50PHtmb286IHN0cmluZ30+IHt9XG4gKiBjb25zdCBjb21wb25lbnQ6IHR5cGVvZiBTdmVsdGVDb21wb25lbnQgPSBBU3ViY2xhc3NPZlN2ZWx0ZUNvbXBvbmVudDtcbiAqIGBgYFxuICogd2lsbCB0aHJvdyBhIHR5cGUgZXJyb3IsIHNvIHdlIG5lZWQgdG8gc2VwYXJhdGUgdGhlIG1vcmUgc3RyaWN0bHkgdHlwZWQgY2xhc3MuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudFR5cGVkIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50RGV2IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvb3BfZ3VhcmQodGltZW91dCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0ID4gdGltZW91dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmZpbml0ZSBsb29wIGRldGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgeyBIdG1sVGFnLCBIdG1sVGFnSHlkcmF0aW9uLCBTdmVsdGVDb21wb25lbnQsIFN2ZWx0ZUNvbXBvbmVudERldiwgU3ZlbHRlQ29tcG9uZW50VHlwZWQsIFN2ZWx0ZUVsZW1lbnQsIGFjdGlvbl9kZXN0cm95ZXIsIGFkZF9hdHRyaWJ1dGUsIGFkZF9jbGFzc2VzLCBhZGRfZmx1c2hfY2FsbGJhY2ssIGFkZF9sb2NhdGlvbiwgYWRkX3JlbmRlcl9jYWxsYmFjaywgYWRkX3Jlc2l6ZV9saXN0ZW5lciwgYWRkX3N0eWxlcywgYWRkX3RyYW5zZm9ybSwgYWZ0ZXJVcGRhdGUsIGFwcGVuZCwgYXBwZW5kX2RldiwgYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQsIGFwcGVuZF9oeWRyYXRpb24sIGFwcGVuZF9oeWRyYXRpb25fZGV2LCBhcHBlbmRfc3R5bGVzLCBhc3NpZ24sIGF0dHIsIGF0dHJfZGV2LCBhdHRyaWJ1dGVfdG9fb2JqZWN0LCBiZWZvcmVVcGRhdGUsIGJpbmQsIGJpbmRpbmdfY2FsbGJhY2tzLCBibGFua19vYmplY3QsIGJ1YmJsZSwgY2hlY2tfb3V0cm9zLCBjaGlsZHJlbiwgY2xhaW1fY29tcG9uZW50LCBjbGFpbV9lbGVtZW50LCBjbGFpbV9odG1sX3RhZywgY2xhaW1fc3BhY2UsIGNsYWltX3N2Z19lbGVtZW50LCBjbGFpbV90ZXh0LCBjbGVhcl9sb29wcywgY29tcG9uZW50X3N1YnNjcmliZSwgY29tcHV0ZV9yZXN0X3Byb3BzLCBjb21wdXRlX3Nsb3RzLCBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGNyZWF0ZV9hbmltYXRpb24sIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24sIGNyZWF0ZV9jb21wb25lbnQsIGNyZWF0ZV9pbl90cmFuc2l0aW9uLCBjcmVhdGVfb3V0X3RyYW5zaXRpb24sIGNyZWF0ZV9zbG90LCBjcmVhdGVfc3NyX2NvbXBvbmVudCwgY3VycmVudF9jb21wb25lbnQsIGN1c3RvbV9ldmVudCwgZGF0YXNldF9kZXYsIGRlYnVnLCBkZXN0cm95X2Jsb2NrLCBkZXN0cm95X2NvbXBvbmVudCwgZGVzdHJveV9lYWNoLCBkZXRhY2gsIGRldGFjaF9hZnRlcl9kZXYsIGRldGFjaF9iZWZvcmVfZGV2LCBkZXRhY2hfYmV0d2Vlbl9kZXYsIGRldGFjaF9kZXYsIGRpcnR5X2NvbXBvbmVudHMsIGRpc3BhdGNoX2RldiwgZWFjaCwgZWxlbWVudCwgZWxlbWVudF9pcywgZW1wdHksIGVuZF9oeWRyYXRpbmcsIGVzY2FwZSwgZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZSwgZXNjYXBlX29iamVjdCwgZXhjbHVkZV9pbnRlcm5hbF9wcm9wcywgZml4X2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfcG9zaXRpb24sIGZsdXNoLCBnZXRBbGxDb250ZXh0cywgZ2V0Q29udGV4dCwgZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlLCBnZXRfYmluZGluZ19ncm91cF92YWx1ZSwgZ2V0X2N1cnJlbnRfY29tcG9uZW50LCBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzLCBnZXRfcm9vdF9mb3Jfc3R5bGUsIGdldF9zbG90X2NoYW5nZXMsIGdldF9zcHJlYWRfb2JqZWN0LCBnZXRfc3ByZWFkX3VwZGF0ZSwgZ2V0X3N0b3JlX3ZhbHVlLCBnbG9iYWxzLCBncm91cF9vdXRyb3MsIGhhbmRsZV9wcm9taXNlLCBoYXNDb250ZXh0LCBoYXNfcHJvcCwgaWRlbnRpdHksIGluaXQsIGluc2VydCwgaW5zZXJ0X2RldiwgaW5zZXJ0X2h5ZHJhdGlvbiwgaW5zZXJ0X2h5ZHJhdGlvbl9kZXYsIGludHJvcywgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIsIGlzX2NsaWVudCwgaXNfY3Jvc3NvcmlnaW4sIGlzX2VtcHR5LCBpc19mdW5jdGlvbiwgaXNfcHJvbWlzZSwgaXNfdm9pZCwgbGlzdGVuLCBsaXN0ZW5fZGV2LCBsb29wLCBsb29wX2d1YXJkLCBtZXJnZV9zc3Jfc3R5bGVzLCBtaXNzaW5nX2NvbXBvbmVudCwgbW91bnRfY29tcG9uZW50LCBub29wLCBub3RfZXF1YWwsIG5vdywgbnVsbF90b19lbXB0eSwgb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcywgb25EZXN0cm95LCBvbk1vdW50LCBvbmNlLCBvdXRyb19hbmRfZGVzdHJveV9ibG9jaywgcHJldmVudF9kZWZhdWx0LCBwcm9wX2RldiwgcXVlcnlfc2VsZWN0b3JfYWxsLCByYWYsIHJ1biwgcnVuX2FsbCwgc2FmZV9ub3RfZXF1YWwsIHNjaGVkdWxlX3VwZGF0ZSwgc2VsZWN0X211bHRpcGxlX3ZhbHVlLCBzZWxlY3Rfb3B0aW9uLCBzZWxlY3Rfb3B0aW9ucywgc2VsZWN0X3ZhbHVlLCBzZWxmLCBzZXRDb250ZXh0LCBzZXRfYXR0cmlidXRlcywgc2V0X2N1cnJlbnRfY29tcG9uZW50LCBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YSwgc2V0X2RhdGEsIHNldF9kYXRhX2Rldiwgc2V0X2lucHV0X3R5cGUsIHNldF9pbnB1dF92YWx1ZSwgc2V0X25vdywgc2V0X3JhZiwgc2V0X3N0b3JlX3ZhbHVlLCBzZXRfc3R5bGUsIHNldF9zdmdfYXR0cmlidXRlcywgc3BhY2UsIHNwcmVhZCwgc3JjX3VybF9lcXVhbCwgc3RhcnRfaHlkcmF0aW5nLCBzdG9wX3Byb3BhZ2F0aW9uLCBzdWJzY3JpYmUsIHN2Z19lbGVtZW50LCB0ZXh0LCB0aWNrLCB0aW1lX3Jhbmdlc190b19hcnJheSwgdG9fbnVtYmVyLCB0b2dnbGVfY2xhc3MsIHRyYW5zaXRpb25faW4sIHRyYW5zaXRpb25fb3V0LCB0cnVzdGVkLCB1cGRhdGVfYXdhaXRfYmxvY2tfYnJhbmNoLCB1cGRhdGVfa2V5ZWRfZWFjaCwgdXBkYXRlX3Nsb3QsIHVwZGF0ZV9zbG90X2Jhc2UsIHZhbGlkYXRlX2NvbXBvbmVudCwgdmFsaWRhdGVfZHluYW1pY19lbGVtZW50LCB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50LCB2YWxpZGF0ZV9lYWNoX2tleXMsIHZhbGlkYXRlX3Nsb3RzLCB2YWxpZGF0ZV9zdG9yZSwgdmFsaWRhdGVfdm9pZF9keW5hbWljX2VsZW1lbnQsIHhsaW5rX2F0dHIgfTtcbiIsImltcG9ydCB0eXBlIHsgUGxhaW5PYmplY3QgfSBmcm9tIFwiIy9tZXRhL2JlbHRcIjtcblxuLyoqXG4gKiBTaG9ydGN1dCBmb3IgYSB2ZXJ5IGNvbW1vbiB0eXBlIHBhdHRlcm5cbiAqL1xuZXhwb3J0IHR5cGUgRGljdDx3X3ZhbHVlPXN0cmluZz4gPSBSZWNvcmQ8c3RyaW5nLCB3X3ZhbHVlPjtcblxuXG4vKipcbiAqIFNob3J0Y3V0IGZvciBhbm90aGVyIGNvbW1vbiB0eXBlIHBhdHRlcm5cbiAqL1xuZXhwb3J0IHR5cGUgUHJvbWlzYWJsZTx3X3ZhbHVlPiA9IHdfdmFsdWUgfCBQcm9taXNlPHdfdmFsdWU+O1xuXG5cbi8qKlxuICogUm9vdCB0eXBlIGZvciBhbGwgb2JqZWN0cyBjb25zaWRlcmVkIHRvIGJlIHBhcnNlZCBKU09OIG9iamVjdHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKc29uT2JqZWN0IHsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0W2s6IHN0cmluZ106IEpzb25WYWx1ZSB8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBVbmlvbiBvZiBcInZhbHVhYmxlXCIsIHByaW1pdGl2ZSBKU09OIHZhbHVlIHR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIEpzb25QcmltaXRpdmUgPVxuXHR8IGJvb2xlYW5cblx0fCBudW1iZXJcblx0fCBzdHJpbmc7XG5cbi8qKlxuICogQWxsIHByaW1pdGl2ZSBKU09OIHZhbHVlIHR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIEpzb25QcmltaXRpdmVOdWxsYWJsZSA9XG5cdHwgSnNvblByaW1pdGl2ZVxuXHR8IG51bGw7XG5cbi8qKlxuICogQWxsIEpTT04gdmFsdWUgdHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgSnNvblZhbHVlID1cblx0fCBKc29uUHJpbWl0aXZlTnVsbGFibGVcblx0fCBKc29uVmFsdWVbXVxuXHR8IEpzb25PYmplY3Rcblx0fCB1bmRlZmluZWQ7XG5cblxuLyoqXG4gKiBUaGUgZnJlcXVlbnRseS11c2VkIFwibm8tb3BlcmF0aW9uXCIgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IEZfTk9PUCA9ICgpID0+IHt9OyAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG5cbi8qKlxuICogQ3JlYXRlcyBhIHByb3Blci1jYXNlIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgcHJvcGVyID0gKHNfaW5wdXQ6IHN0cmluZyk6IHN0cmluZyA9PiBzX2lucHV0LnNwbGl0KC9cXHMrL2cpLm1hcChzID0+IHNbMF0udG9VcHBlckNhc2UoKStzLnNsaWNlKDEpKS5qb2luKCcgJyk7XG5cblxuLyoqXG4gKiBDb21wYXJlcyB0d28gb2JqZWN0cyB1c2luZyBrZXlzIGFuZCBzdHJpY3QgZXF1YWxpdHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvYmplY3RzX21pZ2h0X2RpZmZlcihoX2E6IFBsYWluT2JqZWN0LCBoX2I6IFBsYWluT2JqZWN0KTogYm9vbGVhbiB7XG5cdGNvbnN0IGFfa2V5c19hID0gT2JqZWN0LmtleXMoaF9hKTtcblx0Y29uc3QgYV9rZXlzX2IgPSBPYmplY3Qua2V5cyhoX2IpO1xuXG5cdGNvbnN0IG5sX2tleXMgPSBhX2tleXNfYS5sZW5ndGg7XG5cblx0aWYobmxfa2V5cyAhPT0gYV9rZXlzX2IubGVuZ3RoKSByZXR1cm4gdHJ1ZTtcblxuXHRmb3IoY29uc3Qgc2lfa2V5IGluIGhfYSkge1xuXHRcdGlmKGhfYltzaV9rZXldICE9PSBoX2Fbc2lfa2V5XSkgcmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59XG5cblxuLyoqXG4gKiBGb2xkIGFycmF5IGludG8gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb2xkPHdfb3V0LCB3X3ZhbHVlPihhX2luOiB3X3ZhbHVlW10sIGZfZm9sZDogKHpfdmFsdWU6IHdfdmFsdWUsIGlfZWFjaDogbnVtYmVyKSA9PiBEaWN0PHdfb3V0Pik6IERpY3Q8d19vdXQ+IHtcblx0Y29uc3QgaF9vdXQgPSB7fTtcblx0bGV0IGlfZWFjaCA9IDA7XG5cdGZvcihjb25zdCB6X2VhY2ggb2YgYV9pbikge1xuXHRcdE9iamVjdC5hc3NpZ24oaF9vdXQsIGZfZm9sZCh6X2VhY2gsIGlfZWFjaCsrKSk7XG5cdH1cblxuXHRyZXR1cm4gaF9vdXQ7XG59XG5cblxuXG4vKipcbiAqIEVzY2FwZSBhbGwgc3BlY2lhbCByZWdleCBjaGFyYWN0ZXJzIHRvIHR1cm4gYSBzdHJpbmcgaW50byBhIHZlcmJhdGltIG1hdGNoIHBhdHRlcm5cbiAqIEBwYXJhbSBzX2lucHV0IGlucHV0IHN0cmluZ1xuICogQHJldHVybnMgZXNjYXBlZCBzdHJpbmcgcmVhZHkgZm9yIFJlZ0V4cCBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgY29uc3QgZXNjYXBlX3JlZ2V4ID0gKHNfaW5wdXQ6IHN0cmluZyk6IHN0cmluZyA9PiBzX2lucHV0LnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XG5cblxuLyoqXG4gKiBUeXBlZCBhbGlhcyB0byBgT2JqZWN0LmVudHJpZXNgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvZGU8XG5cdGhfb2JqZWN0IGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55Pixcblx0YXNfa2V5cyBleHRlbmRzIGtleW9mIGhfb2JqZWN0PWtleW9mIGhfb2JqZWN0LFxuPihoX29iamVjdDogaF9vYmplY3QpOiBBcnJheTxbYXNfa2V5cywgaF9vYmplY3RbYXNfa2V5c11dPiB7XG5cdHJldHVybiBPYmplY3QuZW50cmllcyhoX29iamVjdCkgYXMgQXJyYXk8W2FzX2tleXMsIGhfb2JqZWN0W2FzX2tleXNdXT47XG59XG5cblx0Ly8gKG86IHtcblx0Ly8gXHRbc2lfa2V5IGluIGFzX2tleXNdOiB3X3ZhbHVlO1xuXHQvLyB9KToge1xuXHQvLyBcdFtzaV9rZXkgaW4gYXNfa2V5c106IHtcblx0Ly8gXHRcdGtleTogc2lfa2V5O1xuXHQvLyBcdFx0dmFsdWU6IHdfdmFsdWU7XG5cdC8vIFx0fTtcblx0Ly8gfVthc19rZXlzXSBleHRlbmRzIGluZmVyIGFzX3BhaXJzXG5cdC8vIFx0PyBhc19wYWlycyBleHRlbmRzIHtrZXk6IGFzX2tleXM7IHZhbHVlOiB3X3ZhbHVlfVxuXHQvLyBcdFx0PyBVbmlvbi5MaXN0T2Y8YXNfcGFpcnM+XG5cdC8vIFx0XHQ6IG5ldmVyXG5cdC8vIFx0OiBuZXZlcjtcbi8vIH07XG5cbi8vIGNvbnN0IGNoZWNrID0gb2RlKHthOiAnMScsIGI6ICcyJ30gYXMgY29uc3QpO1xuXG4vKipcbiAqIFR5cGVkIGFsaWFzIHRvIGBPYmplY3QuZnJvbUVudHJpZXNgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvZmU8XG5cdGFzX2tleXMgZXh0ZW5kcyBzdHJpbmc9c3RyaW5nLFxuXHR3X3ZhbHVlcyBleHRlbmRzIGFueT1hbnksXG4+KGFfZW50cmllczogQXJyYXk8W2FzX2tleXMsIHdfdmFsdWVzXT4pOiBSZWNvcmQ8YXNfa2V5cywgd192YWx1ZXM+IHtcblx0cmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhhX2VudHJpZXMpIGFzIFJlY29yZDxhc19rZXlzLCB3X3ZhbHVlcz47XG59XG5cblxuLyoqXG4gKiBIZWxwZXIgdHlwZSBmb3IgZGVmaW5pbmcgdGhlIGV4cGVjdGVkIHR5cGUgZm9yIGBbXS5yZWR1Y2VgIGFsaWFzXG4gKi9cbnR5cGUgUmVkdWNlUGFyYW1ldGVyczxcblx0d192YWx1ZSBleHRlbmRzIGFueT1hbnksXG4+ID0gUGFyYW1ldGVyczxBcnJheTx3X3ZhbHVlPlsncmVkdWNlJ10+O1xuXG5cbi8qKlxuICogUmVkdWNlIG9iamVjdCBlbnRyaWVzIHRvIGFuIGFyYml0cmFyeSB0eXBlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvZGVyPFxuXHR3X291dCBleHRlbmRzIGFueSxcblx0d192YWx1ZSBleHRlbmRzIGFueSxcbj4oaF90aGluZzogRGljdDx3X3ZhbHVlPiwgZl9yZWR1Y2U6IFJlZHVjZVBhcmFtZXRlcnNbMF0sIHdfaW5pdDogd19vdXQpOiB3X291dCB7XG5cdHJldHVybiBvZGUoaF90aGluZykucmVkdWNlKGZfcmVkdWNlLCB3X2luaXQpIGFzIHdfb3V0O1xufVxuXG5cbi8qKlxuICogUmVkdWNlIG9iamVjdCBlbnRyaWVzIHRvIGFuIGFycmF5IHZpYSBjb25jYXRlbmF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvZGVyYWM8XG5cdHdfb3V0IGV4dGVuZHMgYW55LFxuXHR3X3ZhbHVlIGV4dGVuZHMgYW55LFxuPihoX3RoaW5nOiBEaWN0PHdfdmFsdWU+LCBmX2NvbmNhdDogKHNpX2tleTogc3RyaW5nLCB3X3ZhbHVlOiB3X3ZhbHVlLCBpX2VudHJ5OiBudW1iZXIpID0+IHdfb3V0LCBiX2FkZF91bmRlZnM9ZmFsc2UpOiB3X291dFtdIHtcblx0cmV0dXJuIG9kZShoX3RoaW5nKS5yZWR1Y2UoKGFfb3V0LCBbc2lfa2V5LCB3X3ZhbHVlXSwgaV9lbnRyeSkgPT4gW1xuXHRcdC4uLmFfb3V0LFxuXHRcdGZfY29uY2F0KHNpX2tleSwgd192YWx1ZSwgaV9lbnRyeSksXG5cdF0sIFtdKTtcbn1cblxuXG4vKipcbiAqIFJlZHVjZSBvYmplY3QgZW50cmllcyB0byBhbiBhcnJheSB2aWEgZmxhdHRlbmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gb2RlcmFmPFxuXHR3X291dCBleHRlbmRzIGFueSxcblx0d192YWx1ZSBleHRlbmRzIGFueSxcbj4oaF90aGluZzogRGljdDx3X3ZhbHVlPiwgZl9jb25jYXQ6IChzaV9rZXk6IHN0cmluZywgd192YWx1ZTogd192YWx1ZSwgaV9lbnRyeTogbnVtYmVyKSA9PiB3X291dFtdKTogd19vdXRbXSB7XG5cdHJldHVybiBvZGUoaF90aGluZykucmVkdWNlKChhX291dCwgW3NpX2tleSwgd192YWx1ZV0sIGlfZW50cnkpID0+IFtcblx0XHQuLi5hX291dCxcblx0XHQuLi5mX2NvbmNhdChzaV9rZXksIHdfdmFsdWUsIGlfZW50cnkpLFxuXHRdLCBbXSk7XG59XG5cblxuLyoqXG4gKiBSZWR1Y2Ugb2JqZWN0IGVudHJpZXMgdG8gYW4gb2JqZWN0IHZpYSBtZXJnaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvZGVyb208XG5cdHdfb3V0IGV4dGVuZHMgYW55LFxuXHRoX3RoaW5nIGV4dGVuZHMgUmVjb3JkPHN0cmluZyB8IHN5bWJvbCwgYW55Pixcblx0YXNfa2V5c19pbiBleHRlbmRzIGtleW9mIGhfdGhpbmcsXG5cdHdfdmFsdWVfaW4gZXh0ZW5kcyBoX3RoaW5nW2FzX2tleXNfaW5dLFxuXHRhc19rZXlzX291dCBleHRlbmRzIHN0cmluZyB8IHN5bWJvbCxcbj4oaF90aGluZzogaF90aGluZywgZl9tZXJnZTogKHNpX2tleTogYXNfa2V5c19pbiwgd192YWx1ZTogd192YWx1ZV9pbikgPT4gUmVjb3JkPGFzX2tleXNfb3V0LCB3X291dD4pOiBSZWNvcmQ8YXNfa2V5c19vdXQsIHdfb3V0PiB7XG5cdHJldHVybiBvZGUoaF90aGluZykucmVkdWNlKChoX291dCwgW3NpX2tleSwgd192YWx1ZV0pID0+ICh7XG5cdFx0Li4uaF9vdXQsXG5cdFx0Li4uZl9tZXJnZShzaV9rZXkgYXMgYXNfa2V5c19pbiwgd192YWx1ZSksXG5cdH0pLCB7fSkgYXMgUmVjb3JkPGFzX2tleXNfb3V0LCB3X291dD47XG59XG5cblxuLyoqXG4gKiBSZWR1Y2Ugb2JqZWN0IGVudHJpZXMgdG8gYW4gb2JqZWN0IHZpYSB0cmFuc2Zvcm1pbmcgdmFsdWUgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvZGVtdHY8XG5cdHdfb3V0IGV4dGVuZHMgYW55LFxuXHR3X3ZhbHVlIGV4dGVuZHMgYW55LFxuPihoX3RoaW5nOiBEaWN0PHdfdmFsdWU+LCBmX3RyYW5zZm9ybTogKHdfdmFsdWU6IHdfdmFsdWUsIHNpX2tleT86IHN0cmluZykgPT4gd19vdXQpOiBEaWN0PHdfb3V0PiB7XG5cdHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG5cdFx0b2RlKGhfdGhpbmcpLm1hcCgoW3NpX2tleSwgd192YWx1ZV0pID0+IFtzaV9rZXksIGZfdHJhbnNmb3JtKHdfdmFsdWUsIHNpX2tleSldKVxuXHQpO1xufVxuXG5cbi8qKlxuICogUHJvbWlzZS1iYXNlZCB2ZXJzaW9uIG9mIGBzZXRUaW1lb3V0KClgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lb3V0KHh0X3dhaXQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKGZrX3Jlc29sdmUpID0+IHtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGZrX3Jlc29sdmUoKTtcblx0XHR9LCB4dF93YWl0KTtcblx0fSk7XG59XG5cblxuLyoqXG4gKiBBIFByb21pc2UgdGhhdCBuZXZlciBmdWxmaWxscyBub3IgcmVqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yZXZlcjx3X3R5cGU9dm9pZD4od190eXBlPzogd190eXBlKTogUHJvbWlzZTx3X3R5cGU+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKEZfTk9PUCk7XG59XG5cblxuLyoqXG4gKiBQcm9tc2UtYmFzZWQgdmVyc2lvbiBvZiBgcXVldWVNaWNyb3Rhc2soKWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pY3JvdGFzaygpOiBQcm9taXNlPHZvaWQ+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChma19yZXNvbHZlKSA9PiB7XG5cdFx0cXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuXHRcdFx0ZmtfcmVzb2x2ZSgpO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuXG4vKipcbiAqIENyeXB0b2dyYXBoaWNhbGx5IHN0cm9uZyByYW5kb20gbnVtYmVyXG4gKi9cbmV4cG9ydCBjb25zdCBjcnlwdG9fcmFuZG9tID0gKCk6IG51bWJlciA9PiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF0gLyAoMioqMzIpO1xuXG5cbi8qKlxuICogR2VuZXJhdGUgYSByYW5kb20gaW50IHdpdGhpbiBhIGdpdmVuIHJhbmdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21faW50KHhfYTogbnVtYmVyLCB4X2I9MCk6IG51bWJlciB7XG5cdGNvbnN0IHhfbWluID0gTWF0aC5jZWlsKE1hdGgubWluKHhfYSkpO1xuXHRjb25zdCB4X21heCA9IE1hdGguZmxvb3IoTWF0aC5tYXgoeF9iKSk7XG5cblx0Ly8gY29uZmluZSB0byByYW5nZVxuXHRyZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHhfbWF4IC0geF9taW4gKyAxKSkgKyB4X21pbjtcbn1cblxuXG4vKipcbiAqIEdlbmVyYXRlIGEgY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nIHJhbmRvbSBpbnQgd2l0aGluIGEgZ2l2ZW4gcmFuZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyeXB0b19yYW5kb21faW50KHhfYTogbnVtYmVyLCB4X2I9MCk6IG51bWJlciB7XG5cdGNvbnN0IHhfbWluID0gTWF0aC5jZWlsKE1hdGgubWluKHhfYSkpO1xuXHRjb25zdCB4X21heCA9IE1hdGguZmxvb3IoTWF0aC5tYXgoeF9iKSk7XG5cblx0Ly8gY29uZmluZSB0byByYW5nZVxuXHRyZXR1cm4gTWF0aC5mbG9vcihjcnlwdG9fcmFuZG9tKCkgKiAoeF9tYXggLSB4X21pbiArIDEpKSArIHhfbWluO1xufVxuXG5cbi8qKlxuICogU2h1ZmZsZXMgYW4gYXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGU8d192YWx1ZT4oYV9pdGVtczogd192YWx1ZVtdLCBmX3JhbmRvbT1yYW5kb21faW50KTogd192YWx1ZVtdIHtcblx0bGV0IGlfaXRlbSA9IGFfaXRlbXMubGVuZ3RoO1xuXG5cdHdoaWxlKGlfaXRlbSA+IDApIHtcblx0XHRjb25zdCBpX3N3YXAgPSBmX3JhbmRvbSgtLWlfaXRlbSk7XG5cdFx0Y29uc3Qgd19pdGVtID0gYV9pdGVtc1tpX2l0ZW1dO1xuXHRcdGFfaXRlbXNbaV9pdGVtXSA9IGFfaXRlbXNbaV9zd2FwXTtcblx0XHRhX2l0ZW1zW2lfc3dhcF0gPSB3X2l0ZW07XG5cdH1cblxuXHRyZXR1cm4gYV9pdGVtcztcbn1cblxuIiwiJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5iZWNoMzJtID0gZXhwb3J0cy5iZWNoMzIgPSB2b2lkIDA7XG5jb25zdCBBTFBIQUJFVCA9ICdxcHpyeTl4OGdmMnR2ZHcwczNqbjU0a2hjZTZtdWE3bCc7XG5jb25zdCBBTFBIQUJFVF9NQVAgPSB7fTtcbmZvciAobGV0IHogPSAwOyB6IDwgQUxQSEFCRVQubGVuZ3RoOyB6KyspIHtcbiAgICBjb25zdCB4ID0gQUxQSEFCRVQuY2hhckF0KHopO1xuICAgIEFMUEhBQkVUX01BUFt4XSA9IHo7XG59XG5mdW5jdGlvbiBwb2x5bW9kU3RlcChwcmUpIHtcbiAgICBjb25zdCBiID0gcHJlID4+IDI1O1xuICAgIHJldHVybiAoKChwcmUgJiAweDFmZmZmZmYpIDw8IDUpIF5cbiAgICAgICAgKC0oKGIgPj4gMCkgJiAxKSAmIDB4M2I2YTU3YjIpIF5cbiAgICAgICAgKC0oKGIgPj4gMSkgJiAxKSAmIDB4MjY1MDhlNmQpIF5cbiAgICAgICAgKC0oKGIgPj4gMikgJiAxKSAmIDB4MWVhMTE5ZmEpIF5cbiAgICAgICAgKC0oKGIgPj4gMykgJiAxKSAmIDB4M2Q0MjMzZGQpIF5cbiAgICAgICAgKC0oKGIgPj4gNCkgJiAxKSAmIDB4MmExNDYyYjMpKTtcbn1cbmZ1bmN0aW9uIHByZWZpeENoayhwcmVmaXgpIHtcbiAgICBsZXQgY2hrID0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeC5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjID0gcHJlZml4LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjIDwgMzMgfHwgYyA+IDEyNilcbiAgICAgICAgICAgIHJldHVybiAnSW52YWxpZCBwcmVmaXggKCcgKyBwcmVmaXggKyAnKSc7XG4gICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiAoYyA+PiA1KTtcbiAgICB9XG4gICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeC5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCB2ID0gcHJlZml4LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiAodiAmIDB4MWYpO1xuICAgIH1cbiAgICByZXR1cm4gY2hrO1xufVxuZnVuY3Rpb24gY29udmVydChkYXRhLCBpbkJpdHMsIG91dEJpdHMsIHBhZCkge1xuICAgIGxldCB2YWx1ZSA9IDA7XG4gICAgbGV0IGJpdHMgPSAwO1xuICAgIGNvbnN0IG1heFYgPSAoMSA8PCBvdXRCaXRzKSAtIDE7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIDw8IGluQml0cykgfCBkYXRhW2ldO1xuICAgICAgICBiaXRzICs9IGluQml0cztcbiAgICAgICAgd2hpbGUgKGJpdHMgPj0gb3V0Qml0cykge1xuICAgICAgICAgICAgYml0cyAtPSBvdXRCaXRzO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKHZhbHVlID4+IGJpdHMpICYgbWF4Vik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhZCkge1xuICAgICAgICBpZiAoYml0cyA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCh2YWx1ZSA8PCAob3V0Qml0cyAtIGJpdHMpKSAmIG1heFYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoYml0cyA+PSBpbkJpdHMpXG4gICAgICAgICAgICByZXR1cm4gJ0V4Y2VzcyBwYWRkaW5nJztcbiAgICAgICAgaWYgKCh2YWx1ZSA8PCAob3V0Qml0cyAtIGJpdHMpKSAmIG1heFYpXG4gICAgICAgICAgICByZXR1cm4gJ05vbi16ZXJvIHBhZGRpbmcnO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdG9Xb3JkcyhieXRlcykge1xuICAgIHJldHVybiBjb252ZXJ0KGJ5dGVzLCA4LCA1LCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGZyb21Xb3Jkc1Vuc2FmZSh3b3Jkcykge1xuICAgIGNvbnN0IHJlcyA9IGNvbnZlcnQod29yZHMsIDUsIDgsIGZhbHNlKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKVxuICAgICAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gZnJvbVdvcmRzKHdvcmRzKSB7XG4gICAgY29uc3QgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgdGhyb3cgbmV3IEVycm9yKHJlcyk7XG59XG5mdW5jdGlvbiBnZXRMaWJyYXJ5RnJvbUVuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgbGV0IEVOQ09ESU5HX0NPTlNUO1xuICAgIGlmIChlbmNvZGluZyA9PT0gJ2JlY2gzMicpIHtcbiAgICAgICAgRU5DT0RJTkdfQ09OU1QgPSAxO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgRU5DT0RJTkdfQ09OU1QgPSAweDJiYzgzMGEzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbmNvZGUocHJlZml4LCB3b3JkcywgTElNSVQpIHtcbiAgICAgICAgTElNSVQgPSBMSU1JVCB8fCA5MDtcbiAgICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyA3ICsgd29yZHMubGVuZ3RoID4gTElNSVQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeGNlZWRzIGxlbmd0aCBsaW1pdCcpO1xuICAgICAgICBwcmVmaXggPSBwcmVmaXgudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIGNoayBtb2RcbiAgICAgICAgbGV0IGNoayA9IHByZWZpeENoayhwcmVmaXgpO1xuICAgICAgICBpZiAodHlwZW9mIGNoayA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY2hrKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHByZWZpeCArICcxJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgeCA9IHdvcmRzW2ldO1xuICAgICAgICAgICAgaWYgKHggPj4gNSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbiA1LWJpdCB3b3JkJyk7XG4gICAgICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4geDtcbiAgICAgICAgICAgIHJlc3VsdCArPSBBTFBIQUJFVC5jaGFyQXQoeCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICAgICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoayk7XG4gICAgICAgIH1cbiAgICAgICAgY2hrIF49IEVOQ09ESU5HX0NPTlNUO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdiA9IChjaGsgPj4gKCg1IC0gaSkgKiA1KSkgJiAweDFmO1xuICAgICAgICAgICAgcmVzdWx0ICs9IEFMUEhBQkVULmNoYXJBdCh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBfX2RlY29kZShzdHIsIExJTUlUKSB7XG4gICAgICAgIExJTUlUID0gTElNSVQgfHwgOTA7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoIDwgOClcbiAgICAgICAgICAgIHJldHVybiBzdHIgKyAnIHRvbyBzaG9ydCc7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoID4gTElNSVQpXG4gICAgICAgICAgICByZXR1cm4gJ0V4Y2VlZHMgbGVuZ3RoIGxpbWl0JztcbiAgICAgICAgLy8gZG9uJ3QgYWxsb3cgbWl4ZWQgY2FzZVxuICAgICAgICBjb25zdCBsb3dlcmVkID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IHVwcGVyZWQgPSBzdHIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKHN0ciAhPT0gbG93ZXJlZCAmJiBzdHIgIT09IHVwcGVyZWQpXG4gICAgICAgICAgICByZXR1cm4gJ01peGVkLWNhc2Ugc3RyaW5nICcgKyBzdHI7XG4gICAgICAgIHN0ciA9IGxvd2VyZWQ7XG4gICAgICAgIGNvbnN0IHNwbGl0ID0gc3RyLmxhc3RJbmRleE9mKCcxJyk7XG4gICAgICAgIGlmIChzcGxpdCA9PT0gLTEpXG4gICAgICAgICAgICByZXR1cm4gJ05vIHNlcGFyYXRvciBjaGFyYWN0ZXIgZm9yICcgKyBzdHI7XG4gICAgICAgIGlmIChzcGxpdCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiAnTWlzc2luZyBwcmVmaXggZm9yICcgKyBzdHI7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHN0ci5zbGljZSgwLCBzcGxpdCk7XG4gICAgICAgIGNvbnN0IHdvcmRDaGFycyA9IHN0ci5zbGljZShzcGxpdCArIDEpO1xuICAgICAgICBpZiAod29yZENoYXJzLmxlbmd0aCA8IDYpXG4gICAgICAgICAgICByZXR1cm4gJ0RhdGEgdG9vIHNob3J0JztcbiAgICAgICAgbGV0IGNoayA9IHByZWZpeENoayhwcmVmaXgpO1xuICAgICAgICBpZiAodHlwZW9mIGNoayA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICByZXR1cm4gY2hrO1xuICAgICAgICBjb25zdCB3b3JkcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmRDaGFycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgYyA9IHdvcmRDaGFycy5jaGFyQXQoaSk7XG4gICAgICAgICAgICBjb25zdCB2ID0gQUxQSEFCRVRfTUFQW2NdO1xuICAgICAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1Vua25vd24gY2hhcmFjdGVyICcgKyBjO1xuICAgICAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHY7XG4gICAgICAgICAgICAvLyBub3QgaW4gdGhlIGNoZWNrc3VtP1xuICAgICAgICAgICAgaWYgKGkgKyA2ID49IHdvcmRDaGFycy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB3b3Jkcy5wdXNoKHYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGsgIT09IEVOQ09ESU5HX0NPTlNUKVxuICAgICAgICAgICAgcmV0dXJuICdJbnZhbGlkIGNoZWNrc3VtIGZvciAnICsgc3RyO1xuICAgICAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZVVuc2FmZShzdHIsIExJTUlUKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IF9fZGVjb2RlKHN0ciwgTElNSVQpO1xuICAgICAgICBpZiAodHlwZW9mIHJlcyA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNvZGUoc3RyLCBMSU1JVCkge1xuICAgICAgICBjb25zdCByZXMgPSBfX2RlY29kZShzdHIsIExJTUlUKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGRlY29kZVVuc2FmZSxcbiAgICAgICAgZGVjb2RlLFxuICAgICAgICBlbmNvZGUsXG4gICAgICAgIHRvV29yZHMsXG4gICAgICAgIGZyb21Xb3Jkc1Vuc2FmZSxcbiAgICAgICAgZnJvbVdvcmRzLFxuICAgIH07XG59XG5leHBvcnRzLmJlY2gzMiA9IGdldExpYnJhcnlGcm9tRW5jb2RpbmcoJ2JlY2gzMicpO1xuZXhwb3J0cy5iZWNoMzJtID0gZ2V0TGlicmFyeUZyb21FbmNvZGluZygnYmVjaDMybScpO1xuIiwiaW1wb3J0IHtcblx0dHlwZSBEaWN0LFxuXHR0eXBlIEpzb25WYWx1ZSxcblx0b2RlLFxuXHRmb2xkLFxufSBmcm9tICcuL3V0aWwvYmVsdCc7XG5cbmlmKCd1bmRlZmluZWQnICE9PSB0eXBlb2Ygd2luZG93ICYmICdsb2NhbGhvc3QnID09PSB3aW5kb3c/LmxvY2F0aW9uPy5ob3N0bmFtZSkge1xuXHRjb25zdCBkX2Nocm9tZSA9IGdsb2JhbFRoaXNbJ2Nocm9tZSddO1xuXG5cdC8vIHBvbHlmaWxsIHN0b3JhZ2Vcblx0aWYoIWRfY2hyb21lWydzdG9yYWdlJ10pIHtcblx0XHRmdW5jdGlvbiBwb2x5ZmlsbF9jaHJvbWVfc3RvcmFnZShzaV9hcmVhOiBjaHJvbWUuc3RvcmFnZS5BcmVhTmFtZSk6IGNocm9tZS5zdG9yYWdlLlN0b3JhZ2VBcmVhIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9yZXF1aXJlLWF3YWl0ICovXG5cdFx0XHRcdGFzeW5jIGdldCh6X2tleXM6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxEaWN0PEpzb25WYWx1ZSB8IHVuZGVmaW5lZD4+IHtcblx0XHRcdFx0XHRjb25zdCBhX2tleXMgPSBBcnJheS5pc0FycmF5KHpfa2V5cyk/IHpfa2V5czogW3pfa2V5c107XG5cdFx0XHRcdFx0cmV0dXJuIGZvbGQoYV9rZXlzLCAoc2lfa2V5KSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCB6X3ZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYGNocm9tZS4ke3NpX2FyZWF9OiR7c2lfa2V5fWApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0W3NpX2tleV06ICdzdHJpbmcnID09PSB0eXBlb2Ygel92YWx1ZT8gSlNPTi5wYXJzZSh6X3ZhbHVlKSBhcyBKc29uVmFsdWU6IHZvaWQgMCxcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0YXN5bmMgc2V0KGhfc2V0OiBEaWN0PEpzb25WYWx1ZSB8IHVuZGVmaW5lZD4pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRcdFx0XHRmb3IoY29uc3QgW3NpX2tleSwgd192YWx1ZV0gb2Ygb2RlKGhfc2V0KSkge1xuXHRcdFx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oYGNocm9tZS4ke3NpX2FyZWF9OiR7c2lfa2V5fWAsIEpTT04uc3RyaW5naWZ5KHdfdmFsdWUpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0YXN5bmMgY2xlYXIoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0XHRcdFx0Y29uc3QgbmxfaXRlbXMgPSBsb2NhbFN0b3JhZ2UubGVuZ3RoO1xuXHRcdFx0XHRcdGZvcihsZXQgaV9pdGVtPW5sX2l0ZW1zOyBpX2l0ZW0+PTA7IGlfaXRlbS0tKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBzaV9rZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGlfaXRlbSk7XG5cdFx0XHRcdFx0XHRpZighc2lfa2V5KSBjb250aW51ZTtcblx0XHRcdFx0XHRcdGlmKHNpX2tleS5zdGFydHNXaXRoKGBjaHJvbWUuJHtzaV9hcmVhfTpgKSkge1xuXHRcdFx0XHRcdFx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShzaV9rZXkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHRhc3luYyByZW1vdmUoel9rZXlzOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdFx0XHRcdGNvbnN0IGFfa2V5cyA9IEFycmF5LmlzQXJyYXkoel9rZXlzKT8gel9rZXlzOiBbel9rZXlzXTtcblx0XHRcdFx0XHRmb3IoY29uc3Qgc2lfa2V5IG9mIGFfa2V5cykge1xuXHRcdFx0XHRcdFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYGNocm9tZS4ke3NpX2FyZWF9OiR7c2lfa2V5fWApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVxdWlyZS1hd2FpdCAqL1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRkX2Nocm9tZS5zdG9yYWdlID0ge1xuXHRcdFx0bG9jYWw6IHBvbHlmaWxsX2Nocm9tZV9zdG9yYWdlKCdsb2NhbCcpIGFzIGNocm9tZS5zdG9yYWdlLkxvY2FsU3RvcmFnZUFyZWEsXG5cdFx0XHRzeW5jOiBwb2x5ZmlsbF9jaHJvbWVfc3RvcmFnZSgnc3luYycpIGFzIGNocm9tZS5zdG9yYWdlLlN5bmNTdG9yYWdlQXJlYSxcblx0XHRcdHNlc3Npb246IHBvbHlmaWxsX2Nocm9tZV9zdG9yYWdlKCdzZXNzaW9uJykgYXMgY2hyb21lLnN0b3JhZ2UuU2Vzc2lvblN0b3JhZ2VBcmVhLFxuXHRcdH0gYXMgdHlwZW9mIGNocm9tZS5zdG9yYWdlO1xuXHR9XG5cblx0Ly8gcG9seWZpbGwgcnVudGltZVxuXHRpZighZF9jaHJvbWVbJ3J1bnRpbWUnXSkge1xuXHRcdGRfY2hyb21lLnJ1bnRpbWUgPSB7XG5cdFx0XHRnZXRVUkwocF9hc3NldDogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRcdFx0ZGVidWdnZXI7XG5cdFx0XHR9LFxuXG5cdFx0XHRnZXRNYW5pZmVzdCgpOiBjaHJvbWUucnVudGltZS5NYW5pZmVzdCB7XG5cdFx0XHRcdGRlYnVnZ2VyO1xuXHRcdFx0fSxcblxuXHRcdFx0c2VuZE1lc3NhZ2UoZ19tc2c6IEpzb25WYWx1ZSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdFx0XHRkZWJ1Z2dlcjtcblx0XHRcdH0sXG5cblx0XHRcdG9uTWVzc2FnZToge1xuXHRcdFx0XHRhZGRMaXN0ZW5lcihmX2xpc3RlbmVyKSB7XG5cdFx0XHRcdFx0ZGVidWdnZXI7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0cmVtb3ZlTGlzdGVuZXIoKSB7XG5cdFx0XHRcdFx0ZGVidWdnZXI7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXG5cdFx0XHRvbkluc3RhbGxlZDoge1xuXHRcdFx0XHRhZGRMaXN0ZW5lcihmX2xpc3RlbmVyKSB7XG5cdFx0XHRcdFx0ZGVidWdnZXI7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0cmVtb3ZlTGlzdGVuZXIoKSB7XG5cdFx0XHRcdFx0ZGVidWdnZXI7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cblxuXHQvLyBwb2x5ZmlsbCB0YWJzXG5cdGlmKCFkX2Nocm9tZVsndGFicyddKSB7XG5cdFx0ZF9jaHJvbWUudGFicyA9IHtcblx0XHRcdGNyZWF0ZShnY19jcmVhdGU/OiBjaHJvbWUudGFicy5DcmVhdGVQcm9wZXJ0aWVzKTogUHJvbWlzZTxjaHJvbWUudGFicy5UYWI+IHtcblx0XHRcdFx0d2luZG93Lm9wZW4oZ2NfY3JlYXRlIS51cmwgYXMgc3RyaW5nLCAnX2JsYW5rJyk7XG5cdFx0XHR9LFxuXG5cdFx0XHRnZXQoaV90YWI6IG51bWJlcik6IFByb21pc2U8Y2hyb21lLnRhYnMuVGFiPiB7XG5cdFx0XHRcdGRlYnVnZ2VyO1xuXHRcdFx0fSxcblxuXHRcdFx0cmVsb2FkKGlfdGFiOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRcdFx0ZGVidWdnZXI7XG5cdFx0XHR9LFxuXG5cdFx0XHRvblVwZGF0ZWQ6IHtcblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigpIHtcblx0XHRcdFx0XHRkZWJ1Z2dlcjtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRyZW1vdmVMaXN0ZW5lcigpIHtcblx0XHRcdFx0XHRkZWJ1Z2dlcjtcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXG5cdC8vIHBvbHlmaWxsIHdpbmRvd3Ncblx0aWYoIWRfY2hyb21lWyd3aW5kb3dzJ10pIHtcblx0XHRkX2Nocm9tZS53aW5kb3dzID0ge1xuXHRcdFx0Y3JlYXRlKGdjX2NyZWF0ZT86IGNocm9tZS53aW5kb3dzLkNyZWF0ZURhdGEpOiBQcm9taXNlPGNocm9tZS53aW5kb3dzLldpbmRvdz4ge1xuXHRcdFx0XHR3aW5kb3cub3BlbihnY19jcmVhdGUhLnVybCBhcyBzdHJpbmcsICdfYmxhbmsnKTtcblx0XHRcdH0sXG5cblx0XHRcdGdldChpX3dpbmRvdzogbnVtYmVyKTogUHJvbWlzZTxjaHJvbWUud2luZG93cy5XaW5kb3c+IHtcblx0XHRcdFx0ZGVidWdnZXI7XG5cdFx0XHR9LFxuXG5cdFx0XHRyZW1vdmUoaV93aW5kb3c6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuXHRcdFx0XHRkZWJ1Z2dlcjtcblx0XHRcdH0sXG5cblx0XHRcdG9uUmVtb3ZlZDoge1xuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCkge1xuXHRcdFx0XHRcdGRlYnVnZ2VyO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdHJlbW92ZUxpc3RlbmVyKCkge1xuXHRcdFx0XHRcdGRlYnVnZ2VyO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG5cblx0Ly8gcG9seWZpbGwgZXh0ZW5zaW9uXG5cdGlmKCFkX2Nocm9tZVsnZXh0ZW5zaW9uJ10pIHtcblx0XHRkX2Nocm9tZS5leHRlbnNpb24gPSB7XG5cdFx0XHRnZXRCYWNrZ3JvdW5kUGFnZSgpIHtcblx0XHRcdFx0ZGVidWdnZXI7XG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cblxuXHQvLyBwb2x5ZmlsbCBleHRlbnNpb25cblx0aWYoIWRfY2hyb21lWydzY3JpcHRpbmcnXSkge1xuXHRcdGRfY2hyb21lLnNjcmlwdGluZyA9IHtcblx0XHRcdGV4ZWN1dGVTY3JpcHQoKTogUHJvbWlzZTxjaHJvbWUuc2NyaXB0aW5nLkluamVjdGlvblJlc3VsdD4ge1xuXHRcdFx0XHRkZWJ1Z2dlcjtcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxufVxuIiwiLy8gYmFzZTY0IGVuY29kZS9kZWNvZGUgZGVyaXZlZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG5jb25zdCBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbmNvbnN0IGJhc2U2NEdyb3VwTGVuZ3RoID0gNDtcbmNvbnN0IG5vbkJhc2U2NENoYXJzID0gbmV3IFJlZ0V4cChgW14ke2NoYXJzfT1dYCwgJ3UnKTtcbi8qKlxuICogRm9yIHVzZSBiZWZvcmUgYGJhc2U2NFRvQmluYC4gUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBzdHJpbmcgaXMgdmFsaWRcbiAqIGJhc2U2NCAobGVuZ3RoIGlzIGRpdmlzaWJsZSBieSA0LCBvbmx5IHVzZXMgYmFzZTY0IGNoYXJhY3RlcnMpLlxuICogQHBhcmFtIG1heWJlSGV4IC0gYSBzdHJpbmcgdG8gdGVzdFxuICovXG5leHBvcnQgY29uc3QgaXNCYXNlNjQgPSAobWF5YmVCYXNlNjQpID0+IG1heWJlQmFzZTY0Lmxlbmd0aCAlIGJhc2U2NEdyb3VwTGVuZ3RoID09PSAwICYmXG4gICAgIW5vbkJhc2U2NENoYXJzLnRlc3QobWF5YmVCYXNlNjQpO1xuLyogZXNsaW50LWRpc2FibGUgZnVuY3Rpb25hbC9uby1leHByZXNzaW9uLXN0YXRlbWVudCwgZnVuY3Rpb25hbC9pbW11dGFibGUtZGF0YSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1hZ2ljLW51bWJlcnMsIG5vLWJpdHdpc2UsIG5vLXBsdXNwbHVzICovXG4vKipcbiAqIENvbnZlcnQgYSBiYXNlNjQtZW5jb2RlZCBzdHJpbmcgdG8gYSBVaW50OEFycmF5LlxuICpcbiAqIE5vdGUsIHRoaXMgbWV0aG9kIGFsd2F5cyBjb21wbGV0ZXMuIElmIGB2YWxpZEJhc2U2NGAgaXMgbm90IHZhbGlkIGJhc2U2NCwgYW5cbiAqIGluY29ycmVjdCByZXN1bHQgd2lsbCBiZSByZXR1cm5lZC4gSWYgYHZhbGlkQmFzZTY0YCBpcyBwb3RlbnRpYWxseSBtYWxmb3JtZWQsXG4gKiBjaGVjayBpdCB3aXRoIGBpc0Jhc2U2NGAgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QuXG4gKlxuICogQHBhcmFtIHZhbGlkQmFzZTY0IC0gYSB2YWxpZCBiYXNlNjQtZW5jb2RlZCBzdHJpbmcgdG8gZGVjb2RlXG4gKi9cbmV4cG9ydCBjb25zdCBiYXNlNjRUb0JpbiA9ICh2YWxpZEJhc2U2NCkgPT4ge1xuICAgIGNvbnN0IGxvb2t1cCA9IG5ldyBVaW50OEFycmF5KDEyMyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvbm8tbGV0LCBmdW5jdGlvbmFsL25vLWxvb3Atc3RhdGVtZW50XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xuICAgIH1cbiAgICBjb25zdCBidWZmZXJMZW5ndGhFc3RpbWF0ZSA9IHZhbGlkQmFzZTY0Lmxlbmd0aCAqIDAuNzU7XG4gICAgY29uc3Qgc3RyaW5nTGVuZ3RoID0gdmFsaWRCYXNlNjQubGVuZ3RoO1xuICAgIGNvbnN0IGJ1ZmZlckxlbmd0aCA9IHZhbGlkQmFzZTY0W3ZhbGlkQmFzZTY0Lmxlbmd0aCAtIDFdID09PSAnPScgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLXN0cmluZy1zdGFydHMtZW5kcy13aXRoXG4gICAgICAgID8gdmFsaWRCYXNlNjRbdmFsaWRCYXNlNjQubGVuZ3RoIC0gMl0gPT09ICc9J1xuICAgICAgICAgICAgPyBidWZmZXJMZW5ndGhFc3RpbWF0ZSAtIDJcbiAgICAgICAgICAgIDogYnVmZmVyTGVuZ3RoRXN0aW1hdGUgLSAxXG4gICAgICAgIDogYnVmZmVyTGVuZ3RoRXN0aW1hdGU7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCk7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL25vLWxldFxuICAgIGxldCBwID0gMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9uby1sZXQsIGZ1bmN0aW9uYWwvbm8tbG9vcC1zdGF0ZW1lbnRcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cmluZ0xlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgIGNvbnN0IGVuY29kZWQxID0gbG9va3VwW3ZhbGlkQmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgICBjb25zdCBlbmNvZGVkMiA9IGxvb2t1cFt2YWxpZEJhc2U2NC5jaGFyQ29kZUF0KGkgKyAxKV07XG4gICAgICAgIGNvbnN0IGVuY29kZWQzID0gbG9va3VwW3ZhbGlkQmFzZTY0LmNoYXJDb2RlQXQoaSArIDIpXTtcbiAgICAgICAgY29uc3QgZW5jb2RlZDQgPSBsb29rdXBbdmFsaWRCYXNlNjQuY2hhckNvZGVBdChpICsgMyldO1xuICAgICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufTtcbi8qKlxuICogQ29udmVydCBhIFVpbnQ4QXJyYXkgdG8gYSBiYXNlNjQtZW5jb2RlZCBzdHJpbmcuXG4gKiBAcGFyYW0gYnl0ZXMgLSB0aGUgVWludDhBcnJheSB0byBiYXNlNjQgZW5jb2RlXG4gKi9cbmV4cG9ydCBjb25zdCBiaW5Ub0Jhc2U2NCA9IChieXRlcykgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL25vLWxldFxuICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9uby1sZXQsIGZ1bmN0aW9uYWwvbm8tbG9vcC1zdGF0ZW1lbnRcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHJlc3VsdCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgICAgcmVzdWx0ICs9IGNoYXJzWygoYnl0ZXNbaV0gJiAzKSA8PCA0KSB8IChieXRlc1tpICsgMV0gPj4gNCldO1xuICAgICAgICByZXN1bHQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgICAgcmVzdWx0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG4gICAgY29uc3QgcGFkZGVkID0gYnl0ZXMubGVuZ3RoICUgMyA9PT0gMlxuICAgICAgICA/IGAke3Jlc3VsdC5zdWJzdHJpbmcoMCwgcmVzdWx0Lmxlbmd0aCAtIDEpfT1gXG4gICAgICAgIDogYnl0ZXMubGVuZ3RoICUgMyA9PT0gMVxuICAgICAgICAgICAgPyBgJHtyZXN1bHQuc3Vic3RyaW5nKDAsIHJlc3VsdC5sZW5ndGggLSAyKX09PWBcbiAgICAgICAgICAgIDogcmVzdWx0O1xuICAgIHJldHVybiBwYWRkZWQ7XG59O1xuLyogZXNsaW50LWVuYWJsZSBmdW5jdGlvbmFsL25vLWV4cHJlc3Npb24tc3RhdGVtZW50LCBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWFnaWMtbnVtYmVycywgbm8tYml0d2lzZSwgbm8tcGx1c3BsdXMgKi9cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBmdW5jdGlvbmFsL25vLWNvbmRpdGlvbmFsLXN0YXRlbWVudCwgZnVuY3Rpb25hbC9uby1sZXQsIGZ1bmN0aW9uYWwvbm8tZXhwcmVzc2lvbi1zdGF0ZW1lbnQsIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBmdW5jdGlvbmFsL25vLXRyeS1zdGF0ZW1lbnQsIEB0eXBlc2NyaXB0LWVzbGludC9uby1tYWdpYy1udW1iZXJzLCBtYXgtcGFyYW1zLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGwsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50ICovXG4vKipcbiAqIE5vdGUsIG1vc3Qgb2YgdGhpcyBtZXRob2QgaXMgdHJhbnNsYXRlZCBhbmQgYm9pbGVkLWRvd24gZnJvbSB0aGUgd2FzbS1wYWNrXG4gKiB3b3JrZmxvdy4gU2lnbmlmaWNhbnQgY2hhbmdlcyB0byB3YXNtLWJpbmRnZW4gb3Igd2FzbS1wYWNrIGJ1aWxkIHdpbGwgbGlrZWx5XG4gKiByZXF1aXJlIG1vZGlmaWNhdGlvbnMgdG8gdGhpcyBtZXRob2QuXG4gKi9cbmV4cG9ydCBjb25zdCBpbnN0YW50aWF0ZVJ1c3RXYXNtID0gYXN5bmMgKHdlYmFzc2VtYmx5Qnl0ZXMsIGV4cGVjdGVkSW1wb3J0TW9kdWxlTmFtZSwgaGFzaEV4cG9ydE5hbWUsIGluaXRFeHBvcnROYW1lLCB1cGRhdGVFeHBvcnROYW1lLCBmaW5hbEV4cG9ydE5hbWUpID0+IHtcbiAgICBjb25zdCB3YXNtID0gKGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKHdlYmFzc2VtYmx5Qnl0ZXMsIHtcbiAgICAgICAgW2V4cGVjdGVkSW1wb3J0TW9kdWxlTmFtZV06IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyB3b3VsZCBvbmx5IGJlIGNhbGxlZCBpbiBjYXNlcyB3aGVyZSBhIGBfX3diaW5kZ2VuX21hbGxvY2AgZmFpbGVkLlxuICAgICAgICAgICAgICogU2luY2UgYF9fd2JpbmRnZW5fbWFsbG9jYCBpc24ndCBleHBvc2VkIHRvIGNvbnN1bWVycywgdGhpcyBlcnJvclxuICAgICAgICAgICAgICogY2FuIG9ubHkgYmUgZW5jb3VudGVyZWQgaWYgdGhlIGNvZGUgYmVsb3cgaXMgYnJva2VuLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlLCBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgICAgICAgICAgIF9fd2JpbmRnZW5fdGhyb3c6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIChwdHIsIGxlbikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL25vLXRocm93LXN0YXRlbWVudFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbShnZXRVaW50OE1lbW9yeSgpLnN1YmFycmF5KHB0ciwgcHRyICsgbGVuKSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgobnVtKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKG51bSkpXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcnKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pKS5pbnN0YW5jZS5leHBvcnRzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBsZXQgY2FjaGVkVWludDhNZW1vcnk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2luaXQtZGVjbGFyYXRpb25zXG4gICAgbGV0IGNhY2hlZFVpbnQzMk1lbW9yeTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvaW5pdC1kZWNsYXJhdGlvbnNcbiAgICBsZXQgY2FjaGVkR2xvYmFsQXJndW1lbnRQdHI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2luaXQtZGVjbGFyYXRpb25zXG4gICAgY29uc3QgZ2xvYmFsQXJndW1lbnRQdHIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjYWNoZWRHbG9iYWxBcmd1bWVudFB0ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYWNoZWRHbG9iYWxBcmd1bWVudFB0ciA9IHdhc20uX193YmluZGdlbl9nbG9iYWxfYXJndW1lbnRfcHRyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlZEdsb2JhbEFyZ3VtZW50UHRyO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTXVzdCBiZSBob2lzdGVkIGZvciBgX193YmluZGdlbl90aHJvd2AuXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtc3R5bGVcbiAgICBmdW5jdGlvbiBnZXRVaW50OE1lbW9yeSgpIHtcbiAgICAgICAgaWYgKGNhY2hlZFVpbnQ4TWVtb3J5ID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGNhY2hlZFVpbnQ4TWVtb3J5LmJ1ZmZlciAhPT0gd2FzbS5tZW1vcnkuYnVmZmVyKSB7XG4gICAgICAgICAgICBjYWNoZWRVaW50OE1lbW9yeSA9IG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlZFVpbnQ4TWVtb3J5O1xuICAgIH1cbiAgICBjb25zdCBnZXRVaW50MzJNZW1vcnkgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjYWNoZWRVaW50MzJNZW1vcnkgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgY2FjaGVkVWludDMyTWVtb3J5LmJ1ZmZlciAhPT0gd2FzbS5tZW1vcnkuYnVmZmVyKSB7XG4gICAgICAgICAgICBjYWNoZWRVaW50MzJNZW1vcnkgPSBuZXcgVWludDMyQXJyYXkod2FzbS5tZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVkVWludDMyTWVtb3J5O1xuICAgIH07XG4gICAgY29uc3QgcGFzc0FycmF5OFRvV2FzbSA9IChhcnJheSkgPT4ge1xuICAgICAgICBjb25zdCBwdHIgPSB3YXNtLl9fd2JpbmRnZW5fbWFsbG9jKGFycmF5Lmxlbmd0aCk7XG4gICAgICAgIGdldFVpbnQ4TWVtb3J5KCkuc2V0KGFycmF5LCBwdHIpO1xuICAgICAgICByZXR1cm4gW3B0ciwgYXJyYXkubGVuZ3RoXTtcbiAgICB9O1xuICAgIGNvbnN0IGdldEFycmF5VThGcm9tV2FzbSA9IChwdHIsIGxlbikgPT4gZ2V0VWludDhNZW1vcnkoKS5zdWJhcnJheShwdHIsIHB0ciArIGxlbik7XG4gICAgY29uc3QgaGFzaCA9IChpbnB1dCkgPT4ge1xuICAgICAgICBjb25zdCBbcHRyMCwgbGVuMF0gPSBwYXNzQXJyYXk4VG9XYXNtKGlucHV0KTtcbiAgICAgICAgY29uc3QgcmV0UHRyID0gZ2xvYmFsQXJndW1lbnRQdHIoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdhc21baGFzaEV4cG9ydE5hbWVdKHJldFB0ciwgcHRyMCwgbGVuMCk7XG4gICAgICAgICAgICBjb25zdCBtZW0gPSBnZXRVaW50MzJNZW1vcnkoKTtcbiAgICAgICAgICAgIGNvbnN0IHB0ciA9IG1lbVtyZXRQdHIgLyA0XTtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IG1lbVtyZXRQdHIgLyA0ICsgMV07XG4gICAgICAgICAgICBjb25zdCByZWFsUmV0ID0gZ2V0QXJyYXlVOEZyb21XYXNtKHB0ciwgbGVuKS5zbGljZSgpO1xuICAgICAgICAgICAgd2FzbS5fX3diaW5kZ2VuX2ZyZWUocHRyLCBsZW4pO1xuICAgICAgICAgICAgcmV0dXJuIHJlYWxSZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB3YXNtLl9fd2JpbmRnZW5fZnJlZShwdHIwLCBsZW4wKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcmV0UHRyID0gZ2xvYmFsQXJndW1lbnRQdHIoKTtcbiAgICAgICAgd2FzbVtpbml0RXhwb3J0TmFtZV0ocmV0UHRyKTtcbiAgICAgICAgY29uc3QgbWVtID0gZ2V0VWludDMyTWVtb3J5KCk7XG4gICAgICAgIGNvbnN0IHB0ciA9IG1lbVtyZXRQdHIgLyA0XTtcbiAgICAgICAgY29uc3QgbGVuID0gbWVtW3JldFB0ciAvIDQgKyAxXTtcbiAgICAgICAgY29uc3QgcmVhbFJldCA9IGdldEFycmF5VThGcm9tV2FzbShwdHIsIGxlbikuc2xpY2UoKTtcbiAgICAgICAgd2FzbS5fX3diaW5kZ2VuX2ZyZWUocHRyLCBsZW4pO1xuICAgICAgICByZXR1cm4gcmVhbFJldDtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZSA9IChyYXdTdGF0ZSwgaW5wdXQpID0+IHtcbiAgICAgICAgY29uc3QgW3B0cjAsIGxlbjBdID0gcGFzc0FycmF5OFRvV2FzbShyYXdTdGF0ZSk7XG4gICAgICAgIGNvbnN0IFtwdHIxLCBsZW4xXSA9IHBhc3NBcnJheThUb1dhc20oaW5wdXQpO1xuICAgICAgICBjb25zdCByZXRQdHIgPSBnbG9iYWxBcmd1bWVudFB0cigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2FzbVt1cGRhdGVFeHBvcnROYW1lXShyZXRQdHIsIHB0cjAsIGxlbjAsIHB0cjEsIGxlbjEpO1xuICAgICAgICAgICAgY29uc3QgbWVtID0gZ2V0VWludDMyTWVtb3J5KCk7XG4gICAgICAgICAgICBjb25zdCBwdHIgPSBtZW1bcmV0UHRyIC8gNF07XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBtZW1bcmV0UHRyIC8gNCArIDFdO1xuICAgICAgICAgICAgY29uc3QgcmVhbFJldCA9IGdldEFycmF5VThGcm9tV2FzbShwdHIsIGxlbikuc2xpY2UoKTtcbiAgICAgICAgICAgIHdhc20uX193YmluZGdlbl9mcmVlKHB0ciwgbGVuKTtcbiAgICAgICAgICAgIHJldHVybiByZWFsUmV0O1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgcmF3U3RhdGUuc2V0KGdldFVpbnQ4TWVtb3J5KCkuc3ViYXJyYXkocHRyMCAvIDEsIHB0cjAgLyAxICsgbGVuMCkpO1xuICAgICAgICAgICAgd2FzbS5fX3diaW5kZ2VuX2ZyZWUocHRyMCwgbGVuMCk7XG4gICAgICAgICAgICB3YXNtLl9fd2JpbmRnZW5fZnJlZShwdHIxLCBsZW4xKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZmluYWwgPSAocmF3U3RhdGUpID0+IHtcbiAgICAgICAgY29uc3QgW3B0cjAsIGxlbjBdID0gcGFzc0FycmF5OFRvV2FzbShyYXdTdGF0ZSk7XG4gICAgICAgIGNvbnN0IHJldFB0ciA9IGdsb2JhbEFyZ3VtZW50UHRyKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3YXNtW2ZpbmFsRXhwb3J0TmFtZV0ocmV0UHRyLCBwdHIwLCBsZW4wKTtcbiAgICAgICAgICAgIGNvbnN0IG1lbSA9IGdldFVpbnQzMk1lbW9yeSgpO1xuICAgICAgICAgICAgY29uc3QgcHRyID0gbWVtW3JldFB0ciAvIDRdO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gbWVtW3JldFB0ciAvIDQgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IHJlYWxSZXQgPSBnZXRBcnJheVU4RnJvbVdhc20ocHRyLCBsZW4pLnNsaWNlKCk7XG4gICAgICAgICAgICB3YXNtLl9fd2JpbmRnZW5fZnJlZShwdHIsIGxlbik7XG4gICAgICAgICAgICByZXR1cm4gcmVhbFJldDtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHJhd1N0YXRlLnNldChnZXRVaW50OE1lbW9yeSgpLnN1YmFycmF5KHB0cjAgLyAxLCBwdHIwIC8gMSArIGxlbjApKTtcbiAgICAgICAgICAgIHdhc20uX193YmluZGdlbl9mcmVlKHB0cjAsIGxlbjApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBmaW5hbCxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgaW5pdCxcbiAgICAgICAgdXBkYXRlLFxuICAgIH07XG59O1xuLyogZXNsaW50LWVuYWJsZSBmdW5jdGlvbmFsL25vLWNvbmRpdGlvbmFsLXN0YXRlbWVudCwgZnVuY3Rpb25hbC9uby1sZXQsIGZ1bmN0aW9uYWwvbm8tZXhwcmVzc2lvbi1zdGF0ZW1lbnQsIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBmdW5jdGlvbmFsL25vLXRyeS1zdGF0ZW1lbnQsIEB0eXBlc2NyaXB0LWVzbGludC9uby1tYWdpYy1udW1iZXJzLCBtYXgtcGFyYW1zLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGwsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50ICovXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoZXMuanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgdHNkb2Mvc3ludGF4ICovXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgcmlwZW1kMTYwQmFzZTY0Qnl0ZXMgPSAnQUdGemJRRUFBQUFCUmd4Z0FuOS9BWDlnQW45L0FHQURmMzkvQUdBQmZ3Ri9ZQVYvZjM5L2Z3Ri9ZQU4vZjM4QmYyQUFBR0FCZndCZ0JYOS9mMzkvQUdBQUFYOWdCSDkvZjM4QVlBRi9BWDRDSUFFTExpOXlhWEJsYldReE5qQVFYMTkzWW1sdVpHZGxibDkwYUhKdmR3QUJBeXNxQUFFQ0F3UUdCd0lDQVFFSENBSURBUUVKQUFjQkNnb0NBUWdDQVFJSEJ3Y0JBUUFBQVFjTEJRVUZCQVVCY0FFRUJBVURBUUFSQmdrQmZ3RkJ3SlhBQUFzSGt3RUlCbTFsYlc5eWVRSUFDWEpwY0dWdFpERTJNQUFJRG5KcGNHVnRaREUyTUY5cGJtbDBBQXdRY21sd1pXMWtNVFl3WDNWd1pHRjBaUUFORDNKcGNHVnRaREUyTUY5bWFXNWhiQUFPRVY5ZmQySnBibVJuWlc1ZmJXRnNiRzlqQUE4UFgxOTNZbWx1WkdkbGJsOW1jbVZsQUJBZVgxOTNZbWx1WkdkbGJsOW5iRzlpWVd4ZllYSm5kVzFsYm5SZmNIUnlBQklKQ1FFQVFRRUxBeVFtSndxSGZ5b1dBQ0FCUWQ4QVN3UkFJQUFQQzBIZ0FDQUJFQUlBQzMwQkFYOGpBRUV3YXlJQ0pBQWdBaUFCTmdJRUlBSWdBRFlDQUNBQ1FTeHFRUUUyQWdBZ0FrRVVha0VDTmdJQUlBSkJIR3BCQWpZQ0FDQUNRUUUyQWlRZ0FrSGNGRFlDQ0NBQ1FRSTJBZ3dnQWtHOERUWUNFQ0FDSUFJMkFpQWdBaUFDUVFScU5nSW9JQUlnQWtFZ2FqWUNHQ0FDUVFocVFld1VFQ1VBQzdJQkFRTi9Jd0JCRUdzaUF5UUFBa0FDUUFKQUlBSkJmMG9FUUVFQklRUWdBZ1JBSUFJUUJDSUVSUTBEQ3lBRElBUTJBZ0FnQXlBQ05nSUVJQU5CQURZQ0NDQURRUUFnQWtFQlFRRVFCVUgvQVhFaUJFRUNSdzBCSUFOQkNHb2lCQ0FFS0FJQUlnVWdBbW8yQWdBZ0JTQURLQUlBYWlBQklBSVFLQm9nQUVFSWFpQUVLQUlBTmdJQUlBQWdBeWtEQURjQ0FDQURRUkJxSkFBUEN4QUdBQXNnQkVFQmNRMEJFQVlBQ3dBTFFad1ZFQWNBQzZzWkFnaC9BWDRDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFuOENRQUpBQW44Q1FBSkFBa0FDUUFKQUFrQUNmd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBQVFmUUJUUVJBUWV3UEtBSUFJZ1ZCRUNBQVFRdHFRWGh4SUFCQkMwa2JJZ0pCQTNZaUFVRWZjU0lEZGlJQVFRTnhSUTBCSUFCQmYzTkJBWEVnQVdvaUFrRURkQ0lEUWZ3UGFpZ0NBQ0lBUVFocUlRUWdBQ2dDQ0NJQklBTkI5QTlxSWdOR0RRSWdBU0FETmdJTUlBTkJDR29nQVRZQ0FBd0RDeUFBUVVCUERSd2dBRUVMYWlJQVFYaHhJUUpCOEE4b0FnQWlDRVVOQ1VFQUlBSnJJUUVDZjBFQUlBQkJDSFlpQUVVTkFCcEJIeUlHSUFKQi8vLy9CMHNOQUJvZ0FrRW1JQUJuSWdCclFSOXhka0VCY1VFZklBQnJRUUYwY2dzaUJrRUNkRUg4RVdvb0FnQWlBRVVOQmlBQ1FRQkJHU0FHUVFGMmEwRWZjU0FHUVI5R0czUWhCUU5BQWtBZ0FDZ0NCRUY0Y1NJSElBSkpEUUFnQnlBQ2F5SUhJQUZQRFFBZ0FDRUVJQWNpQVVVTkJnc2dBRUVVYWlnQ0FDSUhJQU1nQnlBQUlBVkJIWFpCQkhGcVFSQnFLQUlBSWdCSEd5QURJQWNiSVFNZ0JVRUJkQ0VGSUFBTkFBc2dBMFVOQlNBRElRQU1Cd3NnQWtIOEVpZ0NBRTBOQ0NBQVJRMENJQUFnQTNSQkFpQURkQ0lBUVFBZ0FHdHljU0lBUVFBZ0FHdHhhQ0lCUVFOMElnUkIvQTlxS0FJQUlnQW9BZ2dpQXlBRVFmUVBhaUlFUmcwS0lBTWdCRFlDRENBRVFRaHFJQU0yQWdBTUN3dEI3QThnQlVGK0lBSjNjVFlDQUFzZ0FDQUNRUU4wSWdKQkEzSTJBZ1FnQUNBQ2FpSUFJQUFvQWdSQkFYSTJBZ1FnQkE4TFFmQVBLQUlBSWdCRkRRVWdBRUVBSUFCcmNXaEJBblJCL0JGcUtBSUFJZ1VvQWdSQmVIRWdBbXNoQVNBRklnTW9BaEFpQUVVTkZFRUFEQlVMUVFBaEFRd0NDeUFFRFFJTFFRQWhCRUVDSUFaQkgzRjBJZ0JCQUNBQWEzSWdDSEVpQUVVTkFpQUFRUUFnQUd0eGFFRUNkRUg4RVdvb0FnQWlBRVVOQWdzRFFDQUFLQUlFUVhoeElnTWdBazhnQXlBQ2F5SUhJQUZKY1NFRklBQW9BaEFpQTBVRVFDQUFRUlJxS0FJQUlRTUxJQUFnQkNBRkd5RUVJQWNnQVNBRkd5RUJJQU1pQUEwQUN5QUVSUTBCQzBIOEVpZ0NBQ0lBSUFKSkRRRWdBU0FBSUFKclNRMEJDd0pBQWtBQ1FFSDhFaWdDQUNJQklBSkpCRUJCZ0JNb0FnQWlBQ0FDVFEwQkRCNExRWVFUS0FJQUlRQWdBU0FDYXlJRFFSQlBEUUZCaEJOQkFEWUNBRUg4RWtFQU5nSUFJQUFnQVVFRGNqWUNCQ0FBSUFGcUlnRkJCR29oQWlBQktBSUVRUUZ5SVFFTUFndEJBQ0VCSUFKQnI0QUVhaUlEUVJCMlFBQWlBRUYvUmcwVUlBQkJFSFFpQlVVTkZFR01FMEdNRXlnQ0FDQURRWUNBZkhFaUIyb2lBRFlDQUVHUUUwR1FFeWdDQUNJQklBQWdBQ0FCU1JzMkFnQkJpQk1vQWdBaUFVVU5DVUdVRXlFQUEwQWdBQ2dDQUNJRElBQW9BZ1FpQkdvZ0JVWU5DeUFBS0FJSUlnQU5BQXNNRWd0Qi9CSWdBellDQUVHRUV5QUFJQUpxSWdVMkFnQWdCU0FEUVFGeU5nSUVJQUFnQVdvZ0F6WUNBQ0FDUVFOeUlRRWdBRUVFYWlFQ0N5QUNJQUUyQWdBZ0FFRUlhZzhMSUFRUUlDQUJRUTlMRFFJZ0JDQUJJQUpxSWdCQkEzSTJBZ1FnQkNBQWFpSUFJQUFvQWdSQkFYSTJBZ1FNREF0QjdBOGdCVUYrSUFGM2NUWUNBQXNnQUVFSWFpRURJQUFnQWtFRGNqWUNCQ0FBSUFKcUlnVWdBVUVEZENJQklBSnJJZ0pCQVhJMkFnUWdBQ0FCYWlBQ05nSUFRZndTS0FJQUlnQkZEUU1nQUVFRGRpSUVRUU4wUWZRUGFpRUJRWVFUS0FJQUlRQkI3QThvQWdBaUIwRUJJQVJCSDNGMElnUnhSUTBCSUFFb0FnZ01BZ3NnQkNBQ1FRTnlOZ0lFSUFRZ0Ftb2lBQ0FCUVFGeU5nSUVJQUFnQVdvZ0FUWUNBQ0FCUWY4QlN3MEZJQUZCQTNZaUFVRURkRUgwRDJvaEFrSHNEeWdDQUNJRFFRRWdBVUVmY1hRaUFYRkZEUWNnQWtFSWFpRURJQUlvQWdnTUNBdEI3QThnQnlBRWNqWUNBQ0FCQ3lFRUlBRkJDR29nQURZQ0FDQUVJQUEyQWd3Z0FDQUJOZ0lNSUFBZ0JEWUNDQXRCaEJNZ0JUWUNBRUg4RWlBQ05nSUFJQU1QQ3dKQVFhZ1RLQUlBSWdBRVFDQUFJQVZORFFFTFFhZ1RJQVUyQWdBTFFRQWhBRUdZRXlBSE5nSUFRWlFUSUFVMkFnQkJyQk5CL3g4MkFnQkJvQk5CQURZQ0FBTkFJQUJCL0E5cUlBQkI5QTlxSWdFMkFnQWdBRUdBRUdvZ0FUWUNBQ0FBUVFocUlnQkJnQUpIRFFBTElBVWdCMEZZYWlJQVFRRnlOZ0lFUVlnVElBVTJBZ0JCcEJOQmdJQ0FBVFlDQUVHQUV5QUFOZ0lBSUFVZ0FHcEJLRFlDQkF3SkN5QUFLQUlNUlEwQkRBY0xJQUFnQVJBaERBTUxJQVVnQVUwTkJTQURJQUZMRFFVZ0FFRUVhaUFFSUFkcU5nSUFRWWdUS0FJQUlnQkJEMnBCZUhFaUFVRjRhaUlEUVlBVEtBSUFJQWRxSWdVZ0FTQUFRUWhxYTJzaUFVRUJjallDQkVHa0UwR0FnSUFCTmdJQVFZZ1RJQU0yQWdCQmdCTWdBVFlDQUNBQUlBVnFRU2cyQWdRTUJndEI3QThnQXlBQmNqWUNBQ0FDUVFocUlRTWdBZ3NoQVNBRElBQTJBZ0FnQVNBQU5nSU1JQUFnQWpZQ0RDQUFJQUUyQWdnTElBUkJDR29oQVF3RUMwRUJDeUVHQTBBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0JnNEtBQUVDQkFVR0NBa0tCd01MSUFBb0FnUkJlSEVnQW1zaUJTQUJJQVVnQVVraUJSc2hBU0FBSUFNZ0JSc2hBeUFBSWdVb0FoQWlBQTBLUVFFaEJnd1JDeUFGUVJScUtBSUFJZ0FOQ2tFQ0lRWU1FQXNnQXhBZ0lBRkJFRThOQ2tFS0lRWU1Ed3NnQXlBQklBSnFJZ0JCQTNJMkFnUWdBeUFBYWlJQUlBQW9BZ1JCQVhJMkFnUU1EUXNnQXlBQ1FRTnlOZ0lFSUFNZ0Ftb2lBaUFCUVFGeU5nSUVJQUlnQVdvZ0FUWUNBRUg4RWlnQ0FDSUFSUTBKUVFRaEJnd05DeUFBUVFOMklnUkJBM1JCOUE5cUlRVkJoQk1vQWdBaEFFSHNEeWdDQUNJSFFRRWdCRUVmY1hRaUJIRkZEUWxCQlNFR0RBd0xJQVVvQWdnaEJBd0pDMEhzRHlBSElBUnlOZ0lBSUFVaEJFRUdJUVlNQ2dzZ0JVRUlhaUFBTmdJQUlBUWdBRFlDRENBQUlBVTJBZ3dnQUNBRU5nSUlRUWNoQmd3SkMwR0VFeUFDTmdJQVFmd1NJQUUyQWdCQkNDRUdEQWdMSUFOQkNHb1BDMEVBSVFZTUJndEJBQ0VHREFVTFFRTWhCZ3dFQzBFSElRWU1Bd3RCQ1NFR0RBSUxRUVloQmd3QkMwRUlJUVlNQUFzQUMwR29FMEdvRXlnQ0FDSUFJQVVnQUNBRlNSczJBZ0FnQlNBSGFpRURRWlFUSVFBQ2Z3SkFBa0FDUUFKQUEwQWdBQ2dDQUNBRFJnMEJJQUFvQWdnaUFBMEFDd3dCQ3lBQUtBSU1SUTBCQzBHVUV5RUFBa0FEUUNBQUtBSUFJZ01nQVUwRVFDQURJQUFvQWdScUlnTWdBVXNOQWdzZ0FDZ0NDQ0VBREFBTEFBc2dCU0FIUVZocUlnQkJBWEkyQWdRZ0JTQUFha0VvTmdJRUlBRWdBMEZnYWtGNGNVRjRhaUlFSUFRZ0FVRVFha2tiSWdSQkd6WUNCRUdJRXlBRk5nSUFRYVFUUVlDQWdBRTJBZ0JCZ0JNZ0FEWUNBRUdVRXlrQ0FDRUpJQVJCRUdwQm5CTXBBZ0EzQWdBZ0JDQUpOd0lJUVpnVElBYzJBZ0JCbEJNZ0JUWUNBRUdjRXlBRVFRaHFOZ0lBUWFBVFFRQTJBZ0FnQkVFY2FpRUFBMEFnQUVFSE5nSUFJQU1nQUVFRWFpSUFTdzBBQ3lBRUlBRkdEUU1nQkNBRUtBSUVRWDV4TmdJRUlBRWdCQ0FCYXlJQVFRRnlOZ0lFSUFRZ0FEWUNBQ0FBUWY4QlRRUkFJQUJCQTNZaUEwRURkRUgwRDJvaEFFSHNEeWdDQUNJRlFRRWdBMEVmY1hRaUEzRkZEUUlnQUNnQ0NBd0RDeUFCSUFBUUlRd0RDeUFBSUFVMkFnQWdBQ0FBS0FJRUlBZHFOZ0lFSUFVZ0FrRURjallDQkNBRklBSnFJUUFnQXlBRmF5QUNheUVDUVlnVEtBSUFJQU5HRFFSQmhCTW9BZ0FnQTBZTkJTQURLQUlFSWdGQkEzRkJBVWNOQ1NBQlFYaHhJZ1JCL3dGTERRWWdBeWdDRENJSElBTW9BZ2dpQmtZTkJ5QUdJQWMyQWd3Z0J5QUdOZ0lJREFnTFFld1BJQVVnQTNJMkFnQWdBQXNoQXlBQVFRaHFJQUUyQWdBZ0F5QUJOZ0lNSUFFZ0FEWUNEQ0FCSUFNMkFnZ0xRUUFoQVVHQUV5Z0NBQ0lBSUFKTkRRQU1DQXNnQVE4TFFZZ1RJQUEyQWdCQmdCTkJnQk1vQWdBZ0Ftb2lBallDQUNBQUlBSkJBWEkyQWdRTUJRc2dBRUg4RWlnQ0FDQUNhaUlDUVFGeU5nSUVRWVFUSUFBMkFnQkIvQklnQWpZQ0FDQUFJQUpxSUFJMkFnQU1CQXNnQXhBZ0RBRUxRZXdQUWV3UEtBSUFRWDRnQVVFRGRuZHhOZ0lBQ3lBRUlBSnFJUUlnQXlBRWFpRURDeUFESUFNb0FnUkJmbkUyQWdRZ0FDQUNRUUZ5TmdJRUlBQWdBbW9nQWpZQ0FBSi9Ba0FnQWtIL0FVMEVRQ0FDUVFOMklnRkJBM1JCOUE5cUlRSkI3QThvQWdBaUEwRUJJQUZCSDNGMElnRnhSUTBCSUFKQkNHb2hBeUFDS0FJSURBSUxJQUFnQWhBaERBSUxRZXdQSUFNZ0FYSTJBZ0FnQWtFSWFpRURJQUlMSVFFZ0F5QUFOZ0lBSUFFZ0FEWUNEQ0FBSUFJMkFnd2dBQ0FCTmdJSUN5QUZRUWhxRHd0QmdCTWdBQ0FDYXlJQk5nSUFRWWdUUVlnVEtBSUFJZ0FnQW1vaUF6WUNBQ0FESUFGQkFYSTJBZ1FnQUNBQ1FRTnlOZ0lFSUFCQkNHb0xwUUVCQW45QkFpRUZBa0FDUUFKQUFrQUNRQ0FBS0FJRUlnWWdBV3NnQWs4TkFDQUJJQUpxSWdJZ0FVa2hBUUpBSUFRRVFFRUFJUVVnQVEwQ0lBWkJBWFFpQVNBQ0lBSWdBVWtiSVFJTUFRdEJBQ0VGSUFFTkFRc2dBa0VBU0EwQUlBWkZEUUVnQUNnQ0FDQUNFQk1pQVVVTkFnd0RDeUFGRHdzZ0FoQUVJZ0VOQVFzZ0F3MEJDeUFCQkVBZ0FDQUJOZ0lBSUFCQkJHb2dBallDQUVFQ0R3dEJBUThMQUFzSUFFR01GQkFIQUF0bUFnRi9BMzRqQUVFd2F5SUJKQUFnQUNrQ0VDRUNJQUFwQWdnaEF5QUFLUUlBSVFRZ0FVRVVha0VBTmdJQUlBRWdCRGNER0NBQlFnRTNBZ1FnQVVIMEREWUNFQ0FCSUFGQkdHbzJBZ0FnQVNBRE53TWdJQUVnQWpjREtDQUJJQUZCSUdvUUpRQUx1QUVCQVg4akFFSGdBV3NpQXlRQUlBTkJPR3BCekFnb0FnQTJBZ0FnQTBFd2FrSEVDQ2tDQURjREFDQURRZ0EzQXlBZ0EwRzhDQ2tDQURjREtDQURRVHhxUVFCQnhBQVFLaG9nQTBFZ2FpQUJJQUlRQ1NBRFFZQUJhaUFEUVNCcVFlQUFFQ2dhSUFOQkNHb2dBMEdBQVdvUUNpQURRU0JxSUFOQkNHcEJGQkFESUFOQmlBRnFJQU5CS0dvb0FnQTJBZ0FnQXlBREtRTWdOd09BQVNBRElBTkJnQUZxRUFzZ0FDQURLUU1BTndJQUlBTkI0QUZxSkFBTGx3TUJCSDhqQUVGQWFpSURKQUFnQUNBQUtRTUFJQUt0ZkRjREFDQURJQUJCQ0dvMkFpZ2dBeUFEUVNocU5nSXNBa0FDUUFKQUFrQUNRQUpBSUFBb0Fod2lCUVJBUWNBQUlBVnJJZ1FnQWswTkFTQURRUmhxSUFVZ0JTQUNhaUlFSUFCQklHb1FGaUFES0FJY0lBSkhEUVVnQXlnQ0dDQUJJQUlRS0JvTUF3c2dBaUVFREFFTElBTkJNR29nQVNBQ0lBUVFGeUFEUVR4cUtBSUFJUVFnQXlnQ09DRUJJQU1vQWpBaEJTQURLQUkwSVFJZ0EwRWdhaUFBUVNCcUlnWWdBQ2dDSEJBWUlBSWdBeWdDSkVjTkJDQURLQUlnSUFVZ0FoQW9HaUFBUVJ4cVFRQTJBZ0FnQTBFc2FpQUdFQmtMSUFOQlBHb2hBaUFEUVRocUlRVUNRQU5BSUFSQlAwME5BU0FEUVRCcUlBRWdCRUhBQUJBWElBSW9BZ0FoQkNBRktBSUFJUUVnQTBFSWFrRUFRY0FBSUFNb0FqQWdBeWdDTkJBYUlBTkJMR29nQXlnQ0NCQVpEQUFMQUFzZ0EwRVFhaUFBUVNCcUlBUVFHeUFES0FJVUlBUkhEUUVnQXlnQ0VDQUJJQVFRS0JvTElBQkJIR29nQkRZQ0FDQURRVUJySkFBUEMwSDBFeEFIQUF0QjlCTVFCd0FMUWZRVEVBY0FDK01DQWdSL0FYNGpBRUZBYWlJQ0pBQWdBaUFCUVFocUlnVTJBaVFnQVNrREFDRUdJQUVvQWh3aEF5QUNJQUpCSkdvMkFpZ0NRQ0FEUVQ5TkJFQWdBVUVnYWlJRUlBTnFRWUFCT2dBQUlBRWdBU2dDSEVFQmFpSUROZ0ljSUFKQkdHb2dCQ0FERUJnZ0FpZ0NHRUVBSUFJb0Fod1FLaHBCd0FBZ0FTZ0NIR3RCQjAwRVFDQUNRU2hxSUFRUUdTQUNRUkJxSUFRZ0FVRWNhaWdDQUJBYklBSW9BaEJCQUNBQ0tBSVVFQ29hQ3lBQ1FRaHFJQVJCT0JBWUlBSW9BZ3hCQ0VjTkFTQUNLQUlJSUFaQ0E0WTNBQUFnQWtFb2FpQUVFQmtnQVVFY2FrRUFOZ0lBSUFKQkFEWUNLRUVFSVFFQ1FBTkFJQUZCR0VZTkFTQUNRU2hxSUFGcVFRQTZBQUFnQWlBQ0tBSW9RUUZxTmdJb0lBRkJBV29oQVF3QUN3QUxJQUFnQlNrQUFEY0FBQ0FBUVJCcUlBVkJFR29vQUFBMkFBQWdBRUVJYWlBRlFRaHFLUUFBTndBQUlBSkJRR3NrQUE4TFFjd1RJQU5Cd0FBUUhRQUxRZHdURUFjQUMyTUJBbjhnQVNnQ0FDRUNBa0FDUUNBQktBSUVJZ01nQVNnQ0NDSUJSZ1JBSUFNaEFRd0JDeUFESUFGSkRRRWdBUVJBSUFJZ0FSQVRJZ0lOQVFBTElBSWdBeEFSUVFFaEFrRUFJUUVMSUFBZ0FUWUNCQ0FBSUFJMkFnQVBDMEcwRXhBSEFBdVFBUUVCZnlNQVFZQUJheUlCSkFBZ0FVRXdha0hFQ0NrQ0FEY0RBQ0FCUVRocVFjd0lLQUlBTmdJQUlBRkNBRGNESUNBQlFid0lLUUlBTndNb0lBRkJQR3BCQUVIRUFCQXFHaUFCUVJCcUlBRkJJR3BCNEFBUUF5QUJRU2hxSUFGQkdHb29BZ0EyQWdBZ0FTQUJLUU1RTndNZ0lBRkJDR29nQVVFZ2FoQUxJQUFnQVNrRENEY0NBQ0FCUVlBQmFpUUFDNFlCQVFGL0l3QkI0QUZySWdVa0FDQUZRU0JxSUFFZ0FoQUJRZUFBRUNrYUlBVkJJR29nQXlBRUVBa2dCVUdBQVdvZ0JVRWdha0hnQUJBb0dpQUZRUkJxSUFWQmdBRnFRZUFBRUFNZ0JVR0lBV29nQlVFWWFpZ0NBRFlDQUNBRklBVXBBeEEzQTRBQklBVkJDR29nQlVHQUFXb1FDeUFBSUFVcEF3ZzNBZ0FnQlVIZ0FXb2tBQXR1QVFGL0l3QkJrQUZySWdNa0FDQURRVEJxSUFFZ0FoQUJRZUFBRUNnYUlBTkJHR29nQTBFd2FoQUtJQU5CQ0dvZ0EwRVlha0VVRUFNZ0EwRTRhaUFEUVJCcUtBSUFOZ0lBSUFNZ0F5a0RDRGNETUNBRElBTkJNR29RQ3lBQUlBTXBBd0EzQWdBZ0EwR1FBV29rQUF0S0FRRi9Jd0JCRUdzaUFTUUFJQUZDQVRjREFDQUJRUUEyQWdnZ0FVRUFJQUJCQUVFQUVBVkIvd0Z4UVFKR0JFQWdBU2dDQUNFQUlBRkJFR29rQUNBQUR3dEJnQWhCRmhBQUFBc0lBQ0FBSUFFUUVRc0xBQ0FCQkVBZ0FCQVVDd3NGQUVHUUR3dkhCUUVJZndKQUFrQUNRQUpBQWtBQ1FDQUJRYjkvU3cwQVFSQWdBVUVMYWtGNGNTQUJRUXRKR3lFQ0lBQkJmR29pQmlnQ0FDSUhRWGh4SVFNQ1FBSkFBa0FDUUNBSFFRTnhCRUFnQUVGNGFpSUlJQU5xSVFVZ0F5QUNUdzBCUVlnVEtBSUFJQVZHRFFKQmhCTW9BZ0FnQlVZTkF5QUZLQUlFSWdkQkFuRU5CQ0FIUVhoeElna2dBMm9pQXlBQ1NRMEVJQU1nQW1zaEFTQUpRZjhCU3cwSElBVW9BZ3dpQkNBRktBSUlJZ1ZHRFFnZ0JTQUVOZ0lNSUFRZ0JUWUNDQXdKQ3lBQ1FZQUNTUTBESUFNZ0FrRUVja2tOQXlBRElBSnJRWUdBQ0U4TkF3d0pDeUFESUFKcklnRkJFRWtOQ0NBR0lBSWdCMEVCY1hKQkFuSTJBZ0FnQ0NBQ2FpSUVJQUZCQTNJMkFnUWdCU0FGS0FJRVFRRnlOZ0lFSUFRZ0FSQWlEQWdMUVlBVEtBSUFJQU5xSWdNZ0FrME5BU0FHSUFJZ0IwRUJjWEpCQW5JMkFnQkJpQk1nQ0NBQ2FpSUJOZ0lBUVlBVElBTWdBbXNpQkRZQ0FDQUJJQVJCQVhJMkFnUU1Cd3RCL0JJb0FnQWdBMm9pQXlBQ1R3MENDeUFCRUFRaUFrVU5BQ0FDSUFBZ0FTQUdLQUlBSWdSQmVIRkJCRUVJSUFSQkEzRWJheUlFSUFRZ0FVc2JFQ2doQVNBQUVCUWdBU0VFQ3lBRUR3c0NRQ0FESUFKcklnRkJFRWtFUUNBR0lBZEJBWEVnQTNKQkFuSTJBZ0FnQ0NBRGFpSUJJQUVvQWdSQkFYSTJBZ1JCQUNFQkRBRUxJQVlnQWlBSFFRRnhja0VDY2pZQ0FDQUlJQUpxSWdRZ0FVRUJjallDQkNBSUlBTnFJZ0lnQVRZQ0FDQUNJQUlvQWdSQmZuRTJBZ1FMUVlRVElBUTJBZ0JCL0JJZ0FUWUNBQXdEQ3lBRkVDQU1BUXRCN0E5QjdBOG9BZ0JCZmlBSFFRTjJkM0UyQWdBTElBRkJEMDBFUUNBR0lBTWdCaWdDQUVFQmNYSkJBbkkyQWdBZ0NDQURhaUlCSUFFb0FnUkJBWEkyQWdRTUFRc2dCaUFDSUFZb0FnQkJBWEZ5UVFKeU5nSUFJQWdnQW1vaUJDQUJRUU55TmdJRUlBZ2dBMm9pQWlBQ0tBSUVRUUZ5TmdJRUlBUWdBUkFpSUFBUEN5QUFDK0FHQVFWL0FrQWdBRUY0YWlJQklBQkJmR29vQWdBaUEwRjRjU0lBYWlFQ0FrQUNRQ0FEUVFGeERRQWdBMEVEY1VVTkFTQUJLQUlBSWdNZ0FHb2hBQUpBQWtCQmhCTW9BZ0FnQVNBRGF5SUJSd1JBSUFOQi93RkxEUUVnQVNnQ0RDSUVJQUVvQWdnaUJVWU5BaUFGSUFRMkFnd2dCQ0FGTmdJSURBTUxJQUlvQWdRaUEwRURjVUVEUncwQ1Fmd1NJQUEyQWdBZ0FrRUVhaUFEUVg1eE5nSUFEQVFMSUFFUUlBd0JDMEhzRDBIc0R5Z0NBRUYrSUFOQkEzWjNjVFlDQUFzQ1FBSi9Ba0FDUUFKQUFrQUNRQUpBSUFJb0FnUWlBMEVDY1VVRVFFR0lFeWdDQUNBQ1JnMEJRWVFUS0FJQUlBSkdEUUlnQTBGNGNTSUVJQUJxSVFBZ0JFSC9BVXNOQXlBQ0tBSU1JZ1FnQWlnQ0NDSUNSZzBFSUFJZ0JEWUNEQ0FFSUFJMkFnZ01CUXNnQWtFRWFpQURRWDV4TmdJQUlBRWdBRUVCY2pZQ0JDQUJJQUJxSUFBMkFnQU1Cd3RCaUJNZ0FUWUNBRUdBRTBHQUV5Z0NBQ0FBYWlJQU5nSUFJQUVnQUVFQmNqWUNCQ0FCUVlRVEtBSUFSZ1JBUWZ3U1FRQTJBZ0JCaEJOQkFEWUNBQXRCcEJNb0FnQWdBRThOQndKQUlBQkJLVWtOQUVHVUV5RUFBMEFnQUNnQ0FDSUNJQUZOQkVBZ0FpQUFLQUlFYWlBQlN3MENDeUFBS0FJSUlnQU5BQXNMUVFBaEFVR2NFeWdDQUNJQVJRMEVBMEFnQVVFQmFpRUJJQUFvQWdnaUFBMEFDeUFCUWY4ZklBRkIveDlMR3d3RkMwR0VFeUFCTmdJQVFmd1NRZndTS0FJQUlBQnFJZ0EyQWdBTUJ3c2dBaEFnREFFTFFld1BRZXdQS0FJQVFYNGdBMEVEZG5keE5nSUFDeUFCSUFCQkFYSTJBZ1FnQVNBQWFpQUFOZ0lBSUFGQmhCTW9BZ0JIRFFKQi9CSWdBRFlDQUE4TFFmOGZDeUVCUWFRVFFYODJBZ0JCckJNZ0FUWUNBQThMUWF3VEFuOENRQUovQWtBZ0FFSC9BVTBFUUNBQVFRTjJJZ0pCQTNSQjlBOXFJUUJCN0E4b0FnQWlBMEVCSUFKQkgzRjBJZ0p4UlEwQklBQkJDR29oQXlBQUtBSUlEQUlMSUFFZ0FCQWhRYXdUUWF3VEtBSUFRWDlxSWdFMkFnQWdBUTBFUVp3VEtBSUFJZ0JGRFFKQkFDRUJBMEFnQVVFQmFpRUJJQUFvQWdnaUFBMEFDeUFCUWY4ZklBRkIveDlMR3d3REMwSHNEeUFESUFKeU5nSUFJQUJCQ0dvaEF5QUFDeUVDSUFNZ0FUWUNBQ0FDSUFFMkFnd2dBU0FBTmdJTUlBRWdBallDQ0E4TFFmOGZDeUlCTmdJQUN3OExJQUVnQUVFQmNqWUNCQ0FCSUFCcUlBQTJBZ0FMK3lzQklYOGdBQ0FCS0FBc0loa2dBU2dBS0NJUElBRW9BQlFpRVNBUklBRW9BRFFpR2lBUElCRWdBU2dBSENJVUlBRW9BQ1FpR3lBQktBQWdJaElnR3lBQktBQVlJaFlnRkNBWklCWWdBU2dBQkNJVElBQW9BaEFpSDJvZ0FDZ0NDQ0lnUVFwM0lnVWdBQ2dDQkNJZGN5QWdJQjF6SUFBb0Fnd2lCSE1nQUNnQ0FDSWhhaUFCS0FBQUloZHFRUXQzSUI5cUloQnpha0VPZHlBRWFpSU9RUXAzSWdKcUlBRW9BQkFpRlNBZFFRcDNJZ2RxSUFFb0FBZ2lHQ0FFYWlBUUlBZHpJQTV6YWtFUGR5QUZhaUlESUFKeklBRW9BQXdpSENBRmFpQU9JQkJCQ25jaUVITWdBM05xUVF4M0lBZHFJZzV6YWtFRmR5QVFhaUlHSUE1QkNuY2lDSE1nRUNBUmFpQU9JQU5CQ25jaUVITWdCbk5xUVFoM0lBSnFJZzV6YWtFSGR5QVFhaUlDUVFwM0lnTnFJQnNnQmtFS2R5SUdhaUFRSUJScUlBNGdCbk1nQW5OcVFRbDNJQWhxSWhBZ0EzTWdDQ0FTYWlBQ0lBNUJDbmNpRG5NZ0VITnFRUXQzSUFacUlnSnpha0VOZHlBT2FpSUdJQUpCQ25jaUNITWdEaUFQYWlBQ0lCQkJDbmNpQ1hNZ0JuTnFRUTUzSUFOcUlnSnpha0VQZHlBSmFpSURRUXAzSWdwcUlBSkJDbmNpQ3lBQktBQThJaEJxSUFnZ0dtb2dBeUFMY3lBSklBRW9BREFpRG1vZ0FpQUdRUXAzSWdaeklBTnpha0VHZHlBSWFpSUNjMnBCQjNjZ0Jtb2lBeUFDUVFwM0lnaHpJQVlnQVNnQU9DSUJhaUFDSUFweklBTnpha0VKZHlBTGFpSUdjMnBCQ0hjZ0Ntb2lBaUFHY1NBRFFRcDNJZ2tnQWtGL2MzRnlha0daODRuVUJXcEJCM2NnQ0dvaUEwRUtkeUlLYWlBUElBSkJDbmNpQzJvZ0V5QUdRUXAzSWdacUlCb2dDV29nRlNBSWFpQURJQUp4SUFZZ0EwRi9jM0Z5YWtHWjg0blVCV3BCQm5jZ0NXb2lBaUFEY1NBTElBSkJmM054Y21wQm1mT0oxQVZxUVFoM0lBWnFJZ01nQW5FZ0NpQURRWDl6Y1hKcVFabnppZFFGYWtFTmR5QUxhaUlHSUFOeElBSkJDbmNpQ0NBR1FYOXpjWEpxUVpuemlkUUZha0VMZHlBS2FpSUNJQVp4SUFOQkNuY2lDU0FDUVg5emNYSnFRWm56aWRRRmFrRUpkeUFJYWlJRFFRcDNJZ3BxSUJjZ0FrRUtkeUlMYWlBT0lBWkJDbmNpQm1vZ0hDQUphaUFRSUFocUlBTWdBbkVnQmlBRFFYOXpjWEpxUVpuemlkUUZha0VIZHlBSmFpSUNJQU54SUFzZ0FrRi9jM0Z5YWtHWjg0blVCV3BCRDNjZ0Jtb2lBeUFDY1NBS0lBTkJmM054Y21wQm1mT0oxQVZxUVFkM0lBdHFJZ1lnQTNFZ0FrRUtkeUlJSUFaQmYzTnhjbXBCbWZPSjFBVnFRUXgzSUFwcUlnSWdCbkVnQTBFS2R5SUpJQUpCZjNOeGNtcEJtZk9KMUFWcVFROTNJQWhxSWdOQkNuY2lDbW9nR1NBQ1FRcDNJZ3RxSUFFZ0JrRUtkeUlHYWlBWUlBbHFJQkVnQ0dvZ0F5QUNjU0FHSUFOQmYzTnhjbXBCbWZPSjFBVnFRUWwzSUFscUlnSWdBM0VnQ3lBQ1FYOXpjWEpxUVpuemlkUUZha0VMZHlBR2FpSURJQUp4SUFvZ0EwRi9jM0Z5YWtHWjg0blVCV3BCQjNjZ0Myb2lCaUFEY1NBQ1FRcDNJZ0lnQmtGL2MzRnlha0daODRuVUJXcEJEWGNnQ21vaUNDQUdjU0FEUVFwM0lnTWdDRUYvY3lJTGNYSnFRWm56aWRRRmFrRU1keUFDYWlJSlFRcDNJZ3BxSUJVZ0NFRUtkeUlJYWlBQklBWkJDbmNpQm1vZ0R5QURhaUFjSUFKcUlBa2dDM0lnQm5OcVFhSFg1L1lHYWtFTGR5QURhaUlDSUFsQmYzTnlJQWh6YWtHaDErZjJCbXBCRFhjZ0Jtb2lBeUFDUVg5emNpQUtjMnBCb2RmbjlnWnFRUVozSUFocUlnWWdBMEYvYzNJZ0FrRUtkeUlDYzJwQm9kZm45Z1pxUVFkM0lBcHFJZ2dnQmtGL2MzSWdBMEVLZHlJRGMycEJvZGZuOWdacVFRNTNJQUpxSWdsQkNuY2lDbW9nR0NBSVFRcDNJZ3RxSUJNZ0JrRUtkeUlHYWlBU0lBTnFJQkFnQW1vZ0NTQUlRWDl6Y2lBR2MycEJvZGZuOWdacVFRbDNJQU5xSWdJZ0NVRi9jM0lnQzNOcVFhSFg1L1lHYWtFTmR5QUdhaUlESUFKQmYzTnlJQXB6YWtHaDErZjJCbXBCRDNjZ0Myb2lCaUFEUVg5emNpQUNRUXAzSWdKemFrR2gxK2YyQm1wQkRuY2dDbW9pQ0NBR1FYOXpjaUFEUVFwM0lnTnpha0doMStmMkJtcEJDSGNnQW1vaUNVRUtkeUlLYWlBWklBaEJDbmNpQzJvZ0dpQUdRUXAzSWdacUlCWWdBMm9nRnlBQ2FpQUpJQWhCZjNOeUlBWnpha0doMStmMkJtcEJEWGNnQTJvaUFpQUpRWDl6Y2lBTGMycEJvZGZuOWdacVFRWjNJQVpxSWdNZ0FrRi9jM0lnQ25OcVFhSFg1L1lHYWtFRmR5QUxhaUlHSUFOQmYzTnlJQUpCQ25jaUNITnFRYUhYNS9ZR2FrRU1keUFLYWlJSklBWkJmM055SUFOQkNuY2lDbk5xUWFIWDUvWUdha0VIZHlBSWFpSUxRUXAzSWdKcUlCa2dDVUVLZHlJRGFpQWJJQVpCQ25jaUJtb2dFeUFLYWlBT0lBaHFJQXNnQ1VGL2MzSWdCbk5xUWFIWDUvWUdha0VGZHlBS2FpSUlJQU54SUFzZ0EwRi9jM0Z5YWtIYytlNzRlR3BCQzNjZ0Jtb2lCaUFDY1NBSUlBSkJmM054Y21wQjNQbnUrSGhxUVF4M0lBTnFJZ2tnQ0VFS2R5SURjU0FHSUFOQmYzTnhjbXBCM1BudStIaHFRUTUzSUFKcUlnb2dCa0VLZHlJQ2NTQUpJQUpCZjNOeGNtcEIzUG51K0hocVFROTNJQU5xSWd0QkNuY2lCbW9nRlNBS1FRcDNJZ2hxSUE0Z0NVRUtkeUlKYWlBU0lBSnFJQmNnQTJvZ0N5QUpjU0FLSUFsQmYzTnhjbXBCM1BudStIaHFRUTUzSUFKcUlnSWdDSEVnQ3lBSVFYOXpjWEpxUWR6NTd2aDRha0VQZHlBSmFpSURJQVp4SUFJZ0JrRi9jM0Z5YWtIYytlNzRlR3BCQ1hjZ0NHb2lDU0FDUVFwM0lnSnhJQU1nQWtGL2MzRnlha0hjK2U3NGVHcEJDSGNnQm1vaUNpQURRUXAzSWdOeElBa2dBMEYvYzNGeWFrSGMrZTc0ZUdwQkNYY2dBbW9pQzBFS2R5SUdhaUFCSUFwQkNuY2lDR29nRUNBSlFRcDNJZ2xxSUJRZ0Eyb2dIQ0FDYWlBTElBbHhJQW9nQ1VGL2MzRnlha0hjK2U3NGVHcEJEbmNnQTJvaUFpQUljU0FMSUFoQmYzTnhjbXBCM1BudStIaHFRUVYzSUFscUlnTWdCbkVnQWlBR1FYOXpjWEpxUWR6NTd2aDRha0VHZHlBSWFpSUlJQUpCQ25jaUFuRWdBeUFDUVg5emNYSnFRZHo1N3ZoNGFrRUlkeUFHYWlJSklBTkJDbmNpQTNFZ0NDQURRWDl6Y1hKcVFkejU3dmg0YWtFR2R5QUNhaUlLUVFwM0lndHFJQmNnQ1VFS2R5SUdhaUFWSUFoQkNuY2lDR29nR0NBRGFpQVdJQUpxSUFvZ0NIRWdDU0FJUVg5emNYSnFRZHo1N3ZoNGFrRUZkeUFEYWlJQ0lBWnhJQW9nQmtGL2MzRnlha0hjK2U3NGVHcEJESGNnQ0dvaUF5QUNJQXRCZjNOeWMycEJ6dnJQeW5wcVFRbDNJQVpxSWdZZ0F5QUNRUXAzSWdKQmYzTnljMnBCenZyUHlucHFRUTkzSUF0cUlnZ2dCaUFEUVFwM0lnTkJmM055YzJwQnp2clB5bnBxUVFWM0lBSnFJZ2xCQ25jaUNtb2dHQ0FJUVFwM0lndHFJQTRnQmtFS2R5SUdhaUFVSUFOcUlCc2dBbW9nQ1NBSUlBWkJmM055YzJwQnp2clB5bnBxUVF0M0lBTnFJZ0lnQ1NBTFFYOXpjbk5xUWM3Nno4cDZha0VHZHlBR2FpSURJQUlnQ2tGL2MzSnpha0hPK3MvS2VtcEJDSGNnQzJvaUJpQURJQUpCQ25jaUFrRi9jM0p6YWtITytzL0tlbXBCRFhjZ0Ntb2lDQ0FHSUFOQkNuY2lBMEYvYzNKemFrSE8rcy9LZW1wQkRIY2dBbW9pQ1VFS2R5SUthaUFTSUFoQkNuY2lDMm9nSENBR1FRcDNJZ1pxSUJNZ0Eyb2dBU0FDYWlBSklBZ2dCa0YvYzNKemFrSE8rcy9LZW1wQkJYY2dBMm9pQWlBSklBdEJmM055YzJwQnp2clB5bnBxUVF4M0lBWnFJZ01nQWlBS1FYOXpjbk5xUWM3Nno4cDZha0VOZHlBTGFpSUdJQU1nQWtFS2R5SUlRWDl6Y25OcVFjNzZ6OHA2YWtFT2R5QUthaUlKSUFZZ0EwRUtkeUlLUVg5emNuTnFRYzc2ejhwNmFrRUxkeUFJYWlJTFFRcDNJaUlnQkdvZ0d5QVhJQlVnRnlBWklCd2dFeUFRSUJjZ0RpQVFJQmdnSVNBZ0lBUkJmM055SUIxemFpQVJha0htbDRxRkJXcEJDSGNnSDJvaUFrRUtkeUlEYWlBSElCdHFJQVVnRjJvZ0JDQVVhaUFmSUFJZ0hTQUZRWDl6Y25OcUlBRnFRZWFYaW9VRmFrRUpkeUFFYWlJRUlBSWdCMEYvYzNKemFrSG1sNHFGQldwQkNYY2dCV29pQlNBRUlBTkJmM055YzJwQjVwZUtoUVZxUVF0M0lBZHFJZ2NnQlNBRVFRcDNJZ1JCZjNOeWMycEI1cGVLaFFWcVFRMTNJQU5xSWdJZ0J5QUZRUXAzSWdWQmYzTnljMnBCNXBlS2hRVnFRUTkzSUFScUlnTkJDbmNpREdvZ0ZpQUNRUXAzSWcxcUlCb2dCMEVLZHlJSGFpQVZJQVZxSUJrZ0JHb2dBeUFDSUFkQmYzTnljMnBCNXBlS2hRVnFRUTkzSUFWcUlnUWdBeUFOUVg5emNuTnFRZWFYaW9VRmFrRUZkeUFIYWlJRklBUWdERUYvYzNKemFrSG1sNHFGQldwQkIzY2dEV29pQnlBRklBUkJDbmNpQkVGL2MzSnpha0htbDRxRkJXcEJCM2NnREdvaUFpQUhJQVZCQ25jaUJVRi9jM0p6YWtIbWw0cUZCV3BCQ0hjZ0JHb2lBMEVLZHlJTWFpQWNJQUpCQ25jaURXb2dEeUFIUVFwM0lnZHFJQk1nQldvZ0VpQUVhaUFESUFJZ0IwRi9jM0p6YWtIbWw0cUZCV3BCQzNjZ0JXb2lCQ0FESUExQmYzTnljMnBCNXBlS2hRVnFRUTUzSUFkcUlnVWdCQ0FNUVg5emNuTnFRZWFYaW9VRmFrRU9keUFOYWlJSElBVWdCRUVLZHlJQ1FYOXpjbk5xUWVhWGlvVUZha0VNZHlBTWFpSURJQWNnQlVFS2R5SU1RWDl6Y25OcVFlYVhpb1VGYWtFR2R5QUNhaUlOUVFwM0lnUnFJQlFnQTBFS2R5SUZhaUFjSUFkQkNuY2lCMm9nR1NBTWFpQVdJQUpxSUEwZ0IzRWdBeUFIUVg5emNYSnFRYVNpdCtJRmFrRUpkeUFNYWlJQ0lBVnhJQTBnQlVGL2MzRnlha0drb3JmaUJXcEJEWGNnQjJvaUJ5QUVjU0FDSUFSQmYzTnhjbXBCcEtLMzRnVnFRUTkzSUFWcUlnTWdBa0VLZHlJRmNTQUhJQVZCZjNOeGNtcEJwS0szNGdWcVFRZDNJQVJxSWd3Z0IwRUtkeUlFY1NBRElBUkJmM054Y21wQnBLSzM0Z1ZxUVF4M0lBVnFJZzFCQ25jaUIyb2dBU0FNUVFwM0lnSnFJQThnQTBFS2R5SURhaUFSSUFScUlCb2dCV29nRFNBRGNTQU1JQU5CZjNOeGNtcEJwS0szNGdWcVFRaDNJQVJxSWdRZ0FuRWdEU0FDUVg5emNYSnFRYVNpdCtJRmFrRUpkeUFEYWlJRklBZHhJQVFnQjBGL2MzRnlha0drb3JmaUJXcEJDM2NnQW1vaUF5QUVRUXAzSWdSeElBVWdCRUYvYzNGeWFrR2tvcmZpQldwQkIzY2dCMm9pRENBRlFRcDNJZ1Z4SUFNZ0JVRi9jM0Z5YWtHa29yZmlCV3BCQjNjZ0JHb2lEVUVLZHlJSGFpQWJJQXhCQ25jaUFtb2dGU0FEUVFwM0lnTnFJQTRnQldvZ0VpQUVhaUFOSUFOeElBd2dBMEYvYzNGeWFrR2tvcmZpQldwQkRIY2dCV29pQkNBQ2NTQU5JQUpCZjNOeGNtcEJwS0szNGdWcVFRZDNJQU5xSWdVZ0IzRWdCQ0FIUVg5emNYSnFRYVNpdCtJRmFrRUdkeUFDYWlJQ0lBUkJDbmNpQkhFZ0JTQUVRWDl6Y1hKcVFhU2l0K0lGYWtFUGR5QUhhaUlESUFWQkNuY2lCWEVnQWlBRlFYOXpjWEpxUWFTaXQrSUZha0VOZHlBRWFpSU1RUXAzSWcxcUlCTWdBMEVLZHlJZWFpQVJJQUpCQ25jaUIyb2dFQ0FGYWlBWUlBUnFJQXdnQjNFZ0F5QUhRWDl6Y1hKcVFhU2l0K0lGYWtFTGR5QUZhaUlFSUF4QmYzTnlJQjV6YWtIei9jRHJCbXBCQ1hjZ0Iyb2lCU0FFUVg5emNpQU5jMnBCOC8zQTZ3WnFRUWQzSUI1cUlnY2dCVUYvYzNJZ0JFRUtkeUlFYzJwQjgvM0E2d1pxUVE5M0lBMXFJZ0lnQjBGL2MzSWdCVUVLZHlJRmMycEI4LzNBNndacVFRdDNJQVJxSWdOQkNuY2lER29nR3lBQ1FRcDNJZzFxSUJZZ0IwRUtkeUlIYWlBQklBVnFJQlFnQkdvZ0F5QUNRWDl6Y2lBSGMycEI4LzNBNndacVFRaDNJQVZxSWdRZ0EwRi9jM0lnRFhOcVFmUDl3T3NHYWtFR2R5QUhhaUlGSUFSQmYzTnlJQXh6YWtIei9jRHJCbXBCQm5jZ0RXb2lCeUFGUVg5emNpQUVRUXAzSWdSemFrSHovY0RyQm1wQkRuY2dER29pQWlBSFFYOXpjaUFGUVFwM0lnVnpha0h6L2NEckJtcEJESGNnQkdvaUEwRUtkeUlNYWlBUElBSkJDbmNpRFdvZ0dDQUhRUXAzSWdkcUlBNGdCV29nRWlBRWFpQURJQUpCZjNOeUlBZHpha0h6L2NEckJtcEJEWGNnQldvaUJDQURRWDl6Y2lBTmMycEI4LzNBNndacVFRVjNJQWRxSWdVZ0JFRi9jM0lnREhOcVFmUDl3T3NHYWtFT2R5QU5haUlISUFWQmYzTnlJQVJCQ25jaUJITnFRZlA5d09zR2FrRU5keUFNYWlJQ0lBZEJmM055SUFWQkNuY2lCWE5xUWZQOXdPc0dha0VOZHlBRWFpSURRUXAzSWd4cUlCWWdBa0VLZHlJTmFpQVNJQWRCQ25jaUIyb2dHaUFGYWlBVklBUnFJQU1nQWtGL2MzSWdCM05xUWZQOXdPc0dha0VIZHlBRmFpSUNJQU5CZjNOeUlBMXpha0h6L2NEckJtcEJCWGNnQjJvaUJDQUNjU0FNSUFSQmYzTnhjbXBCNmUyMTB3ZHFRUTkzSUExcUlnVWdCSEVnQWtFS2R5SUNJQVZCZjNOeGNtcEI2ZTIxMHdkcVFRVjNJQXhxSWdjZ0JYRWdCRUVLZHlJRElBZEJmM054Y21wQjZlMjEwd2RxUVFoM0lBSnFJZ1JCQ25jaURHb2dFQ0FIUVFwM0lnMXFJQmtnQlVFS2R5SWVhaUFjSUFOcUlCTWdBbW9nQkNBSGNTQWVJQVJCZjNOeGNtcEI2ZTIxMHdkcVFRdDNJQU5xSWdVZ0JIRWdEU0FGUVg5emNYSnFRZW50dGRNSGFrRU9keUFlYWlJRUlBVnhJQXdnQkVGL2MzRnlha0hwN2JYVEIycEJEbmNnRFdvaUJ5QUVjU0FGUVFwM0lnSWdCMEYvYzNGeWFrSHA3YlhUQjJwQkJuY2dER29pQlNBSGNTQUVRUXAzSWdNZ0JVRi9jM0Z5YWtIcDdiWFRCMnBCRG5jZ0Ftb2lCRUVLZHlJTWFpQWFJQVZCQ25jaURXb2dHQ0FIUVFwM0lnZHFJQTRnQTJvZ0VTQUNhaUFFSUFWeElBY2dCRUYvYzNGeWFrSHA3YlhUQjJwQkJuY2dBMm9pQlNBRWNTQU5JQVZCZjNOeGNtcEI2ZTIxMHdkcVFRbDNJQWRxSWdRZ0JYRWdEQ0FFUVg5emNYSnFRZW50dGRNSGFrRU1keUFOYWlJSElBUnhJQVZCQ25jaUFpQUhRWDl6Y1hKcVFlbnR0ZE1IYWtFSmR5QU1haUlGSUFkeElBUkJDbmNpQXlBRlFYOXpjWEpxUWVudHRkTUhha0VNZHlBQ2FpSUVRUXAzSWd3Z0VHb2dBU0FIUVFwM0lnMXFJQThnQTJvZ0ZDQUNhaUFFSUFWeElBMGdCRUYvYzNGeWFrSHA3YlhUQjJwQkJYY2dBMm9pQnlBRWNTQUZRUXAzSWdVZ0IwRi9jM0Z5YWtIcDdiWFRCMnBCRDNjZ0RXb2lCQ0FIY1NBTUlBUkJmM054Y21wQjZlMjEwd2RxUVFoM0lBVnFJZ0lnQkVFS2R5SURjeUFGSUE1cUlBUWdCMEVLZHlJT2N5QUNjMnBCQ0hjZ0RHb2lCSE5xUVFWM0lBNXFJZ1ZCQ25jaUJ5QVNhaUFDUVFwM0loSWdFMm9nRGlBUGFpQUVJQkp6SUFWemFrRU1keUFEYWlJUElBZHpJQU1nRldvZ0JTQUVRUXAzSWhOeklBOXpha0VKZHlBU2FpSVNjMnBCREhjZ0Uyb2lGU0FTUVFwM0lnNXpJQk1nRVdvZ0VpQVBRUXAzSWc5eklCVnpha0VGZHlBSGFpSVJjMnBCRG5jZ0Qyb2lFa0VLZHlJVElBRnFJQlZCQ25jaUFTQVlhaUFQSUJScUlCRWdBWE1nRW5OcVFRWjNJQTVxSWc4Z0UzTWdEaUFXYWlBU0lCRkJDbmNpRVhNZ0QzTnFRUWgzSUFGcUlnRnpha0VOZHlBUmFpSVVJQUZCQ25jaUVuTWdFU0FhYWlBQklBOUJDbmNpRDNNZ0ZITnFRUVozSUJOcUlnRnpha0VGZHlBUGFpSVJRUXAzSWhOcU5nSUlJQUFnSUNBV0lBaHFJQXNnQ1NBR1FRcDNJaFpCZjNOeWMycEJ6dnJQeW5wcVFRaDNJQXBxSWhWQkNuZHFJQThnRjJvZ0FTQVVRUXAzSWc5eklCRnpha0VQZHlBU2FpSVVRUXAzSWhocU5nSUVJQUFnSFNBUUlBcHFJQlVnQ3lBSlFRcDNJaGRCZjNOeWMycEJ6dnJQeW5wcVFRVjNJQlpxSWhCcUlCSWdIR29nRVNBQlFRcDNJZ0Z6SUJSemFrRU5keUFQYWlJUlFRcDNhallDQUNBQUlCY2dJV29nR2lBV2FpQVFJQlVnSWtGL2MzSnpha0hPK3MvS2VtcEJCbmRxSUE4Z0cyb2dGQ0FUY3lBUmMycEJDM2NnQVdvaUQybzJBaEFnQUNBWElCOXFJQk5xSUFFZ0dXb2dFU0FZY3lBUGMycEJDM2RxTmdJTUN6a0FBa0FnQWlBQlR3UkFJQUpCd1FCUERRRWdBQ0FDSUFGck5nSUVJQUFnQXlBQmFqWUNBQThMSUFFZ0FoQWNBQXNnQWtIQUFCQUNBQXROQWdGL0FuNGpBRUVRYXlJRUpBQWdCRUVJYWtFQUlBTWdBU0FDRUJvZ0JDa0RDQ0VGSUFRZ0F5QUNJQUVnQWhBYUlBUXBBd0FoQmlBQUlBVTNBZ0FnQUNBR053SUlJQVJCRUdva0FBc3NBUUYvSXdCQkVHc2lBeVFBSUFOQkNHb2dBa0hBQUNBQkVCWWdBQ0FES1FNSU53SUFJQU5CRUdva0FBc09BQ0FBS0FJQUtBSUFJQUVRRlFzM0FBSkFJQUlnQVU4RVFDQUVJQUpKRFFFZ0FDQUNJQUZyTmdJRUlBQWdBeUFCYWpZQ0FBOExJQUVnQWhBY0FBc2dBaUFFRUFJQUN5c0JBWDhqQUVFUWF5SURKQUFnQTBFSWFrRUFJQUlnQVJBV0lBQWdBeWtEQ0RjQ0FDQURRUkJxSkFBTGZRRUJmeU1BUVRCcklnSWtBQ0FDSUFFMkFnUWdBaUFBTmdJQUlBSkJMR3BCQVRZQ0FDQUNRUlJxUVFJMkFnQWdBa0VjYWtFQ05nSUFJQUpCQVRZQ0pDQUNRZndVTmdJSUlBSkJBallDRENBQ1Fid05OZ0lRSUFJZ0FqWUNJQ0FDSUFKQkJHbzJBaWdnQWlBQ1FTQnFOZ0lZSUFKQkNHcEJqQlVRSlFBTGZBRUJmeU1BUVRCcklnTWtBQ0FESUFJMkFnUWdBeUFCTmdJQUlBTkJMR3BCQVRZQ0FDQURRUlJxUVFJMkFnQWdBMEVjYWtFQ05nSUFJQU5CQVRZQ0pDQURRY3dVTmdJSUlBTkJBallDRENBRFFid05OZ0lRSUFNZ0EwRUVhallDSUNBRElBTTJBaWdnQXlBRFFTQnFOZ0lZSUFOQkNHb2dBQkFsQUF0UUFBSkFBa0JCMkE4b0FnQkJBVVlFUUVIY0QwSGNEeWdDQUVFQmFpSUFOZ0lBSUFCQkEwa05BUXdDQzBIWUQwS0JnSUNBRURjREFBdEI1QThvQWdBaUFFRi9UQTBBUWVRUElBQTJBZ0FMQUFzL0FRSi9Jd0JCRUdzaUFTUUFBbjhnQUNnQ0NDSUNJQUlOQUJwQnBCUVFCd0FMR2lBQklBQXBBZ3czQXdBZ0FTQUFRUlJxS1FJQU53TUlJQUVRSGdBTHN3SUJCWDhnQUNnQ0dDRURBa0FDUUFKQUlBQW9BZ3dpQWlBQVJ3UkFJQUFvQWdnaUFTQUNOZ0lNSUFJZ0FUWUNDQ0FERFFFTUFnc2dBRUVVYWlJQklBQkJFR29nQVNnQ0FCc2lCQ2dDQUNJQkJFQUNRQU5BSUFRaEJTQUJJZ0pCRkdvaUJDZ0NBQ0lCQkVBZ0FRMEJEQUlMSUFKQkVHb2hCQ0FDS0FJUUlnRU5BQXNMSUFWQkFEWUNBQ0FERFFFTUFndEJBQ0VDSUFORkRRRUxBa0FnQUNnQ0hDSUVRUUowUWZ3UmFpSUJLQUlBSUFCSEJFQWdBMEVRYWlBRFFSUnFJQU1vQWhBZ0FFWWJJQUkyQWdBZ0FnMEJEQUlMSUFFZ0FqWUNBQ0FDUlEwQ0N5QUNJQU0yQWhnZ0FDZ0NFQ0lCQkVBZ0FpQUJOZ0lRSUFFZ0FqWUNHQXNnQUVFVWFpZ0NBQ0lCUlEwQUlBSkJGR29nQVRZQ0FDQUJJQUkyQWhnTER3dEI4QTlCOEE4b0FnQkJmaUFFZDNFMkFnQUx4UUlCQkg4Z0FBSi9RUUFnQVVFSWRpSURSUTBBR2tFZklnSWdBVUgvLy84SFN3MEFHaUFCUVNZZ0EyY2lBbXRCSDNGMlFRRnhRUjhnQW10QkFYUnlDeUlDTmdJY0lBQkNBRGNDRUNBQ1FRSjBRZndSYWlFREFrQUNRQUpBUWZBUEtBSUFJZ1JCQVNBQ1FSOXhkQ0lGY1FSQUlBTW9BZ0FpQkNnQ0JFRjRjU0FCUncwQklBUWhBZ3dDQ3lBRElBQTJBZ0JCOEE4Z0JDQUZjallDQUNBQUlBTTJBaGdnQUNBQU5nSUlJQUFnQURZQ0RBOExJQUZCQUVFWklBSkJBWFpyUVI5eElBSkJIMFliZENFREEwQWdCQ0FEUVIxMlFRUnhha0VRYWlJRktBSUFJZ0pGRFFJZ0EwRUJkQ0VESUFJaEJDQUNLQUlFUVhoeElBRkhEUUFMQ3lBQ0tBSUlJZ01nQURZQ0RDQUNJQUEyQWdnZ0FDQUNOZ0lNSUFBZ0F6WUNDQ0FBUVFBMkFoZ1BDeUFGSUFBMkFnQWdBQ0FFTmdJWUlBQWdBRFlDRENBQUlBQTJBZ2dMOVFRQkJIOGdBQ0FCYWlFQ0FrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBQUtBSUVJZ05CQVhFTkFDQURRUU54UlEwQklBQW9BZ0FpQXlBQmFpRUJBa0FDUUVHRUV5Z0NBQ0FBSUFOcklnQkhCRUFnQTBIL0FVc05BU0FBS0FJTUlnUWdBQ2dDQ0NJRlJnMENJQVVnQkRZQ0RDQUVJQVUyQWdnTUF3c2dBaWdDQkNJRFFRTnhRUU5IRFFKQi9CSWdBVFlDQUNBQ1FRUnFJQU5CZm5FMkFnQWdBQ0FCUVFGeU5nSUVJQUlnQVRZQ0FBOExJQUFRSUF3QkMwSHNEMEhzRHlnQ0FFRitJQU5CQTNaM2NUWUNBQXNDUUNBQ0tBSUVJZ05CQW5GRkJFQkJpQk1vQWdBZ0FrWU5BVUdFRXlnQ0FDQUNSZzBESUFOQmVIRWlCQ0FCYWlFQklBUkIvd0ZMRFFRZ0FpZ0NEQ0lFSUFJb0FnZ2lBa1lOQmlBQ0lBUTJBZ3dnQkNBQ05nSUlEQWNMSUFKQkJHb2dBMEYrY1RZQ0FDQUFJQUZCQVhJMkFnUWdBQ0FCYWlBQk5nSUFEQWNMUVlnVElBQTJBZ0JCZ0JOQmdCTW9BZ0FnQVdvaUFUWUNBQ0FBSUFGQkFYSTJBZ1FnQUVHRUV5Z0NBRVlOQXdzUEMwR0VFeUFBTmdJQVFmd1NRZndTS0FJQUlBRnFJZ0UyQWdBZ0FDQUJRUUZ5TmdJRUlBQWdBV29nQVRZQ0FBOExJQUlRSUF3Q0MwSDhFa0VBTmdJQVFZUVRRUUEyQWdBUEMwSHNEMEhzRHlnQ0FFRitJQU5CQTNaM2NUWUNBQXNnQUNBQlFRRnlOZ0lFSUFBZ0FXb2dBVFlDQUNBQVFZUVRLQUlBUncwQVFmd1NJQUUyQWdBUEN3Si9Ba0FnQVVIL0FVMEVRQ0FCUVFOMklnSkJBM1JCOUE5cUlRRkI3QThvQWdBaUEwRUJJQUpCSDNGMElnSnhSUTBCSUFFb0FnZ01BZ3NnQUNBQkVDRVBDMEhzRHlBRElBSnlOZ0lBSUFFTElRSWdBVUVJYWlBQU5nSUFJQUlnQURZQ0RDQUFJQUUyQWd3Z0FDQUNOZ0lJQzlJQ0FRVi9Jd0JCRUdzaUF5UUFBbjhnQUNnQ0FDZ0NBQ0lDUVlDQXhBQkhCRUFnQVVFY2FpZ0NBQ0VFSUFFb0FoZ2hCU0FEUVFBMkFnd0NmeUFDUWY4QVRRUkFJQU1nQWpvQURFRUJEQUVMSUFKQi93OU5CRUFnQXlBQ1FUOXhRWUFCY2pvQURTQURJQUpCQm5aQkgzRkJ3QUZ5T2dBTVFRSU1BUXNnQWtILy93Tk5CRUFnQXlBQ1FUOXhRWUFCY2pvQURpQURJQUpCQm5aQlAzRkJnQUZ5T2dBTklBTWdBa0VNZGtFUGNVSGdBWEk2QUF4QkF3d0JDeUFESUFKQkVuWkI4QUZ5T2dBTUlBTWdBa0UvY1VHQUFYSTZBQThnQXlBQ1FReDJRVDl4UVlBQmNqb0FEU0FESUFKQkJuWkJQM0ZCZ0FGeU9nQU9RUVFMSVFaQkFTSUNJQVVnQTBFTWFpQUdJQVFvQWd3UkJRQU5BUm9MSUFBb0FnUXRBQUFFUUNBQktBSVlJQUFvQWdnaUFDZ0NBQ0FBS0FJRUlBRkJIR29vQWdBb0Fnd1JCUUFNQVF0QkFBc2hBaUFEUVJCcUpBQWdBZ3VxQ0FFSmZ5TUFRZEFBYXlJQ0pBQkJKeUVEQWtBZ0FDZ0NBQ0lBUVpET0FFOEVRQU5BSUFKQkNXb2dBMm9pQlVGOGFpQUFJQUJCa000QWJpSUVRZkN4ZjJ4cUlnZEI1QUJ1SWdaQkFYUkJxZ3RxTHdBQU93QUFJQVZCZm1vZ0J5QUdRWngvYkdwQkFYUkJxZ3RxTHdBQU93QUFJQU5CZkdvaEF5QUFRZi9CMXk5TElRVWdCQ0VBSUFVTkFBc01BUXNnQUNFRUN3SkFJQVJCNUFCT0JFQWdBa0VKYWlBRFFYNXFJZ05xSUFRZ0JFSGtBRzRpQUVHY2YyeHFRUUYwUWFvTGFpOEFBRHNBQUF3QkN5QUVJUUFMQWtBZ0FFRUpUQVJBSUFKQkNXb2dBMEYvYWlJRGFpSUlJQUJCTUdvNkFBQU1BUXNnQWtFSmFpQURRWDVxSWdOcUlnZ2dBRUVCZEVHcUMyb3ZBQUE3QUFBTElBSkJBRFlDTkNBQ1FmUU1OZ0l3SUFKQmdJREVBRFlDT0VFbklBTnJJZ1loQXlBQktBSUFJZ0JCQVhFRVFDQUNRU3MyQWpnZ0JrRUJhaUVEQ3lBQ0lBQkJBblpCQVhFNkFEOGdBU2dDQ0NFRUlBSWdBa0UvYWpZQ1JDQUNJQUpCT0dvMkFrQWdBaUFDUVRCcU5nSklBbjhDUUFKQUFuOENRQUpBQWtBQ1FBSkFBa0FDUUNBRVFRRkdCRUFnQVVFTWFpZ0NBQ0lFSUFOTkRRRWdBRUVJY1EwQ0lBUWdBMnNoQlVFQklBRXRBREFpQUNBQVFRTkdHMEVEY1NJQVJRMERJQUJCQWtZTkJBd0ZDeUFDUVVCcklBRVFJdzBJSUFFb0FoZ2dDQ0FHSUFGQkhHb29BZ0FvQWd3UkJRQU1DZ3NnQWtGQWF5QUJFQ01OQnlBQktBSVlJQWdnQmlBQlFSeHFLQUlBS0FJTUVRVUFEQWtMSUFGQkFUb0FNQ0FCUVRBMkFnUWdBa0ZBYXlBQkVDTU5CaUFDUVRBMkFrd2dCQ0FEYXlFRElBRW9BaGdoQkVGL0lRQWdBVUVjYWlnQ0FDSUhRUXhxSVFVRFFDQUFRUUZxSWdBZ0EwOE5CQ0FFSUFKQnpBQnFRUUVnQlNnQ0FCRUZBRVVOQUFzTUJnc2dCU0VKUVFBaEJRd0JDeUFGUVFGcVFRRjJJUWtnQlVFQmRpRUZDeUFDUVFBMkFrd2dBU2dDQkNJQVFmOEFUUVJBSUFJZ0FEb0FURUVCREFNTElBQkIvdzlMRFFFZ0FpQUFRVDl4UVlBQmNqb0FUU0FDSUFCQkJuWkJIM0ZCd0FGeU9nQk1RUUlNQWdzZ0JDQUlJQVlnQjBFTWFpZ0NBQkVGQUEwQ0RBTUxJQUJCLy84RFRRUkFJQUlnQUVFL2NVR0FBWEk2QUU0Z0FpQUFRUVoyUVQ5eFFZQUJjam9BVFNBQ0lBQkJESFpCRDNGQjRBRnlPZ0JNUVFNTUFRc2dBaUFBUVJKMlFmQUJjam9BVENBQ0lBQkJQM0ZCZ0FGeU9nQlBJQUlnQUVFTWRrRS9jVUdBQVhJNkFFMGdBaUFBUVFaMlFUOXhRWUFCY2pvQVRrRUVDeUVFSUFFb0FoZ2hBMEYvSVFBZ0FVRWNhaWdDQUNJS1FReHFJUWNDUUFOQUlBQkJBV29pQUNBRlR3MEJJQU1nQWtITUFHb2dCQ0FIS0FJQUVRVUFSUTBBQ3d3QkN5QUNRVUJySUFFUUl3MEFJQU1nQ0NBR0lBcEJER29vQWdBaUJSRUZBQTBBUVg4aEFBTkFJQUJCQVdvaUFDQUpUdzBDSUFNZ0FrSE1BR29nQkNBRkVRVUFSUTBBQ3d0QkFRd0JDMEVBQ3lFQUlBSkIwQUJxSkFBZ0FBdEdBZ0YvQVg0akFFRWdheUlDSkFBZ0FTa0NBQ0VESUFKQkZHb2dBU2tDQ0RjQ0FDQUNRYndVTmdJRUlBSkI5QXcyQWdBZ0FpQUFOZ0lJSUFJZ0F6Y0NEQ0FDRUI4QUN3TUFBUXNOQUVLSXNwU1RtSUdWalA4QUN6TUJBWDhnQWdSQUlBQWhBd05BSUFNZ0FTMEFBRG9BQUNBQlFRRnFJUUVnQTBFQmFpRURJQUpCZjJvaUFnMEFDd3NnQUF0bkFRRi9Ba0FnQVNBQVNRUkFJQUpGRFFFRFFDQUFJQUpxUVg5cUlBRWdBbXBCZjJvdEFBQTZBQUFnQWtGL2FpSUNEUUFMREFFTElBSkZEUUFnQUNFREEwQWdBeUFCTFFBQU9nQUFJQUZCQVdvaEFTQURRUUZxSVFNZ0FrRi9haUlDRFFBTEN5QUFDeWtCQVg4Z0FnUkFJQUFoQXdOQUlBTWdBVG9BQUNBRFFRRnFJUU1nQWtGL2FpSUNEUUFMQ3lBQUN3dVdDUUlBUVlBSUM0b0hhVzUyWVd4cFpDQnRZV3hzYjJNZ2NtVnhkV1Z6ZEZSeWFXVmtJSFJ2SUhOb2NtbHVheUIwYnlCaElHeGhjbWRsY2lCallYQmhZMmwwZVFBQUFTTkZaNG1yemUvKzNMcVlkbFF5RVBEaDBzTmhjM05sY25ScGIyNGdabUZwYkdWa09pQTRJRDA5SUdSemRDNXNaVzRvS1M5eWIyOTBMeTVqWVhKbmJ5OXlaV2RwYzNSeWVTOXpjbU12WjJsMGFIVmlMbU52YlMweFpXTmpOakk1T1dSaU9XVmpPREl6TDJKNWRHVXRkRzl2YkhNdE1DNHlMakF2YzNKakwzZHlhWFJsWDNOcGJtZHNaUzV5Y3dBQUFBQUFBQzl5YjI5MEx5NWpZWEpuYnk5eVpXZHBjM1J5ZVM5emNtTXZaMmwwYUhWaUxtTnZiUzB4WldOak5qSTVPV1JpT1dWak9ESXpMMkpzYjJOckxXSjFabVpsY2kwd0xqTXVNeTl6Y21NdmJHbGlMbkp6WkdWemRHbHVZWFJwYjI0Z1lXNWtJSE52ZFhKalpTQnpiR2xqWlhNZ2FHRjJaU0JrYVdabVpYSmxiblFnYkdWdVozUm9jd0FBQUFBQUFHTmhjR0ZqYVhSNUlHOTJaWEptYkc5M1kyRnNiR1ZrSUdCUGNIUnBiMjQ2T25WdWQzSmhjQ2dwWUNCdmJpQmhJR0JPYjI1bFlDQjJZV3gxWld4cFltTnZjbVV2YjNCMGFXOXVMbkp6TURBd01UQXlNRE13TkRBMU1EWXdOekE0TURreE1ERXhNVEl4TXpFME1UVXhOakUzTVRneE9USXdNakV5TWpJek1qUXlOVEkyTWpjeU9ESTVNekF6TVRNeU16TXpORE0xTXpZek56TTRNemswTURReE5ESTBNelEwTkRVME5qUTNORGcwT1RVd05URTFNalV6TlRRMU5UVTJOVGMxT0RVNU5qQTJNVFl5TmpNMk5EWTFOalkyTnpZNE5qazNNRGN4TnpJM016YzBOelUzTmpjM056ZzNPVGd3T0RFNE1qZ3pPRFE0TlRnMk9EYzRPRGc1T1RBNU1Ua3lPVE01TkRrMU9UWTVOems0T1RrQUFBQnBibVJsZUNCdmRYUWdiMllnWW05MWJtUnpPaUIwYUdVZ2JHVnVJR2x6SUNCaWRYUWdkR2hsSUdsdVpHVjRJR2x6SUd4cFltTnZjbVV2YzJ4cFkyVXZiVzlrTG5KekFBRUFBQUFBQUFBQUlBQUFBQUFBQUFBREFBQUFBQUFBQUFNQUFBQUFBQUFBQXdBQUFBRUFBQUFCQUFBQUlBQUFBQUFBQUFBREFBQUFBQUFBQUFNQUFBQUFBQUFBQXdBQUFHbHVaR1Y0SUNCdmRYUWdiMllnY21GdVoyVWdabTl5SUhOc2FXTmxJRzltSUd4bGJtZDBhQ0J6YkdsalpTQnBibVJsZUNCemRHRnlkSE1nWVhRZ0lHSjFkQ0JsYm1SeklHRjBJR2x1ZEdWeWJtRnNJR1Z5Y205eU9pQmxiblJsY21Wa0lIVnVjbVZoWTJoaFlteGxJR052WkdWc2FXSmhiR3h2WXk5eVlYZGZkbVZqTG5KekFFRzBFd3Y5QVJZRUFBQWtBQUFBZHdjQUFCTUFBQUJJQWdBQUNRQUFBTkFFQUFCVEFBQUFTd0FBQUJFQUFBQlFCQUFBSUFBQUFIQUVBQUJhQUFBQUh3QUFBQVVBQUFBakJRQUFOQUFBQUtjR0FBQVVBQUFBYlFZQUFBa0FBQUJkQlFBQUVRQUFBSGNIQUFBVEFBQUE4Z0lBQUFVQUFBQnVCUUFBS3dBQUFKa0ZBQUFSQUFBQVdRRUFBQlVBQUFBQ0FBQUFBQUFBQUFFQUFBQURBQUFBZFFZQUFDQUFBQUNWQmdBQUVnQUFBQVFIQUFBR0FBQUFDZ2NBQUNJQUFBQ25CZ0FBRkFBQUFLMEhBQUFGQUFBQUxBY0FBQllBQUFCQ0J3QUFEUUFBQUtjR0FBQVVBQUFBc3djQUFBVUFBQUJQQndBQUtBQUFBSGNIQUFBVEFBQUE5UUVBQUI0QURBZHNhVzVyYVc1bkF3SzBEUT09Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJpcGVtZDE2MC5iYXNlNjQuanMubWFwIiwiLy8gY1NwZWxsOmlnbm9yZSBub25jZWZwLCBuZGF0YSwgb3V0cHV0bGVuXG4vKipcbiAqIGJpdGZsYWdzIHVzZWQgaW4gc2VjcDI1NmsxJ3MgcHVibGljIEFQSSAodHJhbnNsYXRlZCBmcm9tIHNlY3AyNTZrMS5oKVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWFnaWMtbnVtYmVycyAqL1xuLyoqIEFsbCBmbGFncycgbG93ZXIgOCBiaXRzIGluZGljYXRlIHdoYXQgdGhleSdyZSBmb3IuIERvIG5vdCB1c2UgZGlyZWN0bHkuICovXG4vLyBjb25zdCBTRUNQMjU2SzFfRkxBR1NfVFlQRV9NQVNLID0gKDEgPDwgOCkgLSAxO1xuY29uc3QgU0VDUDI1NksxX0ZMQUdTX1RZUEVfQ09OVEVYVCA9IDEgPDwgMDtcbmNvbnN0IFNFQ1AyNTZLMV9GTEFHU19UWVBFX0NPTVBSRVNTSU9OID0gMSA8PCAxO1xuLyoqIFRoZSBoaWdoZXIgYml0cyBjb250YWluIHRoZSBhY3R1YWwgZGF0YS4gRG8gbm90IHVzZSBkaXJlY3RseS4gKi9cbmNvbnN0IFNFQ1AyNTZLMV9GTEFHU19CSVRfQ09OVEVYVF9WRVJJRlkgPSAxIDw8IDg7XG5jb25zdCBTRUNQMjU2SzFfRkxBR1NfQklUX0NPTlRFWFRfU0lHTiA9IDEgPDwgOTtcbmNvbnN0IFNFQ1AyNTZLMV9GTEFHU19CSVRfQ09NUFJFU1NJT04gPSAxIDw8IDg7XG4vKiogRmxhZ3MgdG8gcGFzcyB0byBzZWNwMjU2azFfY29udGV4dF9jcmVhdGUuICovXG5jb25zdCBTRUNQMjU2SzFfQ09OVEVYVF9WRVJJRlkgPSBTRUNQMjU2SzFfRkxBR1NfVFlQRV9DT05URVhUIHwgU0VDUDI1NksxX0ZMQUdTX0JJVF9DT05URVhUX1ZFUklGWTtcbmNvbnN0IFNFQ1AyNTZLMV9DT05URVhUX1NJR04gPSBTRUNQMjU2SzFfRkxBR1NfVFlQRV9DT05URVhUIHwgU0VDUDI1NksxX0ZMQUdTX0JJVF9DT05URVhUX1NJR047XG5jb25zdCBTRUNQMjU2SzFfQ09OVEVYVF9OT05FID0gU0VDUDI1NksxX0ZMQUdTX1RZUEVfQ09OVEVYVDtcbi8qKiBGbGFnIHRvIHBhc3MgdG8gc2VjcDI1NmsxX2VjX3B1YmtleV9zZXJpYWxpemUgYW5kIHNlY3AyNTZrMV9lY19wcml2a2V5X2V4cG9ydC4gKi9cbmNvbnN0IFNFQ1AyNTZLMV9FQ19DT01QUkVTU0VEID0gU0VDUDI1NksxX0ZMQUdTX1RZUEVfQ09NUFJFU1NJT04gfCBTRUNQMjU2SzFfRkxBR1NfQklUX0NPTVBSRVNTSU9OO1xuY29uc3QgU0VDUDI1NksxX0VDX1VOQ09NUFJFU1NFRCA9IFNFQ1AyNTZLMV9GTEFHU19UWVBFX0NPTVBSRVNTSU9OO1xuLyoqXG4gKiBGbGFnIHRvIHBhc3MgdG8gYSBTZWNwMjU2azEuY29udGV4dENyZWF0ZSBtZXRob2QuXG4gKlxuICogVGhlIHB1cnBvc2Ugb2YgY29udGV4dCBzdHJ1Y3R1cmVzIGlzIHRvIGNhY2hlIGxhcmdlIHByZWNvbXB1dGVkIGRhdGEgdGFibGVzXG4gKiB0aGF0IGFyZSBleHBlbnNpdmUgdG8gY29uc3RydWN0LCBhbmQgYWxzbyB0byBtYWludGFpbiB0aGUgcmFuZG9taXphdGlvbiBkYXRhXG4gKiBmb3IgYmxpbmRpbmcuXG4gKlxuICogWW91IGNhbiBjcmVhdGUgYSBjb250ZXh0IHdpdGggb25seSBWRVJJRlkgb3Igb25seSBTSUdOIGNhcGFiaWxpdGllcywgb3IgeW91XG4gKiBjYW4gdXNlIEJPVEguIChOT05FIGNhbiBiZSB1c2VkIGZvciBjb252ZXJzaW9uL3NlcmlhbGl6YXRpb24uKVxuICovXG5leHBvcnQgdmFyIENvbnRleHRGbGFnO1xuKGZ1bmN0aW9uIChDb250ZXh0RmxhZykge1xuICAgIENvbnRleHRGbGFnW0NvbnRleHRGbGFnW1wiTk9ORVwiXSA9IFNFQ1AyNTZLMV9DT05URVhUX05PTkVdID0gXCJOT05FXCI7XG4gICAgQ29udGV4dEZsYWdbQ29udGV4dEZsYWdbXCJWRVJJRllcIl0gPSBTRUNQMjU2SzFfQ09OVEVYVF9WRVJJRlldID0gXCJWRVJJRllcIjtcbiAgICBDb250ZXh0RmxhZ1tDb250ZXh0RmxhZ1tcIlNJR05cIl0gPSBTRUNQMjU2SzFfQ09OVEVYVF9TSUdOXSA9IFwiU0lHTlwiO1xuICAgIENvbnRleHRGbGFnW0NvbnRleHRGbGFnW1wiQk9USFwiXSA9IFNFQ1AyNTZLMV9DT05URVhUX1NJR04gfCBTRUNQMjU2SzFfQ09OVEVYVF9WRVJJRlldID0gXCJCT1RIXCI7XG59KShDb250ZXh0RmxhZyB8fCAoQ29udGV4dEZsYWcgPSB7fSkpO1xuLyoqXG4gKiBGbGFnIHRvIHBhc3MgYSBTZWNwMjU2azEgcHVibGljIGtleSBzZXJpYWxpemF0aW9uIG1ldGhvZC5cbiAqXG4gKiBZb3UgY2FuIGluZGljYXRlIENPTVBSRVNTRUQgKDMzIGJ5dGVzLCBoZWFkZXIgYnl0ZSAweDAyIG9yIDB4MDMpIG9yXG4gKiBVTkNPTVBSRVNTRUQgKDY1IGJ5dGVzLCBoZWFkZXIgYnl0ZSAweDA0KSBmb3JtYXQuXG4gKi9cbmV4cG9ydCB2YXIgQ29tcHJlc3Npb25GbGFnO1xuKGZ1bmN0aW9uIChDb21wcmVzc2lvbkZsYWcpIHtcbiAgICBDb21wcmVzc2lvbkZsYWdbQ29tcHJlc3Npb25GbGFnW1wiQ09NUFJFU1NFRFwiXSA9IFNFQ1AyNTZLMV9FQ19DT01QUkVTU0VEXSA9IFwiQ09NUFJFU1NFRFwiO1xuICAgIENvbXByZXNzaW9uRmxhZ1tDb21wcmVzc2lvbkZsYWdbXCJVTkNPTVBSRVNTRURcIl0gPSBTRUNQMjU2SzFfRUNfVU5DT01QUkVTU0VEXSA9IFwiVU5DT01QUkVTU0VEXCI7XG59KShDb21wcmVzc2lvbkZsYWcgfHwgKENvbXByZXNzaW9uRmxhZyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWNwMjU2azEtd2FzbS10eXBlcy5qcy5tYXAiLCIvKipcbiAqIEBoaWRkZW5cbiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3Qgc2VjcDI1NmsxQmFzZTY0Qnl0ZXMgPSAnQUdGemJRRUFBQUFCZkJKZ0FuOS9BR0FHZjM5L2YzOS9BWDlnQkg5L2YzOEJmMkFEZjM5L0FYOWdBWDhCZjJBQmZ3QmdBQUYvWUFKL2Z3Ri9ZQUFBWUFWL2YzOS9md0YvWUFOL2YzOEFZQWgvZjM5L2YzOS9md0YvWUFSL2YzOS9BR0FGZjM5L2YzOEFZQUo4ZndGOFlBTitmMzhCZjJBQ2ZuOEJmMkFHZjN4L2YzOS9BWDhDb1FJUEEyVnVkZ1p0WlcxdmNua0NBWUFDZ0FJRFpXNTJCWFJoWW14bEFYQUJFQkFEWlc1MkNYUmhZbXhsUW1GelpRTi9BQU5sYm5ZT1JGbE9RVTFKUTFSUFVGOVFWRklEZndBRFpXNTJDRk5VUVVOTFZFOVFBMzhBQTJWdWRnVmhZbTl5ZEFBRkEyVnVkZzFsYm14aGNtZGxUV1Z0YjNKNUFBWURaVzUyRG1kbGRGUnZkR0ZzVFdWdGIzSjVBQVlEWlc1MkYyRmliM0owVDI1RFlXNXViM1JIY205M1RXVnRiM0o1QUFZRFpXNTJDMTlmWDNObGRFVnljazV2QUFVRFpXNTJEVjlmWDNONWMyTmhiR3d4TkRBQUJ3TmxibllOWDE5ZmMzbHpZMkZzYkRFME5nQUhBMlZ1ZGd0ZlgxOXplWE5qWVd4c05nQUhBMlZ1ZGdaZllXSnZjblFBQ0FObGJuWVdYMlZ0YzJOeWFYQjBaVzVmYldWdFkzQjVYMkpwWndBREEzRndBQVFLQUFNRkNnb05BQW9LREFVRUF3b0hBQWNBQUFRREFBb1FDZ0FOQXdvSkFBTUFCQWNPQlFRTUNnY0FDZ01BQ2d3S0FBd0FDd0FCQXdvREF3TUhBQU1IQXdZREJBUUhCd29DQVFFQ0FnRUNBZ0VDQndNREF3TURBd01IQVFFQ0F3TUNBd0lDQ1FRQ0JBTVJFQThBQkFZTEFuOEJJd0VMZndFakFnc0g4d1ljRVY5ZlgyVnljbTV2WDJ4dlkyRjBhVzl1QUUwRlgyWnlaV1VBTVFkZmJXRnNiRzlqQURJWlgzTmxZM0F5TlRack1WOWpiMjUwWlhoMFgyTnlaV0YwWlFCUUhGOXpaV053TWpVMmF6RmZZMjl1ZEdWNGRGOXlZVzVrYjIxcGVtVUFYaDlmYzJWamNESTFObXN4WDJWalgzQnlhWFpyWlhsZmRIZGxZV3RmWVdSa0FHTWZYM05sWTNBeU5UWnJNVjlsWTE5d2NtbDJhMlY1WDNSM1pXRnJYMjExYkFCZ0cxOXpaV053TWpVMmF6RmZaV05mY0hWaWEyVjVYMk55WldGMFpRQmxHbDl6WldOd01qVTJhekZmWldOZmNIVmlhMlY1WDNCaGNuTmxBSEllWDNObFkzQXlOVFpyTVY5bFkxOXdkV0pyWlhsZmMyVnlhV0ZzYVhwbEFIQWVYM05sWTNBeU5UWnJNVjlsWTE5d2RXSnJaWGxmZEhkbFlXdGZZV1JrQUdJZVgzTmxZM0F5TlRack1WOWxZMTl3ZFdKclpYbGZkSGRsWVd0ZmJYVnNBRjhiWDNObFkzQXlOVFpyTVY5bFkxOXpaV05yWlhsZmRtVnlhV1o1QUdZUFgzTmxZM0F5TlRack1WOWxZMlJvQUZ3WVgzTmxZM0F5TlRack1WOWxZMlJ6WVY5eVpXTnZkbVZ5QUZnMFgzTmxZM0F5TlRack1WOWxZMlJ6WVY5eVpXTnZkbVZ5WVdKc1pWOXphV2R1WVhSMWNtVmZjR0Z5YzJWZlkyOXRjR0ZqZEFCYk9GOXpaV053TWpVMmF6RmZaV05rYzJGZmNtVmpiM1psY21GaWJHVmZjMmxuYm1GMGRYSmxYM05sY21saGJHbDZaVjlqYjIxd1lXTjBBRm9WWDNObFkzQXlOVFpyTVY5bFkyUnpZVjl6YVdkdUFHY2hYM05sWTNBeU5UWnJNVjlsWTJSellWOXphV2R1WDNKbFkyOTJaWEpoWW14bEFGa2tYM05sWTNBeU5UWnJNVjlsWTJSellWOXphV2R1WVhSMWNtVmZibTl5YldGc2FYcGxBR29vWDNObFkzQXlOVFpyTVY5bFkyUnpZVjl6YVdkdVlYUjFjbVZmY0dGeWMyVmZZMjl0Y0dGamRBQnRKRjl6WldOd01qVTJhekZmWldOa2MyRmZjMmxuYm1GMGRYSmxYM0JoY25ObFgyUmxjZ0J1TEY5elpXTndNalUyYXpGZlpXTmtjMkZmYzJsbmJtRjBkWEpsWDNObGNtbGhiR2w2WlY5amIyMXdZV04wQUdzb1gzTmxZM0F5TlRack1WOWxZMlJ6WVY5emFXZHVZWFIxY21WZmMyVnlhV0ZzYVhwbFgyUmxjZ0JzRjE5elpXTndNalUyYXpGZlpXTmtjMkZmZG1WeWFXWjVBR2thWDNObFkzQXlOVFpyTVY5elkyaHViM0p5YzJsblgzTnBaMjRBVlJ4ZmMyVmpjREkxTm1zeFgzTmphRzV2Y25KemFXZGZkbVZ5YVdaNUFGUUtjM1JoWTJ0QmJHeHZZd0I1Q1JZQkFDTUFDeEJ4VDBOTVRrTnZYVUpvVmtKQlNYaEJDdjdKQ1hETkJ3SUlmeFYrSUFFb0FnUWlBa0VCZEswaUV5QUJLQUlnSWdPdElndCtJQUVvQWdBaUJFRUJkSzBpRHlBQktBSWtyU0lLZm53Z0FTZ0NDQ0lGUVFGMHJTSVdJQUVvQWh3aUJxMGlFWDU4SUFFb0Fnd2lCMEVCZEswaUdDQUJLQUlZSWdpdEloUitmQ0FCS0FJUUlnbEJBWFN0SWhBZ0FTZ0NGQ0lCclNJWGZud2hHaUFXSUF0K0lCTWdDbjU4SUJnZ0VYNThJQkFnRkg1OElCY2dGMzU4SUJwQ0dvaDhJZ3hDLy8vL0g0TWlEVUtRK2dCK0lBU3RJZzRnRG41OElSc2dEVUlLaGlBQ3JTSU5JQTkrZkNBYlFocUlmQ0FZSUF0K0lCWWdDbjU4SUJBZ0VYNThJQUZCQVhTdElnNGdGSDU4SUF4Q0dvaDhJaGxDLy8vL0g0TWlFa0tRK2dCK2ZDRWNJQVd0SWd3Z0QzNGdEU0FOZm53Z0VrSUtobndnRkNBVWZpQVlJQXArZkNBUUlBdCtmQ0FPSUJGK2ZDQVpRaHFJZkNJVlF2Ly8veCtESWhKQ2tQb0FmbndnSEVJYWlId2hHU0FBSUFldElnMGdEMzRnRENBVGZud2dFa0lLaG53Z0VDQUtmaUFJUVFGMHJTSVNJQkYrZkNBT0lBdCtmQ0FWUWhxSWZDSVZRdi8vL3grREloMUNrUG9BZm53Z0dVSWFpSHdpSHFkQi8vLy9IM0UyQWd3Z0FDQU5JQk4rSUF3Z0RINThJQW10SWhBZ0QzNThJQjFDQ29aOElCSWdDMzRnRVNBUmZud2dEaUFLZm53Z0ZVSWFpSHdpRGtMLy8vOGZneUlNUXBENkFINThJQjVDR29oOEloV25RZi8vL3g5eE5nSVFJQUFnRUNBVGZpQU5JQlorZkNBWElBOStmQ0FNUWdxR2ZDQVNJQXArSUFaQkFYU3RJZ3dnQzM1OElBNUNHb2g4SWc1Qy8vLy9INE1pRWtLUStnQitmQ0FWUWhxSWZDSVZwMEgvLy84ZmNUWUNGQ0FBSUJRZ0QzNGdEU0FOZm53Z0VDQVdmbndnRnlBVGZud2dFa0lLaG53Z0RDQUtmaUFMSUF0K2ZDQU9RaHFJZkNJTlF2Ly8veCtESWc1Q2tQb0FmbndnRlVJYWlId2lES2RCLy8vL0gzRTJBaGdnQUNBVUlCTitJQkVnRDM1OElCQWdHSDU4SUJjZ0ZuNThJQTVDQ29aOElBMUNHb2dnQTBFQmRLMGdDbjU4SWcxQy8vLy9INE1pRGtLUStnQitmQ0FNUWhxSWZDSU1wMEgvLy84ZmNUWUNIQ0FBSUJFZ0UzNGdDeUFQZm53Z0ZDQVdmbndnRUNBUWZud2dGeUFZZm53Z0RrSUtobndnRFVJYWlDQUtJQXArZkNJS1F2Ly8veCtESWd0Q2tQb0FmbndnREVJYWlId2lENmRCLy8vL0gzRTJBaUFnQUNBS1FocUlJZ3BDa1BvQWZpQWFRdi8vL3grRGZDQUxRZ3FHZkNBUFFocUlmQ0lMcDBILy8vOEJjVFlDSkNBQUlBdENGb2dnQ2tJT2hud2lDa0xSQjM0Z0cwTC8vLzhmZzN3aUM2ZEIvLy8vSDNFMkFnQWdBQ0FLUWdhR0lCeEMvLy8vSDROOElBdENHb2g4SWdxblFmLy8veDl4TmdJRUlBQWdDa0lhaUNBWlF2Ly8veCtEZkQ0Q0NBc3JBQ0FBUWY4QmNVRVlkQ0FBUVFoMVFmOEJjVUVRZEhJZ0FFRVFkVUgvQVhGQkNIUnlJQUJCR0haeUM4OEpBUnQrSUFJb0FpQ3RJZ01nQVNnQ0JLMGlCSDRnQWlnQ0pLMGlCaUFCS0FJQXJTSUlmbndnQWlnQ0hLMGlDU0FCS0FJSXJTSUtmbndnQWlnQ0dLMGlDeUFCS0FJTXJTSU1mbndnQWlnQ0ZLMGlEU0FCS0FJUXJTSU9mbndnQWlnQ0VLMGlEeUFCS0FJVXJTSVFmbndnQWlnQ0RLMGlFU0FCS0FJWXJTSVNmbndnQWlnQ0NLMGlFeUFCS0FJY3JTSVVmbndnQWlnQ0JLMGlGU0FCS0FJZ3JTSVdmbndnQWlnQ0FLMGlGeUFCS0FJa3JTSVlmbndoSENBS0lBTitJQVFnQm41OElBd2dDWDU4SUE0Z0MzNThJQkFnRFg1OElCSWdEMzU4SUJRZ0VYNThJQllnRTM1OElCZ2dGWDU4SUJ4Q0dvaDhJaHRDLy8vL0g0TWlHa0tRK2dCK0lCY2dDSDU4SVIwZ0Z5QUVmaUFWSUFoK2ZDQWFRZ3FHZkNBZFFocUlmQ0FNSUFOK0lBb2dCbjU4SUE0Z0NYNThJQkFnQzM1OElCSWdEWDU4SUJRZ0QzNThJQllnRVg1OElCZ2dFMzU4SUJ0Q0dvaDhJaHBDLy8vL0g0TWlCVUtRK2dCK2ZDRWJJQlVnQkg0Z0V5QUlmbndnRnlBS2Zud2dCVUlLaG53Z0RpQURmaUFNSUFaK2ZDQVFJQWwrZkNBU0lBdCtmQ0FVSUExK2ZDQVdJQTkrZkNBWUlCRitmQ0FhUWhxSWZDSUZRdi8vL3grRElnZENrUG9BZm53Z0cwSWFpSHdoR2lBQUlCTWdCSDRnRVNBSWZud2dGU0FLZm53Z0Z5QU1mbndnQjBJS2hud2dFQ0FEZmlBT0lBWitmQ0FTSUFsK2ZDQVVJQXQrZkNBV0lBMStmQ0FZSUE5K2ZDQUZRaHFJZkNJRlF2Ly8veCtESWdkQ2tQb0FmbndnR2tJYWlId2lHYWRCLy8vL0gzRTJBZ3dnQUNBUklBUitJQThnQ0g1OElCTWdDbjU4SUJVZ0RINThJQmNnRG41OElBZENDb1o4SUJJZ0EzNGdFQ0FHZm53Z0ZDQUpmbndnRmlBTGZud2dHQ0FOZm53Z0JVSWFpSHdpQlVMLy8vOGZneUlIUXBENkFINThJQmxDR29oOElobW5RZi8vL3g5eE5nSVFJQUFnRHlBRWZpQU5JQWgrZkNBUklBcCtmQ0FUSUF4K2ZDQVZJQTUrZkNBWElCQitmQ0FIUWdxR2ZDQVVJQU4rSUJJZ0JuNThJQllnQ1g1OElCZ2dDMzU4SUFWQ0dvaDhJZ1ZDLy8vL0g0TWlCMEtRK2dCK2ZDQVpRaHFJZkNJWnAwSC8vLzhmY1RZQ0ZDQUFJQTBnQkg0Z0N5QUlmbndnRHlBS2Zud2dFU0FNZm53Z0V5QU9mbndnRlNBUWZud2dGeUFTZm53Z0IwSUtobndnRmlBRGZpQVVJQVorZkNBWUlBbCtmQ0FGUWhxSWZDSUZRdi8vL3grRElnZENrUG9BZm53Z0dVSWFpSHdpR2FkQi8vLy9IM0UyQWhnZ0FDQUxJQVIrSUFrZ0NINThJQTBnQ241OElBOGdESDU4SUJFZ0RuNThJQk1nRUg1OElCVWdFbjU4SUJjZ0ZINThJQWRDQ29aOElCZ2dBMzRnRmlBR2Zud2dCVUlhaUh3aUJVTC8vLzhmZ3lJSFFwRDZBSDU4SUJsQ0dvaDhJaG1uUWYvLy94OXhOZ0ljSUFBZ0NTQUVmaUFESUFoK2ZDQUxJQXArZkNBTklBeCtmQ0FQSUE1K2ZDQVJJQkIrZkNBVElCSitmQ0FWSUJSK2ZDQVhJQlorZkNBSFFncUdmQ0FGUWhxSUlCZ2dCbjU4SWdOQy8vLy9INE1pQkVLUStnQitmQ0FaUWhxSWZDSUdwMEgvLy84ZmNUWUNJQ0FBSUFOQ0dvZ2lBMEtRK2dCK0lCeEMvLy8vSDROOElBUkNDb1o4SUFaQ0dvaDhJZ1NuUWYvLy93RnhOZ0lrSUFBZ0JFSVdpQ0FEUWc2R2ZDSURRdEVIZmlBZFF2Ly8veCtEZkNJRXAwSC8vLzhmY1RZQ0FDQUFJQU5DQm9ZZ0cwTC8vLzhmZzN3Z0JFSWFpSHdpQTZkQi8vLy9IM0UyQWdRZ0FDQURRaHFJSUJwQy8vLy9INE44UGdJSUM3OVdBU1IvSUFBb0FnQWhIU0FBUVFScUloNG9BZ0FoQ1NBQVFRaHFJaDhvQWdBaEJTQUFRUXhxSWlBb0FnQWhEeUFBUVJ4cUlpRW9BZ0JCbU4rb2xBUnFJQUJCRUdvaUlpZ0NBQ0lDUVFaMklBSkJHblJ5SUFKQkMzWWdBa0VWZEhKeklBSkJHWFlnQWtFSGRISnphaUFBUVJocUlpTW9BZ0FpQmlBQVFSUnFJaVFvQWdBaUNuTWdBbkVnQm5OcUlBRW9BZ0FRQ3lJWGFpSUhJQTlxSVE4Z0JrR1JpZDJKQjJvZ0FTZ0NCQkFMSWhWcUlBOGdDaUFDYzNFZ0NuTnFJQTlCQm5ZZ0QwRWFkSElnRDBFTGRpQVBRUlYwY25NZ0QwRVpkaUFQUVFkMGNuTnFJaElnQldvaEJpQUtRYy8zZzY1N2FpQUJLQUlJRUFzaUdHb2dCaUFQSUFKemNTQUNjMm9nQmtFR2RpQUdRUnAwY2lBR1FRdDJJQVpCRlhSeWN5QUdRUmwySUFaQkIzUnljMm9pRkNBSmFpRUtJQUpCcGJmWHpYNXFJQUVvQWd3UUN5SVdhaUFLSUFZZ0QzTnhJQTl6YWlBS1FRWjJJQXBCR25SeUlBcEJDM1lnQ2tFVmRISnpJQXBCR1hZZ0NrRUhkSEp6YWlJQ0lCMXFJUU1nSFVFQ2RpQWRRUjUwY2lBZFFRMTJJQjFCRTNSeWN5QWRRUloySUIxQkNuUnljeUFGSUFrZ0hYSnhJQWtnSFhGeWFpQUhhaUlGUVFKMklBVkJIblJ5SUFWQkRYWWdCVUVUZEhKeklBVkJGbllnQlVFS2RISnpJQVVnSFhJZ0NYRWdCU0FkY1hKcUlCSnFJZ2xCQW5ZZ0NVRWVkSElnQ1VFTmRpQUpRUk4wY25NZ0NVRVdkaUFKUVFwMGNuTWdDU0FGY2lBZGNTQUpJQVZ4Y21vZ0ZHb2lCMEVDZGlBSFFSNTBjaUFIUVExMklBZEJFM1J5Y3lBSFFSWjJJQWRCQ25SeWN5QUhJQWx5SUFWeElBY2dDWEZ5YWlBQ2FpRUNJQTlCMjRUYnlnTnFJQUVvQWhBUUN5SVphaUFESUFvZ0JuTnhJQVp6YWlBRFFRWjJJQU5CR25SeUlBTkJDM1lnQTBFVmRISnpJQU5CR1hZZ0EwRUhkSEp6YWlJU0lBVnFJUThnQVNnQ0ZCQUxJaEJCOGFQRXp3VnFJQVpxSUE4Z0F5QUtjM0VnQ25OcUlBOUJCbllnRDBFYWRISWdEMEVMZGlBUFFSVjBjbk1nRDBFWmRpQVBRUWQwY25OcUloUWdDV29oQmlBQktBSVlFQXNpQ0VHa2hmNlJlV29nQ21vZ0JpQVBJQU56Y1NBRGMyb2dCa0VHZGlBR1FScDBjaUFHUVF0MklBWkJGWFJ5Y3lBR1FSbDJJQVpCQjNSeWMyb2lFeUFIYWlFS0lBRW9BaHdRQ3lJTFFkVzk4ZGg2YWlBRGFpQUtJQVlnRDNOeElBOXphaUFLUVFaMklBcEJHblJ5SUFwQkMzWWdDa0VWZEhKeklBcEJHWFlnQ2tFSGRISnphaUlFSUFKcUlRTWdBa0VDZGlBQ1FSNTBjaUFDUVExMklBSkJFM1J5Y3lBQ1FSWjJJQUpCQ25SeWN5QUNJQWR5SUFseElBSWdCM0Z5YWlBU2FpSUZRUUoySUFWQkhuUnlJQVZCRFhZZ0JVRVRkSEp6SUFWQkZuWWdCVUVLZEhKeklBVWdBbklnQjNFZ0JTQUNjWEpxSUJScUlnbEJBbllnQ1VFZWRISWdDVUVOZGlBSlFSTjBjbk1nQ1VFV2RpQUpRUXAwY25NZ0NTQUZjaUFDY1NBSklBVnhjbW9nRTJvaUIwRUNkaUFIUVI1MGNpQUhRUTEySUFkQkUzUnljeUFIUVJaMklBZEJDblJ5Y3lBSElBbHlJQVZ4SUFjZ0NYRnlhaUFFYWlFQ0lBRW9BaUFRQ3lJT1FaalZuc0I5YWlBUGFpQURJQW9nQm5OeElBWnphaUFEUVFaMklBTkJHblJ5SUFOQkMzWWdBMEVWZEhKeklBTkJHWFlnQTBFSGRISnphaUlTSUFWcUlROGdBU2dDSkJBTElneEJnYmFObEFGcUlBWnFJQThnQXlBS2MzRWdDbk5xSUE5QkJuWWdEMEVhZEhJZ0QwRUxkaUFQUVJWMGNuTWdEMEVaZGlBUFFRZDBjbk5xSWhRZ0NXb2hCaUFCS0FJb0VBc2lEVUcraThhaEFtb2dDbW9nQmlBUElBTnpjU0FEYzJvZ0JrRUdkaUFHUVJwMGNpQUdRUXQySUFaQkZYUnljeUFHUVJsMklBWkJCM1J5YzJvaUV5QUhhaUVLSUFFb0Fpd1FDeUlSUWNQN3NhZ0ZhaUFEYWlBS0lBWWdEM054SUE5emFpQUtRUVoySUFwQkduUnlJQXBCQzNZZ0NrRVZkSEp6SUFwQkdYWWdDa0VIZEhKemFpSUVJQUpxSVFNZ0FrRUNkaUFDUVI1MGNpQUNRUTEySUFKQkUzUnljeUFDUVJaMklBSkJDblJ5Y3lBQ0lBZHlJQWx4SUFJZ0IzRnlhaUFTYWlJRlFRSjJJQVZCSG5SeUlBVkJEWFlnQlVFVGRISnpJQVZCRm5ZZ0JVRUtkSEp6SUFVZ0FuSWdCM0VnQlNBQ2NYSnFJQlJxSWdsQkFuWWdDVUVlZEhJZ0NVRU5kaUFKUVJOMGNuTWdDVUVXZGlBSlFRcDBjbk1nQ1NBRmNpQUNjU0FKSUFWeGNtb2dFMm9pQjBFQ2RpQUhRUjUwY2lBSFFRMTJJQWRCRTNSeWN5QUhRUloySUFkQkNuUnljeUFISUFseUlBVnhJQWNnQ1hGeWFpQUVhaUVDSUFFb0FqQVFDeUlhUWZTNitaVUhhaUFQYWlBRElBb2dCbk54SUFaemFpQURRUVoySUFOQkduUnlJQU5CQzNZZ0EwRVZkSEp6SUFOQkdYWWdBMEVIZEhKemFpSUVJQVZxSVFVZ0FTZ0NOQkFMSWh0Qi91UDZobmhxSUFacUlBVWdBeUFLYzNFZ0NuTnFJQVZCQm5ZZ0JVRWFkSElnQlVFTGRpQUZRUlYwY25NZ0JVRVpkaUFGUVFkMGNuTnFJZ1lnQ1dvaEVpQUJLQUk0RUFzaUQwR25qZkRlZVdvZ0Ntb2dFaUFGSUFOemNTQURjMm9nRWtFR2RpQVNRUnAwY2lBU1FRdDJJQkpCRlhSeWN5QVNRUmwySUJKQkIzUnljMm9pQ2lBSGFpRVVJQUVvQWp3UUN5SUJRZlRpNzR4OGFpQURhaUFVSUJJZ0JYTnhJQVZ6YWlBVVFRWjJJQlJCR25SeUlCUkJDM1lnRkVFVmRISnpJQlJCR1hZZ0ZFRUhkSEp6YWlJY0lBSnFJUk1nQWtFQ2RpQUNRUjUwY2lBQ1FRMTJJQUpCRTNSeWN5QUNRUloySUFKQkNuUnljeUFDSUFkeUlBbHhJQUlnQjNGeWFpQUVhaUlEUVFKMklBTkJIblJ5SUFOQkRYWWdBMEVUZEhKeklBTkJGbllnQTBFS2RISnpJQU1nQW5JZ0IzRWdBeUFDY1hKcUlBWnFJZ2xCQW5ZZ0NVRWVkSElnQ1VFTmRpQUpRUk4wY25NZ0NVRVdkaUFKUVFwMGNuTWdDU0FEY2lBQ2NTQUpJQU54Y21vZ0Ntb2lCMEVDZGlBSFFSNTBjaUFIUVExMklBZEJFM1J5Y3lBSFFSWjJJQWRCQ25SeWN5QUhJQWx5SUFOeElBY2dDWEZ5YWlBY2FpRUNJQmhCRW5ZZ0dFRU9kSElnR0VFRGRuTWdHRUVIZGlBWVFSbDBjbk1nRldvZ0RXb2dBVUVUZGlBQlFRMTBjaUFCUVFwMmN5QUJRUkYySUFGQkQzUnljMm9pQmtHR2ovbjlmbW9nRW1vZ0ZVRVNkaUFWUVE1MGNpQVZRUU4yY3lBVlFRZDJJQlZCR1hSeWN5QVhhaUFNYWlBUFFSTjJJQTlCRFhSeUlBOUJDblp6SUE5QkVYWWdEMEVQZEhKemFpSUtRY0hUN2FSK2FpQUZhaUFUSUJRZ0VuTnhJQkp6YWlBVFFRWjJJQk5CR25SeUlCTkJDM1lnRTBFVmRISnpJQk5CR1hZZ0UwRUhkSEp6YWlJVklBTnFJaGNnRXlBVWMzRWdGSE5xSUJkQkJuWWdGMEVhZEhJZ0YwRUxkaUFYUVJWMGNuTWdGMEVaZGlBWFFRZDBjbk5xSWdRZ0NXb2hFaUFaUVJKMklCbEJEblJ5SUJsQkEzWnpJQmxCQjNZZ0dVRVpkSEp6SUJacUlCcHFJQVpCRTNZZ0JrRU5kSElnQmtFS2RuTWdCa0VSZGlBR1FROTBjbk5xSWdOQnpNT3lvQUpxSUJOcUlCWkJFbllnRmtFT2RISWdGa0VEZG5NZ0ZrRUhkaUFXUVJsMGNuTWdHR29nRVdvZ0NrRVRkaUFLUVExMGNpQUtRUXAyY3lBS1FSRjJJQXBCRDNSeWMyb2lCVUhHdTRiK0FHb2dGR29nRWlBWElCTnpjU0FUYzJvZ0VrRUdkaUFTUVJwMGNpQVNRUXQySUJKQkZYUnljeUFTUVJsMklCSkJCM1J5YzJvaUdDQUhhaUlXSUJJZ0YzTnhJQmR6YWlBV1FRWjJJQlpCR25SeUlCWkJDM1lnRmtFVmRISnpJQlpCR1hZZ0ZrRUhkSEp6YWlJY0lBSnFJUk1nQWtFQ2RpQUNRUjUwY2lBQ1FRMTJJQUpCRTNSeWN5QUNRUloySUFKQkNuUnljeUFDSUFkeUlBbHhJQUlnQjNGeWFpQVZhaUlVUVFKMklCUkJIblJ5SUJSQkRYWWdGRUVUZEhKeklCUkJGbllnRkVFS2RISnpJQlFnQW5JZ0IzRWdGQ0FDY1hKcUlBUnFJaFZCQW5ZZ0ZVRWVkSElnRlVFTmRpQVZRUk4wY25NZ0ZVRVdkaUFWUVFwMGNuTWdGU0FVY2lBQ2NTQVZJQlJ4Y21vZ0dHb2lHRUVDZGlBWVFSNTBjaUFZUVExMklCaEJFM1J5Y3lBWVFSWjJJQmhCQ25SeWN5QVlJQlZ5SUJSeElCZ2dGWEZ5YWlBY2FpRUNJQWhCRW5ZZ0NFRU9kSElnQ0VFRGRuTWdDRUVIZGlBSVFSbDBjbk1nRUdvZ0Qyb2dBMEVUZGlBRFFRMTBjaUFEUVFwMmN5QURRUkYySUFOQkQzUnljMm9pQ1VHcWlkTFRCR29nRW1vZ0VFRVNkaUFRUVE1MGNpQVFRUU4yY3lBUVFRZDJJQkJCR1hSeWN5QVphaUFiYWlBRlFSTjJJQVZCRFhSeUlBVkJDblp6SUFWQkVYWWdCVUVQZEhKemFpSUhRZS9ZcE84Q2FpQVhhaUFUSUJZZ0VuTnhJQkp6YWlBVFFRWjJJQk5CR25SeUlCTkJDM1lnRTBFVmRISnpJQk5CR1hZZ0UwRUhkSEp6YWlJWklCUnFJZ1FnRXlBV2MzRWdGbk5xSUFSQkJuWWdCRUVhZEhJZ0JFRUxkaUFFUVJWMGNuTWdCRUVaZGlBRVFRZDBjbk5xSWhBZ0ZXb2hGeUFPUVJKMklBNUJEblJ5SUE1QkEzWnpJQTVCQjNZZ0RrRVpkSEp6SUF0cUlBcHFJQWxCRTNZZ0NVRU5kSElnQ1VFS2RuTWdDVUVSZGlBSlFROTBjbk5xSWhKQjJwSG10d2RxSUJOcUlBdEJFbllnQzBFT2RISWdDMEVEZG5NZ0MwRUhkaUFMUVJsMGNuTWdDR29nQVdvZ0IwRVRkaUFIUVExMGNpQUhRUXAyY3lBSFFSRjJJQWRCRDNSeWMyb2lGRUhjMDhMbEJXb2dGbW9nRnlBRUlCTnpjU0FUYzJvZ0YwRUdkaUFYUVJwMGNpQVhRUXQySUJkQkZYUnljeUFYUVJsMklCZEJCM1J5YzJvaUV5QVlhaUlMSUJjZ0JITnhJQVJ6YWlBTFFRWjJJQXRCR25SeUlBdEJDM1lnQzBFVmRISnpJQXRCR1hZZ0MwRUhkSEp6YWlJY0lBSnFJUllnQWtFQ2RpQUNRUjUwY2lBQ1FRMTJJQUpCRTNSeWN5QUNRUloySUFKQkNuUnljeUFDSUJoeUlCVnhJQUlnR0hGeWFpQVphaUlaUVFKMklCbEJIblJ5SUJsQkRYWWdHVUVUZEhKeklCbEJGbllnR1VFS2RISnpJQmtnQW5JZ0dIRWdHU0FDY1hKcUlCQnFJaEJCQW5ZZ0VFRWVkSElnRUVFTmRpQVFRUk4wY25NZ0VFRVdkaUFRUVFwMGNuTWdFQ0FaY2lBQ2NTQVFJQmx4Y21vZ0Uyb2lDRUVDZGlBSVFSNTBjaUFJUVExMklBaEJFM1J5Y3lBSVFSWjJJQWhCQ25SeWN5QUlJQkJ5SUJseElBZ2dFSEZ5YWlBY2FpRUNJQTFCRW5ZZ0RVRU9kSElnRFVFRGRuTWdEVUVIZGlBTlFSbDBjbk1nREdvZ0JXb2dFa0VUZGlBU1FRMTBjaUFTUVFwMmN5QVNRUkYySUJKQkQzUnljMm9pRTBIdGpNZkJlbW9nRjJvZ0RFRVNkaUFNUVE1MGNpQU1RUU4yY3lBTVFRZDJJQXhCR1hSeWN5QU9haUFHYWlBVVFSTjJJQlJCRFhSeUlCUkJDblp6SUJSQkVYWWdGRUVQZEhKemFpSVZRZEtpK2NGNWFpQUVhaUFXSUFzZ0YzTnhJQmR6YWlBV1FRWjJJQlpCR25SeUlCWkJDM1lnRmtFVmRISnpJQlpCR1hZZ0ZrRUhkSEp6YWlJTUlCbHFJZzRnRmlBTGMzRWdDM05xSUE1QkJuWWdEa0VhZEhJZ0RrRUxkaUFPUVJWMGNuTWdEa0VaZGlBT1FRZDBjbk5xSWhrZ0VHb2hCQ0FhUVJKMklCcEJEblJ5SUJwQkEzWnpJQnBCQjNZZ0drRVpkSEp6SUJGcUlBZHFJQk5CRTNZZ0UwRU5kSElnRTBFS2RuTWdFMEVSZGlBVFFROTBjbk5xSWhoQngvL2wrbnRxSUJacUlCRkJFbllnRVVFT2RISWdFVUVEZG5NZ0VVRUhkaUFSUVJsMGNuTWdEV29nQTJvZ0ZVRVRkaUFWUVExMGNpQVZRUXAyY3lBVlFSRjJJQlZCRDNSeWMyb2lGMEhJejR5QWUyb2dDMm9nQkNBT0lCWnpjU0FXYzJvZ0JFRUdkaUFFUVJwMGNpQUVRUXQySUFSQkZYUnljeUFFUVJsMklBUkJCM1J5YzJvaUZpQUlhaUlOSUFRZ0RuTnhJQTV6YWlBTlFRWjJJQTFCR25SeUlBMUJDM1lnRFVFVmRISnpJQTFCR1hZZ0RVRUhkSEp6YWlJUklBSnFJUXNnQWtFQ2RpQUNRUjUwY2lBQ1FRMTJJQUpCRTNSeWN5QUNRUloySUFKQkNuUnljeUFDSUFoeUlCQnhJQUlnQ0hGeWFpQU1haUlRUVFKMklCQkJIblJ5SUJCQkRYWWdFRUVUZEhKeklCQkJGbllnRUVFS2RISnpJQkFnQW5JZ0NIRWdFQ0FDY1hKcUlCbHFJZ2hCQW5ZZ0NFRWVkSElnQ0VFTmRpQUlRUk4wY25NZ0NFRVdkaUFJUVFwMGNuTWdDQ0FRY2lBQ2NTQUlJQkJ4Y21vZ0Ztb2lERUVDZGlBTVFSNTBjaUFNUVExMklBeEJFM1J5Y3lBTVFSWjJJQXhCQ25SeWN5QU1JQWh5SUJCeElBd2dDSEZ5YWlBUmFpRUNJQTlCRW5ZZ0QwRU9kSElnRDBFRGRuTWdEMEVIZGlBUFFSbDBjbk1nRzJvZ0ZHb2dHRUVUZGlBWVFRMTBjaUFZUVFwMmN5QVlRUkYySUJoQkQzUnljMm9pRmtISG9wNnRmV29nQkdvZ0cwRVNkaUFiUVE1MGNpQWJRUU4yY3lBYlFRZDJJQnRCR1hSeWN5QWFhaUFKYWlBWFFSTjJJQmRCRFhSeUlCZEJDblp6SUJkQkVYWWdGMEVQZEhKemFpSVpRZk9YZ0xkOGFpQU9haUFMSUEwZ0JITnhJQVJ6YWlBTFFRWjJJQXRCR25SeUlBdEJDM1lnQzBFVmRISnpJQXRCR1hZZ0MwRUhkSEp6YWlJT0lCQnFJaEVnQ3lBTmMzRWdEWE5xSUJGQkJuWWdFVUVhZEhJZ0VVRUxkaUFSUVJWMGNuTWdFVUVaZGlBUlFRZDBjbk5xSWhvZ0NHb2hCQ0FLUVJKMklBcEJEblJ5SUFwQkEzWnpJQXBCQjNZZ0NrRVpkSEp6SUFGcUlCVnFJQlpCRTNZZ0ZrRU5kSElnRmtFS2RuTWdGa0VSZGlBV1FROTBjbk5xSWhCQjU5S2tvUUZxSUF0cUlBRkJFbllnQVVFT2RISWdBVUVEZG5NZ0FVRUhkaUFCUVJsMGNuTWdEMm9nRW1vZ0dVRVRkaUFaUVExMGNpQVpRUXAyY3lBWlFSRjJJQmxCRDNSeWMyb2lBVUhSeHFrMmFpQU5haUFFSUJFZ0MzTnhJQXR6YWlBRVFRWjJJQVJCR25SeUlBUkJDM1lnQkVFVmRISnpJQVJCR1hZZ0JFRUhkSEp6YWlJUElBeHFJZzBnQkNBUmMzRWdFWE5xSUExQkJuWWdEVUVhZEhJZ0RVRUxkaUFOUVJWMGNuTWdEVUVaZGlBTlFRZDBjbk5xSWhzZ0Ftb2hDeUFDUVFKMklBSkJIblJ5SUFKQkRYWWdBa0VUZEhKeklBSkJGbllnQWtFS2RISnpJQUlnREhJZ0NIRWdBaUFNY1hKcUlBNXFJZ2hCQW5ZZ0NFRWVkSElnQ0VFTmRpQUlRUk4wY25NZ0NFRVdkaUFJUVFwMGNuTWdDQ0FDY2lBTWNTQUlJQUp4Y21vZ0dtb2lERUVDZGlBTVFSNTBjaUFNUVExMklBeEJFM1J5Y3lBTVFSWjJJQXhCQ25SeWN5QU1JQWh5SUFKeElBd2dDSEZ5YWlBUGFpSU9RUUoySUE1QkhuUnlJQTVCRFhZZ0RrRVRkSEp6SUE1QkZuWWdEa0VLZEhKeklBNGdESElnQ0hFZ0RpQU1jWEpxSUJ0cUlRSWdCVUVTZGlBRlFRNTBjaUFGUVFOMmN5QUZRUWQySUFWQkdYUnljeUFHYWlBWGFpQVFRUk4ySUJCQkRYUnlJQkJCQ25aeklCQkJFWFlnRUVFUGRISnphaUlQUWJqQzdQQUNhaUFFYWlBR1FSSjJJQVpCRG5SeUlBWkJBM1p6SUFaQkIzWWdCa0VaZEhKeklBcHFJQk5xSUFGQkUzWWdBVUVOZEhJZ0FVRUtkbk1nQVVFUmRpQUJRUTkwY25OcUlnWkJoWlhjdlFKcUlCRnFJQXNnRFNBRWMzRWdCSE5xSUF0QkJuWWdDMEVhZEhJZ0MwRUxkaUFMUVJWMGNuTWdDMEVaZGlBTFFRZDBjbk5xSWhvZ0NHb2lFU0FMSUExemNTQU5jMm9nRVVFR2RpQVJRUnAwY2lBUlFRdDJJQkZCRlhSeWN5QVJRUmwySUJGQkIzUnljMm9pR3lBTWFpRUlJQWRCRW5ZZ0IwRU9kSElnQjBFRGRuTWdCMEVIZGlBSFFSbDBjbk1nQTJvZ0dXb2dEMEVUZGlBUFFRMTBjaUFQUVFwMmN5QVBRUkYySUE5QkQzUnljMm9pQ2tHVG11Q1pCV29nQzJvZ0EwRVNkaUFEUVE1MGNpQURRUU4yY3lBRFFRZDJJQU5CR1hSeWN5QUZhaUFZYWlBR1FSTjJJQVpCRFhSeUlBWkJDblp6SUFaQkVYWWdCa0VQZEhKemFpSURRZnpic2VrRWFpQU5haUFJSUJFZ0MzTnhJQXR6YWlBSVFRWjJJQWhCR25SeUlBaEJDM1lnQ0VFVmRISnpJQWhCR1hZZ0NFRUhkSEp6YWlJRklBNXFJZzBnQ0NBUmMzRWdFWE5xSUExQkJuWWdEVUVhZEhJZ0RVRUxkaUFOUVJWMGNuTWdEVUVaZGlBTlFRZDBjbk5xSWh3Z0Ftb2hCQ0FDUVFKMklBSkJIblJ5SUFKQkRYWWdBa0VUZEhKeklBSkJGbllnQWtFS2RISnpJQUlnRG5JZ0RIRWdBaUFPY1hKcUlCcHFJZ3RCQW5ZZ0MwRWVkSElnQzBFTmRpQUxRUk4wY25NZ0MwRVdkaUFMUVFwMGNuTWdDeUFDY2lBT2NTQUxJQUp4Y21vZ0cyb2lERUVDZGlBTVFSNTBjaUFNUVExMklBeEJFM1J5Y3lBTVFSWjJJQXhCQ25SeWN5QU1JQXR5SUFKeElBd2dDM0Z5YWlBRmFpSU9RUUoySUE1QkhuUnlJQTVCRFhZZ0RrRVRkSEp6SUE1QkZuWWdEa0VLZEhKeklBNGdESElnQzNFZ0RpQU1jWEpxSUJ4cUlRSWdGRUVTZGlBVVFRNTBjaUFVUVFOMmN5QVVRUWQySUJSQkdYUnljeUFKYWlBQmFpQUtRUk4ySUFwQkRYUnlJQXBCQ25aeklBcEJFWFlnQ2tFUGRISnphaUlGUWJ1VnFMTUhhaUFJYWlBSlFSSjJJQWxCRG5SeUlBbEJBM1p6SUFsQkIzWWdDVUVaZEhKeklBZHFJQlpxSUFOQkUzWWdBMEVOZEhJZ0EwRUtkbk1nQTBFUmRpQURRUTkwY25OcUlnbEIxT2FwcUFacUlCRnFJQVFnRFNBSWMzRWdDSE5xSUFSQkJuWWdCRUVhZEhJZ0JFRUxkaUFFUVJWMGNuTWdCRUVaZGlBRVFRZDBjbk5xSWhvZ0Myb2lFU0FFSUExemNTQU5jMm9nRVVFR2RpQVJRUnAwY2lBUlFRdDJJQkZCRlhSeWN5QVJRUmwySUJGQkIzUnljMm9pR3lBTWFpRUlJQlZCRW5ZZ0ZVRU9kSElnRlVFRGRuTWdGVUVIZGlBVlFSbDBjbk1nRW1vZ0Jtb2dCVUVUZGlBRlFRMTBjaUFGUVFwMmN5QUZRUkYySUFWQkQzUnljMm9pQjBHRjJjaVRlV29nQkdvZ0VrRVNkaUFTUVE1MGNpQVNRUU4yY3lBU1FRZDJJQkpCR1hSeWN5QVVhaUFRYWlBSlFSTjJJQWxCRFhSeUlBbEJDblp6SUFsQkVYWWdDVUVQZEhKemFpSVNRYTZTaTQ1NGFpQU5haUFJSUJFZ0JITnhJQVJ6YWlBSVFRWjJJQWhCR25SeUlBaEJDM1lnQ0VFVmRISnpJQWhCR1hZZ0NFRUhkSEp6YWlJVUlBNXFJZzBnQ0NBUmMzRWdFWE5xSUExQkJuWWdEVUVhZEhJZ0RVRUxkaUFOUVJWMGNuTWdEVUVaZGlBTlFRZDBjbk5xSWh3Z0Ftb2hCQ0FDUVFKMklBSkJIblJ5SUFKQkRYWWdBa0VUZEhKeklBSkJGbllnQWtFS2RISnpJQUlnRG5JZ0RIRWdBaUFPY1hKcUlCcHFJZ3RCQW5ZZ0MwRWVkSElnQzBFTmRpQUxRUk4wY25NZ0MwRVdkaUFMUVFwMGNuTWdDeUFDY2lBT2NTQUxJQUp4Y21vZ0cyb2lERUVDZGlBTVFSNTBjaUFNUVExMklBeEJFM1J5Y3lBTVFSWjJJQXhCQ25SeWN5QU1JQXR5SUFKeElBd2dDM0Z5YWlBVWFpSU9RUUoySUE1QkhuUnlJQTVCRFhZZ0RrRVRkSEp6SUE1QkZuWWdEa0VLZEhKeklBNGdESElnQzNFZ0RpQU1jWEpxSUJ4cUlRSWdGMEVTZGlBWFFRNTBjaUFYUVFOMmN5QVhRUWQySUJkQkdYUnljeUFUYWlBRGFpQUhRUk4ySUFkQkRYUnlJQWRCQ25aeklBZEJFWFlnQjBFUGRISnphaUlVUWN2TTZjQjZhaUFJYWlBVFFSSjJJQk5CRG5SeUlCTkJBM1p6SUJOQkIzWWdFMEVaZEhKeklCVnFJQTlxSUJKQkUzWWdFa0VOZEhJZ0VrRUtkbk1nRWtFUmRpQVNRUTkwY25OcUloTkJvZEgvbFhwcUlCRnFJQVFnRFNBSWMzRWdDSE5xSUFSQkJuWWdCRUVhZEhJZ0JFRUxkaUFFUVJWMGNuTWdCRUVaZGlBRVFRZDBjbk5xSWhvZ0Myb2lFU0FFSUExemNTQU5jMm9nRVVFR2RpQVJRUnAwY2lBUlFRdDJJQkZCRlhSeWN5QVJRUmwySUJGQkIzUnljMm9pR3lBTWFpRUlJQmxCRW5ZZ0dVRU9kSElnR1VFRGRuTWdHVUVIZGlBWlFSbDBjbk1nR0dvZ0NXb2dGRUVUZGlBVVFRMTBjaUFVUVFwMmN5QVVRUkYySUJSQkQzUnljMm9pRlVHam83RzdmR29nQkdvZ0dFRVNkaUFZUVE1MGNpQVlRUU4yY3lBWVFRZDJJQmhCR1hSeWN5QVhhaUFLYWlBVFFSTjJJQk5CRFhSeUlCTkJDblp6SUJOQkVYWWdFMEVQZEhKemFpSVlRZkNXcnBKOGFpQU5haUFJSUJFZ0JITnhJQVJ6YWlBSVFRWjJJQWhCR25SeUlBaEJDM1lnQ0VFVmRISnpJQWhCR1hZZ0NFRUhkSEp6YWlJWElBNXFJZzBnQ0NBUmMzRWdFWE5xSUExQkJuWWdEVUVhZEhJZ0RVRUxkaUFOUVJWMGNuTWdEVUVaZGlBTlFRZDBjbk5xSWh3Z0Ftb2hCQ0FDUVFKMklBSkJIblJ5SUFKQkRYWWdBa0VUZEhKeklBSkJGbllnQWtFS2RISnpJQUlnRG5JZ0RIRWdBaUFPY1hKcUlCcHFJZ3RCQW5ZZ0MwRWVkSElnQzBFTmRpQUxRUk4wY25NZ0MwRVdkaUFMUVFwMGNuTWdDeUFDY2lBT2NTQUxJQUp4Y21vZ0cyb2lERUVDZGlBTVFSNTBjaUFNUVExMklBeEJFM1J5Y3lBTVFSWjJJQXhCQ25SeWN5QU1JQXR5SUFKeElBd2dDM0Z5YWlBWGFpSU9RUUoySUE1QkhuUnlJQTVCRFhZZ0RrRVRkSEp6SUE1QkZuWWdEa0VLZEhKeklBNGdESElnQzNFZ0RpQU1jWEpxSUJ4cUlRSWdBVUVTZGlBQlFRNTBjaUFCUVFOMmN5QUJRUWQySUFGQkdYUnljeUFXYWlBU2FpQVZRUk4ySUJWQkRYUnlJQlZCQ25aeklCVkJFWFlnRlVFUGRISnphaUlYUWFTTTVMUjlhaUFJYWlBV1FSSjJJQlpCRG5SeUlCWkJBM1p6SUJaQkIzWWdGa0VaZEhKeklCbHFJQVZxSUJoQkUzWWdHRUVOZEhJZ0dFRUtkbk1nR0VFUmRpQVlRUTkwY25OcUloWkJtZERMakgxcUlCRnFJQVFnRFNBSWMzRWdDSE5xSUFSQkJuWWdCRUVhZEhJZ0JFRUxkaUFFUVJWMGNuTWdCRUVaZGlBRVFRZDBjbk5xSWhvZ0Myb2lFU0FFSUExemNTQU5jMm9nRVVFR2RpQVJRUnAwY2lBUlFRdDJJQkZCRlhSeWN5QVJRUmwySUJGQkIzUnljMm9pQ3lBTWFpRUlJQVpCRW5ZZ0JrRU9kSElnQmtFRGRuTWdCa0VIZGlBR1FSbDBjbk1nRUdvZ0Uyb2dGMEVUZGlBWFFRMTBjaUFYUVFwMmN5QVhRUkYySUJkQkQzUnljMm9pR1VId3dLcURBV29nQkdvZ0VFRVNkaUFRUVE1MGNpQVFRUU4yY3lBUVFRZDJJQkJCR1hSeWN5QUJhaUFIYWlBV1FSTjJJQlpCRFhSeUlCWkJDblp6SUJaQkVYWWdGa0VQZEhKemFpSUJRWVhydUtCL2FpQU5haUFJSUJFZ0JITnhJQVJ6YWlBSVFRWjJJQWhCR25SeUlBaEJDM1lnQ0VFVmRISnpJQWhCR1hZZ0NFRUhkSEp6YWlJYklBNXFJZzBnQ0NBUmMzRWdFWE5xSUExQkJuWWdEVUVhZEhJZ0RVRUxkaUFOUVJWMGNuTWdEVUVaZGlBTlFRZDBjbk5xSWh3Z0Ftb2hFQ0FDUVFKMklBSkJIblJ5SUFKQkRYWWdBa0VUZEhKeklBSkJGbllnQWtFS2RISnpJQUlnRG5JZ0RIRWdBaUFPY1hKcUlCcHFJZ1JCQW5ZZ0JFRWVkSElnQkVFTmRpQUVRUk4wY25NZ0JFRVdkaUFFUVFwMGNuTWdCQ0FDY2lBT2NTQUVJQUp4Y21vZ0Myb2lDMEVDZGlBTFFSNTBjaUFMUVExMklBdEJFM1J5Y3lBTFFSWjJJQXRCQ25SeWN5QUxJQVJ5SUFKeElBc2dCSEZ5YWlBYmFpSU1RUUoySUF4QkhuUnlJQXhCRFhZZ0RFRVRkSEp6SUF4QkZuWWdERUVLZEhKeklBd2dDM0lnQkhFZ0RDQUxjWEpxSUJ4cUlRSWdBMEVTZGlBRFFRNTBjaUFEUVFOMmN5QURRUWQySUFOQkdYUnljeUFQYWlBWWFpQVpRUk4ySUJsQkRYUnlJQmxCQ25aeklCbEJFWFlnR1VFUGRISnphaUlhUVlqWTNmRUJhaUFJYWlBUFFSSjJJQTlCRG5SeUlBOUJBM1p6SUE5QkIzWWdEMEVaZEhKeklBWnFJQlJxSUFGQkUzWWdBVUVOZEhJZ0FVRUtkbk1nQVVFUmRpQUJRUTkwY25OcUlnOUJsb0tUelFGcUlCRnFJQkFnRFNBSWMzRWdDSE5xSUJCQkJuWWdFRUVhZEhJZ0VFRUxkaUFRUVJWMGNuTWdFRUVaZGlBUVFRZDBjbk5xSWdnZ0JHb2lCQ0FRSUExemNTQU5jMm9nQkVFR2RpQUVRUnAwY2lBRVFRdDJJQVJCRlhSeWN5QUVRUmwySUFSQkIzUnljMm9pSENBTGFpRUdJQWxCRW5ZZ0NVRU9kSElnQ1VFRGRuTWdDVUVIZGlBSlFSbDBjbk1nQ21vZ0Ztb2dHa0VUZGlBYVFRMTBjaUFhUVFwMmN5QWFRUkYySUJwQkQzUnljMm9pRVVHMStjS2xBMm9nRUdvZ0NrRVNkaUFLUVE1MGNpQUtRUU4yY3lBS1FRZDJJQXBCR1hSeWN5QURhaUFWYWlBUFFSTjJJQTlCRFhSeUlBOUJDblp6SUE5QkVYWWdEMEVQZEhKemFpSWJRY3p1b2JvQ2FpQU5haUFHSUFRZ0VITnhJQkJ6YWlBR1FRWjJJQVpCR25SeUlBWkJDM1lnQmtFVmRISnpJQVpCR1hZZ0JrRUhkSEp6YWlJTklBeHFJZzRnQmlBRWMzRWdCSE5xSUE1QkJuWWdEa0VhZEhJZ0RrRUxkaUFPUVJWMGNuTWdEa0VaZGlBT1FRZDBjbk5xSWlVZ0Ftb2hDaUFDUVFKMklBSkJIblJ5SUFKQkRYWWdBa0VUZEhKeklBSkJGbllnQWtFS2RISnpJQUlnREhJZ0MzRWdBaUFNY1hKcUlBaHFJZ05CQW5ZZ0EwRWVkSElnQTBFTmRpQURRUk4wY25NZ0EwRVdkaUFEUVFwMGNuTWdBeUFDY2lBTWNTQURJQUp4Y21vZ0hHb2lFRUVDZGlBUVFSNTBjaUFRUVExMklCQkJFM1J5Y3lBUVFSWjJJQkJCQ25SeWN5QVFJQU55SUFKeElCQWdBM0Z5YWlBTmFpSUlRUUoySUFoQkhuUnlJQWhCRFhZZ0NFRVRkSEp6SUFoQkZuWWdDRUVLZEhKeklBZ2dFSElnQTNFZ0NDQVFjWEpxSUNWcUlRSWdFa0VTZGlBU1FRNTBjaUFTUVFOMmN5QVNRUWQySUJKQkdYUnljeUFGYWlBQmFpQVJRUk4ySUJGQkRYUnlJQkZCQ25aeklCRkJFWFlnRVVFUGRISnphaUlMUWNyVTR2WUVhaUFHYWlBRlFSSjJJQVZCRG5SeUlBVkJBM1p6SUFWQkIzWWdCVUVaZEhKeklBbHFJQmRxSUJ0QkUzWWdHMEVOZEhJZ0cwRUtkbk1nRzBFUmRpQWJRUTkwY25OcUlneEJzNW53eUFOcUlBUnFJQW9nRGlBR2MzRWdCbk5xSUFwQkJuWWdDa0VhZEhJZ0NrRUxkaUFLUVJWMGNuTWdDa0VaZGlBS1FRZDBjbk5xSWdVZ0Eyb2lCQ0FLSUE1emNTQU9jMm9nQkVFR2RpQUVRUnAwY2lBRVFRdDJJQVJCRlhSeWN5QUVRUmwySUFSQkIzUnljMm9pQ1NBUWFpRUdJQk5CRW5ZZ0UwRU9kSElnRTBFRGRuTWdFMEVIZGlBVFFSbDBjbk1nQjJvZ0Qyb2dDMEVUZGlBTFFRMTBjaUFMUVFwMmN5QUxRUkYySUF0QkQzUnljMm9pRFVIejM3bkJCbW9nQ21vZ0IwRVNkaUFIUVE1MGNpQUhRUU4yY3lBSFFRZDJJQWRCR1hSeWN5QVNhaUFaYWlBTVFSTjJJQXhCRFhSeUlBeEJDblp6SUF4QkVYWWdERUVQZEhKemFpSWNRYytVODl3RmFpQU9haUFHSUFRZ0NuTnhJQXB6YWlBR1FRWjJJQVpCR25SeUlBWkJDM1lnQmtFVmRISnpJQVpCR1hZZ0JrRUhkSEp6YWlJU0lBaHFJZ2NnQmlBRWMzRWdCSE5xSUFkQkJuWWdCMEVhZEhJZ0IwRUxkaUFIUVJWMGNuTWdCMEVaZGlBSFFRZDBjbk5xSWc0Z0Ftb2hDaUFDUVFKMklBSkJIblJ5SUFKQkRYWWdBa0VUZEhKeklBSkJGbllnQWtFS2RISnpJQUlnQ0hJZ0VIRWdBaUFJY1hKcUlBVnFJZ05CQW5ZZ0EwRWVkSElnQTBFTmRpQURRUk4wY25NZ0EwRVdkaUFEUVFwMGNuTWdBeUFDY2lBSWNTQURJQUp4Y21vZ0NXb2lCVUVDZGlBRlFSNTBjaUFGUVExMklBVkJFM1J5Y3lBRlFSWjJJQVZCQ25SeWN5QUZJQU55SUFKeElBVWdBM0Z5YWlBU2FpSUpRUUoySUFsQkhuUnlJQWxCRFhZZ0NVRVRkSEp6SUFsQkZuWWdDVUVLZEhKeklBa2dCWElnQTNFZ0NTQUZjWEpxSUE1cUlRSWdHRUVTZGlBWVFRNTBjaUFZUVFOMmN5QVlRUWQySUJoQkdYUnljeUFVYWlBYmFpQU5RUk4ySUExQkRYUnlJQTFCQ25aeklBMUJFWFlnRFVFUGRISnphaUlRUWUvR2xjVUhhaUFHYWlBVVFSSjJJQlJCRG5SeUlCUkJBM1p6SUJSQkIzWWdGRUVaZEhKeklCTnFJQnBxSUJ4QkUzWWdIRUVOZEhJZ0hFRUtkbk1nSEVFUmRpQWNRUTkwY25OcUloUkI3b1crcEFkcUlBUnFJQW9nQnlBR2MzRWdCbk5xSUFwQkJuWWdDa0VhZEhJZ0NrRUxkaUFLUVJWMGNuTWdDa0VaZGlBS1FRZDBjbk5xSWdnZ0Eyb2lFaUFLSUFkemNTQUhjMm9nRWtFR2RpQVNRUnAwY2lBU1FRdDJJQkpCRlhSeWN5QVNRUmwySUJKQkIzUnljMm9pQkNBRmFpRUdJQlpCRW5ZZ0ZrRU9kSElnRmtFRGRuTWdGa0VIZGlBV1FSbDBjbk1nRldvZ0RHb2dFRUVUZGlBUVFRMTBjaUFRUVFwMmN5QVFRUkYySUJCQkQzUnljMm9pRTBHSWhKem1lR29nQ21vZ0ZVRVNkaUFWUVE1MGNpQVZRUU4yY3lBVlFRZDJJQlZCR1hSeWN5QVlhaUFSYWlBVVFSTjJJQlJCRFhSeUlCUkJDblp6SUJSQkVYWWdGRUVQZEhKemFpSVZRWlR3b2FaNGFpQUhhaUFHSUJJZ0NuTnhJQXB6YWlBR1FRWjJJQVpCR25SeUlBWkJDM1lnQmtFVmRISnpJQVpCR1hZZ0JrRUhkSEp6YWlJWUlBbHFJZ2NnQmlBU2MzRWdFbk5xSUFkQkJuWWdCMEVhZEhJZ0IwRUxkaUFIUVJWMGNuTWdCMEVaZGlBSFFRZDBjbk5xSWhBZ0Ftb2hDaUFDUVFKMklBSkJIblJ5SUFKQkRYWWdBa0VUZEhKeklBSkJGbllnQWtFS2RISnpJQUlnQ1hJZ0JYRWdBaUFKY1hKcUlBaHFJZ05CQW5ZZ0EwRWVkSElnQTBFTmRpQURRUk4wY25NZ0EwRVdkaUFEUVFwMGNuTWdBeUFDY2lBSmNTQURJQUp4Y21vZ0JHb2lCVUVDZGlBRlFSNTBjaUFGUVExMklBVkJFM1J5Y3lBRlFSWjJJQVZCQ25SeWN5QUZJQU55SUFKeElBVWdBM0Z5YWlBWWFpSUpRUUoySUFsQkhuUnlJQWxCRFhZZ0NVRVRkSEp6SUFsQkZuWWdDVUVLZEhKeklBa2dCWElnQTNFZ0NTQUZjWEpxSUJCcUlRSWdBVUVTZGlBQlFRNTBjaUFCUVFOMmN5QUJRUWQySUFGQkdYUnljeUFYYWlBY2FpQVRRUk4ySUJOQkRYUnlJQk5CQ25aeklCTkJFWFlnRTBFUGRISnphaUlUUWV2WndhSjZhaUFHYWlBWFFSSjJJQmRCRG5SeUlCZEJBM1p6SUJkQkIzWWdGMEVaZEhKeklCWnFJQXRxSUJWQkUzWWdGVUVOZEhJZ0ZVRUtkbk1nRlVFUmRpQVZRUTkwY25OcUloVkIrdi83aFhscUlCSnFJQW9nQnlBR2MzRWdCbk5xSUFwQkJuWWdDa0VhZEhJZ0NrRUxkaUFLUVJWMGNuTWdDa0VaZGlBS1FRZDBjbk5xSWhJZ0Eyb2lCaUFLSUFkemNTQUhjMm9nQmtFR2RpQUdRUnAwY2lBR1FRdDJJQVpCRlhSeWN5QUdRUmwySUFaQkIzUnljMm9pR0NBRmFpRURJQUZCOThmbTkzdHFJQmxCRW5ZZ0dVRU9kSElnR1VFRGRuTWdHVUVIZGlBWlFSbDBjbk5xSUExcUlCVkJFM1lnRlVFTmRISWdGVUVLZG5NZ0ZVRVJkaUFWUVE5MGNuTnFJQWRxSUFNZ0JpQUtjM0VnQ25OcUlBTkJCbllnQTBFYWRISWdBMEVMZGlBRFFSVjBjbk1nQTBFWmRpQURRUWQwY25OcUloVWdDV29oQnlBQUlBSkJBbllnQWtFZWRISWdBa0VOZGlBQ1FSTjBjbk1nQWtFV2RpQUNRUXAwY25NZ0FpQUpjaUFGY1NBQ0lBbHhjbW9nRW1vaUFFRUNkaUFBUVI1MGNpQUFRUTEySUFCQkUzUnljeUFBUVJaMklBQkJDblJ5Y3lBQUlBSnlJQWx4SUFBZ0FuRnlhaUFZYWlJQlFRSjJJQUZCSG5SeUlBRkJEWFlnQVVFVGRISnpJQUZCRm5ZZ0FVRUtkSEp6SUFFZ0FISWdBbkVnQVNBQWNYSnFJQlZxSWdVZ0FYSWdBSEVnQlNBQmNYSWdIV29nQlVFQ2RpQUZRUjUwY2lBRlFRMTJJQVZCRTNSeWN5QUZRUloySUFWQkNuUnljMm9nR1VIeThjV3pmR29nRDBFU2RpQVBRUTUwY2lBUFFRTjJjeUFQUVFkMklBOUJHWFJ5YzJvZ0ZHb2dFMEVUZGlBVFFRMTBjaUFUUVFwMmN5QVRRUkYySUJOQkQzUnljMm9nQ21vZ0J5QURJQVp6Y1NBR2Myb2dCMEVHZGlBSFFScDBjaUFIUVF0MklBZEJGWFJ5Y3lBSFFSbDJJQWRCQjNSeWMyb2lIV28yQWdBZ0hpQUZJQjRvQWdCcU5nSUFJQjhnQVNBZktBSUFhallDQUNBZ0lBQWdJQ2dDQUdvMkFnQWdJaUFDSUNJb0FnQnFJQjFxTmdJQUlDUWdCeUFrS0FJQWFqWUNBQ0FqSUFNZ0l5Z0NBR28yQWdBZ0lTQUdJQ0VvQWdCcU5nSUFDOE1EQVFOL0lBSkJnTUFBVGdSQUlBQWdBU0FDRUFrUEN5QUFJUVFnQUNBQ2FpRURJQUJCQTNFZ0FVRURjVVlFUUFOQUlBQkJBM0VFUUNBQ1JRUkFJQVFQQ3lBQUlBRXNBQUE2QUFBZ0FFRUJhaUVBSUFGQkFXb2hBU0FDUVFGcklRSU1BUXNMSUFOQmZIRWlBa0ZBYWlFRkEwQWdBQ0FGVEFSQUlBQWdBU2dDQURZQ0FDQUFJQUVvQWdRMkFnUWdBQ0FCS0FJSU5nSUlJQUFnQVNnQ0REWUNEQ0FBSUFFb0FoQTJBaEFnQUNBQktBSVVOZ0lVSUFBZ0FTZ0NHRFlDR0NBQUlBRW9BaHcyQWh3Z0FDQUJLQUlnTmdJZ0lBQWdBU2dDSkRZQ0pDQUFJQUVvQWlnMkFpZ2dBQ0FCS0FJc05nSXNJQUFnQVNnQ01EWUNNQ0FBSUFFb0FqUTJBalFnQUNBQktBSTROZ0k0SUFBZ0FTZ0NQRFlDUENBQVFVQnJJUUFnQVVGQWF5RUJEQUVMQ3dOQUlBQWdBa2dFUUNBQUlBRW9BZ0EyQWdBZ0FFRUVhaUVBSUFGQkJHb2hBUXdCQ3dzRklBTkJCR3NoQWdOQUlBQWdBa2dFUUNBQUlBRXNBQUE2QUFBZ0FDQUJMQUFCT2dBQklBQWdBU3dBQWpvQUFpQUFJQUVzQUFNNkFBTWdBRUVFYWlFQUlBRkJCR29oQVF3QkN3c0xBMEFnQUNBRFNBUkFJQUFnQVN3QUFEb0FBQ0FBUVFGcUlRQWdBVUVCYWlFQkRBRUxDeUFFQzQ0RUFSUi9JQUJCSkdvaURDZ0NBQ0lGUVJaMklnRkIwUWRzSUFBb0FnQnFJUUpCQUNBQlFRWjBJQUJCQkdvaURTZ0NBR29nQWtFYWRtb2lBMEVhZGlBQVFRaHFJZzRvQWdCcUlnRkJHbllnQUVFTWFpSVBLQUlBYWlJR1FScDJJQUJCRUdvaUVDZ0NBR29pQjBFYWRpQUFRUlJxSWhFb0FnQnFJZ2hCR25ZZ0FFRVlhaUlTS0FJQWFpSUVRUnAySUFCQkhHb2lFeWdDQUdvaUNVRWFkaUFBUVNCcUloUW9BZ0JxSWd0QkduWWdCVUgvLy84QmNXb2lCVUVXZGlBRFFmLy8veDl4SWdOQlFHc2dBa0gvLy84ZmNTSUNRZEVIYWtFYWRtcEIvLy8vSDBzZ0JpQUJjU0FIY1NBSWNTQUVRZi8vL3g5eElnUnhJQWx4SUF0eFFmLy8veDlHSUFWQi8vLy9BVVp4Y1hJaUNtdEIwUWR4SUFKcUlRSWdDa0VHZENBRGFpQUNRUnAyYWlJRFFScDJJQUZCLy8vL0gzRnFJZ3BCR25ZZ0JrSC8vLzhmY1dvaUJrRWFkaUFIUWYvLy94OXhhaUlIUVJwMklBaEIvLy8vSDNGcUlnaEJHbllnQkdvaUJFRWFkaUFKUWYvLy94OXhhaUlKUVJwMklBdEIvLy8vSDNGcUlRRWdBQ0FDUWYvLy94OXhOZ0lBSUEwZ0EwSC8vLzhmY1RZQ0FDQU9JQXBCLy8vL0gzRTJBZ0FnRHlBR1FmLy8veDl4TmdJQUlCQWdCMEgvLy84ZmNUWUNBQ0FSSUFoQi8vLy9IM0UyQWdBZ0VpQUVRZi8vL3g5eE5nSUFJQk1nQ1VILy8vOGZjVFlDQUNBVUlBRkIvLy8vSDNFMkFnQWdEQ0FCUVJwMklBVnFRZi8vL3dGeE5nSUFDOHdGQWd0L0FYNGdBQ0FCTFFBZVFRaDBJQUV0QUI5eUlBRXRBQjFCRUhSeUlBRXRBQnhCR0hSeU5nSUFJQUJCQkdvaUJpQUJMUUFhUVFoMElBRXRBQnR5SUFFdEFCbEJFSFJ5SUFFdEFCaEJHSFJ5TmdJQUlBQkJDR29pQnlBQkxRQVdRUWgwSUFFdEFCZHlJQUV0QUJWQkVIUnlJQUV0QUJSQkdIUnlOZ0lBSUFCQkRHb2lDQ0FCTFFBU1FRaDBJQUV0QUJOeUlBRXRBQkZCRUhSeUlBRXRBQkJCR0hSeUlnUTJBZ0FnQUVFUWFpSUpJQUV0QUE1QkNIUWdBUzBBRDNJZ0FTMEFEVUVRZEhJZ0FTMEFERUVZZEhJaUF6WUNBQ0FBUVJScUlnb2dBUzBBQ2tFSWRDQUJMUUFMY2lBQkxRQUpRUkIwY2lBQkxRQUlRUmgwY2lJRk5nSUFJQUJCR0dvaUN5QUJMUUFHUVFoMElBRXRBQWR5SUFFdEFBVkJFSFJ5SUFFdEFBUkJHSFJ5SWcwMkFnQWdBRUVjYWlJTUlBRXRBQUpCQ0hRZ0FTMEFBM0lnQVMwQUFVRVFkSElnQVMwQUFFRVlkSElpQVRZQ0FDQUFRUUFnQTBGK1NTQUZRWDlISUFFZ0RYRkJmMGR5Y2lJQlFRRnpJQU5CZjBaeElnTkJBWE1nQkVIbXVidlZlMGx4SUFGeUlnVkJBWE1nQkVIbXVidlZlMHR4SUFOeUlnUkJBWE1nQnlnQ0FDSUJRYnZBb3ZwNlNYRWdCWElpQTBFQmN5QUJRYnZBb3ZwNlMzRWdCSElpQlVFQmN5QUdLQUlBSWdSQmpMM0ovbnRKY1NBRGNrRi9jeUlESUFSQmpMM0ovbnRMY1NBRmNpQURJQUFvQWdBaUJVSEFndG1CZlV0eGNpSURheUlBUWIvOXB2NENjYTBnQmExOElnNCtBZ0FnQmlBQVFmUEN0b0VFY2EwZ0JLMThJQTVDSUloOElnNCtBZ0FnQnlBQVFjUy8zWVVGY2EwZ0FhMThJQTVDSUloOElnNCtBZ0FnQ0NBQVFabkd4S29FY2EwZ0NDZ0NBSzE4SUE1Q0lJaDhJZzQrQWdBZ0NTQURyU0FKS0FJQXJYd2dEa0lnaUh3aURqNENBQ0FLSUE1Q0lJZ2dDaWdDQUsxOElnNCtBZ0FnQ3lBT1FpQ0lJQXNvQWdDdGZDSU9QZ0lBSUF3Z0RrSWdpQ0FNS0FJQXJYdytBZ0FnQWtVRVFBOExJQUlnQXpZQ0FBc1hBQ0FBS0FJQVFTQnhSUVJBSUFFZ0FpQUFFSFFhQ3d1QUFRRUJmeU1FSVFVakJFR0FBbW9rQkNBQ0lBTktJQVJCZ01BRWNVVnhCRUFnQlNBQlFSaDBRUmgxSUFJZ0Eyc2lBVUdBQWtrRWZ5QUJCVUdBQWdzUUdSb2dBVUgvQVVzRVFDQUNJQU5ySVFJRFFDQUFJQVZCZ0FJUUVTQUJRWUIrYWlJQlFmOEJTdzBBQ3lBQ1FmOEJjU0VCQ3lBQUlBVWdBUkFSQ3lBRkpBUUxsQTRCS0g4akJDRURJd1JCb0FGcUpBUWdBQ0FCS0FKNE5nSjRJQUJCMEFCcUlnSWdBVUhRQUdvZ0FVRW9haUlHRUF3Z0FpQUNLQUlBUVFGME5nSUFJQUJCMUFCcUlnSWdBaWdDQUVFQmREWUNBQ0FBUWRnQWFpSUNJQUlvQWdCQkFYUTJBZ0FnQUVIY0FHb2lBaUFDS0FJQVFRRjBOZ0lBSUFCQjRBQnFJZ0lnQWlnQ0FFRUJkRFlDQUNBQVFlUUFhaUlDSUFJb0FnQkJBWFEyQWdBZ0FFSG9BR29pQWlBQ0tBSUFRUUYwTmdJQUlBQkI3QUJxSWdJZ0FpZ0NBRUVCZERZQ0FDQUFRZkFBYWlJQ0lBSW9BZ0JCQVhRMkFnQWdBRUgwQUdvaUFpQUNLQUlBUVFGME5nSUFJQU5CK0FCcUlnUWdBUkFLSUFRZ0JDZ0NBRUVEYkRZQ0FDQUVRUVJxSWdJZ0FpZ0NBRUVEYkRZQ0FDQUVRUWhxSWdJZ0FpZ0NBRUVEYkRZQ0FDQUVRUXhxSWdJZ0FpZ0NBRUVEYkRZQ0FDQUVRUkJxSWdJZ0FpZ0NBRUVEYkRZQ0FDQUVRUlJxSWdJZ0FpZ0NBRUVEYkRZQ0FDQUVRUmhxSWdJZ0FpZ0NBRUVEYkRZQ0FDQUVRUnhxSWdJZ0FpZ0NBRUVEYkRZQ0FDQUVRU0JxSWdJZ0FpZ0NBRUVEYkRZQ0FDQUVRU1JxSWdJZ0FpZ0NBRUVEYkRZQ0FDQURRZEFBYWlJRklBUVFDaUFEUVNocUlnSWdCaEFLSUFJZ0FpZ0NBRUVCZERZQ0FDQUNRUVJxSWdZZ0JpZ0NBRUVCZERZQ0FDQUNRUWhxSWdjZ0J5Z0NBRUVCZERZQ0FDQUNRUXhxSWdnZ0NDZ0NBRUVCZERZQ0FDQUNRUkJxSWdrZ0NTZ0NBRUVCZERZQ0FDQUNRUlJxSWdvZ0NpZ0NBRUVCZERZQ0FDQUNRUmhxSWdzZ0N5Z0NBRUVCZERZQ0FDQUNRUnhxSWd3Z0RDZ0NBRUVCZERZQ0FDQUNRU0JxSWcwZ0RTZ0NBRUVCZERZQ0FDQUNRU1JxSWc0Z0RpZ0NBRUVCZERZQ0FDQURJQUlRQ2lBRElBTW9BZ0JCQVhRMkFnQWdBMEVFYWlJZklCOG9BZ0JCQVhRMkFnQWdBMEVJYWlJZ0lDQW9BZ0JCQVhRMkFnQWdBMEVNYWlJaElDRW9BZ0JCQVhRMkFnQWdBMEVRYWlJaUlDSW9BZ0JCQVhRMkFnQWdBMEVVYWlJaklDTW9BZ0JCQVhRMkFnQWdBMEVZYWlJa0lDUW9BZ0JCQVhRMkFnQWdBMEVjYWlJbElDVW9BZ0JCQVhRMkFnQWdBMEVnYWlJbUlDWW9BZ0JCQVhRMkFnQWdBMEVrYWlJbklDY29BZ0JCQVhRMkFnQWdBaUFDSUFFUURDQUFJQUlwQWdBM0FnQWdBQ0FDS1FJSU53SUlJQUFnQWlrQ0VEY0NFQ0FBSUFJcEFoZzNBaGdnQUNBQ0tRSWdOd0lnUWZiNi83OENJQUJCQkdvaUFTZ0NBRUVDZEdzaEQwSDIvLysvQWlBQVFRaHFJaEFvQWdCQkFuUnJJUkZCOXYvL3Z3SWdBRUVNYWlJU0tBSUFRUUowYXlFVFFmYi8vNzhDSUFCQkVHb2lGQ2dDQUVFQ2RHc2hGVUgyLy8rL0FpQUFRUlJxSWhZb0FnQkJBblJySVJkQjl2Ly92d0lnQUVFWWFpSVlLQUlBUVFKMGF5RVpRZmIvLzc4Q0lBQkJIR29pR2lnQ0FFRUNkR3NoRzBIMi8vKy9BaUFBUVNCcUlod29BZ0JCQW5ScklSMUI5di8vRXlBQVFTUnFJaDRvQWdCQkFuUnJJU2dnQUVIV3MvKy9BaUFBS0FJQVFRSjBheUFGS0FJQUlpbHFOZ0lBSUFFZ0R5QUZLQUlFSWdGcU5nSUFJQkFnRVNBRktBSUlJZzlxTmdJQUlCSWdFeUFGS0FJTUloQnFOZ0lBSUJRZ0ZTQUZLQUlRSWhGcU5nSUFJQllnRnlBRktBSVVJaEpxTmdJQUlCZ2dHU0FGS0FJWUloTnFOZ0lBSUJvZ0d5QUZLQUljSWhScU5nSUFJQndnSFNBRktBSWdJaFZxTmdJQUlCNGdLQ0FGS0FJa0lnVnFOZ0lBSUFZb0FnQkJCbXdoRmlBSEtBSUFRUVpzSVJjZ0NDZ0NBRUVHYkNFWUlBa29BZ0JCQm13aEdTQUtLQUlBUVFac0lSb2dDeWdDQUVFR2JDRWJJQXdvQWdCQkJtd2hIQ0FOS0FJQVFRWnNJUjBnRGlnQ0FFRUdiQ0VlSUFJZ0FpZ0NBRUVHYkVHODRmLy9BQ0FwYTJvMkFnQWdCaUFXUWZ6OS8vOEFJQUZyYWpZQ0FDQUhJQmRCL1AvLy93QWdEMnRxTmdJQUlBZ2dHRUg4Ly8vL0FDQVFhMm8yQWdBZ0NTQVpRZnovLy84QUlCRnJhallDQUNBS0lCcEIvUC8vL3dBZ0VtdHFOZ0lBSUFzZ0cwSDgvLy8vQUNBVGEybzJBZ0FnRENBY1Fmei8vLzhBSUJScmFqWUNBQ0FOSUIxQi9QLy8vd0FnRld0cU5nSUFJQTRnSGtIOC8vOEhJQVZyYWpZQ0FDQUFRU2hxSWdFZ0JDQUNFQXhCK3Z6L3Z3RWdIeWdDQUdzaEFrSDYvLysvQVNBZ0tBSUFheUVFUWZyLy83OEJJQ0VvQWdCcklRVkIrdi8vdndFZ0lpZ0NBR3NoQmtINi8vKy9BU0FqS0FJQWF5RUhRZnIvLzc4QklDUW9BZ0JySVFoQit2Ly92d0VnSlNnQ0FHc2hDVUg2Ly8rL0FTQW1LQUlBYXlFS1Fmci8vd3NnSnlnQ0FHc2hDeUFCSUFFb0FnQkJtdEwvdndFZ0F5Z0NBR3RxTmdJQUlBQkJMR29pQVNBQktBSUFJQUpxTmdJQUlBQkJNR29pQVNBQktBSUFJQVJxTmdJQUlBQkJOR29pQVNBQktBSUFJQVZxTmdJQUlBQkJPR29pQVNBQktBSUFJQVpxTmdJQUlBQkJQR29pQVNBQktBSUFJQWRxTmdJQUlBQkJRR3NpQVNBQktBSUFJQWhxTmdJQUlBQkJ4QUJxSWdFZ0FTZ0NBQ0FKYWpZQ0FDQUFRY2dBYWlJQklBRW9BZ0FnQ21vMkFnQWdBRUhNQUdvaUFDQUFLQUlBSUF0cU5nSUFJQU1rQkF2WkVnRWZmeU1FSVFNakJFSGdBMm9rQkNBQlFmZ0FhaUlZS0FJQUJFQWdBQ0FDS1FJQU53SUFJQUFnQWlrQ0NEY0NDQ0FBSUFJcEFoQTNBaEFnQUNBQ0tRSVlOd0lZSUFBZ0Fpa0NJRGNDSUNBQUlBSXBBaWczQWlnZ0FDQUNLUUl3TndJd0lBQWdBaWtDT0RjQ09DQUFRVUJySUFKQlFHc3BBZ0EzQWdBZ0FDQUNLUUpJTndKSUlBQWdBaWtDVURjQ1VDQUFJQUlwQWxnM0FsZ2dBQ0FDS1FKZ053SmdJQUFnQWlrQ2FEY0NhQ0FBSUFJcEFuQTNBbkFnQUNBQ0tBSjROZ0o0SUFNa0JBOExJQUlvQW5nRVFDQUFJQUVwQWdBM0FnQWdBQ0FCS1FJSU53SUlJQUFnQVNrQ0VEY0NFQ0FBSUFFcEFoZzNBaGdnQUNBQktRSWdOd0lnSUFBZ0FTa0NLRGNDS0NBQUlBRXBBakEzQWpBZ0FDQUJLUUk0TndJNElBQkJRR3NnQVVGQWF5a0NBRGNDQUNBQUlBRXBBa2czQWtnZ0FDQUJLUUpRTndKUUlBQWdBU2tDV0RjQ1dDQUFJQUVwQW1BM0FtQWdBQ0FCS1FKb053Sm9JQUFnQVNrQ2NEY0NjQ0FBSUFFb0FuZzJBbmdnQXlRRUR3c2dBMEg0QUdvaERTQURRZEFBYWlFVElBTkJLR29oQnlBQVFmZ0FhaUlWUVFBMkFnQWdBMEc0QTJvaUNpQUNRZEFBYWlJV0VBb2dBMEdRQTJvaUN5QUJRZEFBYWlJWEVBb2dBMEhvQW1vaUJpQUJJQW9RRENBRFFjQUNhaUlJSUFJZ0N4QU1JQU5CbUFKcUlna2dBVUVvYWlBS0VBd2dDU0FKSUJZUURDQURRZkFCYWlJRklBSkJLR29nQ3hBTUlBVWdCU0FYRUF4Qi9QMy8vd0FnQmlnQ0JHc2hGRUg4Ly8vL0FDQUdLQUlJYXlFT1Fmei8vLzhBSUFZb0FneHJJUTlCL1AvLy93QWdCaWdDRUdzaEVFSDgvLy8vQUNBR0tBSVVheUVSUWZ6Ly8vOEFJQVlvQWhocklSSkIvUC8vL3dBZ0JpZ0NIR3NoQ2tIOC8vLy9BQ0FHS0FJZ2F5RUxRZnovL3djZ0JpZ0NKR3NoQWlBRFFjZ0JhaUlFUWJ6aC8vOEFJQVlvQWdCcklBZ29BZ0JxTmdJQUlBUWdGQ0FJS0FJRWFqWUNCQ0FFSUE0Z0NDZ0NDR28yQWdnZ0JDQVBJQWdvQWd4cU5nSU1JQVFnRUNBSUtBSVFhallDRUNBRUlCRWdDQ2dDRkdvMkFoUWdCQ0FTSUFnb0FoaHFOZ0lZSUFRZ0NpQUlLQUljYWpZQ0hDQUVJQXNnQ0NnQ0lHbzJBaUFnQkNBQ0lBZ29BaVJxTmdJa1FmejkvLzhBSUFrb0FnUnJJUlJCL1AvLy93QWdDU2dDQ0dzaERrSDgvLy8vQUNBSktBSU1heUVQUWZ6Ly8vOEFJQWtvQWhCcklSQkIvUC8vL3dBZ0NTZ0NGR3NoRVVIOC8vLy9BQ0FKS0FJWWF5RVNRZnovLy84QUlBa29BaHhySVFwQi9QLy8vd0FnQ1NnQ0lHc2hDMEg4Ly84SElBa29BaVJySVFJZ0EwR2dBV29pREVHODRmLy9BQ0FKS0FJQWF5QUZLQUlBYWpZQ0FDQU1JQlFnQlNnQ0JHbzJBZ1FnRENBT0lBVW9BZ2hxTmdJSUlBd2dEeUFGS0FJTWFqWUNEQ0FNSUJBZ0JTZ0NFR28yQWhBZ0RDQVJJQVVvQWhScU5nSVVJQXdnRWlBRktBSVlhallDR0NBTUlBb2dCU2dDSEdvMkFod2dEQ0FMSUFVb0FpQnFOZ0lnSUF3Z0FpQUZLQUlrYWpZQ0pDQUVFQmhGQkVBZ0RTQU1FQW9nRXlBRUVBb2dCeUFFSUJNUURDQUVJQVFnRmhBTUlBQkIwQUJxSUJjZ0JCQU1JQU1nQmlBVEVBd2dBQ0FES1FJQU53SUFJQUFnQXlrQ0NEY0NDQ0FBSUFNcEFoQTNBaEFnQUNBREtRSVlOd0lZSUFBZ0F5a0NJRGNDSUVINCsvLy9BU0FBUVFScUlnUW9BZ0JCQVhRZ0IwRUVhaUlaS0FJQWFtc2hEa0g0Ly8vL0FTQUFRUWhxSWdVb0FnQkJBWFFnQjBFSWFpSWFLQUlBYW1zaEQwSDQvLy8vQVNBQVFReHFJZ1lvQWdCQkFYUWdCMEVNYWlJYktBSUFhbXNoRUVINC8vLy9BU0FBUVJCcUlnZ29BZ0JCQVhRZ0IwRVFhaUljS0FJQWFtc2hFVUg0Ly8vL0FTQUFRUlJxSWhNb0FnQkJBWFFnQjBFVWFpSWRLQUlBYW1zaEVrSDQvLy8vQVNBQVFSaHFJaFVvQWdCQkFYUWdCMEVZYWlJZUtBSUFhbXNoQ2tINC8vLy9BU0FBUVJ4cUloWW9BZ0JCQVhRZ0IwRWNhaUlmS0FJQWFtc2hDMEg0Ly8vL0FTQUFRU0JxSWhjb0FnQkJBWFFnQjBFZ2FpSWdLQUlBYW1zaEFrSDQvLzhQSUFCQkpHb2lHQ2dDQUVFQmRDQUhRU1JxSWlFb0FnQnFheUVCSUFCQitNTC8vd0VnQUNnQ0FFRUJkQ0FIS0FJQWFtc2dEU2dDQUdvaUZEWUNBQ0FFSUE0Z0RTZ0NCR29pRGpZQ0FDQUZJQThnRFNnQ0NHb2lEellDQUNBR0lCQWdEU2dDREdvaUVEWUNBQ0FJSUJFZ0RTZ0NFR29pRVRZQ0FDQVRJQklnRFNnQ0ZHb2lFallDQUNBVklBb2dEU2dDR0dvaUNqWUNBQ0FXSUFzZ0RTZ0NIR29pQ3pZQ0FDQVhJQUlnRFNnQ0lHb2lBallDQUNBWUlBRWdEU2dDSkdvaUFUWUNBQ0FBUVNocUlnUkJ0S1QvL3dJZ0ZHc2dBeWdDQUdvMkFnQWdBRUVzYWlJRlFmVDUvLzhDSUE1cklBTW9BZ1JxTmdJQUlBQkJNR29pQmtIMC8vLy9BaUFQYXlBREtBSUlhallDQUNBQVFUUnFJZ2hCOVAvLy93SWdFR3NnQXlnQ0RHbzJBZ0FnQUVFNGFpSVRRZlQvLy84Q0lCRnJJQU1vQWhCcU5nSUFJQUJCUEdvaUZVSDAvLy8vQWlBU2F5QURLQUlVYWpZQ0FDQUFRVUJySWhaQjlQLy8vd0lnQ21zZ0F5Z0NHR28yQWdBZ0FFSEVBR29pRjBIMC8vLy9BaUFMYXlBREtBSWNhallDQUNBQVFjZ0FhaUlZUWZULy8vOENJQUpySUFNb0FpQnFOZ0lBSUFCQnpBQnFJaFJCOVAvL0Z5QUJheUFES0FJa2FqWUNBQ0FFSUFRZ0RCQU1JQWNnQnlBSkVBd2dCMEc4NGYvL0FDQUhLQUlBYXlJT05nSUFJQmxCL1AzLy93QWdHU2dDQUdzaUR6WUNBQ0FhUWZ6Ly8vOEFJQm9vQWdCckloQTJBZ0FnRzBIOC8vLy9BQ0FiS0FJQWF5SVJOZ0lBSUJ4Qi9QLy8vd0FnSENnQ0FHc2lFallDQUNBZFFmei8vLzhBSUIwb0FnQnJJZ28yQWdBZ0hrSDgvLy8vQUNBZUtBSUFheUlMTmdJQUlCOUIvUC8vL3dBZ0h5Z0NBR3NpQWpZQ0FDQWdRZnovLy84QUlDQW9BZ0JySWdFMkFnQWdJVUg4Ly84SElDRW9BZ0JySWdBMkFnQWdCQ0FFS0FJQUlBNXFOZ0lBSUFVZ0JTZ0NBQ0FQYWpZQ0FDQUdJQVlvQWdBZ0VHbzJBZ0FnQ0NBSUtBSUFJQkZxTmdJQUlCTWdFeWdDQUNBU2FqWUNBQ0FWSUJVb0FnQWdDbW8yQWdBZ0ZpQVdLQUlBSUF0cU5nSUFJQmNnRnlnQ0FDQUNhallDQUNBWUlCZ29BZ0FnQVdvMkFnQWdGQ0FVS0FJQUlBQnFOZ0lBSUFNa0JBOExJQXdRR0VVRVFDQVZRUUUyQWdBZ0FFSUFOd0lBSUFCQ0FEY0NDQ0FBUWdBM0FoQWdBRUlBTndJWUlBQkNBRGNDSUNBQVFnQTNBaWdnQUVJQU53SXdJQUJDQURjQ09DQUFRVUJyUWdBM0FnQWdBRUlBTndKSUlBQkNBRGNDVUNBQVFnQTNBbGdnQUVJQU53SmdJQUJDQURjQ2FDQUFRZ0EzQW5BZ0F5UUVEd3NnR0NnQ0FBUkFJQlZCQVRZQ0FDQURKQVFGSUFBZ0FSQVRJQU1rQkFzTDZCY0NIMzhJZmlNRUlRd2pCRUZBYXlRRUlBd2dBU0FDRUNVZ0RDZ0NBQ0FNS0FJZ0loQ3RJaVZDdi8ybS9nSitJaUtuSWdGcUlSb2dEQ2dDQkNJRklDSkNJSWluYWlBYUlBRkphaUlESUF3b0FpUWlFYTBpSmtLLy9hYitBbjRpSTZjaUJHb2lBaUFsUXZQQ3RvRUVmaUlpcHlJQmFpSWJJQUZKSUNKQ0lJaW5haUVJSUFNZ0JVa2dJMElnaUtkcUlBSWdCRWxxSUFocUlnWWdEQ2dDQ0NJSGFpSUZJQXdvQWlnaUZLMGlKMEsvL2FiK0FuNGlJNmNpQTJvaUJDQW1RdlBDdG9FRWZpSWlweUlDYWlJQklBSkpJQ0pDSUlpbmFpRUxJQVlnQ0VrZ0kwSWdpS2RxSUFVZ0IwbHFJQVFnQTBscUlBdHFJZ2tnQVNBbFFzUy8zWVVGZmlJaXB5SUJhaUljSUFGSklDSkNJSWluYWlJSWFpSUdJQXdvQWd3aUIyb2lCU0FNS0FJc0loV3RJaVJDdi8ybS9nSitJaU9uSWdOcUlnUWdKMEx6d3JhQkJINGlJcWNpQW1vaUFTQUNTU0FpUWlDSXAyb2hEU0FKSUF0SklDTkNJSWluYWlBR0lBaEphaUFGSUFkSmFpQUVJQU5KYWlBTmFpSUtJQUVnSmtMRXY5MkZCWDRpSXFjaUFtb2lBU0FDU1NBaVFpQ0lwMm9pQzJvaUNTQUJJQ1ZDbWNiRXFnUitJaUtuSWdGcUloMGdBVWtnSWtJZ2lLZHFJZ2hxSWdZZ0RDZ0NFQ0lIYWlJRklBd29BakFpRXEwaUpVSy8vYWIrQW40aUk2Y2lBMm9pQkNBa1F2UEN0b0VFZmlJaXB5SUNhaUlCSUFKSklDSkNJSWluYWlFVElBb2dEVWtnSTBJZ2lLZHFJQWtnQzBscUlBWWdDRWxxSUFVZ0IwbHFJQVFnQTBscUlCTnFJZzRnQVNBblFzUy8zWVVGZmlJaXB5SUNhaUlCSUFKSklDSkNJSWluYWlJTmFpSUtJQUVnSmtLWnhzU3FCSDRpSXFjaUFtb2lBU0FDU1NBaVFpQ0lwMm9pQzJvaUNTQUJJQkJxSWg0Z0VFa2lDR29pQmlBTUtBSVVJZ2RxSWdVZ0RDZ0NOQ0lQclNJbVFyLzlwdjRDZmlJanB5SURhaUlFSUNWQzg4SzJnUVIrSWlLbklnSnFJZ0VnQWtrZ0lrSWdpS2RxSVJBZ0RpQVRTU0FqUWlDSXAyb2dDaUFOU1dvZ0NTQUxTV29nQmlBSVNXb2dCU0FIU1dvZ0JDQURTV29nRUdvaURpQUJJQ1JDeEwvZGhRVitJaUtuSWdKcUlnRWdBa2tnSWtJZ2lLZHFJZzFxSWdvZ0FTQW5RcG5HeEtvRWZpSWlweUlDYWlJQklBSkpJQ0pDSUlpbmFpSUxhaUlKSUFFZ0VXb2lIeUFSU1NJSWFpSUdJQXdvQWhnaUIyb2lCU0FNS0FJNEloR3RJaWRDdi8ybS9nSitJaU9uSWdOcUlnUWdKa0x6d3JhQkJINGlJcWNpQW1vaUFTQUNTU0FpUWlDSXAyb2hFeUFPSUJCSklDTkNJSWluYWlBS0lBMUphaUFKSUF0SmFpQUdJQWhKYWlBRklBZEphaUFFSUFOSmFpQVRhaUlPSUFFZ0pVTEV2OTJGQlg0aUlxY2lBbW9pQVNBQ1NTQWlRaUNJcDJvaURXb2lDaUFCSUNSQ21jYkVxZ1IrSWlLbklnSnFJZ0VnQWtrZ0lrSWdpS2RxSWd0cUlna2dBU0FVYWlJZ0lCUkpJZ2hxSWdZZ0RDZ0NIQ0lIYWlJRklBd29BandpSWEwaUpFSy8vYWIrQW40aUk2Y2lBMm9pQkNBblF2UEN0b0VFZmlJaXB5SUNhaUlCSUFKSklDSkNJSWluYWlFUUlBNGdFMGtnSTBJZ2lLZHFJQW9nRFVscUlBa2dDMGxxSUFZZ0NFbHFJQVVnQjBscUlBUWdBMGxxSUJCcUlna2dBU0FtUXNTLzNZVUZmaUlpcHlJQ2FpSUJJQUpKSUNKQ0lJaW5haUlJYWlJR0lBRWdKVUtaeHNTcUJINGlJcWNpQW1vaUFTQUNTU0FpUWlDSXAyb2lCMm9pQlNBQklCVnFJaFFnRlVraUEyb2lCQ0FrUXZQQ3RvRUVmaUlpcHlJQ2FpSUJJQUpKSUNKQ0lJaW5haUVLSUFZZ0NFa2dDU0FRU1dvZ0JTQUhTV29nQkNBRFNXb2dDbW9pQ1NBQklDZEN4TC9kaFFWK0lpS25JZ0pxSWdFZ0Fra2dJa0lnaUtkcUlnaHFJZ1lnQVNBbVFwbkd4S29FZmlJaXB5SUNhaUlCSUFKSklDSkNJSWluYWlJSGFpSUZJQUVnRW1vaUZ5QVNTU0lEYWlJRUlDUkN4TC9kaFFWK0lpS25JZ0pxSWdFZ0Fra2dJa0lnaUtkcUlRc2dCaUFJU1NBSklBcEphaUFGSUFkSmFpQUVJQU5KYWlBTGFpSUdJQUVnSjBLWnhzU3FCSDRpSXFjaUFtb2lBU0FDU1NBaVFpQ0lwMm9pQjJvaUJTQUJJQTlxSWhnZ0Qwa2lBMm9pQkNBa1Fwbkd4S29FZmlJaXB5SUNhaUlCSUFKSklDSkNJSWluYWlFU0lBVWdCMGtnQmlBTFNXb2dCQ0FEU1dvZ0Vtb2lEaUFCSUJGcUloa2dFVWtpRFdvaUNpQWhhaUVXSUJvZ0Y2MGlKRUsvL2FiK0FuNGlJcWNpQVdvaEZTQWJJQ0pDSUlpbmFpQVZJQUZKYWlJRElCaXRJaVZDdi8ybS9nSitJaU9uSWdScUlnSWdKRUx6d3JhQkJINGlJcWNpQVdvaUVTQUJTU0FpUWlDSXAyb2hCaUFqUWlDSXB5QURJQnRKYWlBQ0lBUkphaUFHYWlJSElCeHFJZ1VnR2EwaUprSy8vYWIrQW40aUk2Y2lBMm9pQkNBbFF2UEN0b0VFZmlJaXB5SUNhaUlCSUFKSklDSkNJSWluYWlFSklBY2dCa2tnSTBJZ2lLZHFJQVVnSEVscUlBUWdBMGxxSUFscUlnZ2dBU0FrUXNTLzNZVUZmaUlpcHlJQmFpSVRJQUZKSUNKQ0lJaW5haUlHYWlJSElCMXFJZ1VnRnEwaUowSy8vYWIrQW40aUk2Y2lBMm9pQkNBbVF2UEN0b0VFZmlJaXB5SUNhaUlCSUFKSklDSkNJSWluYWlFUElBZ2dDVWtnSTBJZ2lLZHFJQWNnQmtscUlBVWdIVWxxSUFRZ0EwbHFJQTlxSWdzZ0FTQWxRc1MvM1lVRmZpSWlweUlDYWlJQklBSkpJQ0pDSUlpbmFpSUphaUlJSUFFZ0pFS1p4c1NxQkg0aUlxY2lBV29pRUNBQlNTQWlRaUNJcDJvaUJtb2lCeUFlYWlJRklBb2dEVWtnRGlBU1NXb2dGaUFoU1dvaURxMGlKRUsvL2FiK0FuNGlJNmNpQTJvaUJDQW5RdlBDdG9FRWZpSWlweUlDYWlJQklBSkpJQ0pDSUlpbmFpRUtJQXNnRDBrZ0kwSWdpS2RxSUFnZ0NVbHFJQWNnQmtscUlBVWdIa2xxSUFRZ0EwbHFJQXBxSWdzZ0FTQW1Rc1MvM1lVRmZpSWlweUlDYWlJQklBSkpJQ0pDSUlpbmFpSUphaUlJSUFFZ0pVS1p4c1NxQkg0aUlxY2lBbW9pQVNBQ1NTQWlRaUNJcDJvaUJtb2lCeUFCSUJkcUlnMGdGMGtpQldvaUF5QWZhaUlFSUNSQzg4SzJnUVIrSWlLbklnSnFJZ0VnQWtrZ0lrSWdpS2RxSVE4Z0NDQUpTU0FMSUFwSmFpQUhJQVpKYWlBRElBVkphaUFFSUI5SmFpQVBhaUlLSUFFZ0owTEV2OTJGQlg0aUlxY2lBbW9pQVNBQ1NTQWlRaUNJcDJvaUNXb2lDQ0FCSUNaQ21jYkVxZ1IrSWlLbklnSnFJZ0VnQWtrZ0lrSWdpS2RxSWdacUlnY2dBU0FZYWlJTElCaEpJZ1ZxSWdNZ0lHb2lCQ0FrUXNTLzNZVUZmaUlpcHlJQ2FpSUJJQUpKSUNKQ0lJaW5haUVTSUFnZ0NVa2dDaUFQU1dvZ0J5QUdTV29nQXlBRlNXb2dCQ0FnU1dvZ0Vtb2lDU0FCSUNkQ21jYkVxZ1IrSWlLbklnSnFJZ0VnQWtrZ0lrSWdpS2RxSWdocUlnY2dBU0FaYWlJR0lCbEpJZ1ZxSWdNZ0ZHb2lCQ0FrUXBuR3hLb0VmaUlpcHlJQ2FpSUJJQlpxSVE4Z0FDQU9JQ0pDSUlpbmFpQUpJQkpKYWlBSElBaEphaUFESUFWSmFpQUVJQlJKYWlBQklBSkphaUFQSUJaSmFxMGlJa0svL2FiK0FuNGdGYTE4SWlpbklnYzJBZ0FnQUVFRWFpSUZJQ0pDODhLMmdRUitJQkd0ZkNBb1FpQ0lmQ0lwcHlJUk5nSUFJQUJCQ0dvaUF5QWlRc1MvM1lVRmZpQVRyWHdnS1VJZ2lId2lKYWNpRGpZQ0FDQUFRUXhxSWdRZ0lrS1p4c1NxQkg0Z0VLMThJQ1ZDSUloOElpYW5JZ28yQWdBZ0FFRVFhaUlDSUNJZ0RhMThJQ1pDSUloOElpZW5JZ0UyQWdBZ0FFRVVhaUlKSUNkQ0lJZ2dDNjE4SWlRK0FnQWdBRUVZYWlJSUlDUkNJSWdnQnExOElpTStBZ0FnQUVFY2FpSUdJQ05DSUlnZ0Q2MThJaUkrQWdBZ0FDQW9Rdi8vLy84UGd5QWlRaUNJSUFGQmZra2dJeUFrZ3lBaWc2ZEJmMGR5SWdCQkFYTWdBVUYvUm5FaUFVRUJjeUFLUWVhNXU5VjdTWEVnQUhJaUFFRUJjeUFLUWVhNXU5VjdTM0VnQVhJaUFVRUJjeUFPUWJ2QW92cDZTWEVnQUhJaUFFRUJjeUFPUWJ2QW92cDZTM0VnQVhJaUFVRUJjeUFSUVl5OXlmNTdTWEVnQUhKQmYzTWlBQ0FSUVl5OXlmNTdTM0VnQVhJZ0FDQUhRY0NDMllGOVMzRnlyWHdpSTZjaUFFRy8vYWIrQW15dGZDSWlQZ0lBSUFVZ0tVTC8vLy8vRDRNZ0FFSHp3cmFCQkd5dGZDQWlRaUNJZkNJaVBnSUFJQU1nSlVMLy8vLy9ENE1nQUVIRXY5MkZCV3l0ZkNBaVFpQ0lmQ0lpUGdJQUlBUWdKa0wvLy8vL0Q0TWdBRUdaeHNTcUJHeXRmQ0FpUWlDSWZDSWlQZ0lBSUFJZ0kwTC8vLy8vRDRNZ0owTC8vLy8vRDROOElDSkNJSWg4SWlJK0FnQWdDU0FpUWlDSUlBa29BZ0N0ZkNJaVBnSUFJQWdnSWtJZ2lDQUlLQUlBclh3aUlqNENBQ0FHSUNKQ0lJZ2dCaWdDQUsxOFBnSUFJQXdrQkF2aUd3RXBmeU1FSVFRakJFSEFBMm9rQkNBQ0tBSlFJUWNnQVVINEFHb2lLeWdDQUFSQUlBQWdCellDZUNBQUlBSXBBZ0EzQWdBZ0FDQUNLUUlJTndJSUlBQWdBaWtDRURjQ0VDQUFJQUlwQWhnM0FoZ2dBQ0FDS1FJZ053SWdJQUJCS0dvaUF5QUNRU2hxSWdFcEFnQTNBZ0FnQXlBQktRSUlOd0lJSUFNZ0FTa0NFRGNDRUNBRElBRXBBaGczQWhnZ0F5QUJLUUlnTndJZ0lBQkJBVFlDVUNBQVFkUUFhaUlBUWdBM0FnQWdBRUlBTndJSUlBQkNBRGNDRUNBQVFnQTNBaGdnQUVFQU5nSWdJQVFrQkE4TElBY0VRQ0FEQkVBZ0EwRUJOZ0lBSUFOQkJHb2lBa0lBTndJQUlBSkNBRGNDQ0NBQ1FnQTNBaEFnQWtJQU53SVlJQUpCQURZQ0lBc2dBQ0FCS1FJQU53SUFJQUFnQVNrQ0NEY0NDQ0FBSUFFcEFoQTNBaEFnQUNBQktRSVlOd0lZSUFBZ0FTa0NJRGNDSUNBQUlBRXBBaWczQWlnZ0FDQUJLUUl3TndJd0lBQWdBU2tDT0RjQ09DQUFRVUJySUFGQlFHc3BBZ0EzQWdBZ0FDQUJLUUpJTndKSUlBQWdBU2tDVURjQ1VDQUFJQUVwQWxnM0FsZ2dBQ0FCS1FKZ053SmdJQUFnQVNrQ2FEY0NhQ0FBSUFFcEFuQTNBbkFnQUNBQktBSjROZ0o0SUFRa0JBOExJQVJCK0FCcUlSVWdCRUhRQUdvaEpTQUVRU2hxSVFvZ0FFSDRBR29pSmtFQU5nSUFJQVJCa0FOcUlpY2dBVUhRQUdvaUtCQUtJQVJCNkFKcUlnZ2dBU2tDQURjQ0FDQUlJQUVwQWdnM0FnZ2dDQ0FCS1FJUU53SVFJQWdnQVNrQ0dEY0NHQ0FJSUFFcEFpQTNBaUFnQ0VFa2FpSWNLQUlBSWhKQkZuWWlCMEhSQjJ3Z0NDZ0NBR29oSGlBSFFRWjBJQWhCQkdvaUZpZ0NBR29nSGtFYWRtb2lGMEVhZGlBSVFRaHFJaGdvQWdCcUlobEJHbllnQ0VFTWFpSUZLQUlBYWlJR1FScDJJQWhCRUdvaURDZ0NBR29pRTBFYWRpQUlRUlJxSWhRb0FnQnFJZzFCR25ZZ0NFRVlhaUlPS0FJQWFpSVBRUnAySUFoQkhHb2lFQ2dDQUdvaUVVRWFkaUFJUVNCcUlnY29BZ0JxSVJvZ0NDQWVRZi8vL3g5eElpdzJBZ0FnRmlBWFFmLy8veDl4SWdzMkFnQWdHQ0FaUWYvLy94OXhJaDgyQWdBZ0JTQUdRZi8vL3g5eElpQTJBZ0FnRENBVFFmLy8veDl4SWlFMkFnQWdGQ0FOUWYvLy94OXhJaUkyQWdBZ0RpQVBRZi8vL3g5eElpTTJBZ0FnRUNBUlFmLy8veDl4SWlRMkFnQWdCeUFhUWYvLy94OXhJaDQyQWdBZ0hDQWFRUnAySUJKQi8vLy9BWEZxSWhvMkFnQWdCRUhBQW1vaUd5QUNJQ2NRRENBRVFaZ0NhaUlKSUFGQktHb2lIU2tDQURjQ0FDQUpJQjBwQWdnM0FnZ2dDU0FkS1FJUU53SVFJQWtnSFNrQ0dEY0NHQ0FKSUIwcEFpQTNBaUFnQ1VFa2FpSXBLQUlBSWh4QkZuWWlCMEhSQjJ3Z0NTZ0NBR29oRENBSFFRWjBJQWxCQkdvaUVpZ0NBR29nREVFYWRtb2lFMEVhZGlBSlFRaHFJaFlvQWdCcUloUkJHbllnQ1VFTWFpSVhLQUlBYWlJTlFScDJJQWxCRUdvaUdDZ0NBR29pRGtFYWRpQUpRUlJxSWhrb0FnQnFJZzlCR25ZZ0NVRVlhaUlGS0FJQWFpSVFRUnAySUFsQkhHb2lCaWdDQUdvaUVVRWFkaUFKUVNCcUlnY29BZ0JxSVNvZ0NTQU1RZi8vL3g5eElndzJBZ0FnRWlBVFFmLy8veDl4SWhNMkFnQWdGaUFVUWYvLy94OXhJaFEyQWdBZ0Z5QU5RZi8vL3g5eElnMDJBZ0FnR0NBT1FmLy8veDl4SWc0MkFnQWdHU0FQUWYvLy94OXhJZzgyQWdBZ0JTQVFRZi8vL3g5eEloQTJBZ0FnQmlBUlFmLy8veDl4SWhFMkFnQWdCeUFxUWYvLy94OXhJZ2MyQWdBZ0tTQXFRUnAySUJ4Qi8vLy9BWEZxTmdJQUlBUkI4QUZxSWdZZ0FrRW9haUFuRUF3Z0JpQUdJQ2dRRENBRVFjZ0JhaUlGUWJ6aC8vOEFJQ3hySUJzb0FnQnFOZ0lBSUFWQi9QMy8vd0FnQzJzZ0d5Z0NCR28yQWdRZ0JVSDgvLy8vQUNBZmF5QWJLQUlJYWpZQ0NDQUZRZnovLy84QUlDQnJJQnNvQWd4cU5nSU1JQVZCL1AvLy93QWdJV3NnR3lnQ0VHbzJBaEFnQlVIOC8vLy9BQ0FpYXlBYktBSVVhallDRkNBRlFmei8vLzhBSUNOcklCc29BaGhxTmdJWUlBVkIvUC8vL3dBZ0pHc2dHeWdDSEdvMkFod2dCVUg4Ly8vL0FDQWVheUFiS0FJZ2FqWUNJQ0FGUWZ6Ly93Y2dHbXNnR3lnQ0pHbzJBaVJCL1AvL0J5QXBLQUlBYXlFQ0lBUkJvQUZxSWd0QnZPSC8vd0FnREdzZ0JpZ0NBR28yQWdBZ0MwSDgvZi8vQUNBVGF5QUdLQUlFYWpZQ0JDQUxRZnovLy84QUlCUnJJQVlvQWdocU5nSUlJQXRCL1AvLy93QWdEV3NnQmlnQ0RHbzJBZ3dnQzBIOC8vLy9BQ0FPYXlBR0tBSVFhallDRUNBTFFmei8vLzhBSUE5cklBWW9BaFJxTmdJVUlBdEIvUC8vL3dBZ0VHc2dCaWdDR0dvMkFoZ2dDMEg4Ly8vL0FDQVJheUFHS0FJY2FqWUNIQ0FMUWZ6Ly8vOEFJQWRySUFZb0FpQnFOZ0lnSUFzZ0FpQUdLQUlrYWpZQ0pDQUZFQmhGQkVBZ0ZTQUxFQW9nSlNBRkVBb2dDaUFGSUNVUURDQURCRUFnQXlBRktRSUFOd0lBSUFNZ0JTa0NDRGNDQ0NBRElBVXBBaEEzQWhBZ0F5QUZLUUlZTndJWUlBTWdCU2tDSURjQ0lBc2dBRUhRQUdvZ0tDQUZFQXdnQkNBSUlDVVFEQ0FBSUFRcEFnQTNBZ0FnQUNBRUtRSUlOd0lJSUFBZ0JDa0NFRGNDRUNBQUlBUXBBaGczQWhnZ0FDQUVLUUlnTndJZ1FmajcvLzhCSUFCQkJHb2lFaWdDQUVFQmRDQUtRUVJxSWg4b0FnQnFheUVOUWZqLy8vOEJJQUJCQ0dvaUZpZ0NBRUVCZENBS1FRaHFJaUFvQWdCcWF5RU9RZmovLy84QklBQkJER29pRnlnQ0FFRUJkQ0FLUVF4cUlpRW9BZ0JxYXlFUFFmai8vLzhCSUFCQkVHb2lHQ2dDQUVFQmRDQUtRUkJxSWlJb0FnQnFheUVRUWZqLy8vOEJJQUJCRkdvaUdTZ0NBRUVCZENBS1FSUnFJaU1vQWdCcWF5RVJRZmovLy84QklBQkJHR29pQlNnQ0FFRUJkQ0FLUVJocUlpUW9BZ0JxYXlFSFFmai8vLzhCSUFCQkhHb2lCaWdDQUVFQmRDQUtRUnhxSWg0b0FnQnFheUVEUWZqLy8vOEJJQUJCSUdvaURDZ0NBRUVCZENBS1FTQnFJaG9vQWdCcWF5RUNRZmovL3c4Z0FFRWthaUlUS0FJQVFRRjBJQXBCSkdvaUhDZ0NBR3BySVFFZ0FFSDR3di8vQVNBQUtBSUFRUUYwSUFvb0FnQnFheUFWS0FJQWFpSVVOZ0lBSUJJZ0RTQVZLQUlFYWlJTk5nSUFJQllnRGlBVktBSUlhaUlPTmdJQUlCY2dEeUFWS0FJTWFpSVBOZ0lBSUJnZ0VDQVZLQUlRYWlJUU5nSUFJQmtnRVNBVktBSVVhaUlSTmdJQUlBVWdCeUFWS0FJWWFpSUhOZ0lBSUFZZ0F5QVZLQUljYWlJRE5nSUFJQXdnQWlBVktBSWdhaUlDTmdJQUlCTWdBU0FWS0FJa2FpSUJOZ0lBSUFCQktHb2lFa0cwcFAvL0FpQVVheUFFS0FJQWFqWUNBQ0FBUVN4cUloWkI5UG4vL3dJZ0RXc2dCQ2dDQkdvMkFnQWdBRUV3YWlJWFFmVC8vLzhDSUE1cklBUW9BZ2hxTmdJQUlBQkJOR29pR0VIMC8vLy9BaUFQYXlBRUtBSU1hallDQUNBQVFUaHFJaGxCOVAvLy93SWdFR3NnQkNnQ0VHbzJBZ0FnQUVFOGFpSUZRZlQvLy84Q0lCRnJJQVFvQWhScU5nSUFJQUJCUUdzaUJrSDAvLy8vQWlBSGF5QUVLQUlZYWpZQ0FDQUFRY1FBYWlJTVFmVC8vLzhDSUFOcklBUW9BaHhxTmdJQUlBQkJ5QUJxSWhOQjlQLy8vd0lnQW1zZ0JDZ0NJR28yQWdBZ0FFSE1BR29pRkVIMC8vOFhJQUZySUFRb0FpUnFOZ0lBSUJJZ0VpQUxFQXdnQ2lBS0lBa1FEQ0FLUWJ6aC8vOEFJQW9vQWdCcklnMDJBZ0FnSDBIOC9mLy9BQ0FmS0FJQWF5SU9OZ0lBSUNCQi9QLy8vd0FnSUNnQ0FHc2lEellDQUNBaFFmei8vLzhBSUNFb0FnQnJJaEEyQWdBZ0lrSDgvLy8vQUNBaUtBSUFheUlSTmdJQUlDTkIvUC8vL3dBZ0l5Z0NBR3NpQnpZQ0FDQWtRZnovLy84QUlDUW9BZ0JySWdNMkFnQWdIa0g4Ly8vL0FDQWVLQUlBYXlJQ05nSUFJQnBCL1AvLy93QWdHaWdDQUdzaUFUWUNBQ0FjUWZ6Ly93Y2dIQ2dDQUdzaUFEWUNBQ0FTSUJJb0FnQWdEV28yQWdBZ0ZpQVdLQUlBSUE1cU5nSUFJQmNnRnlnQ0FDQVBhallDQUNBWUlCZ29BZ0FnRUdvMkFnQWdHU0FaS0FJQUlCRnFOZ0lBSUFVZ0JTZ0NBQ0FIYWpZQ0FDQUdJQVlvQWdBZ0EybzJBZ0FnRENBTUtBSUFJQUpxTmdJQUlCTWdFeWdDQUNBQmFqWUNBQ0FVSUJRb0FnQWdBR28yQWdBZ0JDUUVEd3NnQ3hBWVJRUkFJQU1FUUNBRFFnQTNBZ0FnQTBJQU53SUlJQU5DQURjQ0VDQURRZ0EzQWhnZ0EwSUFOd0lnQ3lBbVFRRTJBZ0FnQUVJQU53SUFJQUJDQURjQ0NDQUFRZ0EzQWhBZ0FFSUFOd0lZSUFCQ0FEY0NJQ0FBUWdBM0FpZ2dBRUlBTndJd0lBQkNBRGNDT0NBQVFVQnJRZ0EzQWdBZ0FFSUFOd0pJSUFCQ0FEY0NVQ0FBUWdBM0FsZ2dBRUlBTndKZ0lBQkNBRGNDYUNBQVFnQTNBbkFnQkNRRUR3c2dLeWdDQUFSQUlDWkJBVFlDQUNBRFJRUkFJQVFrQkE4TElBTkJBVFlDQUNBRFFRUnFJZ0JDQURjQ0FDQUFRZ0EzQWdnZ0FFSUFOd0lRSUFCQ0FEY0NHQ0FBUVFBMkFpQWdCQ1FFQlNBREJFQWdBeUFkS1FJQU53SUFJQU1nSFNrQ0NEY0NDQ0FESUIwcEFoQTNBaEFnQXlBZEtRSVlOd0lZSUFNZ0hTa0NJRGNDSUNBRFFTUnFJaElvQWdBaUZrRVdkaUlDUWRFSGJDQURLQUlBYWlFYUlBSkJCblFnQTBFRWFpSVhLQUlBYWlBYVFScDJhaUlZUVJwMklBTkJDR29pR1NnQ0FHb2lCVUVhZGlBRFFReHFJZ1lvQWdCcUlneEJHbllnQTBFUWFpSVRLQUlBYWlJVVFScDJJQU5CRkdvaURTZ0NBR29pRGtFYWRpQURRUmhxSWc4b0FnQnFJaEJCR25ZZ0EwRWNhaUlSS0FJQWFpSUhRUnAySUFOQklHb2lBaWdDQUdvaEhDQURJQnBCQVhSQi92Ly9QM0UyQWdBZ0Z5QVlRUUYwUWY3Ly96OXhOZ0lBSUJrZ0JVRUJkRUgrLy84L2NUWUNBQ0FHSUF4QkFYUkIvdi8vUDNFMkFnQWdFeUFVUVFGMFFmNy8vejl4TmdJQUlBMGdEa0VCZEVIKy8vOC9jVFlDQUNBUElCQkJBWFJCL3YvL1AzRTJBZ0FnRVNBSFFRRjBRZjcvL3o5eE5nSUFJQUlnSEVFQmRFSCsvLzgvY1RZQ0FDQVNJQnhCR25ZZ0ZrSC8vLzhCY1dwQkFYUTJBZ0FMSUFBZ0FSQVRJQVFrQkFzTDdnUUJHMzhnQUVFa2FpSUxLQUlBSWdKQkZuWWlBVUhSQjJ3Z0FDZ0NBR29oQkNBQlFRWjBJQUJCQkdvaURDZ0NBR29nQkVFYWRtb2lCVUVhZGlBQVFRaHFJZzBvQWdCcUlnWkIvLy8vSDNFaEJ5QUdRUnAySUFCQkRHb2lEaWdDQUdvaUNFRWFkaUFBUVJCcUlnOG9BZ0JxSVFFZ0NFSC8vLzhmY1NFSklBRkIvLy8vSDNFaENpQUJRUnAySUFCQkZHb2lFQ2dDQUdvaUVVRWFkaUFBUVJocUloSW9BZ0JxSVJNZ0VVSC8vLzhmY1NFVUlCTkJHbllnQUVFY2FpSVZLQUlBYWlJV1FScDJJQUJCSUdvaUZ5Z0NBR29oQXlBV1FmLy8veDl4SVJnZ0EwSC8vLzhmY1NFWklBTkJHbllnQWtILy8vOEJjV29pQWtFV2RpQUZRZi8vL3g5eElnVkJRR3NnQkVILy8vOGZjU0lFUWRFSGFpSWFRUnAySWh0cVFmLy8veDlMSUFnZ0JuRWdBWEVnRVhFZ0UwSC8vLzhmY1NJQmNTQVdjU0FEY1VILy8vOGZSaUFDUWYvLy93RkdjWEZ5SWdORkJFQWdBQ0FFTmdJQUlBd2dCVFlDQUNBTklBYzJBZ0FnRGlBSk5nSUFJQThnQ2pZQ0FDQVFJQlEyQWdBZ0VpQUJOZ0lBSUJVZ0dEWUNBQ0FYSUJrMkFnQWdDeUFDTmdJQUR3c2dHeUFGYWlBRFFRWjBhaUlEUVJwMklBZHFJZ1JCR25ZZ0NXb2lCa0VhZGlBS2FpSUhRUnAySUJScUlnaEJHbllnQVdvaUFVRWFkaUFZYWlJSlFScDJJQmxxSWdwQkduWWdBbXBCLy8vL0FYRWhBaUFBSUJwQi8vLy9IM0UyQWdBZ0RDQURRZi8vL3g5eE5nSUFJQTBnQkVILy8vOGZjVFlDQUNBT0lBWkIvLy8vSDNFMkFnQWdEeUFIUWYvLy94OXhOZ0lBSUJBZ0NFSC8vLzhmY1RZQ0FDQVNJQUZCLy8vL0gzRTJBZ0FnRlNBSlFmLy8veDl4TmdJQUlCY2dDa0gvLy84ZmNUWUNBQ0FMSUFJMkFnQUxzQUlCQ244Z0FDZ0NKQ0lCUVJaMklnSkIwUWRzSUFBb0FnQnFJZ05CLy8vL0gzRWlCRUhRQjNNaEJTQUVRUUJISUFWQi8vLy9IMGR4QkVCQkFBOExJQU5CR25ZZ0FrRUdkSElnQUNnQ0JHb2lBa0VhZGlBQUtBSUlhaUlEUVJwMklBQW9BZ3hxSWdaQkduWWdBQ2dDRUdvaUIwRWFkaUFBS0FJVWFpSUlRUnAySUFBb0FoaHFJZ2xCR25ZZ0FDZ0NIR29pQ2tFYWRpQUFLQUlnYWlJQVFScDJJQUZCLy8vL0FYRnFJUUVnQWtIQUFITWdCWEVnQTNFZ0JuRWdCM0VnQ0hFZ0NYRWdDbkVnQUhFZ0FVR0FnSUFlYzNGQi8vLy9IMFlFZjBFQkJTQUNRZi8vL3g5eElBUnlJQU5CLy8vL0gzRnlJQVpCLy8vL0gzRnlJQWRCLy8vL0gzRnlJQWhCLy8vL0gzRnlJQWxCLy8vL0gzRnlJQXBCLy8vL0gzRnlJQUJCLy8vL0gzRnlJQUZ5UlF0QkFYRUxtQUlCQkg4Z0FDQUNhaUVFSUFGQi93RnhJUUVnQWtIREFFNEVRQU5BSUFCQkEzRUVRQ0FBSUFFNkFBQWdBRUVCYWlFQURBRUxDeUFFUVh4eElnVkJRR29oQmlBQklBRkJDSFJ5SUFGQkVIUnlJQUZCR0hSeUlRTURRQ0FBSUFaTUJFQWdBQ0FETmdJQUlBQWdBellDQkNBQUlBTTJBZ2dnQUNBRE5nSU1JQUFnQXpZQ0VDQUFJQU0yQWhRZ0FDQUROZ0lZSUFBZ0F6WUNIQ0FBSUFNMkFpQWdBQ0FETmdJa0lBQWdBellDS0NBQUlBTTJBaXdnQUNBRE5nSXdJQUFnQXpZQ05DQUFJQU0yQWpnZ0FDQUROZ0k4SUFCQlFHc2hBQXdCQ3dzRFFDQUFJQVZJQkVBZ0FDQUROZ0lBSUFCQkJHb2hBQXdCQ3dzTEEwQWdBQ0FFU0FSQUlBQWdBVG9BQUNBQVFRRnFJUUFNQVFzTElBUWdBbXNMNWdRQ0NuOERmaUFBSUFJb0FnQ3RJQUVvQWdDdGZDSU5QZ0lBSUFCQkJHb2lCU0FOUWlDSUlBRW9BZ1N0ZkNBQ0tBSUVyWHdpRFQ0Q0FDQUFRUWhxSWdZZ0FpZ0NDSzBnQVNnQ0NLMThJQTFDSUloOElnMm5JZ00yQWdBZ0FFRU1haUlISUFJb0FneXRJQUVvQWd5dGZDQU5RaUNJZkNJTnB5SUVOZ0lBSUFCQkVHb2lDQ0FDS0FJUXJTQUJLQUlRclh3Z0RVSWdpSHdpRGFjaUNUWUNBQ0FBUVJScUlnb2dBaWdDRkswZ0FTZ0NGSzE4SUExQ0lJaDhJZzArQWdBZ0FFRVlhaUlMSUFJb0FoaXRJQUVvQWhpdGZDQU5RaUNJZkNJT1BnSUFJQUJCSEdvaURDQUNLQUljclNBQktBSWNyWHdnRGtJZ2lId2lEejRDQUNBQUlBOUNJSWdnQ1VGK1NTQU5JQTRnRDRPRHAwRi9SM0lpQVVFQmN5QUpRWDlHY1NJQ1FRRnpJQVJCNXJtNzFYdEpjU0FCY2lJQlFRRnpJQVJCNXJtNzFYdExjU0FDY2lJQ1FRRnpJQU5CdThDaStucEpjU0FCY2lJRVFRRnpJQU5CdThDaStucExjU0FDY2lJQ1FRRnpJQVVvQWdBaUFVR012Y24rZTBseElBUnlRWDl6SWdNZ0FVR012Y24rZTB0eElBSnlJQU1nQUNnQ0FDSUNRY0NDMllGOVMzRnlyWHdpRGFjaUFFRy8vYWIrQW15dElBS3RmQ0lPUGdJQUlBVWdBRUh6d3JhQkJHeXRJQUd0ZkNBT1FpQ0lmQ0lPUGdJQUlBWWdBRUhFdjkyRkJXeXRJQVlvQWdDdGZDQU9RaUNJZkNJT1BnSUFJQWNnQUVHWnhzU3FCR3l0SUFjb0FnQ3RmQ0FPUWlDSWZDSU9QZ0lBSUFnZ0RVTC8vLy8vRDRNZ0NDZ0NBSzE4SUE1Q0lJaDhJZzArQWdBZ0NpQU5RaUNJSUFvb0FnQ3RmQ0lOUGdJQUlBc2dEVUlnaUNBTEtBSUFyWHdpRFQ0Q0FDQU1JQTFDSUlnZ0RDZ0NBSzE4UGdJQUM2TUVBUWwvSUFBZ0FTMEFIa0VJZENBQkxRQWZjaUFCTFFBZFFSQjBjaUFCUVJ4cUlnSXNBQUJCQTNGQkdIUnlOZ0lBSUFCQkJHb2lCQ0FCTFFBYlFRWjBJQUl0QUFCQkFuWnlJQUV0QUJwQkRuUnlJQUZCR1dvaUFpd0FBRUVQY1VFV2RISTJBZ0FnQUVFSWFpSUZJQUV0QUJoQkJIUWdBaTBBQUVFRWRuSWdBUzBBRjBFTWRISWdBVUVXYWlJQ0xBQUFRVDl4UVJSMGNqWUNBQ0FBUVF4cUlnWWdBUzBBRlVFQ2RDQUNMUUFBUVFaMmNpQUJMUUFVUVFwMGNpQUJMUUFUUVJKMGNqWUNBQ0FBUVJCcUlnSWdBUzBBRVVFSWRDQUJMUUFTY2lBQkxRQVFRUkIwY2lBQlFROXFJZ01zQUFCQkEzRkJHSFJ5TmdJQUlBQWdBUzBBRGtFR2RDQURMUUFBUVFKMmNpQUJMUUFOUVE1MGNpQUJRUXhxSWdNc0FBQkJEM0ZCRm5SeUlnYzJBaFFnQUNBQkxRQUxRUVIwSUFNdEFBQkJCSFp5SUFFdEFBcEJESFJ5SUFGQkNXb2lBeXdBQUVFL2NVRVVkSElpQ0RZQ0dDQUFJQUV0QUFoQkFuUWdBeTBBQUVFR2RuSWdBUzBBQjBFS2RISWdBUzBBQmtFU2RISWlBellDSENBQUlBRXRBQVJCQ0hRZ0FTMEFCWElnQVMwQUEwRVFkSElnQVVFQ2FpSUpMQUFBUVFOeFFSaDBjaUlLTmdJZ0lBQWdBUzBBQVVFR2RDQUpMUUFBUVFKMmNpQUJMUUFBUVE1MGNpSUJOZ0lrSUFGQi8vLy9BVVlnQXlBS2NTQUljU0FIY1NBQ0tBSUFjU0FHS0FJQWNTQUZLQUlBY1VILy8vOGZSbkVnQkNnQ0FFRkFheUFBS0FJQVFkRUhha0VhZG1wQi8vLy9IMHR4UVFGekM2OERBUUYvSUFBZ0FVRWNhaUlDS0FJQVFSaDJPZ0FBSUFBZ0FpZ0NBRUVRZGpvQUFTQUFJQUlvQWdCQkNIWTZBQUlnQUNBQ0tBSUFPZ0FESUFBZ0FVRVlhaUlDS0FJQVFSaDJPZ0FFSUFBZ0FpZ0NBRUVRZGpvQUJTQUFJQUlvQWdCQkNIWTZBQVlnQUNBQ0tBSUFPZ0FISUFBZ0FVRVVhaUlDS0FJQVFSaDJPZ0FJSUFBZ0FpZ0NBRUVRZGpvQUNTQUFJQUlvQWdCQkNIWTZBQW9nQUNBQ0tBSUFPZ0FMSUFBZ0FVRVFhaUlDS0FJQVFSaDJPZ0FNSUFBZ0FpZ0NBRUVRZGpvQURTQUFJQUlvQWdCQkNIWTZBQTRnQUNBQ0tBSUFPZ0FQSUFBZ0FVRU1haUlDS0FJQVFSaDJPZ0FRSUFBZ0FpZ0NBRUVRZGpvQUVTQUFJQUlvQWdCQkNIWTZBQklnQUNBQ0tBSUFPZ0FUSUFBZ0FVRUlhaUlDS0FJQVFSaDJPZ0FVSUFBZ0FpZ0NBRUVRZGpvQUZTQUFJQUlvQWdCQkNIWTZBQllnQUNBQ0tBSUFPZ0FYSUFBZ0FVRUVhaUlDS0FJQVFSaDJPZ0FZSUFBZ0FpZ0NBRUVRZGpvQUdTQUFJQUlvQWdCQkNIWTZBQm9nQUNBQ0tBSUFPZ0FiSUFBZ0FTZ0NBRUVZZGpvQUhDQUFJQUVvQWdCQkVIWTZBQjBnQUNBQktBSUFRUWgyT2dBZUlBQWdBU2dDQURvQUh3c1VBUUYvSUFBUUN5RUNJQUVFZnlBQ0JTQUFDd3ZxRWdGQWZ5TUVJUUlqQkVGQWF5UUVJQUlnQVNrQUFEY0FBQ0FDSUFFcEFBZzNBQWdnQWlBQktRQVFOd0FRSUFJZ0FTa0FHRGNBR0NBQ1FTQnFJZ05DQURjQUFDQURRZ0EzQUFnZ0EwSUFOd0FRSUFOQ0FEY0FHQ0FBUWVRQWFpSUJRZWZNcDlBR05nSUFJQUJCaGQyZTIzczJBbWdnQUVIeTVydmpBellDYkNBQVFicnF2NnA2TmdKd0lBQkIvNlM1aUFVMkFuUWdBRUdNMFpYWWVUWUNlQ0FBUWF1emovd0JOZ0o4SUFCQm1acUQzd1UyQW9BQklBQkJBRFlDeEFFZ0FpQUNMQUFBUWR3QWN6b0FBQ0FDUVFGcUlnUWdCQ3dBQUVIY0FITTZBQUFnQWtFQ2FpSUZJQVVzQUFCQjNBQnpPZ0FBSUFKQkEyb2lCaUFHTEFBQVFkd0Fjem9BQUNBQ1FRUnFJZ2NnQnl3QUFFSGNBSE02QUFBZ0FrRUZhaUlJSUFnc0FBQkIzQUJ6T2dBQUlBSkJCbW9pQ1NBSkxBQUFRZHdBY3pvQUFDQUNRUWRxSWdvZ0Npd0FBRUhjQUhNNkFBQWdBa0VJYWlJTElBc3NBQUJCM0FCek9nQUFJQUpCQ1dvaURDQU1MQUFBUWR3QWN6b0FBQ0FDUVFwcUlnMGdEU3dBQUVIY0FITTZBQUFnQWtFTGFpSU9JQTRzQUFCQjNBQnpPZ0FBSUFKQkRHb2lEeUFQTEFBQVFkd0Fjem9BQUNBQ1FRMXFJaEFnRUN3QUFFSGNBSE02QUFBZ0FrRU9haUlSSUJFc0FBQkIzQUJ6T2dBQUlBSkJEMm9pRWlBU0xBQUFRZHdBY3pvQUFDQUNRUkJxSWhNZ0V5d0FBRUhjQUhNNkFBQWdBa0VSYWlJVUlCUXNBQUJCM0FCek9nQUFJQUpCRW1vaUZTQVZMQUFBUWR3QWN6b0FBQ0FDUVJOcUloWWdGaXdBQUVIY0FITTZBQUFnQWtFVWFpSVhJQmNzQUFCQjNBQnpPZ0FBSUFKQkZXb2lHQ0FZTEFBQVFkd0Fjem9BQUNBQ1FSWnFJaGtnR1N3QUFFSGNBSE02QUFBZ0FrRVhhaUlhSUJvc0FBQkIzQUJ6T2dBQUlBSkJHR29pR3lBYkxBQUFRZHdBY3pvQUFDQUNRUmxxSWh3Z0hDd0FBRUhjQUhNNkFBQWdBa0VhYWlJZElCMHNBQUJCM0FCek9nQUFJQUpCRzJvaUhpQWVMQUFBUWR3QWN6b0FBQ0FDUVJ4cUloOGdIeXdBQUVIY0FITTZBQUFnQWtFZGFpSWdJQ0FzQUFCQjNBQnpPZ0FBSUFKQkhtb2lJU0FoTEFBQVFkd0Fjem9BQUNBQ1FSOXFJaUlnSWl3QUFFSGNBSE02QUFBZ0F5QURMQUFBUWR3QWN6b0FBQ0FDUVNGcUlpTWdJeXdBQUVIY0FITTZBQUFnQWtFaWFpSWtJQ1FzQUFCQjNBQnpPZ0FBSUFKQkkyb2lKU0FsTEFBQVFkd0Fjem9BQUNBQ1FTUnFJaVlnSml3QUFFSGNBSE02QUFBZ0FrRWxhaUluSUNjc0FBQkIzQUJ6T2dBQUlBSkJKbW9pS0NBb0xBQUFRZHdBY3pvQUFDQUNRU2RxSWlrZ0tTd0FBRUhjQUhNNkFBQWdBa0VvYWlJcUlDb3NBQUJCM0FCek9nQUFJQUpCS1dvaUt5QXJMQUFBUWR3QWN6b0FBQ0FDUVNwcUlpd2dMQ3dBQUVIY0FITTZBQUFnQWtFcmFpSXRJQzBzQUFCQjNBQnpPZ0FBSUFKQkxHb2lMaUF1TEFBQVFkd0Fjem9BQUNBQ1FTMXFJaThnTHl3QUFFSGNBSE02QUFBZ0FrRXVhaUl3SURBc0FBQkIzQUJ6T2dBQUlBSkJMMm9pTVNBeExBQUFRZHdBY3pvQUFDQUNRVEJxSWpJZ01pd0FBRUhjQUhNNkFBQWdBa0V4YWlJeklETXNBQUJCM0FCek9nQUFJQUpCTW1vaU5DQTBMQUFBUWR3QWN6b0FBQ0FDUVROcUlqVWdOU3dBQUVIY0FITTZBQUFnQWtFMGFpSTJJRFlzQUFCQjNBQnpPZ0FBSUFKQk5Xb2lOeUEzTEFBQVFkd0Fjem9BQUNBQ1FUWnFJamdnT0N3QUFFSGNBSE02QUFBZ0FrRTNhaUk1SURrc0FBQkIzQUJ6T2dBQUlBSkJPR29pT2lBNkxBQUFRZHdBY3pvQUFDQUNRVGxxSWpzZ095d0FBRUhjQUhNNkFBQWdBa0U2YWlJOElEd3NBQUJCM0FCek9nQUFJQUpCTzJvaVBTQTlMQUFBUWR3QWN6b0FBQ0FDUVR4cUlqNGdQaXdBQUVIY0FITTZBQUFnQWtFOWFpSS9JRDhzQUFCQjNBQnpPZ0FBSUFKQlBtb2lRQ0JBTEFBQVFkd0Fjem9BQUNBQ1FUOXFJa0VnUVN3QUFFSGNBSE02QUFBZ0FTQUNRY0FBRUR3Z0FFSG56S2ZRQmpZQ0FDQUFRWVhkbnR0N05nSUVJQUJCOHVhNzR3TTJBZ2dnQUVHNjZyK3FlallDRENBQVFmK2t1WWdGTmdJUUlBQkJqTkdWMkhrMkFoUWdBRUdyczQvOEFUWUNHQ0FBUVptYWc5OEZOZ0ljSUFCQkFEWUNZQ0FDSUFJc0FBQkI2Z0J6T2dBQUlBUWdCQ3dBQUVIcUFITTZBQUFnQlNBRkxBQUFRZW9BY3pvQUFDQUdJQVlzQUFCQjZnQnpPZ0FBSUFjZ0J5d0FBRUhxQUhNNkFBQWdDQ0FJTEFBQVFlb0Fjem9BQUNBSklBa3NBQUJCNmdCek9nQUFJQW9nQ2l3QUFFSHFBSE02QUFBZ0N5QUxMQUFBUWVvQWN6b0FBQ0FNSUF3c0FBQkI2Z0J6T2dBQUlBMGdEU3dBQUVIcUFITTZBQUFnRGlBT0xBQUFRZW9BY3pvQUFDQVBJQThzQUFCQjZnQnpPZ0FBSUJBZ0VDd0FBRUhxQUhNNkFBQWdFU0FSTEFBQVFlb0Fjem9BQUNBU0lCSXNBQUJCNmdCek9nQUFJQk1nRXl3QUFFSHFBSE02QUFBZ0ZDQVVMQUFBUWVvQWN6b0FBQ0FWSUJVc0FBQkI2Z0J6T2dBQUlCWWdGaXdBQUVIcUFITTZBQUFnRnlBWExBQUFRZW9BY3pvQUFDQVlJQmdzQUFCQjZnQnpPZ0FBSUJrZ0dTd0FBRUhxQUhNNkFBQWdHaUFhTEFBQVFlb0Fjem9BQUNBYklCc3NBQUJCNmdCek9nQUFJQndnSEN3QUFFSHFBSE02QUFBZ0hTQWRMQUFBUWVvQWN6b0FBQ0FlSUI0c0FBQkI2Z0J6T2dBQUlCOGdIeXdBQUVIcUFITTZBQUFnSUNBZ0xBQUFRZW9BY3pvQUFDQWhJQ0VzQUFCQjZnQnpPZ0FBSUNJZ0lpd0FBRUhxQUhNNkFBQWdBeUFETEFBQVFlb0Fjem9BQUNBaklDTXNBQUJCNmdCek9nQUFJQ1FnSkN3QUFFSHFBSE02QUFBZ0pTQWxMQUFBUWVvQWN6b0FBQ0FtSUNZc0FBQkI2Z0J6T2dBQUlDY2dKeXdBQUVIcUFITTZBQUFnS0NBb0xBQUFRZW9BY3pvQUFDQXBJQ2tzQUFCQjZnQnpPZ0FBSUNvZ0tpd0FBRUhxQUhNNkFBQWdLeUFyTEFBQVFlb0Fjem9BQUNBc0lDd3NBQUJCNmdCek9nQUFJQzBnTFN3QUFFSHFBSE02QUFBZ0xpQXVMQUFBUWVvQWN6b0FBQ0F2SUM4c0FBQkI2Z0J6T2dBQUlEQWdNQ3dBQUVIcUFITTZBQUFnTVNBeExBQUFRZW9BY3pvQUFDQXlJRElzQUFCQjZnQnpPZ0FBSURNZ015d0FBRUhxQUhNNkFBQWdOQ0EwTEFBQVFlb0Fjem9BQUNBMUlEVXNBQUJCNmdCek9nQUFJRFlnTml3QUFFSHFBSE02QUFBZ055QTNMQUFBUWVvQWN6b0FBQ0E0SURnc0FBQkI2Z0J6T2dBQUlEa2dPU3dBQUVIcUFITTZBQUFnT2lBNkxBQUFRZW9BY3pvQUFDQTdJRHNzQUFCQjZnQnpPZ0FBSUR3Z1BDd0FBRUhxQUhNNkFBQWdQU0E5TEFBQVFlb0Fjem9BQUNBK0lENHNBQUJCNmdCek9nQUFJRDhnUHl3QUFFSHFBSE02QUFBZ1FDQkFMQUFBUWVvQWN6b0FBQ0JCSUVFc0FBQkI2Z0J6T2dBQUlBQWdBa0hBQUJBOElBSWtCQXZmQmdFT2Z5TUVJUXNqQkVHZ0FXb2tCQ0FBSUFFb0FuZzJBbEFnQzBINEFHb2lBaUFCUWRBQWFpSUZLUUlBTndJQUlBSWdCU2tDQ0RjQ0NDQUNJQVVwQWhBM0FoQWdBaUFGS1FJWU53SVlJQUlnQlNrQ0lEY0NJQ0FDRUE4Z0FpZ0NDQ0VISUFJb0Fnd2hDQ0FDS0FJUUlRa2dBaWdDRkNFS0lBSW9BaGdoRHlBQ0tBSWNJUTBnQWlnQ0lDRUdJQUlvQWlRaERDQUxRZEFBYWlJRUlBSW9BZ1FpQTBFYWRDQUNLQUlBY2tILy8vLy9BM0UyQWdBZ0JFRUVhaUlPSUFkQkZuUkJnSUNBL2dOeElBTkJCSFp5TmdJQUlBUkJDR29pQWlBSVFSSjBRWUNBOFA4RGNTQUhRUWgyY2pZQ0FDQUVRUXhxSWdjZ0NVRU9kRUdBZ1AvL0EzRWdDRUVNZG5JMkFnQWdCRUVRYWlJSUlBcEJDblJCZ1BqLy93TnhJQWxCRUhaeU5nSUFJQVJCRkdvaUNTQVBRUVowUWNELy8vOERjU0FLUVJSMmNqWUNBQ0FFUVJocUlnb2dEVUVDZENBUFFSaDJjaUFHUVJ4MGNrSC8vLy8vQTNFMkFnQWdCRUVjYWlJTklBeEJHSFJCZ0lDQStBTnhJQVpCQW5aeU5nSUFJQVJCSUdvaUF5QU1RUVoyTmdJQUlBUkJoQWtRTmlBT0tBSUFJUTRnQWlnQ0FDRUNJQWNvQWdBaEJ5QUlLQUlBSVFnZ0NTZ0NBQ0VKSUFvb0FnQWhEQ0FOS0FJQUlRb2dBeWdDQUNFTklBVWdCQ2dDQUNJRFFmLy8veDl4TmdJQUlBRkIxQUJxSWdZZ0RrRUVkRUh3Ly84ZmNTQURRUnAyY2pZQ0FDQUJJQUpCQ0hSQmdQNy9IM0VnRGtFV2RuSTJBbGdnQVNBSFFReDBRWURnL3g5eElBSkJFblp5TmdKY0lBRWdDRUVRZEVHQWdQd2ZjU0FIUVE1MmNqWUNZQ0FCSUFsQkZIUkJnSURBSDNFZ0NFRUtkbkkyQW1RZ0FTQU1RUmgwUVlDQWdCaHhJQWxCQm5aeU5nSm9JQUVnREVFQ2RrSC8vLzhmY1RZQ2JDQUJJQXBCQW5SQi9QLy9IM0VnREVFY2RuSTJBbkFnQVNBTlFRWjBJQXBCR0haeU5nSjBJQXRCS0dvaUF5QUZFQW9nQ3lBRklBTVFEQ0FCSUFFZ0F4QU1JQUZCS0dvaUF5QURJQXNRRENBRlFRRTJBZ0FnQmtJQU53SUFJQVpDQURjQ0NDQUdRZ0EzQWhBZ0JrSUFOd0lZSUFaQkFEWUNJQ0FBSUFFcEFnQTNBZ0FnQUNBQktRSUlOd0lJSUFBZ0FTa0NFRGNDRUNBQUlBRXBBaGczQWhnZ0FDQUJLUUlnTndJZ0lBQkJLR29pQUNBREtRSUFOd0lBSUFBZ0F5a0NDRGNDQ0NBQUlBTXBBaEEzQWhBZ0FDQURLUUlZTndJWUlBQWdBeWtDSURjQ0lDQUxKQVFMVVFFQmZ5QUFRUUJLSXdNb0FnQWlBU0FBYWlJQUlBRkljU0FBUVFCSWNnUkFFQU1hUVF3UUJFRi9Ed3NqQXlBQU5nSUFJQUFRQWtvRVFCQUJSUVJBSXdNZ0FUWUNBRUVNRUFSQmZ3OExDeUFCQ3lZQkFYOGpCQ0VESXdSQkVHb2tCQ0FESUFJMkFnQWdBQ0FCSUFNUVJTRUFJQU1rQkNBQUM4RUVBUU4vSUFBZ0FTZ0NBRUgvLy84ZmNUWUNBQ0FBSUFGQkJHb2lBaWdDQUVFR2RFSEEvLzhmY1NBQktBSUFRUnAyY2pZQ0JDQUFJQUZCQ0dvaUF5Z0NBRUVNZEVHQTRQOGZjU0FDS0FJQVFSUjJjallDQ0NBQUlBRkJER29pQkNnQ0FFRVNkRUdBZ1BBZmNTQURLQUlBUVE1MmNqWUNEQ0FBSUFGQkVHb2lBaWdDQUVFWWRFR0FnSUFZY1NBRUtBSUFRUWgyY2pZQ0VDQUFJQUlvQWdCQkFuWkIvLy8vSDNFMkFoUWdBQ0FCUVJScUlnTW9BZ0JCQkhSQjhQLy9IM0VnQWlnQ0FFRWNkbkkyQWhnZ0FDQUJRUmhxSWdJb0FnQkJDblJCZ1BqL0gzRWdBeWdDQUVFV2RuSTJBaHdnQUNBQlFSeHFJZ01vQWdCQkVIUkJnSUQ4SDNFZ0FpZ0NBRUVRZG5JMkFpQWdBQ0FES0FJQVFRcDJOZ0lrSUFBZ0FVRWdhaUlDS0FJQVFmLy8veDl4TmdJb0lBQWdBVUVrYWlJREtBSUFRUVowUWNELy94OXhJQUlvQWdCQkduWnlOZ0lzSUFBZ0FVRW9haUlDS0FJQVFReDBRWURnL3g5eElBTW9BZ0JCRkhaeU5nSXdJQUFnQVVFc2FpSURLQUlBUVJKMFFZQ0E4Qjl4SUFJb0FnQkJEblp5TmdJMElBQWdBVUV3YWlJQ0tBSUFRUmgwUVlDQWdCaHhJQU1vQWdCQkNIWnlOZ0k0SUFBZ0FpZ0NBRUVDZGtILy8vOGZjVFlDUENBQVFVQnJJQUZCTkdvaUF5Z0NBRUVFZEVIdy8vOGZjU0FDS0FJQVFSeDJjallDQUNBQUlBRkJPR29pQWlnQ0FFRUtkRUdBK1A4ZmNTQURLQUlBUVJaMmNqWUNSQ0FBSUFGQlBHb2lBU2dDQUVFUWRFR0FnUHdmY1NBQ0tBSUFRUkIyY2pZQ1NDQUFJQUVvQWdCQkNuWTJBa3dnQUVFQU5nSlFDNUlxQVY5L0l3UWhCeU1FUWNBRGFpUUVJQWRCb0FGcUlRZ2dCMEg0QUdvaENpQUJRZmdBYWlFOElBZEJrQU5xSWdZZ0FVSFFBR29pQ3hBS0lBZEI2QUpxSWdNZ0FTa0NBRGNDQUNBRElBRXBBZ2czQWdnZ0F5QUJLUUlRTndJUUlBTWdBU2tDR0RjQ0dDQURJQUVwQWlBM0FpQWdBMEVrYWlJcUtBSUFJaFZCRm5ZaUJFSFJCMndnQXlnQ0FHb2hCU0FFUVFaMElBTkJCR29pSENnQ0FHb2dCVUVhZG1vaUZrRWFkaUFEUVFocUloMG9BZ0JxSWhkQkduWWdBMEVNYWlJZUtBSUFhaUlZUVJwMklBTkJFR29pRGlnQ0FHb2lHVUVhZGlBRFFSUnFJZ2tvQWdCcUlnOUJHbllnQTBFWWFpSVFLQUlBYWlJalFScDJJQU5CSEdvaURDZ0NBR29pSkVFYWRpQURRU0JxSWg4b0FnQnFJUVFnQXlBRlFmLy8veDl4TmdJQUlCd2dGa0gvLy84ZmNUWUNBQ0FkSUJkQi8vLy9IM0UyQWdBZ0hpQVlRZi8vL3g5eE5nSUFJQTRnR1VILy8vOGZjVFlDQUNBSklBOUIvLy8vSDNFMkFnQWdFQ0FqUWYvLy94OXhOZ0lBSUF3Z0pFSC8vLzhmY1RZQ0FDQWZJQVJCLy8vL0gzRTJBZ0FnS2lBRVFScDJJQlZCLy8vL0FYRnFOZ0lBSUFkQndBSnFJZ1FnQWlBR0VBd2dBU2dDVENJYVFSWjJJZ1ZCMFFkc0lBRW9BaWhxSVNVZ0JVRUdkQ0FCS0FJc2FpQWxRUnAyYWlJc1FScDJJQUVvQWpCcUlpMUJHbllnQVNnQ05Hb2lMa0VhZGlBQktBSTRhaUl2UVJwMklBRW9BanhxSWpCQkduWWdBVUZBYXlnQ0FHb2lKa0VhZGlBQktBSkVhaUluUVJwMklBRW9Ba2hxSVNBZ0IwR1lBbW9pQlNBQ1FTaHFJbGdnQmhBTUlBVWdCU0FMRUF3Z0IwSHdBV29pQVNBREtRSUFOd0lBSUFFZ0F5a0NDRGNDQ0NBQklBTXBBaEEzQWhBZ0FTQURLUUlZTndJWUlBRWdBeWtDSURjQ0lDQUJJQUVvQWdBZ0JDZ0NBQ0lHYWpZQ0FDQUJRUVJxSWhVZ0ZTZ0NBQ0FFS0FJRUlpRnFOZ0lBSUFGQkNHb2lGaUFXS0FJQUlBUW9BZ2dpRFdvMkFnQWdBVUVNYWlJWElCY29BZ0FnQkNnQ0RDSWlhallDQUNBQlFSQnFJaGdnR0NnQ0FDQUVLQUlRSWhGcU5nSUFJQUZCRkdvaUdTQVpLQUlBSUFRb0FoUWlLR28yQWdBZ0FVRVlhaUlQSUE4b0FnQWdCQ2dDR0NJU2FqWUNBQ0FCUVJ4cUlpTWdJeWdDQUNBRUtBSWNJaWxxTmdJQUlBRkJJR29pSkNBa0tBSUFJQVFvQWlBaUcybzJBZ0FnQVVFa2FpSXhJREVvQWdBZ0JDZ0NKQ0l5YWpZQ0FDQUZLQUlBSUNWQi8vLy9IM0VpUG1vaE5TQUZLQUlFSUN4Qi8vLy9IM0VpUDJvaExDQUZLQUlJSUMxQi8vLy9IM0VpUUdvaExTQUZLQUlNSUM1Qi8vLy9IM0VpUVdvaExpQUZLQUlRSUM5Qi8vLy9IM0VpUW1vaEx5QUZLQUlVSURCQi8vLy9IM0VpUTJvaE1DQUZLQUlZSUNaQi8vLy9IM0VpUkdvaEppQUZLQUljSUNkQi8vLy9IM0VpUldvaEp5QUZLQUlnSUNCQi8vLy9IM0VpUm1vaE15QUZLQUlrSUNCQkduWWdHa0gvLy84QmNXb2lSMm9oSlNBSFFkQUFhaUlFSUFFUUNpQUhRU2hxSWdWQnZPSC8vd0FnQm1zMkFnQWdCVUVFYWlJVVFmejkvLzhBSUNGck5nSUFJQVZCQ0dvaUlVSDgvLy8vQUNBTmF6WUNBQ0FGUVF4cUlnMUIvUC8vL3dBZ0ltczJBZ0FnQlVFUWFpSWlRZnovLy84QUlCRnJOZ0lBSUFWQkZHb2lFVUg4Ly8vL0FDQW9hellDQUNBRlFSaHFJaWhCL1AvLy93QWdFbXMyQWdBZ0JVRWNhaUlTUWZ6Ly8vOEFJQ2xyTmdJQUlBVkJJR29pS1VIOC8vLy9BQ0FiYXpZQ0FDQUZRU1JxSWh0Qi9QLy9CeUF5YXpZQ0FDQUhRY2dCYWlJR0lBTWdCUkFNSUFRZ0JDZ0NBQ0FHS0FJQWFqWUNBQ0FFUVFScUlqSW9BZ0FnQmlnQ0JHb2hFeUF5SUJNMkFnQWdCRUVJYWlJcktBSUFJQVlvQWdocUlUUWdLeUEwTmdJQUlBUkJER29pUFNnQ0FDQUdLQUlNYWlFMklEMGdOallDQUNBRVFSQnFJa2tvQWdBZ0JpZ0NFR29oTnlCSklEYzJBZ0FnQkVFVWFpSktLQUlBSUFZb0FoUnFJVGdnU2lBNE5nSUFJQVJCR0dvaVN5Z0NBQ0FHS0FJWWFpRTVJRXNnT1RZQ0FDQUVRUnhxSWt3b0FnQWdCaWdDSEdvaE9pQk1JRG8yQWdBZ0JFRWdhaUpOS0FJQUlBWW9BaUJxSVRzZ1RTQTdOZ0lBSUFSQkpHb2lUaWdDQUNBR0tBSWthaUVHSUU0Z0JqWUNBQ0FsUVJaMklocEIwUWRzSURWcUlTQWdHa0VHZENBc2FpQWdRUnAyYWlKUFFScDJJQzFxSWxCQkduWWdMbW9pVVVFYWRpQXZhaUpTUVJwMklEQnFJbE5CR25ZZ0ptb2lWRUVhZGlBbmFpSlZRUnAySUROcUlsWkJHbllnSlVILy8vOEJjV29oVnlBR1FSWjJJa2hCMFFkc0lBUW9BZ0JxSVJvZ1NFRUdkQ0FUYWlBYVFScDJhaUlUUVJwMklEUnFJalJCR25ZZ05tb2lOa0VhZGlBM2FpSTNRUnAySURocUlqaEJHbllnT1dvaU9VRWFkaUE2YWlJNlFScDJJRHRxSWp0QkduWWdCa0gvLy84QmNXb2hCaUFIUVFScUlVZ2dCMEVJYWlGWklBZEJER29oV2lBSFFSQnFJVnNnQjBFVWFpRmNJQWRCR0dvaFhTQUhRUnhxSVY0Z0IwRWdhaUZmSUFkQkpHb2hZQ0ErUVFGMElUNGdQMEVCZENFL0lFQkJBWFFoUUNCQlFRRjBJVUVnUWtFQmRDRkNJRU5CQVhRaFF5QkVRUUYwSVVRZ1JVRUJkQ0ZGSUVaQkFYUWhSaUJIUVFGMElVY2dCU2dDQUNBREtBSUFhaUZoSUJRb0FnQWdIQ2dDQUdvaEhDQWhLQUlBSUIwb0FnQnFJUjBnRFNnQ0FDQWVLQUlBYWlFZUlDSW9BZ0FnRGlnQ0FHb2hEaUFSS0FJQUlBa29BZ0JxSVFrZ0tDZ0NBQ0FRS0FJQWFpRVFJQklvQWdBZ0RDZ0NBR29oRENBcEtBSUFJQjhvQWdCcUlSOGdHeWdDQUNBcUtBSUFhaUVxSUFRb0FnQWhCQ0FISUU4Z0lISWdVSElnVVhJZ1VuSWdVM0lnVkhJZ1ZYSWdWbkpCLy8vL0gzRWdWM0lFZnlCUFFjQUFjeUFnUWRBSGMzRWdVSEVnVVhFZ1VuRWdVM0VnVkhFZ1ZYRWdWbkVnVjBHQWdJQWVjM0ZCLy8vL0gwWUZRUUVMSUJNZ0duSWdOSElnTm5JZ04zSWdPSElnT1hJZ09uSWdPM0pCLy8vL0gzRWdCbklFZnlBVFFjQUFjeUFhUWRBSGMzRWdOSEVnTm5FZ04zRWdPSEVnT1hFZ09uRWdPM0VnQmtHQWdJQWVjM0ZCLy8vL0gwWUZRUUVMY1NJREJIOGdQZ1VnQkFzMkFnQWdNaWdDQUNFRUlFZ2dBd1IvSUQ4RklBUUxOZ0lBSUNzb0FnQWhCQ0JaSUFNRWZ5QkFCU0FFQ3pZQ0FDQTlLQUlBSVFRZ1dpQURCSDhnUVFVZ0JBczJBZ0FnU1NnQ0FDRUVJRnNnQXdSL0lFSUZJQVFMTmdJQUlFb29BZ0FoQkNCY0lBTUVmeUJEQlNBRUN6WUNBQ0JMS0FJQUlRUWdYU0FEQkg4Z1JBVWdCQXMyQWdBZ1RDZ0NBQ0VFSUY0Z0F3Ui9JRVVGSUFRTE5nSUFJRTBvQWdBaEJDQmZJQU1FZnlCR0JTQUVDellDQUNCT0tBSUFJUVFnWUNBREJIOGdSd1VnQkFzMkFnQWdCU0FEQkg4Z1lRVWdOUXMyQWdBZ0ZDQURCSDhnSEFVZ0xBczJBZ0FnSVNBREJIOGdIUVVnTFFzMkFnQWdEU0FEQkg4Z0hnVWdMZ3MyQWdBZ0lpQURCSDhnRGdVZ0x3czJBZ0FnRVNBREJIOGdDUVVnTUFzMkFnQWdLQ0FEQkg4Z0VBVWdKZ3MyQWdBZ0VpQURCSDhnREFVZ0p3czJBZ0FnS1NBREJIOGdId1VnTXdzMkFnQWdHeUFEQkg4Z0tnVWdKUXMyQWdBZ0NDQUZFQW9nQ2lBSUlBRVFEQ0FJSUFnUUNpQUlLQUlBSVFRZ0NDQURCSDhnTlFVZ0JBczJBZ0FnQ0VFRWFpSWdLQUlBSVFRZ0lDQURCSDhnTEFVZ0JBczJBZ0FnQ0VFSWFpSWFLQUlBSVFRZ0dpQURCSDhnTFFVZ0JBczJBZ0FnQ0VFTWFpSXFLQUlBSVFRZ0tpQURCSDhnTGdVZ0JBczJBZ0FnQ0VFUWFpSWNLQUlBSVFRZ0hDQURCSDhnTHdVZ0JBczJBZ0FnQ0VFVWFpSWRLQUlBSVFRZ0hTQURCSDhnTUFVZ0JBczJBZ0FnQ0VFWWFpSWVLQUlBSVFRZ0hpQURCSDhnSmdVZ0JBczJBZ0FnQ0VFY2FpSW1LQUlBSVFRZ0ppQURCSDhnSndVZ0JBczJBZ0FnQ0VFZ2FpSW5LQUlBSVFRZ0p5QURCSDhnTXdVZ0JBczJBZ0FnQ0VFa2FpSXpLQUlBSVFRZ015QURCSDhnSlFVZ0JBczJBZ0FnQVNBSEVBb2dBRUhRQUdvaUJDQUxJQVVRRENBQVFmUUFhaUlGS0FJQUlndEJGbllpQmtIUkIyd2dCQ2dDQUNJUmFpRURJQVpCQm5RZ0FFSFVBR29pQmlnQ0FDSW9haUFEUVJwMmFpSU9RUnAySUFCQjJBQnFJaVVvQWdBaUVtb2lDVUVhZGlBQVFkd0FhaUkxS0FJQUlpbHFJaEJCR25ZZ0FFSGdBR29pTENnQ0FDSWJhaUlNUVJwMklBQkI1QUJxSWkwb0FnQWlNbW9pSDBFYWRpQUFRZWdBYWlJdUtBSUFJaE5xSWhSQkduWWdBRUhzQUdvaUx5Z0NBQ0lyYWlJaFFScDJJQUJCOEFCcUlqQW9BZ0FpTkdvaURVRWFkaUFMUWYvLy93RnhhaUVpSUE0Z0EzSWdDWElnRUhJZ0RISWdIM0lnRkhJZ0lYSWdEWEpCLy8vL0gzRWdJbklFZnlBT1FjQUFjeUFEUWRBSGMzRWdDWEVnRUhFZ0RIRWdIM0VnRkhFZ0lYRWdEWEVnSWtHQWdJQWVjM0ZCLy8vL0gwWUZRUUVMUVFGeElEd29BZ0JCZjNOeElUMGdCQ0FSUVFGME5nSUFJQVlnS0VFQmREWUNBQ0FsSUJKQkFYUTJBZ0FnTlNBcFFRRjBOZ0lBSUN3Z0cwRUJkRFlDQUNBdElESkJBWFEyQWdBZ0xpQVRRUUYwTmdJQUlDOGdLMEVCZERZQ0FDQXdJRFJCQVhRMkFnQWdCU0FMUVFGME5nSUFJQXBCdk9ILy93QWdDaWdDQUdzaUt6WUNBRUg4L2YvL0FDQUtRUVJxSWdNb0FnQnJJUXNnQXlBTE5nSUFRZnovLy84QUlBcEJDR29pRGlnQ0FHc2hDU0FPSUFrMkFnQkIvUC8vL3dBZ0NrRU1haUlRS0FJQWF5RU1JQkFnRERZQ0FFSDgvLy8vQUNBS1FSQnFJaDhvQWdCcklSUWdIeUFVTmdJQVFmei8vLzhBSUFwQkZHb2lJU2dDQUdzaERTQWhJQTAyQWdCQi9QLy8vd0FnQ2tFWWFpSWlLQUlBYXlFUklDSWdFVFlDQUVIOC8vLy9BQ0FLUVJ4cUlpZ29BZ0JySVJJZ0tDQVNOZ0lBUWZ6Ly8vOEFJQXBCSUdvaUtTZ0NBR3NoR3lBcElCczJBZ0JCL1AvL0J5QUtRU1JxSWpJb0FnQnJJUk1nTWlBVE5nSUFJREVvQWdBZ0Uyb2lORUVXZGlJMlFkRUhiQ0FCS0FJQUlDdHFhaUVUSURaQkJuUWdGU2dDQUNBTGFtb2dFMEVhZG1vaUswRWFkaUFXS0FJQUlBbHFhaUlKUVJwMklCY29BZ0FnREdwcUlneEJHbllnR0NnQ0FDQVVhbW9pRkVFYWRpQVpLQUlBSUExcWFpSU5RUnAySUE4b0FnQWdFV3BxSWhGQkduWWdJeWdDQUNBU2Ftb2lFa0VhZGlBa0tBSUFJQnRxYWlFTElBRWdFMEgvLy84ZmNTSWJOZ0lBSUJVZ0swSC8vLzhmY1NJVE5nSUFJQllnQ1VILy8vOGZjU0lKTmdJQUlCY2dERUgvLy84ZmNTSU1OZ0lBSUJnZ0ZFSC8vLzhmY1NJVU5nSUFJQmtnRFVILy8vOGZjU0lOTmdJQUlBOGdFVUgvLy84ZmNTSVJOZ0lBSUNNZ0VrSC8vLzhmY1NJU05nSUFJQ1FnQzBILy8vOGZjU0lyTmdJQUlERWdDMEVhZGlBMFFmLy8vd0Z4YWlJTE5nSUFJQUFnQVNrQ0FEY0NBQ0FBSUFFcEFnZzNBZ2dnQUNBQktRSVFOd0lRSUFBZ0FTa0NHRGNDR0NBQUlBRXBBaUEzQWlBZ0FTQWJRUUYwSUFvb0FnQnFOZ0lBSUJVZ0UwRUJkQ0FES0FJQWFqWUNBQ0FXSUFsQkFYUWdEaWdDQUdvMkFnQWdGeUFNUVFGMElCQW9BZ0JxTmdJQUlCZ2dGRUVCZENBZktBSUFhallDQUNBWklBMUJBWFFnSVNnQ0FHbzJBZ0FnRHlBUlFRRjBJQ0lvQWdCcU5nSUFJQ01nRWtFQmRDQW9LQUlBYWpZQ0FDQWtJQ3RCQVhRZ0tTZ0NBR28yQWdBZ01TQUxRUUYwSURJb0FnQnFOZ0lBSUFFZ0FTQUhFQXdnQVNBQktBSUFJQWdvQWdCcUlnRTJBZ0FnRlNBVktBSUFJQ0FvQWdCcUlnTTJBZ0FnRmlBV0tBSUFJQm9vQWdCcUlnZzJBZ0FnRnlBWEtBSUFJQ29vQWdCcUlnbzJBZ0FnR0NBWUtBSUFJQndvQWdCcUloVTJBZ0FnR1NBWktBSUFJQjBvQWdCcUloWTJBZ0FnRHlBUEtBSUFJQjRvQWdCcUloYzJBZ0FnSXlBaktBSUFJQ1lvQWdCcUloZzJBZ0FnSkNBa0tBSUFJQ2NvQWdCcUloazJBZ0FnTVNBeEtBSUFJRE1vQWdCcUlnODJBZ0JCK1AvL0R5QVBheUlNUVJaMklnOUIwUWRzUWZqQy8vOEJJQUZyYWlFQklBOUJCblJCK1B2Ly93RWdBMnRxSUFGQkduWnFJaHhCR25aQitQLy8vd0VnQ0d0cUloMUJHblpCK1AvLy93RWdDbXRxSWg1QkduWkIrUC8vL3dFZ0ZXdHFJZzVCR25aQitQLy8vd0VnRm10cUlnbEJHblpCK1AvLy93RWdGMnRxSWhCQkduWkIrUC8vL3dFZ0dHdHFJaDlCR25aQitQLy8vd0VnR1d0cUlRTWdBQ0FBS0FJQVFRSjBJaFEyQWdBZ0FFRUVhaUlJS0FJQVFRSjBJUW9nQ0NBS05nSUFJQUJCQ0dvaUZTZ0NBRUVDZENFV0lCVWdGallDQUNBQVFReHFJaGNvQWdCQkFuUWhHQ0FYSUJnMkFnQWdBRUVRYWlJWktBSUFRUUowSVE4Z0dTQVBOZ0lBSUFCQkZHb2lJeWdDQUVFQ2RDRWtJQ01nSkRZQ0FDQUFRUmhxSWpFb0FnQkJBblFoSmlBeElDWTJBZ0FnQUVFY2FpSW5LQUlBUVFKMElUTWdKeUF6TmdJQUlBQkJJR29pSUNnQ0FFRUNkQ0VhSUNBZ0dqWUNBQ0FBUVNScUlnc29BZ0JCQW5RaEtpQUxJQ28yQWdBZ0FFRW9haUloSUFGQkFuUkIvUC8vL3dCeElnMDJBZ0FnQUVFc2FpSWlJQnhCQW5SQi9QLy8vd0J4SWhFMkFnQWdBRUV3YWlJb0lCMUJBblJCL1AvLy93QnhJaEkyQWdBZ0FFRTBhaUlwSUI1QkFuUkIvUC8vL3dCeEloczJBZ0FnQUVFNGFpSWNJQTVCQW5SQi9QLy8vd0J4TmdJQUlBQkJQR29pSFNBSlFRSjBRZnovLy84QWNUWUNBQ0FBUVVCckloNGdFRUVDZEVIOC8vLy9BSEUyQWdBZ0FFSEVBR29pRGlBZlFRSjBRZnovLy84QWNUWUNBQ0FBUWNnQWFpSUpJQU5CQW5SQi9QLy8vd0J4TmdJQUlBQkJ6QUJxSWhBZ0EwRWFkaUFNUWYvLy93Rnhha0VDZERZQ0FDQThLQUlBSWdOQmYyb2hBU0FBSUFJb0FnQkJBQ0FEYXlJRGNTQVVJQUZ4Y2pZQ0FDQUlJQUlvQWdRZ0EzRWdDaUFCY1hJMkFnQWdGU0FDS0FJSUlBTnhJQllnQVhGeU5nSUFJQmNnQWlnQ0RDQURjU0FZSUFGeGNqWUNBQ0FaSUFJb0FoQWdBM0VnRHlBQmNYSTJBZ0FnSXlBQ0tBSVVJQU54SUNRZ0FYRnlOZ0lBSURFZ0FpZ0NHQ0FEY1NBbUlBRnhjallDQUNBbklBSW9BaHdnQTNFZ015QUJjWEkyQWdBZ0lDQUNLQUlnSUFOeElCb2dBWEZ5TmdJQUlBc2dBaWdDSkNBRGNTQXFJQUZ4Y2pZQ0FDQThLQUlBSWdOQmYyb2hBU0FoSUZnb0FnQkJBQ0FEYXlJRGNTQU5JQUZ4Y2pZQ0FDQWlJQUlvQWl3Z0EzRWdFU0FCY1hJMkFnQWdLQ0FDS0FJd0lBTnhJQklnQVhGeU5nSUFJQ2tnQWlnQ05DQURjU0FiSUFGeGNqWUNBQ0FjSUFJb0FqZ2dBM0VnSENnQ0FDQUJjWEkyQWdBZ0hTQUNLQUk4SUFOeElCMG9BZ0FnQVhGeU5nSUFJQjRnQWtGQWF5Z0NBQ0FEY1NBZUtBSUFJQUZ4Y2pZQ0FDQU9JQUlvQWtRZ0EzRWdEaWdDQUNBQmNYSTJBZ0FnQ1NBQ0tBSklJQU54SUFrb0FnQWdBWEZ5TmdJQUlCQWdBaWdDVENBRGNTQVFLQUlBSUFGeGNqWUNBQ0FFSUFRb0FnQWdQQ2dDQUNJQ1FYOXFJZ0Z4SUFKQkFYRnlOZ0lBSUFZZ0JpZ0NBQ0FCY1RZQ0FDQWxJQ1VvQWdBZ0FYRTJBZ0FnTlNBMUtBSUFJQUZ4TmdJQUlDd2dMQ2dDQUNBQmNUWUNBQ0F0SUMwb0FnQWdBWEUyQWdBZ0xpQXVLQUlBSUFGeE5nSUFJQzhnTHlnQ0FDQUJjVFlDQUNBd0lEQW9BZ0FnQVhFMkFnQWdCU0FGS0FJQUlBRnhOZ0lBSUFBZ1BUWUNlQ0FISkFRTGdRRUNBbjhCZmlBQXB5RUNJQUJDLy8vLy93OVdCRUFEUUNBQlFYOXFJZ0VnQUVJS2dxZEIvd0Z4UVRCeU9nQUFJQUJDQ29BaEJDQUFRdi8vLy8rZkFWWUVRQ0FFSVFBTUFRc0xJQVNuSVFJTElBSUVRQU5BSUFGQmYyb2lBU0FDUVFwd1FUQnlPZ0FBSUFKQkNtNGhBeUFDUVFwUEJFQWdBeUVDREFFTEN3c2dBUXV2RndJZGZ3SitJQUFnQWlnQ0FLMGdBU2dDQUsxK0lpQStBZ0FnQWtFRWFpSURLQUlBclNBQktBSUFyWDRpSWFjaUVDQWdRaUNJcDJvaURDQUNLQUlBclNBQlFRUnFJZ1FvQWdDdGZpSWdweUlOYWlJS0lBMUpJQ0JDSUlpbmFpRU5JQUFnQ2pZQ0JDQU1JQkJKSUNGQ0lJaW5haUFOYWlJTUlBSkJDR29pRUNnQ0FLMGdBU2dDQUsxK0lpQ25JZ3BxSWhJZ0Nra2dJRUlnaUtkcUlnb2dEQ0FOU1dvaUNDQVNJQU1vQWdDdElBUW9BZ0N0ZmlJZ3B5SU5haUlNSUExSklDQkNJSWluYWlJU2FpSVRJQXdnQWlnQ0FLMGdBVUVJYWlJTktBSUFyWDRpSUtjaURHb2lDU0FNU1NBZ1FpQ0lwMm9pQzJvaERDQUFJQWsyQWdnZ0V5QVNTU0FJSUFwSmFpQU1JQXRKYWlBTUlBSkJER29pRENnQ0FLMGdBU2dDQUsxK0lpQ25JZ3BxSWhJZ0Nra2dJRUlnaUtkcUloTnFJZ2tnRWlBUUtBSUFyU0FFS0FJQXJYNGlJS2NpQ21vaUVpQUtTU0FnUWlDSXAyb2lDMm9pQnlBU0lBTW9BZ0N0SUEwb0FnQ3RmaUlncHlJS2FpSUlJQXBKSUNCQ0lJaW5haUlPYWlFU0lBZ2dBaWdDQUswZ0FVRU1haUlLS0FJQXJYNGlJS2NpQ0dvaUJTQUlTU0FnUWlDSXAyb2lCaUFTYWlFSUlBQWdCVFlDRENBSElBdEpJQWtnRTBscUlCSWdEa2xxSUFnZ0JrbHFJQWdnQWtFUWFpSVNLQUlBclNBQktBSUFyWDRpSUtjaUNHb2lFeUFJU1NBZ1FpQ0lwMm9pQjJvaURpQVRJQXdvQWdDdElBUW9BZ0N0ZmlJZ3B5SUlhaUlUSUFoSklDQkNJSWluYWlJRmFpSUdJQk1nRUNnQ0FLMGdEU2dDQUsxK0lpQ25JZ2hxSWdrZ0NFa2dJRUlnaUtkcUloRnFJUk1nQ1NBREtBSUFyU0FLS0FJQXJYNGlJS2NpQ0dvaUN5QUlTU0FnUWlDSXAyb2lEeUFUYWlFSklBc2dBaWdDQUswZ0FVRVFhaUlJS0FJQXJYNGlJS2NpQzJvaUZDQUxTU0FnUWlDSXAyb2lGU0FKYWlFTElBQWdGRFlDRUNBR0lBVkpJQTRnQjBscUlCTWdFVWxxSUFrZ0QwbHFJQXNnRlVscUlBc2dBa0VVYWlJVEtBSUFyU0FCS0FJQXJYNGlJS2NpQ1dvaUN5QUpTU0FnUWlDSXAyb2lCbW9pRVNBTElCSW9BZ0N0SUFRb0FnQ3RmaUlncHlJSmFpSUxJQWxKSUNCQ0lJaW5haUlQYWlJVUlBc2dEQ2dDQUswZ0RTZ0NBSzErSWlDbklnbHFJZ2NnQ1VrZ0lFSWdpS2RxSWhWcUlRc2dCeUFRS0FJQXJTQUtLQUlBclg0aUlLY2lDV29pRGlBSlNTQWdRaUNJcDJvaUZpQUxhaUVISUE0Z0F5Z0NBSzBnQ0NnQ0FLMStJaUNuSWdscUlnVWdDVWtnSUVJZ2lLZHFJaGNnQjJvaERpQUZJQUlvQWdDdElBRkJGR29pQ1NnQ0FLMStJaUNuSWdWcUloa2dCVWtnSUVJZ2lLZHFJaGdnRG1vaEJTQUFJQmsyQWhRZ0ZDQVBTU0FSSUFaSmFpQUxJQlZKYWlBSElCWkphaUFPSUJkSmFpQUZJQmhKYWlBRklBSkJHR29pQ3lnQ0FLMGdBU2dDQUsxK0lpQ25JZ2RxSWc0Z0Iwa2dJRUlnaUtkcUloUnFJaFVnRGlBVEtBSUFyU0FFS0FJQXJYNGlJS2NpQjJvaURpQUhTU0FnUWlDSXAyb2lGbW9pRnlBT0lCSW9BZ0N0SUEwb0FnQ3RmaUlncHlJSGFpSUZJQWRKSUNCQ0lJaW5haUlaYWlFT0lBVWdEQ2dDQUswZ0NpZ0NBSzErSWlDbklnZHFJZ1lnQjBrZ0lFSWdpS2RxSWhnZ0Rtb2hCU0FHSUJBb0FnQ3RJQWdvQWdDdGZpSWdweUlIYWlJUklBZEpJQ0JDSUlpbmFpSWFJQVZxSVFZZ0VTQURLQUlBclNBSktBSUFyWDRpSUtjaUIyb2lEeUFIU1NBZ1FpQ0lwMm9pR3lBR2FpRVJJQThnQWlnQ0FLMGdBVUVZYWlJSEtBSUFyWDRpSUtjaUQyb2lIU0FQU1NBZ1FpQ0lwMm9pSENBUmFpRVBJQUFnSFRZQ0dDQVhJQlpKSUJVZ0ZFbHFJQTRnR1VscUlBVWdHRWxxSUFZZ0drbHFJQkVnRzBscUlBOGdIRWxxSUE4Z0FrRWNhaUlPS0FJQXJTQUJLQUlBclg0aUlLY2lCV29pQmlBRlNTQWdRaUNJcDJvaUZXb2lGaUFHSUFzb0FnQ3RJQVFvQWdDdGZpSWdweUlGYWlJR0lBVkpJQ0JDSUlpbmFpSVhhaUlaSUFZZ0V5Z0NBSzBnRFNnQ0FLMStJaUNuSWdWcUlnWWdCVWtnSUVJZ2lLZHFJaGhxSVFVZ0JpQVNLQUlBclNBS0tBSUFyWDRpSUtjaUJtb2lFU0FHU1NBZ1FpQ0lwMm9pR2lBRmFpRUdJQkVnRENnQ0FLMGdDQ2dDQUsxK0lpQ25JaEZxSWc4Z0VVa2dJRUlnaUtkcUloc2dCbW9oRVNBUElCQW9BZ0N0SUFrb0FnQ3RmaUlncHlJUGFpSVVJQTlKSUNCQ0lJaW5haUlkSUJGcUlROGdGQ0FES0FJQXJTQUhLQUlBclg0aUlLY2lGR29pSENBVVNTQWdRaUNJcDJvaUhpQVBhaUVVSUJ3Z0FpZ0NBSzBnQVVFY2FpSUJLQUlBclg0aUlLY2lBbW9pSENBQ1NTQWdRaUNJcDJvaUh5QVVhaUVDSUFBZ0hEWUNIQ0FaSUJkSklCWWdGVWxxSUFVZ0dFbHFJQVlnR2tscUlCRWdHMGxxSUE4Z0hVbHFJQlFnSGtscUlBSWdIMGxxSUFJZ0RpZ0NBSzBnQkNnQ0FLMStJaUNuSWdKcUlnUWdBa2tnSUVJZ2lLZHFJaEZxSWc4Z0JDQUxLQUlBclNBTktBSUFyWDRpSUtjaUFtb2lCQ0FDU1NBZ1FpQ0lwMm9pRkdvaUZTQUVJQk1vQWdDdElBb29BZ0N0ZmlJZ3B5SUNhaUlFSUFKSklDQkNJSWluYWlJV2FpRUNJQVFnRWlnQ0FLMGdDQ2dDQUsxK0lpQ25JZ1JxSWdVZ0JFa2dJRUlnaUtkcUloY2dBbW9oQkNBRklBd29BZ0N0SUFrb0FnQ3RmaUlncHlJRmFpSUdJQVZKSUNCQ0lJaW5haUlaSUFScUlRVWdCaUFRS0FJQXJTQUhLQUlBclg0aUlLY2lCbW9pR0NBR1NTQWdRaUNJcDJvaUdpQUZhaUVHSUJnZ0F5Z0NBSzBnQVNnQ0FLMStJaUNuSWdOcUloZ2dBMGtnSUVJZ2lLZHFJaHNnQm1vaEF5QUFJQmcyQWlBZ0ZTQVVTU0FQSUJGSmFpQUNJQlpKYWlBRUlCZEphaUFGSUJsSmFpQUdJQnBKYWlBRElCdEphaUFESUE0b0FnQ3RJQTBvQWdDdGZpSWdweUlDYWlJRElBSkpJQ0JDSUlpbmFpSU5haUlGSUFNZ0N5Z0NBSzBnQ2lnQ0FLMStJaUNuSWdKcUlnTWdBa2tnSUVJZ2lLZHFJZ1pxSWhFZ0F5QVRLQUlBclNBSUtBSUFyWDRpSUtjaUFtb2lBeUFDU1NBZ1FpQ0lwMm9pRDJvaEFpQURJQklvQWdDdElBa29BZ0N0ZmlJZ3B5SURhaUlFSUFOSklDQkNJSWluYWlJVUlBSnFJUU1nQkNBTUtBSUFyU0FIS0FJQXJYNGlJS2NpQkdvaUZTQUVTU0FnUWlDSXAyb2lGaUFEYWlFRUlCVWdFQ2dDQUswZ0FTZ0NBSzErSWlDbkloQnFJaFVnRUVrZ0lFSWdpS2RxSWhjZ0JHb2hFQ0FBSUJVMkFpUWdFU0FHU1NBRklBMUphaUFDSUE5SmFpQURJQlJKYWlBRUlCWkphaUFRSUJkSmFpQVFJQTRvQWdDdElBb29BZ0N0ZmlJZ3B5SUNhaUlESUFKSklDQkNJSWluYWlJUWFpSU5JQU1nQ3lnQ0FLMGdDQ2dDQUsxK0lpQ25JZ0pxSWdNZ0Fra2dJRUlnaUtkcUlncHFJZ1VnQXlBVEtBSUFyU0FKS0FJQXJYNGlJS2NpQW1vaUF5QUNTU0FnUWlDSXAyb2lCbW9oQWlBRElCSW9BZ0N0SUFjb0FnQ3RmaUlncHlJRGFpSUVJQU5KSUNCQ0lJaW5haUlSSUFKcUlRTWdCQ0FNS0FJQXJTQUJLQUlBclg0aUlLY2lCR29pRENBRVNTQWdRaUNJcDJvaUR5QURhaUVFSUFBZ0REWUNLQ0FGSUFwSklBMGdFRWxxSUFJZ0JrbHFJQU1nRVVscUlBUWdEMGxxSUFRZ0RpZ0NBSzBnQ0NnQ0FLMStJaUNuSWdKcUlnTWdBa2tnSUVJZ2lLZHFJZ1JxSWhBZ0F5QUxLQUlBclNBSktBSUFyWDRpSUtjaUFtb2lBeUFDU1NBZ1FpQ0lwMm9pRFdvaURDQURJQk1vQWdDdElBY29BZ0N0ZmlJZ3B5SUNhaUlESUFKSklDQkNJSWluYWlJS2FpRUNJQU1nRWlnQ0FLMGdBU2dDQUsxK0lpQ25JZ05xSWhJZ0Ewa2dJRUlnaUtkcUlnZ2dBbW9oQXlBQUlCSTJBaXdnRENBTlNTQVFJQVJKYWlBQ0lBcEphaUFESUFoSmFpQURJQTRvQWdDdElBa29BZ0N0ZmlJZ3B5SUNhaUlESUFKSklDQkNJSWluYWlJRWFpSVFJQU1nQ3lnQ0FLMGdCeWdDQUsxK0lpQ25JZ0pxSWdNZ0Fra2dJRUlnaUtkcUlnMXFJZ3dnQXlBVEtBSUFyU0FCS0FJQXJYNGlJS2NpQW1vaUF5QUNTU0FnUWlDSXAyb2lDbW9oQWlBQUlBTTJBakFnRENBTlNTQVFJQVJKYWlBQ0lBcEphaUFDSUE0b0FnQ3RJQWNvQWdDdGZpSWdweUlDYWlJRElBSkpJQ0JDSUlpbmFpSUVhaUlRSUFNZ0N5Z0NBSzBnQVNnQ0FLMStJaUNuSWdKcUlnTWdBa2tnSUVJZ2lLZHFJZzFxSVFJZ0FDQUROZ0kwSUFBZ0FpQU9LQUlBclNBQktBSUFyWDRpSUtjaUFXb2lBellDT0NBQUlCQWdCRWtnSUVJZ2lLZHFJQUlnRFVscUlBTWdBVWxxTmdJOEM2d0lBaGgvQ0g0akJDRUZJd1JCb0FGcUpBUWdCVUg4QUdvaUNFSUFOd0lBSUFoQ0FEY0NDQ0FJUWdBM0FoQWdDRUlBTndJWUlBaEJBRFlDSUNBRlFkZ0FhaUlTUVFScUlnWkNBRGNDQUNBR1FnQTNBZ2dnQmtJQU53SVFJQVpDQURjQ0dDQVNRUUUyQWdBZ0JVRTBhaUlNSUFFcEFnQTNBZ0FnRENBQktRSUlOd0lJSUF3Z0FTa0NFRGNDRUNBTUlBRXBBaGczQWhnZ0RDQUJLQUlnTmdJZ0lBVkJFR29pQ1NBQUtRSUFOd0lBSUFrZ0FDa0NDRGNDQ0NBSklBQXBBaEEzQWhBZ0NTQUFLUUlZTndJWUlBa2dBQ2dDSURZQ0lDQUZJZzlCQkdvaEZ5QVBRUWhxSVJnZ0QwRU1haUVaUVFraEJrRi9JUVVDUUFOQVFRRWdDU2dDQUNJVFFZQ0FnSUI4Y21naUJIUWhDaUFGSUFScklRVWdEQ2dDQUNFVVFSNGdCR3NpRUFSQVFRQWhCMEVCSVFNZ0ZDRUxJQVVoQWtFQUlSRWdFeUFFZGlFRUlCQWhCUU5BUVFBZ0Ftc2hFRUVBSUF0cklRMUJBQ0FLYXlFVlFRQWdFV3NoRmlBQ1FRQklJZzRFUUNBRUlRc0xJQTRFUUNBTklRUUxJQTVGQkVBZ0F5RVdDeUFPUlFSQUlBY2hGUXNnRGdSQUlBTWhFUXNnRGdSQUlBY2hDZ3RCZjBFZ0lBNEVmeUFRSWdJRklBSUxRUUZxSWdjZ0JVb0VmeUFGQlNBSEMydDJRZjhCY1NBRUlBdEJBWFpCL3dCeFFZb1VhaTBBQUd4eElnTWdDMndnQkdvaEJDQURJQXBzSUJWcUlRY2dBeUFSYkNBV2FpRURJQVFnQkVGL0lBVjBjbWdpRFhZaEVDQUtJQTEwSVFvZ0VTQU5kQ0VFSUFJZ0RXc2hBaUFGSUExcklnVUVRQ0FFSVJFZ0VDRUVEQUVGSUFJaEJRc0xCVUVBSVFkQkFTRURRUUFoQkFzZ0R5QUtOZ0lBSUJjZ0JEWUNBQ0FZSUFjMkFnQWdHU0FETmdJQUlBZ2dFaUFQSUFFUU95QVRyQ0lhSUFPc0loMStJQlNzSWh3Z0I2d2lIbjU4UWg2SElodW5JUXNnR2lBRXJDSWZmaUFjSUFxc0loeCtmRUllaHlJYXB5RURJQVpCQVVvaUJ3UkFRUUVoQWdOQUlBd2dBa0YvYWlJRFFRSjBhaUFNSUFKQkFuUnFLQUlBckNJZ0lCeCtJQnA4SUFrZ0FrRUNkR29vQWdDc0lob2dIMzU4SWlHblFmLy8vLzhEY1RZQ0FDQUpJQU5CQW5ScUlDQWdIbjRnRzN3Z0dpQWRmbndpRzZkQi8vLy8vd054TmdJQUlCdENIb2NoR3lBaFFoNkhJUm9nQWtFQmFpSUNJQVpIRFFBTElCcW5JUU1nRzZjaEN3c2dEQ0FHUVg5cUlncEJBblJxSUFNMkFnQWdDU0FLUVFKMGFpQUxOZ0lBSUFrb0FnQkZCRUFnQjBVTkFrRUJJUUpCQUNFSEEwQWdDU0FDUVFKMGFpZ0NBQ0FIY2lFSElBSkJBV29pQWlBR1J3MEFDeUFIUlEwQ0N5QURRUjkxSUFOeklBWkJmbW9pQWtFZmRYSWdDMEVmZFNBTGMzSkZCRUFnRENBQ1FRSjBhaUlHSUFZb0FnQWdBMEVlZEhJMkFnQWdDU0FDUVFKMGFpSUdJQVlvQWdBZ0MwRWVkSEkyQWdBZ0NpRUdDd3dBQ3dBTElBZ2dBeUFCRURvZ0FDQUlLUUlBTndJQUlBQWdDQ2tDQ0RjQ0NDQUFJQWdwQWhBM0FoQWdBQ0FJS1FJWU53SVlJQUFnQ0NnQ0lEWUNJQ0FQSkFRTHhpa0NKbjhDZmlNRUlRa2pCRUdRS0dva0JDQUpRWUFtYWlFV0lBbEI0Q1ZxSVJJZ0NVSEFKV29oRXlBSlFid2hhaUVsSUFsQnVCMXFJU1lnQ1VIWUZXb2hDaUFKUVpnVGFpRVBJQWxCK0ExcUlRY2dDVUdnQldvaERDQUpRZEFuYWlJR1FUQnFJUkFnQmtFMGFpRUlJQWxCcUNkcUlndEJCR29oRFNBR1FUaHFJUTRnQzBFSWFpRVVJQVpCUEdvaEVTQUxRUXhxSVJjZ0MwRVFhaUVZSUFaQkxHb2hHU0FMUVJScUlSb2dDMEVZYWlFVklBdEJIR29oR3lBR1FUQnFJUndnQmtFMGFpRWRJQWxCZ0NkcUlnVkJCR29oSGlBR1FUaHFJUjhnQlVFSWFpRWdJQVpCUEdvaElTQUZRUXhxSVNJZ0JVRVFhaUVqSUFaQkxHb2hKQ0FGUVJScUlTY2dCVUVZYWlFb0lBVkJIR29oS1FKL0FrQWdBeWdDQkNBREtBSUFjaUFES0FJSWNpQURLQUlNY2lBREtBSVFjaUFES0FJVWNpQURLQUlZY2lBREtBSWNja1VOQUNBQ0tBSjREUUFnREVIUUNHb2lLa0VBTmdJQUlBWWdBMEdVQ2hBbElBZ29BZ0FoQ0NBT0tBSUFJUTRnRVNnQ0FDRVJJQXNnR1NnQ0FFRWZka0gvQTJwQkNIWkJBWEZCQVhPdElCQW9BZ0N0ZkNJclBnSUFJQTBnSzBJZ2lDQUlyWHdpS3o0Q0FDQVVJQ3RDSUlnZ0RxMThJaXMrQWdBZ0Z5QXJRaUNJSUJHdGZDSXJQZ0lBSUJnZ0swSWdpRDRDQUNBYVFRQTJBZ0FnRlVFQU5nSUFJQnRCQURZQ0FDQUdJQU5CdEFvUUpTQWRLQUlBSVJBZ0h5Z0NBQ0VJSUNFb0FnQWhEU0FGSUNRb0FnQkJIM1pCL3dOcVFRaDJRUUZ4UVFGenJTQWNLQUlBclh3aUt6NENBQ0FlSUN0Q0lJZ2dFSzE4SWlzK0FnQWdJQ0FyUWlDSUlBaXRmQ0lyUGdJQUlDSWdLMElnaUNBTnJYd2lLejRDQUNBaklDdENJSWcrQWdBZ0owRUFOZ0lBSUNoQkFEWUNBQ0FwUVFBMkFnQWdDeUFMUWRRSkVCVWdCU0FGUWZRSkVCVWdERUVnYWlJUUlBc2dCUkFhSUF3Z0VFSFVDaEFWSUF3Z0RDZ0NBQ0lJUVg5enJVTENndG1CRFh3aUxDQU1RUVJxSWcwb0FnQWlEaUFJY2lBTVFRaHFJZ2dvQWdBaUZISWdERUVNYWlJUktBSUFJaGR5SUF4QkVHb2lHQ2dDQUNJWmNpQU1RUlJxSWhvb0FnQWlGWElnREVFWWFpSWJLQUlBSWh4eUlBeEJIR29pSFNnQ0FDSWVja0VBUjBFZmRFRWZkYTBpSzRNK0FnQWdEU0FzUWlDSVFveTl5ZjRMaENBT1FYOXpyWHdpTENBcmd6NENBQ0FJSUJSQmYzT3RRcnZBb3ZvS2ZDQXNRaUNJZkNJc0lDdURQZ0lBSUJFZ0YwRi9jNjFDNXJtNzFRdDhJQ3hDSUloOElpd2dLNE0rQWdBZ0dDQVpRWDl6clVMKy8vLy9EM3dnTEVJZ2lId2lMQ0FyZ3o0Q0FDQWFJQlZCZjNPdFF2Ly8vLzhQZkNBc1FpQ0lmQ0lzSUN1RFBnSUFJQnNnSEVGL2M2MUMvLy8vL3c5OElDeENJSWg4SWl3Z0s0TStBZ0FnSFNBZVFYOXpyVUwvLy8vL0Qzd2dMRUlnaUh3Z0s0TStBZ0FnRENBTUlBTVFHaUFNUWNnSWFpSUlJQXhCUUdzZ0RFRUZFQ2cyQWdBZ0RFSE1DR29nREVIRUJHb2dFRUVGRUNnaUF6WUNBQ0FJS0FJQUloQkJBRXdFUUVFQUlSQUxJQW9nRHlBQ0lDb29BZ0JCL0FCc2FoQTBJQWRCekFScUlnSWdDa0hrQm1vaUNDa0NBRGNDQUNBQ0lBZ3BBZ2czQWdnZ0FpQUlLUUlRTndJUUlBSWdDQ2tDR0RjQ0dDQUNJQWdwQWlBM0FpQWdCMEgwQkdvaUNDQUtRWXdIYWlJTktRSUFOd0lBSUFnZ0RTa0NDRGNDQ0NBSUlBMHBBaEEzQWhBZ0NDQU5LUUlZTndJWUlBZ2dEU2tDSURjQ0lDQUhRWmdGYWlJVUtBSUFJaEZCRm5ZaURrSFJCMndnQ0NnQ0FHb2hEU0FPUVFaMElBZEIrQVJxSWhjb0FnQnFJQTFCR25acUloaEJHbllnQjBIOEJHb2lHU2dDQUdvaUdrRWFkaUFIUVlBRmFpSVZLQUlBYWlJYlFScDJJQWRCaEFWcUlod29BZ0JxSWgxQkduWWdCMEdJQldvaUhpZ0NBR29pSDBFYWRpQUhRWXdGYWlJZ0tBSUFhaUloUVJwMklBZEJrQVZxSWlJb0FnQnFJaU5CR25ZZ0IwR1VCV29pSkNnQ0FHb2hEaUFJSUExQi8vLy9IM0UyQWdBZ0Z5QVlRZi8vL3g5eE5nSUFJQmtnR2tILy8vOGZjVFlDQUNBVklCdEIvLy8vSDNFMkFnQWdIQ0FkUWYvLy94OXhOZ0lBSUI0Z0gwSC8vLzhmY1RZQ0FDQWdJQ0ZCLy8vL0gzRTJBZ0FnSWlBalFmLy8veDl4TmdJQUlDUWdEa0gvLy84ZmNUWUNBQ0FVSUE1QkduWWdFVUgvLy84QmNXbzJBZ0FnRmlBS1FiUUhhaUlJS1FJQU53SUFJQllnQ0NrQ0NEY0NDQ0FXSUFncEFoQTNBaEFnRmlBSUtRSVlOd0lZSUJZZ0NDa0NJRGNDSUNBSFFRQTJBcHdGSUFVZ0QwR1lBbW9pQ0NrQ0FEY0NBQ0FGSUFncEFnZzNBZ2dnQlNBSUtRSVFOd0lRSUFVZ0NDa0NHRGNDR0NBRklBZ3BBaUEzQWlBZ0JpQUZFQW9nQ3lBR0lBVVFEQ0FIUWZnRGFpQUtRZWdGYWlBR0VBd2dCMEdnQkdvZ0NrR1FCbW9nQ3hBTUlBY2dDaWdDNEFZMkFzZ0VJQVVnQlNBUFFmQUJhaEFNSUFZZ0JSQUtJQXNnQmlBRkVBd2dCMEdrQTJvZ0NrSHNCR29nQmhBTUlBZEJ6QU5xSUFwQmxBVnFJQXNRRENBSElBb29BdVFGTmdMMEF5QUZJQVVnRDBISUFXb1FEQ0FHSUFVUUNpQUxJQVlnQlJBTUlBZEIwQUpxSUFwQjhBTnFJQVlRRENBSFFmZ0NhaUFLUVpnRWFpQUxFQXdnQnlBS0tBTG9CRFlDb0FNZ0JTQUZJQTlCb0FGcUVBd2dCaUFGRUFvZ0N5QUdJQVVRRENBSFFmd0JhaUFLUWZRQ2FpQUdFQXdnQjBHa0Ftb2dDa0djQTJvZ0N4QU1JQWNnQ2lnQzdBTTJBc3dDSUFVZ0JTQVBRZmdBYWhBTUlBWWdCUkFLSUFzZ0JpQUZFQXdnQjBHb0FXb2dDa0g0QVdvZ0JoQU1JQWRCMEFGcUlBcEJvQUpxSUFzUURDQUhJQW9vQXZBQ05nTDRBU0FGSUFVZ0QwSFFBR29RRENBR0lBVVFDaUFMSUFZZ0JSQU1JQWRCMUFCcUlBcEIvQUJxSUFZUURDQUhRZndBYWlBS1FhUUJhaUFMRUF3Z0J5QUtLQUwwQVRZQ3BBRWdCU0FGSUE5QktHb1FEQ0FHSUFVUUNpQUxJQVlnQlJBTUlBY2dDaUFHRUF3Z0IwRW9haUFLUVNocUlBc1FEQ0FISUFvb0FuZzJBbEFnQ1NBSEtRSUFOd0lBSUFrZ0J5a0NDRGNDQ0NBSklBY3BBaEEzQWhBZ0NTQUhLUUlZTndJWUlBa2dCeWtDSURjQ0lDQUpJQWNwQWlnM0FpZ2dDU0FIS1FJd053SXdJQWtnQnlrQ09EY0NPQ0FKUVVCcklBZEJRR3NwQWdBM0FnQWdDU0FIS1FKSU53SklJQWtnQnlnQ1VEWUNVQ0FKSUFsQjlBb1FEQ0FKUWRRQWFpSUZJQWRCMUFCcUlnWXBBZ0EzQWdBZ0JTQUdLUUlJTndJSUlBVWdCaWtDRURjQ0VDQUZJQVlwQWhnM0FoZ2dCU0FHS1FJZ053SWdJQVVnQmlrQ0tEY0NLQ0FGSUFZcEFqQTNBakFnQlNBR0tRSTROd0k0SUFWQlFHc2dCa0ZBYXlrQ0FEY0NBQ0FGSUFZcEFrZzNBa2dnQlNBR0tBSlFOZ0pRSUFVZ0JVSDBDaEFNSUFsQnFBRnFJZ1VnQjBHb0FXb2lCaWtDQURjQ0FDQUZJQVlwQWdnM0FnZ2dCU0FHS1FJUU53SVFJQVVnQmlrQ0dEY0NHQ0FGSUFZcEFpQTNBaUFnQlNBR0tRSW9Od0lvSUFVZ0Jpa0NNRGNDTUNBRklBWXBBamczQWpnZ0JVRkFheUFHUVVCcktRSUFOd0lBSUFVZ0Jpa0NTRGNDU0NBRklBWW9BbEEyQWxBZ0JTQUZRZlFLRUF3Z0NVSDhBV29pQlNBSFFmd0JhaUlHS1FJQU53SUFJQVVnQmlrQ0NEY0NDQ0FGSUFZcEFoQTNBaEFnQlNBR0tRSVlOd0lZSUFVZ0Jpa0NJRGNDSUNBRklBWXBBaWczQWlnZ0JTQUdLUUl3TndJd0lBVWdCaWtDT0RjQ09DQUZRVUJySUFaQlFHc3BBZ0EzQWdBZ0JTQUdLUUpJTndKSUlBVWdCaWdDVURZQ1VDQUZJQVZCOUFvUURDQUpRZEFDYWlJRklBZEIwQUpxSWdZcEFnQTNBZ0FnQlNBR0tRSUlOd0lJSUFVZ0Jpa0NFRGNDRUNBRklBWXBBaGczQWhnZ0JTQUdLUUlnTndJZ0lBVWdCaWtDS0RjQ0tDQUZJQVlwQWpBM0FqQWdCU0FHS1FJNE53STRJQVZCUUdzZ0JrRkFheWtDQURjQ0FDQUZJQVlwQWtnM0FrZ2dCU0FHS0FKUU5nSlFJQVVnQlVIMENoQU1JQWxCcEFOcUlnVWdCMEdrQTJvaUJpa0NBRGNDQUNBRklBWXBBZ2czQWdnZ0JTQUdLUUlRTndJUUlBVWdCaWtDR0RjQ0dDQUZJQVlwQWlBM0FpQWdCU0FHS1FJb053SW9JQVVnQmlrQ01EY0NNQ0FGSUFZcEFqZzNBamdnQlVGQWF5QUdRVUJyS1FJQU53SUFJQVVnQmlrQ1NEY0NTQ0FGSUFZb0FsQTJBbEFnQlNBRlFmUUtFQXdnQ1VINEEyb2lCU0FIUWZnRGFpSUdLUUlBTndJQUlBVWdCaWtDQ0RjQ0NDQUZJQVlwQWhBM0FoQWdCU0FHS1FJWU53SVlJQVVnQmlrQ0lEY0NJQ0FGSUFZcEFpZzNBaWdnQlNBR0tRSXdOd0l3SUFVZ0Jpa0NPRGNDT0NBRlFVQnJJQVpCUUdzcEFnQTNBZ0FnQlNBR0tRSklOd0pJSUFVZ0JpZ0NVRFlDVUNBRklBVkI5QW9RRENBSlFjd0VhaUlGSUFJcEFnQTNBZ0FnQlNBQ0tRSUlOd0lJSUFVZ0Fpa0NFRGNDRUNBRklBSXBBaGczQWhnZ0JTQUNLUUlnTndJZ0lBVWdBaWtDS0RjQ0tDQUZJQUlwQWpBM0FqQWdCU0FDS1FJNE53STRJQVZCUUdzZ0FrRkFheWtDQURjQ0FDQUZJQUlwQWtnM0FrZ2dCU0FDS0FKUU5nSlFJQVVnQlVIMENoQU1RUUVoRjBFQUlSZ2dBeUFRU2dSL0lBTUZJQkFMREFFTElCWkJBVFlDQUNBV1FRUnFJZ0pDQURjQ0FDQUNRZ0EzQWdnZ0FrSUFOd0lRSUFKQ0FEY0NHQ0FDUVFBMkFpQkJBQ0VYUVFFaEdFRUFDeUVDSUFRRVFDQVNJQVFvQWdBMkFnQWdFaUFFS0FJRU5nSUVJQklnQkNnQ0NEWUNDQ0FTSUFRb0FndzJBZ3dnRWtFUWFpSURRZ0EzQWdBZ0EwSUFOd0lJSUJNZ0JDZ0NFRFlDQUNBVElBUW9BaFEyQWdRZ0V5QUVLQUlZTmdJSUlCTWdCQ2dDSERZQ0RDQVRRUkJxSWdOQ0FEY0NBQ0FEUWdBM0FnZ2dKU0FTUVE4UUtDRURJQ1lnRTBFUEVDZ2lCQ0VaSUFRZ0F5QUNTZ1IvSUFNaUFnVWdBZ3RLQkVBZ0JDRUNDd1ZCQUNFWlFRQWhBd3NnQVVINEFHb2lHa0VCTmdJQUlBRkNBRGNDQUNBQlFnQTNBZ2dnQVVJQU53SVFJQUZDQURjQ0dDQUJRZ0EzQWlBZ0FVSUFOd0lvSUFGQ0FEY0NNQ0FCUWdBM0FqZ2dBVUZBYTBJQU53SUFJQUZDQURjQ1NDQUJRZ0EzQWxBZ0FVSUFOd0pZSUFGQ0FEY0NZQ0FCUWdBM0FtZ2dBVUlBTndKd0lBSkJBRXdFUUNBSkpBUVBDeUFBUVFScUlSc2dDVUdvSm1vaUJVRW9haUVLSUFWQkxHb2hDeUFGUVRCcUlROGdCVUUwYWlFU0lBVkJPR29oRXlBRlFUeHFJUWdnQlVGQWF5RU5JQVZCeEFCcUlRNGdCVUhJQUdvaEZDQUZRY3dBYWlFUklBeEJ5QWhxSVJ3Z0RFSE1DR29oSFVFQUlRUURRQ0FFQkVBZ0FTQUJFQk1GSUJwQkFUWUNBQXNnQWtGL2FpRVFJQmhGQkVCQkFDRUVBMEFnQWlBY0tBSUFUQVJBSUF3Z0JFSFVDR3hxUVVCcklCQkJBblJxS0FJQUlnWUVRQ0FISUFSQkEzUkIxQUJzYWlFVklBWkJBRW9FUUNBRklCVWdCa0YvYWtFQ2JVSFVBR3hxSWdZcEFnQTNBZ0FnQlNBR0tRSUlOd0lJSUFVZ0Jpa0NFRGNDRUNBRklBWXBBaGczQWhnZ0JTQUdLUUlnTndJZ0lBVWdCaWtDS0RjQ0tDQUZJQVlwQWpBM0FqQWdCU0FHS1FJNE53STRJQVZCUUdzZ0JrRkFheWtDQURjQ0FDQUZJQVlwQWtnM0FrZ2dCU0FHS0FKUU5nSlFCU0FGSUJVZ0JrRi9jMEVDYlVIVUFHeHFJZ1lwQWdBM0FnQWdCU0FHS1FJSU53SUlJQVVnQmlrQ0VEY0NFQ0FGSUFZcEFoZzNBaGdnQlNBR0tRSWdOd0lnSUFVZ0Jpa0NLRGNDS0NBRklBWXBBakEzQWpBZ0JTQUdLUUk0TndJNElBVkJRR3NnQmtGQWF5a0NBRGNDQUNBRklBWXBBa2czQWtnZ0JTQUdLQUpRTmdKUUlBcEJ2T0gvL3dBZ0NpZ0NBR3MyQWdBZ0MwSDgvZi8vQUNBTEtBSUFhellDQUNBUFFmei8vLzhBSUE4b0FnQnJOZ0lBSUJKQi9QLy8vd0FnRWlnQ0FHczJBZ0FnRTBIOC8vLy9BQ0FUS0FJQWF6WUNBQ0FJUWZ6Ly8vOEFJQWdvQWdCck5nSUFJQTFCL1AvLy93QWdEU2dDQUdzMkFnQWdEa0g4Ly8vL0FDQU9LQUlBYXpZQ0FDQVVRZnovLy84QUlCUW9BZ0JyTmdJQUlCRkIvUC8vQnlBUktBSUFhellDQUFzZ0FTQUJJQVZCQUJBV0N3c2dBaUFkS0FJQVRBUkFJQXdnQkVIVUNHeHFRY1FFYWlBUVFRSjBhaWdDQUNJR0JFQWdDU0FFUVFOMFFkUUFiR29oRlNBR1FRQktCRUFnQlNBVklBWkJmMnBCQW0xQjFBQnNhaUlHS1FJQU53SUFJQVVnQmlrQ0NEY0NDQ0FGSUFZcEFoQTNBaEFnQlNBR0tRSVlOd0lZSUFVZ0Jpa0NJRGNDSUNBRklBWXBBaWczQWlnZ0JTQUdLUUl3TndJd0lBVWdCaWtDT0RjQ09DQUZRVUJySUFaQlFHc3BBZ0EzQWdBZ0JTQUdLUUpJTndKSUlBVWdCaWdDVURZQ1VBVWdCU0FWSUFaQmYzTkJBbTFCMUFCc2FpSUdLUUlBTndJQUlBVWdCaWtDQ0RjQ0NDQUZJQVlwQWhBM0FoQWdCU0FHS1FJWU53SVlJQVVnQmlrQ0lEY0NJQ0FGSUFZcEFpZzNBaWdnQlNBR0tRSXdOd0l3SUFVZ0Jpa0NPRGNDT0NBRlFVQnJJQVpCUUdzcEFnQTNBZ0FnQlNBR0tRSklOd0pJSUFVZ0JpZ0NVRFlDVUNBS1FiemgvLzhBSUFvb0FnQnJOZ0lBSUF0Qi9QMy8vd0FnQ3lnQ0FHczJBZ0FnRDBIOC8vLy9BQ0FQS0FJQWF6WUNBQ0FTUWZ6Ly8vOEFJQklvQWdCck5nSUFJQk5CL1AvLy93QWdFeWdDQUdzMkFnQWdDRUg4Ly8vL0FDQUlLQUlBYXpZQ0FDQU5RZnovLy84QUlBMG9BZ0JyTmdJQUlBNUIvUC8vL3dBZ0RpZ0NBR3MyQWdBZ0ZFSDgvLy8vQUNBVUtBSUFhellDQUNBUlFmei8vd2NnRVNnQ0FHczJBZ0FMSUFFZ0FTQUZRUUFRRmdzTElBUkJBV29pQkNBWFJ3MEFDd3NnQWlBRFRBUkFJQ1VnRUVFQ2RHb29BZ0FpQkFSQUlBQW9BZ0FoQmlBRVFRQktCRUFnQlNBR0lBUkJmMnBCQW0xQkJuUnFFQ0lGSUFVZ0JpQUVRWDl6UVFKdFFRWjBhaEFpSUFwQnZPSC8vd0FnQ2lnQ0FHczJBZ0FnQzBIOC9mLy9BQ0FMS0FJQWF6WUNBQ0FQUWZ6Ly8vOEFJQThvQWdCck5nSUFJQkpCL1AvLy93QWdFaWdDQUdzMkFnQWdFMEg4Ly8vL0FDQVRLQUlBYXpZQ0FDQUlRZnovLy84QUlBZ29BZ0JyTmdJQUlBMUIvUC8vL3dBZ0RTZ0NBR3MyQWdBZ0RrSDgvLy8vQUNBT0tBSUFhellDQUNBVVFmei8vLzhBSUJRb0FnQnJOZ0lBSUJGQi9QLy9CeUFSS0FJQWF6WUNBQXNnQVNBQklBVWdGaEF6Q3dzZ0FpQVpUQVJBSUNZZ0VFRUNkR29vQWdBaUJBUkFJQnNvQWdBaEJpQUVRUUJLQkVBZ0JTQUdJQVJCZjJwQkFtMUJCblJxRUNJRklBVWdCaUFFUVg5elFRSnRRUVowYWhBaUlBcEJ2T0gvL3dBZ0NpZ0NBR3MyQWdBZ0MwSDgvZi8vQUNBTEtBSUFhellDQUNBUFFmei8vLzhBSUE4b0FnQnJOZ0lBSUJKQi9QLy8vd0FnRWlnQ0FHczJBZ0FnRTBIOC8vLy9BQ0FUS0FJQWF6WUNBQ0FJUWZ6Ly8vOEFJQWdvQWdCck5nSUFJQTFCL1AvLy93QWdEU2dDQUdzMkFnQWdEa0g4Ly8vL0FDQU9LQUlBYXpZQ0FDQVVRZnovLy84QUlCUW9BZ0JyTmdJQUlCRkIvUC8vQnlBUktBSUFhellDQUFzZ0FTQUJJQVVnRmhBekN3c2dHaWdDQUVVaEJDQUNRUUZLQkVBZ0VDRUNEQUVMQ3lBRVJRUkFJQWtrQkE4TElBRkIwQUJxSWdBZ0FDQVdFQXdnQ1NRRUMrVUVBZzUvQW40akJDRURJd1JCSUdva0JDQUFRUUJCaEFRUUdSb2dBeUFCS1FJQU53SUFJQU1nQVNrQ0NEY0NDQ0FESUFFcEFoQTNBaEFnQXlBQktRSVlOd0lZSUFOQkhHb2lCaWdDQUNJQlFYOUtCSDlCQVFVZ0F5QURLQUlBSWdSQmYzT3RRc0tDMllFTmZDSVJJQVFnQVhJZ0EwRUVhaUlFS0FJQUlnVnlJQU5CQ0dvaUNDZ0NBQ0lIY2lBRFFReHFJZ2tvQWdBaUNuSWdBMEVRYWlJTEtBSUFJZ3h5SUFOQkZHb2lEU2dDQUNJT2NpQURRUmhxSWc4b0FnQWlFSEpCQUVkQkgzUkJIM1d0SWhLRFBnSUFJQVFnRVVJZ2lFS012Y24rQzRRZ0JVRi9jNjE4SWhFZ0VvTStBZ0FnQ0NBSFFYOXpyVUs3d0tMNkNud2dFVUlnaUh3aUVTQVNnejRDQUNBSklBcEJmM090UXVhNXU5VUxmQ0FSUWlDSWZDSVJJQktEUGdJQUlBc2dERUYvYzYxQy92Ly8vdzk4SUJGQ0lJaDhJaEVnRW9NK0FnQWdEU0FPUVg5enJVTC8vLy8vRDN3Z0VVSWdpSHdpRVNBU2d6NENBQ0FQSUJCQmYzT3RRdi8vLy84UGZDQVJRaUNJZkNJUklCS0RQZ0lBSUFZZ0FVRi9jNjFDLy8vLy93OThJQkZDSUloOElCS0RQZ0lBUVg4TElRZ2dBa0YvYWlFSlFYOGhBVUVBSVFaQkFDRUVBMEFnQXlBRVFRVjJJZ2RCQW5ScUtBSUFJQVJCSDNFaUNuWWlCVUVCY1NBR1JnUkFRUUVoQlFVZ0JFRi9ha0dCQVNBRWF5SUJJQUpJQkg4Z0FRVWdBaUlCQzJwQkJYWWdCMGNFUUNBRElBZEJBV3BCQW5ScUtBSUFRU0FnQ210MElBVnlJUVVMSUFWQkFTQUJkRUYvYW5FZ0Jtb2lCU0FKZGtFQmNTRUdJQUFnQkVFQ2RHb2dCU0FHSUFKMGF5QUliRFlDQUNBQklRVWdCQ0VCQ3lBRklBUnFJZ1JCZ1FGSURRQUxJQU1rQkNBQlFRRnFDNVFLQVN0L0l3UWhDaU1FUVlBQmFpUUVJQUVnQUVFa2FpSUdLUUlBTndJQUlBRWdCaWtDQ0RjQ0NDQUJJQVlwQWhBM0FoQWdBU0FHS1FJWU53SVlJQUVnQmlrQ0lEY0NJQ0FCSUFZcEFpZzNBaWdnQVNBR0tRSXdOd0l3SUFFZ0Jpa0NPRGNDT0NBQlFVQnJJQVpCUUdzcEFnQTNBZ0FnQVNBR0tRSklOd0pJSUFFZ0Jpa0NVRGNDVUNBQklBWXBBbGczQWxnZ0FTQUdLUUpnTndKZ0lBRWdCaWtDYURjQ2FDQUJJQVlwQW5BM0FuQWdBU0FHS0FKNE5nSjRJQW9pQ3lBQ0lBQkJCR29RR2lBTFFTQnFJZ1JCMEFCcUlobEJBRFlDQUNBRVFRUnFJUm9nQkVFSWFpRWJJQVJCREdvaEhDQUVRUkJxSVIwZ0JFRVVhaUVlSUFSQkdHb2hIeUFFUVJ4cUlTQWdCRUVnYWlFaElBUkJKR29oSWlBRVFTaHFJU01nQkVFc2FpRWtJQVJCTUdvaEpTQUVRVFJxSVNZZ0JFRTRhaUVuSUFSQlBHb2hLQ0FFUVVCcklTa2dCRUhFQUdvaEtpQUVRY2dBYWlFcklBUkJ6QUJxSVN4QkFDRUdRUUFoQWtFQUlRb0RRQ0FMSUFWQkEzWkIvLy8vUDNGQkFuUnFLQUlBSUFWQkFuUkJISEYyUVE5eElTMGdBQ2dDQUNFSVFRQWhCd05BSUFnZ0JVRUtkR29nQjBFR2RHb29BZ0FoQXlBSElDMUdJZ2tFUUNBRElRWUxJQWdnQlVFS2RHb2dCMEVHZEdvb0FnUWhBeUFKQkVBZ0F5RVlDeUFJSUFWQkNuUnFJQWRCQm5ScUtBSUlJUU1nQ1FSQUlBTWhEQXNnQ0NBRlFRcDBhaUFIUVFaMGFpZ0NEQ0VESUFrRVFDQURJUTBMSUFnZ0JVRUtkR29nQjBFR2RHb29BaEFoQXlBSkJFQWdBeUVDQ3lBSUlBVkJDblJxSUFkQkJuUnFLQUlVSVFNZ0NRUkFJQU1oRGdzZ0NDQUZRUXAwYWlBSFFRWjBhaWdDR0NFRElBa0VRQ0FESVE4TElBZ2dCVUVLZEdvZ0IwRUdkR29vQWh3aEF5QUpCRUFnQXlFUUN5QUlJQVZCQ25ScUlBZEJCblJxS0FJZ0lRTWdDUVJBSUFNaEVRc2dDQ0FGUVFwMGFpQUhRUVowYWlnQ0pDRURJQWtFUUNBRElSSUxJQWdnQlVFS2RHb2dCMEVHZEdvb0FpZ2hBeUFKQkVBZ0F5RVRDeUFJSUFWQkNuUnFJQWRCQm5ScUtBSXNJUU1nQ1FSQUlBTWhGQXNnQ0NBRlFRcDBhaUFIUVFaMGFpZ0NNQ0VESUFrRVFDQURJUW9MSUFnZ0JVRUtkR29nQjBFR2RHb29BalFoQXlBSkJFQWdBeUVWQ3lBSUlBVkJDblJxSUFkQkJuUnFLQUk0SVFNZ0NRUkFJQU1oRmdzZ0NDQUZRUXAwYWlBSFFRWjBhaWdDUENFRElBa0VRQ0FESVJjTElBZEJBV29pQjBFUVJ3MEFDeUFFSUFaQi8vLy9IM0UyQWdBZ0dpQVlRUVowUWNELy94OXhJQVpCR25aeU5nSUFJQnNnREVFTWRFR0E0UDhmY1NBWVFSUjJjallDQUNBY0lBMUJFblJCZ0lEd0gzRWdERUVPZG5JMkFnQWdIU0FDUVJoMFFZQ0FnQmh4SUExQkNIWnlOZ0lBSUI0Z0FrRUNka0gvLy84ZmNUWUNBQ0FmSUE1QkJIUkI4UC8vSDNFZ0FrRWNkbkkyQWdBZ0lDQVBRUXAwUVlENC94OXhJQTVCRm5aeU5nSUFJQ0VnRUVFUWRFR0FnUHdmY1NBUFFSQjJjallDQUNBaUlCQkJDblkyQWdBZ0l5QVJRZi8vL3g5eE5nSUFJQ1FnRWtFR2RFSEEvLzhmY1NBUlFScDJjallDQUNBbElCTkJESFJCZ09EL0gzRWdFa0VVZG5JMkFnQWdKaUFVUVJKMFFZQ0E4Qjl4SUJOQkRuWnlOZ0lBSUNjZ0NrRVlkRUdBZ0lBWWNTQVVRUWgyY2pZQ0FDQW9JQXBCQW5aQi8vLy9IM0UyQWdBZ0tTQVZRUVIwUWZELy94OXhJQXBCSEhaeU5nSUFJQ29nRmtFS2RFR0ErUDhmY1NBVlFSWjJjallDQUNBcklCZEJFSFJCZ0lEOEgzRWdGa0VRZG5JMkFnQWdMQ0FYUVFwMk5nSUFJQmxCQURZQ0FDQUJJQUVnQkJBaklBVkJBV29pQlVIQUFFY05BQXNnQ3lRRUM2UVVBaFIvQVg0akJDRUxJd1JCUUdza0JDQUxRUlJxSVJNZ0MwRVFhaUlOSUFFMkFnQWdBRUVBUnlFU0lBdEJHR29pQVVFb2FpSVFJUlVnQVVFbmFpRVdJQXRCQ0dvaUZFRUVhaUVZUVFBaEFRSkFBa0FEUUFKQUlBeEJmMG9FUUNBRlFmLy8vLzhISUF4clNnUi9RWUF0UWNzQU5nSUFRWDhGSUFVZ0RHb0xJUXdMSUEwb0FnQWlDU3dBQUNJR1JRMENJQWtoQlFKQUFrQURRQUpBQWtBQ1FBSkFJQVpCR0hSQkdIVU9KZ0VDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBQWdzZ0JTRUdEQVFMREFFTElBMGdCVUVCYWlJRk5nSUFJQVVzQUFBaEJnd0JDd3NNQVFzRFFDQUdMQUFCUVNWSERRRWdCVUVCYWlFRklBMGdCa0VDYWlJR05nSUFJQVlzQUFCQkpVWU5BQXNMSUFVZ0NXc2hCU0FTQkVBZ0FDQUpJQVVRRVFzZ0JRMEJJQTBnRFNnQ0FDSUZJQTBvQWdBc0FBRkJVR3BCQ2tsRkJIOUJmeUVLUVFFRklBVXNBQUpCSkVZRWZ5QUZMQUFCUVZCcUlRcEJBU0VCUVFNRlFYOGhDa0VCQ3d0cUlnVTJBZ0FnQlN3QUFDSUlRV0JxSWdaQkgwdEJBU0FHZEVHSjBRUnhSWElFUUVFQUlRWUZRUUFoQnlBSUlRWURRRUVCSUFaQkdIUkJHSFZCWUdwMElBZHlJUVlnRFNBRlFRRnFJZ1UyQWdBZ0JTd0FBQ0lJUVdCcUlnZEJIMHRCQVNBSGRFR0owUVJ4UlhKRkJFQWdCaUVISUFnaEJnd0JDd3NMQWtBZ0NFSC9BWEZCS2tZRWZ3Si9Ba0FnQlN3QUFVRlFha0VLU1VVTkFDQU5LQUlBSWdVc0FBSkJKRWNOQUNBRUlBVkJBV29pQVN3QUFFRlFha0VDZEdwQkNqWUNBQ0FESUFFc0FBQkJVR3BCQTNScUtRTUFweUVCUVFFaEJ5QUZRUU5xREFFTElBRUVRRUYvSVF3TUJBc2dFZ1JBSUFJb0FnQkJBMnBCZkhFaUJTZ0NBQ0VCSUFJZ0JVRUVhallDQUFWQkFDRUJDMEVBSVFjZ0RTZ0NBRUVCYWdzaEJTQU5JQVUyQWdBZ0JrR0F3QUJ5SVFoQkFDQUJheUVQSUFGQkFFZ2lEa1VFUUNBR0lRZ0xJQTVGQkVBZ0FTRVBDeUFISVFFZ0JRVWdEUkF1SWc5QkFFZ0VRRUYvSVF3TUF3c2dCaUVJSUEwb0FnQUxJZ1lzQUFCQkxrWUVRQ0FHTEFBQlFTcEhCRUFnRFNBR1FRRnFOZ0lBSUEwUUxpRUZJQTBvQWdBaEJnd0NDeUFHTEFBQ1FWQnFRUXBKQkVBZ0RTZ0NBQ0lHTEFBRFFTUkdCRUFnQkNBR1FRSnFJZ1VzQUFCQlVHcEJBblJxUVFvMkFnQWdBeUFGTEFBQVFWQnFRUU4wYWlrREFLY2hCU0FOSUFaQkJHb2lCallDQUF3REN3c2dBUVJBUVg4aERBd0RDeUFTQkVBZ0FpZ0NBRUVEYWtGOGNTSUdLQUlBSVFVZ0FpQUdRUVJxTmdJQUJVRUFJUVVMSUEwZ0RTZ0NBRUVDYWlJR05nSUFCVUYvSVFVTEMwRUFJUTREUUNBR0xBQUFRYjkvYWtFNVN3UkFRWDhoREF3Q0N5QU5JQVpCQVdvaUJ6WUNBQ0FPUVRwc0lBWXNBQUJxUWJra2Fpd0FBQ0lSUWY4QmNTSUdRWDlxUVFoSkJFQWdCaUVPSUFjaEJnd0JDd3NnRVVVRVFFRi9JUXdNQVFzZ0NrRi9TaUVYQWtBQ1FDQVJRUk5HQkVBZ0Z3UkFRWDhoREF3RUJRd0NDd0FGSUJjRVFDQUVJQXBCQW5ScUlBWTJBZ0FnQ3lBRElBcEJBM1JxS1FNQU53TUFEQUlMSUJKRkJFQkJBQ0VNREFRTElBc2dCaUFDRUVRZ0RTZ0NBQ0VIQ3d3QkN5QVNSUVJBUVFBaEJRd0RDd3NnQjBGL2Fpd0FBQ0lHUVY5eElRY2dEa0VBUnlBR1FROXhRUU5HY1VVRVFDQUdJUWNMSUFoQi8vOTdjU0VLSUFoQmdNQUFjUVIvSUFvRklBZ0xJUVlDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBZEJ3UUJyRGpnTERBa01Dd3NMREF3TURBd01EQXdNREF3S0RBd01EQUlNREF3TURBd01EQXNNQmdRTEN3c01CQXdNREFjQUF3RU1EQWdNQlF3TUFnd0xBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQU9RZjhCY1VFWWRFRVlkUTRJQUFFQ0F3UUhCUVlIQ3lBTEtBSUFJQXcyQWdCQkFDRUZEQnNMSUFzb0FnQWdERFlDQUVFQUlRVU1HZ3NnQ3lnQ0FDQU1yRGNEQUVFQUlRVU1HUXNnQ3lnQ0FDQU1Pd0VBUVFBaEJRd1lDeUFMS0FJQUlBdzZBQUJCQUNFRkRCY0xJQXNvQWdBZ0REWUNBRUVBSVFVTUZnc2dDeWdDQUNBTXJEY0RBRUVBSVFVTUZRdEJBQ0VGREJRTFFmZ0FJUWNnQlVFSVRRUkFRUWdoQlFzZ0JrRUljaUVHREFzTERBb0xJQlVnQ3lrREFDSVpJQkFRZGlJSWF5SUtRUUZxSVE1QkFDRUpRY29vSVFjZ0JrRUljVVVnQlNBS1NuSkZCRUFnRGlFRkN3d05DeUFMS1FNQUlobENBRk1FUUNBTFFnQWdHWDBpR1RjREFFRUJJUWxCeWlnaEJ3d0tCU0FHUVlBUWNVVWhDQ0FHUVFGeEJIOUJ6Q2dGUWNvb0N5RUhJQVpCZ1JCeFFRQkhJUWtnQ0VVRVFFSExLQ0VIQ3d3S0N3QUxRUUFoQ1VIS0tDRUhJQXNwQXdBaEdRd0lDeUFXSUFzcEF3QThBQUFnRmlFSVFRQWhDVUhLS0NFT0lCQWhCMEVCSVFVZ0NpRUdEQXdMUVlBdEtBSUFJZ1pCbkF3b0Fyd0JFRXNoQ0F3SEN5QUxLQUlBSWdoRkJFQkIxQ2doQ0FzTUJnc2dGQ0FMS1FNQVBnSUFJQmhCQURZQ0FDQUxJQlEyQWdCQmZ5RUtJQlFoQ0F3R0N5QUxLQUlBSVFnZ0JRUkFJQVVoQ2d3R0JTQUFRU0FnRDBFQUlBWVFFa0VBSVFVTUNBc0FDeUFBSUFzckF3QWdEeUFGSUFZZ0J4QjFJUVVNQ1FzZ0NTRUlRUUFoQ1VIS0tDRU9JQkFoQnd3R0N5QUxLUU1BSWhrZ0VDQUhRU0J4RUhjaENDQUhRUVIxUWNvb2FpRUhJQVpCQ0hGRklCbENBRkZ5SWdrRVFFSEtLQ0VIQ3lBSkJIOUJBQVZCQWdzaENRd0RDeUFaSUJBUUpDRUlEQUlMSUFoQkFDQUZFRWNpQmtVaEVTQUdJQWhySVFrZ0NDQUZhaUVISUJGRkJFQWdDU0VGQzBFQUlRbEJ5aWdoRGlBUlJRUkFJQVloQndzZ0NpRUdEQU1MSUFnaENVRUFJUVZCQUNFSEEwQUNRQ0FKS0FJQUlnNUZEUUFnRXlBT0VDOGlCMEVBU0NBSElBb2dCV3RMY2cwQUlBbEJCR29oQ1NBS0lBY2dCV29pQlVzTkFRc0xJQWRCQUVnRVFFRi9JUXdNQkFzZ0FFRWdJQThnQlNBR0VCSWdCUVJBUVFBaEJ3TkFJQWdvQWdBaUNVVU5BeUFUSUFrUUx5SUpJQWRxSWdjZ0JVb05BeUFJUVFScUlRZ2dBQ0FUSUFrUUVTQUhJQVZKRFFBTUF3c0FCVUVBSVFVTUFnc0FDeUFHUWYvL2UzRWhDaUFGUVg5S0JFQWdDaUVHQ3lBRlFRQkhJQmxDQUZJaUNuSWhEaUFGSUJVZ0NHc2dDa0VCYzBFQmNXb2lDa29FUUNBRklRb0xJQTRFUUNBS0lRVUxJQTVGQkVBZ0VDRUlDeUFISVE0Z0VDRUhEQUVMSUFCQklDQVBJQVVnQmtHQXdBQnpFQklnRHlBRlNnUkFJQThoQlFzTUFnc2dBRUVnSUE4Z0JTQUhJQWhySWdwSUJIOGdDZ1VnQlFzaUVTQUphaUlIU0FSL0lBY0ZJQThMSWdVZ0J5QUdFQklnQUNBT0lBa1FFU0FBUVRBZ0JTQUhJQVpCZ0lBRWN4QVNJQUJCTUNBUklBcEJBQkFTSUFBZ0NDQUtFQkVnQUVFZ0lBVWdCeUFHUVlEQUFITVFFZ3dCQ3dzTUFRc2dBRVVFUUNBQkJFQkJBU0VBQTBBZ0JDQUFRUUowYWlnQ0FDSUJCRUFnQXlBQVFRTjBhaUFCSUFJUVJDQUFRUUZxSVFFZ0FFRUpTQVJBSUFFaEFBd0NCU0FCSVFBTEN3c2dBRUVLU0FSQUEwQWdCQ0FBUVFKMGFpZ0NBQVJBUVg4aERBd0ZDeUFBUVFGcUlRRWdBRUVKU0FSQUlBRWhBQXdCQlVFQklRd0xDd1ZCQVNFTUN3VkJBQ0VNQ3dzTElBc2tCQ0FNQzRNM0FUQi9Jd1FoQWlNRVFmQUJhaVFFSUFKQjZBRnFJUW9nQWtISUFXb2hDU0FDSVFZZ0FFRkFheUl4S0FJQUJIOGdCaUFBUVNCcUloa1FIaUFHUWVBQWFpSVFLQUlBSWdKQlAzRWhCU0FRSUFKQklHbzJBZ0FnQmtFZ2FpRUlBa0FDUUVIQUFDQUZheUlDUVNCTEJFQWdBQ0VDSUFVaEJFRWdJUU1NQVFVZ0NDQUZhaUFBSUFJUURob2dBQ0FDYWlFRUlBWWdDQkFOUVNBZ0Ftc2lBMEhBQUVrRWZ5QUVCU0FBUWVRQWFpQUZRYUIvYWlJTlFVQnhJZzVCSEhJZ0JXdHFJUVVnQXlFQ0lBUWhBd05BSUFnZ0F5a0FBRGNBQUNBSUlBTXBBQWczQUFnZ0NDQURLUUFRTndBUUlBZ2dBeWtBR0RjQUdDQUlJQU1wQUNBM0FDQWdDQ0FES1FBb053QW9JQWdnQXlrQU1EY0FNQ0FJSUFNcEFEZzNBRGdnQTBGQWF5RURJQVlnQ0JBTklBSkJRR29pQWtIQUFFOE5BQXNnRFNBT2F5RURJQVVMSVFJZ0F3UkFRUUFoQkF3Q0N3c01BUXNnQ0NBRWFpQUNJQU1RRGhvTElCQW9BZ0FpQTBFL2NTRUNJQkFnQTBFQmFqWUNBQ0FHUVNCcUlRZ0NRQUpBUWNBQUlBSnJJZ05CQVVzRVFFSEVMU0VFUVFFaEF3d0JCU0FJSUFKcVFRQWdBeEFaR2lBRFFjUXRhaUVFSUFZZ0NCQU5RUUVnQTJzaUEwSEFBRWtFZnlBRUJTQUNRWUYvYWlJTlFVQnhJZzRnQW10QnhDNXFJUVVnQXlFQ0lBUWhBd05BSUFnZ0F5a0FBRGNBQUNBSUlBTXBBQWczQUFnZ0NDQURLUUFRTndBUUlBZ2dBeWtBR0RjQUdDQUlJQU1wQUNBM0FDQWdDQ0FES1FBb053QW9JQWdnQXlrQU1EY0FNQ0FJSUFNcEFEZzNBRGdnQTBGQWF5RURJQVlnQ0JBTklBSkJRR29pQWtIQUFFOE5BQXNnRFNBT2F5RURJQVVMSVFJZ0F3UkFJQUloQkVFQUlRSU1BZ3NMREFFTElBZ2dBbW9nQkNBREVBNGFDeUFLSUJBb0FnQWlBa0VkZGtFWWREWUNBQ0FLSUFKQkMzUkJnSUQ4QjNFZ0FrRWJkSElnQWtFRmRrR0EvZ054Y2lBQ1FSVjJRZjhCY1hJMkFnUWdFQ0FDUVRjZ0FtdEJQM0ZCQVdvaUEybzJBZ0FnQmtFZ2FpRUZBa0FDUUNBRFFjQUFJQUpCUDNFaUFtc2lCRWtFUUVHcEV5RUVEQUVGSUFVZ0FtcEJxUk1nQkJBT0dpQUVRYWtUYWlFQ0lBWWdCUkFOSUFNZ0JHc2lBMEhBQUU4RVFBTkFJQVVnQWlrQUFEY0FBQ0FGSUFJcEFBZzNBQWdnQlNBQ0tRQVFOd0FRSUFVZ0Fpa0FHRGNBR0NBRklBSXBBQ0EzQUNBZ0JTQUNLUUFvTndBb0lBVWdBaWtBTURjQU1DQUZJQUlwQURnM0FEZ2dBa0ZBYXlFQ0lBWWdCUkFOSUFOQlFHb2lBMEhBQUU4TkFBc0xJQU1FUUNBQ0lRUkJBQ0VDREFJTEN3d0JDeUFGSUFKcUlBUWdBeEFPR2dzZ0VDZ0NBQ0lDUVQ5eElRUWdFQ0FDUVFocU5nSUFJQVpCSUdvaEJRSkFBa0JCd0FBZ0JHc2lBMEVJU3dSQUlBb2hBa0VJSVFNTUFRVWdCU0FFYWlBS0lBTVFEaG9nQ2lBRGFpRUNJQVlnQlJBTlFRZ2dBMnNpQTBIQUFFOEVRQU5BSUFVZ0Fpa0FBRGNBQUNBRklBSXBBQWczQUFnZ0JTQUNLUUFRTndBUUlBVWdBaWtBR0RjQUdDQUZJQUlwQUNBM0FDQWdCU0FDS1FBb053QW9JQVVnQWlrQU1EY0FNQ0FGSUFJcEFEZzNBRGdnQWtGQWF5RUNJQVlnQlJBTklBTkJRR29pQTBIQUFFOE5BQXNMSUFNRVFFRUFJUVFNQWdzTERBRUxJQVVnQkdvZ0FpQURFQTRhQ3lBR0tBSUFFQXNoRWlBR1FRQTJBZ0FnQmtFRWFpSWVLQUlBRUFzaENDQWVRUUEyQWdBZ0JrRUlhaUlmS0FJQUVBc2hEU0FmUVFBMkFnQWdCa0VNYWlJZ0tBSUFFQXNoRGlBZ1FRQTJBZ0FnQmtFUWFpSWhLQUlBRUFzaEJTQWhRUUEyQWdBZ0JrRVVhaUlqS0FJQUVBc2hCQ0FqUVFBMkFnQWdCa0VZYWlJVEtBSUFFQXNoQXlBVFFRQTJBZ0FnQmtFY2FpSWRLQUlBRUFzaEFpQWRRUUEyQWdBZ0NTQVNOZ0lBSUFsQkJHb2lLeUFJTmdJQUlBbEJDR29pTENBTk5nSUFJQWxCREdvaUxTQU9OZ0lBSUFsQkVHb2lMaUFGTmdJQUlBbEJGR29pTHlBRU5nSUFJQWxCR0dvaU1DQUROZ0lBSUFsQkhHb2lLaUFDTmdJQUlBWkI1QUJxSVE4Z0JrSEVBV29pRVNnQ0FDSUNRVDl4SVFRZ0VTQUNRU0JxTmdJQUlBWkJoQUZxSVFjQ1FBSkFRY0FBSUFScklnVkJJRXNFUUNBSklRSWdCQ0VEUVNBaEJBd0JCU0FISUFScUlBa2dCUkFPR2lBSklBVnFJUU1nRHlBSEVBMUJJQ0FGYXlJQ1FjQUFTUVIvSUFJaEJDQURCU0FFUWFCL2FpSUVRUVoyUVFGMElRNGdCVUZBYWlFRkEwQWdCeUFES1FBQU53QUFJQWNnQXlrQUNEY0FDQ0FISUFNcEFCQTNBQkFnQnlBREtRQVlOd0FZSUFjZ0F5a0FJRGNBSUNBSElBTXBBQ2czQUNnZ0J5QURLUUF3TndBd0lBY2dBeWtBT0RjQU9DQURRVUJySVFNZ0R5QUhFQTBnQWtGQWFpSUNRY0FBVHcwQUN5QUVRVDl4SVFRZ0NTQU9RUVJxUVFWMGFpQUZhZ3NoQWlBRUJFQkJBQ0VEREFJTEN3d0JDeUFISUFOcUlBSWdCQkFPR2dzZ0NpQVJLQUlBSWdKQkhYWkJHSFEyQWdBZ0NpQUNRUXQwUVlDQS9BZHhJQUpCRzNSeUlBSkJCWFpCZ1A0RGNYSWdBa0VWZGtIL0FYRnlOZ0lFSUJFZ0FrRTNJQUpyUVQ5eFFRRnFJZ05xTmdJQUFrQUNRQ0FEUWNBQUlBSkJQM0VpQW1zaUJFa0VRRUdwRXlFRURBRUZJQWNnQW1wQnFSTWdCQkFPR2lBRVFha1RhaUVDSUE4Z0J4QU5JQU1nQkdzaUEwSEFBRThFUUFOQUlBY2dBaWtBQURjQUFDQUhJQUlwQUFnM0FBZ2dCeUFDS1FBUU53QVFJQWNnQWlrQUdEY0FHQ0FISUFJcEFDQTNBQ0FnQnlBQ0tRQW9Od0FvSUFjZ0Fpa0FNRGNBTUNBSElBSXBBRGczQURnZ0FrRkFheUVDSUE4Z0J4QU5JQU5CUUdvaUEwSEFBRThOQUFzTElBTUVRQ0FDSVFSQkFDRUNEQUlMQ3d3QkN5QUhJQUpxSUFRZ0F4QU9HZ3NnRVNnQ0FDSUNRVDl4SVFRZ0VTQUNRUWhxTmdJQUFrQUNRRUhBQUNBRWF5SURRUWhMQkVBZ0NpRUNRUWdoQXd3QkJTQUhJQVJxSUFvZ0F4QU9HaUFLSUFOcUlRSWdEeUFIRUExQkNDQURheUlEUWNBQVR3UkFBMEFnQnlBQ0tRQUFOd0FBSUFjZ0Fpa0FDRGNBQ0NBSElBSXBBQkEzQUJBZ0J5QUNLUUFZTndBWUlBY2dBaWtBSURjQUlDQUhJQUlwQUNnM0FDZ2dCeUFDS1FBd053QXdJQWNnQWlrQU9EY0FPQ0FDUVVCcklRSWdEeUFIRUEwZ0EwRkFhaUlEUWNBQVR3MEFDd3NnQXdSQVFRQWhCQXdDQ3dzTUFRc2dCeUFFYWlBQ0lBTVFEaG9MSUE4b0FnQVFDeUVTSUE5QkFEWUNBQ0FHUWVnQWFpSVhLQUlBRUFzaENDQVhRUUEyQWdBZ0JrSHNBR29pR2lnQ0FCQUxJUTBnR2tFQU5nSUFJQVpCOEFCcUloc29BZ0FRQ3lFT0lCdEJBRFlDQUNBR1FmUUFhaUljS0FJQUVBc2hCU0FjUVFBMkFnQWdCa0g0QUdvaUZDZ0NBQkFMSVFRZ0ZFRUFOZ0lBSUFaQi9BQnFJaFlvQWdBUUN5RURJQlpCQURZQ0FDQUdRWUFCYWlJWUtBSUFFQXNoQWlBWVFRQTJBZ0FnQUNBU05nQWdJQUFnQ0RZQUpDQUFJQTAyQUNnZ0FDQU9OZ0FzSUFBZ0JUWUFNQ0FBSUFRMkFEUWdBQ0FETmdBNElBQWdBallBUENBR0lCa1FIaUFRS0FJQUlnSkJQM0VoQlNBUUlBSkJJR28yQWdBZ0JrRWdhaUVJQWtBQ1FFSEFBQ0FGYXlJQ1FTQkxCRUFnQUNFQ0lBVWhCRUVnSVFNTUFRVWdDQ0FGYWlBQUlBSVFEaG9nQUNBQ2FpRUVJQVlnQ0JBTlFTQWdBbXNpQTBIQUFFa0VmeUFFQlNBQVFlUUFhaUFGUWFCL2FpSU5RVUJ4SWc1QkhISWdCV3RxSVFVZ0F5RUNJQVFoQXdOQUlBZ2dBeWtBQURjQUFDQUlJQU1wQUFnM0FBZ2dDQ0FES1FBUU53QVFJQWdnQXlrQUdEY0FHQ0FJSUFNcEFDQTNBQ0FnQ0NBREtRQW9Od0FvSUFnZ0F5a0FNRGNBTUNBSUlBTXBBRGczQURnZ0EwRkFheUVESUFZZ0NCQU5JQUpCUUdvaUFrSEFBRThOQUFzZ0RTQU9heUVESUFVTElRSWdBd1JBUVFBaEJBd0NDd3NNQVFzZ0NDQUVhaUFDSUFNUURob0xJQW9nRUNnQ0FDSUNRUjEyUVJoME5nSUFJQW9nQWtFTGRFR0FnUHdIY1NBQ1FSdDBjaUFDUVFWMlFZRCtBM0Z5SUFKQkZYWkIvd0Z4Y2pZQ0JDQVFJQUpCTnlBQ2EwRS9jVUVCYWlJRGFqWUNBQ0FHUVNCcUlRVUNRQUpBSUFOQndBQWdBa0UvY1NJQ2F5SUVTUVJBUWFrVElRUU1BUVVnQlNBQ2FrR3BFeUFFRUE0YUlBUkJxUk5xSVFJZ0JpQUZFQTBnQXlBRWF5SURRY0FBVHdSQUEwQWdCU0FDS1FBQU53QUFJQVVnQWlrQUNEY0FDQ0FGSUFJcEFCQTNBQkFnQlNBQ0tRQVlOd0FZSUFVZ0Fpa0FJRGNBSUNBRklBSXBBQ2czQUNnZ0JTQUNLUUF3TndBd0lBVWdBaWtBT0RjQU9DQUNRVUJySVFJZ0JpQUZFQTBnQTBGQWFpSURRY0FBVHcwQUN3c2dBd1JBSUFJaEJFRUFJUUlNQWdzTERBRUxJQVVnQW1vZ0JDQURFQTRhQ3lBUUtBSUFJZ0pCUDNFaEJDQVFJQUpCQ0dvMkFnQWdCa0VnYWlFRkFrQUNRRUhBQUNBRWF5SURRUWhMQkVBZ0NpRUNRUWdoQXd3QkJTQUZJQVJxSUFvZ0F4QU9HaUFLSUFOcUlRSWdCaUFGRUExQkNDQURheUlEUWNBQVR3UkFBMEFnQlNBQ0tRQUFOd0FBSUFVZ0Fpa0FDRGNBQ0NBRklBSXBBQkEzQUJBZ0JTQUNLUUFZTndBWUlBVWdBaWtBSURjQUlDQUZJQUlwQUNnM0FDZ2dCU0FDS1FBd053QXdJQVVnQWlrQU9EY0FPQ0FDUVVCcklRSWdCaUFGRUEwZ0EwRkFhaUlEUWNBQVR3MEFDd3NnQXdSQVFRQWhCQXdDQ3dzTUFRc2dCU0FFYWlBQ0lBTVFEaG9MSUFZb0FnQVFDeUVTSUFaQkFEWUNBQ0FlS0FJQUVBc2hDQ0FlUVFBMkFnQWdIeWdDQUJBTElRMGdIMEVBTmdJQUlDQW9BZ0FRQ3lFT0lDQkJBRFlDQUNBaEtBSUFFQXNoQlNBaFFRQTJBZ0FnSXlnQ0FCQUxJUVFnSTBFQU5nSUFJQk1vQWdBUUN5RURJQk5CQURZQ0FDQWRLQUlBRUFzaEFpQWRRUUEyQWdBZ0NTQVNOZ0lBSUNzZ0NEWUNBQ0FzSUEwMkFnQWdMU0FPTmdJQUlDNGdCVFlDQUNBdklBUTJBZ0FnTUNBRE5nSUFJQ29nQWpZQ0FDQVJLQUlBSWdKQlAzRWhCQ0FSSUFKQklHbzJBZ0FDUUFKQVFjQUFJQVJySWdWQklFc0VRQ0FKSVFJZ0JDRURRU0FoQkF3QkJTQUhJQVJxSUFrZ0JSQU9HaUFKSUFWcUlRTWdEeUFIRUExQklDQUZheUlDUWNBQVNRUi9JQUloQkNBREJTQUVRYUIvYWlJRVFRWjJRUUYwSVE0Z0JVRkFhaUVGQTBBZ0J5QURLUUFBTndBQUlBY2dBeWtBQ0RjQUNDQUhJQU1wQUJBM0FCQWdCeUFES1FBWU53QVlJQWNnQXlrQUlEY0FJQ0FISUFNcEFDZzNBQ2dnQnlBREtRQXdOd0F3SUFjZ0F5a0FPRGNBT0NBRFFVQnJJUU1nRHlBSEVBMGdBa0ZBYWlJQ1FjQUFUdzBBQ3lBRVFUOXhJUVFnQ1NBT1FRUnFRUVYwYWlBRmFnc2hBaUFFQkVCQkFDRUREQUlMQ3d3QkN5QUhJQU5xSUFJZ0JCQU9HZ3NnQ2lBUktBSUFJZ0pCSFhaQkdIUTJBZ0FnQ2lBQ1FRdDBRWUNBL0FkeElBSkJHM1J5SUFKQkJYWkJnUDREY1hJZ0FrRVZka0gvQVhGeU5nSUVJQkVnQWtFM0lBSnJRVDl4UVFGcUlnTnFOZ0lBQWtBQ1FDQURRY0FBSUFKQlAzRWlBbXNpQkVrRVFFR3BFeUVFREFFRklBY2dBbXBCcVJNZ0JCQU9HaUFFUWFrVGFpRUNJQThnQnhBTklBTWdCR3NpQTBIQUFFOEVRQU5BSUFjZ0Fpa0FBRGNBQUNBSElBSXBBQWczQUFnZ0J5QUNLUUFRTndBUUlBY2dBaWtBR0RjQUdDQUhJQUlwQUNBM0FDQWdCeUFDS1FBb053QW9JQWNnQWlrQU1EY0FNQ0FISUFJcEFEZzNBRGdnQWtGQWF5RUNJQThnQnhBTklBTkJRR29pQTBIQUFFOE5BQXNMSUFNRVFDQUNJUVJCQUNFQ0RBSUxDd3dCQ3lBSElBSnFJQVFnQXhBT0dnc2dFU2dDQUNJQ1FUOXhJUVFnRVNBQ1FRaHFOZ0lBQWtBQ1FFSEFBQ0FFYXlJRFFRaExCRUFnQ2lFQ1FRZ2hBd3dCQlNBSElBUnFJQW9nQXhBT0dpQUtJQU5xSVFJZ0R5QUhFQTFCQ0NBRGF5SURRY0FBVHdSQUEwQWdCeUFDS1FBQU53QUFJQWNnQWlrQUNEY0FDQ0FISUFJcEFCQTNBQkFnQnlBQ0tRQVlOd0FZSUFjZ0Fpa0FJRGNBSUNBSElBSXBBQ2czQUNnZ0J5QUNLUUF3TndBd0lBY2dBaWtBT0RjQU9DQUNRVUJySVFJZ0R5QUhFQTBnQTBGQWFpSURRY0FBVHcwQUN3c2dBd1JBUVFBaEJBd0NDd3NNQVFzZ0J5QUVhaUFDSUFNUURob0xJQThvQWdBUUN5RVNJQTlCQURZQ0FDQVhLQUlBRUFzaENDQVhRUUEyQWdBZ0dpZ0NBQkFMSVEwZ0drRUFOZ0lBSUJzb0FnQVFDeUVPSUJ0QkFEWUNBQ0FjS0FJQUVBc2hCU0FjUVFBMkFnQWdGQ2dDQUJBTElRUWdGRUVBTmdJQUlCWW9BZ0FRQ3lFRElCWkJBRFlDQUNBWUtBSUFFQXNoQWlBQUlCSTJBQUFnQUVFRWFpSVdJQWcyQUFBZ0FFRUlhaUlZSUEwMkFBQWdBRUVNYWlJU0lBNDJBQUFnQUVFUWFpSUlJQVUyQUFBZ0FFRVVhaUlOSUFRMkFBQWdBRUVZYWlJRklBTTJBQUFnQUVFY2FpSUVJQUkyQUFBZ0dTRVVJQUFpQXlFT0lBUWhHaUFXSVJzZ0dDRWNJQkloRmlBSUlSZ2dEU0VTSUFVaENDQUpJZ0lGSUFCQklHb2hGQ0FBSWdNaERpQUpRUnhxSVNvZ0FFRWNhaUVhSUFsQkJHb2hLeUFBUVFScUlSc2dDVUVJYWlFc0lBQkJDR29oSENBSlFReHFJUzBnQUVFTWFpRVdJQWxCRUdvaExpQUFRUkJxSVJnZ0NVRVVhaUV2SUFCQkZHb2hFaUFKUVJocUlUQWdBRUVZYWlFSUlBa2lBZ3NoR1NBR1FTQnFJUXNnQ2tFRWFpRWRJQVpCQkdvaEJ5QUdRUWhxSVE4Z0JrRU1haUVRSUFaQkVHb2hFU0FHUVJScUlSNGdCa0VZYWlFZklBWkJIR29oSUNBR1FjUUJhaUVpSUFaQmhBRnFJUXdnQ2tFRWFpRWpJQVpCNUFCcUlSVWdCa0hvQUdvaEpDQUdRZXdBYWlFbElBWkI4QUJxSVNZZ0JrSDBBR29oSnlBR1FmZ0FhaUVvSUFaQi9BQnFJU2tnQmtHQUFXb2hJU0FBUVlBQmFpRVhJQVlnRkJBZUlBWkI0QUJxSWhNb0FnQWlCRUUvY1NFTklCTWdCRUVnYWpZQ0FBSkFBa0JCd0FBZ0RXc2lCRUVnU3dSQUlBMGhCVUVnSVFRTUFRVWdDeUFOYWlBRElBUVFEaG9nQUNBRWFpRUZJQVlnQ3hBTlFTQWdCR3NpQkVIQUFFa0VmeUFGQlNBWElBMUJvSDlxSWhkQlFIRWlGQ0FOYTJvaERTQUVJUUFnQlNFRUEwQWdDeUFFS1FBQU53QUFJQXNnQkNrQUNEY0FDQ0FMSUFRcEFCQTNBQkFnQ3lBRUtRQVlOd0FZSUFzZ0JDa0FJRGNBSUNBTElBUXBBQ2czQUNnZ0N5QUVLUUF3TndBd0lBc2dCQ2tBT0RjQU9DQUVRVUJySVFRZ0JpQUxFQTBnQUVGQWFpSUFRY0FBVHcwQUN5QVhJQlJySVFRZ0RRc2hBQ0FFQkVCQkFDRUZEQUlMQ3d3QkN5QUxJQVZxSUFBZ0JCQU9HZ3NnQ2lBVEtBSUFJZ0JCSFhaQkdIUTJBZ0FnSFNBQVFRdDBRWUNBL0FkeElBQkJHM1J5SUFCQkJYWkJnUDREY1hJZ0FFRVZka0gvQVhGeU5nSUFJQk1nQUVFM0lBQnJRVDl4UVFGcUlnUnFOZ0lBQWtBQ1FDQUVRY0FBSUFCQlAzRWlBR3NpQlVrRVFFR3BFeUVGREFFRklBc2dBR3BCcVJNZ0JSQU9HaUFGUWFrVGFpRUFJQVlnQ3hBTklBUWdCV3NpQkVIQUFFOEVRQU5BSUFzZ0FDa0FBRGNBQUNBTElBQXBBQWczQUFnZ0N5QUFLUUFRTndBUUlBc2dBQ2tBR0RjQUdDQUxJQUFwQUNBM0FDQWdDeUFBS1FBb053QW9JQXNnQUNrQU1EY0FNQ0FMSUFBcEFEZzNBRGdnQUVGQWF5RUFJQVlnQ3hBTklBUkJRR29pQkVIQUFFOE5BQXNMSUFRRVFDQUFJUVZCQUNFQURBSUxDd3dCQ3lBTElBQnFJQVVnQkJBT0dnc2dFeWdDQUNJQVFUOXhJUVVnRXlBQVFRaHFOZ0lBQWtBQ1FFSEFBQ0FGYXlJRVFRaExCRUFnQ2lFQVFRZ2hCQXdCQlNBTElBVnFJQW9nQkJBT0dpQUtJQVJxSVFBZ0JpQUxFQTFCQ0NBRWF5SUVRY0FBVHdSQUEwQWdDeUFBS1FBQU53QUFJQXNnQUNrQUNEY0FDQ0FMSUFBcEFCQTNBQkFnQ3lBQUtRQVlOd0FZSUFzZ0FDa0FJRGNBSUNBTElBQXBBQ2czQUNnZ0N5QUFLUUF3TndBd0lBc2dBQ2tBT0RjQU9DQUFRVUJySVFBZ0JpQUxFQTBnQkVGQWFpSUVRY0FBVHcwQUN3c2dCQVJBUVFBaEJRd0NDd3NNQVFzZ0N5QUZhaUFBSUFRUURob0xJQVlvQWdBUUN5RVRJQVpCQURZQ0FDQUhLQUlBRUFzaEhTQUhRUUEyQWdBZ0R5Z0NBQkFMSVJjZ0QwRUFOZ0lBSUJBb0FnQVFDeUVVSUJCQkFEWUNBQ0FSS0FJQUVBc2hEU0FSUVFBMkFnQWdIaWdDQUJBTElRVWdIa0VBTmdJQUlCOG9BZ0FRQ3lFRUlCOUJBRFlDQUNBZ0tBSUFFQXNoQUNBZ1FRQTJBZ0FnR1NBVE5nSUFJQ3NnSFRZQ0FDQXNJQmMyQWdBZ0xTQVVOZ0lBSUM0Z0RUWUNBQ0F2SUFVMkFnQWdNQ0FFTmdJQUlDb2dBRFlDQUNBaUtBSUFJZ0JCUDNFaEJDQWlJQUJCSUdvMkFnQUNRQUpBUWNBQUlBUnJJZ0JCSUVzRVFDQUNJUUFnQkNFQ1FTQWhDUXdCQlNBTUlBUnFJQUlnQUJBT0dpQUpJQUJxSVFJZ0ZTQU1FQTFCSUNBQWF5SUFRY0FBU1FSL0lBQWhDU0FDQlNBSlFZQUJhaUFFUWFCL2FpSUZRVUJ4SWdrZ0JHdHFJUVFEUUNBTUlBSXBBQUEzQUFBZ0RDQUNLUUFJTndBSUlBd2dBaWtBRURjQUVDQU1JQUlwQUJnM0FCZ2dEQ0FDS1FBZ053QWdJQXdnQWlrQUtEY0FLQ0FNSUFJcEFEQTNBREFnRENBQ0tRQTROd0E0SUFKQlFHc2hBaUFWSUF3UURTQUFRVUJxSWdCQndBQlBEUUFMSUFVZ0NXc2hDU0FFQ3lFQUlBa0VRRUVBSVFJTUFnc0xEQUVMSUF3Z0Ftb2dBQ0FKRUE0YUN5QUtJQ0lvQWdBaUFFRWRka0VZZERZQ0FDQWpJQUJCQzNSQmdJRDhCM0VnQUVFYmRISWdBRUVGZGtHQS9nTnhjaUFBUVJWMlFmOEJjWEkyQWdBZ0lpQUFRVGNnQUd0QlAzRkJBV29pQW1vMkFnQUNRQUpBSUFKQndBQWdBRUUvY1NJQWF5SUpTUVJBUWFrVElRa01BUVVnRENBQWFrR3BFeUFKRUE0YUlBbEJxUk5xSVFBZ0ZTQU1FQTBnQWlBSmF5SUNRY0FBVHdSQUEwQWdEQ0FBS1FBQU53QUFJQXdnQUNrQUNEY0FDQ0FNSUFBcEFCQTNBQkFnRENBQUtRQVlOd0FZSUF3Z0FDa0FJRGNBSUNBTUlBQXBBQ2czQUNnZ0RDQUFLUUF3TndBd0lBd2dBQ2tBT0RjQU9DQUFRVUJySVFBZ0ZTQU1FQTBnQWtGQWFpSUNRY0FBVHcwQUN3c2dBZ1JBSUFBaENVRUFJUUFNQWdzTERBRUxJQXdnQUdvZ0NTQUNFQTRhQ3lBaUtBSUFJZ0JCUDNFaEFpQWlJQUJCQ0dvMkFnQkJ3QUFnQW1zaUNVRUlTd1JBSUFvaEFFRUlJUW9GSUF3Z0Ftb2dDaUFKRUE0YUlBb2dDV29oQUNBVklBd1FEVUVJSUFscklncEJ3QUJQQkVBRFFDQU1JQUFwQUFBM0FBQWdEQ0FBS1FBSU53QUlJQXdnQUNrQUVEY0FFQ0FNSUFBcEFCZzNBQmdnRENBQUtRQWdOd0FnSUF3Z0FDa0FLRGNBS0NBTUlBQXBBREEzQURBZ0RDQUFLUUE0TndBNElBQkJRR3NoQUNBVklBd1FEU0FLUVVCcUlncEJ3QUJQRFFBTEN5QUtCRUJCQUNFQ0JTQVZLQUlBRUFzaERTQVZRUUEyQWdBZ0pDZ0NBQkFMSVJrZ0pFRUFOZ0lBSUNVb0FnQVFDeUVGSUNWQkFEWUNBQ0FtS0FJQUVBc2hCQ0FtUVFBMkFnQWdKeWdDQUJBTElRa2dKMEVBTmdJQUlDZ29BZ0FRQ3lFQ0lDaEJBRFlDQUNBcEtBSUFFQXNoQ2lBcFFRQTJBZ0FnSVNnQ0FCQUxJUUFnRGlBTk5nQUFJQnNnR1RZQUFDQWNJQVUyQUFBZ0ZpQUVOZ0FBSUJnZ0NUWUFBQ0FTSUFJMkFBQWdDQ0FLTmdBQUlCb2dBRFlBQUNBQklBTXBBQUEzQUFBZ0FTQURLUUFJTndBSUlBRWdBeWtBRURjQUVDQUJJQU1wQUJnM0FCZ2dNVUVCTmdJQUlBWWtCQThMQ3lBTUlBSnFJQUFnQ2hBT0dpQVZLQUlBRUFzaERTQVZRUUEyQWdBZ0pDZ0NBQkFMSVJrZ0pFRUFOZ0lBSUNVb0FnQVFDeUVGSUNWQkFEWUNBQ0FtS0FJQUVBc2hCQ0FtUVFBMkFnQWdKeWdDQUJBTElRa2dKMEVBTmdJQUlDZ29BZ0FRQ3lFQ0lDaEJBRFlDQUNBcEtBSUFFQXNoQ2lBcFFRQTJBZ0FnSVNnQ0FCQUxJUUFnRGlBTk5nQUFJQnNnR1RZQUFDQWNJQVUyQUFBZ0ZpQUVOZ0FBSUJnZ0NUWUFBQ0FTSUFJMkFBQWdDQ0FLTmdBQUlCb2dBRFlBQUNBQklBTXBBQUEzQUFBZ0FTQURLUUFJTndBSUlBRWdBeWtBRURjQUVDQUJJQU1wQUJnM0FCZ2dNVUVCTmdJQUlBWWtCQXViRXdFUGZ5TUVJUWdqQkVHd0JHb2tCQ0FJUWFBQmFpRUVJQWhCK0FCcUlRa2dDRUhRQUdvaEJTQUFJQUVwQWdBM0FnQWdBQ0FCS1FJSU53SUlJQUFnQVNrQ0VEY0NFQ0FBSUFFcEFoZzNBaGdnQUNBQktRSWdOd0lnSUFoQktHb2lBeUFCRUFvZ0NDQUJJQU1RRENBQVFRQTJBbEFnQ0NBSUtBSUFRUWRxTmdJQUlBaEJCR29oRFNBSVFReHFJUThnQ0VFVWFpRVFJQWhCSEdvaEVTQUlRU1JxSVE0Z0NFR0lCR29pRENBSUVBb2dEQ0FNSUFnUURDQUlRZUFEYWlJTElBd1FDaUFMSUFzZ0NCQU1JQWhCdUFOcUlnRWdDeWtDQURjQ0FDQUJJQXNwQWdnM0FnZ2dBU0FMS1FJUU53SVFJQUVnQ3lrQ0dEY0NHQ0FCSUFzcEFpQTNBaUFnQVNBQkVBb2dBU0FCRUFvZ0FTQUJFQW9nQVNBQklBc1FEQ0FJUVpBRGFpSURJQUVwQWdBM0FnQWdBeUFCS1FJSU53SUlJQU1nQVNrQ0VEY0NFQ0FESUFFcEFoZzNBaGdnQXlBQktRSWdOd0lnSUFNZ0F4QUtJQU1nQXhBS0lBTWdBeEFLSUFNZ0F5QUxFQXdnQ0VIb0Ftb2lBU0FES1FJQU53SUFJQUVnQXlrQ0NEY0NDQ0FCSUFNcEFoQTNBaEFnQVNBREtRSVlOd0lZSUFFZ0F5a0NJRGNDSUNBQklBRVFDaUFCSUFFUUNpQUJJQUVnREJBTUlBaEJ3QUpxSWdjZ0FTa0NBRGNDQUNBSElBRXBBZ2czQWdnZ0J5QUJLUUlRTndJUUlBY2dBU2tDR0RjQ0dDQUhJQUVwQWlBM0FpQWdCeUFIRUFvZ0J5QUhFQW9nQnlBSEVBb2dCeUFIRUFvZ0J5QUhFQW9nQnlBSEVBb2dCeUFIRUFvZ0J5QUhFQW9nQnlBSEVBb2dCeUFIRUFvZ0J5QUhFQW9nQnlBSElBRVFEQ0FJUVpnQ2FpSUdJQWNwQWdBM0FnQWdCaUFIS1FJSU53SUlJQVlnQnlrQ0VEY0NFQ0FHSUFjcEFoZzNBaGdnQmlBSEtRSWdOd0lnSUFZZ0JoQUtJQVlnQmhBS0lBWWdCaEFLSUFZZ0JoQUtJQVlnQmhBS0lBWWdCaEFLSUFZZ0JoQUtJQVlnQmhBS0lBWWdCaEFLSUFZZ0JoQUtJQVlnQmhBS0lBWWdCaEFLSUFZZ0JoQUtJQVlnQmhBS0lBWWdCaEFLSUFZZ0JoQUtJQVlnQmhBS0lBWWdCaEFLSUFZZ0JoQUtJQVlnQmhBS0lBWWdCaEFLSUFZZ0JoQUtJQVlnQmlBSEVBd2dDRUh3QVdvaUF5QUdLUUlBTndJQUlBTWdCaWtDQ0RjQ0NDQURJQVlwQWhBM0FoQWdBeUFHS1FJWU53SVlJQU1nQmlrQ0lEY0NJQ0FESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTVFDaUFESUFNUUNpQURJQU1RQ2lBRElBTWdCaEFNSUFoQnlBRnFJZ29nQXlrQ0FEY0NBQ0FLSUFNcEFnZzNBZ2dnQ2lBREtRSVFOd0lRSUFvZ0F5a0NHRGNDR0NBS0lBTXBBaUEzQWlCQkFDRUJBMEFnQ2lBS0VBb2dBVUVCYWlJQlFkZ0FSdzBBQ3lBS0lBb2dBeEFNSUFRZ0Npa0NBRGNDQUNBRUlBb3BBZ2czQWdnZ0JDQUtLUUlRTndJUUlBUWdDaWtDR0RjQ0dDQUVJQW9wQWlBM0FpQWdCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUVBb2dCQ0FFRUFvZ0JDQUVFQW9nQkNBRUlBWVFEQ0FKSUFRcEFnQTNBZ0FnQ1NBRUtRSUlOd0lJSUFrZ0JDa0NFRGNDRUNBSklBUXBBaGczQWhnZ0NTQUVLUUlnTndJZ0lBa2dDUkFLSUFrZ0NSQUtJQWtnQ1JBS0lBa2dDU0FMRUF3Z0JTQUpLUUlBTndJQUlBVWdDU2tDQ0RjQ0NDQUZJQWtwQWhBM0FoQWdCU0FKS1FJWU53SVlJQVVnQ1NrQ0lEY0NJQ0FGSUFVUUNpQUZJQVVRQ2lBRklBVVFDaUFGSUFVUUNpQUZJQVVRQ2lBRklBVVFDaUFGSUFVUUNpQUZJQVVRQ2lBRklBVVFDaUFGSUFVUUNpQUZJQVVRQ2lBRklBVVFDaUFGSUFVUUNpQUZJQVVRQ2lBRklBVVFDaUFGSUFVUUNpQUZJQVVRQ2lBRklBVVFDaUFGSUFVUUNpQUZJQVVRQ2lBRklBVVFDaUFGSUFVUUNpQUZJQVVRQ2lBRklBVWdCeEFNSUFVZ0JSQUtJQVVnQlJBS0lBVWdCUkFLSUFVZ0JSQUtJQVVnQlJBS0lBVWdCUkFLSUFVZ0JTQU1FQXdnQlNBRkVBb2dBRUVvYWlJQklBVVFDaUFGSUFFUUNrRzg0Zi8vQUNBRktBSUFheUFJS0FJQWFpQU9LQUlBUWZ6Ly93Y2dCU2dDSkd0cUlnNUJGbllpQTBIUkIyeHFJUVJCL1AvLy93QWdCU2dDSUdzZ0NDZ0NJR3BCL1AvLy93QWdCU2dDSEdzZ0VTZ0NBR3BCL1AvLy93QWdCU2dDR0dzZ0NDZ0NHR3BCL1AvLy93QWdCU2dDRkdzZ0VDZ0NBR3BCL1AvLy93QWdCU2dDRUdzZ0NDZ0NFR3BCL1AvLy93QWdCU2dDREdzZ0R5Z0NBR3BCL1AvLy93QWdCU2dDQ0dzZ0NDZ0NDR3BCL1AzLy93QWdCU2dDQkdzZ0RTZ0NBR29nQTBFR2RHb2dCRUVhZG1vaUEwRWFkbW9pQlVFYWRtb2lCa0VhZG1vaUIwRWFkbW9pQ1VFYWRtb2lDa0VhZG1vaUMwRWFkbW9pREVFYWRpQU9RZi8vL3dGeGFpRU5JQU1nQkhJZ0JYSWdCbklnQjNJZ0NYSWdDbklnQzNJZ0RISkIvLy8vSDNFZ0RYSUVmeUFEUWNBQWN5QUVRZEFIYzNFZ0JYRWdCbkVnQjNFZ0NYRWdDbkVnQzNFZ0RIRWdEVUdBZ0lBZWMzRkIvLy8vSDBjRlFRQUxCRUFnQ0NRRVFRQVBDeUFCRUJjZ0FTZ0NBQ0lFUVFGeElBSkdCRUFnQ0NRRVFRRVBDeUFCUWJ6aC8vOEFJQVJyTmdJQUlBQkJMR29pQVVIOC9mLy9BQ0FCS0FJQWF6WUNBQ0FBUVRCcUlnRkIvUC8vL3dBZ0FTZ0NBR3MyQWdBZ0FFRTBhaUlCUWZ6Ly8vOEFJQUVvQWdCck5nSUFJQUJCT0dvaUFVSDgvLy8vQUNBQktBSUFhellDQUNBQVFUeHFJZ0ZCL1AvLy93QWdBU2dDQUdzMkFnQWdBRUZBYXlJQlFmei8vLzhBSUFFb0FnQnJOZ0lBSUFCQnhBQnFJZ0ZCL1AvLy93QWdBU2dDQUdzMkFnQWdBRUhJQUdvaUFVSDgvLy8vQUNBQktBSUFhellDQUNBQVFjd0FhaUlBUWZ6Ly93Y2dBQ2dDQUdzMkFnQWdDQ1FFUVFFTG5BUUJBbjhnQUNBQlFTUnFJZ01vQWdCQkRuWTZBQUFnQUNBREtBSUFRUVoyT2dBQklBQWdBVUVnYWlJQ0tBSUFRUmgyUVFOeElBTW9BZ0JCQW5SeU9nQUNJQUFnQWlnQ0FFRVFkam9BQXlBQUlBSW9BZ0JCQ0hZNkFBUWdBQ0FDS0FJQU9nQUZJQUFnQVVFY2FpSUNLQUlBUVJKMk9nQUdJQUFnQWlnQ0FFRUtkam9BQnlBQUlBSW9BZ0JCQW5ZNkFBZ2dBQ0FCUVJocUlnTW9BZ0JCRkhaQlAzRWdBaWdDQUVFR2RISTZBQWtnQUNBREtBSUFRUXgyT2dBS0lBQWdBeWdDQUVFRWRqb0FDeUFBSUFGQkZHb2lBaWdDQUVFV2RrRVBjU0FES0FJQVFRUjBjam9BRENBQUlBSW9BZ0JCRG5ZNkFBMGdBQ0FDS0FJQVFRWjJPZ0FPSUFBZ0FVRVFhaUlES0FJQVFSaDJRUU54SUFJb0FnQkJBblJ5T2dBUElBQWdBeWdDQUVFUWRqb0FFQ0FBSUFNb0FnQkJDSFk2QUJFZ0FDQURLQUlBT2dBU0lBQWdBVUVNYWlJQ0tBSUFRUkoyT2dBVElBQWdBaWdDQUVFS2Rqb0FGQ0FBSUFJb0FnQkJBblk2QUJVZ0FDQUJRUWhxSWdNb0FnQkJGSFpCUDNFZ0FpZ0NBRUVHZEhJNkFCWWdBQ0FES0FJQVFReDJPZ0FYSUFBZ0F5Z0NBRUVFZGpvQUdDQUFJQUZCQkdvaUFpZ0NBRUVXZGtFUGNTQURLQUlBUVFSMGNqb0FHU0FBSUFJb0FnQkJEblk2QUJvZ0FDQUNLQUlBUVFaMk9nQWJJQUFnQVNnQ0FFRVlka0VEY1NBQ0tBSUFRUUowY2pvQUhDQUFJQUVvQWdCQkVIWTZBQjBnQUNBQktBSUFRUWgyT2dBZUlBQWdBU2dDQURvQUh3dE1BUUovSUFBb0FnQXNBQUFpQVVGUWFrRUtTUVJBQTBBZ0FrRUtiRUZRYWlBQUtBSUFJZ0VzQUFCcUlRSWdBQ0FCUVFGcUlnRTJBZ0FnQVN3QUFDSUJRVkJxUVFwSkRRQUxDeUFDQ3hJQUlBQUVmeUFBSUFGQkFCQkdCVUVBQ3d1WUFRSUJmd0orQWtBQ1FBSkFJQUM5SWdOQ05JZ2lCS2RCL3c5eElnSUVRQ0FDUWY4UFJnUkFEQVFGREFNTEFBc2dBU0FBUkFBQUFBQUFBQUFBWWdSL0lBQkVBQUFBQUFBQThFT2lJQUVRTUNFQUlBRW9BZ0JCUUdvRlFRQUxJZ0kyQWdBTUFnQUxBQUFMSUFFZ0JLZEIvdzl4UVlKNGFqWUNBQ0FEUXYvLy8vLy8vLytIZ0grRFFvQ0FnSUNBZ0lEd1A0Uy9JUUFMSUFBTHpBMEJDSDhnQUVVRVFBOExRYUFwS0FJQUlRSWdBRUY0YWlJRUlBQkJmR29vQWdBaUFFRjRjU0lCYWlFR0FuOGdBRUVCY1FSL0lBUWlBQVVnQkNnQ0FDRURJQUJCQTNGRkJFQVBDeUFFSUFOcklnQWdBa2tFUUE4TElBTWdBV29oQVVHa0tTZ0NBQ0FBUmdSQUlBQWdCa0VFYWlJQ0tBSUFJZ1JCQTNGQkEwY05BaHBCbUNrZ0FUWUNBQ0FDSUFSQmZuRTJBZ0FnQUNBQlFRRnlOZ0lFSUFBZ0FXb2dBVFlDQUE4TElBTkJBM1loQkNBRFFZQUNTUVJBSUFBb0Fnd2lBeUFBS0FJSUlnSkdCRUJCa0NsQmtDa29BZ0JCQVNBRWRFRi9jM0UyQWdBZ0FBd0RCU0FDSUFNMkFnd2dBeUFDTmdJSUlBQU1Bd3NBQ3lBQUtBSVlJUWNDUUNBQUtBSU1JZ1FnQUVZRVFDQUFRUkJxSWdOQkJHb2lBaWdDQUNJRVJRUkFJQU1vQWdBaUJBUkFJQU1oQWdWQkFDRUVEQU1MQ3dOQUlBUkJGR29pQlNnQ0FDSURCRUFnQXlFRUlBVWhBZ3dCQ3lBRVFSQnFJZ1VvQWdBaUF3UkFJQU1oQkNBRklRSU1BUXNMSUFKQkFEWUNBQVVnQUNnQ0NDSUNJQVEyQWd3Z0JDQUNOZ0lJQ3dzZ0J3Ui9JQUFvQWh3aUEwRUNkRUhBSzJvaUFpZ0NBQ0FBUmdSQUlBSWdCRFlDQUNBRVJRUkFRWlFwUVpRcEtBSUFRUUVnQTNSQmYzTnhOZ0lBSUFBTUJBc0ZJQWRCRUdvZ0J5Z0NFQ0FBUjBFQ2RHb2dCRFlDQUNBQUlBUkZEUU1hQ3lBRUlBYzJBaGdnQUVFUWFpSUNLQUlBSWdNRVFDQUVJQU0yQWhBZ0F5QUVOZ0lZQ3lBQ0tBSUVJZ0lFZnlBRUlBSTJBaFFnQWlBRU5nSVlJQUFGSUFBTEJTQUFDd3NMSWdRZ0JrOEVRQThMSUFaQkJHb2lBaWdDQUNJRFFRRnhSUVJBRHdzZ0EwRUNjUVJBSUFJZ0EwRitjVFlDQUNBQUlBRkJBWEkyQWdRZ0JDQUJhaUFCTmdJQUlBRWhCQVZCcUNrb0FnQWdCa1lFUUVHY0tVR2NLU2dDQUNBQmFpSUJOZ0lBUWFncElBQTJBZ0FnQUNBQlFRRnlOZ0lFSUFCQnBDa29BZ0JIQkVBUEMwR2tLVUVBTmdJQVFaZ3BRUUEyQWdBUEMwR2tLU2dDQUNBR1JnUkFRWmdwUVpncEtBSUFJQUZxSWdFMkFnQkJwQ2tnQkRZQ0FDQUFJQUZCQVhJMkFnUWdCQ0FCYWlBQk5nSUFEd3NnQTBGNGNTQUJhaUVISUFOQkEzWWhBUUpBSUFOQmdBSkpCRUFnQmlnQ0RDSURJQVlvQWdnaUFrWUVRRUdRS1VHUUtTZ0NBRUVCSUFGMFFYOXpjVFlDQUFVZ0FpQUROZ0lNSUFNZ0FqWUNDQXNGSUFZb0FoZ2hDQUpBSUFZb0Fnd2lBU0FHUmdSQUlBWkJFR29pQTBFRWFpSUNLQUlBSWdGRkJFQWdBeWdDQUNJQkJFQWdBeUVDQlVFQUlRRU1Bd3NMQTBBZ0FVRVVhaUlGS0FJQUlnTUVRQ0FESVFFZ0JTRUNEQUVMSUFGQkVHb2lCU2dDQUNJREJFQWdBeUVCSUFVaEFnd0JDd3NnQWtFQU5nSUFCU0FHS0FJSUlnSWdBVFlDRENBQklBSTJBZ2dMQ3lBSUJFQWdCaWdDSENJRFFRSjBRY0FyYWlJQ0tBSUFJQVpHQkVBZ0FpQUJOZ0lBSUFGRkJFQkJsQ2xCbENrb0FnQkJBU0FEZEVGL2MzRTJBZ0FNQkFzRklBaEJFR29nQ0NnQ0VDQUdSMEVDZEdvZ0FUWUNBQ0FCUlEwREN5QUJJQWcyQWhnZ0JrRVFhaUlDS0FJQUlnTUVRQ0FCSUFNMkFoQWdBeUFCTmdJWUN5QUNLQUlFSWdJRVFDQUJJQUkyQWhRZ0FpQUJOZ0lZQ3dzTEN5QUFJQWRCQVhJMkFnUWdCQ0FIYWlBSE5nSUFJQUJCcENrb0FnQkdCRUJCbUNrZ0J6WUNBQThGSUFjaEJBc0xJQVJCQTNZaEFTQUVRWUFDU1FSQUlBRkJBM1JCdUNscUlRSkJrQ2tvQWdBaUJFRUJJQUYwSWdGeEJIOGdBa0VJYWlJQktBSUFCVUdRS1NBRUlBRnlOZ0lBSUFKQkNHb2hBU0FDQ3lFRUlBRWdBRFlDQUNBRUlBQTJBZ3dnQUNBRU5nSUlJQUFnQWpZQ0RBOExJQVJCQ0hZaUFRUi9JQVJCLy8vL0Iwc0VmMEVmQlNBRVFRNGdBU0FCUVlEK1AycEJFSFpCQ0hFaUEzUWlBa0dBNEI5cVFSQjJRUVJ4SWdFZ0EzSWdBaUFCZENJQ1FZQ0FEMnBCRUhaQkFuRWlBWEpySUFJZ0FYUkJEM1pxSWdGQkIycDJRUUZ4SUFGQkFYUnlDd1ZCQUFzaUJVRUNkRUhBSzJvaEF5QUFJQVUyQWh3Z0FFRUFOZ0lVSUFCQkFEWUNFQUpBUVpRcEtBSUFJZ0pCQVNBRmRDSUJjUVJBSUFNb0FnQWhBVUVaSUFWQkFYWnJJUUlnQkNBRlFSOUdCSDlCQUFVZ0FndDBJUVVDUUFOQUlBRW9BZ1JCZUhFZ0JFWU5BU0FGUVFGMElRTWdBVUVRYWlBRlFSOTJRUUowYWlJRktBSUFJZ0lFUUNBRElRVWdBaUVCREFFTEN5QUZJQUEyQWdBZ0FDQUJOZ0lZSUFBZ0FEWUNEQ0FBSUFBMkFnZ01BZ3NnQVVFSWFpSUNLQUlBSWdRZ0FEWUNEQ0FDSUFBMkFnQWdBQ0FFTmdJSUlBQWdBVFlDRENBQVFRQTJBaGdGUVpRcElBSWdBWEkyQWdBZ0F5QUFOZ0lBSUFBZ0F6WUNHQ0FBSUFBMkFnd2dBQ0FBTmdJSUN3dEJzQ2xCc0Nrb0FnQkJmMm9pQURZQ0FDQUFCRUFQQlVIWUxDRUFDd05BSUFBb0FnQWlBVUVJYWlFQUlBRU5BQXRCc0NsQmZ6WUNBQXZNTlFFTWZ5TUVJUUVqQkVFUWFpUUVJQUVoQ2dKQUlBQkI5UUZKQkVBZ0FFRUxha0Y0Y1NFQ1FaQXBLQUlBSWdZZ0FFRUxTUVIvUVJBaUFnVWdBZ3RCQTNZaUFIWWlBVUVEY1FSQUlBRkJBWEZCQVhNZ0FHb2lBRUVEZEVHNEtXb2lBVUVJYWlJRktBSUFJZ0pCQ0dvaUJDZ0NBQ0lESUFGR0JFQkJrQ2tnQmtFQklBQjBRWDl6Y1RZQ0FBVWdBeUFCTmdJTUlBVWdBellDQUFzZ0FpQUFRUU4wSWdCQkEzSTJBZ1FnQWlBQWFrRUVhaUlBSUFBb0FnQkJBWEkyQWdBZ0NpUUVJQVFQQ3lBQ1FaZ3BLQUlBSWdoTEJFQWdBUVJBSUFFZ0FIUkJBaUFBZENJQVFRQWdBR3R5Y1NJQVFRQWdBR3R4UVg5cUlnRkJESFpCRUhFaEFDQUJJQUIySWdGQkJYWkJDSEVpQXlBQWNpQUJJQU4ySWdCQkFuWkJCSEVpQVhJZ0FDQUJkaUlBUVFGMlFRSnhJZ0Z5SUFBZ0FYWWlBRUVCZGtFQmNTSUJjaUFBSUFGMmFpSURRUU4wUWJncGFpSUFRUWhxSWdRb0FnQWlBVUVJYWlJSEtBSUFJZ1VnQUVZRVFFR1FLU0FHUVFFZ0EzUkJmM054SWdBMkFnQUZJQVVnQURZQ0RDQUVJQVUyQWdBZ0JpRUFDeUFCSUFKQkEzSTJBZ1FnQVNBQ2FpSUVJQU5CQTNRaUF5QUNheUlGUVFGeU5nSUVJQUVnQTJvZ0JUWUNBQ0FJQkVCQnBDa29BZ0FoQXlBSVFRTjJJZ0pCQTNSQnVDbHFJUUVnQUVFQklBSjBJZ0p4Qkg4Z0FVRUlhaUlDS0FJQUJVR1FLU0FBSUFKeU5nSUFJQUZCQ0dvaEFpQUJDeUVBSUFJZ0F6WUNBQ0FBSUFNMkFnd2dBeUFBTmdJSUlBTWdBVFlDREF0Qm1Da2dCVFlDQUVHa0tTQUVOZ0lBSUFva0JDQUhEd3RCbENrb0FnQWlEQVJBSUF4QkFDQU1hM0ZCZjJvaUFVRU1ka0VRY1NFQUlBRWdBSFlpQVVFRmRrRUljU0lESUFCeUlBRWdBM1lpQUVFQ2RrRUVjU0lCY2lBQUlBRjJJZ0JCQVhaQkFuRWlBWElnQUNBQmRpSUFRUUYyUVFGeElnRnlJQUFnQVhacVFRSjBRY0FyYWlnQ0FDSURLQUlFUVhoeElBSnJJUUVnQTBFUWFpQURLQUlRUlVFQ2RHb29BZ0FpQUFSQUEwQWdBQ2dDQkVGNGNTQUNheUlGSUFGSklnUUVRQ0FGSVFFTElBUUVRQ0FBSVFNTElBQkJFR29nQUNnQ0VFVkJBblJxS0FJQUlnQU5BQ0FCSVFVTEJTQUJJUVVMSUFNZ0Ftb2lDeUFEU3dSQUlBTW9BaGdoQ1FKQUlBTW9BZ3dpQUNBRFJnUkFJQU5CRkdvaUFTZ0NBQ0lBUlFSQUlBTkJFR29pQVNnQ0FDSUFSUVJBUVFBaEFBd0RDd3NEUUNBQVFSUnFJZ1FvQWdBaUJ3UkFJQWNoQUNBRUlRRU1BUXNnQUVFUWFpSUVLQUlBSWdjRVFDQUhJUUFnQkNFQkRBRUxDeUFCUVFBMkFnQUZJQU1vQWdnaUFTQUFOZ0lNSUFBZ0FUWUNDQXNMQWtBZ0NRUkFJQU1nQXlnQ0hDSUJRUUowUWNBcmFpSUVLQUlBUmdSQUlBUWdBRFlDQUNBQVJRUkFRWlFwSUF4QkFTQUJkRUYvYzNFMkFnQU1Bd3NGSUFsQkVHb2dDU2dDRUNBRFIwRUNkR29nQURZQ0FDQUFSUTBDQ3lBQUlBazJBaGdnQXlnQ0VDSUJCRUFnQUNBQk5nSVFJQUVnQURZQ0dBc2dBeWdDRkNJQkJFQWdBQ0FCTmdJVUlBRWdBRFlDR0FzTEN5QUZRUkJKQkVBZ0F5QUZJQUpxSWdCQkEzSTJBZ1FnQXlBQWFrRUVhaUlBSUFBb0FnQkJBWEkyQWdBRklBTWdBa0VEY2pZQ0JDQUxJQVZCQVhJMkFnUWdDeUFGYWlBRk5nSUFJQWdFUUVHa0tTZ0NBQ0VFSUFoQkEzWWlBVUVEZEVHNEtXb2hBQ0FHUVFFZ0FYUWlBWEVFZnlBQVFRaHFJZ0lvQWdBRlFaQXBJQVlnQVhJMkFnQWdBRUVJYWlFQ0lBQUxJUUVnQWlBRU5nSUFJQUVnQkRZQ0RDQUVJQUUyQWdnZ0JDQUFOZ0lNQzBHWUtTQUZOZ0lBUWFRcElBczJBZ0FMSUFva0JDQURRUWhxRHdVZ0FpRUFDd1VnQWlFQUN3VWdBaUVBQ3dVZ0FFRy9mMHNFUUVGL0lRQUZJQUJCQzJvaUFFRjRjU0VEUVpRcEtBSUFJZ1VFUUNBQVFRaDJJZ0FFZnlBRFFmLy8vd2RMQkg5Qkh3VWdBMEVPSUFBZ0FFR0EvajlxUVJCMlFRaHhJZ0IwSWdGQmdPQWZha0VRZGtFRWNTSUNJQUJ5SUFFZ0FuUWlBRUdBZ0E5cVFSQjJRUUp4SWdGeWF5QUFJQUYwUVE5MmFpSUFRUWRxZGtFQmNTQUFRUUYwY2dzRlFRQUxJUWhCQUNBRGF5RUNBa0FDUUNBSVFRSjBRY0FyYWlnQ0FDSUFCRUJCR1NBSVFRRjJheUVFUVFBaEFTQURJQWhCSDBZRWYwRUFCU0FFQzNRaEIwRUFJUVFEUUNBQUtBSUVRWGh4SUFOcklnWWdBa2tFUUNBR0JFQWdBQ0VCSUFZaEFnVkJBQ0VDSUFBaEFRd0VDd3NnQUNnQ0ZDSUdSU0FHSUFCQkVHb2dCMEVmZGtFQ2RHb29BZ0FpQUVaeVJRUkFJQVloQkFzZ0J5QUFSU0lHUVFGemRDRUhJQVpGRFFBTEJVRUFJUUVMSUFRZ0FYSUVmeUFFQlNBRlFRSWdDSFFpQUVFQUlBQnJjbkVpQUVVRVFDQURJUUFNQndzZ0FFRUFJQUJyY1VGL2FpSUVRUXgyUVJCeElRQkJBQ0VCSUFRZ0FIWWlCRUVGZGtFSWNTSUhJQUJ5SUFRZ0IzWWlBRUVDZGtFRWNTSUVjaUFBSUFSMklnQkJBWFpCQW5FaUJISWdBQ0FFZGlJQVFRRjJRUUZ4SWdSeUlBQWdCSFpxUVFKMFFjQXJhaWdDQUFzaUFBMEFJQUVoQkF3QkN3TkFJQUFvQWdSQmVIRWdBMnNpQkNBQ1NTSUhCRUFnQkNFQ0N5QUhCRUFnQUNFQkN5QUFRUkJxSUFBb0FoQkZRUUowYWlnQ0FDSUFEUUFnQVNFRUN3c2dCQVJBSUFKQm1Da29BZ0FnQTJ0SkJFQWdCQ0FEYWlJSUlBUk5CRUFnQ2lRRVFRQVBDeUFFS0FJWUlRa0NRQ0FFS0FJTUlnQWdCRVlFUUNBRVFSUnFJZ0VvQWdBaUFFVUVRQ0FFUVJCcUlnRW9BZ0FpQUVVRVFFRUFJUUFNQXdzTEEwQWdBRUVVYWlJSEtBSUFJZ1lFUUNBR0lRQWdCeUVCREFFTElBQkJFR29pQnlnQ0FDSUdCRUFnQmlFQUlBY2hBUXdCQ3dzZ0FVRUFOZ0lBQlNBRUtBSUlJZ0VnQURZQ0RDQUFJQUUyQWdnTEN3SkFJQWtFZnlBRUlBUW9BaHdpQVVFQ2RFSEFLMm9pQnlnQ0FFWUVRQ0FISUFBMkFnQWdBRVVFUUVHVUtTQUZRUUVnQVhSQmYzTnhJZ0EyQWdBTUF3c0ZJQWxCRUdvZ0NTZ0NFQ0FFUjBFQ2RHb2dBRFlDQUNBQVJRUkFJQVVoQUF3REN3c2dBQ0FKTmdJWUlBUW9BaEFpQVFSQUlBQWdBVFlDRUNBQklBQTJBaGdMSUFRb0FoUWlBUVIvSUFBZ0FUWUNGQ0FCSUFBMkFoZ2dCUVVnQlFzRklBVUxJUUFMQWtBZ0FrRVFTUVJBSUFRZ0FpQURhaUlBUVFOeU5nSUVJQVFnQUdwQkJHb2lBQ0FBS0FJQVFRRnlOZ0lBQlNBRUlBTkJBM0kyQWdRZ0NDQUNRUUZ5TmdJRUlBZ2dBbW9nQWpZQ0FDQUNRUU4ySVFFZ0FrR0FBa2tFUUNBQlFRTjBRYmdwYWlFQVFaQXBLQUlBSWdKQkFTQUJkQ0lCY1FSL0lBQkJDR29pQWlnQ0FBVkJrQ2tnQWlBQmNqWUNBQ0FBUVFocUlRSWdBQXNoQVNBQ0lBZzJBZ0FnQVNBSU5nSU1JQWdnQVRZQ0NDQUlJQUEyQWd3TUFnc2dBa0VJZGlJQkJIOGdBa0gvLy84SFN3Ui9RUjhGSUFKQkRpQUJJQUZCZ1A0L2FrRVFka0VJY1NJQmRDSURRWURnSDJwQkVIWkJCSEVpQlNBQmNpQURJQVYwSWdGQmdJQVBha0VRZGtFQ2NTSURjbXNnQVNBRGRFRVBkbW9pQVVFSGFuWkJBWEVnQVVFQmRISUxCVUVBQ3lJQlFRSjBRY0FyYWlFRElBZ2dBVFlDSENBSVFSQnFJZ1ZCQURZQ0JDQUZRUUEyQWdBZ0FFRUJJQUYwSWdWeFJRUkFRWlFwSUFBZ0JYSTJBZ0FnQXlBSU5nSUFJQWdnQXpZQ0dDQUlJQWcyQWd3Z0NDQUlOZ0lJREFJTElBTW9BZ0FoQUVFWklBRkJBWFpySVFNZ0FpQUJRUjlHQkg5QkFBVWdBd3QwSVFFQ1FBTkFJQUFvQWdSQmVIRWdBa1lOQVNBQlFRRjBJUU1nQUVFUWFpQUJRUjkyUVFKMGFpSUJLQUlBSWdVRVFDQURJUUVnQlNFQURBRUxDeUFCSUFnMkFnQWdDQ0FBTmdJWUlBZ2dDRFlDRENBSUlBZzJBZ2dNQWdzZ0FFRUlhaUlCS0FJQUlnSWdDRFlDRENBQklBZzJBZ0FnQ0NBQ05nSUlJQWdnQURZQ0RDQUlRUUEyQWhnTEN5QUtKQVFnQkVFSWFnOEZJQU1oQUFzRklBTWhBQXNGSUFNaEFBc0xDd3RCbUNrb0FnQWlBaUFBVHdSQVFhUXBLQUlBSVFFZ0FpQUFheUlEUVE5TEJFQkJwQ2tnQVNBQWFpSUZOZ0lBUVpncElBTTJBZ0FnQlNBRFFRRnlOZ0lFSUFFZ0Ftb2dBellDQUNBQklBQkJBM0kyQWdRRlFaZ3BRUUEyQWdCQnBDbEJBRFlDQUNBQklBSkJBM0kyQWdRZ0FTQUNha0VFYWlJQUlBQW9BZ0JCQVhJMkFnQUxJQW9rQkNBQlFRaHFEd3RCbkNrb0FnQWlBaUFBU3dSQVFad3BJQUlnQUdzaUFqWUNBRUdvS1VHb0tTZ0NBQ0lCSUFCcUlnTTJBZ0FnQXlBQ1FRRnlOZ0lFSUFFZ0FFRURjallDQkNBS0pBUWdBVUVJYWc4TFFlZ3NLQUlBQkg5QjhDd29BZ0FGUWZBc1FZQWdOZ0lBUWV3c1FZQWdOZ0lBUWZRc1FYODJBZ0JCK0N4QmZ6WUNBRUg4TEVFQU5nSUFRY3dzUVFBMkFnQkI2Q3dnQ2tGd2NVSFlxdFdxQlhNMkFnQkJnQ0FMSWdFZ0FFRXZhaUlFYWlJSFFRQWdBV3NpQm5FaUJTQUFUUVJBSUFva0JFRUFEd3RCeUN3b0FnQWlBUVJBUWNBc0tBSUFJZ01nQldvaUNDQURUU0FJSUFGTGNnUkFJQW9rQkVFQUR3c0xJQUJCTUdvaENBSkFBa0JCekN3b0FnQkJCSEVFUUVFQUlRSUZBa0FDUUFKQVFhZ3BLQUlBSWdGRkRRQkIwQ3doQXdOQUFrQWdBeWdDQUNJSklBRk5CRUFnQ1NBRFFRUnFJZ2tvQWdCcUlBRkxEUUVMSUFNb0FnZ2lBdzBCREFJTEN5QUhJQUpySUFaeElnSkIvLy8vL3dkSkJFQWdBaEFnSWdFZ0F5Z0NBQ0FKS0FJQWFrWUVRQ0FCUVg5SERRWUZEQU1MQlVFQUlRSUxEQUlMUVFBUUlDSUJRWDlHQkVCQkFDRUNCVUhzTENnQ0FDSUNRWDlxSWdNZ0FXcEJBQ0FDYTNFZ0FXc2hBaUFESUFGeEJIOGdBZ1ZCQUFzZ0JXb2lBa0hBTENnQ0FDSUhhaUVESUFJZ0FFc2dBa0gvLy8vL0IwbHhCRUJCeUN3b0FnQWlCZ1JBSUFNZ0IwMGdBeUFHUzNJRVFFRUFJUUlNQlFzTElBSVFJQ0lESUFGR0RRVWdBeUVCREFJRlFRQWhBZ3NMREFFTElBZ2dBa3NnQWtILy8vLy9CMGtnQVVGL1IzRnhSUVJBSUFGQmYwWUVRRUVBSVFJTUFnVU1CQXNBQ3lBRUlBSnJRZkFzS0FJQUlnTnFRUUFnQTJ0eElnTkIvLy8vL3dkUERRSkJBQ0FDYXlFRUlBTVFJRUYvUmdSQUlBUVFJQnBCQUNFQ0JTQURJQUpxSVFJTUF3c0xRY3dzUWN3c0tBSUFRUVJ5TmdJQUN5QUZRZi8vLy84SFNRUkFJQVVRSUNJQlFRQVFJQ0lEU1NBQlFYOUhJQU5CZjBkeGNTRUZJQU1nQVdzaUF5QUFRU2hxU3lJRUJFQWdBeUVDQ3lBQlFYOUdJQVJCQVhOeUlBVkJBWE55UlEwQkN3d0JDMEhBTEVIQUxDZ0NBQ0FDYWlJRE5nSUFJQU5CeEN3b0FnQkxCRUJCeEN3Z0F6WUNBQXNDUUVHb0tTZ0NBQ0lFQkVCQjBDd2hBd0pBQWtBRFFDQUJJQU1vQWdBaUJTQURRUVJxSWdjb0FnQWlCbXBHRFFFZ0F5Z0NDQ0lERFFBTERBRUxJQU1vQWd4QkNIRkZCRUFnQVNBRVN5QUZJQVJOY1FSQUlBY2dCaUFDYWpZQ0FFR2NLU2dDQUNBQ2FpRUNRUUFnQkVFSWFpSURhMEVIY1NFQlFhZ3BJQVFnQTBFSGNRUi9JQUVGUVFBaUFRdHFJZ00yQWdCQm5Da2dBaUFCYXlJQk5nSUFJQU1nQVVFQmNqWUNCQ0FFSUFKcVFTZzJBZ1JCckNsQitDd29BZ0EyQWdBTUJBc0xDeUFCUWFBcEtBSUFTUVJBUWFBcElBRTJBZ0FMSUFFZ0Ftb2hCVUhRTENFREFrQUNRQU5BSUFNb0FnQWdCVVlOQVNBREtBSUlJZ01OQUVIUUxDRURDd3dCQ3lBREtBSU1RUWh4QkVCQjBDd2hBd1VnQXlBQk5nSUFJQU5CQkdvaUF5QURLQUlBSUFKcU5nSUFRUUFnQVVFSWFpSUNhMEVIY1NFRFFRQWdCVUVJYWlJSGEwRUhjU0VKSUFFZ0FrRUhjUVIvSUFNRlFRQUxhaUlJSUFCcUlRWWdCU0FIUVFkeEJIOGdDUVZCQUF0cUlnVWdDR3NnQUdzaEJ5QUlJQUJCQTNJMkFnUUNRQ0FFSUFWR0JFQkJuQ2xCbkNrb0FnQWdCMm9pQURZQ0FFR29LU0FHTmdJQUlBWWdBRUVCY2pZQ0JBVkJwQ2tvQWdBZ0JVWUVRRUdZS1VHWUtTZ0NBQ0FIYWlJQU5nSUFRYVFwSUFZMkFnQWdCaUFBUVFGeU5nSUVJQVlnQUdvZ0FEWUNBQXdDQ3lBRktBSUVJZ0JCQTNGQkFVWUVmeUFBUVhoeElRa2dBRUVEZGlFQ0FrQWdBRUdBQWtrRVFDQUZLQUlNSWdBZ0JTZ0NDQ0lCUmdSQVFaQXBRWkFwS0FJQVFRRWdBblJCZjNOeE5nSUFCU0FCSUFBMkFnd2dBQ0FCTmdJSUN3VWdCU2dDR0NFRUFrQWdCU2dDRENJQUlBVkdCRUFnQlVFUWFpSUJRUVJxSWdJb0FnQWlBQVJBSUFJaEFRVWdBU2dDQUNJQVJRUkFRUUFoQUF3REN3c0RRQ0FBUVJScUlnSW9BZ0FpQXdSQUlBTWhBQ0FDSVFFTUFRc2dBRUVRYWlJQ0tBSUFJZ01FUUNBRElRQWdBaUVCREFFTEN5QUJRUUEyQWdBRklBVW9BZ2dpQVNBQU5nSU1JQUFnQVRZQ0NBc0xJQVJGRFFFQ1FDQUZLQUljSWdGQkFuUkJ3Q3RxSWdJb0FnQWdCVVlFUUNBQ0lBQTJBZ0FnQUEwQlFaUXBRWlFwS0FJQVFRRWdBWFJCZjNOeE5nSUFEQU1GSUFSQkVHb2dCQ2dDRUNBRlIwRUNkR29nQURZQ0FDQUFSUTBEQ3dzZ0FDQUVOZ0lZSUFWQkVHb2lBaWdDQUNJQkJFQWdBQ0FCTmdJUUlBRWdBRFlDR0FzZ0FpZ0NCQ0lCUlEwQklBQWdBVFlDRkNBQklBQTJBaGdMQ3lBRklBbHFJUUFnQ1NBSGFnVWdCU0VBSUFjTElRVWdBRUVFYWlJQUlBQW9BZ0JCZm5FMkFnQWdCaUFGUVFGeU5nSUVJQVlnQldvZ0JUWUNBQ0FGUVFOMklRRWdCVUdBQWtrRVFDQUJRUU4wUWJncGFpRUFRWkFwS0FJQUlnSkJBU0FCZENJQmNRUi9JQUJCQ0dvaUFpZ0NBQVZCa0NrZ0FpQUJjallDQUNBQVFRaHFJUUlnQUFzaEFTQUNJQVkyQWdBZ0FTQUdOZ0lNSUFZZ0FUWUNDQ0FHSUFBMkFnd01BZ3NDZnlBRlFRaDJJZ0FFZjBFZklBVkIvLy8vQjBzTkFSb2dCVUVPSUFBZ0FFR0EvajlxUVJCMlFRaHhJZ0IwSWdGQmdPQWZha0VRZGtFRWNTSUNJQUJ5SUFFZ0FuUWlBRUdBZ0E5cVFSQjJRUUp4SWdGeWF5QUFJQUYwUVE5MmFpSUFRUWRxZGtFQmNTQUFRUUYwY2dWQkFBc0xJZ0ZCQW5SQndDdHFJUUFnQmlBQk5nSWNJQVpCRUdvaUFrRUFOZ0lFSUFKQkFEWUNBRUdVS1NnQ0FDSUNRUUVnQVhRaUEzRkZCRUJCbENrZ0FpQURjallDQUNBQUlBWTJBZ0FnQmlBQU5nSVlJQVlnQmpZQ0RDQUdJQVkyQWdnTUFnc2dBQ2dDQUNFQVFSa2dBVUVCZG1zaEFpQUZJQUZCSDBZRWYwRUFCU0FDQzNRaEFRSkFBMEFnQUNnQ0JFRjRjU0FGUmcwQklBRkJBWFFoQWlBQVFSQnFJQUZCSDNaQkFuUnFJZ0VvQWdBaUF3UkFJQUloQVNBRElRQU1BUXNMSUFFZ0JqWUNBQ0FHSUFBMkFoZ2dCaUFHTmdJTUlBWWdCallDQ0F3Q0N5QUFRUWhxSWdFb0FnQWlBaUFHTmdJTUlBRWdCallDQUNBR0lBSTJBZ2dnQmlBQU5nSU1JQVpCQURZQ0dBc0xJQW9rQkNBSVFRaHFEd3NMQTBBQ1FDQURLQUlBSWdVZ0JFMEVRQ0FGSUFNb0FnUnFJZ2dnQkVzTkFRc2dBeWdDQ0NFRERBRUxDMEVBSUFoQlVXb2lBMEVJYWlJRmEwRUhjU0VISUFNZ0JVRUhjUVIvSUFjRlFRQUxhaUlESUFSQkVHb2lERWtFZnlBRUlnTUZJQU1MUVFocUlRWWdBMEVZYWlFRklBSkJXR29oQ1VFQUlBRkJDR29pQzJ0QkIzRWhCMEdvS1NBQklBdEJCM0VFZnlBSEJVRUFJZ2NMYWlJTE5nSUFRWndwSUFrZ0Iyc2lCellDQUNBTElBZEJBWEkyQWdRZ0FTQUpha0VvTmdJRVFhd3BRZmdzS0FJQU5nSUFJQU5CQkdvaUIwRWJOZ0lBSUFaQjBDd3BBZ0EzQWdBZ0JrSFlMQ2tDQURjQ0NFSFFMQ0FCTmdJQVFkUXNJQUkyQWdCQjNDeEJBRFlDQUVIWUxDQUdOZ0lBSUFVaEFRTkFJQUZCQkdvaUFrRUhOZ0lBSUFGQkNHb2dDRWtFUUNBQ0lRRU1BUXNMSUFNZ0JFY0VRQ0FISUFjb0FnQkJmbkUyQWdBZ0JDQURJQVJySWdkQkFYSTJBZ1FnQXlBSE5nSUFJQWRCQTNZaEFpQUhRWUFDU1FSQUlBSkJBM1JCdUNscUlRRkJrQ2tvQWdBaUEwRUJJQUowSWdKeEJIOGdBVUVJYWlJREtBSUFCVUdRS1NBRElBSnlOZ0lBSUFGQkNHb2hBeUFCQ3lFQ0lBTWdCRFlDQUNBQ0lBUTJBZ3dnQkNBQ05nSUlJQVFnQVRZQ0RBd0RDeUFIUVFoMklnRUVmeUFIUWYvLy93ZExCSDlCSHdVZ0IwRU9JQUVnQVVHQS9qOXFRUkIyUVFoeElnRjBJZ0pCZ09BZmFrRVFka0VFY1NJRElBRnlJQUlnQTNRaUFVR0FnQTlxUVJCMlFRSnhJZ0p5YXlBQklBSjBRUTkyYWlJQlFRZHFka0VCY1NBQlFRRjBjZ3NGUVFBTElnSkJBblJCd0N0cUlRRWdCQ0FDTmdJY0lBUkJBRFlDRkNBTVFRQTJBZ0JCbENrb0FnQWlBMEVCSUFKMElnVnhSUVJBUVpRcElBTWdCWEkyQWdBZ0FTQUVOZ0lBSUFRZ0FUWUNHQ0FFSUFRMkFnd2dCQ0FFTmdJSURBTUxJQUVvQWdBaEFVRVpJQUpCQVhacklRTWdCeUFDUVI5R0JIOUJBQVVnQXd0MElRSUNRQU5BSUFFb0FnUkJlSEVnQjBZTkFTQUNRUUYwSVFNZ0FVRVFhaUFDUVI5MlFRSjBhaUlDS0FJQUlnVUVRQ0FESVFJZ0JTRUJEQUVMQ3lBQ0lBUTJBZ0FnQkNBQk5nSVlJQVFnQkRZQ0RDQUVJQVEyQWdnTUF3c2dBVUVJYWlJQ0tBSUFJZ01nQkRZQ0RDQUNJQVEyQWdBZ0JDQUROZ0lJSUFRZ0FUWUNEQ0FFUVFBMkFoZ0xCVUdnS1NnQ0FDSURSU0FCSUFOSmNnUkFRYUFwSUFFMkFnQUxRZEFzSUFFMkFnQkIxQ3dnQWpZQ0FFSGNMRUVBTmdJQVFiUXBRZWdzS0FJQU5nSUFRYkFwUVg4MkFnQkJ4Q2xCdUNrMkFnQkJ3Q2xCdUNrMkFnQkJ6Q2xCd0NrMkFnQkJ5Q2xCd0NrMkFnQkIxQ2xCeUNrMkFnQkIwQ2xCeUNrMkFnQkIzQ2xCMENrMkFnQkIyQ2xCMENrMkFnQkI1Q2xCMkNrMkFnQkI0Q2xCMkNrMkFnQkI3Q2xCNENrMkFnQkI2Q2xCNENrMkFnQkI5Q2xCNkNrMkFnQkI4Q2xCNkNrMkFnQkIvQ2xCOENrMkFnQkIrQ2xCOENrMkFnQkJoQ3BCK0NrMkFnQkJnQ3BCK0NrMkFnQkJqQ3BCZ0NvMkFnQkJpQ3BCZ0NvMkFnQkJsQ3BCaUNvMkFnQkJrQ3BCaUNvMkFnQkJuQ3BCa0NvMkFnQkJtQ3BCa0NvMkFnQkJwQ3BCbUNvMkFnQkJvQ3BCbUNvMkFnQkJyQ3BCb0NvMkFnQkJxQ3BCb0NvMkFnQkJ0Q3BCcUNvMkFnQkJzQ3BCcUNvMkFnQkJ2Q3BCc0NvMkFnQkJ1Q3BCc0NvMkFnQkJ4Q3BCdUNvMkFnQkJ3Q3BCdUNvMkFnQkJ6Q3BCd0NvMkFnQkJ5Q3BCd0NvMkFnQkIxQ3BCeUNvMkFnQkIwQ3BCeUNvMkFnQkIzQ3BCMENvMkFnQkIyQ3BCMENvMkFnQkI1Q3BCMkNvMkFnQkI0Q3BCMkNvMkFnQkI3Q3BCNENvMkFnQkI2Q3BCNENvMkFnQkI5Q3BCNkNvMkFnQkI4Q3BCNkNvMkFnQkIvQ3BCOENvMkFnQkIrQ3BCOENvMkFnQkJoQ3RCK0NvMkFnQkJnQ3RCK0NvMkFnQkJqQ3RCZ0NzMkFnQkJpQ3RCZ0NzMkFnQkJsQ3RCaUNzMkFnQkJrQ3RCaUNzMkFnQkJuQ3RCa0NzMkFnQkJtQ3RCa0NzMkFnQkJwQ3RCbUNzMkFnQkJvQ3RCbUNzMkFnQkJyQ3RCb0NzMkFnQkJxQ3RCb0NzMkFnQkJ0Q3RCcUNzMkFnQkJzQ3RCcUNzMkFnQkJ2Q3RCc0NzMkFnQkJ1Q3RCc0NzMkFnQWdBa0ZZYWlFRFFRQWdBVUVJYWlJRmEwRUhjU0VDUWFncElBRWdCVUVIY1FSL0lBSUZRUUFpQWd0cUlnVTJBZ0JCbkNrZ0F5QUNheUlDTmdJQUlBVWdBa0VCY2pZQ0JDQUJJQU5xUVNnMkFnUkJyQ2xCK0N3b0FnQTJBZ0FMQzBHY0tTZ0NBQ0lCSUFCTEJFQkJuQ2tnQVNBQWF5SUNOZ0lBUWFncFFhZ3BLQUlBSWdFZ0FHb2lBellDQUNBRElBSkJBWEkyQWdRZ0FTQUFRUU55TmdJRUlBb2tCQ0FCUVFocUR3c0xRWUF0UVF3MkFnQWdDaVFFUVFBTGx4Y0JLWDhqQkNFRkl3UkJzQVJxSkFRZ0FpZ0NVQVJBSUFBZ0FTa0NBRGNDQUNBQUlBRXBBZ2czQWdnZ0FDQUJLUUlRTndJUUlBQWdBU2tDR0RjQ0dDQUFJQUVwQWlBM0FpQWdBQ0FCS1FJb053SW9JQUFnQVNrQ01EY0NNQ0FBSUFFcEFqZzNBamdnQUVGQWF5QUJRVUJyS1FJQU53SUFJQUFnQVNrQ1NEY0NTQ0FBSUFFcEFsQTNBbEFnQUNBQktRSllOd0pZSUFBZ0FTa0NZRGNDWUNBQUlBRXBBbWczQW1nZ0FDQUJLUUp3TndKd0lBQWdBU2dDZURZQ2VDQUZKQVFQQ3lBRlFTaHFJUW9nQVVINEFHb2lMQ2dDQUFSQUlBQkJBRFlDZUNBS0lBTVFDaUFGSUFvZ0F4QU1JQUFnQWlBS0VBd2dBRUVvYWlBQ1FTaHFJQVVRRENBQVFRRTJBbEFnQUVIVUFHb2lBRUlBTndJQUlBQkNBRGNDQ0NBQVFnQTNBaEFnQUVJQU53SVlJQUJCQURZQ0lDQUZKQVFQQ3lBRlFjZ0JhaUVOSUFWQm9BRnFJU1lnQlVINEFHb2hDeUFGUWRBQWFpRUhJQUJCK0FCcUlpZEJBRFlDQUNBRlFZZ0VhaUlvSUFGQjBBQnFJaDRnQXhBTUlBVkI0QU5xSWlrZ0tCQUtJQVZCdUFOcUlnZ2dBU2tDQURjQ0FDQUlJQUVwQWdnM0FnZ2dDQ0FCS1FJUU53SVFJQWdnQVNrQ0dEY0NHQ0FJSUFFcEFpQTNBaUFnQ0VFa2FpSVVLQUlBSWhkQkZuWWlBMEhSQjJ3Z0NDZ0NBR29oSENBRFFRWjBJQWhCQkdvaUdDZ0NBR29nSEVFYWRtb2lHVUVhZGlBSVFRaHFJaG9vQWdCcUlodEJHbllnQ0VFTWFpSUVLQUlBYWlJR1FScDJJQWhCRUdvaURpZ0NBR29pRlVFYWRpQUlRUlJxSWc4b0FnQnFJaEJCR25ZZ0NFRVlhaUlSS0FJQWFpSVNRUnAySUFoQkhHb2lFeWdDQUdvaUNrRWFkaUFJUVNCcUlnTW9BZ0JxSVIwZ0NDQWNRZi8vL3g5eElndzJBZ0FnR0NBWlFmLy8veDl4SWg4MkFnQWdHaUFiUWYvLy94OXhJaUEyQWdBZ0JDQUdRZi8vL3g5eElpRTJBZ0FnRGlBVlFmLy8veDl4SWlJMkFnQWdEeUFRUWYvLy94OXhJaU0yQWdBZ0VTQVNRZi8vL3g5eElpUTJBZ0FnRXlBS1FmLy8veDl4SWlVMkFnQWdBeUFkUWYvLy94OXhJaHcyQWdBZ0ZDQWRRUnAySUJkQi8vLy9BWEZxSWgwMkFnQWdCVUdRQTJvaUZpQUNJQ2tRRENBRlFlZ0NhaUlKSUFGQktHb2lBeWtDQURjQ0FDQUpJQU1wQWdnM0FnZ2dDU0FES1FJUU53SVFJQWtnQXlrQ0dEY0NHQ0FKSUFNcEFpQTNBaUFnQ1VFa2FpSXFLQUlBSWhSQkZuWWlBMEhSQjJ3Z0NTZ0NBR29oRGlBRFFRWjBJQWxCQkdvaUZ5Z0NBR29nRGtFYWRtb2lGVUVhZGlBSlFRaHFJaGdvQWdCcUlnOUJHbllnQ1VFTWFpSVpLQUlBYWlJUVFScDJJQWxCRUdvaUdpZ0NBR29pRVVFYWRpQUpRUlJxSWhzb0FnQnFJaEpCR25ZZ0NVRVlhaUlFS0FJQWFpSVRRUnAySUFsQkhHb2lCaWdDQUdvaUNrRWFkaUFKUVNCcUlnTW9BZ0JxSVNzZ0NTQU9RZi8vL3g5eElnNDJBZ0FnRnlBVlFmLy8veDl4SWhVMkFnQWdHQ0FQUWYvLy94OXhJZzgyQWdBZ0dTQVFRZi8vL3g5eEloQTJBZ0FnR2lBUlFmLy8veDl4SWhFMkFnQWdHeUFTUWYvLy94OXhJaEkyQWdBZ0JDQVRRZi8vL3g5eEloTTJBZ0FnQmlBS1FmLy8veDl4SWdvMkFnQWdBeUFyUWYvLy94OXhJZ00yQWdBZ0tpQXJRUnAySUJSQi8vLy9BWEZxTmdJQUlBVkJ3QUpxSWdZZ0FrRW9haUFwRUF3Z0JpQUdJQ2dRRENBRlFaZ0NhaUlFUWJ6aC8vOEFJQXhySUJZb0FnQnFOZ0lBSUFSQi9QMy8vd0FnSDJzZ0ZpZ0NCR28yQWdRZ0JFSDgvLy8vQUNBZ2F5QVdLQUlJYWpZQ0NDQUVRZnovLy84QUlDRnJJQllvQWd4cU5nSU1JQVJCL1AvLy93QWdJbXNnRmlnQ0VHbzJBaEFnQkVIOC8vLy9BQ0FqYXlBV0tBSVVhallDRkNBRVFmei8vLzhBSUNScklCWW9BaGhxTmdJWUlBUkIvUC8vL3dBZ0pXc2dGaWdDSEdvMkFod2dCRUg4Ly8vL0FDQWNheUFXS0FJZ2FqWUNJQ0FFUWZ6Ly93Y2dIV3NnRmlnQ0pHbzJBaVJCL1AvL0J5QXFLQUlBYXlFQ0lBVkI4QUZxSWd4QnZPSC8vd0FnRG1zZ0JpZ0NBR28yQWdBZ0RFSDgvZi8vQUNBVmF5QUdLQUlFYWpZQ0JDQU1RZnovLy84QUlBOXJJQVlvQWdocU5nSUlJQXhCL1AvLy93QWdFR3NnQmlnQ0RHbzJBZ3dnREVIOC8vLy9BQ0FSYXlBR0tBSVFhallDRUNBTVFmei8vLzhBSUJKcklBWW9BaFJxTmdJVUlBeEIvUC8vL3dBZ0Uyc2dCaWdDR0dvMkFoZ2dERUg4Ly8vL0FDQUtheUFHS0FJY2FqWUNIQ0FNUWZ6Ly8vOEFJQU5ySUFZb0FpQnFOZ0lnSUF3Z0FpQUdLQUlrYWpZQ0pDQUVFQmhGQkVBZ0RTQU1FQW9nSmlBRUVBb2dDeUFFSUNZUURDQUFRZEFBYWlJQklCNHBBZ0EzQWdBZ0FTQWVLUUlJTndJSUlBRWdIaWtDRURjQ0VDQUJJQjRwQWhnM0FoZ2dBU0FlS1FJZ053SWdJQUVnQVNBRUVBd2dCeUFJSUNZUURDQUFJQWNwQWdBM0FnQWdBQ0FIS1FJSU53SUlJQUFnQnlrQ0VEY0NFQ0FBSUFjcEFoZzNBaGdnQUNBSEtRSWdOd0lnUWZqNy8vOEJJQUJCQkdvaUZDZ0NBRUVCZENBTFFRUnFJaDhvQWdCcWF5RVBRZmovLy84QklBQkJDR29pRnlnQ0FFRUJkQ0FMUVFocUlpQW9BZ0JxYXlFUVFmai8vLzhCSUFCQkRHb2lHQ2dDQUVFQmRDQUxRUXhxSWlFb0FnQnFheUVSUWZqLy8vOEJJQUJCRUdvaUdTZ0NBRUVCZENBTFFSQnFJaUlvQWdCcWF5RVNRZmovLy84QklBQkJGR29pR2lnQ0FFRUJkQ0FMUVJScUlpTW9BZ0JxYXlFVFFmai8vLzhCSUFCQkdHb2lHeWdDQUVFQmRDQUxRUmhxSWlRb0FnQnFheUVLUWZqLy8vOEJJQUJCSEdvaUJDZ0NBRUVCZENBTFFSeHFJaVVvQWdCcWF5RURRZmovLy84QklBQkJJR29pQmlnQ0FFRUJkQ0FMUVNCcUlod29BZ0JxYXlFQ1Fmai8vdzhnQUVFa2FpSU9LQUlBUVFGMElBdEJKR29pSFNnQ0FHcHJJUUVnQUVINHd2Ly9BU0FBS0FJQVFRRjBJQXNvQWdCcWF5QU5LQUlBYWlJVk5nSUFJQlFnRHlBTktBSUVhaUlQTmdJQUlCY2dFQ0FOS0FJSWFpSVFOZ0lBSUJnZ0VTQU5LQUlNYWlJUk5nSUFJQmtnRWlBTktBSVFhaUlTTmdJQUlCb2dFeUFOS0FJVWFpSVROZ0lBSUJzZ0NpQU5LQUlZYWlJS05nSUFJQVFnQXlBTktBSWNhaUlETmdJQUlBWWdBaUFOS0FJZ2FpSUNOZ0lBSUE0Z0FTQU5LQUlrYWlJQk5nSUFJQUJCS0dvaUZFRzBwUC8vQWlBVmF5QUhLQUlBYWpZQ0FDQUFRU3hxSWhkQjlQbi8vd0lnRDJzZ0J5Z0NCR28yQWdBZ0FFRXdhaUlZUWZULy8vOENJQkJySUFjb0FnaHFOZ0lBSUFCQk5Hb2lHVUgwLy8vL0FpQVJheUFIS0FJTWFqWUNBQ0FBUVRocUlocEI5UC8vL3dJZ0Vtc2dCeWdDRUdvMkFnQWdBRUU4YWlJYlFmVC8vLzhDSUJOcklBY29BaFJxTmdJQUlBQkJRR3NpQkVIMC8vLy9BaUFLYXlBSEtBSVlhallDQUNBQVFjUUFhaUlHUWZULy8vOENJQU5ySUFjb0FoeHFOZ0lBSUFCQnlBQnFJZzVCOVAvLy93SWdBbXNnQnlnQ0lHbzJBZ0FnQUVITUFHb2lGVUgwLy84WElBRnJJQWNvQWlScU5nSUFJQlFnRkNBTUVBd2dDeUFMSUFrUURDQUxRYnpoLy84QUlBc29BZ0JySWc4MkFnQWdIMEg4L2YvL0FDQWZLQUlBYXlJUU5nSUFJQ0JCL1AvLy93QWdJQ2dDQUdzaUVUWUNBQ0FoUWZ6Ly8vOEFJQ0VvQWdCckloSTJBZ0FnSWtIOC8vLy9BQ0FpS0FJQWF5SVROZ0lBSUNOQi9QLy8vd0FnSXlnQ0FHc2lDallDQUNBa1Fmei8vLzhBSUNRb0FnQnJJZ00yQWdBZ0pVSDgvLy8vQUNBbEtBSUFheUlDTmdJQUlCeEIvUC8vL3dBZ0hDZ0NBR3NpQVRZQ0FDQWRRZnovL3djZ0hTZ0NBR3NpQURZQ0FDQVVJQlFvQWdBZ0QybzJBZ0FnRnlBWEtBSUFJQkJxTmdJQUlCZ2dHQ2dDQUNBUmFqWUNBQ0FaSUJrb0FnQWdFbW8yQWdBZ0dpQWFLQUlBSUJOcU5nSUFJQnNnR3lnQ0FDQUthallDQUNBRUlBUW9BZ0FnQTJvMkFnQWdCaUFHS0FJQUlBSnFOZ0lBSUE0Z0RpZ0NBQ0FCYWpZQ0FDQVZJQlVvQWdBZ0FHbzJBZ0FnQlNRRUR3c2dEQkFZUlFSQUlDZEJBVFlDQUNBQVFnQTNBZ0FnQUVJQU53SUlJQUJDQURjQ0VDQUFRZ0EzQWhnZ0FFSUFOd0lnSUFCQ0FEY0NLQ0FBUWdBM0FqQWdBRUlBTndJNElBQkJRR3RDQURjQ0FDQUFRZ0EzQWtnZ0FFSUFOd0pRSUFCQ0FEY0NXQ0FBUWdBM0FtQWdBRUlBTndKb0lBQkNBRGNDY0NBRkpBUVBDeUFzS0FJQUJFQWdKMEVCTmdJQUlBVWtCQVVnQUNBQkVCTWdCU1FFQ3d1M0JBRUVmeU1FSVFRakJFR3dBbW9rQkNBRVFhZ0JhaUVGSUFJb0FuZ0VRQ0FGUVFFMkFuZ0ZJQVVnQWhBVEN5QUVJQVVwQWdBM0FnQWdCQ0FGS1FJSU53SUlJQVFnQlNrQ0VEY0NFQ0FFSUFVcEFoZzNBaGdnQkNBRktRSWdOd0lnSUFSQktHb2lCaUFGUVNocUlnTXBBZ0EzQWdBZ0JpQURLUUlJTndJSUlBWWdBeWtDRURjQ0VDQUdJQU1wQWhnM0FoZ2dCaUFES1FJZ053SWdJQVJCQURZQ1VDQUVRZFFBYWlJRElBSWdCVUhRQUdvaUJSQlRJQUFnQXlrQ0FEY0NBQ0FBSUFNcEFnZzNBZ2dnQUNBREtRSVFOd0lRSUFBZ0F5a0NHRGNDR0NBQUlBTXBBaUEzQWlBZ0FFRW9haUlHSUFOQktHb2lBeWtDQURjQ0FDQUdJQU1wQWdnM0FnZ2dCaUFES1FJUU53SVFJQVlnQXlrQ0dEY0NHQ0FHSUFNcEFpQTNBaUFnQUVIUUFHb2lBeUFDUWRBQWFpSUNLUUlBTndJQUlBTWdBaWtDQ0RjQ0NDQURJQUlwQWhBM0FoQWdBeUFDS1FJWU53SVlJQU1nQWlrQ0lEY0NJQ0FBUVFBMkFuZ2dBU0FGS1FJQU53SUFJQUVnQlNrQ0NEY0NDQ0FCSUFVcEFoQTNBaEFnQVNBRktRSVlOd0lZSUFFZ0JTa0NJRGNDSUNBQVFmd0FhaUlESUFBZ0JDQUJRU2hxRUJZZ0FFSDRBV29pQWlBRElBUWdBVUhRQUdvUUZpQUFRZlFDYWlJRElBSWdCQ0FCUWZnQWFoQVdJQUJCOEFOcUlnSWdBeUFFSUFGQm9BRnFFQllnQUVIc0JHb2lBeUFDSUFRZ0FVSElBV29RRmlBQVFlZ0ZhaUlDSUFNZ0JDQUJRZkFCYWhBV0lBQkI1QVpxSUFJZ0JDQUJRWmdDYWhBV0lBQkJ0QWRxSWdBZ0FDQUZFQXdnQkNRRUMvOEpBZzUvQ0g0Z0FTZ0NHQ0lJUVg5SElBRW9BaHdpQ1VFZmRpSUVRWDl6SWdKeElBbEIvLy8vL3dkSmNpQUJLQUlVSWdaQmYwY2dBbkZ5SUFFb0FoQWlDa0YvUnlBQ2NYSWdBU2dDRENJSFFmUGMzZW9GU1NBQ2NYSWlBa0VCY3lBSFFmUGMzZW9GUzNFZ0JISWlBMEVCY3lBQktBSUlJZ1JCbmFDUnZRVkpjU0FDY2lJQ1FRRnpJQVJCbmFDUnZRVkxjU0FEY2lJRlFRRnpJQUVvQWdRaUEwSEczcVQvZlVseElBSnlRWDl6SWdJZ0EwSEczcVQvZlV0eElBVnlJQUlnQVNnQ0FDSUZRYURCN01BR1MzRnlJZ3NnQlVFQmNYTWhEeUFJUVg5enJVTC8vLy8vRDN3Z0JrRi9jNjFDLy8vLy93OThJQXBCZjNPdFF2Ny8vLzhQZkNBSFFYOXpyVUxtdWJ2VkMzd2dCRUYvYzYxQ3U4Q2krZ3A4SUFOQmYzT3RRb3k5eWY0TGZDQUZRWDl6clVMQ2d0bUJEWHdpRVVJZ2lId2lFa0lnaUh3aUUwSWdpSHdpRkVJZ2lId2lGVUlnaUh3aUZrSWdpSHdoRUNBUklBZ2dDWElnQm5JZ0NuSWdCM0lnQkhJZ0EzSWdCWEpCQUVkQkgzUkJIM1d0SWhHRHAwRUJjeUFUSUJLRUlCU0VJQldFSUJHRHAzSWdGaUFSZzZkeUlCQWdFWU9uY2lBSlFYOXpyVUwvLy8vL0Qzd2dFRUlnaUh3Z0VZT25ja0VBUnlJQklRMGdBUVIvUVFBRlFZQUNDeUFQYWlJQ1FRVjJJZ0ZGSUFKQkgzRWlBblN0SUFXdGZDRVJJQUZCQVVZZ0FuU3RJQU90ZkNBUlFpQ0lmQ0lRcHlFRklBRkJBa1lnQW5TdElBU3RmQ0FRUWlDSWZDSVNweUVFSUFGQkEwWWdBblN0SUFldGZDQVNRaUNJZkNJVHB5RU1JQUZCQkVZZ0FuU3RJQXF0ZkNBVFFpQ0lmQ0lVcHlFS0lBRkJCVVlnQW5TdElBYXRmQ0FVUWlDSWZDSVZweUVHSUFGQkJrWWdBblN0SUFpdGZDQVZRaUNJZkNJV3B5RUlJQUZCQjBZZ0FuU3RJQW10ZkNBV1FpQ0lmQ0lYcHlFT0lCQWdFWVFnRW9RZ0U0UWdGSVFnRllRZ0ZvUWdGNFNuUVFCSFFSOTBRUjkxSVFJZ0VhY2dDMEVBUnlJRFFSOTBRUjkxSWdGenJTRVJJQU1FZmtMQ2d0bUJEUVZDQUFzZ0VYd2lFQ0FDclNJUmc2Y2hBaUFGSUFGenJTRVNJQkJDSUlnZ0F3UitRb3k5eWY0TEJVSUFDNFFnRW53aUVDQVJnNmNoQnlBUVFpQ0lJUkFnQkNBQmM2MGhFaUFEQkg1Q3U4Q2krZ29GUWdBTElCSjhJQkI4SWhBZ0VZT25JUVFnRUVJZ2lDRVFJQXdnQVhPdElSSWdBd1IrUXVhNXU5VUxCVUlBQ3lBU2ZDQVFmQ0lRSUJHRHB5RUZJQkJDSUlnaEVDQUtJQUZ6clNFU0lBMUJBWFJCZjJvZ0EwRUJjMEVCY1VFQmRFRi9hbXdoREVFQUlRa2dBa0VQY1NFS0lBZEJISFFnQWtFRWRuSWhBaUFFUVJ4MElBZEJCSFp5SVFjZ0JVRWNkQ0FFUVFSMmNpRUVJQU1FZmtMKy8vLy9Ed1ZDQUFzZ0Vud2dFSHdpRWlBUmc2Y2lDMEVjZENBRlFRUjJjaUVESUFZZ0FYT3RJQUd0SWhCOElCSkNJSWg4SWhJZ0VZT25JZ1pCSEhRZ0MwRUVkbkloQlNBSUlBRnpyU0FRZkNBU1FpQ0lmQ0lTSUJHRHB5SUxRUngwSUFaQkJIWnlJUWdnRGlBQmM2MGdFSHdnRWtJZ2lId2dFWU9uSWdGQkhIUWdDMEVFZG5JaEJnTkFJQUpCQkhZZ0IwRWNkSEloQ3lBSFFRUjJJQVJCSEhSeUlRY2dCRUVFZGlBRFFSeDBjaUVFSUFOQkJIWWdCVUVjZEhJaEF5QUZRUVIySUFoQkhIUnlJUVVnQ0VFRWRpQUdRUngwY2lFSUlBRkJCSFlpRFVFY2RDQUdRUVIyY2lFR0lBSkJBWEZCQVhNaURpQUNRUTl4YWlFQklBQWdDVUVDZEdvZ0NpQU9RUVIwYXlBTWJEWUNBQ0FKUVFGcUlnbEJJRWNFUUNBQklRb2dDeUVDSUEwaEFRd0JDd3NnQUNBQklBeHNOZ0tBQVVFQklBOTBDOGdJQWlSL0NINGpCQ0VESXdSQjRBQnFKQVFnQTBFMGFpSUNRZ0EzQWdBZ0FrSUFOd0lJSUFKQ0FEY0NFQ0FDUWdBM0FoZ2dBa0VBTmdJZ0lBTkJFR29pRVVFRWFpSUVRZ0EzQWdBZ0JFSUFOd0lJSUFSQ0FEY0NFQ0FFUWdBM0FoZ2dFVUVCTmdJQUlBTWlCMEVFYWlFaklBZEJDR29oSkNBSFFReHFJU1ZCZnlFRElBQW9BZ0FoQkNBQktBSUFJUTBnQUNnQ0RDRVRJQUVvQWd3aEZDQUFLQUlRSVJVZ0FTZ0NFQ0VXSUFBb0FoUWhGeUFCS0FJVUlSZ2dBQ2dDR0NFWklBRW9BaGdoR2lBQUtBSWNJUnNnQVNnQ0hDRWNJQUFvQWlBaEhTQUJLQUlnSVE0Z0FDZ0NCQ0VlSUFFb0FnUWhIeUFBS0FJSUlTQWdBU2dDQ0NFaEEwQkJBQ0VpUVFFaENFRUFJUWtnQkNFRklBMGhEMEVBSVFwQkFTRUxBMEFnRHlBRFFSOTFJZ1p6SUFaclFRQWdCVUVCY1dzaUVIRWdCV29oQlNBR0lCQnhJZ3dnQTNNZ0RFRi9jMm9oQXlBRklBeHhJQTlxSVE4Z0JVRUJkaUVGSUFZZ0NITWdCbXNnRUhFZ0Ntb2lDaUFNY1NBSWFrRUJkQ0VJSUFzZ0NTQUdjeUFHYXlBUWNXb2lDeUFNY1NBSmFrRUJkQ0VKSUNKQkFXb2lJa0VlUncwQUN5QUhJQWcyQWdBZ0l5QUpOZ0lBSUNRZ0NqWUNBQ0FsSUFzMkFnQWdBaUFSSUFjZ0FSQTdJQW1zSWlvZ0hxd2lLMzRnQ0t3aUxDQWZyQ0ltZm53Z0tpQUVyQ0luZmlBc0lBMnNJaWgrZkVJZWgzd2lLYWRCLy8vLy93TnhJUTBnQzZ3aUxTQXJmaUFLckNJcklDWitmQ0F0SUNkK0lDc2dLSDU4UWg2SGZDSW1wMEgvLy8vL0EzRWhCQ0FxSUNDc0lpZCtJQ3dnSWF3aUtINThJQ2xDSG9kOElpbW5RZi8vLy84RGNTRWZJQzBnSjM0Z0t5QW9mbndnSmtJZWgzd2lKcWRCLy8vLy93TnhJUjRnS2lBVHJDSW5maUFzSUJTc0lpaCtmQ0FwUWg2SGZDSXBwMEgvLy8vL0EzRWhJU0F0SUNkK0lDc2dLSDU4SUNaQ0hvZDhJaWFuUWYvLy8vOERjU0VnSUNvZ0Zhd2lKMzRnTENBV3JDSW9mbndnS1VJZWgzd2lLYWRCLy8vLy93TnhJUlFnTFNBbmZpQXJJQ2grZkNBbVFoNkhmQ0ltcDBILy8vLy9BM0VoRXlBcUlCZXNJaWQrSUN3Z0dLd2lLSDU4SUNsQ0hvZDhJaW1uUWYvLy8vOERjU0VXSUMwZ0ozNGdLeUFvZm53Z0prSWVoM3dpSnFkQi8vLy8vd054SVJVZ0tpQVpyQ0luZmlBc0lCcXNJaWgrZkNBcFFoNkhmQ0lwcDBILy8vLy9BM0VoR0NBdElDZCtJQ3NnS0g1OElDWkNIb2Q4SWlhblFmLy8vLzhEY1NFWElDb2dHNndpSjM0Z0xDQWNyQ0lvZm53Z0tVSWVoM3dpS2FkQi8vLy8vd054SVJvZ0xTQW5maUFySUNoK2ZDQW1RaDZIZkNJbXAwSC8vLy8vQTNFaEdTQXFJQjJzSWlwK0lDd2dEcXdpTEg1OElDbENIb2Q4SWllblFmLy8vLzhEY1NFY0lDMGdLbjRnS3lBc2Zud2dKa0llaDN3aUtxZEIvLy8vL3dOeElSc2dKMEllaUtjaERpQXFRaDZJcHlFZElCSkJBV29pRWtFWlJ3MEFDeUFDSUE0Z0FSQTZJQUFnQWlrQ0FEY0NBQ0FBSUFJcEFnZzNBZ2dnQUNBQ0tRSVFOd0lRSUFBZ0Fpa0NHRGNDR0NBQUlBSW9BaUEyQWlBZ0J5UUVDNkpMQVROL0l3UWhDU01FUWZBQmFpUUVJQUJDZ1lLRWlKQ2d3SUFCTndJQUlBQkNnWUtFaUpDZ3dJQUJOd0lJSUFCQ2dZS0VpSkNnd0lBQk53SVFJQUJDZ1lLRWlKQ2d3SUFCTndJWUlBQkJJR29pR1VJQU53SUFJQmxDQURjQ0NDQVpRZ0EzQWhBZ0dVSUFOd0lZSUFraUNpQVpFQjRnQ2tIZ0FHb2lEU2dDQUNJSlFUOXhJUVFnRFNBSlFTQnFOZ0lBSUFwQklHb2hDd0pBQWtCQndBQWdCR3NpQ1VFZ1N3UkFJQUFoQ1NBRUlRTkJJQ0VJREFFRklBc2dCR29nQUNBSkVBNGFJQUFnQ1dvaEF5QUtJQXNRRFVFZ0lBbHJJZ2hCd0FCSkJIOGdBd1VnQUVIa0FHb2dCRUdnZjJvaUIwRkFjU0lHUVJ4eUlBUnJhaUVFSUFnaENTQURJUWdEUUNBTElBZ3BBQUEzQUFBZ0N5QUlLUUFJTndBSUlBc2dDQ2tBRURjQUVDQUxJQWdwQUJnM0FCZ2dDeUFJS1FBZ053QWdJQXNnQ0NrQUtEY0FLQ0FMSUFncEFEQTNBREFnQ3lBSUtRQTROd0E0SUFoQlFHc2hDQ0FLSUFzUURTQUpRVUJxSWdsQndBQlBEUUFMSUFjZ0Jtc2hDQ0FFQ3lFSklBZ0VRRUVBSVFNTUFnc0xEQUVMSUFzZ0Eyb2dDU0FJRUE0YUN5QU5LQUlBSWdoQlAzRWhDU0FOSUFoQkFXbzJBZ0FnQ2tFZ2FpRUxBa0FDUUVIQUFDQUpheUlJUVFGTEJFQkJ4QzBoQTBFQklRZ01BUVVnQ3lBSmFrRUFJQWdRR1JvZ0NFSEVMV29oQXlBS0lBc1FEVUVCSUFocklnaEJ3QUJKQkg4Z0F3VWdDVUdCZjJvaUIwRkFjU0lHSUFsclFjUXVhaUVFSUFnaENTQURJUWdEUUNBTElBZ3BBQUEzQUFBZ0N5QUlLUUFJTndBSUlBc2dDQ2tBRURjQUVDQUxJQWdwQUJnM0FCZ2dDeUFJS1FBZ053QWdJQXNnQ0NrQUtEY0FLQ0FMSUFncEFEQTNBREFnQ3lBSUtRQTROd0E0SUFoQlFHc2hDQ0FLSUFzUURTQUpRVUJxSWdsQndBQlBEUUFMSUFjZ0Jtc2hDQ0FFQ3lFSklBZ0VRQ0FKSVFOQkFDRUpEQUlMQ3d3QkN5QUxJQWxxSUFNZ0NCQU9HZ3NnRFNnQ0FDSUpRVDl4SVFNZ0RTQUpJQUpxTmdJQVFjQUFJQU5ySWdrZ0Frc0VRQ0FCSVFnZ0FpRUpCU0FLUVNCcUlnY2dBMm9nQVNBSkVBNGFJQUVnQ1dvaENDQUtJQWNRRFNBQ0lBbHJJZ2xCd0FCSkJIOUJBQVVnQXlBQ2FrR0FmMm9pQmtGQWNTSUVRWUFCYWlBRGF5RURBMEFnQnlBSUtRQUFOd0FBSUFjZ0NDa0FDRGNBQ0NBSElBZ3BBQkEzQUJBZ0J5QUlLUUFZTndBWUlBY2dDQ2tBSURjQUlDQUhJQWdwQUNnM0FDZ2dCeUFJS1FBd053QXdJQWNnQ0NrQU9EY0FPQ0FJUVVCcklRZ2dDaUFIRUEwZ0NVRkFhaUlKUWNBQVR3MEFDeUFCSUFOcUlRZ2dCaUFFYXlFSlFRQUxJUU1MSUFrRVFDQUtRU0JxSUFOcUlBZ2dDUkFPR2dzZ0NrSElBV29oQ0NBS1FlZ0JhaUlKSUEwb0FnQWlBMEVkZGtFWWREWUNBQ0FKSUFOQkMzUkJnSUQ4QjNFZ0EwRWJkSElnQTBFRmRrR0EvZ054Y2lBRFFSVjJRZjhCY1hJMkFnUWdEU0FEUVRjZ0EydEJQM0ZCQVdvaUJHbzJBZ0FnQ2tFZ2FpRUhBa0FDUUNBRVFjQUFJQU5CUDNFaUEyc2lCa2tFUUVHcEV5RUdEQUVGSUFjZ0EycEJxUk1nQmhBT0dpQUdRYWtUYWlFRElBb2dCeEFOSUFRZ0Jtc2lCRUhBQUU4RVFBTkFJQWNnQXlrQUFEY0FBQ0FISUFNcEFBZzNBQWdnQnlBREtRQVFOd0FRSUFjZ0F5a0FHRGNBR0NBSElBTXBBQ0EzQUNBZ0J5QURLUUFvTndBb0lBY2dBeWtBTURjQU1DQUhJQU1wQURnM0FEZ2dBMEZBYXlFRElBb2dCeEFOSUFSQlFHb2lCRUhBQUU4TkFBc0xJQVFFUUNBRElRWkJBQ0VEREFJTEN3d0JDeUFISUFOcUlBWWdCQkFPR2dzZ0RTZ0NBQ0lEUVQ5eElRWWdEU0FEUVFocU5nSUFJQXBCSUdvaEJ3SkFBa0JCd0FBZ0Jtc2lCRUVJU3dSQUlBa2hBMEVJSVFRTUFRVWdCeUFHYWlBSklBUVFEaG9nQ1NBRWFpRURJQW9nQnhBTlFRZ2dCR3NpQkVIQUFFOEVRQU5BSUFjZ0F5a0FBRGNBQUNBSElBTXBBQWczQUFnZ0J5QURLUUFRTndBUUlBY2dBeWtBR0RjQUdDQUhJQU1wQUNBM0FDQWdCeUFES1FBb053QW9JQWNnQXlrQU1EY0FNQ0FISUFNcEFEZzNBRGdnQTBGQWF5RURJQW9nQnhBTklBUkJRR29pQkVIQUFFOE5BQXNMSUFRRVFFRUFJUVlNQWdzTERBRUxJQWNnQm1vZ0F5QUVFQTRhQ3lBS0tBSUFFQXNoRWlBS1FRQTJBZ0FnQ2tFRWFpSWFLQUlBRUFzaEVDQWFRUUEyQWdBZ0NrRUlhaUliS0FJQUVBc2hEaUFiUVFBMkFnQWdDa0VNYWlJY0tBSUFFQXNoQ3lBY1FRQTJBZ0FnQ2tFUWFpSWRLQUlBRUFzaEJ5QWRRUUEyQWdBZ0NrRVVhaUllS0FJQUVBc2hCaUFlUVFBMkFnQWdDa0VZYWlJZktBSUFFQXNoQkNBZlFRQTJBZ0FnQ2tFY2FpSWdLQUlBRUFzaEF5QWdRUUEyQWdBZ0NDQVNOZ0lBSUFoQkJHb2lJaUFRTmdJQUlBaEJDR29pSXlBT05nSUFJQWhCREdvaUpDQUxOZ0lBSUFoQkVHb2lKU0FITmdJQUlBaEJGR29pSmlBR05nSUFJQWhCR0dvaUp5QUVOZ0lBSUFoQkhHb2lLQ0FETmdJQUlBcEI1QUJxSVF3Z0NrSEVBV29pRVNnQ0FDSURRVDl4SVFZZ0VTQURRU0JxTmdJQUlBcEJoQUZxSVFVQ1FBSkFRY0FBSUFacklnZEJJRXNFUUNBSUlRTWdCaUVFUVNBaEJnd0JCU0FGSUFacUlBZ2dCeEFPR2lBSUlBZHFJUVFnRENBRkVBMUJJQ0FIYXlJRFFjQUFTUVIvSUFNaEJpQUVCU0FHUWFCL2FpSUdRUVoyUVFGMElRc2dCMEZBYWlFSEEwQWdCU0FFS1FBQU53QUFJQVVnQkNrQUNEY0FDQ0FGSUFRcEFCQTNBQkFnQlNBRUtRQVlOd0FZSUFVZ0JDa0FJRGNBSUNBRklBUXBBQ2czQUNnZ0JTQUVLUUF3TndBd0lBVWdCQ2tBT0RjQU9DQUVRVUJySVFRZ0RDQUZFQTBnQTBGQWFpSURRY0FBVHcwQUN5QUdRVDl4SVFZZ0NDQUxRUVJxUVFWMGFpQUhhZ3NoQXlBR0JFQkJBQ0VFREFJTEN3d0JDeUFGSUFScUlBTWdCaEFPR2dzZ0NTQVJLQUlBSWdOQkhYWkJHSFEyQWdBZ0NTQURRUXQwUVlDQS9BZHhJQU5CRzNSeUlBTkJCWFpCZ1A0RGNYSWdBMEVWZGtIL0FYRnlOZ0lFSUJFZ0EwRTNJQU5yUVQ5eFFRRnFJZ1JxTmdJQUFrQUNRQ0FFUWNBQUlBTkJQM0VpQTJzaUJra0VRRUdwRXlFR0RBRUZJQVVnQTJwQnFSTWdCaEFPR2lBR1Fha1RhaUVESUF3Z0JSQU5JQVFnQm1zaUJFSEFBRThFUUFOQUlBVWdBeWtBQURjQUFDQUZJQU1wQUFnM0FBZ2dCU0FES1FBUU53QVFJQVVnQXlrQUdEY0FHQ0FGSUFNcEFDQTNBQ0FnQlNBREtRQW9Od0FvSUFVZ0F5a0FNRGNBTUNBRklBTXBBRGczQURnZ0EwRkFheUVESUF3Z0JSQU5JQVJCUUdvaUJFSEFBRThOQUFzTElBUUVRQ0FESVFaQkFDRUREQUlMQ3d3QkN5QUZJQU5xSUFZZ0JCQU9HZ3NnRVNnQ0FDSURRVDl4SVFZZ0VTQURRUWhxTmdJQUFrQUNRRUhBQUNBR2F5SUVRUWhMQkVBZ0NTRURRUWdoQkF3QkJTQUZJQVpxSUFrZ0JCQU9HaUFKSUFScUlRTWdEQ0FGRUExQkNDQUVheUlFUWNBQVR3UkFBMEFnQlNBREtRQUFOd0FBSUFVZ0F5a0FDRGNBQ0NBRklBTXBBQkEzQUJBZ0JTQURLUUFZTndBWUlBVWdBeWtBSURjQUlDQUZJQU1wQUNnM0FDZ2dCU0FES1FBd053QXdJQVVnQXlrQU9EY0FPQ0FEUVVCcklRTWdEQ0FGRUEwZ0JFRkFhaUlFUWNBQVR3MEFDd3NnQkFSQVFRQWhCZ3dDQ3dzTUFRc2dCU0FHYWlBRElBUVFEaG9MSUF3b0FnQVFDeUVTSUF4QkFEWUNBQ0FLUWVnQWFpSVRLQUlBRUFzaEVDQVRRUUEyQWdBZ0NrSHNBR29pRkNnQ0FCQUxJUTRnRkVFQU5nSUFJQXBCOEFCcUloVW9BZ0FRQ3lFTElCVkJBRFlDQUNBS1FmUUFhaUlXS0FJQUVBc2hCeUFXUVFBMkFnQWdDa0g0QUdvaUZ5Z0NBQkFMSVFZZ0YwRUFOZ0lBSUFwQi9BQnFJaGdvQWdBUUN5RUVJQmhCQURZQ0FDQUtRWUFCYWlJaEtBSUFFQXNoQXlBaFFRQTJBZ0FnQUVFZ2FpSXVJQkkyQUFBZ0FFRWthaUl2SUJBMkFBQWdBRUVvYWlJd0lBNDJBQUFnQUVFc2FpSXhJQXMyQUFBZ0FFRXdhaUl5SUFjMkFBQWdBRUUwYWlJeklBWTJBQUFnQUVFNGFpSTBJQVEyQUFBZ0FFRThhaUkxSUFNMkFBQWdDaUFaRUI0Z0RTZ0NBQ0lEUVQ5eElRY2dEU0FEUVNCcU5nSUFJQXBCSUdvaEVBSkFBa0JCd0FBZ0Iyc2lBMEVnU3dSQUlBQWhBeUFISVFaQklDRUVEQUVGSUJBZ0Iyb2dBQ0FERUE0YUlBQWdBMm9oQmlBS0lCQVFEVUVnSUFOcklnUkJ3QUJKQkg4Z0JnVWdBRUhrQUdvZ0IwR2dmMm9pRGtGQWNTSUxRUnh5SUFkcmFpRUhJQVFoQXlBR0lRUURRQ0FRSUFRcEFBQTNBQUFnRUNBRUtRQUlOd0FJSUJBZ0JDa0FFRGNBRUNBUUlBUXBBQmczQUJnZ0VDQUVLUUFnTndBZ0lCQWdCQ2tBS0RjQUtDQVFJQVFwQURBM0FEQWdFQ0FFS1FBNE53QTRJQVJCUUdzaEJDQUtJQkFRRFNBRFFVQnFJZ05Cd0FCUERRQUxJQTRnQzJzaEJDQUhDeUVESUFRRVFFRUFJUVlNQWdzTERBRUxJQkFnQm1vZ0F5QUVFQTRhQ3lBSklBMG9BZ0FpQTBFZGRrRVlkRFlDQUNBSklBTkJDM1JCZ0lEOEIzRWdBMEViZEhJZ0EwRUZka0dBL2dOeGNpQURRUlYyUWY4QmNYSTJBZ1FnRFNBRFFUY2dBMnRCUDNGQkFXb2lCR28yQWdBZ0NrRWdhaUVIQWtBQ1FDQUVRY0FBSUFOQlAzRWlBMnNpQmtrRVFFR3BFeUVHREFFRklBY2dBMnBCcVJNZ0JoQU9HaUFHUWFrVGFpRURJQW9nQnhBTklBUWdCbXNpQkVIQUFFOEVRQU5BSUFjZ0F5a0FBRGNBQUNBSElBTXBBQWczQUFnZ0J5QURLUUFRTndBUUlBY2dBeWtBR0RjQUdDQUhJQU1wQUNBM0FDQWdCeUFES1FBb053QW9JQWNnQXlrQU1EY0FNQ0FISUFNcEFEZzNBRGdnQTBGQWF5RURJQW9nQnhBTklBUkJRR29pQkVIQUFFOE5BQXNMSUFRRVFDQURJUVpCQUNFRERBSUxDd3dCQ3lBSElBTnFJQVlnQkJBT0dnc2dEU2dDQUNJRFFUOXhJUVlnRFNBRFFRaHFOZ0lBSUFwQklHb2hCd0pBQWtCQndBQWdCbXNpQkVFSVN3UkFJQWtoQTBFSUlRUU1BUVVnQnlBR2FpQUpJQVFRRGhvZ0NTQUVhaUVESUFvZ0J4QU5RUWdnQkdzaUJFSEFBRThFUUFOQUlBY2dBeWtBQURjQUFDQUhJQU1wQUFnM0FBZ2dCeUFES1FBUU53QVFJQWNnQXlrQUdEY0FHQ0FISUFNcEFDQTNBQ0FnQnlBREtRQW9Od0FvSUFjZ0F5a0FNRGNBTUNBSElBTXBBRGczQURnZ0EwRkFheUVESUFvZ0J4QU5JQVJCUUdvaUJFSEFBRThOQUFzTElBUUVRRUVBSVFZTUFnc0xEQUVMSUFjZ0Jtb2dBeUFFRUE0YUN5QUtLQUlBRUFzaEVpQUtRUUEyQWdBZ0dpZ0NBQkFMSVJBZ0drRUFOZ0lBSUJzb0FnQVFDeUVPSUJ0QkFEWUNBQ0FjS0FJQUVBc2hDeUFjUVFBMkFnQWdIU2dDQUJBTElRY2dIVUVBTmdJQUlCNG9BZ0FRQ3lFR0lCNUJBRFlDQUNBZktBSUFFQXNoQkNBZlFRQTJBZ0FnSUNnQ0FCQUxJUU1nSUVFQU5nSUFJQWdnRWpZQ0FDQWlJQkEyQWdBZ0l5QU9OZ0lBSUNRZ0N6WUNBQ0FsSUFjMkFnQWdKaUFHTmdJQUlDY2dCRFlDQUNBb0lBTTJBZ0FnRVNnQ0FDSURRVDl4SVFZZ0VTQURRU0JxTmdJQUFrQUNRRUhBQUNBR2F5SUhRU0JMQkVBZ0NDRURJQVloQkVFZ0lRWU1BUVVnQlNBR2FpQUlJQWNRRGhvZ0NDQUhhaUVFSUF3Z0JSQU5RU0FnQjJzaUEwSEFBRWtFZnlBRElRWWdCQVVnQmtHZ2Yyb2lCa0VHZGtFQmRDRUxJQWRCUUdvaEJ3TkFJQVVnQkNrQUFEY0FBQ0FGSUFRcEFBZzNBQWdnQlNBRUtRQVFOd0FRSUFVZ0JDa0FHRGNBR0NBRklBUXBBQ0EzQUNBZ0JTQUVLUUFvTndBb0lBVWdCQ2tBTURjQU1DQUZJQVFwQURnM0FEZ2dCRUZBYXlFRUlBd2dCUkFOSUFOQlFHb2lBMEhBQUU4TkFBc2dCa0UvY1NFR0lBZ2dDMEVFYWtFRmRHb2dCMm9MSVFNZ0JnUkFRUUFoQkF3Q0N3c01BUXNnQlNBRWFpQURJQVlRRGhvTElBa2dFU2dDQUNJRFFSMTJRUmgwTmdJQUlBa2dBMEVMZEVHQWdQd0hjU0FEUVJ0MGNpQURRUVYyUVlEK0EzRnlJQU5CRlhaQi93RnhjallDQkNBUklBTkJOeUFEYTBFL2NVRUJhaUlFYWpZQ0FBSkFBa0FnQkVIQUFDQURRVDl4SWdOcklnWkpCRUJCcVJNaEJnd0JCU0FGSUFOcVFha1RJQVlRRGhvZ0JrR3BFMm9oQXlBTUlBVVFEU0FFSUFacklnUkJ3QUJQQkVBRFFDQUZJQU1wQUFBM0FBQWdCU0FES1FBSU53QUlJQVVnQXlrQUVEY0FFQ0FGSUFNcEFCZzNBQmdnQlNBREtRQWdOd0FnSUFVZ0F5a0FLRGNBS0NBRklBTXBBREEzQURBZ0JTQURLUUE0TndBNElBTkJRR3NoQXlBTUlBVVFEU0FFUVVCcUlnUkJ3QUJQRFFBTEN5QUVCRUFnQXlFR1FRQWhBd3dDQ3dzTUFRc2dCU0FEYWlBR0lBUVFEaG9MSUJFb0FnQWlBMEUvY1NFR0lCRWdBMEVJYWpZQ0FBSkFBa0JCd0FBZ0Jtc2lCRUVJU3dSQUlBa2hBMEVJSVFRTUFRVWdCU0FHYWlBSklBUVFEaG9nQ1NBRWFpRURJQXdnQlJBTlFRZ2dCR3NpQkVIQUFFOEVRQU5BSUFVZ0F5a0FBRGNBQUNBRklBTXBBQWczQUFnZ0JTQURLUUFRTndBUUlBVWdBeWtBR0RjQUdDQUZJQU1wQUNBM0FDQWdCU0FES1FBb053QW9JQVVnQXlrQU1EY0FNQ0FGSUFNcEFEZzNBRGdnQTBGQWF5RURJQXdnQlJBTklBUkJRR29pQkVIQUFFOE5BQXNMSUFRRVFFRUFJUVlNQWdzTERBRUxJQVVnQm1vZ0F5QUVFQTRhQ3lBTUtBSUFFQXNoRWlBTVFRQTJBZ0FnRXlnQ0FCQUxJUkFnRTBFQU5nSUFJQlFvQWdBUUN5RU9JQlJCQURZQ0FDQVZLQUlBRUFzaEN5QVZRUUEyQWdBZ0ZpZ0NBQkFMSVFjZ0ZrRUFOZ0lBSUJjb0FnQVFDeUVHSUJkQkFEWUNBQ0FZS0FJQUVBc2hCQ0FZUVFBMkFnQWdJU2dDQUJBTElRTWdJVUVBTmdJQUlBQWdFallBQUNBQVFRUnFJaWtnRURZQUFDQUFRUWhxSWlvZ0RqWUFBQ0FBUVF4cUlpc2dDellBQUNBQVFSQnFJaXdnQnpZQUFDQUFRUlJxSWkwZ0JqWUFBQ0FBUVJocUloSWdCRFlBQUNBQVFSeHFJaEFnQXpZQUFDQUtJQmtRSGlBTktBSUFJZ05CUDNFaEJ5QU5JQU5CSUdvMkFnQWdDa0VnYWlFUEFrQUNRRUhBQUNBSGF5SURRU0JMQkVBZ0FDRURJQWNoQmtFZ0lRUU1BUVVnRHlBSGFpQUFJQU1RRGhvZ0FDQURhaUVHSUFvZ0R4QU5RU0FnQTJzaUJFSEFBRWtFZnlBR0JTQUFRZVFBYWlBSFFhQi9haUlPUVVCeElndEJISElnQjJ0cUlRY2dCQ0VESUFZaEJBTkFJQThnQkNrQUFEY0FBQ0FQSUFRcEFBZzNBQWdnRHlBRUtRQVFOd0FRSUE4Z0JDa0FHRGNBR0NBUElBUXBBQ0EzQUNBZ0R5QUVLUUFvTndBb0lBOGdCQ2tBTURjQU1DQVBJQVFwQURnM0FEZ2dCRUZBYXlFRUlBb2dEeEFOSUFOQlFHb2lBMEhBQUU4TkFBc2dEaUFMYXlFRUlBY0xJUU1nQkFSQVFRQWhCZ3dDQ3dzTUFRc2dEeUFHYWlBRElBUVFEaG9MSUEwb0FnQWlCRUUvY1NFRElBMGdCRUVCYWpZQ0FDQUtRU0JxSVE4Q1FBSkFRY0FBSUFOcklnUkJBVXNFUUVHUkZpRUdRUUVoQkF3QkJTQVBJQU5xUVFFZ0JCQVpHaUFFUVpFV2FpRUdJQW9nRHhBTlFRRWdCR3NpQkVIQUFFa0VmeUFHQlNBRFFZRi9haUlPUVVCeElnc2dBMnRCa1JkcUlRY2dCQ0VESUFZaEJBTkFJQThnQkNrQUFEY0FBQ0FQSUFRcEFBZzNBQWdnRHlBRUtRQVFOd0FRSUE4Z0JDa0FHRGNBR0NBUElBUXBBQ0EzQUNBZ0R5QUVLUUFvTndBb0lBOGdCQ2tBTURjQU1DQVBJQVFwQURnM0FEZ2dCRUZBYXlFRUlBb2dEeEFOSUFOQlFHb2lBMEhBQUU4TkFBc2dEaUFMYXlFRUlBY0xJUU1nQkFSQUlBTWhCa0VBSVFNTUFnc0xEQUVMSUE4Z0Eyb2dCaUFFRUE0YUN5QU5LQUlBSWdOQlAzRWhCaUFOSUFNZ0FtbzJBZ0JCd0FBZ0Jtc2lBeUFDU3dSQUlBWWhCQVVnQ2tFZ2FpSU9JQVpxSUFFZ0F4QU9HaUFCSUFOcUlRUWdDaUFPRUEwZ0FpQURheUlEUWNBQVNRUi9JQVFoQVVFQUlRUWdBd1VnQmlBQ2FrR0FmMm9pQzBGQWNTSUhRWUFCYWlBR2F5RUdJQU1oQWlBRUlRTURRQ0FPSUFNcEFBQTNBQUFnRGlBREtRQUlOd0FJSUE0Z0F5a0FFRGNBRUNBT0lBTXBBQmczQUJnZ0RpQURLUUFnTndBZ0lBNGdBeWtBS0RjQUtDQU9JQU1wQURBM0FEQWdEaUFES1FBNE53QTRJQU5CUUdzaEF5QUtJQTRRRFNBQ1FVQnFJZ0pCd0FCUERRQUxJQUVnQm1vaEFVRUFJUVFnQ3lBSGF3c2hBZ3NnQWdSQUlBcEJJR29nQkdvZ0FTQUNFQTRhQ3lBSklBMG9BZ0FpQVVFZGRrRVlkRFlDQUNBSklBRkJDM1JCZ0lEOEIzRWdBVUViZEhJZ0FVRUZka0dBL2dOeGNpQUJRUlYyUWY4QmNYSTJBZ1FnRFNBQlFUY2dBV3RCUDNGQkFXb2lBbW8yQWdBZ0NrRWdhaUVFQWtBQ1FDQUNRY0FBSUFGQlAzRWlBV3NpQTBrRVFFR3BFeUVEREFFRklBUWdBV3BCcVJNZ0F4QU9HaUFEUWFrVGFpRUJJQW9nQkJBTklBSWdBMnNpQWtIQUFFOEVRQU5BSUFRZ0FTa0FBRGNBQUNBRUlBRXBBQWczQUFnZ0JDQUJLUUFRTndBUUlBUWdBU2tBR0RjQUdDQUVJQUVwQUNBM0FDQWdCQ0FCS1FBb053QW9JQVFnQVNrQU1EY0FNQ0FFSUFFcEFEZzNBRGdnQVVGQWF5RUJJQW9nQkJBTklBSkJRR29pQWtIQUFFOE5BQXNMSUFJRVFDQUJJUU5CQUNFQkRBSUxDd3dCQ3lBRUlBRnFJQU1nQWhBT0dnc2dEU2dDQUNJQlFUOXhJUU1nRFNBQlFRaHFOZ0lBSUFwQklHb2hCQUpBQWtCQndBQWdBMnNpQWtFSVN3UkFJQWtoQVVFSUlRSU1BUVVnQkNBRGFpQUpJQUlRRGhvZ0NTQUNhaUVCSUFvZ0JCQU5RUWdnQW1zaUFrSEFBRThFUUFOQUlBUWdBU2tBQURjQUFDQUVJQUVwQUFnM0FBZ2dCQ0FCS1FBUU53QVFJQVFnQVNrQUdEY0FHQ0FFSUFFcEFDQTNBQ0FnQkNBQktRQW9Od0FvSUFRZ0FTa0FNRGNBTUNBRUlBRXBBRGczQURnZ0FVRkFheUVCSUFvZ0JCQU5JQUpCUUdvaUFrSEFBRThOQUFzTElBSUVRRUVBSVFNTUFnc0xEQUVMSUFRZ0Eyb2dBU0FDRUE0YUN5QUtLQUlBRUFzaERpQUtRUUEyQWdBZ0dpZ0NBQkFMSVFzZ0drRUFOZ0lBSUJzb0FnQVFDeUVISUJ0QkFEWUNBQ0FjS0FJQUVBc2hCaUFjUVFBMkFnQWdIU2dDQUJBTElRUWdIVUVBTmdJQUlCNG9BZ0FRQ3lFRElCNUJBRFlDQUNBZktBSUFFQXNoQWlBZlFRQTJBZ0FnSUNnQ0FCQUxJUUVnSUVFQU5nSUFJQWdnRGpZQ0FDQWlJQXMyQWdBZ0l5QUhOZ0lBSUNRZ0JqWUNBQ0FsSUFRMkFnQWdKaUFETmdJQUlDY2dBallDQUNBb0lBRTJBZ0FnRVNnQ0FDSUJRVDl4SVFNZ0VTQUJRU0JxTmdJQUFrQUNRRUhBQUNBRGF5SUVRU0JMQkVBZ0NDRUJJQU1oQWtFZ0lRTU1BUVVnQlNBRGFpQUlJQVFRRGhvZ0NDQUVhaUVDSUF3Z0JSQU5RU0FnQkdzaUFVSEFBRWtFZnlBQklRTWdBZ1VnQTBHZ2Yyb2lBMEVHZGtFQmRDRUdJQVJCUUdvaEJBTkFJQVVnQWlrQUFEY0FBQ0FGSUFJcEFBZzNBQWdnQlNBQ0tRQVFOd0FRSUFVZ0Fpa0FHRGNBR0NBRklBSXBBQ0EzQUNBZ0JTQUNLUUFvTndBb0lBVWdBaWtBTURjQU1DQUZJQUlwQURnM0FEZ2dBa0ZBYXlFQ0lBd2dCUkFOSUFGQlFHb2lBVUhBQUU4TkFBc2dBMEUvY1NFRElBZ2dCa0VFYWtFRmRHb2dCR29MSVFFZ0F3UkFRUUFoQWd3Q0N3c01BUXNnQlNBQ2FpQUJJQU1RRGhvTElBa2dFU2dDQUNJQlFSMTJRUmgwTmdJQUlBa2dBVUVMZEVHQWdQd0hjU0FCUVJ0MGNpQUJRUVYyUVlEK0EzRnlJQUZCRlhaQi93RnhjallDQkNBUklBRkJOeUFCYTBFL2NVRUJhaUlDYWpZQ0FBSkFBa0FnQWtIQUFDQUJRVDl4SWdGcklnTkpCRUJCcVJNaEF3d0JCU0FGSUFGcVFha1RJQU1RRGhvZ0EwR3BFMm9oQVNBTUlBVVFEU0FDSUFOcklnSkJ3QUJQQkVBRFFDQUZJQUVwQUFBM0FBQWdCU0FCS1FBSU53QUlJQVVnQVNrQUVEY0FFQ0FGSUFFcEFCZzNBQmdnQlNBQktRQWdOd0FnSUFVZ0FTa0FLRGNBS0NBRklBRXBBREEzQURBZ0JTQUJLUUE0TndBNElBRkJRR3NoQVNBTUlBVVFEU0FDUVVCcUlnSkJ3QUJQRFFBTEN5QUNCRUFnQVNFRFFRQWhBUXdDQ3dzTUFRc2dCU0FCYWlBRElBSVFEaG9MSUJFb0FnQWlBVUUvY1NFRElCRWdBVUVJYWpZQ0FBSkFBa0JCd0FBZ0Eyc2lBa0VJU3dSQUlBa2hBVUVJSVFJTUFRVWdCU0FEYWlBSklBSVFEaG9nQ1NBQ2FpRUJJQXdnQlJBTlFRZ2dBbXNpQWtIQUFFOEVRQU5BSUFVZ0FTa0FBRGNBQUNBRklBRXBBQWczQUFnZ0JTQUJLUUFRTndBUUlBVWdBU2tBR0RjQUdDQUZJQUVwQUNBM0FDQWdCU0FCS1FBb053QW9JQVVnQVNrQU1EY0FNQ0FGSUFFcEFEZzNBRGdnQVVGQWF5RUJJQXdnQlJBTklBSkJRR29pQWtIQUFFOE5BQXNMSUFJRVFFRUFJUU1NQWdzTERBRUxJQVVnQTJvZ0FTQUNFQTRhQ3lBTUtBSUFFQXNoRGlBTVFRQTJBZ0FnRXlnQ0FCQUxJUXNnRTBFQU5nSUFJQlFvQWdBUUN5RUhJQlJCQURZQ0FDQVZLQUlBRUFzaEJpQVZRUUEyQWdBZ0ZpZ0NBQkFMSVFRZ0ZrRUFOZ0lBSUJjb0FnQVFDeUVESUJkQkFEWUNBQ0FZS0FJQUVBc2hBaUFZUVFBMkFnQWdJU2dDQUJBTElRRWdJVUVBTmdJQUlDNGdEallBQUNBdklBczJBQUFnTUNBSE5nQUFJREVnQmpZQUFDQXlJQVEyQUFBZ015QUROZ0FBSURRZ0FqWUFBQ0ExSUFFMkFBQWdDaUFaRUI0Z0RTZ0NBQ0lCUVQ5eElRUWdEU0FCUVNCcU5nSUFJQXBCSUdvaEN3SkFBa0JCd0FBZ0JHc2lBVUVnU3dSQUlBQWhBU0FFSVFOQklDRUNEQUVGSUFzZ0JHb2dBQ0FCRUE0YUlBQWdBV29oQXlBS0lBc1FEVUVnSUFGcklnSkJ3QUJKQkg4Z0F3VWdBRUhrQUdvZ0JFR2dmMm9pQjBGQWNTSUdRUnh5SUFScmFpRUVJQUloQVNBRElRSURRQ0FMSUFJcEFBQTNBQUFnQ3lBQ0tRQUlOd0FJSUFzZ0Fpa0FFRGNBRUNBTElBSXBBQmczQUJnZ0N5QUNLUUFnTndBZ0lBc2dBaWtBS0RjQUtDQUxJQUlwQURBM0FEQWdDeUFDS1FBNE53QTRJQUpCUUdzaEFpQUtJQXNRRFNBQlFVQnFJZ0ZCd0FCUERRQUxJQWNnQm1zaEFpQUVDeUVCSUFJRVFFRUFJUU1NQWdzTERBRUxJQXNnQTJvZ0FTQUNFQTRhQ3lBSklBMG9BZ0FpQVVFZGRrRVlkRFlDQUNBSklBRkJDM1JCZ0lEOEIzRWdBVUViZEhJZ0FVRUZka0dBL2dOeGNpQUJRUlYyUWY4QmNYSTJBZ1FnRFNBQlFUY2dBV3RCUDNGQkFXb2lBbW8yQWdBZ0NrRWdhaUVFQWtBQ1FDQUNRY0FBSUFGQlAzRWlBV3NpQTBrRVFFR3BFeUVEREFFRklBUWdBV3BCcVJNZ0F4QU9HaUFEUWFrVGFpRUJJQW9nQkJBTklBSWdBMnNpQWtIQUFFOEVRQU5BSUFRZ0FTa0FBRGNBQUNBRUlBRXBBQWczQUFnZ0JDQUJLUUFRTndBUUlBUWdBU2tBR0RjQUdDQUVJQUVwQUNBM0FDQWdCQ0FCS1FBb053QW9JQVFnQVNrQU1EY0FNQ0FFSUFFcEFEZzNBRGdnQVVGQWF5RUJJQW9nQkJBTklBSkJRR29pQWtIQUFFOE5BQXNMSUFJRVFDQUJJUU5CQUNFQkRBSUxDd3dCQ3lBRUlBRnFJQU1nQWhBT0dnc2dEU2dDQUNJQlFUOXhJUU1nRFNBQlFRaHFOZ0lBSUFwQklHb2hCQUpBQWtCQndBQWdBMnNpQWtFSVN3UkFJQWtoQVVFSUlRSU1BUVVnQkNBRGFpQUpJQUlRRGhvZ0NTQUNhaUVCSUFvZ0JCQU5RUWdnQW1zaUFrSEFBRThFUUFOQUlBUWdBU2tBQURjQUFDQUVJQUVwQUFnM0FBZ2dCQ0FCS1FBUU53QVFJQVFnQVNrQUdEY0FHQ0FFSUFFcEFDQTNBQ0FnQkNBQktRQW9Od0FvSUFRZ0FTa0FNRGNBTUNBRUlBRXBBRGczQURnZ0FVRkFheUVCSUFvZ0JCQU5JQUpCUUdvaUFrSEFBRThOQUFzTElBSUVRRUVBSVFNTUFnc0xEQUVMSUFRZ0Eyb2dBU0FDRUE0YUN5QUtLQUlBRUFzaERpQUtRUUEyQWdBZ0dpZ0NBQkFMSVFzZ0drRUFOZ0lBSUJzb0FnQVFDeUVISUJ0QkFEWUNBQ0FjS0FJQUVBc2hCaUFjUVFBMkFnQWdIU2dDQUJBTElRUWdIVUVBTmdJQUlCNG9BZ0FRQ3lFRElCNUJBRFlDQUNBZktBSUFFQXNoQWlBZlFRQTJBZ0FnSUNnQ0FCQUxJUUVnSUVFQU5nSUFJQWdnRGpZQ0FDQWlJQXMyQWdBZ0l5QUhOZ0lBSUNRZ0JqWUNBQ0FsSUFRMkFnQWdKaUFETmdJQUlDY2dBallDQUNBb0lBRTJBZ0FnRVNnQ0FDSUJRVDl4SVFNZ0VTQUJRU0JxTmdJQUFrQUNRRUhBQUNBRGF5SUVRU0JMQkVBZ0NDRUJJQU1oQWtFZ0lRTU1BUVVnQlNBRGFpQUlJQVFRRGhvZ0NDQUVhaUVDSUF3Z0JSQU5RU0FnQkdzaUFVSEFBRWtFZnlBQklRTWdBZ1VnQTBHZ2Yyb2lBMEVHZGtFQmRDRUdJQVJCUUdvaEJBTkFJQVVnQWlrQUFEY0FBQ0FGSUFJcEFBZzNBQWdnQlNBQ0tRQVFOd0FRSUFVZ0Fpa0FHRGNBR0NBRklBSXBBQ0EzQUNBZ0JTQUNLUUFvTndBb0lBVWdBaWtBTURjQU1DQUZJQUlwQURnM0FEZ2dBa0ZBYXlFQ0lBd2dCUkFOSUFGQlFHb2lBVUhBQUU4TkFBc2dBMEUvY1NFRElBZ2dCa0VFYWtFRmRHb2dCR29MSVFFZ0F3UkFRUUFoQWd3Q0N3c01BUXNnQlNBQ2FpQUJJQU1RRGhvTElBa2dFU2dDQUNJQlFSMTJRUmgwTmdJQUlBa2dBVUVMZEVHQWdQd0hjU0FCUVJ0MGNpQUJRUVYyUVlEK0EzRnlJQUZCRlhaQi93RnhjallDQkNBUklBRkJOeUFCYTBFL2NVRUJhaUlDYWpZQ0FBSkFBa0FnQWtIQUFDQUJRVDl4SWdGcklnaEpCRUJCcVJNaENBd0JCU0FGSUFGcVFha1RJQWdRRGhvZ0NFR3BFMm9oQVNBTUlBVVFEU0FDSUFocklnSkJ3QUJQQkVBRFFDQUZJQUVwQUFBM0FBQWdCU0FCS1FBSU53QUlJQVVnQVNrQUVEY0FFQ0FGSUFFcEFCZzNBQmdnQlNBQktRQWdOd0FnSUFVZ0FTa0FLRGNBS0NBRklBRXBBREEzQURBZ0JTQUJLUUE0TndBNElBRkJRR3NoQVNBTUlBVVFEU0FDUVVCcUlnSkJ3QUJQRFFBTEN5QUNCRUFnQVNFSVFRQWhBUXdDQ3dzTUFRc2dCU0FCYWlBSUlBSVFEaG9MSUJFb0FnQWlBVUUvY1NFQ0lCRWdBVUVJYWpZQ0FBSkFRY0FBSUFKcklnaEJDRXNFUUNBSklRRWdBaUVKUVFnaEFnVWdCU0FDYWlBSklBZ1FEaG9nQ1NBSWFpRUJJQXdnQlJBTlFRZ2dDR3NpQWtIQUFFOEVRQU5BSUFVZ0FTa0FBRGNBQUNBRklBRXBBQWczQUFnZ0JTQUJLUUFRTndBUUlBVWdBU2tBR0RjQUdDQUZJQUVwQUNBM0FDQWdCU0FCS1FBb053QW9JQVVnQVNrQU1EY0FNQ0FGSUFFcEFEZzNBRGdnQVVGQWF5RUJJQXdnQlJBTklBSkJRR29pQWtIQUFFOE5BQXNMSUFJRVFFRUFJUWtNQWdzZ0RDZ0NBQkFMSVFjZ0RFRUFOZ0lBSUJNb0FnQVFDeUVHSUJOQkFEWUNBQ0FVS0FJQUVBc2hCQ0FVUVFBMkFnQWdGU2dDQUJBTElRTWdGVUVBTmdJQUlCWW9BZ0FRQ3lFSUlCWkJBRFlDQUNBWEtBSUFFQXNoQ1NBWFFRQTJBZ0FnR0NnQ0FCQUxJUUlnR0VFQU5nSUFJQ0VvQWdBUUN5RUJJQUFnQnpZQUFDQXBJQVkyQUFBZ0tpQUVOZ0FBSUNzZ0F6WUFBQ0FzSUFnMkFBQWdMU0FKTmdBQUlCSWdBallBQUNBUUlBRTJBQUFnQUVGQWEwRUFOZ0lBSUFva0JBOExDeUFGSUFscUlBRWdBaEFPR2lBTUtBSUFFQXNoQnlBTVFRQTJBZ0FnRXlnQ0FCQUxJUVlnRTBFQU5nSUFJQlFvQWdBUUN5RUVJQlJCQURZQ0FDQVZLQUlBRUFzaEF5QVZRUUEyQWdBZ0ZpZ0NBQkFMSVFnZ0ZrRUFOZ0lBSUJjb0FnQVFDeUVKSUJkQkFEWUNBQ0FZS0FJQUVBc2hBaUFZUVFBMkFnQWdJU2dDQUJBTElRRWdBQ0FITmdBQUlDa2dCallBQUNBcUlBUTJBQUFnS3lBRE5nQUFJQ3dnQ0RZQUFDQXRJQWsyQUFBZ0VpQUNOZ0FBSUJBZ0FUWUFBQ0FBUVVCclFRQTJBZ0FnQ2lRRUMvQUVBUWQvSXdRaEF5TUVRVEJxSkFRZ0EwRUFOZ0lBSUFOQkNHb2lCMElBTndBQUlBZENBRGNBQ0NBSFFnQTNBQkFnQjBJQU53QVlJQUVvQWdBaUNDQUNSZ1JBSUFNa0JFRUFEd3NnQ0N3QUFFRUNSd1JBSUFNa0JFRUFEd3NnQVNBSVFRRnFJZ1EyQWdBZ0JDQUNUd1JBSUFNa0JFRUFEd3NnQVNBSVFRSnFJZ1UyQWdBZ0JDd0FBQ0lHUVg5R0JFQWdBeVFFUVFBUEN5QUdRZjhCY1NJRVFZQUJjUVJBSUFaQmdIOUdCRUFnQXlRRVFRQVBDeUFFUWY4QWNTSUpJQUlnQld0TEJFQWdBeVFFUVFBUEN5QUpRWDlxUVFOTElBVXNBQUFpQlVWeUJFQWdBeVFFUVFBUEN5QUZRZjhCY1NFRUlBRWdDRUVEYWlJRk5nSUFJQWxCZjJvaUJnUkFJQWxCQW1vaENRTkFJQVJCQ0hRZ0JTMEFBSEloQkNBQklBVkJBV29pQlRZQ0FDQUdRWDlxSWdZTkFBc2dDQ0FKYWlFR0JTQUZJZ1loQlFzZ0JFR0FBVWtnQkNBQ0lBWnJTM0lFUUNBREpBUkJBQThMQ3lBRVJTQUZJQVJxSUFKTGNnUkFJQU1rQkVFQUR3c0NRQUpBSUFSQkFVc2lBaUFGTEFBQUlnWkZjUVJBSUFVc0FBRkJmMG9FUUNBREpBUkJBQThGUVFBaEFnd0NDd0FGQWtBQ1FDQUNJQVpCZjBaeEJFQWdCU3dBQVVFQVRnMEJJQU1rQkVFQUR3VWdCa0VBU0EwQlFRQWhBZ3NNQVFzZ0EwRUJOZ0lBUVFFaEFpQUZMQUFBSVFZTElBWkIvd0Z4UlEwQkN3d0JDeUFCSUFWQkFXb2lCVFlDQUNBRVFYOXFJUVFMQWtBQ1FDQUVRU0JMQkVBZ0EwRUJOZ0lBREFFRklBSU5BU0FIUVNCcUlBUnJJQVVnQkJBT0dpQUFJQWNnQXhBUUlBTW9BZ0FOQVFzTUFRc2dBRUlBTndJQUlBQkNBRGNDQ0NBQVFnQTNBaEFnQUVJQU53SVlDeUFCSUFFb0FnQWdCR28yQWdBZ0F5UUVRUUVMN0JvQk4zOGpCQ0VNSXdSQndBVnFKQVFnREVIc0Eyb2hEaUFCUWZnQWFpSURLQUlBQkVBZ0RrRUJOZ0o0QlNBT0lBRVFFd3NnREVHZ0FXb2hDQ0FNUWRBQWFpRUxJQXhCS0dvaEdpQU1RWmdEYWlJU0lBNHBBZ0EzQWdBZ0VpQU9LUUlJTndJSUlCSWdEaWtDRURjQ0VDQVNJQTRwQWhnM0FoZ2dFaUFPS1FJZ053SWdJQkpCS0dvaUJ5QU9RU2hxSWdVcEFnQTNBZ0FnQnlBRktRSUlOd0lJSUFjZ0JTa0NFRGNDRUNBSElBVXBBaGczQWhnZ0J5QUZLUUlnTndJZ0lCSkJBRFlDVUNBTVFaQUZhaUlDSUE1QjBBQnFJaGNRQ2lBTVFlZ0VhaUlFSUFJZ0Z4QU1JQXhCeEFKcUlnWWdBU0FDRUF3Z0JrRW9haUlLSUFGQktHb2dCQkFNSUFaQjBBQnFJaHNnQXlnQ0FEWUNBQ0FNUWNnQmFpSUpJQVlwQWdBM0FnQWdDU0FHS1FJSU53SUlJQWtnQmlrQ0VEY0NFQ0FKSUFZcEFoZzNBaGdnQ1NBR0tRSWdOd0lnSUFsQktHb2lFeUFLS1FJQU53SUFJQk1nQ2lrQ0NEY0NDQ0FUSUFvcEFoQTNBaEFnRXlBS0tRSVlOd0lZSUJNZ0Npa0NJRGNDSUNBSlFkQUFhaUlVSUFGQjBBQnFJZ0VwQWdBM0FnQWdGQ0FCS1FJSU53SUlJQlFnQVNrQ0VEY0NFQ0FVSUFFcEFoZzNBaGdnRkNBQktRSWdOd0lnSUFsQitBQnFJaHhCQURZQ0FDQUpRU3hxSVIwZ0NVRXdhaUVlSUFsQk5Hb2hIeUFKUVRocUlTQWdDVUU4YWlFaElBbEJRR3NoSWlBSlFjUUFhaUVqSUFsQnlBQnFJU1FnQ1VITUFHb2hKU0FNUWZnQWFpSU5RUVJxSVNZZ0RVRUlhaUVZSUExQkRHb2hHU0FOUVJCcUlSRWdEVUVVYWlFVklBMUJHR29oRmlBTlFSeHFJUThnRFVFZ2FpRVFJQTFCSkdvaEIwRUFJUUVEUUNBVEVCY2dBQ0FCUVFaMGFpQWRLQUlBSWdWQkduUWdFeWdDQUhJMkFpQWdBQ0FCUVFaMGFpQWVLQUlBSWdOQkZIUWdCVUVHZG5JMkFpUWdBQ0FCUVFaMGFpQWZLQUlBSWdWQkRuUWdBMEVNZG5JMkFpZ2dBQ0FCUVFaMGFpQWdLQUlBSWdOQkNIUWdCVUVTZG5JMkFpd2dBQ0FCUVFaMGFpQWhLQUlBUVFKMElBTkJHSFp5SUNJb0FnQWlBMEVjZEhJMkFqQWdBQ0FCUVFaMGFpQWpLQUlBSWdWQkZuUWdBMEVFZG5JMkFqUWdBQ0FCUVFaMGFpQWtLQUlBSWdOQkVIUWdCVUVLZG5JMkFqZ2dBQ0FCUVFaMGFpQWxLQUlBUVFwMElBTkJFSFp5TmdJOElBa2dDU0FTSUEwUUZpQU5FQmNnQUNBQlFRWjBhaUFtS0FJQUlnVkJHblFnRFNnQ0FISTJBZ0FnQUNBQlFRWjBhaUFZS0FJQUlnTkJGSFFnQlVFR2RuSTJBZ1FnQUNBQlFRWjBhaUFaS0FJQUlnVkJEblFnQTBFTWRuSTJBZ2dnQUNBQlFRWjBhaUFSS0FJQUlnTkJDSFFnQlVFU2RuSTJBZ3dnQUNBQlFRWjBhaUFWS0FJQVFRSjBJQU5CR0haeUlCWW9BZ0FpQTBFY2RISTJBaEFnQUNBQlFRWjBhaUFQS0FJQUlnVkJGblFnQTBFRWRuSTJBaFFnQUNBQlFRWjBhaUFRS0FJQUlnTkJFSFFnQlVFS2RuSTJBaGdnQUNBQlFRWjBhaUFIS0FJQVFRcDBJQU5CRUhaeU5nSWNJQUZCQVdvaUFVSC9QMGNOQUFzZ0NDQVVJQmNRRENBQ0lBZ3BBZ0EzQWdBZ0FpQUlLUUlJTndJSUlBSWdDQ2tDRURjQ0VDQUNJQWdwQWhnM0FoZ2dBaUFJS1FJZ053SWdJQUlRRnlBQ0tBSUlJUThnQWlnQ0RDRVFJQUlvQWhBaEJ5QUNLQUlVSVFVZ0FpZ0NHQ0VZSUFJb0Fod2hBeUFDS0FJZ0lSa2dBaWdDSkNFUklBUWdBaWdDQkNJQlFScDBJQUlvQWdCeVFmLy8vLzhEY1RZQ0FDQUVRUVJxSWhVZ0QwRVdkRUdBZ0lEK0EzRWdBVUVFZG5JMkFnQWdCRUVJYWlJV0lCQkJFblJCZ0lEdy93TnhJQTlCQ0haeU5nSUFJQVJCREdvaUR5QUhRUTUwUVlDQS8vOERjU0FRUVF4MmNqWUNBQ0FFUVJCcUloQWdCVUVLZEVHQStQLy9BM0VnQjBFUWRuSTJBZ0FnQkVFVWFpSUhJQmhCQm5SQndQLy8vd054SUFWQkZIWnlOZ0lBSUFSQkdHb2lCU0FEUVFKMElCaEJHSFp5SUJsQkhIUnlRZi8vLy84RGNUWUNBQ0FFUVJ4cUlnTWdFVUVZZEVHQWdJRDRBM0VnR1VFQ2RuSTJBZ0FnQkVFZ2FpSUJJQkZCQm5ZMkFnQWdCRUdFQ1JBbUlCVW9BZ0FoRlNBV0tBSUFJUllnRHlnQ0FDRVBJQkFvQWdBaEVDQUhLQUlBSVFjZ0JTZ0NBQ0VSSUFNb0FnQWhCU0FCS0FJQUlRTWdDQ0FFS0FJQUlnRkIvLy8vSDNFMkFnQWdDQ0FWUVFSMFFmRC8veDl4SUFGQkduWnlOZ0lFSUFnZ0ZrRUlkRUdBL3Y4ZmNTQVZRUloyY2pZQ0NDQUlJQTlCREhSQmdPRC9IM0VnRmtFU2RuSTJBZ3dnQ0NBUVFSQjBRWUNBL0I5eElBOUJEblp5TmdJUUlBZ2dCMEVVZEVHQWdNQWZjU0FRUVFwMmNqWUNGQ0FJSUJGQkdIUkJnSUNBR0hFZ0IwRUdkbkkyQWhnZ0NDQVJRUUoyUWYvLy94OXhOZ0ljSUFnZ0JVRUNkRUg4Ly84ZmNTQVJRUngyY2pZQ0lDQUlJQU5CQm5RZ0JVRVlkbkkyQWlRZ0FpQUlFQW9nQkNBQ0lBZ1FEQ0FHSUFrZ0FoQU1JQW9nRXlBRUVBd2dHeUFjS0FJQU5nSUFJQUlnQmlrQ0FEY0NBQ0FDSUFZcEFnZzNBZ2dnQWlBR0tRSVFOd0lRSUFJZ0Jpa0NHRGNDR0NBQ0lBWXBBaUEzQWlBZ0FoQVBJQVFnQ2lrQ0FEY0NBQ0FFSUFvcEFnZzNBZ2dnQkNBS0tRSVFOd0lRSUFRZ0Npa0NHRGNDR0NBRUlBb3BBaUEzQWlBZ0JCQVBJQUJCd1A4ZmFpQUNLQUlFSWdOQkduUWdBaWdDQUhJMkFnQWdBRUhFL3g5cUlBSW9BZ2dpQVVFVWRDQURRUVoyY2pZQ0FDQUFRY2ovSDJvZ0FpZ0NEQ0lEUVE1MElBRkJESFp5TmdJQUlBQkJ6UDhmYWlBQ0tBSVFJZ0ZCQ0hRZ0EwRVNkbkkyQWdBZ0FFSFEveDlxSUFJb0FoUkJBblFnQVVFWWRuSWdBaWdDR0NJQlFSeDBjallDQUNBQVFkVC9IMm9nQWlnQ0hDSURRUlowSUFGQkJIWnlOZ0lBSUFCQjJQOGZhaUFDS0FJZ0lnRkJFSFFnQTBFS2RuSTJBZ0FnQUVIYy94OXFJQUlvQWlSQkNuUWdBVUVRZG5JMkFnQWdBRUhnL3g5cUlBUW9BZ1FpQTBFYWRDQUVLQUlBY2pZQ0FDQUFRZVQvSDJvZ0JDZ0NDQ0lCUVJSMElBTkJCblp5TmdJQUlBQkI2UDhmYWlBRUtBSU1JZ05CRG5RZ0FVRU1kbkkyQWdBZ0FFSHMveDlxSUFRb0FoQWlBVUVJZENBRFFSSjJjallDQUNBQVFmRC9IMm9nQkNnQ0ZFRUNkQ0FCUVJoMmNpQUVLQUlZSWdGQkhIUnlOZ0lBSUFCQjlQOGZhaUFFS0FJY0lnTkJGblFnQVVFRWRuSTJBZ0FnQUVINC94OXFJQVFvQWlBaUFVRVFkQ0FEUVFwMmNqWUNBQ0FBUWZ6L0gyb2dCQ2dDSkVFS2RDQUJRUkIyY2pZQ0FDQVhJQWdnRkJBTUlBc2dGeEFLSUFzZ0N5QU9FQXdnQmtFRWFpRW5JQVpCQ0dvaEtDQUdRUXhxSVNrZ0JrRVFhaUVxSUFaQkZHb2hLeUFHUVJocUlTd2dCa0VjYWlFdElBWkJJR29oTGlBR1FTUnFJUzhnQ3lnQ0FDRXdJQXNvQWdRaE1TQUxLQUlJSVRJZ0N5Z0NEQ0V6SUFzb0FoQWhOQ0FMS0FJVUlUVWdDeWdDR0NFMklBc29BaHdoTnlBTEtBSWdJVGdnQ3lnQ0pDRUpJQUpCQkdvaEN5QUNRUWhxSVEwZ0FrRU1haUVPSUFKQkVHb2hFaUFDUVJScUlSTWdBa0VZYWlFVUlBSkJIR29oRnlBQ1FTQnFJUnNnQWtFa2FpRWNJQVJCQkdvaEhTQUVRUWhxSVI0Z0JFRU1haUVmSUFSQkVHb2hJQ0FFUVJScUlTRWdCRUVZYWlFaUlBUkJIR29oSXlBRVFTQnFJU1FnQkVFa2FpRWxRZjgvSVFFRFFDQUdJQUFnQVVGL2FpSURRUVowYWlJbUVDSWdDQ0FJSUFZUURDQWFJQWdRQ2lBTUlCb2dDQkFNSUFZZ0JpQWFFQXhCL1AzLy93QWdKeWdDQUdzaEdFSDgvLy8vQUNBb0tBSUFheUVaUWZ6Ly8vOEFJQ2tvQWdCcklSRkIvUC8vL3dBZ0tpZ0NBR3NoRlVIOC8vLy9BQ0FyS0FJQWF5RVdRZnovLy84QUlDd29BZ0JySVE5Qi9QLy8vd0FnTFNnQ0FHc2hFRUg4Ly8vL0FDQXVLQUlBYXlFSFFmei8vd2NnTHlnQ0FHc2hCU0FHUWJ6aC8vOEFJQVlvQWdCcklEQnFOZ0lBSUNjZ0dDQXhhallDQUNBb0lCa2dNbW8yQWdBZ0tTQVJJRE5xTmdJQUlDb2dGU0EwYWpZQ0FDQXJJQllnTldvMkFnQWdMQ0FQSURacU5nSUFJQzBnRUNBM2FqWUNBQ0F1SUFjZ09HbzJBZ0FnTHlBRklBbHFOZ0lBSUFvZ0NpQU1FQXdnQWlBR0tRSUFOd0lBSUFJZ0Jpa0NDRGNDQ0NBQ0lBWXBBaEEzQWhBZ0FpQUdLUUlZTndJWUlBSWdCaWtDSURjQ0lDQUNFQThnQkNBS0tRSUFOd0lBSUFRZ0Npa0NDRGNDQ0NBRUlBb3BBaEEzQWhBZ0JDQUtLUUlZTndJWUlBUWdDaWtDSURjQ0lDQUVFQThnSmlBTEtBSUFJZ2RCR25RZ0FpZ0NBSEkyQWdBZ0FDQURRUVowYWlBTktBSUFJZ1ZCRkhRZ0IwRUdkbkkyQWdRZ0FDQURRUVowYWlBT0tBSUFJZ2RCRG5RZ0JVRU1kbkkyQWdnZ0FDQURRUVowYWlBU0tBSUFJZ1ZCQ0hRZ0IwRVNkbkkyQWd3Z0FDQURRUVowYWlBVEtBSUFRUUowSUFWQkdIWnlJQlFvQWdBaUJVRWNkSEkyQWhBZ0FDQURRUVowYWlBWEtBSUFJZ2RCRm5RZ0JVRUVkbkkyQWhRZ0FDQURRUVowYWlBYktBSUFJZ1ZCRUhRZ0IwRUtkbkkyQWhnZ0FDQURRUVowYWlBY0tBSUFRUXAwSUFWQkVIWnlOZ0ljSUFBZ0EwRUdkR29nSFNnQ0FDSUhRUnAwSUFRb0FnQnlOZ0lnSUFBZ0EwRUdkR29nSGlnQ0FDSUZRUlIwSUFkQkJuWnlOZ0lrSUFBZ0EwRUdkR29nSHlnQ0FDSUhRUTUwSUFWQkRIWnlOZ0lvSUFBZ0EwRUdkR29nSUNnQ0FDSUZRUWgwSUFkQkVuWnlOZ0lzSUFBZ0EwRUdkR29nSVNnQ0FFRUNkQ0FGUVJoMmNpQWlLQUlBSWdWQkhIUnlOZ0l3SUFBZ0EwRUdkR29nSXlnQ0FDSUhRUlowSUFWQkJIWnlOZ0kwSUFBZ0EwRUdkR29nSkNnQ0FDSUZRUkIwSUFkQkNuWnlOZ0k0SUFBZ0EwRUdkR29nSlNnQ0FFRUtkQ0FGUVJCMmNqWUNQQ0FCUVFGS0JFQWdBeUVCREFFTEN5QU1KQVFMM2dRQkczOGdBaWdDQUNJRklBQkJJR29pQ3lnQ0FDSUdRUjkxSWdOeElBQW9BZ0JxSUFGQkgzVWlBWE1nQVdzaEJDQUNLQUlFSWdjZ0EzRWdBRUVFYWlJTUtBSUFhaUFCY3lBQmF5QUVRUjUxYWlJSVFSNTFJQUlvQWdnaUNTQURjU0FBUVFocUlnMG9BZ0JxSUFGeklBRnJhaUlLUVI1MUlBSW9BZ3dpRGlBRGNTQUFRUXhxSWc4b0FnQnFJQUZ6SUFGcmFpSVFRUjUxSUFJb0FoQWlFU0FEY1NBQVFSQnFJaElvQWdCcUlBRnpJQUZyYWlJVFFSNTFJQUlvQWhRaUZDQURjU0FBUVJScUloVW9BZ0JxSUFGeklBRnJhaUlXUVI1MUlBSW9BaGdpRnlBRGNTQUFRUmhxSWhnb0FnQnFJQUZ6SUFGcmFpSVpRUjUxSUFJb0Fod2lHaUFEY1NBQVFSeHFJaHNvQWdCcUlBRnpJQUZyYWlJY1FSNTFJQUlvQWlBaUhTQURjU0FHYWlBQmN5QUJhMm9pQmtFZmRTSUJJQVZ4SUFSQi8vLy8vd054YWlFQ0lBRWdHbkVnSEVILy8vLy9BM0ZxSUFFZ0YzRWdHVUgvLy8vL0EzRnFJQUVnRkhFZ0ZrSC8vLy8vQTNGcUlBRWdFWEVnRTBILy8vLy9BM0ZxSUFFZ0RuRWdFRUgvLy8vL0EzRnFJQUVnQ1hFZ0NrSC8vLy8vQTNGcUlBRWdCM0VnQ0VILy8vLy9BM0ZxSUFKQkhuVnFJZ1JCSG5WcUlnVkJIblZxSWdkQkhuVnFJZ2hCSG5WcUlnbEJIblZxSWdwQkhuVnFJUU1nQUNBQ1FmLy8vLzhEY1RZQ0FDQU1JQVJCLy8vLy93TnhOZ0lBSUEwZ0JVSC8vLy8vQTNFMkFnQWdEeUFIUWYvLy8vOERjVFlDQUNBU0lBaEIvLy8vL3dOeE5nSUFJQlVnQ1VILy8vLy9BM0UyQWdBZ0dDQUtRZi8vLy84RGNUWUNBQ0FiSUFOQi8vLy8vd054TmdJQUlBc2dBU0FkY1NBR2FpQURRUjUxYWpZQ0FBdUZDQUlJZnd4K0lBRkJJR29pQmlnQ0FFRWZkU0lFSUFJb0FnUWlCWEVnQUVFZ2FpSUhLQUlBUVI5MUlnZ2dBaWdDQUNJSmNXb2lDaUFES0FJa0lnc2dBU2dDQUt3aURpQUZyQ0lUZmlBQUtBSUFyQ0lVSUFtc0loVitmQ0lNcDJ3Z0NtcEIvLy8vL3dOeGE2d2hFaUFFSUFJb0Fnd2lCSEVnQ0NBQ0tBSUlJZ0p4YWlJRklBc2dEaUFFckNJV2ZpQVVJQUtzSWhSK2ZDSU5wMndnQldwQi8vLy8vd054YTZ3aERpQUFJQUJCQkdvaUFpZ0NBS3dpRHlBVmZpQVNJQU1vQWdDc0loQitJQXg4UWg2SGZDQUJRUVJxSWdRb0FnQ3NJZ3dnRTM1OElBTW9BZ1NzSWhFZ0VuNThJaGVuUWYvLy8vOERjVFlDQUNBQklBOGdGSDRnRGlBUWZpQU5mRUllaDN3Z0RDQVdmbndnRVNBT2Zud2lES2RCLy8vLy93TnhOZ0lBSUFJZ0FFRUlhaUlDS0FJQXJDSU5JQlYrSUJkQ0hvZDhJQUZCQ0dvaUJTZ0NBS3dpRHlBVGZud2dBeWdDQ0t3aUVDQVNmbndpRWFkQi8vLy8vd054TmdJQUlBUWdEU0FVZmlBTVFoNkhmQ0FQSUJaK2ZDQVFJQTUrZkNJTXAwSC8vLy8vQTNFMkFnQWdBaUFBUVF4cUlnSW9BZ0NzSWcwZ0ZYNGdFVUllaDN3Z0FVRU1haUlFS0FJQXJDSVBJQk4rZkNBREtBSU1yQ0lRSUJKK2ZDSVJwMEgvLy8vL0EzRTJBZ0FnQlNBTklCUitJQXhDSG9kOElBOGdGbjU4SUJBZ0RuNThJZ3luUWYvLy8vOERjVFlDQUNBQ0lBQkJFR29pQWlnQ0FLd2lEU0FWZmlBUlFoNkhmQ0FCUVJCcUlnVW9BZ0NzSWc4Z0UzNThJQU1vQWhDc0loQWdFbjU4SWhHblFmLy8vLzhEY1RZQ0FDQUVJQTBnRkg0Z0RFSWVoM3dnRHlBV2Zud2dFQ0FPZm53aURLZEIvLy8vL3dOeE5nSUFJQUlnQUVFVWFpSUNLQUlBckNJTklCVitJQkZDSG9kOElBRkJGR29pQkNnQ0FLd2lEeUFUZm53Z0F5Z0NGS3dpRUNBU2Zud2lFYWRCLy8vLy93TnhOZ0lBSUFVZ0RTQVVmaUFNUWg2SGZDQVBJQlorZkNBUUlBNStmQ0lNcDBILy8vLy9BM0UyQWdBZ0FpQUFRUmhxSWdJb0FnQ3NJZzBnRlg0Z0VVSWVoM3dnQVVFWWFpSUZLQUlBckNJUElCTitmQ0FES0FJWXJDSVFJQkorZkNJUnAwSC8vLy8vQTNFMkFnQWdCQ0FOSUJSK0lBeENIb2Q4SUE4Z0ZuNThJQkFnRG41OElneW5RZi8vLy84RGNUWUNBQ0FDSUFCQkhHb2lBQ2dDQUt3aURTQVZmaUFSUWg2SGZDQUJRUnhxSWdFb0FnQ3NJZzhnRTM1OElBTW9BaHlzSWhBZ0VuNThJaEduUWYvLy8vOERjVFlDQUNBRklBMGdGSDRnREVJZWgzd2dEeUFXZm53Z0VDQU9mbndpREtkQi8vLy8vd054TmdJQUlBQWdCeWdDQUt3aURTQVZmaUFSUWg2SGZDQUdLQUlBckNJVklCTitmQ0FES0FJZ3JDSVRJQkorZkNJU3AwSC8vLy8vQTNFMkFnQWdBU0FOSUJSK0lBeENIb2Q4SUJVZ0ZuNThJQk1nRG41OElnNm5RZi8vLy84RGNUWUNBQ0FISUJKQ0hvZytBZ0FnQmlBT1FoNklQZ0lBQytZQkFRTi9JQUJCNEFCcUlnTW9BZ0FpQkVFL2NTRUZJQU1nQkNBQ2FqWUNBRUhBQUNBRmF5SUVJQUpOQkVBZ0FFRWdhaUlESUFWcUlBRWdCQkFPR2lBQklBUnFJUUVnQUNBREVBMGdBaUFFYXlJQ1FjQUFTUVJBUVFBaEJRVURRQ0FESUFFcEFBQTNBQUFnQXlBQktRQUlOd0FJSUFNZ0FTa0FFRGNBRUNBRElBRXBBQmczQUJnZ0F5QUJLUUFnTndBZ0lBTWdBU2tBS0RjQUtDQURJQUVwQURBM0FEQWdBeUFCS1FBNE53QTRJQUZCUUdzaEFTQUFJQU1RRFNBQ1FVQnFJZ0pCd0FCUERRQkJBQ0VGQ3dzTElBSkZCRUFQQ3lBQVFTQnFJQVZxSUFFZ0FoQU9HZ3ZyQmdFT2Z5TUVJUWNqQkVHZ0FXb2tCQ0FBSUFFb0FuZ2lBellDVUNBREJFQWdCeVFFRHdzZ0IwSDRBR29pQWlBQlFkQUFhaUlGS1FJQU53SUFJQUlnQlNrQ0NEY0NDQ0FDSUFVcEFoQTNBaEFnQWlBRktRSVlOd0lZSUFJZ0JTa0NJRGNDSUNBQ0VCY2dBaWdDQ0NFSUlBSW9BZ3doQ1NBQ0tBSVFJUW9nQWlnQ0ZDRUxJQUlvQWhnaER5QUNLQUljSVEwZ0FpZ0NJQ0VHSUFJb0FpUWhEQ0FIUWRBQWFpSUVJQUlvQWdRaUEwRWFkQ0FDS0FJQWNrSC8vLy8vQTNFMkFnQWdCRUVFYWlJT0lBaEJGblJCZ0lDQS9nTnhJQU5CQkhaeU5nSUFJQVJCQ0dvaUFpQUpRUkowUVlDQThQOERjU0FJUVFoMmNqWUNBQ0FFUVF4cUlnZ2dDa0VPZEVHQWdQLy9BM0VnQ1VFTWRuSTJBZ0FnQkVFUWFpSUpJQXRCQ25SQmdQai8vd054SUFwQkVIWnlOZ0lBSUFSQkZHb2lDaUFQUVFaMFFjRC8vLzhEY1NBTFFSUjJjallDQUNBRVFSaHFJZ3NnRFVFQ2RDQVBRUmgyY2lBR1FSeDBja0gvLy8vL0EzRTJBZ0FnQkVFY2FpSU5JQXhCR0hSQmdJQ0ErQU54SUFaQkFuWnlOZ0lBSUFSQklHb2lBeUFNUVFaMk5nSUFJQVJCaEFrUUppQU9LQUlBSVE0Z0FpZ0NBQ0VDSUFnb0FnQWhDQ0FKS0FJQUlRa2dDaWdDQUNFS0lBc29BZ0FoRENBTktBSUFJUXNnQXlnQ0FDRU5JQVVnQkNnQ0FDSURRZi8vL3g5eE5nSUFJQUZCMUFCcUlnWWdEa0VFZEVIdy8vOGZjU0FEUVJwMmNqWUNBQ0FCSUFKQkNIUkJnUDcvSDNFZ0RrRVdkbkkyQWxnZ0FTQUlRUXgwUVlEZy94OXhJQUpCRW5aeU5nSmNJQUVnQ1VFUWRFR0FnUHdmY1NBSVFRNTJjallDWUNBQklBcEJGSFJCZ0lEQUgzRWdDVUVLZG5JMkFtUWdBU0FNUVJoMFFZQ0FnQmh4SUFwQkJuWnlOZ0pvSUFFZ0RFRUNka0gvLy84ZmNUWUNiQ0FCSUF0QkFuUkIvUC8vSDNFZ0RFRWNkbkkyQW5BZ0FTQU5RUVowSUF0QkdIWnlOZ0owSUFkQktHb2lBeUFGRUFvZ0J5QUZJQU1RRENBQklBRWdBeEFNSUFGQktHb2lBeUFESUFjUURDQUZRUUUyQWdBZ0JrSUFOd0lBSUFaQ0FEY0NDQ0FHUWdBM0FoQWdCa0lBTndJWUlBWkJBRFlDSUNBQUlBRXBBZ0EzQWdBZ0FDQUJLUUlJTndJSUlBQWdBU2tDRURjQ0VDQUFJQUVwQWhnM0FoZ2dBQ0FCS1FJZ053SWdJQUJCS0dvaUFDQURLUUlBTndJQUlBQWdBeWtDQ0RjQ0NDQUFJQU1wQWhBM0FoQWdBQ0FES1FJWU53SVlJQUFnQXlrQ0lEY0NJQ0FISkFRTHJ3a0JEWDhqQkNFRkl3UkJrQUZxSkFRZ0JVR0lBV29oQ0NBRlFlZ0FhaUVHSUFWQmtmU3k1M2syQWdBZ0JVRUVhaUlMUVlHbnlad0NOZ0lBSUFWQkNHb2lDa0dTb3A2TEFUWUNBQ0FGUVF4cUlneEJqL3lKaTMwMkFnQWdCVUVRYWlJTlFkRHFvYjU1TmdJQUlBVkJGR29pRGtIbGp2TUJOZ0lBSUFWQkdHb2lEMEhrb3RpSGVUWUNBQ0FGUVJ4cUloQkI2dXltbndNMkFnQWdCVUVnYWlJRUlBRXBBQUEzQUFBZ0JDQUJLUUFJTndBSUlBUWdBU2tBRURjQUVDQUVJQUVwQUJnM0FCZ2dCVUhnQUdvaUIwR0FBVFlDQUNBRlFVQnJJZ0VnQXlrQUFEY0FBQ0FCSUFNcEFBZzNBQWdnQVNBREtRQVFOd0FRSUFFZ0F5a0FHRGNBR0NBRklBUVFEU0FIS0FJQUlnRkJQM0VoQXlBSElBRkJJR28yQWdBQ1FBSkFRY0FBSUFOcklnbEJJRXNFUUNBQ0lRRkJJQ0VDREFFRklBUWdBMm9nQWlBSkVBNGFJQUlnQ1dvaEFTQUZJQVFRRFVFZ0lBbHJJZ0pCd0FCUEJFQURRQ0FFSUFFcEFBQTNBQUFnQkNBQktRQUlOd0FJSUFRZ0FTa0FFRGNBRUNBRUlBRXBBQmczQUJnZ0JDQUJLUUFnTndBZ0lBUWdBU2tBS0RjQUtDQUVJQUVwQURBM0FEQWdCQ0FCS1FBNE53QTRJQUZCUUdzaEFTQUZJQVFRRFNBQ1FVQnFJZ0pCd0FCUERRQUxDeUFDQkVCQkFDRUREQUlMQ3d3QkN5QUVJQU5xSUFFZ0FoQU9HZ3NnQ0NBSEtBSUFJZ0ZCSFhaQkdIUTJBZ0FnQ0NBQlFRdDBRWUNBL0FkeElBRkJHM1J5SUFGQkJYWkJnUDREY1hJZ0FVRVZka0gvQVhGeU5nSUVJQWNnQVVFM0lBRnJRVDl4UVFGcUlnSnFOZ0lBQWtBQ1FDQUNRY0FBSUFGQlAzRWlBV3NpQTBrRVFFR3BFeUVEREFFRklBUWdBV3BCcVJNZ0F4QU9HaUFEUWFrVGFpRUJJQVVnQkJBTklBSWdBMnNpQWtIQUFFOEVRQU5BSUFRZ0FTa0FBRGNBQUNBRUlBRXBBQWczQUFnZ0JDQUJLUUFRTndBUUlBUWdBU2tBR0RjQUdDQUVJQUVwQUNBM0FDQWdCQ0FCS1FBb053QW9JQVFnQVNrQU1EY0FNQ0FFSUFFcEFEZzNBRGdnQVVGQWF5RUJJQVVnQkJBTklBSkJRR29pQWtIQUFFOE5BQXNMSUFJRVFDQUJJUU5CQUNFQkRBSUxDd3dCQ3lBRUlBRnFJQU1nQWhBT0dnc2dCeWdDQUNJQlFUOXhJUU1nQnlBQlFRaHFOZ0lBQWtBQ1FFSEFBQ0FEYXlJQ1FRaExCRUFnQ0NFQlFRZ2hBZ3dCQlNBRUlBTnFJQWdnQWhBT0dpQUlJQUpxSVFFZ0JTQUVFQTFCQ0NBQ2F5SUNRY0FBVHdSQUEwQWdCQ0FCS1FBQU53QUFJQVFnQVNrQUNEY0FDQ0FFSUFFcEFCQTNBQkFnQkNBQktRQVlOd0FZSUFRZ0FTa0FJRGNBSUNBRUlBRXBBQ2czQUNnZ0JDQUJLUUF3TndBd0lBUWdBU2tBT0RjQU9DQUJRVUJySVFFZ0JTQUVFQTBnQWtGQWFpSUNRY0FBVHcwQUN3c2dBZ1JBUVFBaEF3d0NDd3NNQVFzZ0JDQURhaUFCSUFJUURob0xJQVVvQWdBUUN5RUVJQVZCQURZQ0FDQUxLQUlBRUFzaEJ5QUxRUUEyQWdBZ0NpZ0NBQkFMSVFrZ0NrRUFOZ0lBSUF3b0FnQVFDeUVLSUF4QkFEWUNBQ0FOS0FJQUVBc2hDQ0FOUVFBMkFnQWdEaWdDQUJBTElRTWdEa0VBTmdJQUlBOG9BZ0FRQ3lFQ0lBOUJBRFlDQUNBUUtBSUFFQXNoQVNBR0lBUTJBZ0FnQmlBSE5nSUVJQVlnQ1RZQ0NDQUdJQW8yQWd3Z0JpQUlOZ0lRSUFZZ0F6WUNGQ0FHSUFJMkFoZ2dCaUFCTmdJY0lBQWdCa0VBRUJBZ0JTUUVDOGtOQWh0L0FuNGpCQ0VISXdSQm9BTnFKQVFnQjBHNEFtb2lBa0lBTndBQUlBSkNBRGNBQ0NBQ1FnQTNBQkFnQWtJQU53QVlJQUpDQURjQUlDQUNRZ0EzQUNnZ0FrSUFOd0F3SUFKQ0FEY0FPQ0FCUlFSQUlBQkJBRFlDbkFFZ0FFRWthaUlEUWJBSUtRSUFOd0lBSUFOQnVBZ3BBZ0EzQWdnZ0EwSEFDQ2tDQURjQ0VDQURRY2dJS1FJQU53SVlJQU5CMEFncEFnQTNBaUFnQUVFQk5nSjBJQUJCK0FCcUlnTkNBRGNDQUNBRFFnQTNBZ2dnQTBJQU53SVFJQU5DQURjQ0dDQURRUUEyQWlBZ0FFR0V1THpuQURZQ1RDQUFRZjYxci9BQU5nSlFJQUJCdU16NTlRQTJBbFFnQUVIbnkvWDJBRFlDV0NBQVFjalFpL2dBTmdKY0lBQkIwdnZ1NHdBMkFtQWdBRUc4Z01IdEFEWUNaQ0FBUVliVnVlY0FOZ0pvSUFCQjJiS2o3QUEyQW13Z0FFSEc0cmNITmdKd0lBQkJBVFlDQkNBQVFRaHFJZ05DQURjQ0FDQURRZ0EzQWdnZ0EwSUFOd0lRSUFOQkFEWUNHQXNnQjBINEFtb2lCU0FBUVFScUloSVFIQ0FDSUFVcEFBQTNBQUFnQWlBRktRQUlOd0FJSUFJZ0JTa0FFRGNBRUNBQ0lBVXBBQmczQUJnZ0FVRUFSeUlHQkVBZ0FrRWdhaUlESUFFcEFBQTNBQUFnQXlBQktRQUlOd0FJSUFNZ0FTa0FFRGNBRUNBRElBRXBBQmczQUJnTElBZEJrQUpxSVFnZ0IwSHdBV29oQXlBSFFmQUFhaUVFSUFkQnlBQnFJUUVnQnlBQ0lBWUVmMEhBQUFWQklBc1FOeUFDUWdBM0FBQWdBa0lBTndBSUlBSkNBRGNBRUNBQ1FnQTNBQmdnQWtJQU53QWdJQUpDQURjQUtDQUNRZ0EzQURBZ0FrSUFOd0E0SUFjZ0JSQXJJQUVnQlJBYlJTQUJRUVJxSWdZb0FnQWlDU0FCS0FJQUlncHlJQUZCQ0dvaUN5Z0NBQ0lNY2lBQlFReHFJZzBvQWdBaURuSWdBVUVRYWlJUEtBSUFJaEJ5SUFGQkZHb2lFU2dDQUNJVGNpQUJRUmhxSWhRb0FnQWlGWElnQVVFY2FpSVdLQUlBSWhkeUlBRkJJR29pR0NnQ0FDSVpjaUFCUVNScUlob29BZ0FpRzNKRmNpSUNJUndnQVNBQ0JIOUJBQVVnQ2dzZ0hISTJBZ0FnQmlBQ0JIOUJBQVVnQ1FzMkFnQWdDeUFDQkg5QkFBVWdEQXMyQWdBZ0RTQUNCSDlCQUFVZ0RnczJBZ0FnRHlBQ0JIOUJBQVVnRUFzMkFnQWdFU0FDQkg5QkFBVWdFd3MyQWdBZ0ZDQUNCSDlCQUFVZ0ZRczJBZ0FnRmlBQ0JIOUJBQVVnRndzMkFnQWdHQ0FDQkg5QkFBVWdHUXMyQWdBZ0dpQUNCSDlCQUFVZ0d3czJBZ0FnQ0NBQkVBb2dBRUVrYWlJQ0lBSWdDQkFNSUFCQnpBQnFJZ1lnQmlBSUVBd2dCaUFHSUFFUURDQUFRZlFBYWlJSUlBZ2dBUkFNSUFGQ0FEY0NBQ0FCUWdBM0FnZ2dBVUlBTndJUUlBRkNBRGNDR0NBQlFnQTNBaUFnQnlBRkVDc2dBeUFGUVFBUUVDQURRUVJxSWdnb0FnQWlEaUFES0FJQUlnOXlJQU5CQ0dvaUJpZ0NBQ0lRY2lBRFFReHFJZ2tvQWdBaUVYSWdBMEVRYWlJS0tBSUFJaE55SUFOQkZHb2lDeWdDQUNJVWNpQURRUmhxSWd3b0FnQWlGWElnQTBFY2FpSU5LQUlBSWhaeVJTSUJJUmNnQXlBQkJIOUJBQVVnRHdzZ0YzSTJBZ0FnQ0NBQkJIOUJBQVVnRGdzMkFnQWdCaUFCQkg5QkFBVWdFQXMyQWdBZ0NTQUJCSDlCQUFVZ0VRczJBZ0FnQ2lBQkJIOUJBQVVnRXdzMkFnQWdDeUFCQkg5QkFBVWdGQXMyQWdBZ0RDQUJCSDlCQUFVZ0ZRczJBZ0FnRFNBQkJIOUJBQVVnRmdzMkFnQWdCVUlBTndBQUlBVkNBRGNBQ0NBRlFnQTNBQkFnQlVJQU53QVlJQUFnQkNBREVDa2dBeUFES0FJQUlnQkJmM090UXNLQzJZRU5mQ0lkSUFnb0FnQWlBU0FBY2lBR0tBSUFJZ0J5SUFrb0FnQWlCWElnQ2lnQ0FDSU9jaUFMS0FJQUlnOXlJQXdvQWdBaUVISWdEU2dDQUNJUmNrRUFSMEVmZEVFZmRhMGlIb00rQWdBZ0NDQWRRaUNJUW95OXlmNExoQ0FCUVg5enJYd2lIU0FlZ3o0Q0FDQUdJQUJCZjNPdFFydkFvdm9LZkNBZFFpQ0lmQ0lkSUI2RFBnSUFJQWtnQlVGL2M2MUM1cm03MVF0OElCMUNJSWg4SWgwZ0hvTStBZ0FnQ2lBT1FYOXpyVUwrLy8vL0Qzd2dIVUlnaUh3aUhTQWVnejRDQUNBTElBOUJmM090UXYvLy8vOFBmQ0FkUWlDSWZDSWRJQjZEUGdJQUlBd2dFRUYvYzYxQy8vLy8vdzk4SUIxQ0lJaDhJaDBnSG9NK0FnQWdEU0FSUVg5enJVTC8vLy8vRDN3Z0hVSWdpSHdnSG9NK0FnQWdFaUFES1FJQU53SUFJQklnQXlrQ0NEY0NDQ0FTSUFNcEFoQTNBaEFnRWlBREtRSVlOd0lZSUFJZ0JDa0NBRGNDQUNBQ0lBUXBBZ2czQWdnZ0FpQUVLUUlRTndJUUlBSWdCQ2tDR0RjQ0dDQUNJQVFwQWlBM0FpQWdBaUFFS1FJb053SW9JQUlnQkNrQ01EY0NNQ0FDSUFRcEFqZzNBamdnQWtGQWF5QUVRVUJyS1FJQU53SUFJQUlnQkNrQ1NEY0NTQ0FDSUFRcEFsQTNBbEFnQWlBRUtRSllOd0pZSUFJZ0JDa0NZRGNDWUNBQ0lBUXBBbWczQW1nZ0FpQUVLUUp3TndKd0lBSWdCQ2dDZURZQ2VDQUhKQVFMbXhrQlczOGpCQ0VOSXdSQndBTnFKQVFnQVVJQU53SUFJQUZDQURjQ0NDQUJRZ0EzQWhBZ0FVSUFOd0lZSUFKQ0FEY0NBQ0FDUWdBM0FnZ2dBa0lBTndJUUlBSkNBRGNDR0NBRFFRQkhJaVlFUUNBRFFRQTJBZ0FMSUExQjJBSnFJUThnRFVHZ0Eyb2hDaUFOUWR3QmFpRU9JQTFCaUFGcUlRc2dEVUhvQUdvaEdTQU5RZUFBYWlFbklBMUJRR3NoRUNBTlFTQnFJUkVnRFNJYVFZQURhaUVnSUFZRWZ5QUdCVUVCQ3lFcElCQWdCU0FQRUJBZ0R5Z0NBQ0FRUVFScUlnWW9BZ0FpRFNBUUtBSUFJaHR5SUJCQkNHb2lIQ2dDQUNJZGNpQVFRUXhxSWg0b0FnQWlFM0lnRUVFUWFpSVVLQUlBSWhWeUlCQkJGR29pRmlnQ0FDSU1jaUFRUVJocUloY29BZ0FpSVhJZ0VFRWNhaUlmS0FJQUlnaHlSWEpGSWhoQkFYTWhDU0FRSUJnRWZ5QWJCVUVBQ3lBSmNqWUNBQ0FHSUJnRWZ5QU5CVUVBQ3pZQ0FDQWNJQmdFZnlBZEJVRUFDellDQUNBZUlCZ0VmeUFUQlVFQUN6WUNBQ0FVSUJnRWZ5QVZCVUVBQ3pZQ0FDQVdJQmdFZnlBTUJVRUFDellDQUNBWElCZ0VmeUFoQlVFQUN6WUNBQ0FmSUJnRWZ5QUlCVUVBQ3pZQ0FDQWFJQVJCQUJBUUFrQWdJQ0FFSUFWQkFDQUhRUUFnS1VFRGNVRUlhaEVCQUFSQUlCRkJCR29oS2lBUlFRaHFJU3NnRVVFTWFpRXNJQkZCRUdvaExTQVJRUlJxSVM0Z0VVRVlhaUV2SUJGQkhHb2hNQ0FBUVFocUlUb2dDMEVvYWlFeElBdEJKR29oT3lBS1FRRnFJVHdnQzBFZ2FpRTlJQXBCQW1vaFBpQUtRUU5xSVQ4Z0NrRUVhaUZBSUFwQkJXb2hRU0FMUVJ4cUlVSWdDa0VHYWlGRElBcEJCMm9oUkNBS1FRaHFJVVVnQzBFWWFpRkdJQXBCQ1dvaFJ5QUtRUXBxSVVnZ0NrRUxhaUZKSUF0QkZHb2hTaUFLUVF4cUlVc2dDa0VOYWlGTUlBcEJEbW9oVFNBTFFSQnFJVTRnQ2tFUGFpRlBJQXBCRUdvaFVDQUtRUkZxSVZFZ0NrRVNhaUZTSUF0QkRHb2hVeUFLUVJOcUlWUWdDa0VVYWlGVklBcEJGV29oVmlBTFFRaHFJVmNnQ2tFV2FpRllJQXBCRjJvaFdTQUtRUmhxSVZvZ0MwRUVhaUZiSUFwQkdXb2hYQ0FLUVJwcUlWMGdDa0ViYWlGZUlBcEJIR29oWHlBS1FSMXFJV0FnQ2tFZWFpRmhJQXBCSDJvaFlpQVBRUVJxSVRJZ0QwRUlhaUV6SUE5QkRHb2hOQ0FQUVJCcUlUVWdEMEVVYWlFMklBOUJHR29oTnlBUFFSeHFJVGdnRDBFZ2FpRTVJQUpCQkdvaEFDQUNRUWhxSVFZZ0FrRU1haUVOSUFKQkVHb2hHeUFDUVJScUlSd2dBa0VZYWlFZElBSkJIR29oSGlBQlFRUnFJUk1nQVVFSWFpRVVJQUZCREdvaEZTQUJRUkJxSVJZZ0FVRVVhaUVNSUFGQkdHb2hGeUFCUVJ4cUlTRkJBQ0VmQTBBZ0VTQWdJQThRRUNBUEtBSUFJQ29vQWdBZ0VTZ0NBSElnS3lnQ0FISWdMQ2dDQUhJZ0xTZ0NBSElnTGlnQ0FISWdMeWdDQUhJZ01DZ0NBSEpGY2tVRVFDQW5RUUEyQWdBZ09pQU9JQkVRS1NBTElBNFFIeUFMRUE4Z01SQVBJQW9nT3lnQ0FDSUpRUTUyT2dBQUlEd2dDVUVHZGpvQUFDQStJRDBvQWdBaUNFRVlka0VEY1NBSlFRSjBjam9BQUNBL0lBaEJFSFk2QUFBZ1FDQUlRUWgyT2dBQUlFRWdDRG9BQUNCRElFSW9BZ0FpQ0VFU2Rqb0FBQ0JFSUFoQkNuWTZBQUFnUlNBSVFRSjJPZ0FBSUVjZ1JpZ0NBQ0lKUVJSMlFUOXhJQWhCQm5SeU9nQUFJRWdnQ1VFTWRqb0FBQ0JKSUFsQkJIWTZBQUFnU3lCS0tBSUFJZ2hCRm5aQkQzRWdDVUVFZEhJNkFBQWdUQ0FJUVE1Mk9nQUFJRTBnQ0VFR2Rqb0FBQ0JQSUU0b0FnQWlDVUVZZGtFRGNTQUlRUUowY2pvQUFDQlFJQWxCRUhZNkFBQWdVU0FKUVFoMk9nQUFJRklnQ1RvQUFDQlVJRk1vQWdBaUNFRVNkam9BQUNCVklBaEJDblk2QUFBZ1ZpQUlRUUoyT2dBQUlGZ2dWeWdDQUNJSlFSUjJRVDl4SUFoQkJuUnlPZ0FBSUZrZ0NVRU1kam9BQUNCYUlBbEJCSFk2QUFBZ1hDQmJLQUlBSWdoQkZuWkJEM0VnQ1VFRWRISTZBQUFnWFNBSVFRNTJPZ0FBSUY0Z0NFRUdkam9BQUNCZklBc29BZ0FpQ1VFWWRrRURjU0FJUVFKMGNqb0FBQ0JnSUFsQkVIWTZBQUFnWVNBSlFRaDJPZ0FBSUdJZ0NUb0FBQ0FCSUFvZ0p4QVFJQ1lFUUNBRElERW9BZ0JCQVhFZ0p5Z0NBRUVCZEhJMkFnQUxJQmtnQVNBUUVCVWdHU0FaSUJvUUdpQXFLQUlBSVFnZ0t5Z0NBQ0VKSUN3b0FnQWhFaUF0S0FJQUlTSWdMaWdDQUNFaklDOG9BZ0FoSkNBd0tBSUFJU1VnRHlBUktBSUFJaWhCLy8vLy93TnhOZ0lBSURJZ0NFRUNkRUg4Ly8vL0EzRWdLRUVlZG5JMkFnQWdNeUFKUVFSMFFmRC8vLzhEY1NBSVFSeDJjallDQUNBMElCSkJCblJCd1AvLy93TnhJQWxCR25aeU5nSUFJRFVnSWtFSWRFR0Evdi8vQTNFZ0VrRVlkbkkyQWdBZ05pQWpRUXAwUVlENC8vOERjU0FpUVJaMmNqWUNBQ0EzSUNSQkRIUkJnT0QvL3dOeElDTkJGSFp5TmdJQUlEZ2dKVUVPZEVHQWdQLy9BM0VnSkVFU2RuSTJBZ0FnT1NBbFFSQjJOZ0lBSUE5QnJBa1FOaUF6S0FJQUlRZ2dOQ2dDQUNFSklEVW9BZ0FoRWlBMktBSUFJU0lnTnlnQ0FDRWpJRGdvQWdBaEpDQTVLQUlBSVNVZ0FpQXlLQUlBSWloQkhuUWdEeWdDQUhJMkFnQWdBQ0FJUVJ4MElDaEJBblp5TmdJQUlBWWdDVUVhZENBSVFRUjJjallDQUNBTklCSkJHSFFnQ1VFR2RuSTJBZ0FnR3lBaVFSWjBJQkpCQ0haeU5nSUFJQndnSTBFVWRDQWlRUXAyY2pZQ0FDQWRJQ1JCRW5RZ0kwRU1kbkkyQWdBZ0hpQWxRUkIwSUNSQkRuWnlOZ0lBSUFJZ0FpQVpFQlVnR1VJQU53SUFJQmxDQURjQ0NDQVpRZ0EzQWhBZ0dVSUFOd0lZSUE1Q0FEY0NBQ0FPUWdBM0FnZ2dEa0lBTndJUUlBNUNBRGNDR0NBT1FnQTNBaUFnRGtJQU53SW9JQTVDQURjQ01DQU9RZ0EzQWpnZ0RrRkFhMElBTndJQUlBNUNBRGNDU0NBT1FnQTNBbEFnRGtJQU53SllJQTVDQURjQ1lDQU9RZ0EzQW1nZ0RrSUFOd0p3SUE1QkFEWUNlQ0FMUWdBM0FnQWdDMElBTndJSUlBdENBRGNDRUNBTFFnQTNBaGdnQzBJQU53SWdJQXRDQURjQ0tDQUxRZ0EzQWpBZ0MwSUFOd0k0SUF0QlFHdENBRGNDQUNBTFFnQTNBa2dnQzBFQU5nSlFJQUlnSFNnQ0FFRi9SeUFlS0FJQUlnbEJIM1lpRWtGL2N5SUljU0FKUWYvLy8vOEhTWElnSENnQ0FFRi9SeUFJY1hJZ0d5Z0NBRUYvUnlBSWNYSWdEU2dDQUNJSlFmUGMzZW9GU1NBSWNYSWlDRUVCY3lBSlFmUGMzZW9GUzNFZ0VuSWlDVUVCY3lBR0tBSUFJaEpCbmFDUnZRVkpjU0FJY2lJSVFRRnpJQkpCbmFDUnZRVkxjU0FKY2lJSlFRRnpJQUFvQWdBaUVrSEczcVQvZlVseElBaHlRWDl6SWdnZ0VrSEczcVQvZlV0eElBbHlJQWdnQWlnQ0FFR2d3ZXpBQmt0eGNpSUlFRkVhSUNZRVFDQURJQU1vQWdBZ0NITTJBZ0FMSUJNb0FnQWdBU2dDQUhJZ0ZDZ0NBSElnRlNnQ0FISWdGaWdDQUhJZ0RDZ0NBSElnRnlnQ0FISWdJU2dDQUhKRklBQW9BZ0FnQWlnQ0FISWdCaWdDQUhJZ0RTZ0NBSElnR3lnQ0FISWdIQ2dDQUhJZ0hTZ0NBSElnSGlnQ0FISkZja1VFUUVFQklSOGdFeUVFSUJRaEJTQVZJUWNnRmlFVElBd2hGQ0FYSVJVZ0lTRVdEQVFMQ3lBZ0lBUWdCVUVBSUFjZ0gwRUJhaUlmSUNsQkEzRkJDR29SQVFBTkFFRUFJUjhnRXlFRUlCUWhCU0FWSVFjZ0ZpRVRJQXdoRkNBWElSVWdJU0VXQ3dWQkFDRWZJQUZCQkdvaEJDQUJRUWhxSVFVZ0FVRU1haUVISUFGQkVHb2hFeUFCUVJScUlSUWdBVUVZYWlFVklBRkJIR29oRmlBQ1FRUnFJUUFnQWtFSWFpRUdJQUpCREdvaERTQUNRUkJxSVJzZ0FrRVVhaUVjSUFKQkdHb2hIU0FDUVJ4cUlSNExDeUFmSUJoeElnd2hGeUFnUWdBM0FBQWdJRUlBTndBSUlDQkNBRGNBRUNBZ1FnQTNBQmdnR2tJQU53SUFJQnBDQURjQ0NDQWFRZ0EzQWhBZ0drSUFOd0lZSUJGQ0FEY0NBQ0FSUWdBM0FnZ2dFVUlBTndJUUlCRkNBRGNDR0NBUVFnQTNBZ0FnRUVJQU53SUlJQkJDQURjQ0VDQVFRZ0EzQWhnZ0FTZ0NBQ0VoSUFFZ0RBUi9JQ0VGUVFBTE5nSUFJQVFvQWdBaEFTQUVJQXdFZnlBQkJVRUFDellDQUNBRktBSUFJUUVnQlNBTUJIOGdBUVZCQUFzMkFnQWdCeWdDQUNFQklBY2dEQVIvSUFFRlFRQUxOZ0lBSUJNb0FnQWhBU0FUSUF3RWZ5QUJCVUVBQ3pZQ0FDQVVLQUlBSVFFZ0ZDQU1CSDhnQVFWQkFBczJBZ0FnRlNnQ0FDRUJJQlVnREFSL0lBRUZRUUFMTmdJQUlCWW9BZ0FoQVNBV0lBd0VmeUFCQlVFQUN6WUNBQ0FDS0FJQUlRRWdBaUFNQkg4Z0FRVkJBQXMyQWdBZ0FDZ0NBQ0VCSUFBZ0RBUi9JQUVGUVFBTE5nSUFJQVlvQWdBaEFDQUdJQXdFZnlBQUJVRUFDellDQUNBTktBSUFJUUFnRFNBTUJIOGdBQVZCQUFzMkFnQWdHeWdDQUNFQUlCc2dEQVIvSUFBRlFRQUxOZ0lBSUJ3b0FnQWhBQ0FjSUF3RWZ5QUFCVUVBQ3pZQ0FDQWRLQUlBSVFBZ0hTQU1CSDhnQUFWQkFBczJBZ0FnSGlnQ0FDRUFJQjRnREFSL0lBQUZRUUFMTmdJQUlDWkZCRUFnR2lRRUlCY1BDeUFQSUJkQkFYTTJBZ0FnQXlBREtBSUFJQThvQWdCQmYycHhOZ0lBSUJva0JDQVhDd1lBUVFRUUFBc0lBRUVERUFCQkFBc0lBRUVCRUFCQkFBdmFBd01CZndGK0FYd0NRQ0FCUVJSTkJFQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFGQkNXc09DZ0FCQWdNRUJRWUhDQWtLQ3lBQ0tBSUFRUU5xUVh4eElnRW9BZ0FoQXlBQ0lBRkJCR28yQWdBZ0FDQUROZ0lBREFzTElBSW9BZ0JCQTJwQmZIRWlBU2dDQUNFRElBSWdBVUVFYWpZQ0FDQUFJQU9zTndNQURBb0xJQUlvQWdCQkEycEJmSEVpQVNnQ0FDRURJQUlnQVVFRWFqWUNBQ0FBSUFPdE53TUFEQWtMSUFJb0FnQkJCMnBCZUhFaUFTa0RBQ0VFSUFJZ0FVRUlhallDQUNBQUlBUTNBd0FNQ0FzZ0FpZ0NBRUVEYWtGOGNTSUJLQUlBSVFNZ0FpQUJRUVJxTmdJQUlBQWdBMEgvL3dOeFFSQjBRUkIxckRjREFBd0hDeUFDS0FJQVFRTnFRWHh4SWdFb0FnQWhBeUFDSUFGQkJHbzJBZ0FnQUNBRFFmLy9BM0d0TndNQURBWUxJQUlvQWdCQkEycEJmSEVpQVNnQ0FDRURJQUlnQVVFRWFqWUNBQ0FBSUFOQi93RnhRUmgwUVJoMXJEY0RBQXdGQ3lBQ0tBSUFRUU5xUVh4eElnRW9BZ0FoQXlBQ0lBRkJCR28yQWdBZ0FDQURRZjhCY2EwM0F3QU1CQXNnQWlnQ0FFRUhha0Y0Y1NJQkt3TUFJUVVnQWlBQlFRaHFOZ0lBSUFBZ0JUa0RBQXdEQ3lBQ0tBSUFRUWRxUVhoeElnRXJBd0FoQlNBQ0lBRkJDR28yQWdBZ0FDQUZPUU1BQ3dzTEMvRUNBUXQvSXdRaEJDTUVRZUFCYWlRRUlBUkJpQUZxSVFVZ0JFSFFBR29pQTBJQU53SUFJQU5DQURjQ0NDQURRZ0EzQWhBZ0EwSUFOd0lZSUFOQ0FEY0NJQ0FFUWZnQWFpSUdJQUlvQWdBMkFnQkJBQ0FCSUFZZ0JDQURFQ3BCQUVnRVFFRi9JUUVGSUFBb0FreEJmMG9FZjBFQUJVRUFDeUVDSUFBb0FnQWhCeUFBTEFCS1FRRklCRUFnQUNBSFFWOXhOZ0lBQ3lBQVFUQnFJZ2dvQWdBRVFDQUFJQUVnQmlBRUlBTVFLaUVCQlNBQVFTeHFJZ2tvQWdBaENpQUpJQVUyQWdBZ0FFRWNhaUlNSUFVMkFnQWdBRUVVYWlJTElBVTJBZ0FnQ0VIUUFEWUNBQ0FBUVJCcUlnMGdCVUhRQUdvMkFnQWdBQ0FCSUFZZ0JDQURFQ29oQVNBS0JFQWdBRUVBUVFBZ0FDZ0NKRUVEY1VFQ2FoRURBQm9nQ3lnQ0FFVUVRRUYvSVFFTElBa2dDallDQUNBSVFRQTJBZ0FnRFVFQU5nSUFJQXhCQURZQ0FDQUxRUUEyQWdBTEN5QUFJQUFvQWdBaUF5QUhRU0J4Y2pZQ0FDQURRU0J4QkVCQmZ5RUJDd3NnQkNRRUlBRUxvd0lBQW44Z0FBUi9JQUZCZ0FGSkJFQWdBQ0FCT2dBQVFRRU1BZ3RCbkF3b0Fyd0JLQUlBUlFSQUlBRkJnSDl4UVlDL0EwWUVRQ0FBSUFFNkFBQkJBUXdEQlVHQUxVSFVBRFlDQUVGL0RBTUxBQXNnQVVHQUVFa0VRQ0FBSUFGQkJuWkJ3QUZ5T2dBQUlBQWdBVUUvY1VHQUFYSTZBQUZCQWd3Q0N5QUJRWUN3QTBrZ0FVR0FRSEZCZ01BRFJuSUVRQ0FBSUFGQkRIWkI0QUZ5T2dBQUlBQWdBVUVHZGtFL2NVR0FBWEk2QUFFZ0FDQUJRVDl4UVlBQmNqb0FBa0VEREFJTElBRkJnSUI4YWtHQWdNQUFTUVIvSUFBZ0FVRVNka0h3QVhJNkFBQWdBQ0FCUVF4MlFUOXhRWUFCY2pvQUFTQUFJQUZCQm5aQlAzRkJnQUZ5T2dBQ0lBQWdBVUUvY1VHQUFYSTZBQU5CQkFWQmdDMUIxQUEyQWdCQmZ3c0ZRUUVMQ3d1UEFnRURmeUFCUWY4QmNTRUVBa0FDUUNBQ1FRQkhJZ01nQUVFRGNVRUFSM0VFUUNBQlFmOEJjU0VGQTBBZ0FDMEFBQ0FGUmcwQ0lBSkJmMm9pQWtFQVJ5SURJQUJCQVdvaUFFRURjVUVBUjNFTkFBc0xJQU1OQUVFQUlRRU1BUXNnQUMwQUFDQUJRZjhCY1NJRFJnUkFJQUloQVFVZ0JFR0Jnb1FJYkNFRUFrQUNRQ0FDUVFOTEJFQWdBaUVCQTBBZ0FDZ0NBQ0FFY3lJQ1FZQ0Jnb1I0Y1VHQWdZS0VlSE1nQWtILy9mdDNhbkZGQkVBZ0FFRUVhaUVBSUFGQmZHb2lBVUVEU3cwQkRBTUxDd1VnQWlFQkRBRUxEQUVMSUFGRkJFQkJBQ0VCREFNTEN3TkFJQUF0QUFBZ0EwWU5BaUFBUVFGcUlRQWdBVUYvYWlJQkRRQkJBQ0VCQ3dzTElBRUVmeUFBQlVFQUN3dGVBUUovSUFBc0FBQWlBa1VnQWlBQkxBQUFJZ05IY2dSQUlBTWhBQ0FDSVFFRkEwQWdBRUVCYWlJQUxBQUFJZ0pGSUFJZ0FVRUJhaUlCTEFBQUlnTkhjZ1JBSUFNaEFDQUNJUUVGREFFTEN3c2dBVUgvQVhFZ0FFSC9BWEZyQ3lvQkFYOGpCQ0VCSXdSQkVHb2tCRUdjQ3lnQ0FDRUNJQUVnQURZQ0FDQUNRWmdWSUFFUUlSb1FDQXVDQXdFS2Z5QUFLQUlJSUFBb0FnQkJvdHJ2MXdacUlnWVFIU0VFSUFBb0Fnd2dCaEFkSVFNZ0FDZ0NFQ0FHRUIwaEJ3SkFJQVFnQVVFQ2Rra0VRQ0FESUFFZ0JFRUNkR3NpQlVrZ0J5QUZTWEVFUUNBSElBTnlRUU54QkVCQkFDRUJCU0FEUVFKMklRb2dCMEVDZGlFTFFRQWhCUU5BQWtBZ0FDQUZJQVJCQVhZaUIyb2lERUVCZENJSUlBcHFJZ05CQW5ScUtBSUFJQVlRSFNFSklBQWdBMEVCYWtFQ2RHb29BZ0FnQmhBZElnTWdBVWtnQ1NBQklBTnJTWEZGQkVCQkFDRUJEQVlMSUFBZ0F5QUphbW9zQUFBRVFFRUFJUUVNQmdzZ0FpQUFJQU5xRUVnaUEwVU5BQ0FFUVFGR0lRZ2dCQ0FIYXlFRUlBTkJBRWdpQXdSQUlBY2hCQXNnQTBVRVFDQU1JUVVMSUFoRkRRRkJBQ0VCREFVTEN5QUFJQWdnQzJvaUFrRUNkR29vQWdBZ0JoQWRJUVVnQUNBQ1FRRnFRUUowYWlnQ0FDQUdFQjBpQWlBQlNTQUZJQUVnQW10SmNRUkFJQUFnQW1vaEFTQUFJQUlnQldwcUxBQUFCRUJCQUNFQkN3VkJBQ0VCQ3dzRlFRQWhBUXNGUVFBaEFRc0xJQUVMbVFFQkFuOENRQUpBQWtBRFFDQUNRWllXYWkwQUFDQUFSZzBCSUFKQkFXb2lBa0hYQUVjTkFFSHVGaUVBUWRjQUlRSU1BZ3NBQ3lBQ0JFQkI3aFloQUF3QkJVSHVGaUVBQ3d3QkN3TkFJQUFoQXdOQUlBTkJBV29oQUNBRExBQUFCRUFnQUNFRERBRUxDeUFDUVg5cUlnSU5BQXNMSUFFb0FoUWlBUVIvSUFFb0FnQWdBU2dDQkNBQUVFb0ZRUUFMSWdFRWZ5QUJCU0FBQ3d1d0F3RUxmeU1FSVFZakJFRXdhaVFFSUFaQkVHb2hCeUFHUVNCcUlnTWdBRUVjYWlJSktBSUFJZ1EyQWdBZ0F5QUFRUlJxSWdvb0FnQWdCR3NpQkRZQ0JDQURJQUUyQWdnZ0F5QUNOZ0lNSUFZaUNDQUFRVHhxSWd3b0FnQTJBZ0FnQ0NBRE5nSUVJQWhCQWpZQ0NBSkFBa0FnQkNBQ2FpSUdRWklCSUFnUUJpSUJRWUJnU3dSL1FZQXRRUUFnQVdzMkFnQkJmd1VnQVFzaUJVWU5BRUVDSVFRZ0F5RUJJQVVoQXdOQUlBTkJBRTRFUUNBR0lBTnJJUVlnQVVFSWFpRUZJQU1nQVNnQ0JDSU5TeUlMQkVBZ0JTRUJDeUFFSUF0QkgzUkJIM1ZxSVFRZ0FTQUJLQUlBSUFNZ0N3Ui9JQTBGUVFBTGF5SURhallDQUNBQlFRUnFJZ1VnQlNnQ0FDQURhellDQUNBSElBd29BZ0EyQWdBZ0J5QUJOZ0lFSUFjZ0JEWUNDQ0FHUVpJQklBY1FCaUlGUVlCZ1N3Ui9RWUF0UVFBZ0JXczJBZ0JCZndVZ0JRc2lBMFlOQWd3QkN3c2dBRUVBTmdJUUlBbEJBRFlDQUNBS1FRQTJBZ0FnQUNBQUtBSUFRU0J5TmdJQUlBUkJBa1lFZjBFQUJTQUNJQUVvQWdSckN5RUNEQUVMSUFBZ0FDZ0NMQ0lCSUFBb0FqQnFOZ0lRSUFrZ0FUWUNBQ0FLSUFFMkFnQUxJQWdrQkNBQ0N3VUFRWUF0QzNjQkFYOGpCQ0VESXdSQklHb2tCQ0FESUFBb0FqdzJBZ0FnQTBFQU5nSUVJQU1nQVRZQ0NDQURJQU5CRkdvaUFEWUNEQ0FESUFJMkFoQkJqQUVnQXhBRklnRkJnR0JMQkg5QmdDMUJBQ0FCYXpZQ0FFRi9CU0FCQzBFQVNBUi9JQUJCZnpZQ0FFRi9CU0FBS0FJQUN5RUFJQU1rQkNBQUMwQUJBWDhqQkNFQkl3UkJFR29rQkNBQklBQW9BancyQWdCQkJpQUJFQWNpQUVHQVlFc0VmMEdBTFVFQUlBQnJOZ0lBUVg4RklBQUxJUUFnQVNRRUlBQUxsZ0VCQkg4akJDRUJJd1JCRUdva0JDQUFRZjhCY1VFQlJ3UkFRWndMS0FJQUlRSWdBVUdRRGpZQ0FDQUNRWmdWSUFFUUlSb1FDQXNnQVVFSWFpRUVJQUJCREhSQmdJREFBSEVnQUVFSGRFR0FnQVJ4Y2tIQUFYSVFNaUlEUlFSQVFad0xLQUlBSVFJZ0JFR0tGVFlDQUNBQ1FiMFZJQVFRSVJvUUNBc2dBeUFBRUZJRWZ5QUJKQVFnQXdVZ0F4QXhJQUVrQkVFQUN3dXdBd0lRZndOK0lBQkJCR29pQXlnQ0FDSUVJQUFvQWdBaUFuSWdBRUVJYWlJRktBSUFJZ1p5SUFCQkRHb2lCeWdDQUNJSWNpQUFRUkJxSWdrb0FnQWlDbklnQUVFVWFpSUxLQUlBSWd4eUlBQkJHR29pRFNnQ0FDSU9jaUFBUVJ4cUlnOG9BZ0FpRUhKQkFFZEJIM1JCSDNVaEVTQUNJQUZCQUVjaUFrRWZkRUVmZFNJQmM2MGhGQ0FBSUFJRWZrTENndG1CRFFWQ0FBc2dGSHdpRWlBUnJTSVVnejRDQUNBRUlBRnpyU0VUSUFNZ0VrSWdpQ0FDQkg1Q2pMM0ovZ3NGUWdBTGhDQVRmQ0lTSUJTRFBnSUFJQkpDSUlnaEVpQUdJQUZ6clNFVElBVWdBZ1IrUXJ2QW92b0tCVUlBQ3lBVGZDQVNmQ0lTSUJTRFBnSUFJQkpDSUlnaEVpQUlJQUZ6clNFVElBY2dBZ1IrUXVhNXU5VUxCVUlBQ3lBVGZDQVNmQ0lTSUJTRFBnSUFJQkpDSUlnaEVpQUtJQUZ6clNFVElBa2dBZ1IrUXY3Ly8vOFBCVUlBQ3lBVGZDQVNmQ0lUSUJTRFBnSUFJQXNnRENBQmM2MGdBYTBpRW53Z0UwSWdpSHdpRXlBVWd6NENBQ0FOSUE0Z0FYT3RJQko4SUJOQ0lJaDhJaE1nRklNK0FnQWdEeUFRSUFGenJTQVNmQ0FUUWlDSWZDQVVnejRDQUNBQ1FRRnpRUUZ4UVFGMFFYOXFDOGt1QVN0L0l3UWhEU01FUVlDR0RXb2tCQ0FOUWRnQWFpRVlJQTFCMEFCcUlSc2dEVUhZZ3cxcUlROGdEVUhZNHdkcUlSTWdEVUhZNGdkcUlRd2dEVUhZQW1vaENpQU5RZGdCYWlFSklBMUIzQUJxSVFRZ0RVR0FoQTFxSWdWQjU4eW4wQVkyQWdBZ0JVRUVhaUlRUVlYZG50dDdOZ0lBSUFWQkNHb2lFVUh5NXJ2akF6WUNBQ0FGUVF4cUloUkJ1dXEvcW5vMkFnQWdCVUVRYWlJVlFmK2t1WWdGTmdJQUlBVkJGR29pRmtHTTBaWFllVFlDQUNBRlFSaHFJaGRCcTdPUC9BRTJBZ0FnQlVFY2FpSVpRWm1hZzk4Rk5nSUFJQVZCSUdvaUMwSHBFaWtBQURjQUFDQUxRZkVTS1FBQU53QUlJQXRCK1JJcEFBQTNBQkFnQzBHQkV5a0FBRGNBR0NBTFFZa1RLUUFBTndBZ0lBdEJrUk1wQUFBM0FDZ2dDMEdaRXlrQUFEY0FNQ0FMUWFFVEtBQUFOZ0E0SUF0QnBSTXVBQUE3QUR3Z0MwR25FeXdBQURvQVBpQU5RZnlFRFdvaUJrRUFOZ0lBSUFaQmdJQ0VRRFlDQkNBRlFlQUFhaUlDUWZnQU5nSUFJQXRCZ0g4NkFEOGdCU0FMRUEwZ0MwR3FFeWtBQURjQUFDQUxRYklUS1FBQU53QUlJQXRCdWhNcEFBQTNBQkFnQzBIQ0V5a0FBRGNBR0NBTFFjb1RLUUFBTndBZ0lBdEIwaE1wQUFBM0FDZ2dDMEhhRXlrQUFEY0FNQ0FDS0FJQUlnTkJQM0VoQnlBQ0lBTkJDR28yQWdBQ1FBSkFRY0FBSUFkcklnNUJDRXNFUUNBR0lRTkJDQ0VDREFFRklBc2dCMm9nQmlBT0VBNGFJQVlnRG1vaENDQUZJQXNRRFVFSUlBNXJJZ0pCd0FCSkJIOGdDQVVnQmlBSFFZaC9haUlIUVFaMlFRTjBRUkJxUVFOMGFpRWFJQUloQXlBSUlRSURRQ0FMSUFJcEFBQTNBQUFnQ3lBQ0tRQUlOd0FJSUFzZ0Fpa0FFRGNBRUNBTElBSXBBQmczQUJnZ0N5QUNLUUFnTndBZ0lBc2dBaWtBS0RjQUtDQUxJQUlwQURBM0FEQWdDeUFDS1FBNE53QTRJQUpCUUdzaEFpQUZJQXNRRFNBRFFVQnFJZ05Cd0FCUERRQUxJQWRCUDNFaEFpQWFJQTVCUUdwcUN5RURJQUlFUUVFQUlRY01BZ3NMREFFTElBc2dCMm9nQXlBQ0VBNGFDeUFGS0FJQUlob1FDeUVDSUFWQkFEWUNBQ0FRS0FJQUlod1FDeUVESUJCQkFEWUNBQ0FSS0FJQUloMFFDeUVJSUJGQkFEWUNBQ0FVS0FJQUloNFFDeUVISUJSQkFEWUNBQ0FWS0FJQUloUVFDeUVMSUJWQkFEWUNBQ0FXS0FJQUloVVFDeUVPSUJaQkFEWUNBQ0FYS0FJQUloWVFDeUVRSUJkQkFEWUNBQ0FaS0FJQUloY1FDeUVSSUJsQkFEWUNBQ0FDUVJCMklSa2dBa0VZZGlFZklBTkJDSFloSUNBRFFSQjJJUklnQTBFWWRpRURJQWhCQ0hZaElTQUlRUkIySVNJZ0NFRVlkaUVJSUFkQkNIWWhJeUFIUVJCMklTUWdCMEVZZGlFSElBdEJDSFloSlNBTFFSQjJJU1lnQzBFWWRpRUxJQTVCQ0hZaEp5QU9RUkIySVNnZ0RrRVlkaUVPSUJCQkNIWWhLU0FRUVJCMklTb2dFRUVZZGlFUUlCRkJDSFloS3lBUlFSQjJJU3dnRVVFWWRpRVJBa0FnR2tHQWdJQjRjVUdBZ0lDQWYwWUVRQUpBSUFKQkNIWkIvd0Z4UWZaK2FpSUNSUVJBSUJsQi93RnhRWWgvYWlJQ1JRUkFJQjlCdFg1cUlnSkZCRUFnSEVHQWdJQjRjVUdBZ0lEUWUwY05CU0FnUWY4QmNVR1NmbW9pQWtVRVFDQVNRZjhCY1VGNGFpSUNSUVJBSUFOQlZXb2lBa1VFUUNBZFFZQ0FnSGh4UVlDQWdDaEhEUWdnSVVIL0FYRkJWbW9pQWtVRVFDQWlRZjhCY1VHZ2Ztb2lBa1VFUUNBSVFaQi9haUlDUlFSQUlCNUJnSUNBZUhGQmdJQ0ErSGhIRFFzZ0kwSC9BWEZCVG1vaUFrVUVRQ0FrUWY4QmNVR0dmbW9pQWtVRVFDQUhRV0pxSWdKRkJFQWdGRUdBZ0lCNGNVR0FnSUNBQlVjTkRpQWxRZjhCY1VHN2Ztb2lBZzBNSUNaQi93RnhRYngrYWlJQ0RRd2dDMEZmYWlJQ0RRd2dGVUdBZ0lCNGNVR0FnSURRZWtjTkRpQW5RZjhCY1VHSmYyb2lBZzBNSUNoQi93RnhRVlZxSWdJTkRDQU9RZHQrYWlJQ0RRd2dGa0dBZ0lCNGNVR0FnSURZZlVjTkRpQXBRZjhCY1VITWZtb2lBZzBNSUNwQi93RnhRWHBxSWdJTkRDQVFRZDUrYWlJQ0RRd2dGMEdBZ0lCNGNVR0FnSURRZmtjTkRpQXJRZjhCY1VHVmYyb2lBMFVoQ0NBUlFiNS9haUVDSUN4Qi93RnhRWjErYWlJSEJFQWdCeUVDQ3lBSVJRUkFJQU1oQWdzTEN3c0xDd3NMQ3dzTEN3c0xJQUlFUUVHY0N5Z0NBQ0VDSUJ0Qm5nNDJBZ0FnQWtHOUZTQWJFQ0VhRUFnTElBRkIvd0Z4UVFGSEJFQkJuQXNvQWdBaEFpQVlRWkFPTmdJQUlBSkJtQlVnR0JBaEdoQUlDeUFBUWNBQmFpRUNJQUJCZ0FncEF3QTNBcWdCSUFCQmlBZ3BBd0EzQXJBQklBQkJBRFlDQUNBQVFRUnFJaHRCQURZQ0FDQUFRUWhxSWd0QkFEWUNBQ0FCUVlBRWNRUkFJQXNnQWpZQ0FDQU5RYkFJS1FJQU53SUFJQTFCdUFncEFnQTNBZ2dnRFVIQUNDa0NBRGNDRUNBTlFjZ0lLUUlBTndJWUlBMUIwQWdwQWdBM0FpQWdEVUVvYWlJQ1FkZ0lLUUlBTndJQUlBSkI0QWdwQWdBM0FnZ2dBa0hvQ0NrQ0FEY0NFQ0FDUWZBSUtRSUFOd0lZSUFKQitBZ3BBZ0EzQWlBZ0JrSHBFeEFiR2lBRklBWkJBQkFzR2lBTUlBVW9BbEEyQW5nZ0RDQUZLUUlBTndJQUlBd2dCU2tDQ0RjQ0NDQU1JQVVwQWhBM0FoQWdEQ0FGS1FJWU53SVlJQXdnQlNrQ0lEY0NJQ0FNUVNocUlnSWdCVUVvYWlJREtRSUFOd0lBSUFJZ0F5a0NDRGNDQ0NBQ0lBTXBBaEEzQWhBZ0FpQURLUUlZTndJWUlBSWdBeWtDSURjQ0lDQU1RUUUyQWxBZ0RFSFVBR29pQWtJQU53SUFJQUpDQURjQ0NDQUNRZ0EzQWhBZ0FrSUFOd0lZSUFKQkFEWUNJQ0FNSUF4QnNBaEJBQkFXSUFrZ0RTa0NBRGNDQUNBSklBMHBBZ2czQWdnZ0NTQU5LUUlRTndJUUlBa2dEU2tDR0RjQ0dDQUpJQTBwQWlBM0FpQWdDU0FOS1FJb053SW9JQWtnRFNrQ01EY0NNQ0FKSUEwcEFqZzNBamdnQ1VGQWF5QU5RVUJyS1FJQU53SUFJQWtnRFNrQ1NEY0NTQ0FKUVFFMkFsQWdDVUg0QUdvaEJ5QUpRZFFBYWlJQ1FnQTNBZ0FnQWtJQU53SUlJQUpDQURjQ0VDQUNRZ0EzQWhnZ0FrSUFOd0lnSUFRZ0RDa0NBRGNDQUNBRUlBd3BBZ2czQWdnZ0JDQU1LUUlRTndJUUlBUWdEQ2tDR0RjQ0dDQUVJQXdwQWlBM0FpQWdCQ0FNS1FJb053SW9JQVFnRENrQ01EY0NNQ0FFSUF3cEFqZzNBamdnQkVGQWF5QU1RVUJyS1FJQU53SUFJQVFnRENrQ1NEY0NTQ0FFSUF3cEFsQTNBbEFnQkNBTUtRSllOd0pZSUFRZ0RDa0NZRGNDWUNBRUlBd3BBbWczQW1nZ0JDQU1LUUp3TndKd0lBUWdEQ2dDZURZQ2VDQUVRZmdBYWlFT0lBUkJLR29oRUNBRVFTeHFJUkVnQkVFd2FpRVlJQVJCTkdvaEZDQUVRVGhxSVJVZ0JFRThhaUVXSUFSQlFHc2hGeUFFUWNRQWFpRVpJQVJCeUFCcUlSb2dCRUhNQUdvaEhFRUFJUUlEUUNBS0lBSkJCSFFpQ0VIOEFHeHFJZ01nQkNrQ0FEY0NBQ0FESUFRcEFnZzNBZ2dnQXlBRUtRSVFOd0lRSUFNZ0JDa0NHRGNDR0NBRElBUXBBaUEzQWlBZ0F5QUVLUUlvTndJb0lBTWdCQ2tDTURjQ01DQURJQVFwQWpnM0FqZ2dBMEZBYXlBRVFVQnJLUUlBTndJQUlBTWdCQ2tDU0RjQ1NDQURJQVFwQWxBM0FsQWdBeUFFS1FKWU53SllJQU1nQkNrQ1lEY0NZQ0FESUFRcEFtZzNBbWdnQXlBRUtRSndOd0p3SUFNZ0JDZ0NlRFlDZUNBS0lBaEJBWEpCL0FCc2FpQURJQWtRRkNBS0lBaEJBbklpQTBIOEFHeHFJQW9nQTBGL2FrSDhBR3hxSUFrUUZDQUtJQWhCQTNJaUEwSDhBR3hxSUFvZ0EwRi9ha0g4QUd4cUlBa1FGQ0FLSUFoQkJISWlBMEg4QUd4cUlBb2dBMEYvYWtIOEFHeHFJQWtRRkNBS0lBaEJCWElpQTBIOEFHeHFJQW9nQTBGL2FrSDhBR3hxSUFrUUZDQUtJQWhCQm5JaUEwSDhBR3hxSUFvZ0EwRi9ha0g4QUd4cUlBa1FGQ0FLSUFoQkIzSWlBMEg4QUd4cUlBb2dBMEYvYWtIOEFHeHFJQWtRRkNBS0lBaEJDSElpQTBIOEFHeHFJQW9nQTBGL2FrSDhBR3hxSUFrUUZDQUtJQWhCQ1hJaUEwSDhBR3hxSUFvZ0EwRi9ha0g4QUd4cUlBa1FGQ0FLSUFoQkNuSWlBMEg4QUd4cUlBb2dBMEYvYWtIOEFHeHFJQWtRRkNBS0lBaEJDM0lpQTBIOEFHeHFJQW9nQTBGL2FrSDhBR3hxSUFrUUZDQUtJQWhCREhJaUEwSDhBR3hxSUFvZ0EwRi9ha0g4QUd4cUlBa1FGQ0FLSUFoQkRYSWlBMEg4QUd4cUlBb2dBMEYvYWtIOEFHeHFJQWtRRkNBS0lBaEJEbklpQTBIOEFHeHFJQW9nQTBGL2FrSDhBR3hxSUFrUUZDQUtJQWhCRDNJaUEwSDhBR3hxSUFvZ0EwRi9ha0g4QUd4cUlBa1FGQUpBQWtBQ1FBSkFJQWNvQWdBRVFDQUhRUUUyQWdBTUFRVWdDU0FKRUJNZ0J5Z0NBQTBCSUFrZ0NSQVRJQWNvQWdBTkFpQUpJQWtRRXlBSEtBSUFEUU1nQ1NBSkVCTUxEQU1MSUFkQkFUWUNBQXNnQjBFQk5nSUFDeUFIUVFFMkFnQUxJQTRvQWdBRVFDQU9RUUUyQWdBRklBUWdCQkFUQ3lBQ1FUNUdCRUFnSENnQ0FDSUlRUloySWdOQjBRZHNJQkFvQWdCcUlRSWdBMEVHZENBUktBSUFhaUFDUVJwMmFpSWRRUnAySUJnb0FnQnFJaDVCR25ZZ0ZDZ0NBR29pSDBFYWRpQVZLQUlBYWlJZ1FScDJJQllvQWdCcUloSkJHbllnRnlnQ0FHb2lJVUVhZGlBWktBSUFhaUlpUVJwMklCb29BZ0JxSVFNZ0VFRzg0Zi8vQUNBQ1FmLy8veDl4YXpZQ0FDQVJRZno5Ly84QUlCMUIvLy8vSDNGck5nSUFJQmhCL1AvLy93QWdIa0gvLy84ZmNXczJBZ0FnRkVIOC8vLy9BQ0FmUWYvLy94OXhhellDQUNBVlFmei8vLzhBSUNCQi8vLy9IM0ZyTmdJQUlCWkIvUC8vL3dBZ0VrSC8vLzhmY1dzMkFnQWdGMEg4Ly8vL0FDQWhRZi8vL3g5eGF6WUNBQ0FaUWZ6Ly8vOEFJQ0pCLy8vL0gzRnJOZ0lBSUJwQi9QLy8vd0FnQTBILy8vOGZjV3MyQWdBZ0hFSDgvLzhISUFoQi8vLy9BWEZySUFOQkduWnJOZ0lBSUFRZ0JDQU1FQlJCUHlFQ0RBRUZJQUpCQVdvaUFrSEFBRWNOQVFzTFFYOGhBa0VBSVFNRFFDQUtJQU5CL0FCc2FpZ0NlRVVFUUNBVElBTkIxQUJzYWlFSUlBSkJmMFlFZnlBSUlBb2dBMEg4QUd4cVFkQUFhaUlDS1FJQU53SUFJQWdnQWlrQ0NEY0NDQ0FJSUFJcEFoQTNBaEFnQ0NBQ0tRSVlOd0lZSUFnZ0Fpa0NJRGNDSUNBREJTQUlJQk1nQWtIVUFHeHFJQW9nQTBIOEFHeHFRZEFBYWhBTUlBTUxJUUlMSUFOQkFXb2lBMEdBQ0VjTkFBc2dBa0YvUndSQUlBWWdFeUFDUWRRQWJHb2lBeWtDQURjQ0FDQUdJQU1wQWdnM0FnZ2dCaUFES1FJUU53SVFJQVlnQXlrQ0dEY0NHQ0FHSUFNcEFpQTNBaUFnQmhBWElBWW9BZ2doQXlBR0tBSU1JUWdnQmlnQ0VDRUhJQVlvQWhRaEJDQUdLQUlZSVFrZ0JpZ0NIQ0VRSUFZb0FpQWhEQ0FHS0FJa0lRNGdCU0FHS0FJRUloRkJHblFnQmlnQ0FISkIvLy8vL3dOeE5nSUFJQVZCQkdvaUdDQURRUlowUVlDQWdQNERjU0FSUVFSMmNqWUNBQ0FGUVFocUloRWdDRUVTZEVHQWdQRC9BM0VnQTBFSWRuSTJBZ0FnQlVFTWFpSURJQWRCRG5SQmdJRC8vd054SUFoQkRIWnlOZ0lBSUFWQkVHb2lGQ0FFUVFwMFFZRDQvLzhEY1NBSFFSQjJjallDQUNBRlFSUnFJaFVnQ1VFR2RFSEEvLy8vQTNFZ0JFRVVkbkkyQWdBZ0JVRVlhaUlXSUJCQkFuUWdDVUVZZG5JZ0RFRWNkSEpCLy8vLy93TnhOZ0lBSUFWQkhHb2lFQ0FPUVJoMFFZQ0FnUGdEY1NBTVFRSjJjallDQUNBRlFTQnFJaGNnRGtFR2RqWUNBQ0FGUVlRSkVDWWdHQ2dDQUNFSUlCRW9BZ0FoQnlBREtBSUFJUVFnRkNnQ0FDRUpJQlVvQWdBaERDQVdLQUlBSVFNZ0VDZ0NBQ0VPSUJjb0FnQWhFQ0FQSUFVb0FnQWlFVUgvLy84ZmNUWUNBQ0FQSUFoQkJIUkI4UC8vSDNFZ0VVRWFkbkkyQWdRZ0R5QUhRUWgwUVlEKy94OXhJQWhCRm5aeU5nSUlJQThnQkVFTWRFR0E0UDhmY1NBSFFSSjJjallDRENBUElBbEJFSFJCZ0lEOEgzRWdCRUVPZG5JMkFoQWdEeUFNUVJSMFFZQ0F3Qjl4SUFsQkNuWnlOZ0lVSUE4Z0EwRVlkRUdBZ0lBWWNTQU1RUVoyY2pZQ0dDQVBJQU5CQW5aQi8vLy9IM0UyQWh3Z0R5QU9RUUowUWZ6Ly94OXhJQU5CSEhaeU5nSWdJQThnRUVFR2RDQU9RUmgyY2pZQ0pBTkFBa0FnQWlFREEwQWdBMFVOQVNBS0lBTkJmMm9pQTBIOEFHeHFLQUo0RFFBTElCTWdBa0hVQUd4cUlCTWdBMEhVQUd4cUlBOFFEQ0FQSUE4Z0NpQUNRZndBYkdwQjBBQnFFQXdnQXlFQ0RBRUxDeUFUSUFKQjFBQnNhaUlDSUE4cEFnQTNBZ0FnQWlBUEtRSUlOd0lJSUFJZ0R5a0NFRGNDRUNBQ0lBOHBBaGczQWhnZ0FpQVBLUUlnTndJZ1FRQWhBZ05BSUJNZ0FrSFVBR3hxUWRBQWFpSUlJQW9nQWtIOEFHeHFRZmdBYWlJSEtBSUFJZ00yQWdBZ0EwVUVRQ0FHSUJNZ0FrSFVBR3hxSWdNUUNpQUZJQVlnQXhBTUlBTWdDaUFDUWZ3QWJHb2dCaEFNSUJNZ0FrSFVBR3hxUVNocUlBb2dBa0g4QUd4cVFTaHFJQVVRRENBSUlBY29BZ0EyQWdBTElBSkJBV29pQWtHQUNFY05BQXNMSUFCQndJRUVhaUVJSUFaQkJHb2hDaUFHUVFocUlRa2dCa0VNYWlFTUlBWkJFR29oRHlBR1FSUnFJUTRnQmtFWWFpRVFJQVpCSEdvaEVTQUdRU0JxSVJnZ0JrRWthaUVVSUFWQkJHb2hGU0FGUVFocUlSWWdCVUVNYWlFWElBVkJFR29oR1NBRlFSUnFJUm9nQlVFWWFpRWNJQVZCSEdvaEhTQUZRU0JxSVI0Z0JVRWthaUVmUVFBaEFnTkFJQUpCQkhRaElFRUFJUU1EUUNBTEtBSUFJUWNnQmlBVElBTWdJR29pRWtIVUFHeHFJZ1FwQWdBM0FnQWdCaUFFS1FJSU53SUlJQVlnQkNrQ0VEY0NFQ0FHSUFRcEFoZzNBaGdnQmlBRUtRSWdOd0lnSUFZUUR5QUZJQk1nRWtIVUFHeHFRU2hxSWdRcEFnQTNBZ0FnQlNBRUtRSUlOd0lJSUFVZ0JDa0NFRGNDRUNBRklBUXBBaGczQWhnZ0JTQUVLUUlnTndJZ0lBVVFEeUFISUFKQkNuUnFJQU5CQm5ScUlBb29BZ0FpQkVFYWRDQUdLQUlBY2pZQ0FDQUhJQUpCQ25ScUlBTkJCblJxSUFrb0FnQWlFa0VVZENBRVFRWjJjallDQkNBSElBSkJDblJxSUFOQkJuUnFJQXdvQWdBaUJFRU9kQ0FTUVF4MmNqWUNDQ0FISUFKQkNuUnFJQU5CQm5ScUlBOG9BZ0FpRWtFSWRDQUVRUkoyY2pZQ0RDQUhJQUpCQ25ScUlBTkJCblJxSUE0b0FnQkJBblFnRWtFWWRuSWdFQ2dDQUNJRVFSeDBjallDRUNBSElBSkJDblJxSUFOQkJuUnFJQkVvQWdBaUVrRVdkQ0FFUVFSMmNqWUNGQ0FISUFKQkNuUnFJQU5CQm5ScUlCZ29BZ0FpQkVFUWRDQVNRUXAyY2pZQ0dDQUhJQUpCQ25ScUlBTkJCblJxSUJRb0FnQkJDblFnQkVFUWRuSTJBaHdnQnlBQ1FRcDBhaUFEUVFaMGFpQVZLQUlBSWdSQkduUWdCU2dDQUhJMkFpQWdCeUFDUVFwMGFpQURRUVowYWlBV0tBSUFJaEpCRkhRZ0JFRUdkbkkyQWlRZ0J5QUNRUXAwYWlBRFFRWjBhaUFYS0FJQUlnUkJEblFnRWtFTWRuSTJBaWdnQnlBQ1FRcDBhaUFEUVFaMGFpQVpLQUlBSWhKQkNIUWdCRUVTZG5JMkFpd2dCeUFDUVFwMGFpQURRUVowYWlBYUtBSUFRUUowSUJKQkdIWnlJQndvQWdBaUJFRWNkSEkyQWpBZ0J5QUNRUXAwYWlBRFFRWjBhaUFkS0FJQUloSkJGblFnQkVFRWRuSTJBalFnQnlBQ1FRcDBhaUFEUVFaMGFpQWVLQUlBSWdSQkVIUWdFa0VLZG5JMkFqZ2dCeUFDUVFwMGFpQURRUVowYWlBZktBSUFRUXAwSUFSQkVIWnlOZ0k4SUFOQkFXb2lBMEVRUncwQUN5QUNRUUZxSWdKQndBQkhEUUFMSUF0QkFCQS9JQWdoQWdzZ0FVR0FBbkZGQkVBZ0FDQUJRUXAyUVFGeE5nSzRBU0FOSkFRZ0FBOExJQUFvQWdCRkJFQWdCa0VBTmdKNElBWkJzQWdwQWdBM0FnQWdCa0c0Q0NrQ0FEY0NDQ0FHUWNBSUtRSUFOd0lRSUFaQnlBZ3BBZ0EzQWhnZ0JrSFFDQ2tDQURjQ0lDQUdRU2hxSWdOQjJBZ3BBZ0EzQWdBZ0EwSGdDQ2tDQURjQ0NDQURRZWdJS1FJQU53SVFJQU5COEFncEFnQTNBaGdnQTBINENDa0NBRGNDSUNBR1FRRTJBbEFnQmtIVUFHb2lBMElBTndJQUlBTkNBRGNDQ0NBRFFnQTNBaEFnQTBJQU53SVlJQU5CQURZQ0lDQUFJQUkyQWdBZ0FpQUdFRGtnR3lBQ1FZQ0FJR28yQWdBZ0JTQUdLUUlBTndJQUlBVWdCaWtDQ0RjQ0NDQUZJQVlwQWhBM0FoQWdCU0FHS1FJWU53SVlJQVVnQmlrQ0lEY0NJQ0FGSUFZcEFpZzNBaWdnQlNBR0tRSXdOd0l3SUFVZ0Jpa0NPRGNDT0NBRlFVQnJJQVpCUUdzcEFnQTNBZ0FnQlNBR0tRSklOd0pJSUFVZ0Jpa0NVRGNDVUNBRklBWXBBbGczQWxnZ0JTQUdLUUpnTndKZ0lBVWdCaWtDYURjQ2FDQUZJQVlwQW5BM0FuQWdCU0FHS0FKNE5nSjRJQVZCK0FCcUlRTkJBQ0VDQTBBZ0F5Z0NBQVJBSUFOQkFUWUNBQVVnQlNBRkVCTUxJQUpCQVdvaUFrR0FBVWNOQUFzZ0d5Z0NBQ0FGRURrTElBQWdBVUVLZGtFQmNUWUN1QUVnRFNRRUlBQVBDd3RCbkFzb0FnQWhBaUFiUVo0T05nSUFJQUpCdlJVZ0d4QWhHaEFJUVFBTFJ3RUNmeU1FSVFNakJFSFFBR29rQkNBRFFTaHFJZ1FnQWhBS0lBTWdCQ0FDRUF3Z0FDQUJJQVFRRENBQVFTaHFJQUZCS0dvZ0F4QU1JQUFnQVNnQ2VEWUNVQ0FESkFRTG5BOENKSDhDZmlNRUlRUWpCRUdBQkdva0JDQUFLQUlBUlFSQVFiWVFJQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFRa0JFRUFEd3NnQVVVRVFFRzlFaUFBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBRUpBUkJBQThMSUFKRkJFQkJ5eElnQUNnQ3JBRWdBQ2dDcUFGQkEzRkJER29SQUFBZ0JDUUVRUUFQQ3lBRFJRUkFRYThPSUFBb0Fxd0JJQUFvQXFnQlFRTnhRUXhxRVFBQUlBUWtCRUVBRHdzZ0JFSFlBR29pQmlBQkVCdEZCRUFnQkNRRVFRQVBDeUFFUVpnRGFpSWtJQUZCSUdvZ0JCQVFJQVFvQWdBRVFDQUVKQVJCQUE4TElBTW9BQ0FoRXlBREtBQWtJUlFnQXlnQUtDRVZJQU1vQUN3aEZpQURLQUF3SVE0Z0F5Z0FOQ0VYSUFNb0FEZ2hHQ0FES0FBOElSa2dBeWdBQUNJSFFmLy8veDl4SVJvZ0F5Z0FCQ0lJUVFaMFFjRC8veDl4SUFkQkduWWlEM0loR3lBREtBQUlJZ2xCREhSQmdPRC9IM0VnQ0VFVWRpSVFjaUVjSUFNb0FBd2lERUVTZEVHQWdQQWZjU0FKUVE1MkloRnlJUjBnQXlnQUVDSUZRUmgwUVlDQWdCaHhJQXhCQ0hZaUVuSWhIaUFES0FBVUlncEJCSFJCOFAvL0gzRWdCVUVjZGlJbGNpRWZJQU1vQUJnaURVRUtkRUdBK1A4ZmNTQUtRUloySWlaeUlTQWdBeWdBSENJTFFSQjBRWUNBL0I5eElBMUJFSFlpSjNJaElTQWJJQnB5SUJ4eUlCMXlJQVZCQW5aQi8vLy9IM0VpSW5JZ0huSWdIM0lnQzBFS2RpSWpjaUFnY2lBaGNrVUVRRUh6RlNBQUtBS3NBU0FBS0FLb0FVRURjVUVNYWhFQUFDQUVKQVJCQUE4TElBUkI0QU5xSWdNZ0MwRVlkam9BQUNBRElBdEJFSFk2QUFFZ0F5QUxRUWgyUVFOeElDTkJBblJ5T2dBQ0lBTWdDem9BQXlBRElBMUJHSFk2QUFRZ0F5QW5PZ0FGSUFNZ0RVRUlkam9BQmlBRElBMDZBQWNnQXlBS1FSaDJPZ0FJSUFNZ0NrRVFka0UvY1NBbVFRWjBjam9BQ1NBRElBcEJDSFk2QUFvZ0F5QUtPZ0FMSUFNZ0JVRVlka0VQY1NBbFFRUjBjam9BRENBRElBVkJFSFk2QUEwZ0F5QUZRUWgyT2dBT0lBTWdJa0VDZENBRlFRTnhjam9BRHlBRElBeEJHSFk2QUJBZ0F5QU1RUkIyT2dBUklBTWdFam9BRWlBRElBdzZBQk1nQXlBSlFSaDJPZ0FVSUFNZ0NVRVFkam9BRlNBRElBbEJDSFpCUDNFZ0VVRUdkSEk2QUJZZ0F5QUpPZ0FYSUFNZ0NFRVlkam9BR0NBRElBaEJFSFpCRDNFZ0VFRUVkSEk2QUJrZ0F5QUlRUWgyT2dBYUlBTWdDRG9BR3lBRElBZEJHSFpCQTNFZ0QwRUNkSEk2QUJ3Z0F5QUhRUkIyT2dBZElBTWdCMEVJZGpvQUhpQURJQWM2QUI4Z0JFSDRBbW9pQlNBQklBSWdBeEErSUFVZ0JTZ0NBQ0lCUVg5enJVTENndG1CRFh3aUtDQUZRUVJxSWdJb0FnQWlBeUFCY2lBRlFRaHFJZ0VvQWdBaUIzSWdCVUVNYWlJSUtBSUFJZ2x5SUFWQkVHb2lDaWdDQUNJTGNpQUZRUlJxSWd3b0FnQWlEWElnQlVFWWFpSVBLQUlBSWhCeUlBVkJIR29pRVNnQ0FDSVNja0VBUjBFZmRFRWZkYTBpS1lNK0FnQWdBaUFvUWlDSVFveTl5ZjRMaENBRFFYOXpyWHdpS0NBcGd6NENBQ0FCSUFkQmYzT3RRcnZBb3ZvS2ZDQW9RaUNJZkNJb0lDbURQZ0lBSUFnZ0NVRi9jNjFDNXJtNzFRdDhJQ2hDSUloOElpZ2dLWU0rQWdBZ0NpQUxRWDl6clVMKy8vLy9EM3dnS0VJZ2lId2lLQ0FwZ3o0Q0FDQU1JQTFCZjNPdFF2Ly8vLzhQZkNBb1FpQ0lmQ0lvSUNtRFBnSUFJQThnRUVGL2M2MUMvLy8vL3c5OElDaENJSWg4SWlnZ0tZTStBZ0FnRVNBU1FYOXpyVUwvLy8vL0Qzd2dLRUlnaUh3Z0tZTStBZ0FnQkVHQUFXb2lBVUVBTmdKNElBRWdHallDQUNBQklCczJBZ1FnQVNBY05nSUlJQUVnSFRZQ0RDQUJJQjQyQWhBZ0FTQWlOZ0lVSUFFZ0h6WUNHQ0FCSUNBMkFod2dBU0FoTmdJZ0lBRWdJellDSkNBQklCTkIvLy8vSDNFMkFpZ2dBU0FVUVFaMFFjRC8veDl4SUJOQkduWnlOZ0lzSUFFZ0ZVRU1kRUdBNFA4ZmNTQVVRUlIyY2pZQ01DQUJJQlpCRW5SQmdJRHdIM0VnRlVFT2RuSTJBalFnQVNBT1FSaDBRWUNBZ0JoeElCWkJDSFp5TmdJNElBRWdEa0VDZGtILy8vOGZjVFlDUENBQlFVQnJJQmRCQkhSQjhQLy9IM0VnRGtFY2RuSTJBZ0FnQVNBWVFRcDBRWUQ0L3g5eElCZEJGblp5TmdKRUlBRWdHVUVRZEVHQWdQd2ZjU0FZUVJCMmNqWUNTQ0FCSUJsQkNuWTJBa3dnQVVFQk5nSlFJQUZCMUFCcUlnSkNBRGNDQUNBQ1FnQTNBZ2dnQWtJQU53SVFJQUpDQURjQ0dDQUNRUUEyQWlBZ0FDQUVRZndCYWlJQ0lBRWdCU0FrRUNjZ0JFRUVhaUlBSUFJUVBTQUFLQUpRQkVBZ0JDUUVRUUFQQ3lBQVFTaHFJZ0VRRnlBQktBSUFRUUZ4QkVBZ0JDUUVRUUFQQzBIOC9mLy9BQ0FHS0FJRWF5RUNRZnovLy84QUlBWW9BZ2hySVFOQi9QLy8vd0FnQmlnQ0RHc2hCVUg4Ly8vL0FDQUdLQUlRYXlFSFFmei8vLzhBSUFZb0FoUnJJUWhCL1AvLy93QWdCaWdDR0dzaENVSDgvLy8vQUNBR0tBSWNheUVLUWZ6Ly8vOEFJQVlvQWlCcklRdEIvUC8vQnlBR0tBSWtheUVNSUFSQnVBTnFJZ0ZCdk9ILy93QWdCaWdDQUdzZ0FDZ0NBR28yQWdBZ0FTQUNJQUFvQWdScU5nSUVJQUVnQXlBQUtBSUlhallDQ0NBQklBVWdBQ2dDREdvMkFnd2dBU0FISUFBb0FoQnFOZ0lRSUFFZ0NDQUFLQUlVYWpZQ0ZDQUJJQWtnQUNnQ0dHbzJBaGdnQVNBS0lBQW9BaHhxTmdJY0lBRWdDeUFBS0FJZ2FqWUNJQ0FCSUF3Z0FDZ0NKR28yQWlRZ0FSQVlRUUJISVFBZ0JDUUVJQUFMa1JFQ0ZYOENmaU1FSVFvakJFSHdBMm9rQkNBS1FkQURhaUlPUWdBM0FBQWdEa0lBTndBSUlBNUNBRGNBRUNBT1FnQTNBQmdnQUVFSWFpSVdLQUlBUlFSQVFmd1FJQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFva0JFRUFEd3NnQVVVRVFFRzlFaUFBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBS0pBUkJBQThMSUFKRkJFQkJ5eElnQUNnQ3JBRWdBQ2dDcUFGQkEzRkJER29SQUFBZ0NpUUVRUUFQQ3lBRFJRUkFRYTBTSUFBb0Fxd0JJQUFvQXFnQlFRTnhRUXhxRVFBQUlBb2tCRUVBRHdzZ0FDQUtRZWdDYWlJQUlBcEIxQUJxSWdzZ0F4QlhJUk1nQ3lnQ0tFRUJjUVIvSUFBZ0FDZ0NBQ0lEUVg5enJVTENndG1CRFh3aUd5QUFRUVJxSWhFb0FnQWlCeUFEY2lBQVFRaHFJZ01vQWdBaUNISWdBRUVNYWlJTUtBSUFJZzF5SUFCQkVHb2lCaWdDQUNJSmNpQUFRUlJxSWhJb0FnQWlGSElnQUVFWWFpSVZLQUlBSWhkeUlBQkJIR29pR0NnQ0FDSVpja0VBUjBFZmRFRWZkYTBpSElNK0FnQWdFU0FiUWlDSVFveTl5ZjRMaENBSFFYOXpyWHdpR3lBY2d6NENBQ0FESUFoQmYzT3RRcnZBb3ZvS2ZDQWJRaUNJZkNJYklCeURweUlRTmdJQUlBd2dEVUYvYzYxQzVybTcxUXQ4SUJ0Q0lJaDhJaHNnSElPbklnODJBZ0FnQmlBSlFYOXpyVUwrLy8vL0Qzd2dHMElnaUh3aUd5QWNnNmNpRFRZQ0FDQVNJQlJCZjNPdFF2Ly8vLzhQZkNBYlFpQ0lmQ0liSUJ5RHB5SU1OZ0lBSUJVZ0YwRi9jNjFDLy8vLy93OThJQnRDSUloOEloc2dISU9uSWdnMkFnQWdHQ0FaUVg5enJVTC8vLy8vRDN3Z0cwSWdpSHdnSElPbklnYzJBZ0FnQUFVZ0FFRUVhaUVSSUFBb0Fod2hCeUFBS0FJWUlRZ2dBQ2dDRkNFTUlBQW9BaEFoRFNBQUtBSU1JUThnQUNnQ0NDRVFJQUFMSVFNZ0NrR29BbW9oQ1NBS1FhZ0JhaUVTSUFwQmtBTnFJZ1lnQjBFWWRqb0FBQ0FHSUFkQkVIWTZBQUVnQmlBSFFRaDJPZ0FDSUFZZ0J6b0FBeUFHSUFoQkdIWTZBQVFnQmlBSVFSQjJPZ0FGSUFZZ0NFRUlkam9BQmlBR0lBZzZBQWNnQmlBTVFSaDJPZ0FJSUFZZ0RFRVFkam9BQ1NBR0lBeEJDSFk2QUFvZ0JpQU1PZ0FMSUFZZ0RVRVlkam9BRENBR0lBMUJFSFk2QUEwZ0JpQU5RUWgyT2dBT0lBWWdEVG9BRHlBR0lBOUJHSFk2QUJBZ0JpQVBRUkIyT2dBUklBWWdEMEVJZGpvQUVpQUdJQTg2QUJNZ0JpQVFRUmgyT2dBVUlBWWdFRUVRZGpvQUZTQUdJQkJCQ0hZNkFCWWdCaUFRT2dBWElBWWdFU2dDQUNJSFFSaDJPZ0FZSUFZZ0IwRVFkam9BR1NBR0lBZEJDSFk2QUJvZ0JpQUhPZ0FiSUFZZ0F5Z0NBQ0lEUVJoMk9nQWNJQVlnQTBFUWRqb0FIU0FHSUFOQkNIWTZBQjRnQmlBRE9nQWZJQXBCc0FOcUlnTWdDeWdDSkNJSVFRNTJPZ0FBSUFNZ0NFRUdkam9BQVNBRElBc29BaUFpQjBFWWRrRURjU0FJUVFKMGNqb0FBaUFESUFkQkVIWTZBQU1nQXlBSFFRaDJPZ0FFSUFNZ0J6b0FCU0FESUFzb0Fod2lCMEVTZGpvQUJpQURJQWRCQ25ZNkFBY2dBeUFIUVFKMk9nQUlJQU1nQ3lnQ0dDSUlRUlIyUVQ5eElBZEJCblJ5T2dBSklBTWdDRUVNZGpvQUNpQURJQWhCQkhZNkFBc2dBeUFMS0FJVUlnZEJGblpCRDNFZ0NFRUVkSEk2QUF3Z0F5QUhRUTUyT2dBTklBTWdCMEVHZGpvQURpQURJQXNvQWhBaUNFRVlka0VEY1NBSFFRSjBjam9BRHlBRElBaEJFSFk2QUJBZ0F5QUlRUWgyT2dBUklBTWdDRG9BRWlBRElBc29BZ3dpQjBFU2Rqb0FFeUFESUFkQkNuWTZBQlFnQXlBSFFRSjJPZ0FWSUFNZ0N5Z0NDQ0lJUVJSMlFUOXhJQWRCQm5SeU9nQVdJQU1nQ0VFTWRqb0FGeUFESUFoQkJIWTZBQmdnQXlBTEtBSUVJZ2RCRm5aQkQzRWdDRUVFZEhJNkFCa2dBeUFIUVE1Mk9nQWFJQU1nQjBFR2Rqb0FHeUFESUFzb0FnQWlDRUVZZGtFRGNTQUhRUUowY2pvQUhDQURJQWhCRUhZNkFCMGdBeUFJUVFoMk9nQWVJQU1nQ0RvQUh5QVRJQTRnQWlBR0lBTkIyUklnQlNBRUJIOGdCQVZCQWd0QkEzRkJDR29SQVFCQkFFZHhJUVFnQ1NBT1FRQVFFQ0FFSUFsQkJHb2lCU2dDQUNJT0lBa29BZ0FpRTNJZ0NVRUlhaUlIS0FJQUloUnlJQWxCREdvaUNDZ0NBQ0lWY2lBSlFSQnFJZ3dvQWdBaUYzSWdDVUVVYWlJTktBSUFJaGh5SUFsQkdHb2lEeWdDQUNJWmNpQUpRUnhxSWhBb0FnQWlHbkpCQUVkeEloRkJBWE1oQ3lBSklCRkJIM1JCSDNVaUJDQVRjU0FMY2pZQ0FDQUZJQVFnRG5FMkFnQWdCeUFFSUJSeE5nSUFJQWdnRlNBRWNUWUNBQ0FNSUJjZ0JIRTJBZ0FnRFNBWUlBUnhOZ0lBSUE4Z0dTQUVjVFlDQUNBUUlCb2dCSEUyQWdBZ0ZpQVNJQWtRS1NBS0lCSVFIeUFLUVNocUlnUVFGeUFFS0FJQVFRRnhCRUFnQ1NBSktBSUFJZ1JCZjNPdFFzS0MyWUVOZkNJYklBVW9BZ0FpRGlBRWNpQUhLQUlBSWdSeUlBZ29BZ0FpRW5JZ0RDZ0NBQ0lXY2lBTktBSUFJaE55SUE4b0FnQWlGSElnRUNnQ0FDSVZja0VBUjBFZmRFRWZkYTBpSElNK0FnQWdCU0FiUWlDSVFveTl5ZjRMaENBT1FYOXpyWHdpR3lBY2d6NENBQ0FISUFSQmYzT3RRcnZBb3ZvS2ZDQWJRaUNJZkNJYklCeURQZ0lBSUFnZ0VrRi9jNjFDNXJtNzFRdDhJQnRDSUloOEloc2dISU0rQWdBZ0RDQVdRWDl6clVMKy8vLy9EM3dnRzBJZ2lId2lHeUFjZ3o0Q0FDQU5JQk5CZjNPdFF2Ly8vLzhQZkNBYlFpQ0lmQ0liSUJ5RFBnSUFJQThnRkVGL2M2MUMvLy8vL3c5OElCdENJSWg4SWhzZ0hJTStBZ0FnRUNBVlFYOXpyVUwvLy8vL0Qzd2dHMElnaUh3Z0hJTStBZ0FMSUFvUUZ5QUJJQW9RTFNBS1FjZ0NhaUlFSUFFZ0FpQURFRDRnQkNBRUlBQVFGU0FFSUFRZ0NSQWFJQUZCSUdvZ0JCQWNJQXBCaUFOcUlnSWdDellDQUVFQUlBSW9BZ0JyUWY4QmN5RURRY0FBSVFJRFFDQUJJQU1nQVMwQUFIRTZBQUFnQVVFQmFpRUJJQUpCZjJvaUFnMEFDeUFKUWdBM0FnQWdDVUlBTndJSUlBbENBRGNDRUNBSlFnQTNBaGdnQUVJQU53SUFJQUJDQURjQ0NDQUFRZ0EzQWhBZ0FFSUFOd0lZSUFaQ0FEY0FBQ0FHUWdBM0FBZ2dCa0lBTndBUUlBWkNBRGNBR0NBS0pBUWdFUXZESWdFVWZ5TUVJUk1qQkVHUUFXb2tCQ0FFUlFSQUlCTWtCRUVBRHdzZ0V5RU5JQk5CS0dvaEJpQVRRUWhxSVFvZ0JVRUFSeUlaQkVBZ0JrR1o1UFNtQWpZQ0FDQUdRUVJxSWhGQjhQenA5UVEyQWdBZ0JrRUlhaUlNUWJuWHZ0QjhOZ0lBSUFaQkRHb2lEMEh0ckl6OUFEWUNBQ0FHUVJCcUlnbEJzY252MXdNMkFnQWdCa0VVYWlJSVFaZS9rK0lFTmdJQUlBWkJHR29pQjBHNXpyRFZCRFlDQUNBR1FSeHFJZzVCaW9yNnBBSTJBZ0FnQmtFZ2FpSVFJQVVwQUFBM0FBQWdFQ0FGS1FBSU53QUlJQkFnQlNrQUVEY0FFQ0FRSUFVcEFCZzNBQmdnRFVFQU5nSUFJQTFCZ0lBTU5nSUVJQVpCUUdzaUJVR3BFeWtBQURjQUFDQUZRYkVUS1FBQU53QUlJQVZCdVJNcEFBQTNBQkFnQmtHQUFUWUNZQ0FHSUEwcEF3QTNBbGdnQmlBUUVBMGdCaWdDQUJBTElSSWdCa0VBTmdJQUlCRW9BZ0FRQ3lFUUlCRkJBRFlDQUNBTUtBSUFFQXNoRVNBTVFRQTJBZ0FnRHlnQ0FCQUxJUXdnRDBFQU5nSUFJQWtvQWdBUUN5RVBJQWxCQURZQ0FDQUlLQUlBRUFzaENTQUlRUUEyQWdBZ0J5Z0NBQkFMSVFnZ0IwRUFOZ0lBSUE0b0FnQVFDeUVISUE1QkFEWUNBQ0FLUVF4cUlnVWdERFlDQUNBS1FSQnFJZzRnRHpZQ0FDQUtRUlJxSWc4Z0NUWUNBQ0FLUVJocUlna2dDRFlDQUNBS1FSeHFJZ2dnQnpZQ0FDQUtJQUlzQUFBZ0VrSC9BWEZ6T2dBQUlBb2dBaXdBQVNBU1FRaDJRZjhCY1hNNkFBRWdDaUFDTEFBQ0lCSkJFSFpCL3dGeGN6b0FBaUFLSUFJc0FBTWdFa0VZZG5NNkFBTWdDaUFDTEFBRUlCQkIvd0Z4Y3pvQUJDQUtJQUlzQUFVZ0VFRUlka0gvQVhGek9nQUZJQW9nQWl3QUJpQVFRUkIyUWY4QmNYTTZBQVlnQ2lBQ0xBQUhJQkJCR0haek9nQUhJQW9nQWl3QUNDQVJRZjhCY1hNNkFBZ2dDaUFDTEFBSklCRkJDSFpCL3dGeGN6b0FDU0FLSUFJc0FBb2dFVUVRZGtIL0FYRnpPZ0FLSUFvZ0Fpd0FDeUFSUVJoMmN6b0FDeUFGSUFJc0FBd2dERUgvQVhGek9nQUFJQW9nQWl3QURTQU1RUWgyUWY4QmNYTTZBQTBnQ2tFT2FpSUZJQVVzQUFBZ0Fpd0FEbk02QUFBZ0NrRVBhaUlGSUFVc0FBQWdBaXdBRDNNNkFBQWdEaUFPTEFBQUlBSXNBQkJ6T2dBQUlBcEJFV29pQlNBRkxBQUFJQUlzQUJGek9nQUFJQXBCRW1vaUJTQUZMQUFBSUFJc0FCSnpPZ0FBSUFwQkUyb2lCU0FGTEFBQUlBSXNBQk56T2dBQUlBOGdEeXdBQUNBQ0xBQVVjem9BQUNBS1FSVnFJZ1VnQlN3QUFDQUNMQUFWY3pvQUFDQUtRUlpxSWdVZ0JTd0FBQ0FDTEFBV2N6b0FBQ0FLUVJkcUlnVWdCU3dBQUNBQ0xBQVhjem9BQUNBSklBa3NBQUFnQWl3QUdITTZBQUFnQ2tFWmFpSUZJQVVzQUFBZ0Fpd0FHWE02QUFBZ0NrRWFhaUlGSUFVc0FBQWdBaXdBR25NNkFBQWdDa0ViYWlJRklBVXNBQUFnQWl3QUczTTZBQUFnQ0NBSUxBQUFJQUlzQUJ4ek9nQUFJQXBCSFdvaUJTQUZMQUFBSUFJc0FCMXpPZ0FBSUFwQkhtb2lCU0FGTEFBQUlBSXNBQjV6T2dBQUlBcEJIMm9pQlNBRkxBQUFJQUlzQUI5ek9nQUFDd0pBQWtBZ0JDd0FBRUhDQUVZRVFDQUVMQUFCUWNrQVJnUkFJQVFzQUFKQjBBQkdCRUFnQkN3QUEwRXdSZ1JBSUFRc0FBUkJNMFlFUUNBRUxBQUZRVFJHQkVBZ0JDd0FCa0V3UmdSQUlBUXNBQWRCTDBZRVFDQUVMQUFJUWU0QVJnUkFJQVFzQUFsQjd3QkdCRUFnQkN3QUNrSHVBRVlFUUNBRUxBQUxRZU1BUmdSQUlBUXNBQXhCNVFCR0JFQWdCQ3dBRFFSQVFSQWhCUXdPQlNBRUxBQU9CRUJCRUNFRkRBOEZJQVFzQUE4RVFFRVFJUVVNRUFVZ0JrRzF0b1d6QkRZQ0FDQUdRZmYvL3FWL05nSUVJQVpCOFl5My9IazJBZ2dnQmtHejlZbWJlRFlDRENBR1FZRGpoWUVHTmdJUUlBWkI0WXpXdVFVMkFoUWdCa0hVdklxTkFqWUNHQ0FHUWN6MndjVUdOZ0ljSUFaQjRBQnFJZ1ZCd0FBMkFnQkJ3QUFoQkFzTEN3VkJFQ0VGREEwTEJVRVFJUVVNREFzRlFSQWhCUXdMQ3dWQkVDRUZEQW9MQlVFUUlRVU1DUXNGUVJBaEJRd0lDd1ZCRUNFRkRBY0xCVUVRSVFVTUJnc0ZRUkFoQlF3RkN3VkJFQ0VGREFRTEJVRVFJUVVNQXdzRlFSQWhCUXdDQ3dWQkVDRUZEQUVMREFFTEEwQWdCVUVBU2dSQUlBUWdCVUYvYWlJSGFpd0FBRVVFUUNBSElRVU1BZ3NMQ3lBR1FlZk1wOUFHTmdJQUlBWkJCR29pRkVHRjNaN2JlellDQUNBR1FRaHFJaFZCOHVhNzR3TTJBZ0FnQmtFTWFpSVdRYnJxdjZwNk5nSUFJQVpCRUdvaUYwSC9wTG1JQlRZQ0FDQUdRUlJxSWhoQmpOR1YySGsyQWdBZ0JrRVlhaUlTUWF1emovd0JOZ0lBSUFaQkhHb2lFRUdabW9QZkJUWUNBQ0FHUWVBQWFpSUpJQVUyQWdBZ0JVSEFBRThFUUNBR1FTQnFJUXdnQlVGQWFpSU9RVUJ4SWc5QlFHc2hDQ0FFSVFjRFFDQU1JQWNwQUFBM0FBQWdEQ0FIS1FBSU53QUlJQXdnQnlrQUVEY0FFQ0FNSUFjcEFCZzNBQmdnRENBSEtRQWdOd0FnSUF3Z0J5a0FLRGNBS0NBTUlBY3BBREEzQURBZ0RDQUhLUUE0TndBNElBZEJRR3NoQnlBR0lBd1FEU0FGUVVCcUlnVkJ3QUJQRFFBTElBUWdDR29oQkNBT0lBOXJJUVVMSUFaQklHb2hDeUFGQkVBZ0N5QUVJQVVRRGhvTElBMGdDU2dDQUNJRlFSMTJRUmgwTmdJQUlBMGdCVUVMZEVHQWdQd0hjU0FGUVJ0MGNpQUZRUVYyUVlEK0EzRnlJQVZCRlhaQi93RnhjallDQkNBSlFUY2dCV3RCUDNFaUNFRUJhaUlFSUFWcU5nSUFBa0FDUUNBRVFjQUFJQVZCUDNFaUIyc2lEa2tFUUVHcEV5RUlJQWNoQlF3QkJTQUxJQWRxUWFrVElBNFFEaG9nRGtHcEUyb2hCU0FHSUFzUURTQUVJQTVySWdSQndBQkpCSDhnQkNFSElBVUZJQWNnQ0dwQmdYOXFJZ2RCQm5ZaER5QU9RVUJxSVFnRFFDQUxJQVVwQUFBM0FBQWdDeUFGS1FBSU53QUlJQXNnQlNrQUVEY0FFQ0FMSUFVcEFCZzNBQmdnQ3lBRktRQWdOd0FnSUFzZ0JTa0FLRGNBS0NBTElBVXBBREEzQURBZ0N5QUZLUUE0TndBNElBVkJRR3NoQlNBR0lBc1FEU0FFUVVCcUlnUkJ3QUJQRFFBTElBZEJQM0VoQnlBUFFRWjBRYWtVYWlBSWFnc2hCQ0FIQkVBZ0JDRUlRUUFoQlNBSElRUU1BZ3NMREFFTElBc2dCV29nQ0NBRUVBNGFDeUFKS0FJQUlnUkJQM0VoQnlBSklBUkJDR28yQWdBQ1FBSkFRY0FBSUFkcklnaEJDRXNFUUNBTklRUWdCeUVGUVFnaEJ3d0JCU0FMSUFkcUlBMGdDQkFPR2lBTklBaHFJUVVnQmlBTEVBMUJDQ0FJYXlJRVFjQUFTUVIvSUFRaEJ5QUZCU0FOSUFkQmlIOXFJZ2RCQm5aQkJuUnFJQWhxUVVCcklRZ0RRQ0FMSUFVcEFBQTNBQUFnQ3lBRktRQUlOd0FJSUFzZ0JTa0FFRGNBRUNBTElBVXBBQmczQUJnZ0N5QUZLUUFnTndBZ0lBc2dCU2tBS0RjQUtDQUxJQVVwQURBM0FEQWdDeUFGS1FBNE53QTRJQVZCUUdzaEJTQUdJQXNRRFNBRVFVQnFJZ1JCd0FCUERRQUxJQWRCUDNFaEJ5QUlDeUVFSUFjRVFFRUFJUVVNQWdzTERBRUxJQXNnQldvZ0JDQUhFQTRhQ3lBR0tBSUFFQXNoRVNBVUtBSUFFQXNoRENBVktBSUFFQXNoRGlBV0tBSUFFQXNoRHlBWEtBSUFFQXNoQ0NBWUtBSUFFQXNoQnlBU0tBSUFFQXNoQlNBUUtBSUFFQXNoQkNBR1FlZk1wOUFHTmdJQUlCUkJoZDJlMjNzMkFnQWdGVUh5NXJ2akF6WUNBQ0FXUWJycXY2cDZOZ0lBSUJkQi82UzVpQVUyQWdBZ0dFR00wWlhZZVRZQ0FDQVNRYXV6ai93Qk5nSUFJQkJCbVpxRDN3VTJBZ0FnQ3lBUk5nSUFJQVlnRERZQ0pDQUdJQTQyQWlnZ0JpQVBOZ0lzSUFZZ0NEWUNNQ0FHSUFjMkFqUWdCaUFGTmdJNElBWWdCRFlDUENBSlFjQUFOZ0lBSUFaQlFHc2dFVFlDQUNBR0lBdzJBa1FnQmlBT05nSklJQVlnRHpZQ1RDQUdJQWcyQWxBZ0JpQUhOZ0pVSUFZZ0JUWUNXQ0FHSUFRMkFsd2dCaUFMRUEwZ0NTSUZLQUlBSVFRTElBVWdCRUVnYWpZQ0FFSEFBQ0FFUVQ5eElnUnJJZ2hCSUVzaEJ5QUdRU0JxSVFrQ1FDQVpCRUFnQndSQUlBb2hBaUFFSVFkQklDRUVCU0FKSUFScUlBb2dDQkFPR2lBS0lBaHFJUUlnQmlBSkVBMUJJQ0FJYXlJRVFjQUFUd1JBQTBBZ0NTQUNLUUFBTndBQUlBa2dBaWtBQ0RjQUNDQUpJQUlwQUJBM0FCQWdDU0FDS1FBWU53QVlJQWtnQWlrQUlEY0FJQ0FKSUFJcEFDZzNBQ2dnQ1NBQ0tRQXdOd0F3SUFrZ0Fpa0FPRGNBT0NBQ1FVQnJJUUlnQmlBSkVBMGdCRUZBYWlJRVFjQUFUdzBBQ3dzZ0JFVU5Ba0VBSVFjTElBa2dCMm9nQWlBRUVBNGFCU0FIQkVBZ0JDRUhRU0FoQkFVZ0NTQUVhaUFDSUFnUURob2dBaUFJYWlFQ0lBWWdDUkFOUVNBZ0NHc2lCRUhBQUU4RVFBTkFJQWtnQWlrQUFEY0FBQ0FKSUFJcEFBZzNBQWdnQ1NBQ0tRQVFOd0FRSUFrZ0Fpa0FHRGNBR0NBSklBSXBBQ0EzQUNBZ0NTQUNLUUFvTndBb0lBa2dBaWtBTURjQU1DQUpJQUlwQURnM0FEZ2dBa0ZBYXlFQ0lBWWdDUkFOSUFSQlFHb2lCRUhBQUU4TkFBc0xJQVJGRFFKQkFDRUhDeUFKSUFkcUlBSWdCQkFPR2dzTElBVW9BZ0FpQWtFL2NTRUVJQVVnQWtFZ2FqWUNBQ0FHUVNCcUlRZ0NRQUpBUWNBQUlBUnJJZ2RCSUVzRVFDQURJUUpCSUNFRERBRUZJQWdnQkdvZ0F5QUhFQTRhSUFNZ0Iyb2hBaUFHSUFnUURVRWdJQWRySWdOQndBQlBCRUFEUUNBSUlBSXBBQUEzQUFBZ0NDQUNLUUFJTndBSUlBZ2dBaWtBRURjQUVDQUlJQUlwQUJnM0FCZ2dDQ0FDS1FBZ053QWdJQWdnQWlrQUtEY0FLQ0FJSUFJcEFEQTNBREFnQ0NBQ0tRQTROd0E0SUFKQlFHc2hBaUFHSUFnUURTQURRVUJxSWdOQndBQlBEUUFMQ3lBREJFQkJBQ0VFREFJTEN3d0JDeUFJSUFScUlBSWdBeEFPR2dzZ0JTZ0NBQ0lDUVQ5eElRTWdCU0FDUVNCcU5nSUFJQVpCSUdvaEJBSkFBa0JCd0FBZ0Eyc2lBa0VnU3dSQVFTQWhBZ3dCQlNBRUlBTnFJQUVnQWhBT0dpQUJJQUpxSVFFZ0JpQUVFQTFCSUNBQ2F5SUNRY0FBVHdSQUEwQWdCQ0FCS1FBQU53QUFJQVFnQVNrQUNEY0FDQ0FFSUFFcEFCQTNBQkFnQkNBQktRQVlOd0FZSUFRZ0FTa0FJRGNBSUNBRUlBRXBBQ2czQUNnZ0JDQUJLUUF3TndBd0lBUWdBU2tBT0RjQU9DQUJRVUJySVFFZ0JpQUVFQTBnQWtGQWFpSUNRY0FBVHcwQUN3c2dBZ1JBUVFBaEF3d0NDd3NNQVFzZ0JDQURhaUFCSUFJUURob0xJQTBnQlNnQ0FDSUJRUjEyUVJoME5nSUFJQTBnQVVFTGRFR0FnUHdIY1NBQlFSdDBjaUFCUVFWMlFZRCtBM0Z5SUFGQkZYWkIvd0Z4Y2pZQ0JDQUZJQUZCTnlBQmEwRS9jVUVCYWlJQ2FqWUNBQ0FHUVNCcUlRUUNRQUpBSUFKQndBQWdBVUUvY1NJQmF5SURTUVJBUWFrVElRTU1BUVVnQkNBQmFrR3BFeUFERUE0YUlBTkJxUk5xSVFFZ0JpQUVFQTBnQWlBRGF5SUNRY0FBVHdSQUEwQWdCQ0FCS1FBQU53QUFJQVFnQVNrQUNEY0FDQ0FFSUFFcEFCQTNBQkFnQkNBQktRQVlOd0FZSUFRZ0FTa0FJRGNBSUNBRUlBRXBBQ2czQUNnZ0JDQUJLUUF3TndBd0lBUWdBU2tBT0RjQU9DQUJRVUJySVFFZ0JpQUVFQTBnQWtGQWFpSUNRY0FBVHcwQUN3c2dBZ1JBSUFFaEEwRUFJUUVNQWdzTERBRUxJQVFnQVdvZ0F5QUNFQTRhQ3lBRktBSUFJZ0ZCUDNFaEF5QUZJQUZCQ0dvMkFnQWdCa0VnYWlFRUFrQUNRRUhBQUNBRGF5SUNRUWhMQkVBZ0RTRUJRUWdoQWd3QkJTQUVJQU5xSUEwZ0FoQU9HaUFOSUFKcUlRRWdCaUFFRUExQkNDQUNheUlDUWNBQVR3UkFBMEFnQkNBQktRQUFOd0FBSUFRZ0FTa0FDRGNBQ0NBRUlBRXBBQkEzQUJBZ0JDQUJLUUFZTndBWUlBUWdBU2tBSURjQUlDQUVJQUVwQUNnM0FDZ2dCQ0FCS1FBd053QXdJQVFnQVNrQU9EY0FPQ0FCUVVCcklRRWdCaUFFRUEwZ0FrRkFhaUlDUWNBQVR3MEFDd3NnQWdSQVFRQWhBd3dDQ3dzTUFRc2dCQ0FEYWlBQklBSVFEaG9MSUFZb0FnQVFDeUVKSUFaQkFEWUNBQ0FHUVFScUlnRW9BZ0FRQ3lFSUlBRkJBRFlDQUNBR1FRaHFJZ0VvQWdBUUN5RUhJQUZCQURZQ0FDQUdRUXhxSWdFb0FnQVFDeUVOSUFGQkFEWUNBQ0FHUVJCcUlnRW9BZ0FRQ3lFRklBRkJBRFlDQUNBR1FSUnFJZ0VvQWdBUUN5RUVJQUZCQURZQ0FDQUdRUmhxSWdFb0FnQVFDeUVESUFGQkFEWUNBQ0FHUVJ4cUlnSW9BZ0FRQ3lFQklBSkJBRFlDQUNBQUlBazJBQUFnQUNBSU5nQUVJQUFnQnpZQUNDQUFJQTAyQUF3Z0FDQUZOZ0FRSUFBZ0JEWUFGQ0FBSUFNMkFCZ2dBQ0FCTmdBY0lCTWtCRUVCQys0RkFRSi9Jd1FoQkNNRVFVQnJKQVFnQkNBRFFTQnFJZ1VwQUFBM0FBQWdCQ0FGS1FBSU53QUlJQVFnQlNrQUVEY0FFQ0FFSUFVcEFCZzNBQmdnQkNBRktRQWdOd0FnSUFRZ0JTa0FLRGNBS0NBRUlBVXBBREEzQURBZ0JDQUZLUUE0TndBNElBSWdCQkFpSUFJb0FnUWdBaWdDQUhJZ0FpZ0NDSElnQWlnQ0RISWdBaWdDRUhJZ0FpZ0NGSElnQWlnQ0dISWdBaWdDSEhJZ0FpZ0NJSElnQWlnQ0pISUVmMEVBQlVIekZTQUFLQUtzQVNBQUtBS29BVUVEY1VFTWFoRUFBRUVCQ3lFRklBRkZCRUFnQlVVRVFDQUVKQVJCQVE4TElBSkJzQWdwQWdBM0FnQWdBa0c0Q0NrQ0FEY0NDQ0FDUWNBSUtRSUFOd0lRSUFKQnlBZ3BBZ0EzQWhnZ0FrSFFDQ2tDQURjQ0lDQUNRZGdJS1FJQU53SW9JQUpCNEFncEFnQTNBakFnQWtIb0NDa0NBRGNDT0NBQ1FVQnJRZkFJS1FJQU53SUFJQUpCK0FncEFnQTNBa2dnQWtHQUNTZ0NBRFlDVUNBRUpBUkJBQThMSUFVRVFDQUNRYkFJS1FJQU53SUFJQUpCdUFncEFnQTNBZ2dnQWtIQUNDa0NBRGNDRUNBQ1FjZ0lLUUlBTndJWUlBSkIwQWdwQWdBM0FpQWdBa0hZQ0NrQ0FEY0NLQ0FDUWVBSUtRSUFOd0l3SUFKQjZBZ3BBZ0EzQWpnZ0FrRkFhMEh3Q0NrQ0FEY0NBQ0FDUWZnSUtRSUFOd0pJSUFKQmdBa29BZ0EyQWxBRklBRWdBeUFFRUJBZ0JDZ0NBQ0FCS0FJRUlBRW9BZ0J5SUFFb0FnaHlJQUVvQWd4eUlBRW9BaEJ5SUFFb0FoUnlJQUVvQWhoeUlBRW9BaHh5UlhJRVFFR1NGaUFBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBQ1FiQUlLUUlBTndJQUlBSkJ1QWdwQWdBM0FnZ2dBa0hBQ0NrQ0FEY0NFQ0FDUWNnSUtRSUFOd0lZSUFKQjBBZ3BBZ0EzQWlBZ0FrSFlDQ2tDQURjQ0tDQUNRZUFJS1FJQU53SXdJQUpCNkFncEFnQTNBamdnQWtGQWEwSHdDQ2tDQURjQ0FDQUNRZmdJS1FJQU53SklJQUpCZ0Frb0FnQTJBbEFGSUFRa0JFRUJEd3NMSUFGQmtBZ3BBZ0EzQWdBZ0FVR1lDQ2tDQURjQ0NDQUJRYUFJS1FJQU53SVFJQUZCcUFncEFnQTNBaGdnQkNRRVFRQUwyeFFDSDM4Q2ZpTUVJUWNqQkVIQUJXb2tCQ0FBS0FJQVJRUkFRYllRSUFBb0Fxd0JJQUFvQXFnQlFRTnhRUXhxRVFBQUlBY2tCRUVBRHdzZ0EwVUVRRUhxRUNBQUtBS3NBU0FBS0FLb0FVRURjVUVNYWhFQUFDQUhKQVJCQUE4TElBSkZCRUJCdUJFZ0FDZ0NyQUVnQUNnQ3FBRkJBM0ZCREdvUkFBQWdCeVFFUVFBUEN5QUJSUVJBUWE4T0lBQW9BcXdCSUFBb0FxZ0JRUU54UVF4cUVRQUFJQWNrQkVFQUR3c2dCMEdRQldvaEJTQUhRZWdFYWlFRUlBZEJ3QVJxSVFZZ0IwSHNBMm9oQ0NBSFFmQUNhaUVQSUFkQjBBSnFJUkFnQjBHd0Ftb2hEU0FIUVpBQ2FpRWFJQWRCbEFGcUlSY2dCMEZBYXlFV0lBSW9BQUFoQ1NBQ0tBQUVJUW9nQWlnQUNDRUxJQUlvQUF3aEV5QUNLQUFRSVE0Z0FpZ0FGQ0VSSUFJb0FCZ2hFaUFDS0FBY0lSUWdCMEVnYWlJTUlBSkJJR29pRlNrQUFEY0FBQ0FNSUJVcEFBZzNBQWdnRENBVktRQVFOd0FRSUF3Z0ZTa0FHRGNBR0NBQ1FVQnJMUUFBSVJVZ0J5QURRUUFRRUFKQUlBb2dDWElnQzNJZ0UzSWdEbklnRVhJZ0VuSWdGSElFUUNBTUtBSUVJQXdvQWdCeUlBd29BZ2h5SUF3b0FneHlJQXdvQWhCeUlBd29BaFJ5SUF3b0FoaHlJQXdvQWh4eVJRMEJJQVFnRkVFWWRqb0FBQ0FFSUJSQkVIWWlHRG9BQVNBRUlCUkJDSFk2QUFJZ0JDQVVPZ0FESUFRZ0VrRVlkam9BQkNBRUlCSkJFSFk2QUFVZ0JDQVNRUWgyT2dBR0lBUWdFam9BQnlBRUlCRkJHSFk2QUFnZ0JDQVJRUkIyT2dBSklBUWdFVUVJZGpvQUNpQUVJQkU2QUFzZ0JDQU9RUmgyT2dBTUlBUWdEa0VRZGpvQURTQUVJQTVCQ0hZNkFBNGdCQ0FPT2dBUElBUWdFMEVZZGlJYk9nQVFJQVFnRTBFUWRqb0FFU0FFSUJOQkNIWTZBQklnQkNBVE9nQVRJQVFnQzBFWWRqb0FGQ0FFSUF0QkVIWTZBQlVnQkNBTFFRaDJPZ0FXSUFRZ0N6b0FGeUFFSUFwQkdIWTZBQmdnQkNBS1FSQjJPZ0FaSUFRZ0NrRUlkam9BR2lBRUlBbzZBQnNnQkNBSlFSaDJPZ0FjSUFRZ0NVRVFkam9BSFNBRUlBbEJDSFk2QUI0Z0JDQUpPZ0FmSUFZZ0JCQWJHaUFWUVFKeEJFQWdCa0VrYWlJY0tBSUFEUUlnQmtFZ2FpSWRLQUlBRFFJZ0JrRWNhaUllS0FJQURRSWdCa0VZYWlJZktBSUFEUUlnQmtFVWFpSWdLQUlBRFFJZ0JrRVFhaUloS0FJQUlnTkJvNktWQ2tzTkFpQUdRUXhxSWlJb0FnQWhBZ0pBSUFOQm82S1ZDa1lFUUNBQ1FkMkZsUU5MRFFRZ0FrSGRoWlVEUmdSQUlBWW9BZ2dpQWtHQ2lQRVBTdzBGSUFKQmdvanhEMGNFUUVIZGhaVURJUUlNQXdzZ0JpZ0NCQ0lDUVl1NW9SdExEUVVnQWtHTHVhRWJSd1JBUWQyRmxRTWhBZ3dEQ3lBR0tBSUFRZTMxcGg1TkJFQkIzWVdWQXlFQ0RBTUxEQVVMQ3dzZ0JpQUdLQUlBUWNHQzJRRnFOZ0lBSUFaQkJHb2lHU0FaS0FJQVFiVEczZ1JxTmdJQUlBWkJDR29pR1NBWktBSUFRZjMzamhCcU5nSUFJQ0lnQWtHaSt1b2NhallDQUNBaElBTkIzTjNxRldvMkFnQWdJRUgvLy84Zk5nSUFJQjlCLy8vL0h6WUNBQ0FlUWYvLy94ODJBZ0FnSFVILy8vOGZOZ0lBSUJ4Qi8vLy9BVFlDQUFzZ0NDQUdJQlZCQVhFUUxFVU5BU0FQSUFnb0FsQTJBbmdnRHlBSUtRSUFOd0lBSUE4Z0NDa0NDRGNDQ0NBUElBZ3BBaEEzQWhBZ0R5QUlLUUlZTndJWUlBOGdDQ2tDSURjQ0lDQVBRU2hxSWdJZ0NFRW9haUlES1FJQU53SUFJQUlnQXlrQ0NEY0NDQ0FDSUFNcEFoQTNBaEFnQWlBREtRSVlOd0lZSUFJZ0F5a0NJRGNDSUNBUFFRRTJBbEFnRDBIVUFHb2lBa0lBTndJQUlBSkNBRGNDQ0NBQ1FnQTNBaEFnQWtJQU53SVlJQUpCQURZQ0lDQUZJQWxCLy8vLy93TnhOZ0lBSUFWQkJHb2lGU0FLUVFKMFFmei8vLzhEY1NBSlFSNTJjallDQUNBRlFRaHFJZ0lnQzBFRWRFSHcvLy8vQTNFZ0NrRWNkbkkyQWdBZ0JVRU1haUlESUJOQkJuUkJ3UC8vL3dOeElBdEJHblp5TmdJQUlBVkJFR29pQmlBT1FRaDBRWUQrLy84RGNTQWJjallDQUNBRlFSUnFJZ2dnRVVFS2RFR0ErUC8vQTNFZ0RrRVdkbkkyQWdBZ0JVRVlhaUlKSUJKQkRIUkJnT0QvL3dOeElCRkJGSFp5TmdJQUlBVkJIR29pQ2lBVVFRNTBRWUNBLy84RGNTQVNRUkoyY2pZQ0FDQUZRU0JxSWdzZ0dEWUNBQ0FGUWF3SkVDWWdBaWdDQUNFQ0lBTW9BZ0FoQXlBR0tBSUFJUVlnQ0NnQ0FDRUlJQWtvQWdBaENTQUtLQUlBSVFvZ0N5Z0NBQ0VMSUJBZ0ZTZ0NBQ0lPUVI1MElBVW9BZ0J5TmdJQUlCQWdBa0VjZENBT1FRSjJjallDQkNBUUlBTkJHblFnQWtFRWRuSTJBZ2dnRUNBR1FSaDBJQU5CQm5aeU5nSU1JQkFnQ0VFV2RDQUdRUWgyY2pZQ0VDQVFJQWxCRkhRZ0NFRUtkbkkyQWhRZ0VDQUtRUkowSUFsQkRIWnlOZ0lZSUJBZ0MwRVFkQ0FLUVE1MmNqWUNIQ0FOSUJBZ0J4QVZJQTBnRFNnQ0FDSUNRWDl6clVMQ2d0bUJEWHdpSXlBTlFRUnFJZ01vQWdBaUJpQUNjaUFOUVFocUlnSW9BZ0FpQ0hJZ0RVRU1haUlKS0FJQUlncHlJQTFCRUdvaUN5Z0NBQ0lPY2lBTlFSUnFJaEVvQWdBaUVuSWdEVUVZYWlJVEtBSUFJaFJ5SUExQkhHb2lGU2dDQUNJWWNrRUFSMEVmZEVFZmRhMGlKSU0rQWdBZ0F5QWpRaUNJUW95OXlmNExoQ0FHUVg5enJYd2lJeUFrZ3o0Q0FDQUNJQWhCZjNPdFFydkFvdm9LZkNBalFpQ0lmQ0lqSUNTRFBnSUFJQWtnQ2tGL2M2MUM1cm03MVF0OElDTkNJSWg4SWlNZ0pJTStBZ0FnQ3lBT1FYOXpyVUwrLy8vL0Qzd2dJMElnaUh3aUl5QWtnejRDQUNBUklCSkJmM090UXYvLy8vOFBmQ0FqUWlDSWZDSWpJQ1NEUGdJQUlCTWdGRUYvYzYxQy8vLy8vdzk4SUNOQ0lJaDhJaU1nSklNK0FnQWdGU0FZUVg5enJVTC8vLy8vRDN3Z0kwSWdpSHdnSklNK0FnQWdHaUFRSUF3UUZTQUFJQmNnRHlBYUlBMFFKeUFXSUJjUVBTQVhLQUo0UlFSQUlBVWdGaWtDQURjQ0FDQUZJQllwQWdnM0FnZ2dCU0FXS1FJUU53SVFJQVVnRmlrQ0dEY0NHQ0FGSUJZcEFpQTNBaUFnQlJBUElBUWdGa0VvYWlJQUtRSUFOd0lBSUFRZ0FDa0NDRGNDQ0NBRUlBQXBBaEEzQWhBZ0JDQUFLUUlZTndJWUlBUWdBQ2tDSURjQ0lDQUVFQThnQlNnQ0NDRUFJQVVvQWd3aEFpQUZLQUlVUVFKMElBVW9BaEFpRDBFWWRuSWdCU2dDR0NJUVFSeDBjaUVJSUFVb0Fod2hBeUFGS0FJa1FRcDBJQVVvQWlBaUZrRVFkbkloQ1NBRUtBSUVJZ3BCR25RZ0JDZ0NBSEloQ3lBRUtBSUlJUVlnQkNnQ0RDRU1JQVFvQWhSQkFuUWdCQ2dDRUNJT1FSaDJjaUFFS0FJWUloRkJISFJ5SVJJZ0JDZ0NIQ0VOSUFRb0FpUkJDblFnQkNnQ0lDSUVRUkIyY2lFVElBRWdCU2dDQkNJVVFScDBJQVVvQWdCeU5nQUFJQUVnQUVFVWRDQVVRUVoyY2pZQUJDQUJJQUpCRG5RZ0FFRU1kbkkyQUFnZ0FTQVBRUWgwSUFKQkVuWnlOZ0FNSUFFZ0NEWUFFQ0FCSUFOQkZuUWdFRUVFZG5JMkFCUWdBU0FXUVJCMElBTkJDblp5TmdBWUlBRWdDVFlBSENBQklBczJBQ0FnQVNBR1FSUjBJQXBCQm5aeU5nQWtJQUVnREVFT2RDQUdRUXgyY2pZQUtDQUJJQTVCQ0hRZ0RFRVNkbkkyQUN3Z0FTQVNOZ0F3SUFFZ0RVRVdkQ0FSUVFSMmNqWUFOQ0FCSUFSQkVIUWdEVUVLZG5JMkFEZ2dBU0FUTmdBOElBY2tCRUVCRHdzTEN5QUJRZ0EzQUFBZ0FVSUFOd0FJSUFGQ0FEY0FFQ0FCUWdBM0FCZ2dBVUlBTndBZ0lBRkNBRGNBS0NBQlFnQTNBREFnQVVJQU53QTRJQWNrQkVFQUM3UUNBUU4vSXdRaEJpTUVRZEFBYWlRRUlBQW9BZ2hGQkVCQi9CQWdBQ2dDckFFZ0FDZ0NxQUZCQTNGQkRHb1JBQUFnQmlRRVFRQVBDeUFDUlFSQVFlb1FJQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFZa0JFRUFEd3NnQVVVRVFFRzRFU0FBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBR0pBUkJBQThMSUFaQktHb2hCeUFHUVFocUlRZ2dBd1IvSUFBZ0J5QUlJQVlnQWlBRElBUWdCUkJBSVFJZ0JpZ0NBQ0VBSUFFZ0J5a0FBRGNBQUNBQklBY3BBQWczQUFnZ0FTQUhLUUFRTndBUUlBRWdCeWtBR0RjQUdDQUJRU0JxSWdNZ0NDa0FBRGNBQUNBRElBZ3BBQWczQUFnZ0F5QUlLUUFRTndBUUlBTWdDQ2tBR0RjQUdDQUJRVUJySUFBNkFBQWdCaVFFSUFJRlFjb1JJQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFZa0JFRUFDd3Y3QVFFQ2Z5TUVJUVFqQkVGQWF5UUVJQUZGQkVCQmx4QWdBQ2dDckFFZ0FDZ0NxQUZCQTNGQkRHb1JBQUFnQkNRRVFRQVBDeUFEUlFSQVFmc1BJQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFRa0JFRUFEd3NnQkVFZ2FpRUZJQUlFZnlBRklBTXBBQUEzQUFBZ0JTQURLUUFJTndBSUlBVWdBeWtBRURjQUVDQUZJQU1wQUJnM0FCZ2dCQ0FEUVNCcUlnQXBBQUEzQUFBZ0JDQUFLUUFJTndBSUlBUWdBQ2tBRURjQUVDQUVJQUFwQUJnM0FCZ2dBaUFEUVVCckxRQUFOZ0lBSUFFZ0JSQWNJQUZCSUdvZ0JCQWNJQVFrQkVFQkJVR2ZFaUFBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBRUpBUkJBQXNMN0FJQkEzOGpCQ0VFSXdSQjBBQnFKQVFnQkVFQU5nSUFJQUZGQkVCQit3OGdBQ2dDckFFZ0FDZ0NxQUZCQTNGQkRHb1JBQUFnQkNRRVFRQVBDeUFDUlFSQVFZY1FJQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFRa0JFRUFEd3NnQTBFRFN3UkFRWVlTSUFBb0Fxd0JJQUFvQXFnQlFRTnhRUXhxRVFBQUlBUWtCRUVBRHdzZ0JFRW9haUlGSUFJZ0JCQVFJQVFvQWdBaEFDQUVRUWhxSWdZZ0FrRWdhaUFFRUJBZ0JDZ0NBQ0FBY2tVaUFDRUNJQUFFZnlBQklBVXBBQUEzQUFBZ0FTQUZLUUFJTndBSUlBRWdCU2tBRURjQUVDQUJJQVVwQUJnM0FCZ2dBVUVnYWlJQUlBWXBBQUEzQUFBZ0FDQUdLUUFJTndBSUlBQWdCaWtBRURjQUVDQUFJQVlwQUJnM0FCZ2dBVUZBYXlBRE9nQUFJQVFrQkNBQ0JTQUJRZ0EzQUFBZ0FVSUFOd0FJSUFGQ0FEY0FFQ0FCUWdBM0FCZ2dBVUlBTndBZ0lBRkNBRGNBS0NBQlFnQTNBREFnQVVJQU53QTRJQUZCUUd0QkFEb0FBQ0FFSkFRZ0Fnc0xqbWdDYlg4Q2ZpTUVJUlFqQkVHZ0hHb2tCQ0FVUWZBQmFpSkdRUUEyQWdBZ0FVVUVRRUdrRHlBQUtBS3NBU0FBS0FLb0FVRURjVUVNYWhFQUFDQVVKQVJCQUE4TElBSkZCRUJCNlJFZ0FDZ0NyQUVnQUNnQ3FBRkJBM0ZCREdvUkFBQWdGQ1FFUVFBUEN5QURSUVJBUWZjUklBQW9BcXdCSUFBb0FxZ0JRUU54UVF4cUVRQUFJQlFrQkVFQUR3c2dBaWdBQkNFV0lBSW9BQWdoRnlBQ0tBQU1JUmdnQWlnQUVDRUdJQUlvQUJRaEdTQUNLQUFZSVJvZ0FpZ0FIQ0VvSUFJb0FDQWhJU0FDS0FBa0lRNGdBaWdBS0NFUElBSW9BQ3doSXlBQ0tBQXdJUjBnQWlnQU5DRWtJQUlvQURnaEpTQUNLQUE4SVNZZ0ZFRWdhaUlSSUFJb0FBQWlBa0gvLy84ZmNUWUNBQ0FSUVFScUlrZ2dGa0VHZEVIQS8vOGZjU0FDUVJwMmNpSW5OZ0lBSUJGQkNHb2lTU0FYUVF4MFFZRGcveDl4SUJaQkZIWnlJaDQyQWdBZ0VVRU1haUpLSUJoQkVuUkJnSUR3SDNFZ0YwRU9kbklpSHpZQ0FDQVJRUkJxSWtzZ0JrRVlkRUdBZ0lBWWNTQVlRUWgyY2lJV05nSUFJQkZCRkdvaVRDQUdRUUoyUWYvLy94OXhJaGMyQWdBZ0VVRVlhaUpOSUJsQkJIUkI4UC8vSDNFZ0JrRWNkbklpR0RZQ0FDQVJRUnhxSWs0Z0drRUtkRUdBK1A4ZmNTQVpRUloyY2lJWk5nSUFJQkZCSUdvaVR5QW9RUkIwUVlDQS9COXhJQnBCRUhaeUlobzJBZ0FnRVVFa2FpSlFJQ2hCQ25ZaUFqWUNBQ0FSSUNGQi8vLy9IM0UyQWlnZ0VVRXNhaUpSSUE1QkJuUkJ3UC8vSDNFZ0lVRWFkbkkyQWdBZ0VVRXdhaUpTSUE5QkRIUkJnT0QvSDNFZ0RrRVVkbkkyQWdBZ0VVRTBhaUpUSUNOQkVuUkJnSUR3SDNFZ0QwRU9kbkkyQWdBZ0VVRTRhaUpVSUIxQkdIUkJnSUNBR0hFZ0kwRUlkbkkyQWdBZ0VVRThhaUpWSUIxQkFuWkIvLy8vSDNFMkFnQWdFVUZBYXlKV0lDUkJCSFJCOFAvL0gzRWdIVUVjZG5JMkFnQWdFVUhFQUdvaVZ5QWxRUXAwUVlENC94OXhJQ1JCRm5aeU5nSUFJQkZCeUFCcUlsZ2dKa0VRZEVHQWdQd2ZjU0FsUVJCMmNqWUNBQ0FSUWN3QWFpSlpJQ1pCQ25ZMkFnQWdFVUhRQUdvaUQwRUFOZ0lBSUNjZ0VTZ0NBSElnSG5JZ0gzSWdGbklnRjNJZ0dISWdHWElnR25JZ0FuSkZCRUJCOHhVZ0FDZ0NyQUVnQUNnQ3FBRkJBM0ZCREdvUkFBQUxJQlJCaUFwcUlSQWdGRUhBQkdvaERDQVVJQU1nUmhBUUlFWWdSaWdDQUNBVVFRUnFJaU1vQWdBaUpDQVVLQUlBSWlWeUlCUkJDR29pSmlnQ0FDSW5jaUFVUVF4cUloNG9BZ0FpSDNJZ0ZFRVFhaUlXS0FJQUloZHlJQlJCRkdvaUdDZ0NBQ0laY2lBVVFSaHFJaG9vQWdBaUEzSWdGRUVjYWlJQ0tBSUFJZ0J5UlhJaURqWUNBQ0FVSUE1QmYyb2lJU0FsY1NBT1FRRnhjallDQUNBaklDUWdJWEUyQWdBZ0ppQW5JQ0Z4TmdJQUlCNGdIeUFoY1RZQ0FDQVdJQmNnSVhFMkFnQWdHQ0FaSUNGeE5nSUFJQm9nQXlBaGNUWUNBQ0FDSUFBZ0lYRTJBZ0FnRkVHZ0cyb2lDeUFVUVpRS0VDVWdDeWdDTkNFRElBc29BamdoQWlBTEtBSThJUUFnRkVINEdtb2lEU0FMS0FJc1FSOTJRZjhEYWtFSWRrRUJjVUVCYzYwZ0N5Z0NNSzE4SW5NK0FnQWdEU0J6UWlDSUlBT3RmQ0p6UGdJRUlBMGdjMElnaUNBQ3JYd2ljejRDQ0NBTklITkNJSWdnQUsxOEluTStBZ3dnRFNCelFpQ0lQZ0lRSUExQkFEWUNGQ0FOUVFBMkFoZ2dEVUVBTmdJY0lBc2dGRUcwQ2hBbElBc29BalFoQXlBTEtBSTRJUUlnQ3lnQ1BDRUFJQlJCb0JwcUlnb2dDeWdDTEVFZmRrSC9BMnBCQ0haQkFYRkJBWE90SUFzb0FqQ3RmQ0p6UGdJQUlBb2djMElnaUNBRHJYd2ljejRDQkNBS0lITkNJSWdnQXExOEluTStBZ2dnQ2lCelFpQ0lJQUN0ZkNKelBnSU1JQW9nYzBJZ2lENENFQ0FLUVFBMkFoUWdDa0VBTmdJWUlBcEJBRFlDSENBTklBMUIxQWtRRlNBS0lBcEI5QWtRRlNBVVFmZ0NhaUlqSUEwZ0NoQWFJQlJCbUFOcUlnNGdJMEhVQ2hBVklBNGdEaWdDQUNJQVFYOXpyVUxDZ3RtQkRYd2ljeUFPUVFScUlpUW9BZ0FpSlNBQWNpQU9RUWhxSWlZb0FnQWlKM0lnRGtFTWFpSWVLQUlBSWg5eUlBNUJFR29pRmlnQ0FDSVhjaUFPUVJScUloZ29BZ0FpR1hJZ0RrRVlhaUlhS0FJQUlnTnlJQTVCSEdvaUFpZ0NBQ0lBY2tFQVIwRWZkRUVmZGEwaWRJTStBZ0FnSkNCelFpQ0lRb3k5eWY0TGhDQWxRWDl6clh3aWN5QjBnejRDQUNBbUlDZEJmM090UXJ2QW92b0tmQ0J6UWlDSWZDSnpJSFNEUGdJQUlCNGdIMEYvYzYxQzVybTcxUXQ4SUhOQ0lJaDhJbk1nZElNK0FnQWdGaUFYUVg5enJVTCsvLy8vRDN3Z2MwSWdpSHdpY3lCMGd6NENBQ0FZSUJsQmYzT3RRdi8vLy84UGZDQnpRaUNJZkNKeklIU0RQZ0lBSUJvZ0EwRi9jNjFDLy8vLy93OThJSE5DSUloOEluTWdkSU0rQWdBZ0FpQUFRWDl6clVMLy8vLy9EM3dnYzBJZ2lId2dkSU0rQWdBZ0RpQU9JQlFRR2lBVVFmUUJhaUpFSUE0UU5TRmFJQlJCdUFOcUlrVWdJeEExSVZzZ0ZFSDBBR29pSUVINEFHb2lJaUFQS0FJQU5nSUFJQ0FnRVNrQ0FEY0NBQ0FnSUJFcEFnZzNBZ2dnSUNBUktRSVFOd0lRSUNBZ0VTa0NHRGNDR0NBZ0lCRXBBaUEzQWlBZ0lFRW9haUl1SUJGQktHb2lLeWtDQURjQ0FDQXVJQ3NwQWdnM0FnZ2dMaUFyS1FJUU53SVFJQzRnS3lrQ0dEY0NHQ0F1SUNzcEFpQTNBaUFnSUVIUUFHb2lMRUVCTmdJQUlDQkIxQUJxSWhKQ0FEY0NBQ0FTUWdBM0FnZ2dFa0lBTndJUUlCSkNBRGNDR0NBU1FRQTJBaUFnRkVIQUVtb2lGU0FVUVlBUWFpSUdJQ0FRTkNBVVFlQUthaUlIUWN3RWFpSUlJQlZCNUFacUlnQXBBZ0EzQWdBZ0NDQUFLUUlJTndJSUlBZ2dBQ2tDRURjQ0VDQUlJQUFwQWhnM0FoZ2dDQ0FBS1FJZ053SWdJQWRCOUFScUloMGdGVUdNQjJvaUFDa0NBRGNDQUNBZElBQXBBZ2czQWdnZ0hTQUFLUUlRTndJUUlCMGdBQ2tDR0RjQ0dDQWRJQUFwQWlBM0FpQWdCMEdZQldvaURpZ0NBQ0lQUVJaMklnQkIwUWRzSUIwb0FnQnFJU2dnQUVFR2RDQUhRZmdFYWlJaktBSUFhaUFvUVJwMmFpSWtRUnAySUFkQi9BUnFJaVVvQWdCcUlpWkJHbllnQjBHQUJXb2lKeWdDQUdvaUhrRWFkaUFIUVlRRmFpSWZLQUlBYWlJV1FScDJJQWRCaUFWcUloY29BZ0JxSWhoQkduWWdCMEdNQldvaUdTZ0NBR29pR2tFYWRpQUhRWkFGYWlJREtBSUFhaUlDUVJwMklBZEJsQVZxSWdBb0FnQnFJU0VnSFNBb1FmLy8veDl4TmdJQUlDTWdKRUgvLy84ZmNUWUNBQ0FsSUNaQi8vLy9IM0UyQWdBZ0p5QWVRZi8vL3g5eE5nSUFJQjhnRmtILy8vOGZjVFlDQUNBWElCaEIvLy8vSDNFMkFnQWdHU0FhUWYvLy94OXhOZ0lBSUFNZ0FrSC8vLzhmY1RZQ0FDQUFJQ0ZCLy8vL0gzRTJBZ0FnRGlBaFFScDJJQTlCLy8vL0FYRnFOZ0lBSUJSQjRBbHFJakFnRlVHMEIyb2lBQ2tDQURjQ0FDQXdJQUFwQWdnM0FnZ2dNQ0FBS1FJUU53SVFJREFnQUNrQ0dEY0NHQ0F3SUFBcEFpQTNBaUFnQjBFQU5nS2NCU0FLSUFaQm1BSnFJZ0FwQWdBM0FnQWdDaUFBS1FJSU53SUlJQW9nQUNrQ0VEY0NFQ0FLSUFBcEFoZzNBaGdnQ2lBQUtRSWdOd0lnSUFzZ0NoQUtJQTBnQ3lBS0VBd2dCMEg0QTJvZ0ZVSG9CV29nQ3hBTUlBZEJvQVJxSUJWQmtBWnFJQTBRRENBSElCVW9BdUFHTmdMSUJDQUtJQW9nQmtId0FXb1FEQ0FMSUFvUUNpQU5JQXNnQ2hBTUlBZEJwQU5xSUJWQjdBUnFJQXNRRENBSFFjd0RhaUFWUVpRRmFpQU5FQXdnQnlBVktBTGtCVFlDOUFNZ0NpQUtJQVpCeUFGcUVBd2dDeUFLRUFvZ0RTQUxJQW9RRENBSFFkQUNhaUFWUWZBRGFpQUxFQXdnQjBINEFtb2dGVUdZQkdvZ0RSQU1JQWNnRlNnQzZBUTJBcUFESUFvZ0NpQUdRYUFCYWhBTUlBc2dDaEFLSUEwZ0N5QUtFQXdnQjBIOEFXb2dGVUgwQW1vZ0N4QU1JQWRCcEFKcUlCVkJuQU5xSUEwUURDQUhJQlVvQXV3RE5nTE1BaUFLSUFvZ0JrSDRBR29RRENBTElBb1FDaUFOSUFzZ0NoQU1JQWRCcUFGcUlCVkIrQUZxSUFzUURDQUhRZEFCYWlBVlFhQUNhaUFORUF3Z0J5QVZLQUx3QWpZQytBRWdDaUFLSUFaQjBBQnFFQXdnQ3lBS0VBb2dEU0FMSUFvUURDQUhRZFFBYWlBVlFmd0FhaUFMRUF3Z0IwSDhBR29nRlVHa0FXb2dEUkFNSUFjZ0ZTZ0M5QUUyQXFRQklBb2dDaUFHUVNocUVBd2dDeUFLRUFvZ0RTQUxJQW9RRENBSElCVWdDeEFNSUFkQktHb2lMU0FWUVNocUlBMFFEQ0FISUJVb0FuZzJBbEJCQUNFQUEwQWdCeUFBUWRRQWJHcEJ6QUJxSWlnb0FnQWlJVUVXZGlJQ1FkRUhiQ0FISUFCQjFBQnNha0VvYWlJT0tBSUFhaUVHSUFKQkJuUWdCeUFBUWRRQWJHcEJMR29pRHlnQ0FHb2dCa0VhZG1vaUkwRWFkaUFISUFCQjFBQnNha0V3YWlJa0tBSUFhaUlsUVJwMklBY2dBRUhVQUd4cVFUUnFJaVlvQWdCcUlpZEJHbllnQnlBQVFkUUFiR3BCT0dvaUhpZ0NBR29pSDBFYWRpQUhJQUJCMUFCc2FrRThhaUlXS0FJQWFpSVhRUnAySUFjZ0FFSFVBR3hxUVVCckloZ29BZ0JxSWhsQkduWWdCeUFBUWRRQWJHcEJ4QUJxSWhvb0FnQnFJZ05CR25ZZ0J5QUFRZFFBYkdwQnlBQnFJZ0lvQWdCcUlSMGdEaUFHUWYvLy94OXhOZ0lBSUE4Z0kwSC8vLzhmY1RZQ0FDQWtJQ1ZCLy8vL0gzRTJBZ0FnSmlBblFmLy8veDl4TmdJQUlCNGdIMEgvLy84ZmNUWUNBQ0FXSUJkQi8vLy9IM0UyQWdBZ0dDQVpRZi8vL3g5eE5nSUFJQm9nQTBILy8vOGZjVFlDQUNBQ0lCMUIvLy8vSDNFMkFnQWdLQ0FkUVJwMklDRkIvLy8vQVhGcU5nSUFJQUJCQVdvaUFFRUlSdzBBQ3lBTUlBY3BBZ0EzQWdBZ0RDQUhLUUlJTndJSUlBd2dCeWtDRURjQ0VDQU1JQWNwQWhnM0FoZ2dEQ0FIS1FJZ053SWdJQXdnQnlrQ0tEY0NLQ0FNSUFjcEFqQTNBakFnRENBSEtRSTROd0k0SUF4QlFHc2dCMEZBYXlrQ0FEY0NBQ0FNSUFjcEFrZzNBa2dnRENBSEtBSlFOZ0pRSUF3Z0RFSDBDaEFNSUF4QjFBQnFJZ0lnQjBIVUFHb2lBQ2tDQURjQ0FDQUNJQUFwQWdnM0FnZ2dBaUFBS1FJUU53SVFJQUlnQUNrQ0dEY0NHQ0FDSUFBcEFpQTNBaUFnQWlBQUtRSW9Od0lvSUFJZ0FDa0NNRGNDTUNBQ0lBQXBBamczQWpnZ0FrRkFheUFBUVVCcktRSUFOd0lBSUFJZ0FDa0NTRGNDU0NBQ0lBQW9BbEEyQWxBZ0FpQUNRZlFLRUF3Z0RFR29BV29pQWlBSFFhZ0JhaUlBS1FJQU53SUFJQUlnQUNrQ0NEY0NDQ0FDSUFBcEFoQTNBaEFnQWlBQUtRSVlOd0lZSUFJZ0FDa0NJRGNDSUNBQ0lBQXBBaWczQWlnZ0FpQUFLUUl3TndJd0lBSWdBQ2tDT0RjQ09DQUNRVUJySUFCQlFHc3BBZ0EzQWdBZ0FpQUFLUUpJTndKSUlBSWdBQ2dDVURZQ1VDQUNJQUpCOUFvUURDQU1RZndCYWlJQ0lBZEIvQUZxSWdBcEFnQTNBZ0FnQWlBQUtRSUlOd0lJSUFJZ0FDa0NFRGNDRUNBQ0lBQXBBaGczQWhnZ0FpQUFLUUlnTndJZ0lBSWdBQ2tDS0RjQ0tDQUNJQUFwQWpBM0FqQWdBaUFBS1FJNE53STRJQUpCUUdzZ0FFRkFheWtDQURjQ0FDQUNJQUFwQWtnM0FrZ2dBaUFBS0FKUU5nSlFJQUlnQWtIMENoQU1JQXhCMEFKcUlnSWdCMEhRQW1vaUFDa0NBRGNDQUNBQ0lBQXBBZ2czQWdnZ0FpQUFLUUlRTndJUUlBSWdBQ2tDR0RjQ0dDQUNJQUFwQWlBM0FpQWdBaUFBS1FJb053SW9JQUlnQUNrQ01EY0NNQ0FDSUFBcEFqZzNBamdnQWtGQWF5QUFRVUJyS1FJQU53SUFJQUlnQUNrQ1NEY0NTQ0FDSUFBb0FsQTJBbEFnQWlBQ1FmUUtFQXdnREVHa0Eyb2lBaUFIUWFRRGFpSUFLUUlBTndJQUlBSWdBQ2tDQ0RjQ0NDQUNJQUFwQWhBM0FoQWdBaUFBS1FJWU53SVlJQUlnQUNrQ0lEY0NJQ0FDSUFBcEFpZzNBaWdnQWlBQUtRSXdOd0l3SUFJZ0FDa0NPRGNDT0NBQ1FVQnJJQUJCUUdzcEFnQTNBZ0FnQWlBQUtRSklOd0pJSUFJZ0FDZ0NVRFlDVUNBQ0lBSkI5QW9RRENBTVFmZ0RhaUlDSUFkQitBTnFJZ0FwQWdBM0FnQWdBaUFBS1FJSU53SUlJQUlnQUNrQ0VEY0NFQ0FDSUFBcEFoZzNBaGdnQWlBQUtRSWdOd0lnSUFJZ0FDa0NLRGNDS0NBQ0lBQXBBakEzQWpBZ0FpQUFLUUk0TndJNElBSkJRR3NnQUVGQWF5a0NBRGNDQUNBQ0lBQXBBa2czQWtnZ0FpQUFLQUpRTmdKUUlBSWdBa0gwQ2hBTUlBeEJ6QVJxSWdBZ0NDa0NBRGNDQUNBQUlBZ3BBZ2czQWdnZ0FDQUlLUUlRTndJUUlBQWdDQ2tDR0RjQ0dDQUFJQWdwQWlBM0FpQWdBQ0FJS1FJb053SW9JQUFnQ0NrQ01EY0NNQ0FBSUFncEFqZzNBamdnQUVGQWF5QUlRVUJyS1FJQU53SUFJQUFnQ0NrQ1NEY0NTQ0FBSUFnb0FsQTJBbEFnQUNBQVFmUUtFQXdnUkNnQ2dBRWlLa0VmZFNJQUlDcHFJQUJ6SWk5QkFYVWhDU0FRSUFjcEFnQTNBZ0FnRUNBSEtRSUlOd0lJSUJBZ0J5a0NFRGNDRUNBUUlBY3BBaGczQWhnZ0VDQUhLUUlnTndJZ0lCQkJLR29pRXlBdEtRSUFOd0lBSUJNZ0xTa0NDRGNDQ0NBVElDMHBBaEEzQWhBZ0V5QXRLUUlZTndJWUlCTWdMU2tDSURjQ0lFRUJJUVlnRUNnQ0FDRWVJQkJCQkdvaU1TZ0NBQ0VmSUJCQkNHb2lNaWdDQUNFV0lCQkJER29pTXlnQ0FDRVhJQkJCRUdvaU5DZ0NBQ0VZSUJCQkZHb2lOU2dDQUNFWklCQkJHR29pTmlnQ0FDRWFJQkJCSEdvaU55Z0NBQ0VESUJCQklHb2lPQ2dDQUNFQ0lCQkJKR29pT1NnQ0FDRUFJQk1vQWdBaEhTQVFRU3hxSWpvb0FnQWhLQ0FRUVRCcUlqc29BZ0FoSVNBUVFUUnFJandvQWdBaERpQVFRVGhxSWowb0FnQWhEeUFRUVR4cUlqNG9BZ0FoSXlBUVFVQnJJajhvQWdBaEpDQVFRY1FBYWlKQUtBSUFJU1VnRUVISUFHb2lRU2dDQUNFbUlCQkJ6QUJxSWtJb0FnQWhKd05BSUFjZ0JrSFVBR3hxS0FJQUlRZ2dCaUFKUmlJcEJFQWdDQ0VlQ3lBSElBWkIxQUJzYWlnQ0JDRUlJQ2tFUUNBSUlSOExJQWNnQmtIVUFHeHFLQUlJSVFnZ0tRUkFJQWdoRmdzZ0J5QUdRZFFBYkdvb0Fnd2hDQ0FwQkVBZ0NDRVhDeUFISUFaQjFBQnNhaWdDRUNFSUlDa0VRQ0FJSVJnTElBY2dCa0hVQUd4cUtBSVVJUWdnS1FSQUlBZ2hHUXNnQnlBR1FkUUFiR29vQWhnaENDQXBCRUFnQ0NFYUN5QUhJQVpCMUFCc2FpZ0NIQ0VJSUNrRVFDQUlJUU1MSUFjZ0JrSFVBR3hxS0FJZ0lRZ2dLUVJBSUFnaEFnc2dCeUFHUWRRQWJHb29BaVFoQ0NBcEJFQWdDQ0VBQ3lBSElBWkIxQUJzYWlnQ0tDRUlJQ2tFUUNBSUlSMExJQWNnQmtIVUFHeHFLQUlzSVFnZ0tRUkFJQWdoS0FzZ0J5QUdRZFFBYkdvb0FqQWhDQ0FwQkVBZ0NDRWhDeUFISUFaQjFBQnNhaWdDTkNFSUlDa0VRQ0FJSVE0TElBY2dCa0hVQUd4cUtBSTRJUWdnS1FSQUlBZ2hEd3NnQnlBR1FkUUFiR29vQWp3aENDQXBCRUFnQ0NFakN5QUhJQVpCMUFCc2FrRkFheWdDQUNFSUlDa0VRQ0FJSVNRTElBY2dCa0hVQUd4cUtBSkVJUWdnS1FSQUlBZ2hKUXNnQnlBR1FkUUFiR29vQWtnaENDQXBCRUFnQ0NFbUN5QUhJQVpCMUFCc2FpZ0NUQ0VJSUNrRVFDQUlJU2NMSUFaQkFXb2lCa0VJUncwQUN5QVFJQjQyQWdBZ01TQWZOZ0lBSURJZ0ZqWUNBQ0F6SUJjMkFnQWdOQ0FZTmdJQUlEVWdHVFlDQUNBMklCbzJBZ0FnTnlBRE5nSUFJRGdnQWpZQ0FDQTVJQUEyQWdBZ0VFSFFBR29pS1VFQU5nSUFRYnpoLy84QUlCMXJJUjVCL1AzLy93QWdLR3NoSDBIOC8vLy9BQ0FoYXlFV1Fmei8vLzhBSUE1cklSZEIvUC8vL3dBZ0Qyc2hHRUg4Ly8vL0FDQWpheUVaUWZ6Ly8vOEFJQ1JySVJwQi9QLy8vd0FnSldzaEEwSDgvLy8vQUNBbWF5RUNRZnovL3djZ0oyc2hBQ0FUSUNvZ0wwY2lCZ1IvSUI0RklCMExOZ0lBSURvZ0JnUi9JQjhGSUNnTE5nSUFJRHNnQmdSL0lCWUZJQ0VMTmdJQUlEd2dCZ1IvSUJjRklBNExOZ0lBSUQwZ0JnUi9JQmdGSUE4TE5nSUFJRDRnQmdSL0lCa0ZJQ01MTmdJQUlEOGdCZ1IvSUJvRklDUUxOZ0lBSUVBZ0JnUi9JQU1GSUNVTE5nSUFJRUVnQmdSL0lBSUZJQ1lMTmdJQUlFSWdCZ1IvSUFBRklDY0xOZ0lBSUNKQkFEWUNBQ0FnSUJBcEFnQTNBZ0FnSUNBUUtRSUlOd0lJSUNBZ0VDa0NFRGNDRUNBZ0lCQXBBaGczQWhnZ0lDQVFLUUlnTndJZ0lDNGdFeWtDQURjQ0FDQXVJQk1wQWdnM0FnZ2dMaUFUS1FJUU53SVFJQzRnRXlrQ0dEY0NHQ0F1SUJNcEFpQTNBaUFnTEVFQk5nSUFJQkpDQURjQ0FDQVNRZ0EzQWdnZ0VrSUFOd0lRSUJKQ0FEY0NHQ0FTUVFBMkFpQWdSU2dDZ0FFaUxFRWZkU0lBSUN4cUlBQnpJaTlCQVhVaENTQVFJQXdwQWdBM0FnQWdFQ0FNS1FJSU53SUlJQkFnRENrQ0VEY0NFQ0FRSUF3cEFoZzNBaGdnRUNBTUtRSWdOd0lnSUJNZ0RFRW9haUlxS1FJQU53SUFJQk1nS2lrQ0NEY0NDQ0FUSUNvcEFoQTNBaEFnRXlBcUtRSVlOd0lZSUJNZ0tpa0NJRGNDSUVFQklRWWdFQ2dDQUNFZUlERW9BZ0FoSHlBeUtBSUFJUllnTXlnQ0FDRVhJRFFvQWdBaEdDQTFLQUlBSVJrZ05pZ0NBQ0VhSURjb0FnQWhBeUE0S0FJQUlRSWdPU2dDQUNFQUlCTW9BZ0FoSFNBNktBSUFJU2dnT3lnQ0FDRWhJRHdvQWdBaERpQTlLQUlBSVE4Z1BpZ0NBQ0VqSUQ4b0FnQWhKQ0JBS0FJQUlTVWdRU2dDQUNFbUlFSW9BZ0FoSndOQUlBd2dCa0hVQUd4cUtBSUFJUWdnQmlBSlJpSWlCRUFnQ0NFZUN5QU1JQVpCMUFCc2FpZ0NCQ0VJSUNJRVFDQUlJUjhMSUF3Z0JrSFVBR3hxS0FJSUlRZ2dJZ1JBSUFnaEZnc2dEQ0FHUWRRQWJHb29BZ3doQ0NBaUJFQWdDQ0VYQ3lBTUlBWkIxQUJzYWlnQ0VDRUlJQ0lFUUNBSUlSZ0xJQXdnQmtIVUFHeHFLQUlVSVFnZ0lnUkFJQWdoR1FzZ0RDQUdRZFFBYkdvb0FoZ2hDQ0FpQkVBZ0NDRWFDeUFNSUFaQjFBQnNhaWdDSENFSUlDSUVRQ0FJSVFNTElBd2dCa0hVQUd4cUtBSWdJUWdnSWdSQUlBZ2hBZ3NnRENBR1FkUUFiR29vQWlRaENDQWlCRUFnQ0NFQUN5QU1JQVpCMUFCc2FpZ0NLQ0VJSUNJRVFDQUlJUjBMSUF3Z0JrSFVBR3hxS0FJc0lRZ2dJZ1JBSUFnaEtBc2dEQ0FHUWRRQWJHb29BakFoQ0NBaUJFQWdDQ0VoQ3lBTUlBWkIxQUJzYWlnQ05DRUlJQ0lFUUNBSUlRNExJQXdnQmtIVUFHeHFLQUk0SVFnZ0lnUkFJQWdoRHdzZ0RDQUdRZFFBYkdvb0Fqd2hDQ0FpQkVBZ0NDRWpDeUFNSUFaQjFBQnNha0ZBYXlnQ0FDRUlJQ0lFUUNBSUlTUUxJQXdnQmtIVUFHeHFLQUpFSVFnZ0lnUkFJQWdoSlFzZ0RDQUdRZFFBYkdvb0FrZ2hDQ0FpQkVBZ0NDRW1DeUFNSUFaQjFBQnNhaWdDVENFSUlDSUVRQ0FJSVNjTElBWkJBV29pQmtFSVJ3MEFDeUFRSUI0MkFnQWdNU0FmTmdJQUlESWdGallDQUNBeklCYzJBZ0FnTkNBWU5nSUFJRFVnR1RZQ0FDQTJJQm8yQWdBZ055QUROZ0lBSURnZ0FqWUNBQ0E1SUFBMkFnQWdLVUVBTmdJQVFiemgvLzhBSUIxcklSNUIvUDMvL3dBZ0tHc2hIMEg4Ly8vL0FDQWhheUVXUWZ6Ly8vOEFJQTVySVJkQi9QLy8vd0FnRDJzaEdFSDgvLy8vQUNBamF5RVpRZnovLy84QUlDUnJJUnBCL1AvLy93QWdKV3NoQTBIOC8vLy9BQ0FtYXlFQ1Fmei8vd2NnSjJzaEFDQVRJQ3dnTDBjaUJnUi9JQjRGSUIwTE5nSUFJRG9nQmdSL0lCOEZJQ2dMTmdJQUlEc2dCZ1IvSUJZRklDRUxOZ0lBSUR3Z0JnUi9JQmNGSUE0TE5nSUFJRDBnQmdSL0lCZ0ZJQThMTmdJQUlENGdCZ1IvSUJrRklDTUxOZ0lBSUQ4Z0JnUi9JQm9GSUNRTE5nSUFJRUFnQmdSL0lBTUZJQ1VMTmdJQUlFRWdCZ1IvSUFJRklDWUxOZ0lBSUVJZ0JnUi9JQUFGSUNjTE5nSUFJQ0FnSUNBUUVDTkJIeUVJQTBBZ0lDQWdFQk1nSUNBZ0VCTWdJQ0FnRUJNZ0lDQWdFQk1nUkNBSVFRSjBhaWdDQUNJaVFSOTFJZ0FnSW1vZ0FITWlMRUVCZFNFdklCQWdCeWtDQURjQ0FDQVFJQWNwQWdnM0FnZ2dFQ0FIS1FJUU53SVFJQkFnQnlrQ0dEY0NHQ0FRSUFjcEFpQTNBaUFnRXlBdEtRSUFOd0lBSUJNZ0xTa0NDRGNDQ0NBVElDMHBBaEEzQWhBZ0V5QXRLUUlZTndJWUlCTWdMU2tDSURjQ0lFRUJJUVlnRUNnQ0FDRWVJREVvQWdBaEh5QXlLQUlBSVJZZ015Z0NBQ0VYSURRb0FnQWhHQ0ExS0FJQUlSa2dOaWdDQUNFYUlEY29BZ0FoQXlBNEtBSUFJUUlnT1NnQ0FDRUFJQk1vQWdBaEhTQTZLQUlBSVNnZ095Z0NBQ0VoSUR3b0FnQWhEaUE5S0FJQUlROGdQaWdDQUNFaklEOG9BZ0FoSkNCQUtBSUFJU1VnUVNnQ0FDRW1JRUlvQWdBaEp3TkFJQWNnQmtIVUFHeHFLQUlBSVFrZ0JpQXZSaUlTQkVBZ0NTRWVDeUFISUFaQjFBQnNhaWdDQkNFSklCSUVRQ0FKSVI4TElBY2dCa0hVQUd4cUtBSUlJUWtnRWdSQUlBa2hGZ3NnQnlBR1FkUUFiR29vQWd3aENTQVNCRUFnQ1NFWEN5QUhJQVpCMUFCc2FpZ0NFQ0VKSUJJRVFDQUpJUmdMSUFjZ0JrSFVBR3hxS0FJVUlRa2dFZ1JBSUFraEdRc2dCeUFHUWRRQWJHb29BaGdoQ1NBU0JFQWdDU0VhQ3lBSElBWkIxQUJzYWlnQ0hDRUpJQklFUUNBSklRTUxJQWNnQmtIVUFHeHFLQUlnSVFrZ0VnUkFJQWtoQWdzZ0J5QUdRZFFBYkdvb0FpUWhDU0FTQkVBZ0NTRUFDeUFISUFaQjFBQnNhaWdDS0NFSklCSUVRQ0FKSVIwTElBY2dCa0hVQUd4cUtBSXNJUWtnRWdSQUlBa2hLQXNnQnlBR1FkUUFiR29vQWpBaENTQVNCRUFnQ1NFaEN5QUhJQVpCMUFCc2FpZ0NOQ0VKSUJJRVFDQUpJUTRMSUFjZ0JrSFVBR3hxS0FJNElRa2dFZ1JBSUFraER3c2dCeUFHUWRRQWJHb29BandoQ1NBU0JFQWdDU0VqQ3lBSElBWkIxQUJzYWtGQWF5Z0NBQ0VKSUJJRVFDQUpJU1FMSUFjZ0JrSFVBR3hxS0FKRUlRa2dFZ1JBSUFraEpRc2dCeUFHUWRRQWJHb29Ba2doQ1NBU0JFQWdDU0VtQ3lBSElBWkIxQUJzYWlnQ1RDRUpJQklFUUNBSklTY0xJQVpCQVdvaUJrRUlSdzBBQ3lBUUlCNDJBZ0FnTVNBZk5nSUFJRElnRmpZQ0FDQXpJQmMyQWdBZ05DQVlOZ0lBSURVZ0dUWUNBQ0EySUJvMkFnQWdOeUFETmdJQUlEZ2dBallDQUNBNUlBQTJBZ0FnS1VFQU5nSUFRYnpoLy84QUlCMXJJUjVCL1AzLy93QWdLR3NoSDBIOC8vLy9BQ0FoYXlFV1Fmei8vLzhBSUE1cklSZEIvUC8vL3dBZ0Qyc2hHRUg4Ly8vL0FDQWpheUVaUWZ6Ly8vOEFJQ1JySVJwQi9QLy8vd0FnSldzaEEwSDgvLy8vQUNBbWF5RUNRZnovL3djZ0oyc2hBQ0FUSUNJZ0xFY2lCZ1IvSUI0RklCMExOZ0lBSURvZ0JnUi9JQjhGSUNnTE5nSUFJRHNnQmdSL0lCWUZJQ0VMTmdJQUlEd2dCZ1IvSUJjRklBNExOZ0lBSUQwZ0JnUi9JQmdGSUE4TE5nSUFJRDRnQmdSL0lCa0ZJQ01MTmdJQUlEOGdCZ1IvSUJvRklDUUxOZ0lBSUVBZ0JnUi9JQU1GSUNVTE5nSUFJRUVnQmdSL0lBSUZJQ1lMTmdJQUlFSWdCZ1IvSUFBRklDY0xOZ0lBSUNBZ0lDQVFFQ01nUlNBSVFRSjBhaWdDQUNJaVFSOTFJZ0FnSW1vZ0FITWlMRUVCZFNFdklCQWdEQ2tDQURjQ0FDQVFJQXdwQWdnM0FnZ2dFQ0FNS1FJUU53SVFJQkFnRENrQ0dEY0NHQ0FRSUF3cEFpQTNBaUFnRXlBcUtRSUFOd0lBSUJNZ0tpa0NDRGNDQ0NBVElDb3BBaEEzQWhBZ0V5QXFLUUlZTndJWUlCTWdLaWtDSURjQ0lFRUJJUVlnRUNnQ0FDRWVJREVvQWdBaEh5QXlLQUlBSVJZZ015Z0NBQ0VYSURRb0FnQWhHQ0ExS0FJQUlSa2dOaWdDQUNFYUlEY29BZ0FoQXlBNEtBSUFJUUlnT1NnQ0FDRUFJQk1vQWdBaEhTQTZLQUlBSVNnZ095Z0NBQ0VoSUR3b0FnQWhEaUE5S0FJQUlROGdQaWdDQUNFaklEOG9BZ0FoSkNCQUtBSUFJU1VnUVNnQ0FDRW1JRUlvQWdBaEp3TkFJQXdnQmtIVUFHeHFLQUlBSVFrZ0JpQXZSaUlTQkVBZ0NTRWVDeUFNSUFaQjFBQnNhaWdDQkNFSklCSUVRQ0FKSVI4TElBd2dCa0hVQUd4cUtBSUlJUWtnRWdSQUlBa2hGZ3NnRENBR1FkUUFiR29vQWd3aENTQVNCRUFnQ1NFWEN5QU1JQVpCMUFCc2FpZ0NFQ0VKSUJJRVFDQUpJUmdMSUF3Z0JrSFVBR3hxS0FJVUlRa2dFZ1JBSUFraEdRc2dEQ0FHUWRRQWJHb29BaGdoQ1NBU0JFQWdDU0VhQ3lBTUlBWkIxQUJzYWlnQ0hDRUpJQklFUUNBSklRTUxJQXdnQmtIVUFHeHFLQUlnSVFrZ0VnUkFJQWtoQWdzZ0RDQUdRZFFBYkdvb0FpUWhDU0FTQkVBZ0NTRUFDeUFNSUFaQjFBQnNhaWdDS0NFSklCSUVRQ0FKSVIwTElBd2dCa0hVQUd4cUtBSXNJUWtnRWdSQUlBa2hLQXNnRENBR1FkUUFiR29vQWpBaENTQVNCRUFnQ1NFaEN5QU1JQVpCMUFCc2FpZ0NOQ0VKSUJJRVFDQUpJUTRMSUF3Z0JrSFVBR3hxS0FJNElRa2dFZ1JBSUFraER3c2dEQ0FHUWRRQWJHb29BandoQ1NBU0JFQWdDU0VqQ3lBTUlBWkIxQUJzYWtGQWF5Z0NBQ0VKSUJJRVFDQUpJU1FMSUF3Z0JrSFVBR3hxS0FKRUlRa2dFZ1JBSUFraEpRc2dEQ0FHUWRRQWJHb29Ba2doQ1NBU0JFQWdDU0VtQ3lBTUlBWkIxQUJzYWlnQ1RDRUpJQklFUUNBSklTY0xJQVpCQVdvaUJrRUlSdzBBQ3lBUUlCNDJBZ0FnTVNBZk5nSUFJRElnRmpZQ0FDQXpJQmMyQWdBZ05DQVlOZ0lBSURVZ0dUWUNBQ0EySUJvMkFnQWdOeUFETmdJQUlEZ2dBallDQUNBNUlBQTJBZ0FnS1VFQU5nSUFRYnpoLy84QUlCMXJJUjVCL1AzLy93QWdLR3NoSDBIOC8vLy9BQ0FoYXlFV1Fmei8vLzhBSUE1cklSZEIvUC8vL3dBZ0Qyc2hHRUg4Ly8vL0FDQWpheUVaUWZ6Ly8vOEFJQ1JySVJwQi9QLy8vd0FnSldzaEEwSDgvLy8vQUNBbWF5RUNRZnovL3djZ0oyc2hBQ0FUSUNJZ0xFY2lCZ1IvSUI0RklCMExOZ0lBSURvZ0JnUi9JQjhGSUNnTE5nSUFJRHNnQmdSL0lCWUZJQ0VMTmdJQUlEd2dCZ1IvSUJjRklBNExOZ0lBSUQwZ0JnUi9JQmdGSUE4TE5nSUFJRDRnQmdSL0lCa0ZJQ01MTmdJQUlEOGdCZ1IvSUJvRklDUUxOZ0lBSUVBZ0JnUi9JQU1GSUNVTE5nSUFJRUVnQmdSL0lBSUZJQ1lMTmdJQUlFSWdCZ1IvSUFBRklDY0xOZ0lBSUNBZ0lDQVFFQ01nQ0VGL2FpRUFJQWhCQUVvRVFDQUFJUWdNQVFzTElDQkIwQUJxSWdBZ0FDQXdFQXdnQ2lBUktRSUFOd0lBSUFvZ0VTa0NDRGNDQ0NBS0lCRXBBaEEzQWhBZ0NpQVJLUUlZTndJWUlBb2dFU2tDSURjQ0lDQUtJQkVwQWlnM0FpZ2dDaUFSS1FJd053SXdJQW9nRVNrQ09EY0NPQ0FLUVVCcklCRkJRR3NwQWdBM0FnQWdDaUFSS1FKSU53SklJQW9nRVNnQ1VEWUNVQ0FWUWZnQWFpSUNJQXBCMEFCcUlrY29BZ0FpQURZQ0FDQVZJQkVwQWdBM0FnQWdGU0FSS1FJSU53SUlJQlVnRVNrQ0VEY0NFQ0FWSUJFcEFoZzNBaGdnRlNBUktRSWdOd0lnSUJWQktHb2lBeUFLUVNocUlrTXBBZ0EzQWdBZ0F5QkRLUUlJTndJSUlBTWdReWtDRURjQ0VDQURJRU1wQWhnM0FoZ2dBeUJES1FJZ053SWdJQlZCQVRZQ1VDQVZRZFFBYWlJRFFnQTNBZ0FnQTBJQU53SUlJQU5DQURjQ0VDQURRZ0EzQWhnZ0EwRUFOZ0lnSUFBRVFDQUNRUUUyQWdBRklCVWdGUkFUQ3lBVVFZQWNhaUViSUJSQjRCdHFJUndnQkFSL0lBUUZRUUVMSVNFZ0NpQVZFQjhnQ3lBUktRSUFOd0lBSUFzZ0VTa0NDRGNDQ0NBTElCRXBBaEEzQWhBZ0N5QVJLUUlZTndJWUlBc2dFU2tDSURjQ0lDQUxFQThnRFNBcktRSUFOd0lBSUEwZ0t5a0NDRGNDQ0NBTklDc3BBaEEzQWhBZ0RTQXJLUUlZTndJWUlBMGdLeWtDSURjQ0lDQU5FQThnQ3lnQ0FDRmNJQXNvQWdRaURrRUdkaUZkSUFzb0FnZ2lYa0VVZENFUElBc29BZ3dpWDBFT2RDRXdJQXNvQWhBaUFFRUlkQ0VwSUFzb0FoUkJBblFnQUVFWWRuSWhZQ0FMS0FJWUltRkJISFFoUkNBTEtBSWNJbUpCRm5RaFJTQUxLQUlnSW1OQkVIUWhLaUFMS0FJa1FRcDBJU0lnRFNnQ0FDRmtJQTBvQWdRaVpVRWFkQ0VzSUEwb0FnZ2laa0VVZENFdklBMG9BZ3dpWjBFT2RDRUpJQTBvQWhBaUFFRUlkQ0VJSUEwb0FoUkJBblFnQUVFWWRuSWhhQ0FOS0FJWUltbEJISFFoQmlBTktBSWNJbXBCRm5RaEhTQU5LQUlnSW10QkVIUWhLQ0FOS0FJa1FRcDBJUzBnQ3lBUktRSUFOd0lBSUFzZ0VTa0NDRGNDQ0NBTElCRXBBaEEzQWhBZ0N5QVJLUUlZTndJWUlBc2dFU2tDSURjQ0lDQUxFQThnRFNBcktRSUFOd0lBSUEwZ0t5a0NDRGNDQ0NBTklDc3BBaEEzQWhBZ0RTQXJLUUlZTndJWUlBMGdLeWtDSURjQ0lDQU5FQThnQ3lnQ0FDRnNJQXNvQWdRaWJVRWFkQ0V1SUFzb0FnZ2lia0VVZENFU0lBc29BZ3dpYjBFT2RDRXhJQXNvQWhBaUFFRUlkQ0V5SUFzb0FoUkJBblFnQUVFWWRuSWhjQ0FMS0FJWUluRkJISFFoTXlBTEtBSWNJbkpCRm5RaE5DQUxLQUlnSWdkQkVIUWhOU0FMS0FJa1FRcDBJVFlnRFNnQ0FDRU1JQTBvQWdRaUVFRWFkQ0UzSUEwb0FnZ2lGVUVVZENFNElBMG9BZ3dpRTBFT2RDRTVJQTBvQWhBaUFFRUlkQ0U2SUEwb0FoUkJBblFnQUVFWWRuSWhPeUFOS0FJWUlqeEJISFFoUFNBTktBSWNJajVCRm5RaFB5QU5LQUlnSWtCQkVIUWhRU0FOS0FJa1FRcDBJVUlnQ3lBS0tRSUFOd0lBSUFzZ0Npa0NDRGNDQ0NBTElBb3BBaEEzQWhBZ0N5QUtLUUlZTndJWUlBc2dDaWtDSURjQ0lDQUxFQThnRFNCREtRSUFOd0lBSUEwZ1F5a0NDRGNDQ0NBTklFTXBBaEEzQWhBZ0RTQkRLUUlZTndJWUlBMGdReWtDSURjQ0lDQU5FQThnQ3lnQ0JDSUNRUnAwSUFzb0FnQnlJU01nQ3lnQ0NDSUFRUlIwSUFKQkJuWnlJU1FnQ3lnQ0RDSUNRUTUwSUFCQkRIWnlJU1VnQ3lnQ0VDSUFRUWgwSUFKQkVuWnlJU1lnQ3lnQ0ZFRUNkQ0FBUVJoMmNpQUxLQUlZSWdCQkhIUnlJU2NnQ3lnQ0hDSUNRUlowSUFCQkJIWnlJUjRnQ3lnQ0lDSUFRUkIwSUFKQkNuWnlJUjhnQ3lnQ0pFRUtkQ0FBUVJCMmNpRVdJQTBvQWdRaUFrRWFkQ0FOS0FJQWNpRVhJQTBvQWdnaUFFRVVkQ0FDUVFaMmNpRVlJQTBvQWd3aUFrRU9kQ0FBUVF4MmNpRVpJQTBvQWhBaUFFRUlkQ0FDUVJKMmNpRWFJQTBvQWhSQkFuUWdBRUVZZG5JZ0RTZ0NHQ0lBUVJ4MGNpRUVJQTBvQWh3aUFrRVdkQ0FBUVFSMmNpRURJQTBvQWlBaUFFRVFkQ0FDUVFwMmNpRUNJQTBvQWlSQkNuUWdBRUVRZG5JaEFDQU9RUnAwSUZ4eUlRNGdEeUJkY2lFUElEQWdYa0VNZG5JaE1DQXBJRjlCRW5aeUlTa2dZQ0JFY2lGRUlFVWdZVUVFZG5JaFJTQXFJR0pCQ25aeUlTb2dJaUJqUVJCMmNpRWlJQ3dnWkhJaExDQXZJR1ZCQm5aeUlTOGdDU0JtUVF4MmNpRUpJQWdnWjBFU2RuSWhDQ0JvSUFaeUlRWWdIU0JwUVFSMmNpRWRJQ2dnYWtFS2RuSWhLQ0F0SUd0QkVIWnlJUzBnTGlCc2NpRXVJQklnYlVFR2RuSWhFaUF4SUc1QkRIWnlJVEVnTWlCdlFSSjJjaUV5SUhBZ00zSWhNeUEwSUhGQkJIWnlJVFFnTlNCeVFRcDJjaUUxSURZZ0IwRVFkbkloTmlBM0lBeHlJVGNnT0NBUVFRWjJjaUU0SURrZ0ZVRU1kbkloT1NBNklCTkJFblp5SVRvZ095QTljaUU3SUQ4Z1BFRUVkbkloUENCQklENUJDblp5SVQwZ1FpQkFRUkIyY2lFK0lBb2dXa0VDUmlJVEJIOGdJeUlPQlNBT0MwSC8vLzhmY1RZQ0FDQUtRUVJxSWo4Z0V3Ui9JQ1FpRHdVZ0R3dEJCblJCd1AvL0gzRWdEa0VhZG5JMkFnQWdDa0VJYWlKQUlCTUVmeUFsQlNBd0N5SU9RUXgwUVlEZy94OXhJQTlCRkhaeU5nSUFJQXBCREdvaVFTQVRCSDhnSmdVZ0tRc2lEMEVTZEVHQWdQQWZjU0FPUVE1MmNqWUNBQ0FLUVJCcUlrSWdFd1IvSUNjRklFUUxJZzVCR0hSQmdJQ0FHSEVnRDBFSWRuSTJBZ0FnQ2tFVWFpSXdJQTVCQW5aQi8vLy9IM0UyQWdBZ0NrRVlhaUlwSUJNRWZ5QWVCU0JGQ3lJUFFRUjBRZkQvL3g5eElBNUJISFp5TmdJQUlBcEJIR29pUkNBVEJIOGdId1VnS2dzaURrRUtkRUdBK1A4ZmNTQVBRUloyY2pZQ0FDQUtRU0JxSWtVZ0V3Ui9JQllGSUNJTElnOUJFSFJCZ0lEOEgzRWdEa0VRZG5JMkFnQWdDa0VrYWlJcUlBOUJDblkyQWdBZ1IwRUFOZ0lBSUVOQnZPSC8vd0FnRXdSL0lCY0ZJQ3dMSWc1Qi8vLy9IM0ZyTmdJQUlBcEJMR29pSWtIOC9mLy9BQ0FUQkg4Z0dBVWdMd3NpRDBFR2RFSEEvLzhmY1NBT1FScDJjbXMyQWdBZ0NrRXdhaUlzUWZ6Ly8vOEFJQk1FZnlBWkJTQUpDeUlPUVF4MFFZRGcveDl4SUE5QkZIWnlhellDQUNBS1FUUnFJaTlCL1AvLy93QWdFd1IvSUJvRklBZ0xJZzlCRW5SQmdJRHdIM0VnRGtFT2RuSnJOZ0lBSUFwQk9Hb2lDVUg4Ly8vL0FDQVRCSDhnQkFVZ0Jnc2lEa0VZZEVHQWdJQVljU0FQUVFoMmNtczJBZ0FnQ2tFOGFpSUlRZnovLy84QUlBNUJBblpCLy8vL0gzRnJOZ0lBSUFwQlFHc2lCa0g4Ly8vL0FDQVRCSDhnQXdVZ0hRc2lEMEVFZEVIdy8vOGZjU0FPUVJ4MmNtczJBZ0FnQ2tIRUFHb2lIVUg4Ly8vL0FDQVRCSDhnQWdVZ0tBc2lEa0VLZEVHQStQOGZjU0FQUVJaMmNtczJBZ0FnQ2tISUFHb2lLRUg4Ly8vL0FDQVRCSDhnQUFVZ0xRc2lEMEVRZEVHQWdQd2ZjU0FPUVJCMmNtczJBZ0FnQ2tITUFHb2lEa0g4Ly84SElBOUJDblpyTmdJQUlDQWdJQ0FLRUNNZ0NpQmJRUUpHSWc4RWZ5QWpCU0F1SWlNTFFmLy8veDl4TmdJQUlEOGdEd1IvSUNRRklCSWlKQXRCQm5SQndQLy9IM0VnSTBFYWRuSTJBZ0FnUUNBUEJIOGdKUVVnTVNJbEMwRU1kRUdBNFA4ZmNTQWtRUlIyY2pZQ0FDQkJJQThFZnlBbUJTQXlJaVlMUVJKMFFZQ0E4Qjl4SUNWQkRuWnlOZ0lBSUVJZ0R3Ui9JQ2NGSURNaUp3dEJHSFJCZ0lDQUdIRWdKa0VJZG5JMkFnQWdNQ0FuUVFKMlFmLy8veDl4TmdJQUlDa2dEd1IvSUI0RklEUWlIZ3RCQkhSQjhQLy9IM0VnSjBFY2RuSTJBZ0FnUkNBUEJIOGdId1VnTlNJZkMwRUtkRUdBK1A4ZmNTQWVRUloyY2pZQ0FDQkZJQThFZnlBV0JTQTJJaFlMUVJCMFFZQ0EvQjl4SUI5QkVIWnlOZ0lBSUNvZ0ZrRUtkallDQUNCSFFRQTJBZ0FnUTBHODRmLy9BQ0FQQkg4Z0Z3VWdOeUlYQzBILy8vOGZjV3MyQWdBZ0lrSDgvZi8vQUNBUEJIOGdHQVVnT0NJWUMwRUdkRUhBLy84ZmNTQVhRUnAyY21zMkFnQWdMRUg4Ly8vL0FDQVBCSDhnR1FVZ09TSVpDMEVNZEVHQTRQOGZjU0FZUVJSMmNtczJBZ0FnTDBIOC8vLy9BQ0FQQkg4Z0dnVWdPaUlhQzBFU2RFR0FnUEFmY1NBWlFRNTJjbXMyQWdBZ0NVSDgvLy8vQUNBUEJIOGdCQVVnT3lJRUMwRVlkRUdBZ0lBWWNTQWFRUWgyY21zMkFnQWdDRUg4Ly8vL0FDQUVRUUoyUWYvLy94OXhhellDQUNBR1Fmei8vLzhBSUE4RWZ5QURCU0E4SWdNTFFRUjBRZkQvL3g5eElBUkJISFp5YXpZQ0FDQWRRZnovLy84QUlBOEVmeUFDQlNBOUlnSUxRUXAwUVlENC94OXhJQU5CRm5aeWF6WUNBQ0FvUWZ6Ly8vOEFJQThFZnlBQUJTQStJZ0FMUVJCMFFZQ0EvQjl4SUFKQkVIWnlhellDQUNBT1Fmei8vd2NnQUVFS2RtczJBZ0FnQ2lBS1FmUUtFQXdnSUNBZ0lBb1FJeUFSSUNBUUh5QVJFQThnS3hBUElCc2dVQ2dDQUNJQVFRNTJPZ0FBSUJzZ0FFRUdkam9BQVNBYklFOG9BZ0FpQWtFWWRrRURjU0FBUVFKMGNqb0FBaUFiSUFKQkVIWTZBQU1nR3lBQ1FRaDJPZ0FFSUJzZ0Fqb0FCU0FiSUU0b0FnQWlBa0VTZGpvQUJpQWJJQUpCQ25ZNkFBY2dHeUFDUVFKMk9nQUlJQnNnVFNnQ0FDSUFRUlIyUVQ5eElBSkJCblJ5T2dBSklCc2dBRUVNZGpvQUNpQWJJQUJCQkhZNkFBc2dHeUJNS0FJQUlnSkJGblpCRDNFZ0FFRUVkSEk2QUF3Z0d5QUNRUTUyT2dBTklCc2dBa0VHZGpvQURpQWJJRXNvQWdBaUFFRVlka0VEY1NBQ1FRSjBjam9BRHlBYklBQkJFSFk2QUJBZ0d5QUFRUWgyT2dBUklCc2dBRG9BRWlBYklFb29BZ0FpQWtFU2Rqb0FFeUFiSUFKQkNuWTZBQlFnR3lBQ1FRSjJPZ0FWSUJzZ1NTZ0NBQ0lBUVJSMlFUOXhJQUpCQm5SeU9nQVdJQnNnQUVFTWRqb0FGeUFiSUFCQkJIWTZBQmdnR3lCSUtBSUFJZ0pCRm5aQkQzRWdBRUVFZEhJNkFCa2dHeUFDUVE1Mk9nQWFJQnNnQWtFR2Rqb0FHeUFiSUJFb0FnQWlBRUVZZGtFRGNTQUNRUUowY2pvQUhDQWJJQUJCRUhZNkFCMGdHeUFBUVFoMk9nQWVJQnNnQURvQUh5QWNJRmtvQWdBaUFFRU9kam9BQUNBY0lBQkJCblk2QUFFZ0hDQllLQUlBSWdKQkdIWkJBM0VnQUVFQ2RISTZBQUlnSENBQ1FSQjJPZ0FESUJ3Z0FrRUlkam9BQkNBY0lBSTZBQVVnSENCWEtBSUFJZ0pCRW5ZNkFBWWdIQ0FDUVFwMk9nQUhJQndnQWtFQ2Rqb0FDQ0FjSUZZb0FnQWlBRUVVZGtFL2NTQUNRUVowY2pvQUNTQWNJQUJCREhZNkFBb2dIQ0FBUVFSMk9nQUxJQndnVlNnQ0FDSUNRUloyUVE5eElBQkJCSFJ5T2dBTUlCd2dBa0VPZGpvQURTQWNJQUpCQm5ZNkFBNGdIQ0JVS0FJQUlnQkJHSFpCQTNFZ0FrRUNkSEk2QUE4Z0hDQUFRUkIyT2dBUUlCd2dBRUVJZGpvQUVTQWNJQUE2QUJJZ0hDQlRLQUlBSWdKQkVuWTZBQk1nSENBQ1FRcDJPZ0FVSUJ3Z0FrRUNkam9BRlNBY0lGSW9BZ0FpQUVFVWRrRS9jU0FDUVFaMGNqb0FGaUFjSUFCQkRIWTZBQmNnSENBQVFRUjJPZ0FZSUJ3Z1VTZ0NBQ0lDUVJaMlFROXhJQUJCQkhSeU9nQVpJQndnQWtFT2Rqb0FHaUFjSUFKQkJuWTZBQnNnSENBcktBSUFJZ0JCR0haQkEzRWdBa0VDZEhJNkFCd2dIQ0FBUVJCMk9nQWRJQndnQUVFSWRqb0FIaUFjSUFBNkFCOGdBU0FiSUJ3Z0JTQWhRUUZ4UVFacUVRSUFJUUFnRzBJQU53QUFJQnRDQURjQUNDQWJRZ0EzQUJBZ0cwSUFOd0FZSUJ4Q0FEY0FBQ0FjUWdBM0FBZ2dIRUlBTndBUUlCeENBRGNBR0NBVVFnQTNBZ0FnRkVJQU53SUlJQlJDQURjQ0VDQVVRZ0EzQWhnZ0FFRUFSeUJHS0FJQVJYRWhBQ0FVSkFRZ0FBdnpBd0VKZnlNRUlRTWpCRUh3QUdva0JDQUNMQUFmUVFGeFFRSnlJUVFnQTBFSWFpSUNRZWZNcDlBR05nSUFJQUpCQkdvaUJrR0YzWjdiZXpZQ0FDQUNRUWhxSWdkQjh1YTc0d00yQWdBZ0FrRU1haUlJUWJycXY2cDZOZ0lBSUFKQkVHb2lDVUgvcExtSUJUWUNBQ0FDUVJScUlncEJqTkdWMkhrMkFnQWdBa0VZYWlJTFFhdXpqL3dCTmdJQUlBSkJIR29pREVHWm1vUGZCVFlDQUNBQ1FTQnFJZ1VnQkRvQUFDQUZRUUZxSWdRZ0FTa0FBRGNBQUNBRUlBRXBBQWczQUFnZ0JDQUJLUUFRTndBUUlBUWdBU2tBR0RjQUdDQURRUUEyQWdBZ0EwR0FnSVRBQURZQ0JDQUZRU0ZxSWdGQnFSTXBBQUEzQUFBZ0FVR3hFeWtBQURjQUNDQUJRYmtUS0FBQU5nQVFJQUZCdlJNdUFBQTdBQlFnQVVHL0V5d0FBRG9BRmlBQ1FjQUFOZ0pnSUFJZ0F5a0RBRGNDV0NBQ0lBVVFEU0FDS0FJQUVBc2hBU0FDUVFBMkFnQWdCaWdDQUJBTElRSWdCa0VBTmdJQUlBY29BZ0FRQ3lFRklBZEJBRFlDQUNBSUtBSUFFQXNoQkNBSVFRQTJBZ0FnQ1NnQ0FCQUxJUVlnQ1VFQU5nSUFJQW9vQWdBUUN5RUhJQXBCQURZQ0FDQUxLQUlBRUFzaENDQUxRUUEyQWdBZ0RDZ0NBQkFMSVFrZ0FDQUJOZ0FBSUFBZ0FqWUFCQ0FBSUFVMkFBZ2dBQ0FFTmdBTUlBQWdCallBRUNBQUlBYzJBQlFnQUNBSU5nQVlJQUFnQ1RZQUhDQURKQVJCQVFzZEFRRi9JQUJCQ0dvaUFpZ0NBRVVFUUVFQkR3c2dBaUFCRUQ5QkFRdjREUUVpZnlNRUlRY2pCRUdnQW1va0JDQUhRUUEyQWdBZ0FDZ0NBRVVFUUVHMkVDQUFLQUtzQVNBQUtBS29BVUVEY1VFTWFoRUFBQ0FISkFSQkFBOExJQUZGQkVCQnJ3NGdBQ2dDckFFZ0FDZ0NxQUZCQTNGQkRHb1JBQUFnQnlRRVFRQVBDeUFDUlFSQVFka1JJQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFja0JFRUFEd3NnQjBFSWFpSUlJQUlnQnhBUUlBY29BZ0FFUUNBQlFnQTNBQUFnQVVJQU53QUlJQUZDQURjQUVDQUJRZ0EzQUJnZ0FVSUFOd0FnSUFGQ0FEY0FLQ0FCUWdBM0FEQWdBVUlBTndBNElBY2tCRUVBRHdzZ0FVRUVhaUlWS0FBQUlRVWdBVUVJYWlJV0tBQUFJUVlnQVVFTWFpSVhLQUFBSVFrZ0FVRVFhaUlZS0FBQUlRTWdBVUVVYWlJWktBQUFJUW9nQVVFWWFpSWFLQUFBSVFzZ0FVRWNhaUliS0FBQUlRd2dBVUVnYWlJY0tBQUFJUTRnQVVFa2FpSWRLQUFBSVE4Z0FVRW9haUllS0FBQUlSQWdBVUVzYWlJZktBQUFJUkVnQVVFd2FpSWdLQUFBSVFRZ0FVRTBhaUloS0FBQUlSSWdBVUU0YWlJaUtBQUFJUk1nQVVFOGFpSWpLQUFBSVJRZ0IwRW9haUlDSUFFb0FBQWlEVUgvLy84ZmNUWUNBQ0FDSUFWQkJuUkJ3UC8vSDNFZ0RVRWFkbklpRFRZQ0JDQUNJQVpCREhSQmdPRC9IM0VnQlVFVWRuSWlCVFlDQ0NBQ0lBbEJFblJCZ0lEd0gzRWdCa0VPZG5JaUJqWUNEQ0FDSUFOQkdIUkJnSUNBR0hFZ0NVRUlkbklpQ1RZQ0VDQUNJQU5CQW5aQi8vLy9IM0VpSkRZQ0ZDQUNJQXBCQkhSQjhQLy9IM0VnQTBFY2RuSWlBellDR0NBQ0lBdEJDblJCZ1BqL0gzRWdDa0VXZG5JaUNqWUNIQ0FDSUF4QkVIUkJnSUQ4SDNFZ0MwRVFkbklpQ3pZQ0lDQUNJQXhCQ25ZaUREWUNKQ0FDSUE1Qi8vLy9IM0UyQWlnZ0FpQVBRUVowUWNELy94OXhJQTVCR25aeU5nSXNJQUlnRUVFTWRFR0E0UDhmY1NBUFFSUjJjallDTUNBQ0lCRkJFblJCZ0lEd0gzRWdFRUVPZG5JMkFqUWdBaUFFUVJoMFFZQ0FnQmh4SUJGQkNIWnlOZ0k0SUFJZ0JFRUNka0gvLy84ZmNUWUNQQ0FDUVVCcklCSkJCSFJCOFAvL0gzRWdCRUVjZG5JMkFnQWdBaUFUUVFwMFFZRDQveDl4SUJKQkZuWnlOZ0pFSUFJZ0ZFRVFkRUdBZ1B3ZmNTQVRRUkIyY2pZQ1NDQUNJQlJCQ25ZMkFrd2dBa0VBTmdKUUlBMGdBaWdDQUhJZ0JYSWdCbklnQ1hJZ0pISWdBM0lnQ25JZ0MzSWdESEpGQkVCQjh4VWdBQ2dDckFFZ0FDZ0NxQUZCQTNGQkRHb1JBQUFnQVVJQU53QUFJQUZDQURjQUNDQUJRZ0EzQUJBZ0FVSUFOd0FZSUFGQ0FEY0FJQ0FCUWdBM0FDZ2dBVUlBTndBd0lBRkNBRGNBT0NBSEpBUkJBQThMSUFkQitBRnFJUVFnQjBIOEFHb2hBeUFCUWdBM0FBQWdBVUlBTndBSUlBRkNBRGNBRUNBQlFnQTNBQmdnQVVJQU53QWdJQUZDQURjQUtDQUJRZ0EzQURBZ0FVSUFOd0E0SUFnb0FnUWdDQ2dDQUhJZ0NDZ0NDSElnQ0NnQ0RISWdDQ2dDRUhJZ0NDZ0NGSElnQ0NnQ0dISWdDQ2dDSEhJRWZ5QUVRZ0EzQWdBZ0JFSUFOd0lJSUFSQ0FEY0NFQ0FFUWdBM0FoZ2dBMEVBTmdKNElBTWdBaWtDQURjQ0FDQURJQUlwQWdnM0FnZ2dBeUFDS1FJUU53SVFJQU1nQWlrQ0dEY0NHQ0FESUFJcEFpQTNBaUFnQTBFb2FpSUdJQUpCS0dvaUJTa0NBRGNDQUNBR0lBVXBBZ2czQWdnZ0JpQUZLUUlRTndJUUlBWWdCU2tDR0RjQ0dDQUdJQVVwQWlBM0FpQWdBMEVCTmdKUUlBTkIxQUJxSWdaQ0FEY0NBQ0FHUWdBM0FnZ2dCa0lBTndJUUlBWkNBRGNDR0NBR1FRQTJBaUFnQUNBRElBTWdDQ0FFRUNjZ0FpQURFQjhnQkNBQ0tRSUFOd0lBSUFRZ0Fpa0NDRGNDQ0NBRUlBSXBBaEEzQWhBZ0JDQUNLUUlZTndJWUlBUWdBaWtDSURjQ0lDQUVFQThnQXlBRktRSUFOd0lBSUFNZ0JTa0NDRGNDQ0NBRElBVXBBaEEzQWhBZ0F5QUZLUUlZTndJWUlBTWdCU2tDSURjQ0lDQURFQThnQkNnQ0NDRUFJQVFvQWd3aEFpQUVLQUlVUVFKMElBUW9BaEFpQ2tFWWRuSWdCQ2dDR0NJTFFSeDBjaUVNSUFRb0Fod2hDQ0FFS0FJa1FRcDBJQVFvQWlBaURrRVFkbkloRHlBREtBSUVJaEJCR25RZ0F5Z0NBSEloRVNBREtBSUlJUVVnQXlnQ0RDRUdJQU1vQWhSQkFuUWdBeWdDRUNJU1FSaDJjaUFES0FJWUloTkJISFJ5SVJRZ0F5Z0NIQ0VKSUFNb0FpUkJDblFnQXlnQ0lDSURRUkIyY2lFTklBRWdCQ2dDQkNJQlFScDBJQVFvQWdCeU5nQUFJQlVnQUVFVWRDQUJRUVoyY2pZQUFDQVdJQUpCRG5RZ0FFRU1kbkkyQUFBZ0Z5QUtRUWgwSUFKQkVuWnlOZ0FBSUJnZ0REWUFBQ0FaSUFoQkZuUWdDMEVFZG5JMkFBQWdHaUFPUVJCMElBaEJDblp5TmdBQUlCc2dEellBQUNBY0lCRTJBQUFnSFNBRlFSUjBJQkJCQm5aeU5nQUFJQjRnQmtFT2RDQUZRUXgyY2pZQUFDQWZJQkpCQ0hRZ0JrRVNkbkkyQUFBZ0lDQVVOZ0FBSUNFZ0NVRVdkQ0FUUVFSMmNqWUFBQ0FpSUFOQkVIUWdDVUVLZG5JMkFBQWdJeUFOTmdBQUlBY2tCRUVCQlNBSEpBUkJBQXNMQ2dBZ0FDQUJJQUlRWVF1cEJBRU1meU1FSVFVakJFSFFBR29rQkNBRlFRQTJBZ0FnQVVVRVFFSEtFU0FBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBRkpBUkJBQThMSUFWQnlBQnFJUVlnQlVFb2FpRUVJQVZCQ0dvaEF5QUNCSDhnQkNBQ0lBVVFFQ0FESUFFZ0JoQVFJQVlvQWdBaEFDQURRUVJxSWdJb0FnQWdBeWdDQUhJZ0EwRUlhaUlHS0FJQWNpQURRUXhxSWdrb0FnQnlJQU5CRUdvaUNpZ0NBSElnQTBFVWFpSUxLQUlBY2lBRFFSaHFJZ3dvQWdCeUlBTkJIR29pRFNnQ0FISkZJUWdnQlNnQ0FDRUhJQVFvQWdRZ0JDZ0NBSElnQkNnQ0NISWdCQ2dDREhJZ0JDZ0NFSElnQkNnQ0ZISWdCQ2dDR0hJZ0JDZ0NISEpCQUVjaERpQURJQU1nQkJBVklBY2dBSElnQ0hKRklBNXhJZ0FoQ0NBREtBSUFJUWNnQXlBQUJIOGdCd1ZCQUFzMkFnQWdBaWdDQUNFSElBSWdBQVIvSUFjRlFRQUxOZ0lBSUFZb0FnQWhBaUFHSUFBRWZ5QUNCVUVBQ3pZQ0FDQUpLQUlBSVFJZ0NTQUFCSDhnQWdWQkFBczJBZ0FnQ2lnQ0FDRUNJQW9nQUFSL0lBSUZRUUFMTmdJQUlBc29BZ0FoQWlBTElBQUVmeUFDQlVFQUN6WUNBQ0FNS0FJQUlRSWdEQ0FBQkg4Z0FnVkJBQXMyQWdBZ0RTZ0NBQ0VDSUEwZ0FBUi9JQUlGUVFBTE5nSUFJQUVnQXhBY0lBTkNBRGNDQUNBRFFnQTNBZ2dnQTBJQU53SVFJQU5DQURjQ0dDQUVRZ0EzQWdBZ0JFSUFOd0lJSUFSQ0FEY0NFQ0FFUWdBM0FoZ2dCU1FFSUFnRlFka1JJQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFVa0JFRUFDd3U2RFFFamZ5TUVJUU1qQkVHZ0Ftb2tCQ0FBS0FJQVJRUkFRYllRSUFBb0Fxd0JJQUFvQXFnQlFRTnhRUXhxRVFBQUlBTWtCRUVBRHdzZ0FVVUVRRUd2RGlBQUtBS3NBU0FBS0FLb0FVRURjVUVNYWhFQUFDQURKQVJCQUE4TElBSkZCRUJCMlJFZ0FDZ0NyQUVnQUNnQ3FBRkJBM0ZCREdvUkFBQWdBeVFFUVFBUEN5QUJRUVJxSWhjb0FBQWhDU0FCUVFocUloZ29BQUFoQ2lBQlFReHFJaGtvQUFBaEN5QUJRUkJxSWhvb0FBQWhCQ0FCUVJScUloc29BQUFoRENBQlFSaHFJaHdvQUFBaEJ5QUJRUnhxSWgwb0FBQWhEU0FCUVNCcUloNG9BQUFoRGlBQlFTUnFJaDhvQUFBaER5QUJRU2hxSWlBb0FBQWhFQ0FCUVN4cUlpRW9BQUFoRVNBQlFUQnFJaUlvQUFBaEJTQUJRVFJxSWlNb0FBQWhFaUFCUVRocUlpUW9BQUFoRXlBQlFUeHFJaVVvQUFBaEJpQURJQUVvQUFBaUNFSC8vLzhmY1RZQ0FDQURJQWxCQm5SQndQLy9IM0VnQ0VFYWRuSWlGRFlDQkNBRElBcEJESFJCZ09EL0gzRWdDVUVVZG5JaUZUWUNDQ0FESUF0QkVuUkJnSUR3SDNFZ0NrRU9kbklpRmpZQ0RDQURJQVJCR0hSQmdJQ0FHSEVnQzBFSWRuSWlDVFlDRUNBRElBUkJBblpCLy8vL0gzRWlDallDRkNBRElBeEJCSFJCOFAvL0gzRWdCRUVjZG5JaUN6WUNHQ0FESUFkQkNuUkJnUGovSDNFZ0RFRVdkbklpRERZQ0hDQURJQTFCRUhSQmdJRDhIM0VnQjBFUWRuSWlCellDSUNBRElBMUJDbllpQ0RZQ0pDQURJQTVCLy8vL0gzRTJBaWdnQXlBUFFRWjBRY0QvL3g5eElBNUJHblp5TmdJc0lBTWdFRUVNZEVHQTRQOGZjU0FQUVJSMmNqWUNNQ0FESUJGQkVuUkJnSUR3SDNFZ0VFRU9kbkkyQWpRZ0F5QUZRUmgwUVlDQWdCaHhJQkZCQ0haeU5nSTRJQU1nQlVFQ2RrSC8vLzhmY1RZQ1BDQURRVUJySUJKQkJIUkI4UC8vSDNFZ0JVRWNkbkkyQWdBZ0F5QVRRUXAwUVlENC94OXhJQkpCRm5aeU5nSkVJQU1nQmtFUWRFR0FnUHdmY1NBVFFSQjJjallDU0NBRElBWkJDblkyQWt3Z0EwSFFBR29pQmtFQU5nSUFJQlFnQXlnQ0FISWdGWElnRm5JZ0NYSWdDbklnQzNJZ0RISWdCM0lnQ0hKRkJFQkI4eFVnQUNnQ3JBRWdBQ2dDcUFGQkEzRkJER29SQUFBZ0FVSUFOd0FBSUFGQ0FEY0FDQ0FCUWdBM0FCQWdBVUlBTndBWUlBRkNBRGNBSUNBQlFnQTNBQ2dnQVVJQU53QXdJQUZDQURjQU9DQURKQVJCQUE4TElBRkNBRGNBQUNBQlFnQTNBQWdnQVVJQU53QVFJQUZDQURjQUdDQUJRZ0EzQUNBZ0FVSUFOd0FvSUFGQ0FEY0FNQ0FCUWdBM0FEZ2dBMEhVQUdvaUIwRUFOZ0lBSUFOQjJBQnFJZ2dnQWlBSEVCQWdCeWdDQUFSQUlBTWtCRUVBRHdzZ0EwR2dBV29pQkVINEFHb2lBaUFHS0FJQU5nSUFJQVFnQXlrQ0FEY0NBQ0FFSUFNcEFnZzNBZ2dnQkNBREtRSVFOd0lRSUFRZ0F5a0NHRGNDR0NBRUlBTXBBaUEzQWlBZ0JFRW9haUlHSUFOQktHb2lCeWtDQURjQ0FDQUdJQWNwQWdnM0FnZ2dCaUFIS1FJUU53SVFJQVlnQnlrQ0dEY0NHQ0FHSUFjcEFpQTNBaUFnQkVFQk5nSlFJQVJCMUFCcUlnWkNBRGNDQUNBR1FnQTNBZ2dnQmtJQU53SVFJQVpDQURjQ0dDQUdRUUEyQWlBZ0EwSDRBR29pQlVFQk5nSUFJQVZCQkdvaUJrSUFOd0lBSUFaQ0FEY0NDQ0FHUWdBM0FoQWdCa0VBTmdJWUlBQWdCQ0FFSUFVZ0NCQW5JQUlvQWdBRWYwRUFCU0FESUFRUUgwRUJDeUlBUlFSQUlBTWtCQ0FBRHdzZ0JDQURLUUlBTndJQUlBUWdBeWtDQ0RjQ0NDQUVJQU1wQWhBM0FoQWdCQ0FES1FJWU53SVlJQVFnQXlrQ0lEY0NJQ0FFRUE4Z0JTQUhLUUlBTndJQUlBVWdCeWtDQ0RjQ0NDQUZJQWNwQWhBM0FoQWdCU0FIS1FJWU53SVlJQVVnQnlrQ0lEY0NJQ0FGRUE4Z0JDZ0NDQ0VOSUFRb0Fnd2hEaUFFS0FJVVFRSjBJQVFvQWhBaUUwRVlkbklnQkNnQ0dDSVVRUngwY2lFVklBUW9BaHdoRHlBRUtBSWtRUXAwSUFRb0FpQWlGa0VRZG5JaENTQUZLQUlFSWdwQkduUWdCU2dDQUhJaEN5QUZLQUlJSVJBZ0JTZ0NEQ0VSSUFVb0FoUkJBblFnQlNnQ0VDSU1RUmgyY2lBRktBSVlJZ2RCSEhSeUlRWWdCU2dDSENFU0lBVW9BaVJCQ25RZ0JTZ0NJQ0lJUVJCMmNpRUNJQUVnQkNnQ0JDSUJRUnAwSUFRb0FnQnlOZ0FBSUJjZ0RVRVVkQ0FCUVFaMmNqWUFBQ0FZSUE1QkRuUWdEVUVNZG5JMkFBQWdHU0FUUVFoMElBNUJFblp5TmdBQUlCb2dGVFlBQUNBYklBOUJGblFnRkVFRWRuSTJBQUFnSENBV1FSQjBJQTlCQ25aeU5nQUFJQjBnQ1RZQUFDQWVJQXMyQUFBZ0h5QVFRUlIwSUFwQkJuWnlOZ0FBSUNBZ0VVRU9kQ0FRUVF4MmNqWUFBQ0FoSUF4QkNIUWdFVUVTZG5JMkFBQWdJaUFHTmdBQUlDTWdFa0VXZENBSFFRUjJjallBQUNBa0lBaEJFSFFnRWtFS2RuSTJBQUFnSlNBQ05nQUFJQU1rQkNBQUN3b0FJQUFnQVNBQ0VHUUwxUU1CRUg4akJDRURJd1JCMEFCcUpBUWdBVVVFUUVIS0VTQUFLQUtzQVNBQUtBS29BVUVEY1VFTWFoRUFBQ0FESkFSQkFBOExJQU5CS0dvaEJTQURRU0JxSVFZZ0FnUi9JQU1nQVNBRkVCQWdCU2dDQUNBRFFRUnFJZ2dvQWdBZ0F5Z0NBSElnQTBFSWFpSUpLQUlBY2lBRFFReHFJZ29vQWdCeUlBTkJFR29pQ3lnQ0FISWdBMEVVYWlJTUtBSUFjaUFEUVJocUlnMG9BZ0J5SUFOQkhHb2lEaWdDQUhKRmNpRUhJQVpCQURZQ0FDQUZJQUlnQmhBUUlBWW9BZ0FoQUNBRElBTWdCUkFhSUFjZ0FISkZJQWdvQWdBaUR5QURLQUlBSWhCeUlBa29BZ0FpRVhJZ0NpZ0NBQ0lTY2lBTEtBSUFJZ1Z5SUF3b0FnQWlCbklnRFNnQ0FDSUhjaUFPS0FJQUlnSnlRUUJIY1NJRUlRQWdBeUFFQkg4Z0VBVkJBQXMyQWdBZ0NDQUVCSDhnRHdWQkFBczJBZ0FnQ1NBRUJIOGdFUVZCQUFzMkFnQWdDaUFFQkg4Z0VnVkJBQXMyQWdBZ0N5QUVCSDhnQlFWQkFBczJBZ0FnRENBRUJIOGdCZ1ZCQUFzMkFnQWdEU0FFQkg4Z0J3VkJBQXMyQWdBZ0RpQUVCSDhnQWdWQkFBczJBZ0FnQVNBREVCd2dBMElBTndJQUlBTkNBRGNDQ0NBRFFnQTNBaEFnQTBJQU53SVlJQU1rQkNBQUJVSFpFU0FBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBREpBUkJBQXNMc1FnQkZuOGpCQ0VESXdSQm9BSnFKQVFnQVVVRVFFR3ZEaUFBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBREpBUkJBQThMSUFGQ0FEY0FBQ0FCUWdBM0FBZ2dBVUlBTndBUUlBRkNBRGNBR0NBQlFnQTNBQ0FnQVVJQU53QW9JQUZDQURjQU1DQUJRZ0EzQURnZ0FFRUlhaUlHS0FJQVJRUkFRZndRSUFBb0Fxd0JJQUFvQXFnQlFRTnhRUXhxRVFBQUlBTWtCRUVBRHdzZ0FrVUVRRUhLRVNBQUtBS3NBU0FBS0FLb0FVRURjVUVNYWhFQUFDQURKQVJCQUE4TElBTkI5QUJxSVFRZ0EwRWdhaUVGSUFNZ0FpQURRZkFCYWlJQUVCQWdBQ2dDQUNBRFFRUnFJZ2NvQWdBaUNDQURLQUlBSWdseUlBTkJDR29pQ2lnQ0FDSUxjaUFEUVF4cUlnd29BZ0FpRFhJZ0EwRVFhaUlPS0FJQUlnOXlJQU5CRkdvaUVDZ0NBQ0lSY2lBRFFSaHFJaElvQWdBaUUzSWdBMEVjYWlJVUtBSUFJaFZ5UlhKRklnSkJBWE1oRmlBRElBSUVmeUFKQlVFQUN5QVdjallDQUNBSElBSUVmeUFJQlVFQUN6WUNBQ0FLSUFJRWZ5QUxCVUVBQ3pZQ0FDQU1JQUlFZnlBTkJVRUFDellDQUNBT0lBSUVmeUFQQlVFQUN6WUNBQ0FRSUFJRWZ5QVJCVUVBQ3pZQ0FDQVNJQUlFZnlBVEJVRUFDellDQUNBVUlBSUVmeUFWQlVFQUN6WUNBQ0FHSUFRZ0F4QXBJQVVnQkJBZklBQWdCU2tDQURjQ0FDQUFJQVVwQWdnM0FnZ2dBQ0FGS1FJUU53SVFJQUFnQlNrQ0dEY0NHQ0FBSUFVcEFpQTNBaUFnQUJBUElBUWdCVUVvYWlJRktRSUFOd0lBSUFRZ0JTa0NDRGNDQ0NBRUlBVXBBaEEzQWhBZ0JDQUZLUUlZTndJWUlBUWdCU2tDSURjQ0lDQUVFQThnQUNnQ0NDRUZJQUFvQWd3aEJpQUFLQUlVUVFKMElBQW9BaEFpQzBFWWRuSWdBQ2dDR0NJTVFSeDBjaUVOSUFBb0Fod2hCeUFBS0FJa1FRcDBJQUFvQWlBaURrRVFkbkloRHlBRUtBSUVJaEJCR25RZ0JDZ0NBSEloRVNBRUtBSUlJUWdnQkNnQ0RDRUpJQVFvQWhSQkFuUWdCQ2dDRUNJU1FSaDJjaUFFS0FJWUloTkJISFJ5SVJRZ0JDZ0NIQ0VLSUFRb0FpUkJDblFnQkNnQ0lDSUVRUkIyY2lFVklBRWdBQ2dDQkNJWFFScDBJQUFvQWdBaUdISTJBQUFnQVNBRlFSUjBJQmRCQm5aeU5nQUVJQUVnQmtFT2RDQUZRUXgyY2pZQUNDQUJJQXRCQ0hRZ0JrRVNkbkkyQUF3Z0FTQU5OZ0FRSUFFZ0IwRVdkQ0FNUVFSMmNqWUFGQ0FCSUE1QkVIUWdCMEVLZG5JMkFCZ2dBU0FQTmdBY0lBRWdFVFlBSUNBQklBaEJGSFFnRUVFR2RuSTJBQ1FnQVNBSlFRNTBJQWhCREhaeU5nQW9JQUVnRWtFSWRDQUpRUkoyY2pZQUxDQUJJQlEyQURBZ0FTQUtRUlowSUJOQkJIWnlOZ0EwSUFFZ0JFRVFkQ0FLUVFwMmNqWUFPQ0FCSUJVMkFEd2dBQ0FXTmdJQUlBRkJBQ0FBS0FJQWEwSC9BWE1pQkNBWWNUb0FBQ0FCUVFGcUlRQkJQeUVCQTBBZ0FDQUVJQUF0QUFCeE9nQUFJQUJCQVdvaEFDQUJRWDlxSWdFTkFBc2dBMElBTndJQUlBTkNBRGNDQ0NBRFFnQTNBaEFnQTBJQU53SVlJQU1rQkNBQ0M1MEJBUUovSXdRaEFpTUVRVEJxSkFRZ0FrRWdhaUVESUFFRWZ5QUNJQUVnQXhBUUlBTW9BZ0FnQWlnQ0JDQUNLQUlBY2lBQ0tBSUljaUFDS0FJTWNpQUNLQUlRY2lBQ0tBSVVjaUFDS0FJWWNpQUNLQUljY2tWeVJTRUFJQUpDQURjQ0FDQUNRZ0EzQWdnZ0FrSUFOd0lRSUFKQ0FEY0NHQ0FDSkFRZ0FBVkJ5aEVnQUNnQ3JBRWdBQ2dDcUFGQkEzRkJER29SQUFBZ0FpUUVRUUFMQzVzQ0FRSi9Jd1FoQmlNRVFVQnJKQVFnQUNnQ0NFVUVRRUg4RUNBQUtBS3NBU0FBS0FLb0FVRURjVUVNYWhFQUFDQUdKQVJCQUE4TElBSkZCRUJCNmhBZ0FDZ0NyQUVnQUNnQ3FBRkJBM0ZCREdvUkFBQWdCaVFFUVFBUEN5QUJSUVJBUWJnUklBQW9BcXdCSUFBb0FxZ0JRUU54UVF4cUVRQUFJQVlrQkVFQUR3c2dCa0VnYWlFSElBTUVmeUFBSUFjZ0JrRUFJQUlnQXlBRUlBVVFRQ0VBSUFFZ0J5a0FBRGNBQUNBQklBY3BBQWczQUFnZ0FTQUhLUUFRTndBUUlBRWdCeWtBR0RjQUdDQUJRU0JxSWdFZ0Jpa0FBRGNBQUNBQklBWXBBQWczQUFnZ0FTQUdLUUFRTndBUUlBRWdCaWtBR0RjQUdDQUdKQVFnQUFWQnloRWdBQ2dDckFFZ0FDZ0NxQUZCQTNGQkRHb1JBQUFnQmlRRVFRQUxDOWNDQVFKL0l3UWhCeU1FUWNBQmFpUUVJQWRCeUFCcUlnWWdBaWtBQURjQUFDQUdJQUlwQUFnM0FBZ2dCaUFDS1FBUU53QVFJQVlnQWlrQUdEY0FHQ0FHUVNCcUlnSWdBU2tBQURjQUFDQUNJQUVwQUFnM0FBZ2dBaUFCS1FBUU53QVFJQUlnQVNrQUdEY0FHQ0FFQkg4Z0JrRkFheUlCSUFRcEFBQTNBQUFnQVNBRUtRQUlOd0FJSUFFZ0JDa0FFRGNBRUNBQklBUXBBQmczQUJoQjRBQUZRY0FBQ3lFQklBTUVRQ0FHSUFGcUlnSWdBeWtBQURjQUFDQUNJQU1wQUFnM0FBZ2dBVUVRY2lFQkN5QUhJQVlnQVJBM0lBWkNBRGNBQUNBR1FnQTNBQWdnQmtJQU53QVFJQVpDQURjQUdDQUdRZ0EzQUNBZ0JrSUFOd0FvSUFaQ0FEY0FNQ0FHUWdBM0FEZ2dCa0ZBYTBJQU53QUFJQVpDQURjQVNDQUdRZ0EzQUZBZ0JrSUFOd0JZSUFaQ0FEY0FZQ0FHUWdBM0FHaEJBQ0VCQTBBZ0J5QUFFQ3NnQVVFQmFpSUJJQVZORFFBTElBY2tCRUVCQytjYUFTNS9Jd1FoQmlNRVFiQUVhaVFFSUFBb0FnQkZCRUJCdGhBZ0FDZ0NyQUVnQUNnQ3FBRkJBM0ZCREdvUkFBQWdCaVFFUVFBUEN5QUNSUVJBUWVvUUlBQW9BcXdCSUFBb0FxZ0JRUU54UVF4cUVRQUFJQVlrQkVFQUR3c2dBVVVFUUVIN0R5QUFLQUtzQVNBQUtBS29BVUVEY1VFTWFoRUFBQ0FHSkFSQkFBOExJQU5GQkVCQnJ3NGdBQ2dDckFFZ0FDZ0NxQUZCQTNGQkRHb1JBQUFnQmlRRVFRQVBDeUFHSUFKQkFCQVFJQVpCSUdvaUNDQUJLUUFBTndBQUlBZ2dBU2tBQ0RjQUNDQUlJQUVwQUJBM0FCQWdDQ0FCS1FBWU53QVlJQUVvQURnaUVVRi9SeUFCS0FBOElnOUJIM1lpQkVGL2N5SUNjU0FQUWYvLy8vOEhTWElnQWlBQktBQTBJZ3RCZjBkeGNpQUNJQUVvQURBaUVFRi9SM0Z5SUFJZ0FTZ0FMQ0lNUWZQYzNlb0ZTWEZ5SWdKQkFYTWdERUh6M04zcUJVdHhJQVJ5SWdSQkFYTWdBU2dBS0NJTlFaMmdrYjBGU1hFZ0FuSWlBa0VCY3lBTlFaMmdrYjBGUzNFZ0JISWlCRUVCY3lBQktBQWtJZ3BCeHQ2ay8zMUpjU0FDY2tGL2N5SUNJQXBCeHQ2ay8zMUxjU0FFY2lBQ0lBRW9BQ0FpRGtHZ3dlekFCa3R4Y2dSQUlBWWtCRUVBRHdzZ0F5Z0FJQ0VTSUFNb0FDUWhGaUFES0FBb0lSTWdBeWdBTENFWElBTW9BREFoRlNBREtBQTBJUlFnQXlnQU9DRVlJQU1vQUR3aEdTQURLQUFBSWdGQi8vLy9IM0VoR2lBREtBQUVJZ0pCQm5SQndQLy9IM0VnQVVFYWRuSWhHeUFES0FBSUlnRkJESFJCZ09EL0gzRWdBa0VVZG5JaEhDQURLQUFNSWdKQkVuUkJnSUR3SDNFZ0FVRU9kbkloSFNBREtBQVFJZ0ZCR0hSQmdJQ0FHSEVnQWtFSWRuSWhIaUFES0FBVUlnSkJCSFJCOFAvL0gzRWdBVUVjZG5JaEh5QURLQUFZSWdSQkNuUkJnUGovSDNFZ0FrRVdkbkloSUNBREtBQWNJZ0pCRUhSQmdJRDhIM0VnQkVFUWRuSWhJU0FiSUJweUlCeHlJQjF5SUFGQkFuWkIvLy8vSDNFaUpISWdIbklnSDNJZ0FrRUtkaUlsY2lBZ2NpQWhja1VFUUVIekZTQUFLQUtzQVNBQUtBS29BVUVEY1VFTWFoRUFBQ0FHSkFSQkFBOExJQVpCNkFOcUlRRWdCa0hBQTJvaEF5QUdRWkFFYWlFQ0lBWkJvQU5xSVFVZ0JrR0FBMm9oSWlBR1FlQUNhaUVqSUFaQnVBSnFJUWNnQmtHOEFXb2hCQ0FHUVVCcklRa2dFa0gvLy84ZmNTRW1JQlpCQm5SQndQLy9IM0VnRWtFYWRuSWhFaUFUUVF4MFFZRGcveDl4SUJaQkZIWnlJUllnRjBFU2RFR0FnUEFmY1NBVFFRNTJjaUVUSUJWQkdIUkJnSUNBR0hFZ0YwRUlkbkloRnlBVlFRSjJRZi8vL3g5eElTY2dGRUVFZEVIdy8vOGZjU0FWUVJ4MmNpRVZJQmhCQ25SQmdQai9IM0VnRkVFV2RuSWhGQ0FaUVJCMFFZQ0EvQjl4SUJoQkVIWnlJUmdnR1VFS2RpRVpBbjhnQ0VFRWFpSW9LQUlBSUFnb0FnQnlJQWhCQ0dvaUtTZ0NBSElnQ0VFTWFpSXFLQUlBY2lBSVFSQnFJaXNvQWdCeUlBaEJGR29pTENnQ0FISWdDRUVZYWlJdEtBSUFjaUFJUVJ4cUlpNG9BZ0J5Qkg4Z0NpQU9jaUFOY2lBTWNpQVFjaUFMY2lBUmNpQVBjZ1IvSUFFZ0RrSC8vLy8vQTNFMkFnQWdBVUVFYWlJdklBcEJBblJCL1AvLy93TnhJQTVCSG5aeU5nSUFJQUZCQ0dvaURpQU5RUVIwUWZELy8vOERjU0FLUVJ4MmNqWUNBQ0FCUVF4cUlnb2dERUVHZEVIQS8vLy9BM0VnRFVFYWRuSTJBZ0FnQVVFUWFpSU5JQkJCQ0hSQmdQNy8vd054SUF4QkdIWnlOZ0lBSUFGQkZHb2lNQ0FMUVFwMFFZRDQvLzhEY1NBUVFSWjJjallDQUNBQlFSaHFJaEFnRVVFTWRFR0E0UC8vQTNFZ0MwRVVkbkkyQWdBZ0FVRWNhaUlMSUE5QkRuUkJnSUQvL3dOeElCRkJFblp5TmdJQUlBRkJJR29pTVNBUFFSQjJOZ0lBSUFGQnJBa1FKaUFPS0FJQUlROGdDaWdDQUNFTUlBMG9BZ0FoRFNBd0tBSUFJUW9nRUNnQ0FDRVJJQXNvQWdBaEN5QXhLQUlBSVJBZ0JTQXZLQUlBSWc1QkhuUWdBU2dDQUhJMkFnQWdCU0FQUVJ4MElBNUJBblp5TmdJRUlBVWdERUVhZENBUFFRUjJjallDQ0NBRklBMUJHSFFnREVFR2RuSTJBZ3dnQlNBS1FSWjBJQTFCQ0haeU5nSVFJQVVnRVVFVWRDQUtRUXAyY2pZQ0ZDQUZJQXRCRW5RZ0VVRU1kbkkyQWhnZ0JTQVFRUkIwSUF0QkRuWnlOZ0ljSUNJZ0JTQUdFQlVnSXlBRklBZ1FGU0FFUVFBMkFuZ2dCQ0FhTmdJQUlBUWdHellDQkNBRUlCdzJBZ2dnQkNBZE5nSU1JQVFnSGpZQ0VDQUVJQ1EyQWhRZ0JDQWZOZ0lZSUFRZ0lEWUNIQ0FFSUNFMkFpQWdCQ0FsTmdJa0lBUWdKallDS0NBRUlCSTJBaXdnQkNBV05nSXdJQVFnRXpZQ05DQUVJQmMyQWpnZ0JDQW5OZ0k4SUFSQlFHc2dGVFlDQUNBRUlCUTJBa1FnQkNBWU5nSklJQVFnR1RZQ1RDQUVRUUUyQWxBZ0JFSFVBR29pQlVJQU53SUFJQVZDQURjQ0NDQUZRZ0EzQWhBZ0JVSUFOd0lZSUFWQkFEWUNJQ0FBSUFrZ0JDQWpJQ0lRSnlBSktBSjRCSDlCQUFVZ0FpQXVLQUlBSWdCQkdIWTZBQUFnQWlBQVFSQjJPZ0FCSUFJZ0FFRUlkam9BQWlBQ0lBQTZBQU1nQWlBdEtBSUFJZ0JCR0hZNkFBUWdBaUFBUVJCMk9nQUZJQUlnQUVFSWRqb0FCaUFDSUFBNkFBY2dBaUFzS0FJQUlnQkJHSFk2QUFnZ0FpQUFRUkIyT2dBSklBSWdBRUVJZGpvQUNpQUNJQUE2QUFzZ0FpQXJLQUlBSWdCQkdIWTZBQXdnQWlBQVFSQjJPZ0FOSUFJZ0FFRUlkam9BRGlBQ0lBQTZBQThnQWlBcUtBSUFJZ0JCR0hZNkFCQWdBaUFBUVJCMk9nQVJJQUlnQUVFSWRqb0FFaUFDSUFBNkFCTWdBaUFwS0FJQUlnQkJHSFk2QUJRZ0FpQUFRUkIyT2dBVklBSWdBRUVJZGpvQUZpQUNJQUE2QUJjZ0FpQW9LQUlBSWdCQkdIWTZBQmdnQWlBQVFSQjJPZ0FaSUFJZ0FFRUlkam9BR2lBQ0lBQTZBQnNnQWlBSUtBSUFJZ0JCR0hZNkFCd2dBaUFBUVJCMk9nQWRJQUlnQUVFSWRqb0FIaUFDSUFBNkFCOGdCeUFDRUJzYUlBTWdDVUhRQUdvaUJCQUtJQU1nQXlBSEVBd2dDVUVrYWlJSUtBSUFJZ1ZCRm5ZaUFrSFJCMndnQ1NnQ0FHb2hBQ0FDUVFaMElBbEJCR29pRHlnQ0FHb2dBRUVhZG1vaURFRWFkaUFKUVFocUlnMG9BZ0JxSWdwQkduWWdDVUVNYWlJUktBSUFhaUlMUVJwMklBbEJFR29pRUNnQ0FHb2lEa0VhZGlBSlFSUnFJaFVvQWdCcUloSkJHbllnQ1VFWWFpSVdLQUlBYWlJVFFScDJJQWxCSEdvaUZ5Z0NBR29pRkVFYWRpQUpRU0JxSWhnb0FnQnFJUUpCL1AzLy93QWdBeWdDQkdzaEdVSDgvLy8vQUNBREtBSUlheUVhUWZ6Ly8vOEFJQU1vQWd4cklSdEIvUC8vL3dBZ0F5Z0NFR3NoSEVIOC8vLy9BQ0FES0FJVWF5RWRRZnovLy84QUlBTW9BaGhySVI1Qi9QLy8vd0FnQXlnQ0hHc2hIMEg4Ly8vL0FDQURLQUlnYXlFZ0lBTW9BaVFoSVNBQlFiemgvLzhBSUFNb0FnQnJJQUJCLy8vL0gzRnFOZ0lBSUFFZ0dTQU1RZi8vL3g5eGFqWUNCQ0FCSUJvZ0NrSC8vLzhmY1dvMkFnZ2dBU0FiSUF0Qi8vLy9IM0ZxTmdJTUlBRWdIQ0FPUWYvLy94OXhhallDRUNBQklCMGdFa0gvLy84ZmNXbzJBaFFnQVNBZUlCTkIvLy8vSDNGcU5nSVlJQUVnSHlBVVFmLy8veDl4YWpZQ0hDQUJJQ0FnQWtILy8vOGZjV28yQWlBZ0FTQUZRZi8vL3dGeFFmei8vd2RxSUNGcklBSkJHblpxTmdJa0lBRVFHQVIvUVFFRklBZEJKR29pQlNnQ0FBUi9RUUFGSUFkQklHb2lEQ2dDQUFSL1FRQUZJQWRCSEdvaUNpZ0NBQVIvUVFBRklBZEJHR29pQ3lnQ0FBUi9RUUFGSUFkQkZHb2lEaWdDQUFSL1FRQUZJQWRCRUdvaUVpZ0NBQ0lDUWFPaWxRcExCSDlCQUFVZ0IwRU1haUlUS0FJQUlRQUNRQ0FDUWFPaWxRcEdCRUJCQUNBQVFkMkZsUU5MRFF3YUlBQkIzWVdWQTBjTkFVRUFJQWNvQWdnaUFFR0NpUEVQU3cwTUdpQUFRWUtJOFE5SEJFQkIzWVdWQXlFQURBSUxRUUFnQnlnQ0JDSUFRWXU1b1J0TERRd2FJQUJCaTdtaEcwY0VRRUhkaFpVRElRQU1BZ3RCQUNBSEtBSUFRZTMxcGg1TERRd2FRZDJGbFFNaEFBc0xJQWNnQnlnQ0FFSEJndGtCYWpZQ0FDQUhRUVJxSWhRZ0ZDZ0NBRUcweHQ0RWFqWUNBQ0FIUVFocUloUWdGQ2dDQUVIOTk0NFFhallDQUNBVElBQkJvdnJxSEdvMkFnQWdFaUFDUWR6ZDZoVnFOZ0lBSUE1Qi8vLy9IellDQUNBTFFmLy8veDgyQWdBZ0NrSC8vLzhmTmdJQUlBeEIvLy8vSHpZQ0FDQUZRZi8vL3dFMkFnQWdBeUFFRUFvZ0F5QURJQWNRRENBSUtBSUFJZ1JCRm5ZaUFrSFJCMndnQ1NnQ0FHb2hBQ0FDUVFaMElBOG9BZ0JxSUFCQkduWnFJZ2RCR25ZZ0RTZ0NBR29pQ1VFYWRpQVJLQUlBYWlJSVFScDJJQkFvQWdCcUlnVkJHbllnRlNnQ0FHb2lEMEVhZGlBV0tBSUFhaUlNUVJwMklCY29BZ0JxSWcxQkduWWdHQ2dDQUdvaEFrSDgvZi8vQUNBREtBSUVheUVLUWZ6Ly8vOEFJQU1vQWdocklSRkIvUC8vL3dBZ0F5Z0NER3NoQzBIOC8vLy9BQ0FES0FJUWF5RVFRZnovLy84QUlBTW9BaFJySVE1Qi9QLy8vd0FnQXlnQ0dHc2hGVUg4Ly8vL0FDQURLQUljYXlFU1Fmei8vLzhBSUFNb0FpQnJJUllnQXlnQ0pDRVRJQUZCdk9ILy93QWdBeWdDQUdzZ0FFSC8vLzhmY1dvMkFnQWdBU0FLSUFkQi8vLy9IM0ZxTmdJRUlBRWdFU0FKUWYvLy94OXhhallDQ0NBQklBc2dDRUgvLy84ZmNXbzJBZ3dnQVNBUUlBVkIvLy8vSDNGcU5nSVFJQUVnRGlBUFFmLy8veDl4YWpZQ0ZDQUJJQlVnREVILy8vOGZjV28yQWhnZ0FTQVNJQTFCLy8vL0gzRnFOZ0ljSUFFZ0ZpQUNRZi8vL3g5eGFqWUNJQ0FCSUFSQi8vLy9BWEZCL1AvL0Iyb2dFMnNnQWtFYWRtbzJBaVFnQVJBWVFRQkhDd3NMQ3dzTEN3c0ZRUUFMQlVFQUN3c2hBQ0FHSkFRZ0FBdVhCUUlKZndkK0l3UWhCQ01FUVNCcUpBUWdBa1VFUUVHb0VDQUFLQUtzQVNBQUtBS29BVUVEY1VFTWFoRUFBQ0FFSkFSQkFBOExJQVFpQUNBQ0tRQUFOd0FBSUFBZ0Fpa0FDRGNBQ0NBQUlBSXBBQkEzQUJBZ0FDQUNLUUFZTndBWUlBSW9BRGdpQ0VGL1J5QUNLQUE4SWdSQkgzWWlCVUYvY3lJRGNTQUVRZi8vLy84SFNYSWdBeUFDS0FBMElnbEJmMGR4Y2lBRElBSW9BREFpQ2tGL1IzRnlJQU1nQWlnQUxDSURRZlBjM2VvRlNYRnlJZ1pCQVhNZ0EwSHozTjNxQlV0eElBVnlJZ2RCQVhNZ0FpZ0FLQ0lGUVoyZ2tiMEZTWEVnQm5JaUMwRUJjeUFGUVoyZ2tiMEZTM0VnQjNJaUIwRUJjeUFDS0FBa0lnWkJ4dDZrLzMxSmNTQUxja0YvY3lJTElBWkJ4dDZrLzMxTGNTQUhjaUFMSUFJb0FDQWlBa0dnd2V6QUJrdHhjaUVISUFGRkJFQWdBQ1FFSUFjUEN5QUhCRUFnQ0VGL2M2MUMvLy8vL3c5OElBbEJmM090UXYvLy8vOFBmQ0FLUVg5enJVTCsvLy8vRDN3Z0EwRi9jNjFDNXJtNzFRdDhJQVZCZjNPdFFydkFvdm9LZkNBR1FYOXpyVUtNdmNuK0Mzd2dBa0YvYzYxQ3dvTFpnUTE4SWd4Q0lJaDhJZzVDSUloOElnOUNJSWg4SWhCQ0lJaDhJaEZDSUloOEloSkNJSWg4SVEwZ0RDQUdJQUp5SUFWeUlBTnlJQXB5SUFseUlBaHlJQVJ5UVFCSFFSOTBRUjkxclNJTWc2Y2hBaUFQSUF5RHB5RUZJQkFnRElPbklRTWdFU0FNZzZjaENpQVNJQXlEcHlFSklBMGdESU9uSVFnZ0JFRi9jNjFDLy8vLy93OThJQTFDSUloOElBeURweUVFSUE0Z0RJT25JUVlMSUFFZ0FDa0FBRGNBQUNBQklBQXBBQWczQUFnZ0FTQUFLUUFRTndBUUlBRWdBQ2tBR0RjQUdDQUJJQUkyQUNBZ0FTQUdOZ0FrSUFFZ0JUWUFLQ0FCSUFNMkFDd2dBU0FLTmdBd0lBRWdDVFlBTkNBQklBZzJBRGdnQVNBRU5nQThJQUFrQkNBSEM4a0JBUUovSXdRaEF5TUVRVUJySkFRZ0FVVUVRRUdYRUNBQUtBS3NBU0FBS0FLb0FVRURjVUVNYWhFQUFDQURKQVJCQUE4TElBTkJJR29oQkNBQ0JIOGdCQ0FDS1FBQU53QUFJQVFnQWlrQUNEY0FDQ0FFSUFJcEFCQTNBQkFnQkNBQ0tRQVlOd0FZSUFNZ0FrRWdhaUlBS1FBQU53QUFJQU1nQUNrQUNEY0FDQ0FESUFBcEFCQTNBQkFnQXlBQUtRQVlOd0FZSUFFZ0JCQWNJQUZCSUdvZ0F4QWNJQU1rQkVFQkJVSDdEeUFBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBREpBUkJBQXNMa1JzQlhIOGpCQ0VRSXdSQjBBQnFKQVFnQVVVRVFFR2tEeUFBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBUUpBUkJBQThMSUFKRkJFQkJ6QTRnQUNnQ3JBRWdBQ2dDcUFGQkEzRkJER29SQUFBZ0VDUUVRUUFQQ3lBRFJRUkFRZnNQSUFBb0Fxd0JJQUFvQXFnQlFRTnhRUXhxRVFBQUlCQWtCRUVBRHdzZ0F5Z0FBQ0VGSUFNb0FBUWhCaUFES0FBSUlRY2dBeWdBRENFSUlBTW9BQkFoQ1NBREtBQVVJUW9nQXlnQUdDRUxJQU1vQUJ3aERDQURLQUFnSVJFZ0F5Z0FKQ0VQSUFNb0FDZ2hFaUFES0FBc0lSTWdBeWdBTUNFVUlBTW9BRFFoRlNBREtBQTRJUllnQXlnQVBDRU5JQkJCSVdvaUFFSUFOd0FBSUFCQ0FEY0FDQ0FBUWdBM0FCQWdBRUlBTndBWUlBQkJBRG9BSUNBUUlnTkNBRGNBQUNBRFFnQTNBQWdnQTBJQU53QVFJQU5DQURjQUdDQURRUUE2QUNBZ0FFRUJhaUlFSUF4QkdIWTZBQUFnQUVFQ2FpSVhJQXhCRUhZNkFBQWdBRUVEYWlJWUlBeEJDSFk2QUFBZ0FFRUVhaUlaSUF3NkFBQWdBRUVGYWlJTUlBdEJHSFk2QUFBZ0FFRUdhaUlhSUF0QkVIWTZBQUFnQUVFSGFpSWJJQXRCQ0hZNkFBQWdBRUVJYWlJY0lBczZBQUFnQUVFSmFpSUxJQXBCR0hZNkFBQWdBRUVLYWlJZElBcEJFSFk2QUFBZ0FFRUxhaUllSUFwQkNIWTZBQUFnQUVFTWFpSWZJQW82QUFBZ0FFRU5haUlLSUFsQkdIWTZBQUFnQUVFT2FpSWdJQWxCRUhZNkFBQWdBRUVQYWlJaElBbEJDSFk2QUFBZ0FFRVFhaUlpSUFrNkFBQWdBRUVSYWlJSklBaEJHSFk2QUFBZ0FFRVNhaUlqSUFoQkVIWTZBQUFnQUVFVGFpSWtJQWhCQ0hZNkFBQWdBRUVVYWlJbElBZzZBQUFnQUVFVmFpSUlJQWRCR0hZNkFBQWdBRUVXYWlJbUlBZEJFSFk2QUFBZ0FFRVhhaUluSUFkQkNIWTZBQUFnQUVFWWFpSW9JQWM2QUFBZ0FFRVphaUlISUFaQkdIWTZBQUFnQUVFYWFpSXBJQVpCRUhZNkFBQWdBRUViYWlJcUlBWkJDSFk2QUFBZ0FFRWNhaUlySUFZNkFBQWdBRUVkYWlJR0lBVkJHSFk2QUFBZ0FFRWVhaUlzSUFWQkVIWTZBQUFnQUVFZmFpSXRJQVZCQ0hZNkFBQWdBRUVnYWlJT0lBVTZBQUFnQTBFQmFpSUZJQTFCR0hZNkFBQWdBMEVDYWlJdUlBMUJFSFk2QUFBZ0EwRURhaUl2SUExQkNIWTZBQUFnQTBFRWFpSXdJQTA2QUFBZ0EwRUZhaUlOSUJaQkdIWTZBQUFnQTBFR2FpSXhJQlpCRUhZNkFBQWdBMEVIYWlKTElCWkJDSFpCL3dGeElqSTZBQUFnQTBFSWFpSk1JQlpCL3dGeElqTTZBQUFnQTBFSmFpSVdJQlZCR0hZaU5Eb0FBQ0FEUVFwcUlrMGdGVUVRZGtIL0FYRWlOVG9BQUNBRFFRdHFJazRnRlVFSWRrSC9BWEVpTmpvQUFDQURRUXhxSWs4Z0ZVSC9BWEVpTnpvQUFDQURRUTFxSWhVZ0ZFRVlkaUk0T2dBQUlBTkJEbW9pVUNBVVFSQjJRZjhCY1NJNU9nQUFJQU5CRDJvaVVTQVVRUWgyUWY4QmNTSTZPZ0FBSUFOQkVHb2lVaUFVUWY4QmNTSTdPZ0FBSUFOQkVXb2lGQ0FUUVJoMklqdzZBQUFnQTBFU2FpSlRJQk5CRUhaQi93RnhJajA2QUFBZ0EwRVRhaUpVSUJOQkNIWkIvd0Z4SWo0NkFBQWdBMEVVYWlKVklCTkIvd0Z4SWo4NkFBQWdBMEVWYWlJVElCSkJHSFlpUURvQUFDQURRUlpxSWxZZ0VrRVFka0gvQVhFaVFUb0FBQ0FEUVJkcUlsY2dFa0VJZGtIL0FYRWlRam9BQUNBRFFSaHFJbGdnRWtIL0FYRWlRem9BQUNBRFFSbHFJaElnRDBFWWRpSkVPZ0FBSUFOQkdtb2lXU0FQUVJCMlFmOEJjU0pGT2dBQUlBTkJHMm9pV2lBUFFRaDJRZjhCY1NKR09nQUFJQU5CSEdvaVd5QVBRZjhCY1NKSE9nQUFJQU5CSFdvaVhDQVJRUmgySWtnNkFBQWdBMEVlYWlKZElCRkJFSFpCL3dGeElrazZBQUFnQTBFZmFpSVBJQkZCQ0haQi93RnhJa282QUFBZ0EwRWdhaUplSUJGQi93RnhJaEU2QUFBZ0FpZ0NBQUovSUFBc0FBQUVmMEVoQlNBRUxBQUFJbDlCZjBvRWZ5QmZCSDhnQkNFQVFTQUZJQmNzQUFBaUFFRi9TZ1IvSUFBRWZ5QVhJUUJCSHdVZ0dDd0FBQ0lBUVg5S0JIOGdBQVIvSUJnaEFFRWVCU0FaTEFBQUlnQkJmMG9FZnlBQUJIOGdHU0VBUVIwRklBd3NBQUFpQUVGL1NnUi9JQUFFZnlBTUlRQkJIQVVnR2l3QUFDSUFRWDlLQkg4Z0FBUi9JQm9oQUVFYkJTQWJMQUFBSWdCQmYwb0VmeUFBQkg4Z0d5RUFRUm9GSUJ3c0FBQWlBRUYvU2dSL0lBQUVRQ0FjSVFCQkdRd1JDeUFMTEFBQUlnQkJmMHdFUUNBY0lRQkJHUXdSQ3lBQUJFQWdDeUVBUVJnTUVRc2dIU3dBQUNJQVFYOU1CRUFnQ3lFQVFSZ01FUXNnQUFSQUlCMGhBRUVYREJFTElCNHNBQUFpQUVGL1RBUkFJQjBoQUVFWERCRUxJQUFFUUNBZUlRQkJGZ3dSQ3lBZkxBQUFJZ0JCZjB3RVFDQWVJUUJCRmd3UkN5QUFCRUFnSHlFQVFSVU1FUXNnQ2l3QUFDSUFRWDlNQkVBZ0h5RUFRUlVNRVFzZ0FBUkFJQW9oQUVFVURCRUxJQ0FzQUFBaUFFRi9UQVJBSUFvaEFFRVVEQkVMSUFBRVFDQWdJUUJCRXd3UkN5QWhMQUFBSWdCQmYwd0VRQ0FnSVFCQkV3d1JDeUFBQkVBZ0lTRUFRUklNRVFzZ0lpd0FBQ0lBUVg5TUJFQWdJU0VBUVJJTUVRc2dBQVJBSUNJaEFFRVJEQkVMSUFrc0FBQWlBRUYvVEFSQUlDSWhBRUVSREJFTElBQUVRQ0FKSVFCQkVBd1JDeUFqTEFBQUlnQkJmMHdFUUNBSklRQkJFQXdSQ3lBQUJFQWdJeUVBUVE4TUVRc2dKQ3dBQUNJQVFYOU1CRUFnSXlFQVFROE1FUXNnQUFSQUlDUWhBRUVPREJFTElDVXNBQUFpQUVGL1RBUkFJQ1FoQUVFT0RCRUxJQUFFUUNBbElRQkJEUXdSQ3lBSUxBQUFJZ0JCZjB3RVFDQWxJUUJCRFF3UkN5QUFCRUFnQ0NFQVFRd01FUXNnSml3QUFDSUFRWDlNQkVBZ0NDRUFRUXdNRVFzZ0FBUkFJQ1loQUVFTERCRUxJQ2NzQUFBaUFFRi9UQVJBSUNZaEFFRUxEQkVMSUFBRVFDQW5JUUJCQ2d3UkN5QW9MQUFBSWdCQmYwd0VRQ0FuSVFCQkNnd1JDeUFBQkVBZ0tDRUFRUWtNRVFzZ0J5d0FBQ0lBUVg5TUJFQWdLQ0VBUVFrTUVRc2dBQVJBSUFjaEFFRUlEQkVMSUNrc0FBQWlBRUYvVEFSQUlBY2hBRUVJREJFTElBQUVRQ0FwSVFCQkJ3d1JDeUFxTEFBQUlnQkJmMHdFUUNBcElRQkJCd3dSQ3lBQUJFQWdLaUVBUVFZTUVRc2dLeXdBQUNJQVFYOU1CRUFnS2lFQVFRWU1FUXNnQUFSQUlDc2hBRUVGREJFTElBWXNBQUFpQUVGL1RBUkFJQ3NoQUVFRkRCRUxJQUFFUUNBR0lRQkJCQXdSQ3lBc0xBQUFJZ0JCZjB3RVFDQUdJUUJCQkF3UkN5QUFCRUFnTENFQVFRTU1FUXNnTFN3QUFDSUFRWDlNQkVBZ0xDRUFRUU1NRVFzZ0FBUkFJQzBoQUVFQ0RCRUxJQTRzQUFCQmYwb2lCQVIvSUE0RklDMExJUUFnQkFSL1FRRUZRUUlMQlNBYklRQkJHZ3NMQlNBYUlRQkJHd3NMQlNBTUlRQkJIQXNMQlNBWklRQkJIUXNMQlNBWUlRQkJIZ3NMQlNBWElRQkJId3NMQlNBRUlRQkJJQXNMQlVFaEN3c0xJZzVCQm1vQ2Z5QURMQUFBQkg5QklRVWdCU3dBQUNJRVFYOUtCSDhnQkFSL0lBVWhBMEVnQlNBdUxBQUFJZ05CZjBvRWZ5QURCSDhnTGlFRFFSOEZJQzhzQUFBaUEwRi9TZ1IvSUFNRWZ5QXZJUU5CSGdVZ01Dd0FBQ0lEUVg5S0JIOGdBd1IvSURBaEEwRWRCU0FOTEFBQUlnTkJmMG9FZnlBREJIOGdEU0VEUVJ3RklERXNBQUFpQTBGL1NnUi9JQU5GSURKQkdIUkJHSFZCZjBweEJIOGdNa1VnTTBFWWRFRVlkVUYvU25FRWZ5QXpSU0EwUVJoMFFSaDFRWDlLY1FSL0lEUkZJRFZCR0hSQkdIVkJmMHB4UlFSQUlCWWhBMEVZREJBTElEVkZJRFpCR0hSQkdIVkJmMHB4UlFSQUlFMGhBMEVYREJBTElEWkZJRGRCR0hSQkdIVkJmMHB4UlFSQUlFNGhBMEVXREJBTElEZEZJRGhCR0hSQkdIVkJmMHB4UlFSQUlFOGhBMEVWREJBTElEaEZJRGxCR0hSQkdIVkJmMHB4UlFSQUlCVWhBMEVVREJBTElEbEZJRHBCR0hSQkdIVkJmMHB4UlFSQUlGQWhBMEVUREJBTElEcEZJRHRCR0hSQkdIVkJmMHB4UlFSQUlGRWhBMEVTREJBTElEdEZJRHhCR0hSQkdIVkJmMHB4UlFSQUlGSWhBMEVSREJBTElEeEZJRDFCR0hSQkdIVkJmMHB4UlFSQUlCUWhBMEVRREJBTElEMUZJRDVCR0hSQkdIVkJmMHB4UlFSQUlGTWhBMEVQREJBTElENUZJRDlCR0hSQkdIVkJmMHB4UlFSQUlGUWhBMEVPREJBTElEOUZJRUJCR0hSQkdIVkJmMHB4UlFSQUlGVWhBMEVOREJBTElFQkZJRUZCR0hSQkdIVkJmMHB4UlFSQUlCTWhBMEVNREJBTElFRkZJRUpCR0hSQkdIVkJmMHB4UlFSQUlGWWhBMEVMREJBTElFSkZJRU5CR0hSQkdIVkJmMHB4UlFSQUlGY2hBMEVLREJBTElFTkZJRVJCR0hSQkdIVkJmMHB4UlFSQUlGZ2hBMEVKREJBTElFUkZJRVZCR0hSQkdIVkJmMHB4UlFSQUlCSWhBMEVJREJBTElFVkZJRVpCR0hSQkdIVkJmMHB4UlFSQUlGa2hBMEVIREJBTElFWkZJRWRCR0hSQkdIVkJmMHB4UlFSQUlGb2hBMEVHREJBTElFZEZJRWhCR0hSQkdIVkJmMHB4UlFSQUlGc2hBMEVGREJBTElFaEZJRWxCR0hSQkdIVkJmMHB4UlFSQUlGd2hBMEVFREJBTElFbEZJRXBCR0hSQkdIVkJmMHB4UlFSQUlGMGhBMEVEREJBTElFb0VRQ0FQSVFOQkFnd1FDeUFSUVJoMFFSaDFRWDlLSWdRRWZ5QmVCU0FQQ3lFRElBUUVmMEVCQlVFQ0N3VWdUQ0VEUVJrTEJTQkxJUU5CR2dzRklERWhBMEViQ3dVZ0RTRURRUndMQ3dVZ01DRURRUjBMQ3dVZ0x5RURRUjRMQ3dVZ0xpRURRUjhMQ3dVZ0JTRURRU0FMQ3dWQklRc0xDeUlFYWlJWFNTRVlJQUlnRnpZQ0FDQVlCSDlCQUFVZ0FVRXdPZ0FBSUFFZ0JDQU9RUVJxSWdKcU9nQUJJQUZCQWpvQUFpQUJJQTQ2QUFNZ0FVRUVhaUFBSUE0UURob2dBU0FDYWtFQ09nQUFJQUVnRGtFRmFtb2dCRG9BQUNBQklBNXFRUVpxSUFNZ0JCQU9Ha0VCQ3lFQUlCQWtCQ0FBQzdFQ0FRTi9Jd1FoQXlNRVFkQUFhaVFFSUFOQkFEWUNBQ0FCUlFSQVFmc1BJQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFNa0JFRUFEd3NnQWtVRVFFR0hFQ0FBS0FLc0FTQUFLQUtvQVVFRGNVRU1haEVBQUNBREpBUkJBQThMSUFOQktHb2lCQ0FDSUFNUUVDQURLQUlBSVFBZ0EwRUlhaUlGSUFKQklHb2dBeEFRSUFNb0FnQWdBSEpGSWdBaEFpQUFCSDhnQVNBRUtRQUFOd0FBSUFFZ0JDa0FDRGNBQ0NBQklBUXBBQkEzQUJBZ0FTQUVLUUFZTndBWUlBRkJJR29pQUNBRktRQUFOd0FBSUFBZ0JTa0FDRGNBQ0NBQUlBVXBBQkEzQUJBZ0FDQUZLUUFZTndBWUlBTWtCQ0FDQlNBQlFnQTNBQUFnQVVJQU53QUlJQUZDQURjQUVDQUJRZ0EzQUJnZ0FVSUFOd0FnSUFGQ0FEY0FLQ0FCUWdBM0FEQWdBVUlBTndBNElBTWtCQ0FDQ3d1aUJBRUdmeU1FSVFRakJFSFFBR29rQkNBQlJRUkFRZnNQSUFBb0Fxd0JJQUFvQXFnQlFRTnhRUXhxRVFBQUlBUWtCRUVBRHdzZ0FrVUVRRUcrRGlBQUtBS3NBU0FBS0FLb0FVRURjVUVNYWhFQUFDQUVKQVJCQUE4TElBUkJJR29oQ0NBRVFVQnJJZ1lnQWpZQ0FDQUNJQU5xSVFjQ1FDQURCRUFnQmlBQ1FRRnFJZ1UyQWdBZ0EwRUJTaUFDTEFBQVFUQkdjUVJBSUFZZ0FrRUNhaUlBTmdJQUlBVXNBQUFpQlVIL0FYRWhBeUFGUVg5SEJFQWdBMEdBQVhFRWZ5QUZRWUIvUmcwRUlBTkIvd0J4SWdrZ0J5QUFhMHNOQkNBSlFYOXFJZ05CQTBzZ0FDd0FBQ0lBUlhJTkJDQUFRZjhCY1NFQUlBWWdBa0VEYWlJRk5nSUFJQU1FUUNBSlFRSnFJUWtEUUNBQVFRaDBJQVV0QUFCeUlRQWdCaUFGUVFGcUlnVTJBZ0FnQTBGL2FpSUREUUFMSUFJZ0NXb2hCUXNnQUVHQUFVa2dBQ0FISUFWclMzSU5CQ0FBSVFNZ0JTRUFJQWNGSUFjTElRSWdBeUFDSUFCclJnUkFJQWdnQmlBSEVEZ0VRQ0FFSUFZZ0J4QTRCRUFnQmlnQ0FDQUhSZ1JBSUFFZ0NDa0FBRGNBQUNBQklBZ3BBQWczQUFnZ0FTQUlLUUFRTndBUUlBRWdDQ2tBR0RjQUdDQUJRU0JxSWdBZ0JDa0FBRGNBQUNBQUlBUXBBQWczQUFnZ0FDQUVLUUFRTndBUUlBQWdCQ2tBR0RjQUdDQUVKQVJCQVE4TEN3c0xDd3NMQ3lBQlFnQTNBQUFnQVVJQU53QUlJQUZDQURjQUVDQUJRZ0EzQUJnZ0FVSUFOd0FnSUFGQ0FEY0FLQ0FCUWdBM0FEQWdBVUlBTndBNElBUWtCRUVBQ3dnQVFRSVFBRUVBQzVJSEFSTi9Jd1FoQlNNRVFlQUFhaVFFSUFKRkJFQkJ6QTRnQUNnQ3JBRWdBQ2dDcUFGQkEzRkJER29SQUFBZ0JTUUVRUUFQQ3lBQ0tBSUFJZ1lnQkVHQUFuRWlGRUVEZGtFZ2MwRWhha2tFUUVIZURpQUFLQUtzQVNBQUtBS29BVUVEY1VFTWFoRUFBQ0FGSkFSQkFBOExJQUpCQURZQ0FDQUJSUVJBUWFRUElBQW9BcXdCSUFBb0FxZ0JRUU54UVF4cUVRQUFJQVVrQkVFQUR3c2dBVUVBSUFZUUdSb2dBMFVFUUVHdkRpQUFLQUtzQVNBQUtBS29BVUVEY1VFTWFoRUFBQ0FGSkFSQkFBOExJQVJCL3dGeFFRSkhCRUJCc3c4Z0FDZ0NyQUVnQUNnQ3FBRkJBM0ZCREdvUkFBQWdCU1FFUVFBUEN5QURLQUFFSVFjZ0F5Z0FDQ0VJSUFNb0FBd2hDU0FES0FBUUlRb2dBeWdBRkNFR0lBTW9BQmdoQkNBREtBQWNJUXdnQXlnQUlDRU5JQU1vQUNRaERpQURLQUFvSVE4Z0F5Z0FMQ0VRSUFNb0FEQWhDeUFES0FBMElSRWdBeWdBT0NFU0lBTW9BRHdoRXlBRklBTW9BQUFpQTBILy8vOGZjVFlDQUNBRklBZEJCblJCd1AvL0gzRWdBMEVhZG5JaUZUWUNCQ0FGSUFoQkRIUkJnT0QvSDNFZ0IwRVVkbklpRmpZQ0NDQUZJQWxCRW5SQmdJRHdIM0VnQ0VFT2RuSWlGellDRENBRklBcEJHSFJCZ0lDQUdIRWdDVUVJZG5JaUJ6WUNFQ0FGSUFwQkFuWkIvLy8vSDNFaUNEWUNGQ0FGSUFaQkJIUkI4UC8vSDNFZ0NrRWNkbklpQ1RZQ0dDQUZJQVJCQ25SQmdQai9IM0VnQmtFV2RuSWlCallDSENBRklBeEJFSFJCZ0lEOEgzRWdCRUVRZG5JaUJEWUNJQ0FGSUF4QkNuWWlBellDSkNBRklBMUIvLy8vSDNFMkFpZ2dCU0FPUVFaMFFjRC8veDl4SUExQkduWnlOZ0lzSUFVZ0QwRU1kRUdBNFA4ZmNTQU9RUlIyY2pZQ01DQUZJQkJCRW5SQmdJRHdIM0VnRDBFT2RuSTJBalFnQlNBTFFSaDBRWUNBZ0JoeElCQkJDSFp5TmdJNElBVWdDMEVDZGtILy8vOGZjVFlDUENBRlFVQnJJQkZCQkhSQjhQLy9IM0VnQzBFY2RuSTJBZ0FnQlNBU1FRcDBRWUQ0L3g5eElCRkJGblp5TmdKRUlBVWdFMEVRZEVHQWdQd2ZjU0FTUVJCMmNqWUNTQ0FGSUJOQkNuWTJBa3dnQlVFQU5nSlFJQlVnQlNnQ0FISWdGbklnRjNJZ0IzSWdDSElnQ1hJZ0JuSWdCSElnQTNKRkJFQkI4eFVnQUNnQ3JBRWdBQ2dDcUFGQkEzRkJER29SQUFBZ0JTUUVRUUFQQ3lBRkVCY2dCVUVvYWlJQUVCY2dBVUVCYWlBRkVDMGdBaUFVQkg4Z0FTQUFLQUlBUVFGeFFRSnlPZ0FBUVNFRklBRkJCRG9BQUNBQlFTRnFJQUFRTFVIQkFBc2lBRFlDQUNBRkpBUkJBUXNJQUVFQUVBQkJBQXVmREFFVGZ5TUVJUVFqQkVHZ0Ftb2tCQ0FCUlFSQVFhOE9JQUFvQXF3QklBQW9BcWdCUVFOeFFReHFFUUFBSUFRa0JFRUFEd3NnQVVJQU53QUFJQUZDQURjQUNDQUJRZ0EzQUJBZ0FVSUFOd0FZSUFGQ0FEY0FJQ0FCUWdBM0FDZ2dBVUlBTndBd0lBRkNBRGNBT0NBQ1JRUkFRYjRPSUFBb0Fxd0JJQUFvQXFnQlFRTnhRUXhxRVFBQUlBUWtCRUVBRHdzZ0JFSDRBV29oQlNBRVFkQUJhaUVHSUFSQnFBRnFJUUFnQkVHQUFXb2hDQ0FFUWRnQWFpRUhBa0FDUUFKQUFrQWdBMEVoYXc0aEFBSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lCQWdzZ0Fpd0FBRUgrQVhGQkFrY0VRQ0FFSkFSQkFBOExJQVVnQWtFQmFoQWJCSDhnQkNBRklBSXNBQUJCQTBZUUxFRUFSd1ZCQUFzaEFBd0NDd0pBQWtBQ1FDQUNMQUFBUVFSckRnUUFBUUFBQVFzTUFRc2dCQ1FFUVFBUEN3Si9JQWdnQWtFQmFoQWJCSDhnQnlBQ1FTRnFFQnNFZnlBRVFRQTJBbEFnQkNBSUtRSUFOd0lBSUFRZ0NDa0NDRGNDQ0NBRUlBZ3BBaEEzQWhBZ0JDQUlLUUlZTndJWUlBUWdDQ2tDSURjQ0lDQUVRU2hxSWdNZ0J5a0NBRGNDQUNBRElBY3BBZ2czQWdnZ0F5QUhLUUlRTndJUUlBTWdCeWtDR0RjQ0dDQURJQWNwQWlBM0FpQWdBaXdBQUNJQ1FmNEJjVUVHUmdSQVFRQWdBa0VIUmlBSEtBSUFRUUZ4UVFCSGN3MERHZ3NnQmlBREVBb2dBQ0FFRUFvZ0FDQUFJQVFRRENBQUtBSUFRUWRxSUFBb0FpUWlBMEVXZGlJSFFkRUhiR29oQWlBSFFRWjBJQUFvQWdScUlBSkJHblpxSWdkQkduWWdBQ2dDQ0dvaUNFRWFkaUFBS0FJTWFpSUpRUnAySUFBb0FoQnFJZ3BCR25ZZ0FDZ0NGR29pQzBFYWRpQUFLQUlZYWlJTVFScDJJQUFvQWh4cUlnMUJHbllnQUNnQ0lHb2hBQ0FHS0FJRUlRNGdCaWdDQ0NFUElBWW9BZ3doRUNBR0tBSVFJUkVnQmlnQ0ZDRVNJQVlvQWhnaEV5QUdLQUljSVJSQi9QLy8vd0FnQmlnQ0lHc2hGU0FHS0FJa0lSWWdCVUc4NGYvL0FDQUdLQUlBYXlBQ1FmLy8veDl4YWpZQ0FDQUZRZno5Ly84QUlBNXJJQWRCLy8vL0gzRnFOZ0lFSUFWQi9QLy8vd0FnRDJzZ0NFSC8vLzhmY1dvMkFnZ2dCVUg4Ly8vL0FDQVFheUFKUWYvLy94OXhhallDRENBRlFmei8vLzhBSUJGcklBcEIvLy8vSDNGcU5nSVFJQVZCL1AvLy93QWdFbXNnQzBILy8vOGZjV28yQWhRZ0JVSDgvLy8vQUNBVGF5QU1RZi8vL3g5eGFqWUNHQ0FGUWZ6Ly8vOEFJQlJySUExQi8vLy9IM0ZxTmdJY0lBVWdGU0FBUWYvLy94OXhhallDSUNBRklBTkIvLy8vQVhGQi9QLy9CMm9nRm1zZ0FFRWFkbW8yQWlRZ0JSQVlCVUVBQ3dWQkFBc0xJUUFNQVFzZ0JDUUVRUUFQQ3lBQVJRUkFJQVFrQkVFQUR3c2dCU0FFS1FJQU53SUFJQVVnQkNrQ0NEY0NDQ0FGSUFRcEFoQTNBaEFnQlNBRUtRSVlOd0lZSUFVZ0JDa0NJRGNDSUNBRkVBOGdCaUFFUVNocUlnQXBBZ0EzQWdBZ0JpQUFLUUlJTndJSUlBWWdBQ2tDRURjQ0VDQUdJQUFwQWhnM0FoZ2dCaUFBS1FJZ053SWdJQVlRRHlBRktBSUlJUUFnQlNnQ0RDRUNJQVVvQWhSQkFuUWdCU2dDRUNJS1FSaDJjaUFGS0FJWUlndEJISFJ5SVF3Z0JTZ0NIQ0VESUFVb0FpUkJDblFnQlNnQ0lDSU5RUkIyY2lFT0lBWW9BZ1FpRDBFYWRDQUdLQUlBY2lFUUlBWW9BZ2doQnlBR0tBSU1JUWdnQmlnQ0ZFRUNkQ0FHS0FJUUloRkJHSFp5SUFZb0FoZ2lFa0VjZEhJaEV5QUdLQUljSVFrZ0JpZ0NKRUVLZENBR0tBSWdJZ1pCRUhaeUlSUWdBU0FGS0FJRUloVkJHblFnQlNnQ0FISTJBQUFnQVNBQVFSUjBJQlZCQm5aeU5nQUVJQUVnQWtFT2RDQUFRUXgyY2pZQUNDQUJJQXBCQ0hRZ0FrRVNkbkkyQUF3Z0FTQU1OZ0FRSUFFZ0EwRVdkQ0FMUVFSMmNqWUFGQ0FCSUExQkVIUWdBMEVLZG5JMkFCZ2dBU0FPTmdBY0lBRWdFRFlBSUNBQklBZEJGSFFnRDBFR2RuSTJBQ1FnQVNBSVFRNTBJQWRCREhaeU5nQW9JQUVnRVVFSWRDQUlRUkoyY2pZQUxDQUJJQk0yQURBZ0FTQUpRUlowSUJKQkJIWnlOZ0EwSUFFZ0JrRVFkQ0FKUVFwMmNqWUFPQ0FCSUJRMkFEd2dCRUlBTndJQUlBUkNBRGNDQ0NBRVFnQTNBaEFnQkVJQU53SVlJQVJDQURjQ0lDQUVRZ0EzQWlnZ0JFSUFOd0l3SUFSQ0FEY0NPQ0FFUVVCclFnQTNBZ0FnQkVJQU53SklJQVJCQURZQ1VDQUVKQVJCQVF0ckFRSi9JQUJCeWdCcUlnSXNBQUFoQVNBQ0lBRkIvd0ZxSUFGeU9nQUFJQUFvQWdBaUFVRUljUVIvSUFBZ0FVRWdjallDQUVGL0JTQUFRUUEyQWdnZ0FFRUFOZ0lFSUFBZ0FDZ0NMQ0lCTmdJY0lBQWdBVFlDRkNBQUlBRWdBQ2dDTUdvMkFoQkJBQXNpQUF2cUFRRUVmd0pBQWtBZ0FrRVFhaUlFS0FJQUlnTU5BQ0FDRUhNRVFFRUFJUUlGSUFRb0FnQWhBd3dCQ3d3QkN5QURJQUpCRkdvaUJTZ0NBQ0lFYXlBQlNRUkFJQUlnQUNBQklBSW9BaVJCQTNGQkFtb1JBd0FoQWd3QkN3SkFJQUlzQUV0QmYwb0VRQ0FCSVFNRFFDQURSUVJBUVFBaEF3d0RDeUFBSUFOQmYyb2lCbW9zQUFCQkNrY0VRQ0FHSVFNTUFRc0xJQUlnQUNBRElBSW9BaVJCQTNGQkFtb1JBd0FpQWlBRFNRMENJQUFnQTJvaEFDQUJJQU5ySVFFZ0JTZ0NBQ0VFQlVFQUlRTUxDeUFFSUFBZ0FSQU9HaUFGSUFVb0FnQWdBV28yQWdBZ0F5QUJhaUVDQ3lBQ0Mva1hBeE4vQW40RGZDTUVJUTBqQkVHd0JHb2tCQ0FOUVFBMkFnQWdBU0lidlVJQVV3UkFJQUdhSVFGQkFTRVJRZHNvSVE0RklBUkJnQkJ4UlNFR0lBUkJBWEVFZjBIaEtBVkIzQ2dMSVE0Z0JFR0JFSEZCQUVjaEVTQUdSUVJBUWQ0b0lRNExDeUFOUVFocUlRa2dEVUdNQkdvaUR5RVNJQTFCZ0FScUlnaEJER29oRXdKL0lBRWlHNzFDZ0lDQWdJQ0FnUGovQUlOQ2dJQ0FnSUNBZ1BqL0FGRUVmeUFGUVNCeFFRQkhJZ01FZjBIdUtBVkI4aWdMSVFVZ0FTQUJZaUVHSUFNRWYwSDJLQVZCK2lnTElRa2dBRUVnSUFJZ0VVRURhaUlESUFSQi8vOTdjUkFTSUFBZ0RpQVJFQkVnQUNBR0JIOGdDUVVnQlF0QkF4QVJJQUJCSUNBQ0lBTWdCRUdBd0FCekVCSWdBd1VnQVNBTklnWVFNRVFBQUFBQUFBQUFRS0lpQVVRQUFBQUFBQUFBQUdJaUJnUkFJQTBnRFNnQ0FFRi9hallDQUFzZ0JVRWdjaUlMUWVFQVJnUkFJQTVCQ1dvaEJpQUZRU0J4SWdjRVFDQUdJUTRMSUFOQkMwdEJEQ0FEYXlJR1JYSkZCRUJFQUFBQUFBQUFJRUFoR3dOQUlCdEVBQUFBQUFBQU1FQ2lJUnNnQmtGL2FpSUdEUUFMSUE0c0FBQkJMVVlFZkNBYklBR2FJQnVob0pvRklBRWdHNkFnRzZFTElRRUxRUUFnRFNnQ0FDSUpheUVHSUFsQkFFZ0VmeUFHQlNBSkM2d2dFeEFrSWdZZ0UwWUVRQ0FJUVF0cUlnWkJNRG9BQUFzZ0VVRUNjaUVJSUFaQmYyb2dDVUVmZFVFQ2NVRXJham9BQUNBR1FYNXFJZ2tnQlVFUGFqb0FBQ0FEUVFGSUlRb2dCRUVJY1VVaERDQVBJUVVEUUNBRklBY2dBYW9pQmtIK0tHb3RBQUJ5T2dBQUlBRWdCcmVoUkFBQUFBQUFBREJBb2lFQklBVkJBV29pQmlBU2EwRUJSZ1IvSUF3Z0NpQUJSQUFBQUFBQUFBQUFZWEZ4Qkg4Z0JnVWdCa0V1T2dBQUlBVkJBbW9MQlNBR0N5RUZJQUZFQUFBQUFBQUFBQUJpRFFBTEFuOENRQ0FEUlEwQVFYNGdFbXNnQldvZ0EwNE5BQ0FEUVFKcUlRTWdCU0FTYXd3QkN5QUZJQkpySWdNTElRWWdBRUVnSUFJZ0V5QUpheUlISUFocUlBTnFJZ1VnQkJBU0lBQWdEaUFJRUJFZ0FFRXdJQUlnQlNBRVFZQ0FCSE1RRWlBQUlBOGdCaEFSSUFCQk1DQURJQVpyUVFCQkFCQVNJQUFnQ1NBSEVCRWdBRUVnSUFJZ0JTQUVRWURBQUhNUUVpQUZEQUlMSUFZRVFDQU5JQTBvQWdCQlpHb2lCellDQUNBQlJBQUFBQUFBQUxCQm9pRUJCU0FOS0FJQUlRY0xJQWxCb0FKcUlRWWdCMEVBU0FSL0lBa0ZJQVlpQ1FzaENBTkFJQWdnQWFzaUJqWUNBQ0FJUVFScUlRZ2dBU0FHdUtGRUFBQUFBR1hOelVHaUlnRkVBQUFBQUFBQUFBQmlEUUFMSUFkQkFFb0VRQ0FKSVFZRFFDQUhRUjFJQkg4Z0J3VkJIUXNoRENBSVFYeHFJZ2NnQms4RVFDQU1yU0VaUVFBaENnTkFJQWNnQnlnQ0FLMGdHWVlnQ3ExOElocENnSlRyM0FPQ1BnSUFJQnBDZ0pUcjNBT0FweUVLSUFkQmZHb2lCeUFHVHcwQUN5QUtCRUFnQmtGOGFpSUdJQW8yQWdBTEN3TkFJQWdnQmtzRVFDQUlRWHhxSWdjb0FnQkZCRUFnQnlFSURBSUxDd3NnRFNBTktBSUFJQXhySWdjMkFnQWdCMEVBU2cwQUN3VWdDU0VHQ3lBRFFRQklCSDlCQmdVZ0F3c2hDaUFIUVFCSUJFQWdDa0VaYWtFSmJVRUJhaUVRSUF0QjVnQkdJUlVnQmlFRElBZ2hCZ05BUVFBZ0Iyc2lERUVKVGdSQVFRa2hEQXNnQXlBR1NRUkFRUUVnREhSQmYyb2hGa0dBbE92Y0F5QU1kaUVVUVFBaEJ5QURJUWdEUUNBSUlBZ29BZ0FpRnlBTWRpQUhhallDQUNBWElCWnhJQlJzSVFjZ0NFRUVhaUlJSUFaSkRRQUxJQU5CQkdvaENDQURLQUlBUlFSQUlBZ2hBd3NnQndSQUlBWWdCellDQUNBR1FRUnFJUVlMQlNBRFFRUnFJUWdnQXlnQ0FFVUVRQ0FJSVFNTEN5QVZCSDhnQ1FVZ0F3c2lDQ0FRUVFKMGFpRUhJQVlnQ0d0QkFuVWdFRW9FUUNBSElRWUxJQTBnRFNnQ0FDQU1haUlITmdJQUlBZEJBRWdOQUNBR0lRY0xCU0FHSVFNZ0NDRUhDeUFKSVF3Z0F5QUhTUVJBSUF3Z0EydEJBblZCQ1d3aEJpQURLQUlBSWdoQkNrOEVRRUVLSVFrRFFDQUdRUUZxSVFZZ0NDQUpRUXBzSWdsUERRQUxDd1ZCQUNFR0N5QUxRZWNBUmlFVklBcEJBRWNoRmlBS0lBdEI1Z0JIQkg4Z0JnVkJBQXRySUJZZ0ZYRkJIM1JCSDNWcUlna2dCeUFNYTBFQ2RVRUpiRUYzYWtnRWZ5QUpRWURJQUdvaUNVRUpiU0VRSUFsQkNXOGlDVUVJU0FSQVFRb2hDQU5BSUFsQkFXb2hDeUFJUVFwc0lRZ2dDVUVIU0FSQUlBc2hDUXdCQ3dzRlFRb2hDQXNnRENBUVFRSjBha0dFWUdvaUNTZ0NBQ0lRSUFod0lRc2dDVUVFYWlBSFJpSVVJQXRGY1VVRVFDQVFJQWh1UVFGeEJIeEVBUUFBQUFBQVFFTUZSQUFBQUFBQUFFQkRDeUVjSUFzZ0NFRUNiU0lYU1NFWUlCUWdDeUFYUm5FRWZFUUFBQUFBQUFEd1B3VkVBQUFBQUFBQStEOExJUUVnR0FSQVJBQUFBQUFBQU9BL0lRRUxJQkVFZkNBY21pRWJJQUdhSVIwZ0Rpd0FBRUV0UmlJVUJFQWdHeUVjQ3lBVUJId2dIUVVnQVFzaEd5QWNCU0FCSVJzZ0hBc2hBU0FKSUJBZ0Myc2lDellDQUNBQklCdWdJQUZpQkVBZ0NTQUxJQWhxSWdZMkFnQWdCa0gvayt2Y0Ewc0VRQU5BSUFsQkFEWUNBQ0FKUVh4cUlna2dBMGtFUUNBRFFYeHFJZ05CQURZQ0FBc2dDU0FKS0FJQVFRRnFJZ1kyQWdBZ0JrSC9rK3ZjQTBzTkFBc0xJQXdnQTJ0QkFuVkJDV3doQmlBREtBSUFJZ3RCQ2s4RVFFRUtJUWdEUUNBR1FRRnFJUVlnQ3lBSVFRcHNJZ2hQRFFBTEN3c0xJQVloQ0NBSElBbEJCR29pQmswRVFDQUhJUVlMSUFNRklBWWhDQ0FISVFZZ0F3c2hDUU5BQWtBZ0JpQUpUUVJBUVFBaEVBd0JDeUFHUVh4cUlnTW9BZ0FFUUVFQklSQUZJQU1oQmd3Q0N3c0xRUUFnQ0dzaEZDQVZCRUFnQ2lBV1FRRnpRUUZ4YWlJRElBaEtJQWhCZTBweEJIOGdCVUYvYWlFRklBTkJmMm9nQ0dzRklBVkJmbW9oQlNBRFFYOXFDeUVESUFSQkNIRWlDa1VFUUNBUUJFQWdCa0Y4YWlnQ0FDSUxCRUFnQzBFS2NBUkFRUUFoQndWQkFDRUhRUW9oQ2dOQUlBZEJBV29oQnlBTElBcEJDbXdpQ25CRkRRQUxDd1ZCQ1NFSEN3VkJDU0VIQ3lBR0lBeHJRUUoxUVFsc1FYZHFJUW9nQlVFZ2NrSG1BRVlFZnlBRElBb2dCMnNpQjBFQVNnUi9JQWNGUVFBaUJ3dE9CRUFnQnlFREMwRUFCU0FESUFvZ0NHb2dCMnNpQjBFQVNnUi9JQWNGUVFBaUJ3dE9CRUFnQnlFREMwRUFDeUVLQ3dVZ0NpRURJQVJCQ0hFaENnc2dCVUVnY2tIbUFFWWlGUVJBUVFBaEJ5QUlRUUJNQkVCQkFDRUlDd1VnRXlBSVFRQklCSDhnRkFVZ0NBdXNJQk1RSkNJSGEwRUNTQVJBQTBBZ0IwRi9haUlIUVRBNkFBQWdFeUFIYTBFQ1NBMEFDd3NnQjBGL2FpQUlRUjkxUVFKeFFTdHFPZ0FBSUFkQmZtb2lCeUFGT2dBQUlCTWdCMnNoQ0FzZ0FFRWdJQUlnRVVFQmFpQURhaUFESUFweUloWkJBRWRxSUFocUlnc2dCQkFTSUFBZ0RpQVJFQkVnQUVFd0lBSWdDeUFFUVlDQUJITVFFaUFWQkVBZ0QwRUphaUlPSVFvZ0QwRUlhaUVJSUFrZ0RFc0VmeUFNQlNBSkN5SUhJUWtEUUNBSktBSUFyU0FPRUNRaEJTQUpJQWRHQkVBZ0JTQU9SZ1JBSUFoQk1Eb0FBQ0FJSVFVTEJTQUZJQTlMQkVBZ0QwRXdJQVVnRW1zUUdSb0RRQ0FGUVg5cUlnVWdEMHNOQUFzTEN5QUFJQVVnQ2lBRmF4QVJJQWxCQkdvaUJTQU1UUVJBSUFVaENRd0JDd3NnRmdSQUlBQkJqaWxCQVJBUkN5QUZJQVpKSUFOQkFFcHhCRUFEUUNBRktBSUFyU0FPRUNRaUNTQVBTd1JBSUE5Qk1DQUpJQkpyRUJrYUEwQWdDVUYvYWlJSklBOUxEUUFMQ3lBQUlBa2dBMEVKU0FSL0lBTUZRUWtMRUJFZ0EwRjNhaUVKSUFWQkJHb2lCU0FHU1NBRFFRbEtjUVJBSUFraEF3d0JCU0FKSVFNTEN3c2dBRUV3SUFOQkNXcEJDVUVBRUJJRklBbEJCR29oQlNBUUJIOGdCZ1VnQlFzaERDQURRWDlLQkVBZ0NrVWhFU0FQUVFscUlnb2hFRUVBSUJKcklSSWdEMEVJYWlFT0lBTWhCU0FKSVFZRFFDQUdLQUlBclNBS0VDUWlBeUFLUmdSQUlBNUJNRG9BQUNBT0lRTUxBa0FnQmlBSlJnUkFJQU5CQVdvaENDQUFJQU5CQVJBUklCRWdCVUVCU0hFRVFDQUlJUU1NQWdzZ0FFR09LVUVCRUJFZ0NDRURCU0FESUE5TkRRRWdEMEV3SUFNZ0Vtb1FHUm9EUUNBRFFYOXFJZ01nRDBzTkFBc0xDeUFBSUFNZ0JTQVFJQU5ySWdOS0JIOGdBd1VnQlFzUUVTQUdRUVJxSWdZZ0RFa2dCU0FEYXlJRlFYOUtjUTBBSUFVaEF3c0xJQUJCTUNBRFFSSnFRUkpCQUJBU0lBQWdCeUFUSUFkckVCRUxJQUJCSUNBQ0lBc2dCRUdBd0FCekVCSWdDd3NMSVFBZ0RTUUVJQUFnQWtnRWZ5QUNCU0FBQ3dzdUFDQUFRZ0JTQkVBRFFDQUJRWDlxSWdFZ0FLZEJCM0ZCTUhJNkFBQWdBRUlEaUNJQVFnQlNEUUFMQ3lBQkN6VUFJQUJDQUZJRVFBTkFJQUZCZjJvaUFTQUFwMEVQY1VIK0tHb3RBQUFnQW5JNkFBQWdBRUlFaUNJQVFnQlNEUUFMQ3lBQkN5b0JBWDhqQkNFQkl3UkJFR29rQkVHY0N5Z0NBQ0VDSUFFZ0FEWUNBQ0FDUWIwVklBRVFJUm9RQ0FzYkFRRi9Jd1FoQVNNRUlBQnFKQVFqQkVFUGFrRndjU1FFSUFFTEM4WWNHZ0JCZ0FnTEVRRUFBQUFBQUFBQUFnQUFBQUFBQUFBQkFFR3dDQXRjbUJmNEFzVldvQUNmbFkwQ09MZHNBL3liQWdQQndxRURYQ2tHQWxheDdnTGMrWDRDbVc4ZUFMalVFQVArSS9RQnhKbEJBUldhSWdHMEYvMEFLa0tFQThDL1R3SjJsUkVEb3laM0FyWU9FZ0FBQUFBQUwvei8vL3ovLy84QVFhWUpDeG9CQU0vSzJpMUJRVFlRTTNwSlA3c0RpalNyT2JjcnV2Ny8vd0JCemdrTEZnRUF3VTUzS3NQa3Z3cXBmMVJ2S0lnT0FkWitRK1FBUWZRSkM2MEJMRmF4UGFqTlpkZHROSFFIeFFvb2l2Ny8vLy8vLy8vLy8vLy8vLy8vLy84eHNOdEZtaUNUNkgvSzZIRVVpcW85RmV1RWt1U1FiT2pOYTlTbklkS0dNSEYveElxdXRIRVZ4Z2IxbmF3SUVpTEU1TDhLcVg5VWJ5aUlEZ0hXZmtQa2NyMGpHM3lXQXQ5NFpvRWc2aUl1RWxwa0VvZ0NIQ2FsNERCY3dFeXRZMVB1QVpVQkhBcGJBaE5jbVFEV1M5UUJTZkNjQVRvTkRRUHFlVVFDdVVFY0FIeGxLd0phdWg0QW9BVUFBQVVBUWF3TEN3RUJBRUhFQ3dzS0FRQUFBQUlBQUFETkZnQkIzQXNMQVFJQVFlc0xDd1gvLy8vLy93QkIyQTBMQXF3V0FFR1FEZ3VhQlVsdWRtRnNhV1FnWm14aFozTUFjMlZzWmlCMFpYTjBJR1poYVd4bFpBQndkV0pyWlhrZ0lUMGdUbFZNVEFCcGJuQjFkQ0FoUFNCT1ZVeE1BRzkxZEhCMWRHeGxiaUFoUFNCT1ZVeE1BQ3B2ZFhSd2RYUnNaVzRnUGowZ0tDaG1iR0ZuY3lBbUlGTkZRMUF5TlRaTE1WOUdURUZIVTE5Q1NWUmZRMDlOVUZKRlUxTkpUMDRwSUQ4Z016TjFJRG9nTmpWMUtRQnZkWFJ3ZFhRZ0lUMGdUbFZNVEFBb1pteGhaM01nSmlCVFJVTlFNalUyU3pGZlJreEJSMU5mVkZsUVJWOU5RVk5MS1NBOVBTQlRSVU5RTWpVMlN6RmZSa3hCUjFOZlZGbFFSVjlEVDAxUVVrVlRVMGxQVGdCemFXY2dJVDBnVGxWTVRBQnBibkIxZERZMElDRTlJRTVWVEV3QWIzVjBjSFYwTmpRZ0lUMGdUbFZNVEFCemFXZHBiaUFoUFNCT1ZVeE1BSE5sWTNBeU5UWnJNVjlsWTIxMWJIUmZZMjl1ZEdWNGRGOXBjMTlpZFdsc2RDZ21ZM1I0TFQ1bFkyMTFiSFJmWTNSNEtRQnRjMmRvWVhOb016SWdJVDBnVGxWTVRBQnpaV053TWpVMmF6RmZaV050ZFd4MFgyZGxibDlqYjI1MFpYaDBYMmx6WDJKMWFXeDBLQ1pqZEhndFBtVmpiWFZzZEY5blpXNWZZM1I0S1FCemFXZHVZWFIxY21VZ0lUMGdUbFZNVEFCelpXTnJaWGtnSVQwZ1RsVk1UQUIwZDJWaGF6TXlJQ0U5SUU1VlRFd0FjRzlwYm5RZ0lUMGdUbFZNVEFCelkyRnNZWElnSVQwZ1RsVk1UQUJ5WldOcFpDQStQU0F3SUNZbUlISmxZMmxrSUR3OUlETUFjbVZqYVdRZ0lUMGdUbFZNVEFCclpYbHdZV2x5SUNFOUlFNVZURXdBYzJsbk5qUWdJVDBnVGxWTVRBQnRjMmN6TWlBaFBTQk9WVXhNQUVKSlVEQXpOREF2Ym05dVkyVUFBQUJHYjNJZ2RHaHBjeUJ6WVcxd2JHVXNJSFJvYVhNZ05qTXRZbmwwWlNCemRISnBibWNnZDJsc2JDQmlaU0IxYzJWa0lHRnpJR2x1Y0hWMElHUmhkR0VBZ0FCQjZSTUxxUkZVYUdVZ2MyTmhiR0Z5SUdadmNpQjBhR2x6SUhnZ2FYTWdkVzVyYm05M2JnRC9WVE5KeDEwN0VRL2x3MW5YN2NzaEgzVlRhZWQ5V3pFdkJlTjU5dzNyUVQrVmM0a0huWHRSVHlVRG1SY3RDMkZmdFpPcEo3MmJjVzlGSTdrM1RTdUJmOVd6eVVmZHU1R1BaVVBaVjIxTG9aLzEwK2xuL2R1eHI0VmorWGVOYThHL0ZmTUpoeDM3MGMrbGd4bVhyWXZoM3pVVEthYzlHL0h2eGFNNXQ4MnJBVTkxZENCdlppQnRaVzF2Y25rQVcyeHBZbk5sWTNBeU5UWnJNVjBnYVd4c1pXZGhiQ0JoY21kMWJXVnVkRG9nSlhNS0FGdHNhV0p6WldOd01qVTJhekZkSUdsdWRHVnlibUZzSUdOdmJuTnBjM1JsYm1ONUlHTm9aV05ySUdaaGFXeGxaRG9nSlhNS0FDRnpaV053TWpVMmF6RmZabVZmYVhOZmVtVnlieWdtWjJVdFBuZ3BBQUZ5WlhRQVZDRWlHUTBCQWdNUlN4d01FQVFMSFJJZUoyaHViM0J4WWlBRkJnOFRGQlVhQ0JZSEtDUVhHQWtLRGhzZkpTT0RnbjBtS2lzOFBUNC9RMGRLVFZoWldsdGNYVjVmWUdGalpHVm1aMmxxYTJ4eWMzUjVlbnQ4QUVsc2JHVm5ZV3dnWW5sMFpTQnpaWEYxWlc1alpRQkViMjFoYVc0Z1pYSnliM0lBVW1WemRXeDBJRzV2ZENCeVpYQnlaWE5sYm5SaFlteGxBRTV2ZENCaElIUjBlUUJRWlhKdGFYTnphVzl1SUdSbGJtbGxaQUJQY0dWeVlYUnBiMjRnYm05MElIQmxjbTFwZEhSbFpBQk9ieUJ6ZFdOb0lHWnBiR1VnYjNJZ1pHbHlaV04wYjNKNUFFNXZJSE4xWTJnZ2NISnZZMlZ6Y3dCR2FXeGxJR1Y0YVhOMGN3QldZV3gxWlNCMGIyOGdiR0Z5WjJVZ1ptOXlJR1JoZEdFZ2RIbHdaUUJPYnlCemNHRmpaU0JzWldaMElHOXVJR1JsZG1salpRQlBkWFFnYjJZZ2JXVnRiM0o1QUZKbGMyOTFjbU5sSUdKMWMza0FTVzUwWlhKeWRYQjBaV1FnYzNsemRHVnRJR05oYkd3QVVtVnpiM1Z5WTJVZ2RHVnRjRzl5WVhKcGJIa2dkVzVoZG1GcGJHRmliR1VBU1c1MllXeHBaQ0J6WldWckFFTnliM056TFdSbGRtbGpaU0JzYVc1ckFGSmxZV1F0YjI1c2VTQm1hV3hsSUhONWMzUmxiUUJFYVhKbFkzUnZjbmtnYm05MElHVnRjSFI1QUVOdmJtNWxZM1JwYjI0Z2NtVnpaWFFnWW5rZ2NHVmxjZ0JQY0dWeVlYUnBiMjRnZEdsdFpXUWdiM1YwQUVOdmJtNWxZM1JwYjI0Z2NtVm1kWE5sWkFCSWIzTjBJR2x6SUdSdmQyNEFTRzl6ZENCcGN5QjFibkpsWVdOb1lXSnNaUUJCWkdSeVpYTnpJR2x1SUhWelpRQkNjbTlyWlc0Z2NHbHdaUUJKTDA4Z1pYSnliM0lBVG04Z2MzVmphQ0JrWlhacFkyVWdiM0lnWVdSa2NtVnpjd0JDYkc5amF5QmtaWFpwWTJVZ2NtVnhkV2x5WldRQVRtOGdjM1ZqYUNCa1pYWnBZMlVBVG05MElHRWdaR2x5WldOMGIzSjVBRWx6SUdFZ1pHbHlaV04wYjNKNUFGUmxlSFFnWm1sc1pTQmlkWE41QUVWNFpXTWdabTl5YldGMElHVnljbTl5QUVsdWRtRnNhV1FnWVhKbmRXMWxiblFBUVhKbmRXMWxiblFnYkdsemRDQjBiMjhnYkc5dVp3QlRlVzFpYjJ4cFl5QnNhVzVySUd4dmIzQUFSbWxzWlc1aGJXVWdkRzl2SUd4dmJtY0FWRzl2SUcxaGJua2diM0JsYmlCbWFXeGxjeUJwYmlCemVYTjBaVzBBVG04Z1ptbHNaU0JrWlhOamNtbHdkRzl5Y3lCaGRtRnBiR0ZpYkdVQVFtRmtJR1pwYkdVZ1pHVnpZM0pwY0hSdmNnQk9ieUJqYUdsc1pDQndjbTlqWlhOekFFSmhaQ0JoWkdSeVpYTnpBRVpwYkdVZ2RHOXZJR3hoY21kbEFGUnZieUJ0WVc1NUlHeHBibXR6QUU1dklHeHZZMnR6SUdGMllXbHNZV0pzWlFCU1pYTnZkWEpqWlNCa1pXRmtiRzlqYXlCM2IzVnNaQ0J2WTJOMWNnQlRkR0YwWlNCdWIzUWdjbVZqYjNabGNtRmliR1VBVUhKbGRtbHZkWE1nYjNkdVpYSWdaR2xsWkFCUGNHVnlZWFJwYjI0Z1kyRnVZMlZzWldRQVJuVnVZM1JwYjI0Z2JtOTBJR2x0Y0d4bGJXVnVkR1ZrQUU1dklHMWxjM05oWjJVZ2IyWWdaR1Z6YVhKbFpDQjBlWEJsQUVsa1pXNTBhV1pwWlhJZ2NtVnRiM1psWkFCRVpYWnBZMlVnYm05MElHRWdjM1J5WldGdEFFNXZJR1JoZEdFZ1lYWmhhV3hoWW14bEFFUmxkbWxqWlNCMGFXMWxiM1YwQUU5MWRDQnZaaUJ6ZEhKbFlXMXpJSEpsYzI5MWNtTmxjd0JNYVc1cklHaGhjeUJpWldWdUlITmxkbVZ5WldRQVVISnZkRzlqYjJ3Z1pYSnliM0lBUW1Ga0lHMWxjM05oWjJVQVJtbHNaU0JrWlhOamNtbHdkRzl5SUdsdUlHSmhaQ0J6ZEdGMFpRQk9iM1FnWVNCemIyTnJaWFFBUkdWemRHbHVZWFJwYjI0Z1lXUmtjbVZ6Y3lCeVpYRjFhWEpsWkFCTlpYTnpZV2RsSUhSdmJ5QnNZWEpuWlFCUWNtOTBiMk52YkNCM2NtOXVaeUIwZVhCbElHWnZjaUJ6YjJOclpYUUFVSEp2ZEc5amIyd2dibTkwSUdGMllXbHNZV0pzWlFCUWNtOTBiMk52YkNCdWIzUWdjM1Z3Y0c5eWRHVmtBRk52WTJ0bGRDQjBlWEJsSUc1dmRDQnpkWEJ3YjNKMFpXUUFUbTkwSUhOMWNIQnZjblJsWkFCUWNtOTBiMk52YkNCbVlXMXBiSGtnYm05MElITjFjSEJ2Y25SbFpBQkJaR1J5WlhOeklHWmhiV2xzZVNCdWIzUWdjM1Z3Y0c5eWRHVmtJR0o1SUhCeWIzUnZZMjlzQUVGa1pISmxjM01nYm05MElHRjJZV2xzWVdKc1pRQk9aWFIzYjNKcklHbHpJR1J2ZDI0QVRtVjBkMjl5YXlCMWJuSmxZV05vWVdKc1pRQkRiMjV1WldOMGFXOXVJSEpsYzJWMElHSjVJRzVsZEhkdmNtc0FRMjl1Ym1WamRHbHZiaUJoWW05eWRHVmtBRTV2SUdKMVptWmxjaUJ6Y0dGalpTQmhkbUZwYkdGaWJHVUFVMjlqYTJWMElHbHpJR052Ym01bFkzUmxaQUJUYjJOclpYUWdibTkwSUdOdmJtNWxZM1JsWkFCRFlXNXViM1FnYzJWdVpDQmhablJsY2lCemIyTnJaWFFnYzJoMWRHUnZkMjRBVDNCbGNtRjBhVzl1SUdGc2NtVmhaSGtnYVc0Z2NISnZaM0psYzNNQVQzQmxjbUYwYVc5dUlHbHVJSEJ5YjJkeVpYTnpBRk4wWVd4bElHWnBiR1VnYUdGdVpHeGxBRkpsYlc5MFpTQkpMMDhnWlhKeWIzSUFVWFZ2ZEdFZ1pYaGpaV1ZrWldRQVRtOGdiV1ZrYVhWdElHWnZkVzVrQUZkeWIyNW5JRzFsWkdsMWJTQjBlWEJsQUU1dklHVnljbTl5SUdsdVptOXliV0YwYVc5dUFBQVJBQW9BRVJFUkFBQUFBQVVBQUFBQUFBQUpBQUFBQUFzQVFab2xDeUVSQUE4S0VSRVJBd29IQUFFVENRc0xBQUFKQmdzQUFBc0FCaEVBQUFBUkVSRUFRY3NsQ3dFTEFFSFVKUXNZRVFBS0NoRVJFUUFLQUFBQ0FBa0xBQUFBQ1FBTEFBQUxBRUdGSmdzQkRBQkJrU1lMRlF3QUFBQUFEQUFBQUFBSkRBQUFBQUFBREFBQURBQkJ2eVlMQVE0QVFjc21DeFVOQUFBQUJBMEFBQUFBQ1E0QUFBQUFBQTRBQUE0QVFma21Dd0VRQUVHRkp3c2VEd0FBQUFBUEFBQUFBQWtRQUFBQUFBQVFBQUFRQUFBU0FBQUFFaElTQUVHOEp3c09FZ0FBQUJJU0VnQUFBQUFBQUFrQVFlMG5Dd0VMQUVINUp3c1ZDZ0FBQUFBS0FBQUFBQWtMQUFBQUFBQUxBQUFMQUVHbktBc0JEQUJCc3lnTFhBd0FBQUFBREFBQUFBQUpEQUFBQUFBQURBQUFEQUFBTFNzZ0lDQXdXREI0QUNodWRXeHNLUUF0TUZnck1GZ2dNRmd0TUhnck1IZ2dNSGdBYVc1bUFFbE9SZ0J1WVc0QVRrRk9BREF4TWpNME5UWTNPRGxCUWtORVJVWXUnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VjcDI1NmsxLmJhc2U2NC5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbWF4LXBhcmFtcywgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vLyBjU3BlbGw6aWdub3JlIG1lbWNweSwgYW55ZnVuY1xuaW1wb3J0IHsgYmFzZTY0VG9CaW4gfSBmcm9tICcuLi8uLi9mb3JtYXQvZm9ybWF0JztcbmltcG9ydCB7IENvbXByZXNzaW9uRmxhZywgQ29udGV4dEZsYWcsIH0gZnJvbSAnLi9zZWNwMjU2azEtd2FzbS10eXBlcyc7XG5pbXBvcnQgeyBzZWNwMjU2azFCYXNlNjRCeXRlcyB9IGZyb20gJy4vc2VjcDI1NmsxLmJhc2U2NCc7XG5leHBvcnQgeyBDb250ZXh0RmxhZywgQ29tcHJlc3Npb25GbGFnIH07XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVybiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1jYWxsLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudCAqL1xuY29uc3Qgd3JhcFNlY3AyNTZrMVdhc20gPSAoaW5zdGFuY2UsIGhlYXBVOCwgaGVhcFUzMikgPT4gKHtcbiAgICBjb250ZXh0Q3JlYXRlOiAoY29udGV4dCkgPT4gaW5zdGFuY2UuZXhwb3J0cy5fc2VjcDI1NmsxX2NvbnRleHRfY3JlYXRlKGNvbnRleHQpLFxuICAgIGNvbnRleHRSYW5kb21pemU6IChjb250ZXh0UHRyLCBzZWVkUHRyKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfY29udGV4dF9yYW5kb21pemUoY29udGV4dFB0ciwgc2VlZFB0ciksXG4gICAgZWNkaDogKGNvbnRleHRQdHIsIG91dHB1dFNoYXJlZFNlY3JldFB0ciwgcHVibGljS2V5UHRyLCBzZWNyZXRLZXlQdHIpID0+IGluc3RhbmNlLmV4cG9ydHMuX3NlY3AyNTZrMV9lY2RoKGNvbnRleHRQdHIsIG91dHB1dFNoYXJlZFNlY3JldFB0ciwgcHVibGljS2V5UHRyLCBzZWNyZXRLZXlQdHIpLFxuICAgIGZyZWU6IChwb2ludGVyKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9mcmVlKHBvaW50ZXIpLFxuICAgIGhlYXBVMzIsXG4gICAgaGVhcFU4LFxuICAgIGluc3RhbmNlLFxuICAgIG1hbGxvYzogKGJ5dGVzKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9tYWxsb2MoYnl0ZXMpLFxuICAgIG1hbGxvY1NpemVUOiAobnVtKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICBjb25zdCBwb2ludGVyID0gaW5zdGFuY2UuZXhwb3J0cy5fbWFsbG9jKDQpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgY29uc3QgcG9pbnRlclZpZXczMiA9IHBvaW50ZXIgPj4gMjtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvbm8tZXhwcmVzc2lvbi1zdGF0ZW1lbnRcbiAgICAgICAgaGVhcFUzMi5zZXQoW251bV0sIHBvaW50ZXJWaWV3MzIpO1xuICAgICAgICByZXR1cm4gcG9pbnRlcjtcbiAgICB9LFxuICAgIG1hbGxvY1VpbnQ4QXJyYXk6IChhcnJheSkgPT4ge1xuICAgICAgICBjb25zdCBwb2ludGVyID0gaW5zdGFuY2UuZXhwb3J0cy5fbWFsbG9jKGFycmF5Lmxlbmd0aCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL25vLWV4cHJlc3Npb24tc3RhdGVtZW50XG4gICAgICAgIGhlYXBVOC5zZXQoYXJyYXksIHBvaW50ZXIpO1xuICAgICAgICByZXR1cm4gcG9pbnRlcjtcbiAgICB9LFxuICAgIHByaXZrZXlUd2Vha0FkZDogKGNvbnRleHRQdHIsIHNlY3JldEtleVB0ciwgdHdlYWtOdW0yNTZQdHIpID0+IGluc3RhbmNlLmV4cG9ydHMuX3NlY3AyNTZrMV9lY19wcml2a2V5X3R3ZWFrX2FkZChjb250ZXh0UHRyLCBzZWNyZXRLZXlQdHIsIHR3ZWFrTnVtMjU2UHRyKSxcbiAgICBwcml2a2V5VHdlYWtNdWw6IChjb250ZXh0UHRyLCBzZWNyZXRLZXlQdHIsIHR3ZWFrTnVtMjU2UHRyKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfZWNfcHJpdmtleV90d2Vha19tdWwoY29udGV4dFB0ciwgc2VjcmV0S2V5UHRyLCB0d2Vha051bTI1NlB0ciksXG4gICAgcHVia2V5Q3JlYXRlOiAoY29udGV4dFB0ciwgcHVibGljS2V5UHRyLCBzZWNyZXRLZXlQdHIpID0+IGluc3RhbmNlLmV4cG9ydHMuX3NlY3AyNTZrMV9lY19wdWJrZXlfY3JlYXRlKGNvbnRleHRQdHIsIHB1YmxpY0tleVB0ciwgc2VjcmV0S2V5UHRyKSxcbiAgICBwdWJrZXlQYXJzZTogKGNvbnRleHRQdHIsIHB1YmxpY0tleU91dFB0ciwgcHVibGljS2V5SW5QdHIsIHB1YmxpY0tleUluTGVuZ3RoKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfZWNfcHVia2V5X3BhcnNlKGNvbnRleHRQdHIsIHB1YmxpY0tleU91dFB0ciwgcHVibGljS2V5SW5QdHIsIHB1YmxpY0tleUluTGVuZ3RoKSxcbiAgICBwdWJrZXlTZXJpYWxpemU6IChjb250ZXh0UHRyLCBvdXRwdXRQdHIsIG91dHB1dExlbmd0aFB0ciwgcHVibGljS2V5UHRyLCBjb21wcmVzc2lvbikgPT4gaW5zdGFuY2UuZXhwb3J0cy5fc2VjcDI1NmsxX2VjX3B1YmtleV9zZXJpYWxpemUoY29udGV4dFB0ciwgb3V0cHV0UHRyLCBvdXRwdXRMZW5ndGhQdHIsIHB1YmxpY0tleVB0ciwgY29tcHJlc3Npb24pLFxuICAgIHB1YmtleVR3ZWFrQWRkOiAoY29udGV4dFB0ciwgcHVibGljS2V5UHRyLCB0d2Vha051bTI1NlB0cikgPT4gaW5zdGFuY2UuZXhwb3J0cy5fc2VjcDI1NmsxX2VjX3B1YmtleV90d2Vha19hZGQoY29udGV4dFB0ciwgcHVibGljS2V5UHRyLCB0d2Vha051bTI1NlB0ciksXG4gICAgcHVia2V5VHdlYWtNdWw6IChjb250ZXh0UHRyLCBwdWJsaWNLZXlQdHIsIHR3ZWFrTnVtMjU2UHRyKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfZWNfcHVia2V5X3R3ZWFrX211bChjb250ZXh0UHRyLCBwdWJsaWNLZXlQdHIsIHR3ZWFrTnVtMjU2UHRyKSxcbiAgICByZWFkSGVhcFU4OiAocG9pbnRlciwgYnl0ZXMpID0+IG5ldyBVaW50OEFycmF5KGhlYXBVOC5idWZmZXIsIHBvaW50ZXIsIGJ5dGVzKSxcbiAgICByZWFkU2l6ZVQ6IChwb2ludGVyKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICBjb25zdCBwb2ludGVyVmlldzMyID0gcG9pbnRlciA+PiAyO1xuICAgICAgICByZXR1cm4gaGVhcFUzMltwb2ludGVyVmlldzMyXTtcbiAgICB9LFxuICAgIHJlY292ZXI6IChjb250ZXh0UHRyLCBvdXRwdXRQdWJrZXlQb2ludGVyLCByU2lnUHRyLCBtc2czMlB0cikgPT4gaW5zdGFuY2UuZXhwb3J0cy5fc2VjcDI1NmsxX2VjZHNhX3JlY292ZXIoY29udGV4dFB0ciwgb3V0cHV0UHVia2V5UG9pbnRlciwgclNpZ1B0ciwgbXNnMzJQdHIpLFxuICAgIHJlY292ZXJhYmxlU2lnbmF0dXJlUGFyc2U6IChjb250ZXh0UHRyLCBvdXRwdXRSU2lnUHRyLCBpbnB1dFNpZ1B0ciwgcmlkKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfZWNkc2FfcmVjb3ZlcmFibGVfc2lnbmF0dXJlX3BhcnNlX2NvbXBhY3QoY29udGV4dFB0ciwgb3V0cHV0UlNpZ1B0ciwgaW5wdXRTaWdQdHIsIHJpZCksXG4gICAgcmVjb3ZlcmFibGVTaWduYXR1cmVTZXJpYWxpemU6IChjb250ZXh0UHRyLCBzaWdPdXRQdHIsIHJlY0lET3V0UHRyLCByU2lnUHRyKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfZWNkc2FfcmVjb3ZlcmFibGVfc2lnbmF0dXJlX3NlcmlhbGl6ZV9jb21wYWN0KGNvbnRleHRQdHIsIHNpZ091dFB0ciwgcmVjSURPdXRQdHIsIHJTaWdQdHIpLFxuICAgIHNjaG5vcnJTaWduOiAoY29udGV4dFB0ciwgb3V0cHV0U2lnUHRyLCBtc2czMlB0ciwgc2VjcmV0S2V5UHRyKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfc2Nobm9ycnNpZ19zaWduKGNvbnRleHRQdHIsIG91dHB1dFNpZ1B0ciwgbXNnMzJQdHIsIHNlY3JldEtleVB0ciksXG4gICAgc2Nobm9yclZlcmlmeTogKGNvbnRleHRQdHIsIHNpZ1B0ciwgbXNnMzJQdHIsIHB1YmxpY0tleVB0cikgPT4gaW5zdGFuY2UuZXhwb3J0cy5fc2VjcDI1NmsxX3NjaG5vcnJzaWdfdmVyaWZ5KGNvbnRleHRQdHIsIHNpZ1B0ciwgbXNnMzJQdHIsIHB1YmxpY0tleVB0ciksXG4gICAgc2Vja2V5VmVyaWZ5OiAoY29udGV4dFB0ciwgc2VjcmV0S2V5UHRyKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfZWNfc2Vja2V5X3ZlcmlmeShjb250ZXh0UHRyLCBzZWNyZXRLZXlQdHIpLFxuICAgIHNpZ246IChjb250ZXh0UHRyLCBvdXRwdXRTaWdQdHIsIG1zZzMyUHRyLCBzZWNyZXRLZXlQdHIsIGV4dHJhRW50cm9weVB0cikgPT4gaW5zdGFuY2UuZXhwb3J0cy5fc2VjcDI1NmsxX2VjZHNhX3NpZ24oY29udGV4dFB0ciwgb3V0cHV0U2lnUHRyLCBtc2czMlB0ciwgc2VjcmV0S2V5UHRyLCAwLCBleHRyYUVudHJvcHlQdHIpLFxuICAgIHNpZ25SZWNvdmVyYWJsZTogKGNvbnRleHRQdHIsIG91dHB1dFJTaWdQdHIsIG1zZzMyUHRyLCBzZWNyZXRLZXlQdHIpID0+IGluc3RhbmNlLmV4cG9ydHMuX3NlY3AyNTZrMV9lY2RzYV9zaWduX3JlY292ZXJhYmxlKGNvbnRleHRQdHIsIG91dHB1dFJTaWdQdHIsIG1zZzMyUHRyLCBzZWNyZXRLZXlQdHIpLFxuICAgIHNpZ25hdHVyZU5vcm1hbGl6ZTogKGNvbnRleHRQdHIsIG91dHB1dFNpZ1B0ciwgaW5wdXRTaWdQdHIpID0+IGluc3RhbmNlLmV4cG9ydHMuX3NlY3AyNTZrMV9lY2RzYV9zaWduYXR1cmVfbm9ybWFsaXplKGNvbnRleHRQdHIsIG91dHB1dFNpZ1B0ciwgaW5wdXRTaWdQdHIpLFxuICAgIHNpZ25hdHVyZVBhcnNlQ29tcGFjdDogKGNvbnRleHRQdHIsIHNpZ091dFB0ciwgY29tcGFjdFNpZ0luUHRyKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfZWNkc2Ffc2lnbmF0dXJlX3BhcnNlX2NvbXBhY3QoY29udGV4dFB0ciwgc2lnT3V0UHRyLCBjb21wYWN0U2lnSW5QdHIpLFxuICAgIHNpZ25hdHVyZVBhcnNlREVSOiAoY29udGV4dFB0ciwgc2lnT3V0UHRyLCBzaWdERVJJblB0ciwgc2lnREVSSW5MZW5ndGgpID0+IGluc3RhbmNlLmV4cG9ydHMuX3NlY3AyNTZrMV9lY2RzYV9zaWduYXR1cmVfcGFyc2VfZGVyKGNvbnRleHRQdHIsIHNpZ091dFB0ciwgc2lnREVSSW5QdHIsIHNpZ0RFUkluTGVuZ3RoKSxcbiAgICBzaWduYXR1cmVTZXJpYWxpemVDb21wYWN0OiAoY29udGV4dFB0ciwgb3V0cHV0Q29tcGFjdFNpZ1B0ciwgaW5wdXRTaWdQdHIpID0+IGluc3RhbmNlLmV4cG9ydHMuX3NlY3AyNTZrMV9lY2RzYV9zaWduYXR1cmVfc2VyaWFsaXplX2NvbXBhY3QoY29udGV4dFB0ciwgb3V0cHV0Q29tcGFjdFNpZ1B0ciwgaW5wdXRTaWdQdHIpLFxuICAgIHNpZ25hdHVyZVNlcmlhbGl6ZURFUjogKGNvbnRleHRQdHIsIG91dHB1dERFUlNpZ1B0ciwgb3V0cHV0REVSU2lnTGVuZ3RoUHRyLCBpbnB1dFNpZ1B0cikgPT4gaW5zdGFuY2UuZXhwb3J0cy5fc2VjcDI1NmsxX2VjZHNhX3NpZ25hdHVyZV9zZXJpYWxpemVfZGVyKGNvbnRleHRQdHIsIG91dHB1dERFUlNpZ1B0ciwgb3V0cHV0REVSU2lnTGVuZ3RoUHRyLCBpbnB1dFNpZ1B0ciksXG4gICAgdmVyaWZ5OiAoY29udGV4dFB0ciwgc2lnUHRyLCBtc2czMlB0ciwgcHVia2V5UHRyKSA9PiBpbnN0YW5jZS5leHBvcnRzLl9zZWNwMjU2azFfZWNkc2FfdmVyaWZ5KGNvbnRleHRQdHIsIHNpZ1B0ciwgbXNnMzJQdHIsIHB1YmtleVB0ciksXG59KTtcbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm4sIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbCwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnQgKi9cbi8qIGVzbGludC1kaXNhYmxlIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGEsIGZ1bmN0aW9uYWwvbm8tZXhwcmVzc2lvbi1zdGF0ZW1lbnQsIEB0eXBlc2NyaXB0LWVzbGludC9uby1tYWdpYy1udW1iZXJzLCBmdW5jdGlvbmFsL25vLWNvbmRpdGlvbmFsLXN0YXRlbWVudCwgbm8tYml0d2lzZSwgZnVuY3Rpb25hbC9uby10aHJvdy1zdGF0ZW1lbnQgKi9cbi8qKlxuICogTWV0aG9kIGV4dHJhY3RlZCBmcm9tIEVtc2NyaXB0ZW4ncyBwcmVhbWJsZS5qc1xuICovXG5jb25zdCBpc0xpdHRsZUVuZGlhbiA9IChidWZmZXIpID0+IHtcbiAgICBjb25zdCBsaXR0bGVFbmRpYW4gPSB0cnVlO1xuICAgIGNvbnN0IG5vdExpdHRsZUVuZGlhbiA9IGZhbHNlO1xuICAgIGNvbnN0IGhlYXAxNiA9IG5ldyBJbnQxNkFycmF5KGJ1ZmZlcik7XG4gICAgY29uc3QgaGVhcDMyID0gbmV3IEludDMyQXJyYXkoYnVmZmVyKTtcbiAgICBjb25zdCBoZWFwVTggPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGhlYXAzMlswXSA9IDE2Njg1MDkwMjk7XG4gICAgaGVhcDE2WzFdID0gMjU0NTk7XG4gICAgcmV0dXJuIGhlYXBVOFsyXSAhPT0gMTE1IHx8IGhlYXBVOFszXSAhPT0gOTlcbiAgICAgICAgPyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBub3RMaXR0bGVFbmRpYW5cbiAgICAgICAgOiBsaXR0bGVFbmRpYW47XG59O1xuLyoqXG4gKiBNZXRob2QgZGVyaXZlZCBmcm9tIEVtc2NyaXB0ZW4ncyBwcmVhbWJsZS5qc1xuICovXG5jb25zdCBhbGlnbk1lbW9yeSA9IChmYWN0b3IsIHNpemUpID0+IE1hdGguY2VpbChzaXplIC8gZmFjdG9yKSAqIGZhY3Rvcjtcbi8qKlxuICogVGhlIG1vc3QgcGVyZm9ybWFudCB3YXkgdG8gaW5zdGFudGlhdGUgc2VjcDI1NmsxIGZ1bmN0aW9uYWxpdHkuIFRvIGF2b2lkXG4gKiB1c2luZyBOb2RlLmpzIG9yIERPTS1zcGVjaWZpYyBBUElzLCB5b3UgY2FuIHVzZSBgaW5zdGFudGlhdGVTZWNwMjU2azFgLlxuICpcbiAqIE5vdGUsIG1vc3Qgb2YgdGhpcyBtZXRob2QgaXMgdHJhbnNsYXRlZCBhbmQgYm9pbGVkLWRvd24gZnJvbSBFbXNjcmlwdGVuJ3NcbiAqIHByZWFtYmxlLmpzLiBTaWduaWZpY2FudCBjaGFuZ2VzIHRvIHRoZSBXQVNNIGJ1aWxkIG9yIGJyZWFraW5nIHVwZGF0ZXMgdG9cbiAqIEVtc2NyaXB0ZW4gd2lsbCBsaWtlbHkgcmVxdWlyZSBtb2RpZmljYXRpb25zIHRvIHRoaXMgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB3ZWJhc3NlbWJseUJ5dGVzIC0gQSBidWZmZXIgY29udGFpbmluZyB0aGUgc2VjcDI1NmsxIGJpbmFyeS5cbiAqL1xuZXhwb3J0IGNvbnN0IGluc3RhbnRpYXRlU2VjcDI1NmsxV2FzbUJ5dGVzID0gYXN5bmMgKHdlYmFzc2VtYmx5Qnl0ZXMpID0+IHtcbiAgICBjb25zdCBTVEFDS19BTElHTiA9IDE2O1xuICAgIGNvbnN0IEdMT0JBTF9CQVNFID0gMTAyNDtcbiAgICBjb25zdCBXQVNNX1BBR0VfU0laRSA9IDY1NTM2O1xuICAgIGNvbnN0IFRPVEFMX1NUQUNLID0gNTI0Mjg4MDtcbiAgICBjb25zdCBUT1RBTF9NRU1PUlkgPSAxNjc3NzIxNjtcbiAgICBjb25zdCB3YXNtTWVtb3J5ID0gbmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7XG4gICAgICAgIGluaXRpYWw6IFRPVEFMX01FTU9SWSAvIFdBU01fUEFHRV9TSVpFLFxuICAgICAgICBtYXhpbXVtOiBUT1RBTF9NRU1PUlkgLyBXQVNNX1BBR0VfU0laRSxcbiAgICB9KTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gICAgaWYgKCFpc0xpdHRsZUVuZGlhbih3YXNtTWVtb3J5LmJ1ZmZlcikpIHtcbiAgICAgICAgLypcbiAgICAgICAgICogbm90ZTogdGhpcyBibG9jayBpcyBleGNsdWRlZCBmcm9tIHRlc3QgY292ZXJhZ2UuIEl0J3MgQSkgaGFyZCB0byB0ZXN0XG4gICAgICAgICAqIChtdXN0IGJlIGVpdGhlciB0ZXN0ZWQgb24gYmlnLWVuZGlhbiBoYXJkd2FyZSBvciBhIGJpZy1lbmRpYW4gYnVmZmVyXG4gICAgICAgICAqIG1vY2spIGFuZCBCKSBleHRyYWN0ZWQgZnJvbSBFbXNjcmlwdGVuJ3MgcHJlYW1ibGUuanMsIHdoZXJlIGl0IHNob3VsZFxuICAgICAgICAgKiBiZSB0ZXN0ZWQgcHJvcGVybHkuXG4gICAgICAgICAqL1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1J1bnRpbWUgZXJyb3I6IGV4cGVjdGVkIHRoZSBzeXN0ZW0gdG8gYmUgbGl0dGxlLWVuZGlhbi4nKTtcbiAgICB9XG4gICAgY29uc3QgU1RBVElDX0JBU0UgPSBHTE9CQUxfQkFTRTtcbiAgICBjb25zdCBTVEFUSUNUT1BfSU5JVElBTCA9IFNUQVRJQ19CQVNFICsgNjc2OTYgKyAxNjtcbiAgICBjb25zdCBEWU5BTUlDVE9QX1BUUiA9IFNUQVRJQ1RPUF9JTklUSUFMO1xuICAgIGNvbnN0IERZTkFNSUNUT1BfUFRSX1NJWkUgPSA0O1xuICAgIGNvbnN0IFNUQVRJQ1RPUCA9IChTVEFUSUNUT1BfSU5JVElBTCArIERZTkFNSUNUT1BfUFRSX1NJWkUgKyAxNSkgJiAtMTY7XG4gICAgY29uc3QgU1RBQ0tUT1AgPSBhbGlnbk1lbW9yeShTVEFDS19BTElHTiwgU1RBVElDVE9QKTtcbiAgICBjb25zdCBTVEFDS19CQVNFID0gU1RBQ0tUT1A7XG4gICAgY29uc3QgU1RBQ0tfTUFYID0gU1RBQ0tfQkFTRSArIFRPVEFMX1NUQUNLO1xuICAgIGNvbnN0IERZTkFNSUNfQkFTRSA9IGFsaWduTWVtb3J5KFNUQUNLX0FMSUdOLCBTVEFDS19NQVgpO1xuICAgIGNvbnN0IGhlYXBVOCA9IG5ldyBVaW50OEFycmF5KHdhc21NZW1vcnkuYnVmZmVyKTtcbiAgICBjb25zdCBoZWFwMzIgPSBuZXcgSW50MzJBcnJheSh3YXNtTWVtb3J5LmJ1ZmZlcik7XG4gICAgY29uc3QgaGVhcFUzMiA9IG5ldyBVaW50MzJBcnJheSh3YXNtTWVtb3J5LmJ1ZmZlcik7XG4gICAgaGVhcDMyW0RZTkFNSUNUT1BfUFRSID4+IDJdID0gRFlOQU1JQ19CQVNFO1xuICAgIGNvbnN0IFRBQkxFX1NJWkUgPSAxNjtcbiAgICBjb25zdCBNQVhfVEFCTEVfU0laRSA9IDE2O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL25vLWxldCwgQHR5cGVzY3JpcHQtZXNsaW50L2luaXQtZGVjbGFyYXRpb25zXG4gICAgbGV0IGdldEVyck5vTG9jYXRpb247XG4gICAgLypcbiAgICAgKiBub3RlOiBBIG51bWJlciBvZiBtZXRob2RzIGJlbG93IGFyZSBleGNsdWRlZCBmcm9tIHRlc3QgY292ZXJhZ2UuIFRoZXkgYXJlXG4gICAgICogYSkgbm90IHBhcnQgb2YgdGhlIHJlZ3VsYXIgdXNhZ2Ugb2YgdGhpcyBsaWJyYXJ5IChzaG91bGQgb25seSBiZSBldmFsdWF0ZWRcbiAgICAgKiBpZiB0aGUgY29uc3VtZXIgbWlzLWltcGxlbWVudHMgdGhlIGxpYnJhcnkgYW5kIGV4aXN0IG9ubHkgdG8gbWFrZVxuICAgICAqIGRlYnVnZ2luZyBlYXNpZXIpIGFuZCBCKSBhbHJlYWR5IHRlc3RlZCBhZGVxdWF0ZWx5IGluIEVtc2NyaXB0ZW4sIGZyb21cbiAgICAgKiB3aGljaCB0aGlzIHNlY3Rpb24gaXMgZXh0cmFjdGVkLlxuICAgICAqL1xuICAgIGNvbnN0IGVudiA9IHtcbiAgICAgICAgRFlOQU1JQ1RPUF9QVFIsXG4gICAgICAgIFNUQUNLVE9QLFxuICAgICAgICBfX19zZXRFcnJObzogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZ2V0RXJyTm9Mb2NhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaGVhcDMyW2dldEVyck5vTG9jYXRpb24oKSA+PiAyXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBfX19zeXNjYWxsMTQwOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ19fX3N5c2NhbGwxNDAnKTtcbiAgICAgICAgfSxcbiAgICAgICAgX19fc3lzY2FsbDE0NjogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfX19zeXNjYWxsMTQ2Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9fX3N5c2NhbGw2OiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ19fX3N5c2NhbGw2Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9hYm9ydDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gKGVyciA9ICdTZWNwMjU2azEgRXJyb3InKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgICAgICBfZW1zY3JpcHRlbl9tZW1jcHlfYmlnOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoZGVzdCwgc3JjLCBudW0pID0+IHtcbiAgICAgICAgICAgIGhlYXBVOC5zZXQoaGVhcFU4LnN1YmFycmF5KHNyYywgc3JjICsgbnVtKSwgZGVzdCk7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfSxcbiAgICAgICAgYWJvcnQ6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIChlcnIgPSAnU2VjcDI1NmsxIEVycm9yJykgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gICAgICAgIH0sXG4gICAgICAgIGFib3J0T25DYW5ub3RHcm93TWVtb3J5OiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3AyNTZrMSBFcnJvcjogYWJvcnRPbkNhbm5vdEdyb3dNZW1vcnkgd2FzIGNhbGxlZC4nKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5sYXJnZU1lbW9yeTogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWNwMjU2azEgRXJyb3I6IGVubGFyZ2VNZW1vcnkgd2FzIGNhbGxlZC4nKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VG90YWxNZW1vcnk6ICgpID0+IFRPVEFMX01FTU9SWSxcbiAgICB9O1xuICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgIGVudjoge1xuICAgICAgICAgICAgLi4uZW52LFxuICAgICAgICAgICAgbWVtb3J5OiB3YXNtTWVtb3J5LFxuICAgICAgICAgICAgbWVtb3J5QmFzZTogU1RBVElDX0JBU0UsXG4gICAgICAgICAgICB0YWJsZTogbmV3IFdlYkFzc2VtYmx5LlRhYmxlKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiAnYW55ZnVuYycsXG4gICAgICAgICAgICAgICAgaW5pdGlhbDogVEFCTEVfU0laRSxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBNQVhfVEFCTEVfU0laRSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGFibGVCYXNlOiAwLFxuICAgICAgICB9LFxuICAgICAgICBnbG9iYWw6IHsgSW5maW5pdHksIE5hTiB9LFxuICAgIH07XG4gICAgcmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKHdlYmFzc2VtYmx5Qnl0ZXMsIGluZm8pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgIGdldEVyck5vTG9jYXRpb24gPSByZXN1bHQuaW5zdGFuY2UuZXhwb3J0cy5fX19lcnJub19sb2NhdGlvbjtcbiAgICAgICAgcmV0dXJuIHdyYXBTZWNwMjU2azFXYXNtKHJlc3VsdC5pbnN0YW5jZSwgaGVhcFU4LCBoZWFwVTMyKTtcbiAgICB9KTtcbn07XG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGEsIGZ1bmN0aW9uYWwvbm8tZXhwcmVzc2lvbi1zdGF0ZW1lbnQsIEB0eXBlc2NyaXB0LWVzbGludC9uby1tYWdpYy1udW1iZXJzLCBmdW5jdGlvbmFsL25vLWNvbmRpdGlvbmFsLXN0YXRlbWVudCwgbm8tYml0d2lzZSwgZnVuY3Rpb25hbC9uby10aHJvdy1zdGF0ZW1lbnQgKi9cbmV4cG9ydCBjb25zdCBnZXRFbWJlZGRlZFNlY3AyNTZrMUJpbmFyeSA9ICgpID0+IGJhc2U2NFRvQmluKHNlY3AyNTZrMUJhc2U2NEJ5dGVzKS5idWZmZXI7XG4vKipcbiAqIEFuIHVsdGltYXRlbHktcG9ydGFibGUgKGJ1dCBzbG93ZXIpIHZlcnNpb24gb2YgYGluc3RhbnRpYXRlU2VjcDI1NmsxQnl0ZXNgXG4gKiB3aGljaCBkb2VzIG5vdCByZXF1aXJlIHRoZSBjb25zdW1lciB0byBwcm92aWRlIHRoZSBzZWNwMjU2azEgYmluYXJ5IGJ1ZmZlci5cbiAqL1xuZXhwb3J0IGNvbnN0IGluc3RhbnRpYXRlU2VjcDI1NmsxV2FzbSA9IGFzeW5jICgpID0+IGluc3RhbnRpYXRlU2VjcDI1NmsxV2FzbUJ5dGVzKGdldEVtYmVkZGVkU2VjcDI1NmsxQmluYXJ5KCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VjcDI1NmsxLXdhc20uanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgdHNkb2Mvc3ludGF4ICovXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3Qgc2hhMjU2QmFzZTY0Qnl0ZXMgPSAnQUdGemJRRUFBQUFCUmd4Z0FuOS9BWDlnQW45L0FHQURmMzkvQUdBQmZ3Ri9ZQVYvZjM5L2Z3Ri9ZQU4vZjM4QmYyQUFBR0FCZndCZ0JYOS9mMzkvQUdBQUFYOWdCSDkvZjM4QVlBRi9BWDRDSFFFSUxpOXphR0V5TlRZUVgxOTNZbWx1WkdkbGJsOTBhSEp2ZHdBQkF5NHRBQUVDQXdRR0J3SUNBUUVIQ0FJREFRRUpBQWNLQ2dJQkNBSUJBUUlJQWdvSEJ3Y0JBUUFBQVFjTEJRVUZCQVVCY0FFRUJBVURBUUFSQmdrQmZ3RkIwSlhBQUFzSGh3RUlCbTFsYlc5eWVRSUFCbk5vWVRJMU5nQUlDM05vWVRJMU5sOXBibWwwQUF3TmMyaGhNalUyWDNWd1pHRjBaUUFOREhOb1lUSTFObDltYVc1aGJBQU9FVjlmZDJKcGJtUm5aVzVmYldGc2JHOWpBQThQWDE5M1ltbHVaR2RsYmw5bWNtVmxBQkFlWDE5M1ltbHVaR2RsYmw5bmJHOWlZV3hmWVhKbmRXMWxiblJmY0hSeUFCSUpDUUVBUVFFTEF5Y3BLZ3FoaHdFdEZnQWdBVUh2QUVzRVFDQUFEd3RCOEFBZ0FSQUNBQXQ5QVFGL0l3QkJNR3NpQWlRQUlBSWdBVFlDQkNBQ0lBQTJBZ0FnQWtFc2FrRUJOZ0lBSUFKQkZHcEJBallDQUNBQ1FSeHFRUUkyQWdBZ0FrRUJOZ0lrSUFKQjdCUTJBZ2dnQWtFQ05nSU1JQUpCekEwMkFoQWdBaUFDTmdJZ0lBSWdBa0VFYWpZQ0tDQUNJQUpCSUdvMkFoZ2dBa0VJYWtIOEZCQW9BQXV5QVFFRGZ5TUFRUkJySWdNa0FBSkFBa0FDUUNBQ1FYOUtCRUJCQVNFRUlBSUVRQ0FDRUFRaUJFVU5Bd3NnQXlBRU5nSUFJQU1nQWpZQ0JDQURRUUEyQWdnZ0EwRUFJQUpCQVVFQkVBVkIvd0Z4SWdSQkFrY05BU0FEUVFocUlnUWdCQ2dDQUNJRklBSnFOZ0lBSUFVZ0F5Z0NBR29nQVNBQ0VDc2FJQUJCQ0dvZ0JDZ0NBRFlDQUNBQUlBTXBBd0EzQWdBZ0EwRVFhaVFBRHdzUUJnQUxJQVJCQVhFTkFSQUdBQXNBQzBHc0ZSQUhBQXVyR1FJSWZ3RitBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKL0FrQUNRQUovQWtBQ1FBSkFBa0FDUUFKQUFuOENRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnQUVIMEFVMEVRRUg4RHlnQ0FDSUZRUkFnQUVFTGFrRjRjU0FBUVF0Skd5SUNRUU4ySWdGQkgzRWlBM1lpQUVFRGNVVU5BU0FBUVg5elFRRnhJQUZxSWdKQkEzUWlBMEdNRUdvb0FnQWlBRUVJYWlFRUlBQW9BZ2dpQVNBRFFZUVFhaUlEUmcwQ0lBRWdBellDRENBRFFRaHFJQUUyQWdBTUF3c2dBRUZBVHcwY0lBQkJDMm9pQUVGNGNTRUNRWUFRS0FJQUlnaEZEUWxCQUNBQ2F5RUJBbjlCQUNBQVFRaDJJZ0JGRFFBYVFSOGlCaUFDUWYvLy93ZExEUUFhSUFKQkppQUFaeUlBYTBFZmNYWkJBWEZCSHlBQWEwRUJkSElMSWdaQkFuUkJqQkpxS0FJQUlnQkZEUVlnQWtFQVFSa2dCa0VCZG10QkgzRWdCa0VmUmh0MElRVURRQUpBSUFBb0FnUkJlSEVpQnlBQ1NRMEFJQWNnQW1zaUJ5QUJUdzBBSUFBaEJDQUhJZ0ZGRFFZTElBQkJGR29vQWdBaUJ5QURJQWNnQUNBRlFSMTJRUVJ4YWtFUWFpZ0NBQ0lBUnhzZ0F5QUhHeUVESUFWQkFYUWhCU0FBRFFBTElBTkZEUVVnQXlFQURBY0xJQUpCakJNb0FnQk5EUWdnQUVVTkFpQUFJQU4wUVFJZ0EzUWlBRUVBSUFCcmNuRWlBRUVBSUFCcmNXZ2lBVUVEZENJRVFZd1FhaWdDQUNJQUtBSUlJZ01nQkVHRUVHb2lCRVlOQ2lBRElBUTJBZ3dnQkVFSWFpQUROZ0lBREFzTFFmd1BJQVZCZmlBQ2QzRTJBZ0FMSUFBZ0FrRURkQ0lDUVFOeU5nSUVJQUFnQW1vaUFDQUFLQUlFUVFGeU5nSUVJQVFQQzBHQUVDZ0NBQ0lBUlEwRklBQkJBQ0FBYTNGb1FRSjBRWXdTYWlnQ0FDSUZLQUlFUVhoeElBSnJJUUVnQlNJREtBSVFJZ0JGRFJSQkFBd1ZDMEVBSVFFTUFnc2dCQTBDQzBFQUlRUkJBaUFHUVI5eGRDSUFRUUFnQUd0eUlBaHhJZ0JGRFFJZ0FFRUFJQUJyY1doQkFuUkJqQkpxS0FJQUlnQkZEUUlMQTBBZ0FDZ0NCRUY0Y1NJRElBSlBJQU1nQW1zaUJ5QUJTWEVoQlNBQUtBSVFJZ05GQkVBZ0FFRVVhaWdDQUNFREN5QUFJQVFnQlJzaEJDQUhJQUVnQlJzaEFTQURJZ0FOQUFzZ0JFVU5BUXRCakJNb0FnQWlBQ0FDU1EwQklBRWdBQ0FDYTBrTkFRc0NRQUpBQWtCQmpCTW9BZ0FpQVNBQ1NRUkFRWkFUS0FJQUlnQWdBazBOQVF3ZUMwR1VFeWdDQUNFQUlBRWdBbXNpQTBFUVR3MEJRWlFUUVFBMkFnQkJqQk5CQURZQ0FDQUFJQUZCQTNJMkFnUWdBQ0FCYWlJQlFRUnFJUUlnQVNnQ0JFRUJjaUVCREFJTFFRQWhBU0FDUWErQUJHb2lBMEVRZGtBQUlnQkJmMFlORkNBQVFSQjBJZ1ZGRFJSQm5CTkJuQk1vQWdBZ0EwR0FnSHh4SWdkcUlnQTJBZ0JCb0JOQm9CTW9BZ0FpQVNBQUlBQWdBVWtiTmdJQVFaZ1RLQUlBSWdGRkRRbEJwQk1oQUFOQUlBQW9BZ0FpQXlBQUtBSUVJZ1JxSUFWR0RRc2dBQ2dDQ0NJQURRQUxEQklMUVl3VElBTTJBZ0JCbEJNZ0FDQUNhaUlGTmdJQUlBVWdBMEVCY2pZQ0JDQUFJQUZxSUFNMkFnQWdBa0VEY2lFQklBQkJCR29oQWdzZ0FpQUJOZ0lBSUFCQkNHb1BDeUFFRUNNZ0FVRVBTdzBDSUFRZ0FTQUNhaUlBUVFOeU5nSUVJQVFnQUdvaUFDQUFLQUlFUVFGeU5nSUVEQXdMUWZ3UElBVkJmaUFCZDNFMkFnQUxJQUJCQ0dvaEF5QUFJQUpCQTNJMkFnUWdBQ0FDYWlJRklBRkJBM1FpQVNBQ2F5SUNRUUZ5TmdJRUlBQWdBV29nQWpZQ0FFR01FeWdDQUNJQVJRMERJQUJCQTNZaUJFRURkRUdFRUdvaEFVR1VFeWdDQUNFQVFmd1BLQUlBSWdkQkFTQUVRUjl4ZENJRWNVVU5BU0FCS0FJSURBSUxJQVFnQWtFRGNqWUNCQ0FFSUFKcUlnQWdBVUVCY2pZQ0JDQUFJQUZxSUFFMkFnQWdBVUgvQVVzTkJTQUJRUU4ySWdGQkEzUkJoQkJxSVFKQi9BOG9BZ0FpQTBFQklBRkJIM0YwSWdGeFJRMEhJQUpCQ0dvaEF5QUNLQUlJREFnTFFmd1BJQWNnQkhJMkFnQWdBUXNoQkNBQlFRaHFJQUEyQWdBZ0JDQUFOZ0lNSUFBZ0FUWUNEQ0FBSUFRMkFnZ0xRWlFUSUFVMkFnQkJqQk1nQWpZQ0FDQUREd3NDUUVHNEV5Z0NBQ0lBQkVBZ0FDQUZUUTBCQzBHNEV5QUZOZ0lBQzBFQUlRQkJxQk1nQnpZQ0FFR2tFeUFGTmdJQVFid1RRZjhmTmdJQVFiQVRRUUEyQWdBRFFDQUFRWXdRYWlBQVFZUVFhaUlCTmdJQUlBQkJrQkJxSUFFMkFnQWdBRUVJYWlJQVFZQUNSdzBBQ3lBRklBZEJXR29pQUVFQmNqWUNCRUdZRXlBRk5nSUFRYlFUUVlDQWdBRTJBZ0JCa0JNZ0FEWUNBQ0FGSUFCcVFTZzJBZ1FNQ1FzZ0FDZ0NERVVOQVF3SEN5QUFJQUVRSkF3REN5QUZJQUZORFFVZ0F5QUJTdzBGSUFCQkJHb2dCQ0FIYWpZQ0FFR1lFeWdDQUNJQVFROXFRWGh4SWdGQmVHb2lBMEdRRXlnQ0FDQUhhaUlGSUFFZ0FFRUlhbXRySWdGQkFYSTJBZ1JCdEJOQmdJQ0FBVFlDQUVHWUV5QUROZ0lBUVpBVElBRTJBZ0FnQUNBRmFrRW9OZ0lFREFZTFFmd1BJQU1nQVhJMkFnQWdBa0VJYWlFRElBSUxJUUVnQXlBQU5nSUFJQUVnQURZQ0RDQUFJQUkyQWd3Z0FDQUJOZ0lJQ3lBRVFRaHFJUUVNQkF0QkFRc2hCZ05BQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFZT0NnQUJBZ1FGQmdnSkNnY0RDeUFBS0FJRVFYaHhJQUpySWdVZ0FTQUZJQUZKSWdVYklRRWdBQ0FESUFVYklRTWdBQ0lGS0FJUUlnQU5Da0VCSVFZTUVRc2dCVUVVYWlnQ0FDSUFEUXBCQWlFR0RCQUxJQU1RSXlBQlFSQlBEUXBCQ2lFR0RBOExJQU1nQVNBQ2FpSUFRUU55TmdJRUlBTWdBR29pQUNBQUtBSUVRUUZ5TmdJRURBMExJQU1nQWtFRGNqWUNCQ0FESUFKcUlnSWdBVUVCY2pZQ0JDQUNJQUZxSUFFMkFnQkJqQk1vQWdBaUFFVU5DVUVFSVFZTURRc2dBRUVEZGlJRVFRTjBRWVFRYWlFRlFaUVRLQUlBSVFCQi9BOG9BZ0FpQjBFQklBUkJIM0YwSWdSeFJRMEpRUVVoQmd3TUN5QUZLQUlJSVFRTUNRdEIvQThnQnlBRWNqWUNBQ0FGSVFSQkJpRUdEQW9MSUFWQkNHb2dBRFlDQUNBRUlBQTJBZ3dnQUNBRk5nSU1JQUFnQkRZQ0NFRUhJUVlNQ1F0QmxCTWdBallDQUVHTUV5QUJOZ0lBUVFnaEJnd0lDeUFEUVFocUR3dEJBQ0VHREFZTFFRQWhCZ3dGQzBFRElRWU1CQXRCQnlFR0RBTUxRUWtoQmd3Q0MwRUdJUVlNQVF0QkNDRUdEQUFMQUF0QnVCTkJ1Qk1vQWdBaUFDQUZJQUFnQlVrYk5nSUFJQVVnQjJvaEEwR2tFeUVBQW44Q1FBSkFBa0FDUUFOQUlBQW9BZ0FnQTBZTkFTQUFLQUlJSWdBTkFBc01BUXNnQUNnQ0RFVU5BUXRCcEJNaEFBSkFBMEFnQUNnQ0FDSURJQUZOQkVBZ0F5QUFLQUlFYWlJRElBRkxEUUlMSUFBb0FnZ2hBQXdBQ3dBTElBVWdCMEZZYWlJQVFRRnlOZ0lFSUFVZ0FHcEJLRFlDQkNBQklBTkJZR3BCZUhGQmVHb2lCQ0FFSUFGQkVHcEpHeUlFUVJzMkFnUkJtQk1nQlRZQ0FFRzBFMEdBZ0lBQk5nSUFRWkFUSUFBMkFnQkJwQk1wQWdBaENTQUVRUkJxUWF3VEtRSUFOd0lBSUFRZ0NUY0NDRUdvRXlBSE5nSUFRYVFUSUFVMkFnQkJyQk1nQkVFSWFqWUNBRUd3RTBFQU5nSUFJQVJCSEdvaEFBTkFJQUJCQnpZQ0FDQURJQUJCQkdvaUFFc05BQXNnQkNBQlJnMERJQVFnQkNnQ0JFRitjVFlDQkNBQklBUWdBV3NpQUVFQmNqWUNCQ0FFSUFBMkFnQWdBRUgvQVUwRVFDQUFRUU4ySWdOQkEzUkJoQkJxSVFCQi9BOG9BZ0FpQlVFQklBTkJIM0YwSWdOeFJRMENJQUFvQWdnTUF3c2dBU0FBRUNRTUF3c2dBQ0FGTmdJQUlBQWdBQ2dDQkNBSGFqWUNCQ0FGSUFKQkEzSTJBZ1FnQlNBQ2FpRUFJQU1nQldzZ0Ftc2hBa0dZRXlnQ0FDQURSZzBFUVpRVEtBSUFJQU5HRFFVZ0F5Z0NCQ0lCUVFOeFFRRkhEUWtnQVVGNGNTSUVRZjhCU3cwR0lBTW9BZ3dpQnlBREtBSUlJZ1pHRFFjZ0JpQUhOZ0lNSUFjZ0JqWUNDQXdJQzBIOER5QUZJQU55TmdJQUlBQUxJUU1nQUVFSWFpQUJOZ0lBSUFNZ0FUWUNEQ0FCSUFBMkFnd2dBU0FETmdJSUMwRUFJUUZCa0JNb0FnQWlBQ0FDVFEwQURBZ0xJQUVQQzBHWUV5QUFOZ0lBUVpBVFFaQVRLQUlBSUFKcUlnSTJBZ0FnQUNBQ1FRRnlOZ0lFREFVTElBQkJqQk1vQWdBZ0Ftb2lBa0VCY2pZQ0JFR1VFeUFBTmdJQVFZd1RJQUkyQWdBZ0FDQUNhaUFDTmdJQURBUUxJQU1RSXd3QkMwSDhEMEg4RHlnQ0FFRitJQUZCQTNaM2NUWUNBQXNnQkNBQ2FpRUNJQU1nQkdvaEF3c2dBeUFES0FJRVFYNXhOZ0lFSUFBZ0FrRUJjallDQkNBQUlBSnFJQUkyQWdBQ2Z3SkFJQUpCL3dGTkJFQWdBa0VEZGlJQlFRTjBRWVFRYWlFQ1Fmd1BLQUlBSWdOQkFTQUJRUjl4ZENJQmNVVU5BU0FDUVFocUlRTWdBaWdDQ0F3Q0N5QUFJQUlRSkF3Q0MwSDhEeUFESUFGeU5nSUFJQUpCQ0dvaEF5QUNDeUVCSUFNZ0FEWUNBQ0FCSUFBMkFnd2dBQ0FDTmdJTUlBQWdBVFlDQ0FzZ0JVRUlhZzhMUVpBVElBQWdBbXNpQVRZQ0FFR1lFMEdZRXlnQ0FDSUFJQUpxSWdNMkFnQWdBeUFCUVFGeU5nSUVJQUFnQWtFRGNqWUNCQ0FBUVFocUM2VUJBUUovUVFJaEJRSkFBa0FDUUFKQUFrQWdBQ2dDQkNJR0lBRnJJQUpQRFFBZ0FTQUNhaUlDSUFGSklRRUNRQ0FFQkVCQkFDRUZJQUVOQWlBR1FRRjBJZ0VnQWlBQ0lBRkpHeUVDREFFTFFRQWhCU0FCRFFFTElBSkJBRWdOQUNBR1JRMEJJQUFvQWdBZ0FoQVRJZ0ZGRFFJTUF3c2dCUThMSUFJUUJDSUJEUUVMSUFNTkFRc2dBUVJBSUFBZ0FUWUNBQ0FBUVFScUlBSTJBZ0JCQWc4TFFRRVBDd0FMQ0FCQm5CUVFCd0FMWmdJQmZ3TitJd0JCTUdzaUFTUUFJQUFwQWhBaEFpQUFLUUlJSVFNZ0FDa0NBQ0VFSUFGQkZHcEJBRFlDQUNBQklBUTNBeGdnQVVJQk53SUVJQUZCaEEwMkFoQWdBU0FCUVJocU5nSUFJQUVnQXpjRElDQUJJQUkzQXlnZ0FTQUJRU0JxRUNnQUM4VUJBUUYvSXdCQmtBSnJJZ01rQUNBRFFUQnFRUUJCekFBUUxSb2dBMEdVQVdwQjRBb3BBZ0EzQWdBZ0EwR01BV3BCMkFvcEFnQTNBZ0FnQTBHRUFXcEIwQW9wQWdBM0FnQWdBMEhJQ2lrQ0FEY0NmQ0FEUVRCcUlBRWdBaEFKSUFOQm9BRnFJQU5CTUdwQjhBQVFLeG9nQTBFUWFpQURRYUFCYWhBS0lBTkJNR29nQTBFUWFrRWdFQU1nQTBHb0FXb2dBMEU0YWlnQ0FEWUNBQ0FESUFNcEF6QTNBNkFCSUFOQkNHb2dBMEdnQVdvUUN5QUFJQU1wQXdnM0FnQWdBMEdRQW1va0FBdWJBd0VFZnlNQVFVQnFJZ01rQUNBQUlBQXBBd0FnQXExQ0E0WjhOd01BSUFNZ0FFSE1BR28yQWlnZ0F5QURRU2hxTmdJc0FrQUNRQUpBQWtBQ1FBSkFJQUFvQWdnaUJRUkFRY0FBSUFWcklnUWdBazBOQVNBRFFSaHFJQVVnQlNBQ2FpSUVJQUJCREdvUUZTQURLQUljSUFKSERRVWdBeWdDR0NBQklBSVFLeG9NQXdzZ0FpRUVEQUVMSUFOQk1Hb2dBU0FDSUFRUUZpQURRVHhxS0FJQUlRUWdBeWdDT0NFQklBTW9BakFoQlNBREtBSTBJUUlnQTBFZ2FpQUFRUXhxSWdZZ0FDZ0NDQkFYSUFJZ0F5Z0NKRWNOQkNBREtBSWdJQVVnQWhBckdpQUFRUWhxUVFBMkFnQWdBMEVzYWlBR0VCZ0xJQU5CUEdvaEFpQURRVGhxSVFVQ1FBTkFJQVJCUDAwTkFTQURRVEJxSUFFZ0JFSEFBQkFXSUFJb0FnQWhCQ0FGS0FJQUlRRWdBMEVJYWtFQVFjQUFJQU1vQWpBZ0F5Z0NOQkFaSUFOQkxHb2dBeWdDQ0JBWURBQUxBQXNnQTBFUWFpQUFRUXhxSUFRUUdpQURLQUlVSUFSSERRRWdBeWdDRUNBQklBUVFLeG9MSUFCQkNHb2dCRFlDQUNBRFFVQnJKQUFQQzBHRUZCQUhBQXRCaEJRUUJ3QUxRWVFVRUFjQUM5OEVBZ04vQVg0akFFSFFBR3NpQWlRQUlBSWdBVUhNQUdvMkFpUWdBU2tEQUNFRklBRW9BZ2doQkNBQ0lBSkJKR28yQWlnQ1FDQUVRVDlOQkVBZ0FVRU1haUlESUFScVFZQUJPZ0FBSUFFZ0FTZ0NDRUVCYWlJRU5nSUlJQUpCR0dvZ0F5QUVFQmNnQWlnQ0dFRUFJQUlvQWh3UUxScEJ3QUFnQVNnQ0NHdEJCMDBFUUNBQ1FTaHFJQU1RR0NBQ1FSQnFJQU1nQVVFSWFpZ0NBQkFhSUFJb0FoQkJBQ0FDS0FJVUVDMGFDeUFDUVFocUlBTkJPQkFYSUFJb0FneEJDRWNOQVNBQ0tBSUlJQVZDT0lZZ0JVSW9oa0tBZ0lDQWdJREEvd0NEaENBRlFoaUdRb0NBZ0lDQTREK0RJQVZDQ0laQ2dJQ0FnUEFmZzRTRUlBVkNDSWhDZ0lDQStBK0RJQVZDR0loQ2dJRDhCNE9FSUFWQ0tJaENnUDREZ3lBRlFqaUloSVNFTndBQUlBSkJLR29nQXhBWUlBRkJDR3BCQURZQ0FDQUNRUUEyQWlnZ0FrRW9ha0VFY2lFRVFRQWhBd0pBQTBBZ0EwRWdSZzBCSUFRZ0EycEJBRG9BQUNBQ0lBSW9BaWhCQVdvMkFpZ2dBMEVCYWlFRERBQUxBQXNnQWtGQWF5QUJRZVFBYWlrQUFEY0RBQ0FDUVRocUlBRkIzQUJxS1FBQU53TUFJQUpCTUdvZ0FVSFVBR29wQUFBM0F3QWdBaUFCS1FCTU53TW9RUUFoQXdKQUEwQWdBMEVnUmcwQklBSkJLR29nQTJvaUJDQUVLQUlBSWdSQkdIUWdCRUVJZEVHQWdQd0hjWElnQkVFSWRrR0EvZ054SUFSQkdIWnljallDQUNBRFFRUnFJUU1NQUFzQUN5QUFJQUlwQXlnM0FBQWdBRUVZYWlBQ1FVQnJLUU1BTndBQUlBQkJFR29nQWtFNGFpa0RBRGNBQUNBQVFRaHFJQUpCTUdvcEF3QTNBQUFnQWtIUUFHb2tBQThMUWR3VElBUkJ3QUFRSFFBTFFld1RFQWNBQzJNQkFuOGdBU2dDQUNFQ0FrQUNRQ0FCS0FJRUlnTWdBU2dDQ0NJQlJnUkFJQU1oQVF3QkN5QURJQUZKRFFFZ0FRUkFJQUlnQVJBVElnSU5BUUFMSUFJZ0F4QVJRUUVoQWtFQUlRRUxJQUFnQVRZQ0JDQUFJQUkyQWdBUEMwSEVFeEFIQUF1YUFRRUJmeU1BUVpBQmF5SUJKQUFnQVVFZ2FrRUFRY3dBRUMwYUlBRkJoQUZxUWVBS0tRSUFOd0lBSUFGQi9BQnFRZGdLS1FJQU53SUFJQUZCOUFCcVFkQUtLUUlBTndJQUlBRkJ5QW9wQWdBM0Ftd2dBVUVRYWlBQlFTQnFRZkFBRUFNZ0FVRW9haUFCUVJocUtBSUFOZ0lBSUFFZ0FTa0RFRGNESUNBQlFRaHFJQUZCSUdvUUN5QUFJQUVwQXdnM0FnQWdBVUdRQVdva0FBdUdBUUVCZnlNQVFZQUNheUlGSkFBZ0JVRWdhaUFCSUFJUUFVSHdBQkFzR2lBRlFTQnFJQU1nQkJBSklBVkJrQUZxSUFWQklHcEI4QUFRS3hvZ0JVRVFhaUFGUVpBQmFrSHdBQkFESUFWQm1BRnFJQVZCR0dvb0FnQTJBZ0FnQlNBRktRTVFOd09RQVNBRlFRaHFJQVZCa0FGcUVBc2dBQ0FGS1FNSU53SUFJQVZCZ0FKcUpBQUxjZ0VCZnlNQVFiQUJheUlESkFBZ0EwRkFheUFCSUFJUUFVSHdBQkFzR2lBRFFTQnFJQU5CUUdzUUNpQURRUkJxSUFOQklHcEJJQkFESUFOQnlBQnFJQU5CR0dvb0FnQTJBZ0FnQXlBREtRTVFOd05BSUFOQkNHb2dBMEZBYXhBTElBQWdBeWtEQ0RjQ0FDQURRYkFCYWlRQUMwb0JBWDhqQUVFUWF5SUJKQUFnQVVJQk53TUFJQUZCQURZQ0NDQUJRUUFnQUVFQVFRQVFCVUgvQVhGQkFrWUVRQ0FCS0FJQUlRQWdBVUVRYWlRQUlBQVBDMEdBQ0VFV0VBQUFDd2dBSUFBZ0FSQVJDd3NBSUFFRVFDQUFFQlFMQ3dVQVFhQVBDOGNGQVFoL0FrQUNRQUpBQWtBQ1FBSkFJQUZCdjM5TERRQkJFQ0FCUVF0cVFYaHhJQUZCQzBrYklRSWdBRUY4YWlJR0tBSUFJZ2RCZUhFaEF3SkFBa0FDUUFKQUlBZEJBM0VFUUNBQVFYaHFJZ2dnQTJvaEJTQURJQUpQRFFGQm1CTW9BZ0FnQlVZTkFrR1VFeWdDQUNBRlJnMERJQVVvQWdRaUIwRUNjUTBFSUFkQmVIRWlDU0FEYWlJRElBSkpEUVFnQXlBQ2F5RUJJQWxCL3dGTERRY2dCU2dDRENJRUlBVW9BZ2dpQlVZTkNDQUZJQVEyQWd3Z0JDQUZOZ0lJREFrTElBSkJnQUpKRFFNZ0F5QUNRUVJ5U1EwRElBTWdBbXRCZ1lBSVR3MEREQWtMSUFNZ0Ftc2lBVUVRU1EwSUlBWWdBaUFIUVFGeGNrRUNjallDQUNBSUlBSnFJZ1FnQVVFRGNqWUNCQ0FGSUFVb0FnUkJBWEkyQWdRZ0JDQUJFQ1VNQ0F0QmtCTW9BZ0FnQTJvaUF5QUNUUTBCSUFZZ0FpQUhRUUZ4Y2tFQ2NqWUNBRUdZRXlBSUlBSnFJZ0UyQWdCQmtCTWdBeUFDYXlJRU5nSUFJQUVnQkVFQmNqWUNCQXdIQzBHTUV5Z0NBQ0FEYWlJRElBSlBEUUlMSUFFUUJDSUNSUTBBSUFJZ0FDQUJJQVlvQWdBaUJFRjRjVUVFUVFnZ0JFRURjUnRySWdRZ0JDQUJTeHNRS3lFQklBQVFGQ0FCSVFRTElBUVBDd0pBSUFNZ0Ftc2lBVUVRU1FSQUlBWWdCMEVCY1NBRGNrRUNjallDQUNBSUlBTnFJZ0VnQVNnQ0JFRUJjallDQkVFQUlRRU1BUXNnQmlBQ0lBZEJBWEZ5UVFKeU5nSUFJQWdnQW1vaUJDQUJRUUZ5TmdJRUlBZ2dBMm9pQWlBQk5nSUFJQUlnQWlnQ0JFRitjVFlDQkF0QmxCTWdCRFlDQUVHTUV5QUJOZ0lBREFNTElBVVFJd3dCQzBIOEQwSDhEeWdDQUVGK0lBZEJBM1ozY1RZQ0FBc2dBVUVQVFFSQUlBWWdBeUFHS0FJQVFRRnhja0VDY2pZQ0FDQUlJQU5xSWdFZ0FTZ0NCRUVCY2pZQ0JBd0JDeUFHSUFJZ0JpZ0NBRUVCY1hKQkFuSTJBZ0FnQ0NBQ2FpSUVJQUZCQTNJMkFnUWdDQ0FEYWlJQ0lBSW9BZ1JCQVhJMkFnUWdCQ0FCRUNVZ0FBOExJQUFMNEFZQkJYOENRQ0FBUVhocUlnRWdBRUY4YWlnQ0FDSURRWGh4SWdCcUlRSUNRQUpBSUFOQkFYRU5BQ0FEUVFOeFJRMEJJQUVvQWdBaUF5QUFhaUVBQWtBQ1FFR1VFeWdDQUNBQklBTnJJZ0ZIQkVBZ0EwSC9BVXNOQVNBQktBSU1JZ1FnQVNnQ0NDSUZSZzBDSUFVZ0JEWUNEQ0FFSUFVMkFnZ01Bd3NnQWlnQ0JDSURRUU54UVFOSERRSkJqQk1nQURZQ0FDQUNRUVJxSUFOQmZuRTJBZ0FNQkFzZ0FSQWpEQUVMUWZ3UFFmd1BLQUlBUVg0Z0EwRURkbmR4TmdJQUN3SkFBbjhDUUFKQUFrQUNRQUpBQWtBZ0FpZ0NCQ0lEUVFKeFJRUkFRWmdUS0FJQUlBSkdEUUZCbEJNb0FnQWdBa1lOQWlBRFFYaHhJZ1FnQUdvaEFDQUVRZjhCU3cwRElBSW9BZ3dpQkNBQ0tBSUlJZ0pHRFFRZ0FpQUVOZ0lNSUFRZ0FqWUNDQXdGQ3lBQ1FRUnFJQU5CZm5FMkFnQWdBU0FBUVFGeU5nSUVJQUVnQUdvZ0FEWUNBQXdIQzBHWUV5QUJOZ0lBUVpBVFFaQVRLQUlBSUFCcUlnQTJBZ0FnQVNBQVFRRnlOZ0lFSUFGQmxCTW9BZ0JHQkVCQmpCTkJBRFlDQUVHVUUwRUFOZ0lBQzBHMEV5Z0NBQ0FBVHcwSEFrQWdBRUVwU1EwQVFhUVRJUUFEUUNBQUtBSUFJZ0lnQVUwRVFDQUNJQUFvQWdScUlBRkxEUUlMSUFBb0FnZ2lBQTBBQ3d0QkFDRUJRYXdUS0FJQUlnQkZEUVFEUUNBQlFRRnFJUUVnQUNnQ0NDSUFEUUFMSUFGQi94OGdBVUgvSDBzYkRBVUxRWlFUSUFFMkFnQkJqQk5CakJNb0FnQWdBR29pQURZQ0FBd0hDeUFDRUNNTUFRdEIvQTlCL0E4b0FnQkJmaUFEUVFOMmQzRTJBZ0FMSUFFZ0FFRUJjallDQkNBQklBQnFJQUEyQWdBZ0FVR1VFeWdDQUVjTkFrR01FeUFBTmdJQUR3dEIveDhMSVFGQnRCTkJmellDQUVHOEV5QUJOZ0lBRHd0QnZCTUNmd0pBQW44Q1FDQUFRZjhCVFFSQUlBQkJBM1lpQWtFRGRFR0VFR29oQUVIOER5Z0NBQ0lEUVFFZ0FrRWZjWFFpQW5GRkRRRWdBRUVJYWlFRElBQW9BZ2dNQWdzZ0FTQUFFQ1JCdkJOQnZCTW9BZ0JCZjJvaUFUWUNBQ0FCRFFSQnJCTW9BZ0FpQUVVTkFrRUFJUUVEUUNBQlFRRnFJUUVnQUNnQ0NDSUFEUUFMSUFGQi94OGdBVUgvSDBzYkRBTUxRZndQSUFNZ0FuSTJBZ0FnQUVFSWFpRURJQUFMSVFJZ0F5QUJOZ0lBSUFJZ0FUWUNEQ0FCSUFBMkFnd2dBU0FDTmdJSUR3dEIveDhMSWdFMkFnQUxEd3NnQVNBQVFRRnlOZ0lFSUFFZ0FHb2dBRFlDQUFzNUFBSkFJQUlnQVU4RVFDQUNRY0VBVHcwQklBQWdBaUFCYXpZQ0JDQUFJQU1nQVdvMkFnQVBDeUFCSUFJUUhBQUxJQUpCd0FBUUFnQUxUUUlCZndKK0l3QkJFR3NpQkNRQUlBUkJDR3BCQUNBRElBRWdBaEFaSUFRcEF3Z2hCU0FFSUFNZ0FpQUJJQUlRR1NBRUtRTUFJUVlnQUNBRk53SUFJQUFnQmpjQ0NDQUVRUkJxSkFBTExBRUJmeU1BUVJCcklnTWtBQ0FEUVFocUlBSkJ3QUFnQVJBVklBQWdBeWtEQ0RjQ0FDQURRUkJxSkFBTERnQWdBQ2dDQUNnQ0FDQUJFQnNMTndBQ1FDQUNJQUZQQkVBZ0JDQUNTUTBCSUFBZ0FpQUJhellDQkNBQUlBTWdBV28yQWdBUEN5QUJJQUlRSEFBTElBSWdCQkFDQUFzckFRRi9Jd0JCRUdzaUF5UUFJQU5CQ0dwQkFDQUNJQUVRRlNBQUlBTXBBd2czQWdBZ0EwRVFhaVFBQzdJdUFTTi9Jd0JCZ0FGcklnY2tBQ0FISUFGQndBQVFLeUVCUVFBaEJ3SkFBMEFnQjBIQUFFWU5BU0FCSUFkcUlnZ2dDQ2dDQUNJSVFSaDBJQWhCQ0hSQmdJRDhCM0Z5SUFoQkNIWkJnUDREY1NBSVFSaDJjbkkyQWdBZ0IwRUVhaUVIREFBTEFBc2dBQ2dDRkNFYklBQW9BaEFoSENBQUtBSUFJUjBnQUNnQ0JDRWVJQUFvQWh3aEh5QUFLQUlZSVNBZ0FDZ0NDQ0VoSUFFb0Fnd2hEU0FCS0FJSUlSZ2dBU2dDQkNFVklBRW9BZ0FoRWlBQklBQW9BZ3dpSWpZQ1pDQUJJQ0UyQW1BZ0FTQWdOZ0pvSUFFZ0h6WUNiQ0FCSUI0MkFuUWdBU0FkTmdKd0lBRWdIRFlDZUNBQklCczJBbndnQVVIUUFHb2dBVUhnQUdvZ0FVSHdBR29nRlVHUmlkMkpCMm9nRWtHWTM2aVVCR29RSGlBQktBSmNJUWNnQVNnQ1dDRUlJQUVvQWxBaENpQUJLQUpVSVJNZ0FTQWVOZ0prSUFFZ0hUWUNZQ0FCSUJ3MkFtZ2dBU0FiTmdKc0lBRWdFellDZENBQklBbzJBbkFnQVNBSU5nSjRJQUVnQnpZQ2ZDQUJRZEFBYWlBQlFlQUFhaUFCUWZBQWFpQU5RYVczMTgxK2FpQVlRYy8zZzY1N2FoQWVJQUVvQWx3aEdTQUJLQUpZSVE0Z0FTZ0NVQ0VQSUFFb0FsUWhGaUFCS0FJY0lRd2dBU2dDR0NFUUlBRW9BaFFoRnlBQktBSVFJUkVnQVNBVE5nSmtJQUVnQ2pZQ1lDQUJJQWcyQW1nZ0FTQUhOZ0pzSUFFZ0ZqWUNkQ0FCSUE4MkFuQWdBU0FPTmdKNElBRWdHVFlDZkNBQlFkQUFhaUFCUWVBQWFpQUJRZkFBYWlBWFFmR2p4TThGYWlBUlFkdUUyOG9EYWhBZUlBRW9BbHdoQnlBQktBSllJUWdnQVNnQ1VDRUtJQUVvQWxRaEFpQUJJQlkyQW1RZ0FTQVBOZ0pnSUFFZ0RqWUNhQ0FCSUJrMkFtd2dBU0FDTmdKMElBRWdDallDY0NBQklBZzJBbmdnQVNBSE5nSjhJQUZCMEFCcUlBRkI0QUJxSUFGQjhBQnFJQXhCMWIzeDJIcHFJQkJCcElYK2tYbHFFQjRnQVNnQ1hDRVdJQUVvQWxnaEF5QUJLQUpRSVFRZ0FTZ0NWQ0VGSUFFb0Fpd2hFeUFCS0FJb0lSa2dBU2dDSkNFT0lBRW9BaUFoRHlBQklBSTJBbVFnQVNBS05nSmdJQUVnQ0RZQ2FDQUJJQWMyQW13Z0FTQUZOZ0owSUFFZ0JEWUNjQ0FCSUFNMkFuZ2dBU0FXTmdKOElBRkIwQUJxSUFGQjRBQnFJQUZCOEFCcUlBNUJnYmFObEFGcUlBOUJtTldld0gxcUVCNGdBU2dDWENFQ0lBRW9BbGdoQmlBQktBSlFJUWtnQVNnQ1ZDRUxJQUVnQlRZQ1pDQUJJQVEyQW1BZ0FTQUROZ0pvSUFFZ0ZqWUNiQ0FCSUFzMkFuUWdBU0FKTmdKd0lBRWdCallDZUNBQklBSTJBbndnQVVIUUFHb2dBVUhnQUdvZ0FVSHdBR29nRTBIRCs3R29CV29nR1VHK2k4YWhBbW9RSGlBQktBSmNJUU1nQVNnQ1dDRUVJQUVvQWxBaEJTQUJLQUpVSVJRZ0FTZ0NQQ0VISUFFb0FqZ2hDQ0FCS0FJMElSWWdBU2dDTUNFS0lBRWdDellDWkNBQklBazJBbUFnQVNBR05nSm9JQUVnQWpZQ2JDQUJJQlEyQW5RZ0FTQUZOZ0p3SUFFZ0JEWUNlQ0FCSUFNMkFud2dBVUhRQUdvZ0FVSGdBR29nQVVId0FHb2dGa0grNC9xR2VHb2dDa0gwdXZtVkIyb1FIaUFCS0FKY0lRSWdBU2dDV0NFR0lBRW9BbEFoQ1NBQktBSlVJUXNnQVNBVU5nSmtJQUVnQlRZQ1lDQUJJQVEyQW1nZ0FTQUROZ0pzSUFFZ0N6WUNkQ0FCSUFrMkFuQWdBU0FHTmdKNElBRWdBallDZkNBQlFkQUFhaUFCUWVBQWFpQUJRZkFBYWlBSFFmVGk3NHg4YWlBSVFhZU44TjU1YWhBZUlBRW9BbHdoQXlBQktBSllJUVFnQVNnQ1VDRUZJQUVvQWxRaEZDQUJJQmcyQW5RZ0FTQU5OZ0p3SUFFZ0ZUWUNlQ0FCSUJJMkFud2dBVUhnQUdvZ0FVSHdBR29nRVJBZklBRWdDaUFCS0FKZ2FqWUNjQ0FCSUJNZ0FTZ0NaR28yQW5RZ0FTQVpJQUVvQW1ocU5nSjRJQUVnRGlBQktBSnNhallDZkNBQlFVQnJJQUZCOEFCcUlBY2dDQkFnSUFFZ0N6WUNaQ0FCSUFrMkFtQWdBU0FHTmdKb0lBRWdBallDYkNBQklCUTJBblFnQVNBRk5nSndJQUVnQkRZQ2VDQUJJQU0yQW53Z0FTZ0NRQ0VWSUFFb0FrUWhFaUFCUWRBQWFpQUJRZUFBYWlBQlFmQUFhaUFCS0FKSUlocEJoby81L1g1cUlBRW9Ba3dpRFVIQjArMmtmbW9RSGlBQktBSmNJUUlnQVNnQ1dDRUdJQUVvQWxBaENTQUJLQUpVSVFzZ0FTQVVOZ0prSUFFZ0JUWUNZQ0FCSUFRMkFtZ2dBU0FETmdKc0lBRWdDellDZENBQklBazJBbkFnQVNBR05nSjRJQUVnQWpZQ2ZDQUJRZEFBYWlBQlFlQUFhaUFCUWZBQWFpQVZRY3pEc3FBQ2FpQVNRY2E3aHY0QWFoQWVJQUVvQWx3aEF5QUJLQUpZSVFRZ0FTZ0NVQ0VGSUFFb0FsUWhGQ0FCSUJBMkFuUWdBU0FNTmdKd0lBRWdGellDZUNBQklCRTJBbndnQVVIZ0FHb2dBVUh3QUdvZ0R4QWZJQUVnRFNBQktBSmdhallDY0NBQklBY2dBU2dDWkdvMkFuUWdBU0FJSUFFb0FtaHFOZ0o0SUFFZ0ZpQUJLQUpzYWpZQ2ZDQUJRZUFBYWlBQlFmQUFhaUFWSUJJUUlDQUJLQUpnSVJFZ0FTZ0NaQ0VOSUFFb0FtZ2hEQ0FCS0FKc0lSZ2dBU0FMTmdKa0lBRWdDVFlDWUNBQklBWTJBbWdnQVNBQ05nSnNJQUVnRkRZQ2RDQUJJQVUyQW5BZ0FTQUVOZ0o0SUFFZ0F6WUNmQ0FCUWRBQWFpQUJRZUFBYWlBQlFmQUFhaUFNUWFxSjB0TUVhaUFZUWUvWXBPOENhaEFlSUFFb0Fsd2hFQ0FCS0FKWUlSY2dBU2dDVUNFQ0lBRW9BbFFoQmlBQklCUTJBbVFnQVNBRk5nSmdJQUVnQkRZQ2FDQUJJQU0yQW13Z0FTQUdOZ0owSUFFZ0FqWUNjQ0FCSUJjMkFuZ2dBU0FRTmdKOElBRkIwQUJxSUFGQjRBQnFJQUZCOEFCcUlCRkIycEhtdHdkcUlBMUIzTlBDNVFWcUVCNGdBU2dDWENFRElBRW9BbGdoQkNBQktBSlFJUVVnQVNnQ1ZDRUpJQUVnR1RZQ2RDQUJJQk0yQW5BZ0FTQU9OZ0o0SUFFZ0R6WUNmQ0FCUWVBQWFpQUJRZkFBYWlBS0VCOGdBU0FZSUFFb0FtQnFOZ0p3SUFFZ0ZTQUJLQUprYWpZQ2RDQUJJQklnQVNnQ2FHbzJBbmdnQVNBYUlBRW9BbXhxTmdKOElBRkI0QUJxSUFGQjhBQnFJQkVnRFJBZ0lBRW9BbUFoRXlBQktBSmtJUmtnQVNnQ2FDRVNJQUVvQW13aERpQUJJQVkyQW1RZ0FTQUNOZ0pnSUFFZ0Z6WUNhQ0FCSUJBMkFtd2dBU0FKTmdKMElBRWdCVFlDY0NBQklBUTJBbmdnQVNBRE5nSjhJQUZCMEFCcUlBRkI0QUJxSUFGQjhBQnFJQkpCN1l6SHdYcHFJQTVCMHFMNXdYbHFFQjRnQVNnQ1hDRVBJQUVvQWxnaEZTQUJLQUpRSVJjZ0FTZ0NWQ0VDSUFFZ0NUWUNaQ0FCSUFVMkFtQWdBU0FFTmdKb0lBRWdBellDYkNBQklBSTJBblFnQVNBWE5nSndJQUVnRlRZQ2VDQUJJQTgyQW53Z0FVSFFBR29nQVVIZ0FHb2dBVUh3QUdvZ0UwSEgvK1g2ZTJvZ0dVSEl6NHlBZTJvUUhpQUJLQUpjSVFNZ0FTZ0NXQ0VFSUFFb0FsQWhCU0FCS0FKVUlRWWdBU0FJTmdKMElBRWdCellDY0NBQklCWTJBbmdnQVNBS05nSjhJQUZCNEFCcUlBRkI4QUJxSUFFb0Frd1FIeUFCSUE0Z0FTZ0NZR28yQW5BZ0FTQVJJQUVvQW1ScU5nSjBJQUVnRFNBQktBSm9hallDZUNBQklBd2dBU2dDYkdvMkFud2dBVUhnQUdvZ0FVSHdBR29nRXlBWkVDQWdBU2dDWUNFSElBRW9BbVFoQ0NBQktBSm9JUkFnQVNnQ2JDRUtJQUVnQWpZQ1pDQUJJQmMyQW1BZ0FTQVZOZ0pvSUFFZ0R6WUNiQ0FCSUFZMkFuUWdBU0FGTmdKd0lBRWdCRFlDZUNBQklBTTJBbndnQVVIUUFHb2dBVUhnQUdvZ0FVSHdBR29nRUVISG9wNnRmV29nQ2tIemw0QzNmR29RSGlBQktBSmNJUUlnQVNnQ1dDRUpJQUVvQWxBaEN5QUJLQUpVSVJRZ0FTQUdOZ0prSUFFZ0JUWUNZQ0FCSUFRMkFtZ2dBU0FETmdKc0lBRWdGRFlDZENBQklBczJBbkFnQVNBSk5nSjRJQUVnQWpZQ2ZDQUJRZEFBYWlBQlFlQUFhaUFCUWZBQWFpQUhRZWZTcEtFQmFpQUlRZEhHcVRacUVCNGdBU2dDWENFRElBRW9BbGdoQkNBQktBSlFJUVVnQVNnQ1ZDRUdJQUZCK0FCcUlpTWdBU2tEU0RjREFDQUJJQUVwQTBBM0EzQWdBVUhnQUdvZ0FVSHdBR29nR0JBZklBRWdDaUFCS0FKZ2FqWUNjQ0FCSUJNZ0FTZ0NaR28yQW5RZ0FTQVpJQUVvQW1ocU5nSjRJQUVnRWlBQktBSnNhallDZkNBQlFlQUFhaUFCUWZBQWFpQUhJQWdRSUNBQktBSmdJUThnQVNnQ1pDRVdJQUVvQW1naEZ5QUJLQUpzSVJVZ0FTQVVOZ0prSUFFZ0N6WUNZQ0FCSUFrMkFtZ2dBU0FDTmdKc0lBRWdCallDZENBQklBVTJBbkFnQVNBRU5nSjRJQUVnQXpZQ2ZDQUJRZEFBYWlBQlFlQUFhaUFCUWZBQWFpQVhRYmpDN1BBQ2FpQVZRWVdWM0wwQ2FoQWVJQUVvQWx3aEFpQUJLQUpZSVFrZ0FTZ0NVQ0VMSUFFb0FsUWhGQ0FCSUFZMkFtUWdBU0FGTmdKZ0lBRWdCRFlDYUNBQklBTTJBbXdnQVNBVU5nSjBJQUVnQ3pZQ2NDQUJJQWsyQW5nZ0FTQUNOZ0o4SUFGQjBBQnFJQUZCNEFCcUlBRkI4QUJxSUE5Qms1cmdtUVZxSUJaQi9OdXg2UVJxRUI0Z0FTZ0NYQ0VESUFFb0FsZ2hCQ0FCS0FKUUlRVWdBU2dDVkNFR0lBRWdEVFlDZENBQklCRTJBbkFnQVNBTU5nSjRJQUVnR0RZQ2ZDQUJRZUFBYWlBQlFmQUFhaUFPRUI4Z0FTQVZJQUVvQW1CcU5nSndJQUVnQnlBQktBSmthallDZENBQklBZ2dBU2dDYUdvMkFuZ2dBU0FRSUFFb0FteHFOZ0o4SUFGQlFHc2dBVUh3QUdvZ0R5QVdFQ0FnQVNBVU5nSmtJQUVnQ3pZQ1lDQUJJQWsyQW1nZ0FTQUNOZ0pzSUFFZ0JqWUNkQ0FCSUFVMkFuQWdBU0FFTmdKNElBRWdBellDZkNBQktBSkFJUXdnQVNnQ1JDRUNJQUZCMEFCcUlBRkI0QUJxSUFGQjhBQnFJQUVvQWtnaUpFRzdsYWl6QjJvZ0FTZ0NUQ0lSUWRUbXFhZ0dhaEFlSUFFb0Fsd2hDU0FCS0FKWUlRc2dBU2dDVUNFVUlBRW9BbFFoR2lBQklBWTJBbVFnQVNBRk5nSmdJQUVnQkRZQ2FDQUJJQU0yQW13Z0FTQWFOZ0owSUFFZ0ZEWUNjQ0FCSUFzMkFuZ2dBU0FKTmdKOElBRkIwQUJxSUFGQjRBQnFJQUZCOEFCcUlBeEJoZG5JazNscUlBSkJycEtMam5ocUVCNGdBU2dDWENFRElBRW9BbGdoQkNBQktBSlFJUVVnQVNnQ1ZDRUdJQUVnR1RZQ2RDQUJJQk0yQW5BZ0FTQVNOZ0o0SUFFZ0RqWUNmQ0FCUWVBQWFpQUJRZkFBYWlBS0VCOGdBU0FSSUFFb0FtQnFOZ0p3SUFFZ0R5QUJLQUprYWpZQ2RDQUJJQllnQVNnQ2FHbzJBbmdnQVNBWElBRW9BbXhxTmdKOElBRkI0QUJxSUFGQjhBQnFJQXdnQWhBZ0lBRW9BbUFoRVNBQktBSmtJUTBnQVNnQ2FDRVRJQUVvQW13aEdDQUJJQm8yQW1RZ0FTQVVOZ0pnSUFFZ0N6WUNhQ0FCSUFrMkFtd2dBU0FHTmdKMElBRWdCVFlDY0NBQklBUTJBbmdnQVNBRE5nSjhJQUZCMEFCcUlBRkI0QUJxSUFGQjhBQnFJQk5CeTh6cHdIcHFJQmhCb2RIL2xYcHFFQjRnQVNnQ1hDRU9JQUVvQWxnaEVpQUJLQUpRSVFrZ0FTZ0NWQ0VMSUFFZ0JqWUNaQ0FCSUFVMkFtQWdBU0FFTmdKb0lBRWdBellDYkNBQklBczJBblFnQVNBSk5nSndJQUVnRWpZQ2VDQUJJQTQyQW53Z0FVSFFBR29nQVVIZ0FHb2dBVUh3QUdvZ0VVR2pvN0c3ZkdvZ0RVSHdscTZTZkdvUUhpQUJLQUpjSVFNZ0FTZ0NXQ0VFSUFFb0FsQWhCU0FCS0FKVUlRWWdBU0FJTmdKMElBRWdCellDY0NBQklCQTJBbmdnQVNBS05nSjhJQUZCNEFCcUlBRkI4QUJxSUJVUUh5QUJJQmdnQVNnQ1lHbzJBbkFnQVNBTUlBRW9BbVJxTmdKMElBRWdBaUFCS0FKb2FqWUNlQ0FCSUNRZ0FTZ0NiR28yQW53Z0FVSGdBR29nQVVId0FHb2dFU0FORUNBZ0FTZ0NZQ0VISUFFb0FtUWhDQ0FCS0FKb0lSa2dBU2dDYkNFS0lBRWdDellDWkNBQklBazJBbUFnQVNBU05nSm9JQUVnRGpZQ2JDQUJJQVkyQW5RZ0FTQUZOZ0p3SUFFZ0JEWUNlQ0FCSUFNMkFud2dBVUhRQUdvZ0FVSGdBR29nQVVId0FHb2dHVUdrak9TMGZXb2dDa0daME11TWZXb1FIaUFCS0FKY0lSSWdBU2dDV0NFTUlBRW9BbEFoRUNBQktBSlVJUUlnQVNBR05nSmtJQUVnQlRZQ1lDQUJJQVEyQW1nZ0FTQUROZ0pzSUFFZ0FqWUNkQ0FCSUJBMkFuQWdBU0FNTmdKNElBRWdFallDZkNBQlFkQUFhaUFCUWVBQWFpQUJRZkFBYWlBSFFmREFxb01CYWlBSVFZWHJ1S0IvYWhBZUlBRW9BbHdoQXlBQktBSllJUVFnQVNnQ1VDRUZJQUVvQWxRaEJpQUJJQlkyQW5RZ0FTQVBOZ0p3SUFFZ0Z6WUNlQ0FCSUJVMkFud2dBVUhnQUdvZ0FVSHdBR29nQVNnQ1RCQWZJQUVnQ2lBQktBSmdhallDY0NBQklCRWdBU2dDWkdvMkFuUWdBU0FOSUFFb0FtaHFOZ0o0SUFFZ0V5QUJLQUpzYWpZQ2ZDQUJRZUFBYWlBQlFmQUFhaUFISUFnUUlDQUJLQUpnSVE0Z0FTZ0NaQ0VQSUFFb0FtZ2hGeUFCS0FKc0lSWWdBU0FDTmdKa0lBRWdFRFlDWUNBQklBdzJBbWdnQVNBU05nSnNJQUVnQmpZQ2RDQUJJQVUyQW5BZ0FTQUVOZ0o0SUFFZ0F6WUNmQ0FCUWRBQWFpQUJRZUFBYWlBQlFmQUFhaUFYUVlqWTNmRUJhaUFXUVphQ2s4MEJhaEFlSUFFb0Fsd2hEQ0FCS0FKWUlSQWdBU2dDVUNFQ0lBRW9BbFFoQ1NBQklBWTJBbVFnQVNBRk5nSmdJQUVnQkRZQ2FDQUJJQU0yQW13Z0FTQUpOZ0owSUFFZ0FqWUNjQ0FCSUJBMkFuZ2dBU0FNTmdKOElBRkIwQUJxSUFGQjRBQnFJQUZCOEFCcUlBNUJ0Zm5DcFFOcUlBOUJ6TzZodWdKcUVCNGdBU2dDWENFRElBRW9BbGdoQkNBQktBSlFJUVVnQVNnQ1ZDRUdJQ01nQVNrRFNEY0RBQ0FCSUFFcEEwQTNBM0FnQVVIZ0FHb2dBVUh3QUdvZ0dCQWZJQUVnRmlBQktBSmdhallDY0NBQklBY2dBU2dDWkdvMkFuUWdBU0FJSUFFb0FtaHFOZ0o0SUFFZ0dTQUJLQUpzYWpZQ2ZDQUJRZUFBYWlBQlFmQUFhaUFPSUE4UUlDQUJLQUpnSVJVZ0FTZ0NaQ0VTSUFFb0FtZ2hDeUFCS0FKc0lSUWdBU0FKTmdKa0lBRWdBallDWUNBQklCQTJBbWdnQVNBTU5nSnNJQUVnQmpZQ2RDQUJJQVUyQW5BZ0FTQUVOZ0o0SUFFZ0F6WUNmQ0FCUWRBQWFpQUJRZUFBYWlBQlFmQUFhaUFMUWNyVTR2WUVhaUFVUWJPWjhNZ0RhaEFlSUFFb0Fsd2hEQ0FCS0FKWUlSQWdBU2dDVUNFQ0lBRW9BbFFoQ1NBQklBWTJBbVFnQVNBRk5nSmdJQUVnQkRZQ2FDQUJJQU0yQW13Z0FTQUpOZ0owSUFFZ0FqWUNjQ0FCSUJBMkFuZ2dBU0FNTmdKOElBRkIwQUJxSUFGQjRBQnFJQUZCOEFCcUlCVkI4OSs1d1FacUlCSkJ6NVR6M0FWcUVCNGdBU2dDWENFRElBRW9BbGdoQkNBQktBSlFJUVVnQVNnQ1ZDRUdJQUVnRFRZQ2RDQUJJQkUyQW5BZ0FTQVROZ0o0SUFFZ0dEWUNmQ0FCUWVBQWFpQUJRZkFBYWlBS0VCOGdBU0FVSUFFb0FtQnFOZ0p3SUFFZ0RpQUJLQUprYWpZQ2RDQUJJQThnQVNnQ2FHbzJBbmdnQVNBWElBRW9BbXhxTmdKOElBRkJRR3NnQVVId0FHb2dGU0FTRUNBZ0FTQUpOZ0prSUFFZ0FqWUNZQ0FCSUJBMkFtZ2dBU0FNTmdKc0lBRWdCallDZENBQklBVTJBbkFnQVNBRU5nSjRJQUVnQXpZQ2ZDQUJLQUpBSVJFZ0FTZ0NSQ0VOSUFGQjBBQnFJQUZCNEFCcUlBRkI4QUJxSUFFb0FraEI3OGFWeFFkcUlBRW9Ba3dpQ1VIdWhiNmtCMm9RSGlBQktBSmNJUmdnQVNnQ1dDRVRJQUVvQWxBaERpQUJLQUpVSVE4Z0FTQUdOZ0prSUFFZ0JUWUNZQ0FCSUFRMkFtZ2dBU0FETmdKc0lBRWdEellDZENBQklBNDJBbkFnQVNBVE5nSjRJQUVnR0RZQ2ZDQUJRZEFBYWlBQlFlQUFhaUFCUWZBQWFpQVJRWWlFbk9aNGFpQU5RWlR3b2FaNGFoQWVJQUVvQWx3aERDQUJLQUpZSVJBZ0FTZ0NVQ0VYSUFFb0FsUWhBaUFCSUFnMkFuUWdBU0FITmdKd0lBRWdHVFlDZUNBQklBbzJBbndnQVVIZ0FHb2dBVUh3QUdvZ0ZoQWZJQUVnQ1NBQktBSmdhallDY0NBQklCVWdBU2dDWkdvMkFuUWdBU0FTSUFFb0FtaHFOZ0o0SUFFZ0N5QUJLQUpzYWpZQ2ZDQUJRZUFBYWlBQlFmQUFhaUFSSUEwUUlDQUJLQUpnSVEwZ0FTZ0NaQ0VaSUFFb0FtZ2hCeUFCS0FKc0lRZ2dBU0FQTmdKa0lBRWdEallDWUNBQklCTTJBbWdnQVNBWU5nSnNJQUVnQWpZQ2RDQUJJQmMyQW5BZ0FTQVFOZ0o0SUFFZ0REWUNmQ0FCUWRBQWFpQUJRZUFBYWlBQlFmQUFhaUFIUWV2WndhSjZhaUFJUWZyLys0VjVhaEFlSUFFb0Fsd2hCeUFCS0FKWUlRZ2dBU2dDVUNFS0lBRW9BbFFoRVNBQklBSTJBbVFnQVNBWE5nSmdJQUVnRURZQ2FDQUJJQXcyQW13Z0FTQVJOZ0owSUFFZ0NqWUNjQ0FCSUFnMkFuZ2dBU0FITmdKOElBRkIwQUJxSUFGQjRBQnFJQUZCOEFCcUlBMUI4dkhGczN4cUlCbEI5OGZtOTN0cUVCNGdBU2dDWENFTklBRW9BbGdoR0NBQktBSlFJUk1nQUNBZUlBRW9BbFJxTmdJRUlBQWdFeUFkYWpZQ0FDQUFJQW9nSVdvMkFnZ2dBQ0FSSUNKcU5nSU1JQUFnR0NBY2FqWUNFQ0FBSUEwZ0cybzJBaFFnQUNBSUlDQnFOZ0lZSUFBZ0J5QWZhallDSENBQlFZQUJhaVFBQzMwQkFYOGpBRUV3YXlJQ0pBQWdBaUFCTmdJRUlBSWdBRFlDQUNBQ1FTeHFRUUUyQWdBZ0FrRVVha0VDTmdJQUlBSkJIR3BCQWpZQ0FDQUNRUUUyQWlRZ0FrR01GVFlDQ0NBQ1FRSTJBZ3dnQWtITURUWUNFQ0FDSUFJMkFpQWdBaUFDUVFScU5nSW9JQUlnQWtFZ2FqWUNHQ0FDUVFocVFad1ZFQ2dBQzN3QkFYOGpBRUV3YXlJREpBQWdBeUFDTmdJRUlBTWdBVFlDQUNBRFFTeHFRUUUyQWdBZ0EwRVVha0VDTmdJQUlBTkJIR3BCQWpZQ0FDQURRUUUyQWlRZ0EwSGNGRFlDQ0NBRFFRSTJBZ3dnQTBITURUWUNFQ0FESUFOQkJHbzJBaUFnQXlBRE5nSW9JQU1nQTBFZ2FqWUNHQ0FEUVFocUlBQVFLQUFMMWdFQkJuOGdBQ0FCS0FJQUlnZ2dBaWdDQkNJSGN5QUNLQUlBSWdWeElBZ2dCM0Z6SUFWQkhuY2dCVUVUZDNNZ0JVRUtkM05xSUFJb0FnZ2lCa0VhZHlBR1FSVjNjeUFHUVFkM2N5QUVhaUFCS0FJTWFpQUJLQUlJSWdRZ0FpZ0NEQ0lKY3lBR2NTQUVjMm9pQ21vaUFqWUNCQ0FBSUFvZ0FTZ0NCR29pQVRZQ0RDQUFJQUpCSG5jZ0FrRVRkM01nQWtFS2QzTWdBaUFISUFWemNTQUhJQVZ4YzJvZ0JDQURhaUFKSUFFZ0NTQUdjM0Z6YWlBQlFScDNJQUZCRlhkeklBRkJCM2R6YWlJRmFqWUNBQ0FBSUFVZ0NHbzJBZ2dMZUFBZ0FDQUNRUmwzSUFKQkEzWnpJQUpCRG5keklBRW9BZ0FpQW1vMkFnQWdBQ0FDUVJsM0lBSkJBM1p6SUFKQkRuZHpJQUVvQWdRaUFtbzJBZ1FnQUNBQ1FSbDNJQUpCQTNaeklBSkJEbmR6SUFFb0FnZ2lBbW8yQWdnZ0FDQUNRUmwzSUFKQkEzWnpJQUpCRG5keklBRW9BZ3hxTmdJTUMzWUFJQUFnQWtFTmR5QUNRUXAyY3lBQ1FROTNjeUFCS0FJSWFpSUNOZ0lJSUFBZ0EwRU5keUFEUVFwMmN5QURRUTkzY3lBQktBSU1haUlETmdJTUlBQWdBa0VOZHlBQ1FRcDJjeUFDUVE5M2N5QUJLQUlBYWpZQ0FDQUFJQU5CRFhjZ0EwRUtkbk1nQTBFUGQzTWdBU2dDQkdvMkFnUUxVQUFDUUFKQVFlZ1BLQUlBUVFGR0JFQkI3QTlCN0E4b0FnQkJBV29pQURZQ0FDQUFRUU5KRFFFTUFndEI2QTlDZ1lDQWdCQTNBd0FMUWZRUEtBSUFJZ0JCZjB3TkFFSDBEeUFBTmdJQUN3QUxQd0VDZnlNQVFSQnJJZ0VrQUFKL0lBQW9BZ2dpQWlBQ0RRQWFRYlFVRUFjQUN4b2dBU0FBS1FJTU53TUFJQUVnQUVFVWFpa0NBRGNEQ0NBQkVDRUFDN01DQVFWL0lBQW9BaGdoQXdKQUFrQUNRQ0FBS0FJTUlnSWdBRWNFUUNBQUtBSUlJZ0VnQWpZQ0RDQUNJQUUyQWdnZ0F3MEJEQUlMSUFCQkZHb2lBU0FBUVJCcUlBRW9BZ0FiSWdRb0FnQWlBUVJBQWtBRFFDQUVJUVVnQVNJQ1FSUnFJZ1FvQWdBaUFRUkFJQUVOQVF3Q0N5QUNRUkJxSVFRZ0FpZ0NFQ0lCRFFBTEN5QUZRUUEyQWdBZ0F3MEJEQUlMUVFBaEFpQURSUTBCQ3dKQUlBQW9BaHdpQkVFQ2RFR01FbW9pQVNnQ0FDQUFSd1JBSUFOQkVHb2dBMEVVYWlBREtBSVFJQUJHR3lBQ05nSUFJQUlOQVF3Q0N5QUJJQUkyQWdBZ0FrVU5BZ3NnQWlBRE5nSVlJQUFvQWhBaUFRUkFJQUlnQVRZQ0VDQUJJQUkyQWhnTElBQkJGR29vQWdBaUFVVU5BQ0FDUVJScUlBRTJBZ0FnQVNBQ05nSVlDdzhMUVlBUVFZQVFLQUlBUVg0Z0JIZHhOZ0lBQzhVQ0FRUi9JQUFDZjBFQUlBRkJDSFlpQTBVTkFCcEJIeUlDSUFGQi8vLy9CMHNOQUJvZ0FVRW1JQU5uSWdKclFSOXhka0VCY1VFZklBSnJRUUYwY2dzaUFqWUNIQ0FBUWdBM0FoQWdBa0VDZEVHTUVtb2hBd0pBQWtBQ1FFR0FFQ2dDQUNJRVFRRWdBa0VmY1hRaUJYRUVRQ0FES0FJQUlnUW9BZ1JCZUhFZ0FVY05BU0FFSVFJTUFnc2dBeUFBTmdJQVFZQVFJQVFnQlhJMkFnQWdBQ0FETmdJWUlBQWdBRFlDQ0NBQUlBQTJBZ3dQQ3lBQlFRQkJHU0FDUVFGMmEwRWZjU0FDUVI5R0czUWhBd05BSUFRZ0EwRWRka0VFY1dwQkVHb2lCU2dDQUNJQ1JRMENJQU5CQVhRaEF5QUNJUVFnQWlnQ0JFRjRjU0FCUncwQUN3c2dBaWdDQ0NJRElBQTJBZ3dnQWlBQU5nSUlJQUFnQWpZQ0RDQUFJQU0yQWdnZ0FFRUFOZ0lZRHdzZ0JTQUFOZ0lBSUFBZ0JEWUNHQ0FBSUFBMkFnd2dBQ0FBTmdJSUMvVUVBUVIvSUFBZ0FXb2hBZ0pBQWtBQ1FBSkFBa0FDUUFKQUFrQWdBQ2dDQkNJRFFRRnhEUUFnQTBFRGNVVU5BU0FBS0FJQUlnTWdBV29oQVFKQUFrQkJsQk1vQWdBZ0FDQURheUlBUndSQUlBTkIvd0ZMRFFFZ0FDZ0NEQ0lFSUFBb0FnZ2lCVVlOQWlBRklBUTJBZ3dnQkNBRk5nSUlEQU1MSUFJb0FnUWlBMEVEY1VFRFJ3MENRWXdUSUFFMkFnQWdBa0VFYWlBRFFYNXhOZ0lBSUFBZ0FVRUJjallDQkNBQ0lBRTJBZ0FQQ3lBQUVDTU1BUXRCL0E5Qi9BOG9BZ0JCZmlBRFFRTjJkM0UyQWdBTEFrQWdBaWdDQkNJRFFRSnhSUVJBUVpnVEtBSUFJQUpHRFFGQmxCTW9BZ0FnQWtZTkF5QURRWGh4SWdRZ0FXb2hBU0FFUWY4QlN3MEVJQUlvQWd3aUJDQUNLQUlJSWdKR0RRWWdBaUFFTmdJTUlBUWdBallDQ0F3SEN5QUNRUVJxSUFOQmZuRTJBZ0FnQUNBQlFRRnlOZ0lFSUFBZ0FXb2dBVFlDQUF3SEMwR1lFeUFBTmdJQVFaQVRRWkFUS0FJQUlBRnFJZ0UyQWdBZ0FDQUJRUUZ5TmdJRUlBQkJsQk1vQWdCR0RRTUxEd3RCbEJNZ0FEWUNBRUdNRTBHTUV5Z0NBQ0FCYWlJQk5nSUFJQUFnQVVFQmNqWUNCQ0FBSUFGcUlBRTJBZ0FQQ3lBQ0VDTU1BZ3RCakJOQkFEWUNBRUdVRTBFQU5nSUFEd3RCL0E5Qi9BOG9BZ0JCZmlBRFFRTjJkM0UyQWdBTElBQWdBVUVCY2pZQ0JDQUFJQUZxSUFFMkFnQWdBRUdVRXlnQ0FFY05BRUdNRXlBQk5nSUFEd3NDZndKQUlBRkIvd0ZOQkVBZ0FVRURkaUlDUVFOMFFZUVFhaUVCUWZ3UEtBSUFJZ05CQVNBQ1FSOXhkQ0lDY1VVTkFTQUJLQUlJREFJTElBQWdBUkFrRHd0Qi9BOGdBeUFDY2pZQ0FDQUJDeUVDSUFGQkNHb2dBRFlDQUNBQ0lBQTJBZ3dnQUNBQk5nSU1JQUFnQWpZQ0NBdlNBZ0VGZnlNQVFSQnJJZ01rQUFKL0lBQW9BZ0FvQWdBaUFrR0FnTVFBUndSQUlBRkJIR29vQWdBaEJDQUJLQUlZSVFVZ0EwRUFOZ0lNQW44Z0FrSC9BRTBFUUNBRElBSTZBQXhCQVF3QkN5QUNRZjhQVFFSQUlBTWdBa0UvY1VHQUFYSTZBQTBnQXlBQ1FRWjJRUjl4UWNBQmNqb0FERUVDREFFTElBSkIvLzhEVFFSQUlBTWdBa0UvY1VHQUFYSTZBQTRnQXlBQ1FRWjJRVDl4UVlBQmNqb0FEU0FESUFKQkRIWkJEM0ZCNEFGeU9nQU1RUU1NQVFzZ0F5QUNRUkoyUWZBQmNqb0FEQ0FESUFKQlAzRkJnQUZ5T2dBUElBTWdBa0VNZGtFL2NVR0FBWEk2QUEwZ0F5QUNRUVoyUVQ5eFFZQUJjam9BRGtFRUN5RUdRUUVpQWlBRklBTkJER29nQmlBRUtBSU1FUVVBRFFFYUN5QUFLQUlFTFFBQUJFQWdBU2dDR0NBQUtBSUlJZ0FvQWdBZ0FDZ0NCQ0FCUVJ4cUtBSUFLQUlNRVFVQURBRUxRUUFMSVFJZ0EwRVFhaVFBSUFJTHFnZ0JDWDhqQUVIUUFHc2lBaVFBUVNjaEF3SkFJQUFvQWdBaUFFR1F6Z0JQQkVBRFFDQUNRUWxxSUFOcUlnVkJmR29nQUNBQVFaRE9BRzRpQkVId3NYOXNhaUlIUWVRQWJpSUdRUUYwUWJvTGFpOEFBRHNBQUNBRlFYNXFJQWNnQmtHY2YyeHFRUUYwUWJvTGFpOEFBRHNBQUNBRFFYeHFJUU1nQUVIL3dkY3ZTeUVGSUFRaEFDQUZEUUFMREFFTElBQWhCQXNDUUNBRVFlUUFUZ1JBSUFKQkNXb2dBMEYrYWlJRGFpQUVJQVJCNUFCdUlnQkJuSDlzYWtFQmRFRzZDMm92QUFBN0FBQU1BUXNnQkNFQUN3SkFJQUJCQ1V3RVFDQUNRUWxxSUFOQmYyb2lBMm9pQ0NBQVFUQnFPZ0FBREFFTElBSkJDV29nQTBGK2FpSURhaUlJSUFCQkFYUkJ1Z3RxTHdBQU93QUFDeUFDUVFBMkFqUWdBa0dFRFRZQ01DQUNRWUNBeEFBMkFqaEJKeUFEYXlJR0lRTWdBU2dDQUNJQVFRRnhCRUFnQWtFck5nSTRJQVpCQVdvaEF3c2dBaUFBUVFKMlFRRnhPZ0EvSUFFb0FnZ2hCQ0FDSUFKQlAybzJBa1FnQWlBQ1FUaHFOZ0pBSUFJZ0FrRXdhallDU0FKL0FrQUNRQUovQWtBQ1FBSkFBa0FDUUFKQUFrQWdCRUVCUmdSQUlBRkJER29vQWdBaUJDQURUUTBCSUFCQkNIRU5BaUFFSUFOcklRVkJBU0FCTFFBd0lnQWdBRUVEUmh0QkEzRWlBRVVOQXlBQVFRSkdEUVFNQlFzZ0FrRkFheUFCRUNZTkNDQUJLQUlZSUFnZ0JpQUJRUnhxS0FJQUtBSU1FUVVBREFvTElBSkJRR3NnQVJBbURRY2dBU2dDR0NBSUlBWWdBVUVjYWlnQ0FDZ0NEQkVGQUF3SkN5QUJRUUU2QURBZ0FVRXdOZ0lFSUFKQlFHc2dBUkFtRFFZZ0FrRXdOZ0pNSUFRZ0Eyc2hBeUFCS0FJWUlRUkJmeUVBSUFGQkhHb29BZ0FpQjBFTWFpRUZBMEFnQUVFQmFpSUFJQU5QRFFRZ0JDQUNRY3dBYWtFQklBVW9BZ0FSQlFCRkRRQUxEQVlMSUFVaENVRUFJUVVNQVFzZ0JVRUJha0VCZGlFSklBVkJBWFloQlFzZ0FrRUFOZ0pNSUFFb0FnUWlBRUgvQUUwRVFDQUNJQUE2QUV4QkFRd0RDeUFBUWY4UFN3MEJJQUlnQUVFL2NVR0FBWEk2QUUwZ0FpQUFRUVoyUVI5eFFjQUJjam9BVEVFQ0RBSUxJQVFnQ0NBR0lBZEJER29vQWdBUkJRQU5BZ3dEQ3lBQVFmLy9BMDBFUUNBQ0lBQkJQM0ZCZ0FGeU9nQk9JQUlnQUVFR2RrRS9jVUdBQVhJNkFFMGdBaUFBUVF4MlFROXhRZUFCY2pvQVRFRUREQUVMSUFJZ0FFRVNka0h3QVhJNkFFd2dBaUFBUVQ5eFFZQUJjam9BVHlBQ0lBQkJESFpCUDNGQmdBRnlPZ0JOSUFJZ0FFRUdka0UvY1VHQUFYSTZBRTVCQkFzaEJDQUJLQUlZSVFOQmZ5RUFJQUZCSEdvb0FnQWlDa0VNYWlFSEFrQURRQ0FBUVFGcUlnQWdCVThOQVNBRElBSkJ6QUJxSUFRZ0J5Z0NBQkVGQUVVTkFBc01BUXNnQWtGQWF5QUJFQ1lOQUNBRElBZ2dCaUFLUVF4cUtBSUFJZ1VSQlFBTkFFRi9JUUFEUUNBQVFRRnFJZ0FnQ1U4TkFpQURJQUpCekFCcUlBUWdCUkVGQUVVTkFBc0xRUUVNQVF0QkFBc2hBQ0FDUWRBQWFpUUFJQUFMUmdJQmZ3RitJd0JCSUdzaUFpUUFJQUVwQWdBaEF5QUNRUlJxSUFFcEFnZzNBZ0FnQWtITUZEWUNCQ0FDUVlRTk5nSUFJQUlnQURZQ0NDQUNJQU0zQWd3Z0FoQWlBQXNEQUFFTERRQkNpTEtVazVpQmxZei9BQXN6QVFGL0lBSUVRQ0FBSVFNRFFDQURJQUV0QUFBNkFBQWdBVUVCYWlFQklBTkJBV29oQXlBQ1FYOXFJZ0lOQUFzTElBQUxad0VCZndKQUlBRWdBRWtFUUNBQ1JRMEJBMEFnQUNBQ2FrRi9haUFCSUFKcVFYOXFMUUFBT2dBQUlBSkJmMm9pQWcwQUN3d0JDeUFDUlEwQUlBQWhBd05BSUFNZ0FTMEFBRG9BQUNBQlFRRnFJUUVnQTBFQmFpRURJQUpCZjJvaUFnMEFDd3NnQUFzcEFRRi9JQUlFUUNBQUlRTURRQ0FESUFFNkFBQWdBMEVCYWlFRElBSkJmMm9pQWcwQUN3c2dBQXNMb1FrREFFR0FDQXUwQVdsdWRtRnNhV1FnYldGc2JHOWpJSEpsY1hWbGMzUlVjbWxsWkNCMGJ5QnphSEpwYm1zZ2RHOGdZU0JzWVhKblpYSWdZMkZ3WVdOcGRIbGhjM05sY25ScGIyNGdabUZwYkdWa09pQTRJRDA5SUdSemRDNXNaVzRvS1M5eWIyOTBMeTVqWVhKbmJ5OXlaV2RwYzNSeWVTOXpjbU12WjJsMGFIVmlMbU52YlMweFpXTmpOakk1T1dSaU9XVmpPREl6TDJKNWRHVXRkRzl2YkhNdE1DNHlMakF2YzNKakwzZHlhWFJsWDNOcGJtZHNaUzV5Y3dCQndBa0wyZ1V2Y205dmRDOHVZMkZ5WjI4dmNtVm5hWE4wY25rdmMzSmpMMmRwZEdoMVlpNWpiMjB0TVdWall6WXlPVGxrWWpsbFl6Z3lNeTlpYkc5amF5MWlkV1ptWlhJdE1DNHpMak12YzNKakwyeHBZaTV5YzJSbGMzUnBibUYwYVc5dUlHRnVaQ0J6YjNWeVkyVWdjMnhwWTJWeklHaGhkbVVnWkdsbVptVnlaVzUwSUd4bGJtZDBhSE1BWitZSmFvV3VaN3R5ODI0OE92VlBwWDlTRGxHTWFBV2JxOW1ESHhuTjRGc0FBQUFBQUdOaGNHRmphWFI1SUc5MlpYSm1iRzkzWTJGc2JHVmtJR0JQY0hScGIyNDZPblZ1ZDNKaGNDZ3BZQ0J2YmlCaElHQk9iMjVsWUNCMllXeDFaV3hwWW1OdmNtVXZiM0IwYVc5dUxuSnpNREF3TVRBeU1ETXdOREExTURZd056QTRNRGt4TURFeE1USXhNekUwTVRVeE5qRTNNVGd4T1RJd01qRXlNakl6TWpReU5USTJNamN5T0RJNU16QXpNVE15TXpNek5ETTFNell6TnpNNE16azBNRFF4TkRJME16UTBORFUwTmpRM05EZzBPVFV3TlRFMU1qVXpOVFExTlRVMk5UYzFPRFU1TmpBMk1UWXlOak0yTkRZMU5qWTJOelk0TmprM01EY3hOekkzTXpjME56VTNOamMzTnpnM09UZ3dPREU0TWpnek9EUTROVGcyT0RjNE9EZzVPVEE1TVRreU9UTTVORGsxT1RZNU56azRPVGtBQUFCcGJtUmxlQ0J2ZFhRZ2IyWWdZbTkxYm1Sek9pQjBhR1VnYkdWdUlHbHpJQ0JpZFhRZ2RHaGxJR2x1WkdWNElHbHpJR3hwWW1OdmNtVXZjMnhwWTJVdmJXOWtMbkp6QUFFQUFBQUFBQUFBSUFBQUFBQUFBQUFEQUFBQUFBQUFBQU1BQUFBQUFBQUFBd0FBQUFFQUFBQUJBQUFBSUFBQUFBQUFBQUFEQUFBQUFBQUFBQU1BQUFBQUFBQUFBd0FBQUdsdVpHVjRJQ0J2ZFhRZ2IyWWdjbUZ1WjJVZ1ptOXlJSE5zYVdObElHOW1JR3hsYm1kMGFDQnpiR2xqWlNCcGJtUmxlQ0J6ZEdGeWRITWdZWFFnSUdKMWRDQmxibVJ6SUdGMElHbHVkR1Z5Ym1Gc0lHVnljbTl5T2lCbGJuUmxjbVZrSUhWdWNtVmhZMmhoWW14bElHTnZaR1ZzYVdKaGJHeHZZeTl5WVhkZmRtVmpMbkp6QUVIRUV3djlBUllFQUFBa0FBQUFod2NBQUJNQUFBQklBZ0FBQ1FBQUFNQUVBQUJUQUFBQVN3QUFBQkVBQUFBNkJBQUFJQUFBQUZvRUFBQmFBQUFBSHdBQUFBVUFBQUFUQlFBQU5BQUFBTGNHQUFBVUFBQUFiUVlBQUFrQUFBQnRCUUFBRVFBQUFJY0hBQUFUQUFBQThnSUFBQVVBQUFCK0JRQUFLd0FBQUtrRkFBQVJBQUFBV1FFQUFCVUFBQUFDQUFBQUFBQUFBQUVBQUFBREFBQUFoUVlBQUNBQUFBQ2xCZ0FBRWdBQUFCUUhBQUFHQUFBQUdnY0FBQ0lBQUFDM0JnQUFGQUFBQUswSEFBQUZBQUFBUEFjQUFCWUFBQUJTQndBQURRQUFBTGNHQUFBVUFBQUFzd2NBQUFVQUFBQmZCd0FBS0FBQUFJY0hBQUFUQUFBQTlRRUFBQjRBREFkc2FXNXJhVzVuQXdMRURRPT0nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhMjU2LmJhc2U2NC5qcy5tYXAiLCJpbXBvcnQgeyBpbnN0YW50aWF0ZVJ1c3RXYXNtLCByaXBlbWQxNjBCYXNlNjRCeXRlcywgfSBmcm9tICcuLi9iaW4vYmluJztcbmltcG9ydCB7IGJhc2U2NFRvQmluIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG4vKipcbiAqIFRoZSBtb3N0IHBlcmZvcm1hbnQgd2F5IHRvIGluc3RhbnRpYXRlIHJpcGVtZDE2MCBmdW5jdGlvbmFsaXR5LiBUbyBhdm9pZFxuICogdXNpbmcgTm9kZS5qcyBvciBET00tc3BlY2lmaWMgQVBJcywgeW91IGNhbiB1c2UgYGluc3RhbnRpYXRlUmlwZW1kMTYwYC5cbiAqXG4gKiBAcGFyYW0gd2ViYXNzZW1ibHlCeXRlcyAtIEEgYnVmZmVyIGNvbnRhaW5pbmcgdGhlIHJpcGVtZDE2MCBiaW5hcnkuXG4gKi9cbmV4cG9ydCBjb25zdCBpbnN0YW50aWF0ZVJpcGVtZDE2MEJ5dGVzID0gYXN5bmMgKHdlYmFzc2VtYmx5Qnl0ZXMpID0+IHtcbiAgICBjb25zdCB3YXNtID0gYXdhaXQgaW5zdGFudGlhdGVSdXN0V2FzbSh3ZWJhc3NlbWJseUJ5dGVzLCAnLi9yaXBlbWQxNjAnLCAncmlwZW1kMTYwJywgJ3JpcGVtZDE2MF9pbml0JywgJ3JpcGVtZDE2MF91cGRhdGUnLCAncmlwZW1kMTYwX2ZpbmFsJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmluYWw6IHdhc20uZmluYWwsXG4gICAgICAgIGhhc2g6IHdhc20uaGFzaCxcbiAgICAgICAgaW5pdDogd2FzbS5pbml0LFxuICAgICAgICB1cGRhdGU6IHdhc20udXBkYXRlLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IGdldEVtYmVkZGVkUmlwZW1kMTYwQmluYXJ5ID0gKCkgPT4gYmFzZTY0VG9CaW4ocmlwZW1kMTYwQmFzZTY0Qnl0ZXMpLmJ1ZmZlcjtcbmNvbnN0IGNhY2hlZFJpcGVtZDE2MCA9IHt9O1xuLyoqXG4gKiBBbiB1bHRpbWF0ZWx5LXBvcnRhYmxlIChidXQgc2xvd2VyKSB2ZXJzaW9uIG9mIGBpbnN0YW50aWF0ZVJpcGVtZDE2MEJ5dGVzYFxuICogd2hpY2ggZG9lcyBub3QgcmVxdWlyZSB0aGUgY29uc3VtZXIgdG8gcHJvdmlkZSB0aGUgcmlwZW1kMTYwIGJpbmFyeSBidWZmZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBpbnN0YW50aWF0ZVJpcGVtZDE2MCA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoY2FjaGVkUmlwZW1kMTYwLmNhY2hlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZFJpcGVtZDE2MC5jYWNoZTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gaW5zdGFudGlhdGVSaXBlbWQxNjBCeXRlcyhnZXRFbWJlZGRlZFJpcGVtZDE2MEJpbmFyeSgpKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9pbW11dGFibGUtZGF0YSwgZnVuY3Rpb25hbC9uby1leHByZXNzaW9uLXN0YXRlbWVudFxuICAgIGNhY2hlZFJpcGVtZDE2MC5jYWNoZSA9IHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJpcGVtZDE2MC5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBmdW5jdGlvbmFsL25vLWNvbmRpdGlvbmFsLXN0YXRlbWVudCwgZnVuY3Rpb25hbC9uby1leHByZXNzaW9uLXN0YXRlbWVudCwgZnVuY3Rpb25hbC9uby10aHJvdy1zdGF0ZW1lbnQgKi9cbmltcG9ydCB7IENvbXByZXNzaW9uRmxhZywgQ29udGV4dEZsYWcsIGluc3RhbnRpYXRlU2VjcDI1NmsxV2FzbSwgaW5zdGFudGlhdGVTZWNwMjU2azFXYXNtQnl0ZXMsIH0gZnJvbSAnLi4vYmluL2Jpbic7XG4vKipcbiAqIEBwYXJhbSBzZWNwMjU2azFXYXNtIC0gYSBTZWNwMjU2azFXYXNtIG9iamVjdFxuICogQHBhcmFtIHJhbmRvbVNlZWQgLSBhIDMyLWJ5dGUgcmFuZG9tIHNlZWQgdXNlZCB0byByYW5kb21pemUgdGhlIGNvbnRleHQgYWZ0ZXJcbiAqIGNyZWF0aW9uXG4gKi9cbmNvbnN0IHdyYXBTZWNwMjU2azFXYXNtID0gKHNlY3AyNTZrMVdhc20sIHJhbmRvbVNlZWQpID0+IHtcbiAgICAvKipcbiAgICAgKiBDdXJyZW50bHksIHRoaXMgd3JhcHBlciBjcmVhdGVzIGEgY29udGV4dCB3aXRoIGJvdGggU0lHTiBhbmQgVkVSSUZZXG4gICAgICogY2FwYWJpbGl0aWVzLiBGb3IgYmV0dGVyIGluaXRpYWxpemF0aW9uIHBlcmZvcm1hbmNlLCBjb25zdW1lcnMgY291bGRcbiAgICAgKiByZS1pbXBsZW1lbnQgYSB3cmFwcGVyIHdpdGggb25seSB0aGUgY2FwYWJpbGl0aWVzIHRoZXkgcmVxdWlyZS5cbiAgICAgKi9cbiAgICBjb25zdCBjb250ZXh0UHRyID0gc2VjcDI1NmsxV2FzbS5jb250ZXh0Q3JlYXRlKENvbnRleHRGbGFnLkJPVEgpO1xuICAgIC8qKlxuICAgICAqIFNpbmNlIGFsbCBvZiB0aGVzZSBtZXRob2RzIGFyZSBzaW5nbGUtdGhyZWFkZWQgYW5kIHN5bmNocm9ub3VzLCB3ZSBjYW5cbiAgICAgKiByZXVzZSBhbGxvY2F0ZWQgV2ViQXNzZW1ibHkgbWVtb3J5IGZvciBlYWNoIG1ldGhvZCB3aXRob3V0IHdvcnJ5aW5nIGFib3V0XG4gICAgICogY2FsbHMgaW50ZXJmZXJpbmcgd2l0aCBlYWNoIG90aGVyLiBMaWtld2lzZSwgdGhlc2Ugc3BhY2VzIG5ldmVyIG5lZWQgdG8gYmVcbiAgICAgKiBgZnJlZWBkLCBzaW5jZSB3ZSB3aWxsIGNvbnRpbnVlIHVzaW5nIHRoZW0gdW50aWwgdGhpcyBlbnRpcmUgb2JqZWN0IChhbmRcbiAgICAgKiB3aXRoIGl0LCB0aGUgZW50aXJlIFdlYkFzc2VtYmx5IGluc3RhbmNlKSBpcyBnYXJiYWdlIGNvbGxlY3RlZC5cbiAgICAgKlxuICAgICAqIElmIG1hbGljaW91cyBqYXZhc2NyaXB0IGdhaW5lZCBhY2Nlc3MgdG8gdGhpcyBvYmplY3QsIGl0IHNob3VsZCBiZVxuICAgICAqIGNvbnNpZGVyZWQgYSBjcml0aWNhbCB2dWxuZXJhYmlsaXR5IGluIHRoZSBjb25zdW1lci4gSG93ZXZlciwgYXMgYSBiZXN0XG4gICAgICogcHJhY3RpY2UsIHdlIHplcm8gb3V0IHByaXZhdGUga2V5cyBiZWxvdyB3aGVuIHdlJ3JlIGZpbmlzaGVkIHdpdGggdGhlbS5cbiAgICAgKi9cbiAgICBjb25zdCBzaWdTY3JhdGNoID0gc2VjcDI1NmsxV2FzbS5tYWxsb2MoNzIgLyogbWF4RUNEU0FTaWcgKi8pO1xuICAgIGNvbnN0IHB1YmxpY0tleVNjcmF0Y2ggPSBzZWNwMjU2azFXYXNtLm1hbGxvYyg2NSAvKiBtYXhQdWJsaWNLZXkgKi8pO1xuICAgIGNvbnN0IG1lc3NhZ2VIYXNoU2NyYXRjaCA9IHNlY3AyNTZrMVdhc20ubWFsbG9jKDMyIC8qIG1lc3NhZ2VIYXNoICovKTtcbiAgICBjb25zdCBleHRyYUVudHJvcHlTY3JhdGNoID0gc2VjcDI1NmsxV2FzbS5tYWxsb2MoMzIgLyogZXh0cmFFbnRyb3B5ICovKTtcbiAgICBjb25zdCBpbnRlcm5hbFB1YmxpY0tleVB0ciA9IHNlY3AyNTZrMVdhc20ubWFsbG9jKDY0IC8qIGludGVybmFsUHVibGljS2V5ICovKTtcbiAgICBjb25zdCBlY2RoU2hhcmVkU2VjcmV0UHRyID0gc2VjcDI1NmsxV2FzbS5tYWxsb2MoMzIgLyogZWNkaFNoYXJlZFNlY3JldCAqLyk7XG4gICAgY29uc3QgaW50ZXJuYWxTaWdQdHIgPSBzZWNwMjU2azFXYXNtLm1hbGxvYyg2NCAvKiBpbnRlcm5hbFNpZyAqLyk7XG4gICAgY29uc3Qgc2Nobm9yclNpZ1B0ciA9IHNlY3AyNTZrMVdhc20ubWFsbG9jKDY0IC8qIHNjaG5vcnJTaWcgKi8pO1xuICAgIGNvbnN0IHByaXZhdGVLZXlQdHIgPSBzZWNwMjU2azFXYXNtLm1hbGxvYygzMiAvKiBwcml2YXRlS2V5ICovKTtcbiAgICBjb25zdCBpbnRlcm5hbFJTaWdQdHIgPSBzZWNwMjU2azFXYXNtLm1hbGxvYyg2NSAvKiByZWNvdmVyYWJsZVNpZyAqLyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1tYWdpYy1udW1iZXJzXG4gICAgY29uc3QgcmVjb3ZlcnlOdW1QdHIgPSBzZWNwMjU2azFXYXNtLm1hbGxvYyg0KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1hZ2ljLW51bWJlcnNcbiAgICBjb25zdCByZWNvdmVyeU51bVB0clZpZXczMiA9IHJlY292ZXJ5TnVtUHRyID4+IDI7XG4gICAgY29uc3QgZ2V0UmVjb3ZlcnlOdW1QdHIgPSAoKSA9PiBzZWNwMjU2azFXYXNtLmhlYXBVMzJbcmVjb3ZlcnlOdW1QdHJWaWV3MzJdO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWFnaWMtbnVtYmVyc1xuICAgIGNvbnN0IGxlbmd0aFB0ciA9IHNlY3AyNTZrMVdhc20ubWFsbG9jKDQpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWFnaWMtbnVtYmVyc1xuICAgIGNvbnN0IGxlbmd0aFB0clZpZXczMiA9IGxlbmd0aFB0ciA+PiAyO1xuICAgIGNvbnN0IGNsb25lQW5kUGFkID0gKHZhbHVlLCBleHBlY3RlZExlbmd0aCkgPT4ge1xuICAgICAgICBjb25zdCB6ZXJvUGFkZGVkVmFsdWUgPSBuZXcgVWludDhBcnJheShleHBlY3RlZExlbmd0aCk7XG4gICAgICAgIHplcm9QYWRkZWRWYWx1ZS5zZXQodmFsdWUpO1xuICAgICAgICByZXR1cm4gemVyb1BhZGRlZFZhbHVlO1xuICAgIH07XG4gICAgY29uc3QgcGFyc2VQdWJsaWNLZXkgPSAocHVibGljS2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHBhZGRlZFB1YmxpY0tleSA9IGNsb25lQW5kUGFkKHB1YmxpY0tleSwgNjUgLyogbWF4UHVibGljS2V5ICovKTtcbiAgICAgICAgc2VjcDI1NmsxV2FzbS5oZWFwVTguc2V0KHBhZGRlZFB1YmxpY0tleSwgcHVibGljS2V5U2NyYXRjaCk7XG4gICAgICAgIHJldHVybiAoc2VjcDI1NmsxV2FzbS5wdWJrZXlQYXJzZShjb250ZXh0UHRyLCBpbnRlcm5hbFB1YmxpY0tleVB0ciwgcHVibGljS2V5U2NyYXRjaCwgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICBwdWJsaWNLZXkubGVuZ3RoKSA9PT0gMSk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRMZW5ndGhQdHIgPSAodmFsdWUpID0+IHtcbiAgICAgICAgc2VjcDI1NmsxV2FzbS5oZWFwVTMyLnNldChbdmFsdWVdLCBsZW5ndGhQdHJWaWV3MzIpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0TGVuZ3RoUHRyID0gKCkgPT4gc2VjcDI1NmsxV2FzbS5oZWFwVTMyW2xlbmd0aFB0clZpZXczMl07XG4gICAgY29uc3Qgc2VyaWFsaXplUHVibGljS2V5ID0gKGxlbmd0aCwgZmxhZykgPT4ge1xuICAgICAgICBzZXRMZW5ndGhQdHIobGVuZ3RoKTtcbiAgICAgICAgc2VjcDI1NmsxV2FzbS5wdWJrZXlTZXJpYWxpemUoY29udGV4dFB0ciwgcHVibGljS2V5U2NyYXRjaCwgbGVuZ3RoUHRyLCBpbnRlcm5hbFB1YmxpY0tleVB0ciwgZmxhZyk7XG4gICAgICAgIHJldHVybiBzZWNwMjU2azFXYXNtLnJlYWRIZWFwVTgocHVibGljS2V5U2NyYXRjaCwgZ2V0TGVuZ3RoUHRyKCkpLnNsaWNlKCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRTZXJpYWxpemVkUHVibGljS2V5ID0gKGNvbXByZXNzZWQpID0+IGNvbXByZXNzZWRcbiAgICAgICAgPyBzZXJpYWxpemVQdWJsaWNLZXkoMzMgLyogY29tcHJlc3NlZFB1YmxpY0tleSAqLywgQ29tcHJlc3Npb25GbGFnLkNPTVBSRVNTRUQpXG4gICAgICAgIDogc2VyaWFsaXplUHVibGljS2V5KDY1IC8qIHVuY29tcHJlc3NlZFB1YmxpY0tleSAqLywgQ29tcHJlc3Npb25GbGFnLlVOQ09NUFJFU1NFRCk7XG4gICAgY29uc3QgY29udmVydFB1YmxpY0tleSA9IChjb21wcmVzc2VkKSA9PiAocHVibGljS2V5KSA9PiB7XG4gICAgICAgIGlmICghcGFyc2VQdWJsaWNLZXkocHVibGljS2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcGFyc2UgcHVibGljIGtleS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0U2VyaWFsaXplZFB1YmxpY0tleShjb21wcmVzc2VkKTtcbiAgICB9O1xuICAgIGNvbnN0IHBhcnNlU2lnbmF0dXJlID0gKHNpZ25hdHVyZSwgaXNEZXIpID0+IHtcbiAgICAgICAgY29uc3QgcGFkZGVkU2lnbmF0dXJlID0gY2xvbmVBbmRQYWQoc2lnbmF0dXJlLCA3MiAvKiBtYXhFQ0RTQVNpZyAqLyk7XG4gICAgICAgIHNlY3AyNTZrMVdhc20uaGVhcFU4LnNldChwYWRkZWRTaWduYXR1cmUsIHNpZ1NjcmF0Y2gpO1xuICAgICAgICByZXR1cm4gaXNEZXJcbiAgICAgICAgICAgID8gc2VjcDI1NmsxV2FzbS5zaWduYXR1cmVQYXJzZURFUihjb250ZXh0UHRyLCBpbnRlcm5hbFNpZ1B0ciwgc2lnU2NyYXRjaCwgc2lnbmF0dXJlLmxlbmd0aCkgPT09IDFcbiAgICAgICAgICAgIDogc2VjcDI1NmsxV2FzbS5zaWduYXR1cmVQYXJzZUNvbXBhY3QoY29udGV4dFB0ciwgaW50ZXJuYWxTaWdQdHIsIHNpZ1NjcmF0Y2gpID09PSAxO1xuICAgIH07XG4gICAgY29uc3QgcGFyc2VPclRocm93ID0gKHNpZ25hdHVyZSwgaXNEZXIpID0+IHtcbiAgICAgICAgaWYgKCFwYXJzZVNpZ25hdHVyZShzaWduYXR1cmUsIGlzRGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcGFyc2Ugc2lnbmF0dXJlLicpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBnZXRDb21wYWN0U2lnID0gKCkgPT4ge1xuICAgICAgICBzZWNwMjU2azFXYXNtLnNpZ25hdHVyZVNlcmlhbGl6ZUNvbXBhY3QoY29udGV4dFB0ciwgc2lnU2NyYXRjaCwgaW50ZXJuYWxTaWdQdHIpO1xuICAgICAgICByZXR1cm4gc2VjcDI1NmsxV2FzbS5yZWFkSGVhcFU4KHNpZ1NjcmF0Y2gsIDY0IC8qIGNvbXBhY3RTaWcgKi8pLnNsaWNlKCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRERVJTaWcgPSAoKSA9PiB7XG4gICAgICAgIHNldExlbmd0aFB0cig3MiAvKiBtYXhFQ0RTQVNpZyAqLyk7XG4gICAgICAgIHNlY3AyNTZrMVdhc20uc2lnbmF0dXJlU2VyaWFsaXplREVSKGNvbnRleHRQdHIsIHNpZ1NjcmF0Y2gsIGxlbmd0aFB0ciwgaW50ZXJuYWxTaWdQdHIpO1xuICAgICAgICByZXR1cm4gc2VjcDI1NmsxV2FzbS5yZWFkSGVhcFU4KHNpZ1NjcmF0Y2gsIGdldExlbmd0aFB0cigpKS5zbGljZSgpO1xuICAgIH07XG4gICAgY29uc3QgY29udmVydFNpZ25hdHVyZSA9ICh3YXNERVIpID0+IChzaWduYXR1cmUpID0+IHtcbiAgICAgICAgcGFyc2VPclRocm93KHNpZ25hdHVyZSwgd2FzREVSKTtcbiAgICAgICAgcmV0dXJuIHdhc0RFUiA/IGdldENvbXBhY3RTaWcoKSA6IGdldERFUlNpZygpO1xuICAgIH07XG4gICAgY29uc3QgZmlsbFByaXZhdGVLZXlQdHIgPSAocHJpdmF0ZUtleSkgPT4ge1xuICAgICAgICBjb25zdCBwYWRkZWRQcml2YXRlS2V5ID0gY2xvbmVBbmRQYWQocHJpdmF0ZUtleSwgMzIgLyogcHJpdmF0ZUtleSAqLyk7XG4gICAgICAgIHNlY3AyNTZrMVdhc20uaGVhcFU4LnNldChwYWRkZWRQcml2YXRlS2V5LCBwcml2YXRlS2V5UHRyKTtcbiAgICB9O1xuICAgIGNvbnN0IHplcm9PdXRQdHIgPSAocG9pbnRlciwgYnl0ZXMpID0+IHtcbiAgICAgICAgc2VjcDI1NmsxV2FzbS5oZWFwVTguZmlsbCgwLCBwb2ludGVyLCBwb2ludGVyICsgYnl0ZXMpO1xuICAgIH07XG4gICAgY29uc3QgemVyb091dFByaXZhdGVLZXlQdHIgPSAoKSA9PiB7XG4gICAgICAgIHplcm9PdXRQdHIocHJpdmF0ZUtleVB0ciwgMzIgLyogcHJpdmF0ZUtleSAqLyk7XG4gICAgfTtcbiAgICBjb25zdCB3aXRoUHJpdmF0ZUtleSA9IChwcml2YXRlS2V5LCBpbnN0cnVjdGlvbnMpID0+IHtcbiAgICAgICAgZmlsbFByaXZhdGVLZXlQdHIocHJpdmF0ZUtleSk7XG4gICAgICAgIGNvbnN0IHJldCA9IGluc3RydWN0aW9ucygpO1xuICAgICAgICB6ZXJvT3V0UHJpdmF0ZUtleVB0cigpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgY29uc3QgZGVyaXZlUHVibGljS2V5ID0gKGNvbXByZXNzZWQpID0+IChwcml2YXRlS2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGludmFsaWQgPSB3aXRoUHJpdmF0ZUtleShwcml2YXRlS2V5LCAoKSA9PiBzZWNwMjU2azFXYXNtLnB1YmtleUNyZWF0ZShjb250ZXh0UHRyLCBpbnRlcm5hbFB1YmxpY0tleVB0ciwgcHJpdmF0ZUtleVB0cikgIT09IDEpO1xuICAgICAgICBpZiAoaW52YWxpZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGVyaXZlIHB1YmxpYyBrZXkgZnJvbSBpbnZhbGlkIHByaXZhdGUga2V5LicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRTZXJpYWxpemVkUHVibGljS2V5KGNvbXByZXNzZWQpO1xuICAgIH07XG4gICAgY29uc3QgZmlsbE1lc3NhZ2VIYXNoU2NyYXRjaCA9IChtZXNzYWdlSGFzaCkgPT4ge1xuICAgICAgICBjb25zdCBwYWRkZWRNZXNzYWdlSGFzaCA9IGNsb25lQW5kUGFkKG1lc3NhZ2VIYXNoLCAzMiAvKiBtZXNzYWdlSGFzaCAqLyk7XG4gICAgICAgIHNlY3AyNTZrMVdhc20uaGVhcFU4LnNldChwYWRkZWRNZXNzYWdlSGFzaCwgbWVzc2FnZUhhc2hTY3JhdGNoKTtcbiAgICB9O1xuICAgIGNvbnN0IGZpbGxFeHRyYUVudHJvcHlTY3JhdGNoID0gKGV4dHJhRW50cm9weSkgPT4ge1xuICAgICAgICBjb25zdCBwYWRkZWRFeHRyYUVudHJvcHkgPSBjbG9uZUFuZFBhZChleHRyYUVudHJvcHksIDMyIC8qIGV4dHJhRW50cm9weSAqLyk7XG4gICAgICAgIHNlY3AyNTZrMVdhc20uaGVhcFU4LnNldChwYWRkZWRFeHRyYUVudHJvcHksIGV4dHJhRW50cm9weVNjcmF0Y2gpO1xuICAgIH07XG4gICAgY29uc3Qgbm9ybWFsaXplU2lnbmF0dXJlID0gKCkgPT4ge1xuICAgICAgICBzZWNwMjU2azFXYXNtLnNpZ25hdHVyZU5vcm1hbGl6ZShjb250ZXh0UHRyLCBpbnRlcm5hbFNpZ1B0ciwgaW50ZXJuYWxTaWdQdHIpO1xuICAgIH07XG4gICAgY29uc3QgbW9kaWZ5U2lnbmF0dXJlID0gKGlzRGVyLCBub3JtYWxpemUpID0+IChzaWduYXR1cmUpID0+IHtcbiAgICAgICAgcGFyc2VPclRocm93KHNpZ25hdHVyZSwgaXNEZXIpO1xuICAgICAgICBpZiAobm9ybWFsaXplKSB7XG4gICAgICAgICAgICBub3JtYWxpemVTaWduYXR1cmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNEZXIgPyBnZXRERVJTaWcoKSA6IGdldENvbXBhY3RTaWcoKTtcbiAgICB9O1xuICAgIGNvbnN0IHBhcnNlQW5kTm9ybWFsaXplU2lnbmF0dXJlID0gKHNpZ25hdHVyZSwgaXNEZXIsIG5vcm1hbGl6ZSkgPT4ge1xuICAgICAgICBjb25zdCByZXQgPSBwYXJzZVNpZ25hdHVyZShzaWduYXR1cmUsIGlzRGVyKTtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZSkge1xuICAgICAgICAgICAgbm9ybWFsaXplU2lnbmF0dXJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIGNvbnN0IHNpZ25NZXNzYWdlSGFzaCA9IChpc0RlcikgPT4gKHByaXZhdGVLZXksIG1lc3NhZ2VIYXNoLCBleHRyYUVudHJvcHkpID0+IHtcbiAgICAgICAgZmlsbE1lc3NhZ2VIYXNoU2NyYXRjaChtZXNzYWdlSGFzaCk7XG4gICAgICAgIGlmIChleHRyYUVudHJvcHkpXG4gICAgICAgICAgICBmaWxsRXh0cmFFbnRyb3B5U2NyYXRjaChleHRyYUVudHJvcHkpO1xuICAgICAgICByZXR1cm4gd2l0aFByaXZhdGVLZXkocHJpdmF0ZUtleSwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmFpbGVkID0gc2VjcDI1NmsxV2FzbS5zaWduKGNvbnRleHRQdHIsIGludGVybmFsU2lnUHRyLCBtZXNzYWdlSGFzaFNjcmF0Y2gsIHByaXZhdGVLZXlQdHIsIGV4dHJhRW50cm9weSA/IGV4dHJhRW50cm9weVNjcmF0Y2ggOiAwKSAhPT0gMTtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzaWduIG1lc3NhZ2UgaGFzaC4gVGhlIHByaXZhdGUga2V5IGlzIG5vdCB2YWxpZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0Rlcikge1xuICAgICAgICAgICAgICAgIHNldExlbmd0aFB0cig3MiAvKiBtYXhFQ0RTQVNpZyAqLyk7XG4gICAgICAgICAgICAgICAgc2VjcDI1NmsxV2FzbS5zaWduYXR1cmVTZXJpYWxpemVERVIoY29udGV4dFB0ciwgc2lnU2NyYXRjaCwgbGVuZ3RoUHRyLCBpbnRlcm5hbFNpZ1B0cik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlY3AyNTZrMVdhc20ucmVhZEhlYXBVOChzaWdTY3JhdGNoLCBnZXRMZW5ndGhQdHIoKSkuc2xpY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlY3AyNTZrMVdhc20uc2lnbmF0dXJlU2VyaWFsaXplQ29tcGFjdChjb250ZXh0UHRyLCBzaWdTY3JhdGNoLCBpbnRlcm5hbFNpZ1B0cik7XG4gICAgICAgICAgICByZXR1cm4gc2VjcDI1NmsxV2FzbVxuICAgICAgICAgICAgICAgIC5yZWFkSGVhcFU4KHNpZ1NjcmF0Y2gsIDY0IC8qIGNvbXBhY3RTaWcgKi8pXG4gICAgICAgICAgICAgICAgLnNsaWNlKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgc2lnbk1lc3NhZ2VIYXNoU2Nobm9yciA9ICgpID0+IChwcml2YXRlS2V5LCBtZXNzYWdlSGFzaCkgPT4ge1xuICAgICAgICBmaWxsTWVzc2FnZUhhc2hTY3JhdGNoKG1lc3NhZ2VIYXNoKTtcbiAgICAgICAgcmV0dXJuIHdpdGhQcml2YXRlS2V5KHByaXZhdGVLZXksICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZhaWxlZCA9IHNlY3AyNTZrMVdhc20uc2Nobm9yclNpZ24oY29udGV4dFB0ciwgc2Nobm9yclNpZ1B0ciwgbWVzc2FnZUhhc2hTY3JhdGNoLCBwcml2YXRlS2V5UHRyKSAhPT0gMTtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzaWduIG1lc3NhZ2UgaGFzaC4gVGhlIHByaXZhdGUga2V5IGlzIG5vdCB2YWxpZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWNwMjU2azFXYXNtXG4gICAgICAgICAgICAgICAgLnJlYWRIZWFwVTgoc2Nobm9yclNpZ1B0ciwgNjQgLyogc2Nobm9yclNpZyAqLylcbiAgICAgICAgICAgICAgICAuc2xpY2UoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBlY2RoID0gKCkgPT4gKHByaXZhdGVLZXksIHB1YmxpY0tleSkgPT4ge1xuICAgICAgICBpZiAoIXBhcnNlUHVibGljS2V5KHB1YmxpY0tleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRUNESCBLZXkgRXhjaGFuZ2UgZmFpbGVkLiBGYWlsZWQgdG8gcGFyc2UgcHVibGljIGtleS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2l0aFByaXZhdGVLZXkocHJpdmF0ZUtleSwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmFpbGVkID0gc2VjcDI1NmsxV2FzbS5lY2RoKGNvbnRleHRQdHIsIGVjZGhTaGFyZWRTZWNyZXRQdHIsIGludGVybmFsUHVibGljS2V5UHRyLCBwcml2YXRlS2V5UHRyKSAhPT0gMTtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VDREggS2V5IEV4Y2hhbmdlIGZhaWxlZC4gVGhlIHByaXZhdGUga2V5IGlzIG5vdCB2YWxpZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWNwMjU2azFXYXNtXG4gICAgICAgICAgICAgICAgLnJlYWRIZWFwVTgoZWNkaFNoYXJlZFNlY3JldFB0ciwgMzIgLyogZWNkaFNoYXJlZFNlY3JldCAqLylcbiAgICAgICAgICAgICAgICAuc2xpY2UoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB2ZXJpZnlNZXNzYWdlID0gKG1lc3NhZ2VIYXNoKSA9PiB7XG4gICAgICAgIGZpbGxNZXNzYWdlSGFzaFNjcmF0Y2gobWVzc2FnZUhhc2gpO1xuICAgICAgICByZXR1cm4gKHNlY3AyNTZrMVdhc20udmVyaWZ5KGNvbnRleHRQdHIsIGludGVybmFsU2lnUHRyLCBtZXNzYWdlSGFzaFNjcmF0Y2gsIGludGVybmFsUHVibGljS2V5UHRyKSA9PT0gMSk7XG4gICAgfTtcbiAgICBjb25zdCB2ZXJpZnlTaWduYXR1cmUgPSAoaXNEZXIsIG5vcm1hbGl6ZSkgPT4gKHNpZ25hdHVyZSwgcHVibGljS2V5LCBtZXNzYWdlSGFzaCkgPT4gcGFyc2VQdWJsaWNLZXkocHVibGljS2V5KSAmJlxuICAgICAgICBwYXJzZUFuZE5vcm1hbGl6ZVNpZ25hdHVyZShzaWduYXR1cmUsIGlzRGVyLCBub3JtYWxpemUpICYmXG4gICAgICAgIHZlcmlmeU1lc3NhZ2UobWVzc2FnZUhhc2gpO1xuICAgIGNvbnN0IHZlcmlmeU1lc3NhZ2VTY2hub3JyID0gKG1lc3NhZ2VIYXNoLCBzaWduYXR1cmUpID0+IHtcbiAgICAgICAgZmlsbE1lc3NhZ2VIYXNoU2NyYXRjaChtZXNzYWdlSGFzaCk7XG4gICAgICAgIGNvbnN0IHBhZGRlZFNpZ25hdHVyZSA9IGNsb25lQW5kUGFkKHNpZ25hdHVyZSwgNjQgLyogc2Nobm9yclNpZyAqLyk7XG4gICAgICAgIHNlY3AyNTZrMVdhc20uaGVhcFU4LnNldChwYWRkZWRTaWduYXR1cmUsIHNjaG5vcnJTaWdQdHIpO1xuICAgICAgICByZXR1cm4gKHNlY3AyNTZrMVdhc20uc2Nobm9yclZlcmlmeShjb250ZXh0UHRyLCBzY2hub3JyU2lnUHRyLCBtZXNzYWdlSGFzaFNjcmF0Y2gsIGludGVybmFsUHVibGljS2V5UHRyKSA9PT0gMSk7XG4gICAgfTtcbiAgICBjb25zdCB2ZXJpZnlTaWduYXR1cmVTY2hub3JyID0gKCkgPT4gKHNpZ25hdHVyZSwgcHVibGljS2V5LCBtZXNzYWdlSGFzaCkgPT4gcGFyc2VQdWJsaWNLZXkocHVibGljS2V5KVxuICAgICAgICA/IHZlcmlmeU1lc3NhZ2VTY2hub3JyKG1lc3NhZ2VIYXNoLCBzaWduYXR1cmUpXG4gICAgICAgIDogZmFsc2U7XG4gICAgY29uc3Qgc2lnbk1lc3NhZ2VIYXNoUmVjb3ZlcmFibGUgPSAocHJpdmF0ZUtleSwgbWVzc2FnZUhhc2gpID0+IHtcbiAgICAgICAgZmlsbE1lc3NhZ2VIYXNoU2NyYXRjaChtZXNzYWdlSGFzaCk7XG4gICAgICAgIHJldHVybiB3aXRoUHJpdmF0ZUtleShwcml2YXRlS2V5LCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2VjcDI1NmsxV2FzbS5zaWduUmVjb3ZlcmFibGUoY29udGV4dFB0ciwgaW50ZXJuYWxSU2lnUHRyLCBtZXNzYWdlSGFzaFNjcmF0Y2gsIHByaXZhdGVLZXlQdHIpICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gc2lnbiBtZXNzYWdlIGhhc2guIFRoZSBwcml2YXRlIGtleSBpcyBub3QgdmFsaWQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWNwMjU2azFXYXNtLnJlY292ZXJhYmxlU2lnbmF0dXJlU2VyaWFsaXplKGNvbnRleHRQdHIsIHNpZ1NjcmF0Y2gsIHJlY292ZXJ5TnVtUHRyLCBpbnRlcm5hbFJTaWdQdHIpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZWNvdmVyeUlkOiBnZXRSZWNvdmVyeU51bVB0cigpLFxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogc2VjcDI1NmsxV2FzbVxuICAgICAgICAgICAgICAgICAgICAucmVhZEhlYXBVOChzaWdTY3JhdGNoLCA2NCAvKiBjb21wYWN0U2lnICovKVxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgcmVjb3ZlclB1YmxpY0tleSA9IChjb21wcmVzc2VkKSA9PiAoc2lnbmF0dXJlLCByZWNvdmVyeUlkLCBtZXNzYWdlSGFzaCkgPT4ge1xuICAgICAgICBmaWxsTWVzc2FnZUhhc2hTY3JhdGNoKG1lc3NhZ2VIYXNoKTtcbiAgICAgICAgY29uc3QgcGFkZGVkU2lnbmF0dXJlID0gY2xvbmVBbmRQYWQoc2lnbmF0dXJlLCA3MiAvKiBtYXhFQ0RTQVNpZyAqLyk7XG4gICAgICAgIHNlY3AyNTZrMVdhc20uaGVhcFU4LnNldChwYWRkZWRTaWduYXR1cmUsIHNpZ1NjcmF0Y2gpO1xuICAgICAgICBpZiAoc2VjcDI1NmsxV2FzbS5yZWNvdmVyYWJsZVNpZ25hdHVyZVBhcnNlKGNvbnRleHRQdHIsIGludGVybmFsUlNpZ1B0ciwgc2lnU2NyYXRjaCwgcmVjb3ZlcnlJZCkgIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHJlY292ZXIgcHVibGljIGtleS4gQ291bGQgbm90IHBhcnNlIHNpZ25hdHVyZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VjcDI1NmsxV2FzbS5yZWNvdmVyKGNvbnRleHRQdHIsIGludGVybmFsUHVibGljS2V5UHRyLCBpbnRlcm5hbFJTaWdQdHIsIG1lc3NhZ2VIYXNoU2NyYXRjaCkgIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHJlY292ZXIgcHVibGljIGtleS4gVGhlIGNvbXBhY3Qgc2lnbmF0dXJlLCByZWNvdmVyeSwgb3IgbWVzc2FnZSBoYXNoIGlzIGludmFsaWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldFNlcmlhbGl6ZWRQdWJsaWNLZXkoY29tcHJlc3NlZCk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUd2Vha1ByaXZhdGVLZXkgPSAocHJpdmF0ZUtleSwgdHdlYWtWYWx1ZSkgPT4ge1xuICAgICAgICBmaWxsTWVzc2FnZUhhc2hTY3JhdGNoKHR3ZWFrVmFsdWUpO1xuICAgICAgICByZXR1cm4gd2l0aFByaXZhdGVLZXkocHJpdmF0ZUtleSwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNlY3AyNTZrMVdhc20ucHJpdmtleVR3ZWFrQWRkKGNvbnRleHRQdHIsIHByaXZhdGVLZXlQdHIsIG1lc3NhZ2VIYXNoU2NyYXRjaCkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByaXZhdGUga2V5IGlzIGludmFsaWQgb3IgYWRkaW5nIGZhaWxlZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWNwMjU2azFXYXNtXG4gICAgICAgICAgICAgICAgLnJlYWRIZWFwVTgocHJpdmF0ZUtleVB0ciwgMzIgLyogcHJpdmF0ZUtleSAqLylcbiAgICAgICAgICAgICAgICAuc2xpY2UoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBtdWxUd2Vha1ByaXZhdGVLZXkgPSAocHJpdmF0ZUtleSwgdHdlYWtWYWx1ZSkgPT4ge1xuICAgICAgICBmaWxsTWVzc2FnZUhhc2hTY3JhdGNoKHR3ZWFrVmFsdWUpO1xuICAgICAgICByZXR1cm4gd2l0aFByaXZhdGVLZXkocHJpdmF0ZUtleSwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNlY3AyNTZrMVdhc20ucHJpdmtleVR3ZWFrTXVsKGNvbnRleHRQdHIsIHByaXZhdGVLZXlQdHIsIG1lc3NhZ2VIYXNoU2NyYXRjaCkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByaXZhdGUga2V5IGlzIGludmFsaWQgb3IgbXVsdGlwbHlpbmcgZmFpbGVkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlY3AyNTZrMVdhc21cbiAgICAgICAgICAgICAgICAucmVhZEhlYXBVOChwcml2YXRlS2V5UHRyLCAzMiAvKiBwcml2YXRlS2V5ICovKVxuICAgICAgICAgICAgICAgIC5zbGljZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFR3ZWFrUHVibGljS2V5ID0gKGNvbXByZXNzZWQpID0+IChwdWJsaWNLZXksIHR3ZWFrVmFsdWUpID0+IHtcbiAgICAgICAgaWYgKCFwYXJzZVB1YmxpY0tleShwdWJsaWNLZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBwdWJsaWMga2V5LicpO1xuICAgICAgICB9XG4gICAgICAgIGZpbGxNZXNzYWdlSGFzaFNjcmF0Y2godHdlYWtWYWx1ZSk7XG4gICAgICAgIGlmIChzZWNwMjU2azFXYXNtLnB1YmtleVR3ZWFrQWRkKGNvbnRleHRQdHIsIGludGVybmFsUHVibGljS2V5UHRyLCBtZXNzYWdlSGFzaFNjcmF0Y2gpICE9PSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FkZGluZyBmYWlsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0U2VyaWFsaXplZFB1YmxpY0tleShjb21wcmVzc2VkKTtcbiAgICB9O1xuICAgIGNvbnN0IG11bFR3ZWFrUHVibGljS2V5ID0gKGNvbXByZXNzZWQpID0+IChwdWJsaWNLZXksIHR3ZWFrVmFsdWUpID0+IHtcbiAgICAgICAgaWYgKCFwYXJzZVB1YmxpY0tleShwdWJsaWNLZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBwdWJsaWMga2V5LicpO1xuICAgICAgICB9XG4gICAgICAgIGZpbGxNZXNzYWdlSGFzaFNjcmF0Y2godHdlYWtWYWx1ZSk7XG4gICAgICAgIGlmIChzZWNwMjU2azFXYXNtLnB1YmtleVR3ZWFrTXVsKGNvbnRleHRQdHIsIGludGVybmFsUHVibGljS2V5UHRyLCBtZXNzYWdlSGFzaFNjcmF0Y2gpICE9PSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011bHRpcGx5aW5nIGZhaWxlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRTZXJpYWxpemVkUHVibGljS2V5KGNvbXByZXNzZWQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIG9mIHRoaXMgcHJlY2F1dGlvbiBpcyBkZWJhdGFibGUsIGVzcGVjaWFsbHkgaW4gdGhlIGNvbnRleHQgb2ZcbiAgICAgKiBqYXZhc2NyaXB0IGFuZCBXZWJBc3NlbWJseS5cbiAgICAgKlxuICAgICAqIEluIHRoZSBzZWNwMjU2azEgQyBsaWJyYXJ5LCBjb250ZXh0IHJhbmRvbWl6YXRpb24gaXMgYW4gYWRkaXRpb25hbCBsYXllciBvZlxuICAgICAqIHNlY3VyaXR5IGZyb20gc2lkZS1jaGFubmVsIGF0dGFja3Mgd2hpY2ggYXR0ZW1wdCB0byBleHRyYWN0IHByaXZhdGUga2V5XG4gICAgICogaW5mb3JtYXRpb24gYnkgYW5hbHl6aW5nIHRoaW5ncyBsaWtlIGEgQ1BVJ3MgZW1pdHRlZCByYWRpbyBmcmVxdWVuY2llcyBvclxuICAgICAqIHBvd2VyIHVzYWdlLlxuICAgICAqXG4gICAgICogSW4gdGhpcyBsaWJyYXJ5LCB0aGVzZSBhdHRhY2tzIHNlZW0gZXZlbiBsZXNzIGxpa2VseSwgc2luY2UgdGhlIFwicGxhdGZvcm1cIlxuICAgICAqIG9uIHdoaWNoIHRoaXMgY29kZSB3aWxsIGJlIGV4ZWN1dGVkIChlLmcuIFY4KSBpcyBsaWtlbHkgdG8gb2JzY3VyZSBhbnlcbiAgICAgKiBzdWNoIHNpZ25hbHMuXG4gICAgICpcbiAgICAgKiBTdGlsbCwgb3V0IG9mIGFuIGFidW5kYW5jZSBvZiBjYXV0aW9uIChhbmQgYmVjYXVzZSBubyBvbmUgaGFzIHByb2R1Y2VkIGFcbiAgICAgKiBkZWZpbml0aXZlIHByb29mIGluZGljYXRpbmcgdGhhdCB0aGlzIGlzIG5vdCBoZWxwZnVsKSwgdGhpcyBsaWJyYXJ5IGV4cG9zZXNcbiAgICAgKiB0aGUgYWJpbGl0eSB0byByYW5kb21pemUgdGhlIGNvbnRleHQgbGlrZSB0aGUgQyBsaWJyYXJ5LiBEZXBlbmRpbmcgb24gdGhlXG4gICAgICogaW50ZW5kZWQgYXBwbGljYXRpb24sIGNvbnN1bWVycyBjYW4gZGVjaWRlIHdoZXRoZXIgb3Igbm90IHRvIHJhbmRvbWl6ZS5cbiAgICAgKi9cbiAgICBpZiAocmFuZG9tU2VlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHJhbmRvbVNlZWRQdHIgPSBtZXNzYWdlSGFzaFNjcmF0Y2g7XG4gICAgICAgIGNvbnN0IHBhZGRlZFJhbmRvbVNlZWQgPSBjbG9uZUFuZFBhZChyYW5kb21TZWVkLCAzMiAvKiByYW5kb21TZWVkICovKTtcbiAgICAgICAgc2VjcDI1NmsxV2FzbS5oZWFwVTguc2V0KHBhZGRlZFJhbmRvbVNlZWQsIHJhbmRvbVNlZWRQdHIpO1xuICAgICAgICBzZWNwMjU2azFXYXNtLmNvbnRleHRSYW5kb21pemUoY29udGV4dFB0ciwgcmFuZG9tU2VlZFB0cik7XG4gICAgICAgIHplcm9PdXRQdHIocmFuZG9tU2VlZFB0ciwgMzIgLyogcmFuZG9tU2VlZCAqLyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZFR3ZWFrUHJpdmF0ZUtleSxcbiAgICAgICAgYWRkVHdlYWtQdWJsaWNLZXlDb21wcmVzc2VkOiBhZGRUd2Vha1B1YmxpY0tleSh0cnVlKSxcbiAgICAgICAgYWRkVHdlYWtQdWJsaWNLZXlVbmNvbXByZXNzZWQ6IGFkZFR3ZWFrUHVibGljS2V5KGZhbHNlKSxcbiAgICAgICAgY29tcHJlc3NQdWJsaWNLZXk6IGNvbnZlcnRQdWJsaWNLZXkodHJ1ZSksXG4gICAgICAgIGRlcml2ZVB1YmxpY0tleUNvbXByZXNzZWQ6IGRlcml2ZVB1YmxpY0tleSh0cnVlKSxcbiAgICAgICAgZGVyaXZlUHVibGljS2V5VW5jb21wcmVzc2VkOiBkZXJpdmVQdWJsaWNLZXkoZmFsc2UpLFxuICAgICAgICBlY2RoOiBlY2RoKCksXG4gICAgICAgIG1hbGxlYXRlU2lnbmF0dXJlQ29tcGFjdDogbW9kaWZ5U2lnbmF0dXJlKGZhbHNlLCBmYWxzZSksXG4gICAgICAgIG1hbGxlYXRlU2lnbmF0dXJlREVSOiBtb2RpZnlTaWduYXR1cmUodHJ1ZSwgZmFsc2UpLFxuICAgICAgICBtdWxUd2Vha1ByaXZhdGVLZXksXG4gICAgICAgIG11bFR3ZWFrUHVibGljS2V5Q29tcHJlc3NlZDogbXVsVHdlYWtQdWJsaWNLZXkodHJ1ZSksXG4gICAgICAgIG11bFR3ZWFrUHVibGljS2V5VW5jb21wcmVzc2VkOiBtdWxUd2Vha1B1YmxpY0tleShmYWxzZSksXG4gICAgICAgIG5vcm1hbGl6ZVNpZ25hdHVyZUNvbXBhY3Q6IG1vZGlmeVNpZ25hdHVyZShmYWxzZSwgdHJ1ZSksXG4gICAgICAgIG5vcm1hbGl6ZVNpZ25hdHVyZURFUjogbW9kaWZ5U2lnbmF0dXJlKHRydWUsIHRydWUpLFxuICAgICAgICByZWNvdmVyUHVibGljS2V5Q29tcHJlc3NlZDogcmVjb3ZlclB1YmxpY0tleSh0cnVlKSxcbiAgICAgICAgcmVjb3ZlclB1YmxpY0tleVVuY29tcHJlc3NlZDogcmVjb3ZlclB1YmxpY0tleShmYWxzZSksXG4gICAgICAgIHNpZ25NZXNzYWdlSGFzaENvbXBhY3Q6IHNpZ25NZXNzYWdlSGFzaChmYWxzZSksXG4gICAgICAgIHNpZ25NZXNzYWdlSGFzaERFUjogc2lnbk1lc3NhZ2VIYXNoKHRydWUpLFxuICAgICAgICBzaWduTWVzc2FnZUhhc2hSZWNvdmVyYWJsZUNvbXBhY3Q6IHNpZ25NZXNzYWdlSGFzaFJlY292ZXJhYmxlLFxuICAgICAgICBzaWduTWVzc2FnZUhhc2hTY2hub3JyOiBzaWduTWVzc2FnZUhhc2hTY2hub3JyKCksXG4gICAgICAgIHNpZ25hdHVyZUNvbXBhY3RUb0RFUjogY29udmVydFNpZ25hdHVyZShmYWxzZSksXG4gICAgICAgIHNpZ25hdHVyZURFUlRvQ29tcGFjdDogY29udmVydFNpZ25hdHVyZSh0cnVlKSxcbiAgICAgICAgdW5jb21wcmVzc1B1YmxpY0tleTogY29udmVydFB1YmxpY0tleShmYWxzZSksXG4gICAgICAgIHZhbGlkYXRlUHJpdmF0ZUtleTogKHByaXZhdGVLZXkpID0+IHdpdGhQcml2YXRlS2V5KHByaXZhdGVLZXksICgpID0+IHNlY3AyNTZrMVdhc20uc2Vja2V5VmVyaWZ5KGNvbnRleHRQdHIsIHByaXZhdGVLZXlQdHIpID09PSAxKSxcbiAgICAgICAgdmFsaWRhdGVQdWJsaWNLZXk6IHBhcnNlUHVibGljS2V5LFxuICAgICAgICB2ZXJpZnlTaWduYXR1cmVDb21wYWN0OiB2ZXJpZnlTaWduYXR1cmUoZmFsc2UsIHRydWUpLFxuICAgICAgICB2ZXJpZnlTaWduYXR1cmVDb21wYWN0TG93UzogdmVyaWZ5U2lnbmF0dXJlKGZhbHNlLCBmYWxzZSksXG4gICAgICAgIHZlcmlmeVNpZ25hdHVyZURFUjogdmVyaWZ5U2lnbmF0dXJlKHRydWUsIHRydWUpLFxuICAgICAgICB2ZXJpZnlTaWduYXR1cmVERVJMb3dTOiB2ZXJpZnlTaWduYXR1cmUodHJ1ZSwgZmFsc2UpLFxuICAgICAgICB2ZXJpZnlTaWduYXR1cmVTY2hub3JyOiB2ZXJpZnlTaWduYXR1cmVTY2hub3JyKCksXG4gICAgfTtcbn07XG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYGluc3RhbnRpYXRlU2VjcDI1NmsxYCwgYnV0IHJlcXVpcmVzIHRoZSBjb25zdW1lciB0b1xuICogYFdpbmRvdy5mZXRjaGAgb3IgYGZzLnJlYWRGaWxlYCB0aGUgYHNlY3AyNTZrMS53YXNtYCBiaW5hcnkgYW5kIHByb3ZpZGUgaXQgdG9cbiAqIHRoaXMgbWV0aG9kIGFzIGB3ZWJhc3NlbWJseUJ5dGVzYC4gVGhpcyBza2lwcyBhIGJhc2U2NCBkZWNvZGluZyBvZiBhblxuICogZW1iZWRkZWQgYmluYXJ5LlxuICpcbiAqICMjIyBSYW5kb21pemluZyB0aGUgQ29udGV4dCB3aXRoIGByYW5kb21TZWVkYFxuICogVGhpcyBtZXRob2QgYWxzbyBhY2NlcHRzIGFuIG9wdGlvbmFsLCAzMi1ieXRlIGByYW5kb21TZWVkYCwgd2hpY2ggaXMgcGFzc2VkXG4gKiB0byB0aGUgYGNvbnRleHRSYW5kb21pemVgIG1ldGhvZCBpbiB0aGUgdW5kZXJseWluZyBXZWJBc3NlbWJseS5cbiAqXG4gKiBUaGUgdmFsdWUgb2YgdGhpcyBwcmVjYXV0aW9uIGlzIGRlYmF0YWJsZSwgZXNwZWNpYWxseSBpbiB0aGUgY29udGV4dCBvZlxuICogamF2YXNjcmlwdCBhbmQgV2ViQXNzZW1ibHkuXG4gKlxuICogSW4gdGhlIHNlY3AyNTZrMSBDIGxpYnJhcnksIGNvbnRleHQgcmFuZG9taXphdGlvbiBpcyBhbiBhZGRpdGlvbmFsIGxheWVyIG9mXG4gKiBzZWN1cml0eSBmcm9tIHNpZGUtY2hhbm5lbCBhdHRhY2tzIHdoaWNoIGF0dGVtcHQgdG8gZXh0cmFjdCBwcml2YXRlIGtleVxuICogaW5mb3JtYXRpb24gYnkgYW5hbHl6aW5nIHRoaW5ncyBsaWtlIGEgQ1BVJ3MgZW1pdHRlZCByYWRpbyBmcmVxdWVuY2llcyBvclxuICogcG93ZXIgdXNhZ2UuXG4gKlxuICogSW4gdGhpcyBsaWJyYXJ5LCB0aGVzZSBhdHRhY2tzIHNlZW0gZXZlbiBsZXNzIGxpa2VseSwgc2luY2UgdGhlIFwicGxhdGZvcm1cIlxuICogb24gd2hpY2ggdGhpcyBjb2RlIHdpbGwgYmUgZXhlY3V0ZWQgKGUuZy4gVjgpIGlzIGxpa2VseSB0byBvYnNjdXJlIGFueVxuICogc3VjaCBzaWduYWxzLlxuICpcbiAqIFN0aWxsLCBvdXQgb2YgYW4gYWJ1bmRhbmNlIG9mIGNhdXRpb24gKGFuZCBiZWNhdXNlIG5vIG9uZSBoYXMgcHJvZHVjZWQgYVxuICogZGVmaW5pdGl2ZSBwcm9vZiBpbmRpY2F0aW5nIHRoYXQgdGhpcyBpcyBub3QgaGVscGZ1bCksIHRoaXMgbGlicmFyeSBleHBvc2VzXG4gKiB0aGUgYWJpbGl0eSB0byByYW5kb21pemUgdGhlIGNvbnRleHQgbGlrZSB0aGUgQyBsaWJyYXJ5LiBEZXBlbmRpbmcgb24gdGhlXG4gKiBpbnRlbmRlZCBhcHBsaWNhdGlvbiwgY29uc3VtZXJzIGNhbiBkZWNpZGUgd2hldGhlciBvciBub3QgdG8gcmFuZG9taXplLlxuICpcbiAqIEBwYXJhbSB3ZWJhc3NlbWJseUJ5dGVzIC0gYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgYnl0ZXMgZnJvbSBMaWJhdXRoJ3NcbiAqIGBzZWNwMjU2azEud2FzbWAgYmluYXJ5LiBQcm92aWRpbmcgdGhpcyBidWZmZXIgbWFudWFsbHkgbWF5IGJlIGZhc3RlciB0aGFuXG4gKiB0aGUgaW50ZXJuYWwgYmFzZTY0IGRlY29kZSB3aGljaCBoYXBwZW5zIGluIGBpbnN0YW50aWF0ZVNlY3AyNTZrMWAuXG4gKiBAcGFyYW0gcmFuZG9tU2VlZCAtIGEgMzItYnl0ZSByYW5kb20gc2VlZCB1c2VkIHRvIHJhbmRvbWl6ZSB0aGUgc2VjcDI1NmsxXG4gKiBjb250ZXh0IGFmdGVyIGNyZWF0aW9uLiBTZWUgYWJvdmUgZm9yIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBjb25zdCBpbnN0YW50aWF0ZVNlY3AyNTZrMUJ5dGVzID0gYXN5bmMgKHdlYmFzc2VtYmx5Qnl0ZXMsIHJhbmRvbVNlZWQpID0+IHdyYXBTZWNwMjU2azFXYXNtKGF3YWl0IGluc3RhbnRpYXRlU2VjcDI1NmsxV2FzbUJ5dGVzKHdlYmFzc2VtYmx5Qnl0ZXMpLCByYW5kb21TZWVkKTtcbmNvbnN0IGNhY2hlZFNlY3AyNTZrMSA9IHt9O1xuLyoqXG4gKiBDcmVhdGUgYW5kIHdyYXAgYSBTZWNwMjU2azEgV2ViQXNzZW1ibHkgaW5zdGFuY2UgdG8gZXhwb3NlIGEgc2V0IG9mXG4gKiBwdXJlbHktZnVuY3Rpb25hbCBTZWNwMjU2azEgbWV0aG9kcy4gRm9yIHNsaWdodGx5IGZhc3RlciBpbml0aWFsaXphdGlvbiwgdXNlXG4gKiBgaW5zdGFudGlhdGVTZWNwMjU2azFCeXRlc2AuXG4gKlxuICogQHBhcmFtIHJhbmRvbVNlZWQgLSBhIDMyLWJ5dGUgcmFuZG9tIHNlZWQgdXNlZCB0byByYW5kb21pemUgdGhlIHNlY3AyNTZrMVxuICogY29udGV4dCBhZnRlciBjcmVhdGlvbi4gU2VlIHRoZSBkZXNjcmlwdGlvbiBpbiBgaW5zdGFudGlhdGVTZWNwMjU2azFCeXRlc2BcbiAqIGZvciBkZXRhaWxzLlxuICovXG5leHBvcnQgY29uc3QgaW5zdGFudGlhdGVTZWNwMjU2azEgPSBhc3luYyAocmFuZG9tU2VlZCkgPT4ge1xuICAgIGlmIChjYWNoZWRTZWNwMjU2azEuY2FjaGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkU2VjcDI1NmsxLmNhY2hlO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBQcm9taXNlLnJlc29sdmUod3JhcFNlY3AyNTZrMVdhc20oYXdhaXQgaW5zdGFudGlhdGVTZWNwMjU2azFXYXNtKCksIHJhbmRvbVNlZWQpKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1hdG9taWMtdXBkYXRlcywgZnVuY3Rpb25hbC9pbW11dGFibGUtZGF0YVxuICAgIGNhY2hlZFNlY3AyNTZrMS5jYWNoZSA9IHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlY3AyNTZrMS5qcy5tYXAiLCJpbXBvcnQgeyBpbnN0YW50aWF0ZVJ1c3RXYXNtLCBzaGEyNTZCYXNlNjRCeXRlcywgfSBmcm9tICcuLi9iaW4vYmluJztcbmltcG9ydCB7IGJhc2U2NFRvQmluIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG4vKipcbiAqIFRoZSBtb3N0IHBlcmZvcm1hbnQgd2F5IHRvIGluc3RhbnRpYXRlIHNoYTI1NiBmdW5jdGlvbmFsaXR5LiBUbyBhdm9pZFxuICogdXNpbmcgTm9kZS5qcyBvciBET00tc3BlY2lmaWMgQVBJcywgeW91IGNhbiB1c2UgYGluc3RhbnRpYXRlU2hhMjU2YC5cbiAqXG4gKiBAcGFyYW0gd2ViYXNzZW1ibHlCeXRlcyAtIEEgYnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNoYTI1NiBiaW5hcnkuXG4gKi9cbmV4cG9ydCBjb25zdCBpbnN0YW50aWF0ZVNoYTI1NkJ5dGVzID0gYXN5bmMgKHdlYmFzc2VtYmx5Qnl0ZXMpID0+IHtcbiAgICBjb25zdCB3YXNtID0gYXdhaXQgaW5zdGFudGlhdGVSdXN0V2FzbSh3ZWJhc3NlbWJseUJ5dGVzLCAnLi9zaGEyNTYnLCAnc2hhMjU2JywgJ3NoYTI1Nl9pbml0JywgJ3NoYTI1Nl91cGRhdGUnLCAnc2hhMjU2X2ZpbmFsJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmluYWw6IHdhc20uZmluYWwsXG4gICAgICAgIGhhc2g6IHdhc20uaGFzaCxcbiAgICAgICAgaW5pdDogd2FzbS5pbml0LFxuICAgICAgICB1cGRhdGU6IHdhc20udXBkYXRlLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IGdldEVtYmVkZGVkU2hhMjU2QmluYXJ5ID0gKCkgPT4gYmFzZTY0VG9CaW4oc2hhMjU2QmFzZTY0Qnl0ZXMpLmJ1ZmZlcjtcbmNvbnN0IGNhY2hlZFNoYTI1NiA9IHt9O1xuLyoqXG4gKiBBbiB1bHRpbWF0ZWx5LXBvcnRhYmxlIChidXQgcG9zc2libHkgc2xvd2VyKSB2ZXJzaW9uIG9mXG4gKiBgaW5zdGFudGlhdGVTaGEyNTZCeXRlc2Agd2hpY2ggZG9lcyBub3QgcmVxdWlyZSB0aGUgY29uc3VtZXIgdG8gcHJvdmlkZSB0aGVcbiAqIHNoYTI1NiBiaW5hcnkgYnVmZmVyLlxuICovXG5leHBvcnQgY29uc3QgaW5zdGFudGlhdGVTaGEyNTYgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGNhY2hlZFNoYTI1Ni5jYWNoZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRTaGEyNTYuY2FjaGU7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGluc3RhbnRpYXRlU2hhMjU2Qnl0ZXMoZ2V0RW1iZWRkZWRTaGEyNTZCaW5hcnkoKSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGEsIGZ1bmN0aW9uYWwvbm8tZXhwcmVzc2lvbi1zdGF0ZW1lbnRcbiAgICBjYWNoZWRTaGEyNTYuY2FjaGUgPSByZXN1bHQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGEyNTYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIHNoYTI1Ni11aW50OGFycmF5LnRzXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGFzaCA9IGV4cG9ydHMuY3JlYXRlSGFzaCA9IHZvaWQgMDtcbi8vIGZpcnN0IDMyIGJpdHMgb2YgdGhlIGZyYWN0aW9uYWwgcGFydHMgb2YgdGhlIGN1YmUgcm9vdHMgb2YgdGhlIGZpcnN0IDY0IHByaW1lcyAyLi4zMTFcbmNvbnN0IEsgPSBbXG4gICAgMHg0MjhhMmY5OCB8IDAsIDB4NzEzNzQ0OTEgfCAwLCAweGI1YzBmYmNmIHwgMCwgMHhlOWI1ZGJhNSB8IDAsXG4gICAgMHgzOTU2YzI1YiB8IDAsIDB4NTlmMTExZjEgfCAwLCAweDkyM2Y4MmE0IHwgMCwgMHhhYjFjNWVkNSB8IDAsXG4gICAgMHhkODA3YWE5OCB8IDAsIDB4MTI4MzViMDEgfCAwLCAweDI0MzE4NWJlIHwgMCwgMHg1NTBjN2RjMyB8IDAsXG4gICAgMHg3MmJlNWQ3NCB8IDAsIDB4ODBkZWIxZmUgfCAwLCAweDliZGMwNmE3IHwgMCwgMHhjMTliZjE3NCB8IDAsXG4gICAgMHhlNDliNjljMSB8IDAsIDB4ZWZiZTQ3ODYgfCAwLCAweDBmYzE5ZGM2IHwgMCwgMHgyNDBjYTFjYyB8IDAsXG4gICAgMHgyZGU5MmM2ZiB8IDAsIDB4NGE3NDg0YWEgfCAwLCAweDVjYjBhOWRjIHwgMCwgMHg3NmY5ODhkYSB8IDAsXG4gICAgMHg5ODNlNTE1MiB8IDAsIDB4YTgzMWM2NmQgfCAwLCAweGIwMDMyN2M4IHwgMCwgMHhiZjU5N2ZjNyB8IDAsXG4gICAgMHhjNmUwMGJmMyB8IDAsIDB4ZDVhNzkxNDcgfCAwLCAweDA2Y2E2MzUxIHwgMCwgMHgxNDI5Mjk2NyB8IDAsXG4gICAgMHgyN2I3MGE4NSB8IDAsIDB4MmUxYjIxMzggfCAwLCAweDRkMmM2ZGZjIHwgMCwgMHg1MzM4MGQxMyB8IDAsXG4gICAgMHg2NTBhNzM1NCB8IDAsIDB4NzY2YTBhYmIgfCAwLCAweDgxYzJjOTJlIHwgMCwgMHg5MjcyMmM4NSB8IDAsXG4gICAgMHhhMmJmZThhMSB8IDAsIDB4YTgxYTY2NGIgfCAwLCAweGMyNGI4YjcwIHwgMCwgMHhjNzZjNTFhMyB8IDAsXG4gICAgMHhkMTkyZTgxOSB8IDAsIDB4ZDY5OTA2MjQgfCAwLCAweGY0MGUzNTg1IHwgMCwgMHgxMDZhYTA3MCB8IDAsXG4gICAgMHgxOWE0YzExNiB8IDAsIDB4MWUzNzZjMDggfCAwLCAweDI3NDg3NzRjIHwgMCwgMHgzNGIwYmNiNSB8IDAsXG4gICAgMHgzOTFjMGNiMyB8IDAsIDB4NGVkOGFhNGEgfCAwLCAweDViOWNjYTRmIHwgMCwgMHg2ODJlNmZmMyB8IDAsXG4gICAgMHg3NDhmODJlZSB8IDAsIDB4NzhhNTYzNmYgfCAwLCAweDg0Yzg3ODE0IHwgMCwgMHg4Y2M3MDIwOCB8IDAsXG4gICAgMHg5MGJlZmZmYSB8IDAsIDB4YTQ1MDZjZWIgfCAwLCAweGJlZjlhM2Y3IHwgMCwgMHhjNjcxNzhmMiB8IDAsXG5dO1xuY29uc3QgYWxnb3JpdGhtcyA9IHtcbiAgICBzaGEyNTY6IDEsXG59O1xuZnVuY3Rpb24gY3JlYXRlSGFzaChhbGdvcml0aG0pIHtcbiAgICBpZiAoYWxnb3JpdGhtICYmICFhbGdvcml0aG1zW2FsZ29yaXRobV0gJiYgIWFsZ29yaXRobXNbYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCldKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpZ2VzdCBtZXRob2Qgbm90IHN1cHBvcnRlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBIYXNoKCk7XG59XG5leHBvcnRzLmNyZWF0ZUhhc2ggPSBjcmVhdGVIYXNoO1xuY2xhc3MgSGFzaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIGZpcnN0IDMyIGJpdHMgb2YgdGhlIGZyYWN0aW9uYWwgcGFydHMgb2YgdGhlIHNxdWFyZSByb290cyBvZiB0aGUgZmlyc3QgOCBwcmltZXMgMi4uMTlcbiAgICAgICAgdGhpcy5BID0gMHg2YTA5ZTY2NyB8IDA7XG4gICAgICAgIHRoaXMuQiA9IDB4YmI2N2FlODUgfCAwO1xuICAgICAgICB0aGlzLkMgPSAweDNjNmVmMzcyIHwgMDtcbiAgICAgICAgdGhpcy5EID0gMHhhNTRmZjUzYSB8IDA7XG4gICAgICAgIHRoaXMuRSA9IDB4NTEwZTUyN2YgfCAwO1xuICAgICAgICB0aGlzLkYgPSAweDliMDU2ODhjIHwgMDtcbiAgICAgICAgdGhpcy5HID0gMHgxZjgzZDlhYiB8IDA7XG4gICAgICAgIHRoaXMuSCA9IDB4NWJlMGNkMTkgfCAwO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgICAgdGhpcy5fc3AgPSAwOyAvLyBzdXJyb2dhdGUgcGFpclxuICAgICAgICBpZiAoIXNoYXJlZEJ1ZmZlciB8fCBzaGFyZWRPZmZzZXQgPj0gODAwMCAvKiBhbGxvY1RvdGFsICovKSB7XG4gICAgICAgICAgICBzaGFyZWRCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoODAwMCAvKiBhbGxvY1RvdGFsICovKTtcbiAgICAgICAgICAgIHNoYXJlZE9mZnNldCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYnl0ZSA9IG5ldyBVaW50OEFycmF5KHNoYXJlZEJ1ZmZlciwgc2hhcmVkT2Zmc2V0LCA4MCAvKiBhbGxvY0J5dGVzICovKTtcbiAgICAgICAgdGhpcy5fd29yZCA9IG5ldyBJbnQzMkFycmF5KHNoYXJlZEJ1ZmZlciwgc2hhcmVkT2Zmc2V0LCAyMCAvKiBhbGxvY1dvcmRzICovKTtcbiAgICAgICAgc2hhcmVkT2Zmc2V0ICs9IDgwIC8qIGFsbG9jQnl0ZXMgKi87XG4gICAgfVxuICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIC8vIGRhdGE6IHN0cmluZ1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91dGY4KGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRhdGE6IHVuZGVmaW5lZFxuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCB0eXBlOiBcIiArIHR5cGVvZiBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBieXRlT2Zmc2V0ID0gZGF0YS5ieXRlT2Zmc2V0O1xuICAgICAgICBjb25zdCBsZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgIGxldCBibG9ja3MgPSAobGVuZ3RoIC8gNjQgLyogaW5wdXRCeXRlcyAqLykgfCAwO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgLy8gbG9uZ2VyIHRoYW4gMSBibG9ja1xuICAgICAgICBpZiAoYmxvY2tzICYmICEoYnl0ZU9mZnNldCAmIDMpICYmICEodGhpcy5fc2l6ZSAlIDY0IC8qIGlucHV0Qnl0ZXMgKi8pKSB7XG4gICAgICAgICAgICBjb25zdCBibG9jayA9IG5ldyBJbnQzMkFycmF5KGRhdGEuYnVmZmVyLCBieXRlT2Zmc2V0LCBibG9ja3MgKiAxNiAvKiBpbnB1dFdvcmRzICovKTtcbiAgICAgICAgICAgIHdoaWxlIChibG9ja3MtLSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ludDMyKGJsb2NrLCBvZmZzZXQgPj4gMik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDY0IC8qIGlucHV0Qnl0ZXMgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zaXplICs9IG9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICAvLyBkYXRhOiBUeXBlZEFycmF5IHwgRGF0YVZpZXdcbiAgICAgICAgY29uc3QgQllURVNfUEVSX0VMRU1FTlQgPSBkYXRhLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgICAgICBpZiAoQllURVNfUEVSX0VMRU1FTlQgIT09IDEgJiYgZGF0YS5idWZmZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3QgPSBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgYnl0ZU9mZnNldCArIG9mZnNldCwgbGVuZ3RoIC0gb2Zmc2V0KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91aW50OChyZXN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBubyBtb3JlIGJ5dGVzXG4gICAgICAgIGlmIChvZmZzZXQgPT09IGxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAvLyBkYXRhOiBVaW50OEFycmF5IHwgSW50OEFycmF5XG4gICAgICAgIHJldHVybiB0aGlzLl91aW50OChkYXRhLCBvZmZzZXQpO1xuICAgIH1cbiAgICBfdWludDgoZGF0YSwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHsgX2J5dGUsIF93b3JkIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9zaXplICUgNjQgLyogaW5wdXRCeXRlcyAqLztcbiAgICAgICAgICAgIGxldCBpbmRleCA9IHN0YXJ0O1xuICAgICAgICAgICAgd2hpbGUgKG9mZnNldCA8IGxlbmd0aCAmJiBpbmRleCA8IDY0IC8qIGlucHV0Qnl0ZXMgKi8pIHtcbiAgICAgICAgICAgICAgICBfYnl0ZVtpbmRleCsrXSA9IGRhdGFbb2Zmc2V0KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDY0IC8qIGlucHV0Qnl0ZXMgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnQzMihfd29yZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zaXplICs9IGluZGV4IC0gc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIF91dGY4KHRleHQpIHtcbiAgICAgICAgY29uc3QgeyBfYnl0ZSwgX3dvcmQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRleHQubGVuZ3RoO1xuICAgICAgICBsZXQgc3Vycm9nYXRlID0gdGhpcy5fc3A7XG4gICAgICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IGxlbmd0aDspIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fc2l6ZSAlIDY0IC8qIGlucHV0Qnl0ZXMgKi87XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBzdGFydDtcbiAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBsZW5ndGggJiYgaW5kZXggPCA2NCAvKiBpbnB1dEJ5dGVzICovKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQob2Zmc2V0KyspIHwgMDtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA8IDB4ODApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQVNDSUkgY2hhcmFjdGVyc1xuICAgICAgICAgICAgICAgICAgICBfYnl0ZVtpbmRleCsrXSA9IGNvZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPCAweDgwMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAyIGJ5dGVzXG4gICAgICAgICAgICAgICAgICAgIF9ieXRlW2luZGV4KytdID0gMHhDMCB8IChjb2RlID4+PiA2KTtcbiAgICAgICAgICAgICAgICAgICAgX2J5dGVbaW5kZXgrK10gPSAweDgwIHwgKGNvZGUgJiAweDNGKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA8IDB4RDgwMCB8fCBjb2RlID4gMHhERkZGKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIDMgYnl0ZXNcbiAgICAgICAgICAgICAgICAgICAgX2J5dGVbaW5kZXgrK10gPSAweEUwIHwgKGNvZGUgPj4+IDEyKTtcbiAgICAgICAgICAgICAgICAgICAgX2J5dGVbaW5kZXgrK10gPSAweDgwIHwgKChjb2RlID4+PiA2KSAmIDB4M0YpO1xuICAgICAgICAgICAgICAgICAgICBfYnl0ZVtpbmRleCsrXSA9IDB4ODAgfCAoY29kZSAmIDB4M0YpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdXJyb2dhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gNCBieXRlcyAtIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSAoKHN1cnJvZ2F0ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoY29kZSAmIDB4M0ZGKSArIDB4MTAwMDA7XG4gICAgICAgICAgICAgICAgICAgIF9ieXRlW2luZGV4KytdID0gMHhGMCB8IChjb2RlID4+PiAxOCk7XG4gICAgICAgICAgICAgICAgICAgIF9ieXRlW2luZGV4KytdID0gMHg4MCB8ICgoY29kZSA+Pj4gMTIpICYgMHgzRik7XG4gICAgICAgICAgICAgICAgICAgIF9ieXRlW2luZGV4KytdID0gMHg4MCB8ICgoY29kZSA+Pj4gNikgJiAweDNGKTtcbiAgICAgICAgICAgICAgICAgICAgX2J5dGVbaW5kZXgrK10gPSAweDgwIHwgKGNvZGUgJiAweDNGKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vycm9nYXRlID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cnJvZ2F0ZSA9IGNvZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDY0IC8qIGlucHV0Qnl0ZXMgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnQzMihfd29yZCk7XG4gICAgICAgICAgICAgICAgX3dvcmRbMF0gPSBfd29yZFsxNiAvKiBpbnB1dFdvcmRzICovXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NpemUgKz0gaW5kZXggLSBzdGFydDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zcCA9IHN1cnJvZ2F0ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIF9pbnQzMihkYXRhLCBvZmZzZXQpIHtcbiAgICAgICAgbGV0IHsgQSwgQiwgQywgRCwgRSwgRiwgRywgSCB9ID0gdGhpcztcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICAgICAgICB3aGlsZSAoaSA8IDE2IC8qIGlucHV0V29yZHMgKi8pIHtcbiAgICAgICAgICAgIFdbaSsrXSA9IHN3YXAzMihkYXRhW29mZnNldCsrXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMTYgLyogaW5wdXRXb3JkcyAqLzsgaSA8IDY0IC8qIHdvcmtXb3JkcyAqLzsgaSsrKSB7XG4gICAgICAgICAgICBXW2ldID0gKGdhbW1hMShXW2kgLSAyXSkgKyBXW2kgLSA3XSArIGdhbW1hMChXW2kgLSAxNV0pICsgV1tpIC0gMTZdKSB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDY0IC8qIHdvcmtXb3JkcyAqLzsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBUMSA9IChIICsgc2lnbWExKEUpICsgY2goRSwgRiwgRykgKyBLW2ldICsgV1tpXSkgfCAwO1xuICAgICAgICAgICAgY29uc3QgVDIgPSAoc2lnbWEwKEEpICsgbWFqKEEsIEIsIEMpKSB8IDA7XG4gICAgICAgICAgICBIID0gRztcbiAgICAgICAgICAgIEcgPSBGO1xuICAgICAgICAgICAgRiA9IEU7XG4gICAgICAgICAgICBFID0gKEQgKyBUMSkgfCAwO1xuICAgICAgICAgICAgRCA9IEM7XG4gICAgICAgICAgICBDID0gQjtcbiAgICAgICAgICAgIEIgPSBBO1xuICAgICAgICAgICAgQSA9IChUMSArIFQyKSB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5BID0gKEEgKyB0aGlzLkEpIHwgMDtcbiAgICAgICAgdGhpcy5CID0gKEIgKyB0aGlzLkIpIHwgMDtcbiAgICAgICAgdGhpcy5DID0gKEMgKyB0aGlzLkMpIHwgMDtcbiAgICAgICAgdGhpcy5EID0gKEQgKyB0aGlzLkQpIHwgMDtcbiAgICAgICAgdGhpcy5FID0gKEUgKyB0aGlzLkUpIHwgMDtcbiAgICAgICAgdGhpcy5GID0gKEYgKyB0aGlzLkYpIHwgMDtcbiAgICAgICAgdGhpcy5HID0gKEcgKyB0aGlzLkcpIHwgMDtcbiAgICAgICAgdGhpcy5IID0gKEggKyB0aGlzLkgpIHwgMDtcbiAgICB9XG4gICAgZGlnZXN0KGVuY29kaW5nKSB7XG4gICAgICAgIGNvbnN0IHsgX2J5dGUsIF93b3JkIH0gPSB0aGlzO1xuICAgICAgICBsZXQgaSA9ICh0aGlzLl9zaXplICUgNjQgLyogaW5wdXRCeXRlcyAqLykgfCAwO1xuICAgICAgICBfYnl0ZVtpKytdID0gMHg4MDtcbiAgICAgICAgLy8gcGFkIDAgZm9yIGN1cnJlbnQgd29yZFxuICAgICAgICB3aGlsZSAoaSAmIDMpIHtcbiAgICAgICAgICAgIF9ieXRlW2krK10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGkgPj49IDI7XG4gICAgICAgIGlmIChpID4gMTQgLyogaGlnaEluZGV4ICovKSB7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IDE2IC8qIGlucHV0V29yZHMgKi8pIHtcbiAgICAgICAgICAgICAgICBfd29yZFtpKytdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgdGhpcy5faW50MzIoX3dvcmQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBhZCAwIGZvciByZXN0IHdvcmRzXG4gICAgICAgIHdoaWxlIChpIDwgMTYgLyogaW5wdXRXb3JkcyAqLykge1xuICAgICAgICAgICAgX3dvcmRbaSsrXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW5wdXQgc2l6ZVxuICAgICAgICBjb25zdCBiaXRzNjQgPSB0aGlzLl9zaXplICogODtcbiAgICAgICAgY29uc3QgbG93MzIgPSAoYml0czY0ICYgMHhmZmZmZmZmZikgPj4+IDA7XG4gICAgICAgIGNvbnN0IGhpZ2gzMiA9IChiaXRzNjQgLSBsb3czMikgLyAweDEwMDAwMDAwMDtcbiAgICAgICAgaWYgKGhpZ2gzMilcbiAgICAgICAgICAgIF93b3JkWzE0IC8qIGhpZ2hJbmRleCAqL10gPSBzd2FwMzIoaGlnaDMyKTtcbiAgICAgICAgaWYgKGxvdzMyKVxuICAgICAgICAgICAgX3dvcmRbMTUgLyogbG93SW5kZXggKi9dID0gc3dhcDMyKGxvdzMyKTtcbiAgICAgICAgdGhpcy5faW50MzIoX3dvcmQpO1xuICAgICAgICByZXR1cm4gKGVuY29kaW5nID09PSBcImhleFwiKSA/IHRoaXMuX2hleCgpIDogdGhpcy5fYmluKCk7XG4gICAgfVxuICAgIF9oZXgoKSB7XG4gICAgICAgIGNvbnN0IHsgQSwgQiwgQywgRCwgRSwgRiwgRywgSCB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGhleDMyKEEpICsgaGV4MzIoQikgKyBoZXgzMihDKSArIGhleDMyKEQpICsgaGV4MzIoRSkgKyBoZXgzMihGKSArIGhleDMyKEcpICsgaGV4MzIoSCk7XG4gICAgfVxuICAgIF9iaW4oKSB7XG4gICAgICAgIGNvbnN0IHsgQSwgQiwgQywgRCwgRSwgRiwgRywgSCwgX2J5dGUsIF93b3JkIH0gPSB0aGlzO1xuICAgICAgICBfd29yZFswXSA9IHN3YXAzMihBKTtcbiAgICAgICAgX3dvcmRbMV0gPSBzd2FwMzIoQik7XG4gICAgICAgIF93b3JkWzJdID0gc3dhcDMyKEMpO1xuICAgICAgICBfd29yZFszXSA9IHN3YXAzMihEKTtcbiAgICAgICAgX3dvcmRbNF0gPSBzd2FwMzIoRSk7XG4gICAgICAgIF93b3JkWzVdID0gc3dhcDMyKEYpO1xuICAgICAgICBfd29yZFs2XSA9IHN3YXAzMihHKTtcbiAgICAgICAgX3dvcmRbN10gPSBzd2FwMzIoSCk7XG4gICAgICAgIHJldHVybiBfYnl0ZS5zbGljZSgwLCAzMik7XG4gICAgfVxufVxuZXhwb3J0cy5IYXNoID0gSGFzaDtcbmNvbnN0IFcgPSBuZXcgSW50MzJBcnJheSg2NCAvKiB3b3JrV29yZHMgKi8pO1xubGV0IHNoYXJlZEJ1ZmZlcjtcbmxldCBzaGFyZWRPZmZzZXQgPSAwO1xuY29uc3QgaGV4MzIgPSBudW0gPT4gKG51bSArIDB4MTAwMDAwMDAwKS50b1N0cmluZygxNikuc3Vic3RyKC04KTtcbmNvbnN0IHN3YXBMRSA9IChjID0+ICgoKGMgPDwgMjQpICYgMHhmZjAwMDAwMCkgfCAoKGMgPDwgOCkgJiAweGZmMDAwMCkgfCAoKGMgPj4gOCkgJiAweGZmMDApIHwgKChjID4+IDI0KSAmIDB4ZmYpKSk7XG5jb25zdCBzd2FwQkUgPSAoYyA9PiBjKTtcbmNvbnN0IHN3YXAzMiA9IGlzQkUoKSA/IHN3YXBCRSA6IHN3YXBMRTtcbmNvbnN0IGNoID0gKHgsIHksIHopID0+ICh6IF4gKHggJiAoeSBeIHopKSk7XG5jb25zdCBtYWogPSAoeCwgeSwgeikgPT4gKCh4ICYgeSkgfCAoeiAmICh4IHwgeSkpKTtcbmNvbnN0IHNpZ21hMCA9IHggPT4gKCh4ID4+PiAyIHwgeCA8PCAzMCkgXiAoeCA+Pj4gMTMgfCB4IDw8IDE5KSBeICh4ID4+PiAyMiB8IHggPDwgMTApKTtcbmNvbnN0IHNpZ21hMSA9IHggPT4gKCh4ID4+PiA2IHwgeCA8PCAyNikgXiAoeCA+Pj4gMTEgfCB4IDw8IDIxKSBeICh4ID4+PiAyNSB8IHggPDwgNykpO1xuY29uc3QgZ2FtbWEwID0geCA9PiAoKHggPj4+IDcgfCB4IDw8IDI1KSBeICh4ID4+PiAxOCB8IHggPDwgMTQpIF4gKHggPj4+IDMpKTtcbmNvbnN0IGdhbW1hMSA9IHggPT4gKCh4ID4+PiAxNyB8IHggPDwgMTUpIF4gKHggPj4+IDE5IHwgeCA8PCAxMykgXiAoeCA+Pj4gMTApKTtcbmZ1bmN0aW9uIGlzQkUoKSB7XG4gICAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsweEZFRkZdKS5idWZmZXIpOyAvLyBCT01cbiAgICByZXR1cm4gKGJ1ZlswXSA9PT0gMHhGRSk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IEpzb25WYWx1ZSB9IGZyb20gJyMvdXRpbC9iZWx0JztcbmltcG9ydCB7IGluc3RhbnRpYXRlUmlwZW1kMTYwLCBpbnN0YW50aWF0ZVNoYTI1NiwgUmlwZW1kMTYwLCBTaGEyNTYgfSBmcm9tICdAc29sYXItcmVwdWJsaWMvd2FzbS1zZWNwMjU2azEnO1xuaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ3NoYTI1Ni11aW50OGFycmF5JztcblxuLyoqXG4gKiBQZXJmb3JtcyBTSEEtMjU2IGhhc2ggb24gdGhlIGdpdmVuIGRhdGEuXG4gKiBAcGFyYW0gYXR1OF9kYXRhIGRhdGEgdG8gaGFzaFxuICogQHJldHVybnMgdGhlIGhhc2ggZGlnZXN0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaGEyNTYoYXR1OF9kYXRhOiBVaW50OEFycmF5KTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG5cdHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGF0dThfZGF0YSkpO1xufVxuXG5cbi8qXG4qIFBlcmZvcm1zIFNIQS0yNTYgaGFzaCBvbiB0aGUgZ2l2ZW4gZGF0YSBzeW5jaHJvbm91c2x5IChvbmx5IHN1aXRhYmxlIGZvciBub24tc2VjdXJlIGFwcGxpY2F0aW9ucykuXG4qIEBwYXJhbSBhdHU4X2RhdGEgZGF0YSB0byBoYXNoXG4qIEByZXR1cm5zIHRoZSBoYXNoIGRpZ2VzdFxuKi9cbmV4cG9ydCBjb25zdCBzaGEyNTZfc3luY19pbnNlY3VyZSA9IChhdHU4X2RhdGE6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5ID0+IGNyZWF0ZUhhc2goKS51cGRhdGUoYXR1OF9kYXRhKS5kaWdlc3QoKTtcblxuXG5sZXQgeV9zaGEyNTY6IFNoYTI1NjtcbnZvaWQgaW5zdGFudGlhdGVTaGEyNTYoKS50aGVuKHkgPT4geV9zaGEyNTYgPSB5KTtcblxuLypcbiogUGVyZm9ybXMgU0hBLTI1NiBoYXNoIG9uIHRoZSBnaXZlbiBkYXRhIHN5bmNocm9ub3VzbHlcbiogQHBhcmFtIGF0dThfZGF0YSBkYXRhIHRvIGhhc2hcbiogQHJldHVybnMgdGhlIGhhc2ggZGlnZXN0XG4qL1xuZXhwb3J0IGNvbnN0IHNoYTI1Nl9zeW5jID0gKGF0dThfZGF0YTogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkgPT4geV9zaGEyNTYuZmluYWwoeV9zaGEyNTYudXBkYXRlKHlfc2hhMjU2LmluaXQoKSwgYXR1OF9kYXRhKSk7XG5cbmxldCB5X3JpcGVtZDogUmlwZW1kMTYwO1xudm9pZCBpbnN0YW50aWF0ZVJpcGVtZDE2MCgpLnRoZW4oeSA9PiB5X3JpcGVtZCA9IHkpO1xuZXhwb3J0IGNvbnN0IHJpcGVtZDE2MF9zeW5jID0gKGF0dThfZGF0YTogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkgPT4geV9yaXBlbWQuZmluYWwoeV9yaXBlbWQudXBkYXRlKHlfcmlwZW1kLmluaXQoKSwgYXR1OF9kYXRhKSk7XG5cbi8qKlxuICogUGVyZm9ybXMgU0hBLTUxMiBoYXNoIG9uIHRoZSBnaXZlbiBkYXRhLlxuICogQHBhcmFtIGF0dThfZGF0YSBkYXRhIHRvIGhhc2hcbiAqIEByZXR1cm5zIHRoZSBoYXNoIGRpZ2VzdFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hhNTEyKGF0dThfZGF0YTogVWludDhBcnJheSk6IFByb21pc2U8VWludDhBcnJheT4ge1xuXHRyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS01MTInLCBhdHU4X2RhdGEpKTtcbn1cblxuXG4vKipcbiAqIFBlcmZvcm1zIEhNQUMgc2lnbmluZyBvZiB0aGUgZ2l2ZW4gbWVzc2FnZSwgKipub3QgdGhlIGRpZ2VzdCoqLlxuICogQHBhcmFtIGF0dThfc2sgcHJpdmF0ZSBrZXlcbiAqIEBwYXJhbSBhdHU4X21lc3NhZ2UgbWVzc2FnZSB0byBzaWduLCAqKm5vdCB0aGUgZGlnZXN0KiouXG4gKiBAcmV0dXJucyBITUFDIHNpZ25hdHVyZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaG1hYyhhdHU4X3NrOiBVaW50OEFycmF5LCBhdHU4X21lc3NhZ2U6IFVpbnQ4QXJyYXksIHNpX2FsZ286ICdTSEEtMjU2J3wnU0hBLTUxMic9J1NIQS0yNTYnKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG5cdC8vIGltcG9ydCBzaWduaW5nIHByaXZhdGUga2V5XG5cdGNvbnN0IGRrX3NpZ24gPSBhd2FpdCBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgYXR1OF9zaywge1xuXHRcdG5hbWU6ICdITUFDJyxcblx0XHRoYXNoOiB7bmFtZTpzaV9hbGdvfSxcblx0fSwgZmFsc2UsIFsnc2lnbiddKTtcblxuXHQvLyBjb25zdHJ1Y3QgaG1hYyBzaWduYXR1cmVcblx0cmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuc2lnbignSE1BQycsIGRrX3NpZ24sIGF0dThfbWVzc2FnZSkpO1xufVxuXG5cbi8qKlxuICogV2lwZSB0aGUgY29udGVudHMgb2YgYSBidWZmZXIgc28gdGhhdCBzZW5zaXRpdmUgZGF0YSBkb2VzIG5vdCBvdXRsaXZlIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHplcm9fb3V0KGF0dThfZGF0YTogbnVtYmVyW10gfCBVaW50OEFycmF5KTogdm9pZCB7XG5cdC8vIG92ZXJ3cml0ZSB0aGUgY29udGVudHNcblx0YXR1OF9kYXRhLmZpbGwoMCk7XG5cblx0Ly8gbWFrZSBzdXJlIHRoZSBlbmdpbmUgZG9lcyBub3Qgb3B0aW1pemUgYXdheSB0aGUgYWJvdmUgbWVtb3J5IHdpcGUgaW5zdHJ1Y3Rpb25cblx0Ly8gQHRzLWV4cGVjdC1lcnJvciBzaWduYXR1cmUgSVMgY29tcGF0aWJsZSB3aXRoIGJvdGggdHlwZXNcblx0aWYoMCAhPT0gYXR1OF9kYXRhLnJlZHVjZSgoYywgeCkgPT4gYyArIHgsIDApKSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byB6ZXJvIG91dCBzZW5zaXRpdmUgbWVtb3J5IHJlZ2lvbicpO1xufVxuXG5cbi8qKlxuICogVVRGLTggZW5jb2RlcyB0aGUgZ2l2ZW4gdGV4dCB0byBhbiBVaW50OEFycmF5LlxuICogQHBhcmFtIHNfdGV4dCB0ZXh0IHRvIGVuY29kZVxuICogQHJldHVybnMgVVRGLTggZW5jb2RlZCBVaW50OEFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0X3RvX2J1ZmZlcihzX3RleHQ6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuXHRyZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHNfdGV4dCk7XG59XG5cblxuLyoqXG4gKiBVVEYtOCBkZWNvZGVzIHRoZSBnaXZlbiBVaW50OEFycmF5IHRvIHRleHQuXG4gKiBAcGFyYW0gYXR1OF90ZXh0IFVURi04IGVuY29kZWQgZGF0YSB0byBkZWNvZGVcbiAqIEByZXR1cm5zIHRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcl90b190ZXh0KGF0dThfdGV4dDogVWludDhBcnJheSk6IHN0cmluZyB7XG5cdHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYXR1OF90ZXh0KTtcbn1cblxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIEpTT04gc3RyaW5naWZ5IHRoZSBnaXZlbiBwcmltaXRpdmUvb2JqZWN0IGFuZCBzdWJzZXF1ZW50bHkgVVRGLTggZW5jb2RlIGl0LlxuICogQHBhcmFtIHdfanNvbiBKU09OLWNvbXBhdGlibGUgdmFsdWUgdG8gZW5jb2RlXG4gKiBAcmV0dXJucyBVVEYtOCBlbmNvZGVkIFVpbnQ4QXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGpzb25fdG9fYnVmZmVyKHdfanNvbjogSnNvblZhbHVlKTogVWludDhBcnJheSB7XG5cdHJldHVybiB0ZXh0X3RvX2J1ZmZlcihKU09OLnN0cmluZ2lmeSh3X2pzb24pKTtcbn1cblxuXG4vKipcbiAqIFVURi04IGRlY29kZXMgdGhlIGdpdmVuIFVpbnQ4QXJyYXkgYW5kIHN1YnNlcXVlbnRseSBhdHRlbXB0cyB0byBKU09OIHBhcnNlIGl0LlxuICogQHBhcmFtIGF0dThfanNvbiBVVEYtOCBlbmNvZGVkIEpTT04gc3RyaW5nIGRhdGFcbiAqIEByZXR1cm5zIHBhcnNlZCBKU09OIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJfdG9fanNvbihhdHU4X2pzb246IFVpbnQ4QXJyYXkpOiBKc29uVmFsdWUge1xuXHRyZXR1cm4gSlNPTi5wYXJzZShidWZmZXJfdG9fdGV4dChhdHU4X2pzb24pKTtcbn1cblxuXG4vKipcbiAqIENvbmNhdGVuYXRlIGEgc2VxdWVuY2Ugb2YgVWludDhBcnJheXMuXG4gKiBAcGFyYW0gYV9idWZmZXJzIHRoZSBkYXRhIHRvIGNvbmNhdGVuYXRlIGluIG9yZGVyXG4gKiBAcmV0dXJucyB0aGUgY29uY2F0ZW5hdGVkIG91dHB1dCBVaW50OEFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoYV9idWZmZXJzOiBVaW50OEFycmF5W10pOiBVaW50OEFycmF5IHtcblx0Y29uc3QgbmJfb3V0ID0gYV9idWZmZXJzLnJlZHVjZSgoY19ieXRlcywgYXR1OF9lYWNoKSA9PiBjX2J5dGVzICsgYXR1OF9lYWNoLmJ5dGVMZW5ndGgsIDApO1xuXHRjb25zdCBhdHU4X291dCA9IG5ldyBVaW50OEFycmF5KG5iX291dCk7XG5cdGxldCBpYl93cml0ZSA9IDA7XG5cdGZvcihjb25zdCBhdHU4X2VhY2ggb2YgYV9idWZmZXJzKSB7XG5cdFx0YXR1OF9vdXQuc2V0KGF0dThfZWFjaCwgaWJfd3JpdGUpO1xuXHRcdGliX3dyaXRlICs9IGF0dThfZWFjaC5ieXRlTGVuZ3RoO1xuXHR9XG5cdHJldHVybiBhdHU4X291dDtcbn1cblxuXG4vLyBjYWNoZSBmdW5jdGlvbiByZWZlcmVuY2VcbmNvbnN0IHNmY2MgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBidWZmZXIgdG8gYSBoZXggc3RyaW5nIGZvcm1hdC5cbiAqIEBwYXJhbSBhdHU4X2J1ZmZlciBpbnB1dCBidWZmZXJcbiAqIEByZXR1cm5zIG91dHB1dCBoZXggc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJfdG9faGV4KGF0dThfYnVmZmVyOiBVaW50OEFycmF5KTogc3RyaW5nIHtcblx0bGV0IHN4X2hleCA9ICcnO1xuXHRmb3IoY29uc3QgeGJfYnl0ZSBvZiBhdHU4X2J1ZmZlcikge1xuXHRcdHN4X2hleCArPSB4Yl9ieXRlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpO1xuXHR9XG5cblx0cmV0dXJuIHN4X2hleDtcbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBoZXggc3RyaW5nIGludG8gYSBidWZmZXIuXG4gKiBAcGFyYW0gc3hfaGV4IGlucHV0IGhleCBzdHJpbmdcbiAqIEByZXR1cm5zIG91dHB1dCBidWZmZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhleF90b19idWZmZXIoc3hfaGV4OiBzdHJpbmcpOiBVaW50OEFycmF5IHtcblx0Y29uc3QgbmxfaGV4ID0gc3hfaGV4Lmxlbmd0aDtcblx0aWYoMCAhPT0gbmxfaGV4ICUgMikgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGhleCBzdHJpbmcgbGVuZ3RoIGlzIG5vdCBhIG11bHRpcGxlIG9mIDJgKTtcblx0Y29uc3QgbmJfYnVmZmVyID0gbmxfaGV4IC8gMjtcblx0Y29uc3QgYXR1OF9idWZmZXIgPSBuZXcgVWludDhBcnJheShuYl9idWZmZXIpO1xuXHRmb3IobGV0IGlfYnl0ZT0wOyBpX2J5dGU8bmJfYnVmZmVyOyBpX2J5dGUrKykge1xuXHRcdGF0dThfYnVmZmVyW2lfYnl0ZV0gPSBwYXJzZUludChzeF9oZXguc2xpY2UoaV9ieXRlK2lfYnl0ZSwgaV9ieXRlK2lfYnl0ZSsyKSwgMTYpO1xuXHR9XG5cblx0cmV0dXJuIGF0dThfYnVmZmVyO1xufVxuXG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGJ1ZmZlciB0byBhIGJhc2U2NC1lbmNvZGVkIHN0cmluZy5cbiAqIEBwYXJhbSBhdHU4X2J1ZmZlciBpbnB1dCBidWZmZXJcbiAqIEByZXR1cm5zIG91dHB1dCBiYXNlNjQtZW5jb2RlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcl90b19iYXNlNjQoYXR1OF9idWZmZXI6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuXHRyZXR1cm4gZ2xvYmFsVGhpcy5idG9hKGJ1ZmZlcl90b19zdHJpbmc4KGF0dThfYnVmZmVyKSk7XG59XG5cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gYmFzZTY0LWVuY29kZWQgc3RyaW5nIHRvIGEgYnVmZmVyLlxuICogQHBhcmFtIHN4X2J1ZmZlciBpbnB1dCBiYXNlNjQtZW5jb2RlZCBzdHJpbmdcbiAqIEByZXR1cm5zIG91dHB1dCBidWZmZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NF90b19idWZmZXIoc3hfYnVmZmVyOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcblx0cmV0dXJuIHN0cmluZzhfdG9fYnVmZmVyKGdsb2JhbFRoaXMuYXRvYihzeF9idWZmZXIpKTtcbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBidWZmZXIgdG8gYSBVVEYtOCBmcmllbmRseSBjb21wYWN0IHN0cmluZy5cbiAqIEBwYXJhbSBhdHU4X2J1ZmZlciBpbnB1dCBidWZmZXJcbiAqIEByZXR1cm5zIG91dHB1dCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcl90b19zdHJpbmc4KGF0dThfYnVmZmVyOiBVaW50OEFycmF5KTogc3RyaW5nIHtcblx0Ly8gYmVuY2htYXJrcyBpbmRpY2F0ZSBzdHJpbmcgYnVpbGRpbmcgcGVyZm9ybXMgYmV0dGVyIHRoYW4gYXJyYXkgbWFwL2pvaW5cblx0bGV0IHN4X2J1ZmZlciA9ICcnO1xuXHRmb3IoY29uc3QgeGJfYnl0ZSBvZiBhdHU4X2J1ZmZlcikge1xuXHRcdHN4X2J1ZmZlciArPSBzZmNjKHhiX2J5dGUpO1xuXHR9XG5cblx0cmV0dXJuIHN4X2J1ZmZlcjtcbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBVVEYtOCBmcmllbmRseSBjb21wYWN0IHN0cmluZyB0byBhIGJ1ZmZlci5cbiAqIEBwYXJhbSBzeF9idWZmZXIgaW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJucyBvdXRwdXQgYnVmZmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmc4X3RvX2J1ZmZlcihzeF9idWZmZXI6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuXHRjb25zdCBubF9wYWlycyA9IHN4X2J1ZmZlci5sZW5ndGg7XG5cdGNvbnN0IGF0dThfYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkobmxfcGFpcnMpO1xuXHRmb3IobGV0IGlfcmVhZD0wOyBpX3JlYWQ8bmxfcGFpcnM7IGlfcmVhZCsrKSB7XG5cdFx0YXR1OF9idWZmZXJbaV9yZWFkXSA9IHN4X2J1ZmZlci5jaGFyQ29kZUF0KGlfcmVhZCk7XG5cdH1cblxuXHRyZXR1cm4gYXR1OF9idWZmZXI7XG59XG4iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0cm9vdC5DcnlwdG9KUyA9IGZhY3RvcnkoKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cblx0LypnbG9iYWxzIHdpbmRvdywgZ2xvYmFsLCByZXF1aXJlKi9cblxuXHQvKipcblx0ICogQ3J5cHRvSlMgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0dmFyIENyeXB0b0pTID0gQ3J5cHRvSlMgfHwgKGZ1bmN0aW9uIChNYXRoLCB1bmRlZmluZWQpIHtcblxuXHQgICAgdmFyIGNyeXB0bztcblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBmcm9tIHdpbmRvdyAoQnJvd3Nlcilcblx0ICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gd2luZG93LmNyeXB0bztcblx0ICAgIH1cblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBpbiB3ZWIgd29ya2VyIChCcm93c2VyKVxuXHQgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLmNyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IHNlbGYuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGZyb20gd29ya2VyXG5cdCAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMuY3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gZ2xvYmFsVGhpcy5jcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSAoZXhwZXJpbWVudGFsIElFIDExKSBjcnlwdG8gZnJvbSB3aW5kb3cgKEJyb3dzZXIpXG5cdCAgICBpZiAoIWNyeXB0byAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubXNDcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSB3aW5kb3cubXNDcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gZnJvbSBnbG9iYWwgKE5vZGVKUylcblx0ICAgIGlmICghY3J5cHRvICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5jcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGltcG9ydCB2aWEgcmVxdWlyZSAoTm9kZUpTKVxuXHQgICAgaWYgKCFjcnlwdG8gJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblx0ICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICB9XG5cblx0ICAgIC8qXG5cdCAgICAgKiBDcnlwdG9ncmFwaGljYWxseSBzZWN1cmUgcHNldWRvcmFuZG9tIG51bWJlciBnZW5lcmF0b3Jcblx0ICAgICAqXG5cdCAgICAgKiBBcyBNYXRoLnJhbmRvbSgpIGlzIGNyeXB0b2dyYXBoaWNhbGx5IG5vdCBzYWZlIHRvIHVzZVxuXHQgICAgICovXG5cdCAgICB2YXIgY3J5cHRvU2VjdXJlUmFuZG9tSW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChjcnlwdG8pIHtcblx0ICAgICAgICAgICAgLy8gVXNlIGdldFJhbmRvbVZhbHVlcyBtZXRob2QgKEJyb3dzZXIpXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMSkpWzBdO1xuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gVXNlIHJhbmRvbUJ5dGVzIG1ldGhvZCAoTm9kZUpTKVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKDQpLnJlYWRJbnQzMkxFKCk7XG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05hdGl2ZSBjcnlwdG8gbW9kdWxlIGNvdWxkIG5vdCBiZSB1c2VkIHRvIGdldCBzZWN1cmUgcmFuZG9tIG51bWJlci4nKTtcblx0ICAgIH07XG5cblx0ICAgIC8qXG5cdCAgICAgKiBMb2NhbCBwb2x5ZmlsbCBvZiBPYmplY3QuY3JlYXRlXG5cblx0ICAgICAqL1xuXHQgICAgdmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmdW5jdGlvbiBGKCkge31cblxuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgICAgICAgIHZhciBzdWJ0eXBlO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gb2JqO1xuXG5cdCAgICAgICAgICAgIHN1YnR5cGUgPSBuZXcgRigpO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gbnVsbDtcblxuXHQgICAgICAgICAgICByZXR1cm4gc3VidHlwZTtcblx0ICAgICAgICB9O1xuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDcnlwdG9KUyBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogTGlicmFyeSBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2xpYiA9IEMubGliID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQmFzZSBvYmplY3QgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZSA9IChmdW5jdGlvbiAoKSB7XG5cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZXMgUHJvcGVydGllcyB0byBjb3B5IGludG8gdGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnLFxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIH1cblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTcGF3blxuXHQgICAgICAgICAgICAgICAgdmFyIHN1YnR5cGUgPSBjcmVhdGUodGhpcyk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEF1Z21lbnRcblx0ICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLm1peEluKG92ZXJyaWRlcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBkZWZhdWx0IGluaXRpYWxpemVyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXN1YnR5cGUuaGFzT3duUHJvcGVydHkoJ2luaXQnKSB8fCB0aGlzLmluaXQgPT09IHN1YnR5cGUuaW5pdCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemVyJ3MgcHJvdG90eXBlIGlzIHRoZSBzdWJ0eXBlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0LnByb3RvdHlwZSA9IHN1YnR5cGU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlZmVyZW5jZSBzdXBlcnR5cGVcblx0ICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyID0gdGhpcztcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnR5cGU7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEV4dGVuZHMgdGhpcyBvYmplY3QgYW5kIHJ1bnMgdGhlIGluaXQgbWV0aG9kLlxuXHQgICAgICAgICAgICAgKiBBcmd1bWVudHMgdG8gY3JlYXRlKCkgd2lsbCBiZSBwYXNzZWQgdG8gaW5pdCgpLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgaW5zdGFuY2UgPSBNeVR5cGUuY3JlYXRlKCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZXh0ZW5kKCk7XG5cdCAgICAgICAgICAgICAgICBpbnN0YW5jZS5pbml0LmFwcGx5KGluc3RhbmNlLCBhcmd1bWVudHMpO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBvYmplY3QuXG5cdCAgICAgICAgICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGFkZCBzb21lIGxvZ2ljIHdoZW4geW91ciBvYmplY3RzIGFyZSBjcmVhdGVkLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgICAgICAvLyAuLi5cblx0ICAgICAgICAgICAgICogICAgICAgICB9XG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ29waWVzIHByb3BlcnRpZXMgaW50byB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gbWl4IGluLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgTXlUeXBlLm1peEluKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJ1xuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBtaXhJbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBJRSB3b24ndCBjb3B5IHRvU3RyaW5nIHVzaW5nIHRoZSBsb29wIGFib3ZlXG5cdCAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJpbmcgPSBwcm9wZXJ0aWVzLnRvU3RyaW5nO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSBpbnN0YW5jZS5jbG9uZSgpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNpZ0J5dGVzIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICovXG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSwgNik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xuXHQgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogNDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIHdvcmQgYXJyYXkgdG8gYSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXIgKE9wdGlvbmFsKSBUaGUgZW5jb2Rpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBDcnlwdG9KUy5lbmMuSGV4XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5ICsgJyc7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoZW5jb2RlciB8fCBIZXgpLnN0cmluZ2lmeSh0aGlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uY2F0ZW5hdGVzIGEgd29yZCBhcnJheSB0byB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5IHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkxLmNvbmNhdCh3b3JkQXJyYXkyKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb25jYXQ6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB0aGlzV29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhhdFdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhpc1NpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIHRoYXRTaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0c1xuXHQgICAgICAgICAgICB0aGlzLmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29uY2F0XG5cdCAgICAgICAgICAgIGlmICh0aGlzU2lnQnl0ZXMgJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSBieXRlIGF0IGEgdGltZVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0Qnl0ZSA9ICh0aGF0V29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdIHw9IHRoYXRCeXRlIDw8ICgyNCAtICgodGhpc1NpZ0J5dGVzICsgaSkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gQ29weSBvbmUgd29yZCBhdCBhIHRpbWVcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhhdFNpZ0J5dGVzOyBqICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzV29yZHNbKHRoaXNTaWdCeXRlcyArIGopID4+PiAyXSA9IHRoYXRXb3Jkc1tqID4+PiAyXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzICs9IHRoYXRTaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlbW92ZXMgaW5zaWduaWZpY2FudCBiaXRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkuY2xhbXAoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbGFtcDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcFxuXHQgICAgICAgICAgICB3b3Jkc1tzaWdCeXRlcyA+Pj4gMl0gJj0gMHhmZmZmZmZmZiA8PCAoMzIgLSAoc2lnQnl0ZXMgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB3b3Jkcy5sZW5ndGggPSBNYXRoLmNlaWwoc2lnQnl0ZXMgLyA0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IHdvcmRBcnJheS5jbG9uZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHdvcmQgYXJyYXkgZmlsbGVkIHdpdGggcmFuZG9tIGJ5dGVzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG5CeXRlcyBUaGUgbnVtYmVyIG9mIHJhbmRvbSBieXRlcyB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHJhbmRvbSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oMTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJhbmRvbTogZnVuY3Rpb24gKG5CeXRlcykge1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5CeXRlczsgaSArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKGNyeXB0b1NlY3VyZVJhbmRvbUludCgpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIG5CeXRlcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRW5jb2RlciBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogSGV4IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgSGV4ID0gQ19lbmMuSGV4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhleFN0cmluZyA9IENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBoZXhDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgPj4+IDQpLnRvU3RyaW5nKDE2KSk7XG5cdCAgICAgICAgICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlICYgMHgwZikudG9TdHJpbmcoMTYpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBoZXhDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBoZXggc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZXhTdHIgVGhlIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShoZXhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaGV4U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoZXhTdHJMZW5ndGggPSBoZXhTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGV4U3RyTGVuZ3RoOyBpICs9IDIpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDNdIHw9IHBhcnNlSW50KGhleFN0ci5zdWJzdHIoaSwgMiksIDE2KSA8PCAoMjQgLSAoaSAlIDgpICogNCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBoZXhTdHJMZW5ndGggLyAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIExhdGluMSBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIExhdGluMSA9IENfZW5jLkxhdGluMSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBsYXRpbjFTdHJpbmcgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgbGF0aW4xQ2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICBsYXRpbjFDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYml0ZSkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGxhdGluMUNoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIExhdGluMSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxhdGluMVN0ciBUaGUgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnBhcnNlKGxhdGluMVN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChsYXRpbjFTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGxhdGluMVN0ckxlbmd0aCA9IGxhdGluMVN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRpbjFTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gKGxhdGluMVN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZikgPDwgKDI0IC0gKGkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbGF0aW4xU3RyTGVuZ3RoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFVURi04IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0ZjggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHV0ZjhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmOC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKExhdGluMS5zdHJpbmdpZnkod29yZEFycmF5KSkpO1xuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbGZvcm1lZCBVVEYtOCBkYXRhJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtOCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHV0ZjhTdHIgVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh1dGY4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjhTdHIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIExhdGluMS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodXRmOFN0cikpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJ1ZmZlcmVkIGJsb2NrIGFsZ29yaXRobSB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBUaGUgcHJvcGVydHkgYmxvY2tTaXplIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gYSBjb25jcmV0ZSBzdWJ0eXBlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfbWluQnVmZmVyU2l6ZSBUaGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IHNob3VsZCBiZSBrZXB0IHVucHJvY2Vzc2VkIGluIHRoZSBidWZmZXIuIERlZmF1bHQ6IDBcblx0ICAgICAqL1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGRhdGEgYnVmZmVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBXb3JkQXJyYXkuaW5pdCgpO1xuXHQgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzID0gMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBuZXcgZGF0YSB0byB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGJ1ZmZlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBhcHBlbmQuIFN0cmluZ3MgYXJlIGNvbnZlcnRlZCB0byBhIFdvcmRBcnJheSB1c2luZyBVVEYtOC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9hcHBlbmQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBkYXRhID0gVXRmOC5wYXJzZShkYXRhKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9kYXRhLmNvbmNhdChkYXRhKTtcblx0ICAgICAgICAgICAgdGhpcy5fbkRhdGFCeXRlcyArPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBQcm9jZXNzZXMgYXZhaWxhYmxlIGRhdGEgYmxvY2tzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBfZG9Qcm9jZXNzQmxvY2sob2Zmc2V0KSwgd2hpY2ggbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBhIGNvbmNyZXRlIHN1YnR5cGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvRmx1c2ggV2hldGhlciBhbGwgYmxvY2tzIGFuZCBwYXJ0aWFsIGJsb2NrcyBzaG91bGQgYmUgcHJvY2Vzc2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcHJvY2Vzc2VkIGRhdGEuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcygpO1xuXHQgICAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoISEnZmx1c2gnKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcHJvY2VzczogZnVuY3Rpb24gKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFdvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVNpZ0J5dGVzID0gZGF0YS5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IGJsb2NrcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbkJsb2Nrc1JlYWR5ID0gZGF0YVNpZ0J5dGVzIC8gYmxvY2tTaXplQnl0ZXM7XG5cdCAgICAgICAgICAgIGlmIChkb0ZsdXNoKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBSb3VuZCB1cCB0byBpbmNsdWRlIHBhcnRpYWwgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICBuQmxvY2tzUmVhZHkgPSBNYXRoLmNlaWwobkJsb2Nrc1JlYWR5KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIFJvdW5kIGRvd24gdG8gaW5jbHVkZSBvbmx5IGZ1bGwgYmxvY2tzLFxuXHQgICAgICAgICAgICAgICAgLy8gbGVzcyB0aGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IG11c3QgcmVtYWluIGluIHRoZSBidWZmZXJcblx0ICAgICAgICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGgubWF4KChuQmxvY2tzUmVhZHkgfCAwKSAtIHRoaXMuX21pbkJ1ZmZlclNpemUsIDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgd29yZHMgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5Xb3Jkc1JlYWR5ID0gbkJsb2Nrc1JlYWR5ICogYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IGJ5dGVzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuQnl0ZXNSZWFkeSA9IE1hdGgubWluKG5Xb3Jkc1JlYWR5ICogNCwgZGF0YVNpZ0J5dGVzKTtcblxuXHQgICAgICAgICAgICAvLyBQcm9jZXNzIGJsb2Nrc1xuXHQgICAgICAgICAgICBpZiAobldvcmRzUmVhZHkpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IG5Xb3Jkc1JlYWR5OyBvZmZzZXQgKz0gYmxvY2tTaXplKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1hbGdvcml0aG0gbG9naWNcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb1Byb2Nlc3NCbG9jayhkYXRhV29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBwcm9jZXNzZWQgd29yZHNcblx0ICAgICAgICAgICAgICAgIHByb2Nlc3NlZFdvcmRzID0gZGF0YVdvcmRzLnNwbGljZSgwLCBuV29yZHNSZWFkeSk7XG5cdCAgICAgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5CeXRlc1JlYWR5O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHByb2Nlc3NlZFdvcmRzLCBuQnl0ZXNSZWFkeSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9kYXRhID0gdGhpcy5fZGF0YS5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX21pbkJ1ZmZlclNpemU6IDBcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGhhc2hlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgaGFzaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxNiAoNTEyIGJpdHMpXG5cdCAgICAgKi9cblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXIgPSBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoKSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgaGFzaCBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2hlciA9IENyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgaGFzaGVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBSZXNldCBkYXRhIGJ1ZmZlclxuXHQgICAgICAgICAgICBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWNcblx0ICAgICAgICAgICAgdGhpcy5fZG9SZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVcGRhdGVzIHRoaXMgaGFzaGVyIHdpdGggYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0hhc2hlcn0gVGhpcyBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGhhc2hcblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBoYXNoIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgbWVzc2FnZSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5fZG9GaW5hbGl6ZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDUxMi8zMixcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byBhIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaGFzaGVyLmluaXQoY2ZnKS5maW5hbGl6ZShtZXNzYWdlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UgaW4gdGhpcyBITUFDIGhlbHBlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBIbWFjU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhtYWNIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBrZXkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ19hbGdvLkhNQUMuaW5pdChoYXNoZXIsIGtleSkuZmluYWxpemUobWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWxnb3JpdGhtIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbyA9IHt9O1xuXG5cdCAgICByZXR1cm4gQztcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoTWF0aCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIEluaXRpYWxpemF0aW9uIGFuZCByb3VuZCBjb25zdGFudHMgdGFibGVzXG5cdCAgICB2YXIgSCA9IFtdO1xuXHQgICAgdmFyIEsgPSBbXTtcblxuXHQgICAgLy8gQ29tcHV0ZSBjb25zdGFudHNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZnVuY3Rpb24gaXNQcmltZShuKSB7XG5cdCAgICAgICAgICAgIHZhciBzcXJ0TiA9IE1hdGguc3FydChuKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgZmFjdG9yID0gMjsgZmFjdG9yIDw9IHNxcnROOyBmYWN0b3IrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKCEobiAlIGZhY3RvcikpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmdW5jdGlvbiBnZXRGcmFjdGlvbmFsQml0cyhuKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoKG4gLSAobiB8IDApKSAqIDB4MTAwMDAwMDAwKSB8IDA7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIG4gPSAyO1xuXHQgICAgICAgIHZhciBuUHJpbWUgPSAwO1xuXHQgICAgICAgIHdoaWxlIChuUHJpbWUgPCA2NCkge1xuXHQgICAgICAgICAgICBpZiAoaXNQcmltZShuKSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKG5QcmltZSA8IDgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBIW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgS1tuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDMpKTtcblxuXHQgICAgICAgICAgICAgICAgblByaW1lKys7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBuKys7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0XG5cdCAgICB2YXIgVyA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0yNTYgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEyNTYgPSBDX2FsZ28uU0hBMjU2ID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChILnNsaWNlKDApKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cdCAgICAgICAgICAgIHZhciBlID0gSFs0XTtcblx0ICAgICAgICAgICAgdmFyIGYgPSBIWzVdO1xuXHQgICAgICAgICAgICB2YXIgZyA9IEhbNl07XG5cdCAgICAgICAgICAgIHZhciBoID0gSFs3XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDA7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4ID0gV1tpIC0gMTVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTAgID0gKChnYW1tYTB4IDw8IDI1KSB8IChnYW1tYTB4ID4+PiA3KSkgIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZ2FtbWEweCA8PCAxNCkgfCAoZ2FtbWEweCA+Pj4gMTgpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdhbW1hMHggPj4+IDMpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggPSBXW2kgLSAyXTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExICA9ICgoZ2FtbWExeCA8PCAxNSkgfCAoZ2FtbWExeCA+Pj4gMTcpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMXggPDwgMTMpIHwgKGdhbW1hMXggPj4+IDE5KSkgXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnYW1tYTF4ID4+PiAxMCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHZhciBjaCAgPSAoZSAmIGYpIF4gKH5lICYgZyk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqID0gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWEwID0gKChhIDw8IDMwKSB8IChhID4+PiAyKSkgXiAoKGEgPDwgMTkpIHwgKGEgPj4+IDEzKSkgXiAoKGEgPDwgMTApIHwgKGEgPj4+IDIyKSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExID0gKChlIDw8IDI2KSB8IChlID4+PiA2KSkgXiAoKGUgPDwgMjEpIHwgKGUgPj4+IDExKSkgXiAoKGUgPDwgNykgIHwgKGUgPj4+IDI1KSk7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gc2lnbWEwICsgbWFqO1xuXG5cdCAgICAgICAgICAgICAgICBoID0gZztcblx0ICAgICAgICAgICAgICAgIGcgPSBmO1xuXHQgICAgICAgICAgICAgICAgZiA9IGU7XG5cdCAgICAgICAgICAgICAgICBlID0gKGQgKyB0MSkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZCA9IGM7XG5cdCAgICAgICAgICAgICAgICBjID0gYjtcblx0ICAgICAgICAgICAgICAgIGIgPSBhO1xuXHQgICAgICAgICAgICAgICAgYSA9ICh0MSArIHQyKSB8IDA7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMDtcblx0ICAgICAgICAgICAgSFs1XSA9IChIWzVdICsgZikgfCAwO1xuXHQgICAgICAgICAgICBIWzZdID0gKEhbNl0gKyBnKSB8IDA7XG5cdCAgICAgICAgICAgIEhbN10gPSAoSFs3XSArIGgpIHwgMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEEyNTYpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTI1NihtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjU2KTtcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMjU2O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgWDMyV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXG5cdCAgICAvKipcblx0ICAgICAqIHg2NCBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX3g2NCA9IEMueDY0ID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQSA2NC1iaXQgd29yZC5cblx0ICAgICAqL1xuXHQgICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCA2NC1iaXQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIDMyIGJpdHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IDMyIGJpdHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB4NjRXb3JkID0gQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChoaWdoLCBsb3cpIHtcblx0ICAgICAgICAgICAgdGhpcy5oaWdoID0gaGlnaDtcblx0ICAgICAgICAgICAgdGhpcy5sb3cgPSBsb3c7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBOT1RzIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBuZWdhdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG5lZ2F0ZWQgPSB4NjRXb3JkLm5vdCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIG5vdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IH50aGlzLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB+dGhpcy5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJpdHdpc2UgQU5EcyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIEFORCB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBBTkRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBhbmRlZCA9IHg2NFdvcmQuYW5kKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBhbmQ6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoICYgd29yZC5oaWdoO1xuXHQgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgJiB3b3JkLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBPUnMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBPUiB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBPUmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG9yZWQgPSB4NjRXb3JkLm9yKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBvcjogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggfCB3b3JkLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyB8IHdvcmQubG93O1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIFhPUnMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBYT1Igd2l0aCB0aGlzIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgWE9SaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgeG9yZWQgPSB4NjRXb3JkLnhvcihhbm90aGVyWDY0V29yZCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8geG9yOiBmdW5jdGlvbiAod29yZCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCBeIHdvcmQuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IF4gd29yZC5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFNoaWZ0cyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSBsZWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHNoaWZ0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc2hpZnRlZCA9IHg2NFdvcmQuc2hpZnRMKDI1KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBzaGlmdEw6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIGlmIChuIDwgMzIpIHtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gKHRoaXMuaGlnaCA8PCBuKSB8ICh0aGlzLmxvdyA+Pj4gKDMyIC0gbikpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IDw8IG47XG5cdCAgICAgICAgICAgIC8vIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMubG93IDw8IChuIC0gMzIpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IDA7XG5cdCAgICAgICAgICAgIC8vIH1cblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIHJpZ2h0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHNoaWZ0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc2hpZnRlZCA9IHg2NFdvcmQuc2hpZnRSKDcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHNoaWZ0UjogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gaWYgKG4gPCAzMikge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyA+Pj4gbikgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG4pKTtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoID4+PiBuO1xuXHQgICAgICAgICAgICAvLyB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMuaGlnaCA+Pj4gKG4gLSAzMik7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IDA7XG5cdCAgICAgICAgICAgIC8vIH1cblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUm90YXRlcyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSBsZWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHJvdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHJvdGF0ZWQgPSB4NjRXb3JkLnJvdEwoMjUpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHJvdEw6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIHJldHVybiB0aGlzLnNoaWZ0TChuKS5vcih0aGlzLnNoaWZ0Uig2NCAtIG4pKTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUm90YXRlcyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSByaWdodC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byByb3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgcm90YXRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciByb3RhdGVkID0geDY0V29yZC5yb3RSKDcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHJvdFI6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIHJldHVybiB0aGlzLnNoaWZ0UihuKS5vcih0aGlzLnNoaWZ0TCg2NCAtIG4pKTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIGFkZCB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBhZGRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBhZGRlZCA9IHg2NFdvcmQuYWRkKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBhZGQ6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSAodGhpcy5sb3cgKyB3b3JkLmxvdykgfCAwO1xuXHQgICAgICAgICAgICAvLyB2YXIgY2FycnkgPSAobG93ID4+PiAwKSA8ICh0aGlzLmxvdyA+Pj4gMCkgPyAxIDogMDtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoICsgd29yZC5oaWdoICsgY2FycnkpIHwgMDtcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBbiBhcnJheSBvZiA2NC1iaXQgd29yZHMuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtBcnJheX0gd29yZHMgVGhlIGFycmF5IG9mIENyeXB0b0pTLng2NC5Xb3JkIG9iamVjdHMuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lnQnl0ZXMgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgKi9cblx0ICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXkgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyAoT3B0aW9uYWwpIEFuIGFycmF5IG9mIENyeXB0b0pTLng2NC5Xb3JkIG9iamVjdHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyksXG5cdCAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgxODE5MWExYiwgMHgxYzFkMWUxZilcblx0ICAgICAgICAgKiAgICAgXSk7XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDAwMDEwMjAzLCAweDA0MDUwNjA3KSxcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDE4MTkxYTFiLCAweDFjMWQxZTFmKVxuXHQgICAgICAgICAqICAgICBdLCAxMCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xuXHQgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogODtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIDY0LWJpdCB3b3JkIGFycmF5IHRvIGEgMzItYml0IHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDcnlwdG9KUy5saWIuV29yZEFycmF5fSBUaGlzIHdvcmQgYXJyYXkncyBkYXRhIGFzIGEgMzItYml0IHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB4MzJXb3JkQXJyYXkgPSB4NjRXb3JkQXJyYXkudG9YMzIoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1gzMjogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHg2NFdvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHg2NFdvcmRzTGVuZ3RoID0geDY0V29yZHMubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHgzMldvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeDY0V29yZHNMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHg2NFdvcmQgPSB4NjRXb3Jkc1tpXTtcblx0ICAgICAgICAgICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5oaWdoKTtcblx0ICAgICAgICAgICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5sb3cpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIFgzMldvcmRBcnJheS5jcmVhdGUoeDMyV29yZHMsIHRoaXMuc2lnQnl0ZXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkQXJyYXl9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNsb25lID0geDY0V29yZEFycmF5LmNsb25lKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIENsb25lIFwid29yZHNcIiBhcnJheVxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBjbG9uZS53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgLy8gQ2xvbmUgZWFjaCBYNjRXb3JkIG9iamVjdFxuXHQgICAgICAgICAgICB2YXIgd29yZHNMZW5ndGggPSB3b3Jkcy5sZW5ndGg7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHNMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaV0gPSB3b3Jkc1tpXS5jbG9uZSgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3g2NC1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3g2NC1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQ7XG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7XG5cdCAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgZnVuY3Rpb24gWDY0V29yZF9jcmVhdGUoKSB7XG5cdCAgICAgICAgcmV0dXJuIFg2NFdvcmQuY3JlYXRlLmFwcGx5KFg2NFdvcmQsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cblx0ICAgIC8vIENvbnN0YW50c1xuXHQgICAgdmFyIEsgPSBbXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiksIFg2NFdvcmRfY3JlYXRlKDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYpLCBYNjRXb3JkX2NyZWF0ZSgweGU5YjVkYmE1LCAweDgxODlkYmJjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDM5NTZjMjViLCAweGYzNDhiNTM4KSwgWDY0V29yZF9jcmVhdGUoMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5MjNmODJhNCwgMHhhZjE5NGY5YiksIFg2NFdvcmRfY3JlYXRlKDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIpLCBYNjRXb3JkX2NyZWF0ZSgweDEyODM1YjAxLCAweDQ1NzA2ZmJlKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDI0MzE4NWJlLCAweDRlZTRiMjhjKSwgWDY0V29yZF9jcmVhdGUoMHg1NTBjN2RjMywgMHhkNWZmYjRlMiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiksIFg2NFdvcmRfY3JlYXRlKDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUpLCBYNjRXb3JkX2NyZWF0ZSgweGMxOWJmMTc0LCAweGNmNjkyNjk0KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGU0OWI2OWMxLCAweDllZjE0YWQyKSwgWDY0V29yZF9jcmVhdGUoMHhlZmJlNDc4NiwgMHgzODRmMjVlMyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwZmMxOWRjNiwgMHg4YjhjZDViNSksIFg2NFdvcmRfY3JlYXRlKDB4MjQwY2ExY2MsIDB4NzdhYzljNjUpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUpLCBYNjRXb3JkX2NyZWF0ZSgweDRhNzQ4NGFhLCAweDZlYTZlNDgzKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDVjYjBhOWRjLCAweGJkNDFmYmQ0KSwgWDY0V29yZF9jcmVhdGUoMHg3NmY5ODhkYSwgMHg4MzExNTNiNSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiksIFg2NFdvcmRfY3JlYXRlKDB4YTgzMWM2NmQsIDB4MmRiNDMyMTApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjAwMzI3YzgsIDB4OThmYjIxM2YpLCBYNjRXb3JkX2NyZWF0ZSgweGJmNTk3ZmM3LCAweGJlZWYwZWU0KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGM2ZTAwYmYzLCAweDNkYTg4ZmMyKSwgWDY0V29yZF9jcmVhdGUoMHhkNWE3OTE0NywgMHg5MzBhYTcyNSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiksIFg2NFdvcmRfY3JlYXRlKDB4MTQyOTI5NjcsIDB4MGEwZTZlNzApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjdiNzBhODUsIDB4NDZkMjJmZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDJlMWIyMTM4LCAweDVjMjZjOTI2KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDRkMmM2ZGZjLCAweDVhYzQyYWVkKSwgWDY0V29yZF9jcmVhdGUoMHg1MzM4MGQxMywgMHg5ZDk1YjNkZiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSksIFg2NFdvcmRfY3JlYXRlKDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYpLCBYNjRXb3JkX2NyZWF0ZSgweDkyNzIyYzg1LCAweDE0ODIzNTNiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGEyYmZlOGExLCAweDRjZjEwMzY0KSwgWDY0V29yZF9jcmVhdGUoMHhhODFhNjY0YiwgMHhiYzQyMzAwMSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSksIFg2NFdvcmRfY3JlYXRlKDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgpLCBYNjRXb3JkX2NyZWF0ZSgweGQ2OTkwNjI0LCAweDU1NjVhOTEwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGY0MGUzNTg1LCAweDU3NzEyMDJhKSwgWDY0V29yZF9jcmVhdGUoMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgxOWE0YzExNiwgMHhiOGQyZDBjOCksIFg2NFdvcmRfY3JlYXRlKDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTkpLCBYNjRXb3JkX2NyZWF0ZSgweDM0YjBiY2I1LCAweGUxOWI0OGE4KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDM5MWMwY2IzLCAweGM1Yzk1YTYzKSwgWDY0V29yZF9jcmVhdGUoMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg1YjljY2E0ZiwgMHg3NzYzZTM3MyksIFg2NFdvcmRfY3JlYXRlKDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDc4YTU2MzZmLCAweDQzMTcyZjYwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDg0Yzg3ODE0LCAweGExZjBhYjcyKSwgWDY0V29yZF9jcmVhdGUoMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCksIFg2NFdvcmRfY3JlYXRlKDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTkpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUpLCBYNjRXb3JkX2NyZWF0ZSgweGM2NzE3OGYyLCAweGUzNzI1MzJiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGNhMjczZWNlLCAweGVhMjY2MTljKSwgWDY0V29yZF9jcmVhdGUoMHhkMTg2YjhjNywgMHgyMWMwYzIwNyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSksIFg2NFdvcmRfY3JlYXRlKDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEpLCBYNjRXb3JkX2NyZWF0ZSgweDBhNjM3ZGM1LCAweGEyYzg5OGE2KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDExM2Y5ODA0LCAweGJlZjkwZGFlKSwgWDY0V29yZF9jcmVhdGUoMHgxYjcxMGIzNSwgMHgxMzFjNDcxYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCksIFg2NFdvcmRfY3JlYXRlKDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMpLCBYNjRXb3JkX2NyZWF0ZSgweDQzMWQ2N2M0LCAweDljMTAwZDRjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDRjYzVkNGJlLCAweGNiM2U0MmI2KSwgWDY0V29yZF9jcmVhdGUoMHg1OTdmMjk5YywgMHhmYzY1N2UyYSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYyksIFg2NFdvcmRfY3JlYXRlKDB4NmM0NDE5OGMsIDB4NGE0NzU4MTcpXG5cdCAgICBdO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgVyA9IFtdO1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgV1tpXSA9IFg2NFdvcmRfY3JlYXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtNTEyIGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBNTEyID0gQ19hbGdvLlNIQTUxMiA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDZhMDllNjY3LCAweGYzYmNjOTA4KSwgbmV3IFg2NFdvcmQuaW5pdCgweGJiNjdhZTg1LCAweDg0Y2FhNzNiKSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYiksIG5ldyBYNjRXb3JkLmluaXQoMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEpLCBuZXcgWDY0V29yZC5pbml0KDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDFmODNkOWFiLCAweGZiNDFiZDZiKSwgbmV3IFg2NFdvcmQuaW5pdCgweDViZTBjZDE5LCAweDEzN2UyMTc5KVxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIEgwID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIEgxID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIEgyID0gSFsyXTtcblx0ICAgICAgICAgICAgdmFyIEgzID0gSFszXTtcblx0ICAgICAgICAgICAgdmFyIEg0ID0gSFs0XTtcblx0ICAgICAgICAgICAgdmFyIEg1ID0gSFs1XTtcblx0ICAgICAgICAgICAgdmFyIEg2ID0gSFs2XTtcblx0ICAgICAgICAgICAgdmFyIEg3ID0gSFs3XTtcblxuXHQgICAgICAgICAgICB2YXIgSDBoID0gSDAuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgwbCA9IEgwLmxvdztcblx0ICAgICAgICAgICAgdmFyIEgxaCA9IEgxLmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIMWwgPSBIMS5sb3c7XG5cdCAgICAgICAgICAgIHZhciBIMmggPSBIMi5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDJsID0gSDIubG93O1xuXHQgICAgICAgICAgICB2YXIgSDNoID0gSDMuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgzbCA9IEgzLmxvdztcblx0ICAgICAgICAgICAgdmFyIEg0aCA9IEg0LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBINGwgPSBINC5sb3c7XG5cdCAgICAgICAgICAgIHZhciBINWggPSBINS5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDVsID0gSDUubG93O1xuXHQgICAgICAgICAgICB2YXIgSDZoID0gSDYuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEg2bCA9IEg2Lmxvdztcblx0ICAgICAgICAgICAgdmFyIEg3aCA9IEg3LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIN2wgPSBINy5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgdmFyIGFoID0gSDBoO1xuXHQgICAgICAgICAgICB2YXIgYWwgPSBIMGw7XG5cdCAgICAgICAgICAgIHZhciBiaCA9IEgxaDtcblx0ICAgICAgICAgICAgdmFyIGJsID0gSDFsO1xuXHQgICAgICAgICAgICB2YXIgY2ggPSBIMmg7XG5cdCAgICAgICAgICAgIHZhciBjbCA9IEgybDtcblx0ICAgICAgICAgICAgdmFyIGRoID0gSDNoO1xuXHQgICAgICAgICAgICB2YXIgZGwgPSBIM2w7XG5cdCAgICAgICAgICAgIHZhciBlaCA9IEg0aDtcblx0ICAgICAgICAgICAgdmFyIGVsID0gSDRsO1xuXHQgICAgICAgICAgICB2YXIgZmggPSBINWg7XG5cdCAgICAgICAgICAgIHZhciBmbCA9IEg1bDtcblx0ICAgICAgICAgICAgdmFyIGdoID0gSDZoO1xuXHQgICAgICAgICAgICB2YXIgZ2wgPSBINmw7XG5cdCAgICAgICAgICAgIHZhciBoaCA9IEg3aDtcblx0ICAgICAgICAgICAgdmFyIGhsID0gSDdsO1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBXaWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgV2loO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIFdpID0gV1tpXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRXh0ZW5kIG1lc3NhZ2Vcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXaWggPSBXaS5oaWdoID0gTVtvZmZzZXQgKyBpICogMl0gICAgIHwgMDtcblx0ICAgICAgICAgICAgICAgICAgICBXaWwgPSBXaS5sb3cgID0gTVtvZmZzZXQgKyBpICogMiArIDFdIHwgMDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWEwXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHggID0gV1tpIC0gMTVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4aCA9IGdhbW1hMHguaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweGwgPSBnYW1tYTB4Lmxvdztcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwaCAgPSAoKGdhbW1hMHhoID4+PiAxKSB8IChnYW1tYTB4bCA8PCAzMSkpIF4gKChnYW1tYTB4aCA+Pj4gOCkgfCAoZ2FtbWEweGwgPDwgMjQpKSBeIChnYW1tYTB4aCA+Pj4gNyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMGwgID0gKChnYW1tYTB4bCA+Pj4gMSkgfCAoZ2FtbWEweGggPDwgMzEpKSBeICgoZ2FtbWEweGwgPj4+IDgpIHwgKGdhbW1hMHhoIDw8IDI0KSkgXiAoKGdhbW1hMHhsID4+PiA3KSB8IChnYW1tYTB4aCA8PCAyNSkpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWExXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggID0gV1tpIC0gMl07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXhoID0gZ2FtbWExeC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4bCA9IGdhbW1hMXgubG93O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTFoICA9ICgoZ2FtbWExeGggPj4+IDE5KSB8IChnYW1tYTF4bCA8PCAxMykpIF4gKChnYW1tYTF4aCA8PCAzKSB8IChnYW1tYTF4bCA+Pj4gMjkpKSBeIChnYW1tYTF4aCA+Pj4gNik7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMWwgID0gKChnYW1tYTF4bCA+Pj4gMTkpIHwgKGdhbW1hMXhoIDw8IDEzKSkgXiAoKGdhbW1hMXhsIDw8IDMpIHwgKGdhbW1hMXhoID4+PiAyOSkpIF4gKChnYW1tYTF4bCA+Pj4gNikgfCAoZ2FtbWExeGggPDwgMjYpKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTcgID0gV1tpIC0gN107XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpN2ggPSBXaTcuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2k3bCA9IFdpNy5sb3c7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNiAgPSBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpMTZoID0gV2kxNi5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTE2bCA9IFdpMTYubG93O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgV2lsID0gZ2FtbWEwbCArIFdpN2w7XG5cdCAgICAgICAgICAgICAgICAgICAgV2loID0gZ2FtbWEwaCArIFdpN2ggKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWEwbCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICAgICAgV2lsID0gV2lsICsgZ2FtbWExbDtcblx0ICAgICAgICAgICAgICAgICAgICBXaWggPSBXaWggKyBnYW1tYTFoICsgKChXaWwgPj4+IDApIDwgKGdhbW1hMWwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgICAgIFdpbCA9IFdpbCArIFdpMTZsO1xuXHQgICAgICAgICAgICAgICAgICAgIFdpaCA9IFdpaCArIFdpMTZoICsgKChXaWwgPj4+IDApIDwgKFdpMTZsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIFdpLmhpZ2ggPSBXaWg7XG5cdCAgICAgICAgICAgICAgICAgICAgV2kubG93ICA9IFdpbDtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgdmFyIGNoaCAgPSAoZWggJiBmaCkgXiAofmVoICYgZ2gpO1xuXHQgICAgICAgICAgICAgICAgdmFyIGNobCAgPSAoZWwgJiBmbCkgXiAofmVsICYgZ2wpO1xuXHQgICAgICAgICAgICAgICAgdmFyIG1hamggPSAoYWggJiBiaCkgXiAoYWggJiBjaCkgXiAoYmggJiBjaCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqbCA9IChhbCAmIGJsKSBeIChhbCAmIGNsKSBeIChibCAmIGNsKTtcblxuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMGggPSAoKGFoID4+PiAyOCkgfCAoYWwgPDwgNCkpICBeICgoYWggPDwgMzApICB8IChhbCA+Pj4gMikpIF4gKChhaCA8PCAyNSkgfCAoYWwgPj4+IDcpKTtcblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTBsID0gKChhbCA+Pj4gMjgpIHwgKGFoIDw8IDQpKSAgXiAoKGFsIDw8IDMwKSAgfCAoYWggPj4+IDIpKSBeICgoYWwgPDwgMjUpIHwgKGFoID4+PiA3KSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExaCA9ICgoZWggPj4+IDE0KSB8IChlbCA8PCAxOCkpIF4gKChlaCA+Pj4gMTgpIHwgKGVsIDw8IDE0KSkgXiAoKGVoIDw8IDIzKSB8IChlbCA+Pj4gOSkpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMWwgPSAoKGVsID4+PiAxNCkgfCAoZWggPDwgMTgpKSBeICgoZWwgPj4+IDE4KSB8IChlaCA8PCAxNCkpIF4gKChlbCA8PCAyMykgfCAoZWggPj4+IDkpKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2ldICsgV1tpXVxuXHQgICAgICAgICAgICAgICAgdmFyIEtpICA9IEtbaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgS2loID0gS2kuaGlnaDtcblx0ICAgICAgICAgICAgICAgIHZhciBLaWwgPSBLaS5sb3c7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSBobCArIHNpZ21hMWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gaGggKyBzaWdtYTFoICsgKCh0MWwgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBjaGw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gdDFoICsgY2hoICsgKCh0MWwgPj4+IDApIDwgKGNobCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFsID0gdDFsICsgS2lsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxaCA9IHQxaCArIEtpaCArICgodDFsID4+PiAwKSA8IChLaWwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxbCA9IHQxbCArIFdpbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWggPSB0MWggKyBXaWggKyAoKHQxbCA+Pj4gMCkgPCAoV2lsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gdDIgPSBzaWdtYTAgKyBtYWpcblx0ICAgICAgICAgICAgICAgIHZhciB0MmwgPSBzaWdtYTBsICsgbWFqbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MmggPSBzaWdtYTBoICsgbWFqaCArICgodDJsID4+PiAwKSA8IChzaWdtYTBsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgICAgICBoaCA9IGdoO1xuXHQgICAgICAgICAgICAgICAgaGwgPSBnbDtcblx0ICAgICAgICAgICAgICAgIGdoID0gZmg7XG5cdCAgICAgICAgICAgICAgICBnbCA9IGZsO1xuXHQgICAgICAgICAgICAgICAgZmggPSBlaDtcblx0ICAgICAgICAgICAgICAgIGZsID0gZWw7XG5cdCAgICAgICAgICAgICAgICBlbCA9IChkbCArIHQxbCkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZWggPSAoZGggKyB0MWggKyAoKGVsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICAgICAgICAgIGRoID0gY2g7XG5cdCAgICAgICAgICAgICAgICBkbCA9IGNsO1xuXHQgICAgICAgICAgICAgICAgY2ggPSBiaDtcblx0ICAgICAgICAgICAgICAgIGNsID0gYmw7XG5cdCAgICAgICAgICAgICAgICBiaCA9IGFoO1xuXHQgICAgICAgICAgICAgICAgYmwgPSBhbDtcblx0ICAgICAgICAgICAgICAgIGFsID0gKHQxbCArIHQybCkgfCAwO1xuXHQgICAgICAgICAgICAgICAgYWggPSAodDFoICsgdDJoICsgKChhbCA+Pj4gMCkgPCAodDFsID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSDBsID0gSDAubG93ICA9IChIMGwgKyBhbCk7XG5cdCAgICAgICAgICAgIEgwLmhpZ2ggPSAoSDBoICsgYWggKyAoKEgwbCA+Pj4gMCkgPCAoYWwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDFsID0gSDEubG93ICA9IChIMWwgKyBibCk7XG5cdCAgICAgICAgICAgIEgxLmhpZ2ggPSAoSDFoICsgYmggKyAoKEgxbCA+Pj4gMCkgPCAoYmwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDJsID0gSDIubG93ICA9IChIMmwgKyBjbCk7XG5cdCAgICAgICAgICAgIEgyLmhpZ2ggPSAoSDJoICsgY2ggKyAoKEgybCA+Pj4gMCkgPCAoY2wgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDNsID0gSDMubG93ICA9IChIM2wgKyBkbCk7XG5cdCAgICAgICAgICAgIEgzLmhpZ2ggPSAoSDNoICsgZGggKyAoKEgzbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDRsID0gSDQubG93ICA9IChINGwgKyBlbCk7XG5cdCAgICAgICAgICAgIEg0LmhpZ2ggPSAoSDRoICsgZWggKyAoKEg0bCA+Pj4gMCkgPCAoZWwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDVsID0gSDUubG93ICA9IChINWwgKyBmbCk7XG5cdCAgICAgICAgICAgIEg1LmhpZ2ggPSAoSDVoICsgZmggKyAoKEg1bCA+Pj4gMCkgPCAoZmwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDZsID0gSDYubG93ICA9IChINmwgKyBnbCk7XG5cdCAgICAgICAgICAgIEg2LmhpZ2ggPSAoSDZoICsgZ2ggKyAoKEg2bCA+Pj4gMCkgPCAoZ2wgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDdsID0gSDcubG93ICA9IChIN2wgKyBobCk7XG5cdCAgICAgICAgICAgIEg3LmhpZ2ggPSAoSDdoICsgaGggKyAoKEg3bCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzBdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzFdID0gbkJpdHNUb3RhbDtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IGhhc2ggdG8gMzItYml0IHdvcmQgYXJyYXkgYmVmb3JlIHJldHVybmluZ1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2gudG9YMzIoKTtcblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxMDI0LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTUxMignbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBNTEyKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBNTEyKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEE1MTIobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTUxMik7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBNTEyO1xuXG59KSk7IiwiXG5mdW5jdGlvbiBkZXN0cm95ZWQoKSB7XG5cdHRocm93IG5ldyBFcnJvcignTWV0aG9kIGNhbGxlZCBvbiBkZXN0cm95ZWQgU2Vuc2l0aXZlQnl0ZXMgaW5zdGFuY2UnKTtcbn1cblxuXG5jbGFzcyBTZW5zaXRpdmVCeXRlc0NvbnRleHQge1xuXHQvLyBsaXN0IG9mIGluc3RhbmNlc1xuXHRwcml2YXRlIF9hX2JpZ3VpbnRzOiBTZW5zaXRpdmVCeXRlc1tdID0gW107XG5cblxuXHQvKipcblx0ICogV3JhcHMgc3RhdGljIHJhbmRvbSgpXG5cdCAqL1xuXHRyYW5kb20obmJfc2l6ZTogbnVtYmVyKTogU2Vuc2l0aXZlQnl0ZXMge1xuXHRcdGNvbnN0IGtuX3JhbmRvbSA9IFNlbnNpdGl2ZUJ5dGVzLnJhbmRvbShuYl9zaXplKTtcblx0XHR0aGlzLl9hX2JpZ3VpbnRzLnB1c2goa25fcmFuZG9tKTtcblx0XHRyZXR1cm4ga25fcmFuZG9tO1xuXHR9XG5cblxuXHQvKipcblx0ICogV3JhcHMgc3RhdGljIGVtcHR5KClcblx0ICovXG5cdGVtcHR5KG5iX3NpemU6IG51bWJlcik6IFNlbnNpdGl2ZUJ5dGVzIHtcblx0XHRjb25zdCBrbl9lbXB0eSA9IFNlbnNpdGl2ZUJ5dGVzLnJhbmRvbShuYl9zaXplKTtcblx0XHR0aGlzLl9hX2JpZ3VpbnRzLnB1c2goa25fZW1wdHkpO1xuXHRcdHJldHVybiBrbl9lbXB0eTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIFdyYXBzIGRlZmF1bHQgY29uc3RydWN0b3IuXG5cdCAqL1xuXHRuZXcoYXR1OF9kYXRhOiBVaW50OEFycmF5KTogU2Vuc2l0aXZlQnl0ZXMge1xuXHRcdGNvbnN0IGtuX25ldyA9IG5ldyBTZW5zaXRpdmVCeXRlcyhhdHU4X2RhdGEsIHRoaXMpO1xuXHRcdHRoaXMuX2FfYmlndWludHMucHVzaChrbl9uZXcpO1xuXHRcdHJldHVybiBrbl9uZXc7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBXaXBlcyBhbGwgaW5zdGFuY2VzXG5cdCAqL1xuXHR3aXBlKCk6IHZvaWQge1xuXHRcdGZvcihjb25zdCBrbl9lYWNoIG9mIHRoaXMuX2FfYmlndWludHMpIHtcblx0XHRcdGtuX2VhY2gud2lwZSgpO1xuXHRcdH1cblx0fVxufVxuXG5cbi8qKlxuICogUHJvdmlkZXMgd3JhcHBlciBmb3IgVWludDhBcnJheSBpbnRlbmRlZCB0byBob2xkIHNlbnNpdGl2ZSBkYXRhIHN1Y2ggYXMgcHJpdmF0ZSBrZXkgbWF0ZXJpYWwuXG4gKiBSYXRoZXIgdGhhbiBhbGxvd2luZyBrZXkgbWF0ZXJpYWwgdG8gcG9zc2libHkgb3V0bGl2ZSBnYXJiYWdlIGNvbGxlY3Rpb24gaW4gbWVtb3J5IGJ5IHVzaW5nIGhleCBzdHJpbmdzXG4gKiBvciBCaWdJbnQgZHVyaW5nIGNyeXB0b2dyYXBoaWMgb3BlcmF0aW9ucywgdXNlIFVpbnQ4QXJyYXkgaW4gb3JkZXIgdG8gd2lwZSBhbGwgaW50ZXJtZWRpYXRlIHZhbHVlcyBieSBcbiAqIHplcm9pbmcgdGhlbSBvdXQgKG92ZXJ3cml0aW5nIGFsbCBieXRlcyB3aXRoIDB4MDApIGltbWVkaWF0ZWx5IGFmdGVyIHVzZS4gRXhjZXB0IGZvciB0aGUgYHdpcGVgIG1ldGhvZCxcbiAqIGluc3RhbmNlcyBhcmUgaW1tdXRhYmxlLlxuICogXG4gKiBTb21lIG1heSB3b25kZXIgd2h5IG5vdCB1c2UgVWludDMyQXJyYXkgZm9yIG1vcmUgZWZmaWNpZW50IGNvbXB1dGF0aW9ucyB3aXRoIG5hdGl2ZSAzMi1iaXQgaW50cy5cbiAqIEluIENocm9taXVtLCBgU21pYCBjYW4gc3RvcmUgMzEgYml0IHNpZ25lZCBpbnRzIG9uIDMyLWJpdCBhcmNocywgYW5kIDMyIGJpdCBzaWduZWQgaW50cyBvbiA2NC1iaXQgYXJjaHMuXG4gKiA8aHR0cHM6Ly9zb3VyY2UuY2hyb21pdW0ub3JnL2Nocm9taXVtL3Y4L3Y4LmdpdC8rL21haW46c3JjL29iamVjdHMvc21pLmg7bD0xNztkcmM9YmYwOTZlYzk2MGVlZTE4YzkxNmI0YmNiNGQ5NmJlN2IzOWY3MzJhZD5cbiAqIDxodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTc0MjY3NzMvMTY0MTE2MD5cbiAqIE1lYW5pbmcgdGhhdCAzMi1iaXQgdW5zaWduZWQgaW50ZWdlcnMgd2lsbCBhbHdheXMgZW5kIHVwIGJlaW5nIFwiYm94ZWRcIiwgaS5lLiwgcmVwcmVzZW50ZWQgYnkgcG9pbnRlcnMgdG9cbiAqIGhlYXAgb2JqZWN0cyBpbiBWOCwgbGVhZGluZyB0byB0aGUgcG90ZW50aWFsIGZvciBtb3JlIHNlbnNpdGl2ZSBnYXJiYWdlIGVuZGluZyB1cCBpbiBkZWFsbG9jYXRlZCBSQU0uXG4gKiBcbiAqIEFzIGZvciBVaW50MTZBcnJheSwgYW5vdGhlciBpc3N1ZSBhcmlzZXMuIEl0IHdvdWxkIHJlcXVpcmUgdGhlIHVzZSBvZiBEYXRhVmlldyB0byBjb250cm9sIGZvciBlbmRpYW5uZXNzXG4gKiBvbiB0aGUgcGxhdGZvcm0sIHdoaWNoIF9tYXlfIGludHJvZHVjZSB0ZW1wb3JhcnkgdmFsdWVzIChzb21lIG9mIHdoaWNoIG1heSBhbGxvY2F0ZSBvbiB0aGUgaGVhcCkgZGVwZW5kaW5nXG4gKiBvbiB0aGUgcnVudGltZSBpbXBsZW1lbnRhdGlvbi4gSG93ZXZlciwgdGhpcyBoYXMgbm90IGJlZW4gdGhvcm91Z2hseSBpbnZlc3RpZ2F0ZWQgYW5kIGluZGVlZCBtYXkgb2ZmZXIgdGhlXG4gKiBzYW1lIHByb3RlY3Rpb24gYXMgVWludDhBcnJheSB3aXRoIHBvdGVudGlhbGx5IG1vcmUgZWZmaWNpZW50IGNvbXB1dGF0aW9ucyBvbiBiaWctZW5kaWFuIHBsYXRmb3JtcyAobGl0dGxlLVxuICogZW5kaWFuIHBsYXRmb3JtcyBtYXkgb3IgbWF5IG5vdCBzZWUgcGVyZm9ybWFuY2UgaGl0IGZyb20gRGF0YVZpZXcncyBlbmRpYW4gY29udmVyc2lvbikuXG4gKiBcbiAqIEluIGNvbmNsdXNpb24sIFVpbnQ4QXJyYXkgb2ZmZXJzIHRoZSBzYWZlc3QgYnl0ZS13aXNlIGNhbGN1bGF0aW9ucyBzaW5jZSBhbGwgaW50ZWdlciBvcGVyYXRpb25zIG9uIHRoZWlyXG4gKiB2YWx1ZXMgYXJlIG1vc3QgbGlrZWx5IChnaXZlbiBhbGwgb3B0aW9ucykgdG8gbmV2ZXIgbGVhdmUgQ1BVIHJlZ2lzdGVycyBhbmQgdGh1cyBuZXZlciBlbmQgdXAgaW4gdGhlIGhlYXAuXG4gKiBcbiAqIEZvciBzYWtlIG9mIHNpbXBsaWNpdHkgYW5kIGluIHRoZSBpbnRlcmVzdCBvZiBhdm9pZGluZyBodW1hbiBlcnJvcnMsIHRoZSBgb3RoZXJgIGluc3RhbmNlIHBhc3NlZCB0byBhbnlcbiAqIG1ldGhvZCBtdXN0IGhhdmUgZXhhY3RseSB0aGUgc2FtZSBieXRlIGxlbmd0aC5cbiAqIEZvciBleGFtcGxlOlxuICogYGBgdHNcbiAqIGNvbnN0IGEgPSBVaW50OEFycmF5KDMyKTsgYVswXSA9IDB4MDE7XG4gKiBjb25zdCBiID0gVWludDhBcnJheSg2NCk7IGJbMF0gPSAweDAzO1xuICogY29uc3Qgc2EgPSBuZXcgU2Vuc2l0aXZlQnl0ZXMoYSk7XG4gKiBjb25zdCBzYiA9IG5ldyBTZW5zaXRpdmVCeXRlcyhiKTtcbiAqIHNhLnRpbWVzKHNiKTsgIC8vIHRocm93cyBFcnJvciBzaW5jZSBgc2FgIGlzIDMyIGJ5dGVzIHdoaWxlIGBzYmAgaXMgNjQgYnl0ZXNcbiAqIGBgYFxuICogXG4gKiBPbmUgY29uc2lkZXJhdGlvbiB0aGF0IHNob3VsZCBiZSBtYWRlIGlzIHdoZXRoZXIgdGltaW5nIGF0dGFja3MgYXJlIHBhcnQgb2YgdGhlIHVzZXIncyB0aHJlYXQgbW9kZWwuXG4gKiBJdCBpcyB1bmNsZWFyIGhvdywgb3IgZXZlbiBpZiwgdGhlIG1ldGhvZHMgZW1wbG95ZWQgYnkgdGhpcyBkYXRhIHN0cnVjdHVyZSBtYWtlIGl0IHN1c2NlcHRpYmxlIHRvXG4gKiB0aW1pbmcgYXR0YWNrcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Vuc2l0aXZlQnl0ZXMge1xuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBpbnN0YW5jZSB0aGF0IGFzc2lzdHMgd2l0aCBjcmVhdGluZyBhbmQgc2VjdXJlbHkgZGVhbGxvY2F0aW5nIG11bHRwbGUgU2Vuc2l0aXZlQnl0ZXNzXG5cdCAqL1xuXHRzdGF0aWMgY29udGV4dCgpOiBTZW5zaXRpdmVCeXRlc0NvbnRleHQge1xuXHRcdHJldHVybiBuZXcgU2Vuc2l0aXZlQnl0ZXNDb250ZXh0KCk7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZSBhIGNyeXB0b2dyYXBoaWNhbGx5IHJhbmRvbSB2YWx1ZSBoYXZpbmcgdGhlIGdpdmVuIG51bWJlciBvZiBieXRlcy5cblx0ICovXG5cdHN0YXRpYyByYW5kb20obmJfc2l6ZTogbnVtYmVyKTogU2Vuc2l0aXZlQnl0ZXMge1xuXHRcdHJldHVybiBuZXcgU2Vuc2l0aXZlQnl0ZXMoY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShuYl9zaXplKSkpO1xuXHR9XG5cblxuXHQvKipcblx0ICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBjcmVhdGluZyBuaWwtaW5pdGlhbGl6ZWQgbnVtYmVyIG9mIGdpdmVuIHNpemUgaW4gYnl0ZXMuXG5cdCAqL1xuXHRzdGF0aWMgZW1wdHkobmJfc2l6ZT0wKTogU2Vuc2l0aXZlQnl0ZXMge1xuXHRcdHJldHVybiBuZXcgU2Vuc2l0aXZlQnl0ZXMobmV3IFVpbnQ4QXJyYXkobmJfc2l6ZSkpO1xuXHR9XG5cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBhdHU4X2RhdGEgXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9hdHU4X2RhdGE6IFVpbnQ4QXJyYXksIHByaXZhdGUgcmVhZG9ubHkgX2tjX2NvbnRleHQ6IFNlbnNpdGl2ZUJ5dGVzQ29udGV4dHxudWxsPW51bGwpIHtcblx0XHQvLyB0aGlzLl9rY19jb250ZXh0ID0ga2NfY29udGV4dCB8fCBudWxsO1xuXHR9XG5cblxuXHQvKipcblx0ICogR2V0dGVyIGZvciB0aGlzIGluc3RhbmNlJ3MgZGF0YVxuXHQgKi9cblx0Z2V0IGRhdGEoKTogVWludDhBcnJheSB7XG5cdFx0cmV0dXJuIHRoaXMuX2F0dThfZGF0YTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIENsb25lIHRoaXMgaW5zdGFuY2Ugc28gdGhhdCBpdCBjYW4gYmUgZGVzdHJveWVkIHdpdGhvdXQgYWZmZWN0aW5nIHRoZSBjbG9uZS5cblx0ICovXG5cdGNsb25lKCk6IFNlbnNpdGl2ZUJ5dGVzIHtcblx0XHRyZXR1cm4gbmV3IFNlbnNpdGl2ZUJ5dGVzKFVpbnQ4QXJyYXkuZnJvbSh0aGlzLl9hdHU4X2RhdGEpLCB0aGlzLl9rY19jb250ZXh0KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIE11dGFibHkgY2xlYXIgdGhlIGNvbnRlbnRzIG9mIHRoaXMgb2JqZWN0IGFuZCBtYXJrIGFzIGRlc3Ryb3llZC5cblx0ICovXG5cdHdpcGUoKTogdm9pZCB7XG5cdFx0Ly8gb3ZlcndyaXRlIGNvbnRlbnRzIHdpdGggMHgwMFxuXHRcdHRoaXMuX2F0dThfZGF0YS5maWxsKDApO1xuXG5cdFx0Ly8gbWFyayBhcyBkZXN0cm95ZWRcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIGZvciBvdmVycmlkaW5nIGFsbCBtZXRob2RzXG5cdFx0dGhpcy5jbG9uZSA9IHRoaXMud2lwZSA9IHRoaXMuZGlmZiA9IHRoaXMuY29tcGFyZSA9IHRoaXMubW9kID0gZGVzdHJveWVkO1xuXG5cdFx0Ly8gb3ZlcnJpZGUgZ2V0dGVyc1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcblx0XHRcdGRhdGE6IHtcblx0XHRcdFx0Z2V0OiBkZXN0cm95ZWQsXG5cdFx0XHR9LFxuXHRcdFx0ZGlnaXRzOiB7XG5cdFx0XHRcdGdldDogZGVzdHJveWVkLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIExlZnQgc2hpZnQgYnkgdGhlIGdpdmVuIG51bWJlciBvZiBiaXRzLCBkaXNjYXJkaW5nIGV4Y2VzcyBiaXRzIHNoaWZ0ZWQgb2ZmIHRvIHRoZSBsZWZ0XG5cdCAqIGFuZCBhZGRpbmcgbmV3IHplcm8gYml0cyBzaGlmdGVkIGluIGZyb20gdGhlIHJpZ2h0LlxuXHQgKi9cblx0bGVmdFNoaWZ0KG5pX3NoaWZ0OiBudW1iZXIpOiBTZW5zaXRpdmVCeXRlcyB7XG5cdFx0Ly8gaW52YWxpZCBhcmd1bWVudFxuXHRcdGlmKE51bWJlci5pc0ludGVnZXIobmlfc2hpZnQpIHx8IG5pX3NoaWZ0IDwgMCkge1xuXHRcdFx0Ly8gcGFuaWMgd2lwZVxuXHRcdFx0dGhpcy53aXBlKCk7XG5cblx0XHRcdC8vIHJlZnVzZSBvcGVyYXRpb25cblx0XHRcdHRocm93IG5ldyBFcnJvcignUmVmdXNpbmcgdG8gbGVmdCBzaGlmdCBieSBhcmd1bWVudCB0aGF0IGlzIG5vdCBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyJyk7XG5cdFx0fVxuXG5cdFx0Ly8gbm8gc2hpZnQsIGp1c3QgY2xvbmVcblx0XHRpZigwID09PSBuaV9zaGlmdCkgcmV0dXJuIHRoaXMuY2xvbmUoKTtcblxuXHRcdC8vIG51bWJlciBvZiBieXRlc1xuXHRcdGNvbnN0IG5iX2RpZ2l0c190aGlzID0gdGhpcy5fYXR1OF9kYXRhLmJ5dGVMZW5ndGg7XG5cblx0XHQvLyBwcmVwIG5ldyBidWZmZXJcblx0XHRjb25zdCBhdHU4X291dHB1dCA9IG5ldyBVaW50OEFycmF5KG5iX2RpZ2l0c190aGlzKTtcblxuXHRcdC8vIGFtb3VudCB0byBzaGlmdCBpbiBieXRlc1xuXHRcdGNvbnN0IG5iX3NoaWZ0ID0gbmlfc2hpZnQgPj4+IDM7XG5cdFx0XG5cdFx0Ly8gc3RhcnQgd2l0aCBhcHByb3hpbWF0ZSBzdWJhcnJheVxuXHRcdGNvbnN0IGF0dThfc3ViID0gdGhpcy5fYXR1OF9kYXRhLnN1YmFycmF5KG5iX3NoaWZ0KTtcblxuXHRcdC8vIHJlbWFpbmRlciBhbW91bnQgdG8gbGVmdCBzaGlmdFxuXHRcdGNvbnN0IG5pX3JlbWFpbmRlciA9IG5pX3NoaWZ0ICUgODtcblxuXHRcdC8vIGFibGUgdG8gbW92ZSBieXRlcyBhcm91bmRcblx0XHRpZigwID09PSBuaV9yZW1haW5kZXIpIHtcblx0XHRcdC8vIHNldCBzdWIgYXJyYXkgaW4gaGlnaGVzdCBiaXQgcG9zaXRpb25cblx0XHRcdGF0dThfb3V0cHV0LnNldChhdHU4X3N1Yik7XG5cblx0XHRcdC8vIHJldHVybiBuZXcgaW5zdGFuY2Vcblx0XHRcdHJldHVybiBuZXcgU2Vuc2l0aXZlQnl0ZXMoYXR1OF9vdXRwdXQpO1xuXHRcdH1cblxuXHRcdC8vIGJpdG1hc2sgdG8gdHJ1bmNhdGUgZWFjaCBieXRlXG5cdFx0Y29uc3QgeG1fdHJ1bmNhdGUgPSAweGZmID4+PiBuaV9yZW1haW5kZXI7XG5cblx0XHQvLyBhbW91bnQgdG8gcmlnaHQgc2hpZnQgZWFjaCBieXRlIGluIG9yZGVyIHRvIGNhcnJ5XG5cdFx0Y29uc3QgbmlfY2FycnkgPSA4IC0gbmlfcmVtYWluZGVyO1xuXG5cdFx0Ly8gZWFjaCBieXRlXG5cdFx0bGV0IGliX2VhY2ggPSAwO1xuXHRcdGZvcig7IGliX2VhY2g8bmJfZGlnaXRzX3RoaXMtMS1uYl9zaGlmdDsgaWJfZWFjaCsrKSB7XG5cdFx0XHQvLyB0aGlzIGNhbiBiZSBvcHRpbWl6ZWRcblx0XHRcdGF0dThfb3V0cHV0W2liX2VhY2hdID0gKChhdHU4X3N1YltpYl9lYWNoXSAmIHhtX3RydW5jYXRlKSA8PCBuaV9yZW1haW5kZXIpIHwgKGF0dThfc3ViW2liX2VhY2grMV0gPj4+IG5pX2NhcnJ5KTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gbG93ZXN0IGJ5dGUgaGFzIGRhdGFcblx0XHRpZigwID09PSBuYl9zaGlmdCkge1xuXHRcdFx0YXR1OF9vdXRwdXRbaWJfZWFjaF0gPDw9IG5pX3NoaWZ0O1xuXHRcdH1cblxuXHRcdC8vIHJldHVybiBuZXcgaW5zdGFuY2Vcblx0XHRyZXR1cm4gbmV3IFNlbnNpdGl2ZUJ5dGVzKGF0dThfb3V0cHV0KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIFJpZ2h0IHNoaWZ0IGJ5IHRoZSBnaXZlbiBudW1iZXIgb2YgYml0cywgZGlzY2FyZGluZyBleGNlc3MgYml0cyBzaGlmdGVkIG9mZiB0byB0aGUgcmlnaHRcblx0ICogYW5kIGFkZGluZyBuZXcgemVybyBiaXRzIHNoaWZ0ZWQgaW4gZnJvbSB0aGUgbGVmdC5cblx0ICovXG5cdHJpZ2h0U2hpZnQobmlfc2hpZnQ6IG51bWJlcik6IFNlbnNpdGl2ZUJ5dGVzIHtcblx0XHQvLyBpbnZhbGlkIGFyZ3VtZW50XG5cdFx0aWYoTnVtYmVyLmlzSW50ZWdlcihuaV9zaGlmdCkgfHwgbmlfc2hpZnQgPCAwKSB7XG5cdFx0XHQvLyBwYW5pYyB3aXBlXG5cdFx0XHR0aGlzLndpcGUoKTtcblxuXHRcdFx0Ly8gcmVmdXNlIG9wZXJhdGlvblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdSZWZ1c2luZyB0byBsZWZ0IHNoaWZ0IGJ5IGFyZ3VtZW50IHRoYXQgaXMgbm90IGEgbm9uLW5lZ2F0aXZlIGludGVnZXInKTtcblx0XHR9XG5cblx0XHQvLyBubyBzaGlmdCwganVzdCBjbG9uZVxuXHRcdGlmKDAgPT09IG5pX3NoaWZ0KSByZXR1cm4gdGhpcy5jbG9uZSgpO1xuXG5cdFx0Ly8gcmVmIGRhdGFcblx0XHRjb25zdCBhdHU4X2RhdGEgPSB0aGlzLl9hdHU4X2RhdGE7XG5cblx0XHQvLyBudW1iZXIgb2YgYnl0ZXNcblx0XHRjb25zdCBuYl9kaWdpdHNfdGhpcyA9IGF0dThfZGF0YS5ieXRlTGVuZ3RoO1xuXG5cdFx0Ly8gcHJlcCBuZXcgYnVmZmVyXG5cdFx0Y29uc3QgYXR1OF9vdXRwdXQgPSBuZXcgVWludDhBcnJheShuYl9kaWdpdHNfdGhpcyk7XG5cblx0XHQvLyByZW1haW5kZXIgYW1vdW50IHRvIHJpZ2h0IHNoaWZ0XG5cdFx0Y29uc3QgbmlfcmVtYWluZGVyID0gbmlfc2hpZnQgJSA4O1xuXG5cdFx0Ly8gYW1vdW50IHRvIHNoaWZ0IGluIGJ5dGVzXG5cdFx0Y29uc3QgbmJfc2hpZnQgPSBuaV9zaGlmdCA+Pj4gMztcblxuXHRcdC8vIGFibGUgdG8gbW92ZSBieXRlcyBhcm91bmRcblx0XHRpZigwID09PSBuaV9yZW1haW5kZXIpIHtcblx0XHRcdC8vIHNldCBzdWIgYXJyYXkgaW4gYXBwcm9wcmlhdGUgYml0IHBvc2l0aW9uIChhbGxvdyBleGNlc3MgYnl0ZXMgdG8gYmUgY2hvcHBlZCBvZmYpXG5cdFx0XHRhdHU4X291dHB1dC5zZXQoYXR1OF9kYXRhLCBuYl9zaGlmdCk7XG5cblx0XHRcdC8vIHJldHVybiBuZXcgaW5zdGFuY2Vcblx0XHRcdHJldHVybiBuZXcgU2Vuc2l0aXZlQnl0ZXMoYXR1OF9vdXRwdXQpO1xuXHRcdH1cblxuXHRcdC8vIHN0YXJ0IHdpdGggYXBwcm94aW1hdGUgc3ViYXJyYXlcblx0XHRjb25zdCBhdHU4X3N1YiA9IGF0dThfZGF0YS5zdWJhcnJheSgwLCBuYl9kaWdpdHNfdGhpcyAtIChuaV9zaGlmdCA+Pj4gMykpO1xuXG5cdFx0Ly8gYml0bWFzayB0byB0cnVuY2F0ZSBlYWNoIGJ5dGVcblx0XHRjb25zdCB4bV90cnVuY2F0ZSA9ICgweGZmID4+IG5pX3JlbWFpbmRlcikgPDwgbmlfcmVtYWluZGVyO1xuXG5cdFx0Ly8gYW1vdW50IHRvIGxlZnQgc2hpZnQgZWFjaCBieXRlIGluIG9yZGVyIHRvIGNhcnJ5XG5cdFx0Y29uc3QgbmlfY2FycnkgPSA4IC0gbmlfcmVtYWluZGVyO1xuXG5cdFx0Ly8gaGlnaGVzdCBieXRlIGhhcyBkYXRhXG5cdFx0aWYoMCA9PT0gbmJfc2hpZnQpIHtcblx0XHRcdGF0dThfb3V0cHV0WzBdID4+PSBuaV9zaGlmdDtcblx0XHR9XG5cblx0XHQvLyBlYWNoIGJ5dGVcblx0XHRsZXQgaWJfZWFjaCA9IDE7XG5cdFx0Zm9yKDsgaWJfZWFjaDxuYl9kaWdpdHNfdGhpcy0xOyBpYl9lYWNoKyspIHtcblx0XHRcdC8vIGNoZWNrIGZvciBhY2N1cmFjeVxuXHRcdFx0YXR1OF9vdXRwdXRbaWJfZWFjaF0gPSAoKGF0dThfc3ViW2liX2VhY2gtMV0gPDwgbmlfY2FycnkpICYgMHhmZikgfCAoYXR1OF9zdWJbaWJfZWFjaF0gPj4+IG5pX3JlbWFpbmRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIG5ldyBpbnN0YW5jZVxuXHRcdHJldHVybiBuZXcgU2Vuc2l0aXZlQnl0ZXMoYXR1OF9vdXRwdXQpO1xuXHR9XG5cblxuXHQvKipcblx0ICogUGVyZm9ybSBieXRlLWJ5LWJ5dGUgWE9SIHdpdGggb3RoZXIgaW5zdGFuY2UuXG5cdCAqL1xuXHR4b3Ioa25fb3RoZXI6IFNlbnNpdGl2ZUJ5dGVzKTogU2Vuc2l0aXZlQnl0ZXMge1xuXHRcdC8vIHJlZiBkYXRhXG5cdFx0Y29uc3QgYXR1OF9kYXRhX3RoaXMgPSB0aGlzLl9hdHU4X2RhdGE7XG5cdFx0Y29uc3QgYXR1OF9kYXRhX290aGVyID0ga25fb3RoZXIuX2F0dThfZGF0YTtcblxuXHRcdC8vIG51bWJlciBvZiBieXRlc1xuXHRcdGNvbnN0IG5iX2RpZ2l0c190aGlzID0gYXR1OF9kYXRhX3RoaXMuYnl0ZUxlbmd0aDtcblxuXHRcdC8vIGJ5dGUgbGVuZ3RoIGRpc2NyZXBhbmN5XG5cdFx0aWYobmJfZGlnaXRzX3RoaXMgIT09IGF0dThfZGF0YV9vdGhlci5ieXRlTGVuZ3RoKSB7XG5cdFx0XHQvLyBwYW5pYyB3aXBlc1xuXHRcdFx0dGhpcy53aXBlKCk7XG5cdFx0XHRrbl9vdGhlci53aXBlKCk7XG5cblx0XHRcdC8vIHJlZnVzZSBvcGVyYXRpb25cblx0XHRcdHRocm93IG5ldyBFcnJvcignUmVmdXNpbmcgdG8gWE9SIGJ1ZmZlcnMgb2YgZGlmZmVyZW50IGJ5dGUgbGVuZ3RoJyk7XG5cdFx0fVxuXG5cdFx0Ly8gcHJlcCBuZXcgYnVmZmVyXG5cdFx0Y29uc3QgYXR1OF9vdXRwdXQgPSBuZXcgVWludDhBcnJheShuYl9kaWdpdHNfdGhpcyk7XG5cblx0XHQvLyB4b3Igb25lIGJ5dGUgYXQgYSB0aW1lXG5cdFx0Zm9yKGxldCBpYl9lYWNoPTA7IGliX2VhY2g8bmJfZGlnaXRzX3RoaXM7IGliX2VhY2grKykge1xuXHRcdFx0YXR1OF9vdXRwdXRbaWJfZWFjaF0gPSBhdHU4X2RhdGFfdGhpc1tpYl9lYWNoXSBeIGF0dThfZGF0YV9vdGhlcltpYl9lYWNoXTtcblx0XHR9XG5cblx0XHQvLyBuZXcgaW5zdGFuY2Vcblx0XHRyZXR1cm4gbmV3IFNlbnNpdGl2ZUJ5dGVzKGF0dThfb3V0cHV0KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIFNwbGl0IGEgYnl0ZSBhcnJheSBpbnRvICd3b3JkcycgdXNpbmcgdGhlIGdpdmVuIGRlbGltaXRlclxuXHQgKiBAcGFyYW0geGJfdmFsdWUgdGhlIGRlbGltaXRlciB2YWx1ZSB0byBzcGxpdCBieVxuXHQgKiBAcmV0dXJucyBsaXN0IG9mIHdvcmRzIHdoaWNoIHdpbGwgYWxsIGJlIHplcm9lZCBvdXQgd2hlbiB0aGUgcGFyZW50IGluc3RhbmNlIGlzIHdpcGVkXG5cdCAqL1xuXHRzcGxpdCh4Yl92YWx1ZTogbnVtYmVyKTogVWludDhBcnJheVtdIHtcblx0XHRjb25zdCBhdHU4X2RhdGEgPSB0aGlzLmRhdGE7XG5cdFx0Y29uc3QgbmJfdGhpcyA9IGF0dThfZGF0YS5ieXRlTGVuZ3RoO1xuXG5cdFx0Ly8gYXJyYXkgb2YgcG9pbnRlcnMgdG8gd29yZHMgYXMgYnVmZmVyc1xuXHRcdGNvbnN0IGFfd29yZHMgPSBbXTtcblxuXHRcdC8vIGJ5dGUgaW5kZXggc3RhcnQgb2Ygd29yZFxuXHRcdGxldCBpYl9zdGFydCA9IDA7XG5cblx0XHQvLyBlYWNoIGJ5dGVcblx0XHRmb3IobGV0IGliX2VhY2g9MDsgaWJfZWFjaDxuYl90aGlzOyBpYl9lYWNoKyspIHtcblx0XHRcdC8vIGJ5dGUgbWF0Y2hlcyB0aGUgdGFyZ2V0XG5cdFx0XHRpZih4Yl92YWx1ZSA9PT0gYXR1OF9kYXRhW2liX2VhY2hdKSB7XG5cdFx0XHRcdC8vIHdpdGhvdXQgY29weWluZyBkYXRhLCBzYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSB3b3JkXG5cdFx0XHRcdGFfd29yZHMucHVzaChhdHU4X2RhdGEuc3ViYXJyYXkoaWJfc3RhcnQsIGliX2VhY2gpKTtcblxuXHRcdFx0XHQvLyBhZHZhbmNlZCB0aGUgaW5kZXggZm9yIHRoZSBzdGFydCBvZiB0aGUgbmV4dCB3b3JkXG5cdFx0XHRcdGliX3N0YXJ0ID0gaWJfZWFjaCArIDE7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIGxpc3Qgb2Ygd29yZHNcblx0XHRyZXR1cm4gYV93b3Jkcztcblx0fVxufVxuIiwiaW1wb3J0IHR5cGUgeyBJbnRyYUV4dCB9IGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHR5cGUgeyBWb2NhYiB9IGZyb20gJyMvbWV0YS92b2NhYic7XG5pbXBvcnQgdHlwZSB7IEpzb25WYWx1ZSwgUHJvbWlzYWJsZSB9IGZyb20gJyMvdXRpbC9iZWx0JztcblxuaW1wb3J0IHR5cGUgeyBVbmlvbiB9IGZyb20gJ3RzLXRvb2xiZWx0JztcblxuY29uc3QgZF9icm9hZGNhc3RfZ2xvYmFsOiBWb2NhYi5UeXBlZEJyb2FkY2FzdDxJbnRyYUV4dC5HbG9iYWxWb2NhYj4gPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbCgnZ2xvYmFsJyk7XG5cblxuLyoqXG4gKiBCcm9hZGNhc3QgYSBtZXNzYWdlIG9uIHRoZSBnbG9iYWwgYnJvYWRjYXN0IGNoYW5uZWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdsb2JhbF9icm9hZGNhc3QoZ19tc2c6IFZvY2FiLk1lc3NhZ2U8SW50cmFFeHQuR2xvYmFsVm9jYWI+KTogdm9pZCB7XG5cdC8vIGJyb2FkY2FzdCBvdXRcblx0ZF9icm9hZGNhc3RfZ2xvYmFsLnBvc3RNZXNzYWdlKGdfbXNnKTtcblxuXHQvLyBlY2hvIGxvY2FsbHlcblx0ZF9icm9hZGNhc3RfZ2xvYmFsLmRpc3BhdGNoRXZlbnQobmV3IE1lc3NhZ2VFdmVudCgnbWVzc2FnZScsIHtcblx0XHRkYXRhOiBnX21zZyxcblx0fSkpO1xufVxuXG5cbi8qKlxuICogUmVnaXN0ZXIgYSBzZXQgb2YgZXZlbnQgaGFuZGxlcnMgb24gdGhlIGdsb2JhbCBicm9hZGNhc3QgY2hhbm5lbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2xvYmFsX3JlY2VpdmUoaF9oYW5kbGVyczogUGFydGlhbDxWb2NhYi5IYW5kbGVyczxJbnRyYUV4dC5HbG9iYWxWb2NhYj4+KTogVm9pZEZ1bmN0aW9uIHtcblx0Ly8gY3JlYXRlIGxpc3RlbmVyXG5cdGNvbnN0IGZfbGlzdGVuZXI6IFZvY2FiLkJyb2FkY2FzdExpc3RlbmVyPEludHJhRXh0Lkdsb2JhbFZvY2FiPiA9IChkX2V2ZW50KSA9PiB7XG5cdFx0Ly8gcmVmIG1lc3NhZ2UgZGF0YVxuXHRcdGNvbnN0IGdfbXNnID0gZF9ldmVudC5kYXRhIGFzIHR5cGVvZiBkX2V2ZW50LmRhdGEgfCBudWxsIHwge3R5cGU6IHVuZGVmaW5lZH07XG5cblx0XHQvLyBpbnZhbGlkIGV2ZW50IGRhdGFcblx0XHRpZighZ19tc2cgfHwgIWdfbXNnLnR5cGUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSWdub3JlZCBpbnZhbGlkIG1lc3NhZ2UgcmVjZWl2ZWQgb24gZ2xvYmFsIGJyb2FkY2FzdCBjaGFubmVsJyk7XG5cdFx0fVxuXG5cdFx0Ly8gZGVzdHJ1Y3R1cmUgbWVzc2FnZVxuXHRcdGNvbnN0IHtcblx0XHRcdHR5cGU6IHNpX3R5cGUsXG5cdFx0XHR2YWx1ZTogd192YWx1ZT1udWxsLFxuXHRcdH0gPSBnX21zZyBhcyBVbmlvbi5TdHJpY3Q8dHlwZW9mIGdfbXNnPjtcblxuXHRcdC8vIGxvY2F0ZSBoYW5kbGVyXG5cdFx0Y29uc3QgZl9oYW5kbGVyID0gaF9oYW5kbGVyc1tzaV90eXBlXTtcblxuXHRcdC8vIG5vdCBoYW5kbGVkLCBpZ25vcmVcblx0XHRpZighZl9oYW5kbGVyKSByZXR1cm47XG5cblx0XHQvLyBoYW5kbGVcblx0XHR2b2lkIChmX2hhbmRsZXIgYXMgKHdfdmFsdWU6IEpzb25WYWx1ZSkgPT4gUHJvbWlzYWJsZTx2b2lkPikod192YWx1ZSk7XG5cdH07XG5cblx0Ly8gYWRkIGxpc3RlbmVyXG5cdGRfYnJvYWRjYXN0X2dsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZl9saXN0ZW5lcik7XG5cblx0Ly8gcmV0dXJuIHJlbW92ZXIgZnVuY3Rpb25cblx0cmV0dXJuICgpID0+IHtcblx0XHRkX2Jyb2FkY2FzdF9nbG9iYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZfbGlzdGVuZXIpO1xuXHR9O1xufVxuXG4vKipcbiAqIFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2xvYmFsX3dhaXQoXG5cdHNpX2tleToga2V5b2YgSW50cmFFeHQuR2xvYmFsVm9jYWIsXG5cdGZrX3Rlc3Q6ICh3X3ZhbHVlOiBWb2NhYi5NZXNzYWdlVmFsdWU8SW50cmFFeHQuR2xvYmFsVm9jYWIsIHR5cGVvZiBzaV9rZXk+KSA9PiBQcm9taXNhYmxlPGJvb2xlYW4+LFxuXHR4dF90aW1lb3V0PTAsXG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0Ly8gY2FwdHVyZSBzdGFjayB0cmFjZVxuXHRjb25zdCBzX3N0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjayB8fCAnJztcblxuXHQvLyBnbyBhc3luY1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKGZrX3Jlc29sdmUsIGZlX3JlamVjdCkgPT4ge1xuXHRcdC8vIHByZXAgdGltZW91dCBpZFxuXHRcdGxldCBpX3RpbWVvdXQgPSAwO1xuXG5cdFx0Ly8gcmVjZWl2ZSBtZXNzYWdlc1xuXHRcdGNvbnN0IGZfdW5yZWdpc3RlciA9IGdsb2JhbF9yZWNlaXZlKHtcblx0XHRcdFtzaV9rZXldOiAod192YWx1ZSkgPT4ge1xuXHRcdFx0XHQvLyBjYWxsIHRlc3RlcjsgdHJ1dGh5IHJldHVybiBtZWFucyB0byB1bnJlZ2lzdGVyXG5cdFx0XHRcdGlmKGZrX3Rlc3Qod192YWx1ZSBhcyBWb2NhYi5NZXNzYWdlVmFsdWU8SW50cmFFeHQuR2xvYmFsVm9jYWIsIHNpX2tleT4pKSB7XG5cdFx0XHRcdFx0Ly8gdW5yZWdpc3RlciBsaXN0ZW5lclxuXHRcdFx0XHRcdGZfdW5yZWdpc3RlcigpO1xuXG5cdFx0XHRcdFx0Ly8gY2FuY2VsIHRpbWVvdXRcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoaV90aW1lb3V0KTtcblxuXHRcdFx0XHRcdC8vIHJlc29sdmVcblx0XHRcdFx0XHRma19yZXNvbHZlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHQvLyBhIHRpbWVvdXQgdmFsdWUgd2FzIHByb3ZpZGVkXG5cdFx0aWYoTnVtYmVyLmlzSW50ZWdlcih4dF90aW1lb3V0KSAmJiB4dF90aW1lb3V0ID4gMCkge1xuXHRcdFx0Ly8gc2V0IGEgY2FuY2VsIHRpbWVvdXRcblx0XHRcdGlfdGltZW91dCA9IGdsb2JhbFRoaXMuc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdC8vIHVucmVnaXN0ZXJcblx0XHRcdFx0Zl91bnJlZ2lzdGVyKCk7XG5cblx0XHRcdFx0Ly8gbm90IGdvb2Rcblx0XHRcdFx0ZmVfcmVqZWN0KG5ldyBFcnJvcihgQSB0aW1lb3V0IHdhcyByZWFjaGVkIHdhaXRpbmcgZm9yIHRoZSAnJHtzaV9rZXl9JyBldmVudFxcbiR7c19zdGFja31gKSk7XG5cdFx0XHR9LCB4dF90aW1lb3V0KTtcblx0XHR9XG5cdH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9jYWxfd2FpdChcblx0c2lfa2V5OiBrZXlvZiBJbnRyYUV4dC5HbG9iYWxWb2NhYixcblx0ZmtfdGVzdDogKHdfdmFsdWU6IFZvY2FiLk1lc3NhZ2VWYWx1ZTxJbnRyYUV4dC5HbG9iYWxWb2NhYiwgdHlwZW9mIHNpX2tleT4pID0+IFByb21pc2FibGU8Ym9vbGVhbj4sXG5cdHh0X3RpbWVvdXQ9MCxcbik6IFByb21pc2U8dm9pZD4ge1xuXHRcbn1cbiIsImltcG9ydCB0eXBlIHsgU3RvcmVLZXkgfSBmcm9tICcjL21ldGEvc3RvcmUnO1xuXG5leHBvcnQgY29uc3QgU0lfVkVSU0lPTiA9IF9fU0lfVkVSU0lPTjtcblxuZXhwb3J0IGNvbnN0IFhUX1NFQ09ORFMgPSAxZTM7XG5leHBvcnQgY29uc3QgWFRfTUlOVVRFUyA9IDYwICogWFRfU0VDT05EUztcbmV4cG9ydCBjb25zdCBYVF9IT1VSUyA9IDYwICogWFRfTUlOVVRFUztcbmV4cG9ydCBjb25zdCBYVF9EQVlTID0gMjQgKiBYVF9IT1VSUztcblxuLy8gbWF4aW11bSBieXRlIGxlbmd0aCBvZiBhIG1lbW8ncyBpbnB1dFxuZXhwb3J0IGNvbnN0IE5CX01BWF9NRU1PID0gMjgwO1xuXG4vLyBsb2NhbGhvc3QgcGF0dGVyblxuZXhwb3J0IGNvbnN0IFJfRE9NQUlOX0xPQ0FMSE9TVCA9IC9eKGxvY2FsaG9zdHwxMjcuMC4wLjEpKDpcXGQrKT8kLztcblxuLy8gaXAgYWRkcmVzcyBwYXR0ZXJuXG5leHBvcnQgY29uc3QgUl9ET01BSU5fSVAgPSAvXlxcZCsoPzouXFxkKyl7M30oOlxcZCspPyQvO1xuXG4vLyBiZWNoMzIgcGFyc2luZyByZWdleFxuZXhwb3J0IGNvbnN0IFJfQkVDSDMyID0gL14oXFx3KykoWzEzXSkoW2EtekEtSEotTlAtWjAtOV17MjUsMzl9KSQvO1xuXG4vLyBwdWJsaWMgc3VmZml4IGxpc3RcbmV4cG9ydCBjb25zdCBQX1BVQkxJQ19TVUZGSVhfTElTVCA9ICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcHVibGljc3VmZml4L2xpc3QvbWFzdGVyL3B1YmxpY19zdWZmaXhfbGlzdC5kYXQnO1xuXG4vLyBnbG9iYWwgZGVjcmVlc1xuZXhwb3J0IGNvbnN0IFBfU1RBUlNIRUxMX0RFQ1JFRVMgPSAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1NvbGFyUmVwdWJsaWMvd2FsbGV0LWRlY3JlZXMvbWFpbi9nbG9iYWwuanNvbic7XG5cbi8vIHRyYW5zZmVyIGFtb3VudCBzdHJpbmcgcmVnZXhcbmV4cG9ydCBjb25zdCBSX1RSQU5TRkVSX0FNT1VOVCA9IC9eKFxcZCspKC4rKS87XG5cblxuZXhwb3J0IGNvbnN0IFNJX1NUT1JFX1NFQ1JFVFM6IFN0b3JlS2V5PCdzZWNyZXRzJz4gPSAnc2VjcmV0cyc7XG5leHBvcnQgY29uc3QgU0lfU1RPUkVfQVBQUzogU3RvcmVLZXk8J2FwcHMnPiA9ICdhcHBzJztcbmV4cG9ydCBjb25zdCBTSV9TVE9SRV9BUFBfUE9MSUNJRVM6IFN0b3JlS2V5PCdhcHBfcG9saWNpZXMnPiA9ICdhcHBfcG9saWNpZXMnO1xuZXhwb3J0IGNvbnN0IFNJX1NUT1JFX0FHRU5UUzogU3RvcmVLZXk8J2FnZW50cyc+ID0gJ2FnZW50cyc7XG5leHBvcnQgY29uc3QgU0lfU1RPUkVfU0VUVElOR1M6IFN0b3JlS2V5PCdzZXR0aW5ncyc+ID0gJ3NldHRpbmdzJztcbmV4cG9ydCBjb25zdCBTSV9TVE9SRV9BQ0NPVU5UUzogU3RvcmVLZXk8J2FjY291bnRzJz4gPSAnYWNjb3VudHMnO1xuZXhwb3J0IGNvbnN0IFNJX1NUT1JFX1FVRVJZX0NBQ0hFOiBTdG9yZUtleTwncXVlcnlfY2FjaGUnPiA9ICdxdWVyeV9jYWNoZSc7XG5leHBvcnQgY29uc3QgU0lfU1RPUkVfVEFHUzogU3RvcmVLZXk8J3RhZ3MnPiA9ICd0YWdzJztcbmV4cG9ydCBjb25zdCBTSV9TVE9SRV9NRURJQTogU3RvcmVLZXk8J21lZGlhJz4gPSAnbWVkaWEnO1xuZXhwb3J0IGNvbnN0IFNJX1NUT1JFX1BGUFM6IFN0b3JlS2V5PCdwZnBzJz4gPSAncGZwcyc7XG5leHBvcnQgY29uc3QgU0lfU1RPUkVfQ0hBSU5TOiBTdG9yZUtleTwnY2hhaW5zJz4gPSAnY2hhaW5zJztcbmV4cG9ydCBjb25zdCBTSV9TVE9SRV9ORVRXT1JLUzogU3RvcmVLZXk8J25ldHdvcmtzJz4gPSAnbmV0d29ya3MnO1xuZXhwb3J0IGNvbnN0IFNJX1NUT1JFX0VOVElUSUVTOiBTdG9yZUtleTwnZW50aXRpZXMnPiA9ICdlbnRpdGllcyc7XG5leHBvcnQgY29uc3QgU0lfU1RPUkVfRVZFTlRTOiBTdG9yZUtleTwnZXZlbnRzJz4gPSAnZXZlbnRzJztcbmV4cG9ydCBjb25zdCBTSV9TVE9SRV9XRUJfUkVTT1VSQ0VTOiBTdG9yZUtleTwnd2ViX3Jlc291cmNlcyc+ID0gJ3dlYl9yZXNvdXJjZXMnO1xuZXhwb3J0IGNvbnN0IFNJX1NUT1JFX1dFQl9BUElTOiBTdG9yZUtleTwnd2ViX2FwaXMnPiA9ICd3ZWJfYXBpcyc7XG4iLCJcbmludGVyZmFjZSBQYXJ0IHtcblx0dmFsdWU6IG51bWJlcjtcblx0dGFnOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVjZWRlcyhzX3ZlcnNpb25fYTogc3RyaW5nLCBzX3ZlcnNpb25fYjogc3RyaW5nKTogYm9vbGVhbiB7XG5cdHJldHVybiBuZXcgVmVyc2lvbihzX3ZlcnNpb25fYSkucHJlY2VkZXMobmV3IFZlcnNpb24oc192ZXJzaW9uX2IpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvbGxvd3Moc192ZXJzaW9uX2E6IHN0cmluZywgc192ZXJzaW9uX2I6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gbmV3IFZlcnNpb24oc192ZXJzaW9uX2EpLmZvbGxvd3MobmV3IFZlcnNpb24oc192ZXJzaW9uX2IpKTtcbn1cblxuZXhwb3J0IGNsYXNzIFZlcnNpb24ge1xuXHRwcml2YXRlIHJlYWRvbmx5IF9hX3BhcnRzOiBQYXJ0W107XG5cblx0Y29uc3RydWN0b3Ioc192ZXJzaW9uOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9hX3BhcnRzID0gc192ZXJzaW9uLnNwbGl0KC9cXC4vKS5tYXAoKHNfcGFydCkgPT4ge1xuXHRcdFx0Y29uc3QgYV9zdWJzID0gc19wYXJ0LnNwbGl0KCctJyk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR2YWx1ZTogK2Ffc3Vic1swXSxcblx0XHRcdFx0dGFnOiBhX3N1YnMuc2xpY2UoMSkuam9pbignLScpLFxuXHRcdFx0fTtcblx0XHR9KTtcblx0fVxuXG5cdGNvbXBhcmUoa19vdGhlcjogVmVyc2lvbik6IG51bWJlciB7XG5cdFx0Y29uc3QgYV9wYXJ0c190aGlzID0gdGhpcy5fYV9wYXJ0cztcblx0XHRjb25zdCBhX3BhcnRzX290aGVyID0ga19vdGhlci5fYV9wYXJ0cztcblxuXHRcdGZvcihsZXQgaV9wYXJ0PTA7IGlfcGFydDxNYXRoLm1pbihhX3BhcnRzX3RoaXMubGVuZ3RoLCBhX3BhcnRzX290aGVyLmxlbmd0aCk7IGlfcGFydCsrKSB7XG5cdFx0XHRjb25zdCB7XG5cdFx0XHRcdHZhbHVlOiB4X3ZhbHVlX3RoaXMsXG5cdFx0XHRcdHRhZzogc190YWdfdGhpcyxcblx0XHRcdH0gPSBhX3BhcnRzX3RoaXNbaV9wYXJ0XTtcblxuXHRcdFx0Y29uc3Qge1xuXHRcdFx0XHR2YWx1ZTogeF92YWx1ZV9vdGhlcixcblx0XHRcdFx0dGFnOiBzX3RhZ19vdGhlcixcblx0XHRcdH0gPSBhX3BhcnRzX290aGVyW2lfcGFydF07XG5cblx0XHRcdGlmKHNfdGFnX3RoaXMgIT09IHNfdGFnX290aGVyKSByZXR1cm4gTmFOO1xuXG5cdFx0XHRjb25zdCB4X2NtcCA9IHhfdmFsdWVfdGhpcyAtIHhfdmFsdWVfb3RoZXI7XG5cdFx0XHRpZigwICE9PSB4X2NtcCkgcmV0dXJuIHhfY21wO1xuXHRcdH1cblxuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0cHJlY2VkZXMoa19vdGhlcjogVmVyc2lvbik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAtMSA9PT0gdGhpcy5jb21wYXJlKGtfb3RoZXIpO1xuXHR9XG5cblx0Zm9sbG93cyhrX290aGVyOiBWZXJzaW9uKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIDEgPT09IHRoaXMuY29tcGFyZShrX290aGVyKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgU0lfVkVSU0lPTiB9IGZyb20gXCIjL3NoYXJlL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgcHJlY2VkZXMgfSBmcm9tIFwiLi9zZW12ZXJcIjtcblxuaW50ZXJmYWNlIExhc3RTZWVuIHtcblx0dGltZTogbnVtYmVyO1xuXHR2ZXJzaW9uOiBzdHJpbmc7XG59XG5cbnR5cGUgU3RvcmFnZVNjaGVtYSA9IHtcblx0bGFzdF9zZWVuOiB7XG5cdFx0aW50ZXJmYWNlOiBMYXN0U2Vlbjtcblx0fTtcbn07XG5cbnR5cGUgUHVibGljU3RvcmFnZUtleSA9IGtleW9mIFN0b3JhZ2VTY2hlbWE7XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0b3JhZ2VfZ2V0PHdfdmFsdWUgZXh0ZW5kcyBhbnk9YW55PihzaV9rZXk6IHN0cmluZyk6IFByb21pc2U8d192YWx1ZSB8IG51bGw+IHtcblx0Y29uc3QgZ19zdG9yYWdlID0gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFtzaV9rZXldKSBhcyB7W3NpIGluIHR5cGVvZiBzaV9rZXldOiB3X3ZhbHVlfSB8IG51bGw7XG5cdHJldHVybiBnX3N0b3JhZ2U/LltzaV9rZXldIHx8IG51bGw7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHB1YmxpY19zdG9yYWdlX2dldDx3X3ZhbHVlIGV4dGVuZHMgYW55PWFueT4oc2lfa2V5OiBQdWJsaWNTdG9yYWdlS2V5KTogUHJvbWlzZTx3X3ZhbHVlIHwgbnVsbD4ge1xuXHRyZXR1cm4gYXdhaXQgc3RvcmFnZV9nZXQ8d192YWx1ZT4oYEAke3NpX2tleX1gKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHVibGljX3N0b3JhZ2VfcHV0KHNpX2tleTogUHVibGljU3RvcmFnZUtleSwgd192YWx1ZTogYW55KTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IHNpX3dpcmUgPSBgQCR7c2lfa2V5fWA7XG5cdGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7XG5cdFx0W3NpX3dpcmVdOiB3X3ZhbHVlLFxuXHR9KTtcbn1cblxuZXhwb3J0IGNvbnN0IFB1YmxpY1N0b3JhZ2UgPSB7XG5cdGFzeW5jIGxhc3RTZWVuKCk6IFByb21pc2U8bnVsbCB8IExhc3RTZWVuPiB7XG5cdFx0cmV0dXJuIGF3YWl0IHB1YmxpY19zdG9yYWdlX2dldDxMYXN0U2Vlbj4oJ2xhc3Rfc2VlbicpO1xuXHR9LFxuXG5cdGFzeW5jIGlzVXBncmFkaW5nKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRcdGNvbnN0IGdfc2VlbiA9IGF3YWl0IFB1YmxpY1N0b3JhZ2UubGFzdFNlZW4oKTtcblxuXHRcdHJldHVybiAhZ19zZWVuIHx8IHByZWNlZGVzKGdfc2Vlbi52ZXJzaW9uLCBTSV9WRVJTSU9OKTtcblx0fSxcblxuXHRhc3luYyBtYXJrU2VlbigpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRhd2FpdCBwdWJsaWNfc3RvcmFnZV9wdXQoJ2xhc3Rfc2VlbicsIHtcblx0XHRcdHRpbWU6IERhdGUubm93KCksXG5cdFx0XHR2ZXJzaW9uOiBTSV9WRVJTSU9OLFxuXHRcdH0pO1xuXHR9LFxufTtcbiIsImltcG9ydCB7XG5cdHNlc3Npb25fc3RvcmFnZV9pc19uYXRpdmUsXG5cdHNlc3Npb25fc3RvcmFnZV9zZXRfbmF0aXZlLFxuXHRzZXNzaW9uX3N0b3JhZ2Vfc2V0X3dyYXBwZWQsXG5cdFZhdWx0LFxufSBmcm9tICcjL2NyeXB0by92YXVsdCc7XG5cbmltcG9ydCB7IEZfTk9PUCB9IGZyb20gJyMvdXRpbC9iZWx0JztcbmltcG9ydCB7IHRleHRfdG9fYnVmZmVyIH0gZnJvbSAnIy91dGlsL2RhdGEnO1xuaW1wb3J0IHsgZ2xvYmFsX2Jyb2FkY2FzdCB9IGZyb20gJyMvc2NyaXB0L21zZy1nbG9iYWwnO1xuaW1wb3J0IHsgUHVibGljU3RvcmFnZSB9IGZyb20gJyMvZXh0ZW5zaW9uL3B1YmxpYy1zdG9yYWdlJztcblxuXG5leHBvcnQgY2xhc3MgTm90QXV0aGVudGljYXRlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuZXhwb3J0IGNsYXNzIEFscmVhZHlSZWdpc3RlcmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuXG5leHBvcnQgY2xhc3MgSW52YWxpZFBhc3NwaHJhc2VFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmV4cG9ydCBjbGFzcyBVbnJlZ2lzdGVyZWRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmV4cG9ydCBjbGFzcyBSZWNvdmVyYWJsZVZhdWx0RXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuXG5leHBvcnQgY2xhc3MgQ29ycnVwdGVkVmF1bHRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cblxuLy8gY2FjaGUgZHVtbXkgdmFsdWVzIHRvIGVzdGltYXRlIHRpbWUgdG8gY29tcGxldGlvblxuZXhwb3J0IGNvbnN0IEFUVThfRFVNTVlfUEhSQVNFID0gdGV4dF90b19idWZmZXIoJzMyLWNoYXJhY3Rlci1sb25nLWR1bW15LXBhc3N3b3JkJyk7XG5leHBvcnQgY29uc3QgQVRVOF9EVU1NWV9WRUNUT1IgPSBuZXcgVWludDhBcnJheShjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDE2KSkpO1xuXG4vLyBtaW5pbXVtIHBhc3N3b3JkIGxlbmd0aFxuZXhwb3J0IGNvbnN0IE5MX1BBU1NQSFJBU0VfTUlOSU1VTSA9IDU7XG5cbi8vIG1heGltdW0gcGFzc3dvcmQgbGVuZ3RoXG5leHBvcnQgY29uc3QgTkxfUEFTU1BIUkFTRV9NQVhJTVVNID0gMTAyNDtcblxuXG4vKipcbiAqIFRlc3QgdGhlIGFjY2VwdGFibGUtbmVzcyBvZiBhIGdpdmVuIHBhc3NwaHJhc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFjY2VwdGFibGUoc2hfcGhyYXNlOiBzdHJpbmcpOiBib29sZWFuIHtcblx0cmV0dXJuICdzdHJpbmcnID09PSB0eXBlb2Ygc2hfcGhyYXNlICYmIHNoX3BocmFzZS5sZW5ndGggPj0gTkxfUEFTU1BIUkFTRV9NSU5JTVVNICYmIHNoX3BocmFzZS5sZW5ndGggPD0gTkxfUEFTU1BIUkFTRV9NQVhJTVVNO1xufVxuXG5cbi8qKlxuICogUmVnaXN0ZXIgbmV3IGNyZWRlbnRpYWxzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWdpc3RlcihzaF9waHJhc2U6IHN0cmluZywgZl91cGRhdGU6ICgoc19zdGF0ZTogc3RyaW5nKSA9PiB2b2lkKT1GX05PT1ApOiBQcm9taXNlPHZvaWQ+IHtcblx0Zl91cGRhdGUoJ1JlYWRpbmcgZnJvbSBzdG9yYWdlJyk7XG5cblx0Ly8gcmV0cmlldmUgcm9vdFxuXHRjb25zdCBnX3Jvb3QgPSBhd2FpdCBWYXVsdC5nZXRCYXNlKCk7XG5cblx0Ly8gcm9vdCBpcyBhbHJlYWR5IHNldFxuXHRpZihWYXVsdC5pc1ZhbGlkQmFzZShnX3Jvb3QpKSB7XG5cdFx0dGhyb3cgbmV3IEFscmVhZHlSZWdpc3RlcmVkRXJyb3IoKTtcblx0fVxuXG5cdC8vIGNoZWNrIHBhc3N3b3JkIHJlcXVpcmVtZW50c1xuXHRpZighc2hfcGhyYXNlIHx8ICFhY2NlcHRhYmxlKHNoX3BocmFzZSkpIHtcblx0XHR0aHJvdyBuZXcgSW52YWxpZFBhc3NwaHJhc2VFcnJvcigpO1xuXHR9XG5cblx0Ly8gZW5jb2RlIHBhc3NwaHJhc2Vcblx0Y29uc3QgYXR1OF9waHJhc2UgPSB0ZXh0X3RvX2J1ZmZlcihzaF9waHJhc2UpO1xuXG5cdGZfdXBkYXRlKCdEZXJpdmluZyByb290IGtleXMnKTtcblxuXHQvLyBzZWxlY3QgdWludDY0IGVudHJvcHkgYXQgcmFuZG9tXG5cdGNvbnN0IGF0dThfZW50cm9weSA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoOCkpO1xuXG5cdC8vIHNlbGVjdCBpbml0aWFsIHVpbnQ2NCBub25jZSBhdCByYW5kb20gXG5cdGNvbnN0IGR2X3JhbmRvbSA9IG5ldyBEYXRhVmlldyhjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgyKSkuYnVmZmVyKTtcblx0Y29uc3QgeGdfbm9uY2VfaW5pdCA9IGR2X3JhbmRvbS5nZXRCaWdVaW50NjQoMCwgZmFsc2UpO1xuXG5cdC8vIHNldCBsYXN0IHNlZW5cblx0YXdhaXQgUHVibGljU3RvcmFnZS5tYXJrU2VlbigpO1xuXG5cdC8vIGltcG9ydCBiYXNlIGtleSBmcm9tIHBhc3NwaHJhc2UgYW5kIGRlcml2ZSB0aGUgbmV3IHJvb3Qga2V5XG5cdGNvbnN0IHtcblx0XHRuZXc6IHtcblx0XHRcdGtleTogZGtfcm9vdF9uZXcsXG5cdFx0XHRub25jZTogeGdfbm9uY2VfbmV3LFxuXHRcdH0sXG5cdH0gPSBhd2FpdCBWYXVsdC5kZXJpdmVSb290S2V5cyhhdHU4X3BocmFzZSwgYXR1OF9lbnRyb3B5LCB4Z19ub25jZV9pbml0KTtcblxuXHRmX3VwZGF0ZSgnR2VuZXJhdGluZyBzaWduYXR1cmUnKTtcblxuXHQvLyBnZW5lcmF0ZSBzaWduYXR1cmVcblx0Y29uc3QgYXR1OF9zaWduYXR1cmUgPSBhd2FpdCBWYXVsdC5nZW5lcmF0ZVJvb3RLZXlTaWduYXR1cmUoZGtfcm9vdF9uZXcpO1xuXG5cdGZfdXBkYXRlKCdTYXZpbmcgdG8gc3RvcmFnZScpO1xuXG5cdC8vIHNhdmUgdG8gc3RvcmFnZVxuXHRhd2FpdCBWYXVsdC5zZXRQYXJzZWRCYXNlKHtcblx0XHRlbnRyb3B5OiBhdHU4X2VudHJvcHksXG5cdFx0bm9uY2U6IHhnX25vbmNlX25ldyxcblx0XHRzaWduYXR1cmU6IGF0dThfc2lnbmF0dXJlLFxuXHR9KTtcbn1cblxuXG4vKipcbiAqIFVubG9jayB0aGUgdmF1bHQgdXNpbmcgdGhlIGdpdmVuIHBhc3NwaHJhc2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvZ2luKHNoX3BocmFzZTogc3RyaW5nLCBiX3JlY292ZXI9ZmFsc2UsIGZfdXBkYXRlOiAoKHNfc3RhdGU6IHN0cmluZykgPT4gdm9pZCk9Rl9OT09QKTogUHJvbWlzZTx2b2lkPiB7XG5cdGZfdXBkYXRlKCdSZWFkaW5nIGZyb20gc3RvcmFnZScpO1xuXG5cdC8vIHJldHJpZXZlIHJvb3Rcblx0Y29uc3QgZ19yb290ID0gYXdhaXQgVmF1bHQuZ2V0QmFzZSgpO1xuXG5cdC8vIG5vIHJvb3Qgc2V0LCBuZWVkIHRvIHJlZ2lzdGVyXG5cdGlmKCFnX3Jvb3QpIHtcblx0XHR0aHJvdyBuZXcgVW5yZWdpc3RlcmVkRXJyb3IoKTtcblx0fVxuXG5cdC8vIHJvb3QgaXMgY29ycnVwdFxuXHRpZighVmF1bHQuaXNWYWxpZEJhc2UoZ19yb290KSkge1xuXHRcdHRocm93IG5ldyBDb3JydXB0ZWRWYXVsdEVycm9yKGBTdG9yYWdlIGlzIGNvcnJ1cHQ7IHJvb3Qgb2JqZWN0IGlzIG1pc3Npbmcgb3IgcGFydGlhbGx5IGRhbWFnZWRgKTtcblx0fVxuXG5cdC8vIHBhcnNlIHJvb3QgZmllbGRzXG5cdGNvbnN0IHtcblx0XHRlbnRyb3B5OiBhdHU4X2VudHJvcHksXG5cdFx0bm9uY2U6IHhnX25vbmNlX29sZCxcblx0XHRzaWduYXR1cmU6IGF0dThfc2lnbmF0dXJlX29sZCxcblx0XHR2ZXJzaW9uOiBuX3ZlcnNpb24sXG5cdH0gPSBWYXVsdC5wYXJzZUJhc2UoZ19yb290KTtcblxuXHQvLyBpbmNvbXBhdGlibGUgdmVyc2lvblxuXHRpZihuX3ZlcnNpb24gPCAxKSB7XG5cdFx0dGhyb3cgbmV3IENvcnJ1cHRlZFZhdWx0RXJyb3IoYFZhdWx0IHJlcG9ydHMgdG8gYmUgZW5jcnlwdGVkIHdpdGggYW4gdW5rbm93biB2ZXJzaW9uIGlkZW50aWZpZXJgKTtcblx0fVxuXHQvLyBuZXdlciB2ZXJzaW9uXG5cdGVsc2UgaWYobl92ZXJzaW9uID4gMSkge1xuXHRcdHRocm93IG5ldyBDb3JydXB0ZWRWYXVsdEVycm9yKGBWYXVsdCByZXBvcnRzIHRvIGJlIGVuY3J5cHRlZCB3aXRoIGEgbmV3ZXIgdmVyc2lvbiBpZGVudGlmaWVyYCk7XG5cdH1cblxuXHQvLyBlbXB0eTsgcmVqZWN0XG5cdGlmKCFzaF9waHJhc2UpIHRocm93IG5ldyBJbnZhbGlkUGFzc3BocmFzZUVycm9yKCk7XG5cblx0Ly8gY29udmVydCB0byBidWZmZXJcblx0Y29uc3QgYXR1OF9waHJhc2UgPSB0ZXh0X3RvX2J1ZmZlcihzaF9waHJhc2UpO1xuXG5cdGZfdXBkYXRlKCdEZXJpdmluZyByb290IGtleXMnKTtcblxuXHQvLyBpbXBvcnQgYmFzZSBrZXkgZnJvbSBwYXNzcGhyYXNlIGFuZCBkZXJpdmUgb2xkIGFuZCBuZXcgcm9vdCBrZXlzXG5cdGNvbnN0IHtcblx0XHRvbGQ6IHtcblx0XHRcdGtleTogZGtfcm9vdF9vbGQsXG5cdFx0XHR2ZWN0b3I6IGF0dThfdmVjdG9yX29sZCxcblx0XHR9LFxuXHRcdG5ldzoge1xuXHRcdFx0a2V5OiBka19yb290X25ldyxcblx0XHRcdHZlY3RvcjogYXR1OF92ZWN0b3JfbmV3LFxuXHRcdFx0bm9uY2U6IHhnX25vbmNlX25ldyxcblx0XHR9LFxuXHRcdGV4cG9ydDoga25fcm9vdF9uZXcsXG5cdH0gPSBhd2FpdCBWYXVsdC5kZXJpdmVSb290S2V5cyhhdHU4X3BocmFzZSwgYXR1OF9lbnRyb3B5LCB4Z19ub25jZV9vbGQsIHRydWUpO1xuXG5cdC8vIGJlZm9yZSBhbnkgZmFpbHVyZXMsIHplcm8gb3V0IGtleSBtYXRlcmlhbFxuXHR0cnkge1xuXHRcdC8vIGludmFsaWQgb2xkIHJvb3Qga2V5XG5cdFx0aWYoIWF3YWl0IFZhdWx0LnZlcmlmeVJvb3RLZXkoZGtfcm9vdF9vbGQsIGF0dThfc2lnbmF0dXJlX29sZCkpIHtcblx0XHRcdC8vIG5ldyByb290IGRvZXMgbm90IHdvcmsgZWl0aGVyOyBiYWQgcGFzc3BocmFzZVxuXHRcdFx0aWYoIWF3YWl0IFZhdWx0LnZlcmlmeVJvb3RLZXkoZGtfcm9vdF9uZXcsIGF0dThfc2lnbmF0dXJlX29sZCkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEludmFsaWRQYXNzcGhyYXNlRXJyb3IoKTtcblx0XHRcdH1cblx0XHRcdC8vIHByb2dyYW0gd2FzIGZvciBjbG9zZWQgYW1pZCByZWNyeXB0aW9uXG5cdFx0XHRlbHNlIGlmKCFiX3JlY292ZXIpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFJlY292ZXJhYmxlVmF1bHRFcnJvcigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZfdXBkYXRlKCdSb3RhdGluZyBrZXlzJyk7XG5cblx0XHQvLyByZWNyeXB0IGV2ZXJ5dGhpbmdcblx0XHRhd2FpdCBWYXVsdC5yZWNyeXB0QWxsKGRrX3Jvb3Rfb2xkLCBhdHU4X3ZlY3Rvcl9vbGQsIGRrX3Jvb3RfbmV3LCBhdHU4X3ZlY3Rvcl9uZXcpO1xuXG5cdFx0Zl91cGRhdGUoJ0dlbmVyYXRpbmcgc2lnbmF0dXJlJyk7XG5cblx0XHQvLyBnZW5lcmF0ZSBuZXcgc2lnbmF0dXJlXG5cdFx0Y29uc3QgYXR1OF9zaWduYXR1cmVfbmV3ID0gYXdhaXQgVmF1bHQuZ2VuZXJhdGVSb290S2V5U2lnbmF0dXJlKGRrX3Jvb3RfbmV3KTtcblxuXHRcdGZfdXBkYXRlKCdTYXZpbmcgdG8gc3RvcmFnZScpO1xuXG5cdFx0Ly8gdXBkYXRlIHJvb3Rcblx0XHRhd2FpdCBWYXVsdC5zZXRQYXJzZWRCYXNlKHtcblx0XHRcdGVudHJvcHk6IGF0dThfZW50cm9weSxcblx0XHRcdG5vbmNlOiB4Z19ub25jZV9uZXcsXG5cdFx0XHRzaWduYXR1cmU6IGF0dThfc2lnbmF0dXJlX25ldyxcblx0XHR9KTtcblxuXHRcdC8vIHNldCBzZXNzaW9uXG5cdFx0aWYoc2Vzc2lvbl9zdG9yYWdlX2lzX25hdGl2ZSkge1xuXHRcdFx0YXdhaXQgc2Vzc2lvbl9zdG9yYWdlX3NldF9uYXRpdmUoe1xuXHRcdFx0XHRyb290OiBka19yb290X25ldyxcblx0XHRcdFx0dmVjdG9yOiBhdHU4X3ZlY3Rvcl9uZXcsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRhd2FpdCBzZXNzaW9uX3N0b3JhZ2Vfc2V0X3dyYXBwZWQoe1xuXHRcdFx0XHRyb290OiBBcnJheS5mcm9tKGtuX3Jvb3RfbmV3IS5kYXRhKSxcblx0XHRcdFx0dmVjdG9yOiBBcnJheS5mcm9tKGF0dThfdmVjdG9yX25ldyksXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyB3aXBlIHJvb3Qga2V5IG1hdGVyaWFsXG5cdFx0a25fcm9vdF9uZXc/LndpcGUoKTtcblxuXHRcdC8vIGZpcmUgbG9nZ2VkIGluIGV2ZW50XG5cdFx0Z2xvYmFsX2Jyb2FkY2FzdCh7XG5cdFx0XHR0eXBlOiAnbG9naW4nLFxuXHRcdH0pO1xuXG5cdFx0Zl91cGRhdGUoJ0RvbmUnKTtcblx0fVxuXHQvLyBpbnRlcmNlcHQgZXJyb3Jcblx0Y2F0Y2goZV90aHJvd24pIHtcblx0XHQvLyB6ZXJvIG91dCBrZXkgbWF0ZXJpYWxcblx0XHRrbl9yb290X25ldz8ud2lwZSgpO1xuXG5cdFx0Ly8gcmV0aHJvd1xuXHRcdHRocm93IGVfdGhyb3duO1xuXHR9XG59XG5cblxuLyoqXG4gKiBMb2NrIHRoZSB2YXVsdFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9nb3V0KCk6IFByb21pc2U8dm9pZD4ge1xuXHRhd2FpdCBWYXVsdC5jbGVhclJvb3RLZXkoKTtcbn1cbiIsIlxuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yUmVwb3J0IHtcblx0dGV4dD86IHN0cmluZztcblx0ZXJyb3I/OiBFcnJvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN5c2VycihnX2Vycm9yOiBFcnJvclJlcG9ydCk6IEVycm9yIHtcblx0Y29uc29sZS5lcnJvcihnX2Vycm9yKTtcblx0cmV0dXJuIGdfZXJyb3IuZXJyb3IgfHwgbmV3IEVycm9yKGdfZXJyb3IudGV4dCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FyblJlcG9ydCB7XG5cdHRleHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN5c3dhcm4oZ193YXJuOiBXYXJuUmVwb3J0KTogdm9pZCB7XG5cdGNvbnNvbGUud2FybihnX3dhcm4pO1xufVxuIiwiaW1wb3J0IHR5cGUge05hbWVhYmxlLCBQZnBhYmxlfSBmcm9tICcuL2FibGUnO1xuaW1wb3J0IHR5cGUge0FnZW50LCBDaGFpblBhdGgsIEZhbWlseSwgRmFtaWx5S2V5fSBmcm9tICcuL2NoYWluJztcbmltcG9ydCB0eXBlIHtSZXNvdXJjZX0gZnJvbSAnLi9yZXNvdXJjZSc7XG5cbmV4cG9ydCBlbnVtIENvbnRhY3RBZ2VudFR5cGUge1xuXHRQRVJTT04gPSAncGVyc29uJyxcblx0Q09OVFJBQ1QgPSAnY29udHJhY3QnLFxufVxuXG4vKipcbiAqIEEgY29udGFjdCBpcyBhbiBhZ2VudCB0aGF0IHRoZSB1c2VyIGhhcyBhc3NpZ25lZCBpbmZvcm1hdGlvbiB0b1xuICovXG5leHBvcnQgdHlwZSBDb250YWN0U3BhY2UgPSBFeHRyYWN0PGtleW9mIEZhbWlseS5CZWNoMzJzLCAnYWNjJz47XG5cbmV4cG9ydCB0eXBlIENvbnRhY3Q8XG5cdHNpX2ZhbWlseSBleHRlbmRzIEZhbWlseUtleT1GYW1pbHlLZXksXG5cdHNhX2NvbnRhY3QgZXh0ZW5kcyBzdHJpbmc9c3RyaW5nLFxuXHRzaV9zcGFjZSBleHRlbmRzIENvbnRhY3RTcGFjZT1Db250YWN0U3BhY2UsXG4+ID0gUmVzb3VyY2UuTmV3PHtcblx0ZXh0ZW5kczogQWdlbnQ8c2lfZmFtaWx5LCBzYV9jb250YWN0LCBzaV9zcGFjZT47XG5cdHNlZ21lbnQ6ICdhcy5jb250YWN0Jztcblx0aW50ZXJmYWNlOiBbe1xuXHRcdG5vdGVzOiBzdHJpbmc7XG5cdFx0YWdlbnRUeXBlOiBDb250YWN0QWdlbnRUeXBlO1xuXHRcdHNwYWNlOiBzaV9zcGFjZSBleHRlbmRzIGAke2luZmVyIHN9YD8gczogc3RyaW5nO1xuXHRcdGZhbWlseTogc2lfZmFtaWx5O1xuXHRcdGNoYWluczogUmVjb3JkPENoYWluUGF0aCwge30+O1xuXHR9LCBOYW1lYWJsZSwgUGZwYWJsZV07XG59PjtcblxuZXhwb3J0IHR5cGUgQ29udGFjdFBhdGggPSBSZXNvdXJjZS5QYXRoPENvbnRhY3Q+O1xuIiwiaW1wb3J0IHR5cGUgeyBBcHAsIEFwcFBhdGggfSBmcm9tICcjL21ldGEvYXBwJztcbmltcG9ydCB7IENvbnRhY3QsIENvbnRhY3RBZ2VudFR5cGUsIENvbnRhY3RQYXRoIH0gZnJvbSAnIy9tZXRhL2NvbnRhY3QnO1xuaW1wb3J0IHR5cGUgeyBOZXR3b3JrLCBOZXR3b3JrUGF0aCB9IGZyb20gJyMvbWV0YS9uZXR3b3JrJztcbmltcG9ydCB0eXBlIHsgUGZwLCBQZnBQYXRoIH0gZnJvbSAnIy9tZXRhL3BmcCc7XG5pbXBvcnQgdHlwZSB7IFN0b3JlLCBTdG9yZUtleSB9IGZyb20gJyMvbWV0YS9zdG9yZSc7XG5cbmltcG9ydCB7XG5cdFNJX1NUT1JFX0FDQ09VTlRTLFxuXHRTSV9TVE9SRV9BR0VOVFMsXG5cdFNJX1NUT1JFX0FQUFMsXG5cdFNJX1NUT1JFX0FQUF9QT0xJQ0lFUyxcblx0U0lfU1RPUkVfQ0hBSU5TLFxuXHRTSV9TVE9SRV9FTlRJVElFUyxcblx0U0lfU1RPUkVfRVZFTlRTLFxuXHRTSV9TVE9SRV9NRURJQSxcblx0U0lfU1RPUkVfTkVUV09SS1MsXG5cdFNJX1NUT1JFX1BGUFMsXG5cdFNJX1NUT1JFX1FVRVJZX0NBQ0hFLFxuXHRTSV9TVE9SRV9TRUNSRVRTLFxuXHRTSV9TVE9SRV9TRVRUSU5HUyxcblx0U0lfU1RPUkVfVEFHUyxcblx0U0lfU1RPUkVfV0VCX0FQSVMsXG5cdFNJX1NUT1JFX1dFQl9SRVNPVVJDRVMsXG59IGZyb20gJyMvc2hhcmUvY29uc3RhbnRzJztcbmltcG9ydCB7IERpY3QsIGZvbGQsIG9kZSwgb2RlcmFjIH0gZnJvbSAnIy91dGlsL2JlbHQnO1xuaW1wb3J0IHsgYnVmZmVyX3RvX2Jhc2U2NCwgc2hhMjU2X3N5bmMsIHNoYTI1Nl9zeW5jX2luc2VjdXJlLCB0ZXh0X3RvX2J1ZmZlciB9IGZyb20gJyMvdXRpbC9kYXRhJztcblxuXG5jb25zdCB0eXBlX2NoZWNrID0gPHNpX3N0b3JlIGV4dGVuZHMgU3RvcmVLZXk+KGhfaW5wdXQ6IFN0b3JlLkNhY2hlPHNpX3N0b3JlPik6IHR5cGVvZiBoX2lucHV0ID0+IGhfaW5wdXQ7XG5cbmNvbnN0IEhfTUVESUEgPSBfX0hfTUVESUFfQlVJTFRJTjtcbmNvbnN0IEhfTUVESUFfTE9PS1VQID0gX19IX01FRElBX0xPT0tVUDtcblxuZXhwb3J0IGNvbnN0IEhfU1RPUkVfSU5JVF9NRURJQSA9IHR5cGVfY2hlY2s8dHlwZW9mIFNJX1NUT1JFX01FRElBPihIX01FRElBKTtcblxuY29uc3QgY29zbW9zX2JlY2gzMnMgPSA8c19wcmVmaXggZXh0ZW5kcyBzdHJpbmc9c3RyaW5nPihzX3ByZWZpeDogc19wcmVmaXgpID0+ICh7XG5cdGFjYzoge1xuXHRcdGhycDogc19wcmVmaXgsXG5cdFx0c2VwYXJhdG9yOiAnMScsXG5cdH0sXG5cdGFjY3B1Yjoge1xuXHRcdGhycDogYCR7c19wcmVmaXh9cHViYCxcblx0XHRzZXBhcmF0b3I6ICcxJyxcblx0fSxcblx0dmFsb3Blcjoge1xuXHRcdGhycDogYCR7c19wcmVmaXh9dmFsb3BlcmAsXG5cdFx0c2VwYXJhdG9yOiAnMScsXG5cdH0sXG5cdHZhbG9wZXJwdWI6IHtcblx0XHRocnA6IGAke3NfcHJlZml4fXZhbG9wZXJwdWJgLFxuXHRcdHNlcGFyYXRvcjogJzEnLFxuXHR9LFxuXHR2YWxjb25zOiB7XG5cdFx0aHJwOiBgJHtzX3ByZWZpeH12YWxjb25zYCxcblx0XHRzZXBhcmF0b3I6ICcxJyxcblx0fSxcblx0dmFsY29uc3B1Yjoge1xuXHRcdGhycDogYCR7c19wcmVmaXh9dmFsY29uc3B1YmAsXG5cdFx0c2VwYXJhdG9yOiAnMScsXG5cdH0sXG59KSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IEhfU1RPUkVfSU5JVF9QRlBTID0gdHlwZV9jaGVjazx0eXBlb2YgU0lfU1RPUkVfUEZQUz4oZm9sZDxQZnBbJ2ludGVyZmFjZSddLCBQZnBbJ2ludGVyZmFjZSddPihbXG5cdHtcblx0XHR0eXBlOiAncGxhaW4nLFxuXHRcdGltYWdlOiB7XG5cdFx0XHRkZWZhdWx0OiBIX01FRElBX0xPT0tVUFsnL21lZGlhL3ZlbmRvci9sb2dvLnN2ZyddLFxuXHRcdH0sXG5cdH0sXG5cdHtcblx0XHR0eXBlOiAncGxhaW4nLFxuXHRcdGltYWdlOiB7XG5cdFx0XHRkZWZhdWx0OiBIX01FRElBX0xPT0tVUFsnL21lZGlhL2NoYWluL2Nvc21vcy1odWIuc3ZnJ10sXG5cdFx0fSxcblx0fSxcblx0e1xuXHRcdHR5cGU6ICdwbGFpbicsXG5cdFx0aW1hZ2U6IHtcblx0XHRcdGRlZmF1bHQ6IEhfTUVESUFfTE9PS1VQWycvbWVkaWEvY2hhaW4vc2VjcmV0LW5ldHdvcmsuc3ZnJ10sXG5cdFx0fSxcblx0fSxcblx0e1xuXHRcdHR5cGU6ICdwbGFpbicsXG5cdFx0aW1hZ2U6IHtcblx0XHRcdGRlZmF1bHQ6IEhfTUVESUFfTE9PS1VQWycvbWVkaWEvdG9rZW4vc2VjcmV0LXNlY3JldC5zdmcnXSxcblx0XHR9LFxuXHR9LFxuXHR7XG5cdFx0dHlwZTogJ3BsYWluJyxcblx0XHRpbWFnZToge1xuXHRcdFx0ZGVmYXVsdDogSF9NRURJQV9MT09LVVBbJy9tZWRpYS9vdGhlci9zZWNyZXQtc2F0dXJuLnBuZyddLFxuXHRcdH0sXG5cdH0sXG5cdHtcblx0XHR0eXBlOiAncGxhaW4nLFxuXHRcdGltYWdlOiB7XG5cdFx0XHRkZWZhdWx0OiBIX01FRElBX0xPT0tVUFsnL21lZGlhL290aGVyL3N1cGRvZ2dpZS5wbmcnXSxcblx0XHR9LFxuXHR9LFxuXSwgKGdfcGZwLCBpX3BmcCkgPT4gKHtcblx0W2AvdGVtcGxhdGUucGZwL2lkLiR7aV9wZnB9YF06IGdfcGZwLFxufSkpKTtcblxuY29uc3QgSF9MT09LVVBfUEZQOiBEaWN0PFBmcFBhdGg+ID0ge307XG5mb3IoY29uc3QgW3BfcGZwLCBnX3BmcF0gb2Ygb2RlKEhfU1RPUkVfSU5JVF9QRlBTKSkge1xuXHRpZigncGxhaW4nID09PSBnX3BmcC50eXBlKSB7XG5cdFx0Y29uc3QgZ19tZWRpYSA9IEhfTUVESUFbZ19wZnAuaW1hZ2UuZGVmYXVsdF07XG5cdFx0SF9MT09LVVBfUEZQW2dfbWVkaWEuZGF0YV0gPSBwX3BmcDtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgSF9TVE9SRV9JTklUX0NIQUlOUyA9IHR5cGVfY2hlY2s8dHlwZW9mIFNJX1NUT1JFX0NIQUlOUz4oe1xuXHQnL2ZhbWlseS5jb3Ntb3MvY2hhaW4ucHVsc2FyLTInOiB7XG5cdFx0bmFtZTogJ1NlY3JldCBQdWxzYXInLFxuXHRcdHBmcDogSF9MT09LVVBfUEZQWycvbWVkaWEvY2hhaW4vc2VjcmV0LW5ldHdvcmsuc3ZnJ10sXG5cdFx0ZmFtaWx5OiAnY29zbW9zJyxcblx0XHRpZDogJ3B1bHNhci0yJyxcblx0XHRiZWNoMzJzOiBjb3Ntb3NfYmVjaDMycygnc2VjcmV0JyksXG5cdFx0YmlwNDQ6IHtcblx0XHRcdGNvaW5UeXBlOiA1MjksXG5cdFx0fSxcblx0XHRjb2luczoge1xuXHRcdFx0U0NSVDoge1xuXHRcdFx0XHRkZWNpbWFsczogNixcblx0XHRcdFx0ZGVub206ICd1c2NydCcsXG5cdFx0XHRcdG5hbWU6ICdTZWNyZXQnLFxuXHRcdFx0XHRwZnA6IEhfTE9PS1VQX1BGUFsnL21lZGlhL2NoYWluL3NlY3JldC1uZXR3b3JrLnN2ZyddLFxuXHRcdFx0XHRleHRyYToge1xuXHRcdFx0XHRcdGNvaW5nZWNrb19pZDogJ3NlY3JldCcsXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0dG9rZW5JbnRlcmZhY2VzOiBbJ3NuaXAtMjAnLCAnc25pcC0yMScsICdzbmlwLTcyMScsICdzbmlwLTcyMiddLFxuXHRcdHRlc3RuZXQ6IHRydWUsXG5cdH0sXG5cdCcvZmFtaWx5LmNvc21vcy9jaGFpbi50aGV0YS10ZXN0bmV0LTAwMSc6IHtcblx0XHRuYW1lOiAnQ29zbW9zIEh1YiBUaGV0YScsXG5cdFx0cGZwOiBIX0xPT0tVUF9QRlBbJy9tZWRpYS9jaGFpbi9jb3Ntb3MtaHViLnN2ZyddLFxuXHRcdGZhbWlseTogJ2Nvc21vcycsXG5cdFx0aWQ6ICd0aGV0YS10ZXN0bmV0LTAwMScsXG5cdFx0YmVjaDMyczogY29zbW9zX2JlY2gzMnMoJ2Nvc21vcycpLFxuXHRcdGJpcDQ0OiB7XG5cdFx0XHRjb2luVHlwZTogMTE4LFxuXHRcdH0sXG5cdFx0Y29pbnM6IHtcblx0XHRcdEFUT006IHtcblx0XHRcdFx0ZGVjaW1hbHM6IDYsXG5cdFx0XHRcdGRlbm9tOiAndWF0b20nLFxuXHRcdFx0XHRuYW1lOiAnQ29zbW9zJyxcblx0XHRcdFx0cGZwOiBIX0xPT0tVUF9QRlBbJy9tZWRpYS9jaGFpbi9jb3Ntb3MtaHViLnN2ZyddLFxuXHRcdFx0XHRleHRyYToge1xuXHRcdFx0XHRcdGNvaW5nZWNrb19pZDogJ2Nvc21vcy1odWInLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9LFxuXHRcdHRva2VuSW50ZXJmYWNlczogWydjdy0yMCddLFxuXHRcdHRlc3RuZXQ6IHRydWUsXG5cdH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IEhfU1RPUkVfSU5JVF9ORVRXT1JLUyA9IHR5cGVfY2hlY2s8dHlwZW9mIFNJX1NUT1JFX05FVFdPUktTPihmb2xkKFtcblx0e1xuXHRcdG5hbWU6ICfwnZWKZWNyZXQg8J2VimF0dXJuJyxcblx0XHRwZnA6IEhfTE9PS1VQX1BGUFsnL21lZGlhL290aGVyL3NlY3JldC1zYXR1cm4ucG5nJ10sXG5cdFx0Y2hhaW46ICcvZmFtaWx5LmNvc21vcy9jaGFpbi5wdWxzYXItMicsXG5cdFx0Z3JwY1dlYlVybDogJ2h0dHBzOi8vZ3JwYy50ZXN0bmV0LnNlY3JldHNhdHVybi5uZXQnLFxuXHRcdHJwY0hvc3Q6ICdycGMudGVzdG5ldC5zZWNyZXRzYXR1cm4ubmV0Jyxcblx0fSxcblx0e1xuXHRcdG5hbWU6ICdTdGFyU2hlbGwnLFxuXHRcdHBmcDogSF9MT09LVVBfUEZQWycvbWVkaWEvdmVuZG9yL2xvZ28uc3ZnJ10sXG5cdFx0Y2hhaW46ICcvZmFtaWx5LmNvc21vcy9jaGFpbi50aGV0YS10ZXN0bmV0LTAwMScsXG5cdFx0Z3JwY1dlYlVybDogJ2h0dHBzOi8vZ3JwYy13ZWIuY29zbW9zLXRoZXRhLnN0YXJzaGVsbC5uZXQnLFxuXHRcdHJwY0hvc3Q6ICdycGMuY29zbW9zLXRoZXRhLnN0YXJzaGVsbC5uZXQnLFxuXHR9LFxuXSwgZ19lYWNoID0+ICh7XG5cdFtgL25ldHdvcmsuJHtidWZmZXJfdG9fYmFzZTY0KHNoYTI1Nl9zeW5jX2luc2VjdXJlKHRleHRfdG9fYnVmZmVyKGdfZWFjaC5ncnBjV2ViVXJsKSkpfWBdOiBnX2VhY2gsXG5cdC8vIFtOZXR3b3Jrcy5wYXRoRnJvbShnX2VhY2ggYXMgTmV0d29ya1snaW50ZXJmYWNlJ10pXTogZ19lYWNoLFxufSkpIGFzIFJlY29yZDxOZXR3b3JrUGF0aCwgTmV0d29ya1snaW50ZXJmYWNlJ10+KTtcblxuXG5leHBvcnQgY29uc3QgSF9TVE9SRV9JTklUX0FQUFMgPSB0eXBlX2NoZWNrPHR5cGVvZiBTSV9TVE9SRV9BUFBTPihmb2xkKFtcblx0e1xuXHRcdHNjaGVtZTogJ2h0dHBzJyxcblx0XHRob3N0OiAnYXBwLnN0YXJzaGVsbC5uZXQnLFxuXHRcdGNvbm5lY3Rpb25zOiB7fSxcblx0XHRwZnA6IEhfTE9PS1VQX1BGUFsnL21lZGlhL3ZlbmRvci9sb2dvLnN2ZyddLFxuXHR9LFxuXHR7XG5cdFx0c2NoZW1lOiAnaHR0cHMnLFxuXHRcdGhvc3Q6ICdmYXVjZXQuc2VjcmV0dGVzdG5ldC5pbycsXG5cdFx0Y29ubmVjdGlvbnM6IHt9LFxuXHRcdHBmcDogJycgYXMgUGZwUGF0aCxcblx0fSxcbl0sIGdfZWFjaCA9PiAoe1xuXHRbYC9zY2hlbWUuJHtnX2VhY2guc2NoZW1lfS9ob3N0LiR7Z19lYWNoLmhvc3QucmVwbGFjZSgvOi9nLCAnKycpfWBdOiBnX2VhY2gsXG59KSkgYXMgUmVjb3JkPEFwcFBhdGgsIEFwcFsnaW50ZXJmYWNlJ10+KTtcblxuXG5leHBvcnQgY29uc3QgSF9TVE9SRV9JTklUX0FHRU5UUyA9IHR5cGVfY2hlY2s8dHlwZW9mIFNJX1NUT1JFX0FHRU5UUz4oZm9sZChbXG5cdHtcblx0XHRuYW1lOiAnc3VwZG9nZ2llJyxcblx0XHRub3RlczogJycsXG5cdFx0YWdlbnRUeXBlOiBDb250YWN0QWdlbnRUeXBlLlBFUlNPTixcblx0XHRzcGFjZTogJ2FjYycsXG5cdFx0ZmFtaWx5OiAnY29zbW9zJyxcblx0XHRjaGFpbnM6IHt9LFxuXHRcdHBmcDogSF9MT09LVVBfUEZQWycvbWVkaWEvb3RoZXIvc3VwZG9nZ2llLnBuZyddLFxuXHRcdGFkZHJlc3M6ICcwbXRtNDh1bDVtY2dqajRobTBhNGozdGQ0bDVwdDU5MGVybDNrOScsXG5cdFx0b3JpZ2luOiAnYnVpbHQtaW4nLFxuXHR9IGFzIENvbnRhY3RbJ2ludGVyZmFjZSddLFxuXHR7XG5cdFx0bmFtZTogJ2ZhdWNldC5zZWNyZXR0ZXN0bmV0LmlvJyxcblx0XHRub3RlczogJycsXG5cdFx0YWdlbnRUeXBlOiBDb250YWN0QWdlbnRUeXBlLlBFUlNPTixcblx0XHRzcGFjZTogJ2FjYycsXG5cdFx0ZmFtaWx5OiAnY29zbW9zJyxcblx0XHRjaGFpbnM6IHt9LFxuXHRcdHBmcDogJycgYXMgUGZwUGF0aCxcblx0XHRhZGRyZXNzOiAnM2ZxdHUwbHhzdm44Z3RsZjNtejVrdDc1c3B4djkzc3NhNnZlY2YnLFxuXHRcdG9yaWdpbjogJ2J1aWx0LWluJyxcblx0fSBhcyBDb250YWN0WydpbnRlcmZhY2UnXSxcbl0sIChnX2NvbnRhY3QpID0+ICh7XG5cdFtgL2ZhbWlseS4ke2dfY29udGFjdC5mYW1pbHl9L2FnZW50LiR7Z19jb250YWN0LmFkZHJlc3N9L2FzLmNvbnRhY3RgXTogZ19jb250YWN0LFxufSkpIGFzIFJlY29yZDxDb250YWN0UGF0aCwgQ29udGFjdFsnaW50ZXJmYWNlJ10+KTtcblxuXG5leHBvcnQgY29uc3QgSF9TVE9SRV9JTklUUzoge1xuXHRbc2lfc3RvcmUgaW4gU3RvcmVLZXldOiBTdG9yZVtzaV9zdG9yZV0gZXh0ZW5kcyBhbnlbXVxuXHRcdD8gU3RvcmUuQ2FjaGU8c2lfc3RvcmU+XG5cdFx0OiBQYXJ0aWFsPFN0b3JlLk1hcDxzaV9zdG9yZT4+O1xufSA9IHtcblx0W1NJX1NUT1JFX0FQUFNdOiBIX1NUT1JFX0lOSVRfQVBQUyxcblx0W1NJX1NUT1JFX0FQUF9QT0xJQ0lFU106IHtcblx0XHRocTogW10sXG5cdFx0dXNlcjogW10sXG5cdH0sXG5cdFtTSV9TVE9SRV9BQ0NPVU5UU106IHt9LFxuXHRbU0lfU1RPUkVfQUdFTlRTXTogSF9TVE9SRV9JTklUX0FHRU5UUyxcblx0W1NJX1NUT1JFX0NIQUlOU106IEhfU1RPUkVfSU5JVF9DSEFJTlMsXG5cdFtTSV9TVE9SRV9ORVRXT1JLU106IEhfU1RPUkVfSU5JVF9ORVRXT1JLUyxcblx0W1NJX1NUT1JFX1NFVFRJTkdTXToge30sXG5cdFtTSV9TVE9SRV9NRURJQV06IEhfU1RPUkVfSU5JVF9NRURJQSxcblx0W1NJX1NUT1JFX1BGUFNdOiBIX1NUT1JFX0lOSVRfUEZQUyxcblx0W1NJX1NUT1JFX0VOVElUSUVTXToge30sXG5cdFtTSV9TVE9SRV9FVkVOVFNdOiBbXSxcblx0W1NJX1NUT1JFX1NFQ1JFVFNdOiB7fSxcblx0W1NJX1NUT1JFX1RBR1NdOiB7XG5cdFx0cmVnaXN0cnk6IG9kZXJhYyh7XG5cdFx0XHRwaW5rOiAnI0Q1MDBGOScsXG5cdFx0XHRob3Q6ICcjQzUxMTYyJyxcblx0XHRcdG9yYW5nZTogJyNGRjREMjEnLFxuXHRcdFx0Z29sZDogJyNGRjg2MjInLFxuXHRcdFx0eWVsbG93OiAnI0VFQjUyMScsXG5cdFx0XHRhdXR1bTogJyM3RTlFMjQnLFxuXHRcdFx0Z3Jhc3M6ICcjM0E2RjE2Jyxcblx0XHRcdHRlYWw6ICcjMDA5Njg4Jyxcblx0XHRcdHNreTogJyMxOTc2RDInLFxuXHRcdFx0dmlvbGV0OiAnIzYyMDBFQScsXG5cdFx0XHRncmF5OiAnIzYwN0Q4QicsXG5cdFx0XHRicm93bjogJyM3OTU1NDgnLFxuXHRcdFx0YnJpZ2h0OiAnI2ZmZmZmZicsXG5cdFx0fSwgKHNpX2tleSwgc192YWx1ZSwgaV9lbnRyeSkgPT4gKHtcblx0XHRcdGluZGV4OiBpX2VudHJ5LFxuXHRcdFx0Y29sb3I6IHNfdmFsdWUsXG5cdFx0XHRuYW1lOiBzaV9rZXksXG5cdFx0XHRpbmZvOiAnJyxcblx0XHR9KSksXG5cdFx0bWFwOiB7fSxcblx0fSxcblx0W1NJX1NUT1JFX1FVRVJZX0NBQ0hFXToge30sXG5cdFtTSV9TVE9SRV9XRUJfUkVTT1VSQ0VTXToge30sXG5cdFtTSV9TVE9SRV9XRUJfQVBJU106IHt9LFxufTtcbiIsImltcG9ydCAnIy9kZXYnO1xuXG5pbXBvcnQgdHlwZSB7IFN0b3JlLCBTdG9yZUtleSB9IGZyb20gJyMvbWV0YS9zdG9yZSc7XG5pbXBvcnQgeyBKc29uT2JqZWN0LCBKc29uVmFsdWUsIG9kZSwgdHlwZSBEaWN0IH0gZnJvbSAnIy91dGlsL2JlbHQnO1xuaW1wb3J0IHtcblx0YnVmZmVyX3RvX2hleCxcblx0YnVmZmVyX3RvX3N0cmluZzgsXG5cdGJ1ZmZlcl90b190ZXh0LFxuXHRoZXhfdG9fYnVmZmVyLFxuXHRzdHJpbmc4X3RvX2J1ZmZlcixcblx0dGV4dF90b19idWZmZXIsXG5cdHplcm9fb3V0LFxufSBmcm9tICcjL3V0aWwvZGF0YSc7XG5cbmltcG9ydCB0eXBlIHsgTWVyZ2UgfSBmcm9tICd0cy10b29sYmVsdC9vdXQvT2JqZWN0L01lcmdlJztcblxuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNoYTI1Nl9zeW5jIH0gZnJvbSAnY3J5cHRvLWpzL3NoYTI1Nic7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNoYTUxMl9zeW5jIH0gZnJvbSAnY3J5cHRvLWpzL3NoYTUxMic7XG5cbmltcG9ydCBTZW5zaXRpdmVCeXRlcyBmcm9tICcuL3NlbnNpdGl2ZS1ieXRlcyc7XG5pbXBvcnQgeyBOb3RBdXRoZW50aWNhdGVkRXJyb3IgfSBmcm9tICcjL3NoYXJlL2F1dGgnO1xuaW1wb3J0IHsgZ2xvYmFsX3dhaXQsIGdsb2JhbF9icm9hZGNhc3QgfSBmcm9tICcjL3NjcmlwdC9tc2ctZ2xvYmFsJztcbmltcG9ydCB7IHN5c2Vyciwgc3lzd2FybiB9IGZyb20gJyMvYXBwL2NvbW1vbic7XG5pbXBvcnQgeyBIX1NUT1JFX0lOSVRTIH0gZnJvbSAnIy9zdG9yZS9faW5pdCc7XG5pbXBvcnQgeyBQdWJsaWNTdG9yYWdlLCBzdG9yYWdlX2dldCB9IGZyb20gJyMvZXh0ZW5zaW9uL3B1YmxpYy1zdG9yYWdlJztcblxuXG4vLyBzaGEyNTYoXCJzdGFyc2hlbGxcIilcbmV4cG9ydCBjb25zdCBBVFU4X1NIQTI1Nl9TVEFSU0hFTEwgPSBoZXhfdG9fYnVmZmVyKHNoYTI1Nl9zeW5jKCdzdGFyc2hlbGwnKS50b1N0cmluZygpKTtcblxuLy8gc2hhNTEyKFwic3RhcnNoZWxsXCIpXG5leHBvcnQgY29uc3QgQVRVOF9TSEE1MTJfU1RBUlNIRUxMID0gaGV4X3RvX2J1ZmZlcihzaGE1MTJfc3luYygnc3RhcnNoZWxsJykudG9TdHJpbmcoKSk7XG5cbi8vIGlkZW50aWZpZXMgdGhlIHNjaGVtYSB2ZXJzaW9uIG9mIHRoZSBzdG9yZVxuY29uc3QgU0lfVkVSU0lPTl9TQ0hFTUFfU1RPUkUgPSAnMSc7XG5cbi8vIG51bWJlciBvZiBrZXkgZGVyaXZhdGlvbiBpdGVyYXRpb25zXG4vLyBjb25zdCBOX0lURVJBVElPTlMgPSA2OTQyMDY5O1xuLy8gY29uc3QgTl9JVEVSQVRJT05TID0gNDIwNjk2OTtcbmNvbnN0IE5fSVRFUkFUSU9OUyA9IDIwO1xuXG4vLyBzaXplIG9mIHNhbHQgaW4gYnl0ZXNcbmNvbnN0IE5CX1NBTFQgPSAyNTYgPj4gMztcblxuLy8gc2l6ZSBvZiBub25jZSBpbiBieXRlc1xuY29uc3QgTkJfTk9OQ0UgPSAyNTYgPj4gMztcblxuLy8gcHNldWRvLXJhbmRvbSBoYXNoIGZ1bmN0aW9uIChPSyB0byB1c2UgU0hBLTUxMiB3aXRoIEFFUy0yNTYgc2luY2Uga2RmIHdpbGwgc2ltcGx5IHVzZSBoaWdoZXNldC1vcmRlciBvY3RldHMgb2YgaGFzaClcbi8vIDxodHRwczovL2NyeXB0by5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNDE0NzYvaXMtdGhlcmUtYW55LWJlbmVmaXQtZnJvbS11c2luZy1zaGEtNTEyLW92ZXItc2hhLTI1Ni13aGVuLWFlcy1qdXN0LXRydW5jYXRlcy1pdD5cbmNvbnN0IFNJX1BSRiA9ICdTSEEtNTEyJztcblxuLy8gc2l6ZSBvZiBkZXJpdmVkIEFFUyBrZXkgaW4gYml0c1xuY29uc3QgTklfREVSSVZFRF9BRVNfS0VZID0gMjU2O1xuXG5jb25zdCBYQ19DSEFSX0pTT05fMCA9ICd7Jy5jaGFyQ29kZUF0KDApO1xuY29uc3QgWENfQ0hBUl9KU09OXzEgPSAnXCInLmNoYXJDb2RlQXQoMCk7XG5cbi8vIG9uY2UgdGhpcyB0aHJlc2hvbGQgaXMgZXhjZWVkZWQsIGRvIG5vdCBlbnF1ZXVlIGFueSBtb3JlIHJlY3J5cHRpb24gb3BlcmF0aW9uc1xuY29uc3QgTkJfUkVDUllQVElPTl9USFJFU0hPTEQgPSAzMiAqIDEwMjQ7ICAvLyA2NCBLaUJcblxuLy8gYWxnb3JpdGhtIG9wdGlvbnMgZm9yIGRlcml2aW5nIHJvb3Qgc2lnbmluZyBrZXlcbmNvbnN0IEdDX0RFUklWRV9ST09UX1NJR05JTkcgPSB7XG5cdG5hbWU6ICdITUFDJyxcblx0aGFzaDogJ1NIQS0yNTYnLFxufTtcblxuLy8gYWxnb3JpdGhtIG9wdGlvbnMgZm9yIGRlcml2aW5nIHJvb3QgZW5jcnlwdGlvbi9kZWNyeXB0aW9uIGtleVxuY29uc3QgR0NfREVSSVZFX1JPT1RfQ0lQSEVSID0ge1xuXHRuYW1lOiAnQUVTLUdDTScsXG5cdGxlbmd0aDogTklfREVSSVZFRF9BRVNfS0VZLFxufTtcblxuLy8gcGFyYW1zIGZvciBoa2RmIGNvbW1vbiB0byBhbGwgY2FzZXMgKHNhbHQgZ2V0cyBvdmVycmlkZGVuKVxuY29uc3QgR0NfSEtERl9DT01NT04gPSB7XG5cdG5hbWU6ICdIS0RGJyxcblx0aGFzaDogJ1NIQS0yNTYnLFxuXHRzYWx0OiBBVFU4X1NIQTI1Nl9TVEFSU0hFTEwsXG5cdGluZm86IFVpbnQ4QXJyYXkuZnJvbShbXSksXG59O1xuXG5jb25zdCBBX1NUT1JFX0tFWVM6IEFycmF5PFN0b3JlS2V5IHwgJ2tleXMnPiA9IFsna2V5cycsIC4uLk9iamVjdC5rZXlzKEhfU1RPUkVfSU5JVFMpIGFzIEFycmF5PFN0b3JlS2V5Pl07XG5cbi8vIGlkZW50aWZ5IHRoaXMgbG9jYWwgZnJhbWVcbmNvbnN0IFNJX0ZSQU1FX0xPQ0FMID0gY3J5cHRvLnJhbmRvbVVVSUQoKS5zbGljZSgyNCk7XG5cblxuaW50ZXJmYWNlIFZhdWx0RmllbGRzIHtcblx0YXR1OF9jaXBoZXJ0ZXh0OiBVaW50OEFycmF5O1xufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIHVubG9jayhhdHU4X2ltcG9ydDogVWludDhBcnJheSkge1xuXHQvLyBXZWIgQ3J5cHRvIGRvZXMgbm90IHN1cHBvcnQgdGhlIHNlY3AyNTZrMSBjdXJ2ZSwgYnV0IGtlZXBpbmcgdGhlIHByaXZhdGUga2V5IGluIGhlYXAgbWVtb3J5XG5cdC8vIG1ha2VzIHRoZSB1c2VyIG1vcmUgdnVsbmVyYWJsZSB0byBrZXkgZmluZGluZyBhdHRhY2tzLiBpbnN0ZWFkLCB0cnkgdG8gbGV2ZXJhZ2UgcGxhdGZvcm0tc3BlY2lmaWNcblx0Ly8gc29sdXRpb25zIHByb3ZpZGVkIGJ5IGJyb3dzZXIgdGhhdCBpZGVhbGx5IHN0b3JlIHRoZSBrZXkgd2l0aGluIHNlY3VyZSBoYXJkd2FyZSBib3VuZGFyaWVzLlxuXHQvLyBtb3JlIHNwZWNpZmljYWxseSwgY2hvb3NlIGEgc3VwcG9ydGVkIGVsbGlwdGljIGN1cnZlIHRoYXQgaGFzIGxhcmdlciBgbmAgY3VydmUgb3JkZXIgdGhhbiBzZWNwMjU2azFcblx0Ly8gaW4gb3JkZXIgdG8gbWFrZSBzdXJlIHRoZSBwcml2YXRlIGtleSB3b24ndCBiZSByZWplY3RlZCB1cG9uIGltcG9ydCBmb3IgZXhjZWVkaW5nIHRoZSB2YWxpZCByYW5nZS5cblx0Ly8gc2VjcDI1NmsxOiA8aHR0cHM6Ly9uZXVyb21hbmNlci5zay9zdGQvc2VjZy9zZWNwMjU2azE+XG5cdC8vIHNlY3AzODRyMSAoUC0zODQpOiA8aHR0cHM6Ly9uZXVyb21hbmNlci5zay9zdGQvc2VjZy9zZWNwMzg0cjE+XG5cdGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBhdHU4X2ltcG9ydCwge1xuXHRcdG5hbWU6ICdFQ0RTQScsXG5cdFx0bmFtZWRDdXJ2ZTogJ1AtMzg0Jyxcblx0fSwgdHJ1ZSwgW10pO1xuXG5cdC8vIFxuXHRjb25zdCBhdHU4X2EgPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDMyKSk7XG5cdGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBhdHU4X2EsIHtcblx0XHRuYW1lOiAnRUNEU0EnLFxuXHRcdG5hbWVkQ3VydmU6ICdQLTM4NCcsXG5cdH0sIGZhbHNlLCBbJ2Rlcml2ZUJpdHMnXSk7XG59XG5cblxuLyoqXG4gKiBQcml2YXRlIGZpZWxkcyBmb3IgaW5zdGFuY2VzIG9mIGBWYXVsdGBcbiAqL1xuY29uc3QgaG1fcHJpdmF0ZXMgPSBuZXcgV2Vha01hcDxWYXVsdEVudHJ5LCBWYXVsdEZpZWxkcz4oKTtcblxuLy8gLyoqXG4vLyAgKiBLZWVwcyB0cmFjayBvZiB3aGljaCBzdG9yZXMgaGF2ZSBiZWVuIGNoZWNrZWQgb3V0IGluIG9yZGVyIHRvIHByZXZlbnQgbG9zdCB1cGRhdGVzLlxuLy8gICovXG4vLyBjb25zdCBoX2NoZWNrZWRfb3V0czogRGljdDxWYXVsdD4gPSB7fTtcblxuXG4vLyAvKipcbi8vICAqIExvYWRzIG1ldGFkYXRhIChpbmNsLiBjaXBoZXJ0ZXh0KSBmcm9tIHN0b3JhZ2UuXG4vLyAgKi9cbi8vIGFzeW5jIGZ1bmN0aW9uIFZhdWx0JF9sb2FkPFxuLy8gXHRrX3RoaXMgZXh0ZW5kcyBWYXVsdCxcbi8vID4odGhpczogdm9pZCwga190aGlzOiBrX3RoaXMpOiBQcm9taXNlPGtfdGhpcz4ge1xuLy8gXHQvLyByZWFkIGZyb20gc3RvcmFnZVxuLy8gXHRjb25zdCB3X3N0b3JhZ2UgPSAoYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KGtfdGhpcy5fc2lfa2V5KSlba190aGlzLl9zaV9rZXldO1xuXG4vLyBcdC8vIGRlc3RydWN0dXJlIHN0b3JhZ2UgYW5kIGZpbGwgaW4gZGVmYXVsdHNcbi8vIFx0Y29uc3Qge1xuLy8gXHRcdHNhbHQ6IHNoX3NhbHRfcmVhZCxcbi8vIFx0XHRub25jZTogc2hfbm9uY2VfcmVhZCxcbi8vIFx0XHRzY2hlbWE6IHNpX3NjaGVtYV9yZWFkLFxuLy8gXHRcdGRhdGE6IHN4X2RhdGEsXG4vLyBcdH0gPSB3X3N0b3JhZ2UgfHwge1xuLy8gXHRcdHNhbHQ6ICcnLFxuLy8gXHRcdG5vbmNlOiAnJyxcbi8vIFx0XHRzY2hlbWE6IFNJX1ZFUlNJT05fU0NIRU1BX1NUT1JFLFxuLy8gXHRcdGRhdGE6ICcnLFxuLy8gXHR9O1xuXG4vLyBcdC8vIHNhdmUgdG8gbG9jYWwgZmllbGRzXG4vLyBcdGhtX3ByaXZhdGVzLnNldChrX3RoaXMsIHtcbi8vIFx0XHRzaF9zYWx0X3JlYWQsXG4vLyBcdFx0c2hfbm9uY2VfcmVhZCxcbi8vIFx0XHRzaV9zY2hlbWFfcmVhZCxcbi8vIFx0XHRhdHU4X2NpcGhlcnRleHQ6IHN0cmluZzhfdG9fYnVmZmVyKHN4X2RhdGEpLFxuLy8gXHR9KTtcblxuLy8gXHQvLyBtYXJrIGFzIGxvYWRlZFxuLy8gXHRrX3RoaXMuX2JfbG9hZGVkID0gdHJ1ZTtcblxuLy8gXHQvLyByZXR1cm4gaW5zdGFuY2Vcbi8vIFx0cmV0dXJuIGtfdGhpcztcbi8vIH1cblxuXG4vLyBhc3luYyBmdW5jdGlvbiBWYXVsdCRfcHJlZGVyaXZlKHRoaXM6IHZvaWQsIGtfdGhpczogVmF1bHQsIGRrX3BocmFzZTogQ3J5cHRvS2V5KTogUHJvbWlzZTx2b2lkPiB7XG4vLyBcdC8vIHJlZiBwcml2YXRlIHN0cnVjdFxuLy8gXHRjb25zdCBnX3ByaXZhdGUgPSBobV9wcml2YXRlcy5nZXQoa190aGlzKSE7XG5cbi8vIFx0Ly8gZ2VuZXJhdGUgc2FsdCB0byBkZXJpdmUgdGhlIG5leHQgZW5jcnlwdGlvbiBrZXlcbi8vIFx0Y29uc3QgYXR1OF9zYWx0X3dyaXRlID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShOQl9TQUxUKSk7XG5cbi8vIFx0Ly8gZGVyaXZlIHRoZSBuZXh0IGVuY3J5cHRpb24ga2V5XG4vLyBcdGNvbnN0IGRrX2Flc193cml0ZSA9IGF3YWl0IHBia2RmMl9kZXJpdmUoZGtfcGhyYXNlLCBhdHU4X3NhbHRfd3JpdGUpO1xuXG4vLyBcdC8vIHN0b3JlIHRoZSBrZXkgc28gaXQgaXMgcmVhZHkgZm9yIHRoZSBuZXh0IGVuY3J5cHRpb25cbi8vIFx0T2JqZWN0LmFzc2lnbihnX3ByaXZhdGUsIHtcbi8vIFx0XHRka19hZXNfd3JpdGUsXG4vLyBcdFx0c3hfc2FsdF93cml0ZTogYnVmZmVyX3RvX2hleChhdHU4X3NhbHRfd3JpdGUpLFxuLy8gXHR9KTtcbi8vIH1cblxuLy8gLyoqXG4vLyAgKiBUYWtlcyB0aGUgcGFzc3BocmFzZSBrZXkgYXMgaW5wdXQgYW5kIHVzZXMgaXQgdG8gZGVyaXZlIHRoZSBjdXJyZW50IGRlY3J5cHRpb24ga2V5LlxuLy8gICovXG4vLyBhc3luYyBmdW5jdGlvbiBWYXVsdCRfcm90YXRlKHRoaXM6IHZvaWQsIGtfdGhpczogVmF1bHQsIGRrX3BocmFzZTogQ3J5cHRvS2V5KSB7XG4vLyBcdC8vIHJlZiBwcml2YXRlIHN0cnVjdFxuLy8gXHRjb25zdCBnX3ByaXZhdGUgPSBobV9wcml2YXRlcy5nZXQoa190aGlzKSE7XG5cbi8vIFx0Ly8gcmVmIHRoZSBzYWx0IHRvIGRlcml2ZSB0aGUgZGVjcnlwdGlvbiBrZXlcbi8vIFx0Y29uc3QgYXR1OF9zYWx0X3JlYWQgPSBoZXhfdG9fYnVmZmVyKGdfcHJpdmF0ZS5zaF9zYWx0X3JlYWQpO1xuXHRcbi8vIFx0Ly8gZGVyaXZlIHRoZSBkZWNyeXB0aW9uIGtleVxuLy8gXHRjb25zdCBka19hZXNfcmVhZCA9IGF3YWl0IHBia2RmMl9kZXJpdmUoZGtfcGhyYXNlLCBhdHU4X3NhbHRfcmVhZCk7XG5cbi8vIFx0Ly8gcmV0dXJuIHRoZSBkZWNyeXB0aW9uIGtleVxuLy8gXHRyZXR1cm4gZGtfYWVzX3JlYWQ7XG4vLyB9XG5cbi8vIGFzeW5jIGZ1bmN0aW9uIFZhdWx0JF9kZWNyeXB0KHRoaXM6IHZvaWQsIGtfdGhpczogVmF1bHQsIGRrX2Flc19yZWFkOiBDcnlwdG9LZXkpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbi8vIFx0Ly8gZGVzdHJ1Y3R1cmUgcHJpdmF0ZSBmaWVsZChzKVxuLy8gXHRjb25zdCB7XG4vLyBcdFx0c2hfbm9uY2VfcmVhZCxcbi8vIFx0XHRhdHU4X2NpcGhlcnRleHQsXG4vLyBcdH0gPSBobV9wcml2YXRlcy5nZXQoa190aGlzKSE7XG5cdFxuLy8gXHQvLyBwcmVwIHRoZSBpdiB0byBkZWNyeXB0IHRoZSBzdG9yZVxuLy8gXHRjb25zdCBhdHU4X25vbmNlX3JlYWQgPSBoZXhfdG9fYnVmZmVyKHNoX25vbmNlX3JlYWQpO1xuXG4vLyBcdC8vIHJldHVybiBkZWNyeXB0ZWQgZGF0YVxuLy8gXHRyZXR1cm4gYXdhaXQgY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHtcbi8vIFx0XHRuYW1lOiAnQUVTLUdDTScsXG4vLyBcdFx0aXY6IGF0dThfbm9uY2VfcmVhZCxcbi8vIFx0fSwgZGtfYWVzX3JlYWQsIGF0dThfY2lwaGVydGV4dCk7XG4vLyB9XG5cbmFzeW5jIGZ1bmN0aW9uIHRlc3RfZW5jcnlwdGlvbl9pbnRlZ3JpdHkoYXR1OF9kYXRhOiBVaW50OEFycmF5LCBka19jaXBoZXI6IENyeXB0b0tleSwgYXR1OF92ZWN0b3I6IFVpbnQ4QXJyYXksIGF0dThfdmVyaWZ5PUFUVThfU0hBMjU2X1NUQVJTSEVMTCkge1xuXHR0cnkge1xuXHRcdGNvbnN0IGF0dThfZW5jcnlwdGVkID0gYXdhaXQgZW5jcnlwdChhdHU4X2RhdGEsIGRrX2NpcGhlciwgYXR1OF92ZWN0b3IsIGF0dThfdmVyaWZ5KTtcblx0XHRjb25zdCBzX2VuY3J5cHRlZCA9IGJ1ZmZlcl90b19zdHJpbmc4KGF0dThfZW5jcnlwdGVkKTtcblx0XHRjb25zdCBhdHU4X2VuY3J5cHRlZF9iID0gc3RyaW5nOF90b19idWZmZXIoc19lbmNyeXB0ZWQpO1xuXHRcdGNvbnN0IGF0dThfZGVjcnlwdGVkID0gYXdhaXQgZGVjcnlwdChhdHU4X2VuY3J5cHRlZF9iLCBka19jaXBoZXIsIGF0dThfdmVjdG9yLCBhdHU4X3ZlcmlmeSk7XG5cblx0XHRpZihhdHU4X2RhdGEuYnl0ZUxlbmd0aCAhPT0gYXR1OF9kZWNyeXB0ZWQuYnl0ZUxlbmd0aCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBCeXRlIGxlbmd0aCBtaXNtYXRjaGApO1xuXHRcdH1cblxuXHRcdGZvcihsZXQgaWJfZWFjaD0wOyBpYl9lYWNoPGF0dThfZGF0YS5ieXRlTGVuZ3RoOyBpYl9lYWNoKyspIHtcblx0XHRcdGlmKGF0dThfZGF0YVtpYl9lYWNoXSAhPT0gYXR1OF9kZWNyeXB0ZWRbaWJfZWFjaF0pIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBCdWZmZXJzIGFyZSBub3QgaWRlbnRpY2FsYCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGNhdGNoKGVfaWRlbnRpdHkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjb21wbGV0ZSByb3VuZC10cmlwIGVuY3J5cHRpb24vZGVjcnlwdGlvbjogJHtlX2lkZW50aXR5fWApO1xuXHR9XG59XG5cbmV4cG9ydCB0eXBlIFNlc3Npb25TdG9yYWdlID0gTWVyZ2U8e1xuXHRyb290OiB7XG5cdFx0bmF0aXZlOiBDcnlwdG9LZXk7XG5cdFx0d3JhcHBlZDogbnVtYmVyW107XG5cdH07XG5cdHZlY3Rvcjoge1xuXHRcdG5hdGl2ZTogVWludDhBcnJheTtcblx0XHR3cmFwcGVkOiBudW1iZXJbXTtcblx0fTtcblx0Zmxvdzoge1xuXHRcdG5hdGl2ZTogc3RyaW5nO1xuXHRcdHdyYXBwZWQ6IHN0cmluZztcblx0fTtcbn0sIHtcblx0W3NpX2xvY2sgaW4gYGxvY2tfJHtzdHJpbmd9YF06IHtcblx0XHRuYXRpdmU6IHN0cmluZztcblx0XHR3cmFwcGVkOiBzdHJpbmc7XG5cdH07XG59PjtcblxuZXhwb3J0IHR5cGUgU2Vzc2lvblN0b3JhZ2VLZXkgPSBrZXlvZiBTZXNzaW9uU3RvcmFnZTtcblxuZXhwb3J0IG5hbWVzcGFjZSBTZXNzaW9uU3RvcmFnZSB7XG5cdGV4cG9ydCB0eXBlIE5hdGl2ZTxcblx0XHRzaV9rZXkgZXh0ZW5kcyBTZXNzaW9uU3RvcmFnZUtleT1TZXNzaW9uU3RvcmFnZUtleSxcblx0PiA9IFNlc3Npb25TdG9yYWdlW3NpX2tleV0gZXh0ZW5kcyB7bmF0aXZlOiBpbmZlciB3X25hdGl2ZX1cblx0XHQ/IHdfbmF0aXZlXG5cdFx0OiBuZXZlcjtcblxuXHRleHBvcnQgdHlwZSBXcmFwcGVkPFxuXHRcdHNpX2tleSBleHRlbmRzIFNlc3Npb25TdG9yYWdlS2V5PVNlc3Npb25TdG9yYWdlS2V5LFxuXHQ+ID0gU2Vzc2lvblN0b3JhZ2Vbc2lfa2V5XSBleHRlbmRzIHt3cmFwcGVkOiBpbmZlciB3X3dyYXBwZWR9XG5cdFx0PyB3X3dyYXBwZWRcblx0XHQ6IG5ldmVyO1xuXG5cdGV4cG9ydCB0eXBlIFN0cnVjdDxcblx0XHRzaV93aGljaCBleHRlbmRzICduYXRpdmUnIHwgJ3dyYXBwZWQnLFxuXHQ+ID0ge1xuXHRcdFtzaV9rZXkgaW4gU2Vzc2lvblN0b3JhZ2VLZXldOiB7XG5cdFx0XHRuYXRpdmU6IE5hdGl2ZTxzaV9rZXk+O1xuXHRcdFx0d3JhcHBlZDogV3JhcHBlZDxzaV9rZXk+O1xuXHRcdH1bc2lfd2hpY2hdO1xuXHR9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzdG9yZV9hc19rZXkoXG5cdHpfZGF0YTogbnVsbCB8IG51bWJlcltdIHwgQ3J5cHRvS2V5LFxuXHR3X2tkZjogQWxnb3JpdGhtSWRlbnRpZmllcixcblx0Yl9leHRyYWN0YWJsZTogYm9vbGVhbixcblx0YV91c2FnZXM6IEtleVVzYWdlW10sXG4pOiBQcm9taXNlPG51bGwgfCBDcnlwdG9LZXk+IHtcblx0aWYoQXJyYXkuaXNBcnJheSh6X2RhdGEpKSB7XG5cdFx0cmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBVaW50OEFycmF5LmZyb20oel9kYXRhKSwgd19rZGYsIGZhbHNlLCBhX3VzYWdlcyk7XG5cdH1cblxuXHRyZXR1cm4gel9kYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzdG9yZV9hc19idWZmZXIoel9kYXRhOiBudWxsIHwgbnVtYmVyW10gfCBVaW50OEFycmF5KTogbnVsbCB8IFVpbnQ4QXJyYXkge1xuXHRpZihBcnJheS5pc0FycmF5KHpfZGF0YSkpIHtcblx0XHRyZXR1cm4gVWludDhBcnJheS5mcm9tKHpfZGF0YSk7XG5cdH1cblxuXHRyZXR1cm4gel9kYXRhO1xufVxuXG5cbnR5cGUgU2V0TmF0aXZlID0gUGFydGlhbDxTZXNzaW9uU3RvcmFnZS5TdHJ1Y3Q8J25hdGl2ZSc+PjtcbnR5cGUgU2V0V3JhcHBlZCA9IFBhcnRpYWw8U2Vzc2lvblN0b3JhZ2UuU3RydWN0PCd3cmFwcGVkJz4+O1xuXG5leHBvcnQgY29uc3Qge1xuXHRzZXNzaW9uX3N0b3JhZ2VfZ2V0LFxuXHRzZXNzaW9uX3N0b3JhZ2Vfc2V0X25hdGl2ZSxcblx0c2Vzc2lvbl9zdG9yYWdlX3NldF93cmFwcGVkLFxuXHRzZXNzaW9uX3N0b3JhZ2VfcmVtb3ZlLFxuXHRzZXNzaW9uX3N0b3JhZ2VfY2xlYXIsXG5cdHNlc3Npb25fc3RvcmFnZV9pc19uYXRpdmUsXG59ID0gKCgpID0+IHtcblx0aWYoY2hyb21lLnN0b3JhZ2VbJ3Nlc3Npb24nXSkge1xuXHRcdGNvbnN0IGRfc2Vzc2lvbiA9IChjaHJvbWUuc3RvcmFnZSBhcyB1bmtub3duIGFzIHtcblx0XHRcdHNlc3Npb246IGNocm9tZS5zdG9yYWdlLlN0b3JhZ2VBcmVhO1xuXHRcdH0pLnNlc3Npb247XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YXN5bmMgc2Vzc2lvbl9zdG9yYWdlX2dldDxcblx0XHRcdFx0c2lfa2V5IGV4dGVuZHMgU2Vzc2lvblN0b3JhZ2VLZXksXG5cdFx0XHQ+KHNpX2tleTogc2lfa2V5KTogUHJvbWlzZTxTZXNzaW9uU3RvcmFnZS5XcmFwcGVkPHNpX2tleT4gfCBudWxsPiB7XG5cdFx0XHRcdHJldHVybiAoYXdhaXQgZF9zZXNzaW9uLmdldChbc2lfa2V5XSkgYXMge1xuXHRcdFx0XHRcdFtzaSBpbiB0eXBlb2Ygc2lfa2V5XTogU2Vzc2lvblN0b3JhZ2UuV3JhcHBlZDxzaV9rZXk+IHwgbnVsbDtcblx0XHRcdFx0fSlbc2lfa2V5XTtcblx0XHRcdH0sXG5cblx0XHRcdHNlc3Npb25fc3RvcmFnZV9zZXRfbmF0aXZlKGhfc2V0X25hdGl2ZTogU2V0TmF0aXZlKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW1wbGVtZW50YXRpb24gYnVnOyBjYW5ub3QgdXNlIG5hdGl2ZSBzZXNzaW9uIHN0b3JhZ2UnKTtcblx0XHRcdH0sXG5cblx0XHRcdGFzeW5jIHNlc3Npb25fc3RvcmFnZV9zZXRfd3JhcHBlZChoX3NldF93cmFwcGVkOiBTZXRXcmFwcGVkKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0XHRcdHJldHVybiBhd2FpdCBkX3Nlc3Npb24uc2V0KGhfc2V0X3dyYXBwZWQpO1xuXHRcdFx0fSxcblxuXHRcdFx0YXN5bmMgc2Vzc2lvbl9zdG9yYWdlX3JlbW92ZShzaV9rZXk6IFNlc3Npb25TdG9yYWdlS2V5KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0XHRcdHJldHVybiBhd2FpdCBkX3Nlc3Npb24ucmVtb3ZlKHNpX2tleSk7XG5cdFx0XHR9LFxuXG5cdFx0XHRhc3luYyBzZXNzaW9uX3N0b3JhZ2VfY2xlYXIoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0XHRcdHJldHVybiBhd2FpdCBkX3Nlc3Npb24uY2xlYXIoKTtcblx0XHRcdH0sXG5cblx0XHRcdHNlc3Npb25fc3RvcmFnZV9pc19uYXRpdmU6IGZhbHNlLFxuXHRcdH07XG5cdH1cblx0ZWxzZSB7XG5cdFx0Y29uc3QgZHdfYmFja2dyb3VuZCA9IGNocm9tZS5leHRlbnNpb24uZ2V0QmFja2dyb3VuZFBhZ2UoKTtcblxuXHRcdGlmKCFkd19iYWNrZ3JvdW5kKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Jyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhbnkgdHlwZSBvZiBzZXNzaW9uIHN0b3JhZ2UnKTtcblx0XHR9XG5cblx0XHQvLyBkZWNsYXJlIGluaXRpYWwgc3RvcmFnZSBvYmplY3Rcblx0XHRsZXQgZ19zZXNzaW9uOiBTZXROYXRpdmUgPSBkd19iYWNrZ3JvdW5kWydfZ19zZXNzaW9uJ10gPSB7fTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVxdWlyZS1hd2FpdCAqL1xuXHRcdFx0YXN5bmMgc2Vzc2lvbl9zdG9yYWdlX2dldDxcblx0XHRcdFx0c2lfa2V5IGV4dGVuZHMgU2Vzc2lvblN0b3JhZ2VLZXksXG5cdFx0XHQ+KHNpX2tleTogc2lfa2V5KTogUHJvbWlzZTxTZXNzaW9uU3RvcmFnZS5OYXRpdmU8c2lfa2V5PiB8IG51bGw+IHtcblx0XHRcdFx0cmV0dXJuIGdfc2Vzc2lvbltzaV9rZXldISA/PyBudWxsO1xuXHRcdFx0fSxcblxuXHRcdFx0YXN5bmMgc2Vzc2lvbl9zdG9yYWdlX3NldF9uYXRpdmUoaF9zZXRfbmF0aXZlOiBTZXROYXRpdmUpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRcdFx0Zm9yKGNvbnN0IFtzaV9rZXksIHdfdmFsdWVdIG9mIG9kZShoX3NldF9uYXRpdmUpKSB7XG5cdFx0XHRcdFx0c2Vzc2lvbl9zdG9yYWdlX3JlbW92ZShzaV9rZXkpO1xuXHRcdFx0XHRcdGdfc2Vzc2lvbltzaV9rZXkgYXMgc3RyaW5nXSA9IHdfdmFsdWUhO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhc3luYyBzZXNzaW9uX3N0b3JhZ2Vfc2V0X3dyYXBwZWQoaF9zZXRfd3JhcHBlZDogU2V0V3JhcHBlZCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ltcGxlbWVudGF0aW9uIGJ1ZzsgY2Fubm90IHVzZSB3cmFwcGVkIHNlc3Npb24gc3RvcmFnZScpO1xuXHRcdFx0fSxcblxuXHRcdFx0YXN5bmMgc2Vzc2lvbl9zdG9yYWdlX3JlbW92ZShzaV9rZXk6IFNlc3Npb25TdG9yYWdlS2V5KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0XHRcdGNvbnN0IHpfdmFsdWUgPSBnX3Nlc3Npb25bc2lfa2V5XTtcblx0XHRcdFx0aWYoel92YWx1ZSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHpfdmFsdWUpIHtcblx0XHRcdFx0XHRpZihBcnJheS5pc0FycmF5KHpfdmFsdWUpIHx8IEFycmF5QnVmZmVyLmlzVmlldyh6X3ZhbHVlKSkge1xuXHRcdFx0XHRcdFx0emVyb19vdXQoel92YWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGdfc2Vzc2lvbltzaV9rZXldO1xuXHRcdFx0fSxcblxuXHRcdFx0YXN5bmMgc2Vzc2lvbl9zdG9yYWdlX2NsZWFyKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdFx0XHRmb3IoY29uc3QgW3NpX2tleSwgd192YWx1ZV0gb2Ygb2RlKGdfc2Vzc2lvbikpIHtcblx0XHRcdFx0XHRzZXNzaW9uX3N0b3JhZ2VfcmVtb3ZlKHNpX2tleSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyByZXNldFxuXHRcdFx0XHRkd19iYWNrZ3JvdW5kWydfZ19zZXNzaW9uJ10gPSBnX3Nlc3Npb24gPSB7fTtcblx0XHRcdH0sXG5cblx0XHRcdHNlc3Npb25fc3RvcmFnZV9pc19uYXRpdmU6IHRydWUsXG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L3JlcXVpcmUtYXdhaXQgKi9cblx0XHR9O1xuXHR9XG59KSgpO1xuXG5cbmFzeW5jIGZ1bmN0aW9uIHNlc3Npb25fc3RvcmFnZV9zZXRfaXNvbW9ycGhpYyhoX3NldDogU2V0TmF0aXZlICYgU2V0V3JhcHBlZCk6IFByb21pc2U8dm9pZD4ge1xuXHRpZihzZXNzaW9uX3N0b3JhZ2VfaXNfbmF0aXZlKSB7XG5cdFx0YXdhaXQgc2Vzc2lvbl9zdG9yYWdlX3NldF9uYXRpdmUoaF9zZXQgYXMgU2V0TmF0aXZlKTtcblx0fVxuXHRlbHNlIHtcblx0XHRhd2FpdCBzZXNzaW9uX3N0b3JhZ2Vfc2V0X3dyYXBwZWQoaF9zZXQgYXMgU2V0V3JhcHBlZCk7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaGtkZl9wYXJhbXMoKTogUHJvbWlzZTx0eXBlb2YgR0NfSEtERl9DT01NT04+IHtcblx0Ly8gZ2V0IGJhc2Vcblx0Y29uc3QgZ19iYXNlID0gYXdhaXQgVmF1bHQuZ2V0QmFzZSgpO1xuXG5cdC8vIHByZXAgc2FsdCByZWZcblx0bGV0IGF0dThfc2FsdDogVWludDhBcnJheTtcblxuXHQvLyBiYXNlIGV4aXN0cyBhbmQgaXMgdmFsdWRcblx0aWYoVmF1bHQuaXNWYWxpZEJhc2UoZ19iYXNlKSkge1xuXHRcdC8vIHJldHJpZXZlIGV4aXN0aW5nIHNhbHRcblx0XHRhdHU4X3NhbHQgPSAoYXdhaXQgVmF1bHQuZ2V0U2FsdCgpKSE7XG5cblx0XHQvLyBkb2VzIG5vdCBleGlzdFxuXHRcdGlmKCFhdHU4X3NhbHQgfHwgTkJfU0FMVCAhPT0gYXR1OF9zYWx0LmJ5dGVMZW5ndGgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVmF1bHQgaXMgaXJyZXBhcmFibHkgY29ycnVwdGVkLiBObyBzYWx0IHdhcyBmb3VuZC4nKTtcblx0XHR9XG5cdH1cblx0Ly8gYmFzZSBub3QgeWV0IGV4aXN0c1xuXHRlbHNlIHtcblx0XHQvLyBnZW5lcmF0ZSBuZXcgc2FsdFxuXHRcdGF0dThfc2FsdCA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoTkJfU0FMVCkpO1xuXG5cdFx0Ly8gc2F2ZVxuXHRcdGF3YWl0IFZhdWx0LnNldFNhbHQoYXR1OF9zYWx0KTtcblx0fVxuXG5cdC8vIHBhcnNlIGJhc2UsIHJldHVybiBleHRlbmRlZCBIS0RGIHBhcmFtc1xuXHRyZXR1cm4ge1xuXHRcdC4uLkdDX0hLREZfQ09NTU9OLFxuXHRcdHNhbHQ6IGF0dThfc2FsdCxcblx0fTtcbn1cblxuXG5mdW5jdGlvbiBwYmtkZjJfZGVyaXZlMihhYl9ub25jZTogQnVmZmVyU291cmNlLCB4X2l0ZXJhdGlvbl9tdWx0aXBsaWVyPTApOiAoZGtfYmFzZTogQ3J5cHRvS2V5KSA9PiBQcm9taXNlPFNlbnNpdGl2ZUJ5dGVzPiB7XG5cdHJldHVybiBhc3luYyBmdW5jdGlvbihka19iYXNlKSB7XG5cdFx0cmV0dXJuIG5ldyBTZW5zaXRpdmVCeXRlcyhuZXcgVWludDhBcnJheShhd2FpdCBjcnlwdG8uc3VidGxlLmRlcml2ZUJpdHMoe1xuXHRcdFx0bmFtZTogJ1BCS0RGMicsXG5cdFx0XHRzYWx0OiBhYl9ub25jZSxcblx0XHRcdGl0ZXJhdGlvbnM6IHhfaXRlcmF0aW9uX211bHRpcGxpZXI/IE1hdGguY2VpbChOX0lURVJBVElPTlMgKiB4X2l0ZXJhdGlvbl9tdWx0aXBsaWVyKTogTl9JVEVSQVRJT05TLFxuXHRcdFx0aGFzaDogU0lfUFJGLFxuXHRcdH0sIGRrX2Jhc2UsIDI1NikpKTtcblx0fVxufVxuXG5jbGFzcyBEZWNyeXB0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdGNvbnN0cnVjdG9yKHB1YmxpYyBvcmlnaW5hbDogRXJyb3IpIHtcblx0XHRzdXBlcignRmFpbGVkIHRvIGRlY3J5cHQgZGF0YTogJytvcmlnaW5hbCk7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVjcnlwdChhdHU4X2RhdGE6IFVpbnQ4QXJyYXksIGRrX2tleTogQ3J5cHRvS2V5LCBhdHU4X25vbmNlOiBVaW50OEFycmF5LCBhdHU4X3ZlcmlmeT1BVFU4X1NIQTI1Nl9TVEFSU0hFTEwpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHtcblx0XHRcdG5hbWU6ICdBRVMtR0NNJyxcblx0XHRcdGl2OiBhdHU4X25vbmNlLFxuXHRcdFx0YWRkaXRpb25hbERhdGE6IGF0dThfdmVyaWZ5LFxuXHRcdH0sIGRrX2tleSwgYXR1OF9kYXRhKSBhcyBVaW50OEFycmF5KTtcblx0fVxuXHRjYXRjaChlX2RlY3J5cHQpIHtcblx0XHR0aHJvdyBuZXcgRGVjcnlwdGlvbkVycm9yKGVfZGVjcnlwdCBhcyBFcnJvcik7XG5cdH1cbn1cblxuXG5jbGFzcyBFbmNyeXB0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdGNvbnN0cnVjdG9yKHB1YmxpYyBvcmlnaW5hbDogRXJyb3IpIHtcblx0XHRzdXBlcignRmFpbGVkIHRvIGVuY3J5cHQgZGF0YTogJytvcmlnaW5hbCk7XG5cdH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuY3J5cHQoYXR1OF9kYXRhOiBVaW50OEFycmF5LCBka19rZXk6IENyeXB0b0tleSwgYXR1OF9ub25jZTogVWludDhBcnJheSwgYXR1OF92ZXJpZnk9QVRVOF9TSEEyNTZfU1RBUlNIRUxMKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZW5jcnlwdCh7XG5cdFx0XHRuYW1lOiAnQUVTLUdDTScsXG5cdFx0XHRpdjogYXR1OF9ub25jZSxcblx0XHRcdGFkZGl0aW9uYWxEYXRhOiBhdHU4X3ZlcmlmeSxcblx0XHR9LCBka19rZXksIGF0dThfZGF0YSkgYXMgVWludDhBcnJheSk7XG5cdH1cblx0Y2F0Y2goZV9lbmNyeXB0KSB7XG5cdFx0dGhyb3cgbmV3IEVuY3J5cHRpb25FcnJvcihlX2VuY3J5cHQgYXMgRXJyb3IpO1xuXHR9XG59XG5cbmludGVyZmFjZSBSb290S2V5U3RydWN0IHtcblx0a2V5OiBDcnlwdG9LZXk7XG5cdHZlY3RvcjogVWludDhBcnJheTtcblx0bm9uY2U6IGJpZ2ludDtcbn1cblxuXG5pbnRlcmZhY2UgQmFzZVBhcmFtcyB7XG5cdHZlcnNpb246IG51bWJlcjtcblx0ZW50cm9weTogc3RyaW5nO1xuXHRub25jZTogc3RyaW5nO1xuXHRzaWduYXR1cmU6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFBhcnNlZEJhc2Uge1xuXHR2ZXJzaW9uOiBudW1iZXI7XG5cdGVudHJvcHk6IFVpbnQ4QXJyYXk7XG5cdG5vbmNlOiBiaWdpbnQ7XG5cdHNpZ25hdHVyZTogVWludDhBcnJheTtcbn1cblxuaW50ZXJmYWNlIFJvb3RLZXlzRGF0YSB7XG5cdG9sZDogUm9vdEtleVN0cnVjdDtcblx0bmV3OiBSb290S2V5U3RydWN0O1xuXHRleHBvcnQ6IFNlbnNpdGl2ZUJ5dGVzIHwgbnVsbDtcbn1cblxuLy8gd2FpdCBmb3IgcmVsZWFzZSBmcm9tIGxvY2FsIGZyYW1lXG5jb25zdCBoX3JlbGVhc2Vfd2FpdGVyc19sb2NhbDogRGljdDxWb2lkRnVuY3Rpb25bXT4gPSB7fTtcblxuXG4vLyBhc3luYyBmdW5jdGlvbiBzdG9yYWdlX3B1dChzaV9rZXk6IFB1YmxpY1N0b3JhZ2VLZXksIHdfdmFsdWU6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuLy8gXHRjb25zdCBzaV93aXJlID0gYEAke3NpX2tleX1gO1xuLy8gXHRhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoe1xuLy8gXHRcdFtzaV93aXJlXTogd192YWx1ZSxcbi8vIFx0fSk7XG4vLyB9XG5cblxuLyoqXG4gKiBSZXNwb25zaWJsZSBmb3IgKHVuKW1hcnNoYWxsaW5nIGRhdGEgc3RydWN0cyBiZXR3ZWVuIGVuY3J5cHRlZC1hdC1yZXN0IHN0b3JhZ2UgYW5kIHVuZW5jcnlwdGVkLWluLXVzZSBtZW1vcnkuXG4gKiBcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogY29uc3Qga3BfY29udGFjdHMgPSBhd2FpdCBWYXVsdC5jaGVja291dCgnY29udGFjdHMnKTtcbiAqIGF3YWl0IGtwX2NvbnRhY3RzLnVubG9jaygncGFzc3dvcmQxMjMnLCBTdG9yZSk7XG4gKiBrcF9jb250YWN0cy5zYXZlKCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IFZhdWx0ID0ge1xuXHRhc3luYyBnZXRCYXNlKCk6IFByb21pc2U8QmFzZVBhcmFtcyB8IHVuZGVmaW5lZD4ge1xuXHRcdHJldHVybiBhd2FpdCBzdG9yYWdlX2dldDxCYXNlUGFyYW1zPignYmFzZScpIHx8IHZvaWQgMDtcblx0fSxcblxuXHRpc1ZhbGlkQmFzZSh6X3Rlc3Q6IHVua25vd24pOiB6X3Rlc3QgaXMgQmFzZVBhcmFtcyB7XG5cdFx0cmV0dXJuICEhel90ZXN0ICYmICdvYmplY3QnID09PSB0eXBlb2Ygel90ZXN0XG5cdFx0XHQmJiAnbnVtYmVyJyA9PT0gdHlwZW9mIHpfdGVzdFsndmVyc2lvbiddXG5cdFx0XHQmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIHpfdGVzdFsnZW50cm9weSddXG5cdFx0XHQmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIHpfdGVzdFsnbm9uY2UnXVxuXHRcdFx0JiYgJ3N0cmluZycgPT09IHR5cGVvZiB6X3Rlc3RbJ3NpZ25hdHVyZSddO1xuXHR9LFxuXG5cdHBhcnNlQmFzZShnX2Jhc2U6IEJhc2VQYXJhbXMpOiBQYXJzZWRCYXNlIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dmVyc2lvbjogZ19iYXNlLnZlcnNpb24sXG5cdFx0XHRlbnRyb3B5OiBoZXhfdG9fYnVmZmVyKGdfYmFzZS5lbnRyb3B5KSxcblx0XHRcdG5vbmNlOiBCaWdJbnQoZ19iYXNlLm5vbmNlKSxcblx0XHRcdHNpZ25hdHVyZTogaGV4X3RvX2J1ZmZlcihnX2Jhc2Uuc2lnbmF0dXJlKSxcblx0XHR9O1xuXHR9LFxuXG5cdGFzeW5jIHNldFBhcnNlZEJhc2UoZ19iYXNlOiBPbWl0PFBhcnNlZEJhc2UsICd2ZXJzaW9uJz4pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRyZXR1cm4gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHtcblx0XHRcdGJhc2U6IHtcblx0XHRcdFx0dmVyc2lvbjogMSxcblx0XHRcdFx0ZW50cm9weTogYnVmZmVyX3RvX2hleChnX2Jhc2UuZW50cm9weSksXG5cdFx0XHRcdG5vbmNlOiBnX2Jhc2Uubm9uY2UrJycsXG5cdFx0XHRcdHNpZ25hdHVyZTogYnVmZmVyX3RvX2hleChnX2Jhc2Uuc2lnbmF0dXJlKSxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdH0sXG5cblx0YXN5bmMgZXJhc2VCYXNlKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHJldHVybiBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoWydiYXNlJ10pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXRyaWV2ZSB0aGUgZXhpc3Rpbmcgc2FsdCB2YWx1ZSBpZiBkZWZpbmVkXG5cdCAqL1xuXHRhc3luYyBnZXRTYWx0KCk6IFByb21pc2U8VWludDhBcnJheSB8IHVuZGVmaW5lZD4ge1xuXHRcdC8vIGZldGNoIHNhbHQgdmFsdWVcblx0XHRjb25zdCBzeF9zYWx0ID0gYXdhaXQgc3RvcmFnZV9nZXQ8c3RyaW5nPignc2FsdCcpO1xuXG5cdFx0Ly8gY29udmVydCB0byBidWZmZXIgaWYgaXQgZXhpc3RzXG5cdFx0cmV0dXJuIHN4X3NhbHQ/IGhleF90b19idWZmZXIoc3hfc2FsdCk6IHZvaWQgMDtcblx0fSxcblxuXHRhc3luYyBzZXRTYWx0KGF0dThfc2FsdDogVWludDhBcnJheSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdC8vIHN0b3JlIHNhbHQgYXMgc3RyaW5naWZ5J2QgYnVmZmVyXG5cdFx0cmV0dXJuIGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7XG5cdFx0XHRzYWx0OiBidWZmZXJfdG9faGV4KGF0dThfc2FsdCksXG5cdFx0fSk7XG5cdH0sXG5cblx0YXN5bmMgZ2V0Um9vdEtleSgpOiBQcm9taXNlPENyeXB0b0tleSB8IG51bGw+IHtcblx0XHRjb25zdCB3X3Jvb3QgPSBhd2FpdCBzZXNzaW9uX3N0b3JhZ2VfZ2V0KCdyb290Jyk7XG5cdFx0aWYoIXdfcm9vdCkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gYXdhaXQgcmVzdG9yZV9hc19rZXkod19yb290LCAnSEtERicsIGZhbHNlLCBbJ2Rlcml2ZUtleSddKTtcblxuXHRcdC8vIC8vIGJhY2tncm91bmQgcGFnZSBleGlzdHNcblx0XHQvLyBsZXQgZHdfYmFja2dyb3VuZCE6IFdpbmRvdyB8IG51bGw7XG5cdFx0Ly8gaWYoY2hyb21lLmV4dGVuc2lvbi5nZXRCYWNrZ3JvdW5kUGFnZSAmJiAoZHdfYmFja2dyb3VuZD1jaHJvbWUuZXh0ZW5zaW9uLmdldEJhY2tncm91bmRQYWdlKCkpKSB7XG5cdFx0Ly8gXHRyZXR1cm4gZHdfYmFja2dyb3VuZFsnX2RrX3Jvb3QnXSB8fCBudWxsO1xuXHRcdC8vIH1cblx0XHQvLyAvLyBtdjNcblx0XHQvLyBlbHNlIHtcblx0XHQvLyBcdC8vIHJlYWQgcm9vdCBrZXkgZnJvbSBzZXNzaW9uIHN0b3JhZ2Vcblx0XHQvLyBcdGNvbnN0IGF4X3Jvb3QgPSBhd2FpdCBzZXNzaW9uX3N0b3JhZ2VfZ2V0KCdyb290Jyk7XG5cblx0XHQvLyBcdC8vIG5vIGtleTsgbm90IGF1dGhlbnRpY2F0ZWRcblx0XHQvLyBcdGlmKCFheF9yb290KSByZXR1cm4gbnVsbDtcblxuXHRcdC8vIFx0Ly8gcmV0dXJuIGltcG9ydGVkIHJvb3Qga2V5XG5cdFx0Ly8gXHRyZXR1cm4gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIFVpbnQ4QXJyYXkuZnJvbShheF9yb290KSwgJ0hLREYnLCBmYWxzZSwgWydkZXJpdmVLZXknXSk7XG5cdFx0Ly8gfVxuXHR9LFxuXG5cdGFzeW5jIGNsZWFyUm9vdEtleSgpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyBiYWNrZ3JvdW5kIHBhZ2UgZXhpc3RzXG5cdFx0bGV0IGR3X2JhY2tncm91bmQhOiBXaW5kb3cgfCBudWxsO1xuXHRcdGlmKGNocm9tZS5leHRlbnNpb24uZ2V0QmFja2dyb3VuZFBhZ2UgJiYgKGR3X2JhY2tncm91bmQ9Y2hyb21lLmV4dGVuc2lvbi5nZXRCYWNrZ3JvdW5kUGFnZSgpKSkge1xuXHRcdFx0ZGVsZXRlIGR3X2JhY2tncm91bmRbJ19ka19yb290J107XG5cdFx0fVxuXG5cdFx0Ly8gZ2xvYmFsIGJyb2FkY2FzdCBsb2dvdXQgZXZlbnRcblx0XHRnbG9iYWxfYnJvYWRjYXN0KHtcblx0XHRcdHR5cGU6ICdsb2dvdXQnLFxuXHRcdH0pO1xuXG5cdFx0Ly8gaW4gcGFyYWxsZWxcblx0XHRhd2FpdCBQcm9taXNlLmFsbChbXG5cdFx0XHQvLyBjbGVhciBzZXNzaW9uIHN0b3JhZ2Vcblx0XHRcdHNlc3Npb25fc3RvcmFnZV9jbGVhcigpLFxuXHRcdF0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDcmVhdGUgdGhlIHJvb3Qga2V5IGJ5IGltcG9ydGluZyB0aGUgcGxhaW50ZXh0IHBhc3N3b3JkIHN0cmluZywgdXNpbmcgUEJLREYyIHRvIGRlcml2ZSBgcm9vdDBgLCB0aGVuIGRlZmVycmluZ1xuXHQgKiB0byBjYWxsYmFja3MgdG8gY29tcGxldGUgY2hpbGQga2V5IGRlcml2YXRpb24uIFVzZXMgY2FsbGJhY2tzIGluc3RlYWQgb2YgYSBQcm9taXNlIHRvIGhlbHAgbWFrZSBpdCBvYnZpb3VzIHRvXG5cdCAqIHRoZSBydW50aW1lIHRoYXQgdGhlIHBhc3N3b3JkIHN0cmluZyBkb2VzIG5vdCBuZWVkIHRvIHB1dCBpbnRvIGhlYXAgbWVtb3J5IChpLmUuLCBvbmx5IGV4aXN0cyBpbiBzdGFjayBtZW1vcnkpLlxuXHQgKi9cblx0ZGVyaXZlUm9vdEJpdHMoXG5cdFx0YXR1OF9waHJhc2U6IFVpbnQ4QXJyYXksXG5cdFx0YWJfbm9uY2U6IEJ1ZmZlclNvdXJjZSxcblx0XHR4X2l0ZXJhdGlvbl9tdWx0aXBsaWVyPTBcblx0KTogUHJvbWlzZTxTZW5zaXRpdmVCeXRlcz4ge1xuXHRcdC8vIGltcG9ydCB0aGUgcGFzc3BocmFzZSB0byBhIG1hbmFnZWQga2V5IG9iamVjdFxuXHRcdHJldHVybiBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgYXR1OF9waHJhc2UsICdQQktERjInLCBmYWxzZSwgWydkZXJpdmVCaXRzJ10pXG5cdFx0XHQvLyBoZWxwIGFsbG93IHRoZSBwbGFpbnRleHQgcGFzc3dvcmQgdG8gaGF2ZSBhIHNob3J0IGxpZmUgaW4gdGhlIHN0YWNrIGJ5IGZvcmNpbmcgaXQgb3V0IG9mIHNjb3BlIGFzIHNvb24gYXMgcG9zc2libGVcblx0XHRcdC50aGVuKHBia2RmMl9kZXJpdmUyKGFiX25vbmNlLCB4X2l0ZXJhdGlvbl9tdWx0aXBsaWVyKSk7XG5cdH0sXG5cblxuXHRhc3luYyBkZXJpdmVSb290S2V5cyhhdHU4X3BocmFzZTogVWludDhBcnJheSwgYXR1OF9lbnRyb3B5OiBVaW50OEFycmF5LCB4Z19ub25jZV9vbGQ6IGJpZ2ludCwgYl9leHBvcnRfbmV3PWZhbHNlKTogUHJvbWlzZTxSb290S2V5c0RhdGE+IHtcblx0XHQvLyBwcmVwIG5ldyBub25jZSAodGhpcyBpcyBpbnRlbmRlZCB0byBiZSByZXByb2R1Y2libGUgaW4gY2FzZSBwcm9ncmFtIGV4aXRzIHdoaWxlIHJvdGF0aW5nIGtleXMpXG5cdFx0Y29uc3QgeGdfbm9uY2VfbmV3ID0gKHhnX25vbmNlX29sZCArIDFuKSAlICgybiAqKiA2NG4pO1xuXG5cdFx0Ly8gcHJlcCBhcnJheSBidWZmZXIgKDggYnl0ZXMgZm9yIGZpeGVkIGVudHJvcHkgKyA4IGJ5dGVzIGZvciBub25jZSlcblx0XHRjb25zdCBhdHU4X3ZlY3Rvcl9vbGQgPSBuZXcgVWludDhBcnJheSgxNik7XG5cdFx0Y29uc3QgYXR1OF92ZWN0b3JfbmV3ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuXG5cdFx0Ly8gc2V0IGVudHJvcHkgaW50byBidWZmZXIgYXQgbGVhZGluZyA4IGJ5dGVzXG5cdFx0YXR1OF92ZWN0b3Jfb2xkLnNldChhdHU4X2VudHJvcHksIDApO1xuXHRcdGF0dThfdmVjdG9yX25ldy5zZXQoYXR1OF9lbnRyb3B5LCAwKTtcblxuXHRcdC8vIHNldCBub25jZSBpbnRvIGJ1ZmZlciBhdCBib3R0b20gOCBieXRlc1xuXHRcdG5ldyBEYXRhVmlldyhhdHU4X3ZlY3Rvcl9vbGQuYnVmZmVyKS5zZXRCaWdVaW50NjQoOCwgeGdfbm9uY2Vfb2xkLCBmYWxzZSk7XG5cdFx0bmV3IERhdGFWaWV3KGF0dThfdmVjdG9yX25ldy5idWZmZXIpLnNldEJpZ1VpbnQ2NCg4LCB4Z19ub25jZV9uZXcsIGZhbHNlKTtcblxuXHRcdC8vIG1pZ3JhdGlvblxuXHRcdGxldCB4X21pZ3JhdGVfbXVsdGlwbGllciA9IDA7XG5cdFx0aWYoIWF3YWl0IFB1YmxpY1N0b3JhZ2UubGFzdFNlZW4oKSkge1xuXHRcdFx0eF9taWdyYXRlX211bHRpcGxpZXIgPSAyMCAvIE5fSVRFUkFUSU9OUztcblx0XHR9XG5cblx0XHQvLyBkZXJpdmUgdGhlIHR3byByb290IGJ5dGUgc2VxdWVuY2VzIGZvciB0aGlzIHNlc3Npb25cblx0XHRjb25zdCBbXG5cdFx0XHRrbl9yb290X29sZCxcblx0XHRcdGtuX3Jvb3RfbmV3LFxuXHRcdF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG5cdFx0XHRWYXVsdC5kZXJpdmVSb290Qml0cyhhdHU4X3BocmFzZSwgYXR1OF92ZWN0b3Jfb2xkLCB4X21pZ3JhdGVfbXVsdGlwbGllciksXG5cdFx0XHRWYXVsdC5kZXJpdmVSb290Qml0cyhhdHU4X3BocmFzZSwgYXR1OF92ZWN0b3JfbmV3KSxcblx0XHRdKTtcblxuXHRcdC8vIHplcm8gb3V0IHBhc3NwaHJhc2UgZGF0YVxuXHRcdHplcm9fb3V0KGF0dThfcGhyYXNlKTtcblxuXHRcdC8vIGRlcml2ZSByb290IGtleXNcblx0XHRjb25zdCBbXG5cdFx0XHRka19yb290X29sZCxcblx0XHRcdGRrX3Jvb3RfbmV3LFxuXHRcdF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG5cdFx0XHRjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3Jywga25fcm9vdF9vbGQuZGF0YSwgJ0hLREYnLCBmYWxzZSwgWydkZXJpdmVLZXknXSksXG5cdFx0XHRjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3Jywga25fcm9vdF9uZXcuZGF0YSwgJ0hLREYnLCBmYWxzZSwgWydkZXJpdmVLZXknXSksXG5cdFx0XSk7XG5cblx0XHQvLyB3aXBlIHJvb3QgYml0c1xuXHRcdGtuX3Jvb3Rfb2xkLndpcGUoKTtcblx0XHRpZighYl9leHBvcnRfbmV3KSBrbl9yb290X25ldy53aXBlKCk7XG5cblx0XHQvLyBtYXJrIGFzIHNlZW5cblx0XHRhd2FpdCBQdWJsaWNTdG9yYWdlLm1hcmtTZWVuKCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0b2xkOiB7XG5cdFx0XHRcdGtleTogZGtfcm9vdF9vbGQsXG5cdFx0XHRcdHZlY3RvcjogYXR1OF92ZWN0b3Jfb2xkLFxuXHRcdFx0XHRub25jZTogeGdfbm9uY2Vfb2xkLFxuXHRcdFx0fSxcblx0XHRcdG5ldzoge1xuXHRcdFx0XHRrZXk6IGRrX3Jvb3RfbmV3LFxuXHRcdFx0XHR2ZWN0b3I6IGF0dThfdmVjdG9yX25ldyxcblx0XHRcdFx0bm9uY2U6IHhnX25vbmNlX25ldyxcblx0XHRcdH0sXG5cdFx0XHRleHBvcnQ6IGJfZXhwb3J0X25ldz8ga25fcm9vdF9uZXc6IG51bGwsXG5cdFx0fTtcblx0fSxcblxuXG5cdGFzeW5jIGNpcGhlcktleShka19yb290OiBDcnlwdG9LZXksIGJfZW5jcnlwdD1mYWxzZSk6IFByb21pc2U8Q3J5cHRvS2V5PiB7XG5cdFx0Ly8gcmV0dXJuIGNyeXB0by5zdWJ0bGUuZGVyaXZlS2V5KGF3YWl0IGhrZGZfcGFyYW1zKCksIGRrX3Jvb3QsIEdDX0RFUklWRV9ST09UX0NJUEhFUiwgZmFsc2UsIGJfZW5jcnlwdD8gWydlbmNyeXB0JywgJ2RlY3J5cHQnXTogWydkZWNyeXB0J10pO1xuXHRcdHJldHVybiBjcnlwdG8uc3VidGxlLmRlcml2ZUtleShhd2FpdCBoa2RmX3BhcmFtcygpLCBka19yb290LCBHQ19ERVJJVkVfUk9PVF9DSVBIRVIsIHRydWUsIGJfZW5jcnlwdD8gWydlbmNyeXB0JywgJ2RlY3J5cHQnXTogWydkZWNyeXB0J10pO1xuXHR9LFxuXG5cdGFzeW5jIHNpZ25hdHVyZUtleShka19yb290OiBDcnlwdG9LZXksIGJfc2lnbmVyPWZhbHNlKTogUHJvbWlzZTxDcnlwdG9LZXk+IHtcblx0XHRyZXR1cm4gY3J5cHRvLnN1YnRsZS5kZXJpdmVLZXkoYXdhaXQgaGtkZl9wYXJhbXMoKSwgZGtfcm9vdCwgR0NfREVSSVZFX1JPT1RfU0lHTklORywgZmFsc2UsIGJfc2lnbmVyPyBbJ3NpZ24nXTogWyd2ZXJpZnknXSk7XG5cdH0sXG5cblx0YXN5bmMgZ2VuZXJhdGVSb290S2V5U2lnbmF0dXJlKGRrX3Jvb3Q6IENyeXB0b0tleSk6IFByb21pc2U8VWludDhBcnJheT4ge1xuXHRcdC8vIGRlcml2ZSBzaWduYXR1cmUga2V5XG5cdFx0Y29uc3QgZGtfdmVyaWZ5ID0gYXdhaXQgVmF1bHQuc2lnbmF0dXJlS2V5KGRrX3Jvb3QsIHRydWUpO1xuXG5cdFx0Ly8gcmV0dXJuIHNpZ25hdHVyZVxuXHRcdHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCBjcnlwdG8uc3VidGxlLnNpZ24oJ0hNQUMnLCBka192ZXJpZnksIEFUVThfU0hBMjU2X1NUQVJTSEVMTCkpO1xuXHR9LFxuXG5cdGFzeW5jIHZlcmlmeVJvb3RLZXkoZGtfcm9vdDogQ3J5cHRvS2V5LCBhdHU4X3Rlc3Q6IFVpbnQ4QXJyYXkpOiBQcm9taXNlPGJvb2xlYW4+IHtcblx0XHQvLyBkZXJpdmUgdmVyaWZpY2F0aW9uIGtleVxuXHRcdGNvbnN0IGRrX3ZlcmlmeSA9IGF3YWl0IFZhdWx0LnNpZ25hdHVyZUtleShka19yb290LCBmYWxzZSk7XG5cblx0XHQvLyByZXR1cm4gdmVyaWZpY2F0aW9uIHRlc3QgcmVzdWx0XG5cdFx0cmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUudmVyaWZ5KCdITUFDJywgZGtfdmVyaWZ5LCBhdHU4X3Rlc3QsIEFUVThfU0hBMjU2X1NUQVJTSEVMTCk7XG5cdH0sXG5cblx0YXN5bmMgcmVjcnlwdEFsbChka19yb290X29sZDogQ3J5cHRvS2V5LCBhdHU4X25vbmNlX29sZDogVWludDhBcnJheSwgZGtfcm9vdF9uZXc6IENyeXB0b0tleSwgYXR1OF9ub25jZV9uZXc6IFVpbnQ4QXJyYXkpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyBwcmVwIGxpc3Qgb2YgYXN5bmMgb3BlcmF0aW9uc1xuXHRcdGNvbnN0IGFfcHJvbWlzZXM6IEFycmF5PFByb21pc2U8dm9pZD4+ID0gW107XG5cblx0XHQvLyBrZWVwIHJ1bm5pbmcgdG90YWwgb2YgYnl0ZXMgcGVuZGluZyB0byBiZSByZWNyeXB0ZWRcblx0XHRsZXQgY2JfcGVuZGluZyA9IDA7XG5cblx0XHQvLyBkZXJpdmUgYWVzIGtleXNcblx0XHRjb25zdCBbXG5cdFx0XHRka19hZXNfb2xkLFxuXHRcdFx0ZGtfYWVzX25ldyxcblx0XHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuXHRcdFx0VmF1bHQuY2lwaGVyS2V5KGRrX3Jvb3Rfb2xkLCBmYWxzZSksXG5cdFx0XHRWYXVsdC5jaXBoZXJLZXkoZGtfcm9vdF9uZXcsIHRydWUpLFxuXHRcdF0pO1xuXG5cdFx0Ly8gZWFjaCBrZXlcblx0XHRmb3IoY29uc3Qgc2lfa2V5IG9mIEFfU1RPUkVfS0VZUykge1xuXHRcdFx0Ly8gcmVhZHkgZnJvbSBzdG9yYWdlXG5cdFx0XHRjb25zdCBzeF9lbnRyeSA9IGF3YWl0IHN0b3JhZ2VfZ2V0PHN0cmluZz4oc2lfa2V5KTtcblxuXHRcdFx0Ly8gc2tpcCBubyBkYXRhXG5cdFx0XHRpZighc3hfZW50cnkpIGNvbnRpbnVlO1xuXG5cdFx0XHQvLyBkZXNlcmlhbGl6ZVxuXHRcdFx0Y29uc3QgYXR1OF9lbnRyeSA9IHN0cmluZzhfdG9fYnVmZmVyKHN4X2VudHJ5KTtcblxuXHRcdFx0Ly8gYnl0ZSBsZW5ndGhcblx0XHRcdGNiX3BlbmRpbmcgKz0gYXR1OF9lbnRyeS5ieXRlTGVuZ3RoO1xuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbG9vcC1mdW5jICovXG5cdFx0XHQvLyBlbnF1ZXVlIGFzeW5jIG9wZXJhdGlvblxuXHRcdFx0YV9wcm9taXNlcy5wdXNoKChhc3luYygpID0+IHtcblx0XHRcdFx0Ly8gZGVjcnlwdCBpdHMgZGF0YSB3aXRoIG9sZCByb290IGtleVxuXHRcdFx0XHRsZXQgYXR1OF9kYXRhOiBVaW50OEFycmF5O1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGF0dThfZGF0YSA9IGF3YWl0IGRlY3J5cHQoYXR1OF9lbnRyeSwgZGtfYWVzX29sZCwgYXR1OF9ub25jZV9vbGQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGRlY3J5cHRpb24gZmFpbGVkOyByZXRyeSB3aXRoIG5ldyBrZXkgKGxldCBpdCB0aHJvdyBpZiBpdCBmYWlscylcblx0XHRcdFx0Y2F0Y2goZV9kZWNyeXB0KSB7XG5cdFx0XHRcdFx0YXR1OF9kYXRhID0gYXdhaXQgZGVjcnlwdChhdHU4X2VudHJ5LCBka19hZXNfbmV3LCBhdHU4X25vbmNlX29sZCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBlbmNyeXB0IGl0IHdpdGggbmV3IHJvb3Qga2V5XG5cdFx0XHRcdGNvbnN0IGF0dThfcmVwbGFjZSA9IGF3YWl0IGVuY3J5cHQoYXR1OF9kYXRhLCBka19hZXNfbmV3LCBhdHU4X25vbmNlX25ldyk7XG5cblx0XHRcdFx0Ly8gc2F2ZSBlbmNyeXB0ZWQgZGF0YSBiYWNrIHRvIHN0b3JlXG5cdFx0XHRcdGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7XG5cdFx0XHRcdFx0W3NpX2tleV06IGJ1ZmZlcl90b19zdHJpbmc4KGF0dThfcmVwbGFjZSksXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vIGRvbmU7IGNsZWFyIGJ5dGVzIGZyb20gcGVuZGluZ1xuXHRcdFx0XHRjYl9wZW5kaW5nIC09IGF0dThfZW50cnkuYnl0ZUxlbmd0aDtcblx0XHRcdH0pKCkpO1xuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdC8vIGV4Y2VlZGVkIHRocmVzaG9sZFxuXHRcdFx0aWYoY2JfcGVuZGluZyA+IE5CX1JFQ1JZUFRJT05fVEhSRVNIT0xEKSB7XG5cdFx0XHRcdC8vIHdhaXQgZm9yIG9wZXJhdGlvbnMgdG8gZmluaXNoXG5cdFx0XHRcdGF3YWl0IFByb21pc2UuYWxsKGFfcHJvbWlzZXMpO1xuXG5cdFx0XHRcdC8vIGNvbnRpbnVlXG5cdFx0XHRcdGFfcHJvbWlzZXMubGVuZ3RoID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyB3YWl0IGZvciBhbGwgb3BlcmF0aW9ucyB0byBmaW5pc2hcblx0XHRhd2FpdCBQcm9taXNlLmFsbChhX3Byb21pc2VzKTtcblx0fSxcblxuXG5cdGFzeW5jIHBlZWtKc29uKHNpX2tleToga2V5b2YgU3RvcmUsIGRrX2NpcGhlcjogQ3J5cHRvS2V5KTogUHJvbWlzZTxudWxsIHwgU3RvcmVbdHlwZW9mIHNpX2tleV0+IHtcblx0XHQvLyBjaGVja291dCBzdG9yZVxuXHRcdGNvbnN0IGtwX3N0b3JlID0gYXdhaXQgVmF1bHQuYWNxdWlyZShzaV9rZXkpO1xuXG5cdFx0Ly8gcmVhZCBmcm9tIGl0XG5cdFx0Y29uc3Qgd19yZWFkID0ga3Bfc3RvcmUucmVhZEpzb24oZGtfY2lwaGVyKTtcblxuXHRcdC8vIHJlbGVhc2Ugc3RvcmVcblx0XHRhd2FpdCBrcF9zdG9yZS5yZWxlYXNlKCk7XG5cblx0XHQvLyByZXR1cm4gdGhlIGpzb25cblx0XHRyZXR1cm4gd19yZWFkO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIE9idGFpbiBhIHJlYWRvbmx5IHZhdWx0IGVudHJ5IGJ5IGl0cyBnaXZlbiBrZXkgaWRlbnRpZmllci5cblx0ICovXG5cdGFzeW5jIHJlYWRvbmx5KHNpX2tleToga2V5b2YgU3RvcmUpOiBQcm9taXNlPFZhdWx0RW50cnk+IHtcblx0XHQvLyByZWFkIGVudHJ5IGNpcGhlcnRleHRcblx0XHRjb25zdCBzeF9lbnRyeSA9IGF3YWl0IHN0b3JhZ2VfZ2V0PHN0cmluZz4oc2lfa2V5KTtcblxuXHRcdC8vIGNyZWF0ZSBpbnN0YW5jZVxuXHRcdHJldHVybiBuZXcgVmF1bHRFbnRyeShzaV9rZXksIHN4X2VudHJ5ID8/ICcnKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBBY3F1aXJlcyBhbiBleGNsdXNpdmUgbG9jayB0byBhIHdyaXRhYmxlIHZhdWx0IGVudHJ5IGJ5IGl0cyBnaXZlbiBrZXkgaWRlbnRpZmllci5cblx0ICogQHBhcmFtIHNpX2tleSBrZXkgaWRlbnRpZmllclxuXHQgKiBAcmV0dXJucyBuZXcgdmF1bHQgZW50cnlcblx0ICovXG5cdGFzeW5jIGFjcXVpcmUoc2lfa2V5OiBrZXlvZiBTdG9yZSwgY19hdHRlbXB0cz0wKTogUHJvbWlzZTxXcml0YWJsZVZhdWx0RW50cnk8dHlwZW9mIHNpX2tleT4+IHtcblx0XHQvLyBwcmVwIGxvY2sgaWQgYW5kIHNlbGYgaWRcblx0XHRjb25zdCBzaV9sb2NrID0gYGxvY2tfJHtzaV9rZXl9YCBhcyBjb25zdDtcblxuXHRcdC8vIHJlYWQgbG9jayBzdGF0dXNcblx0XHRjb25zdCBzeF9vd25lciA9IGF3YWl0IHNlc3Npb25fc3RvcmFnZV9nZXQoc2lfbG9jayk7XG5cblx0XHQvLyBidXN5OyB3YWl0IGZvciBvd25lciB0byByZWxlYXNlXG5cdFx0aWYoc3hfb3duZXIpIHtcblx0XHRcdC8vIHBhcnNlIG93bmVyXG5cdFx0XHRjb25zdCBbc2lfZnJhbWUsIHNpX21vbWVudF0gPSBzeF9vd25lci5zcGxpdCgnOicpO1xuXG5cdFx0XHQvLyBmcmFtZSBpcyBsb2NhbFxuXHRcdFx0aWYoU0lfRlJBTUVfTE9DQUwgPT09IHNpX2ZyYW1lKSB7XG5cdFx0XHRcdC8vIHdhaXQgZm9yIHJlbGVhc2Vcblx0XHRcdFx0YXdhaXQgbmV3IFByb21pc2UoKGZrX3Jlc29sdmUpID0+IHtcblx0XHRcdFx0XHQvLyBwcmVwIHRpbWVvdXQgaWRcblx0XHRcdFx0XHRsZXQgaV90aW1lb3V0ID0gMDtcblxuXHRcdFx0XHRcdC8vIGFkZCByZXNvbHZlIGNhbGxiYWNrIHRvIGxpc3Rcblx0XHRcdFx0XHQoaF9yZWxlYXNlX3dhaXRlcnNfbG9jYWxbc2lfa2V5XSA9IGhfcmVsZWFzZV93YWl0ZXJzX2xvY2FsW3NpX2tleV0gfHwgW10pLnB1c2goKCkgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gY2FuY2VsIHRpbWVvdXRcblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dChpX3RpbWVvdXQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZXNvbHZlIHByb21pc2Vcblx0XHRcdFx0XHRcdGZrX3Jlc29sdmUodm9pZCAwKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdC8vIHRpbWVvdXRcblx0XHRcdFx0XHRpX3RpbWVvdXQgPSBnbG9iYWxUaGlzLnNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0c3lzZXJyKHtcblx0XHRcdFx0XHRcdFx0dGV4dDogYExvY2FsIGxvY2sgb24gJyR7c2lfa2V5fScgbGFzdGVkIG1vcmUgdGhhbiA1IHNlY29uZHM7IHBvc3NpYmxlIGJ1ZyBpbiBpbXBsZW1lbnRhdGlvbi5gLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSwgNTAwMCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0Ly8gb3duZXIgaXMgcmVtb3RlXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKGAnJHtzaV9rZXl9JyBzdG9yZSBpcyBjdXJyZW50bHkgbG9ja2VkIG9uIGEgcmVtb3RlIGZyYW1lOiAke3N4X293bmVyfTsgd2FpdGluZyBmb3IgcmVsZWFzZWApO1xuXG5cdFx0XHRcdC8vIGF0dGVtcHQgdG8gd2FpdFxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGF3YWl0IGdsb2JhbF93YWl0KCdyZWxlYXNlU3RvcmUnLCBnX3JlbGVhc2UgPT4gc2lfa2V5ID09PSBnX3JlbGVhc2Uua2V5LCA1MDAwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyB0aW1lb3V0IGVycm9yOyB1c2VyIGxpa2VseSBpbnRlcnVwdGVkIGJlZm9yZSBsb2NrIHdhcyByZWxlYXNlZDsgZm9yY2VmdWxseSByZW1vdmUgdGhlIGxvY2sgYW5kIGNvbnRpbnVlXG5cdFx0XHRcdGNhdGNoKGVfdGltZW91dCkge1xuXHRcdFx0XHRcdHN5c3dhcm4oe1xuXHRcdFx0XHRcdFx0dGV4dDogJ1JlY292ZXJlZCBmcm9tIHByZXZpb3VzIGludGVycnVwdGVkIHNodXRkb3duLicsXG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRhd2FpdCBzZXNzaW9uX3N0b3JhZ2VfcmVtb3ZlKGBsb2NrXyR7c2lfa2V5fWApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gY3JlYXRlIHNlbGYgaWRcblx0XHRjb25zdCBzaV9zZWxmID0gU0lfRlJBTUVfTE9DQUwrJzonK2NyeXB0by5yYW5kb21VVUlEKCkuc2xpY2UoMjQpO1xuXG5cdFx0Ly8gYWNxdWlyZSBsb2NrXG5cdFx0YXdhaXQgc2Vzc2lvbl9zdG9yYWdlX3NldF9pc29tb3JwaGljKHtbc2lfbG9ja106c2lfc2VsZn0pO1xuXG5cdFx0Ly8gZmFpbGVkIHRvIGFjcXVpcmUgZXhjbHVzaXZlIGxvY2tcblx0XHRpZihzaV9zZWxmICE9PSBhd2FpdCBzZXNzaW9uX3N0b3JhZ2VfZ2V0KHNpX2xvY2spKSB7XG5cdFx0XHQvLyBleGNlZWRlZCByZXRyeSBsaW1pdFxuXHRcdFx0aWYoY19hdHRlbXB0cyA+IDEwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgRXhjZWVkZWQgbWF4aW11bSByZXRyeSBjb3VudCB3aGlsZSB0cnlpbmcgdG8gY2hlY2tvdXQgXCIke3NpX2tleX1cIiBmcm9tIHRoZSB2YXVsdGApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyByZXRyeVxuXHRcdFx0cmV0dXJuIGF3YWl0IFZhdWx0LmFjcXVpcmUoc2lfa2V5LCBjX2F0dGVtcHRzKzEpO1xuXHRcdH1cblxuXHRcdC8vIGJyb2FkY2FzdCBnbG9iYWxcblx0XHRnbG9iYWxfYnJvYWRjYXN0KHtcblx0XHRcdHR5cGU6ICdhY3F1aXJlU3RvcmUnLFxuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0a2V5OiBzaV9rZXksXG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cdFx0Ly8gcmVhZCBlbnRyeSBjaXBoZXJ0ZXh0XG5cdFx0Y29uc3Qgc3hfZW50cnkgPSBhd2FpdCBzdG9yYWdlX2dldDxzdHJpbmc+KHNpX2tleSk7XG5cblx0XHQvLyBjcmVhdGUgaW5zdGFuY2Vcblx0XHRyZXR1cm4gbmV3IFdyaXRhYmxlVmF1bHRFbnRyeShzaV9rZXksIHN4X2VudHJ5ID8/ICcnKTtcblx0fSxcbn07XG5cblxuZnVuY3Rpb24gVmF1bHRFbnRyeSRfZmllbGRzKGt2X3RoaXM6IFZhdWx0RW50cnk8U3RvcmVLZXk+KTogVmF1bHRGaWVsZHMge1xuXHQvLyBsb29rdXAgcHJpdmF0ZSBmaWVsZHNcblx0Y29uc3QgZ19wcml2YXRlcyA9IGhtX3ByaXZhdGVzLmdldChrdl90aGlzKTtcblxuXHQvLyBzdG9yZSBpcyBub3QgbG9hZGVkXG5cdGlmKCFnX3ByaXZhdGVzKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gdXNlICcke2t2X3RoaXMuX3NpX2tleX0nIHN0b3JlIGFmdGVyIGl0IHdhcyByZWxlYXNlZCBvciBpdCB3YXMgbmV2ZXIgb3BlbmVkIGZvciB3cml0aW5nLmApO1xuXHR9XG5cblx0cmV0dXJuIGdfcHJpdmF0ZXM7XG59XG5cblxuZXhwb3J0IGNsYXNzIFZhdWx0RW50cnk8XG5cdHNpX2tleSBleHRlbmRzIFN0b3JlS2V5PVN0b3JlS2V5LFxuXHR3X2VudHJ5IGV4dGVuZHMgU3RvcmVbc2lfa2V5XT1TdG9yZVtzaV9rZXldLFxuPiB7XG5cdC8qKlxuXHQgKiBOb3QgZm9yIHB1YmxpYyB1c2UuIEluc3RlYWQsIHVzZSBzdGF0aWMgbWV0aG9kIHtAbGlua2NvZGUgVmF1bHQuYWNxdWlyZX1cblx0ICovXG5cdGNvbnN0cnVjdG9yKHB1YmxpYyBfc2lfa2V5OiBzaV9rZXksIHN4X3N0b3JlOiBzdHJpbmcpIHtcblx0XHRobV9wcml2YXRlcy5zZXQodGhpcywge1xuXHRcdFx0YXR1OF9jaXBoZXJ0ZXh0OiBzdHJpbmc4X3RvX2J1ZmZlcihzeF9zdG9yZSksXG5cdFx0fSk7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBSZWFkcyByYXcgYnl0ZSBzdHJlYW0gZnJvbSBkZWNyeXB0ZWQgc3RvcmFnZSBlbnRyeVxuXHQgKi9cblx0YXN5bmMgcmVhZChka19jaXBoZXI6IENyeXB0b0tleSk6IFByb21pc2U8VWludDhBcnJheT4ge1xuXHRcdC8vIGxvYWQgZGVjcnlwdGlvbiB2ZWN0b3Jcblx0XHRjb25zdCBhdHU4X3ZlY3RvciA9IHJlc3RvcmVfYXNfYnVmZmVyKGF3YWl0IHNlc3Npb25fc3RvcmFnZV9nZXQoJ3ZlY3RvcicpKTtcblx0XHRpZighYXR1OF92ZWN0b3IpIHtcblx0XHRcdHRocm93IG5ldyBOb3RBdXRoZW50aWNhdGVkRXJyb3IoKTtcblx0XHR9XG5cblx0XHQvLyByZWYgcHJpdmF0ZSBmaWVsZCBzdHJ1Y3Rcblx0XHRjb25zdCBnX3ByaXZhdGVzID0gVmF1bHRFbnRyeSRfZmllbGRzKHRoaXMpO1xuXG5cdFx0Ly8gLy8gcHJlZGVyaXZlIG5leHQgZW5jcnlwdGlvbiBrZXlcblx0XHQvLyBhd2FpdCBWYXVsdCRfcHJlZGVyaXZlKHRoaXMsIGRrX3BocmFzZSk7XG5cblx0XHQvLyBub3RoaW5nIHRvIGRlY3J5cHQ7IHJldHVybiBibGFuayBkYXRhXG5cdFx0aWYoIWdfcHJpdmF0ZXMuYXR1OF9jaXBoZXJ0ZXh0LmJ5dGVMZW5ndGgpIHtcblx0XHRcdHJldHVybiBuZXcgVWludDhBcnJheSgwKTtcblx0XHR9XG5cblx0XHQvLyAvLyBvbmx5XG5cdFx0Ly8gaWYodGhpcy5fYl91bmxvY2tlZCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gdW5sb2NrIHBlcnNpc3RlbmNlIGJ1dCBpcyBhbHJlYWR5IHVubG9ja2VkJyk7XG5cblx0XHQvLyAvLyBhY3F1aXJlIGRlY3J5cHRpb24ga2V5XG5cdFx0Ly8gY29uc3QgZGtfYWVzX3JlYWQgPSBhd2FpdCBWYXVsdCRfcm90YXRlKHRoaXMsIGRrX3BocmFzZSk7XG5cblxuXHRcdC8vIGRlY3J5cHRcblx0XHRyZXR1cm4gYXdhaXQgZGVjcnlwdChnX3ByaXZhdGVzLmF0dThfY2lwaGVydGV4dCwgZGtfY2lwaGVyLCBhdHU4X3ZlY3Rvcik7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBSZWFkcyBkZWNyeXB0ZWQgc3RvcmFnZSBlbnRyeSBhcyBKU09OXG5cdCAqL1xuXHRhc3luYyByZWFkSnNvbihka19jaXBoZXI6IENyeXB0b0tleSk6IFByb21pc2U8bnVsbCB8IHdfZW50cnk+IHtcblx0XHQvLyByZWFkXG5cdFx0bGV0IGhfc3RvcmU6IEpzb25PYmplY3QgPSB7fTtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZGVjcnlwdFxuXHRcdFx0Y29uc3QgYXR1OF9zdG9yZSA9IGF3YWl0IHRoaXMucmVhZChka19jaXBoZXIpO1xuXG5cdFx0XHQvLyBlbXB0eVxuXHRcdFx0aWYoIWF0dThfc3RvcmUuYnl0ZUxlbmd0aCkgcmV0dXJuIG51bGw7XG5cblx0XHRcdC8vIGRlc2VyaWFsaXplXG5cdFx0XHRoX3N0b3JlID0gSlNPTi5wYXJzZShidWZmZXJfdG9fdGV4dChhdHU4X3N0b3JlKSk7XG5cblx0XHRcdC8vIHplcm8gb3V0XG5cdFx0XHR6ZXJvX291dChhdHU4X3N0b3JlKTtcblx0XHR9XG5cdFx0Ly8gcmVhZCBlcnJvclxuXHRcdGNhdGNoKGVfcmVhZCkge1xuXHRcdFx0Ly8gYXR0ZW1wdCB0byByZWxlYXNlIHN0b3JlXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZih0aGlzIGluc3RhbmNlb2YgV3JpdGFibGVWYXVsdEVudHJ5KSB7XG5cdFx0XHRcdFx0dm9pZCB0aGlzLnJlbGVhc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Y2F0Y2goZV9pZ25vcmUpIHt9XG5cblx0XHRcdC8vIHRocm93XG5cdFx0XHR0aHJvdyBlX3JlYWQ7XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIGRlc2VyaWFsaXplZCBvYmplY3Rcblx0XHRyZXR1cm4gaF9zdG9yZSBhcyB3X2VudHJ5O1xuXHR9XG59XG5cblxuZXhwb3J0IGNsYXNzIFdyaXRhYmxlVmF1bHRFbnRyeTxcblx0c2lfa2V5IGV4dGVuZHMgU3RvcmVLZXksXG5cdHdfZW50cnkgZXh0ZW5kcyBTdG9yZVtzaV9rZXldPVN0b3JlW3NpX2tleV0sXG4+IGV4dGVuZHMgVmF1bHRFbnRyeTxzaV9rZXksIHdfZW50cnk+IHtcblx0LyoqXG5cdCAqIERlc3Ryb3kncyB0aGlzIGluc3RhbmNlIGFuZCByZXR1cm5zIHRoZSBzdG9yZSdzIGtleSB0byB0aGUgcmVnaXN0cnkuXG5cdCAqL1xuXHRhc3luYyByZWxlYXNlKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdC8vIGFzc2VydCB0aGF0IHN0b3JlIGlzIGxvYWRlZFxuXHRcdFZhdWx0RW50cnkkX2ZpZWxkcyh0aGlzKTtcblxuXHRcdC8vIG5ldXRlciBwcml2YXRlIGZpZWxkc1xuXHRcdGhtX3ByaXZhdGVzLmRlbGV0ZSh0aGlzKTtcblxuLy8gY29uc29sZS53YXJuKGBSZWxlYXNpbmcgbG9jayBvbiBzdG9yZSAnJHt0aGlzLl9zaV9rZXl9JzogJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgY2hyb21lLnNlc3Npb246bG9ja18ke3RoaXMuX3NpX2tleX1gKSF9YCk7XG5cblx0XHQvLyByZW1vdmUgbG9ja1xuXHRcdGF3YWl0IHNlc3Npb25fc3RvcmFnZV9yZW1vdmUoYGxvY2tfJHt0aGlzLl9zaV9rZXl9YCBhcyBjb25zdCk7XG5cblx0XHQvLyBsb2NhbCBub3RpZnlcblx0XHRpZih0aGlzLl9zaV9rZXkgaW4gaF9yZWxlYXNlX3dhaXRlcnNfbG9jYWwpIHtcblx0XHRcdGZvcihjb25zdCBmX25vdGlmeSBvZiBoX3JlbGVhc2Vfd2FpdGVyc19sb2NhbFt0aGlzLl9zaV9rZXldKSB7XG5cdFx0XHRcdGZfbm90aWZ5KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gYnJvYWRjYXN0IGxvY2sgcmVtb3ZhbFxuXHRcdGdsb2JhbF9icm9hZGNhc3Qoe1xuXHRcdFx0dHlwZTogJ3JlbGVhc2VTdG9yZScsXG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRrZXk6IHRoaXMuX3NpX2tleSxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBTYXZlIHRoZSBnaXZlbiBkYXRhIHRvIHRoZSB1bmRlcmx5aW5nIHN0b3JhZ2UuXG5cdCAqL1xuXHRhc3luYyB3cml0ZShhdHU4X2RhdGE6IFVpbnQ4QXJyYXksIGRrX2NpcGhlcjogQ3J5cHRvS2V5LCBiX2luaXQ9ZmFsc2UpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyByZWYgcHJpdmF0ZSBmaWVsZHNcblx0XHRjb25zdCBnX3ByaXZhdGVzID0gVmF1bHRFbnRyeSRfZmllbGRzKHRoaXMpO1xuXG5cdFx0Ly8gbG9hZCBlbmNyeXB0aW9uIHZlY3RvclxuXHRcdGNvbnN0IGF0dThfdmVjdG9yID0gcmVzdG9yZV9hc19idWZmZXIoYXdhaXQgc2Vzc2lvbl9zdG9yYWdlX2dldCgndmVjdG9yJykpO1xuXHRcdGlmKCFhdHU4X3ZlY3Rvcikge1xuXHRcdFx0dGhyb3cgbmV3IE5vdEF1dGhlbnRpY2F0ZWRFcnJvcigpO1xuXHRcdH1cblxuXHRcdC8vIGVuY3J5cHQgdGhlIHN0b3JlXG5cdFx0Y29uc3QgYXR1OF9jaXBoZXJ0ZXh0ID0gYXdhaXQgZW5jcnlwdChhdHU4X2RhdGEsIGRrX2NpcGhlciwgYXR1OF92ZWN0b3IpO1xuXG5cdFx0Ly8gc2F2ZVxuXHRcdGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7XG5cdFx0XHRbdGhpcy5fc2lfa2V5XTogYnVmZmVyX3RvX3N0cmluZzgoYXR1OF9jaXBoZXJ0ZXh0KSxcblx0XHR9KTtcblxuXHRcdC8vIHplcm8gb3V0IHByZXZpb3VzIGRhdGEgaW4gbWVtb3J5XG5cdFx0emVyb19vdXQoZ19wcml2YXRlcy5hdHU4X2NpcGhlcnRleHQpO1xuXG5cdFx0Ly8gcmVsb2FkIGNhY2hlXG5cdFx0Z19wcml2YXRlcy5hdHU4X2NpcGhlcnRleHQgPSBhdHU4X2NpcGhlcnRleHQ7XG5cblx0XHQvLyBicm9hZGNhc3QgZXZlbnRcblx0XHRxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG5cdFx0XHRnbG9iYWxfYnJvYWRjYXN0KHtcblx0XHRcdFx0dHlwZTogJ3VwZGF0ZVN0b3JlJyxcblx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHRrZXk6IHRoaXMuX3NpX2tleSxcblx0XHRcdFx0XHRpbml0OiBiX2luaXQsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIFJlYWRzIGRlY3J5cHRlZCBzdG9yYWdlIGVudHJ5IGFzIEpTT05cblx0ICovXG5cdGFzeW5jIHdyaXRlSnNvbih3X3ZhbHVlOiBKc29uVmFsdWUsIGRrX2NpcGhlcjogQ3J5cHRvS2V5LCBiX2luaXQ9ZmFsc2UpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyBlbmNvZGUgc3RyaW5naWZpZWQganNvblxuXHRcdGNvbnN0IGF0dThfZGF0YSA9IHRleHRfdG9fYnVmZmVyKEpTT04uc3RyaW5naWZ5KHdfdmFsdWUpKTtcblxuXHRcdC8vIHdyaXRlIHRvIHZhdWx0XG5cdFx0cmV0dXJuIGF3YWl0IHRoaXMud3JpdGUoYXR1OF9kYXRhLCBka19jaXBoZXIsIGJfaW5pdCk7XG5cdH1cbn1cblxuIiwiaW1wb3J0IHR5cGUgeyBDbGFzcywgSW5zdGFuY2UgfSBmcm9tICd0cy10b29sYmVsdC9vdXQvQ2xhc3MvX2FwaSc7XG5pbXBvcnQgdHlwZSB7IE1lcmdlIH0gZnJvbSAndHMtdG9vbGJlbHQvb3V0L09iamVjdC9NZXJnZSc7XG5cbmltcG9ydCB7IEpzb25PYmplY3QsIEpzb25WYWx1ZSwgb2RlLCBvZGVyYWMsIFByb21pc2FibGUgfSBmcm9tICcjL3V0aWwvYmVsdCc7XG5cbmltcG9ydCB0eXBlIHsgQWNjZXNzIH0gZnJvbSAnIy9tZXRhL2JlbHQnO1xuaW1wb3J0IHR5cGUgeyBTdG9yZSwgU3RvcmVLZXkgfSBmcm9tICcjL21ldGEvc3RvcmUnO1xuXG5pbXBvcnQgeyBWYXVsdCwgV3JpdGFibGVWYXVsdEVudHJ5IH0gZnJvbSAnIy9jcnlwdG8vdmF1bHQnO1xuaW1wb3J0IHsgTm90QXV0aGVudGljYXRlZEVycm9yIH0gZnJvbSAnIy9zaGFyZS9hdXRoJztcbmltcG9ydCB7IEhfU1RPUkVfSU5JVFMgfSBmcm9tICcuL19pbml0JztcbmltcG9ydCB0eXBlIHsgVW5zdWJzY3JpYmVyIH0gZnJvbSAnc3ZlbHRlL3N0b3JlJztcbmltcG9ydCB7IGdsb2JhbF9yZWNlaXZlIH0gZnJvbSAnIy9zY3JpcHQvbXNnLWdsb2JhbCc7XG5cbnR5cGUgU3RvcmFnZVZhbHVlID0gSnNvbk9iamVjdCB8IEpzb25WYWx1ZVtdO1xuXG5pbnRlcmZhY2UgV3JpdGFibGVTdG9yZUZpZWxkcyB7XG5cdGRrX2NpcGhlcjogQ3J5cHRvS2V5O1xufVxuXG5jb25zdCBobV9wcml2YXRlcyA9IG5ldyBXZWFrTWFwPFdyaXRhYmxlU3RvcmU8U3RvcmVLZXksIFN0b3JhZ2VWYWx1ZT4sIFdyaXRhYmxlU3RvcmVGaWVsZHM+KCk7XG5cblxuZXhwb3J0IGNsYXNzIFdyaXRhYmxlU3RvcmU8XG5cdHNpX3N0b3JlIGV4dGVuZHMgU3RvcmVLZXk9U3RvcmVLZXksXG5cdHdfY2FjaGUgZXh0ZW5kcyBTdG9yYWdlVmFsdWU9U3RvcmVbc2lfc3RvcmVdLFxuPiB7XG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfa3Zfc3RvcmU6IFdyaXRhYmxlVmF1bHRFbnRyeTxzaV9zdG9yZT4sIHByb3RlY3RlZCBfd19jYWNoZTogd19jYWNoZSwgZGtfY2lwaGVyOiBDcnlwdG9LZXkpIHtcblx0XHRobV9wcml2YXRlcy5zZXQodGhpcywge1xuXHRcdFx0ZGtfY2lwaGVyLFxuXHRcdH0pO1xuXHR9XG5cblx0Z2V0IHJhdygpOiB3X2NhY2hlIHtcblx0XHRyZXR1cm4gdGhpcy5fd19jYWNoZTtcblx0fVxuXG5cdC8vIHJlbGVhc2VzIHRoZSBzdG9yZVxuXHRyZWxlYXNlKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHJldHVybiB0aGlzLl9rdl9zdG9yZS5yZWxlYXNlKCk7XG5cdH1cblxuXHQvLyBzYXZlcyB0aGUgc3RvcmUgZnJvbSBiYXNlZCBvbiAocHJlc3VtYWJseSBtb2RpZmllZCkgY2FjaGUgdmFsdWVcblx0c2F2ZShiX2luaXQ9ZmFsc2UpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRyZXR1cm4gdGhpcy5fa3Zfc3RvcmUud3JpdGVKc29uKHRoaXMuX3dfY2FjaGUsIGhtX3ByaXZhdGVzLmdldCh0aGlzKSEuZGtfY2lwaGVyLCBiX2luaXQpO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBXcml0YWJsZVN0b3JlQXJyYXk8XG5cdHNpX3N0b3JlIGV4dGVuZHMgU3RvcmVLZXk9U3RvcmVLZXksXG5cdGFfY2FjaGUgZXh0ZW5kcyBTdG9yZS5BcnJheTxzaV9zdG9yZT49U3RvcmUuQXJyYXk8c2lfc3RvcmU+LFxuPiBleHRlbmRzIFdyaXRhYmxlU3RvcmU8c2lfc3RvcmUsIGFfY2FjaGU+IHtcblx0Z2V0IHNpemUoKTogYV9jYWNoZVsnbGVuZ3RoJ10ge1xuXHRcdHJldHVybiB0aGlzLl93X2NhY2hlLmxlbmd0aDtcblx0fVxuXG5cdGF0KGlfa2V5OiBrZXlvZiBhX2NhY2hlKTogYV9jYWNoZVt0eXBlb2YgaV9rZXldIHwgbnVsbCB7XG5cdFx0cmV0dXJuIHRoaXMuX3dfY2FjaGVbaV9rZXldID8/IG51bGw7XG5cdH1cblxuXHRtYXAoZl9tYXA6ICh3X3ZhbHVlOiBhX2NhY2hlW251bWJlcl0sIGlfa2V5OiBudW1iZXIpID0+IGFueSk6IFJldHVyblR5cGU8dHlwZW9mIGZfbWFwPltdIHtcblx0XHRyZXR1cm4gdGhpcy5fd19jYWNoZS5tYXAoZl9tYXApO1xuXHR9XG5cblx0YXN5bmMgcHJlcGVuZCh3X3ZhbHVlOiBhX2NhY2hlW251bWJlcl0pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyB1cGRhdGUgY2FjaGVcblx0XHR0aGlzLl93X2NhY2hlLnVuc2hpZnQod192YWx1ZSk7XG5cblx0XHQvLyBhdHRlbXB0IHRvIHNhdmVcblx0XHRhd2FpdCB0aGlzLnNhdmUoKTtcblx0fVxuXG5cdGFzeW5jIGFwcGVuZCh3X3ZhbHVlOiBhX2NhY2hlW251bWJlcl0pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyB1cGRhdGUgY2FjaGVcblx0XHR0aGlzLl93X2NhY2hlLnVuc2hpZnQod192YWx1ZSk7XG5cblx0XHQvLyBhdHRlbXB0IHRvIHNhdmVcblx0XHRhd2FpdCB0aGlzLnNhdmUoKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgV3JpdGFibGVTdG9yZU1hcDxcblx0c2lfc3RvcmUgZXh0ZW5kcyBTdG9yZUtleT1TdG9yZUtleSxcblx0aF9jYWNoZSBleHRlbmRzIFN0b3JlLk1hcDxzaV9zdG9yZT49U3RvcmUuTWFwPHNpX3N0b3JlPixcbj4gZXh0ZW5kcyBXcml0YWJsZVN0b3JlPHNpX3N0b3JlLCBoX2NhY2hlPiB7XG5cdC8qKlxuXHQgKiBFbnRyaWVzIGl0ZXJhdG9yXG5cdCAqL1xuXHQqIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W2tleW9mIGhfY2FjaGUsIGhfY2FjaGVba2V5b2YgaF9jYWNoZV1dPiB7XG5cdFx0Zm9yKGNvbnN0IGFfcGFpciBvZiBvZGUodGhpcy5fd19jYWNoZSkpIHtcblx0XHRcdHlpZWxkIGFfcGFpcjtcblx0XHR9XG5cdH1cblxuXHRhdChwX3Jlczoga2V5b2YgaF9jYWNoZSk6IGhfY2FjaGVbdHlwZW9mIHBfcmVzXSB8IG51bGwge1xuXHRcdHJldHVybiB0aGlzLl93X2NhY2hlW3BfcmVzXSA/PyBudWxsO1xuXHR9XG5cblx0cmVkdWNlPFxuXHRcdHdfb3V0IGV4dGVuZHMgYW55LFxuXHQ+KGZfbWFwOiAoc2lfa2V5OiBrZXlvZiBoX2NhY2hlLCB3X3ZhbHVlOiBoX2NhY2hlW2tleW9mIGhfY2FjaGVdKSA9PiB3X291dCk6IHdfb3V0W10ge1xuXHRcdHJldHVybiBvZGVyYWModGhpcy5fd19jYWNoZSwgZl9tYXAgYXMgKHNpOiBzdHJpbmcsIHdfdmFsdWU6IGhfY2FjaGVba2V5b2YgaF9jYWNoZV0pID0+IHdfb3V0KTtcblx0fVxuXG5cdGVudHJpZXMoKTogW2tleW9mIGhfY2FjaGUsIGhfY2FjaGVba2V5b2YgaF9jYWNoZV1dW10ge1xuXHRcdHJldHVybiBvZGUodGhpcy5fd19jYWNoZSk7XG5cdH1cblxuXHQvLyBhc3luYyBwdXQoZ19pbmZvOiBoX2NhY2hlW2tleW9mIGhfY2FjaGVdKTogUHJvbWlzZTx2b2lkPiB7XG5cdC8vIFx0Ly8gcHJlcGFyZSBhcHAgcGF0aFxuXHQvLyBcdGNvbnN0IHBfYXBwID0gQXBwc0kucGF0aEZvcihnX2FwcC5ob3N0LCBnX2FwcC5zY2hlbWUpO1xuXG5cdC8vIFx0Ly8gdXBkYXRlIGNhY2hlXG5cdC8vIFx0dGhpcy5fd19jYWNoZVtwX2FwcF0gPSBnX2FwcDtcblxuXHQvLyBcdC8vIGF0dGVtcHQgdG8gc2F2ZVxuXHQvLyBcdGF3YWl0IHRoaXMuc2F2ZSgpO1xuXHQvLyB9XG59XG5cblxuXG5leHBvcnQgY2xhc3MgV3JpdGFibGVTdG9yZURpY3Q8XG5cdHNpX3N0b3JlIGV4dGVuZHMgU3RvcmVLZXksXG5cdGhfY2FjaGUgZXh0ZW5kcyBTdG9yZS5NYXA8c2lfc3RvcmU+PVN0b3JlLk1hcDxzaV9zdG9yZT4sXG4+IGV4dGVuZHMgV3JpdGFibGVTdG9yZTxzaV9zdG9yZSwgaF9jYWNoZT4ge1xuXHRnZXQoc2lfa2V5OiBrZXlvZiBoX2NhY2hlKTogaF9jYWNoZVt0eXBlb2Ygc2lfa2V5XSB8IG51bGwge1xuXHRcdHJldHVybiB0aGlzLl93X2NhY2hlW3NpX2tleV0gPz8gbnVsbDtcblx0fVxuXG5cdGFzeW5jIHNldChzaV9rZXk6IGtleW9mIGhfY2FjaGUsIHdfdmFsdWU6IGhfY2FjaGVbdHlwZW9mIHNpX2tleV0pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyB1cGRhdGUgY2FjaGVcblx0XHR0aGlzLl93X2NhY2hlW3NpX2tleV0gPSB3X3ZhbHVlO1xuXG5cdFx0Ly8gYXR0ZW1wdCB0byBzYXZlXG5cdFx0YXdhaXQgdGhpcy5zYXZlKCk7XG5cdH1cbn1cblxuZXhwb3J0IHR5cGUgU3RvcmVDbGFzc0ltcGw8XG5cdHNpX3N0b3JlIGV4dGVuZHMgU3RvcmVLZXk9U3RvcmVLZXksXG5cdHdfY2FjaGUgZXh0ZW5kcyBTdG9yZVtzaV9zdG9yZV09U3RvcmVbc2lfc3RvcmVdLFxuPiA9IENsYXNzPFtXcml0YWJsZVZhdWx0RW50cnk8c2lfc3RvcmU+LCB3X2NhY2hlLCBDcnlwdG9LZXldLCBXcml0YWJsZVN0b3JlPHNpX3N0b3JlLCB3X2NhY2hlPj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU3RvcmU8XG5cdGRjX3N0b3JlIGV4dGVuZHMgU3RvcmVDbGFzc0ltcGwsXG5cdHdfcmV0dXJuIGV4dGVuZHMgYW55PXZvaWQsXG4+IHtcblx0KGtzX3N0b3JlOiBJbnN0YW5jZVR5cGU8ZGNfc3RvcmU+KTogUHJvbWlzYWJsZTx3X3JldHVybj47XG59XG5cbnR5cGUgU3RvcmVFeHRlbnNpb25LZXkgPSAnYXJyYXknIHwgJ21hcCcgfCAnZGljdCc7XG5cbmV4cG9ydCB0eXBlIFN0YXRpY1N0b3JlPFxuXHRzaV9zdG9yZSBleHRlbmRzIFN0b3JlS2V5PVN0b3JlS2V5LFxuXHRkY19zdG9yZSBleHRlbmRzIFN0b3JlQ2xhc3NJbXBsPHNpX3N0b3JlPj1TdG9yZUNsYXNzSW1wbDxzaV9zdG9yZT4sXG5cdHNfZXh0ZW5zaW9uIGV4dGVuZHMgdW5kZWZpbmVkIHwgU3RvcmVFeHRlbnNpb25LZXk9dW5kZWZpbmVkIHwgU3RvcmVFeHRlbnNpb25LZXksXG4+ID0gTWVyZ2U8e1xuXHRvcGVuPHdfcmV0dXJuIGV4dGVuZHMgYW55Pihma191c2U6IFVzZVN0b3JlPGRjX3N0b3JlLCB3X3JldHVybj4pOiBQcm9taXNlPHdfcmV0dXJuPjtcblx0cmVhZCgpOiBQcm9taXNlPEluc3RhbmNlPGRjX3N0b3JlPj47XG59LCBBY2Nlc3M8e1xuXHRhcnJheToge1xuXHRcdHByZXBlbmQod192YWx1ZTogU3RvcmVbc2lfc3RvcmVdW0V4dHJhY3Q8bnVtYmVyLCBrZXlvZiBTdG9yZVtzaV9zdG9yZV0+XSk6IFByb21pc2U8dm9pZD47XG5cblx0XHRhcHBlbmQod192YWx1ZTogU3RvcmVbc2lfc3RvcmVdW0V4dHJhY3Q8bnVtYmVyLCBrZXlvZiBTdG9yZVtzaV9zdG9yZV0+XSk6IFByb21pc2U8dm9pZD47XG5cdH07XG5cdG1hcDoge1xuXHRcdGF0KHNpX2tleTogU3RvcmUuS2V5PHNpX3N0b3JlPik6IFByb21pc2U8bnVsbCB8IFN0b3JlW3NpX3N0b3JlXVt0eXBlb2Ygc2lfa2V5XT47XG5cdH07XG5cdGRpY3Q6IHtcblx0XHRnZXQ8c2lfa2V5IGV4dGVuZHMgU3RvcmUuS2V5PHNpX3N0b3JlPj4oc2lfa2V5OiBzaV9rZXkpOiBQcm9taXNlPG51bGwgfCBTdG9yZVtzaV9zdG9yZV1bc2lfa2V5XT47XG5cblx0XHRzZXQoc2lfa2V5OiBTdG9yZS5LZXk8c2lfc3RvcmU+LCB3X3ZhbHVlOiBTdG9yZVtzaV9zdG9yZV1bdHlwZW9mIHNpX2tleV0pOiBQcm9taXNlPHZvaWQ+O1xuXHR9O1xufSwgc19leHRlbnNpb24+PjtcblxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaF9jaXBoZXIoKSB7XG5cdC8vIGZldGNoIHRoZSByb290IGtleVxuXHRjb25zdCBka19yb290ID0gYXdhaXQgVmF1bHQuZ2V0Um9vdEtleSgpO1xuXG5cdC8vIG5vdCBhdXRoZW50aWNhdGVkOyB0aHJvd1xuXHRpZighZGtfcm9vdCkgdGhyb3cgbmV3IE5vdEF1dGhlbnRpY2F0ZWRFcnJvcigpO1xuXG5cdC8vIGRlcml2ZSB0aGUgY2lwaGVyIGtleVxuXHRyZXR1cm4gYXdhaXQgVmF1bHQuY2lwaGVyS2V5KGRrX3Jvb3QsIHRydWUpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfc3RvcmVfY2xhc3M8XG5cdHNpX3N0b3JlIGV4dGVuZHMgU3RvcmVLZXksXG5cdGRjX3N0b3JlIGV4dGVuZHMgU3RvcmVDbGFzc0ltcGwsXG5cdHdfY2FjaGUgZXh0ZW5kcyBTdG9yZVtzaV9zdG9yZV0sXG5cdHNfZXh0ZW5kcyBleHRlbmRzIHVuZGVmaW5lZCB8IFN0b3JlRXh0ZW5zaW9uS2V5LFxuLy8gPihzaV9zdG9yZTogc2lfc3RvcmUsIGRjX3N0b3JlOiBkY19zdG9yZSk6IFN0YXRpY1N0b3JlPHNpX3N0b3JlLCBkY19zdG9yZT4gJiBkY19zdG9yZSB7XG4+KHtcblx0c3RvcmU6IHNpX3N0b3JlLFxuXHRjbGFzczogZGNfc3RvcmUsXG5cdGV4dGVuc2lvbjogc19leHRlbnNpb24sXG59OiB7XG5cdHN0b3JlOiBzaV9zdG9yZTtcblx0Y2xhc3M6IGRjX3N0b3JlO1xuXHRleHRlbnNpb24/OiBzX2V4dGVuZHM7XG59KTogU3RhdGljU3RvcmU8c2lfc3RvcmUsIGRjX3N0b3JlLCBzX2V4dGVuZHM+ICYgZGNfc3RvcmUge1xuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbihkY19zdG9yZSwge1xuXHRcdGFzeW5jIG9wZW48d19yZXR1cm4gZXh0ZW5kcyBhbnk+KGZrX3VzZTogVXNlU3RvcmU8ZGNfc3RvcmUsIHdfcmV0dXJuPik6IFByb21pc2U8d19yZXR1cm4+IHtcblx0XHRcdC8vIGZldGNoIGNpcGhlciBrZXlcblx0XHRcdGNvbnN0IGRrX2NpcGhlciA9IGF3YWl0IGZldGNoX2NpcGhlcigpO1xuXG5cdFx0XHQvLyBjaGVja291dCB0aGUgc3RvcmUgZnJvbSB0aGUgdmF1bHRcblx0XHRcdGNvbnN0IGt2X3N0b3JlID0gYXdhaXQgVmF1bHQuYWNxdWlyZShzaV9zdG9yZSk7XG5cblx0XHRcdC8vIHJlYWQgdGhlIHN0b3JlIGFzIGpzb25cblx0XHRcdGxldCB3X3N0b3JlID0gYXdhaXQga3Zfc3RvcmUucmVhZEpzb24oZGtfY2lwaGVyKSBhcyB3X2NhY2hlO1xuXG5cdFx0XHQvLyBpZiB0aGlzIGNyZWF0ZXMgdGhlIHN0b3JlLCBzYXZlIGl0IGltbWVkaWF0ZWx5XG5cdFx0XHRsZXQgYl9zYXZlID0gZmFsc2U7XG5cblx0XHRcdC8vIG5vdCBleGlzdHM7IGluaXRpYWxpemVcblx0XHRcdGlmKCF3X3N0b3JlKSB7XG5cdFx0XHRcdHdfc3RvcmUgPSBIX1NUT1JFX0lOSVRTW3NpX3N0b3JlXSBhcyB3X2NhY2hlO1xuXHRcdFx0XHRiX3NhdmUgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpbnN0YW50aWF0ZSB0aGUgc3RvcmUgY2xhc3Ncblx0XHRcdGNvbnN0IGtzX3N0b3JlID0gbmV3IGRjX3N0b3JlKGt2X3N0b3JlLCB3X3N0b3JlLCBka19jaXBoZXIpIGFzIEluc3RhbmNlVHlwZTxkY19zdG9yZT47XG5cblx0XHRcdC8vIHNhdmUgdGhlIG5ld2x5IGNyZWF0ZWQgc3RvcmVcblx0XHRcdGlmKGJfc2F2ZSkgYXdhaXQga3Nfc3RvcmUuc2F2ZSh0cnVlKTtcblxuXHRcdFx0Ly8gdXNlIHRoZSBzdG9yZVxuXHRcdFx0Y29uc3Qgd19yZXR1cm4gPSBhd2FpdCBma191c2Uoa3Nfc3RvcmUpO1xuXG5cdFx0XHQvLyByZWxlYXNlIHRoZSBzdG9yZVxuXHRcdFx0YXdhaXQga3Nfc3RvcmUucmVsZWFzZSgpO1xuXG5cdFx0XHQvLyByZXR1cm5cblx0XHRcdHJldHVybiB3X3JldHVybjtcblx0XHR9LFxuXG5cdFx0cmVhZCgpOiBQcm9taXNlPEluc3RhbmNlPGRjX3N0b3JlPj4ge1xuXHRcdFx0cmV0dXJuIGRjX3N0b3JlWydvcGVuJ10oa3Nfc3RvcmUgPT4ga3Nfc3RvcmUpO1xuXHRcdH0sXG5cblx0XHQvLyBhc3luYyByZWFkb25seSh0aGlzOiBTdGF0aWNTdG9yZSk6IFByb21pc2U8SW5zdGFuY2U8ZGNfc3RvcmU+PiB7XG5cdFx0Ly8gXHQvLyBmZXRjaCBjaXBoZXIga2V5XG5cdFx0Ly8gXHRjb25zdCBka19jaXBoZXIgPSBhd2FpdCBmZXRjaF9jaXBoZXIoKTtcblxuXHRcdC8vIFx0Ly8gb2J0YWluIHRoZSBzdG9yZSBmcm9tIHRoZSB2YXVsdFxuXHRcdC8vIFx0Y29uc3Qga3Zfc3RvcmUgPSBhd2FpdCBWYXVsdC5yZWFkb25seShzaV9zdG9yZSk7XG5cblx0XHQvLyBcdC8vIHJlYWQgdGhlIHN0b3JlIGFzIGpzb25cblx0XHQvLyBcdGNvbnN0IHdfc3RvcmUgPSBhd2FpdCBrdl9zdG9yZS5yZWFkSnNvbihka19jaXBoZXIpIGFzIHdfY2FjaGU7XG5cblx0XHQvLyBcdC8vIHN0b3JlIGRvZXMgbm90IGV4aXN0XG5cdFx0Ly8gXHRpZighd19zdG9yZSkge1xuXHRcdC8vIFx0XHQvLyBpbml0aWFsaXplIGFuZCBzYXZlIGl0XG5cdFx0Ly8gXHRcdGF3YWl0IHRoaXMub3Blbihrc19zdG9yZSA9PiBrc19zdG9yZS5zYXZlKCkpO1xuXG5cdFx0Ly8gXHRcdC8vIHRyeSBhZ2FpblxuXHRcdC8vIFx0XHRyZXR1cm4gdGhpcy5yZWFkKClcblx0XHQvLyBcdH1cblxuXHRcdC8vIFx0Ly8gaW5zdGFudGlhdGUgdGhlIHN0b3JlIGNsYXNzXG5cdFx0Ly8gXHRyZXR1cm4gbmV3IGRjX3N0b3JlKGt2X3N0b3JlLCB3X3N0b3JlLCBka19jaXBoZXIpIGFzIEluc3RhbmNlVHlwZTxkY19zdG9yZT47XG5cdFx0Ly8gfSxcblxuXHRcdC4uLignYXJyYXknID09PSBzX2V4dGVuc2lvbikgJiYge1xuXHRcdFx0YXN5bmMgcHJlcGVuZCh3X3ZhbHVlOiBTdG9yZVtzaV9zdG9yZV1bRXh0cmFjdDxudW1iZXIsIGtleW9mIFN0b3JlW3NpX3N0b3JlXT5dKTogUHJvbWlzZTxudW1iZXI+IHtcblx0XHRcdFx0cmV0dXJuIGF3YWl0IGRjX3N0b3JlWydvcGVuJ10oa3Nfc2VsZiA9PiBrc19zZWxmLnByZXBlbmQod192YWx1ZSkpO1xuXHRcdFx0fSxcblxuXHRcdFx0YXN5bmMgYXBwZW5kKHdfdmFsdWU6IFN0b3JlW3NpX3N0b3JlXVtFeHRyYWN0PG51bWJlciwga2V5b2YgU3RvcmVbc2lfc3RvcmVdPl0pOiBQcm9taXNlPG51bWJlcj4ge1xuXHRcdFx0XHRyZXR1cm4gYXdhaXQgZGNfc3RvcmVbJ29wZW4nXShrc19zZWxmID0+IGtzX3NlbGYuYXBwZW5kKHdfdmFsdWUpKTtcblx0XHRcdH0sXG5cdFx0fSxcblxuXHRcdC4uLignbWFwJyA9PT0gc19leHRlbnNpb24pICYmIHtcblx0XHRcdGFzeW5jIGF0PHNpX2tleSBleHRlbmRzIFN0b3JlLktleTxzaV9zdG9yZT4+KHNpX2tleTogc2lfa2V5KTogUHJvbWlzZTxudWxsIHwgU3RvcmVbc2lfc3RvcmVdW3NpX2tleV0+IHtcblx0XHRcdFx0cmV0dXJuIGF3YWl0IGRjX3N0b3JlWydvcGVuJ10oa3Nfc2VsZiA9PiBrc19zZWxmLmF0KHNpX2tleSkpO1xuXHRcdFx0fSxcblx0XHR9LFxuXG5cdFx0Li4uKCdkaWN0JyA9PT0gc19leHRlbnNpb24pICYmIHtcblx0XHRcdGFzeW5jIGdldDxzaV9rZXkgZXh0ZW5kcyBTdG9yZS5LZXk8c2lfc3RvcmU+PihzaV9rZXk6IHNpX2tleSk6IFByb21pc2U8bnVsbCB8IFN0b3JlW3NpX3N0b3JlXVtzaV9rZXldPiB7XG5cdFx0XHRcdHJldHVybiBhd2FpdCBkY19zdG9yZVsnb3BlbiddKGtzX3NlbGYgPT4ga3Nfc2VsZi5nZXQoc2lfa2V5KSk7XG5cdFx0XHR9LFxuXG5cdFx0XHRhc3luYyBzZXQoc2lfa2V5OiBTdG9yZS5LZXk8c2lfc3RvcmU+LCB3X3ZhbHVlOiBTdG9yZVtzaV9zdG9yZV1bdHlwZW9mIHNpX2tleV0pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRcdFx0cmV0dXJuIGF3YWl0IGRjX3N0b3JlWydvcGVuJ10oa3Nfc2VsZiA9PiBrc19zZWxmLnB1dChzaV9rZXksIHdfdmFsdWUpKTtcblx0XHRcdH0sXG5cdFx0fSxcblx0fSkgYXMgU3RhdGljU3RvcmU8c2lfc3RvcmUsIGRjX3N0b3JlLCBzX2V4dGVuZHM+ICYgZGNfc3RvcmU7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZV9zdG9yZShzaV9rZXk6IGtleW9mIFN0b3JlLCBmX2NhbGxiYWNrOiAoYl9pbml0OiBib29sZWFuKSA9PiB2b2lkKTogVW5zdWJzY3JpYmVyIHtcblx0cmV0dXJuIGdsb2JhbF9yZWNlaXZlKHtcblx0XHR1cGRhdGVTdG9yZSh7a2V5OnNpX3N0b3JlLCBpbml0OmJfaW5pdH0pIHtcblx0XHRcdGlmKHNpX3N0b3JlID09PSBzaV9rZXkpIHtcblx0XHRcdFx0Zl9jYWxsYmFjayhiX2luaXQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdH0pO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBCZWNoMzIsIENoYWluLCBDaGFpblBhdGgsIEZhbWlseSwgRmFtaWx5S2V5IH0gZnJvbSAnIy9tZXRhL2NoYWluJztcbmltcG9ydCB0eXBlIHsgUmVzb3VyY2UgfSBmcm9tICcjL21ldGEvcmVzb3VyY2UnO1xuXG5pbXBvcnQge2JlY2gzMn0gZnJvbSAnYmVjaDMyJztcblxuaW1wb3J0IHtcblx0Y3JlYXRlX3N0b3JlX2NsYXNzLFxuXHRXcml0YWJsZVN0b3JlTWFwLFxufSBmcm9tICcuL19iYXNlJztcblxuaW1wb3J0IHsgUl9CRUNIMzIsIFNJX1NUT1JFX0NIQUlOUyB9IGZyb20gJyMvc2hhcmUvY29uc3RhbnRzJztcbmltcG9ydCB7IHl3X2NoYWluIH0gZnJvbSAnIy9hcHAvbWVtJztcbmltcG9ydCB7IG9kZSB9IGZyb20gJyMvdXRpbC9iZWx0JztcbmltcG9ydCB7IGJhc2U2NF90b19idWZmZXIsIHJpcGVtZDE2MF9zeW5jLCBzaGEyNTZfc3luYyB9IGZyb20gJyMvdXRpbC9kYXRhJztcbmltcG9ydCB7IGJpblRvQmFzZTU4LCBiaW5Ub0JlY2gzMlBhZGRlZCwgZW5jb2RlQmVjaDMyLCBpbnN0YW50aWF0ZVJpcGVtZDE2MCwgUmlwZW1kMTYwIH0gZnJvbSAnQHNvbGFyLXJlcHVibGljL3dhc20tc2VjcDI1NmsxJztcblxuLy8gdHlwZSBzbyA9IHtcbi8vIFx0cGF0aEFyZ3M6IFtGYW1pbHlLZXksIHN0cmluZ107XG4vLyBcdHJlc291cmNlOiA8YV9hcmdzIGV4dGVuZHMgW0ZhbWlseUtleSwgc3RyaW5nXT4oKSA9PiBDaGFpbjxhX2FyZ3NbMF0sIGFfYXJnc1sxXT47XG4vLyBcdHRlc3Q6IDxzX3Rlc3QgZXh0ZW5kcyBzdHJpbmc+KHM6IHNfdGVzdCkgPT4gc190ZXN0O1xuLy8gfTtcblxuLy8gdHlwZSBUMSA9IDxzX3N0ciBleHRlbmRzIHN0cmluZz4oczogc19zdHIpID0+IHNfc3RyO1xuLy8gdHlwZSBUMiA9IDxzX3N0ciBleHRlbmRzIG51bWJlcj4oczogc19zdHIpID0+IHNfc3RyO1xuXG4vLyB0eXBlIGhvbWEgPSBzb1sndGVzdCddIGV4dGVuZHMgVDI/ICd5JzogJ24nO1xuXG4vLyB0eXBlIHRlc3QgPSBzb1sndGVzdCddO1xuLy8gdHlwZSB3dGYgPSB0ZXN0PCdlbmQnPjtcbi8vIGNvbnN0IGZmZjogdGVzdCA9IDxTIGV4dGVuZHMgbnVtYmVyPihzOiBTKSA9PiBzO1xuXG5jbGFzcyBDaGFpbkxpbmsge1xuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX2dfcmVzOiBDaGFpblsnaW50ZXJmYWNlJ10pIHtcblxuXHR9XG5cblx0Z2V0IGRhdGEoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dfcmVzO1xuXHR9XG5cdFxuXHRcbn1cblxudHlwZSBQYXRoRm9yPFxuXHRzaV9mYW1pbHkgZXh0ZW5kcyBGYW1pbHlLZXksXG5cdHNpX2NoYWluIGV4dGVuZHMgc3RyaW5nLFxuPiA9IGAvZmFtaWx5LiR7c2lfZmFtaWx5fS9jaGFpbi4ke3NpX2NoYWlufWA7XG5cbnR5cGUgUGF0aEZyb208XG5cdGdfY2hhaW4gZXh0ZW5kcyBDaGFpblsnaW50ZXJmYWNlJ10sXG4+ID0gUGF0aEZvcjxnX2NoYWluWydmYW1pbHknXSwgZ19jaGFpblsnaWQnXT47XG5cbmxldCB5X3JpcGVtZDogUmlwZW1kMTYwO1xuKGFzeW5jKCkgPT4ge1xuXHR5X3JpcGVtZCA9IGF3YWl0IGluc3RhbnRpYXRlUmlwZW1kMTYwKCk7XG59KSgpO1xuXG5leHBvcnQgY29uc3QgQ2hhaW5zID0gY3JlYXRlX3N0b3JlX2NsYXNzKHtcblx0c3RvcmU6IFNJX1NUT1JFX0NIQUlOUyxcblx0Y2xhc3M6IGNsYXNzIENoYWluc0kgZXh0ZW5kcyBXcml0YWJsZVN0b3JlTWFwPHR5cGVvZiBTSV9TVE9SRV9DSEFJTlM+IHtcblx0XHRzdGF0aWMgcGF0aEZvcihzaV9mYW1pbHk6IEZhbWlseUtleSwgc2lfY2hhaW46IHN0cmluZyk6IFBhdGhGb3I8dHlwZW9mIHNpX2ZhbWlseSwgdHlwZW9mIHNpX2NoYWluPiB7XG5cdFx0XHRyZXR1cm4gYC9mYW1pbHkuJHtzaV9mYW1pbHl9L2NoYWluLiR7c2lfY2hhaW59YDtcblx0XHR9XG5cblx0XHRzdGF0aWMgcGF0aEZyb20oZ19jaGFpbjogQ2hhaW5bJ2ludGVyZmFjZSddKTogUGF0aEZyb208dHlwZW9mIGdfY2hhaW4+IHtcblx0XHRcdHJldHVybiBDaGFpbnNJLnBhdGhGb3IoZ19jaGFpbi5mYW1pbHksIGdfY2hhaW4uaWQpO1xuXHRcdH1cblxuXHRcdHN0YXRpYyBhZGRyZXNzRm9yKHNfcHVia2V5OiBzdHJpbmcsIGdfY2hhaW46IENoYWluWydpbnRlcmZhY2UnXT15d19jaGFpbi5nZXQoKSwgZ19iZWNoMzI6IEJlY2gzMj1nX2NoYWluLmJlY2gzMnMuYWNjKTogc3RyaW5nIHtcblx0XHRcdC8vIHBlcmZvcm0gc2hhLTI1NiBoYXNoaW5nIG9uIHRoZSBwdWJsaWMga2V5XG5cdFx0XHRjb25zdCBhdHU4X3NoYTI1NiA9IHNoYTI1Nl9zeW5jKGJhc2U2NF90b19idWZmZXIoc19wdWJrZXkpKTtcblxuXHRcdFx0Ly8gcGVyZm9ybSByaXBlbWQtMTYwIGhhc2hpbmcgb24gdGhlIHJlc3VsdFxuXHRcdFx0Y29uc3QgYXR1OF9yaXBlbWQxNjAgPSByaXBlbWQxNjBfc3luYyhhdHU4X3NoYTI1Nik7XG5cblx0XHRcdC8vIGNvbnN0IHNfYWRkciA9IGJpblRvQmVjaDMyUGFkZGVkKGF0dThfcmlwZW1kMTYwKTtcblxuXHRcdFx0Ly8gcmV0dXJuIGAke2dfYmVjaDMyLmhycH0ke2dfYmVjaDMyLnNlcGFyYXRvcn0ke3NfYWRkcn0ke3NfY2hlY2tzdW19YDtcblxuXHRcdFx0Ly8gY29udmVydCB0byBiZWNoMzIgc3RyaW5nXG5cdFx0XHRyZXR1cm4gYmVjaDMyLmVuY29kZShnX2JlY2gzMi5ocnAsIGJlY2gzMi50b1dvcmRzKGF0dThfcmlwZW1kMTYwKSk7XG5cdFx0fVxuXG5cdFx0c3RhdGljIGJlY2gzMihzX2FkZHI6IHN0cmluZywgZ19jaGFpbjogQ2hhaW5bJ2ludGVyZmFjZSddPXl3X2NoYWluLmdldCgpLCBnX2JlY2gzMjogQmVjaDMyPWdfY2hhaW4uYmVjaDMycy5hY2MpOiBzdHJpbmcge1xuXHRcdFx0cmV0dXJuIGAke2dfYmVjaDMyLmhycH0ke2dfYmVjaDMyLnNlcGFyYXRvcn0ke3NfYWRkcn1gO1xuXHRcdH1cblxuXHRcdHN0YXRpYyBnZXQoc2lfZmFtaWx5OiBGYW1pbHlLZXksIHNpX2NoYWluOiBzdHJpbmcpOiBQcm9taXNlPG51bGwgfCBDaGFpblsnaW50ZXJmYWNlJ10+IHtcblx0XHRcdHJldHVybiBDaGFpbnMucmVhZCgpLnRoZW4oa3MgPT4ga3MuZ2V0KHNpX2ZhbWlseSwgc2lfY2hhaW4pKTtcblx0XHR9XG5cblx0XHRzdGF0aWMgYXQocF9jaGFpbjogQ2hhaW5QYXRoKTogUHJvbWlzZTxudWxsIHwgQ2hhaW5bJ2ludGVyZmFjZSddPiB7XG5cdFx0XHRyZXR1cm4gQ2hhaW5zLnJlYWQoKS50aGVuKGtzID0+IGtzLmF0KHBfY2hhaW4pKTtcblx0XHR9XG5cblx0XHRzdGF0aWMgaXNWYWxpZEFkZHJlc3NGb3IoZ19jaGFpbjogQ2hhaW5bJ2ludGVyZmFjZSddLCBzX2FkZHJlc3M6IENoYWluLkJlY2gzMlN0cmluZzx0eXBlb2YgZ19jaGFpblsnYmVjaDMycyddPiwgc2lfcHVycG9zZToga2V5b2YgRmFtaWx5LkJlY2gzMnM8dHlwZW9mIGdfY2hhaW5bJ2ZhbWlseSddPj0nYWNjJykge1xuXHRcdFx0aWYoZ19jaGFpbi5iZWNoMzJzKSB7XG5cdFx0XHRcdGNvbnN0IG1fYmVjaDMyID0gUl9CRUNIMzIuZXhlYyhzX2FkZHJlc3MpO1xuXHRcdFx0XHRyZXR1cm4gbV9iZWNoMzJcblx0XHRcdFx0XHQmJiBtX2JlY2gzMlsxXSA9PT0gZ19jaGFpbi5iZWNoMzJzW3NpX3B1cnBvc2VdLmhycFxuXHRcdFx0XHRcdCYmIG1fYmVjaDMyWzJdID09PSBnX2NoYWluLmJlY2gzMnNbc2lfcHVycG9zZV0uc2VwYXJhdG9yO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdC8vIFRPRE86IG5vbi1iZWNoMzIgY2hhaW5zXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQqIGluRmFtaWx5KHNpX2ZhbWlseTogRmFtaWx5S2V5KTogSXRlcmFibGVJdGVyYXRvcjxbQ2hhaW5QYXRoLCBDaGFpblsnaW50ZXJmYWNlJ11dPiB7XG5cdFx0XHQvLyBjcmVhdGUgcHJlZml4XG5cdFx0XHRjb25zdCBwX3ByZWZpeCA9IENoYWluc0kucGF0aEZvcihzaV9mYW1pbHksICcnKTtcblxuXHRcdFx0Ly8gZmlsdGVyIGVudHJpZWVzXG5cdFx0XHRmb3IoY29uc3QgW3BfY2hhaW4sIGdfY2hhaW5dIG9mIG9kZSh0aGlzLl93X2NhY2hlKSkge1xuXHRcdFx0XHRpZihwX2NoYWluLnN0YXJ0c1dpdGgocF9wcmVmaXgpKSB7XG5cdFx0XHRcdFx0eWllbGQgW3BfY2hhaW4sIGdfY2hhaW5dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Z2V0KHNpX2ZhbWlseTogRmFtaWx5S2V5LCBzaV9jaGFpbjogc3RyaW5nKTogQ2hhaW5bJ2ludGVyZmFjZSddIHwgbnVsbCB7XG5cdFx0XHQvLyBwcmVwYXJlIHBhdGhcblx0XHRcdGNvbnN0IHBfcmVzID0gQ2hhaW5zSS5wYXRoRm9yKHNpX2ZhbWlseSwgc2lfY2hhaW4pO1xuXG5cdFx0XHQvLyBmZXRjaFxuXHRcdFx0cmV0dXJuIHRoaXMuX3dfY2FjaGVbcF9yZXNdID8/IG51bGw7XG5cdFx0fVxuXG5cdFx0YXN5bmMgcHV0KGdfcmVzOiBDaGFpblsnaW50ZXJmYWNlJ10pOiBQcm9taXNlPFBhdGhGcm9tPHR5cGVvZiBnX3Jlcz4+IHtcblx0XHRcdC8vIHByZXBhcmUgYXBwIHBhdGhcblx0XHRcdGNvbnN0IHBfcmVzID0gQ2hhaW5zSS5wYXRoRnJvbShnX3Jlcyk7XG5cblx0XHRcdC8vIHVwZGF0ZSBjYWNoZVxuXHRcdFx0dGhpcy5fd19jYWNoZVtwX3Jlc10gPSBnX3JlcztcblxuXHRcdFx0Ly8gYXR0ZW1wdCB0byBzYXZlXG5cdFx0XHRhd2FpdCB0aGlzLnNhdmUoKTtcblxuXHRcdFx0Ly8gcmV0dXJuIHBhdGhcblx0XHRcdHJldHVybiBwX3Jlcztcblx0XHR9XG5cdH0sXG59KTtcbiIsImltcG9ydCB0eXBlIHsgVG9rZW5TcGVjS2V5IH0gZnJvbSAnIy9tZXRhL3Rva2VuJztcblxudHlwZSBUb2tlbkVudHJ5ID0ge1xuXHRleHRlbmRzPzogVG9rZW5TcGVjS2V5O1xuXHRhdHRyaWJ1dGVzOiB7XG5cdFx0ZnVuZ2libGU6IGJvb2xlYW47XG5cdH07XG59O1xuXG5leHBvcnQgY29uc3QgVG9rZW5SZWdpc3RyeTogUmVjb3JkPFRva2VuU3BlY0tleSwgVG9rZW5FbnRyeT4gPSB7XG5cdCdjdy0yMCc6IHtcblx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRmdW5naWJsZTogZmFsc2UsXG5cdFx0fSxcblx0fSxcblxuXHQnc25pcC0yMCc6IHtcblx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRmdW5naWJsZTogdHJ1ZSxcblx0XHR9LFxuXHR9LFxuXG5cdCdzbmlwLTIxJzoge1xuXHRcdGV4dGVuZHM6ICdzbmlwLTIwJyxcblx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRmdW5naWJsZTogdHJ1ZSxcblx0XHR9LFxuXHR9LFxuXG5cdCdzbmlwLTcyMSc6IHtcblx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRmdW5naWJsZTogZmFsc2UsXG5cdFx0fSxcblx0fSxcblxuXHQnc25pcC03MjInOiB7XG5cdFx0ZXh0ZW5kczogJ3NuaXAtNzIxJyxcblx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRmdW5naWJsZTogZmFsc2UsXG5cdFx0fSxcblx0fSxcbn07XG4iLCJpbXBvcnQgdHlwZSB7IFJlc291cmNlIH0gZnJvbSAnIy9tZXRhL3Jlc291cmNlJztcblxuaW1wb3J0IHtcblx0Y3JlYXRlX3N0b3JlX2NsYXNzLFxuXHRXcml0YWJsZVN0b3JlRGljdCxcbn0gZnJvbSAnLi9fYmFzZSc7XG5cbmltcG9ydCB7IFNJX1NUT1JFX0VOVElUSUVTIH0gZnJvbSAnIy9zaGFyZS9jb25zdGFudHMnO1xuXG5pbXBvcnQgdHlwZSB7IFN0b3JlIH0gZnJvbSAnIy9tZXRhL3N0b3JlJztcbmltcG9ydCB0eXBlIHsgVG9rZW4sIFRva2VuUGF0aCwgVG9rZW5TcGVjS2V5IH0gZnJvbSAnIy9tZXRhL3Rva2VuJztcbmltcG9ydCB0eXBlIHsgQmVjaDMyLCBDaGFpbiwgQ2hhaW5QYXRoLCBFbnRpdHksIEVudGl0eVBhdGgsIEhvbGRpbmdQYXRoIH0gZnJvbSAnIy9tZXRhL2NoYWluJztcbmltcG9ydCB7IENoYWlucyB9IGZyb20gJy4vY2hhaW5zJztcbmltcG9ydCB0eXBlIHsgVmFsdWVzIH0gZnJvbSAnIy9tZXRhL2JlbHQnO1xuaW1wb3J0IHsgZm9sZCB9IGZyb20gJyMvdXRpbC9iZWx0JztcbmltcG9ydCB0eXBlIHsgVW5pb24gfSBmcm9tICd0cy10b29sYmVsdCc7XG5pbXBvcnQgeyBUb2tlblJlZ2lzdHJ5IH0gZnJvbSAnIy9zY2hlbWEvdG9rZW4tcmVnaXN0cnknO1xuaW1wb3J0IHR5cGUgeyBNZXJnZSB9IGZyb20gJ3RzLXRvb2xiZWx0L291dC9PYmplY3QvTWVyZ2UnO1xuaW1wb3J0IHsgeXdfY2hhaW4sIHl3X2NoYWluX3JlZiB9IGZyb20gJyMvYXBwL21lbSc7XG5cbnR5cGUgRW50aXR5VHJlZSA9IE5vbk51bGxhYmxlPFZhbHVlczxTdG9yZVsnZW50aXRpZXMnXT4+O1xuXG50eXBlIENvbnRyYWN0U3VidHJlZSA9IE5vbk51bGxhYmxlPFVuaW9uLk1lcmdlPE5vbk51bGxhYmxlPEVudGl0eVRyZWU+PlsnYXMuY29udHJhY3QnXT47XG5cbnR5cGUgVG9rZW5JbnRlcmZhY2VNYXAgPSBSZWNvcmQ8VG9rZW5TcGVjS2V5LCB7fT47XG5cbmV4cG9ydCB0eXBlIFRva2VuRGljdCA9IFJlY29yZDxUb2tlblBhdGgsIFRva2VuWydpbnRlcmZhY2UnXT47XG5cblxuZXhwb3J0IHR5cGUgRW50aXR5SW5mbyA9IE1lcmdlPHtcblx0Y2hhaW5SZWY6IENoYWluUGF0aDtcblx0ZW50aXR5UmVmOiBFbnRpdHlQYXRoO1xuXHRiZWNoMzI6IEJlY2gzMi5TdHJpbmc7XG59LCB7XG5cdHR5cGU6ICdjb250cmFjdCcgfCAndG9rZW4nO1xufSB8IHtcblx0dHlwZTogJ2hvbGRpbmcnO1xuXHRjb2luOiBzdHJpbmc7XG59PjtcblxuZXhwb3J0IGNvbnN0IEVudGl0aWVzID0gY3JlYXRlX3N0b3JlX2NsYXNzKHtcblx0c3RvcmU6IFNJX1NUT1JFX0VOVElUSUVTLFxuXHRjbGFzczogY2xhc3MgRW50aXRpZXNJIGV4dGVuZHMgV3JpdGFibGVTdG9yZURpY3Q8dHlwZW9mIFNJX1NUT1JFX0VOVElUSUVTPiB7XG5cdFx0c3RhdGljIHBhdGhGcm9tKGdfZW50aXR5OiBFbnRpdHlbJ2ludGVyZmFjZSddLCBnX2NoYWluPXl3X2NoYWluLmdldCgpKSB7XG5cdFx0XHRyZXR1cm4gYCR7Q2hhaW5zLnBhdGhGcm9tKGdfY2hhaW4pfS9iZWNoMzIuJHtnX2VudGl0eS5iZWNoMzJ9YDtcblx0XHR9XG5cblx0XHRzdGF0aWMgcGFyc2VFbnRpdHlQYXRoKHBfZW50aXR5OiBFbnRpdHlQYXRoKTogRW50aXR5SW5mbyB8IG51bGwge1xuXHRcdFx0Y29uc3QgYV9wYXRocyA9IHBfZW50aXR5LnNsaWNlKDEpLnNwbGl0KCcvJyk7XG5cblx0XHRcdC8vIGluc3VmZmljaWVudCBwYXRoXG5cdFx0XHRpZihhX3BhdGhzLmxlbmd0aCA8IDMpIHJldHVybiBudWxsO1xuXG5cdFx0XHQvLyBub3QgYW4gZW50aXR5IHBhdGhcblx0XHRcdGlmKCFhX3BhdGhzWzBdLnN0YXJ0c1dpdGgoJ2ZhbWlseS4nKSB8fCAhYV9wYXRoc1sxXS5zdGFydHNXaXRoKCdjaGFpbi4nKSB8fCAhYV9wYXRoc1syXS5zdGFydHNXaXRoKCdiZWNoMzIuJykpIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBzaV90eXBlOiBFbnRpdHlJbmZvWyd0eXBlJ107XG5cdFx0XHRsZXQgc2lfY29pbiA9ICcnO1xuXG5cdFx0XHRpZignYXMuY29udHJhY3QnID09PSBhX3BhdGhzWzNdKSB7XG5cdFx0XHRcdHNpX3R5cGUgPSAnY29udHJhY3QnO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZignYXMudG9rZW4nID09PSBhX3BhdGhzWzNdKSB7XG5cdFx0XHRcdHNpX3R5cGUgPSAndG9rZW4nO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihhX3BhdGhzWzNdLnN0YXJ0c1dpdGgoJ2hvbGRpbmcuJykpIHtcblx0XHRcdFx0c2lfdHlwZSA9ICdob2xkaW5nJztcblx0XHRcdFx0c2lfY29pbiA9IGFfcGF0aHNbM10uc2xpY2UoYV9wYXRoc1szXS5pbmRleE9mKCcuJykrMSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHBhcnNlIGNoYWluIHNlZ21lbnRzXG5cdFx0XHRjb25zdCBwX2NoYWluID0gJy8nK2FfcGF0aHMuc2xpY2UoMCwgMikuam9pbignLycpIGFzIENoYWluUGF0aDtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y2hhaW5SZWY6IHBfY2hhaW4sXG5cblx0XHRcdFx0ZW50aXR5UmVmOiBgJHtwX2NoYWlufS8ke2FfcGF0aHNbM119YCxcblxuXHRcdFx0XHQvLyBwYXJzZSBhZGRyZXNzXG5cdFx0XHRcdGJlY2gzMjogYV9wYXRoc1syXS5zbGljZShhX3BhdGhzWzJdLmluZGV4T2YoJy4nKSsxKSxcblxuXHRcdFx0XHR0eXBlOiBzaV90eXBlLFxuXG5cdFx0XHRcdC4uLnNpX2NvaW4gJiYge1xuXHRcdFx0XHRcdGNvaW46IHNpX2NvaW4sXG5cdFx0XHRcdH0sXG5cdFx0XHR9IGFzIEVudGl0eUluZm87XG5cdFx0fVxuXG5cdFx0c3RhdGljIGhvbGRpbmdQYXRoRm9yKHNhX293bmVyOiBCZWNoMzIuU3RyaW5nLCBzaV9jb2luOiBzdHJpbmcsIHBfY2hhaW49eXdfY2hhaW5fcmVmLmdldCgpKTogSG9sZGluZ1BhdGgge1xuXHRcdFx0cmV0dXJuIGAke3BfY2hhaW59L2JlY2gzMi4ke3NhX293bmVyfS9ob2xkaW5nLiR7c2lfY29pbn1gXG5cdFx0fVxuXG5cdFx0c3RhdGljIGFzeW5jIHJlYWRUb2tlbnMoZ19jaGFpbjogQ2hhaW5bJ2ludGVyZmFjZSddLCBoX2ludGVyZmFjZXM6IFRva2VuSW50ZXJmYWNlTWFwfG51bGw9bnVsbCkge1xuXHRcdFx0Ly8gcmVhZCBzdG9yZVxuXHRcdFx0Y29uc3Qga3NfcmVzID0gYXdhaXQgRW50aXRpZXMucmVhZCgpO1xuXG5cdFx0XHQvLyBcblx0XHRcdHJldHVybiBrc19yZXMudG9rZW5zKENoYWlucy5wYXRoRnJvbShnX2NoYWluKSwgaF9pbnRlcmZhY2VzKTtcblx0XHR9XG5cblx0XHRzdGF0aWMgYXN5bmMgcmVhZEZ1bmdpYmxlVG9rZW5zKGdfY2hhaW46IENoYWluWydpbnRlcmZhY2UnXSkge1xuXHRcdFx0Ly8gcmVhZCBzdG9yZVxuXHRcdFx0Y29uc3Qga3NfcmVzID0gYXdhaXQgRW50aXRpZXMucmVhZCgpO1xuXG5cdFx0XHQvLyBhbGwgZnVuZ2libGUgdG9rZW5zIGZyb20gY2hhaW5cblx0XHRcdGNvbnN0IGhfaW50ZXJmYWNlcyA9IGZvbGQoXG5cdFx0XHRcdGdfY2hhaW4udG9rZW5JbnRlcmZhY2VzLFxuXHRcdFx0XHRzaV9rZXkgPT4gVG9rZW5SZWdpc3RyeVtzaV9rZXldLmF0dHJpYnV0ZXMuZnVuZ2libGU/IHtbc2lfa2V5XTp7fX06IHt9XG5cdFx0XHQpIGFzIFRva2VuSW50ZXJmYWNlTWFwO1xuXG5cdFx0XHQvLyBhcHBseSBmaWx0ZXJcblx0XHRcdHJldHVybiBrc19yZXMudG9rZW5zKENoYWlucy5wYXRoRnJvbShnX2NoYWluKSwgaF9pbnRlcmZhY2VzKTtcblx0XHR9XG5cblx0XHRzdGF0aWMgZnVuZ2libGVJbnRlcmZhY2VzRm9yKGdfY2hhaW46IENoYWluWydpbnRlcmZhY2UnXSkge1xuXHRcdFx0Ly8gYWxsIGZ1bmdpYmxlIHRva2VucyBmcm9tIGNoYWluXG5cdFx0XHRyZXR1cm4gZm9sZChcblx0XHRcdFx0Z19jaGFpbi50b2tlbkludGVyZmFjZXMsXG5cdFx0XHRcdHNpX2tleSA9PiBUb2tlblJlZ2lzdHJ5W3NpX2tleV0uYXR0cmlidXRlcy5mdW5naWJsZT8ge1tzaV9rZXldOnt9fToge31cblx0XHRcdCkgYXMgVG9rZW5JbnRlcmZhY2VNYXA7XG5cdFx0fVxuXG5cdFx0c3RhdGljIGFzeW5jIGluZm9Gb3JUb2tlbihnX3Rva2VuOiBUb2tlblsnaW50ZXJmYWNlJ10pOiBUb2tlbkJhc2ljSW5mbyB7XG5cblx0XHR9XG5cblx0XHQvLyBzdGF0aWMgcGF0aEZvcjxcblx0XHQvLyBcdHNfaG9zdCBleHRlbmRzIHN0cmluZyxcblx0XHQvLyBcdHNfc2NoZW1lIGV4dGVuZHMgVGFnU2NoZW1lS2V5LFxuXHRcdC8vIFx0Z19yZXMgZXh0ZW5kcyBUYWc8UmVwbGFjZTxzX2hvc3QsICc6JywgJysnPiwgc19zY2hlbWU+LFxuXHRcdC8vID4oc19ob3N0OiBzX2hvc3QsIHNfc2NoZW1lOiBzX3NjaGVtZSk6IFJlc291cmNlLlBhdGg8Z19yZXM+IHtcblx0XHQvLyBcdHJldHVybiBgL3NjaGVtZS4ke3Nfc2NoZW1lfS9ob3N0LiR7c19ob3N0LnJlcGxhY2UoLzovZywgJysnKX1gIGFzIFJlc291cmNlLlBhdGg8Z19yZXM+O1xuXHRcdC8vIH1cblxuXHRcdC8vIHN0YXRpYyBwYXRoRnJvbTxcblx0XHQvLyBcdGdfcmVzIGV4dGVuZHMgVGFnLFxuXHRcdC8vID4oZ19yZXM6IFRhZ1snaW50ZXJmYWNlJ10pOiBSZXNvdXJjZS5QYXRoPGdfcmVzPiB7XG5cdFx0Ly8gXHRyZXR1cm4gRW50aXRpZXNJLnBhdGhGb3IoZ19yZXMuaG9zdCwgZ19yZXMuc2NoZW1lKTtcblx0XHQvLyB9XG5cblx0XHQvLyBzdGF0aWMgZ2V0KHNfaG9zdDogc3RyaW5nLCBzX3NjaGVtZTogVGFnU2NoZW1lS2V5KTogUHJvbWlzZTxudWxsIHwgVGFnWydpbnRlcmZhY2UnXT4ge1xuXHRcdC8vIFx0cmV0dXJuIEVudGl0aWVzLm9wZW4oa3NfcmVzcyA9PiBrc19yZXNzLmdldChzX2hvc3QsIHNfc2NoZW1lKSk7XG5cdFx0Ly8gfVxuXG5cdFx0Ly8gZ2V0KHNfaG9zdDogc3RyaW5nLCBzX3NjaGVtZTogVGFnU2NoZW1lS2V5KTogVGFnWydpbnRlcmZhY2UnXSB8IG51bGwge1xuXHRcdC8vIFx0Ly8gcHJlcGFyZSByZXMgcGF0aFxuXHRcdC8vIFx0Y29uc3QgcF9yZXMgPSBFbnRpdGllc0kucGF0aEZvcihzX2hvc3QsIHNfc2NoZW1lKTtcblxuXHRcdC8vIFx0Ly8gZmV0Y2hcblx0XHQvLyBcdHJldHVybiB0aGlzLl93X2NhY2hlW3BfcmVzXSA/PyBudWxsO1xuXHRcdC8vIH1cblxuXG5cdFx0Ly8gYXN5bmMgcHV0KGdfcmVzOiBUYWdbJ2ludGVyZmFjZSddKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Ly8gXHQvLyBwcmVwYXJlIHJlcyBwYXRoXG5cdFx0Ly8gXHRjb25zdCBwX3JlcyA9IEVudGl0aWVzSS5wYXRoRm9yKGdfcmVzLmhvc3QsIGdfcmVzLnNjaGVtZSk7XG5cblx0XHQvLyBcdC8vIHVwZGF0ZSBjYWNoZVxuXHRcdC8vIFx0dGhpcy5fd19jYWNoZVtwX3Jlc10gPSBnX3JlcztcblxuXHRcdC8vIFx0Ly8gYXR0ZW1wdCB0byBzYXZlXG5cdFx0Ly8gXHRhd2FpdCB0aGlzLnNhdmUoKTtcblx0XHQvLyB9XG5cblx0XHRmaWx0ZXJlZE1hcDxcblx0XHRcdHdfb3V0IGV4dGVuZHMgYW55LFxuXHRcdFx0Z19zdWJ0eXBlIGV4dGVuZHMgRW50aXR5PUVudGl0eSxcblx0XHQ+KFxuXHRcdFx0Zl9tYXA6IChwX2VudGl0eTogRW50aXR5UGF0aCwgZ19lbnRpdHk6IEVudGl0eVRyZWUpID0+IHdfb3V0XG5cdFx0KTogUmVjb3JkPFJlc291cmNlLlBhdGg8Z19zdWJ0eXBlPiwgd19vdXQ+IHtcblx0XHRcdC8vIHJlZiBjYWNoZVxuXHRcdFx0Y29uc3QgaF9jYWNoZSA9IHRoaXMuX3dfY2FjaGU7XG5cblx0XHRcdC8vIHByZXAgb3V0XG5cdFx0XHRjb25zdCBoX291dCA9IHt9IGFzIFJlY29yZDxSZXNvdXJjZS5QYXRoPGdfc3VidHlwZT4sIHdfb3V0PjtcblxuXHRcdFx0Ly8gZWFjaCBlbnRpdGl5XG5cdFx0XHRmb3IoY29uc3QgcF9yZXMgaW4gaF9jYWNoZSkge1xuXHRcdFx0XHRjb25zdCB3X291dCA9IGZfbWFwKHBfcmVzIGFzIEVudGl0eVBhdGgsIGhfY2FjaGVbcF9yZXNdIGFzIEVudGl0eVRyZWUpO1xuXHRcdFx0XHRpZih3X291dCkge1xuXHRcdFx0XHRcdGhfb3V0W3BfcmVzXSA9IHdfb3V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBoX291dDtcblx0XHR9XG5cblxuXHRcdGV2ZXJ5KGZfZXZlcnk6IChwX2VudGl0eTogRW50aXR5UGF0aCwgZ19lbnRpdHk6IEVudGl0eVRyZWUpID0+IGJvb2xlYW4pOiBib29sZWFuIHtcblx0XHRcdC8vIHJlZiBjYWNoZVxuXHRcdFx0Y29uc3QgaF9jYWNoZSA9IHRoaXMuX3dfY2FjaGU7XG5cblx0XHRcdC8vIGVhY2ggZW50aXRpeVxuXHRcdFx0Zm9yKGNvbnN0IHBfcmVzIGluIGhfY2FjaGUpIHtcblx0XHRcdFx0Ly8gZmFpbGVkIHRlc3Q7IGJyZWFrXG5cdFx0XHRcdGlmKCFmX2V2ZXJ5KHBfcmVzIGFzIEVudGl0eVBhdGgsIGhfY2FjaGVbcF9yZXNdIGFzIEVudGl0eVRyZWUpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGFsbCBwYXNzZWRcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHRva2VucyhwX3ByZWZpeDogQ2hhaW5QYXRoLCBoX2ludGVyZmFjZXM6IFRva2VuSW50ZXJmYWNlTWFwfG51bGw9bnVsbCk6IFJlY29yZDxUb2tlblNwZWNLZXksIFRva2VuRGljdD4ge1xuXHRcdFx0Ly8gb3V0cHV0XG5cdFx0XHRjb25zdCBoX291dHMgPSB7fSBhcyBSZWNvcmQ8VG9rZW5TcGVjS2V5LCBUb2tlbkRpY3Q+O1xuXG5cdFx0XHQvLyBubyBpbnRlcmZhY2VzIHNwZWNpZmllZFxuXHRcdFx0dGhpcy5ldmVyeSgocF9yZXMsIGdfZW50aXR5KSA9PiB7XG5cdFx0XHRcdC8vIHByZXAgY29udHJhY3QgcmVmXG5cdFx0XHRcdGxldCBnX2NvbnRyYWN0OiBWYWx1ZXM8Q29udHJhY3RTdWJ0cmVlPjtcblxuXHRcdFx0XHQvLyBiZWxvbmdzIHRvIHRhcmdldCBjaGFpbiBhbmQgaXMgYSBjb250cmFjdFxuXHRcdFx0XHRpZihwX3Jlcy5zdGFydHNXaXRoKHBfcHJlZml4KSAmJiAoZ19jb250cmFjdD1nX2VudGl0eVsnYXMuY29udHJhY3QnXSkpIHtcblx0XHRcdFx0XHQvLyBlYWNoIGludGVyZmFjZSBpbiBjb250cmFjdFxuXHRcdFx0XHRcdGZvcihjb25zdCBzaV9pbnRlcmZhY2UgaW4gZ19jb250cmFjdCkge1xuXHRcdFx0XHRcdFx0Ly8gbm90IHRva2VuIGludGVyZmFjZTsgc2tpcFxuXHRcdFx0XHRcdFx0aWYoIXNpX2ludGVyZmFjZS5zdGFydHNXaXRoKCd0b2tlbi4nKSkgY29udGludWU7XG5cblx0XHRcdFx0XHRcdC8vIHRva2VuIGludGVyZmFjZSBpZFxuXHRcdFx0XHRcdFx0Y29uc3Qgc2lfaW50ZXJmYWNlX3Rva2VuID0gc2lfaW50ZXJmYWNlLnNsaWNlKCd0b2tlbi4nLmxlbmd0aCk7XG5cblx0XHRcdFx0XHRcdC8vIHRva2VuIGV4aXN0cyBpbiBtYXA7IGNvcHkgdG8gb3V0cHV0XG5cdFx0XHRcdFx0XHRpZighaF9pbnRlcmZhY2VzIHx8IHNpX2ludGVyZmFjZV90b2tlbiBpbiBoX2ludGVyZmFjZXMpIHtcblx0XHRcdFx0XHRcdFx0aF9vdXRzW3NpX2ludGVyZmFjZV90b2tlbl1bcF9yZXNdID0gZ19jb250cmFjdFtzaV9pbnRlcmZhY2VdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGNvbnRpbnVlXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIG91dHB1dFxuXHRcdFx0cmV0dXJuIGhfb3V0cztcblx0XHR9XG5cdH0sXG59KTtcblxuIiwiXG5pbXBvcnQge1xuXHRjcmVhdGVfc3RvcmVfY2xhc3MsXG5cdFdyaXRhYmxlU3RvcmVNYXAsXG59IGZyb20gJy4vX2Jhc2UnO1xuXG5pbXBvcnQgeyBTSV9TVE9SRV9RVUVSWV9DQUNIRSB9IGZyb20gJyMvc2hhcmUvY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHsgQ2hhaW5QYXRoLCBIb2xkaW5nUGF0aCB9IGZyb20gJyMvbWV0YS9jaGFpbic7XG5pbXBvcnQgdHlwZSB7IFRva2VuUGF0aCB9IGZyb20gJyMvbWV0YS90b2tlbic7XG5pbXBvcnQgdHlwZSB7IEpzb25PYmplY3QgfSBmcm9tICcjL3V0aWwvYmVsdCc7XG5cblxuZXhwb3J0IGNvbnN0IFF1ZXJ5Q2FjaGUgPSBjcmVhdGVfc3RvcmVfY2xhc3Moe1xuXHRzdG9yZTogU0lfU1RPUkVfUVVFUllfQ0FDSEUsXG5cdGV4dGVuc2lvbjogJ21hcCcsXG5cdGNsYXNzOiBjbGFzcyBRdWVyeUNhY2hlSSBleHRlbmRzIFdyaXRhYmxlU3RvcmVNYXA8dHlwZW9mIFNJX1NUT1JFX1FVRVJZX0NBQ0hFPiB7XG5cdFx0Ly8gc2F2ZSBhbiBlbnRyeVxuXHRcdGFzeW5jIHNldChwX3F1ZXJ5OiBIb2xkaW5nUGF0aCB8IFRva2VuUGF0aCwgZ19yZXN1bHQ6IEpzb25PYmplY3QpIHtcblx0XHRcdC8vIHVwZGF0ZSBjYWNoZVxuXHRcdFx0dGhpcy5fd19jYWNoZVtwX3F1ZXJ5XSA9IGdfcmVzdWx0O1xuXG5cdFx0XHQvLyBzYXZlXG5cdFx0XHRhd2FpdCB0aGlzLnNhdmUoKTtcblx0XHR9XG5cblx0fSxcbn0pO1xuIiwiIWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9dCgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSx0KTtlbHNle3ZhciByPXQoKTtmb3IodmFyIG4gaW4gcikoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0czplKVtuXT1yW25dfX0odGhpcywoZnVuY3Rpb24oKXtyZXR1cm4gZT17NDE4OmZ1bmN0aW9uKGUsdCl7IWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpZVtyXT10W3JdfSh0LGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIHIobil7aWYodFtuXSlyZXR1cm4gdFtuXS5leHBvcnRzO3ZhciBvPXRbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHIpLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIHIubT1lLHIuYz10LHIuaT1mdW5jdGlvbihlKXtyZXR1cm4gZX0sci5kPWZ1bmN0aW9uKGUsdCxuKXtyLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om59KX0sci5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiByLmQodCxcImFcIix0KSx0fSxyLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHIucD1cIlwiLHIoci5zPTEpfShbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMyksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt2b2lkIDA9PT1lJiYoZT17fSksdm9pZCAwPT09dCYmKHQ9e3NwbGl0VmFsdWVzOiExfSk7dmFyIHIsbz10aGlzO3RoaXMuaGVhZGVyc01hcD17fSxlJiYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhlYWRlcnMmJmUgaW5zdGFuY2VvZiBIZWFkZXJzP24uZ2V0SGVhZGVyS2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbihyKXtuLmdldEhlYWRlclZhbHVlcyhlLHIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3Quc3BsaXRWYWx1ZXM/by5hcHBlbmQocixuLnNwbGl0SGVhZGVyVmFsdWUoZSkpOm8uYXBwZW5kKHIsZSl9KSl9KSk6XCJvYmplY3RcIj09dHlwZW9mKHI9ZSkmJlwib2JqZWN0XCI9PXR5cGVvZiByLmhlYWRlcnNNYXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHIuZm9yRWFjaD9lLmZvckVhY2goKGZ1bmN0aW9uKGUsdCl7by5hcHBlbmQoZSx0KX0pKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwJiZlIGluc3RhbmNlb2YgTWFwP2UuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtvLmFwcGVuZCh0LGUpfSkpOlwic3RyaW5nXCI9PXR5cGVvZiBlP3RoaXMuYXBwZW5kRnJvbVN0cmluZyhlKTpcIm9iamVjdFwiPT10eXBlb2YgZSYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIHI9ZVt0XTtBcnJheS5pc0FycmF5KHIpP3IuZm9yRWFjaCgoZnVuY3Rpb24oZSl7by5hcHBlbmQodCxlKX0pKTpvLmFwcGVuZCh0LHIpfSkpKX1yZXR1cm4gZS5wcm90b3R5cGUuYXBwZW5kRnJvbVN0cmluZz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5zcGxpdChcIlxcclxcblwiKSxyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl0sbz1uLmluZGV4T2YoXCI6XCIpO2lmKG8+MCl7dmFyIHM9bi5zdWJzdHJpbmcoMCxvKS50cmltKCksaT1uLnN1YnN0cmluZyhvKzEpLnRyaW0oKTt0aGlzLmFwcGVuZChzLGkpfX19LGUucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbihlLHQpe3ZhciByPW4ubm9ybWFsaXplTmFtZShlKTtpZih2b2lkIDA9PT10KWRlbGV0ZSB0aGlzLmhlYWRlcnNNYXBbcl07ZWxzZXt2YXIgbz10aGlzLmhlYWRlcnNNYXBbcl07aWYobyl7dmFyIHM9by5pbmRleE9mKHQpO3M+PTAmJm8uc3BsaWNlKHMsMSksMD09PW8ubGVuZ3RoJiZkZWxldGUgdGhpcy5oZWFkZXJzTWFwW3JdfX19LGUucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsbz1uLm5vcm1hbGl6ZU5hbWUoZSk7QXJyYXkuaXNBcnJheSh0aGlzLmhlYWRlcnNNYXBbb10pfHwodGhpcy5oZWFkZXJzTWFwW29dPVtdKSxBcnJheS5pc0FycmF5KHQpP3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ci5oZWFkZXJzTWFwW29dLnB1c2gobi5ub3JtYWxpemVWYWx1ZShlKSl9KSk6dGhpcy5oZWFkZXJzTWFwW29dLnB1c2gobi5ub3JtYWxpemVWYWx1ZSh0KSl9LGUucHJvdG90eXBlLnNldD1mdW5jdGlvbihlLHQpe3ZhciByPW4ubm9ybWFsaXplTmFtZShlKTtpZihBcnJheS5pc0FycmF5KHQpKXt2YXIgbz1bXTt0LmZvckVhY2goKGZ1bmN0aW9uKGUpe28ucHVzaChuLm5vcm1hbGl6ZVZhbHVlKGUpKX0pKSx0aGlzLmhlYWRlcnNNYXBbcl09b31lbHNlIHRoaXMuaGVhZGVyc01hcFtyXT1bbi5ub3JtYWxpemVWYWx1ZSh0KV19LGUucHJvdG90eXBlLmhhcz1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMuaGVhZGVyc01hcFtuLm5vcm1hbGl6ZU5hbWUoZSldO2lmKCFBcnJheS5pc0FycmF5KHIpKXJldHVybiExO2lmKHZvaWQgMCE9PXQpe3ZhciBvPW4ubm9ybWFsaXplVmFsdWUodCk7cmV0dXJuIHIuaW5kZXhPZihvKT49MH1yZXR1cm4hMH0sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuaGVhZGVyc01hcFtuLm5vcm1hbGl6ZU5hbWUoZSldO3JldHVybiB2b2lkIDAhPT10P3QuY29uY2F0KCk6W119LGUucHJvdG90eXBlLmZvckVhY2g9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLmhlYWRlcnNNYXApLmZvckVhY2goKGZ1bmN0aW9uKHIpe2Uocix0LmhlYWRlcnNNYXBbcl0pfSksdGhpcyl9LGUucHJvdG90eXBlLnRvSGVhZGVycz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBIZWFkZXJzKXt2YXIgZT1uZXcgSGVhZGVycztyZXR1cm4gdGhpcy5mb3JFYWNoKChmdW5jdGlvbih0LHIpe3IuZm9yRWFjaCgoZnVuY3Rpb24ocil7ZS5hcHBlbmQodCxyKX0pKX0pKSxlfXRocm93IG5ldyBFcnJvcihcIkhlYWRlcnMgY2xhc3MgaXMgbm90IGRlZmluZWRcIil9LGV9KCk7dC5Ccm93c2VySGVhZGVycz1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigwKTt0LkJyb3dzZXJIZWFkZXJzPW4uQnJvd3NlckhlYWRlcnN9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lml0ZXJhdGVIZWFkZXJzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPWVbU3ltYm9sLml0ZXJhdG9yXSgpLG49ci5uZXh0KCk7IW4uZG9uZTspdChuLnZhbHVlWzBdKSxuPXIubmV4dCgpfSx0Lml0ZXJhdGVIZWFkZXJzS2V5cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1lLmtleXMoKSxuPXIubmV4dCgpOyFuLmRvbmU7KXQobi52YWx1ZSksbj1yLm5leHQoKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDIpO3Qubm9ybWFsaXplTmFtZT1mdW5jdGlvbihlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSYmKGU9U3RyaW5nKGUpKSwvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWVcIik7cmV0dXJuIGUudG9Mb3dlckNhc2UoKX0sdC5ub3JtYWxpemVWYWx1ZT1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZSYmKGU9U3RyaW5nKGUpKSxlfSx0LmdldEhlYWRlclZhbHVlcz1mdW5jdGlvbihlLHQpe3ZhciByPWU7aWYociBpbnN0YW5jZW9mIEhlYWRlcnMmJnIuZ2V0QWxsKXJldHVybiByLmdldEFsbCh0KTt2YXIgbj1yLmdldCh0KTtyZXR1cm4gbiYmXCJzdHJpbmdcIj09dHlwZW9mIG4/W25dOm59LHQuZ2V0SGVhZGVyS2V5cz1mdW5jdGlvbihlKXt2YXIgdD1lLHI9e30sbz1bXTtyZXR1cm4gdC5rZXlzP24uaXRlcmF0ZUhlYWRlcnNLZXlzKHQsKGZ1bmN0aW9uKGUpe3JbZV18fChyW2VdPSEwLG8ucHVzaChlKSl9KSk6dC5mb3JFYWNoP3QuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtyW3RdfHwoclt0XT0hMCxvLnB1c2godCkpfSkpOm4uaXRlcmF0ZUhlYWRlcnModCwoZnVuY3Rpb24oZSl7dmFyIHQ9ZVswXTtyW3RdfHwoclt0XT0hMCxvLnB1c2godCkpfSkpLG99LHQuc3BsaXRIZWFkZXJWYWx1ZT1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gZS5zcGxpdChcIiwgXCIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2Uuc3BsaXQoXCIsXCIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QucHVzaChlKX0pKX0pKSx0fX1dKSl9LDYxNzpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5DaHVua1BhcnNlcj10LkNodW5rVHlwZT10LmVuY29kZUFTQ0lJPXQuZGVjb2RlQVNDSUk9dm9pZCAwO3ZhciBuLG89cig2NSk7ZnVuY3Rpb24gcyhlKXtyZXR1cm4gOT09PSh0PWUpfHwxMD09PXR8fDEzPT09dHx8ZT49MzImJmU8PTEyNjt2YXIgdH1mdW5jdGlvbiBpKGUpe2Zvcih2YXIgdD0wO3QhPT1lLmxlbmd0aDsrK3QpaWYoIXMoZVt0XSkpdGhyb3cgbmV3IEVycm9yKFwiTWV0YWRhdGEgaXMgbm90IHZhbGlkIChwcmludGFibGUpIEFTQ0lJXCIpO3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlKSl9ZnVuY3Rpb24gYShlKXtyZXR1cm4gMTI4PT0oMTI4JmUuZ2V0VWludDgoMCkpfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIGUuZ2V0VWludDMyKDEsITEpfWZ1bmN0aW9uIGQoZSx0LHIpe3JldHVybiBlLmJ5dGVMZW5ndGgtdD49cn1mdW5jdGlvbiBjKGUsdCxyKXtpZihlLnNsaWNlKXJldHVybiBlLnNsaWNlKHQscik7dmFyIG49ZS5sZW5ndGg7dm9pZCAwIT09ciYmKG49cik7Zm9yKHZhciBvPW5ldyBVaW50OEFycmF5KG4tdCkscz0wLGk9dDtpPG47aSsrKW9bcysrXT1lW2ldO3JldHVybiBvfXQuZGVjb2RlQVNDSUk9aSx0LmVuY29kZUFTQ0lJPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgVWludDhBcnJheShlLmxlbmd0aCkscj0wO3IhPT1lLmxlbmd0aDsrK3Ipe3ZhciBuPWUuY2hhckNvZGVBdChyKTtpZighcyhuKSl0aHJvdyBuZXcgRXJyb3IoXCJNZXRhZGF0YSBjb250YWlucyBpbnZhbGlkIEFTQ0lJXCIpO3Rbcl09bn1yZXR1cm4gdH0sZnVuY3Rpb24oZSl7ZVtlLk1FU1NBR0U9MV09XCJNRVNTQUdFXCIsZVtlLlRSQUlMRVJTPTJdPVwiVFJBSUxFUlNcIn0obj10LkNodW5rVHlwZXx8KHQuQ2h1bmtUeXBlPXt9KSk7dmFyIHA9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dGhpcy5idWZmZXI9bnVsbCx0aGlzLnBvc2l0aW9uPTB9cmV0dXJuIGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUsdCl7aWYoMD09PWUubGVuZ3RoJiZ0KXJldHVybltdO3ZhciByLHM9W107aWYobnVsbD09dGhpcy5idWZmZXIpdGhpcy5idWZmZXI9ZSx0aGlzLnBvc2l0aW9uPTA7ZWxzZSBpZih0aGlzLnBvc2l0aW9uPT09dGhpcy5idWZmZXIuYnl0ZUxlbmd0aCl0aGlzLmJ1ZmZlcj1lLHRoaXMucG9zaXRpb249MDtlbHNle3ZhciBwPXRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgtdGhpcy5wb3NpdGlvbixoPW5ldyBVaW50OEFycmF5KHArZS5ieXRlTGVuZ3RoKSxmPWModGhpcy5idWZmZXIsdGhpcy5wb3NpdGlvbik7aC5zZXQoZiwwKTt2YXIgbD1uZXcgVWludDhBcnJheShlKTtoLnNldChsLHApLHRoaXMuYnVmZmVyPWgsdGhpcy5wb3NpdGlvbj0wfWZvcig7Oyl7aWYoIWQodGhpcy5idWZmZXIsdGhpcy5wb3NpdGlvbiw1KSlyZXR1cm4gczt2YXIgZz1jKHRoaXMuYnVmZmVyLHRoaXMucG9zaXRpb24sdGhpcy5wb3NpdGlvbis1KSxiPW5ldyBEYXRhVmlldyhnLmJ1ZmZlcixnLmJ5dGVPZmZzZXQsZy5ieXRlTGVuZ3RoKSx5PXUoYik7aWYoIWQodGhpcy5idWZmZXIsdGhpcy5wb3NpdGlvbiw1K3kpKXJldHVybiBzO3ZhciB2PWModGhpcy5idWZmZXIsdGhpcy5wb3NpdGlvbis1LHRoaXMucG9zaXRpb24rNSt5KTtpZih0aGlzLnBvc2l0aW9uKz01K3ksYShiKSlyZXR1cm4gcy5wdXNoKHtjaHVua1R5cGU6bi5UUkFJTEVSUyx0cmFpbGVyczoocj12LG5ldyBvLk1ldGFkYXRhKGkocikpKX0pLHM7cy5wdXNoKHtjaHVua1R5cGU6bi5NRVNTQUdFLGRhdGE6dn0pfX0sZX0oKTt0LkNodW5rUGFyc2VyPXB9LDg6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgcjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lmh0dHBTdGF0dXNUb0NvZGU9dC5Db2RlPXZvaWQgMCxmdW5jdGlvbihlKXtlW2UuT0s9MF09XCJPS1wiLGVbZS5DYW5jZWxlZD0xXT1cIkNhbmNlbGVkXCIsZVtlLlVua25vd249Ml09XCJVbmtub3duXCIsZVtlLkludmFsaWRBcmd1bWVudD0zXT1cIkludmFsaWRBcmd1bWVudFwiLGVbZS5EZWFkbGluZUV4Y2VlZGVkPTRdPVwiRGVhZGxpbmVFeGNlZWRlZFwiLGVbZS5Ob3RGb3VuZD01XT1cIk5vdEZvdW5kXCIsZVtlLkFscmVhZHlFeGlzdHM9Nl09XCJBbHJlYWR5RXhpc3RzXCIsZVtlLlBlcm1pc3Npb25EZW5pZWQ9N109XCJQZXJtaXNzaW9uRGVuaWVkXCIsZVtlLlJlc291cmNlRXhoYXVzdGVkPThdPVwiUmVzb3VyY2VFeGhhdXN0ZWRcIixlW2UuRmFpbGVkUHJlY29uZGl0aW9uPTldPVwiRmFpbGVkUHJlY29uZGl0aW9uXCIsZVtlLkFib3J0ZWQ9MTBdPVwiQWJvcnRlZFwiLGVbZS5PdXRPZlJhbmdlPTExXT1cIk91dE9mUmFuZ2VcIixlW2UuVW5pbXBsZW1lbnRlZD0xMl09XCJVbmltcGxlbWVudGVkXCIsZVtlLkludGVybmFsPTEzXT1cIkludGVybmFsXCIsZVtlLlVuYXZhaWxhYmxlPTE0XT1cIlVuYXZhaWxhYmxlXCIsZVtlLkRhdGFMb3NzPTE1XT1cIkRhdGFMb3NzXCIsZVtlLlVuYXV0aGVudGljYXRlZD0xNl09XCJVbmF1dGhlbnRpY2F0ZWRcIn0ocj10LkNvZGV8fCh0LkNvZGU9e30pKSx0Lmh0dHBTdGF0dXNUb0NvZGU9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2UgMDpyZXR1cm4gci5JbnRlcm5hbDtjYXNlIDIwMDpyZXR1cm4gci5PSztjYXNlIDQwMDpyZXR1cm4gci5JbnZhbGlkQXJndW1lbnQ7Y2FzZSA0MDE6cmV0dXJuIHIuVW5hdXRoZW50aWNhdGVkO2Nhc2UgNDAzOnJldHVybiByLlBlcm1pc3Npb25EZW5pZWQ7Y2FzZSA0MDQ6cmV0dXJuIHIuTm90Rm91bmQ7Y2FzZSA0MDk6cmV0dXJuIHIuQWJvcnRlZDtjYXNlIDQxMjpyZXR1cm4gci5GYWlsZWRQcmVjb25kaXRpb247Y2FzZSA0Mjk6cmV0dXJuIHIuUmVzb3VyY2VFeGhhdXN0ZWQ7Y2FzZSA0OTk6cmV0dXJuIHIuQ2FuY2VsZWQ7Y2FzZSA1MDA6cmV0dXJuIHIuVW5rbm93bjtjYXNlIDUwMTpyZXR1cm4gci5VbmltcGxlbWVudGVkO2Nhc2UgNTAzOnJldHVybiByLlVuYXZhaWxhYmxlO2Nhc2UgNTA0OnJldHVybiByLkRlYWRsaW5lRXhjZWVkZWQ7ZGVmYXVsdDpyZXR1cm4gci5Vbmtub3dufX19LDkzNDpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5jbGllbnQ9dm9pZCAwO3ZhciBuPXIoNjUpLG89cig2MTcpLHM9cig4KSxpPXIoMzQ2KSxhPXIoNTcpLHU9cig4ODIpO3QuY2xpZW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBkKGUsdCl9O3ZhciBkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMuc3RhcnRlZD0hMSx0aGlzLnNlbnRGaXJzdE1lc3NhZ2U9ITEsdGhpcy5jb21wbGV0ZWQ9ITEsdGhpcy5jbG9zZWQ9ITEsdGhpcy5maW5pc2hlZFNlbmRpbmc9ITEsdGhpcy5vbkhlYWRlcnNDYWxsYmFja3M9W10sdGhpcy5vbk1lc3NhZ2VDYWxsYmFja3M9W10sdGhpcy5vbkVuZENhbGxiYWNrcz1bXSx0aGlzLnBhcnNlcj1uZXcgby5DaHVua1BhcnNlcix0aGlzLm1ldGhvZERlZmluaXRpb249ZSx0aGlzLnByb3BzPXQsdGhpcy5jcmVhdGVUcmFuc3BvcnQoKX1yZXR1cm4gZS5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wcm9wcy5ob3N0K1wiL1wiK3RoaXMubWV0aG9kRGVmaW5pdGlvbi5zZXJ2aWNlLnNlcnZpY2VOYW1lK1wiL1wiK3RoaXMubWV0aG9kRGVmaW5pdGlvbi5tZXRob2ROYW1lLHQ9e21ldGhvZERlZmluaXRpb246dGhpcy5tZXRob2REZWZpbml0aW9uLGRlYnVnOnRoaXMucHJvcHMuZGVidWd8fCExLHVybDplLG9uSGVhZGVyczp0aGlzLm9uVHJhbnNwb3J0SGVhZGVycy5iaW5kKHRoaXMpLG9uQ2h1bms6dGhpcy5vblRyYW5zcG9ydENodW5rLmJpbmQodGhpcyksb25FbmQ6dGhpcy5vblRyYW5zcG9ydEVuZC5iaW5kKHRoaXMpfTt0aGlzLnByb3BzLnRyYW5zcG9ydD90aGlzLnRyYW5zcG9ydD10aGlzLnByb3BzLnRyYW5zcG9ydCh0KTp0aGlzLnRyYW5zcG9ydD1hLm1ha2VEZWZhdWx0VHJhbnNwb3J0KHQpfSxlLnByb3RvdHlwZS5vblRyYW5zcG9ydEhlYWRlcnM9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwib25IZWFkZXJzXCIsZSx0KSx0aGlzLmNsb3NlZCl0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwiZ3JwYy5vbkhlYWRlcnMgcmVjZWl2ZWQgYWZ0ZXIgcmVxdWVzdCB3YXMgY2xvc2VkIC0gaWdub3JpbmdcIik7ZWxzZSBpZigwPT09dCk7ZWxzZXt0aGlzLnJlc3BvbnNlSGVhZGVycz1lLHRoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJvbkhlYWRlcnMucmVzcG9uc2VIZWFkZXJzXCIsSlNPTi5zdHJpbmdpZnkodGhpcy5yZXNwb25zZUhlYWRlcnMsbnVsbCwyKSk7dmFyIHI9YyhlKTt0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwib25IZWFkZXJzLmdSUENTdGF0dXNcIixyKTt2YXIgbj1yJiZyPj0wP3I6cy5odHRwU3RhdHVzVG9Db2RlKHQpO3RoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJvbkhlYWRlcnMuY29kZVwiLG4pO3ZhciBvPWUuZ2V0KFwiZ3JwYy1tZXNzYWdlXCIpfHxbXTtpZih0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwib25IZWFkZXJzLmdSUENNZXNzYWdlXCIsbyksdGhpcy5yYXdPbkhlYWRlcnMoZSksbiE9PXMuQ29kZS5PSyl7dmFyIGE9dGhpcy5kZWNvZGVHUlBDU3RhdHVzKG9bMF0pO3RoaXMucmF3T25FcnJvcihuLGEsZSl9fX0sZS5wcm90b3R5cGUub25UcmFuc3BvcnRDaHVuaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKHRoaXMuY2xvc2VkKXRoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJncnBjLm9uQ2h1bmsgcmVjZWl2ZWQgYWZ0ZXIgcmVxdWVzdCB3YXMgY2xvc2VkIC0gaWdub3JpbmdcIik7ZWxzZXt2YXIgcj1bXTt0cnl7cj10aGlzLnBhcnNlci5wYXJzZShlKX1jYXRjaChlKXtyZXR1cm4gdGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcIm9uQ2h1bmsucGFyc2luZyBlcnJvclwiLGUsZS5tZXNzYWdlKSx2b2lkIHRoaXMucmF3T25FcnJvcihzLkNvZGUuSW50ZXJuYWwsXCJwYXJzaW5nIGVycm9yOiBcIitlLm1lc3NhZ2UpfXIuZm9yRWFjaCgoZnVuY3Rpb24oZSl7aWYoZS5jaHVua1R5cGU9PT1vLkNodW5rVHlwZS5NRVNTQUdFKXt2YXIgcj10Lm1ldGhvZERlZmluaXRpb24ucmVzcG9uc2VUeXBlLmRlc2VyaWFsaXplQmluYXJ5KGUuZGF0YSk7dC5yYXdPbk1lc3NhZ2Uocil9ZWxzZSBlLmNodW5rVHlwZT09PW8uQ2h1bmtUeXBlLlRSQUlMRVJTJiYodC5yZXNwb25zZUhlYWRlcnM/KHQucmVzcG9uc2VUcmFpbGVycz1uZXcgbi5NZXRhZGF0YShlLnRyYWlsZXJzKSx0LnByb3BzLmRlYnVnJiZpLmRlYnVnKFwib25DaHVuay50cmFpbGVyc1wiLHQucmVzcG9uc2VUcmFpbGVycykpOih0LnJlc3BvbnNlSGVhZGVycz1uZXcgbi5NZXRhZGF0YShlLnRyYWlsZXJzKSx0LnJhd09uSGVhZGVycyh0LnJlc3BvbnNlSGVhZGVycykpKX0pKX19LGUucHJvdG90eXBlLm9uVHJhbnNwb3J0RW5kPWZ1bmN0aW9uKCl7aWYodGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcImdycGMub25FbmRcIiksdGhpcy5jbG9zZWQpdGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcImdycGMub25FbmQgcmVjZWl2ZWQgYWZ0ZXIgcmVxdWVzdCB3YXMgY2xvc2VkIC0gaWdub3JpbmdcIik7ZWxzZSBpZih2b2lkIDAhPT10aGlzLnJlc3BvbnNlVHJhaWxlcnMpe3ZhciBlPWModGhpcy5yZXNwb25zZVRyYWlsZXJzKTtpZihudWxsIT09ZSl7dmFyIHQ9dGhpcy5yZXNwb25zZVRyYWlsZXJzLmdldChcImdycGMtbWVzc2FnZVwiKSxyPXRoaXMuZGVjb2RlR1JQQ1N0YXR1cyh0WzBdKTt0aGlzLnJhd09uRW5kKGUscix0aGlzLnJlc3BvbnNlVHJhaWxlcnMpfWVsc2UgdGhpcy5yYXdPbkVycm9yKHMuQ29kZS5JbnRlcm5hbCxcIlJlc3BvbnNlIGNsb3NlZCB3aXRob3V0IGdycGMtc3RhdHVzIChUcmFpbGVycyBwcm92aWRlZClcIil9ZWxzZXtpZih2b2lkIDA9PT10aGlzLnJlc3BvbnNlSGVhZGVycylyZXR1cm4gdm9pZCB0aGlzLnJhd09uRXJyb3Iocy5Db2RlLlVua25vd24sXCJSZXNwb25zZSBjbG9zZWQgd2l0aG91dCBoZWFkZXJzXCIpO3ZhciBuPWModGhpcy5yZXNwb25zZUhlYWRlcnMpLG89dGhpcy5yZXNwb25zZUhlYWRlcnMuZ2V0KFwiZ3JwYy1tZXNzYWdlXCIpO2lmKHRoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJncnBjLmhlYWRlcnMgb25seSByZXNwb25zZSBcIixuLG8pLG51bGw9PT1uKXJldHVybiB2b2lkIHRoaXMucmF3T25FbmQocy5Db2RlLlVua25vd24sXCJSZXNwb25zZSBjbG9zZWQgd2l0aG91dCBncnBjLXN0YXR1cyAoSGVhZGVycyBvbmx5KVwiLHRoaXMucmVzcG9uc2VIZWFkZXJzKTt2YXIgYT10aGlzLmRlY29kZUdSUENTdGF0dXMob1swXSk7dGhpcy5yYXdPbkVuZChuLGEsdGhpcy5yZXNwb25zZUhlYWRlcnMpfX0sZS5wcm90b3R5cGUuZGVjb2RlR1JQQ1N0YXR1cz1mdW5jdGlvbihlKXtpZighZSlyZXR1cm5cIlwiO3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGUpfWNhdGNoKHQpe3JldHVybiBlfX0sZS5wcm90b3R5cGUucmF3T25FbmQ9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXM7dGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcInJhd09uRW5kXCIsZSx0LHIpLHRoaXMuY29tcGxldGVkfHwodGhpcy5jb21wbGV0ZWQ9ITAsdGhpcy5vbkVuZENhbGxiYWNrcy5mb3JFYWNoKChmdW5jdGlvbihvKXtpZighbi5jbG9zZWQpdHJ5e28oZSx0LHIpfWNhdGNoKGUpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dGhyb3cgZX0pLDApfX0pKSl9LGUucHJvdG90eXBlLnJhd09uSGVhZGVycz1mdW5jdGlvbihlKXt0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwicmF3T25IZWFkZXJzXCIsZSksdGhpcy5jb21wbGV0ZWR8fHRoaXMub25IZWFkZXJzQ2FsbGJhY2tzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3RyeXt0KGUpfWNhdGNoKGUpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dGhyb3cgZX0pLDApfX0pKX0sZS5wcm90b3R5cGUucmF3T25FcnJvcj1mdW5jdGlvbihlLHQscil7dmFyIG89dGhpczt2b2lkIDA9PT1yJiYocj1uZXcgbi5NZXRhZGF0YSksdGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcInJhd09uRXJyb3JcIixlLHQpLHRoaXMuY29tcGxldGVkfHwodGhpcy5jb21wbGV0ZWQ9ITAsdGhpcy5vbkVuZENhbGxiYWNrcy5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighby5jbG9zZWQpdHJ5e24oZSx0LHIpfWNhdGNoKGUpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dGhyb3cgZX0pLDApfX0pKSl9LGUucHJvdG90eXBlLnJhd09uTWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJyYXdPbk1lc3NhZ2VcIixlLnRvT2JqZWN0KCkpLHRoaXMuY29tcGxldGVkfHx0aGlzLmNsb3NlZHx8dGhpcy5vbk1lc3NhZ2VDYWxsYmFja3MuZm9yRWFjaCgoZnVuY3Rpb24ocil7aWYoIXQuY2xvc2VkKXRyeXtyKGUpfWNhdGNoKGUpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dGhyb3cgZX0pLDApfX0pKX0sZS5wcm90b3R5cGUub25IZWFkZXJzPWZ1bmN0aW9uKGUpe3RoaXMub25IZWFkZXJzQ2FsbGJhY2tzLnB1c2goZSl9LGUucHJvdG90eXBlLm9uTWVzc2FnZT1mdW5jdGlvbihlKXt0aGlzLm9uTWVzc2FnZUNhbGxiYWNrcy5wdXNoKGUpfSxlLnByb3RvdHlwZS5vbkVuZD1mdW5jdGlvbihlKXt0aGlzLm9uRW5kQ2FsbGJhY2tzLnB1c2goZSl9LGUucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKGUpe2lmKHRoaXMuc3RhcnRlZCl0aHJvdyBuZXcgRXJyb3IoXCJDbGllbnQgYWxyZWFkeSBzdGFydGVkIC0gY2Fubm90IC5zdGFydCgpXCIpO3RoaXMuc3RhcnRlZD0hMDt2YXIgdD1uZXcgbi5NZXRhZGF0YShlfHx7fSk7dC5zZXQoXCJjb250ZW50LXR5cGVcIixcImFwcGxpY2F0aW9uL2dycGMtd2ViK3Byb3RvXCIpLHQuc2V0KFwieC1ncnBjLXdlYlwiLFwiMVwiKSx0aGlzLnRyYW5zcG9ydC5zdGFydCh0KX0sZS5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbihlKXtpZighdGhpcy5zdGFydGVkKXRocm93IG5ldyBFcnJvcihcIkNsaWVudCBub3Qgc3RhcnRlZCAtIC5zdGFydCgpIG11c3QgYmUgY2FsbGVkIGJlZm9yZSAuc2VuZCgpXCIpO2lmKHRoaXMuY2xvc2VkKXRocm93IG5ldyBFcnJvcihcIkNsaWVudCBhbHJlYWR5IGNsb3NlZCAtIGNhbm5vdCAuc2VuZCgpXCIpO2lmKHRoaXMuZmluaXNoZWRTZW5kaW5nKXRocm93IG5ldyBFcnJvcihcIkNsaWVudCBhbHJlYWR5IGZpbmlzaGVkIHNlbmRpbmcgLSBjYW5ub3QgLnNlbmQoKVwiKTtpZighdGhpcy5tZXRob2REZWZpbml0aW9uLnJlcXVlc3RTdHJlYW0mJnRoaXMuc2VudEZpcnN0TWVzc2FnZSl0aHJvdyBuZXcgRXJyb3IoXCJNZXNzYWdlIGFscmVhZHkgc2VudCBmb3Igbm9uLWNsaWVudC1zdHJlYW1pbmcgbWV0aG9kIC0gY2Fubm90IC5zZW5kKClcIik7dGhpcy5zZW50Rmlyc3RNZXNzYWdlPSEwO3ZhciB0PXUuZnJhbWVSZXF1ZXN0KGUpO3RoaXMudHJhbnNwb3J0LnNlbmRNZXNzYWdlKHQpfSxlLnByb3RvdHlwZS5maW5pc2hTZW5kPWZ1bmN0aW9uKCl7aWYoIXRoaXMuc3RhcnRlZCl0aHJvdyBuZXcgRXJyb3IoXCJDbGllbnQgbm90IHN0YXJ0ZWQgLSAuZmluaXNoU2VuZCgpIG11c3QgYmUgY2FsbGVkIGJlZm9yZSAuY2xvc2UoKVwiKTtpZih0aGlzLmNsb3NlZCl0aHJvdyBuZXcgRXJyb3IoXCJDbGllbnQgYWxyZWFkeSBjbG9zZWQgLSBjYW5ub3QgLnNlbmQoKVwiKTtpZih0aGlzLmZpbmlzaGVkU2VuZGluZyl0aHJvdyBuZXcgRXJyb3IoXCJDbGllbnQgYWxyZWFkeSBmaW5pc2hlZCBzZW5kaW5nIC0gY2Fubm90IC5maW5pc2hTZW5kKClcIik7dGhpcy5maW5pc2hlZFNlbmRpbmc9ITAsdGhpcy50cmFuc3BvcnQuZmluaXNoU2VuZCgpfSxlLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpe2lmKCF0aGlzLnN0YXJ0ZWQpdGhyb3cgbmV3IEVycm9yKFwiQ2xpZW50IG5vdCBzdGFydGVkIC0gLnN0YXJ0KCkgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIC5jbG9zZSgpXCIpO2lmKHRoaXMuY2xvc2VkKXRocm93IG5ldyBFcnJvcihcIkNsaWVudCBhbHJlYWR5IGNsb3NlZCAtIGNhbm5vdCAuY2xvc2UoKVwiKTt0aGlzLmNsb3NlZD0hMCx0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwicmVxdWVzdC5hYm9ydCBhYm9ydGluZyByZXF1ZXN0XCIpLHRoaXMudHJhbnNwb3J0LmNhbmNlbCgpfSxlfSgpO2Z1bmN0aW9uIGMoZSl7dmFyIHQ9ZS5nZXQoXCJncnBjLXN0YXR1c1wiKXx8W107aWYodC5sZW5ndGg+MCl0cnl7dmFyIHI9dFswXTtyZXR1cm4gcGFyc2VJbnQociwxMCl9Y2F0Y2goZSl7cmV0dXJuIG51bGx9cmV0dXJuIG51bGx9fSwzNDY6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlYnVnPXZvaWQgMCx0LmRlYnVnPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO2NvbnNvbGUuZGVidWc/Y29uc29sZS5kZWJ1Zy5hcHBseShudWxsLGUpOmNvbnNvbGUubG9nLmFwcGx5KG51bGwsZSl9fSw2MDc6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZ3JwYz12b2lkIDA7dmFyIG4sbz1yKDQxOCkscz1yKDU3KSxpPXIoMjI5KSxhPXIoNTQwKSx1PXIoMjEwKSxkPXIoODU5KSxjPXIoOCkscD1yKDkzOCksaD1yKDM1KSxmPXIoOTM0KTsobj10LmdycGN8fCh0LmdycGM9e30pKS5zZXREZWZhdWx0VHJhbnNwb3J0PXMuc2V0RGVmYXVsdFRyYW5zcG9ydEZhY3Rvcnksbi5Dcm9zc0Jyb3dzZXJIdHRwVHJhbnNwb3J0PWQuQ3Jvc3NCcm93c2VySHR0cFRyYW5zcG9ydCxuLkZldGNoUmVhZGFibGVTdHJlYW1UcmFuc3BvcnQ9aS5GZXRjaFJlYWRhYmxlU3RyZWFtVHJhbnNwb3J0LG4uWGhyVHJhbnNwb3J0PXUuWGhyVHJhbnNwb3J0LG4uV2Vic29ja2V0VHJhbnNwb3J0PWEuV2Vic29ja2V0VHJhbnNwb3J0LG4uQ29kZT1jLkNvZGUsbi5NZXRhZGF0YT1vLkJyb3dzZXJIZWFkZXJzLG4uY2xpZW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGYuY2xpZW50KGUsdCl9LG4uaW52b2tlPXAuaW52b2tlLG4udW5hcnk9aC51bmFyeX0sOTM4OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lmludm9rZT12b2lkIDA7dmFyIG49cig5MzQpO3QuaW52b2tlPWZ1bmN0aW9uKGUsdCl7aWYoZS5yZXF1ZXN0U3RyZWFtKXRocm93IG5ldyBFcnJvcihcIi5pbnZva2UgY2Fubm90IGJlIHVzZWQgd2l0aCBjbGllbnQtc3RyZWFtaW5nIG1ldGhvZHMuIFVzZSAuY2xpZW50IGluc3RlYWQuXCIpO3ZhciByPW4uY2xpZW50KGUse2hvc3Q6dC5ob3N0LHRyYW5zcG9ydDp0LnRyYW5zcG9ydCxkZWJ1Zzp0LmRlYnVnfSk7cmV0dXJuIHQub25IZWFkZXJzJiZyLm9uSGVhZGVycyh0Lm9uSGVhZGVycyksdC5vbk1lc3NhZ2UmJnIub25NZXNzYWdlKHQub25NZXNzYWdlKSx0Lm9uRW5kJiZyLm9uRW5kKHQub25FbmQpLHIuc3RhcnQodC5tZXRhZGF0YSksci5zZW5kKHQucmVxdWVzdCksci5maW5pc2hTZW5kKCkse2Nsb3NlOmZ1bmN0aW9uKCl7ci5jbG9zZSgpfX19fSw2NTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5NZXRhZGF0YT12b2lkIDA7dmFyIG49cig0MTgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiTWV0YWRhdGFcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5Ccm93c2VySGVhZGVyc319KX0sNTc6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQubWFrZURlZmF1bHRUcmFuc3BvcnQ9dC5zZXREZWZhdWx0VHJhbnNwb3J0RmFjdG9yeT12b2lkIDA7dmFyIG49cig4NTkpLG89ZnVuY3Rpb24oZSl7cmV0dXJuIG4uQ3Jvc3NCcm93c2VySHR0cFRyYW5zcG9ydCh7d2l0aENyZWRlbnRpYWxzOiExfSkoZSl9O3Quc2V0RGVmYXVsdFRyYW5zcG9ydEZhY3Rvcnk9ZnVuY3Rpb24oZSl7bz1lfSx0Lm1ha2VEZWZhdWx0VHJhbnNwb3J0PWZ1bmN0aW9uKGUpe3JldHVybiBvKGUpfX0sMjI5OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fYXNzaWdufHxmdW5jdGlvbigpe3JldHVybihuPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPTEsbj1hcmd1bWVudHMubGVuZ3RoO3I8bjtyKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW3JdKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZXRlY3RGZXRjaFN1cHBvcnQ9dC5GZXRjaFJlYWRhYmxlU3RyZWFtVHJhbnNwb3J0PXZvaWQgMDt2YXIgbz1yKDY1KSxzPXIoMzQ2KTt0LkZldGNoUmVhZGFibGVTdHJlYW1UcmFuc3BvcnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBlLmRlYnVnJiZzLmRlYnVnKFwiZmV0Y2hSZXF1ZXN0XCIsZSksbmV3IGkoZSx0KX0odCxlKX19O3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMuY2FuY2VsbGVkPSExLHRoaXMuY29udHJvbGxlcj1zZWxmLkFib3J0Q29udHJvbGxlciYmbmV3IEFib3J0Q29udHJvbGxlcix0aGlzLm9wdGlvbnM9ZSx0aGlzLmluaXQ9dH1yZXR1cm4gZS5wcm90b3R5cGUucHVtcD1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7aWYodGhpcy5yZWFkZXI9ZSx0aGlzLmNhbmNlbGxlZClyZXR1cm4gdGhpcy5vcHRpb25zLmRlYnVnJiZzLmRlYnVnKFwiRmV0Y2gucHVtcC5jYW5jZWwgYXQgZmlyc3QgcHVtcFwiKSx2b2lkIHRoaXMucmVhZGVyLmNhbmNlbCgpLmNhdGNoKChmdW5jdGlvbihlKXtyLm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5wdW1wLnJlYWRlci5jYW5jZWwgZXhjZXB0aW9uXCIsZSl9KSk7dGhpcy5yZWFkZXIucmVhZCgpLnRoZW4oKGZ1bmN0aW9uKGUpe2lmKGUuZG9uZSlyZXR1cm4gci5vcHRpb25zLm9uRW5kKCksdDtyLm9wdGlvbnMub25DaHVuayhlLnZhbHVlKSxyLnB1bXAoci5yZWFkZXIsdCl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3IuY2FuY2VsbGVkP3Iub3B0aW9ucy5kZWJ1ZyYmcy5kZWJ1ZyhcIkZldGNoLmNhdGNoIC0gcmVxdWVzdCBjYW5jZWxsZWRcIik6KHIuY2FuY2VsbGVkPSEwLHIub3B0aW9ucy5kZWJ1ZyYmcy5kZWJ1ZyhcIkZldGNoLmNhdGNoXCIsZS5tZXNzYWdlKSxyLm9wdGlvbnMub25FbmQoZSkpfSkpfSxlLnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZmV0Y2godGhpcy5vcHRpb25zLnVybCxuKG4oe30sdGhpcy5pbml0KSx7aGVhZGVyczp0aGlzLm1ldGFkYXRhLnRvSGVhZGVycygpLG1ldGhvZDpcIlBPU1RcIixib2R5OmUsc2lnbmFsOnRoaXMuY29udHJvbGxlciYmdGhpcy5jb250cm9sbGVyLnNpZ25hbH0pKS50aGVuKChmdW5jdGlvbihlKXtpZih0Lm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5yZXNwb25zZVwiLGUpLHQub3B0aW9ucy5vbkhlYWRlcnMobmV3IG8uTWV0YWRhdGEoZS5oZWFkZXJzKSxlLnN0YXR1cyksIWUuYm9keSlyZXR1cm4gZTt0LnB1bXAoZS5ib2R5LmdldFJlYWRlcigpLGUpfSkpLmNhdGNoKChmdW5jdGlvbihlKXt0LmNhbmNlbGxlZD90Lm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5jYXRjaCAtIHJlcXVlc3QgY2FuY2VsbGVkXCIpOih0LmNhbmNlbGxlZD0hMCx0Lm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5jYXRjaFwiLGUubWVzc2FnZSksdC5vcHRpb25zLm9uRW5kKGUpKX0pKX0sZS5wcm90b3R5cGUuc2VuZE1lc3NhZ2U9ZnVuY3Rpb24oZSl7dGhpcy5zZW5kKGUpfSxlLnByb3RvdHlwZS5maW5pc2hTZW5kPWZ1bmN0aW9uKCl7fSxlLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbihlKXt0aGlzLm1ldGFkYXRhPWV9LGUucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5jYW5jZWxsZWQ/dGhpcy5vcHRpb25zLmRlYnVnJiZzLmRlYnVnKFwiRmV0Y2guY2FuY2VsIGFscmVhZHkgY2FuY2VsbGVkXCIpOih0aGlzLmNhbmNlbGxlZD0hMCx0aGlzLmNvbnRyb2xsZXI/KHRoaXMub3B0aW9ucy5kZWJ1ZyYmcy5kZWJ1ZyhcIkZldGNoLmNhbmNlbC5jb250cm9sbGVyLmFib3J0XCIpLHRoaXMuY29udHJvbGxlci5hYm9ydCgpKTp0aGlzLm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5jYW5jZWwubWlzc2luZyBhYm9ydCBjb250cm9sbGVyXCIpLHRoaXMucmVhZGVyPyh0aGlzLm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5jYW5jZWwucmVhZGVyLmNhbmNlbFwiKSx0aGlzLnJlYWRlci5jYW5jZWwoKS5jYXRjaCgoZnVuY3Rpb24odCl7ZS5vcHRpb25zLmRlYnVnJiZzLmRlYnVnKFwiRmV0Y2guY2FuY2VsLnJlYWRlci5jYW5jZWwgZXhjZXB0aW9uXCIsdCl9KSkpOnRoaXMub3B0aW9ucy5kZWJ1ZyYmcy5kZWJ1ZyhcIkZldGNoLmNhbmNlbCBiZWZvcmUgcmVhZGVyXCIpKX0sZX0oKTt0LmRldGVjdEZldGNoU3VwcG9ydD1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZXNwb25zZSYmUmVzcG9uc2UucHJvdG90eXBlLmhhc093blByb3BlcnR5KFwiYm9keVwiKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgSGVhZGVyc319LDg1OTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Dcm9zc0Jyb3dzZXJIdHRwVHJhbnNwb3J0PXZvaWQgMDt2YXIgbj1yKDIyOSksbz1yKDIxMCk7dC5Dcm9zc0Jyb3dzZXJIdHRwVHJhbnNwb3J0PWZ1bmN0aW9uKGUpe2lmKG4uZGV0ZWN0RmV0Y2hTdXBwb3J0KCkpe3ZhciB0PXtjcmVkZW50aWFsczplLndpdGhDcmVkZW50aWFscz9cImluY2x1ZGVcIjpcInNhbWUtb3JpZ2luXCJ9O3JldHVybiBuLkZldGNoUmVhZGFibGVTdHJlYW1UcmFuc3BvcnQodCl9cmV0dXJuIG8uWGhyVHJhbnNwb3J0KHt3aXRoQ3JlZGVudGlhbHM6ZS53aXRoQ3JlZGVudGlhbHN9KX19LDIxMDpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4sbz10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuc3RyaW5nVG9BcnJheUJ1ZmZlcj10Lk1vekNodW5rZWRBcnJheUJ1ZmZlclhIUj10LlhIUj10LlhoclRyYW5zcG9ydD12b2lkIDA7dmFyIHM9cig2NSksaT1yKDM0NiksYT1yKDg0OSk7dC5YaHJUcmFuc3BvcnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKGEuZGV0ZWN0TW96WEhSU3VwcG9ydCgpKXJldHVybiBuZXcgZCh0LGUpO2lmKGEuZGV0ZWN0WEhST3ZlcnJpZGVNaW1lVHlwZVN1cHBvcnQoKSlyZXR1cm4gbmV3IHUodCxlKTt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGVudmlyb25tZW50J3MgWEhSIGltcGxlbWVudGF0aW9uIGNhbm5vdCBzdXBwb3J0IGJpbmFyeSB0cmFuc2Zlci5cIil9fTt2YXIgdT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLm9wdGlvbnM9ZSx0aGlzLmluaXQ9dH1yZXR1cm4gZS5wcm90b3R5cGUub25Qcm9ncmVzc0V2ZW50PWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiWEhSLm9uUHJvZ3Jlc3NFdmVudC5sZW5ndGg6IFwiLHRoaXMueGhyLnJlc3BvbnNlLmxlbmd0aCk7dmFyIGU9dGhpcy54aHIucmVzcG9uc2Uuc3Vic3RyKHRoaXMuaW5kZXgpO3RoaXMuaW5kZXg9dGhpcy54aHIucmVzcG9uc2UubGVuZ3RoO3ZhciB0PXAoZSk7dGhpcy5vcHRpb25zLm9uQ2h1bmsodCl9LGUucHJvdG90eXBlLm9uTG9hZEV2ZW50PWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiWEhSLm9uTG9hZEV2ZW50XCIpLHRoaXMub3B0aW9ucy5vbkVuZCgpfSxlLnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlPWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiWEhSLm9uU3RhdGVDaGFuZ2VcIix0aGlzLnhoci5yZWFkeVN0YXRlKSx0aGlzLnhoci5yZWFkeVN0YXRlPT09WE1MSHR0cFJlcXVlc3QuSEVBREVSU19SRUNFSVZFRCYmdGhpcy5vcHRpb25zLm9uSGVhZGVycyhuZXcgcy5NZXRhZGF0YSh0aGlzLnhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSksdGhpcy54aHIuc3RhdHVzKX0sZS5wcm90b3R5cGUuc2VuZE1lc3NhZ2U9ZnVuY3Rpb24oZSl7dGhpcy54aHIuc2VuZChlKX0sZS5wcm90b3R5cGUuZmluaXNoU2VuZD1mdW5jdGlvbigpe30sZS5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLm1ldGFkYXRhPWU7dmFyIHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3RoaXMueGhyPXIsci5vcGVuKFwiUE9TVFwiLHRoaXMub3B0aW9ucy51cmwpLHRoaXMuY29uZmlndXJlWGhyKCksdGhpcy5tZXRhZGF0YS5mb3JFYWNoKChmdW5jdGlvbihlLHQpe3Iuc2V0UmVxdWVzdEhlYWRlcihlLHQuam9pbihcIiwgXCIpKX0pKSxyLndpdGhDcmVkZW50aWFscz1Cb29sZWFuKHRoaXMuaW5pdC53aXRoQ3JlZGVudGlhbHMpLHIuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIix0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSksci5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIix0aGlzLm9uUHJvZ3Jlc3NFdmVudC5iaW5kKHRoaXMpKSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZW5kXCIsdGhpcy5vbkxvYWRFdmVudC5iaW5kKHRoaXMpKSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLChmdW5jdGlvbihlKXt0Lm9wdGlvbnMuZGVidWcmJmkuZGVidWcoXCJYSFIuZXJyb3JcIixlKSx0Lm9wdGlvbnMub25FbmQoZS5lcnJvcil9KSl9LGUucHJvdG90eXBlLmNvbmZpZ3VyZVhocj1mdW5jdGlvbigpe3RoaXMueGhyLnJlc3BvbnNlVHlwZT1cInRleHRcIix0aGlzLnhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKX0sZS5wcm90b3R5cGUuY2FuY2VsPWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiWEhSLmFib3J0XCIpLHRoaXMueGhyLmFib3J0KCl9LGV9KCk7dC5YSFI9dTt2YXIgZD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIG51bGwhPT1lJiZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gbyh0LGUpLHQucHJvdG90eXBlLmNvbmZpZ3VyZVhocj1mdW5jdGlvbigpe3RoaXMub3B0aW9ucy5kZWJ1ZyYmaS5kZWJ1ZyhcIk1velhIUi5jb25maWd1cmVYaHI6IHNldHRpbmcgcmVzcG9uc2VUeXBlIHRvICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcidcIiksdGhpcy54aHIucmVzcG9uc2VUeXBlPVwibW96LWNodW5rZWQtYXJyYXlidWZmZXJcIn0sdC5wcm90b3R5cGUub25Qcm9ncmVzc0V2ZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy54aHIucmVzcG9uc2U7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiTW96WEhSLm9uUHJvZ3Jlc3NFdmVudDogXCIsbmV3IFVpbnQ4QXJyYXkoZSkpLHRoaXMub3B0aW9ucy5vbkNodW5rKG5ldyBVaW50OEFycmF5KGUpKX0sdH0odSk7ZnVuY3Rpb24gYyhlLHQpe3ZhciByPWUuY2hhckNvZGVBdCh0KTtpZihyPj01NTI5NiYmcjw9NTYzMTkpe3ZhciBuPWUuY2hhckNvZGVBdCh0KzEpO24+PTU2MzIwJiZuPD01NzM0MyYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCkpfXJldHVybiByfWZ1bmN0aW9uIHAoZSl7Zm9yKHZhciB0PW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTAsbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1TdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0P2UuY29kZVBvaW50QXQobik6YyhlLG4pO3RbcisrXT0yNTUmb31yZXR1cm4gdH10Lk1vekNodW5rZWRBcnJheUJ1ZmZlclhIUj1kLHQuc3RyaW5nVG9BcnJheUJ1ZmZlcj1wfSw4NDk6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgcjtmdW5jdGlvbiBuKCl7aWYodm9pZCAwIT09cilyZXR1cm4gcjtpZihYTUxIdHRwUmVxdWVzdCl7cj1uZXcgWE1MSHR0cFJlcXVlc3Q7dHJ5e3Iub3BlbihcIkdFVFwiLFwiaHR0cHM6Ly9sb2NhbGhvc3RcIil9Y2F0Y2goZSl7fX1yZXR1cm4gcn1mdW5jdGlvbiBvKGUpe3ZhciB0PW4oKTtpZighdClyZXR1cm4hMTt0cnl7cmV0dXJuIHQucmVzcG9uc2VUeXBlPWUsdC5yZXNwb25zZVR5cGU9PT1lfWNhdGNoKGUpe31yZXR1cm4hMX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRldGVjdFhIUk92ZXJyaWRlTWltZVR5cGVTdXBwb3J0PXQuZGV0ZWN0TW96WEhSU3VwcG9ydD10LnhoclN1cHBvcnRzUmVzcG9uc2VUeXBlPXZvaWQgMCx0LnhoclN1cHBvcnRzUmVzcG9uc2VUeXBlPW8sdC5kZXRlY3RNb3pYSFJTdXBwb3J0PWZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0JiZvKFwibW96LWNodW5rZWQtYXJyYXlidWZmZXJcIil9LHQuZGV0ZWN0WEhST3ZlcnJpZGVNaW1lVHlwZVN1cHBvcnQ9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgWE1MSHR0cFJlcXVlc3QmJlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShcIm92ZXJyaWRlTWltZVR5cGVcIil9fSw1NDA6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV2Vic29ja2V0VHJhbnNwb3J0PXZvaWQgMDt2YXIgbixvPXIoMzQ2KSxzPXIoNjE3KTshZnVuY3Rpb24oZSl7ZVtlLkZJTklTSF9TRU5EPTFdPVwiRklOSVNIX1NFTkRcIn0obnx8KG49e30pKTt2YXIgaT1uZXcgVWludDhBcnJheShbMV0pO3QuV2Vic29ja2V0VHJhbnNwb3J0PWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXtlLmRlYnVnJiZvLmRlYnVnKFwid2Vic29ja2V0UmVxdWVzdFwiLGUpO3ZhciB0LHI9ZnVuY3Rpb24oZSl7aWYoXCJodHRwczovL1wiPT09ZS5zdWJzdHIoMCw4KSlyZXR1cm5cIndzczovL1wiK2Uuc3Vic3RyKDgpO2lmKFwiaHR0cDovL1wiPT09ZS5zdWJzdHIoMCw3KSlyZXR1cm5cIndzOi8vXCIrZS5zdWJzdHIoNyk7dGhyb3cgbmV3IEVycm9yKFwiV2Vic29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3RlZCB3aXRoIG5vbi1odHRwczovLyBvciBodHRwOi8vIGhvc3QuXCIpfShlLnVybCksYT1bXTtmdW5jdGlvbiB1KGUpe2lmKGU9PT1uLkZJTklTSF9TRU5EKXQuc2VuZChpKTtlbHNle3ZhciByPWUsbz1uZXcgSW50OEFycmF5KHIuYnl0ZUxlbmd0aCsxKTtvLnNldChuZXcgVWludDhBcnJheShbMF0pKSxvLnNldChyLDEpLHQuc2VuZChvKX19cmV0dXJue3NlbmRNZXNzYWdlOmZ1bmN0aW9uKGUpe3QmJnQucmVhZHlTdGF0ZSE9PXQuQ09OTkVDVElORz91KGUpOmEucHVzaChlKX0sZmluaXNoU2VuZDpmdW5jdGlvbigpe3QmJnQucmVhZHlTdGF0ZSE9PXQuQ09OTkVDVElORz91KG4uRklOSVNIX1NFTkQpOmEucHVzaChuLkZJTklTSF9TRU5EKX0sc3RhcnQ6ZnVuY3Rpb24obil7KHQ9bmV3IFdlYlNvY2tldChyLFtcImdycGMtd2Vic29ja2V0c1wiXSkpLmJpbmFyeVR5cGU9XCJhcnJheWJ1ZmZlclwiLHQub25vcGVuPWZ1bmN0aW9uKCl7dmFyIHI7ZS5kZWJ1ZyYmby5kZWJ1ZyhcIndlYnNvY2tldFJlcXVlc3Qub25vcGVuXCIpLHQuc2VuZCgocj1cIlwiLG4uZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtyKz1lK1wiOiBcIit0LmpvaW4oXCIsIFwiKStcIlxcclxcblwifSkpLHMuZW5jb2RlQVNDSUkocikpKSxhLmZvckVhY2goKGZ1bmN0aW9uKGUpe3UoZSl9KSl9LHQub25jbG9zZT1mdW5jdGlvbih0KXtlLmRlYnVnJiZvLmRlYnVnKFwid2Vic29ja2V0UmVxdWVzdC5vbmNsb3NlXCIsdCksZS5vbkVuZCgpfSx0Lm9uZXJyb3I9ZnVuY3Rpb24odCl7ZS5kZWJ1ZyYmby5kZWJ1ZyhcIndlYnNvY2tldFJlcXVlc3Qub25lcnJvclwiLHQpfSx0Lm9ubWVzc2FnZT1mdW5jdGlvbih0KXtlLm9uQ2h1bmsobmV3IFVpbnQ4QXJyYXkodC5kYXRhKSl9fSxjYW5jZWw6ZnVuY3Rpb24oKXtlLmRlYnVnJiZvLmRlYnVnKFwid2Vic29ja2V0LmFib3J0XCIpLHQuY2xvc2UoKX19fShlKX19fSwzNTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC51bmFyeT12b2lkIDA7dmFyIG49cig2NSksbz1yKDkzNCk7dC51bmFyeT1mdW5jdGlvbihlLHQpe2lmKGUucmVzcG9uc2VTdHJlYW0pdGhyb3cgbmV3IEVycm9yKFwiLnVuYXJ5IGNhbm5vdCBiZSB1c2VkIHdpdGggc2VydmVyLXN0cmVhbWluZyBtZXRob2RzLiBVc2UgLmludm9rZSBvciAuY2xpZW50IGluc3RlYWQuXCIpO2lmKGUucmVxdWVzdFN0cmVhbSl0aHJvdyBuZXcgRXJyb3IoXCIudW5hcnkgY2Fubm90IGJlIHVzZWQgd2l0aCBjbGllbnQtc3RyZWFtaW5nIG1ldGhvZHMuIFVzZSAuY2xpZW50IGluc3RlYWQuXCIpO3ZhciByPW51bGwscz1udWxsLGk9by5jbGllbnQoZSx7aG9zdDp0Lmhvc3QsdHJhbnNwb3J0OnQudHJhbnNwb3J0LGRlYnVnOnQuZGVidWd9KTtyZXR1cm4gaS5vbkhlYWRlcnMoKGZ1bmN0aW9uKGUpe3I9ZX0pKSxpLm9uTWVzc2FnZSgoZnVuY3Rpb24oZSl7cz1lfSkpLGkub25FbmQoKGZ1bmN0aW9uKGUsbyxpKXt0Lm9uRW5kKHtzdGF0dXM6ZSxzdGF0dXNNZXNzYWdlOm8saGVhZGVyczpyfHxuZXcgbi5NZXRhZGF0YSxtZXNzYWdlOnMsdHJhaWxlcnM6aX0pfSkpLGkuc3RhcnQodC5tZXRhZGF0YSksaS5zZW5kKHQucmVxdWVzdCksaS5maW5pc2hTZW5kKCkse2Nsb3NlOmZ1bmN0aW9uKCl7aS5jbG9zZSgpfX19fSw4ODI6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmZyYW1lUmVxdWVzdD12b2lkIDAsdC5mcmFtZVJlcXVlc3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zZXJpYWxpemVCaW5hcnkoKSxyPW5ldyBBcnJheUJ1ZmZlcih0LmJ5dGVMZW5ndGgrNSk7cmV0dXJuIG5ldyBEYXRhVmlldyhyLDEsNCkuc2V0VWludDMyKDAsdC5sZW5ndGgsITEpLG5ldyBVaW50OEFycmF5KHIsNSkuc2V0KHQpLG5ldyBVaW50OEFycmF5KHIpfX19LHQ9e30sZnVuY3Rpb24gcihuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIG89dFtuXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsciksby5leHBvcnRzfSg2MDcpO3ZhciBlLHR9KSk7IiwiIWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9dCgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSx0KTtlbHNle3ZhciByPXQoKTtmb3IodmFyIG4gaW4gcikoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0czplKVtuXT1yW25dfX0odGhpcywoZnVuY3Rpb24oKXtyZXR1cm4gZT17NDE4OmZ1bmN0aW9uKGUsdCl7IWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpZVtyXT10W3JdfSh0LGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIHIobil7aWYodFtuXSlyZXR1cm4gdFtuXS5leHBvcnRzO3ZhciBvPXRbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHIpLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIHIubT1lLHIuYz10LHIuaT1mdW5jdGlvbihlKXtyZXR1cm4gZX0sci5kPWZ1bmN0aW9uKGUsdCxuKXtyLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om59KX0sci5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiByLmQodCxcImFcIix0KSx0fSxyLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHIucD1cIlwiLHIoci5zPTEpfShbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMyksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt2b2lkIDA9PT1lJiYoZT17fSksdm9pZCAwPT09dCYmKHQ9e3NwbGl0VmFsdWVzOiExfSk7dmFyIHIsbz10aGlzO3RoaXMuaGVhZGVyc01hcD17fSxlJiYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhlYWRlcnMmJmUgaW5zdGFuY2VvZiBIZWFkZXJzP24uZ2V0SGVhZGVyS2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbihyKXtuLmdldEhlYWRlclZhbHVlcyhlLHIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3Quc3BsaXRWYWx1ZXM/by5hcHBlbmQocixuLnNwbGl0SGVhZGVyVmFsdWUoZSkpOm8uYXBwZW5kKHIsZSl9KSl9KSk6XCJvYmplY3RcIj09dHlwZW9mKHI9ZSkmJlwib2JqZWN0XCI9PXR5cGVvZiByLmhlYWRlcnNNYXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHIuZm9yRWFjaD9lLmZvckVhY2goKGZ1bmN0aW9uKGUsdCl7by5hcHBlbmQoZSx0KX0pKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwJiZlIGluc3RhbmNlb2YgTWFwP2UuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtvLmFwcGVuZCh0LGUpfSkpOlwic3RyaW5nXCI9PXR5cGVvZiBlP3RoaXMuYXBwZW5kRnJvbVN0cmluZyhlKTpcIm9iamVjdFwiPT10eXBlb2YgZSYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIHI9ZVt0XTtBcnJheS5pc0FycmF5KHIpP3IuZm9yRWFjaCgoZnVuY3Rpb24oZSl7by5hcHBlbmQodCxlKX0pKTpvLmFwcGVuZCh0LHIpfSkpKX1yZXR1cm4gZS5wcm90b3R5cGUuYXBwZW5kRnJvbVN0cmluZz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5zcGxpdChcIlxcclxcblwiKSxyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl0sbz1uLmluZGV4T2YoXCI6XCIpO2lmKG8+MCl7dmFyIHM9bi5zdWJzdHJpbmcoMCxvKS50cmltKCksaT1uLnN1YnN0cmluZyhvKzEpLnRyaW0oKTt0aGlzLmFwcGVuZChzLGkpfX19LGUucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbihlLHQpe3ZhciByPW4ubm9ybWFsaXplTmFtZShlKTtpZih2b2lkIDA9PT10KWRlbGV0ZSB0aGlzLmhlYWRlcnNNYXBbcl07ZWxzZXt2YXIgbz10aGlzLmhlYWRlcnNNYXBbcl07aWYobyl7dmFyIHM9by5pbmRleE9mKHQpO3M+PTAmJm8uc3BsaWNlKHMsMSksMD09PW8ubGVuZ3RoJiZkZWxldGUgdGhpcy5oZWFkZXJzTWFwW3JdfX19LGUucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsbz1uLm5vcm1hbGl6ZU5hbWUoZSk7QXJyYXkuaXNBcnJheSh0aGlzLmhlYWRlcnNNYXBbb10pfHwodGhpcy5oZWFkZXJzTWFwW29dPVtdKSxBcnJheS5pc0FycmF5KHQpP3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ci5oZWFkZXJzTWFwW29dLnB1c2gobi5ub3JtYWxpemVWYWx1ZShlKSl9KSk6dGhpcy5oZWFkZXJzTWFwW29dLnB1c2gobi5ub3JtYWxpemVWYWx1ZSh0KSl9LGUucHJvdG90eXBlLnNldD1mdW5jdGlvbihlLHQpe3ZhciByPW4ubm9ybWFsaXplTmFtZShlKTtpZihBcnJheS5pc0FycmF5KHQpKXt2YXIgbz1bXTt0LmZvckVhY2goKGZ1bmN0aW9uKGUpe28ucHVzaChuLm5vcm1hbGl6ZVZhbHVlKGUpKX0pKSx0aGlzLmhlYWRlcnNNYXBbcl09b31lbHNlIHRoaXMuaGVhZGVyc01hcFtyXT1bbi5ub3JtYWxpemVWYWx1ZSh0KV19LGUucHJvdG90eXBlLmhhcz1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMuaGVhZGVyc01hcFtuLm5vcm1hbGl6ZU5hbWUoZSldO2lmKCFBcnJheS5pc0FycmF5KHIpKXJldHVybiExO2lmKHZvaWQgMCE9PXQpe3ZhciBvPW4ubm9ybWFsaXplVmFsdWUodCk7cmV0dXJuIHIuaW5kZXhPZihvKT49MH1yZXR1cm4hMH0sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuaGVhZGVyc01hcFtuLm5vcm1hbGl6ZU5hbWUoZSldO3JldHVybiB2b2lkIDAhPT10P3QuY29uY2F0KCk6W119LGUucHJvdG90eXBlLmZvckVhY2g9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLmhlYWRlcnNNYXApLmZvckVhY2goKGZ1bmN0aW9uKHIpe2Uocix0LmhlYWRlcnNNYXBbcl0pfSksdGhpcyl9LGUucHJvdG90eXBlLnRvSGVhZGVycz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBIZWFkZXJzKXt2YXIgZT1uZXcgSGVhZGVycztyZXR1cm4gdGhpcy5mb3JFYWNoKChmdW5jdGlvbih0LHIpe3IuZm9yRWFjaCgoZnVuY3Rpb24ocil7ZS5hcHBlbmQodCxyKX0pKX0pKSxlfXRocm93IG5ldyBFcnJvcihcIkhlYWRlcnMgY2xhc3MgaXMgbm90IGRlZmluZWRcIil9LGV9KCk7dC5Ccm93c2VySGVhZGVycz1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigwKTt0LkJyb3dzZXJIZWFkZXJzPW4uQnJvd3NlckhlYWRlcnN9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lml0ZXJhdGVIZWFkZXJzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPWVbU3ltYm9sLml0ZXJhdG9yXSgpLG49ci5uZXh0KCk7IW4uZG9uZTspdChuLnZhbHVlWzBdKSxuPXIubmV4dCgpfSx0Lml0ZXJhdGVIZWFkZXJzS2V5cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1lLmtleXMoKSxuPXIubmV4dCgpOyFuLmRvbmU7KXQobi52YWx1ZSksbj1yLm5leHQoKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDIpO3Qubm9ybWFsaXplTmFtZT1mdW5jdGlvbihlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSYmKGU9U3RyaW5nKGUpKSwvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWVcIik7cmV0dXJuIGUudG9Mb3dlckNhc2UoKX0sdC5ub3JtYWxpemVWYWx1ZT1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZSYmKGU9U3RyaW5nKGUpKSxlfSx0LmdldEhlYWRlclZhbHVlcz1mdW5jdGlvbihlLHQpe3ZhciByPWU7aWYociBpbnN0YW5jZW9mIEhlYWRlcnMmJnIuZ2V0QWxsKXJldHVybiByLmdldEFsbCh0KTt2YXIgbj1yLmdldCh0KTtyZXR1cm4gbiYmXCJzdHJpbmdcIj09dHlwZW9mIG4/W25dOm59LHQuZ2V0SGVhZGVyS2V5cz1mdW5jdGlvbihlKXt2YXIgdD1lLHI9e30sbz1bXTtyZXR1cm4gdC5rZXlzP24uaXRlcmF0ZUhlYWRlcnNLZXlzKHQsKGZ1bmN0aW9uKGUpe3JbZV18fChyW2VdPSEwLG8ucHVzaChlKSl9KSk6dC5mb3JFYWNoP3QuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtyW3RdfHwoclt0XT0hMCxvLnB1c2godCkpfSkpOm4uaXRlcmF0ZUhlYWRlcnModCwoZnVuY3Rpb24oZSl7dmFyIHQ9ZVswXTtyW3RdfHwoclt0XT0hMCxvLnB1c2godCkpfSkpLG99LHQuc3BsaXRIZWFkZXJWYWx1ZT1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gZS5zcGxpdChcIiwgXCIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2Uuc3BsaXQoXCIsXCIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QucHVzaChlKX0pKX0pKSx0fX1dKSl9LDYxNzpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5DaHVua1BhcnNlcj10LkNodW5rVHlwZT10LmVuY29kZUFTQ0lJPXQuZGVjb2RlQVNDSUk9dm9pZCAwO3ZhciBuLG89cig2NSk7ZnVuY3Rpb24gcyhlKXtyZXR1cm4gOT09PSh0PWUpfHwxMD09PXR8fDEzPT09dHx8ZT49MzImJmU8PTEyNjt2YXIgdH1mdW5jdGlvbiBpKGUpe2Zvcih2YXIgdD0wO3QhPT1lLmxlbmd0aDsrK3QpaWYoIXMoZVt0XSkpdGhyb3cgbmV3IEVycm9yKFwiTWV0YWRhdGEgaXMgbm90IHZhbGlkIChwcmludGFibGUpIEFTQ0lJXCIpO3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlKSl9ZnVuY3Rpb24gYShlKXtyZXR1cm4gMTI4PT0oMTI4JmUuZ2V0VWludDgoMCkpfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIGUuZ2V0VWludDMyKDEsITEpfWZ1bmN0aW9uIGQoZSx0LHIpe3JldHVybiBlLmJ5dGVMZW5ndGgtdD49cn1mdW5jdGlvbiBjKGUsdCxyKXtpZihlLnNsaWNlKXJldHVybiBlLnNsaWNlKHQscik7dmFyIG49ZS5sZW5ndGg7dm9pZCAwIT09ciYmKG49cik7Zm9yKHZhciBvPW5ldyBVaW50OEFycmF5KG4tdCkscz0wLGk9dDtpPG47aSsrKW9bcysrXT1lW2ldO3JldHVybiBvfXQuZGVjb2RlQVNDSUk9aSx0LmVuY29kZUFTQ0lJPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgVWludDhBcnJheShlLmxlbmd0aCkscj0wO3IhPT1lLmxlbmd0aDsrK3Ipe3ZhciBuPWUuY2hhckNvZGVBdChyKTtpZighcyhuKSl0aHJvdyBuZXcgRXJyb3IoXCJNZXRhZGF0YSBjb250YWlucyBpbnZhbGlkIEFTQ0lJXCIpO3Rbcl09bn1yZXR1cm4gdH0sZnVuY3Rpb24oZSl7ZVtlLk1FU1NBR0U9MV09XCJNRVNTQUdFXCIsZVtlLlRSQUlMRVJTPTJdPVwiVFJBSUxFUlNcIn0obj10LkNodW5rVHlwZXx8KHQuQ2h1bmtUeXBlPXt9KSk7dmFyIHA9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dGhpcy5idWZmZXI9bnVsbCx0aGlzLnBvc2l0aW9uPTB9cmV0dXJuIGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUsdCl7aWYoMD09PWUubGVuZ3RoJiZ0KXJldHVybltdO3ZhciByLHM9W107aWYobnVsbD09dGhpcy5idWZmZXIpdGhpcy5idWZmZXI9ZSx0aGlzLnBvc2l0aW9uPTA7ZWxzZSBpZih0aGlzLnBvc2l0aW9uPT09dGhpcy5idWZmZXIuYnl0ZUxlbmd0aCl0aGlzLmJ1ZmZlcj1lLHRoaXMucG9zaXRpb249MDtlbHNle3ZhciBwPXRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgtdGhpcy5wb3NpdGlvbixoPW5ldyBVaW50OEFycmF5KHArZS5ieXRlTGVuZ3RoKSxmPWModGhpcy5idWZmZXIsdGhpcy5wb3NpdGlvbik7aC5zZXQoZiwwKTt2YXIgbD1uZXcgVWludDhBcnJheShlKTtoLnNldChsLHApLHRoaXMuYnVmZmVyPWgsdGhpcy5wb3NpdGlvbj0wfWZvcig7Oyl7aWYoIWQodGhpcy5idWZmZXIsdGhpcy5wb3NpdGlvbiw1KSlyZXR1cm4gczt2YXIgZz1jKHRoaXMuYnVmZmVyLHRoaXMucG9zaXRpb24sdGhpcy5wb3NpdGlvbis1KSxiPW5ldyBEYXRhVmlldyhnLmJ1ZmZlcixnLmJ5dGVPZmZzZXQsZy5ieXRlTGVuZ3RoKSx5PXUoYik7aWYoIWQodGhpcy5idWZmZXIsdGhpcy5wb3NpdGlvbiw1K3kpKXJldHVybiBzO3ZhciB2PWModGhpcy5idWZmZXIsdGhpcy5wb3NpdGlvbis1LHRoaXMucG9zaXRpb24rNSt5KTtpZih0aGlzLnBvc2l0aW9uKz01K3ksYShiKSlyZXR1cm4gcy5wdXNoKHtjaHVua1R5cGU6bi5UUkFJTEVSUyx0cmFpbGVyczoocj12LG5ldyBvLk1ldGFkYXRhKGkocikpKX0pLHM7cy5wdXNoKHtjaHVua1R5cGU6bi5NRVNTQUdFLGRhdGE6dn0pfX0sZX0oKTt0LkNodW5rUGFyc2VyPXB9LDg6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgcjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lmh0dHBTdGF0dXNUb0NvZGU9dC5Db2RlPXZvaWQgMCxmdW5jdGlvbihlKXtlW2UuT0s9MF09XCJPS1wiLGVbZS5DYW5jZWxlZD0xXT1cIkNhbmNlbGVkXCIsZVtlLlVua25vd249Ml09XCJVbmtub3duXCIsZVtlLkludmFsaWRBcmd1bWVudD0zXT1cIkludmFsaWRBcmd1bWVudFwiLGVbZS5EZWFkbGluZUV4Y2VlZGVkPTRdPVwiRGVhZGxpbmVFeGNlZWRlZFwiLGVbZS5Ob3RGb3VuZD01XT1cIk5vdEZvdW5kXCIsZVtlLkFscmVhZHlFeGlzdHM9Nl09XCJBbHJlYWR5RXhpc3RzXCIsZVtlLlBlcm1pc3Npb25EZW5pZWQ9N109XCJQZXJtaXNzaW9uRGVuaWVkXCIsZVtlLlJlc291cmNlRXhoYXVzdGVkPThdPVwiUmVzb3VyY2VFeGhhdXN0ZWRcIixlW2UuRmFpbGVkUHJlY29uZGl0aW9uPTldPVwiRmFpbGVkUHJlY29uZGl0aW9uXCIsZVtlLkFib3J0ZWQ9MTBdPVwiQWJvcnRlZFwiLGVbZS5PdXRPZlJhbmdlPTExXT1cIk91dE9mUmFuZ2VcIixlW2UuVW5pbXBsZW1lbnRlZD0xMl09XCJVbmltcGxlbWVudGVkXCIsZVtlLkludGVybmFsPTEzXT1cIkludGVybmFsXCIsZVtlLlVuYXZhaWxhYmxlPTE0XT1cIlVuYXZhaWxhYmxlXCIsZVtlLkRhdGFMb3NzPTE1XT1cIkRhdGFMb3NzXCIsZVtlLlVuYXV0aGVudGljYXRlZD0xNl09XCJVbmF1dGhlbnRpY2F0ZWRcIn0ocj10LkNvZGV8fCh0LkNvZGU9e30pKSx0Lmh0dHBTdGF0dXNUb0NvZGU9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2UgMDpyZXR1cm4gci5JbnRlcm5hbDtjYXNlIDIwMDpyZXR1cm4gci5PSztjYXNlIDQwMDpyZXR1cm4gci5JbnZhbGlkQXJndW1lbnQ7Y2FzZSA0MDE6cmV0dXJuIHIuVW5hdXRoZW50aWNhdGVkO2Nhc2UgNDAzOnJldHVybiByLlBlcm1pc3Npb25EZW5pZWQ7Y2FzZSA0MDQ6cmV0dXJuIHIuTm90Rm91bmQ7Y2FzZSA0MDk6cmV0dXJuIHIuQWJvcnRlZDtjYXNlIDQxMjpyZXR1cm4gci5GYWlsZWRQcmVjb25kaXRpb247Y2FzZSA0Mjk6cmV0dXJuIHIuUmVzb3VyY2VFeGhhdXN0ZWQ7Y2FzZSA0OTk6cmV0dXJuIHIuQ2FuY2VsZWQ7Y2FzZSA1MDA6cmV0dXJuIHIuVW5rbm93bjtjYXNlIDUwMTpyZXR1cm4gci5VbmltcGxlbWVudGVkO2Nhc2UgNTAzOnJldHVybiByLlVuYXZhaWxhYmxlO2Nhc2UgNTA0OnJldHVybiByLkRlYWRsaW5lRXhjZWVkZWQ7ZGVmYXVsdDpyZXR1cm4gci5Vbmtub3dufX19LDkzNDpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5jbGllbnQ9dm9pZCAwO3ZhciBuPXIoNjUpLG89cig2MTcpLHM9cig4KSxpPXIoMzQ2KSxhPXIoNTcpLHU9cig4ODIpO3QuY2xpZW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBkKGUsdCl9O3ZhciBkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMuc3RhcnRlZD0hMSx0aGlzLnNlbnRGaXJzdE1lc3NhZ2U9ITEsdGhpcy5jb21wbGV0ZWQ9ITEsdGhpcy5jbG9zZWQ9ITEsdGhpcy5maW5pc2hlZFNlbmRpbmc9ITEsdGhpcy5vbkhlYWRlcnNDYWxsYmFja3M9W10sdGhpcy5vbk1lc3NhZ2VDYWxsYmFja3M9W10sdGhpcy5vbkVuZENhbGxiYWNrcz1bXSx0aGlzLnBhcnNlcj1uZXcgby5DaHVua1BhcnNlcix0aGlzLm1ldGhvZERlZmluaXRpb249ZSx0aGlzLnByb3BzPXQsdGhpcy5jcmVhdGVUcmFuc3BvcnQoKX1yZXR1cm4gZS5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wcm9wcy5ob3N0K1wiL1wiK3RoaXMubWV0aG9kRGVmaW5pdGlvbi5zZXJ2aWNlLnNlcnZpY2VOYW1lK1wiL1wiK3RoaXMubWV0aG9kRGVmaW5pdGlvbi5tZXRob2ROYW1lLHQ9e21ldGhvZERlZmluaXRpb246dGhpcy5tZXRob2REZWZpbml0aW9uLGRlYnVnOnRoaXMucHJvcHMuZGVidWd8fCExLHVybDplLG9uSGVhZGVyczp0aGlzLm9uVHJhbnNwb3J0SGVhZGVycy5iaW5kKHRoaXMpLG9uQ2h1bms6dGhpcy5vblRyYW5zcG9ydENodW5rLmJpbmQodGhpcyksb25FbmQ6dGhpcy5vblRyYW5zcG9ydEVuZC5iaW5kKHRoaXMpfTt0aGlzLnByb3BzLnRyYW5zcG9ydD90aGlzLnRyYW5zcG9ydD10aGlzLnByb3BzLnRyYW5zcG9ydCh0KTp0aGlzLnRyYW5zcG9ydD1hLm1ha2VEZWZhdWx0VHJhbnNwb3J0KHQpfSxlLnByb3RvdHlwZS5vblRyYW5zcG9ydEhlYWRlcnM9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwib25IZWFkZXJzXCIsZSx0KSx0aGlzLmNsb3NlZCl0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwiZ3JwYy5vbkhlYWRlcnMgcmVjZWl2ZWQgYWZ0ZXIgcmVxdWVzdCB3YXMgY2xvc2VkIC0gaWdub3JpbmdcIik7ZWxzZSBpZigwPT09dCk7ZWxzZXt0aGlzLnJlc3BvbnNlSGVhZGVycz1lLHRoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJvbkhlYWRlcnMucmVzcG9uc2VIZWFkZXJzXCIsSlNPTi5zdHJpbmdpZnkodGhpcy5yZXNwb25zZUhlYWRlcnMsbnVsbCwyKSk7dmFyIHI9YyhlKTt0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwib25IZWFkZXJzLmdSUENTdGF0dXNcIixyKTt2YXIgbj1yJiZyPj0wP3I6cy5odHRwU3RhdHVzVG9Db2RlKHQpO3RoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJvbkhlYWRlcnMuY29kZVwiLG4pO3ZhciBvPWUuZ2V0KFwiZ3JwYy1tZXNzYWdlXCIpfHxbXTtpZih0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwib25IZWFkZXJzLmdSUENNZXNzYWdlXCIsbyksdGhpcy5yYXdPbkhlYWRlcnMoZSksbiE9PXMuQ29kZS5PSyl7dmFyIGE9dGhpcy5kZWNvZGVHUlBDU3RhdHVzKG9bMF0pO3RoaXMucmF3T25FcnJvcihuLGEsZSl9fX0sZS5wcm90b3R5cGUub25UcmFuc3BvcnRDaHVuaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKHRoaXMuY2xvc2VkKXRoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJncnBjLm9uQ2h1bmsgcmVjZWl2ZWQgYWZ0ZXIgcmVxdWVzdCB3YXMgY2xvc2VkIC0gaWdub3JpbmdcIik7ZWxzZXt2YXIgcj1bXTt0cnl7cj10aGlzLnBhcnNlci5wYXJzZShlKX1jYXRjaChlKXtyZXR1cm4gdGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcIm9uQ2h1bmsucGFyc2luZyBlcnJvclwiLGUsZS5tZXNzYWdlKSx2b2lkIHRoaXMucmF3T25FcnJvcihzLkNvZGUuSW50ZXJuYWwsXCJwYXJzaW5nIGVycm9yOiBcIitlLm1lc3NhZ2UpfXIuZm9yRWFjaCgoZnVuY3Rpb24oZSl7aWYoZS5jaHVua1R5cGU9PT1vLkNodW5rVHlwZS5NRVNTQUdFKXt2YXIgcj10Lm1ldGhvZERlZmluaXRpb24ucmVzcG9uc2VUeXBlLmRlc2VyaWFsaXplQmluYXJ5KGUuZGF0YSk7dC5yYXdPbk1lc3NhZ2Uocil9ZWxzZSBlLmNodW5rVHlwZT09PW8uQ2h1bmtUeXBlLlRSQUlMRVJTJiYodC5yZXNwb25zZUhlYWRlcnM/KHQucmVzcG9uc2VUcmFpbGVycz1uZXcgbi5NZXRhZGF0YShlLnRyYWlsZXJzKSx0LnByb3BzLmRlYnVnJiZpLmRlYnVnKFwib25DaHVuay50cmFpbGVyc1wiLHQucmVzcG9uc2VUcmFpbGVycykpOih0LnJlc3BvbnNlSGVhZGVycz1uZXcgbi5NZXRhZGF0YShlLnRyYWlsZXJzKSx0LnJhd09uSGVhZGVycyh0LnJlc3BvbnNlSGVhZGVycykpKX0pKX19LGUucHJvdG90eXBlLm9uVHJhbnNwb3J0RW5kPWZ1bmN0aW9uKCl7aWYodGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcImdycGMub25FbmRcIiksdGhpcy5jbG9zZWQpdGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcImdycGMub25FbmQgcmVjZWl2ZWQgYWZ0ZXIgcmVxdWVzdCB3YXMgY2xvc2VkIC0gaWdub3JpbmdcIik7ZWxzZSBpZih2b2lkIDAhPT10aGlzLnJlc3BvbnNlVHJhaWxlcnMpe3ZhciBlPWModGhpcy5yZXNwb25zZVRyYWlsZXJzKTtpZihudWxsIT09ZSl7dmFyIHQ9dGhpcy5yZXNwb25zZVRyYWlsZXJzLmdldChcImdycGMtbWVzc2FnZVwiKSxyPXRoaXMuZGVjb2RlR1JQQ1N0YXR1cyh0WzBdKTt0aGlzLnJhd09uRW5kKGUscix0aGlzLnJlc3BvbnNlVHJhaWxlcnMpfWVsc2UgdGhpcy5yYXdPbkVycm9yKHMuQ29kZS5JbnRlcm5hbCxcIlJlc3BvbnNlIGNsb3NlZCB3aXRob3V0IGdycGMtc3RhdHVzIChUcmFpbGVycyBwcm92aWRlZClcIil9ZWxzZXtpZih2b2lkIDA9PT10aGlzLnJlc3BvbnNlSGVhZGVycylyZXR1cm4gdm9pZCB0aGlzLnJhd09uRXJyb3Iocy5Db2RlLlVua25vd24sXCJSZXNwb25zZSBjbG9zZWQgd2l0aG91dCBoZWFkZXJzXCIpO3ZhciBuPWModGhpcy5yZXNwb25zZUhlYWRlcnMpLG89dGhpcy5yZXNwb25zZUhlYWRlcnMuZ2V0KFwiZ3JwYy1tZXNzYWdlXCIpO2lmKHRoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJncnBjLmhlYWRlcnMgb25seSByZXNwb25zZSBcIixuLG8pLG51bGw9PT1uKXJldHVybiB2b2lkIHRoaXMucmF3T25FbmQocy5Db2RlLlVua25vd24sXCJSZXNwb25zZSBjbG9zZWQgd2l0aG91dCBncnBjLXN0YXR1cyAoSGVhZGVycyBvbmx5KVwiLHRoaXMucmVzcG9uc2VIZWFkZXJzKTt2YXIgYT10aGlzLmRlY29kZUdSUENTdGF0dXMob1swXSk7dGhpcy5yYXdPbkVuZChuLGEsdGhpcy5yZXNwb25zZUhlYWRlcnMpfX0sZS5wcm90b3R5cGUuZGVjb2RlR1JQQ1N0YXR1cz1mdW5jdGlvbihlKXtpZighZSlyZXR1cm5cIlwiO3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGUpfWNhdGNoKHQpe3JldHVybiBlfX0sZS5wcm90b3R5cGUucmF3T25FbmQ9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXM7dGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcInJhd09uRW5kXCIsZSx0LHIpLHRoaXMuY29tcGxldGVkfHwodGhpcy5jb21wbGV0ZWQ9ITAsdGhpcy5vbkVuZENhbGxiYWNrcy5mb3JFYWNoKChmdW5jdGlvbihvKXtpZighbi5jbG9zZWQpdHJ5e28oZSx0LHIpfWNhdGNoKGUpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dGhyb3cgZX0pLDApfX0pKSl9LGUucHJvdG90eXBlLnJhd09uSGVhZGVycz1mdW5jdGlvbihlKXt0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwicmF3T25IZWFkZXJzXCIsZSksdGhpcy5jb21wbGV0ZWR8fHRoaXMub25IZWFkZXJzQ2FsbGJhY2tzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3RyeXt0KGUpfWNhdGNoKGUpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dGhyb3cgZX0pLDApfX0pKX0sZS5wcm90b3R5cGUucmF3T25FcnJvcj1mdW5jdGlvbihlLHQscil7dmFyIG89dGhpczt2b2lkIDA9PT1yJiYocj1uZXcgbi5NZXRhZGF0YSksdGhpcy5wcm9wcy5kZWJ1ZyYmaS5kZWJ1ZyhcInJhd09uRXJyb3JcIixlLHQpLHRoaXMuY29tcGxldGVkfHwodGhpcy5jb21wbGV0ZWQ9ITAsdGhpcy5vbkVuZENhbGxiYWNrcy5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighby5jbG9zZWQpdHJ5e24oZSx0LHIpfWNhdGNoKGUpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dGhyb3cgZX0pLDApfX0pKSl9LGUucHJvdG90eXBlLnJhd09uTWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMucHJvcHMuZGVidWcmJmkuZGVidWcoXCJyYXdPbk1lc3NhZ2VcIixlLnRvT2JqZWN0KCkpLHRoaXMuY29tcGxldGVkfHx0aGlzLmNsb3NlZHx8dGhpcy5vbk1lc3NhZ2VDYWxsYmFja3MuZm9yRWFjaCgoZnVuY3Rpb24ocil7aWYoIXQuY2xvc2VkKXRyeXtyKGUpfWNhdGNoKGUpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dGhyb3cgZX0pLDApfX0pKX0sZS5wcm90b3R5cGUub25IZWFkZXJzPWZ1bmN0aW9uKGUpe3RoaXMub25IZWFkZXJzQ2FsbGJhY2tzLnB1c2goZSl9LGUucHJvdG90eXBlLm9uTWVzc2FnZT1mdW5jdGlvbihlKXt0aGlzLm9uTWVzc2FnZUNhbGxiYWNrcy5wdXNoKGUpfSxlLnByb3RvdHlwZS5vbkVuZD1mdW5jdGlvbihlKXt0aGlzLm9uRW5kQ2FsbGJhY2tzLnB1c2goZSl9LGUucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKGUpe2lmKHRoaXMuc3RhcnRlZCl0aHJvdyBuZXcgRXJyb3IoXCJDbGllbnQgYWxyZWFkeSBzdGFydGVkIC0gY2Fubm90IC5zdGFydCgpXCIpO3RoaXMuc3RhcnRlZD0hMDt2YXIgdD1uZXcgbi5NZXRhZGF0YShlfHx7fSk7dC5zZXQoXCJjb250ZW50LXR5cGVcIixcImFwcGxpY2F0aW9uL2dycGMtd2ViK3Byb3RvXCIpLHQuc2V0KFwieC1ncnBjLXdlYlwiLFwiMVwiKSx0aGlzLnRyYW5zcG9ydC5zdGFydCh0KX0sZS5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbihlKXtpZighdGhpcy5zdGFydGVkKXRocm93IG5ldyBFcnJvcihcIkNsaWVudCBub3Qgc3RhcnRlZCAtIC5zdGFydCgpIG11c3QgYmUgY2FsbGVkIGJlZm9yZSAuc2VuZCgpXCIpO2lmKHRoaXMuY2xvc2VkKXRocm93IG5ldyBFcnJvcihcIkNsaWVudCBhbHJlYWR5IGNsb3NlZCAtIGNhbm5vdCAuc2VuZCgpXCIpO2lmKHRoaXMuZmluaXNoZWRTZW5kaW5nKXRocm93IG5ldyBFcnJvcihcIkNsaWVudCBhbHJlYWR5IGZpbmlzaGVkIHNlbmRpbmcgLSBjYW5ub3QgLnNlbmQoKVwiKTtpZighdGhpcy5tZXRob2REZWZpbml0aW9uLnJlcXVlc3RTdHJlYW0mJnRoaXMuc2VudEZpcnN0TWVzc2FnZSl0aHJvdyBuZXcgRXJyb3IoXCJNZXNzYWdlIGFscmVhZHkgc2VudCBmb3Igbm9uLWNsaWVudC1zdHJlYW1pbmcgbWV0aG9kIC0gY2Fubm90IC5zZW5kKClcIik7dGhpcy5zZW50Rmlyc3RNZXNzYWdlPSEwO3ZhciB0PXUuZnJhbWVSZXF1ZXN0KGUpO3RoaXMudHJhbnNwb3J0LnNlbmRNZXNzYWdlKHQpfSxlLnByb3RvdHlwZS5maW5pc2hTZW5kPWZ1bmN0aW9uKCl7aWYoIXRoaXMuc3RhcnRlZCl0aHJvdyBuZXcgRXJyb3IoXCJDbGllbnQgbm90IHN0YXJ0ZWQgLSAuZmluaXNoU2VuZCgpIG11c3QgYmUgY2FsbGVkIGJlZm9yZSAuY2xvc2UoKVwiKTtpZih0aGlzLmNsb3NlZCl0aHJvdyBuZXcgRXJyb3IoXCJDbGllbnQgYWxyZWFkeSBjbG9zZWQgLSBjYW5ub3QgLnNlbmQoKVwiKTtpZih0aGlzLmZpbmlzaGVkU2VuZGluZyl0aHJvdyBuZXcgRXJyb3IoXCJDbGllbnQgYWxyZWFkeSBmaW5pc2hlZCBzZW5kaW5nIC0gY2Fubm90IC5maW5pc2hTZW5kKClcIik7dGhpcy5maW5pc2hlZFNlbmRpbmc9ITAsdGhpcy50cmFuc3BvcnQuZmluaXNoU2VuZCgpfSxlLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpe2lmKCF0aGlzLnN0YXJ0ZWQpdGhyb3cgbmV3IEVycm9yKFwiQ2xpZW50IG5vdCBzdGFydGVkIC0gLnN0YXJ0KCkgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIC5jbG9zZSgpXCIpO2lmKHRoaXMuY2xvc2VkKXRocm93IG5ldyBFcnJvcihcIkNsaWVudCBhbHJlYWR5IGNsb3NlZCAtIGNhbm5vdCAuY2xvc2UoKVwiKTt0aGlzLmNsb3NlZD0hMCx0aGlzLnByb3BzLmRlYnVnJiZpLmRlYnVnKFwicmVxdWVzdC5hYm9ydCBhYm9ydGluZyByZXF1ZXN0XCIpLHRoaXMudHJhbnNwb3J0LmNhbmNlbCgpfSxlfSgpO2Z1bmN0aW9uIGMoZSl7dmFyIHQ9ZS5nZXQoXCJncnBjLXN0YXR1c1wiKXx8W107aWYodC5sZW5ndGg+MCl0cnl7dmFyIHI9dFswXTtyZXR1cm4gcGFyc2VJbnQociwxMCl9Y2F0Y2goZSl7cmV0dXJuIG51bGx9cmV0dXJuIG51bGx9fSwzNDY6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlYnVnPXZvaWQgMCx0LmRlYnVnPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO2NvbnNvbGUuZGVidWc/Y29uc29sZS5kZWJ1Zy5hcHBseShudWxsLGUpOmNvbnNvbGUubG9nLmFwcGx5KG51bGwsZSl9fSw2MDc6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZ3JwYz12b2lkIDA7dmFyIG4sbz1yKDQxOCkscz1yKDU3KSxpPXIoMjI5KSxhPXIoNTQwKSx1PXIoMjEwKSxkPXIoODU5KSxjPXIoOCkscD1yKDkzOCksaD1yKDM1KSxmPXIoOTM0KTsobj10LmdycGN8fCh0LmdycGM9e30pKS5zZXREZWZhdWx0VHJhbnNwb3J0PXMuc2V0RGVmYXVsdFRyYW5zcG9ydEZhY3Rvcnksbi5Dcm9zc0Jyb3dzZXJIdHRwVHJhbnNwb3J0PWQuQ3Jvc3NCcm93c2VySHR0cFRyYW5zcG9ydCxuLkZldGNoUmVhZGFibGVTdHJlYW1UcmFuc3BvcnQ9aS5GZXRjaFJlYWRhYmxlU3RyZWFtVHJhbnNwb3J0LG4uWGhyVHJhbnNwb3J0PXUuWGhyVHJhbnNwb3J0LG4uV2Vic29ja2V0VHJhbnNwb3J0PWEuV2Vic29ja2V0VHJhbnNwb3J0LG4uQ29kZT1jLkNvZGUsbi5NZXRhZGF0YT1vLkJyb3dzZXJIZWFkZXJzLG4uY2xpZW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGYuY2xpZW50KGUsdCl9LG4uaW52b2tlPXAuaW52b2tlLG4udW5hcnk9aC51bmFyeX0sOTM4OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lmludm9rZT12b2lkIDA7dmFyIG49cig5MzQpO3QuaW52b2tlPWZ1bmN0aW9uKGUsdCl7aWYoZS5yZXF1ZXN0U3RyZWFtKXRocm93IG5ldyBFcnJvcihcIi5pbnZva2UgY2Fubm90IGJlIHVzZWQgd2l0aCBjbGllbnQtc3RyZWFtaW5nIG1ldGhvZHMuIFVzZSAuY2xpZW50IGluc3RlYWQuXCIpO3ZhciByPW4uY2xpZW50KGUse2hvc3Q6dC5ob3N0LHRyYW5zcG9ydDp0LnRyYW5zcG9ydCxkZWJ1Zzp0LmRlYnVnfSk7cmV0dXJuIHQub25IZWFkZXJzJiZyLm9uSGVhZGVycyh0Lm9uSGVhZGVycyksdC5vbk1lc3NhZ2UmJnIub25NZXNzYWdlKHQub25NZXNzYWdlKSx0Lm9uRW5kJiZyLm9uRW5kKHQub25FbmQpLHIuc3RhcnQodC5tZXRhZGF0YSksci5zZW5kKHQucmVxdWVzdCksci5maW5pc2hTZW5kKCkse2Nsb3NlOmZ1bmN0aW9uKCl7ci5jbG9zZSgpfX19fSw2NTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5NZXRhZGF0YT12b2lkIDA7dmFyIG49cig0MTgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiTWV0YWRhdGFcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5Ccm93c2VySGVhZGVyc319KX0sNTc6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQubWFrZURlZmF1bHRUcmFuc3BvcnQ9dC5zZXREZWZhdWx0VHJhbnNwb3J0RmFjdG9yeT12b2lkIDA7dmFyIG49cig4NTkpLG89ZnVuY3Rpb24oZSl7cmV0dXJuIG4uQ3Jvc3NCcm93c2VySHR0cFRyYW5zcG9ydCh7d2l0aENyZWRlbnRpYWxzOiExfSkoZSl9O3Quc2V0RGVmYXVsdFRyYW5zcG9ydEZhY3Rvcnk9ZnVuY3Rpb24oZSl7bz1lfSx0Lm1ha2VEZWZhdWx0VHJhbnNwb3J0PWZ1bmN0aW9uKGUpe3JldHVybiBvKGUpfX0sMjI5OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fYXNzaWdufHxmdW5jdGlvbigpe3JldHVybihuPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPTEsbj1hcmd1bWVudHMubGVuZ3RoO3I8bjtyKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW3JdKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZXRlY3RGZXRjaFN1cHBvcnQ9dC5GZXRjaFJlYWRhYmxlU3RyZWFtVHJhbnNwb3J0PXZvaWQgMDt2YXIgbz1yKDY1KSxzPXIoMzQ2KTt0LkZldGNoUmVhZGFibGVTdHJlYW1UcmFuc3BvcnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBlLmRlYnVnJiZzLmRlYnVnKFwiZmV0Y2hSZXF1ZXN0XCIsZSksbmV3IGkoZSx0KX0odCxlKX19O3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMuY2FuY2VsbGVkPSExLHRoaXMuY29udHJvbGxlcj1zZWxmLkFib3J0Q29udHJvbGxlciYmbmV3IEFib3J0Q29udHJvbGxlcix0aGlzLm9wdGlvbnM9ZSx0aGlzLmluaXQ9dH1yZXR1cm4gZS5wcm90b3R5cGUucHVtcD1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7aWYodGhpcy5yZWFkZXI9ZSx0aGlzLmNhbmNlbGxlZClyZXR1cm4gdGhpcy5vcHRpb25zLmRlYnVnJiZzLmRlYnVnKFwiRmV0Y2gucHVtcC5jYW5jZWwgYXQgZmlyc3QgcHVtcFwiKSx2b2lkIHRoaXMucmVhZGVyLmNhbmNlbCgpLmNhdGNoKChmdW5jdGlvbihlKXtyLm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5wdW1wLnJlYWRlci5jYW5jZWwgZXhjZXB0aW9uXCIsZSl9KSk7dGhpcy5yZWFkZXIucmVhZCgpLnRoZW4oKGZ1bmN0aW9uKGUpe2lmKGUuZG9uZSlyZXR1cm4gci5vcHRpb25zLm9uRW5kKCksdDtyLm9wdGlvbnMub25DaHVuayhlLnZhbHVlKSxyLnB1bXAoci5yZWFkZXIsdCl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3IuY2FuY2VsbGVkP3Iub3B0aW9ucy5kZWJ1ZyYmcy5kZWJ1ZyhcIkZldGNoLmNhdGNoIC0gcmVxdWVzdCBjYW5jZWxsZWRcIik6KHIuY2FuY2VsbGVkPSEwLHIub3B0aW9ucy5kZWJ1ZyYmcy5kZWJ1ZyhcIkZldGNoLmNhdGNoXCIsZS5tZXNzYWdlKSxyLm9wdGlvbnMub25FbmQoZSkpfSkpfSxlLnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZmV0Y2godGhpcy5vcHRpb25zLnVybCxuKG4oe30sdGhpcy5pbml0KSx7aGVhZGVyczp0aGlzLm1ldGFkYXRhLnRvSGVhZGVycygpLG1ldGhvZDpcIlBPU1RcIixib2R5OmUsc2lnbmFsOnRoaXMuY29udHJvbGxlciYmdGhpcy5jb250cm9sbGVyLnNpZ25hbH0pKS50aGVuKChmdW5jdGlvbihlKXtpZih0Lm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5yZXNwb25zZVwiLGUpLHQub3B0aW9ucy5vbkhlYWRlcnMobmV3IG8uTWV0YWRhdGEoZS5oZWFkZXJzKSxlLnN0YXR1cyksIWUuYm9keSlyZXR1cm4gZTt0LnB1bXAoZS5ib2R5LmdldFJlYWRlcigpLGUpfSkpLmNhdGNoKChmdW5jdGlvbihlKXt0LmNhbmNlbGxlZD90Lm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5jYXRjaCAtIHJlcXVlc3QgY2FuY2VsbGVkXCIpOih0LmNhbmNlbGxlZD0hMCx0Lm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5jYXRjaFwiLGUubWVzc2FnZSksdC5vcHRpb25zLm9uRW5kKGUpKX0pKX0sZS5wcm90b3R5cGUuc2VuZE1lc3NhZ2U9ZnVuY3Rpb24oZSl7dGhpcy5zZW5kKGUpfSxlLnByb3RvdHlwZS5maW5pc2hTZW5kPWZ1bmN0aW9uKCl7fSxlLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbihlKXt0aGlzLm1ldGFkYXRhPWV9LGUucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5jYW5jZWxsZWQ/dGhpcy5vcHRpb25zLmRlYnVnJiZzLmRlYnVnKFwiRmV0Y2guY2FuY2VsIGFscmVhZHkgY2FuY2VsbGVkXCIpOih0aGlzLmNhbmNlbGxlZD0hMCx0aGlzLmNvbnRyb2xsZXI/KHRoaXMub3B0aW9ucy5kZWJ1ZyYmcy5kZWJ1ZyhcIkZldGNoLmNhbmNlbC5jb250cm9sbGVyLmFib3J0XCIpLHRoaXMuY29udHJvbGxlci5hYm9ydCgpKTp0aGlzLm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5jYW5jZWwubWlzc2luZyBhYm9ydCBjb250cm9sbGVyXCIpLHRoaXMucmVhZGVyPyh0aGlzLm9wdGlvbnMuZGVidWcmJnMuZGVidWcoXCJGZXRjaC5jYW5jZWwucmVhZGVyLmNhbmNlbFwiKSx0aGlzLnJlYWRlci5jYW5jZWwoKS5jYXRjaCgoZnVuY3Rpb24odCl7ZS5vcHRpb25zLmRlYnVnJiZzLmRlYnVnKFwiRmV0Y2guY2FuY2VsLnJlYWRlci5jYW5jZWwgZXhjZXB0aW9uXCIsdCl9KSkpOnRoaXMub3B0aW9ucy5kZWJ1ZyYmcy5kZWJ1ZyhcIkZldGNoLmNhbmNlbCBiZWZvcmUgcmVhZGVyXCIpKX0sZX0oKTt0LmRldGVjdEZldGNoU3VwcG9ydD1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZXNwb25zZSYmUmVzcG9uc2UucHJvdG90eXBlLmhhc093blByb3BlcnR5KFwiYm9keVwiKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgSGVhZGVyc319LDg1OTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Dcm9zc0Jyb3dzZXJIdHRwVHJhbnNwb3J0PXZvaWQgMDt2YXIgbj1yKDIyOSksbz1yKDIxMCk7dC5Dcm9zc0Jyb3dzZXJIdHRwVHJhbnNwb3J0PWZ1bmN0aW9uKGUpe2lmKG4uZGV0ZWN0RmV0Y2hTdXBwb3J0KCkpe3ZhciB0PXtjcmVkZW50aWFsczplLndpdGhDcmVkZW50aWFscz9cImluY2x1ZGVcIjpcInNhbWUtb3JpZ2luXCJ9O3JldHVybiBuLkZldGNoUmVhZGFibGVTdHJlYW1UcmFuc3BvcnQodCl9cmV0dXJuIG8uWGhyVHJhbnNwb3J0KHt3aXRoQ3JlZGVudGlhbHM6ZS53aXRoQ3JlZGVudGlhbHN9KX19LDIxMDpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4sbz10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuc3RyaW5nVG9BcnJheUJ1ZmZlcj10Lk1vekNodW5rZWRBcnJheUJ1ZmZlclhIUj10LlhIUj10LlhoclRyYW5zcG9ydD12b2lkIDA7dmFyIHM9cig2NSksaT1yKDM0NiksYT1yKDg0OSk7dC5YaHJUcmFuc3BvcnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKGEuZGV0ZWN0TW96WEhSU3VwcG9ydCgpKXJldHVybiBuZXcgZCh0LGUpO2lmKGEuZGV0ZWN0WEhST3ZlcnJpZGVNaW1lVHlwZVN1cHBvcnQoKSlyZXR1cm4gbmV3IHUodCxlKTt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGVudmlyb25tZW50J3MgWEhSIGltcGxlbWVudGF0aW9uIGNhbm5vdCBzdXBwb3J0IGJpbmFyeSB0cmFuc2Zlci5cIil9fTt2YXIgdT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLm9wdGlvbnM9ZSx0aGlzLmluaXQ9dH1yZXR1cm4gZS5wcm90b3R5cGUub25Qcm9ncmVzc0V2ZW50PWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiWEhSLm9uUHJvZ3Jlc3NFdmVudC5sZW5ndGg6IFwiLHRoaXMueGhyLnJlc3BvbnNlLmxlbmd0aCk7dmFyIGU9dGhpcy54aHIucmVzcG9uc2Uuc3Vic3RyKHRoaXMuaW5kZXgpO3RoaXMuaW5kZXg9dGhpcy54aHIucmVzcG9uc2UubGVuZ3RoO3ZhciB0PXAoZSk7dGhpcy5vcHRpb25zLm9uQ2h1bmsodCl9LGUucHJvdG90eXBlLm9uTG9hZEV2ZW50PWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiWEhSLm9uTG9hZEV2ZW50XCIpLHRoaXMub3B0aW9ucy5vbkVuZCgpfSxlLnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlPWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiWEhSLm9uU3RhdGVDaGFuZ2VcIix0aGlzLnhoci5yZWFkeVN0YXRlKSx0aGlzLnhoci5yZWFkeVN0YXRlPT09WE1MSHR0cFJlcXVlc3QuSEVBREVSU19SRUNFSVZFRCYmdGhpcy5vcHRpb25zLm9uSGVhZGVycyhuZXcgcy5NZXRhZGF0YSh0aGlzLnhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSksdGhpcy54aHIuc3RhdHVzKX0sZS5wcm90b3R5cGUuc2VuZE1lc3NhZ2U9ZnVuY3Rpb24oZSl7dGhpcy54aHIuc2VuZChlKX0sZS5wcm90b3R5cGUuZmluaXNoU2VuZD1mdW5jdGlvbigpe30sZS5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLm1ldGFkYXRhPWU7dmFyIHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3RoaXMueGhyPXIsci5vcGVuKFwiUE9TVFwiLHRoaXMub3B0aW9ucy51cmwpLHRoaXMuY29uZmlndXJlWGhyKCksdGhpcy5tZXRhZGF0YS5mb3JFYWNoKChmdW5jdGlvbihlLHQpe3Iuc2V0UmVxdWVzdEhlYWRlcihlLHQuam9pbihcIiwgXCIpKX0pKSxyLndpdGhDcmVkZW50aWFscz1Cb29sZWFuKHRoaXMuaW5pdC53aXRoQ3JlZGVudGlhbHMpLHIuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIix0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSksci5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIix0aGlzLm9uUHJvZ3Jlc3NFdmVudC5iaW5kKHRoaXMpKSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZW5kXCIsdGhpcy5vbkxvYWRFdmVudC5iaW5kKHRoaXMpKSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLChmdW5jdGlvbihlKXt0Lm9wdGlvbnMuZGVidWcmJmkuZGVidWcoXCJYSFIuZXJyb3JcIixlKSx0Lm9wdGlvbnMub25FbmQoZS5lcnJvcil9KSl9LGUucHJvdG90eXBlLmNvbmZpZ3VyZVhocj1mdW5jdGlvbigpe3RoaXMueGhyLnJlc3BvbnNlVHlwZT1cInRleHRcIix0aGlzLnhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKX0sZS5wcm90b3R5cGUuY2FuY2VsPWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiWEhSLmFib3J0XCIpLHRoaXMueGhyLmFib3J0KCl9LGV9KCk7dC5YSFI9dTt2YXIgZD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIG51bGwhPT1lJiZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gbyh0LGUpLHQucHJvdG90eXBlLmNvbmZpZ3VyZVhocj1mdW5jdGlvbigpe3RoaXMub3B0aW9ucy5kZWJ1ZyYmaS5kZWJ1ZyhcIk1velhIUi5jb25maWd1cmVYaHI6IHNldHRpbmcgcmVzcG9uc2VUeXBlIHRvICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcidcIiksdGhpcy54aHIucmVzcG9uc2VUeXBlPVwibW96LWNodW5rZWQtYXJyYXlidWZmZXJcIn0sdC5wcm90b3R5cGUub25Qcm9ncmVzc0V2ZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy54aHIucmVzcG9uc2U7dGhpcy5vcHRpb25zLmRlYnVnJiZpLmRlYnVnKFwiTW96WEhSLm9uUHJvZ3Jlc3NFdmVudDogXCIsbmV3IFVpbnQ4QXJyYXkoZSkpLHRoaXMub3B0aW9ucy5vbkNodW5rKG5ldyBVaW50OEFycmF5KGUpKX0sdH0odSk7ZnVuY3Rpb24gYyhlLHQpe3ZhciByPWUuY2hhckNvZGVBdCh0KTtpZihyPj01NTI5NiYmcjw9NTYzMTkpe3ZhciBuPWUuY2hhckNvZGVBdCh0KzEpO24+PTU2MzIwJiZuPD01NzM0MyYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCkpfXJldHVybiByfWZ1bmN0aW9uIHAoZSl7Zm9yKHZhciB0PW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTAsbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1TdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0P2UuY29kZVBvaW50QXQobik6YyhlLG4pO3RbcisrXT0yNTUmb31yZXR1cm4gdH10Lk1vekNodW5rZWRBcnJheUJ1ZmZlclhIUj1kLHQuc3RyaW5nVG9BcnJheUJ1ZmZlcj1wfSw4NDk6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgcjtmdW5jdGlvbiBuKCl7aWYodm9pZCAwIT09cilyZXR1cm4gcjtpZihYTUxIdHRwUmVxdWVzdCl7cj1uZXcgWE1MSHR0cFJlcXVlc3Q7dHJ5e3Iub3BlbihcIkdFVFwiLFwiaHR0cHM6Ly9sb2NhbGhvc3RcIil9Y2F0Y2goZSl7fX1yZXR1cm4gcn1mdW5jdGlvbiBvKGUpe3ZhciB0PW4oKTtpZighdClyZXR1cm4hMTt0cnl7cmV0dXJuIHQucmVzcG9uc2VUeXBlPWUsdC5yZXNwb25zZVR5cGU9PT1lfWNhdGNoKGUpe31yZXR1cm4hMX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRldGVjdFhIUk92ZXJyaWRlTWltZVR5cGVTdXBwb3J0PXQuZGV0ZWN0TW96WEhSU3VwcG9ydD10LnhoclN1cHBvcnRzUmVzcG9uc2VUeXBlPXZvaWQgMCx0LnhoclN1cHBvcnRzUmVzcG9uc2VUeXBlPW8sdC5kZXRlY3RNb3pYSFJTdXBwb3J0PWZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0JiZvKFwibW96LWNodW5rZWQtYXJyYXlidWZmZXJcIil9LHQuZGV0ZWN0WEhST3ZlcnJpZGVNaW1lVHlwZVN1cHBvcnQ9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgWE1MSHR0cFJlcXVlc3QmJlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShcIm92ZXJyaWRlTWltZVR5cGVcIil9fSw1NDA6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV2Vic29ja2V0VHJhbnNwb3J0PXZvaWQgMDt2YXIgbixvPXIoMzQ2KSxzPXIoNjE3KTshZnVuY3Rpb24oZSl7ZVtlLkZJTklTSF9TRU5EPTFdPVwiRklOSVNIX1NFTkRcIn0obnx8KG49e30pKTt2YXIgaT1uZXcgVWludDhBcnJheShbMV0pO3QuV2Vic29ja2V0VHJhbnNwb3J0PWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXtlLmRlYnVnJiZvLmRlYnVnKFwid2Vic29ja2V0UmVxdWVzdFwiLGUpO3ZhciB0LHI9ZnVuY3Rpb24oZSl7aWYoXCJodHRwczovL1wiPT09ZS5zdWJzdHIoMCw4KSlyZXR1cm5cIndzczovL1wiK2Uuc3Vic3RyKDgpO2lmKFwiaHR0cDovL1wiPT09ZS5zdWJzdHIoMCw3KSlyZXR1cm5cIndzOi8vXCIrZS5zdWJzdHIoNyk7dGhyb3cgbmV3IEVycm9yKFwiV2Vic29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3RlZCB3aXRoIG5vbi1odHRwczovLyBvciBodHRwOi8vIGhvc3QuXCIpfShlLnVybCksYT1bXTtmdW5jdGlvbiB1KGUpe2lmKGU9PT1uLkZJTklTSF9TRU5EKXQuc2VuZChpKTtlbHNle3ZhciByPWUsbz1uZXcgSW50OEFycmF5KHIuYnl0ZUxlbmd0aCsxKTtvLnNldChuZXcgVWludDhBcnJheShbMF0pKSxvLnNldChyLDEpLHQuc2VuZChvKX19cmV0dXJue3NlbmRNZXNzYWdlOmZ1bmN0aW9uKGUpe3QmJnQucmVhZHlTdGF0ZSE9PXQuQ09OTkVDVElORz91KGUpOmEucHVzaChlKX0sZmluaXNoU2VuZDpmdW5jdGlvbigpe3QmJnQucmVhZHlTdGF0ZSE9PXQuQ09OTkVDVElORz91KG4uRklOSVNIX1NFTkQpOmEucHVzaChuLkZJTklTSF9TRU5EKX0sc3RhcnQ6ZnVuY3Rpb24obil7KHQ9bmV3IFdlYlNvY2tldChyLFtcImdycGMtd2Vic29ja2V0c1wiXSkpLmJpbmFyeVR5cGU9XCJhcnJheWJ1ZmZlclwiLHQub25vcGVuPWZ1bmN0aW9uKCl7dmFyIHI7ZS5kZWJ1ZyYmby5kZWJ1ZyhcIndlYnNvY2tldFJlcXVlc3Qub25vcGVuXCIpLHQuc2VuZCgocj1cIlwiLG4uZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtyKz1lK1wiOiBcIit0LmpvaW4oXCIsIFwiKStcIlxcclxcblwifSkpLHMuZW5jb2RlQVNDSUkocikpKSxhLmZvckVhY2goKGZ1bmN0aW9uKGUpe3UoZSl9KSl9LHQub25jbG9zZT1mdW5jdGlvbih0KXtlLmRlYnVnJiZvLmRlYnVnKFwid2Vic29ja2V0UmVxdWVzdC5vbmNsb3NlXCIsdCksZS5vbkVuZCgpfSx0Lm9uZXJyb3I9ZnVuY3Rpb24odCl7ZS5kZWJ1ZyYmby5kZWJ1ZyhcIndlYnNvY2tldFJlcXVlc3Qub25lcnJvclwiLHQpfSx0Lm9ubWVzc2FnZT1mdW5jdGlvbih0KXtlLm9uQ2h1bmsobmV3IFVpbnQ4QXJyYXkodC5kYXRhKSl9fSxjYW5jZWw6ZnVuY3Rpb24oKXtlLmRlYnVnJiZvLmRlYnVnKFwid2Vic29ja2V0LmFib3J0XCIpLHQuY2xvc2UoKX19fShlKX19fSwzNTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC51bmFyeT12b2lkIDA7dmFyIG49cig2NSksbz1yKDkzNCk7dC51bmFyeT1mdW5jdGlvbihlLHQpe2lmKGUucmVzcG9uc2VTdHJlYW0pdGhyb3cgbmV3IEVycm9yKFwiLnVuYXJ5IGNhbm5vdCBiZSB1c2VkIHdpdGggc2VydmVyLXN0cmVhbWluZyBtZXRob2RzLiBVc2UgLmludm9rZSBvciAuY2xpZW50IGluc3RlYWQuXCIpO2lmKGUucmVxdWVzdFN0cmVhbSl0aHJvdyBuZXcgRXJyb3IoXCIudW5hcnkgY2Fubm90IGJlIHVzZWQgd2l0aCBjbGllbnQtc3RyZWFtaW5nIG1ldGhvZHMuIFVzZSAuY2xpZW50IGluc3RlYWQuXCIpO3ZhciByPW51bGwscz1udWxsLGk9by5jbGllbnQoZSx7aG9zdDp0Lmhvc3QsdHJhbnNwb3J0OnQudHJhbnNwb3J0LGRlYnVnOnQuZGVidWd9KTtyZXR1cm4gaS5vbkhlYWRlcnMoKGZ1bmN0aW9uKGUpe3I9ZX0pKSxpLm9uTWVzc2FnZSgoZnVuY3Rpb24oZSl7cz1lfSkpLGkub25FbmQoKGZ1bmN0aW9uKGUsbyxpKXt0Lm9uRW5kKHtzdGF0dXM6ZSxzdGF0dXNNZXNzYWdlOm8saGVhZGVyczpyfHxuZXcgbi5NZXRhZGF0YSxtZXNzYWdlOnMsdHJhaWxlcnM6aX0pfSkpLGkuc3RhcnQodC5tZXRhZGF0YSksaS5zZW5kKHQucmVxdWVzdCksaS5maW5pc2hTZW5kKCkse2Nsb3NlOmZ1bmN0aW9uKCl7aS5jbG9zZSgpfX19fSw4ODI6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmZyYW1lUmVxdWVzdD12b2lkIDAsdC5mcmFtZVJlcXVlc3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zZXJpYWxpemVCaW5hcnkoKSxyPW5ldyBBcnJheUJ1ZmZlcih0LmJ5dGVMZW5ndGgrNSk7cmV0dXJuIG5ldyBEYXRhVmlldyhyLDEsNCkuc2V0VWludDMyKDAsdC5sZW5ndGgsITEpLG5ldyBVaW50OEFycmF5KHIsNSkuc2V0KHQpLG5ldyBVaW50OEFycmF5KHIpfX19LHQ9e30sZnVuY3Rpb24gcihuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIG89dFtuXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsciksby5leHBvcnRzfSg2MDcpO3ZhciBlLHR9KSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gYXNQcm9taXNlO1xyXG5cclxuLyoqXHJcbiAqIENhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwuYXNQcm9taXNlfS5cclxuICogQHR5cGVkZWYgYXNQcm9taXNlQ2FsbGJhY2tcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnlcclxuICogQHBhcmFtIHsuLi4qfSBwYXJhbXMgQWRkaXRpb25hbCBhcmd1bWVudHNcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHByb21pc2UgZnJvbSBhIG5vZGUtc3R5bGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7YXNQcm9taXNlQ2FsbGJhY2t9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcclxuICogQHBhcmFtIHsqfSBjdHggRnVuY3Rpb24gY29udGV4dFxyXG4gKiBAcGFyYW0gey4uLip9IHBhcmFtcyBGdW5jdGlvbiBhcmd1bWVudHNcclxuICogQHJldHVybnMge1Byb21pc2U8Kj59IFByb21pc2lmaWVkIGZ1bmN0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBhc1Byb21pc2UoZm4sIGN0eC8qLCB2YXJhcmdzICovKSB7XHJcbiAgICB2YXIgcGFyYW1zICA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSksXHJcbiAgICAgICAgb2Zmc2V0ICA9IDAsXHJcbiAgICAgICAgaW5kZXggICA9IDIsXHJcbiAgICAgICAgcGVuZGluZyA9IHRydWU7XHJcbiAgICB3aGlsZSAoaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoKVxyXG4gICAgICAgIHBhcmFtc1tvZmZzZXQrK10gPSBhcmd1bWVudHNbaW5kZXgrK107XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgcGFyYW1zW29mZnNldF0gPSBmdW5jdGlvbiBjYWxsYmFjayhlcnIvKiwgdmFyYXJncyAqLykge1xyXG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBwYXJhbXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbb2Zmc2V0KytdID0gYXJndW1lbnRzW29mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZS5hcHBseShudWxsLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmbi5hcHBseShjdHggfHwgbnVsbCwgcGFyYW1zKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKipcclxuICogQSBtaW5pbWFsIGJhc2U2NCBpbXBsZW1lbnRhdGlvbiBmb3IgbnVtYmVyIGFycmF5cy5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIGJhc2U2NCA9IGV4cG9ydHM7XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgYnl0ZSBsZW5ndGggb2YgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEJ5dGUgbGVuZ3RoXHJcbiAqL1xyXG5iYXNlNjQubGVuZ3RoID0gZnVuY3Rpb24gbGVuZ3RoKHN0cmluZykge1xyXG4gICAgdmFyIHAgPSBzdHJpbmcubGVuZ3RoO1xyXG4gICAgaWYgKCFwKVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgdmFyIG4gPSAwO1xyXG4gICAgd2hpbGUgKC0tcCAlIDQgPiAxICYmIHN0cmluZy5jaGFyQXQocCkgPT09IFwiPVwiKVxyXG4gICAgICAgICsrbjtcclxuICAgIHJldHVybiBNYXRoLmNlaWwoc3RyaW5nLmxlbmd0aCAqIDMpIC8gNCAtIG47XHJcbn07XHJcblxyXG4vLyBCYXNlNjQgZW5jb2RpbmcgdGFibGVcclxudmFyIGI2NCA9IG5ldyBBcnJheSg2NCk7XHJcblxyXG4vLyBCYXNlNjQgZGVjb2RpbmcgdGFibGVcclxudmFyIHM2NCA9IG5ldyBBcnJheSgxMjMpO1xyXG5cclxuLy8gNjUuLjkwLCA5Ny4uMTIyLCA0OC4uNTcsIDQzLCA0N1xyXG5mb3IgKHZhciBpID0gMDsgaSA8IDY0OylcclxuICAgIHM2NFtiNjRbaV0gPSBpIDwgMjYgPyBpICsgNjUgOiBpIDwgNTIgPyBpICsgNzEgOiBpIDwgNjIgPyBpIC0gNCA6IGkgLSA1OSB8IDQzXSA9IGkrKztcclxuXHJcbi8qKlxyXG4gKiBFbmNvZGVzIGEgYnVmZmVyIHRvIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZmZlciBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBTb3VyY2Ugc3RhcnRcclxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBTb3VyY2UgZW5kXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuYmFzZTY0LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShidWZmZXIsIHN0YXJ0LCBlbmQpIHtcclxuICAgIHZhciBwYXJ0cyA9IG51bGwsXHJcbiAgICAgICAgY2h1bmsgPSBbXTtcclxuICAgIHZhciBpID0gMCwgLy8gb3V0cHV0IGluZGV4XHJcbiAgICAgICAgaiA9IDAsIC8vIGdvdG8gaW5kZXhcclxuICAgICAgICB0OyAgICAgLy8gdGVtcG9yYXJ5XHJcbiAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcclxuICAgICAgICB2YXIgYiA9IGJ1ZmZlcltzdGFydCsrXTtcclxuICAgICAgICBzd2l0Y2ggKGopIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFtiID4+IDJdO1xyXG4gICAgICAgICAgICAgICAgdCA9IChiICYgMykgPDwgNDtcclxuICAgICAgICAgICAgICAgIGogPSAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbdCB8IGIgPj4gNF07XHJcbiAgICAgICAgICAgICAgICB0ID0gKGIgJiAxNSkgPDwgMjtcclxuICAgICAgICAgICAgICAgIGogPSAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbdCB8IGIgPj4gNl07XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W2IgJiA2M107XHJcbiAgICAgICAgICAgICAgICBqID0gMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaSA+IDgxOTEpIHtcclxuICAgICAgICAgICAgKHBhcnRzIHx8IChwYXJ0cyA9IFtdKSkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmspKTtcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGopIHtcclxuICAgICAgICBjaHVua1tpKytdID0gYjY0W3RdO1xyXG4gICAgICAgIGNodW5rW2krK10gPSA2MTtcclxuICAgICAgICBpZiAoaiA9PT0gMSlcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9IDYxO1xyXG4gICAgfVxyXG4gICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgaWYgKGkpXHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKSk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKTtcclxufTtcclxuXHJcbnZhciBpbnZhbGlkRW5jb2RpbmcgPSBcImludmFsaWQgZW5jb2RpbmdcIjtcclxuXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGEgYnVmZmVyLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFNvdXJjZSBzdHJpbmdcclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgRGVzdGluYXRpb24gYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgRGVzdGluYXRpb24gb2Zmc2V0XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBieXRlcyB3cml0dGVuXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBlbmNvZGluZyBpcyBpbnZhbGlkXHJcbiAqL1xyXG5iYXNlNjQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHN0cmluZywgYnVmZmVyLCBvZmZzZXQpIHtcclxuICAgIHZhciBzdGFydCA9IG9mZnNldDtcclxuICAgIHZhciBqID0gMCwgLy8gZ290byBpbmRleFxyXG4gICAgICAgIHQ7ICAgICAvLyB0ZW1wb3JhcnlcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDspIHtcclxuICAgICAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGkrKyk7XHJcbiAgICAgICAgaWYgKGMgPT09IDYxICYmIGogPiAxKVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBpZiAoKGMgPSBzNjRbY10pID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGludmFsaWRFbmNvZGluZyk7XHJcbiAgICAgICAgc3dpdGNoIChqKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHQgPSBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IHQgPDwgMiB8IChjICYgNDgpID4+IDQ7XHJcbiAgICAgICAgICAgICAgICB0ID0gYztcclxuICAgICAgICAgICAgICAgIGogPSAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAodCAmIDE1KSA8PCA0IHwgKGMgJiA2MCkgPj4gMjtcclxuICAgICAgICAgICAgICAgIHQgPSBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDM7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9ICh0ICYgMykgPDwgNiB8IGM7XHJcbiAgICAgICAgICAgICAgICBqID0gMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChqID09PSAxKVxyXG4gICAgICAgIHRocm93IEVycm9yKGludmFsaWRFbmNvZGluZyk7XHJcbiAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBzdHJpbmcgYXBwZWFycyB0byBiZSBiYXNlNjQgZW5jb2RlZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gdGVzdFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHByb2JhYmx5IGJhc2U2NCBlbmNvZGVkLCBvdGhlcndpc2UgZmFsc2VcclxuICovXHJcbmJhc2U2NC50ZXN0ID0gZnVuY3Rpb24gdGVzdChzdHJpbmcpIHtcclxuICAgIHJldHVybiAvXig/OltBLVphLXowLTkrL117NH0pKig/OltBLVphLXowLTkrL117Mn09PXxbQS1aYS16MC05Ky9dezN9PSk/JC8udGVzdChzdHJpbmcpO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyBldmVudCBlbWl0dGVyIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIEEgbWluaW1hbCBldmVudCBlbWl0dGVyLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxyXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLCo+fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldnQgRXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBMaXN0ZW5lclxyXG4gKiBAcGFyYW0geyp9IFtjdHhdIExpc3RlbmVyIGNvbnRleHRcclxuICogQHJldHVybnMge3V0aWwuRXZlbnRFbWl0dGVyfSBgdGhpc2BcclxuICovXHJcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldnQsIGZuLCBjdHgpIHtcclxuICAgICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSB8fCAodGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBbXSkpLnB1c2goe1xyXG4gICAgICAgIGZuICA6IGZuLFxyXG4gICAgICAgIGN0eCA6IGN0eCB8fCB0aGlzXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgb3IgYW55IG1hdGNoaW5nIGxpc3RlbmVycyBpZiBhcmd1bWVudHMgYXJlIG9taXR0ZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZXZ0XSBFdmVudCBuYW1lLiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgaWYgb21pdHRlZC5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2ZuXSBMaXN0ZW5lciB0byByZW1vdmUuIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBvZiBgZXZ0YCBpZiBvbWl0dGVkLlxyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiBvZmYoZXZ0LCBmbikge1xyXG4gICAgaWYgKGV2dCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGZuID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1tldnRdID0gW107XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOylcclxuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0uZm4gPT09IGZuKVxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXRzIGFuIGV2ZW50IGJ5IGNhbGxpbmcgaXRzIGxpc3RlbmVycyB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZ0IEV2ZW50IG5hbWVcclxuICogQHBhcmFtIHsuLi4qfSBhcmdzIEFyZ3VtZW50c1xyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldnQpIHtcclxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcclxuICAgIGlmIChsaXN0ZW5lcnMpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdLFxyXG4gICAgICAgICAgICBpID0gMTtcclxuICAgICAgICBmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7KVxyXG4gICAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOylcclxuICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpKytdLmN0eCwgYXJncyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZmFjdG9yeSk7XHJcblxyXG4vKipcclxuICogUmVhZHMgLyB3cml0ZXMgZmxvYXRzIC8gZG91YmxlcyBmcm9tIC8gdG8gYnVmZmVycy5cclxuICogQG5hbWUgdXRpbC5mbG9hdFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhIDMyIGJpdCBmbG9hdCB0byBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQud3JpdGVGbG9hdExFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSAzMiBiaXQgZmxvYXQgdG8gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LndyaXRlRmxvYXRCRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBUYXJnZXQgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGFyZ2V0IGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSAzMiBiaXQgZmxvYXQgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZEZsb2F0TEVcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBTb3VyY2UgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgMzIgYml0IGZsb2F0IGZyb20gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LnJlYWRGbG9hdEJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGxpdHRsZSBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8vIEZhY3RvcnkgZnVuY3Rpb24gZm9yIHRoZSBwdXJwb3NlIG9mIG5vZGUtYmFzZWQgdGVzdGluZyBpbiBtb2RpZmllZCBnbG9iYWwgZW52aXJvbm1lbnRzXHJcbmZ1bmN0aW9uIGZhY3RvcnkoZXhwb3J0cykge1xyXG5cclxuICAgIC8vIGZsb2F0OiB0eXBlZCBhcnJheVxyXG4gICAgaWYgKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGYzMiA9IG5ldyBGbG9hdDMyQXJyYXkoWyAtMCBdKSxcclxuICAgICAgICAgICAgZjhiID0gbmV3IFVpbnQ4QXJyYXkoZjMyLmJ1ZmZlciksXHJcbiAgICAgICAgICAgIGxlICA9IGY4YlszXSA9PT0gMTI4O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZUZsb2F0X2YzMl9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmMzJbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfZjMyX3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGYzMlswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzNdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4YlsxXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRmxvYXRMRSA9IGxlID8gd3JpdGVGbG9hdF9mMzJfY3B5IDogd3JpdGVGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSBsZSA/IHdyaXRlRmxvYXRfZjMyX3JldiA6IHdyaXRlRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsxXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gbGUgPyByZWFkRmxvYXRfZjMyX2NweSA6IHJlYWRGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRCRSA9IGxlID8gcmVhZEZsb2F0X2YzMl9yZXYgOiByZWFkRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAvLyBmbG9hdDogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfaWVlZTc1NCh3cml0ZVVpbnQsIHZhbCwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSB2YWwgPCAwID8gMSA6IDA7XHJcbiAgICAgICAgICAgIGlmIChzaWduKVxyXG4gICAgICAgICAgICAgICAgdmFsID0gLXZhbDtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgxIC8gdmFsID4gMCA/IC8qIHBvc2l0aXZlICovIDAgOiAvKiBuZWdhdGl2ZSAwICovIDIxNDc0ODM2NDgsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOYU4odmFsKSlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQzMjg5MzQ0LCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA+IDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpIC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IDIxMzkwOTUwNDApID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA8IDEuMTc1NDk0MzUwODIyMjg3NWUtMzgpIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoKHNpZ24gPDwgMzEgfCBNYXRoLnJvdW5kKHZhbCAvIDEuNDAxMjk4NDY0MzI0ODE3ZS00NSkpID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gTWF0aC5yb3VuZCh2YWwgKiBNYXRoLnBvdygyLCAtZXhwb25lbnQpICogODM4ODYwOCkgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgZXhwb25lbnQgKyAxMjcgPDwgMjMgfCBtYW50aXNzYSkgPj4+IDAsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0TEUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRMRSk7XHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRGbG9hdF9pZWVlNzU0KHJlYWRVaW50LCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICB2YXIgdWludCA9IHJlYWRVaW50KGJ1ZiwgcG9zKSxcclxuICAgICAgICAgICAgICAgIHNpZ24gPSAodWludCA+PiAzMSkgKiAyICsgMSxcclxuICAgICAgICAgICAgICAgIGV4cG9uZW50ID0gdWludCA+Pj4gMjMgJiAyNTUsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHVpbnQgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDI1NVxyXG4gICAgICAgICAgICAgICAgPyBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgPyBOYU5cclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIEluZmluaXR5XHJcbiAgICAgICAgICAgICAgICA6IGV4cG9uZW50ID09PSAwIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICA/IHNpZ24gKiAxLjQwMTI5ODQ2NDMyNDgxN2UtNDUgKiBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgOiBzaWduICogTWF0aC5wb3coMiwgZXhwb25lbnQgLSAxNTApICogKG1hbnRpc3NhICsgODM4ODYwOCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludExFKTtcclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdEJFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIC8vIGRvdWJsZTogdHlwZWQgYXJyYXlcclxuICAgIGlmICh0eXBlb2YgRmxvYXQ2NEFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBmNjQgPSBuZXcgRmxvYXQ2NEFycmF5KFstMF0pLFxyXG4gICAgICAgICAgICBmOGIgPSBuZXcgVWludDhBcnJheShmNjQuYnVmZmVyKSxcclxuICAgICAgICAgICAgbGUgID0gZjhiWzddID09PSAxMjg7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2Y2NF9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmNjRbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDRdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNV0gPSBmOGJbNV07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA2XSA9IGY4Yls2XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDddID0gZjhiWzddO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd3JpdGVEb3VibGVfZjY0X3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGY2NFswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzddO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbNl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4Yls1XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNF0gPSBmOGJbM107XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA1XSA9IGY4YlsyXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDZdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgN10gPSBmOGJbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVMRSA9IGxlID8gd3JpdGVEb3VibGVfZjY0X2NweSA6IHdyaXRlRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlQkUgPSBsZSA/IHdyaXRlRG91YmxlX2Y2NF9yZXYgOiB3cml0ZURvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbNF0gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzZdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbN10gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzddID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbNl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzRdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbM10gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzFdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbMF0gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gbGUgPyByZWFkRG91YmxlX2Y2NF9jcHkgOiByZWFkRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWREb3VibGVCRSA9IGxlID8gcmVhZERvdWJsZV9mNjRfcmV2IDogcmVhZERvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgIC8vIGRvdWJsZTogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2llZWU3NTQod3JpdGVVaW50LCBvZmYwLCBvZmYxLCB2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIHZhciBzaWduID0gdmFsIDwgMCA/IDEgOiAwO1xyXG4gICAgICAgICAgICBpZiAoc2lnbilcclxuICAgICAgICAgICAgICAgIHZhbCA9IC12YWw7XHJcbiAgICAgICAgICAgIGlmICh2YWwgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KDEgLyB2YWwgPiAwID8gLyogcG9zaXRpdmUgKi8gMCA6IC8qIG5lZ2F0aXZlIDAgKi8gMjE0NzQ4MzY0OCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMCwgYnVmLCBwb3MgKyBvZmYwKTtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQ2OTU5MzYwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbCA+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KSB7IC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgMjE0NjQzNTA3MikgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFudGlzc2E7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgMi4yMjUwNzM4NTg1MDcyMDE0ZS0zMDgpIHsgLy8gZGVub3JtYWxcclxuICAgICAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHZhbCAvIDVlLTMyNDtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgbWFudGlzc2EgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBvbmVudCA9PT0gMTAyNClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb25lbnQgPSAxMDIzO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gdmFsICogTWF0aC5wb3coMiwgLWV4cG9uZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgKiA0NTAzNTk5NjI3MzcwNDk2ID4+PiAwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IGV4cG9uZW50ICsgMTAyMyA8PCAyMCB8IG1hbnRpc3NhICogMTA0ODU3NiAmIDEwNDg1NzUpID4+PiAwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlTEUgPSB3cml0ZURvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgd3JpdGVVaW50TEUsIDAsIDQpO1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVCRSA9IHdyaXRlRG91YmxlX2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSwgNCwgMCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWREb3VibGVfaWVlZTc1NChyZWFkVWludCwgb2ZmMCwgb2ZmMSwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIGxvID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYwKSxcclxuICAgICAgICAgICAgICAgIGhpID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSAoaGkgPj4gMzEpICogMiArIDEsXHJcbiAgICAgICAgICAgICAgICBleHBvbmVudCA9IGhpID4+PiAyMCAmIDIwNDcsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IDQyOTQ5NjcyOTYgKiAoaGkgJiAxMDQ4NTc1KSArIGxvO1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDIwNDdcclxuICAgICAgICAgICAgICAgID8gbWFudGlzc2FcclxuICAgICAgICAgICAgICAgID8gTmFOXHJcbiAgICAgICAgICAgICAgICA6IHNpZ24gKiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgOiBleHBvbmVudCA9PT0gMCAvLyBkZW5vcm1hbFxyXG4gICAgICAgICAgICAgICAgPyBzaWduICogNWUtMzI0ICogbWFudGlzc2FcclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIE1hdGgucG93KDIsIGV4cG9uZW50IC0gMTA3NSkgKiAobWFudGlzc2EgKyA0NTAzNTk5NjI3MzcwNDk2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gcmVhZERvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgcmVhZFVpbnRMRSwgMCwgNCk7XHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlQkUgPSByZWFkRG91YmxlX2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFLCA0LCAwKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIHJldHVybiBleHBvcnRzO1xyXG59XHJcblxyXG4vLyB1aW50IGhlbHBlcnNcclxuXHJcbmZ1bmN0aW9uIHdyaXRlVWludExFKHZhbCwgYnVmLCBwb3MpIHtcclxuICAgIGJ1Zltwb3MgICAgXSA9ICB2YWwgICAgICAgICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDFdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgMl0gPSAgdmFsID4+PiAxNiAmIDI1NTtcclxuICAgIGJ1Zltwb3MgKyAzXSA9ICB2YWwgPj4+IDI0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cml0ZVVpbnRCRSh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICBidWZbcG9zICAgIF0gPSAgdmFsID4+PiAyNDtcclxuICAgIGJ1Zltwb3MgKyAxXSA9ICB2YWwgPj4+IDE2ICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgM10gPSAgdmFsICAgICAgICAmIDI1NTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZFVpbnRMRShidWYsIHBvcykge1xyXG4gICAgcmV0dXJuIChidWZbcG9zICAgIF1cclxuICAgICAgICAgIHwgYnVmW3BvcyArIDFdIDw8IDhcclxuICAgICAgICAgIHwgYnVmW3BvcyArIDJdIDw8IDE2XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAzXSA8PCAyNCkgPj4+IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRVaW50QkUoYnVmLCBwb3MpIHtcclxuICAgIHJldHVybiAoYnVmW3BvcyAgICBdIDw8IDI0XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAxXSA8PCAxNlxyXG4gICAgICAgICAgfCBidWZbcG9zICsgMl0gPDwgOFxyXG4gICAgICAgICAgfCBidWZbcG9zICsgM10pID4+PiAwO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGlucXVpcmU7XHJcblxyXG4vKipcclxuICogUmVxdWlyZXMgYSBtb2R1bGUgb25seSBpZiBhdmFpbGFibGUuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lIE1vZHVsZSB0byByZXF1aXJlXHJcbiAqIEByZXR1cm5zIHs/T2JqZWN0fSBSZXF1aXJlZCBtb2R1bGUgaWYgYXZhaWxhYmxlIGFuZCBub3QgZW1wdHksIG90aGVyd2lzZSBgbnVsbGBcclxuICovXHJcbmZ1bmN0aW9uIGlucXVpcmUobW9kdWxlTmFtZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgbW9kID0gZXZhbChcInF1aXJlXCIucmVwbGFjZSgvXi8sXCJyZVwiKSkobW9kdWxlTmFtZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxyXG4gICAgICAgIGlmIChtb2QgJiYgKG1vZC5sZW5ndGggfHwgT2JqZWN0LmtleXMobW9kKS5sZW5ndGgpKVxyXG4gICAgICAgICAgICByZXR1cm4gbW9kO1xyXG4gICAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKipcclxuICogQSBtaW5pbWFsIFVURjggaW1wbGVtZW50YXRpb24gZm9yIG51bWJlciBhcnJheXMuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcbnZhciB1dGY4ID0gZXhwb3J0cztcclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBVVEY4IGJ5dGUgbGVuZ3RoIG9mIGEgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZ1xyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlIGxlbmd0aFxyXG4gKi9cclxudXRmOC5sZW5ndGggPSBmdW5jdGlvbiB1dGY4X2xlbmd0aChzdHJpbmcpIHtcclxuICAgIHZhciBsZW4gPSAwLFxyXG4gICAgICAgIGMgPSAwO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpXHJcbiAgICAgICAgICAgIGxlbiArPSAxO1xyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KVxyXG4gICAgICAgICAgICBsZW4gKz0gMjtcclxuICAgICAgICBlbHNlIGlmICgoYyAmIDB4RkMwMCkgPT09IDB4RDgwMCAmJiAoc3RyaW5nLmNoYXJDb2RlQXQoaSArIDEpICYgMHhGQzAwKSA9PT0gMHhEQzAwKSB7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgbGVuICs9IDQ7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIGxlbiArPSAzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlbjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBVVEY4IGJ5dGVzIGFzIGEgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZmZlciBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBTb3VyY2Ugc3RhcnRcclxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBTb3VyY2UgZW5kXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFN0cmluZyByZWFkXHJcbiAqL1xyXG51dGY4LnJlYWQgPSBmdW5jdGlvbiB1dGY4X3JlYWQoYnVmZmVyLCBzdGFydCwgZW5kKSB7XHJcbiAgICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7XHJcbiAgICBpZiAobGVuIDwgMSlcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIHZhciBwYXJ0cyA9IG51bGwsXHJcbiAgICAgICAgY2h1bmsgPSBbXSxcclxuICAgICAgICBpID0gMCwgLy8gY2hhciBvZmZzZXRcclxuICAgICAgICB0OyAgICAgLy8gdGVtcG9yYXJ5XHJcbiAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcclxuICAgICAgICB0ID0gYnVmZmVyW3N0YXJ0KytdO1xyXG4gICAgICAgIGlmICh0IDwgMTI4KVxyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gdDtcclxuICAgICAgICBlbHNlIGlmICh0ID4gMTkxICYmIHQgPCAyMjQpXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAodCAmIDMxKSA8PCA2IHwgYnVmZmVyW3N0YXJ0KytdICYgNjM7XHJcbiAgICAgICAgZWxzZSBpZiAodCA+IDIzOSAmJiB0IDwgMzY1KSB7XHJcbiAgICAgICAgICAgIHQgPSAoKHQgJiA3KSA8PCAxOCB8IChidWZmZXJbc3RhcnQrK10gJiA2MykgPDwgMTIgfCAoYnVmZmVyW3N0YXJ0KytdICYgNjMpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MykgLSAweDEwMDAwO1xyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gMHhEODAwICsgKHQgPj4gMTApO1xyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gMHhEQzAwICsgKHQgJiAxMDIzKTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9ICh0ICYgMTUpIDw8IDEyIHwgKGJ1ZmZlcltzdGFydCsrXSAmIDYzKSA8PCA2IHwgYnVmZmVyW3N0YXJ0KytdICYgNjM7XHJcbiAgICAgICAgaWYgKGkgPiA4MTkxKSB7XHJcbiAgICAgICAgICAgIChwYXJ0cyB8fCAocGFydHMgPSBbXSkpLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rKSk7XHJcbiAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChwYXJ0cykge1xyXG4gICAgICAgIGlmIChpKVxyXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSkpO1xyXG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSk7XHJcbn07XHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgc3RyaW5nIGFzIFVURjggYnl0ZXMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU291cmNlIHN0cmluZ1xyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZmZlciBEZXN0aW5hdGlvbiBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBEZXN0aW5hdGlvbiBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gQnl0ZXMgd3JpdHRlblxyXG4gKi9cclxudXRmOC53cml0ZSA9IGZ1bmN0aW9uIHV0Zjhfd3JpdGUoc3RyaW5nLCBidWZmZXIsIG9mZnNldCkge1xyXG4gICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgIGMxLCAvLyBjaGFyYWN0ZXIgMVxyXG4gICAgICAgIGMyOyAvLyBjaGFyYWN0ZXIgMlxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjMSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjMSA8IDEyOCkge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzE7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjMSA8IDIwNDgpIHtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgICAgICAgfCAxOTI7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAgICAgICAmIDYzIHwgMTI4O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoKGMxICYgMHhGQzAwKSA9PT0gMHhEODAwICYmICgoYzIgPSBzdHJpbmcuY2hhckNvZGVBdChpICsgMSkpICYgMHhGQzAwKSA9PT0gMHhEQzAwKSB7XHJcbiAgICAgICAgICAgIGMxID0gMHgxMDAwMCArICgoYzEgJiAweDAzRkYpIDw8IDEwKSArIChjMiAmIDB4MDNGRik7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDE4ICAgICAgfCAyNDA7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiAxMiAmIDYzIHwgMTI4O1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gNiAgJiA2MyB8IDEyODtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxICAgICAgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDEyICAgICAgfCAyMjQ7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiA2ICAmIDYzIHwgMTI4O1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgICAgICAgJiA2MyB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHBvb2w7XHJcblxyXG4vKipcclxuICogQW4gYWxsb2NhdG9yIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xBbGxvY2F0b3JcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgc2xpY2VyIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xTbGljZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU3RhcnQgb2Zmc2V0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgRW5kIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyIHNsaWNlXHJcbiAqIEB0aGlzIHtVaW50OEFycmF5fVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBIGdlbmVyYWwgcHVycG9zZSBidWZmZXIgcG9vbC5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7UG9vbEFsbG9jYXRvcn0gYWxsb2MgQWxsb2NhdG9yXHJcbiAqIEBwYXJhbSB7UG9vbFNsaWNlcn0gc2xpY2UgU2xpY2VyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT04MTkyXSBTbGFiIHNpemVcclxuICogQHJldHVybnMge1Bvb2xBbGxvY2F0b3J9IFBvb2xlZCBhbGxvY2F0b3JcclxuICovXHJcbmZ1bmN0aW9uIHBvb2woYWxsb2MsIHNsaWNlLCBzaXplKSB7XHJcbiAgICB2YXIgU0laRSAgID0gc2l6ZSB8fCA4MTkyO1xyXG4gICAgdmFyIE1BWCAgICA9IFNJWkUgPj4+IDE7XHJcbiAgICB2YXIgc2xhYiAgID0gbnVsbDtcclxuICAgIHZhciBvZmZzZXQgPSBTSVpFO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBvb2xfYWxsb2Moc2l6ZSkge1xyXG4gICAgICAgIGlmIChzaXplIDwgMSB8fCBzaXplID4gTUFYKVxyXG4gICAgICAgICAgICByZXR1cm4gYWxsb2Moc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCArIHNpemUgPiBTSVpFKSB7XHJcbiAgICAgICAgICAgIHNsYWIgPSBhbGxvYyhTSVpFKTtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ1ZiA9IHNsaWNlLmNhbGwoc2xhYiwgb2Zmc2V0LCBvZmZzZXQgKz0gc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAmIDcpIC8vIGFsaWduIHRvIDMyIGJpdFxyXG4gICAgICAgICAgICBvZmZzZXQgPSAob2Zmc2V0IHwgNykgKyAxO1xyXG4gICAgICAgIHJldHVybiBidWY7XHJcbiAgICB9O1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBMb25nQml0cztcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cy5cbiAqIEBjbGFzc2Rlc2MgSGVscGVyIGNsYXNzIGZvciB3b3JraW5nIHdpdGggdGhlIGxvdyBhbmQgaGlnaCBiaXRzIG9mIGEgNjQgYml0IHZhbHVlLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtudW1iZXJ9IGxvIExvdyAzMiBiaXRzLCB1bnNpZ25lZFxuICogQHBhcmFtIHtudW1iZXJ9IGhpIEhpZ2ggMzIgYml0cywgdW5zaWduZWRcbiAqL1xuZnVuY3Rpb24gTG9uZ0JpdHMobG8sIGhpKSB7XG5cbiAgICAvLyBub3RlIHRoYXQgdGhlIGNhc3RzIGJlbG93IGFyZSB0aGVvcmV0aWNhbGx5IHVubmVjZXNzYXJ5IGFzIG9mIHRvZGF5LCBidXQgb2xkZXIgc3RhdGljYWxseVxuICAgIC8vIGdlbmVyYXRlZCBjb252ZXJ0ZXIgY29kZSBtaWdodCBzdGlsbCBjYWxsIHRoZSBjdG9yIHdpdGggc2lnbmVkIDMyYml0cy4ga2VwdCBmb3IgY29tcGF0LlxuXG4gICAgLyoqXG4gICAgICogTG93IGJpdHMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxvID0gbG8gPj4+IDA7XG5cbiAgICAvKipcbiAgICAgKiBIaWdoIGJpdHMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmhpID0gaGkgPj4+IDA7XG59XG5cbi8qKlxuICogWmVybyBiaXRzLlxuICogQG1lbWJlcm9mIHV0aWwuTG9uZ0JpdHNcbiAqIEB0eXBlIHt1dGlsLkxvbmdCaXRzfVxuICovXG52YXIgemVybyA9IExvbmdCaXRzLnplcm8gPSBuZXcgTG9uZ0JpdHMoMCwgMCk7XG5cbnplcm8udG9OdW1iZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG56ZXJvLnp6RW5jb2RlID0gemVyby56ekRlY29kZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfTtcbnplcm8ubGVuZ3RoID0gZnVuY3Rpb24oKSB7IHJldHVybiAxOyB9O1xuXG4vKipcbiAqIFplcm8gaGFzaC5cbiAqIEBtZW1iZXJvZiB1dGlsLkxvbmdCaXRzXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG52YXIgemVyb0hhc2ggPSBMb25nQml0cy56ZXJvSGFzaCA9IFwiXFwwXFwwXFwwXFwwXFwwXFwwXFwwXFwwXCI7XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWVcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBJbnN0YW5jZVxuICovXG5Mb25nQml0cy5mcm9tTnVtYmVyID0gZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHplcm87XG4gICAgdmFyIHNpZ24gPSB2YWx1ZSA8IDA7XG4gICAgaWYgKHNpZ24pXG4gICAgICAgIHZhbHVlID0gLXZhbHVlO1xuICAgIHZhciBsbyA9IHZhbHVlID4+PiAwLFxuICAgICAgICBoaSA9ICh2YWx1ZSAtIGxvKSAvIDQyOTQ5NjcyOTYgPj4+IDA7XG4gICAgaWYgKHNpZ24pIHtcbiAgICAgICAgaGkgPSB+aGkgPj4+IDA7XG4gICAgICAgIGxvID0gfmxvID4+PiAwO1xuICAgICAgICBpZiAoKytsbyA+IDQyOTQ5NjcyOTUpIHtcbiAgICAgICAgICAgIGxvID0gMDtcbiAgICAgICAgICAgIGlmICgrK2hpID4gNDI5NDk2NzI5NSlcbiAgICAgICAgICAgICAgICBoaSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBMb25nQml0cyhsbywgaGkpO1xufTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMgZnJvbSBhIG51bWJlciwgbG9uZyBvciBzdHJpbmcuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfHN0cmluZ30gdmFsdWUgVmFsdWVcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBJbnN0YW5jZVxuICovXG5Mb25nQml0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBMb25nQml0cy5mcm9tTnVtYmVyKHZhbHVlKTtcbiAgICBpZiAodXRpbC5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKHV0aWwuTG9uZylcbiAgICAgICAgICAgIHZhbHVlID0gdXRpbC5Mb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gTG9uZ0JpdHMuZnJvbU51bWJlcihwYXJzZUludCh2YWx1ZSwgMTApKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlLmxvdyB8fCB2YWx1ZS5oaWdoID8gbmV3IExvbmdCaXRzKHZhbHVlLmxvdyA+Pj4gMCwgdmFsdWUuaGlnaCA+Pj4gMCkgOiB6ZXJvO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIHBvc3NpYmx5IHVuc2FmZSBKYXZhU2NyaXB0IG51bWJlci5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICogQHJldHVybnMge251bWJlcn0gUG9zc2libHkgdW5zYWZlIG51bWJlclxuICovXG5Mb25nQml0cy5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlcih1bnNpZ25lZCkge1xuICAgIGlmICghdW5zaWduZWQgJiYgdGhpcy5oaSA+Pj4gMzEpIHtcbiAgICAgICAgdmFyIGxvID0gfnRoaXMubG8gKyAxID4+PiAwLFxuICAgICAgICAgICAgaGkgPSB+dGhpcy5oaSAgICAgPj4+IDA7XG4gICAgICAgIGlmICghbG8pXG4gICAgICAgICAgICBoaSA9IGhpICsgMSA+Pj4gMDtcbiAgICAgICAgcmV0dXJuIC0obG8gKyBoaSAqIDQyOTQ5NjcyOTYpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sbyArIHRoaXMuaGkgKiA0Mjk0OTY3Mjk2O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIGxvbmcuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1bnNpZ25lZD1mYWxzZV0gV2hldGhlciB1bnNpZ25lZCBvciBub3RcbiAqIEByZXR1cm5zIHtMb25nfSBMb25nXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS50b0xvbmcgPSBmdW5jdGlvbiB0b0xvbmcodW5zaWduZWQpIHtcbiAgICByZXR1cm4gdXRpbC5Mb25nXG4gICAgICAgID8gbmV3IHV0aWwuTG9uZyh0aGlzLmxvIHwgMCwgdGhpcy5oaSB8IDAsIEJvb2xlYW4odW5zaWduZWQpKVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICA6IHsgbG93OiB0aGlzLmxvIHwgMCwgaGlnaDogdGhpcy5oaSB8IDAsIHVuc2lnbmVkOiBCb29sZWFuKHVuc2lnbmVkKSB9O1xufTtcblxudmFyIGNoYXJDb2RlQXQgPSBTdHJpbmcucHJvdG90eXBlLmNoYXJDb2RlQXQ7XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gdGhlIHNwZWNpZmllZCA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoLlxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2ggSGFzaFxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IEJpdHNcbiAqL1xuTG9uZ0JpdHMuZnJvbUhhc2ggPSBmdW5jdGlvbiBmcm9tSGFzaChoYXNoKSB7XG4gICAgaWYgKGhhc2ggPT09IHplcm9IYXNoKVxuICAgICAgICByZXR1cm4gemVybztcbiAgICByZXR1cm4gbmV3IExvbmdCaXRzKFxuICAgICAgICAoIGNoYXJDb2RlQXQuY2FsbChoYXNoLCAwKVxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAxKSA8PCA4XG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDIpIDw8IDE2XG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDMpIDw8IDI0KSA+Pj4gMFxuICAgICxcbiAgICAgICAgKCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNClcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNSkgPDwgOFxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA2KSA8PCAxNlxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA3KSA8PCAyNCkgPj4+IDBcbiAgICApO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIDggY2hhcmFjdGVycyBsb25nIGhhc2guXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIYXNoXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS50b0hhc2ggPSBmdW5jdGlvbiB0b0hhc2goKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICAgIHRoaXMubG8gICAgICAgICYgMjU1LFxuICAgICAgICB0aGlzLmxvID4+PiA4ICAmIDI1NSxcbiAgICAgICAgdGhpcy5sbyA+Pj4gMTYgJiAyNTUsXG4gICAgICAgIHRoaXMubG8gPj4+IDI0ICAgICAgLFxuICAgICAgICB0aGlzLmhpICAgICAgICAmIDI1NSxcbiAgICAgICAgdGhpcy5oaSA+Pj4gOCAgJiAyNTUsXG4gICAgICAgIHRoaXMuaGkgPj4+IDE2ICYgMjU1LFxuICAgICAgICB0aGlzLmhpID4+PiAyNFxuICAgICk7XG59O1xuXG4vKipcbiAqIFppZy16YWcgZW5jb2RlcyB0aGlzIGxvbmcgYml0cy5cbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnp6RW5jb2RlID0gZnVuY3Rpb24genpFbmNvZGUoKSB7XG4gICAgdmFyIG1hc2sgPSAgIHRoaXMuaGkgPj4gMzE7XG4gICAgdGhpcy5oaSAgPSAoKHRoaXMuaGkgPDwgMSB8IHRoaXMubG8gPj4+IDMxKSBeIG1hc2spID4+PiAwO1xuICAgIHRoaXMubG8gID0gKCB0aGlzLmxvIDw8IDEgICAgICAgICAgICAgICAgICAgXiBtYXNrKSA+Pj4gMDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogWmlnLXphZyBkZWNvZGVzIHRoaXMgbG9uZyBiaXRzLlxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IGB0aGlzYFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUuenpEZWNvZGUgPSBmdW5jdGlvbiB6ekRlY29kZSgpIHtcbiAgICB2YXIgbWFzayA9IC0odGhpcy5sbyAmIDEpO1xuICAgIHRoaXMubG8gID0gKCh0aGlzLmxvID4+PiAxIHwgdGhpcy5oaSA8PCAzMSkgXiBtYXNrKSA+Pj4gMDtcbiAgICB0aGlzLmhpICA9ICggdGhpcy5oaSA+Pj4gMSAgICAgICAgICAgICAgICAgIF4gbWFzaykgPj4+IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiB0aGlzIGxvbmdiaXRzIHdoZW4gZW5jb2RlZCBhcyBhIHZhcmludC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IExlbmd0aFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgIHZhciBwYXJ0MCA9ICB0aGlzLmxvLFxuICAgICAgICBwYXJ0MSA9ICh0aGlzLmxvID4+PiAyOCB8IHRoaXMuaGkgPDwgNCkgPj4+IDAsXG4gICAgICAgIHBhcnQyID0gIHRoaXMuaGkgPj4+IDI0O1xuICAgIHJldHVybiBwYXJ0MiA9PT0gMFxuICAgICAgICAgPyBwYXJ0MSA9PT0gMFxuICAgICAgICAgICA/IHBhcnQwIDwgMTYzODRcbiAgICAgICAgICAgICA/IHBhcnQwIDwgMTI4ID8gMSA6IDJcbiAgICAgICAgICAgICA6IHBhcnQwIDwgMjA5NzE1MiA/IDMgOiA0XG4gICAgICAgICAgIDogcGFydDEgPCAxNjM4NFxuICAgICAgICAgICAgID8gcGFydDEgPCAxMjggPyA1IDogNlxuICAgICAgICAgICAgIDogcGFydDEgPCAyMDk3MTUyID8gNyA6IDhcbiAgICAgICAgIDogcGFydDIgPCAxMjggPyA5IDogMTA7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgdXRpbCA9IGV4cG9ydHM7XG5cbi8vIHVzZWQgdG8gcmV0dXJuIGEgUHJvbWlzZSB3aGVyZSBjYWxsYmFjayBpcyBvbWl0dGVkXG51dGlsLmFzUHJvbWlzZSA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9hc3Byb21pc2VcIik7XG5cbi8vIGNvbnZlcnRzIHRvIC8gZnJvbSBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG51dGlsLmJhc2U2NCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9iYXNlNjRcIik7XG5cbi8vIGJhc2UgY2xhc3Mgb2YgcnBjLlNlcnZpY2VcbnV0aWwuRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2V2ZW50ZW1pdHRlclwiKTtcblxuLy8gZmxvYXQgaGFuZGxpbmcgYWNjcm9zcyBicm93c2Vyc1xudXRpbC5mbG9hdCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9mbG9hdFwiKTtcblxuLy8gcmVxdWlyZXMgbW9kdWxlcyBvcHRpb25hbGx5IGFuZCBoaWRlcyB0aGUgY2FsbCBmcm9tIGJ1bmRsZXJzXG51dGlsLmlucXVpcmUgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvaW5xdWlyZVwiKTtcblxuLy8gY29udmVydHMgdG8gLyBmcm9tIHV0ZjggZW5jb2RlZCBzdHJpbmdzXG51dGlsLnV0ZjggPSByZXF1aXJlKFwiQHByb3RvYnVmanMvdXRmOFwiKTtcblxuLy8gcHJvdmlkZXMgYSBub2RlLWxpa2UgYnVmZmVyIHBvb2wgaW4gdGhlIGJyb3dzZXJcbnV0aWwucG9vbCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9wb29sXCIpO1xuXG4vLyB1dGlsaXR5IHRvIHdvcmsgd2l0aCB0aGUgbG93IGFuZCBoaWdoIGJpdHMgb2YgYSA2NCBiaXQgdmFsdWVcbnV0aWwuTG9uZ0JpdHMgPSByZXF1aXJlKFwiLi9sb25nYml0c1wiKTtcblxuLyoqXG4gKiBXaGV0aGVyIHJ1bm5pbmcgd2l0aGluIG5vZGUgb3Igbm90LlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtib29sZWFufVxuICovXG51dGlsLmlzTm9kZSA9IEJvb2xlYW4odHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgICAgICAgICYmIGdsb2JhbFxuICAgICAgICAgICAgICAgICAgICYmIGdsb2JhbC5wcm9jZXNzXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsLnByb2Nlc3MudmVyc2lvbnNcbiAgICAgICAgICAgICAgICAgICAmJiBnbG9iYWwucHJvY2Vzcy52ZXJzaW9ucy5ub2RlKTtcblxuLyoqXG4gKiBHbG9iYWwgb2JqZWN0IHJlZmVyZW5jZS5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG51dGlsLmdsb2JhbCA9IHV0aWwuaXNOb2RlICYmIGdsb2JhbFxuICAgICAgICAgICB8fCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvd1xuICAgICAgICAgICB8fCB0eXBlb2Ygc2VsZiAgICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGZcbiAgICAgICAgICAgfHwgdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblxuLyoqXG4gKiBBbiBpbW11YWJsZSBlbXB0eSBhcnJheS5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAdHlwZSB7QXJyYXkuPCo+fVxuICogQGNvbnN0XG4gKi9cbnV0aWwuZW1wdHlBcnJheSA9IE9iamVjdC5mcmVlemUgPyBPYmplY3QuZnJlZXplKFtdKSA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIFtdOyAvLyB1c2VkIG9uIHByb3RvdHlwZXNcblxuLyoqXG4gKiBBbiBpbW11dGFibGUgZW1wdHkgb2JqZWN0LlxuICogQHR5cGUge09iamVjdH1cbiAqIEBjb25zdFxuICovXG51dGlsLmVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSA/IE9iamVjdC5mcmVlemUoe30pIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8ge307IC8vIHVzZWQgb24gcHJvdG90eXBlc1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYW4gaW50ZWdlci5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBhbiBpbnRlZ2VyXG4gKi9cbnV0aWwuaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGEgc3RyaW5nXG4gKi9cbnV0aWwuaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBub24tbnVsbCBvYmplY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGEgbm9uLW51bGwgb2JqZWN0XG4gKi9cbnV0aWwuaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIHByb3BlcnR5IG9uIGEgbWVzc2FnZSBpcyBjb25zaWRlcmVkIHRvIGJlIHByZXNlbnQuXG4gKiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayB1dGlsLmlzU2V0fS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBQbGFpbiBvYmplY3Qgb3IgbWVzc2FnZSBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgbmFtZVxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBjb25zaWRlcmVkIHRvIGJlIHByZXNlbnQsIG90aGVyd2lzZSBgZmFsc2VgXG4gKi9cbnV0aWwuaXNzZXQgPVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHByb3BlcnR5IG9uIGEgbWVzc2FnZSBpcyBjb25zaWRlcmVkIHRvIGJlIHByZXNlbnQuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFBsYWluIG9iamVjdCBvciBtZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xudXRpbC5pc1NldCA9IGZ1bmN0aW9uIGlzU2V0KG9iaiwgcHJvcCkge1xuICAgIHZhciB2YWx1ZSA9IG9ialtwcm9wXTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiBvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxLCBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5sZW5ndGggOiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoKSA+IDA7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBBbnkgY29tcGF0aWJsZSBCdWZmZXIgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIGEgbWluaW1hbCBzdGFuZC1hbG9uZSBkZWZpbml0aW9uIG9mIGEgQnVmZmVyIGluc3RhbmNlLiBUaGUgYWN0dWFsIHR5cGUgaXMgdGhhdCBleHBvcnRlZCBieSBub2RlJ3MgdHlwaW5ncy5cbiAqIEBpbnRlcmZhY2UgQnVmZmVyXG4gKiBAZXh0ZW5kcyBVaW50OEFycmF5XG4gKi9cblxuLyoqXG4gKiBOb2RlJ3MgQnVmZmVyIGNsYXNzIGlmIGF2YWlsYWJsZS5cbiAqIEB0eXBlIHtDb25zdHJ1Y3RvcjxCdWZmZXI+fVxuICovXG51dGlsLkJ1ZmZlciA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICB2YXIgQnVmZmVyID0gdXRpbC5pbnF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcjtcbiAgICAgICAgLy8gcmVmdXNlIHRvIHVzZSBub24tbm9kZSBidWZmZXJzIGlmIG5vdCBleHBsaWNpdGx5IGFzc2lnbmVkIChwZXJmIHJlYXNvbnMpOlxuICAgICAgICByZXR1cm4gQnVmZmVyLnByb3RvdHlwZS51dGY4V3JpdGUgPyBCdWZmZXIgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufSkoKTtcblxuLy8gSW50ZXJuYWwgYWxpYXMgb2Ygb3IgcG9seWZ1bGwgZm9yIEJ1ZmZlci5mcm9tLlxudXRpbC5fQnVmZmVyX2Zyb20gPSBudWxsO1xuXG4vLyBJbnRlcm5hbCBhbGlhcyBvZiBvciBwb2x5ZmlsbCBmb3IgQnVmZmVyLmFsbG9jVW5zYWZlLlxudXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gbnVsbDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGJ1ZmZlciBvZiB3aGF0ZXZlciB0eXBlIHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0ge251bWJlcnxudW1iZXJbXX0gW3NpemVPckFycmF5PTBdIEJ1ZmZlciBzaXplIG9yIG51bWJlciBhcnJheVxuICogQHJldHVybnMge1VpbnQ4QXJyYXl8QnVmZmVyfSBCdWZmZXJcbiAqL1xudXRpbC5uZXdCdWZmZXIgPSBmdW5jdGlvbiBuZXdCdWZmZXIoc2l6ZU9yQXJyYXkpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0eXBlb2Ygc2l6ZU9yQXJyYXkgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyB1dGlsLkJ1ZmZlclxuICAgICAgICAgICAgPyB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUoc2l6ZU9yQXJyYXkpXG4gICAgICAgICAgICA6IG5ldyB1dGlsLkFycmF5KHNpemVPckFycmF5KVxuICAgICAgICA6IHV0aWwuQnVmZmVyXG4gICAgICAgICAgICA/IHV0aWwuX0J1ZmZlcl9mcm9tKHNpemVPckFycmF5KVxuICAgICAgICAgICAgOiB0eXBlb2YgVWludDhBcnJheSA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgICAgID8gc2l6ZU9yQXJyYXlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KHNpemVPckFycmF5KTtcbn07XG5cbi8qKlxuICogQXJyYXkgaW1wbGVtZW50YXRpb24gdXNlZCBpbiB0aGUgYnJvd3Nlci4gYFVpbnQ4QXJyYXlgIGlmIHN1cHBvcnRlZCwgb3RoZXJ3aXNlIGBBcnJheWAuXG4gKiBAdHlwZSB7Q29uc3RydWN0b3I8VWludDhBcnJheT59XG4gKi9cbnV0aWwuQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gXCJ1bmRlZmluZWRcIiA/IFVpbnQ4QXJyYXkgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gOiBBcnJheTtcblxuLyoqXG4gKiBBbnkgY29tcGF0aWJsZSBMb25nIGluc3RhbmNlLlxuICogVGhpcyBpcyBhIG1pbmltYWwgc3RhbmQtYWxvbmUgZGVmaW5pdGlvbiBvZiBhIExvbmcgaW5zdGFuY2UuIFRoZSBhY3R1YWwgdHlwZSBpcyB0aGF0IGV4cG9ydGVkIGJ5IGxvbmcuanMuXG4gKiBAaW50ZXJmYWNlIExvbmdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsb3cgTG93IGJpdHNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoaWdoIEhpZ2ggYml0c1xuICogQHByb3BlcnR5IHtib29sZWFufSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICovXG5cbi8qKlxuICogTG9uZy5qcydzIExvbmcgY2xhc3MgaWYgYXZhaWxhYmxlLlxuICogQHR5cGUge0NvbnN0cnVjdG9yPExvbmc+fVxuICovXG51dGlsLkxvbmcgPSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1dGlsLmdsb2JhbC5kY29kZUlPICYmIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuZ2xvYmFsLmRjb2RlSU8uTG9uZ1xuICAgICAgICAgfHwgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdXRpbC5nbG9iYWwuTG9uZ1xuICAgICAgICAgfHwgdXRpbC5pbnF1aXJlKFwibG9uZ1wiKTtcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byB2ZXJpZnkgMiBiaXQgKGBib29sYCkgbWFwIGtleXMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQGNvbnN0XG4gKi9cbnV0aWwua2V5MlJlID0gL150cnVlfGZhbHNlfDB8MSQvO1xuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHZlcmlmeSAzMiBiaXQgKGBpbnQzMmAgZXRjLikgbWFwIGtleXMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQGNvbnN0XG4gKi9cbnV0aWwua2V5MzJSZSA9IC9eLT8oPzowfFsxLTldWzAtOV0qKSQvO1xuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHZlcmlmeSA2NCBiaXQgKGBpbnQ2NGAgZXRjLikgbWFwIGtleXMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQGNvbnN0XG4gKi9cbnV0aWwua2V5NjRSZSA9IC9eKD86W1xcXFx4MDAtXFxcXHhmZl17OH18LT8oPzowfFsxLTldWzAtOV0qKSkkLztcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciBvciBsb25nIHRvIGFuIDggY2hhcmFjdGVycyBsb25nIGhhc2ggc3RyaW5nLlxuICogQHBhcmFtIHtMb25nfG51bWJlcn0gdmFsdWUgVmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge3N0cmluZ30gSGFzaFxuICovXG51dGlsLmxvbmdUb0hhc2ggPSBmdW5jdGlvbiBsb25nVG9IYXNoKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gdXRpbC5Mb25nQml0cy5mcm9tKHZhbHVlKS50b0hhc2goKVxuICAgICAgICA6IHV0aWwuTG9uZ0JpdHMuemVyb0hhc2g7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIDggY2hhcmFjdGVycyBsb25nIGhhc2ggc3RyaW5nIHRvIGEgbG9uZyBvciBudW1iZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaCBIYXNoXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1bnNpZ25lZD1mYWxzZV0gV2hldGhlciB1bnNpZ25lZCBvciBub3RcbiAqIEByZXR1cm5zIHtMb25nfG51bWJlcn0gT3JpZ2luYWwgdmFsdWVcbiAqL1xudXRpbC5sb25nRnJvbUhhc2ggPSBmdW5jdGlvbiBsb25nRnJvbUhhc2goaGFzaCwgdW5zaWduZWQpIHtcbiAgICB2YXIgYml0cyA9IHV0aWwuTG9uZ0JpdHMuZnJvbUhhc2goaGFzaCk7XG4gICAgaWYgKHV0aWwuTG9uZylcbiAgICAgICAgcmV0dXJuIHV0aWwuTG9uZy5mcm9tQml0cyhiaXRzLmxvLCBiaXRzLmhpLCB1bnNpZ25lZCk7XG4gICAgcmV0dXJuIGJpdHMudG9OdW1iZXIoQm9vbGVhbih1bnNpZ25lZCkpO1xufTtcblxuLyoqXG4gKiBNZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNvdXJjZSBvYmplY3QgaW50byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGRzdCBEZXN0aW5hdGlvbiBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IHNyYyBTb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpZk5vdFNldD1mYWxzZV0gTWVyZ2VzIG9ubHkgaWYgdGhlIGtleSBpcyBub3QgYWxyZWFkeSBzZXRcbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gRGVzdGluYXRpb24gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIG1lcmdlKGRzdCwgc3JjLCBpZk5vdFNldCkgeyAvLyB1c2VkIGJ5IGNvbnZlcnRlcnNcbiAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3JjKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICBpZiAoZHN0W2tleXNbaV1dID09PSB1bmRlZmluZWQgfHwgIWlmTm90U2V0KVxuICAgICAgICAgICAgZHN0W2tleXNbaV1dID0gc3JjW2tleXNbaV1dO1xuICAgIHJldHVybiBkc3Q7XG59XG5cbnV0aWwubWVyZ2UgPSBtZXJnZTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc3RyaW5nIHRvIGxvd2VyIGNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDb252ZXJ0ZWQgc3RyaW5nXG4gKi9cbnV0aWwubGNGaXJzdCA9IGZ1bmN0aW9uIGxjRmlyc3Qoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0ci5zdWJzdHJpbmcoMSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjdXN0b20gZXJyb3IgY29uc3RydWN0b3IuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXJyb3IgbmFtZVxuICogQHJldHVybnMge0NvbnN0cnVjdG9yPEVycm9yPn0gQ3VzdG9tIGVycm9yIGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIG5ld0Vycm9yKG5hbWUpIHtcblxuICAgIGZ1bmN0aW9uIEN1c3RvbUVycm9yKG1lc3NhZ2UsIHByb3BlcnRpZXMpIHtcblxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ3VzdG9tRXJyb3IpKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDdXN0b21FcnJvcihtZXNzYWdlLCBwcm9wZXJ0aWVzKTtcblxuICAgICAgICAvLyBFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuICAgICAgICAvLyBeIGp1c3QgcmV0dXJucyBhIG5ldyBlcnJvciBpbnN0YW5jZSBiZWNhdXNlIHRoZSBjdG9yIGNhbiBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvblxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1lc3NhZ2VcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbWVzc2FnZTsgfSB9KTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIC8vIG5vZGVcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEN1c3RvbUVycm9yKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhY2tcIiwgeyB2YWx1ZTogbmV3IEVycm9yKCkuc3RhY2sgfHwgXCJcIiB9KTtcblxuICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgIG1lcmdlKHRoaXMsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIEN1c3RvbUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgICB2YWx1ZTogQ3VzdG9tRXJyb3IsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBnZXQoKSB7IHJldHVybiBuYW1lOyB9LFxuICAgICAgICAgICAgc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIGNvbmZpZ3VyYWJsZTogZmFsc2Ugd291bGQgYWNjdXJhdGVseSBwcmVzZXJ2ZSB0aGUgYmVoYXZpb3Igb2ZcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCwgYnV0IEknbSBndWVzc2luZyB0aGF0IHdhcyBub3QgaW50ZW50aW9uYWwuXG4gICAgICAgICAgICAvLyBGb3IgYW4gYWN0dWFsIGVycm9yIHN1YmNsYXNzLCB0aGlzIHByb3BlcnR5IHdvdWxkXG4gICAgICAgICAgICAvLyBiZSBjb25maWd1cmFibGUuXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHRvU3RyaW5nOiB7XG4gICAgICAgICAgICB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMubmFtZSArIFwiOiBcIiArIHRoaXMubWVzc2FnZTsgfSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gQ3VzdG9tRXJyb3I7XG59XG5cbnV0aWwubmV3RXJyb3IgPSBuZXdFcnJvcjtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHByb3RvY29sIGVycm9yLlxuICogQGNsYXNzZGVzYyBFcnJvciBzdWJjbGFzcyBpbmRpY2F0aW5nIGEgcHJvdG9jb2wgc3BlY2lmYyBlcnJvci5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAZXh0ZW5kcyBFcnJvclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIEVycm9yIG1lc3NhZ2VcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtwcm9wZXJ0aWVzXSBBZGRpdGlvbmFsIHByb3BlcnRpZXNcbiAqIEBleGFtcGxlXG4gKiB0cnkge1xuICogICAgIE15TWVzc2FnZS5kZWNvZGUoc29tZUJ1ZmZlcik7IC8vIHRocm93cyBpZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAqIH0gY2F0Y2ggKGUpIHtcbiAqICAgICBpZiAoZSBpbnN0YW5jZW9mIFByb3RvY29sRXJyb3IgJiYgZS5pbnN0YW5jZSlcbiAqICAgICAgICAgY29uc29sZS5sb2coXCJkZWNvZGVkIHNvIGZhcjogXCIgKyBKU09OLnN0cmluZ2lmeShlLmluc3RhbmNlKSk7XG4gKiB9XG4gKi9cbnV0aWwuUHJvdG9jb2xFcnJvciA9IG5ld0Vycm9yKFwiUHJvdG9jb2xFcnJvclwiKTtcblxuLyoqXG4gKiBTbyBmYXIgZGVjb2RlZCBtZXNzYWdlIGluc3RhbmNlLlxuICogQG5hbWUgdXRpbC5Qcm90b2NvbEVycm9yI2luc3RhbmNlXG4gKiBAdHlwZSB7TWVzc2FnZTxUPn1cbiAqL1xuXG4vKipcbiAqIEEgT25lT2YgZ2V0dGVyIGFzIHJldHVybmVkIGJ5IHtAbGluayB1dGlsLm9uZU9mR2V0dGVyfS5cbiAqIEB0eXBlZGVmIE9uZU9mR2V0dGVyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gU2V0IGZpZWxkIG5hbWUsIGlmIGFueVxuICovXG5cbi8qKlxuICogQnVpbGRzIGEgZ2V0dGVyIGZvciBhIG9uZW9mJ3MgcHJlc2VudCBmaWVsZCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gZmllbGROYW1lcyBGaWVsZCBuYW1lc1xuICogQHJldHVybnMge09uZU9mR2V0dGVyfSBVbmJvdW5kIGdldHRlclxuICovXG51dGlsLm9uZU9mR2V0dGVyID0gZnVuY3Rpb24gZ2V0T25lT2YoZmllbGROYW1lcykge1xuICAgIHZhciBmaWVsZE1hcCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGROYW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgZmllbGRNYXBbZmllbGROYW1lc1tpXV0gPSAxO1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFNldCBmaWVsZCBuYW1lLCBpZiBhbnlcbiAgICAgKiBAdGhpcyBPYmplY3RcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKSwgaSA9IGtleXMubGVuZ3RoIC0gMTsgaSA+IC0xOyAtLWkpXG4gICAgICAgICAgICBpZiAoZmllbGRNYXBba2V5c1tpXV0gPT09IDEgJiYgdGhpc1trZXlzW2ldXSAhPT0gdW5kZWZpbmVkICYmIHRoaXNba2V5c1tpXV0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleXNbaV07XG4gICAgfTtcbn07XG5cbi8qKlxuICogQSBPbmVPZiBzZXR0ZXIgYXMgcmV0dXJuZWQgYnkge0BsaW5rIHV0aWwub25lT2ZTZXR0ZXJ9LlxuICogQHR5cGVkZWYgT25lT2ZTZXR0ZXJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gdmFsdWUgRmllbGQgbmFtZVxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG4vKipcbiAqIEJ1aWxkcyBhIHNldHRlciBmb3IgYSBvbmVvZidzIHByZXNlbnQgZmllbGQgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nW119IGZpZWxkTmFtZXMgRmllbGQgbmFtZXNcbiAqIEByZXR1cm5zIHtPbmVPZlNldHRlcn0gVW5ib3VuZCBzZXR0ZXJcbiAqL1xudXRpbC5vbmVPZlNldHRlciA9IGZ1bmN0aW9uIHNldE9uZU9mKGZpZWxkTmFtZXMpIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEZpZWxkIG5hbWVcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqIEB0aGlzIE9iamVjdFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkTmFtZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBpZiAoZmllbGROYW1lc1tpXSAhPT0gbmFtZSlcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1tmaWVsZE5hbWVzW2ldXTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBEZWZhdWx0IGNvbnZlcnNpb24gb3B0aW9ucyB1c2VkIGZvciB7QGxpbmsgTWVzc2FnZSN0b0pTT059IGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBUaGVzZSBvcHRpb25zIGFyZSBjbG9zZSB0byBwcm90bzMncyBKU09OIG1hcHBpbmcgd2l0aCB0aGUgZXhjZXB0aW9uIHRoYXQgaW50ZXJuYWwgdHlwZXMgbGlrZSBBbnkgYXJlIGhhbmRsZWQganVzdCBsaWtlIG1lc3NhZ2VzLiBNb3JlIHByZWNpc2VseTpcbiAqXG4gKiAtIExvbmdzIGJlY29tZSBzdHJpbmdzXG4gKiAtIEVudW1zIGJlY29tZSBzdHJpbmcga2V5c1xuICogLSBCeXRlcyBiZWNvbWUgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xuICogLSAoU3ViLSlNZXNzYWdlcyBiZWNvbWUgcGxhaW4gb2JqZWN0c1xuICogLSBNYXBzIGJlY29tZSBwbGFpbiBvYmplY3RzIHdpdGggYWxsIHN0cmluZyBrZXlzXG4gKiAtIFJlcGVhdGVkIGZpZWxkcyBiZWNvbWUgYXJyYXlzXG4gKiAtIE5hTiBhbmQgSW5maW5pdHkgZm9yIGZsb2F0IGFuZCBkb3VibGUgZmllbGRzIGJlY29tZSBzdHJpbmdzXG4gKlxuICogQHR5cGUge0lDb252ZXJzaW9uT3B0aW9uc31cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL3Byb3RvMz9obD1lbiNqc29uXG4gKi9cbnV0aWwudG9KU09OT3B0aW9ucyA9IHtcbiAgICBsb25nczogU3RyaW5nLFxuICAgIGVudW1zOiBTdHJpbmcsXG4gICAgYnl0ZXM6IFN0cmluZyxcbiAgICBqc29uOiB0cnVlXG59O1xuXG4vLyBTZXRzIHVwIGJ1ZmZlciB1dGlsaXR5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnQgKGNhbGxlZCBpbiBpbmRleC1taW5pbWFsKVxudXRpbC5fY29uZmlndXJlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIEJ1ZmZlciA9IHV0aWwuQnVmZmVyO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghQnVmZmVyKSB7XG4gICAgICAgIHV0aWwuX0J1ZmZlcl9mcm9tID0gdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBiZWNhdXNlIG5vZGUgNC54IGJ1ZmZlcnMgYXJlIGluY29tcGF0aWJsZSAmIGltbXV0YWJsZVxuICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Rjb2RlSU8vcHJvdG9idWYuanMvcHVsbC82NjVcbiAgICB1dGlsLl9CdWZmZXJfZnJvbSA9IEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20gJiYgQnVmZmVyLmZyb20gfHxcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgZnVuY3Rpb24gQnVmZmVyX2Zyb20odmFsdWUsIGVuY29kaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmcpO1xuICAgICAgICB9O1xuICAgIHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSB8fFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBmdW5jdGlvbiBCdWZmZXJfYWxsb2NVbnNhZmUoc2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXIoc2l6ZSk7XG4gICAgICAgIH07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRlcjtcblxudmFyIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxudmFyIEJ1ZmZlcldyaXRlcjsgLy8gY3ljbGljXG5cbnZhciBMb25nQml0cyAgPSB1dGlsLkxvbmdCaXRzLFxuICAgIGJhc2U2NCAgICA9IHV0aWwuYmFzZTY0LFxuICAgIHV0ZjggICAgICA9IHV0aWwudXRmODtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHdyaXRlciBvcGVyYXRpb24gaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFNjaGVkdWxlZCB3cml0ZXIgb3BlcmF0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIFVpbnQ4QXJyYXksIG51bWJlcil9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7Kn0gdmFsIFZhbHVlIHRvIHdyaXRlXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIE9wKGZuLCBsZW4sIHZhbCkge1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gY2FsbC5cbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oVWludDhBcnJheSwgbnVtYmVyLCAqKX1cbiAgICAgKi9cbiAgICB0aGlzLmZuID0gZm47XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZSBieXRlIGxlbmd0aC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGVuID0gbGVuO1xuXG4gICAgLyoqXG4gICAgICogTmV4dCBvcGVyYXRpb24uXG4gICAgICogQHR5cGUge1dyaXRlci5PcHx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5uZXh0ID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogVmFsdWUgdG8gd3JpdGUuXG4gICAgICogQHR5cGUgeyp9XG4gICAgICovXG4gICAgdGhpcy52YWwgPSB2YWw7IC8vIHR5cGUgdmFyaWVzXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBub29wKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eS1mdW5jdGlvblxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgd3JpdGVyIHN0YXRlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBDb3BpZWQgd3JpdGVyIHN0YXRlLlxuICogQG1lbWJlcm9mIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1dyaXRlcn0gd3JpdGVyIFdyaXRlciB0byBjb3B5IHN0YXRlIGZyb21cbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gU3RhdGUod3JpdGVyKSB7XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhlYWQuXG4gICAgICogQHR5cGUge1dyaXRlci5PcH1cbiAgICAgKi9cbiAgICB0aGlzLmhlYWQgPSB3cml0ZXIuaGVhZDtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgdGFpbC5cbiAgICAgKiBAdHlwZSB7V3JpdGVyLk9wfVxuICAgICAqL1xuICAgIHRoaXMudGFpbCA9IHdyaXRlci50YWlsO1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBidWZmZXIgbGVuZ3RoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSB3cml0ZXIubGVuO1xuXG4gICAgLyoqXG4gICAgICogTmV4dCBzdGF0ZS5cbiAgICAgKiBAdHlwZSB7U3RhdGV8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLm5leHQgPSB3cml0ZXIuc3RhdGVzO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgd3JpdGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgYFVpbnQ4QXJyYXlgIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGBBcnJheWAuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gV3JpdGVyKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBsZW5ndGguXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxlbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb25zIGhlYWQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmhlYWQgPSBuZXcgT3Aobm9vcCwgMCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb25zIHRhaWxcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMudGFpbCA9IHRoaXMuaGVhZDtcblxuICAgIC8qKlxuICAgICAqIExpbmtlZCBmb3JrZWQgc3RhdGVzLlxuICAgICAqIEB0eXBlIHtPYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnN0YXRlcyA9IG51bGw7XG5cbiAgICAvLyBXaGVuIGEgdmFsdWUgaXMgd3JpdHRlbiwgdGhlIHdyaXRlciBjYWxjdWxhdGVzIGl0cyBieXRlIGxlbmd0aCBhbmQgcHV0cyBpdCBpbnRvIGEgbGlua2VkXG4gICAgLy8gbGlzdCBvZiBvcGVyYXRpb25zIHRvIHBlcmZvcm0gd2hlbiBmaW5pc2goKSBpcyBjYWxsZWQuIFRoaXMgYm90aCBhbGxvd3MgdXMgdG8gYWxsb2NhdGVcbiAgICAvLyBidWZmZXJzIG9mIHRoZSBleGFjdCByZXF1aXJlZCBzaXplIGFuZCByZWR1Y2VzIHRoZSBhbW91bnQgb2Ygd29yayB3ZSBoYXZlIHRvIGRvIGNvbXBhcmVkXG4gICAgLy8gdG8gZmlyc3QgY2FsY3VsYXRpbmcgb3ZlciBvYmplY3RzIGFuZCB0aGVuIGVuY29kaW5nIG92ZXIgb2JqZWN0cy4gSW4gb3VyIGNhc2UsIHRoZSBlbmNvZGluZ1xuICAgIC8vIHBhcnQgaXMganVzdCBhIGxpbmtlZCBsaXN0IHdhbGsgY2FsbGluZyBvcGVyYXRpb25zIHdpdGggYWxyZWFkeSBwcmVwYXJlZCB2YWx1ZXMuXG59XG5cbnZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHV0aWwuQnVmZmVyXG4gICAgICAgID8gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcl9zZXR1cCgpIHtcbiAgICAgICAgICAgIHJldHVybiAoV3JpdGVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZV9idWZmZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJXcml0ZXIoKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiBmdW5jdGlvbiBjcmVhdGVfYXJyYXkoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdyaXRlcigpO1xuICAgICAgICB9O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHdyaXRlci5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcldyaXRlcnxXcml0ZXJ9IEEge0BsaW5rIEJ1ZmZlcldyaXRlcn0gd2hlbiBCdWZmZXJzIGFyZSBzdXBwb3J0ZWQsIG90aGVyd2lzZSBhIHtAbGluayBXcml0ZXJ9XG4gKi9cbldyaXRlci5jcmVhdGUgPSBjcmVhdGUoKTtcblxuLyoqXG4gKiBBbGxvY2F0ZXMgYSBidWZmZXIgb2YgdGhlIHNwZWNpZmllZCBzaXplLlxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBCdWZmZXJcbiAqL1xuV3JpdGVyLmFsbG9jID0gZnVuY3Rpb24gYWxsb2Moc2l6ZSkge1xuICAgIHJldHVybiBuZXcgdXRpbC5BcnJheShzaXplKTtcbn07XG5cbi8vIFVzZSBVaW50OEFycmF5IGJ1ZmZlciBwb29sIGluIHRoZSBicm93c2VyLCBqdXN0IGxpa2Ugbm9kZSBkb2VzIHdpdGggYnVmZmVyc1xuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICh1dGlsLkFycmF5ICE9PSBBcnJheSlcbiAgICBXcml0ZXIuYWxsb2MgPSB1dGlsLnBvb2woV3JpdGVyLmFsbG9jLCB1dGlsLkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSk7XG5cbi8qKlxuICogUHVzaGVzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGUgcXVldWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFVpbnQ4QXJyYXksIG51bWJlciwgKil9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICogQHByaXZhdGVcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5fcHVzaCA9IGZ1bmN0aW9uIHB1c2goZm4sIGxlbiwgdmFsKSB7XG4gICAgdGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgT3AoZm4sIGxlbiwgdmFsKTtcbiAgICB0aGlzLmxlbiArPSBsZW47XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUJ5dGUodmFsLCBidWYsIHBvcykge1xuICAgIGJ1Zltwb3NdID0gdmFsICYgMjU1O1xufVxuXG5mdW5jdGlvbiB3cml0ZVZhcmludDMyKHZhbCwgYnVmLCBwb3MpIHtcbiAgICB3aGlsZSAodmFsID4gMTI3KSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwgJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbCA+Pj49IDc7XG4gICAgfVxuICAgIGJ1Zltwb3NdID0gdmFsO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgdmFyaW50IHdyaXRlciBvcGVyYXRpb24gaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFNjaGVkdWxlZCB2YXJpbnQgd3JpdGVyIG9wZXJhdGlvbi5cbiAqIEBleHRlbmRzIE9wXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gVmFyaW50T3AobGVuLCB2YWwpIHtcbiAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB0aGlzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52YWwgPSB2YWw7XG59XG5cblZhcmludE9wLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoT3AucHJvdG90eXBlKTtcblZhcmludE9wLnByb3RvdHlwZS5mbiA9IHdyaXRlVmFyaW50MzI7XG5cbi8qKlxuICogV3JpdGVzIGFuIHVuc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUudWludDMyID0gZnVuY3Rpb24gd3JpdGVfdWludDMyKHZhbHVlKSB7XG4gICAgLy8gaGVyZSwgdGhlIGNhbGwgdG8gdGhpcy5wdXNoIGhhcyBiZWVuIGlubGluZWQgYW5kIGEgdmFyaW50IHNwZWNpZmljIE9wIHN1YmNsYXNzIGlzIHVzZWQuXG4gICAgLy8gdWludDMyIGlzIGJ5IGZhciB0aGUgbW9zdCBmcmVxdWVudGx5IHVzZWQgb3BlcmF0aW9uIGFuZCBiZW5lZml0cyBzaWduaWZpY2FudGx5IGZyb20gdGhpcy5cbiAgICB0aGlzLmxlbiArPSAodGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgVmFyaW50T3AoXG4gICAgICAgICh2YWx1ZSA9IHZhbHVlID4+PiAwKVxuICAgICAgICAgICAgICAgIDwgMTI4ICAgICAgID8gMVxuICAgICAgICA6IHZhbHVlIDwgMTYzODQgICAgID8gMlxuICAgICAgICA6IHZhbHVlIDwgMjA5NzE1MiAgID8gM1xuICAgICAgICA6IHZhbHVlIDwgMjY4NDM1NDU2ID8gNFxuICAgICAgICA6ICAgICAgICAgICAgICAgICAgICAgNSxcbiAgICB2YWx1ZSkpLmxlbjtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uIHdyaXRlX2ludDMyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDwgMFxuICAgICAgICA/IHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgMTAsIExvbmdCaXRzLmZyb21OdW1iZXIodmFsdWUpKSAvLyAxMCBieXRlcyBwZXIgc3BlY1xuICAgICAgICA6IHRoaXMudWludDMyKHZhbHVlKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgMzIgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnNpbnQzMiA9IGZ1bmN0aW9uIHdyaXRlX3NpbnQzMih2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigodmFsdWUgPDwgMSBeIHZhbHVlID4+IDMxKSA+Pj4gMCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVZhcmludDY0KHZhbCwgYnVmLCBwb3MpIHtcbiAgICB3aGlsZSAodmFsLmhpKSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwubG8gJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbC5sbyA9ICh2YWwubG8gPj4+IDcgfCB2YWwuaGkgPDwgMjUpID4+PiAwO1xuICAgICAgICB2YWwuaGkgPj4+PSA3O1xuICAgIH1cbiAgICB3aGlsZSAodmFsLmxvID4gMTI3KSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwubG8gJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbC5sbyA9IHZhbC5sbyA+Pj4gNztcbiAgICB9XG4gICAgYnVmW3BvcysrXSA9IHZhbC5sbztcbn1cblxuLyoqXG4gKiBXcml0ZXMgYW4gdW5zaWduZWQgNjQgYml0IHZhbHVlIGFzIGEgdmFyaW50LlxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUudWludDY0ID0gZnVuY3Rpb24gd3JpdGVfdWludDY0KHZhbHVlKSB7XG4gICAgdmFyIGJpdHMgPSBMb25nQml0cy5mcm9tKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZVZhcmludDY0LCBiaXRzLmxlbmd0aCgpLCBiaXRzKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDY0IGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUuaW50NjQgPSBXcml0ZXIucHJvdG90eXBlLnVpbnQ2NDtcblxuLyoqXG4gKiBXcml0ZXMgYSBzaWduZWQgNjQgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfHN0cmluZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgdmFsdWVgIGlzIGEgc3RyaW5nIGFuZCBubyBsb25nIGxpYnJhcnkgaXMgcHJlc2VudC5cbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5zaW50NjQgPSBmdW5jdGlvbiB3cml0ZV9zaW50NjQodmFsdWUpIHtcbiAgICB2YXIgYml0cyA9IExvbmdCaXRzLmZyb20odmFsdWUpLnp6RW5jb2RlKCk7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgYml0cy5sZW5ndGgoKSwgYml0cyk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIGJvb2xpc2ggdmFsdWUgYXMgYSB2YXJpbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gd3JpdGVfYm9vbCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgdmFsdWUgPyAxIDogMCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUZpeGVkMzIodmFsLCBidWYsIHBvcykge1xuICAgIGJ1Zltwb3MgICAgXSA9ICB2YWwgICAgICAgICAmIDI1NTtcbiAgICBidWZbcG9zICsgMV0gPSAgdmFsID4+PiA4ICAgJiAyNTU7XG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gMTYgICYgMjU1O1xuICAgIGJ1Zltwb3MgKyAzXSA9ICB2YWwgPj4+IDI0O1xufVxuXG4vKipcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUgYXMgZml4ZWQgMzIgYml0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZml4ZWQzMiA9IGZ1bmN0aW9uIHdyaXRlX2ZpeGVkMzIodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIHZhbHVlID4+PiAwKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBmaXhlZCAzMiBiaXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnNmaXhlZDMyID0gV3JpdGVyLnByb3RvdHlwZS5maXhlZDMyO1xuXG4vKipcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgZml4ZWQgNjQgYml0cy5cbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGB2YWx1ZWAgaXMgYSBzdHJpbmcgYW5kIG5vIGxvbmcgbGlicmFyeSBpcyBwcmVzZW50LlxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZpeGVkNjQgPSBmdW5jdGlvbiB3cml0ZV9maXhlZDY0KHZhbHVlKSB7XG4gICAgdmFyIGJpdHMgPSBMb25nQml0cy5mcm9tKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIGJpdHMubG8pLl9wdXNoKHdyaXRlRml4ZWQzMiwgNCwgYml0cy5oaSk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgZml4ZWQgNjQgYml0cy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUuc2ZpeGVkNjQgPSBXcml0ZXIucHJvdG90eXBlLmZpeGVkNjQ7XG5cbi8qKlxuICogV3JpdGVzIGEgZmxvYXQgKDMyIGJpdCkuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiB3cml0ZV9mbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHV0aWwuZmxvYXQud3JpdGVGbG9hdExFLCA0LCB2YWx1ZSk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIGRvdWJsZSAoNjQgYml0IGZsb2F0KS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5kb3VibGUgPSBmdW5jdGlvbiB3cml0ZV9kb3VibGUodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh1dGlsLmZsb2F0LndyaXRlRG91YmxlTEUsIDgsIHZhbHVlKTtcbn07XG5cbnZhciB3cml0ZUJ5dGVzID0gdXRpbC5BcnJheS5wcm90b3R5cGUuc2V0XG4gICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgIGJ1Zi5zZXQodmFsLCBwb3MpOyAvLyBhbHNvIHdvcmtzIGZvciBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA6IGZ1bmN0aW9uIHdyaXRlQnl0ZXNfZm9yKHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBidWZbcG9zICsgaV0gPSB2YWxbaV07XG4gICAgfTtcblxuLyoqXG4gKiBXcml0ZXMgYSBzZXF1ZW5jZSBvZiBieXRlcy5cbiAqIEBwYXJhbSB7VWludDhBcnJheXxzdHJpbmd9IHZhbHVlIEJ1ZmZlciBvciBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gd3JpdGVfYnl0ZXModmFsdWUpIHtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xuICAgIGlmICghbGVuKVxuICAgICAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUJ5dGUsIDEsIDApO1xuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICB2YXIgYnVmID0gV3JpdGVyLmFsbG9jKGxlbiA9IGJhc2U2NC5sZW5ndGgodmFsdWUpKTtcbiAgICAgICAgYmFzZTY0LmRlY29kZSh2YWx1ZSwgYnVmLCAwKTtcbiAgICAgICAgdmFsdWUgPSBidWY7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVpbnQzMihsZW4pLl9wdXNoKHdyaXRlQnl0ZXMsIGxlbiwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHdyaXRlX3N0cmluZyh2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB1dGY4Lmxlbmd0aCh2YWx1ZSk7XG4gICAgcmV0dXJuIGxlblxuICAgICAgICA/IHRoaXMudWludDMyKGxlbikuX3B1c2godXRmOC53cml0ZSwgbGVuLCB2YWx1ZSlcbiAgICAgICAgOiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgMCk7XG59O1xuXG4vKipcbiAqIEZvcmtzIHRoaXMgd3JpdGVyJ3Mgc3RhdGUgYnkgcHVzaGluZyBpdCB0byBhIHN0YWNrLlxuICogQ2FsbGluZyB7QGxpbmsgV3JpdGVyI3Jlc2V0fHJlc2V0fSBvciB7QGxpbmsgV3JpdGVyI2xkZWxpbXxsZGVsaW19IHJlc2V0cyB0aGUgd3JpdGVyIHRvIHRoZSBwcmV2aW91cyBzdGF0ZS5cbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZvcmsgPSBmdW5jdGlvbiBmb3JrKCkge1xuICAgIHRoaXMuc3RhdGVzID0gbmV3IFN0YXRlKHRoaXMpO1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5ldyBPcChub29wLCAwLCAwKTtcbiAgICB0aGlzLmxlbiA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlc2V0cyB0aGlzIGluc3RhbmNlIHRvIHRoZSBsYXN0IHN0YXRlLlxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZXMpIHtcbiAgICAgICAgdGhpcy5oZWFkICAgPSB0aGlzLnN0YXRlcy5oZWFkO1xuICAgICAgICB0aGlzLnRhaWwgICA9IHRoaXMuc3RhdGVzLnRhaWw7XG4gICAgICAgIHRoaXMubGVuICAgID0gdGhpcy5zdGF0ZXMubGVuO1xuICAgICAgICB0aGlzLnN0YXRlcyA9IHRoaXMuc3RhdGVzLm5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbmV3IE9wKG5vb3AsIDAsIDApO1xuICAgICAgICB0aGlzLmxlbiAgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVzZXRzIHRvIHRoZSBsYXN0IHN0YXRlIGFuZCBhcHBlbmRzIHRoZSBmb3JrIHN0YXRlJ3MgY3VycmVudCB3cml0ZSBsZW5ndGggYXMgYSB2YXJpbnQgZm9sbG93ZWQgYnkgaXRzIG9wZXJhdGlvbnMuXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5sZGVsaW0gPSBmdW5jdGlvbiBsZGVsaW0oKSB7XG4gICAgdmFyIGhlYWQgPSB0aGlzLmhlYWQsXG4gICAgICAgIHRhaWwgPSB0aGlzLnRhaWwsXG4gICAgICAgIGxlbiAgPSB0aGlzLmxlbjtcbiAgICB0aGlzLnJlc2V0KCkudWludDMyKGxlbik7XG4gICAgaWYgKGxlbikge1xuICAgICAgICB0aGlzLnRhaWwubmV4dCA9IGhlYWQubmV4dDsgLy8gc2tpcCBub29wXG4gICAgICAgIHRoaXMudGFpbCA9IHRhaWw7XG4gICAgICAgIHRoaXMubGVuICs9IGxlbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gRmluaXNoZWQgYnVmZmVyXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gZmluaXNoKCkge1xuICAgIHZhciBoZWFkID0gdGhpcy5oZWFkLm5leHQsIC8vIHNraXAgbm9vcFxuICAgICAgICBidWYgID0gdGhpcy5jb25zdHJ1Y3Rvci5hbGxvYyh0aGlzLmxlbiksXG4gICAgICAgIHBvcyAgPSAwO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICAgIGhlYWQuZm4oaGVhZC52YWwsIGJ1ZiwgcG9zKTtcbiAgICAgICAgcG9zICs9IGhlYWQubGVuO1xuICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgIH1cbiAgICAvLyB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHJldHVybiBidWY7XG59O1xuXG5Xcml0ZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKEJ1ZmZlcldyaXRlcl8pIHtcbiAgICBCdWZmZXJXcml0ZXIgPSBCdWZmZXJXcml0ZXJfO1xuICAgIFdyaXRlci5jcmVhdGUgPSBjcmVhdGUoKTtcbiAgICBCdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSgpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJXcml0ZXI7XG5cbi8vIGV4dGVuZHMgV3JpdGVyXG52YXIgV3JpdGVyID0gcmVxdWlyZShcIi4vd3JpdGVyXCIpO1xuKEJ1ZmZlcldyaXRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFdyaXRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEJ1ZmZlcldyaXRlcjtcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgd3JpdGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxuICogQGV4dGVuZHMgV3JpdGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQnVmZmVyV3JpdGVyKCkge1xuICAgIFdyaXRlci5jYWxsKHRoaXMpO1xufVxuXG5CdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBBbGxvY2F0ZXMgYSBidWZmZXIgb2YgdGhlIHNwZWNpZmllZCBzaXplLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIEJ1ZmZlciBzaXplXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gQnVmZmVyXG4gICAgICovXG4gICAgQnVmZmVyV3JpdGVyLmFsbG9jID0gdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlO1xuXG4gICAgQnVmZmVyV3JpdGVyLndyaXRlQnl0ZXNCdWZmZXIgPSB1dGlsLkJ1ZmZlciAmJiB1dGlsLkJ1ZmZlci5wcm90b3R5cGUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zZXQubmFtZSA9PT0gXCJzZXRcIlxuICAgICAgICA/IGZ1bmN0aW9uIHdyaXRlQnl0ZXNCdWZmZXJfc2V0KHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgICBidWYuc2V0KHZhbCwgcG9zKTsgLy8gZmFzdGVyIHRoYW4gY29weSAocmVxdWlyZXMgbm9kZSA+PSA0IHdoZXJlIEJ1ZmZlcnMgZXh0ZW5kIFVpbnQ4QXJyYXkgYW5kIHNldCBpcyBwcm9wZXJseSBpbmhlcml0ZWQpXG4gICAgICAgICAgLy8gYWxzbyB3b3JrcyBmb3IgcGxhaW4gYXJyYXkgdmFsdWVzXG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX2NvcHkodmFsLCBidWYsIHBvcykge1xuICAgICAgICAgIGlmICh2YWwuY29weSkgLy8gQnVmZmVyIHZhbHVlc1xuICAgICAgICAgICAgdmFsLmNvcHkoYnVmLCBwb3MsIDAsIHZhbC5sZW5ndGgpO1xuICAgICAgICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOykgLy8gcGxhaW4gYXJyYXkgdmFsdWVzXG4gICAgICAgICAgICBidWZbcG9zKytdID0gdmFsW2krK107XG4gICAgICAgIH07XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuYnl0ZXMgPSBmdW5jdGlvbiB3cml0ZV9ieXRlc19idWZmZXIodmFsdWUpIHtcbiAgICBpZiAodXRpbC5pc1N0cmluZyh2YWx1ZSkpXG4gICAgICAgIHZhbHVlID0gdXRpbC5fQnVmZmVyX2Zyb20odmFsdWUsIFwiYmFzZTY0XCIpO1xuICAgIHZhciBsZW4gPSB2YWx1ZS5sZW5ndGggPj4+IDA7XG4gICAgdGhpcy51aW50MzIobGVuKTtcbiAgICBpZiAobGVuKVxuICAgICAgICB0aGlzLl9wdXNoKEJ1ZmZlcldyaXRlci53cml0ZUJ5dGVzQnVmZmVyLCBsZW4sIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHdyaXRlU3RyaW5nQnVmZmVyKHZhbCwgYnVmLCBwb3MpIHtcbiAgICBpZiAodmFsLmxlbmd0aCA8IDQwKSAvLyBwbGFpbiBqcyBpcyBmYXN0ZXIgZm9yIHNob3J0IHN0cmluZ3MgKHByb2JhYmx5IGR1ZSB0byByZWR1bmRhbnQgYXNzZXJ0aW9ucylcbiAgICAgICAgdXRpbC51dGY4LndyaXRlKHZhbCwgYnVmLCBwb3MpO1xuICAgIGVsc2UgaWYgKGJ1Zi51dGY4V3JpdGUpXG4gICAgICAgIGJ1Zi51dGY4V3JpdGUodmFsLCBwb3MpO1xuICAgIGVsc2VcbiAgICAgICAgYnVmLndyaXRlKHZhbCwgcG9zKTtcbn1cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiB3cml0ZV9zdHJpbmdfYnVmZmVyKHZhbHVlKSB7XG4gICAgdmFyIGxlbiA9IHV0aWwuQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICAgIHRoaXMudWludDMyKGxlbik7XG4gICAgaWYgKGxlbilcbiAgICAgICAgdGhpcy5fcHVzaCh3cml0ZVN0cmluZ0J1ZmZlciwgbGVuLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogRmluaXNoZXMgdGhlIHdyaXRlIG9wZXJhdGlvbi5cbiAqIEBuYW1lIEJ1ZmZlcldyaXRlciNmaW5pc2hcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcn0gRmluaXNoZWQgYnVmZmVyXG4gKi9cblxuQnVmZmVyV3JpdGVyLl9jb25maWd1cmUoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBSZWFkZXI7XG5cbnZhciB1dGlsICAgICAgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbnZhciBCdWZmZXJSZWFkZXI7IC8vIGN5Y2xpY1xuXG52YXIgTG9uZ0JpdHMgID0gdXRpbC5Mb25nQml0cyxcbiAgICB1dGY4ICAgICAgPSB1dGlsLnV0Zjg7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpbmRleE91dE9mUmFuZ2UocmVhZGVyLCB3cml0ZUxlbmd0aCkge1xuICAgIHJldHVybiBSYW5nZUVycm9yKFwiaW5kZXggb3V0IG9mIHJhbmdlOiBcIiArIHJlYWRlci5wb3MgKyBcIiArIFwiICsgKHdyaXRlTGVuZ3RoIHx8IDEpICsgXCIgPiBcIiArIHJlYWRlci5sZW4pO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcmVhZGVyIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgYnVmZmVyLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCByZWFkZXIgdXNpbmcgYFVpbnQ4QXJyYXlgIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGBBcnJheWAuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIEJ1ZmZlciB0byByZWFkIGZyb21cbiAqL1xuZnVuY3Rpb24gUmVhZGVyKGJ1ZmZlcikge1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIuXG4gICAgICogQHR5cGUge1VpbnQ4QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5idWYgPSBidWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGJ1ZmZlciBwb3NpdGlvbi5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucG9zID0gMDtcblxuICAgIC8qKlxuICAgICAqIFJlYWQgYnVmZmVyIGxlbmd0aC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGVuID0gYnVmZmVyLmxlbmd0aDtcbn1cblxudmFyIGNyZWF0ZV9hcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyBmdW5jdGlvbiBjcmVhdGVfdHlwZWRfYXJyYXkoYnVmZmVyKSB7XG4gICAgICAgIGlmIChidWZmZXIgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IEFycmF5LmlzQXJyYXkoYnVmZmVyKSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZGVyKGJ1ZmZlcik7XG4gICAgICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBidWZmZXJcIik7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgOiBmdW5jdGlvbiBjcmVhdGVfYXJyYXkoYnVmZmVyKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJ1ZmZlcikpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRlcihidWZmZXIpO1xuICAgICAgICB0aHJvdyBFcnJvcihcImlsbGVnYWwgYnVmZmVyXCIpO1xuICAgIH07XG5cbnZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHV0aWwuQnVmZmVyXG4gICAgICAgID8gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcl9zZXR1cChidWZmZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoUmVhZGVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZV9idWZmZXIoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcilcbiAgICAgICAgICAgICAgICAgICAgPyBuZXcgQnVmZmVyUmVhZGVyKGJ1ZmZlcilcbiAgICAgICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgICAgICAgICAgOiBjcmVhdGVfYXJyYXkoYnVmZmVyKTtcbiAgICAgICAgICAgIH0pKGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiBjcmVhdGVfYXJyYXk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcmVhZGVyIHVzaW5nIHRoZSBzcGVjaWZpZWQgYnVmZmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8QnVmZmVyfSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxuICogQHJldHVybnMge1JlYWRlcnxCdWZmZXJSZWFkZXJ9IEEge0BsaW5rIEJ1ZmZlclJlYWRlcn0gaWYgYGJ1ZmZlcmAgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBhIHtAbGluayBSZWFkZXJ9XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYGJ1ZmZlcmAgaXMgbm90IGEgdmFsaWQgYnVmZmVyXG4gKi9cblJlYWRlci5jcmVhdGUgPSBjcmVhdGUoKTtcblxuUmVhZGVyLnByb3RvdHlwZS5fc2xpY2UgPSB1dGlsLkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1dGlsLkFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUuXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS51aW50MzIgPSAoZnVuY3Rpb24gcmVhZF91aW50MzJfc2V0dXAoKSB7XG4gICAgdmFyIHZhbHVlID0gNDI5NDk2NzI5NTsgLy8gb3B0aW1pemVyIHR5cGUtaGludCwgdGVuZHMgdG8gZGVvcHQgb3RoZXJ3aXNlICg/ISlcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVhZF91aW50MzIoKSB7XG4gICAgICAgIHZhbHVlID0gKCAgICAgICAgIHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNyAgICAgICApID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCAgNykgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IDE0KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMjEpID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgIDE1KSA8PCAyOCkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoKHRoaXMucG9zICs9IDUpID4gdGhpcy5sZW4pIHtcbiAgICAgICAgICAgIHRoaXMucG9zID0gdGhpcy5sZW47XG4gICAgICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIHNpZ25lZCAzMiBiaXQgdmFsdWUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuaW50MzIgPSBmdW5jdGlvbiByZWFkX2ludDMyKCkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigpIHwgMDtcbn07XG5cbi8qKlxuICogUmVhZHMgYSB6aWctemFnIGVuY29kZWQgdmFyaW50IGFzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5zaW50MzIgPSBmdW5jdGlvbiByZWFkX3NpbnQzMigpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLnVpbnQzMigpO1xuICAgIHJldHVybiB2YWx1ZSA+Pj4gMSBeIC0odmFsdWUgJiAxKSB8IDA7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuZnVuY3Rpb24gcmVhZExvbmdWYXJpbnQoKSB7XG4gICAgLy8gdGVuZHMgdG8gZGVvcHQgd2l0aCBsb2NhbCB2YXJzIGZvciBvY3RldCBldGMuXG4gICAgdmFyIGJpdHMgPSBuZXcgTG9uZ0JpdHMoMCwgMCk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGlmICh0aGlzLmxlbiAtIHRoaXMucG9zID4gNCkgeyAvLyBmYXN0IHJvdXRlIChsbylcbiAgICAgICAgZm9yICg7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgICAgIC8vIDFzdC4uNHRoXG4gICAgICAgICAgICBiaXRzLmxvID0gKGJpdHMubG8gfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNXRoXG4gICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IDI4KSA+Pj4gMDtcbiAgICAgICAgYml0cy5oaSA9IChiaXRzLmhpIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPj4gIDQpID4+PiAwO1xuICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgaSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCAzOyArK2kpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMubGVuKVxuICAgICAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzKTtcbiAgICAgICAgICAgIC8vIDFzdC4uM3RoXG4gICAgICAgICAgICBiaXRzLmxvID0gKGJpdHMubG8gfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNHRoXG4gICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSAmIDEyNykgPDwgaSAqIDcpID4+PiAwO1xuICAgICAgICByZXR1cm4gYml0cztcbiAgICB9XG4gICAgaWYgKHRoaXMubGVuIC0gdGhpcy5wb3MgPiA0KSB7IC8vIGZhc3Qgcm91dGUgKGhpKVxuICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgLy8gNnRoLi4xMHRoXG4gICAgICAgICAgICBiaXRzLmhpID0gKGJpdHMuaGkgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNyArIDMpID4+PiAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KVxuICAgICAgICAgICAgICAgIHJldHVybiBiaXRzO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCA1OyArK2kpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMubGVuKVxuICAgICAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzKTtcbiAgICAgICAgICAgIC8vIDZ0aC4uMTB0aFxuICAgICAgICAgICAgYml0cy5oaSA9IChiaXRzLmhpIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgaSAqIDcgKyAzKSA+Pj4gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHRocm93IEVycm9yKFwiaW52YWxpZCB2YXJpbnQgZW5jb2RpbmdcIik7XG59XG5cbi8qIGVzbGludC1lbmFibGUgbm8taW52YWxpZC10aGlzICovXG5cbi8qKlxuICogUmVhZHMgYSB2YXJpbnQgYXMgYSBzaWduZWQgNjQgYml0IHZhbHVlLlxuICogQG5hbWUgUmVhZGVyI2ludDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhbiB1bnNpZ25lZCA2NCBiaXQgdmFsdWUuXG4gKiBAbmFtZSBSZWFkZXIjdWludDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIHppZy16YWcgZW5jb2RlZCB2YXJpbnQgYXMgYSBzaWduZWQgNjQgYml0IHZhbHVlLlxuICogQG5hbWUgUmVhZGVyI3NpbnQ2NFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7TG9uZ30gVmFsdWUgcmVhZFxuICovXG5cbi8qKlxuICogUmVhZHMgYSB2YXJpbnQgYXMgYSBib29sZWFuLlxuICogQHJldHVybnMge2Jvb2xlYW59IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gcmVhZF9ib29sKCkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigpICE9PSAwO1xufTtcblxuZnVuY3Rpb24gcmVhZEZpeGVkMzJfZW5kKGJ1ZiwgZW5kKSB7IC8vIG5vdGUgdGhhdCB0aGlzIHVzZXMgYGVuZGAsIG5vdCBgcG9zYFxuICAgIHJldHVybiAoYnVmW2VuZCAtIDRdXG4gICAgICAgICAgfCBidWZbZW5kIC0gM10gPDwgOFxuICAgICAgICAgIHwgYnVmW2VuZCAtIDJdIDw8IDE2XG4gICAgICAgICAgfCBidWZbZW5kIC0gMV0gPDwgMjQpID4+PiAwO1xufVxuXG4vKipcbiAqIFJlYWRzIGZpeGVkIDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgMzIgYml0IGludGVnZXIuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuZml4ZWQzMiA9IGZ1bmN0aW9uIHJlYWRfZml4ZWQzMigpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnBvcyArIDQgPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDQpO1xuXG4gICAgcmV0dXJuIHJlYWRGaXhlZDMyX2VuZCh0aGlzLmJ1ZiwgdGhpcy5wb3MgKz0gNCk7XG59O1xuXG4vKipcbiAqIFJlYWRzIGZpeGVkIDMyIGJpdHMgYXMgYSBzaWduZWQgMzIgYml0IGludGVnZXIuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc2ZpeGVkMzIgPSBmdW5jdGlvbiByZWFkX3NmaXhlZDMyKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgNCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICByZXR1cm4gcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSB8IDA7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuZnVuY3Rpb24gcmVhZEZpeGVkNjQoLyogdGhpczogUmVhZGVyICovKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA4ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA4KTtcblxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMocmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSwgcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSk7XG59XG5cbi8qIGVzbGludC1lbmFibGUgbm8taW52YWxpZC10aGlzICovXG5cbi8qKlxuICogUmVhZHMgZml4ZWQgNjQgYml0cy5cbiAqIEBuYW1lIFJlYWRlciNmaXhlZDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyB6aWctemFnIGVuY29kZWQgZml4ZWQgNjQgYml0cy5cbiAqIEBuYW1lIFJlYWRlciNzZml4ZWQ2NFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7TG9uZ30gVmFsdWUgcmVhZFxuICovXG5cbi8qKlxuICogUmVhZHMgYSBmbG9hdCAoMzIgYml0KSBhcyBhIG51bWJlci5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmZsb2F0ID0gZnVuY3Rpb24gcmVhZF9mbG9hdCgpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnBvcyArIDQgPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDQpO1xuXG4gICAgdmFyIHZhbHVlID0gdXRpbC5mbG9hdC5yZWFkRmxvYXRMRSh0aGlzLmJ1ZiwgdGhpcy5wb3MpO1xuICAgIHRoaXMucG9zICs9IDQ7XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIGRvdWJsZSAoNjQgYml0IGZsb2F0KSBhcyBhIG51bWJlci5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmRvdWJsZSA9IGZ1bmN0aW9uIHJlYWRfZG91YmxlKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgOCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICB2YXIgdmFsdWUgPSB1dGlsLmZsb2F0LnJlYWREb3VibGVMRSh0aGlzLmJ1ZiwgdGhpcy5wb3MpO1xuICAgIHRoaXMucG9zICs9IDg7XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5ieXRlcyA9IGZ1bmN0aW9uIHJlYWRfYnl0ZXMoKSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMudWludDMyKCksXG4gICAgICAgIHN0YXJ0ICA9IHRoaXMucG9zLFxuICAgICAgICBlbmQgICAgPSB0aGlzLnBvcyArIGxlbmd0aDtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChlbmQgPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIGxlbmd0aCk7XG5cbiAgICB0aGlzLnBvcyArPSBsZW5ndGg7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5idWYpKSAvLyBwbGFpbiBhcnJheVxuICAgICAgICByZXR1cm4gdGhpcy5idWYuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgcmV0dXJuIHN0YXJ0ID09PSBlbmQgLy8gZml4IGZvciBJRSAxMC9XaW44IGFuZCBvdGhlcnMnIHN1YmFycmF5IHJldHVybmluZyBhcnJheSBvZiBzaXplIDFcbiAgICAgICAgPyBuZXcgdGhpcy5idWYuY29uc3RydWN0b3IoMClcbiAgICAgICAgOiB0aGlzLl9zbGljZS5jYWxsKHRoaXMuYnVmLCBzdGFydCwgZW5kKTtcbn07XG5cbi8qKlxuICogUmVhZHMgYSBzdHJpbmcgcHJlY2VlZGVkIGJ5IGl0cyBieXRlIGxlbmd0aCBhcyBhIHZhcmludC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiByZWFkX3N0cmluZygpIHtcbiAgICB2YXIgYnl0ZXMgPSB0aGlzLmJ5dGVzKCk7XG4gICAgcmV0dXJuIHV0ZjgucmVhZChieXRlcywgMCwgYnl0ZXMubGVuZ3RoKTtcbn07XG5cbi8qKlxuICogU2tpcHMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgYnl0ZXMgaWYgc3BlY2lmaWVkLCBvdGhlcndpc2Ugc2tpcHMgYSB2YXJpbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTGVuZ3RoIGlmIGtub3duLCBvdGhlcndpc2UgYSB2YXJpbnQgaXMgYXNzdW1lZFxuICogQHJldHVybnMge1JlYWRlcn0gYHRoaXNgXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uIHNraXAobGVuZ3RoKSB7XG4gICAgaWYgKHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICh0aGlzLnBvcyArIGxlbmd0aCA+IHRoaXMubGVuKVxuICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIGxlbmd0aCk7XG4gICAgICAgIHRoaXMucG9zICs9IGxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnBvcyA+PSB0aGlzLmxlbilcbiAgICAgICAgICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcyk7XG4gICAgICAgIH0gd2hpbGUgKHRoaXMuYnVmW3RoaXMucG9zKytdICYgMTI4KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNraXBzIHRoZSBuZXh0IGVsZW1lbnQgb2YgdGhlIHNwZWNpZmllZCB3aXJlIHR5cGUuXG4gKiBAcGFyYW0ge251bWJlcn0gd2lyZVR5cGUgV2lyZSB0eXBlIHJlY2VpdmVkXG4gKiBAcmV0dXJucyB7UmVhZGVyfSBgdGhpc2BcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5za2lwVHlwZSA9IGZ1bmN0aW9uKHdpcmVUeXBlKSB7XG4gICAgc3dpdGNoICh3aXJlVHlwZSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICB0aGlzLnNraXAoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB0aGlzLnNraXAoOCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgdGhpcy5za2lwKHRoaXMudWludDMyKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHdoaWxlICgod2lyZVR5cGUgPSB0aGlzLnVpbnQzMigpICYgNykgIT09IDQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNraXBUeXBlKHdpcmVUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICB0aGlzLnNraXAoNCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHdpcmUgdHlwZSBcIiArIHdpcmVUeXBlICsgXCIgYXQgb2Zmc2V0IFwiICsgdGhpcy5wb3MpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblJlYWRlci5fY29uZmlndXJlID0gZnVuY3Rpb24oQnVmZmVyUmVhZGVyXykge1xuICAgIEJ1ZmZlclJlYWRlciA9IEJ1ZmZlclJlYWRlcl87XG4gICAgUmVhZGVyLmNyZWF0ZSA9IGNyZWF0ZSgpO1xuICAgIEJ1ZmZlclJlYWRlci5fY29uZmlndXJlKCk7XG5cbiAgICB2YXIgZm4gPSB1dGlsLkxvbmcgPyBcInRvTG9uZ1wiIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gXCJ0b051bWJlclwiO1xuICAgIHV0aWwubWVyZ2UoUmVhZGVyLnByb3RvdHlwZSwge1xuXG4gICAgICAgIGludDY0OiBmdW5jdGlvbiByZWFkX2ludDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRMb25nVmFyaW50LmNhbGwodGhpcylbZm5dKGZhbHNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1aW50NjQ6IGZ1bmN0aW9uIHJlYWRfdWludDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRMb25nVmFyaW50LmNhbGwodGhpcylbZm5dKHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNpbnQ2NDogZnVuY3Rpb24gcmVhZF9zaW50NjQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZExvbmdWYXJpbnQuY2FsbCh0aGlzKS56ekRlY29kZSgpW2ZuXShmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZml4ZWQ2NDogZnVuY3Rpb24gcmVhZF9maXhlZDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRGaXhlZDY0LmNhbGwodGhpcylbZm5dKHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNmaXhlZDY0OiBmdW5jdGlvbiByZWFkX3NmaXhlZDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRGaXhlZDY0LmNhbGwodGhpcylbZm5dKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlclJlYWRlcjtcblxuLy8gZXh0ZW5kcyBSZWFkZXJcbnZhciBSZWFkZXIgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XG4oQnVmZmVyUmVhZGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVhZGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyUmVhZGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciByZWFkZXIgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHJlYWRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXG4gKiBAZXh0ZW5kcyBSZWFkZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBCdWZmZXIgdG8gcmVhZCBmcm9tXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlclJlYWRlcihidWZmZXIpIHtcbiAgICBSZWFkZXIuY2FsbCh0aGlzLCBidWZmZXIpO1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIuXG4gICAgICogQG5hbWUgQnVmZmVyUmVhZGVyI2J1ZlxuICAgICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAgICovXG59XG5cbkJ1ZmZlclJlYWRlci5fY29uZmlndXJlID0gZnVuY3Rpb24gKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHV0aWwuQnVmZmVyKVxuICAgICAgICBCdWZmZXJSZWFkZXIucHJvdG90eXBlLl9zbGljZSA9IHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyUmVhZGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiByZWFkX3N0cmluZ19idWZmZXIoKSB7XG4gICAgdmFyIGxlbiA9IHRoaXMudWludDMyKCk7IC8vIG1vZGlmaWVzIHBvc1xuICAgIHJldHVybiB0aGlzLmJ1Zi51dGY4U2xpY2VcbiAgICAgICAgPyB0aGlzLmJ1Zi51dGY4U2xpY2UodGhpcy5wb3MsIHRoaXMucG9zID0gTWF0aC5taW4odGhpcy5wb3MgKyBsZW4sIHRoaXMubGVuKSlcbiAgICAgICAgOiB0aGlzLmJ1Zi50b1N0cmluZyhcInV0Zi04XCIsIHRoaXMucG9zLCB0aGlzLnBvcyA9IE1hdGgubWluKHRoaXMucG9zICsgbGVuLCB0aGlzLmxlbikpO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxuICogQG5hbWUgQnVmZmVyUmVhZGVyI2J5dGVzXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFZhbHVlIHJlYWRcbiAqL1xuXG5CdWZmZXJSZWFkZXIuX2NvbmZpZ3VyZSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2U7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbWluaW1hbFwiKTtcblxuLy8gRXh0ZW5kcyBFdmVudEVtaXR0ZXJcbihTZXJ2aWNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodXRpbC5FdmVudEVtaXR0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBTZXJ2aWNlO1xuXG4vKipcbiAqIEEgc2VydmljZSBtZXRob2QgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgcnBjLlNlcnZpY2VNZXRob2R8U2VydmljZU1ldGhvZH0uXG4gKlxuICogRGlmZmVycyBmcm9tIHtAbGluayBSUENJbXBsQ2FsbGJhY2t9IGluIHRoYXQgaXQgaXMgYW4gYWN0dWFsIGNhbGxiYWNrIG9mIGEgc2VydmljZSBtZXRob2Qgd2hpY2ggbWF5IG5vdCByZXR1cm4gYHJlc3BvbnNlID0gbnVsbGAuXG4gKiBAdHlwZWRlZiBycGMuU2VydmljZU1ldGhvZENhbGxiYWNrXG4gKiBAdGVtcGxhdGUgVFJlcyBleHRlbmRzIE1lc3NhZ2U8VFJlcz5cbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgRXJyb3IsIGlmIGFueVxuICogQHBhcmFtIHtUUmVzfSBbcmVzcG9uc2VdIFJlc3BvbnNlIG1lc3NhZ2VcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuLyoqXG4gKiBBIHNlcnZpY2UgbWV0aG9kIHBhcnQgb2YgYSB7QGxpbmsgcnBjLlNlcnZpY2V9IGFzIGNyZWF0ZWQgYnkge0BsaW5rIFNlcnZpY2UuY3JlYXRlfS5cbiAqIEB0eXBlZGVmIHJwYy5TZXJ2aWNlTWV0aG9kXG4gKiBAdGVtcGxhdGUgVFJlcSBleHRlbmRzIE1lc3NhZ2U8VFJlcT5cbiAqIEB0ZW1wbGF0ZSBUUmVzIGV4dGVuZHMgTWVzc2FnZTxUUmVzPlxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtUUmVxfFByb3BlcnRpZXM8VFJlcT59IHJlcXVlc3QgUmVxdWVzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdFxuICogQHBhcmFtIHtycGMuU2VydmljZU1ldGhvZENhbGxiYWNrPFRSZXM+fSBbY2FsbGJhY2tdIE5vZGUtc3R5bGUgY2FsbGJhY2sgY2FsbGVkIHdpdGggdGhlIGVycm9yLCBpZiBhbnksIGFuZCB0aGUgcmVzcG9uc2UgbWVzc2FnZVxuICogQHJldHVybnMge1Byb21pc2U8TWVzc2FnZTxUUmVzPj59IFByb21pc2UgaWYgYGNhbGxiYWNrYCBoYXMgYmVlbiBvbWl0dGVkLCBvdGhlcndpc2UgYHVuZGVmaW5lZGBcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgUlBDIHNlcnZpY2UgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIEFuIFJQQyBzZXJ2aWNlIGFzIHJldHVybmVkIGJ5IHtAbGluayBTZXJ2aWNlI2NyZWF0ZX0uXG4gKiBAZXhwb3J0cyBycGMuU2VydmljZVxuICogQGV4dGVuZHMgdXRpbC5FdmVudEVtaXR0ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtSUENJbXBsfSBycGNJbXBsIFJQQyBpbXBsZW1lbnRhdGlvblxuICogQHBhcmFtIHtib29sZWFufSBbcmVxdWVzdERlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxuICogQHBhcmFtIHtib29sZWFufSBbcmVzcG9uc2VEZWxpbWl0ZWQ9ZmFsc2VdIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBsZW5ndGgtZGVsaW1pdGVkXG4gKi9cbmZ1bmN0aW9uIFNlcnZpY2UocnBjSW1wbCwgcmVxdWVzdERlbGltaXRlZCwgcmVzcG9uc2VEZWxpbWl0ZWQpIHtcblxuICAgIGlmICh0eXBlb2YgcnBjSW1wbCAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJycGNJbXBsIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICAgIHV0aWwuRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBSUEMgaW1wbGVtZW50YXRpb24uIEJlY29tZXMgYG51bGxgIG9uY2UgdGhlIHNlcnZpY2UgaXMgZW5kZWQuXG4gICAgICogQHR5cGUge1JQQ0ltcGx8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJwY0ltcGwgPSBycGNJbXBsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlcXVlc3REZWxpbWl0ZWQgPSBCb29sZWFuKHJlcXVlc3REZWxpbWl0ZWQpO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXNwb25zZXMgYXJlIGxlbmd0aC1kZWxpbWl0ZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXNwb25zZURlbGltaXRlZCA9IEJvb2xlYW4ocmVzcG9uc2VEZWxpbWl0ZWQpO1xufVxuXG4vKipcbiAqIENhbGxzIGEgc2VydmljZSBtZXRob2QgdGhyb3VnaCB7QGxpbmsgcnBjLlNlcnZpY2UjcnBjSW1wbHxycGNJbXBsfS5cbiAqIEBwYXJhbSB7TWV0aG9kfHJwYy5TZXJ2aWNlTWV0aG9kPFRSZXEsVFJlcz59IG1ldGhvZCBSZWZsZWN0ZWQgb3Igc3RhdGljIG1ldGhvZFxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUUmVxPn0gcmVxdWVzdEN0b3IgUmVxdWVzdCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUUmVzPn0gcmVzcG9uc2VDdG9yIFJlc3BvbnNlIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1RSZXF8UHJvcGVydGllczxUUmVxPn0gcmVxdWVzdCBSZXF1ZXN0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0XG4gKiBAcGFyYW0ge3JwYy5TZXJ2aWNlTWV0aG9kQ2FsbGJhY2s8VFJlcz59IGNhbGxiYWNrIFNlcnZpY2UgY2FsbGJhY2tcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAdGVtcGxhdGUgVFJlcSBleHRlbmRzIE1lc3NhZ2U8VFJlcT5cbiAqIEB0ZW1wbGF0ZSBUUmVzIGV4dGVuZHMgTWVzc2FnZTxUUmVzPlxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS5ycGNDYWxsID0gZnVuY3Rpb24gcnBjQ2FsbChtZXRob2QsIHJlcXVlc3RDdG9yLCByZXNwb25zZUN0b3IsIHJlcXVlc3QsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXJlcXVlc3QpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInJlcXVlc3QgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuIHV0aWwuYXNQcm9taXNlKHJwY0NhbGwsIHNlbGYsIG1ldGhvZCwgcmVxdWVzdEN0b3IsIHJlc3BvbnNlQ3RvciwgcmVxdWVzdCk7XG5cbiAgICBpZiAoIXNlbGYucnBjSW1wbCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhFcnJvcihcImFscmVhZHkgZW5kZWRcIikpOyB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gc2VsZi5ycGNJbXBsKFxuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgcmVxdWVzdEN0b3Jbc2VsZi5yZXF1ZXN0RGVsaW1pdGVkID8gXCJlbmNvZGVEZWxpbWl0ZWRcIiA6IFwiZW5jb2RlXCJdKHJlcXVlc3QpLmZpbmlzaCgpLFxuICAgICAgICAgICAgZnVuY3Rpb24gcnBjQ2FsbGJhY2soZXJyLCByZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBlcnIsIG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVuZCgvKiBlbmRlZEJ5UlBDICovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlIGluc3RhbmNlb2YgcmVzcG9uc2VDdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZUN0b3Jbc2VsZi5yZXNwb25zZURlbGltaXRlZCA/IFwiZGVjb2RlRGVsaW1pdGVkXCIgOiBcImRlY29kZVwiXShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgZXJyLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLmVtaXQoXCJkYXRhXCIsIHJlc3BvbnNlLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVyciwgbWV0aG9kKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2soZXJyKTsgfSwgMCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxuLyoqXG4gKiBFbmRzIHRoaXMgc2VydmljZSBhbmQgZW1pdHMgdGhlIGBlbmRgIGV2ZW50LlxuICogQHBhcmFtIHtib29sZWFufSBbZW5kZWRCeVJQQz1mYWxzZV0gV2hldGhlciB0aGUgc2VydmljZSBoYXMgYmVlbiBlbmRlZCBieSB0aGUgUlBDIGltcGxlbWVudGF0aW9uLlxuICogQHJldHVybnMge3JwYy5TZXJ2aWNlfSBgdGhpc2BcbiAqL1xuU2VydmljZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gZW5kKGVuZGVkQnlSUEMpIHtcbiAgICBpZiAodGhpcy5ycGNJbXBsKSB7XG4gICAgICAgIGlmICghZW5kZWRCeVJQQykgLy8gc2lnbmFsIGVuZCB0byBycGNJbXBsXG4gICAgICAgICAgICB0aGlzLnJwY0ltcGwobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgIHRoaXMucnBjSW1wbCA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdChcImVuZFwiKS5vZmYoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogU3RyZWFtaW5nIFJQQyBoZWxwZXJzLlxuICogQG5hbWVzcGFjZVxuICovXG52YXIgcnBjID0gZXhwb3J0cztcblxuLyoqXG4gKiBSUEMgaW1wbGVtZW50YXRpb24gcGFzc2VkIHRvIHtAbGluayBTZXJ2aWNlI2NyZWF0ZX0gcGVyZm9ybWluZyBhIHNlcnZpY2UgcmVxdWVzdCBvbiBuZXR3b3JrIGxldmVsLCBpLmUuIGJ5IHV0aWxpemluZyBodHRwIHJlcXVlc3RzIG9yIHdlYnNvY2tldHMuXG4gKiBAdHlwZWRlZiBSUENJbXBsXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge01ldGhvZHxycGMuU2VydmljZU1ldGhvZDxNZXNzYWdlPHt9PixNZXNzYWdlPHt9Pj59IG1ldGhvZCBSZWZsZWN0ZWQgb3Igc3RhdGljIG1ldGhvZCBiZWluZyBjYWxsZWRcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gcmVxdWVzdERhdGEgUmVxdWVzdCBkYXRhXG4gKiBAcGFyYW0ge1JQQ0ltcGxDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAZXhhbXBsZVxuICogZnVuY3Rpb24gcnBjSW1wbChtZXRob2QsIHJlcXVlc3REYXRhLCBjYWxsYmFjaykge1xuICogICAgIGlmIChwcm90b2J1Zi51dGlsLmxjRmlyc3QobWV0aG9kLm5hbWUpICE9PSBcIm15TWV0aG9kXCIpIC8vIGNvbXBhdGlibGUgd2l0aCBzdGF0aWMgY29kZVxuICogICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggbWV0aG9kXCIpO1xuICogICAgIGFzeW5jaHJvbm91c2x5T2J0YWluQVJlc3BvbnNlKHJlcXVlc3REYXRhLCBmdW5jdGlvbihlcnIsIHJlc3BvbnNlRGF0YSkge1xuICogICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3BvbnNlRGF0YSk7XG4gKiAgICAgfSk7XG4gKiB9XG4gKi9cblxuLyoqXG4gKiBOb2RlLXN0eWxlIGNhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIFJQQ0ltcGx9LlxuICogQHR5cGVkZWYgUlBDSW1wbENhbGxiYWNrXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnksIG90aGVyd2lzZSBgbnVsbGBcbiAqIEBwYXJhbSB7VWludDhBcnJheXxudWxsfSBbcmVzcG9uc2VdIFJlc3BvbnNlIGRhdGEgb3IgYG51bGxgIHRvIHNpZ25hbCBlbmQgb2Ygc3RyZWFtLCBpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhbiBlcnJvclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG5ycGMuU2VydmljZSA9IHJlcXVpcmUoXCIuL3JwYy9zZXJ2aWNlXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vKipcbiAqIE5hbWVkIHJvb3RzLlxuICogVGhpcyBpcyB3aGVyZSBwYmpzIHN0b3JlcyBnZW5lcmF0ZWQgc3RydWN0dXJlcyAodGhlIG9wdGlvbiBgLXIsIC0tcm9vdGAgc3BlY2lmaWVzIGEgbmFtZSkuXG4gKiBDYW4gYWxzbyBiZSB1c2VkIG1hbnVhbGx5IHRvIG1ha2Ugcm9vdHMgYXZhaWxhYmxlIGFjcm9zcyBtb2R1bGVzLlxuICogQG5hbWUgcm9vdHNcbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxSb290Pn1cbiAqIEBleGFtcGxlXG4gKiAvLyBwYmpzIC1yIG15cm9vdCAtbyBjb21waWxlZC5qcyAuLi5cbiAqXG4gKiAvLyBpbiBhbm90aGVyIG1vZHVsZTpcbiAqIHJlcXVpcmUoXCIuL2NvbXBpbGVkLmpzXCIpO1xuICpcbiAqIC8vIGluIGFueSBzdWJzZXF1ZW50IG1vZHVsZTpcbiAqIHZhciByb290ID0gcHJvdG9idWYucm9vdHNbXCJteXJvb3RcIl07XG4gKi9cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIHByb3RvYnVmID0gZXhwb3J0cztcblxuLyoqXG4gKiBCdWlsZCB0eXBlLCBvbmUgb2YgYFwiZnVsbFwiYCwgYFwibGlnaHRcImAgb3IgYFwibWluaW1hbFwiYC5cbiAqIEBuYW1lIGJ1aWxkXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0XG4gKi9cbnByb3RvYnVmLmJ1aWxkID0gXCJtaW5pbWFsXCI7XG5cbi8vIFNlcmlhbGl6YXRpb25cbnByb3RvYnVmLldyaXRlciAgICAgICA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcbnByb3RvYnVmLkJ1ZmZlcldyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlcl9idWZmZXJcIik7XG5wcm90b2J1Zi5SZWFkZXIgICAgICAgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XG5wcm90b2J1Zi5CdWZmZXJSZWFkZXIgPSByZXF1aXJlKFwiLi9yZWFkZXJfYnVmZmVyXCIpO1xuXG4vLyBVdGlsaXR5XG5wcm90b2J1Zi51dGlsICAgICAgICAgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5wcm90b2J1Zi5ycGMgICAgICAgICAgPSByZXF1aXJlKFwiLi9ycGNcIik7XG5wcm90b2J1Zi5yb290cyAgICAgICAgPSByZXF1aXJlKFwiLi9yb290c1wiKTtcbnByb3RvYnVmLmNvbmZpZ3VyZSAgICA9IGNvbmZpZ3VyZTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogUmVjb25maWd1cmVzIHRoZSBsaWJyYXJ5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnQuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBjb25maWd1cmUoKSB7XG4gICAgcHJvdG9idWYudXRpbC5fY29uZmlndXJlKCk7XG4gICAgcHJvdG9idWYuV3JpdGVyLl9jb25maWd1cmUocHJvdG9idWYuQnVmZmVyV3JpdGVyKTtcbiAgICBwcm90b2J1Zi5SZWFkZXIuX2NvbmZpZ3VyZShwcm90b2J1Zi5CdWZmZXJSZWFkZXIpO1xufVxuXG4vLyBTZXQgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudFxuY29uZmlndXJlKCk7XG4iLCIvLyBtaW5pbWFsIGxpYnJhcnkgZW50cnkgcG9pbnQuXG5cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9zcmMvaW5kZXgtbWluaW1hbFwiKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwiY29zbW9zLmJhc2UudjFiZXRhMVwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvaW4oKSB7XG4gICAgcmV0dXJuIHsgZGVub206IFwiXCIsIGFtb3VudDogXCJcIiB9O1xufVxuZXhwb3J0IGNvbnN0IENvaW4gPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZGVub20gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmRlbm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hbW91bnQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLmFtb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb2luKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kZW5vbSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFtb3VudCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVub206IGlzU2V0KG9iamVjdC5kZW5vbSkgPyBTdHJpbmcob2JqZWN0LmRlbm9tKSA6IFwiXCIsXG4gICAgICAgICAgICBhbW91bnQ6IGlzU2V0KG9iamVjdC5hbW91bnQpID8gU3RyaW5nKG9iamVjdC5hbW91bnQpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmRlbm9tICE9PSB1bmRlZmluZWQgJiYgKG9iai5kZW5vbSA9IG1lc3NhZ2UuZGVub20pO1xuICAgICAgICBtZXNzYWdlLmFtb3VudCAhPT0gdW5kZWZpbmVkICYmIChvYmouYW1vdW50ID0gbWVzc2FnZS5hbW91bnQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29pbigpO1xuICAgICAgICBtZXNzYWdlLmRlbm9tID0gb2JqZWN0LmRlbm9tID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuYW1vdW50ID0gb2JqZWN0LmFtb3VudCA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VEZWNDb2luKCkge1xuICAgIHJldHVybiB7IGRlbm9tOiBcIlwiLCBhbW91bnQ6IFwiXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBEZWNDb2luID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmRlbm9tICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5kZW5vbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYW1vdW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5hbW91bnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRGVjQ29pbigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVub20gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hbW91bnQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlbm9tOiBpc1NldChvYmplY3QuZGVub20pID8gU3RyaW5nKG9iamVjdC5kZW5vbSkgOiBcIlwiLFxuICAgICAgICAgICAgYW1vdW50OiBpc1NldChvYmplY3QuYW1vdW50KSA/IFN0cmluZyhvYmplY3QuYW1vdW50KSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5kZW5vbSAhPT0gdW5kZWZpbmVkICYmIChvYmouZGVub20gPSBtZXNzYWdlLmRlbm9tKTtcbiAgICAgICAgbWVzc2FnZS5hbW91bnQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmFtb3VudCA9IG1lc3NhZ2UuYW1vdW50KTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZURlY0NvaW4oKTtcbiAgICAgICAgbWVzc2FnZS5kZW5vbSA9IG9iamVjdC5kZW5vbSA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmFtb3VudCA9IG9iamVjdC5hbW91bnQgPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlSW50UHJvdG8oKSB7XG4gICAgcmV0dXJuIHsgaW50OiBcIlwiIH07XG59XG5leHBvcnQgY29uc3QgSW50UHJvdG8gPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5pbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlSW50UHJvdG8oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmludCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW50OiBpc1NldChvYmplY3QuaW50KSA/IFN0cmluZyhvYmplY3QuaW50KSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5pbnQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmludCA9IG1lc3NhZ2UuaW50KTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUludFByb3RvKCk7XG4gICAgICAgIG1lc3NhZ2UuaW50ID0gb2JqZWN0LmludCA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VEZWNQcm90bygpIHtcbiAgICByZXR1cm4geyBkZWM6IFwiXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBEZWNQcm90byA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5kZWMgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmRlYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VEZWNQcm90bygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVjID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWM6IGlzU2V0KG9iamVjdC5kZWMpID8gU3RyaW5nKG9iamVjdC5kZWMpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmRlYyAhPT0gdW5kZWZpbmVkICYmIChvYmouZGVjID0gbWVzc2FnZS5kZWMpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRGVjUHJvdG8oKTtcbiAgICAgICAgbWVzc2FnZS5kZWMgPSBvYmplY3QuZGVjID8/IFwiXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvaW4uanMubWFwIiwibW9kdWxlLmV4cG9ydHMgPSBMb25nO1xyXG5cclxuLyoqXHJcbiAqIHdhc20gb3B0aW1pemF0aW9ucywgdG8gZG8gbmF0aXZlIGk2NCBtdWx0aXBsaWNhdGlvbiBhbmQgZGl2aWRlXHJcbiAqL1xyXG52YXIgd2FzbSA9IG51bGw7XHJcblxyXG50cnkge1xyXG4gIHdhc20gPSBuZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UobmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShuZXcgVWludDhBcnJheShbXHJcbiAgICAwLCA5NywgMTE1LCAxMDksIDEsIDAsIDAsIDAsIDEsIDEzLCAyLCA5NiwgMCwgMSwgMTI3LCA5NiwgNCwgMTI3LCAxMjcsIDEyNywgMTI3LCAxLCAxMjcsIDMsIDcsIDYsIDAsIDEsIDEsIDEsIDEsIDEsIDYsIDYsIDEsIDEyNywgMSwgNjUsIDAsIDExLCA3LCA1MCwgNiwgMywgMTA5LCAxMTcsIDEwOCwgMCwgMSwgNSwgMTAwLCAxMDUsIDExOCwgOTUsIDExNSwgMCwgMiwgNSwgMTAwLCAxMDUsIDExOCwgOTUsIDExNywgMCwgMywgNSwgMTE0LCAxMDEsIDEwOSwgOTUsIDExNSwgMCwgNCwgNSwgMTE0LCAxMDEsIDEwOSwgOTUsIDExNywgMCwgNSwgOCwgMTAzLCAxMDEsIDExNiwgOTUsIDEwNCwgMTA1LCAxMDMsIDEwNCwgMCwgMCwgMTAsIDE5MSwgMSwgNiwgNCwgMCwgMzUsIDAsIDExLCAzNiwgMSwgMSwgMTI2LCAzMiwgMCwgMTczLCAzMiwgMSwgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAzMiwgMiwgMTczLCAzMiwgMywgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAxMjYsIDM0LCA0LCA2NiwgMzIsIDEzNSwgMTY3LCAzNiwgMCwgMzIsIDQsIDE2NywgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyNywgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMSwgMzYsIDEsIDEsIDEyNiwgMzIsIDAsIDE3MywgMzIsIDEsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMzIsIDIsIDE3MywgMzIsIDMsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMTI4LCAzNCwgNCwgNjYsIDMyLCAxMzUsIDE2NywgMzYsIDAsIDMyLCA0LCAxNjcsIDExLCAzNiwgMSwgMSwgMTI2LCAzMiwgMCwgMTczLCAzMiwgMSwgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAzMiwgMiwgMTczLCAzMiwgMywgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAxMjksIDM0LCA0LCA2NiwgMzIsIDEzNSwgMTY3LCAzNiwgMCwgMzIsIDQsIDE2NywgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEzMCwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMVxyXG4gIF0pKSwge30pLmV4cG9ydHM7XHJcbn0gY2F0Y2ggKGUpIHtcclxuICAvLyBubyB3YXNtIHN1cHBvcnQgOihcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSA2NCBiaXQgdHdvJ3MtY29tcGxlbWVudCBpbnRlZ2VyLCBnaXZlbiBpdHMgbG93IGFuZCBoaWdoIDMyIGJpdCB2YWx1ZXMgYXMgKnNpZ25lZCogaW50ZWdlcnMuXHJcbiAqICBTZWUgdGhlIGZyb20qIGZ1bmN0aW9ucyBiZWxvdyBmb3IgbW9yZSBjb252ZW5pZW50IHdheXMgb2YgY29uc3RydWN0aW5nIExvbmdzLlxyXG4gKiBAZXhwb3J0cyBMb25nXHJcbiAqIEBjbGFzcyBBIExvbmcgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIDY0IGJpdCB0d28ncy1jb21wbGVtZW50IGludGVnZXIgdmFsdWUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgVGhlIGxvdyAoc2lnbmVkKSAzMiBiaXRzIG9mIHRoZSBsb25nXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIExvbmcobG93LCBoaWdoLCB1bnNpZ25lZCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgdGhpcy5sb3cgPSBsb3cgfCAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGhpZ2ggMzIgYml0cyBhcyBhIHNpZ25lZCB2YWx1ZS5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGlnaCA9IGhpZ2ggfCAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB1bnNpZ25lZCBvciBub3QuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgdGhpcy51bnNpZ25lZCA9ICEhdW5zaWduZWQ7XHJcbn1cclxuXHJcbi8vIFRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBhIGxvbmcgaXMgdGhlIHR3byBnaXZlbiBzaWduZWQsIDMyLWJpdCB2YWx1ZXMuXHJcbi8vIFdlIHVzZSAzMi1iaXQgcGllY2VzIGJlY2F1c2UgdGhlc2UgYXJlIHRoZSBzaXplIG9mIGludGVnZXJzIG9uIHdoaWNoXHJcbi8vIEphdmFzY3JpcHQgcGVyZm9ybXMgYml0LW9wZXJhdGlvbnMuICBGb3Igb3BlcmF0aW9ucyBsaWtlIGFkZGl0aW9uIGFuZFxyXG4vLyBtdWx0aXBsaWNhdGlvbiwgd2Ugc3BsaXQgZWFjaCBudW1iZXIgaW50byAxNiBiaXQgcGllY2VzLCB3aGljaCBjYW4gZWFzaWx5IGJlXHJcbi8vIG11bHRpcGxpZWQgd2l0aGluIEphdmFzY3JpcHQncyBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiB3aXRob3V0IG92ZXJmbG93XHJcbi8vIG9yIGNoYW5nZSBpbiBzaWduLlxyXG4vL1xyXG4vLyBJbiB0aGUgYWxnb3JpdGhtcyBiZWxvdywgd2UgZnJlcXVlbnRseSByZWR1Y2UgdGhlIG5lZ2F0aXZlIGNhc2UgdG8gdGhlXHJcbi8vIHBvc2l0aXZlIGNhc2UgYnkgbmVnYXRpbmcgdGhlIGlucHV0KHMpIGFuZCB0aGVuIHBvc3QtcHJvY2Vzc2luZyB0aGUgcmVzdWx0LlxyXG4vLyBOb3RlIHRoYXQgd2UgbXVzdCBBTFdBWVMgY2hlY2sgc3BlY2lhbGx5IHdoZXRoZXIgdGhvc2UgdmFsdWVzIGFyZSBNSU5fVkFMVUVcclxuLy8gKC0yXjYzKSBiZWNhdXNlIC1NSU5fVkFMVUUgPT0gTUlOX1ZBTFVFIChzaW5jZSAyXjYzIGNhbm5vdCBiZSByZXByZXNlbnRlZCBhc1xyXG4vLyBhIHBvc2l0aXZlIG51bWJlciwgaXQgb3ZlcmZsb3dzIGJhY2sgaW50byBhIG5lZ2F0aXZlKS4gIE5vdCBoYW5kbGluZyB0aGlzXHJcbi8vIGNhc2Ugd291bGQgb2Z0ZW4gcmVzdWx0IGluIGluZmluaXRlIHJlY3Vyc2lvbi5cclxuLy9cclxuLy8gQ29tbW9uIGNvbnN0YW50IHZhbHVlcyBaRVJPLCBPTkUsIE5FR19PTkUsIGV0Yy4gYXJlIGRlZmluZWQgYmVsb3cgdGhlIGZyb20qXHJcbi8vIG1ldGhvZHMgb24gd2hpY2ggdGhleSBkZXBlbmQuXHJcblxyXG4vKipcclxuICogQW4gaW5kaWNhdG9yIHVzZWQgdG8gcmVsaWFibHkgZGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIExvbmcgb3Igbm90LlxyXG4gKiBAdHlwZSB7Ym9vbGVhbn1cclxuICogQGNvbnN0XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5Mb25nLnByb3RvdHlwZS5fX2lzTG9uZ19fO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KExvbmcucHJvdG90eXBlLCBcIl9faXNMb25nX19cIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHsqfSBvYmogT2JqZWN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKiBAaW5uZXJcclxuICovXHJcbmZ1bmN0aW9uIGlzTG9uZyhvYmopIHtcclxuICAgIHJldHVybiAob2JqICYmIG9ialtcIl9faXNMb25nX19cIl0pID09PSB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBvYmplY3QgaXMgYSBMb25nLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHsqfSBvYmogT2JqZWN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZy5pc0xvbmcgPSBpc0xvbmc7XHJcblxyXG4vKipcclxuICogQSBjYWNoZSBvZiB0aGUgTG9uZyByZXByZXNlbnRhdGlvbnMgb2Ygc21hbGwgaW50ZWdlciB2YWx1ZXMuXHJcbiAqIEB0eXBlIHshT2JqZWN0fVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBJTlRfQ0FDSEUgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBBIGNhY2hlIG9mIHRoZSBMb25nIHJlcHJlc2VudGF0aW9ucyBvZiBzbWFsbCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy5cclxuICogQHR5cGUgeyFPYmplY3R9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFVJTlRfQ0FDSEUgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbmZ1bmN0aW9uIGZyb21JbnQodmFsdWUsIHVuc2lnbmVkKSB7XHJcbiAgICB2YXIgb2JqLCBjYWNoZWRPYmosIGNhY2hlO1xyXG4gICAgaWYgKHVuc2lnbmVkKSB7XHJcbiAgICAgICAgdmFsdWUgPj4+PSAwO1xyXG4gICAgICAgIGlmIChjYWNoZSA9ICgwIDw9IHZhbHVlICYmIHZhbHVlIDwgMjU2KSkge1xyXG4gICAgICAgICAgICBjYWNoZWRPYmogPSBVSU5UX0NBQ0hFW3ZhbHVlXTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZE9iailcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRPYmo7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9iaiA9IGZyb21CaXRzKHZhbHVlLCAodmFsdWUgfCAwKSA8IDAgPyAtMSA6IDAsIHRydWUpO1xyXG4gICAgICAgIGlmIChjYWNoZSlcclxuICAgICAgICAgICAgVUlOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFsdWUgfD0gMDtcclxuICAgICAgICBpZiAoY2FjaGUgPSAoLTEyOCA8PSB2YWx1ZSAmJiB2YWx1ZSA8IDEyOCkpIHtcclxuICAgICAgICAgICAgY2FjaGVkT2JqID0gSU5UX0NBQ0hFW3ZhbHVlXTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZE9iailcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRPYmo7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9iaiA9IGZyb21CaXRzKHZhbHVlLCB2YWx1ZSA8IDAgPyAtMSA6IDAsIGZhbHNlKTtcclxuICAgICAgICBpZiAoY2FjaGUpXHJcbiAgICAgICAgICAgIElOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gMzIgYml0IGludGVnZXIgdmFsdWUuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIDMyIGJpdCBpbnRlZ2VyIGluIHF1ZXN0aW9uXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21JbnQgPSBmcm9tSW50O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSwgdW5zaWduZWQpIHtcclxuICAgIGlmIChpc05hTih2YWx1ZSkpXHJcbiAgICAgICAgcmV0dXJuIHVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xyXG4gICAgaWYgKHVuc2lnbmVkKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMClcclxuICAgICAgICAgICAgcmV0dXJuIFVaRVJPO1xyXG4gICAgICAgIGlmICh2YWx1ZSA+PSBUV09fUFdSXzY0X0RCTClcclxuICAgICAgICAgICAgcmV0dXJuIE1BWF9VTlNJR05FRF9WQUxVRTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHZhbHVlIDw9IC1UV09fUFdSXzYzX0RCTClcclxuICAgICAgICAgICAgcmV0dXJuIE1JTl9WQUxVRTtcclxuICAgICAgICBpZiAodmFsdWUgKyAxID49IFRXT19QV1JfNjNfREJMKVxyXG4gICAgICAgICAgICByZXR1cm4gTUFYX1ZBTFVFO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlIDwgMClcclxuICAgICAgICByZXR1cm4gZnJvbU51bWJlcigtdmFsdWUsIHVuc2lnbmVkKS5uZWcoKTtcclxuICAgIHJldHVybiBmcm9tQml0cygodmFsdWUgJSBUV09fUFdSXzMyX0RCTCkgfCAwLCAodmFsdWUgLyBUV09fUFdSXzMyX0RCTCkgfCAwLCB1bnNpZ25lZCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIHZhbHVlLCBwcm92aWRlZCB0aGF0IGl0IGlzIGEgZmluaXRlIG51bWJlci4gT3RoZXJ3aXNlLCB6ZXJvIGlzIHJldHVybmVkLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSBudW1iZXIgaW4gcXVlc3Rpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbU51bWJlciA9IGZyb21OdW1iZXI7XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJ9IGxvd0JpdHNcclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tQml0cyhsb3dCaXRzLCBoaWdoQml0cywgdW5zaWduZWQpIHtcclxuICAgIHJldHVybiBuZXcgTG9uZyhsb3dCaXRzLCBoaWdoQml0cywgdW5zaWduZWQpO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSA2NCBiaXQgaW50ZWdlciB0aGF0IGNvbWVzIGJ5IGNvbmNhdGVuYXRpbmcgdGhlIGdpdmVuIGxvdyBhbmQgaGlnaCBiaXRzLiBFYWNoIGlzXHJcbiAqICBhc3N1bWVkIHRvIHVzZSAzMiBiaXRzLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IGxvd0JpdHMgVGhlIGxvdyAzMiBiaXRzXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoQml0cyBUaGUgaGlnaCAzMiBiaXRzXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21CaXRzID0gZnJvbUJpdHM7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBiYXNlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBleHBvbmVudFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBwb3dfZGJsID0gTWF0aC5wb3c7IC8vIFVzZWQgNCB0aW1lcyAoNCo4IHRvIDE1KzQpXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcGFyYW0geyhib29sZWFufG51bWJlcik9fSB1bnNpZ25lZFxyXG4gKiBAcGFyYW0ge251bWJlcj19IHJhZGl4XHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tU3RyaW5nKHN0ciwgdW5zaWduZWQsIHJhZGl4KSB7XHJcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMClcclxuICAgICAgICB0aHJvdyBFcnJvcignZW1wdHkgc3RyaW5nJyk7XHJcbiAgICBpZiAoc3RyID09PSBcIk5hTlwiIHx8IHN0ciA9PT0gXCJJbmZpbml0eVwiIHx8IHN0ciA9PT0gXCIrSW5maW5pdHlcIiB8fCBzdHIgPT09IFwiLUluZmluaXR5XCIpXHJcbiAgICAgICAgcmV0dXJuIFpFUk87XHJcbiAgICBpZiAodHlwZW9mIHVuc2lnbmVkID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIC8vIEZvciBnb29nLm1hdGgubG9uZyBjb21wYXRpYmlsaXR5XHJcbiAgICAgICAgcmFkaXggPSB1bnNpZ25lZCxcclxuICAgICAgICB1bnNpZ25lZCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB1bnNpZ25lZCA9ICEhIHVuc2lnbmVkO1xyXG4gICAgfVxyXG4gICAgcmFkaXggPSByYWRpeCB8fCAxMDtcclxuICAgIGlmIChyYWRpeCA8IDIgfHwgMzYgPCByYWRpeClcclxuICAgICAgICB0aHJvdyBSYW5nZUVycm9yKCdyYWRpeCcpO1xyXG5cclxuICAgIHZhciBwO1xyXG4gICAgaWYgKChwID0gc3RyLmluZGV4T2YoJy0nKSkgPiAwKVxyXG4gICAgICAgIHRocm93IEVycm9yKCdpbnRlcmlvciBoeXBoZW4nKTtcclxuICAgIGVsc2UgaWYgKHAgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnJvbVN0cmluZyhzdHIuc3Vic3RyaW5nKDEpLCB1bnNpZ25lZCwgcmFkaXgpLm5lZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERvIHNldmVyYWwgKDgpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cclxuICAgIC8vIG1pbmltaXplIHRoZSBjYWxscyB0byB0aGUgdmVyeSBleHBlbnNpdmUgZW11bGF0ZWQgZGl2LlxyXG4gICAgdmFyIHJhZGl4VG9Qb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgOCkpO1xyXG5cclxuICAgIHZhciByZXN1bHQgPSBaRVJPO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDgpIHtcclxuICAgICAgICB2YXIgc2l6ZSA9IE1hdGgubWluKDgsIHN0ci5sZW5ndGggLSBpKSxcclxuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludChzdHIuc3Vic3RyaW5nKGksIGkgKyBzaXplKSwgcmFkaXgpO1xyXG4gICAgICAgIGlmIChzaXplIDwgOCkge1xyXG4gICAgICAgICAgICB2YXIgcG93ZXIgPSBmcm9tTnVtYmVyKHBvd19kYmwocmFkaXgsIHNpemUpKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bChwb3dlcikuYWRkKGZyb21OdW1iZXIodmFsdWUpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubXVsKHJhZGl4VG9Qb3dlcik7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5hZGQoZnJvbU51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlc3VsdC51bnNpZ25lZCA9IHVuc2lnbmVkO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmcsIHdyaXR0ZW4gdXNpbmcgdGhlIHNwZWNpZmllZCByYWRpeC5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIExvbmdcclxuICogQHBhcmFtIHsoYm9vbGVhbnxudW1iZXIpPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcGFyYW0ge251bWJlcj19IHJhZGl4IFRoZSByYWRpeCBpbiB3aGljaCB0aGUgdGV4dCBpcyB3cml0dGVuICgyLTM2KSwgZGVmYXVsdHMgdG8gMTBcclxuICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21TdHJpbmcgPSBmcm9tU3RyaW5nO1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd8IXtsb3c6IG51bWJlciwgaGlnaDogbnVtYmVyLCB1bnNpZ25lZDogYm9vbGVhbn19IHZhbFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbVZhbHVlKHZhbCwgdW5zaWduZWQpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJylcclxuICAgICAgICByZXR1cm4gZnJvbU51bWJlcih2YWwsIHVuc2lnbmVkKTtcclxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJylcclxuICAgICAgICByZXR1cm4gZnJvbVN0cmluZyh2YWwsIHVuc2lnbmVkKTtcclxuICAgIC8vIFRocm93cyBmb3Igbm9uLW9iamVjdHMsIGNvbnZlcnRzIG5vbi1pbnN0YW5jZW9mIExvbmc6XHJcbiAgICByZXR1cm4gZnJvbUJpdHModmFsLmxvdywgdmFsLmhpZ2gsIHR5cGVvZiB1bnNpZ25lZCA9PT0gJ2Jvb2xlYW4nID8gdW5zaWduZWQgOiB2YWwudW5zaWduZWQpO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIHNwZWNpZmllZCB2YWx1ZSB0byBhIExvbmcgdXNpbmcgdGhlIGFwcHJvcHJpYXRlIGZyb20qIGZ1bmN0aW9uIGZvciBpdHMgdHlwZS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsIFZhbHVlXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5mcm9tVmFsdWUgPSBmcm9tVmFsdWU7XHJcblxyXG4vLyBOT1RFOiB0aGUgY29tcGlsZXIgc2hvdWxkIGlubGluZSB0aGVzZSBjb25zdGFudCB2YWx1ZXMgYmVsb3cgYW5kIHRoZW4gcmVtb3ZlIHRoZXNlIHZhcmlhYmxlcywgc28gdGhlcmUgc2hvdWxkIGJlXHJcbi8vIG5vIHJ1bnRpbWUgcGVuYWx0eSBmb3IgdGhlc2UuXHJcblxyXG4vKipcclxuICogQHR5cGUge251bWJlcn1cclxuICogQGNvbnN0XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFRXT19QV1JfMTZfREJMID0gMSA8PCAxNjtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl8yNF9EQkwgPSAxIDw8IDI0O1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqIEBjb25zdFxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBUV09fUFdSXzMyX0RCTCA9IFRXT19QV1JfMTZfREJMICogVFdPX1BXUl8xNl9EQkw7XHJcblxyXG4vKipcclxuICogQHR5cGUge251bWJlcn1cclxuICogQGNvbnN0XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFRXT19QV1JfNjRfREJMID0gVFdPX1BXUl8zMl9EQkwgKiBUV09fUFdSXzMyX0RCTDtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl82M19EQkwgPSBUV09fUFdSXzY0X0RCTCAvIDI7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl8yNCA9IGZyb21JbnQoVFdPX1BXUl8yNF9EQkwpO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgWkVSTyA9IGZyb21JbnQoMCk7XHJcblxyXG4vKipcclxuICogU2lnbmVkIHplcm8uXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICovXHJcbkxvbmcuWkVSTyA9IFpFUk87XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBVWkVSTyA9IGZyb21JbnQoMCwgdHJ1ZSk7XHJcblxyXG4vKipcclxuICogVW5zaWduZWQgemVyby5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5VWkVSTyA9IFVaRVJPO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgT05FID0gZnJvbUludCgxKTtcclxuXHJcbi8qKlxyXG4gKiBTaWduZWQgb25lLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk9ORSA9IE9ORTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFVPTkUgPSBmcm9tSW50KDEsIHRydWUpO1xyXG5cclxuLyoqXHJcbiAqIFVuc2lnbmVkIG9uZS5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5VT05FID0gVU9ORTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIE5FR19PTkUgPSBmcm9tSW50KC0xKTtcclxuXHJcbi8qKlxyXG4gKiBTaWduZWQgbmVnYXRpdmUgb25lLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk5FR19PTkUgPSBORUdfT05FO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgTUFYX1ZBTFVFID0gZnJvbUJpdHMoMHhGRkZGRkZGRnwwLCAweDdGRkZGRkZGfDAsIGZhbHNlKTtcclxuXHJcbi8qKlxyXG4gKiBNYXhpbXVtIHNpZ25lZCB2YWx1ZS5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5NQVhfVkFMVUUgPSBNQVhfVkFMVUU7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBNQVhfVU5TSUdORURfVkFMVUUgPSBmcm9tQml0cygweEZGRkZGRkZGfDAsIDB4RkZGRkZGRkZ8MCwgdHJ1ZSk7XHJcblxyXG4vKipcclxuICogTWF4aW11bSB1bnNpZ25lZCB2YWx1ZS5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5NQVhfVU5TSUdORURfVkFMVUUgPSBNQVhfVU5TSUdORURfVkFMVUU7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBNSU5fVkFMVUUgPSBmcm9tQml0cygwLCAweDgwMDAwMDAwfDAsIGZhbHNlKTtcclxuXHJcbi8qKlxyXG4gKiBNaW5pbXVtIHNpZ25lZCB2YWx1ZS5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5NSU5fVkFMVUUgPSBNSU5fVkFMVUU7XHJcblxyXG4vKipcclxuICogQGFsaWFzIExvbmcucHJvdG90eXBlXHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIExvbmdQcm90b3R5cGUgPSBMb25nLnByb3RvdHlwZTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgTG9uZyB0byBhIDMyIGJpdCBpbnRlZ2VyLCBhc3N1bWluZyBpdCBpcyBhIDMyIGJpdCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b0ludCA9IGZ1bmN0aW9uIHRvSW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyB0aGlzLmxvdyA+Pj4gMCA6IHRoaXMubG93O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgdGhlIG5lYXJlc3QgZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB2YWx1ZSAoZG91YmxlLCA1MyBiaXQgbWFudGlzc2EpLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyKCkge1xyXG4gICAgaWYgKHRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgcmV0dXJuICgodGhpcy5oaWdoID4+PiAwKSAqIFRXT19QV1JfMzJfREJMKSArICh0aGlzLmxvdyA+Pj4gMCk7XHJcbiAgICByZXR1cm4gdGhpcy5oaWdoICogVFdPX1BXUl8zMl9EQkwgKyAodGhpcy5sb3cgPj4+IDApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgc3RyaW5nIHdyaXR0ZW4gaW4gdGhlIHNwZWNpZmllZCByYWRpeC5cclxuICogQHBhcmFtIHtudW1iZXI9fSByYWRpeCBSYWRpeCAoMi0zNiksIGRlZmF1bHRzIHRvIDEwXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqIEBvdmVycmlkZVxyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgcmFkaXhgIGlzIG91dCBvZiByYW5nZVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKHJhZGl4KSB7XHJcbiAgICByYWRpeCA9IHJhZGl4IHx8IDEwO1xyXG4gICAgaWYgKHJhZGl4IDwgMiB8fCAzNiA8IHJhZGl4KVxyXG4gICAgICAgIHRocm93IFJhbmdlRXJyb3IoJ3JhZGl4Jyk7XHJcbiAgICBpZiAodGhpcy5pc1plcm8oKSlcclxuICAgICAgICByZXR1cm4gJzAnO1xyXG4gICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7IC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxyXG4gICAgICAgIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpIHtcclxuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGFuZ2UgdGhlIExvbmcgdmFsdWUgYmVmb3JlIGl0IGNhbiBiZSBuZWdhdGVkLCBzbyB3ZSByZW1vdmVcclxuICAgICAgICAgICAgLy8gdGhlIGJvdHRvbS1tb3N0IGRpZ2l0IGluIHRoaXMgYmFzZSBhbmQgdGhlbiByZWN1cnNlIHRvIGRvIHRoZSByZXN0LlxyXG4gICAgICAgICAgICB2YXIgcmFkaXhMb25nID0gZnJvbU51bWJlcihyYWRpeCksXHJcbiAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmRpdihyYWRpeExvbmcpLFxyXG4gICAgICAgICAgICAgICAgcmVtMSA9IGRpdi5tdWwocmFkaXhMb25nKS5zdWIodGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBkaXYudG9TdHJpbmcocmFkaXgpICsgcmVtMS50b0ludCgpLnRvU3RyaW5nKHJhZGl4KTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuICctJyArIHRoaXMubmVnKCkudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERvIHNldmVyYWwgKDYpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cclxuICAgIC8vIG1pbmltaXplIHRoZSBjYWxscyB0byB0aGUgdmVyeSBleHBlbnNpdmUgZW11bGF0ZWQgZGl2LlxyXG4gICAgdmFyIHJhZGl4VG9Qb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgNiksIHRoaXMudW5zaWduZWQpLFxyXG4gICAgICAgIHJlbSA9IHRoaXM7XHJcbiAgICB2YXIgcmVzdWx0ID0gJyc7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIHZhciByZW1EaXYgPSByZW0uZGl2KHJhZGl4VG9Qb3dlciksXHJcbiAgICAgICAgICAgIGludHZhbCA9IHJlbS5zdWIocmVtRGl2Lm11bChyYWRpeFRvUG93ZXIpKS50b0ludCgpID4+PiAwLFxyXG4gICAgICAgICAgICBkaWdpdHMgPSBpbnR2YWwudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgICAgIHJlbSA9IHJlbURpdjtcclxuICAgICAgICBpZiAocmVtLmlzWmVybygpKVxyXG4gICAgICAgICAgICByZXR1cm4gZGlnaXRzICsgcmVzdWx0O1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB3aGlsZSAoZGlnaXRzLmxlbmd0aCA8IDYpXHJcbiAgICAgICAgICAgICAgICBkaWdpdHMgPSAnMCcgKyBkaWdpdHM7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9ICcnICsgZGlnaXRzICsgcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBoaWdoIDMyIGJpdHMgYXMgYSBzaWduZWQgaW50ZWdlci5cclxuICogQHJldHVybnMge251bWJlcn0gU2lnbmVkIGhpZ2ggYml0c1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5nZXRIaWdoQml0cyA9IGZ1bmN0aW9uIGdldEhpZ2hCaXRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaGlnaDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBoaWdoIDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cclxuICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgaGlnaCBiaXRzXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmdldEhpZ2hCaXRzVW5zaWduZWQgPSBmdW5jdGlvbiBnZXRIaWdoQml0c1Vuc2lnbmVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaGlnaCA+Pj4gMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBsb3cgMzIgYml0cyBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBTaWduZWQgbG93IGJpdHNcclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2V0TG93Qml0cyA9IGZ1bmN0aW9uIGdldExvd0JpdHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sb3c7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgbG93IDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cclxuICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgbG93IGJpdHNcclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2V0TG93Qml0c1Vuc2lnbmVkID0gZnVuY3Rpb24gZ2V0TG93Qml0c1Vuc2lnbmVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubG93ID4+PiAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIG51bWJlciBvZiBiaXRzIG5lZWRlZCB0byByZXByZXNlbnQgdGhlIGFic29sdXRlIHZhbHVlIG9mIHRoaXMgTG9uZy5cclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2V0TnVtQml0c0FicyA9IGZ1bmN0aW9uIGdldE51bUJpdHNBYnMoKSB7XHJcbiAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVxKE1JTl9WQUxVRSkgPyA2NCA6IHRoaXMubmVnKCkuZ2V0TnVtQml0c0FicygpO1xyXG4gICAgdmFyIHZhbCA9IHRoaXMuaGlnaCAhPSAwID8gdGhpcy5oaWdoIDogdGhpcy5sb3c7XHJcbiAgICBmb3IgKHZhciBiaXQgPSAzMTsgYml0ID4gMDsgYml0LS0pXHJcbiAgICAgICAgaWYgKCh2YWwgJiAoMSA8PCBiaXQpKSAhPSAwKVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIHJldHVybiB0aGlzLmhpZ2ggIT0gMCA/IGJpdCArIDMzIDogYml0ICsgMTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgemVyby5cclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybygpIHtcclxuICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IDAgJiYgdGhpcy5sb3cgPT09IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHplcm8uIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjaXNaZXJvfS5cclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmVxeiA9IExvbmdQcm90b3R5cGUuaXNaZXJvO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIG5lZ2F0aXZlLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNOZWdhdGl2ZSA9IGZ1bmN0aW9uIGlzTmVnYXRpdmUoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMudW5zaWduZWQgJiYgdGhpcy5oaWdoIDwgMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBwb3NpdGl2ZS5cclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmlzUG9zaXRpdmUgPSBmdW5jdGlvbiBpc1Bvc2l0aXZlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudW5zaWduZWQgfHwgdGhpcy5oaWdoID49IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgb2RkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCgpIHtcclxuICAgIHJldHVybiAodGhpcy5sb3cgJiAxKSA9PT0gMTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBldmVuLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLmxvdyAmIDEpID09PSAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGVxdWFscyB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xyXG4gICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgIGlmICh0aGlzLnVuc2lnbmVkICE9PSBvdGhlci51bnNpZ25lZCAmJiAodGhpcy5oaWdoID4+PiAzMSkgPT09IDEgJiYgKG90aGVyLmhpZ2ggPj4+IDMxKSA9PT0gMSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICByZXR1cm4gdGhpcy5oaWdoID09PSBvdGhlci5oaWdoICYmIHRoaXMubG93ID09PSBvdGhlci5sb3c7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNlcXVhbHN9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZXEgPSBMb25nUHJvdG90eXBlLmVxdWFscztcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5ub3RFcXVhbHMgPSBmdW5jdGlvbiBub3RFcXVhbHMob3RoZXIpIHtcclxuICAgIHJldHVybiAhdGhpcy5lcSgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbm90RXF1YWxzfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5lcSA9IExvbmdQcm90b3R5cGUubm90RXF1YWxzO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbm90RXF1YWxzfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5lID0gTG9uZ1Byb3RvdHlwZS5ub3RFcXVhbHM7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIHRoZSBzcGVjaWZpZWQncy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubGVzc1RoYW4gPSBmdW5jdGlvbiBsZXNzVGhhbihvdGhlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpIDwgMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2xlc3NUaGFufS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmx0ID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbjtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWwgPSBmdW5jdGlvbiBsZXNzVGhhbk9yRXF1YWwob3RoZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA8PSAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW5PckVxdWFsfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmx0ZSA9IExvbmdQcm90b3R5cGUubGVzc1RoYW5PckVxdWFsO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW5PckVxdWFsfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmxlID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWw7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBzcGVjaWZpZWQncy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW4gPSBmdW5jdGlvbiBncmVhdGVyVGhhbihvdGhlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpID4gMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2dyZWF0ZXJUaGFufS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmd0ID0gTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbjtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWwgPSBmdW5jdGlvbiBncmVhdGVyVGhhbk9yRXF1YWwob3RoZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA+PSAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW5PckVxdWFsfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmd0ZSA9IExvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW5PckVxdWFsO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW5PckVxdWFsfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmdlID0gTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWw7XHJcblxyXG4vKipcclxuICogQ29tcGFyZXMgdGhpcyBMb25nJ3MgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge251bWJlcn0gMCBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgMSBpZiB0aGUgdGhpcyBpcyBncmVhdGVyIGFuZCAtMVxyXG4gKiAgaWYgdGhlIGdpdmVuIG9uZSBpcyBncmVhdGVyXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlKG90aGVyKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgaWYgKHRoaXMuZXEob3RoZXIpKVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgdmFyIHRoaXNOZWcgPSB0aGlzLmlzTmVnYXRpdmUoKSxcclxuICAgICAgICBvdGhlck5lZyA9IG90aGVyLmlzTmVnYXRpdmUoKTtcclxuICAgIGlmICh0aGlzTmVnICYmICFvdGhlck5lZylcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICBpZiAoIXRoaXNOZWcgJiYgb3RoZXJOZWcpXHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAvLyBBdCB0aGlzIHBvaW50IHRoZSBzaWduIGJpdHMgYXJlIHRoZSBzYW1lXHJcbiAgICBpZiAoIXRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViKG90aGVyKS5pc05lZ2F0aXZlKCkgPyAtMSA6IDE7XHJcbiAgICAvLyBCb3RoIGFyZSBwb3NpdGl2ZSBpZiBhdCBsZWFzdCBvbmUgaXMgdW5zaWduZWRcclxuICAgIHJldHVybiAob3RoZXIuaGlnaCA+Pj4gMCkgPiAodGhpcy5oaWdoID4+PiAwKSB8fCAob3RoZXIuaGlnaCA9PT0gdGhpcy5oaWdoICYmIChvdGhlci5sb3cgPj4+IDApID4gKHRoaXMubG93ID4+PiAwKSkgPyAtMSA6IDE7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29tcGFyZXMgdGhpcyBMb25nJ3MgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjY29tcGFyZX0uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IDAgaWYgdGhleSBhcmUgdGhlIHNhbWUsIDEgaWYgdGhlIHRoaXMgaXMgZ3JlYXRlciBhbmQgLTFcclxuICogIGlmIHRoZSBnaXZlbiBvbmUgaXMgZ3JlYXRlclxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5jb21wID0gTG9uZ1Byb3RvdHlwZS5jb21wYXJlO1xyXG5cclxuLyoqXHJcbiAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gTmVnYXRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZSgpIHtcclxuICAgIGlmICghdGhpcy51bnNpZ25lZCAmJiB0aGlzLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgcmV0dXJuIE1JTl9WQUxVRTtcclxuICAgIHJldHVybiB0aGlzLm5vdCgpLmFkZChPTkUpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbmVnYXRlfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gTmVnYXRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5lZyA9IExvbmdQcm90b3R5cGUubmVnYXRlO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gYWRkZW5kIEFkZGVuZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFN1bVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoYWRkZW5kKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhhZGRlbmQpKVxyXG4gICAgICAgIGFkZGVuZCA9IGZyb21WYWx1ZShhZGRlbmQpO1xyXG5cclxuICAgIC8vIERpdmlkZSBlYWNoIG51bWJlciBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIHN1bSB0aGUgY2h1bmtzLlxyXG5cclxuICAgIHZhciBhNDggPSB0aGlzLmhpZ2ggPj4+IDE2O1xyXG4gICAgdmFyIGEzMiA9IHRoaXMuaGlnaCAmIDB4RkZGRjtcclxuICAgIHZhciBhMTYgPSB0aGlzLmxvdyA+Pj4gMTY7XHJcbiAgICB2YXIgYTAwID0gdGhpcy5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgdmFyIGI0OCA9IGFkZGVuZC5oaWdoID4+PiAxNjtcclxuICAgIHZhciBiMzIgPSBhZGRlbmQuaGlnaCAmIDB4RkZGRjtcclxuICAgIHZhciBiMTYgPSBhZGRlbmQubG93ID4+PiAxNjtcclxuICAgIHZhciBiMDAgPSBhZGRlbmQubG93ICYgMHhGRkZGO1xyXG5cclxuICAgIHZhciBjNDggPSAwLCBjMzIgPSAwLCBjMTYgPSAwLCBjMDAgPSAwO1xyXG4gICAgYzAwICs9IGEwMCArIGIwMDtcclxuICAgIGMxNiArPSBjMDAgPj4+IDE2O1xyXG4gICAgYzAwICY9IDB4RkZGRjtcclxuICAgIGMxNiArPSBhMTYgKyBiMTY7XHJcbiAgICBjMzIgKz0gYzE2ID4+PiAxNjtcclxuICAgIGMxNiAmPSAweEZGRkY7XHJcbiAgICBjMzIgKz0gYTMyICsgYjMyO1xyXG4gICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgYzQ4ICs9IGE0OCArIGI0ODtcclxuICAgIGM0OCAmPSAweEZGRkY7XHJcbiAgICByZXR1cm4gZnJvbUJpdHMoKGMxNiA8PCAxNikgfCBjMDAsIChjNDggPDwgMTYpIHwgYzMyLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBzdWJ0cmFoZW5kIFN1YnRyYWhlbmRcclxuICogQHJldHVybnMgeyFMb25nfSBEaWZmZXJlbmNlXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24gc3VidHJhY3Qoc3VidHJhaGVuZCkge1xyXG4gICAgaWYgKCFpc0xvbmcoc3VidHJhaGVuZCkpXHJcbiAgICAgICAgc3VidHJhaGVuZCA9IGZyb21WYWx1ZShzdWJ0cmFoZW5kKTtcclxuICAgIHJldHVybiB0aGlzLmFkZChzdWJ0cmFoZW5kLm5lZygpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzdWJ0cmFjdH0uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IHN1YnRyYWhlbmQgU3VidHJhaGVuZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IERpZmZlcmVuY2VcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc3ViID0gTG9uZ1Byb3RvdHlwZS5zdWJ0cmFjdDtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBtdWx0aXBsaWVyIE11bHRpcGxpZXJcclxuICogQHJldHVybnMgeyFMb25nfSBQcm9kdWN0XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gbXVsdGlwbHkobXVsdGlwbGllcikge1xyXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpXHJcbiAgICAgICAgcmV0dXJuIFpFUk87XHJcbiAgICBpZiAoIWlzTG9uZyhtdWx0aXBsaWVyKSlcclxuICAgICAgICBtdWx0aXBsaWVyID0gZnJvbVZhbHVlKG11bHRpcGxpZXIpO1xyXG5cclxuICAgIC8vIHVzZSB3YXNtIHN1cHBvcnQgaWYgcHJlc2VudFxyXG4gICAgaWYgKHdhc20pIHtcclxuICAgICAgICB2YXIgbG93ID0gd2FzbS5tdWwodGhpcy5sb3csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlnaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllci5sb3csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxpZXIuaGlnaCk7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKGxvdywgd2FzbS5nZXRfaGlnaCgpLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobXVsdGlwbGllci5pc1plcm8oKSlcclxuICAgICAgICByZXR1cm4gWkVSTztcclxuICAgIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgcmV0dXJuIG11bHRpcGxpZXIuaXNPZGQoKSA/IE1JTl9WQUxVRSA6IFpFUk87XHJcbiAgICBpZiAobXVsdGlwbGllci5lcShNSU5fVkFMVUUpKVxyXG4gICAgICAgIHJldHVybiB0aGlzLmlzT2RkKCkgPyBNSU5fVkFMVUUgOiBaRVJPO1xyXG5cclxuICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xyXG4gICAgICAgIGlmIChtdWx0aXBsaWVyLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkubXVsKG11bHRpcGxpZXIubmVnKCkpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkubXVsKG11bHRpcGxpZXIpLm5lZygpO1xyXG4gICAgfSBlbHNlIGlmIChtdWx0aXBsaWVyLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICByZXR1cm4gdGhpcy5tdWwobXVsdGlwbGllci5uZWcoKSkubmVnKCk7XHJcblxyXG4gICAgLy8gSWYgYm90aCBsb25ncyBhcmUgc21hbGwsIHVzZSBmbG9hdCBtdWx0aXBsaWNhdGlvblxyXG4gICAgaWYgKHRoaXMubHQoVFdPX1BXUl8yNCkgJiYgbXVsdGlwbGllci5sdChUV09fUFdSXzI0KSlcclxuICAgICAgICByZXR1cm4gZnJvbU51bWJlcih0aGlzLnRvTnVtYmVyKCkgKiBtdWx0aXBsaWVyLnRvTnVtYmVyKCksIHRoaXMudW5zaWduZWQpO1xyXG5cclxuICAgIC8vIERpdmlkZSBlYWNoIGxvbmcgaW50byA0IGNodW5rcyBvZiAxNiBiaXRzLCBhbmQgdGhlbiBhZGQgdXAgNHg0IHByb2R1Y3RzLlxyXG4gICAgLy8gV2UgY2FuIHNraXAgcHJvZHVjdHMgdGhhdCB3b3VsZCBvdmVyZmxvdy5cclxuXHJcbiAgICB2YXIgYTQ4ID0gdGhpcy5oaWdoID4+PiAxNjtcclxuICAgIHZhciBhMzIgPSB0aGlzLmhpZ2ggJiAweEZGRkY7XHJcbiAgICB2YXIgYTE2ID0gdGhpcy5sb3cgPj4+IDE2O1xyXG4gICAgdmFyIGEwMCA9IHRoaXMubG93ICYgMHhGRkZGO1xyXG5cclxuICAgIHZhciBiNDggPSBtdWx0aXBsaWVyLmhpZ2ggPj4+IDE2O1xyXG4gICAgdmFyIGIzMiA9IG11bHRpcGxpZXIuaGlnaCAmIDB4RkZGRjtcclxuICAgIHZhciBiMTYgPSBtdWx0aXBsaWVyLmxvdyA+Pj4gMTY7XHJcbiAgICB2YXIgYjAwID0gbXVsdGlwbGllci5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgdmFyIGM0OCA9IDAsIGMzMiA9IDAsIGMxNiA9IDAsIGMwMCA9IDA7XHJcbiAgICBjMDAgKz0gYTAwICogYjAwO1xyXG4gICAgYzE2ICs9IGMwMCA+Pj4gMTY7XHJcbiAgICBjMDAgJj0gMHhGRkZGO1xyXG4gICAgYzE2ICs9IGExNiAqIGIwMDtcclxuICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgYzE2ICY9IDB4RkZGRjtcclxuICAgIGMxNiArPSBhMDAgKiBiMTY7XHJcbiAgICBjMzIgKz0gYzE2ID4+PiAxNjtcclxuICAgIGMxNiAmPSAweEZGRkY7XHJcbiAgICBjMzIgKz0gYTMyICogYjAwO1xyXG4gICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgYzMyICs9IGExNiAqIGIxNjtcclxuICAgIGM0OCArPSBjMzIgPj4+IDE2O1xyXG4gICAgYzMyICY9IDB4RkZGRjtcclxuICAgIGMzMiArPSBhMDAgKiBiMzI7XHJcbiAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICBjNDggKz0gYTQ4ICogYjAwICsgYTMyICogYjE2ICsgYTE2ICogYjMyICsgYTAwICogYjQ4O1xyXG4gICAgYzQ4ICY9IDB4RkZGRjtcclxuICAgIHJldHVybiBmcm9tQml0cygoYzE2IDw8IDE2KSB8IGMwMCwgKGM0OCA8PCAxNikgfCBjMzIsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI211bHRpcGx5fS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gbXVsdGlwbGllciBNdWx0aXBsaWVyXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gUHJvZHVjdFxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5tdWwgPSBMb25nUHJvdG90eXBlLm11bHRpcGx5O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIGRpdmlkZWQgYnkgdGhlIHNwZWNpZmllZC4gVGhlIHJlc3VsdCBpcyBzaWduZWQgaWYgdGhpcyBMb25nIGlzIHNpZ25lZCBvclxyXG4gKiAgdW5zaWduZWQgaWYgdGhpcyBMb25nIGlzIHVuc2lnbmVkLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFF1b3RpZW50XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmRpdmlkZSA9IGZ1bmN0aW9uIGRpdmlkZShkaXZpc29yKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhkaXZpc29yKSlcclxuICAgICAgICBkaXZpc29yID0gZnJvbVZhbHVlKGRpdmlzb3IpO1xyXG4gICAgaWYgKGRpdmlzb3IuaXNaZXJvKCkpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoJ2RpdmlzaW9uIGJ5IHplcm8nKTtcclxuXHJcbiAgICAvLyB1c2Ugd2FzbSBzdXBwb3J0IGlmIHByZXNlbnRcclxuICAgIGlmICh3YXNtKSB7XHJcbiAgICAgICAgLy8gZ3VhcmQgYWdhaW5zdCBzaWduZWQgZGl2aXNpb24gb3ZlcmZsb3c6IHRoZSBsYXJnZXN0XHJcbiAgICAgICAgLy8gbmVnYXRpdmUgbnVtYmVyIC8gLTEgd291bGQgYmUgMSBsYXJnZXIgdGhhbiB0aGUgbGFyZ2VzdFxyXG4gICAgICAgIC8vIHBvc2l0aXZlIG51bWJlciwgZHVlIHRvIHR3bydzIGNvbXBsZW1lbnQuXHJcbiAgICAgICAgaWYgKCF0aGlzLnVuc2lnbmVkICYmXHJcbiAgICAgICAgICAgIHRoaXMuaGlnaCA9PT0gLTB4ODAwMDAwMDAgJiZcclxuICAgICAgICAgICAgZGl2aXNvci5sb3cgPT09IC0xICYmIGRpdmlzb3IuaGlnaCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgLy8gYmUgY29uc2lzdGVudCB3aXRoIG5vbi13YXNtIGNvZGUgcGF0aFxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGxvdyA9ICh0aGlzLnVuc2lnbmVkID8gd2FzbS5kaXZfdSA6IHdhc20uZGl2X3MpKFxyXG4gICAgICAgICAgICB0aGlzLmxvdyxcclxuICAgICAgICAgICAgdGhpcy5oaWdoLFxyXG4gICAgICAgICAgICBkaXZpc29yLmxvdyxcclxuICAgICAgICAgICAgZGl2aXNvci5oaWdoXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMobG93LCB3YXNtLmdldF9oaWdoKCksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmlzWmVybygpKVxyXG4gICAgICAgIHJldHVybiB0aGlzLnVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xyXG4gICAgdmFyIGFwcHJveCwgcmVtLCByZXM7XHJcbiAgICBpZiAoIXRoaXMudW5zaWduZWQpIHtcclxuICAgICAgICAvLyBUaGlzIHNlY3Rpb24gaXMgb25seSByZWxldmFudCBmb3Igc2lnbmVkIGxvbmdzIGFuZCBpcyBkZXJpdmVkIGZyb20gdGhlXHJcbiAgICAgICAgLy8gY2xvc3VyZSBsaWJyYXJ5IGFzIGEgd2hvbGUuXHJcbiAgICAgICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSkge1xyXG4gICAgICAgICAgICBpZiAoZGl2aXNvci5lcShPTkUpIHx8IGRpdmlzb3IuZXEoTkVHX09ORSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTUlOX1ZBTFVFOyAgLy8gcmVjYWxsIHRoYXQgLU1JTl9WQUxVRSA9PSBNSU5fVkFMVUVcclxuICAgICAgICAgICAgZWxzZSBpZiAoZGl2aXNvci5lcShNSU5fVkFMVUUpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9ORTtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBoYXZlIHxvdGhlcnwgPj0gMiwgc28gfHRoaXMvb3RoZXJ8IDwgfE1JTl9WQUxVRXwuXHJcbiAgICAgICAgICAgICAgICB2YXIgaGFsZlRoaXMgPSB0aGlzLnNocigxKTtcclxuICAgICAgICAgICAgICAgIGFwcHJveCA9IGhhbGZUaGlzLmRpdihkaXZpc29yKS5zaGwoMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwcm94LmVxKFpFUk8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpdmlzb3IuaXNOZWdhdGl2ZSgpID8gT05FIDogTkVHX09ORTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtID0gdGhpcy5zdWIoZGl2aXNvci5tdWwoYXBwcm94KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gYXBwcm94LmFkZChyZW0uZGl2KGRpdmlzb3IpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChkaXZpc29yLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xyXG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xyXG4gICAgICAgICAgICBpZiAoZGl2aXNvci5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5kaXYoZGl2aXNvci5uZWcoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZygpLmRpdihkaXZpc29yKS5uZWcoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRpdmlzb3IuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kaXYoZGl2aXNvci5uZWcoKSkubmVnKCk7XHJcbiAgICAgICAgcmVzID0gWkVSTztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gVGhlIGFsZ29yaXRobSBiZWxvdyBoYXMgbm90IGJlZW4gbWFkZSBmb3IgdW5zaWduZWQgbG9uZ3MuIEl0J3MgdGhlcmVmb3JlXHJcbiAgICAgICAgLy8gcmVxdWlyZWQgdG8gdGFrZSBzcGVjaWFsIGNhcmUgb2YgdGhlIE1TQiBwcmlvciB0byBydW5uaW5nIGl0LlxyXG4gICAgICAgIGlmICghZGl2aXNvci51bnNpZ25lZClcclxuICAgICAgICAgICAgZGl2aXNvciA9IGRpdmlzb3IudG9VbnNpZ25lZCgpO1xyXG4gICAgICAgIGlmIChkaXZpc29yLmd0KHRoaXMpKVxyXG4gICAgICAgICAgICByZXR1cm4gVVpFUk87XHJcbiAgICAgICAgaWYgKGRpdmlzb3IuZ3QodGhpcy5zaHJ1KDEpKSkgLy8gMTUgPj4+IDEgPSA3IDsgd2l0aCBkaXZpc29yID0gOCA7IHRydWVcclxuICAgICAgICAgICAgcmV0dXJuIFVPTkU7XHJcbiAgICAgICAgcmVzID0gVVpFUk87XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVwZWF0IHRoZSBmb2xsb3dpbmcgdW50aWwgdGhlIHJlbWFpbmRlciBpcyBsZXNzIHRoYW4gb3RoZXI6ICBmaW5kIGFcclxuICAgIC8vIGZsb2F0aW5nLXBvaW50IHRoYXQgYXBwcm94aW1hdGVzIHJlbWFpbmRlciAvIG90aGVyICpmcm9tIGJlbG93KiwgYWRkIHRoaXNcclxuICAgIC8vIGludG8gdGhlIHJlc3VsdCwgYW5kIHN1YnRyYWN0IGl0IGZyb20gdGhlIHJlbWFpbmRlci4gIEl0IGlzIGNyaXRpY2FsIHRoYXRcclxuICAgIC8vIHRoZSBhcHByb3hpbWF0ZSB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHJlYWwgdmFsdWUgc28gdGhhdCB0aGVcclxuICAgIC8vIHJlbWFpbmRlciBuZXZlciBiZWNvbWVzIG5lZ2F0aXZlLlxyXG4gICAgcmVtID0gdGhpcztcclxuICAgIHdoaWxlIChyZW0uZ3RlKGRpdmlzb3IpKSB7XHJcbiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIHJlc3VsdCBvZiBkaXZpc2lvbi4gVGhpcyBtYXkgYmUgYSBsaXR0bGUgZ3JlYXRlciBvclxyXG4gICAgICAgIC8vIHNtYWxsZXIgdGhhbiB0aGUgYWN0dWFsIHZhbHVlLlxyXG4gICAgICAgIGFwcHJveCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IocmVtLnRvTnVtYmVyKCkgLyBkaXZpc29yLnRvTnVtYmVyKCkpKTtcclxuXHJcbiAgICAgICAgLy8gV2Ugd2lsbCB0d2VhayB0aGUgYXBwcm94aW1hdGUgcmVzdWx0IGJ5IGNoYW5naW5nIGl0IGluIHRoZSA0OC10aCBkaWdpdCBvclxyXG4gICAgICAgIC8vIHRoZSBzbWFsbGVzdCBub24tZnJhY3Rpb25hbCBkaWdpdCwgd2hpY2hldmVyIGlzIGxhcmdlci5cclxuICAgICAgICB2YXIgbG9nMiA9IE1hdGguY2VpbChNYXRoLmxvZyhhcHByb3gpIC8gTWF0aC5MTjIpLFxyXG4gICAgICAgICAgICBkZWx0YSA9IChsb2cyIDw9IDQ4KSA/IDEgOiBwb3dfZGJsKDIsIGxvZzIgLSA0OCksXHJcblxyXG4gICAgICAgIC8vIERlY3JlYXNlIHRoZSBhcHByb3hpbWF0aW9uIHVudGlsIGl0IGlzIHNtYWxsZXIgdGhhbiB0aGUgcmVtYWluZGVyLiAgTm90ZVxyXG4gICAgICAgIC8vIHRoYXQgaWYgaXQgaXMgdG9vIGxhcmdlLCB0aGUgcHJvZHVjdCBvdmVyZmxvd3MgYW5kIGlzIG5lZ2F0aXZlLlxyXG4gICAgICAgICAgICBhcHByb3hSZXMgPSBmcm9tTnVtYmVyKGFwcHJveCksXHJcbiAgICAgICAgICAgIGFwcHJveFJlbSA9IGFwcHJveFJlcy5tdWwoZGl2aXNvcik7XHJcbiAgICAgICAgd2hpbGUgKGFwcHJveFJlbS5pc05lZ2F0aXZlKCkgfHwgYXBwcm94UmVtLmd0KHJlbSkpIHtcclxuICAgICAgICAgICAgYXBwcm94IC09IGRlbHRhO1xyXG4gICAgICAgICAgICBhcHByb3hSZXMgPSBmcm9tTnVtYmVyKGFwcHJveCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgICAgIGFwcHJveFJlbSA9IGFwcHJveFJlcy5tdWwoZGl2aXNvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXZSBrbm93IHRoZSBhbnN3ZXIgY2FuJ3QgYmUgemVyby4uLiBhbmQgYWN0dWFsbHksIHplcm8gd291bGQgY2F1c2VcclxuICAgICAgICAvLyBpbmZpbml0ZSByZWN1cnNpb24gc2luY2Ugd2Ugd291bGQgbWFrZSBubyBwcm9ncmVzcy5cclxuICAgICAgICBpZiAoYXBwcm94UmVzLmlzWmVybygpKVxyXG4gICAgICAgICAgICBhcHByb3hSZXMgPSBPTkU7XHJcblxyXG4gICAgICAgIHJlcyA9IHJlcy5hZGQoYXBwcm94UmVzKTtcclxuICAgICAgICByZW0gPSByZW0uc3ViKGFwcHJveFJlbSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIGRpdmlkZWQgYnkgdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNkaXZpZGV9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICogQHJldHVybnMgeyFMb25nfSBRdW90aWVudFxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5kaXYgPSBMb25nUHJvdG90eXBlLmRpdmlkZTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcclxuICovXHJcbkxvbmdQcm90b3R5cGUubW9kdWxvID0gZnVuY3Rpb24gbW9kdWxvKGRpdmlzb3IpIHtcclxuICAgIGlmICghaXNMb25nKGRpdmlzb3IpKVxyXG4gICAgICAgIGRpdmlzb3IgPSBmcm9tVmFsdWUoZGl2aXNvcik7XHJcblxyXG4gICAgLy8gdXNlIHdhc20gc3VwcG9ydCBpZiBwcmVzZW50XHJcbiAgICBpZiAod2FzbSkge1xyXG4gICAgICAgIHZhciBsb3cgPSAodGhpcy51bnNpZ25lZCA/IHdhc20ucmVtX3UgOiB3YXNtLnJlbV9zKShcclxuICAgICAgICAgICAgdGhpcy5sb3csXHJcbiAgICAgICAgICAgIHRoaXMuaGlnaCxcclxuICAgICAgICAgICAgZGl2aXNvci5sb3csXHJcbiAgICAgICAgICAgIGRpdmlzb3IuaGlnaFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKGxvdywgd2FzbS5nZXRfaGlnaCgpLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5zdWIodGhpcy5kaXYoZGl2aXNvcikubXVsKGRpdmlzb3IpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtb2R1bG99LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcclxuICovXHJcbkxvbmdQcm90b3R5cGUubW9kID0gTG9uZ1Byb3RvdHlwZS5tb2R1bG87XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgbW9kdWxvIHRoZSBzcGVjaWZpZWQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbW9kdWxvfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gZGl2aXNvciBEaXZpc29yXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gUmVtYWluZGVyXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnJlbSA9IExvbmdQcm90b3R5cGUubW9kdWxvO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGJpdHdpc2UgTk9UIG9mIHRoaXMgTG9uZy5cclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5ub3QgPSBmdW5jdGlvbiBub3QoKSB7XHJcbiAgICByZXR1cm4gZnJvbUJpdHMofnRoaXMubG93LCB+dGhpcy5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBiaXR3aXNlIEFORCBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZChvdGhlcikge1xyXG4gICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyAmIG90aGVyLmxvdywgdGhpcy5oaWdoICYgb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgYml0d2lzZSBPUiBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3Iob3RoZXIpIHtcclxuICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgfCBvdGhlci5sb3csIHRoaXMuaGlnaCB8IG90aGVyLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGJpdHdpc2UgWE9SIG9mIHRoaXMgTG9uZyBhbmQgdGhlIGdpdmVuIG9uZS5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICovXHJcbkxvbmdQcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yKG90aGVyKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93IF4gb3RoZXIubG93LCB0aGlzLmhpZ2ggXiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zaGlmdExlZnQgPSBmdW5jdGlvbiBzaGlmdExlZnQobnVtQml0cykge1xyXG4gICAgaWYgKGlzTG9uZyhudW1CaXRzKSlcclxuICAgICAgICBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xyXG4gICAgaWYgKChudW1CaXRzICY9IDYzKSA9PT0gMClcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIGVsc2UgaWYgKG51bUJpdHMgPCAzMilcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgPDwgbnVtQml0cywgKHRoaXMuaGlnaCA8PCBudW1CaXRzKSB8ICh0aGlzLmxvdyA+Pj4gKDMyIC0gbnVtQml0cykpLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMoMCwgdGhpcy5sb3cgPDwgKG51bUJpdHMgLSAzMiksIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBzaGlmdGVkIHRvIHRoZSBsZWZ0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRMZWZ0fS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNobCA9IExvbmdQcm90b3R5cGUuc2hpZnRMZWZ0O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBhcml0aG1ldGljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0ID0gZnVuY3Rpb24gc2hpZnRSaWdodChudW1CaXRzKSB7XHJcbiAgICBpZiAoaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICBpZiAoKG51bUJpdHMgJj0gNjMpID09PSAwKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgZWxzZSBpZiAobnVtQml0cyA8IDMyKVxyXG4gICAgICAgIHJldHVybiBmcm9tQml0cygodGhpcy5sb3cgPj4+IG51bUJpdHMpIHwgKHRoaXMuaGlnaCA8PCAoMzIgLSBudW1CaXRzKSksIHRoaXMuaGlnaCA+PiBudW1CaXRzLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5oaWdoID4+IChudW1CaXRzIC0gMzIpLCB0aGlzLmhpZ2ggPj0gMCA/IDAgOiAtMSwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGFyaXRobWV0aWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRSaWdodH0uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zaHIgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHQ7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGxvZ2ljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0VW5zaWduZWQgPSBmdW5jdGlvbiBzaGlmdFJpZ2h0VW5zaWduZWQobnVtQml0cykge1xyXG4gICAgaWYgKGlzTG9uZyhudW1CaXRzKSlcclxuICAgICAgICBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xyXG4gICAgbnVtQml0cyAmPSA2MztcclxuICAgIGlmIChudW1CaXRzID09PSAwKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIGhpZ2ggPSB0aGlzLmhpZ2g7XHJcbiAgICAgICAgaWYgKG51bUJpdHMgPCAzMikge1xyXG4gICAgICAgICAgICB2YXIgbG93ID0gdGhpcy5sb3c7XHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tQml0cygobG93ID4+PiBudW1CaXRzKSB8IChoaWdoIDw8ICgzMiAtIG51bUJpdHMpKSwgaGlnaCA+Pj4gbnVtQml0cywgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChudW1CaXRzID09PSAzMilcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKGhpZ2gsIDAsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKGhpZ2ggPj4+IChudW1CaXRzIC0gMzIpLCAwLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRSaWdodFVuc2lnbmVkfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNocnUgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZDtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRSaWdodFVuc2lnbmVkfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNocl91ID0gTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0VW5zaWduZWQ7XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBMb25nIHRvIHNpZ25lZC5cclxuICogQHJldHVybnMgeyFMb25nfSBTaWduZWQgbG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b1NpZ25lZCA9IGZ1bmN0aW9uIHRvU2lnbmVkKCkge1xyXG4gICAgaWYgKCF0aGlzLnVuc2lnbmVkKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93LCB0aGlzLmhpZ2gsIGZhbHNlKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gdW5zaWduZWQuXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gVW5zaWduZWQgbG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b1Vuc2lnbmVkID0gZnVuY3Rpb24gdG9VbnNpZ25lZCgpIHtcclxuICAgIGlmICh0aGlzLnVuc2lnbmVkKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93LCB0aGlzLmhpZ2gsIHRydWUpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHBhcmFtIHtib29sZWFuPX0gbGUgV2hldGhlciBsaXR0bGUgb3IgYmlnIGVuZGlhbiwgZGVmYXVsdHMgdG8gYmlnIGVuZGlhblxyXG4gKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBCeXRlIHJlcHJlc2VudGF0aW9uXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvQnl0ZXMgPSBmdW5jdGlvbiB0b0J5dGVzKGxlKSB7XHJcbiAgICByZXR1cm4gbGUgPyB0aGlzLnRvQnl0ZXNMRSgpIDogdGhpcy50b0J5dGVzQkUoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gaXRzIGxpdHRsZSBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHJldHVybnMgeyFBcnJheS48bnVtYmVyPn0gTGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvQnl0ZXNMRSA9IGZ1bmN0aW9uIHRvQnl0ZXNMRSgpIHtcclxuICAgIHZhciBoaSA9IHRoaXMuaGlnaCxcclxuICAgICAgICBsbyA9IHRoaXMubG93O1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBsbyAgICAgICAgJiAweGZmLFxyXG4gICAgICAgIGxvID4+PiAgOCAmIDB4ZmYsXHJcbiAgICAgICAgbG8gPj4+IDE2ICYgMHhmZixcclxuICAgICAgICBsbyA+Pj4gMjQgICAgICAgLFxyXG4gICAgICAgIGhpICAgICAgICAmIDB4ZmYsXHJcbiAgICAgICAgaGkgPj4+ICA4ICYgMHhmZixcclxuICAgICAgICBoaSA+Pj4gMTYgJiAweGZmLFxyXG4gICAgICAgIGhpID4+PiAyNFxyXG4gICAgXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gaXRzIGJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHJldHVybnMgeyFBcnJheS48bnVtYmVyPn0gQmlnIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvQnl0ZXNCRSA9IGZ1bmN0aW9uIHRvQnl0ZXNCRSgpIHtcclxuICAgIHZhciBoaSA9IHRoaXMuaGlnaCxcclxuICAgICAgICBsbyA9IHRoaXMubG93O1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBoaSA+Pj4gMjQgICAgICAgLFxyXG4gICAgICAgIGhpID4+PiAxNiAmIDB4ZmYsXHJcbiAgICAgICAgaGkgPj4+ICA4ICYgMHhmZixcclxuICAgICAgICBoaSAgICAgICAgJiAweGZmLFxyXG4gICAgICAgIGxvID4+PiAyNCAgICAgICAsXHJcbiAgICAgICAgbG8gPj4+IDE2ICYgMHhmZixcclxuICAgICAgICBsbyA+Pj4gIDggJiAweGZmLFxyXG4gICAgICAgIGxvICAgICAgICAmIDB4ZmZcclxuICAgIF07XHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIExvbmcgZnJvbSBpdHMgYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHBhcmFtIHshQXJyYXkuPG51bWJlcj59IGJ5dGVzIEJ5dGUgcmVwcmVzZW50YXRpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBsZSBXaGV0aGVyIGxpdHRsZSBvciBiaWcgZW5kaWFuLCBkZWZhdWx0cyB0byBiaWcgZW5kaWFuXHJcbiAqIEByZXR1cm5zIHtMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21CeXRlcyA9IGZ1bmN0aW9uIGZyb21CeXRlcyhieXRlcywgdW5zaWduZWQsIGxlKSB7XHJcbiAgICByZXR1cm4gbGUgPyBMb25nLmZyb21CeXRlc0xFKGJ5dGVzLCB1bnNpZ25lZCkgOiBMb25nLmZyb21CeXRlc0JFKGJ5dGVzLCB1bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIExvbmcgZnJvbSBpdHMgbGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gYnl0ZXMgTGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcclxuICogQHJldHVybnMge0xvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbUJ5dGVzTEUgPSBmdW5jdGlvbiBmcm9tQnl0ZXNMRShieXRlcywgdW5zaWduZWQpIHtcclxuICAgIHJldHVybiBuZXcgTG9uZyhcclxuICAgICAgICBieXRlc1swXSAgICAgICB8XHJcbiAgICAgICAgYnl0ZXNbMV0gPDwgIDggfFxyXG4gICAgICAgIGJ5dGVzWzJdIDw8IDE2IHxcclxuICAgICAgICBieXRlc1szXSA8PCAyNCxcclxuICAgICAgICBieXRlc1s0XSAgICAgICB8XHJcbiAgICAgICAgYnl0ZXNbNV0gPDwgIDggfFxyXG4gICAgICAgIGJ5dGVzWzZdIDw8IDE2IHxcclxuICAgICAgICBieXRlc1s3XSA8PCAyNCxcclxuICAgICAgICB1bnNpZ25lZFxyXG4gICAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgTG9uZyBmcm9tIGl0cyBiaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXHJcbiAqIEBwYXJhbSB7IUFycmF5LjxudW1iZXI+fSBieXRlcyBCaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7TG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gKi9cclxuTG9uZy5mcm9tQnl0ZXNCRSA9IGZ1bmN0aW9uIGZyb21CeXRlc0JFKGJ5dGVzLCB1bnNpZ25lZCkge1xyXG4gICAgcmV0dXJuIG5ldyBMb25nKFxyXG4gICAgICAgIGJ5dGVzWzRdIDw8IDI0IHxcclxuICAgICAgICBieXRlc1s1XSA8PCAxNiB8XHJcbiAgICAgICAgYnl0ZXNbNl0gPDwgIDggfFxyXG4gICAgICAgIGJ5dGVzWzddLFxyXG4gICAgICAgIGJ5dGVzWzBdIDw8IDI0IHxcclxuICAgICAgICBieXRlc1sxXSA8PCAxNiB8XHJcbiAgICAgICAgYnl0ZXNbMl0gPDwgIDggfFxyXG4gICAgICAgIGJ5dGVzWzNdLFxyXG4gICAgICAgIHVuc2lnbmVkXHJcbiAgICApO1xyXG59O1xyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IExvbmcgZnJvbSBcImxvbmdcIjtcbmltcG9ydCAqIGFzIF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gXCJjb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUGFnZVJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBvZmZzZXQ6IFwiMFwiLFxuICAgICAgICBsaW1pdDogXCIwXCIsXG4gICAgICAgIGNvdW50VG90YWw6IGZhbHNlLFxuICAgICAgICByZXZlcnNlOiBmYWxzZSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IFBhZ2VSZXF1ZXN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmtleS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5vZmZzZXQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS51aW50NjQobWVzc2FnZS5vZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxpbWl0ICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkudWludDY0KG1lc3NhZ2UubGltaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvdW50VG90YWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzIpLmJvb2wobWVzc2FnZS5jb3VudFRvdGFsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZXZlcnNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS5ib29sKG1lc3NhZ2UucmV2ZXJzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQYWdlUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uua2V5ID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5vZmZzZXQgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxpbWl0ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb3VudFRvdGFsID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJldmVyc2UgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IGlzU2V0KG9iamVjdC5rZXkpID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5rZXkpIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIG9mZnNldDogaXNTZXQob2JqZWN0Lm9mZnNldCkgPyBTdHJpbmcob2JqZWN0Lm9mZnNldCkgOiBcIjBcIixcbiAgICAgICAgICAgIGxpbWl0OiBpc1NldChvYmplY3QubGltaXQpID8gU3RyaW5nKG9iamVjdC5saW1pdCkgOiBcIjBcIixcbiAgICAgICAgICAgIGNvdW50VG90YWw6IGlzU2V0KG9iamVjdC5jb3VudFRvdGFsKSA/IEJvb2xlYW4ob2JqZWN0LmNvdW50VG90YWwpIDogZmFsc2UsXG4gICAgICAgICAgICByZXZlcnNlOiBpc1NldChvYmplY3QucmV2ZXJzZSkgPyBCb29sZWFuKG9iamVjdC5yZXZlcnNlKSA6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uua2V5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoua2V5ID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2Uua2V5ICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmtleSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5vZmZzZXQgIT09IHVuZGVmaW5lZCAmJiAob2JqLm9mZnNldCA9IG1lc3NhZ2Uub2Zmc2V0KTtcbiAgICAgICAgbWVzc2FnZS5saW1pdCAhPT0gdW5kZWZpbmVkICYmIChvYmoubGltaXQgPSBtZXNzYWdlLmxpbWl0KTtcbiAgICAgICAgbWVzc2FnZS5jb3VudFRvdGFsICE9PSB1bmRlZmluZWQgJiYgKG9iai5jb3VudFRvdGFsID0gbWVzc2FnZS5jb3VudFRvdGFsKTtcbiAgICAgICAgbWVzc2FnZS5yZXZlcnNlICE9PSB1bmRlZmluZWQgJiYgKG9iai5yZXZlcnNlID0gbWVzc2FnZS5yZXZlcnNlKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBhZ2VSZXF1ZXN0KCk7XG4gICAgICAgIG1lc3NhZ2Uua2V5ID0gb2JqZWN0LmtleSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLm9mZnNldCA9IG9iamVjdC5vZmZzZXQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UubGltaXQgPSBvYmplY3QubGltaXQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UuY291bnRUb3RhbCA9IG9iamVjdC5jb3VudFRvdGFsID8/IGZhbHNlO1xuICAgICAgICBtZXNzYWdlLnJldmVyc2UgPSBvYmplY3QucmV2ZXJzZSA/PyBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUGFnZVJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IG5leHRLZXk6IG5ldyBVaW50OEFycmF5KCksIHRvdGFsOiBcIjBcIiB9O1xufVxuZXhwb3J0IGNvbnN0IFBhZ2VSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5uZXh0S2V5Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5uZXh0S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50b3RhbCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLnVpbnQ2NChtZXNzYWdlLnRvdGFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBhZ2VSZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmV4dEtleSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudG90YWwgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmV4dEtleTogaXNTZXQob2JqZWN0Lm5leHRLZXkpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0Lm5leHRLZXkpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgdG90YWw6IGlzU2V0KG9iamVjdC50b3RhbCkgPyBTdHJpbmcob2JqZWN0LnRvdGFsKSA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UubmV4dEtleSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLm5leHRLZXkgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5uZXh0S2V5ICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLm5leHRLZXkgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UudG90YWwgIT09IHVuZGVmaW5lZCAmJiAob2JqLnRvdGFsID0gbWVzc2FnZS50b3RhbCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQYWdlUmVzcG9uc2UoKTtcbiAgICAgICAgbWVzc2FnZS5uZXh0S2V5ID0gb2JqZWN0Lm5leHRLZXkgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS50b3RhbCA9IG9iamVjdC50b3RhbCA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG52YXIgZ2xvYmFsVGhpcyA9ICgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIHRocm93IFwiVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0XCI7XG59KSgpO1xuY29uc3QgYXRvYiA9IGdsb2JhbFRoaXMuYXRvYiB8fFxuICAgICgoYjY0KSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGI2NCwgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJiaW5hcnlcIikpO1xuZnVuY3Rpb24gYnl0ZXNGcm9tQmFzZTY0KGI2NCkge1xuICAgIGNvbnN0IGJpbiA9IGF0b2IoYjY0KTtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShiaW4ubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBhcnJbaV0gPSBiaW4uY2hhckNvZGVBdChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbmNvbnN0IGJ0b2EgPSBnbG9iYWxUaGlzLmJ0b2EgfHxcbiAgICAoKGJpbikgPT4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiaW4sIFwiYmluYXJ5XCIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpKTtcbmZ1bmN0aW9uIGJhc2U2NEZyb21CeXRlcyhhcnIpIHtcbiAgICBjb25zdCBiaW4gPSBbXTtcbiAgICBhcnIuZm9yRWFjaCgoYnl0ZSkgPT4ge1xuICAgICAgICBiaW4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYnRvYShiaW4uam9pbihcIlwiKSk7XG59XG5mdW5jdGlvbiBsb25nVG9TdHJpbmcobG9uZykge1xuICAgIHJldHVybiBsb25nLnRvU3RyaW5nKCk7XG59XG5pZiAoX20wLnV0aWwuTG9uZyAhPT0gTG9uZykge1xuICAgIF9tMC51dGlsLkxvbmcgPSBMb25nO1xuICAgIF9tMC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdpbmF0aW9uLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBDb2luIH0gZnJvbSBcIi4uLy4uL2Jhc2UvdjFiZXRhMS9jb2luXCI7XG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwiY29zbW9zLmJhbmsudjFiZXRhMVwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBhcmFtcygpIHtcbiAgICByZXR1cm4geyBzZW5kRW5hYmxlZDogW10sIGRlZmF1bHRTZW5kRW5hYmxlZDogZmFsc2UgfTtcbn1cbmV4cG9ydCBjb25zdCBQYXJhbXMgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2Uuc2VuZEVuYWJsZWQpIHtcbiAgICAgICAgICAgIFNlbmRFbmFibGVkLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRlZmF1bHRTZW5kRW5hYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuYm9vbChtZXNzYWdlLmRlZmF1bHRTZW5kRW5hYmxlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQYXJhbXMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlbmRFbmFibGVkLnB1c2goU2VuZEVuYWJsZWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kZWZhdWx0U2VuZEVuYWJsZWQgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZW5kRW5hYmxlZDogQXJyYXkuaXNBcnJheShvYmplY3Q/LnNlbmRFbmFibGVkKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnNlbmRFbmFibGVkLm1hcCgoZSkgPT4gU2VuZEVuYWJsZWQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIGRlZmF1bHRTZW5kRW5hYmxlZDogaXNTZXQob2JqZWN0LmRlZmF1bHRTZW5kRW5hYmxlZClcbiAgICAgICAgICAgICAgICA/IEJvb2xlYW4ob2JqZWN0LmRlZmF1bHRTZW5kRW5hYmxlZClcbiAgICAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLnNlbmRFbmFibGVkKSB7XG4gICAgICAgICAgICBvYmouc2VuZEVuYWJsZWQgPSBtZXNzYWdlLnNlbmRFbmFibGVkLm1hcCgoZSkgPT4gZSA/IFNlbmRFbmFibGVkLnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouc2VuZEVuYWJsZWQgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlLmRlZmF1bHRTZW5kRW5hYmxlZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmRlZmF1bHRTZW5kRW5hYmxlZCA9IG1lc3NhZ2UuZGVmYXVsdFNlbmRFbmFibGVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBhcmFtcygpO1xuICAgICAgICBtZXNzYWdlLnNlbmRFbmFibGVkID1cbiAgICAgICAgICAgIG9iamVjdC5zZW5kRW5hYmxlZD8ubWFwKChlKSA9PiBTZW5kRW5hYmxlZC5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UuZGVmYXVsdFNlbmRFbmFibGVkID0gb2JqZWN0LmRlZmF1bHRTZW5kRW5hYmxlZCA/PyBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlU2VuZEVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHsgZGVub206IFwiXCIsIGVuYWJsZWQ6IGZhbHNlIH07XG59XG5leHBvcnQgY29uc3QgU2VuZEVuYWJsZWQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZGVub20gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmRlbm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lbmFibGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5ib29sKG1lc3NhZ2UuZW5hYmxlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTZW5kRW5hYmxlZCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVub20gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lbmFibGVkID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVub206IGlzU2V0KG9iamVjdC5kZW5vbSkgPyBTdHJpbmcob2JqZWN0LmRlbm9tKSA6IFwiXCIsXG4gICAgICAgICAgICBlbmFibGVkOiBpc1NldChvYmplY3QuZW5hYmxlZCkgPyBCb29sZWFuKG9iamVjdC5lbmFibGVkKSA6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuZGVub20gIT09IHVuZGVmaW5lZCAmJiAob2JqLmRlbm9tID0gbWVzc2FnZS5kZW5vbSk7XG4gICAgICAgIG1lc3NhZ2UuZW5hYmxlZCAhPT0gdW5kZWZpbmVkICYmIChvYmouZW5hYmxlZCA9IG1lc3NhZ2UuZW5hYmxlZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTZW5kRW5hYmxlZCgpO1xuICAgICAgICBtZXNzYWdlLmRlbm9tID0gb2JqZWN0LmRlbm9tID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZW5hYmxlZCA9IG9iamVjdC5lbmFibGVkID8/IGZhbHNlO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VJbnB1dCgpIHtcbiAgICByZXR1cm4geyBhZGRyZXNzOiBcIlwiLCBjb2luczogW10gfTtcbn1cbmV4cG9ydCBjb25zdCBJbnB1dCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5hZGRyZXNzICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5hZGRyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5jb2lucykge1xuICAgICAgICAgICAgQ29pbi5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUlucHV0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hZGRyZXNzID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29pbnMucHVzaChDb2luLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRyZXNzOiBpc1NldChvYmplY3QuYWRkcmVzcykgPyBTdHJpbmcob2JqZWN0LmFkZHJlc3MpIDogXCJcIixcbiAgICAgICAgICAgIGNvaW5zOiBBcnJheS5pc0FycmF5KG9iamVjdD8uY29pbnMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QuY29pbnMubWFwKChlKSA9PiBDb2luLmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5hZGRyZXNzICE9PSB1bmRlZmluZWQgJiYgKG9iai5hZGRyZXNzID0gbWVzc2FnZS5hZGRyZXNzKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY29pbnMpIHtcbiAgICAgICAgICAgIG9iai5jb2lucyA9IG1lc3NhZ2UuY29pbnMubWFwKChlKSA9PiAoZSA/IENvaW4udG9KU09OKGUpIDogdW5kZWZpbmVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouY29pbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlSW5wdXQoKTtcbiAgICAgICAgbWVzc2FnZS5hZGRyZXNzID0gb2JqZWN0LmFkZHJlc3MgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5jb2lucyA9IG9iamVjdC5jb2lucz8ubWFwKChlKSA9PiBDb2luLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlT3V0cHV0KCkge1xuICAgIHJldHVybiB7IGFkZHJlc3M6IFwiXCIsIGNvaW5zOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IE91dHB1dCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5hZGRyZXNzICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5hZGRyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5jb2lucykge1xuICAgICAgICAgICAgQ29pbi5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU91dHB1dCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWRkcmVzcyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvaW5zLnB1c2goQ29pbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkcmVzczogaXNTZXQob2JqZWN0LmFkZHJlc3MpID8gU3RyaW5nKG9iamVjdC5hZGRyZXNzKSA6IFwiXCIsXG4gICAgICAgICAgICBjb2luczogQXJyYXkuaXNBcnJheShvYmplY3Q/LmNvaW5zKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmNvaW5zLm1hcCgoZSkgPT4gQ29pbi5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmIChvYmouYWRkcmVzcyA9IG1lc3NhZ2UuYWRkcmVzcyk7XG4gICAgICAgIGlmIChtZXNzYWdlLmNvaW5zKSB7XG4gICAgICAgICAgICBvYmouY29pbnMgPSBtZXNzYWdlLmNvaW5zLm1hcCgoZSkgPT4gKGUgPyBDb2luLnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmNvaW5zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU91dHB1dCgpO1xuICAgICAgICBtZXNzYWdlLmFkZHJlc3MgPSBvYmplY3QuYWRkcmVzcyA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmNvaW5zID0gb2JqZWN0LmNvaW5zPy5tYXAoKGUpID0+IENvaW4uZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTdXBwbHkoKSB7XG4gICAgcmV0dXJuIHsgdG90YWw6IFtdIH07XG59XG5leHBvcnQgY29uc3QgU3VwcGx5ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnRvdGFsKSB7XG4gICAgICAgICAgICBDb2luLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU3VwcGx5KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50b3RhbC5wdXNoKENvaW4uZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvdGFsOiBBcnJheS5pc0FycmF5KG9iamVjdD8udG90YWwpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QudG90YWwubWFwKChlKSA9PiBDb2luLmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2UudG90YWwpIHtcbiAgICAgICAgICAgIG9iai50b3RhbCA9IG1lc3NhZ2UudG90YWwubWFwKChlKSA9PiAoZSA/IENvaW4udG9KU09OKGUpIDogdW5kZWZpbmVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmoudG90YWwgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU3VwcGx5KCk7XG4gICAgICAgIG1lc3NhZ2UudG90YWwgPSBvYmplY3QudG90YWw/Lm1hcCgoZSkgPT4gQ29pbi5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZURlbm9tVW5pdCgpIHtcbiAgICByZXR1cm4geyBkZW5vbTogXCJcIiwgZXhwb25lbnQ6IDAsIGFsaWFzZXM6IFtdIH07XG59XG5leHBvcnQgY29uc3QgRGVub21Vbml0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmRlbm9tICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5kZW5vbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXhwb25lbnQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLnVpbnQzMihtZXNzYWdlLmV4cG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5hbGlhc2VzKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcodik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VEZW5vbVVuaXQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRlbm9tID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXhwb25lbnQgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hbGlhc2VzLnB1c2gocmVhZGVyLnN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVub206IGlzU2V0KG9iamVjdC5kZW5vbSkgPyBTdHJpbmcob2JqZWN0LmRlbm9tKSA6IFwiXCIsXG4gICAgICAgICAgICBleHBvbmVudDogaXNTZXQob2JqZWN0LmV4cG9uZW50KSA/IE51bWJlcihvYmplY3QuZXhwb25lbnQpIDogMCxcbiAgICAgICAgICAgIGFsaWFzZXM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5hbGlhc2VzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmFsaWFzZXMubWFwKChlKSA9PiBTdHJpbmcoZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmRlbm9tICE9PSB1bmRlZmluZWQgJiYgKG9iai5kZW5vbSA9IG1lc3NhZ2UuZGVub20pO1xuICAgICAgICBtZXNzYWdlLmV4cG9uZW50ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZXhwb25lbnQgPSBNYXRoLnJvdW5kKG1lc3NhZ2UuZXhwb25lbnQpKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWxpYXNlcykge1xuICAgICAgICAgICAgb2JqLmFsaWFzZXMgPSBtZXNzYWdlLmFsaWFzZXMubWFwKChlKSA9PiBlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5hbGlhc2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZURlbm9tVW5pdCgpO1xuICAgICAgICBtZXNzYWdlLmRlbm9tID0gb2JqZWN0LmRlbm9tID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZXhwb25lbnQgPSBvYmplY3QuZXhwb25lbnQgPz8gMDtcbiAgICAgICAgbWVzc2FnZS5hbGlhc2VzID0gb2JqZWN0LmFsaWFzZXM/Lm1hcCgoZSkgPT4gZSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZU1ldGFkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICBkZW5vbVVuaXRzOiBbXSxcbiAgICAgICAgYmFzZTogXCJcIixcbiAgICAgICAgZGlzcGxheTogXCJcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgc3ltYm9sOiBcIlwiLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgTWV0YWRhdGEgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZGVzY3JpcHRpb24gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5kZW5vbVVuaXRzKSB7XG4gICAgICAgICAgICBEZW5vbVVuaXQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYmFzZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UuYmFzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGlzcGxheSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNCkuc3RyaW5nKG1lc3NhZ2UuZGlzcGxheSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0Mikuc3RyaW5nKG1lc3NhZ2UubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3ltYm9sICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDUwKS5zdHJpbmcobWVzc2FnZS5zeW1ib2wpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTWV0YWRhdGEoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRlc2NyaXB0aW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVub21Vbml0cy5wdXNoKERlbm9tVW5pdC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJhc2UgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kaXNwbGF5ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN5bWJvbCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IGlzU2V0KG9iamVjdC5kZXNjcmlwdGlvbikgPyBTdHJpbmcob2JqZWN0LmRlc2NyaXB0aW9uKSA6IFwiXCIsXG4gICAgICAgICAgICBkZW5vbVVuaXRzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uZGVub21Vbml0cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5kZW5vbVVuaXRzLm1hcCgoZSkgPT4gRGVub21Vbml0LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBiYXNlOiBpc1NldChvYmplY3QuYmFzZSkgPyBTdHJpbmcob2JqZWN0LmJhc2UpIDogXCJcIixcbiAgICAgICAgICAgIGRpc3BsYXk6IGlzU2V0KG9iamVjdC5kaXNwbGF5KSA/IFN0cmluZyhvYmplY3QuZGlzcGxheSkgOiBcIlwiLFxuICAgICAgICAgICAgbmFtZTogaXNTZXQob2JqZWN0Lm5hbWUpID8gU3RyaW5nKG9iamVjdC5uYW1lKSA6IFwiXCIsXG4gICAgICAgICAgICBzeW1ib2w6IGlzU2V0KG9iamVjdC5zeW1ib2wpID8gU3RyaW5nKG9iamVjdC5zeW1ib2wpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZGVzY3JpcHRpb24gPSBtZXNzYWdlLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZGVub21Vbml0cykge1xuICAgICAgICAgICAgb2JqLmRlbm9tVW5pdHMgPSBtZXNzYWdlLmRlbm9tVW5pdHMubWFwKChlKSA9PiBlID8gRGVub21Vbml0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouZGVub21Vbml0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UuYmFzZSAhPT0gdW5kZWZpbmVkICYmIChvYmouYmFzZSA9IG1lc3NhZ2UuYmFzZSk7XG4gICAgICAgIG1lc3NhZ2UuZGlzcGxheSAhPT0gdW5kZWZpbmVkICYmIChvYmouZGlzcGxheSA9IG1lc3NhZ2UuZGlzcGxheSk7XG4gICAgICAgIG1lc3NhZ2UubmFtZSAhPT0gdW5kZWZpbmVkICYmIChvYmoubmFtZSA9IG1lc3NhZ2UubmFtZSk7XG4gICAgICAgIG1lc3NhZ2Uuc3ltYm9sICE9PSB1bmRlZmluZWQgJiYgKG9iai5zeW1ib2wgPSBtZXNzYWdlLnN5bWJvbCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNZXRhZGF0YSgpO1xuICAgICAgICBtZXNzYWdlLmRlc2NyaXB0aW9uID0gb2JqZWN0LmRlc2NyaXB0aW9uID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZGVub21Vbml0cyA9XG4gICAgICAgICAgICBvYmplY3QuZGVub21Vbml0cz8ubWFwKChlKSA9PiBEZW5vbVVuaXQuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLmJhc2UgPSBvYmplY3QuYmFzZSA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmRpc3BsYXkgPSBvYmplY3QuZGlzcGxheSA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLm5hbWUgPSBvYmplY3QubmFtZSA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLnN5bWJvbCA9IG9iamVjdC5zeW1ib2wgPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFuay5qcy5tYXAiLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdXRpbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbmZ1bmN0aW9uIGlzQnJvd3NlckhlYWRlcnMoYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGFyZy5oZWFkZXJzTWFwID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBhcmcuZm9yRWFjaCA9PT0gXCJmdW5jdGlvblwiO1xufVxudmFyIEJyb3dzZXJIZWFkZXJzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCcm93c2VySGVhZGVycyhpbml0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpbml0ID09PSB2b2lkIDApIHsgaW5pdCA9IHt9OyB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHsgc3BsaXRWYWx1ZXM6IGZhbHNlIH07IH1cbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5oZWFkZXJzTWFwID0ge307XG4gICAgICAgIGlmIChpbml0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIEhlYWRlcnMgIT09IFwidW5kZWZpbmVkXCIgJiYgaW5pdCBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5cyA9IHV0aWxfMS5nZXRIZWFkZXJLZXlzKGluaXQpO1xuICAgICAgICAgICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSB1dGlsXzEuZ2V0SGVhZGVyVmFsdWVzKGluaXQsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3BsaXRWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5hcHBlbmQoa2V5LCB1dGlsXzEuc3BsaXRIZWFkZXJWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQnJvd3NlckhlYWRlcnMoaW5pdCkpIHtcbiAgICAgICAgICAgICAgICBpbml0LmZvckVhY2goZnVuY3Rpb24gKGtleSwgdmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFwcGVuZChrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiICYmIGluaXQgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgICAgICB2YXIgYXNNYXAgPSBpbml0O1xuICAgICAgICAgICAgICAgIGFzTWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZEZyb21TdHJpbmcoaW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5pdCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGluaXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXNPYmplY3QgPSBpbml0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gYXNPYmplY3Rba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgQnJvd3NlckhlYWRlcnMucHJvdG90eXBlLmFwcGVuZEZyb21TdHJpbmcgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHZhciBwYWlycyA9IHN0ci5zcGxpdChcIlxcclxcblwiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSBwYWlyc1tpXTtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHAuaW5kZXhPZihcIjpcIik7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHAuc3Vic3RyaW5nKDAsIGluZGV4KS50cmltKCk7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcC5zdWJzdHJpbmcoaW5kZXggKyAxKS50cmltKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJyb3dzZXJIZWFkZXJzLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZEtleSA9IHV0aWxfMS5ub3JtYWxpemVOYW1lKGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5oZWFkZXJzTWFwW25vcm1hbGl6ZWRLZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gdGhpcy5oZWFkZXJzTWFwW25vcm1hbGl6ZWRLZXldO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXhpc3RpbmcuaW5kZXhPZih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3Rpbmcuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5oZWFkZXJzTWFwW25vcm1hbGl6ZWRLZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQnJvd3NlckhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBub3JtYWxpemVkS2V5ID0gdXRpbF8xLm5vcm1hbGl6ZU5hbWUoa2V5KTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuaGVhZGVyc01hcFtub3JtYWxpemVkS2V5XSkpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc01hcFtub3JtYWxpemVkS2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoYXJyYXlWYWx1ZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhlYWRlcnNNYXBbbm9ybWFsaXplZEtleV0ucHVzaCh1dGlsXzEubm9ybWFsaXplVmFsdWUoYXJyYXlWYWx1ZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcnNNYXBbbm9ybWFsaXplZEtleV0ucHVzaCh1dGlsXzEubm9ybWFsaXplVmFsdWUodmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnJvd3NlckhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkS2V5ID0gdXRpbF8xLm5vcm1hbGl6ZU5hbWUoa2V5KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZF8xID0gW107XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChhcnJheVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZF8xLnB1c2godXRpbF8xLm5vcm1hbGl6ZVZhbHVlKGFycmF5VmFsdWUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzTWFwW25vcm1hbGl6ZWRLZXldID0gbm9ybWFsaXplZF8xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzTWFwW25vcm1hbGl6ZWRLZXldID0gW3V0aWxfMS5ub3JtYWxpemVWYWx1ZSh2YWx1ZSldO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCcm93c2VySGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGtleUFycmF5ID0gdGhpcy5oZWFkZXJzTWFwW3V0aWxfMS5ub3JtYWxpemVOYW1lKGtleSldO1xuICAgICAgICB2YXIga2V5RXhpc3RzID0gQXJyYXkuaXNBcnJheShrZXlBcnJheSk7XG4gICAgICAgIGlmICgha2V5RXhpc3RzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBub3JtYWxpemVkVmFsdWUgPSB1dGlsXzEubm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGtleUFycmF5LmluZGV4T2Yobm9ybWFsaXplZFZhbHVlKSA+PSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJyb3dzZXJIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSB0aGlzLmhlYWRlcnNNYXBbdXRpbF8xLm5vcm1hbGl6ZU5hbWUoa2V5KV07XG4gICAgICAgIGlmICh2YWx1ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5jb25jYXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfTtcbiAgICBCcm93c2VySGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLmhlYWRlcnNNYXApXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBjYWxsYmFjayhrZXksIF90aGlzLmhlYWRlcnNNYXBba2V5XSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH07XG4gICAgQnJvd3NlckhlYWRlcnMucHJvdG90eXBlLnRvSGVhZGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBIZWFkZXJzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyc18xID0gbmV3IEhlYWRlcnMoKTtcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc18xLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGhlYWRlcnNfMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhlYWRlcnMgY2xhc3MgaXMgbm90IGRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCcm93c2VySGVhZGVycztcbn0oKSk7XG5leHBvcnRzLkJyb3dzZXJIZWFkZXJzID0gQnJvd3NlckhlYWRlcnM7XG5cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQnJvd3NlckhlYWRlcnNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5leHBvcnRzLkJyb3dzZXJIZWFkZXJzID0gQnJvd3NlckhlYWRlcnNfMS5Ccm93c2VySGVhZGVycztcblxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGl0ZXJhdGVIZWFkZXJzKGhlYWRlcnMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gaGVhZGVyc1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgdmFyIGVudHJ5ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgIHdoaWxlICghZW50cnkuZG9uZSkge1xuICAgICAgICBjYWxsYmFjayhlbnRyeS52YWx1ZVswXSk7XG4gICAgICAgIGVudHJ5ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuaXRlcmF0ZUhlYWRlcnMgPSBpdGVyYXRlSGVhZGVycztcbmZ1bmN0aW9uIGl0ZXJhdGVIZWFkZXJzS2V5cyhoZWFkZXJzLCBjYWxsYmFjaykge1xuICAgIHZhciBpdGVyYXRvciA9IGhlYWRlcnMua2V5cygpO1xuICAgIHZhciBlbnRyeSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICB3aGlsZSAoIWVudHJ5LmRvbmUpIHtcbiAgICAgICAgY2FsbGJhY2soZW50cnkudmFsdWUpO1xuICAgICAgICBlbnRyeSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICB9XG59XG5leHBvcnRzLml0ZXJhdGVIZWFkZXJzS2V5cyA9IGl0ZXJhdGVIZWFkZXJzS2V5cztcblxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpdGVyYXRlSGVhZGVyc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuZXhwb3J0cy5ub3JtYWxpemVOYW1lID0gbm9ybWFsaXplTmFtZTtcbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydHMubm9ybWFsaXplVmFsdWUgPSBub3JtYWxpemVWYWx1ZTtcbmZ1bmN0aW9uIGdldEhlYWRlclZhbHVlcyhoZWFkZXJzQXNOYXRpdmUsIGtleSkge1xuICAgIHZhciBoZWFkZXJzID0gdG9XaW5kb3dIZWFkZXJzKGhlYWRlcnNBc05hdGl2ZSk7XG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzICYmIGhlYWRlcnMuZ2V0QWxsKSB7XG4gICAgICAgIHJldHVybiBoZWFkZXJzLmdldEFsbChrZXkpO1xuICAgIH1cbiAgICB2YXIgZ2V0VmFsdWUgPSBoZWFkZXJzLmdldChrZXkpO1xuICAgIGlmIChnZXRWYWx1ZSAmJiB0eXBlb2YgZ2V0VmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIFtnZXRWYWx1ZV07XG4gICAgfVxuICAgIHJldHVybiBnZXRWYWx1ZTtcbn1cbmV4cG9ydHMuZ2V0SGVhZGVyVmFsdWVzID0gZ2V0SGVhZGVyVmFsdWVzO1xuZnVuY3Rpb24gdG9XaW5kb3dIZWFkZXJzKGhlYWRlcnNBc05hdGl2ZSkge1xuICAgIHJldHVybiBoZWFkZXJzQXNOYXRpdmU7XG59XG5mdW5jdGlvbiBnZXRIZWFkZXJLZXlzKGhlYWRlcnNBc05hdGl2ZSkge1xuICAgIHZhciBoZWFkZXJzID0gdG9XaW5kb3dIZWFkZXJzKGhlYWRlcnNBc05hdGl2ZSk7XG4gICAgdmFyIGFzTWFwID0ge307XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBpZiAoaGVhZGVycy5rZXlzKSB7XG4gICAgICAgIGl0ZXJhdGVIZWFkZXJzXzEuaXRlcmF0ZUhlYWRlcnNLZXlzKGhlYWRlcnMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmICghYXNNYXBba2V5XSkge1xuICAgICAgICAgICAgICAgIGFzTWFwW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaGVhZGVycy5mb3JFYWNoKSB7XG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7XG4gICAgICAgICAgICBpZiAoIWFzTWFwW2tleV0pIHtcbiAgICAgICAgICAgICAgICBhc01hcFtrZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpdGVyYXRlSGVhZGVyc18xLml0ZXJhdGVIZWFkZXJzKGhlYWRlcnMsIGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuICAgICAgICAgICAgaWYgKCFhc01hcFtrZXldKSB7XG4gICAgICAgICAgICAgICAgYXNNYXBba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn1cbmV4cG9ydHMuZ2V0SGVhZGVyS2V5cyA9IGdldEhlYWRlcktleXM7XG5mdW5jdGlvbiBzcGxpdEhlYWRlclZhbHVlKHN0cikge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICB2YXIgY29tbWFTcGFjZVZhbHVlcyA9IHN0ci5zcGxpdChcIiwgXCIpO1xuICAgIGNvbW1hU3BhY2VWYWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAoY29tbWFTcGFjZVZhbHVlKSB7XG4gICAgICAgIGNvbW1hU3BhY2VWYWx1ZS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoY29tbWFWYWx1ZSkge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goY29tbWFWYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG59XG5leHBvcnRzLnNwbGl0SGVhZGVyVmFsdWUgPSBzcGxpdEhlYWRlclZhbHVlO1xuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pOyIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBncnBjIH0gZnJvbSBcIkBpbXByb2JhYmxlLWVuZy9ncnBjLXdlYlwiO1xuaW1wb3J0IHsgQ29pbiB9IGZyb20gXCIuLi8uLi9iYXNlL3YxYmV0YTEvY29pblwiO1xuaW1wb3J0IHsgUGFnZVJlcXVlc3QsIFBhZ2VSZXNwb25zZSB9IGZyb20gXCIuLi8uLi9iYXNlL3F1ZXJ5L3YxYmV0YTEvcGFnaW5hdGlvblwiO1xuaW1wb3J0IHsgUGFyYW1zLCBNZXRhZGF0YSB9IGZyb20gXCIuL2JhbmtcIjtcbmltcG9ydCB7IEJyb3dzZXJIZWFkZXJzIH0gZnJvbSBcImJyb3dzZXItaGVhZGVyc1wiO1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImNvc21vcy5iYW5rLnYxYmV0YTFcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VRdWVyeUJhbGFuY2VSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7IGFkZHJlc3M6IFwiXCIsIGRlbm9tOiBcIlwiIH07XG59XG5leHBvcnQgY29uc3QgUXVlcnlCYWxhbmNlUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5hZGRyZXNzICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5hZGRyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kZW5vbSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UuZGVub20pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlCYWxhbmNlUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWRkcmVzcyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRlbm9tID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRyZXNzOiBpc1NldChvYmplY3QuYWRkcmVzcykgPyBTdHJpbmcob2JqZWN0LmFkZHJlc3MpIDogXCJcIixcbiAgICAgICAgICAgIGRlbm9tOiBpc1NldChvYmplY3QuZGVub20pID8gU3RyaW5nKG9iamVjdC5kZW5vbSkgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmIChvYmouYWRkcmVzcyA9IG1lc3NhZ2UuYWRkcmVzcyk7XG4gICAgICAgIG1lc3NhZ2UuZGVub20gIT09IHVuZGVmaW5lZCAmJiAob2JqLmRlbm9tID0gbWVzc2FnZS5kZW5vbSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeUJhbGFuY2VSZXF1ZXN0KCk7XG4gICAgICAgIG1lc3NhZ2UuYWRkcmVzcyA9IG9iamVjdC5hZGRyZXNzID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZGVub20gPSBvYmplY3QuZGVub20gPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUXVlcnlCYWxhbmNlUmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIHsgYmFsYW5jZTogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgUXVlcnlCYWxhbmNlUmVzcG9uc2UgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYmFsYW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2luLmVuY29kZShtZXNzYWdlLmJhbGFuY2UsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeUJhbGFuY2VSZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmFsYW5jZSA9IENvaW4uZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmFsYW5jZTogaXNTZXQob2JqZWN0LmJhbGFuY2UpXG4gICAgICAgICAgICAgICAgPyBDb2luLmZyb21KU09OKG9iamVjdC5iYWxhbmNlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYmFsYW5jZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmJhbGFuY2UgPSBtZXNzYWdlLmJhbGFuY2VcbiAgICAgICAgICAgICAgICA/IENvaW4udG9KU09OKG1lc3NhZ2UuYmFsYW5jZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeUJhbGFuY2VSZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLmJhbGFuY2UgPVxuICAgICAgICAgICAgb2JqZWN0LmJhbGFuY2UgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYmFsYW5jZSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gQ29pbi5mcm9tUGFydGlhbChvYmplY3QuYmFsYW5jZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHsgYWRkcmVzczogXCJcIiwgcGFnaW5hdGlvbjogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWRkcmVzcyAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBQYWdlUmVxdWVzdC5lbmNvZGUobWVzc2FnZS5wYWdpbmF0aW9uLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFkZHJlc3MgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uID0gUGFnZVJlcXVlc3QuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkcmVzczogaXNTZXQob2JqZWN0LmFkZHJlc3MpID8gU3RyaW5nKG9iamVjdC5hZGRyZXNzKSA6IFwiXCIsXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiBpc1NldChvYmplY3QucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA/IFBhZ2VSZXF1ZXN0LmZyb21KU09OKG9iamVjdC5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmIChvYmouYWRkcmVzcyA9IG1lc3NhZ2UuYWRkcmVzcyk7XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnBhZ2luYXRpb24gPSBtZXNzYWdlLnBhZ2luYXRpb25cbiAgICAgICAgICAgICAgICA/IFBhZ2VSZXF1ZXN0LnRvSlNPTihtZXNzYWdlLnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QoKTtcbiAgICAgICAgbWVzc2FnZS5hZGRyZXNzID0gb2JqZWN0LmFkZHJlc3MgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uID1cbiAgICAgICAgICAgIG9iamVjdC5wYWdpbmF0aW9uICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnBhZ2luYXRpb24gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFBhZ2VSZXF1ZXN0LmZyb21QYXJ0aWFsKG9iamVjdC5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VRdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIHsgYmFsYW5jZXM6IFtdLCBwYWdpbmF0aW9uOiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBRdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2UgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuYmFsYW5jZXMpIHtcbiAgICAgICAgICAgIENvaW4uZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBQYWdlUmVzcG9uc2UuZW5jb2RlKG1lc3NhZ2UucGFnaW5hdGlvbiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5QWxsQmFsYW5jZXNSZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmFsYW5jZXMucHVzaChDb2luLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9IFBhZ2VSZXNwb25zZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiYWxhbmNlczogQXJyYXkuaXNBcnJheShvYmplY3Q/LmJhbGFuY2VzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmJhbGFuY2VzLm1hcCgoZSkgPT4gQ29pbi5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgcGFnaW5hdGlvbjogaXNTZXQob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVzcG9uc2UuZnJvbUpTT04ob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYmFsYW5jZXMpIHtcbiAgICAgICAgICAgIG9iai5iYWxhbmNlcyA9IG1lc3NhZ2UuYmFsYW5jZXMubWFwKChlKSA9PiBlID8gQ29pbi50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmJhbGFuY2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucGFnaW5hdGlvbiA9IG1lc3NhZ2UucGFnaW5hdGlvblxuICAgICAgICAgICAgICAgID8gUGFnZVJlc3BvbnNlLnRvSlNPTihtZXNzYWdlLnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlBbGxCYWxhbmNlc1Jlc3BvbnNlKCk7XG4gICAgICAgIG1lc3NhZ2UuYmFsYW5jZXMgPSBvYmplY3QuYmFsYW5jZXM/Lm1hcCgoZSkgPT4gQ29pbi5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9XG4gICAgICAgICAgICBvYmplY3QucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wYWdpbmF0aW9uICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVzcG9uc2UuZnJvbVBhcnRpYWwob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVF1ZXJ5VG90YWxTdXBwbHlSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7IHBhZ2luYXRpb246IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5VG90YWxTdXBwbHlSZXF1ZXN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUGFnZVJlcXVlc3QuZW5jb2RlKG1lc3NhZ2UucGFnaW5hdGlvbiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5VG90YWxTdXBwbHlSZXF1ZXN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uID0gUGFnZVJlcXVlc3QuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFnaW5hdGlvbjogaXNTZXQob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVxdWVzdC5mcm9tSlNPTihvYmplY3QucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wYWdpbmF0aW9uID0gbWVzc2FnZS5wYWdpbmF0aW9uXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVxdWVzdC50b0pTT04obWVzc2FnZS5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5VG90YWxTdXBwbHlSZXF1ZXN0KCk7XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9XG4gICAgICAgICAgICBvYmplY3QucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wYWdpbmF0aW9uICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVxdWVzdC5mcm9tUGFydGlhbChvYmplY3QucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUXVlcnlUb3RhbFN1cHBseVJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IHN1cHBseTogW10sIHBhZ2luYXRpb246IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5VG90YWxTdXBwbHlSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zdXBwbHkpIHtcbiAgICAgICAgICAgIENvaW4uZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBQYWdlUmVzcG9uc2UuZW5jb2RlKG1lc3NhZ2UucGFnaW5hdGlvbiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5VG90YWxTdXBwbHlSZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3VwcGx5LnB1c2goQ29pbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhZ2luYXRpb24gPSBQYWdlUmVzcG9uc2UuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VwcGx5OiBBcnJheS5pc0FycmF5KG9iamVjdD8uc3VwcGx5KVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnN1cHBseS5tYXAoKGUpID0+IENvaW4uZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIHBhZ2luYXRpb246IGlzU2V0KG9iamVjdC5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgID8gUGFnZVJlc3BvbnNlLmZyb21KU09OKG9iamVjdC5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLnN1cHBseSkge1xuICAgICAgICAgICAgb2JqLnN1cHBseSA9IG1lc3NhZ2Uuc3VwcGx5Lm1hcCgoZSkgPT4gKGUgPyBDb2luLnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnN1cHBseSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnBhZ2luYXRpb24gPSBtZXNzYWdlLnBhZ2luYXRpb25cbiAgICAgICAgICAgICAgICA/IFBhZ2VSZXNwb25zZS50b0pTT04obWVzc2FnZS5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5VG90YWxTdXBwbHlSZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLnN1cHBseSA9IG9iamVjdC5zdXBwbHk/Lm1hcCgoZSkgPT4gQ29pbi5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9XG4gICAgICAgICAgICBvYmplY3QucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wYWdpbmF0aW9uICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVzcG9uc2UuZnJvbVBhcnRpYWwob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVF1ZXJ5U3VwcGx5T2ZSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7IGRlbm9tOiBcIlwiIH07XG59XG5leHBvcnQgY29uc3QgUXVlcnlTdXBwbHlPZlJlcXVlc3QgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZGVub20gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmRlbm9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5U3VwcGx5T2ZSZXF1ZXN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kZW5vbSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVub206IGlzU2V0KG9iamVjdC5kZW5vbSkgPyBTdHJpbmcob2JqZWN0LmRlbm9tKSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5kZW5vbSAhPT0gdW5kZWZpbmVkICYmIChvYmouZGVub20gPSBtZXNzYWdlLmRlbm9tKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5U3VwcGx5T2ZSZXF1ZXN0KCk7XG4gICAgICAgIG1lc3NhZ2UuZGVub20gPSBvYmplY3QuZGVub20gPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUXVlcnlTdXBwbHlPZlJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IGFtb3VudDogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgUXVlcnlTdXBwbHlPZlJlc3BvbnNlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmFtb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2luLmVuY29kZShtZXNzYWdlLmFtb3VudCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5U3VwcGx5T2ZSZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYW1vdW50ID0gQ29pbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhbW91bnQ6IGlzU2V0KG9iamVjdC5hbW91bnQpID8gQ29pbi5mcm9tSlNPTihvYmplY3QuYW1vdW50KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmFtb3VudCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmFtb3VudCA9IG1lc3NhZ2UuYW1vdW50ID8gQ29pbi50b0pTT04obWVzc2FnZS5hbW91bnQpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5U3VwcGx5T2ZSZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLmFtb3VudCA9XG4gICAgICAgICAgICBvYmplY3QuYW1vdW50ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmFtb3VudCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gQ29pbi5mcm9tUGFydGlhbChvYmplY3QuYW1vdW50KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VRdWVyeVBhcmFtc1JlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5UGFyYW1zUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUoXywgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5UGFyYW1zUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04oXykge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICB0b0pTT04oXykge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKF8pIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeVBhcmFtc1JlcXVlc3QoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUXVlcnlQYXJhbXNSZXNwb25zZSgpIHtcbiAgICByZXR1cm4geyBwYXJhbXM6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5UGFyYW1zUmVzcG9uc2UgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UucGFyYW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFBhcmFtcy5lbmNvZGUobWVzc2FnZS5wYXJhbXMsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeVBhcmFtc1Jlc3BvbnNlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXJhbXMgPSBQYXJhbXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFyYW1zOiBpc1NldChvYmplY3QucGFyYW1zKSA/IFBhcmFtcy5mcm9tSlNPTihvYmplY3QucGFyYW1zKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnBhcmFtcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnBhcmFtcyA9IG1lc3NhZ2UucGFyYW1zID8gUGFyYW1zLnRvSlNPTihtZXNzYWdlLnBhcmFtcykgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlQYXJhbXNSZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLnBhcmFtcyA9XG4gICAgICAgICAgICBvYmplY3QucGFyYW1zICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnBhcmFtcyAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUGFyYW1zLmZyb21QYXJ0aWFsKG9iamVjdC5wYXJhbXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVF1ZXJ5RGVub21zTWV0YWRhdGFSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7IHBhZ2luYXRpb246IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5RGVub21zTWV0YWRhdGFSZXF1ZXN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUGFnZVJlcXVlc3QuZW5jb2RlKG1lc3NhZ2UucGFnaW5hdGlvbiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5RGVub21zTWV0YWRhdGFSZXF1ZXN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uID0gUGFnZVJlcXVlc3QuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFnaW5hdGlvbjogaXNTZXQob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVxdWVzdC5mcm9tSlNPTihvYmplY3QucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wYWdpbmF0aW9uID0gbWVzc2FnZS5wYWdpbmF0aW9uXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVxdWVzdC50b0pTT04obWVzc2FnZS5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5RGVub21zTWV0YWRhdGFSZXF1ZXN0KCk7XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9XG4gICAgICAgICAgICBvYmplY3QucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wYWdpbmF0aW9uICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVxdWVzdC5mcm9tUGFydGlhbChvYmplY3QucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUXVlcnlEZW5vbXNNZXRhZGF0YVJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IG1ldGFkYXRhczogW10sIHBhZ2luYXRpb246IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5RGVub21zTWV0YWRhdGFSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5tZXRhZGF0YXMpIHtcbiAgICAgICAgICAgIE1ldGFkYXRhLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUGFnZVJlc3BvbnNlLmVuY29kZShtZXNzYWdlLnBhZ2luYXRpb24sIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeURlbm9tc01ldGFkYXRhUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1ldGFkYXRhcy5wdXNoKE1ldGFkYXRhLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9IFBhZ2VSZXNwb25zZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXRhZGF0YXM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5tZXRhZGF0YXMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QubWV0YWRhdGFzLm1hcCgoZSkgPT4gTWV0YWRhdGEuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIHBhZ2luYXRpb246IGlzU2V0KG9iamVjdC5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgID8gUGFnZVJlc3BvbnNlLmZyb21KU09OKG9iamVjdC5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLm1ldGFkYXRhcykge1xuICAgICAgICAgICAgb2JqLm1ldGFkYXRhcyA9IG1lc3NhZ2UubWV0YWRhdGFzLm1hcCgoZSkgPT4gZSA/IE1ldGFkYXRhLnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmoubWV0YWRhdGFzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucGFnaW5hdGlvbiA9IG1lc3NhZ2UucGFnaW5hdGlvblxuICAgICAgICAgICAgICAgID8gUGFnZVJlc3BvbnNlLnRvSlNPTihtZXNzYWdlLnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlEZW5vbXNNZXRhZGF0YVJlc3BvbnNlKCk7XG4gICAgICAgIG1lc3NhZ2UubWV0YWRhdGFzID1cbiAgICAgICAgICAgIG9iamVjdC5tZXRhZGF0YXM/Lm1hcCgoZSkgPT4gTWV0YWRhdGEuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLnBhZ2luYXRpb24gPVxuICAgICAgICAgICAgb2JqZWN0LnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucGFnaW5hdGlvbiAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUGFnZVJlc3BvbnNlLmZyb21QYXJ0aWFsKG9iamVjdC5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VRdWVyeURlbm9tTWV0YWRhdGFSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7IGRlbm9tOiBcIlwiIH07XG59XG5leHBvcnQgY29uc3QgUXVlcnlEZW5vbU1ldGFkYXRhUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5kZW5vbSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuZGVub20pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlEZW5vbU1ldGFkYXRhUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVub20gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlbm9tOiBpc1NldChvYmplY3QuZGVub20pID8gU3RyaW5nKG9iamVjdC5kZW5vbSkgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuZGVub20gIT09IHVuZGVmaW5lZCAmJiAob2JqLmRlbm9tID0gbWVzc2FnZS5kZW5vbSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeURlbm9tTWV0YWRhdGFSZXF1ZXN0KCk7XG4gICAgICAgIG1lc3NhZ2UuZGVub20gPSBvYmplY3QuZGVub20gPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUXVlcnlEZW5vbU1ldGFkYXRhUmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIHsgbWV0YWRhdGE6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5RGVub21NZXRhZGF0YVJlc3BvbnNlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLm1ldGFkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIE1ldGFkYXRhLmVuY29kZShtZXNzYWdlLm1ldGFkYXRhLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlEZW5vbU1ldGFkYXRhUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1ldGFkYXRhID0gTWV0YWRhdGEuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWV0YWRhdGE6IGlzU2V0KG9iamVjdC5tZXRhZGF0YSlcbiAgICAgICAgICAgICAgICA/IE1ldGFkYXRhLmZyb21KU09OKG9iamVjdC5tZXRhZGF0YSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLm1ldGFkYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubWV0YWRhdGEgPSBtZXNzYWdlLm1ldGFkYXRhXG4gICAgICAgICAgICAgICAgPyBNZXRhZGF0YS50b0pTT04obWVzc2FnZS5tZXRhZGF0YSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeURlbm9tTWV0YWRhdGFSZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLm1ldGFkYXRhID1cbiAgICAgICAgICAgIG9iamVjdC5tZXRhZGF0YSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5tZXRhZGF0YSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gTWV0YWRhdGEuZnJvbVBhcnRpYWwob2JqZWN0Lm1ldGFkYXRhKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmV4cG9ydCBjbGFzcyBRdWVyeUNsaWVudEltcGwge1xuICAgIHJwYztcbiAgICBjb25zdHJ1Y3RvcihycGMpIHtcbiAgICAgICAgdGhpcy5ycGMgPSBycGM7XG4gICAgICAgIHRoaXMuYmFsYW5jZSA9IHRoaXMuYmFsYW5jZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmFsbEJhbGFuY2VzID0gdGhpcy5hbGxCYWxhbmNlcy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnRvdGFsU3VwcGx5ID0gdGhpcy50b3RhbFN1cHBseS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN1cHBseU9mID0gdGhpcy5zdXBwbHlPZi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IHRoaXMucGFyYW1zLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZGVub21NZXRhZGF0YSA9IHRoaXMuZGVub21NZXRhZGF0YS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlbm9tc01ldGFkYXRhID0gdGhpcy5kZW5vbXNNZXRhZGF0YS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBiYWxhbmNlKHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShRdWVyeUJhbGFuY2VEZXNjLCBRdWVyeUJhbGFuY2VSZXF1ZXN0LmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIGFsbEJhbGFuY2VzKHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShRdWVyeUFsbEJhbGFuY2VzRGVzYywgUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QuZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgdG90YWxTdXBwbHkocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KFF1ZXJ5VG90YWxTdXBwbHlEZXNjLCBRdWVyeVRvdGFsU3VwcGx5UmVxdWVzdC5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbiAgICBzdXBwbHlPZihyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoUXVlcnlTdXBwbHlPZkRlc2MsIFF1ZXJ5U3VwcGx5T2ZSZXF1ZXN0LmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIHBhcmFtcyhyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoUXVlcnlQYXJhbXNEZXNjLCBRdWVyeVBhcmFtc1JlcXVlc3QuZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgZGVub21NZXRhZGF0YShyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoUXVlcnlEZW5vbU1ldGFkYXRhRGVzYywgUXVlcnlEZW5vbU1ldGFkYXRhUmVxdWVzdC5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbiAgICBkZW5vbXNNZXRhZGF0YShyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoUXVlcnlEZW5vbXNNZXRhZGF0YURlc2MsIFF1ZXJ5RGVub21zTWV0YWRhdGFSZXF1ZXN0LmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5RGVzYyA9IHtcbiAgICBzZXJ2aWNlTmFtZTogXCJjb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5XCIsXG59O1xuZXhwb3J0IGNvbnN0IFF1ZXJ5QmFsYW5jZURlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJCYWxhbmNlXCIsXG4gICAgc2VydmljZTogUXVlcnlEZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUXVlcnlCYWxhbmNlUmVxdWVzdC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5RdWVyeUJhbGFuY2VSZXNwb25zZS5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFF1ZXJ5QWxsQmFsYW5jZXNEZXNjID0ge1xuICAgIG1ldGhvZE5hbWU6IFwiQWxsQmFsYW5jZXNcIixcbiAgICBzZXJ2aWNlOiBRdWVyeURlc2MsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiB7XG4gICAgICAgIHNlcmlhbGl6ZUJpbmFyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBRdWVyeUFsbEJhbGFuY2VzUmVxdWVzdC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5RdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2UuZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBRdWVyeVRvdGFsU3VwcGx5RGVzYyA9IHtcbiAgICBtZXRob2ROYW1lOiBcIlRvdGFsU3VwcGx5XCIsXG4gICAgc2VydmljZTogUXVlcnlEZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUXVlcnlUb3RhbFN1cHBseVJlcXVlc3QuZW5jb2RlKHRoaXMpLmZpbmlzaCgpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgcmVzcG9uc2VUeXBlOiB7XG4gICAgICAgIGRlc2VyaWFsaXplQmluYXJ5KGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uUXVlcnlUb3RhbFN1cHBseVJlc3BvbnNlLmRlY29kZShkYXRhKSxcbiAgICAgICAgICAgICAgICB0b09iamVjdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUXVlcnlTdXBwbHlPZkRlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJTdXBwbHlPZlwiLFxuICAgIHNlcnZpY2U6IFF1ZXJ5RGVzYyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IHtcbiAgICAgICAgc2VyaWFsaXplQmluYXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIFF1ZXJ5U3VwcGx5T2ZSZXF1ZXN0LmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLlF1ZXJ5U3VwcGx5T2ZSZXNwb25zZS5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFF1ZXJ5UGFyYW1zRGVzYyA9IHtcbiAgICBtZXRob2ROYW1lOiBcIlBhcmFtc1wiLFxuICAgIHNlcnZpY2U6IFF1ZXJ5RGVzYyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IHtcbiAgICAgICAgc2VyaWFsaXplQmluYXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIFF1ZXJ5UGFyYW1zUmVxdWVzdC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5RdWVyeVBhcmFtc1Jlc3BvbnNlLmRlY29kZShkYXRhKSxcbiAgICAgICAgICAgICAgICB0b09iamVjdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUXVlcnlEZW5vbU1ldGFkYXRhRGVzYyA9IHtcbiAgICBtZXRob2ROYW1lOiBcIkRlbm9tTWV0YWRhdGFcIixcbiAgICBzZXJ2aWNlOiBRdWVyeURlc2MsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiB7XG4gICAgICAgIHNlcmlhbGl6ZUJpbmFyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBRdWVyeURlbm9tTWV0YWRhdGFSZXF1ZXN0LmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLlF1ZXJ5RGVub21NZXRhZGF0YVJlc3BvbnNlLmRlY29kZShkYXRhKSxcbiAgICAgICAgICAgICAgICB0b09iamVjdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUXVlcnlEZW5vbXNNZXRhZGF0YURlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJEZW5vbXNNZXRhZGF0YVwiLFxuICAgIHNlcnZpY2U6IFF1ZXJ5RGVzYyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IHtcbiAgICAgICAgc2VyaWFsaXplQmluYXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIFF1ZXJ5RGVub21zTWV0YWRhdGFSZXF1ZXN0LmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLlF1ZXJ5RGVub21zTWV0YWRhdGFSZXNwb25zZS5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNsYXNzIEdycGNXZWJJbXBsIHtcbiAgICBob3N0O1xuICAgIG9wdGlvbnM7XG4gICAgY29uc3RydWN0b3IoaG9zdCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICB1bmFyeShtZXRob2REZXNjLCBfcmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHsgLi4uX3JlcXVlc3QsIC4uLm1ldGhvZERlc2MucmVxdWVzdFR5cGUgfTtcbiAgICAgICAgY29uc3QgbWF5YmVDb21iaW5lZE1ldGFkYXRhID0gbWV0YWRhdGEgJiYgdGhpcy5vcHRpb25zLm1ldGFkYXRhXG4gICAgICAgICAgICA/IG5ldyBCcm93c2VySGVhZGVycyh7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zPy5tZXRhZGF0YS5oZWFkZXJzTWFwLFxuICAgICAgICAgICAgICAgIC4uLm1ldGFkYXRhPy5oZWFkZXJzTWFwLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogbWV0YWRhdGEgfHwgdGhpcy5vcHRpb25zLm1ldGFkYXRhO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgZ3JwYy51bmFyeShtZXRob2REZXNjLCB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICBob3N0OiB0aGlzLmhvc3QsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1heWJlQ29tYmluZWRNZXRhZGF0YSxcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQ6IHRoaXMub3B0aW9ucy50cmFuc3BvcnQsXG4gICAgICAgICAgICAgICAgZGVidWc6IHRoaXMub3B0aW9ucy5kZWJ1ZyxcbiAgICAgICAgICAgICAgICBvbkVuZDogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IGdycGMuQ29kZS5PSykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5jb2RlID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1ldGFkYXRhID0gcmVzcG9uc2UudHJhaWxlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5LmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwiZ29vZ2xlLnByb3RvYnVmXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlQW55KCkge1xuICAgIHJldHVybiB7IHR5cGVVcmw6IFwiXCIsIHZhbHVlOiBuZXcgVWludDhBcnJheSgpIH07XG59XG5leHBvcnQgY29uc3QgQW55ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGVVcmwgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnR5cGVVcmwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbHVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuYnl0ZXMobWVzc2FnZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VBbnkoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnR5cGVVcmwgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52YWx1ZSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlVXJsOiBpc1NldChvYmplY3QudHlwZVVybCkgPyBTdHJpbmcob2JqZWN0LnR5cGVVcmwpIDogXCJcIixcbiAgICAgICAgICAgIHZhbHVlOiBpc1NldChvYmplY3QudmFsdWUpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnZhbHVlKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnR5cGVVcmwgIT09IHVuZGVmaW5lZCAmJiAob2JqLnR5cGVVcmwgPSBtZXNzYWdlLnR5cGVVcmwpO1xuICAgICAgICBtZXNzYWdlLnZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudmFsdWUgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS52YWx1ZSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS52YWx1ZSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUFueSgpO1xuICAgICAgICBtZXNzYWdlLnR5cGVVcmwgPSBvYmplY3QudHlwZVVybCA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLnZhbHVlID0gb2JqZWN0LnZhbHVlID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xudmFyIGdsb2JhbFRoaXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB0aHJvdyBcIlVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdFwiO1xufSkoKTtcbmNvbnN0IGF0b2IgPSBnbG9iYWxUaGlzLmF0b2IgfHxcbiAgICAoKGI2NCkgPT4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiNjQsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwiYmluYXJ5XCIpKTtcbmZ1bmN0aW9uIGJ5dGVzRnJvbUJhc2U2NChiNjQpIHtcbiAgICBjb25zdCBiaW4gPSBhdG9iKGI2NCk7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYmluLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5jb25zdCBidG9hID0gZ2xvYmFsVGhpcy5idG9hIHx8XG4gICAgKChiaW4pID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYmluLCBcImJpbmFyeVwiKS50b1N0cmluZyhcImJhc2U2NFwiKSk7XG5mdW5jdGlvbiBiYXNlNjRGcm9tQnl0ZXMoYXJyKSB7XG4gICAgY29uc3QgYmluID0gW107XG4gICAgYXJyLmZvckVhY2goKGJ5dGUpID0+IHtcbiAgICAgICAgYmluLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJ0b2EoYmluLmpvaW4oXCJcIikpO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFueS5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgQW55IH0gZnJvbSBcIi4uLy4uLy4uL2dvb2dsZS9wcm90b2J1Zi9hbnlcIjtcbmltcG9ydCBMb25nIGZyb20gXCJsb25nXCI7XG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwiY29zbW9zLmF1dGgudjFiZXRhMVwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUJhc2VBY2NvdW50KCkge1xuICAgIHJldHVybiB7IGFkZHJlc3M6IFwiXCIsIHB1YktleTogdW5kZWZpbmVkLCBhY2NvdW50TnVtYmVyOiBcIjBcIiwgc2VxdWVuY2U6IFwiMFwiIH07XG59XG5leHBvcnQgY29uc3QgQmFzZUFjY291bnQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWRkcmVzcyAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucHViS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEFueS5lbmNvZGUobWVzc2FnZS5wdWJLZXksIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWNjb3VudE51bWJlciAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLnVpbnQ2NChtZXNzYWdlLmFjY291bnROdW1iZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNlcXVlbmNlICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikudWludDY0KG1lc3NhZ2Uuc2VxdWVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQmFzZUFjY291bnQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFkZHJlc3MgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wdWJLZXkgPSBBbnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFjY291bnROdW1iZXIgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlcXVlbmNlID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZHJlc3M6IGlzU2V0KG9iamVjdC5hZGRyZXNzKSA/IFN0cmluZyhvYmplY3QuYWRkcmVzcykgOiBcIlwiLFxuICAgICAgICAgICAgcHViS2V5OiBpc1NldChvYmplY3QucHViS2V5KSA/IEFueS5mcm9tSlNPTihvYmplY3QucHViS2V5KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFjY291bnROdW1iZXI6IGlzU2V0KG9iamVjdC5hY2NvdW50TnVtYmVyKVxuICAgICAgICAgICAgICAgID8gU3RyaW5nKG9iamVjdC5hY2NvdW50TnVtYmVyKVxuICAgICAgICAgICAgICAgIDogXCIwXCIsXG4gICAgICAgICAgICBzZXF1ZW5jZTogaXNTZXQob2JqZWN0LnNlcXVlbmNlKSA/IFN0cmluZyhvYmplY3Quc2VxdWVuY2UpIDogXCIwXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5hZGRyZXNzICE9PSB1bmRlZmluZWQgJiYgKG9iai5hZGRyZXNzID0gbWVzc2FnZS5hZGRyZXNzKTtcbiAgICAgICAgbWVzc2FnZS5wdWJLZXkgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wdWJLZXkgPSBtZXNzYWdlLnB1YktleSA/IEFueS50b0pTT04obWVzc2FnZS5wdWJLZXkpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5hY2NvdW50TnVtYmVyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYWNjb3VudE51bWJlciA9IG1lc3NhZ2UuYWNjb3VudE51bWJlcik7XG4gICAgICAgIG1lc3NhZ2Uuc2VxdWVuY2UgIT09IHVuZGVmaW5lZCAmJiAob2JqLnNlcXVlbmNlID0gbWVzc2FnZS5zZXF1ZW5jZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VCYXNlQWNjb3VudCgpO1xuICAgICAgICBtZXNzYWdlLmFkZHJlc3MgPSBvYmplY3QuYWRkcmVzcyA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLnB1YktleSA9XG4gICAgICAgICAgICBvYmplY3QucHViS2V5ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnB1YktleSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gQW55LmZyb21QYXJ0aWFsKG9iamVjdC5wdWJLZXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYWNjb3VudE51bWJlciA9IG9iamVjdC5hY2NvdW50TnVtYmVyID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLnNlcXVlbmNlID0gb2JqZWN0LnNlcXVlbmNlID8/IFwiMFwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VNb2R1bGVBY2NvdW50KCkge1xuICAgIHJldHVybiB7IGJhc2VBY2NvdW50OiB1bmRlZmluZWQsIG5hbWU6IFwiXCIsIHBlcm1pc3Npb25zOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IE1vZHVsZUFjY291bnQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYmFzZUFjY291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQmFzZUFjY291bnQuZW5jb2RlKG1lc3NhZ2UuYmFzZUFjY291bnQsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UucGVybWlzc2lvbnMpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1vZHVsZUFjY291bnQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJhc2VBY2NvdW50ID0gQmFzZUFjY291bnQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wZXJtaXNzaW9ucy5wdXNoKHJlYWRlci5zdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2VBY2NvdW50OiBpc1NldChvYmplY3QuYmFzZUFjY291bnQpXG4gICAgICAgICAgICAgICAgPyBCYXNlQWNjb3VudC5mcm9tSlNPTihvYmplY3QuYmFzZUFjY291bnQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBuYW1lOiBpc1NldChvYmplY3QubmFtZSkgPyBTdHJpbmcob2JqZWN0Lm5hbWUpIDogXCJcIixcbiAgICAgICAgICAgIHBlcm1pc3Npb25zOiBBcnJheS5pc0FycmF5KG9iamVjdD8ucGVybWlzc2lvbnMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QucGVybWlzc2lvbnMubWFwKChlKSA9PiBTdHJpbmcoZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmJhc2VBY2NvdW50ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYmFzZUFjY291bnQgPSBtZXNzYWdlLmJhc2VBY2NvdW50XG4gICAgICAgICAgICAgICAgPyBCYXNlQWNjb3VudC50b0pTT04obWVzc2FnZS5iYXNlQWNjb3VudClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UubmFtZSAhPT0gdW5kZWZpbmVkICYmIChvYmoubmFtZSA9IG1lc3NhZ2UubmFtZSk7XG4gICAgICAgIGlmIChtZXNzYWdlLnBlcm1pc3Npb25zKSB7XG4gICAgICAgICAgICBvYmoucGVybWlzc2lvbnMgPSBtZXNzYWdlLnBlcm1pc3Npb25zLm1hcCgoZSkgPT4gZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmoucGVybWlzc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTW9kdWxlQWNjb3VudCgpO1xuICAgICAgICBtZXNzYWdlLmJhc2VBY2NvdW50ID1cbiAgICAgICAgICAgIG9iamVjdC5iYXNlQWNjb3VudCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5iYXNlQWNjb3VudCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gQmFzZUFjY291bnQuZnJvbVBhcnRpYWwob2JqZWN0LmJhc2VBY2NvdW50KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLm5hbWUgPSBvYmplY3QubmFtZSA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLnBlcm1pc3Npb25zID0gb2JqZWN0LnBlcm1pc3Npb25zPy5tYXAoKGUpID0+IGUpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWF4TWVtb0NoYXJhY3RlcnM6IFwiMFwiLFxuICAgICAgICB0eFNpZ0xpbWl0OiBcIjBcIixcbiAgICAgICAgdHhTaXplQ29zdFBlckJ5dGU6IFwiMFwiLFxuICAgICAgICBzaWdWZXJpZnlDb3N0RWQyNTUxOTogXCIwXCIsXG4gICAgICAgIHNpZ1ZlcmlmeUNvc3RTZWNwMjU2azE6IFwiMFwiLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgUGFyYW1zID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLm1heE1lbW9DaGFyYWN0ZXJzICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50NjQobWVzc2FnZS5tYXhNZW1vQ2hhcmFjdGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudHhTaWdMaW1pdCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLnVpbnQ2NChtZXNzYWdlLnR4U2lnTGltaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnR4U2l6ZUNvc3RQZXJCeXRlICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkudWludDY0KG1lc3NhZ2UudHhTaXplQ29zdFBlckJ5dGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ1ZlcmlmeUNvc3RFZDI1NTE5ICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikudWludDY0KG1lc3NhZ2Uuc2lnVmVyaWZ5Q29zdEVkMjU1MTkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ1ZlcmlmeUNvc3RTZWNwMjU2azEgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS51aW50NjQobWVzc2FnZS5zaWdWZXJpZnlDb3N0U2VjcDI1NmsxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBhcmFtcygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWF4TWVtb0NoYXJhY3RlcnMgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnR4U2lnTGltaXQgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnR4U2l6ZUNvc3RQZXJCeXRlID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zaWdWZXJpZnlDb3N0RWQyNTUxOSA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2lnVmVyaWZ5Q29zdFNlY3AyNTZrMSA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXhNZW1vQ2hhcmFjdGVyczogaXNTZXQob2JqZWN0Lm1heE1lbW9DaGFyYWN0ZXJzKVxuICAgICAgICAgICAgICAgID8gU3RyaW5nKG9iamVjdC5tYXhNZW1vQ2hhcmFjdGVycylcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICAgICAgdHhTaWdMaW1pdDogaXNTZXQob2JqZWN0LnR4U2lnTGltaXQpID8gU3RyaW5nKG9iamVjdC50eFNpZ0xpbWl0KSA6IFwiMFwiLFxuICAgICAgICAgICAgdHhTaXplQ29zdFBlckJ5dGU6IGlzU2V0KG9iamVjdC50eFNpemVDb3N0UGVyQnl0ZSlcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3QudHhTaXplQ29zdFBlckJ5dGUpXG4gICAgICAgICAgICAgICAgOiBcIjBcIixcbiAgICAgICAgICAgIHNpZ1ZlcmlmeUNvc3RFZDI1NTE5OiBpc1NldChvYmplY3Quc2lnVmVyaWZ5Q29zdEVkMjU1MTkpXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcob2JqZWN0LnNpZ1ZlcmlmeUNvc3RFZDI1NTE5KVxuICAgICAgICAgICAgICAgIDogXCIwXCIsXG4gICAgICAgICAgICBzaWdWZXJpZnlDb3N0U2VjcDI1NmsxOiBpc1NldChvYmplY3Quc2lnVmVyaWZ5Q29zdFNlY3AyNTZrMSlcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3Quc2lnVmVyaWZ5Q29zdFNlY3AyNTZrMSlcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UubWF4TWVtb0NoYXJhY3RlcnMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5tYXhNZW1vQ2hhcmFjdGVycyA9IG1lc3NhZ2UubWF4TWVtb0NoYXJhY3RlcnMpO1xuICAgICAgICBtZXNzYWdlLnR4U2lnTGltaXQgIT09IHVuZGVmaW5lZCAmJiAob2JqLnR4U2lnTGltaXQgPSBtZXNzYWdlLnR4U2lnTGltaXQpO1xuICAgICAgICBtZXNzYWdlLnR4U2l6ZUNvc3RQZXJCeXRlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudHhTaXplQ29zdFBlckJ5dGUgPSBtZXNzYWdlLnR4U2l6ZUNvc3RQZXJCeXRlKTtcbiAgICAgICAgbWVzc2FnZS5zaWdWZXJpZnlDb3N0RWQyNTUxOSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnNpZ1ZlcmlmeUNvc3RFZDI1NTE5ID0gbWVzc2FnZS5zaWdWZXJpZnlDb3N0RWQyNTUxOSk7XG4gICAgICAgIG1lc3NhZ2Uuc2lnVmVyaWZ5Q29zdFNlY3AyNTZrMSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnNpZ1ZlcmlmeUNvc3RTZWNwMjU2azEgPSBtZXNzYWdlLnNpZ1ZlcmlmeUNvc3RTZWNwMjU2azEpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUGFyYW1zKCk7XG4gICAgICAgIG1lc3NhZ2UubWF4TWVtb0NoYXJhY3RlcnMgPSBvYmplY3QubWF4TWVtb0NoYXJhY3RlcnMgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UudHhTaWdMaW1pdCA9IG9iamVjdC50eFNpZ0xpbWl0ID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLnR4U2l6ZUNvc3RQZXJCeXRlID0gb2JqZWN0LnR4U2l6ZUNvc3RQZXJCeXRlID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLnNpZ1ZlcmlmeUNvc3RFZDI1NTE5ID0gb2JqZWN0LnNpZ1ZlcmlmeUNvc3RFZDI1NTE5ID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLnNpZ1ZlcmlmeUNvc3RTZWNwMjU2azEgPSBvYmplY3Quc2lnVmVyaWZ5Q29zdFNlY3AyNTZrMSA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBsb25nVG9TdHJpbmcobG9uZykge1xuICAgIHJldHVybiBsb25nLnRvU3RyaW5nKCk7XG59XG5pZiAoX20wLnV0aWwuTG9uZyAhPT0gTG9uZykge1xuICAgIF9tMC51dGlsLkxvbmcgPSBMb25nO1xuICAgIF9tMC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRoLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBncnBjIH0gZnJvbSBcIkBpbXByb2JhYmxlLWVuZy9ncnBjLXdlYlwiO1xuaW1wb3J0IHsgUGFnZVJlcXVlc3QsIFBhZ2VSZXNwb25zZSB9IGZyb20gXCIuLi8uLi9iYXNlL3F1ZXJ5L3YxYmV0YTEvcGFnaW5hdGlvblwiO1xuaW1wb3J0IHsgQW55IH0gZnJvbSBcIi4uLy4uLy4uL2dvb2dsZS9wcm90b2J1Zi9hbnlcIjtcbmltcG9ydCB7IFBhcmFtcyB9IGZyb20gXCIuL2F1dGhcIjtcbmltcG9ydCB7IEJyb3dzZXJIZWFkZXJzIH0gZnJvbSBcImJyb3dzZXItaGVhZGVyc1wiO1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImNvc21vcy5hdXRoLnYxYmV0YTFcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VRdWVyeUFjY291bnRzUmVxdWVzdCgpIHtcbiAgICByZXR1cm4geyBwYWdpbmF0aW9uOiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBRdWVyeUFjY291bnRzUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wYWdpbmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFBhZ2VSZXF1ZXN0LmVuY29kZShtZXNzYWdlLnBhZ2luYXRpb24sIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeUFjY291bnRzUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9IFBhZ2VSZXF1ZXN0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhZ2luYXRpb246IGlzU2V0KG9iamVjdC5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgID8gUGFnZVJlcXVlc3QuZnJvbUpTT04ob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucGFnaW5hdGlvbiA9IG1lc3NhZ2UucGFnaW5hdGlvblxuICAgICAgICAgICAgICAgID8gUGFnZVJlcXVlc3QudG9KU09OKG1lc3NhZ2UucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeUFjY291bnRzUmVxdWVzdCgpO1xuICAgICAgICBtZXNzYWdlLnBhZ2luYXRpb24gPVxuICAgICAgICAgICAgb2JqZWN0LnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucGFnaW5hdGlvbiAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUGFnZVJlcXVlc3QuZnJvbVBhcnRpYWwob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVF1ZXJ5QWNjb3VudHNSZXNwb25zZSgpIHtcbiAgICByZXR1cm4geyBhY2NvdW50czogW10sIHBhZ2luYXRpb246IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5QWNjb3VudHNSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5hY2NvdW50cykge1xuICAgICAgICAgICAgQW55LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUGFnZVJlc3BvbnNlLmVuY29kZShtZXNzYWdlLnBhZ2luYXRpb24sIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeUFjY291bnRzUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFjY291bnRzLnB1c2goQW55LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9IFBhZ2VSZXNwb25zZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2NvdW50czogQXJyYXkuaXNBcnJheShvYmplY3Q/LmFjY291bnRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmFjY291bnRzLm1hcCgoZSkgPT4gQW55LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiBpc1NldChvYmplY3QucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA/IFBhZ2VSZXNwb25zZS5mcm9tSlNPTihvYmplY3QucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5hY2NvdW50cykge1xuICAgICAgICAgICAgb2JqLmFjY291bnRzID0gbWVzc2FnZS5hY2NvdW50cy5tYXAoKGUpID0+IGUgPyBBbnkudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5hY2NvdW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnBhZ2luYXRpb24gPSBtZXNzYWdlLnBhZ2luYXRpb25cbiAgICAgICAgICAgICAgICA/IFBhZ2VSZXNwb25zZS50b0pTT04obWVzc2FnZS5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5QWNjb3VudHNSZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLmFjY291bnRzID0gb2JqZWN0LmFjY291bnRzPy5tYXAoKGUpID0+IEFueS5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9XG4gICAgICAgICAgICBvYmplY3QucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wYWdpbmF0aW9uICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVzcG9uc2UuZnJvbVBhcnRpYWwob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVF1ZXJ5QWNjb3VudFJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHsgYWRkcmVzczogXCJcIiB9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5QWNjb3VudFJlcXVlc3QgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWRkcmVzcyAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeUFjY291bnRSZXF1ZXN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hZGRyZXNzID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRyZXNzOiBpc1NldChvYmplY3QuYWRkcmVzcykgPyBTdHJpbmcob2JqZWN0LmFkZHJlc3MpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmFkZHJlc3MgIT09IHVuZGVmaW5lZCAmJiAob2JqLmFkZHJlc3MgPSBtZXNzYWdlLmFkZHJlc3MpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlBY2NvdW50UmVxdWVzdCgpO1xuICAgICAgICBtZXNzYWdlLmFkZHJlc3MgPSBvYmplY3QuYWRkcmVzcyA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VRdWVyeUFjY291bnRSZXNwb25zZSgpIHtcbiAgICByZXR1cm4geyBhY2NvdW50OiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBRdWVyeUFjY291bnRSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5hY2NvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEFueS5lbmNvZGUobWVzc2FnZS5hY2NvdW50LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlBY2NvdW50UmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFjY291bnQgPSBBbnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNjb3VudDogaXNTZXQob2JqZWN0LmFjY291bnQpID8gQW55LmZyb21KU09OKG9iamVjdC5hY2NvdW50KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmFjY291bnQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5hY2NvdW50ID0gbWVzc2FnZS5hY2NvdW50ID8gQW55LnRvSlNPTihtZXNzYWdlLmFjY291bnQpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5QWNjb3VudFJlc3BvbnNlKCk7XG4gICAgICAgIG1lc3NhZ2UuYWNjb3VudCA9XG4gICAgICAgICAgICBvYmplY3QuYWNjb3VudCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5hY2NvdW50ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBBbnkuZnJvbVBhcnRpYWwob2JqZWN0LmFjY291bnQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVF1ZXJ5UGFyYW1zUmVxdWVzdCgpIHtcbiAgICByZXR1cm4ge307XG59XG5leHBvcnQgY29uc3QgUXVlcnlQYXJhbXNSZXF1ZXN0ID0ge1xuICAgIGVuY29kZShfLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUXVlcnlQYXJhbXNSZXF1ZXN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihfKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIHRvSlNPTihfKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwoXykge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5UGFyYW1zUmVxdWVzdCgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VRdWVyeVBhcmFtc1Jlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IHBhcmFtczogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgUXVlcnlQYXJhbXNSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wYXJhbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUGFyYW1zLmVuY29kZShtZXNzYWdlLnBhcmFtcywgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1ZXJ5UGFyYW1zUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhcmFtcyA9IFBhcmFtcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXJhbXM6IGlzU2V0KG9iamVjdC5wYXJhbXMpID8gUGFyYW1zLmZyb21KU09OKG9iamVjdC5wYXJhbXMpIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UucGFyYW1zICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucGFyYW1zID0gbWVzc2FnZS5wYXJhbXMgPyBQYXJhbXMudG9KU09OKG1lc3NhZ2UucGFyYW1zKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VRdWVyeVBhcmFtc1Jlc3BvbnNlKCk7XG4gICAgICAgIG1lc3NhZ2UucGFyYW1zID1cbiAgICAgICAgICAgIG9iamVjdC5wYXJhbXMgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucGFyYW1zICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBQYXJhbXMuZnJvbVBhcnRpYWwob2JqZWN0LnBhcmFtcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5leHBvcnQgY2xhc3MgUXVlcnlDbGllbnRJbXBsIHtcbiAgICBycGM7XG4gICAgY29uc3RydWN0b3IocnBjKSB7XG4gICAgICAgIHRoaXMucnBjID0gcnBjO1xuICAgICAgICB0aGlzLmFjY291bnRzID0gdGhpcy5hY2NvdW50cy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSB0aGlzLmFjY291bnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSB0aGlzLnBhcmFtcy5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBhY2NvdW50cyhyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoUXVlcnlBY2NvdW50c0Rlc2MsIFF1ZXJ5QWNjb3VudHNSZXF1ZXN0LmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIGFjY291bnQocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KFF1ZXJ5QWNjb3VudERlc2MsIFF1ZXJ5QWNjb3VudFJlcXVlc3QuZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgcGFyYW1zKHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShRdWVyeVBhcmFtc0Rlc2MsIFF1ZXJ5UGFyYW1zUmVxdWVzdC5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBRdWVyeURlc2MgPSB7XG4gICAgc2VydmljZU5hbWU6IFwiY29zbW9zLmF1dGgudjFiZXRhMS5RdWVyeVwiLFxufTtcbmV4cG9ydCBjb25zdCBRdWVyeUFjY291bnRzRGVzYyA9IHtcbiAgICBtZXRob2ROYW1lOiBcIkFjY291bnRzXCIsXG4gICAgc2VydmljZTogUXVlcnlEZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUXVlcnlBY2NvdW50c1JlcXVlc3QuZW5jb2RlKHRoaXMpLmZpbmlzaCgpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgcmVzcG9uc2VUeXBlOiB7XG4gICAgICAgIGRlc2VyaWFsaXplQmluYXJ5KGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uUXVlcnlBY2NvdW50c1Jlc3BvbnNlLmRlY29kZShkYXRhKSxcbiAgICAgICAgICAgICAgICB0b09iamVjdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUXVlcnlBY2NvdW50RGVzYyA9IHtcbiAgICBtZXRob2ROYW1lOiBcIkFjY291bnRcIixcbiAgICBzZXJ2aWNlOiBRdWVyeURlc2MsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiB7XG4gICAgICAgIHNlcmlhbGl6ZUJpbmFyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBRdWVyeUFjY291bnRSZXF1ZXN0LmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLlF1ZXJ5QWNjb3VudFJlc3BvbnNlLmRlY29kZShkYXRhKSxcbiAgICAgICAgICAgICAgICB0b09iamVjdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUXVlcnlQYXJhbXNEZXNjID0ge1xuICAgIG1ldGhvZE5hbWU6IFwiUGFyYW1zXCIsXG4gICAgc2VydmljZTogUXVlcnlEZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUXVlcnlQYXJhbXNSZXF1ZXN0LmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLlF1ZXJ5UGFyYW1zUmVzcG9uc2UuZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjbGFzcyBHcnBjV2ViSW1wbCB7XG4gICAgaG9zdDtcbiAgICBvcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKGhvc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgdW5hcnkobWV0aG9kRGVzYywgX3JlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7IC4uLl9yZXF1ZXN0LCAuLi5tZXRob2REZXNjLnJlcXVlc3RUeXBlIH07XG4gICAgICAgIGNvbnN0IG1heWJlQ29tYmluZWRNZXRhZGF0YSA9IG1ldGFkYXRhICYmIHRoaXMub3B0aW9ucy5tZXRhZGF0YVxuICAgICAgICAgICAgPyBuZXcgQnJvd3NlckhlYWRlcnMoe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucz8ubWV0YWRhdGEuaGVhZGVyc01hcCxcbiAgICAgICAgICAgICAgICAuLi5tZXRhZGF0YT8uaGVhZGVyc01hcCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IG1ldGFkYXRhIHx8IHRoaXMub3B0aW9ucy5tZXRhZGF0YTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGdycGMudW5hcnkobWV0aG9kRGVzYywge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgaG9zdDogdGhpcy5ob3N0LFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtYXliZUNvbWJpbmVkTWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0OiB0aGlzLm9wdGlvbnMudHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgIGRlYnVnOiB0aGlzLm9wdGlvbnMuZGVidWcsXG4gICAgICAgICAgICAgICAgb25FbmQ6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSBncnBjLkNvZGUuT0spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIuY29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5tZXRhZGF0YSA9IHJlc3BvbnNlLnRyYWlsZXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IExvbmcgZnJvbSBcImxvbmdcIjtcbmltcG9ydCAqIGFzIF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gXCJnb29nbGUucHJvdG9idWZcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VUaW1lc3RhbXAoKSB7XG4gICAgcmV0dXJuIHsgc2Vjb25kczogXCIwXCIsIG5hbm9zOiAwIH07XG59XG5leHBvcnQgY29uc3QgVGltZXN0YW1wID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnNlY29uZHMgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDY0KG1lc3NhZ2Uuc2Vjb25kcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFub3MgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UubmFub3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVGltZXN0YW1wKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWNvbmRzID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbm9zID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlY29uZHM6IGlzU2V0KG9iamVjdC5zZWNvbmRzKSA/IFN0cmluZyhvYmplY3Quc2Vjb25kcykgOiBcIjBcIixcbiAgICAgICAgICAgIG5hbm9zOiBpc1NldChvYmplY3QubmFub3MpID8gTnVtYmVyKG9iamVjdC5uYW5vcykgOiAwLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uuc2Vjb25kcyAhPT0gdW5kZWZpbmVkICYmIChvYmouc2Vjb25kcyA9IG1lc3NhZ2Uuc2Vjb25kcyk7XG4gICAgICAgIG1lc3NhZ2UubmFub3MgIT09IHVuZGVmaW5lZCAmJiAob2JqLm5hbm9zID0gTWF0aC5yb3VuZChtZXNzYWdlLm5hbm9zKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUaW1lc3RhbXAoKTtcbiAgICAgICAgbWVzc2FnZS5zZWNvbmRzID0gb2JqZWN0LnNlY29uZHMgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UubmFub3MgPSBvYmplY3QubmFub3MgPz8gMDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBsb25nVG9TdHJpbmcobG9uZykge1xuICAgIHJldHVybiBsb25nLnRvU3RyaW5nKCk7XG59XG5pZiAoX20wLnV0aWwuTG9uZyAhPT0gTG9uZykge1xuICAgIF9tMC51dGlsLkxvbmcgPSBMb25nO1xuICAgIF9tMC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lc3RhbXAuanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBMb25nIGZyb20gXCJsb25nXCI7XG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwidGVuZGVybWludC5jcnlwdG9cIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQcm9vZigpIHtcbiAgICByZXR1cm4geyB0b3RhbDogXCIwXCIsIGluZGV4OiBcIjBcIiwgbGVhZkhhc2g6IG5ldyBVaW50OEFycmF5KCksIGF1bnRzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IFByb29mID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnRvdGFsICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQ2NChtZXNzYWdlLnRvdGFsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbmRleCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDY0KG1lc3NhZ2UuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxlYWZIYXNoLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuYnl0ZXMobWVzc2FnZS5sZWFmSGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuYXVudHMpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzQpLmJ5dGVzKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUHJvb2YoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRvdGFsID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmluZGV4ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxlYWZIYXNoID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hdW50cy5wdXNoKHJlYWRlci5ieXRlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG90YWw6IGlzU2V0KG9iamVjdC50b3RhbCkgPyBTdHJpbmcob2JqZWN0LnRvdGFsKSA6IFwiMFwiLFxuICAgICAgICAgICAgaW5kZXg6IGlzU2V0KG9iamVjdC5pbmRleCkgPyBTdHJpbmcob2JqZWN0LmluZGV4KSA6IFwiMFwiLFxuICAgICAgICAgICAgbGVhZkhhc2g6IGlzU2V0KG9iamVjdC5sZWFmSGFzaClcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QubGVhZkhhc2gpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgYXVudHM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5hdW50cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5hdW50cy5tYXAoKGUpID0+IGJ5dGVzRnJvbUJhc2U2NChlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudG90YWwgIT09IHVuZGVmaW5lZCAmJiAob2JqLnRvdGFsID0gbWVzc2FnZS50b3RhbCk7XG4gICAgICAgIG1lc3NhZ2UuaW5kZXggIT09IHVuZGVmaW5lZCAmJiAob2JqLmluZGV4ID0gbWVzc2FnZS5pbmRleCk7XG4gICAgICAgIG1lc3NhZ2UubGVhZkhhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5sZWFmSGFzaCA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmxlYWZIYXNoICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmxlYWZIYXNoIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBpZiAobWVzc2FnZS5hdW50cykge1xuICAgICAgICAgICAgb2JqLmF1bnRzID0gbWVzc2FnZS5hdW50cy5tYXAoKGUpID0+IGJhc2U2NEZyb21CeXRlcyhlICE9PSB1bmRlZmluZWQgPyBlIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmF1bnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVByb29mKCk7XG4gICAgICAgIG1lc3NhZ2UudG90YWwgPSBvYmplY3QudG90YWwgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UuaW5kZXggPSBvYmplY3QuaW5kZXggPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UubGVhZkhhc2ggPSBvYmplY3QubGVhZkhhc2ggPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5hdW50cyA9IG9iamVjdC5hdW50cz8ubWFwKChlKSA9PiBlKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlVmFsdWVPcCgpIHtcbiAgICByZXR1cm4geyBrZXk6IG5ldyBVaW50OEFycmF5KCksIHByb29mOiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBWYWx1ZU9wID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmtleS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wcm9vZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBQcm9vZi5lbmNvZGUobWVzc2FnZS5wcm9vZiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVZhbHVlT3AoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHJvb2YgPSBQcm9vZi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IGlzU2V0KG9iamVjdC5rZXkpID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5rZXkpIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHByb29mOiBpc1NldChvYmplY3QucHJvb2YpID8gUHJvb2YuZnJvbUpTT04ob2JqZWN0LnByb29mKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmtleSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmtleSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmtleSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5rZXkgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UucHJvb2YgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wcm9vZiA9IG1lc3NhZ2UucHJvb2YgPyBQcm9vZi50b0pTT04obWVzc2FnZS5wcm9vZikgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVmFsdWVPcCgpO1xuICAgICAgICBtZXNzYWdlLmtleSA9IG9iamVjdC5rZXkgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5wcm9vZiA9XG4gICAgICAgICAgICBvYmplY3QucHJvb2YgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucHJvb2YgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFByb29mLmZyb21QYXJ0aWFsKG9iamVjdC5wcm9vZilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlRG9taW5vT3AoKSB7XG4gICAgcmV0dXJuIHsga2V5OiBcIlwiLCBpbnB1dDogXCJcIiwgb3V0cHV0OiBcIlwiIH07XG59XG5leHBvcnQgY29uc3QgRG9taW5vT3AgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uua2V5ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmlucHV0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5pbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uub3V0cHV0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcobWVzc2FnZS5vdXRwdXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRG9taW5vT3AoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlucHV0ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uub3V0cHV0ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IGlzU2V0KG9iamVjdC5rZXkpID8gU3RyaW5nKG9iamVjdC5rZXkpIDogXCJcIixcbiAgICAgICAgICAgIGlucHV0OiBpc1NldChvYmplY3QuaW5wdXQpID8gU3RyaW5nKG9iamVjdC5pbnB1dCkgOiBcIlwiLFxuICAgICAgICAgICAgb3V0cHV0OiBpc1NldChvYmplY3Qub3V0cHV0KSA/IFN0cmluZyhvYmplY3Qub3V0cHV0KSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5rZXkgIT09IHVuZGVmaW5lZCAmJiAob2JqLmtleSA9IG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgbWVzc2FnZS5pbnB1dCAhPT0gdW5kZWZpbmVkICYmIChvYmouaW5wdXQgPSBtZXNzYWdlLmlucHV0KTtcbiAgICAgICAgbWVzc2FnZS5vdXRwdXQgIT09IHVuZGVmaW5lZCAmJiAob2JqLm91dHB1dCA9IG1lc3NhZ2Uub3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZURvbWlub09wKCk7XG4gICAgICAgIG1lc3NhZ2Uua2V5ID0gb2JqZWN0LmtleSA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmlucHV0ID0gb2JqZWN0LmlucHV0ID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2Uub3V0cHV0ID0gb2JqZWN0Lm91dHB1dCA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQcm9vZk9wKCkge1xuICAgIHJldHVybiB7IHR5cGU6IFwiXCIsIGtleTogbmV3IFVpbnQ4QXJyYXkoKSwgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKSB9O1xufVxuZXhwb3J0IGNvbnN0IFByb29mT3AgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uua2V5Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuYnl0ZXMobWVzc2FnZS5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI2KS5ieXRlcyhtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUHJvb2ZPcCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHlwZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGF0YSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBpc1NldChvYmplY3QudHlwZSkgPyBTdHJpbmcob2JqZWN0LnR5cGUpIDogXCJcIixcbiAgICAgICAgICAgIGtleTogaXNTZXQob2JqZWN0LmtleSkgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmtleSkgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgZGF0YTogaXNTZXQob2JqZWN0LmRhdGEpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmRhdGEpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudHlwZSAhPT0gdW5kZWZpbmVkICYmIChvYmoudHlwZSA9IG1lc3NhZ2UudHlwZSk7XG4gICAgICAgIG1lc3NhZ2Uua2V5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoua2V5ID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2Uua2V5ICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmtleSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZGF0YSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UuZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVByb29mT3AoKTtcbiAgICAgICAgbWVzc2FnZS50eXBlID0gb2JqZWN0LnR5cGUgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5rZXkgPSBvYmplY3Qua2V5ID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UuZGF0YSA9IG9iamVjdC5kYXRhID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVByb29mT3BzKCkge1xuICAgIHJldHVybiB7IG9wczogW10gfTtcbn1cbmV4cG9ydCBjb25zdCBQcm9vZk9wcyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5vcHMpIHtcbiAgICAgICAgICAgIFByb29mT3AuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQcm9vZk9wcygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uub3BzLnB1c2goUHJvb2ZPcC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3BzOiBBcnJheS5pc0FycmF5KG9iamVjdD8ub3BzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0Lm9wcy5tYXAoKGUpID0+IFByb29mT3AuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5vcHMpIHtcbiAgICAgICAgICAgIG9iai5vcHMgPSBtZXNzYWdlLm9wcy5tYXAoKGUpID0+IChlID8gUHJvb2ZPcC50b0pTT04oZSkgOiB1bmRlZmluZWQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5vcHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUHJvb2ZPcHMoKTtcbiAgICAgICAgbWVzc2FnZS5vcHMgPSBvYmplY3Qub3BzPy5tYXAoKGUpID0+IFByb29mT3AuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5jb25zdCBhdG9iID0gZ2xvYmFsVGhpcy5hdG9iIHx8XG4gICAgKChiNjQpID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKSk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgY29uc3QgYmluID0gYXRvYihiNjQpO1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuY29uc3QgYnRvYSA9IGdsb2JhbFRoaXMuYnRvYSB8fFxuICAgICgoYmluKSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGJpbiwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpO1xuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGNvbnN0IGJpbiA9IFtdO1xuICAgIGFyci5mb3JFYWNoKChieXRlKSA9PiB7XG4gICAgICAgIGJpbi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBidG9hKGJpbi5qb2luKFwiXCIpKTtcbn1cbmZ1bmN0aW9uIGxvbmdUb1N0cmluZyhsb25nKSB7XG4gICAgcmV0dXJuIGxvbmcudG9TdHJpbmcoKTtcbn1cbmlmIChfbTAudXRpbC5Mb25nICE9PSBMb25nKSB7XG4gICAgX20wLnV0aWwuTG9uZyA9IExvbmc7XG4gICAgX20wLmNvbmZpZ3VyZSgpO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb29mLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcInRlbmRlcm1pbnQudmVyc2lvblwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUFwcCgpIHtcbiAgICByZXR1cm4geyBwcm90b2NvbDogXCIwXCIsIHNvZnR3YXJlOiBcIlwiIH07XG59XG5leHBvcnQgY29uc3QgQXBwID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnByb3RvY29sICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50NjQobWVzc2FnZS5wcm90b2NvbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc29mdHdhcmUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLnNvZnR3YXJlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUFwcCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHJvdG9jb2wgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNvZnR3YXJlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcm90b2NvbDogaXNTZXQob2JqZWN0LnByb3RvY29sKSA/IFN0cmluZyhvYmplY3QucHJvdG9jb2wpIDogXCIwXCIsXG4gICAgICAgICAgICBzb2Z0d2FyZTogaXNTZXQob2JqZWN0LnNvZnR3YXJlKSA/IFN0cmluZyhvYmplY3Quc29mdHdhcmUpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnByb3RvY29sICE9PSB1bmRlZmluZWQgJiYgKG9iai5wcm90b2NvbCA9IG1lc3NhZ2UucHJvdG9jb2wpO1xuICAgICAgICBtZXNzYWdlLnNvZnR3YXJlICE9PSB1bmRlZmluZWQgJiYgKG9iai5zb2Z0d2FyZSA9IG1lc3NhZ2Uuc29mdHdhcmUpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQXBwKCk7XG4gICAgICAgIG1lc3NhZ2UucHJvdG9jb2wgPSBvYmplY3QucHJvdG9jb2wgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2Uuc29mdHdhcmUgPSBvYmplY3Quc29mdHdhcmUgPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29uc2Vuc3VzKCkge1xuICAgIHJldHVybiB7IGJsb2NrOiBcIjBcIiwgYXBwOiBcIjBcIiB9O1xufVxuZXhwb3J0IGNvbnN0IENvbnNlbnN1cyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5ibG9jayAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkudWludDY0KG1lc3NhZ2UuYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmFwcCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLnVpbnQ2NChtZXNzYWdlLmFwcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb25zZW5zdXMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJsb2NrID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hcHAgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmxvY2s6IGlzU2V0KG9iamVjdC5ibG9jaykgPyBTdHJpbmcob2JqZWN0LmJsb2NrKSA6IFwiMFwiLFxuICAgICAgICAgICAgYXBwOiBpc1NldChvYmplY3QuYXBwKSA/IFN0cmluZyhvYmplY3QuYXBwKSA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYmxvY2sgIT09IHVuZGVmaW5lZCAmJiAob2JqLmJsb2NrID0gbWVzc2FnZS5ibG9jayk7XG4gICAgICAgIG1lc3NhZ2UuYXBwICE9PSB1bmRlZmluZWQgJiYgKG9iai5hcHAgPSBtZXNzYWdlLmFwcCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb25zZW5zdXMoKTtcbiAgICAgICAgbWVzc2FnZS5ibG9jayA9IG9iamVjdC5ibG9jayA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5hcHAgPSBvYmplY3QuYXBwID8/IFwiMFwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGxvbmdUb1N0cmluZyhsb25nKSB7XG4gICAgcmV0dXJuIGxvbmcudG9TdHJpbmcoKTtcbn1cbmlmIChfbTAudXRpbC5Mb25nICE9PSBMb25nKSB7XG4gICAgX20wLnV0aWwuTG9uZyA9IExvbmc7XG4gICAgX20wLmNvbmZpZ3VyZSgpO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwidGVuZGVybWludC5jcnlwdG9cIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQdWJsaWNLZXkoKSB7XG4gICAgcmV0dXJuIHsgZWQyNTUxOTogdW5kZWZpbmVkLCBzZWNwMjU2azE6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFB1YmxpY0tleSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5lZDI1NTE5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2UuZWQyNTUxOSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VjcDI1NmsxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2Uuc2VjcDI1NmsxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVB1YmxpY0tleSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZWQyNTUxOSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2VjcDI1NmsxID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVkMjU1MTk6IGlzU2V0KG9iamVjdC5lZDI1NTE5KVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5lZDI1NTE5KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2VjcDI1NmsxOiBpc1NldChvYmplY3Quc2VjcDI1NmsxKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5zZWNwMjU2azEpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5lZDI1NTE5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZWQyNTUxOSA9XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5lZDI1NTE5ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5lZDI1NTE5KVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uuc2VjcDI1NmsxICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouc2VjcDI1NmsxID1cbiAgICAgICAgICAgICAgICBtZXNzYWdlLnNlY3AyNTZrMSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2Uuc2VjcDI1NmsxKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQdWJsaWNLZXkoKTtcbiAgICAgICAgbWVzc2FnZS5lZDI1NTE5ID0gb2JqZWN0LmVkMjU1MTkgPz8gdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnNlY3AyNTZrMSA9IG9iamVjdC5zZWNwMjU2azEgPz8gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5jb25zdCBhdG9iID0gZ2xvYmFsVGhpcy5hdG9iIHx8XG4gICAgKChiNjQpID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKSk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgY29uc3QgYmluID0gYXRvYihiNjQpO1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuY29uc3QgYnRvYSA9IGdsb2JhbFRoaXMuYnRvYSB8fFxuICAgICgoYmluKSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGJpbiwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpO1xuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGNvbnN0IGJpbiA9IFtdO1xuICAgIGFyci5mb3JFYWNoKChieXRlKSA9PiB7XG4gICAgICAgIGJpbi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBidG9hKGJpbi5qb2luKFwiXCIpKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlzLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBQdWJsaWNLZXkgfSBmcm9tIFwiLi4vY3J5cHRvL2tleXNcIjtcbmltcG9ydCBMb25nIGZyb20gXCJsb25nXCI7XG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwidGVuZGVybWludC50eXBlc1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVZhbGlkYXRvclNldCgpIHtcbiAgICByZXR1cm4geyB2YWxpZGF0b3JzOiBbXSwgcHJvcG9zZXI6IHVuZGVmaW5lZCwgdG90YWxWb3RpbmdQb3dlcjogXCIwXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBWYWxpZGF0b3JTZXQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UudmFsaWRhdG9ycykge1xuICAgICAgICAgICAgVmFsaWRhdG9yLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnByb3Bvc2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFZhbGlkYXRvci5lbmNvZGUobWVzc2FnZS5wcm9wb3Nlciwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50b3RhbFZvdGluZ1Bvd2VyICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50NjQobWVzc2FnZS50b3RhbFZvdGluZ1Bvd2VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVZhbGlkYXRvclNldCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmFsaWRhdG9ycy5wdXNoKFZhbGlkYXRvci5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnByb3Bvc2VyID0gVmFsaWRhdG9yLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50b3RhbFZvdGluZ1Bvd2VyID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsaWRhdG9yczogQXJyYXkuaXNBcnJheShvYmplY3Q/LnZhbGlkYXRvcnMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QudmFsaWRhdG9ycy5tYXAoKGUpID0+IFZhbGlkYXRvci5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgcHJvcG9zZXI6IGlzU2V0KG9iamVjdC5wcm9wb3NlcilcbiAgICAgICAgICAgICAgICA/IFZhbGlkYXRvci5mcm9tSlNPTihvYmplY3QucHJvcG9zZXIpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3RhbFZvdGluZ1Bvd2VyOiBpc1NldChvYmplY3QudG90YWxWb3RpbmdQb3dlcilcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3QudG90YWxWb3RpbmdQb3dlcilcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbGlkYXRvcnMpIHtcbiAgICAgICAgICAgIG9iai52YWxpZGF0b3JzID0gbWVzc2FnZS52YWxpZGF0b3JzLm1hcCgoZSkgPT4gZSA/IFZhbGlkYXRvci50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnZhbGlkYXRvcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlLnByb3Bvc2VyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucHJvcG9zZXIgPSBtZXNzYWdlLnByb3Bvc2VyXG4gICAgICAgICAgICAgICAgPyBWYWxpZGF0b3IudG9KU09OKG1lc3NhZ2UucHJvcG9zZXIpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnRvdGFsVm90aW5nUG93ZXIgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai50b3RhbFZvdGluZ1Bvd2VyID0gbWVzc2FnZS50b3RhbFZvdGluZ1Bvd2VyKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVZhbGlkYXRvclNldCgpO1xuICAgICAgICBtZXNzYWdlLnZhbGlkYXRvcnMgPVxuICAgICAgICAgICAgb2JqZWN0LnZhbGlkYXRvcnM/Lm1hcCgoZSkgPT4gVmFsaWRhdG9yLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS5wcm9wb3NlciA9XG4gICAgICAgICAgICBvYmplY3QucHJvcG9zZXIgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucHJvcG9zZXIgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFZhbGlkYXRvci5mcm9tUGFydGlhbChvYmplY3QucHJvcG9zZXIpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UudG90YWxWb3RpbmdQb3dlciA9IG9iamVjdC50b3RhbFZvdGluZ1Bvd2VyID8/IFwiMFwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VWYWxpZGF0b3IoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkcmVzczogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgcHViS2V5OiB1bmRlZmluZWQsXG4gICAgICAgIHZvdGluZ1Bvd2VyOiBcIjBcIixcbiAgICAgICAgcHJvcG9zZXJQcmlvcml0eTogXCIwXCIsXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBWYWxpZGF0b3IgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWRkcmVzcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2UuYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucHViS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFB1YmxpY0tleS5lbmNvZGUobWVzc2FnZS5wdWJLZXksIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uudm90aW5nUG93ZXIgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5pbnQ2NChtZXNzYWdlLnZvdGluZ1Bvd2VyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wcm9wb3NlclByaW9yaXR5ICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuaW50NjQobWVzc2FnZS5wcm9wb3NlclByaW9yaXR5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVZhbGlkYXRvcigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWRkcmVzcyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHViS2V5ID0gUHVibGljS2V5LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52b3RpbmdQb3dlciA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wcm9wb3NlclByaW9yaXR5ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkcmVzczogaXNTZXQob2JqZWN0LmFkZHJlc3MpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmFkZHJlc3MpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgcHViS2V5OiBpc1NldChvYmplY3QucHViS2V5KVxuICAgICAgICAgICAgICAgID8gUHVibGljS2V5LmZyb21KU09OKG9iamVjdC5wdWJLZXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB2b3RpbmdQb3dlcjogaXNTZXQob2JqZWN0LnZvdGluZ1Bvd2VyKSA/IFN0cmluZyhvYmplY3Qudm90aW5nUG93ZXIpIDogXCIwXCIsXG4gICAgICAgICAgICBwcm9wb3NlclByaW9yaXR5OiBpc1NldChvYmplY3QucHJvcG9zZXJQcmlvcml0eSlcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3QucHJvcG9zZXJQcmlvcml0eSlcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmFkZHJlc3MgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5hZGRyZXNzICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmFkZHJlc3MgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UucHViS2V5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucHViS2V5ID0gbWVzc2FnZS5wdWJLZXlcbiAgICAgICAgICAgICAgICA/IFB1YmxpY0tleS50b0pTT04obWVzc2FnZS5wdWJLZXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnZvdGluZ1Bvd2VyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudm90aW5nUG93ZXIgPSBtZXNzYWdlLnZvdGluZ1Bvd2VyKTtcbiAgICAgICAgbWVzc2FnZS5wcm9wb3NlclByaW9yaXR5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucHJvcG9zZXJQcmlvcml0eSA9IG1lc3NhZ2UucHJvcG9zZXJQcmlvcml0eSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VWYWxpZGF0b3IoKTtcbiAgICAgICAgbWVzc2FnZS5hZGRyZXNzID0gb2JqZWN0LmFkZHJlc3MgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5wdWJLZXkgPVxuICAgICAgICAgICAgb2JqZWN0LnB1YktleSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wdWJLZXkgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFB1YmxpY0tleS5mcm9tUGFydGlhbChvYmplY3QucHViS2V5KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnZvdGluZ1Bvd2VyID0gb2JqZWN0LnZvdGluZ1Bvd2VyID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLnByb3Bvc2VyUHJpb3JpdHkgPSBvYmplY3QucHJvcG9zZXJQcmlvcml0eSA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlU2ltcGxlVmFsaWRhdG9yKCkge1xuICAgIHJldHVybiB7IHB1YktleTogdW5kZWZpbmVkLCB2b3RpbmdQb3dlcjogXCIwXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBTaW1wbGVWYWxpZGF0b3IgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UucHViS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFB1YmxpY0tleS5lbmNvZGUobWVzc2FnZS5wdWJLZXksIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uudm90aW5nUG93ZXIgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQ2NChtZXNzYWdlLnZvdGluZ1Bvd2VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpbXBsZVZhbGlkYXRvcigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHViS2V5ID0gUHVibGljS2V5LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52b3RpbmdQb3dlciA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHB1YktleTogaXNTZXQob2JqZWN0LnB1YktleSlcbiAgICAgICAgICAgICAgICA/IFB1YmxpY0tleS5mcm9tSlNPTihvYmplY3QucHViS2V5KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdm90aW5nUG93ZXI6IGlzU2V0KG9iamVjdC52b3RpbmdQb3dlcikgPyBTdHJpbmcob2JqZWN0LnZvdGluZ1Bvd2VyKSA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UucHViS2V5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucHViS2V5ID0gbWVzc2FnZS5wdWJLZXlcbiAgICAgICAgICAgICAgICA/IFB1YmxpY0tleS50b0pTT04obWVzc2FnZS5wdWJLZXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnZvdGluZ1Bvd2VyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudm90aW5nUG93ZXIgPSBtZXNzYWdlLnZvdGluZ1Bvd2VyKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpbXBsZVZhbGlkYXRvcigpO1xuICAgICAgICBtZXNzYWdlLnB1YktleSA9XG4gICAgICAgICAgICBvYmplY3QucHViS2V5ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnB1YktleSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUHVibGljS2V5LmZyb21QYXJ0aWFsKG9iamVjdC5wdWJLZXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2Uudm90aW5nUG93ZXIgPSBvYmplY3Qudm90aW5nUG93ZXIgPz8gXCIwXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xudmFyIGdsb2JhbFRoaXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB0aHJvdyBcIlVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdFwiO1xufSkoKTtcbmNvbnN0IGF0b2IgPSBnbG9iYWxUaGlzLmF0b2IgfHxcbiAgICAoKGI2NCkgPT4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiNjQsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwiYmluYXJ5XCIpKTtcbmZ1bmN0aW9uIGJ5dGVzRnJvbUJhc2U2NChiNjQpIHtcbiAgICBjb25zdCBiaW4gPSBhdG9iKGI2NCk7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYmluLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5jb25zdCBidG9hID0gZ2xvYmFsVGhpcy5idG9hIHx8XG4gICAgKChiaW4pID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYmluLCBcImJpbmFyeVwiKS50b1N0cmluZyhcImJhc2U2NFwiKSk7XG5mdW5jdGlvbiBiYXNlNjRGcm9tQnl0ZXMoYXJyKSB7XG4gICAgY29uc3QgYmluID0gW107XG4gICAgYXJyLmZvckVhY2goKGJ5dGUpID0+IHtcbiAgICAgICAgYmluLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJ0b2EoYmluLmpvaW4oXCJcIikpO1xufVxuZnVuY3Rpb24gbG9uZ1RvU3RyaW5nKGxvbmcpIHtcbiAgICByZXR1cm4gbG9uZy50b1N0cmluZygpO1xufVxuaWYgKF9tMC51dGlsLkxvbmcgIT09IExvbmcpIHtcbiAgICBfbTAudXRpbC5Mb25nID0gTG9uZztcbiAgICBfbTAuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdG9yLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBQcm9vZiB9IGZyb20gXCIuLi9jcnlwdG8vcHJvb2ZcIjtcbmltcG9ydCB7IENvbnNlbnN1cyB9IGZyb20gXCIuLi92ZXJzaW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBUaW1lc3RhbXAgfSBmcm9tIFwiLi4vLi4vZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcFwiO1xuaW1wb3J0IHsgVmFsaWRhdG9yU2V0IH0gZnJvbSBcIi4vdmFsaWRhdG9yXCI7XG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcInRlbmRlcm1pbnQudHlwZXNcIjtcbi8qKiBCbG9ja0lkRmxhZyBpbmRpY2F0ZXMgd2hpY2ggQmxjb2tJRCB0aGUgc2lnbmF0dXJlIGlzIGZvciAqL1xuZXhwb3J0IHZhciBCbG9ja0lERmxhZztcbihmdW5jdGlvbiAoQmxvY2tJREZsYWcpIHtcbiAgICBCbG9ja0lERmxhZ1tCbG9ja0lERmxhZ1tcIkJMT0NLX0lEX0ZMQUdfVU5LTk9XTlwiXSA9IDBdID0gXCJCTE9DS19JRF9GTEFHX1VOS05PV05cIjtcbiAgICBCbG9ja0lERmxhZ1tCbG9ja0lERmxhZ1tcIkJMT0NLX0lEX0ZMQUdfQUJTRU5UXCJdID0gMV0gPSBcIkJMT0NLX0lEX0ZMQUdfQUJTRU5UXCI7XG4gICAgQmxvY2tJREZsYWdbQmxvY2tJREZsYWdbXCJCTE9DS19JRF9GTEFHX0NPTU1JVFwiXSA9IDJdID0gXCJCTE9DS19JRF9GTEFHX0NPTU1JVFwiO1xuICAgIEJsb2NrSURGbGFnW0Jsb2NrSURGbGFnW1wiQkxPQ0tfSURfRkxBR19OSUxcIl0gPSAzXSA9IFwiQkxPQ0tfSURfRkxBR19OSUxcIjtcbiAgICBCbG9ja0lERmxhZ1tCbG9ja0lERmxhZ1tcIlVOUkVDT0dOSVpFRFwiXSA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShCbG9ja0lERmxhZyB8fCAoQmxvY2tJREZsYWcgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrSURGbGFnRnJvbUpTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIFwiQkxPQ0tfSURfRkxBR19VTktOT1dOXCI6XG4gICAgICAgICAgICByZXR1cm4gQmxvY2tJREZsYWcuQkxPQ0tfSURfRkxBR19VTktOT1dOO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgXCJCTE9DS19JRF9GTEFHX0FCU0VOVFwiOlxuICAgICAgICAgICAgcmV0dXJuIEJsb2NrSURGbGFnLkJMT0NLX0lEX0ZMQUdfQUJTRU5UO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgIGNhc2UgXCJCTE9DS19JRF9GTEFHX0NPTU1JVFwiOlxuICAgICAgICAgICAgcmV0dXJuIEJsb2NrSURGbGFnLkJMT0NLX0lEX0ZMQUdfQ09NTUlUO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgIGNhc2UgXCJCTE9DS19JRF9GTEFHX05JTFwiOlxuICAgICAgICAgICAgcmV0dXJuIEJsb2NrSURGbGFnLkJMT0NLX0lEX0ZMQUdfTklMO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICBjYXNlIFwiVU5SRUNPR05JWkVEXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gQmxvY2tJREZsYWcuVU5SRUNPR05JWkVEO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBibG9ja0lERmxhZ1RvSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIEJsb2NrSURGbGFnLkJMT0NLX0lEX0ZMQUdfVU5LTk9XTjpcbiAgICAgICAgICAgIHJldHVybiBcIkJMT0NLX0lEX0ZMQUdfVU5LTk9XTlwiO1xuICAgICAgICBjYXNlIEJsb2NrSURGbGFnLkJMT0NLX0lEX0ZMQUdfQUJTRU5UOlxuICAgICAgICAgICAgcmV0dXJuIFwiQkxPQ0tfSURfRkxBR19BQlNFTlRcIjtcbiAgICAgICAgY2FzZSBCbG9ja0lERmxhZy5CTE9DS19JRF9GTEFHX0NPTU1JVDpcbiAgICAgICAgICAgIHJldHVybiBcIkJMT0NLX0lEX0ZMQUdfQ09NTUlUXCI7XG4gICAgICAgIGNhc2UgQmxvY2tJREZsYWcuQkxPQ0tfSURfRkxBR19OSUw6XG4gICAgICAgICAgICByZXR1cm4gXCJCTE9DS19JRF9GTEFHX05JTFwiO1xuICAgICAgICBjYXNlIEJsb2NrSURGbGFnLlVOUkVDT0dOSVpFRDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICAgIH1cbn1cbi8qKiBTaWduZWRNc2dUeXBlIGlzIGEgdHlwZSBvZiBzaWduZWQgbWVzc2FnZSBpbiB0aGUgY29uc2Vuc3VzLiAqL1xuZXhwb3J0IHZhciBTaWduZWRNc2dUeXBlO1xuKGZ1bmN0aW9uIChTaWduZWRNc2dUeXBlKSB7XG4gICAgU2lnbmVkTXNnVHlwZVtTaWduZWRNc2dUeXBlW1wiU0lHTkVEX01TR19UWVBFX1VOS05PV05cIl0gPSAwXSA9IFwiU0lHTkVEX01TR19UWVBFX1VOS05PV05cIjtcbiAgICAvKiogU0lHTkVEX01TR19UWVBFX1BSRVZPVEUgLSBWb3RlcyAqL1xuICAgIFNpZ25lZE1zZ1R5cGVbU2lnbmVkTXNnVHlwZVtcIlNJR05FRF9NU0dfVFlQRV9QUkVWT1RFXCJdID0gMV0gPSBcIlNJR05FRF9NU0dfVFlQRV9QUkVWT1RFXCI7XG4gICAgU2lnbmVkTXNnVHlwZVtTaWduZWRNc2dUeXBlW1wiU0lHTkVEX01TR19UWVBFX1BSRUNPTU1JVFwiXSA9IDJdID0gXCJTSUdORURfTVNHX1RZUEVfUFJFQ09NTUlUXCI7XG4gICAgLyoqIFNJR05FRF9NU0dfVFlQRV9QUk9QT1NBTCAtIFByb3Bvc2FscyAqL1xuICAgIFNpZ25lZE1zZ1R5cGVbU2lnbmVkTXNnVHlwZVtcIlNJR05FRF9NU0dfVFlQRV9QUk9QT1NBTFwiXSA9IDMyXSA9IFwiU0lHTkVEX01TR19UWVBFX1BST1BPU0FMXCI7XG4gICAgU2lnbmVkTXNnVHlwZVtTaWduZWRNc2dUeXBlW1wiVU5SRUNPR05JWkVEXCJdID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKFNpZ25lZE1zZ1R5cGUgfHwgKFNpZ25lZE1zZ1R5cGUgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIHNpZ25lZE1zZ1R5cGVGcm9tSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgXCJTSUdORURfTVNHX1RZUEVfVU5LTk9XTlwiOlxuICAgICAgICAgICAgcmV0dXJuIFNpZ25lZE1zZ1R5cGUuU0lHTkVEX01TR19UWVBFX1VOS05PV047XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSBcIlNJR05FRF9NU0dfVFlQRV9QUkVWT1RFXCI6XG4gICAgICAgICAgICByZXR1cm4gU2lnbmVkTXNnVHlwZS5TSUdORURfTVNHX1RZUEVfUFJFVk9URTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICBjYXNlIFwiU0lHTkVEX01TR19UWVBFX1BSRUNPTU1JVFwiOlxuICAgICAgICAgICAgcmV0dXJuIFNpZ25lZE1zZ1R5cGUuU0lHTkVEX01TR19UWVBFX1BSRUNPTU1JVDtcbiAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgY2FzZSBcIlNJR05FRF9NU0dfVFlQRV9QUk9QT1NBTFwiOlxuICAgICAgICAgICAgcmV0dXJuIFNpZ25lZE1zZ1R5cGUuU0lHTkVEX01TR19UWVBFX1BST1BPU0FMO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICBjYXNlIFwiVU5SRUNPR05JWkVEXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gU2lnbmVkTXNnVHlwZS5VTlJFQ09HTklaRUQ7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNpZ25lZE1zZ1R5cGVUb0pTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSBTaWduZWRNc2dUeXBlLlNJR05FRF9NU0dfVFlQRV9VTktOT1dOOlxuICAgICAgICAgICAgcmV0dXJuIFwiU0lHTkVEX01TR19UWVBFX1VOS05PV05cIjtcbiAgICAgICAgY2FzZSBTaWduZWRNc2dUeXBlLlNJR05FRF9NU0dfVFlQRV9QUkVWT1RFOlxuICAgICAgICAgICAgcmV0dXJuIFwiU0lHTkVEX01TR19UWVBFX1BSRVZPVEVcIjtcbiAgICAgICAgY2FzZSBTaWduZWRNc2dUeXBlLlNJR05FRF9NU0dfVFlQRV9QUkVDT01NSVQ6XG4gICAgICAgICAgICByZXR1cm4gXCJTSUdORURfTVNHX1RZUEVfUFJFQ09NTUlUXCI7XG4gICAgICAgIGNhc2UgU2lnbmVkTXNnVHlwZS5TSUdORURfTVNHX1RZUEVfUFJPUE9TQUw6XG4gICAgICAgICAgICByZXR1cm4gXCJTSUdORURfTVNHX1RZUEVfUFJPUE9TQUxcIjtcbiAgICAgICAgY2FzZSBTaWduZWRNc2dUeXBlLlVOUkVDT0dOSVpFRDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQYXJ0U2V0SGVhZGVyKCkge1xuICAgIHJldHVybiB7IHRvdGFsOiAwLCBoYXNoOiBuZXcgVWludDhBcnJheSgpIH07XG59XG5leHBvcnQgY29uc3QgUGFydFNldEhlYWRlciA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS50b3RhbCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50MzIobWVzc2FnZS50b3RhbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaGFzaC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2UuaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQYXJ0U2V0SGVhZGVyKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50b3RhbCA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhhc2ggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG90YWw6IGlzU2V0KG9iamVjdC50b3RhbCkgPyBOdW1iZXIob2JqZWN0LnRvdGFsKSA6IDAsXG4gICAgICAgICAgICBoYXNoOiBpc1NldChvYmplY3QuaGFzaClcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuaGFzaClcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50b3RhbCAhPT0gdW5kZWZpbmVkICYmIChvYmoudG90YWwgPSBNYXRoLnJvdW5kKG1lc3NhZ2UudG90YWwpKTtcbiAgICAgICAgbWVzc2FnZS5oYXNoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouaGFzaCA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmhhc2ggIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UuaGFzaCA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBhcnRTZXRIZWFkZXIoKTtcbiAgICAgICAgbWVzc2FnZS50b3RhbCA9IG9iamVjdC50b3RhbCA/PyAwO1xuICAgICAgICBtZXNzYWdlLmhhc2ggPSBvYmplY3QuaGFzaCA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQYXJ0KCkge1xuICAgIHJldHVybiB7IGluZGV4OiAwLCBieXRlczogbmV3IFVpbnQ4QXJyYXkoKSwgcHJvb2Y6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFBhcnQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkudWludDMyKG1lc3NhZ2UuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJ5dGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuYnl0ZXMobWVzc2FnZS5ieXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucHJvb2YgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUHJvb2YuZW5jb2RlKG1lc3NhZ2UucHJvb2YsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQYXJ0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbmRleCA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJ5dGVzID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wcm9vZiA9IFByb29mLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGV4OiBpc1NldChvYmplY3QuaW5kZXgpID8gTnVtYmVyKG9iamVjdC5pbmRleCkgOiAwLFxuICAgICAgICAgICAgYnl0ZXM6IGlzU2V0KG9iamVjdC5ieXRlcylcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuYnl0ZXMpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgcHJvb2Y6IGlzU2V0KG9iamVjdC5wcm9vZikgPyBQcm9vZi5mcm9tSlNPTihvYmplY3QucHJvb2YpIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuaW5kZXggIT09IHVuZGVmaW5lZCAmJiAob2JqLmluZGV4ID0gTWF0aC5yb3VuZChtZXNzYWdlLmluZGV4KSk7XG4gICAgICAgIG1lc3NhZ2UuYnl0ZXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5ieXRlcyA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmJ5dGVzICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmJ5dGVzIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnByb29mICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucHJvb2YgPSBtZXNzYWdlLnByb29mID8gUHJvb2YudG9KU09OKG1lc3NhZ2UucHJvb2YpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBhcnQoKTtcbiAgICAgICAgbWVzc2FnZS5pbmRleCA9IG9iamVjdC5pbmRleCA/PyAwO1xuICAgICAgICBtZXNzYWdlLmJ5dGVzID0gb2JqZWN0LmJ5dGVzID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UucHJvb2YgPVxuICAgICAgICAgICAgb2JqZWN0LnByb29mICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnByb29mICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBQcm9vZi5mcm9tUGFydGlhbChvYmplY3QucHJvb2YpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUJsb2NrSUQoKSB7XG4gICAgcmV0dXJuIHsgaGFzaDogbmV3IFVpbnQ4QXJyYXkoKSwgcGFydFNldEhlYWRlcjogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgQmxvY2tJRCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5oYXNoLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5oYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wYXJ0U2V0SGVhZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFBhcnRTZXRIZWFkZXIuZW5jb2RlKG1lc3NhZ2UucGFydFNldEhlYWRlciwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUJsb2NrSUQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhhc2ggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhcnRTZXRIZWFkZXIgPSBQYXJ0U2V0SGVhZGVyLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhhc2g6IGlzU2V0KG9iamVjdC5oYXNoKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5oYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHBhcnRTZXRIZWFkZXI6IGlzU2V0KG9iamVjdC5wYXJ0U2V0SGVhZGVyKVxuICAgICAgICAgICAgICAgID8gUGFydFNldEhlYWRlci5mcm9tSlNPTihvYmplY3QucGFydFNldEhlYWRlcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmhhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5oYXNoID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuaGFzaCAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5oYXNoIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnBhcnRTZXRIZWFkZXIgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wYXJ0U2V0SGVhZGVyID0gbWVzc2FnZS5wYXJ0U2V0SGVhZGVyXG4gICAgICAgICAgICAgICAgPyBQYXJ0U2V0SGVhZGVyLnRvSlNPTihtZXNzYWdlLnBhcnRTZXRIZWFkZXIpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQmxvY2tJRCgpO1xuICAgICAgICBtZXNzYWdlLmhhc2ggPSBvYmplY3QuaGFzaCA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnBhcnRTZXRIZWFkZXIgPVxuICAgICAgICAgICAgb2JqZWN0LnBhcnRTZXRIZWFkZXIgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucGFydFNldEhlYWRlciAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUGFydFNldEhlYWRlci5mcm9tUGFydGlhbChvYmplY3QucGFydFNldEhlYWRlcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlSGVhZGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHZlcnNpb246IHVuZGVmaW5lZCxcbiAgICAgICAgY2hhaW5JZDogXCJcIixcbiAgICAgICAgaGVpZ2h0OiBcIjBcIixcbiAgICAgICAgdGltZTogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0QmxvY2tJZDogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0Q29tbWl0SGFzaDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgZGF0YUhhc2g6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIHZhbGlkYXRvcnNIYXNoOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBuZXh0VmFsaWRhdG9yc0hhc2g6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIGNvbnNlbnN1c0hhc2g6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIGFwcEhhc2g6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIGxhc3RSZXN1bHRzSGFzaDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgZXZpZGVuY2VIYXNoOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBwcm9wb3NlckFkZHJlc3M6IG5ldyBVaW50OEFycmF5KCksXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBIZWFkZXIgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudmVyc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb25zZW5zdXMuZW5jb2RlKG1lc3NhZ2UudmVyc2lvbiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jaGFpbklkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5jaGFpbklkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5oZWlnaHQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5pbnQ2NChtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBUaW1lc3RhbXAuZW5jb2RlKG1lc3NhZ2UudGltZSwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sYXN0QmxvY2tJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBCbG9ja0lELmVuY29kZShtZXNzYWdlLmxhc3RCbG9ja0lkLCB3cml0ZXIudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxhc3RDb21taXRIYXNoLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig1MCkuYnl0ZXMobWVzc2FnZS5sYXN0Q29tbWl0SGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGF0YUhhc2gubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDU4KS5ieXRlcyhtZXNzYWdlLmRhdGFIYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52YWxpZGF0b3JzSGFzaC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNjYpLmJ5dGVzKG1lc3NhZ2UudmFsaWRhdG9yc0hhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm5leHRWYWxpZGF0b3JzSGFzaC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNzQpLmJ5dGVzKG1lc3NhZ2UubmV4dFZhbGlkYXRvcnNIYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb25zZW5zdXNIYXNoLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4MikuYnl0ZXMobWVzc2FnZS5jb25zZW5zdXNIYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hcHBIYXNoLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig5MCkuYnl0ZXMobWVzc2FnZS5hcHBIYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sYXN0UmVzdWx0c0hhc2gubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDk4KS5ieXRlcyhtZXNzYWdlLmxhc3RSZXN1bHRzSGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXZpZGVuY2VIYXNoLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMDYpLmJ5dGVzKG1lc3NhZ2UuZXZpZGVuY2VIYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wcm9wb3NlckFkZHJlc3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDExNCkuYnl0ZXMobWVzc2FnZS5wcm9wb3NlckFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlSGVhZGVyKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52ZXJzaW9uID0gQ29uc2Vuc3VzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jaGFpbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpbWUgPSBUaW1lc3RhbXAuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxhc3RCbG9ja0lkID0gQmxvY2tJRC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGFzdENvbW1pdEhhc2ggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRhdGFIYXNoID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JzSGFzaCA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmV4dFZhbGlkYXRvcnNIYXNoID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29uc2Vuc3VzSGFzaCA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFwcEhhc2ggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5sYXN0UmVzdWx0c0hhc2ggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmlkZW5jZUhhc2ggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wcm9wb3NlckFkZHJlc3MgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyc2lvbjogaXNTZXQob2JqZWN0LnZlcnNpb24pXG4gICAgICAgICAgICAgICAgPyBDb25zZW5zdXMuZnJvbUpTT04ob2JqZWN0LnZlcnNpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjaGFpbklkOiBpc1NldChvYmplY3QuY2hhaW5JZCkgPyBTdHJpbmcob2JqZWN0LmNoYWluSWQpIDogXCJcIixcbiAgICAgICAgICAgIGhlaWdodDogaXNTZXQob2JqZWN0LmhlaWdodCkgPyBTdHJpbmcob2JqZWN0LmhlaWdodCkgOiBcIjBcIixcbiAgICAgICAgICAgIHRpbWU6IGlzU2V0KG9iamVjdC50aW1lKSA/IGZyb21Kc29uVGltZXN0YW1wKG9iamVjdC50aW1lKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxhc3RCbG9ja0lkOiBpc1NldChvYmplY3QubGFzdEJsb2NrSWQpXG4gICAgICAgICAgICAgICAgPyBCbG9ja0lELmZyb21KU09OKG9iamVjdC5sYXN0QmxvY2tJZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxhc3RDb21taXRIYXNoOiBpc1NldChvYmplY3QubGFzdENvbW1pdEhhc2gpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0Lmxhc3RDb21taXRIYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIGRhdGFIYXNoOiBpc1NldChvYmplY3QuZGF0YUhhc2gpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmRhdGFIYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHZhbGlkYXRvcnNIYXNoOiBpc1NldChvYmplY3QudmFsaWRhdG9yc0hhc2gpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnZhbGlkYXRvcnNIYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIG5leHRWYWxpZGF0b3JzSGFzaDogaXNTZXQob2JqZWN0Lm5leHRWYWxpZGF0b3JzSGFzaClcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QubmV4dFZhbGlkYXRvcnNIYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIGNvbnNlbnN1c0hhc2g6IGlzU2V0KG9iamVjdC5jb25zZW5zdXNIYXNoKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5jb25zZW5zdXNIYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIGFwcEhhc2g6IGlzU2V0KG9iamVjdC5hcHBIYXNoKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5hcHBIYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIGxhc3RSZXN1bHRzSGFzaDogaXNTZXQob2JqZWN0Lmxhc3RSZXN1bHRzSGFzaClcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QubGFzdFJlc3VsdHNIYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIGV2aWRlbmNlSGFzaDogaXNTZXQob2JqZWN0LmV2aWRlbmNlSGFzaClcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuZXZpZGVuY2VIYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHByb3Bvc2VyQWRkcmVzczogaXNTZXQob2JqZWN0LnByb3Bvc2VyQWRkcmVzcylcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QucHJvcG9zZXJBZGRyZXNzKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnZlcnNpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai52ZXJzaW9uID0gbWVzc2FnZS52ZXJzaW9uXG4gICAgICAgICAgICAgICAgPyBDb25zZW5zdXMudG9KU09OKG1lc3NhZ2UudmVyc2lvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuY2hhaW5JZCAhPT0gdW5kZWZpbmVkICYmIChvYmouY2hhaW5JZCA9IG1lc3NhZ2UuY2hhaW5JZCk7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5oZWlnaHQgPSBtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIG1lc3NhZ2UudGltZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnRpbWUgPSBmcm9tVGltZXN0YW1wKG1lc3NhZ2UudGltZSkudG9JU09TdHJpbmcoKSk7XG4gICAgICAgIG1lc3NhZ2UubGFzdEJsb2NrSWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5sYXN0QmxvY2tJZCA9IG1lc3NhZ2UubGFzdEJsb2NrSWRcbiAgICAgICAgICAgICAgICA/IEJsb2NrSUQudG9KU09OKG1lc3NhZ2UubGFzdEJsb2NrSWQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmxhc3RDb21taXRIYXNoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubGFzdENvbW1pdEhhc2ggPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5sYXN0Q29tbWl0SGFzaCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBtZXNzYWdlLmxhc3RDb21taXRIYXNoXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UuZGF0YUhhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5kYXRhSGFzaCA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmRhdGFIYXNoICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmRhdGFIYXNoIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnZhbGlkYXRvcnNIYXNoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudmFsaWRhdG9yc0hhc2ggPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS52YWxpZGF0b3JzSGFzaCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBtZXNzYWdlLnZhbGlkYXRvcnNIYXNoXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UubmV4dFZhbGlkYXRvcnNIYXNoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubmV4dFZhbGlkYXRvcnNIYXNoID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UubmV4dFZhbGlkYXRvcnNIYXNoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG1lc3NhZ2UubmV4dFZhbGlkYXRvcnNIYXNoXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UuY29uc2Vuc3VzSGFzaCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmNvbnNlbnN1c0hhc2ggPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5jb25zZW5zdXNIYXNoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG1lc3NhZ2UuY29uc2Vuc3VzSGFzaFxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLmFwcEhhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5hcHBIYXNoID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuYXBwSGFzaCAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5hcHBIYXNoIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLmxhc3RSZXN1bHRzSGFzaCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmxhc3RSZXN1bHRzSGFzaCA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmxhc3RSZXN1bHRzSGFzaCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBtZXNzYWdlLmxhc3RSZXN1bHRzSGFzaFxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLmV2aWRlbmNlSGFzaCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmV2aWRlbmNlSGFzaCA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmV2aWRlbmNlSGFzaCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBtZXNzYWdlLmV2aWRlbmNlSGFzaFxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnByb3Bvc2VyQWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnByb3Bvc2VyQWRkcmVzcyA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLnByb3Bvc2VyQWRkcmVzcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBtZXNzYWdlLnByb3Bvc2VyQWRkcmVzc1xuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlSGVhZGVyKCk7XG4gICAgICAgIG1lc3NhZ2UudmVyc2lvbiA9XG4gICAgICAgICAgICBvYmplY3QudmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC52ZXJzaW9uICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBDb25zZW5zdXMuZnJvbVBhcnRpYWwob2JqZWN0LnZlcnNpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuY2hhaW5JZCA9IG9iamVjdC5jaGFpbklkID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gb2JqZWN0LmhlaWdodCA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS50aW1lID1cbiAgICAgICAgICAgIG9iamVjdC50aW1lICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnRpbWUgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFRpbWVzdGFtcC5mcm9tUGFydGlhbChvYmplY3QudGltZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5sYXN0QmxvY2tJZCA9XG4gICAgICAgICAgICBvYmplY3QubGFzdEJsb2NrSWQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QubGFzdEJsb2NrSWQgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IEJsb2NrSUQuZnJvbVBhcnRpYWwob2JqZWN0Lmxhc3RCbG9ja0lkKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmxhc3RDb21taXRIYXNoID0gb2JqZWN0Lmxhc3RDb21taXRIYXNoID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UuZGF0YUhhc2ggPSBvYmplY3QuZGF0YUhhc2ggPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JzSGFzaCA9IG9iamVjdC52YWxpZGF0b3JzSGFzaCA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLm5leHRWYWxpZGF0b3JzSGFzaCA9IG9iamVjdC5uZXh0VmFsaWRhdG9yc0hhc2ggPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5jb25zZW5zdXNIYXNoID0gb2JqZWN0LmNvbnNlbnN1c0hhc2ggPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5hcHBIYXNoID0gb2JqZWN0LmFwcEhhc2ggPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5sYXN0UmVzdWx0c0hhc2ggPSBvYmplY3QubGFzdFJlc3VsdHNIYXNoID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UuZXZpZGVuY2VIYXNoID0gb2JqZWN0LmV2aWRlbmNlSGFzaCA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnByb3Bvc2VyQWRkcmVzcyA9IG9iamVjdC5wcm9wb3NlckFkZHJlc3MgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlRGF0YSgpIHtcbiAgICByZXR1cm4geyB0eHM6IFtdIH07XG59XG5leHBvcnQgY29uc3QgRGF0YSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS50eHMpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRGF0YSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHhzLnB1c2gocmVhZGVyLmJ5dGVzKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eHM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py50eHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QudHhzLm1hcCgoZSkgPT4gYnl0ZXNGcm9tQmFzZTY0KGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2UudHhzKSB7XG4gICAgICAgICAgICBvYmoudHhzID0gbWVzc2FnZS50eHMubWFwKChlKSA9PiBiYXNlNjRGcm9tQnl0ZXMoZSAhPT0gdW5kZWZpbmVkID8gZSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai50eHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRGF0YSgpO1xuICAgICAgICBtZXNzYWdlLnR4cyA9IG9iamVjdC50eHM/Lm1hcCgoZSkgPT4gZSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVZvdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogMCxcbiAgICAgICAgaGVpZ2h0OiBcIjBcIixcbiAgICAgICAgcm91bmQ6IDAsXG4gICAgICAgIGJsb2NrSWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgdGltZXN0YW1wOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbGlkYXRvckFkZHJlc3M6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIHZhbGlkYXRvckluZGV4OiAwLFxuICAgICAgICBzaWduYXR1cmU6IG5ldyBVaW50OEFycmF5KCksXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBWb3RlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5oZWlnaHQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQ2NChtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uucm91bmQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDMyKG1lc3NhZ2Uucm91bmQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJsb2NrSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQmxvY2tJRC5lbmNvZGUobWVzc2FnZS5ibG9ja0lkLCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBUaW1lc3RhbXAuZW5jb2RlKG1lc3NhZ2UudGltZXN0YW1wLCB3cml0ZXIudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDUwKS5ieXRlcyhtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbGlkYXRvckluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDU2KS5pbnQzMihtZXNzYWdlLnZhbGlkYXRvckluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zaWduYXR1cmUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDY2KS5ieXRlcyhtZXNzYWdlLnNpZ25hdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VWb3RlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50eXBlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5oZWlnaHQgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uucm91bmQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJsb2NrSWQgPSBCbG9ja0lELmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50aW1lc3RhbXAgPSBUaW1lc3RhbXAuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbGlkYXRvckluZGV4ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zaWduYXR1cmUgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogaXNTZXQob2JqZWN0LnR5cGUpID8gc2lnbmVkTXNnVHlwZUZyb21KU09OKG9iamVjdC50eXBlKSA6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IGlzU2V0KG9iamVjdC5oZWlnaHQpID8gU3RyaW5nKG9iamVjdC5oZWlnaHQpIDogXCIwXCIsXG4gICAgICAgICAgICByb3VuZDogaXNTZXQob2JqZWN0LnJvdW5kKSA/IE51bWJlcihvYmplY3Qucm91bmQpIDogMCxcbiAgICAgICAgICAgIGJsb2NrSWQ6IGlzU2V0KG9iamVjdC5ibG9ja0lkKVxuICAgICAgICAgICAgICAgID8gQmxvY2tJRC5mcm9tSlNPTihvYmplY3QuYmxvY2tJZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogaXNTZXQob2JqZWN0LnRpbWVzdGFtcClcbiAgICAgICAgICAgICAgICA/IGZyb21Kc29uVGltZXN0YW1wKG9iamVjdC50aW1lc3RhbXApXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxpZGF0b3JBZGRyZXNzOiBpc1NldChvYmplY3QudmFsaWRhdG9yQWRkcmVzcylcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QudmFsaWRhdG9yQWRkcmVzcylcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgICB2YWxpZGF0b3JJbmRleDogaXNTZXQob2JqZWN0LnZhbGlkYXRvckluZGV4KVxuICAgICAgICAgICAgICAgID8gTnVtYmVyKG9iamVjdC52YWxpZGF0b3JJbmRleClcbiAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgICAgICBzaWduYXR1cmU6IGlzU2V0KG9iamVjdC5zaWduYXR1cmUpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnNpZ25hdHVyZSlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50eXBlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudHlwZSA9IHNpZ25lZE1zZ1R5cGVUb0pTT04obWVzc2FnZS50eXBlKSk7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5oZWlnaHQgPSBtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIG1lc3NhZ2Uucm91bmQgIT09IHVuZGVmaW5lZCAmJiAob2JqLnJvdW5kID0gTWF0aC5yb3VuZChtZXNzYWdlLnJvdW5kKSk7XG4gICAgICAgIG1lc3NhZ2UuYmxvY2tJZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmJsb2NrSWQgPSBtZXNzYWdlLmJsb2NrSWRcbiAgICAgICAgICAgICAgICA/IEJsb2NrSUQudG9KU09OKG1lc3NhZ2UuYmxvY2tJZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UudGltZXN0YW1wICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudGltZXN0YW1wID0gZnJvbVRpbWVzdGFtcChtZXNzYWdlLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSk7XG4gICAgICAgIG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnZhbGlkYXRvckFkZHJlc3MgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzc1xuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnZhbGlkYXRvckluZGV4ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudmFsaWRhdG9ySW5kZXggPSBNYXRoLnJvdW5kKG1lc3NhZ2UudmFsaWRhdG9ySW5kZXgpKTtcbiAgICAgICAgbWVzc2FnZS5zaWduYXR1cmUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5zaWduYXR1cmUgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5zaWduYXR1cmUgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2Uuc2lnbmF0dXJlIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVm90ZSgpO1xuICAgICAgICBtZXNzYWdlLnR5cGUgPSBvYmplY3QudHlwZSA/PyAwO1xuICAgICAgICBtZXNzYWdlLmhlaWdodCA9IG9iamVjdC5oZWlnaHQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2Uucm91bmQgPSBvYmplY3Qucm91bmQgPz8gMDtcbiAgICAgICAgbWVzc2FnZS5ibG9ja0lkID1cbiAgICAgICAgICAgIG9iamVjdC5ibG9ja0lkICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmJsb2NrSWQgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IEJsb2NrSUQuZnJvbVBhcnRpYWwob2JqZWN0LmJsb2NrSWQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UudGltZXN0YW1wID1cbiAgICAgICAgICAgIG9iamVjdC50aW1lc3RhbXAgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudGltZXN0YW1wICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBUaW1lc3RhbXAuZnJvbVBhcnRpYWwob2JqZWN0LnRpbWVzdGFtcClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzID0gb2JqZWN0LnZhbGlkYXRvckFkZHJlc3MgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JJbmRleCA9IG9iamVjdC52YWxpZGF0b3JJbmRleCA/PyAwO1xuICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZSA9IG9iamVjdC5zaWduYXR1cmUgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29tbWl0KCkge1xuICAgIHJldHVybiB7IGhlaWdodDogXCIwXCIsIHJvdW5kOiAwLCBibG9ja0lkOiB1bmRlZmluZWQsIHNpZ25hdHVyZXM6IFtdIH07XG59XG5leHBvcnQgY29uc3QgQ29tbWl0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmhlaWdodCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50NjQobWVzc2FnZS5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnJvdW5kICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLnJvdW5kKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ibG9ja0lkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEJsb2NrSUQuZW5jb2RlKG1lc3NhZ2UuYmxvY2tJZCwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zaWduYXR1cmVzKSB7XG4gICAgICAgICAgICBDb21taXRTaWcuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21taXQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhlaWdodCA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yb3VuZCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmxvY2tJZCA9IEJsb2NrSUQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZXMucHVzaChDb21taXRTaWcuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhlaWdodDogaXNTZXQob2JqZWN0LmhlaWdodCkgPyBTdHJpbmcob2JqZWN0LmhlaWdodCkgOiBcIjBcIixcbiAgICAgICAgICAgIHJvdW5kOiBpc1NldChvYmplY3Qucm91bmQpID8gTnVtYmVyKG9iamVjdC5yb3VuZCkgOiAwLFxuICAgICAgICAgICAgYmxvY2tJZDogaXNTZXQob2JqZWN0LmJsb2NrSWQpXG4gICAgICAgICAgICAgICAgPyBCbG9ja0lELmZyb21KU09OKG9iamVjdC5ibG9ja0lkKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2lnbmF0dXJlczogQXJyYXkuaXNBcnJheShvYmplY3Q/LnNpZ25hdHVyZXMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3Quc2lnbmF0dXJlcy5tYXAoKGUpID0+IENvbW1pdFNpZy5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5oZWlnaHQgPSBtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIG1lc3NhZ2Uucm91bmQgIT09IHVuZGVmaW5lZCAmJiAob2JqLnJvdW5kID0gTWF0aC5yb3VuZChtZXNzYWdlLnJvdW5kKSk7XG4gICAgICAgIG1lc3NhZ2UuYmxvY2tJZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmJsb2NrSWQgPSBtZXNzYWdlLmJsb2NrSWRcbiAgICAgICAgICAgICAgICA/IEJsb2NrSUQudG9KU09OKG1lc3NhZ2UuYmxvY2tJZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ25hdHVyZXMpIHtcbiAgICAgICAgICAgIG9iai5zaWduYXR1cmVzID0gbWVzc2FnZS5zaWduYXR1cmVzLm1hcCgoZSkgPT4gZSA/IENvbW1pdFNpZy50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnNpZ25hdHVyZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tbWl0KCk7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gb2JqZWN0LmhlaWdodCA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5yb3VuZCA9IG9iamVjdC5yb3VuZCA/PyAwO1xuICAgICAgICBtZXNzYWdlLmJsb2NrSWQgPVxuICAgICAgICAgICAgb2JqZWN0LmJsb2NrSWQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYmxvY2tJZCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gQmxvY2tJRC5mcm9tUGFydGlhbChvYmplY3QuYmxvY2tJZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zaWduYXR1cmVzID1cbiAgICAgICAgICAgIG9iamVjdC5zaWduYXR1cmVzPy5tYXAoKGUpID0+IENvbW1pdFNpZy5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbW1pdFNpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBibG9ja0lkRmxhZzogMCxcbiAgICAgICAgdmFsaWRhdG9yQWRkcmVzczogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgdGltZXN0YW1wOiB1bmRlZmluZWQsXG4gICAgICAgIHNpZ25hdHVyZTogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IENvbW1pdFNpZyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5ibG9ja0lkRmxhZyAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLmJsb2NrSWRGbGFnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuYnl0ZXMobWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50aW1lc3RhbXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVGltZXN0YW1wLmVuY29kZShtZXNzYWdlLnRpbWVzdGFtcCwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zaWduYXR1cmUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM0KS5ieXRlcyhtZXNzYWdlLnNpZ25hdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21taXRTaWcoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJsb2NrSWRGbGFnID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50aW1lc3RhbXAgPSBUaW1lc3RhbXAuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBibG9ja0lkRmxhZzogaXNTZXQob2JqZWN0LmJsb2NrSWRGbGFnKVxuICAgICAgICAgICAgICAgID8gYmxvY2tJREZsYWdGcm9tSlNPTihvYmplY3QuYmxvY2tJZEZsYWcpXG4gICAgICAgICAgICAgICAgOiAwLFxuICAgICAgICAgICAgdmFsaWRhdG9yQWRkcmVzczogaXNTZXQob2JqZWN0LnZhbGlkYXRvckFkZHJlc3MpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnZhbGlkYXRvckFkZHJlc3MpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBpc1NldChvYmplY3QudGltZXN0YW1wKVxuICAgICAgICAgICAgICAgID8gZnJvbUpzb25UaW1lc3RhbXAob2JqZWN0LnRpbWVzdGFtcClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNpZ25hdHVyZTogaXNTZXQob2JqZWN0LnNpZ25hdHVyZSlcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3Quc2lnbmF0dXJlKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmJsb2NrSWRGbGFnICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYmxvY2tJZEZsYWcgPSBibG9ja0lERmxhZ1RvSlNPTihtZXNzYWdlLmJsb2NrSWRGbGFnKSk7XG4gICAgICAgIG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnZhbGlkYXRvckFkZHJlc3MgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzc1xuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnRpbWVzdGFtcCA9IGZyb21UaW1lc3RhbXAobWVzc2FnZS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCkpO1xuICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnNpZ25hdHVyZSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLnNpZ25hdHVyZSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5zaWduYXR1cmUgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21taXRTaWcoKTtcbiAgICAgICAgbWVzc2FnZS5ibG9ja0lkRmxhZyA9IG9iamVjdC5ibG9ja0lkRmxhZyA/PyAwO1xuICAgICAgICBtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MgPSBvYmplY3QudmFsaWRhdG9yQWRkcmVzcyA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9XG4gICAgICAgICAgICBvYmplY3QudGltZXN0YW1wICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnRpbWVzdGFtcCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gVGltZXN0YW1wLmZyb21QYXJ0aWFsKG9iamVjdC50aW1lc3RhbXApXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlID0gb2JqZWN0LnNpZ25hdHVyZSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQcm9wb3NhbCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAwLFxuICAgICAgICBoZWlnaHQ6IFwiMFwiLFxuICAgICAgICByb3VuZDogMCxcbiAgICAgICAgcG9sUm91bmQ6IDAsXG4gICAgICAgIGJsb2NrSWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgdGltZXN0YW1wOiB1bmRlZmluZWQsXG4gICAgICAgIHNpZ25hdHVyZTogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IFByb3Bvc2FsID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5oZWlnaHQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQ2NChtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uucm91bmQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDMyKG1lc3NhZ2Uucm91bmQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBvbFJvdW5kICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDMyKS5pbnQzMihtZXNzYWdlLnBvbFJvdW5kKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ibG9ja0lkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEJsb2NrSUQuZW5jb2RlKG1lc3NhZ2UuYmxvY2tJZCwgd3JpdGVyLnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50aW1lc3RhbXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVGltZXN0YW1wLmVuY29kZShtZXNzYWdlLnRpbWVzdGFtcCwgd3JpdGVyLnVpbnQzMig1MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zaWduYXR1cmUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDU4KS5ieXRlcyhtZXNzYWdlLnNpZ25hdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQcm9wb3NhbCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHlwZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJvdW5kID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wb2xSb3VuZCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmxvY2tJZCA9IEJsb2NrSUQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9IFRpbWVzdGFtcC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IGlzU2V0KG9iamVjdC50eXBlKSA/IHNpZ25lZE1zZ1R5cGVGcm9tSlNPTihvYmplY3QudHlwZSkgOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiBpc1NldChvYmplY3QuaGVpZ2h0KSA/IFN0cmluZyhvYmplY3QuaGVpZ2h0KSA6IFwiMFwiLFxuICAgICAgICAgICAgcm91bmQ6IGlzU2V0KG9iamVjdC5yb3VuZCkgPyBOdW1iZXIob2JqZWN0LnJvdW5kKSA6IDAsXG4gICAgICAgICAgICBwb2xSb3VuZDogaXNTZXQob2JqZWN0LnBvbFJvdW5kKSA/IE51bWJlcihvYmplY3QucG9sUm91bmQpIDogMCxcbiAgICAgICAgICAgIGJsb2NrSWQ6IGlzU2V0KG9iamVjdC5ibG9ja0lkKVxuICAgICAgICAgICAgICAgID8gQmxvY2tJRC5mcm9tSlNPTihvYmplY3QuYmxvY2tJZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogaXNTZXQob2JqZWN0LnRpbWVzdGFtcClcbiAgICAgICAgICAgICAgICA/IGZyb21Kc29uVGltZXN0YW1wKG9iamVjdC50aW1lc3RhbXApXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzaWduYXR1cmU6IGlzU2V0KG9iamVjdC5zaWduYXR1cmUpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnNpZ25hdHVyZSlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50eXBlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudHlwZSA9IHNpZ25lZE1zZ1R5cGVUb0pTT04obWVzc2FnZS50eXBlKSk7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5oZWlnaHQgPSBtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIG1lc3NhZ2Uucm91bmQgIT09IHVuZGVmaW5lZCAmJiAob2JqLnJvdW5kID0gTWF0aC5yb3VuZChtZXNzYWdlLnJvdW5kKSk7XG4gICAgICAgIG1lc3NhZ2UucG9sUm91bmQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wb2xSb3VuZCA9IE1hdGgucm91bmQobWVzc2FnZS5wb2xSb3VuZCkpO1xuICAgICAgICBtZXNzYWdlLmJsb2NrSWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5ibG9ja0lkID0gbWVzc2FnZS5ibG9ja0lkXG4gICAgICAgICAgICAgICAgPyBCbG9ja0lELnRvSlNPTihtZXNzYWdlLmJsb2NrSWQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnRpbWVzdGFtcCA9IGZyb21UaW1lc3RhbXAobWVzc2FnZS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCkpO1xuICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnNpZ25hdHVyZSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLnNpZ25hdHVyZSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5zaWduYXR1cmUgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQcm9wb3NhbCgpO1xuICAgICAgICBtZXNzYWdlLnR5cGUgPSBvYmplY3QudHlwZSA/PyAwO1xuICAgICAgICBtZXNzYWdlLmhlaWdodCA9IG9iamVjdC5oZWlnaHQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2Uucm91bmQgPSBvYmplY3Qucm91bmQgPz8gMDtcbiAgICAgICAgbWVzc2FnZS5wb2xSb3VuZCA9IG9iamVjdC5wb2xSb3VuZCA/PyAwO1xuICAgICAgICBtZXNzYWdlLmJsb2NrSWQgPVxuICAgICAgICAgICAgb2JqZWN0LmJsb2NrSWQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYmxvY2tJZCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gQmxvY2tJRC5mcm9tUGFydGlhbChvYmplY3QuYmxvY2tJZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS50aW1lc3RhbXAgPVxuICAgICAgICAgICAgb2JqZWN0LnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC50aW1lc3RhbXAgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFRpbWVzdGFtcC5mcm9tUGFydGlhbChvYmplY3QudGltZXN0YW1wKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZSA9IG9iamVjdC5zaWduYXR1cmUgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlU2lnbmVkSGVhZGVyKCkge1xuICAgIHJldHVybiB7IGhlYWRlcjogdW5kZWZpbmVkLCBjb21taXQ6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IFNpZ25lZEhlYWRlciA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5oZWFkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgSGVhZGVyLmVuY29kZShtZXNzYWdlLmhlYWRlciwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb21taXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQ29tbWl0LmVuY29kZShtZXNzYWdlLmNvbW1pdCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25lZEhlYWRlcigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVhZGVyID0gSGVhZGVyLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb21taXQgPSBDb21taXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGVhZGVyOiBpc1NldChvYmplY3QuaGVhZGVyKSA/IEhlYWRlci5mcm9tSlNPTihvYmplY3QuaGVhZGVyKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbW1pdDogaXNTZXQob2JqZWN0LmNvbW1pdCkgPyBDb21taXQuZnJvbUpTT04ob2JqZWN0LmNvbW1pdCkgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5oZWFkZXIgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5oZWFkZXIgPSBtZXNzYWdlLmhlYWRlciA/IEhlYWRlci50b0pTT04obWVzc2FnZS5oZWFkZXIpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5jb21taXQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5jb21taXQgPSBtZXNzYWdlLmNvbW1pdCA/IENvbW1pdC50b0pTT04obWVzc2FnZS5jb21taXQpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25lZEhlYWRlcigpO1xuICAgICAgICBtZXNzYWdlLmhlYWRlciA9XG4gICAgICAgICAgICBvYmplY3QuaGVhZGVyICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmhlYWRlciAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gSGVhZGVyLmZyb21QYXJ0aWFsKG9iamVjdC5oZWFkZXIpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuY29tbWl0ID1cbiAgICAgICAgICAgIG9iamVjdC5jb21taXQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuY29tbWl0ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBDb21taXQuZnJvbVBhcnRpYWwob2JqZWN0LmNvbW1pdClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTGlnaHRCbG9jaygpIHtcbiAgICByZXR1cm4geyBzaWduZWRIZWFkZXI6IHVuZGVmaW5lZCwgdmFsaWRhdG9yU2V0OiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBMaWdodEJsb2NrID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ25lZEhlYWRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBTaWduZWRIZWFkZXIuZW5jb2RlKG1lc3NhZ2Uuc2lnbmVkSGVhZGVyLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbGlkYXRvclNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWYWxpZGF0b3JTZXQuZW5jb2RlKG1lc3NhZ2UudmFsaWRhdG9yU2V0LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTGlnaHRCbG9jaygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2lnbmVkSGVhZGVyID0gU2lnbmVkSGVhZGVyLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JTZXQgPSBWYWxpZGF0b3JTZXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2lnbmVkSGVhZGVyOiBpc1NldChvYmplY3Quc2lnbmVkSGVhZGVyKVxuICAgICAgICAgICAgICAgID8gU2lnbmVkSGVhZGVyLmZyb21KU09OKG9iamVjdC5zaWduZWRIZWFkZXIpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxpZGF0b3JTZXQ6IGlzU2V0KG9iamVjdC52YWxpZGF0b3JTZXQpXG4gICAgICAgICAgICAgICAgPyBWYWxpZGF0b3JTZXQuZnJvbUpTT04ob2JqZWN0LnZhbGlkYXRvclNldClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnNpZ25lZEhlYWRlciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnNpZ25lZEhlYWRlciA9IG1lc3NhZ2Uuc2lnbmVkSGVhZGVyXG4gICAgICAgICAgICAgICAgPyBTaWduZWRIZWFkZXIudG9KU09OKG1lc3NhZ2Uuc2lnbmVkSGVhZGVyKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JTZXQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai52YWxpZGF0b3JTZXQgPSBtZXNzYWdlLnZhbGlkYXRvclNldFxuICAgICAgICAgICAgICAgID8gVmFsaWRhdG9yU2V0LnRvSlNPTihtZXNzYWdlLnZhbGlkYXRvclNldClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VMaWdodEJsb2NrKCk7XG4gICAgICAgIG1lc3NhZ2Uuc2lnbmVkSGVhZGVyID1cbiAgICAgICAgICAgIG9iamVjdC5zaWduZWRIZWFkZXIgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Quc2lnbmVkSGVhZGVyICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBTaWduZWRIZWFkZXIuZnJvbVBhcnRpYWwob2JqZWN0LnNpZ25lZEhlYWRlcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JTZXQgPVxuICAgICAgICAgICAgb2JqZWN0LnZhbGlkYXRvclNldCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC52YWxpZGF0b3JTZXQgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFZhbGlkYXRvclNldC5mcm9tUGFydGlhbChvYmplY3QudmFsaWRhdG9yU2V0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VCbG9ja01ldGEoKSB7XG4gICAgcmV0dXJuIHsgYmxvY2tJZDogdW5kZWZpbmVkLCBibG9ja1NpemU6IFwiMFwiLCBoZWFkZXI6IHVuZGVmaW5lZCwgbnVtVHhzOiBcIjBcIiB9O1xufVxuZXhwb3J0IGNvbnN0IEJsb2NrTWV0YSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5ibG9ja0lkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEJsb2NrSUQuZW5jb2RlKG1lc3NhZ2UuYmxvY2tJZCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ibG9ja1NpemUgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQ2NChtZXNzYWdlLmJsb2NrU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaGVhZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEhlYWRlci5lbmNvZGUobWVzc2FnZS5oZWFkZXIsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubnVtVHhzICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuaW50NjQobWVzc2FnZS5udW1UeHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQmxvY2tNZXRhKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ibG9ja0lkID0gQmxvY2tJRC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmxvY2tTaXplID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhlYWRlciA9IEhlYWRlci5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubnVtVHhzID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmxvY2tJZDogaXNTZXQob2JqZWN0LmJsb2NrSWQpXG4gICAgICAgICAgICAgICAgPyBCbG9ja0lELmZyb21KU09OKG9iamVjdC5ibG9ja0lkKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYmxvY2tTaXplOiBpc1NldChvYmplY3QuYmxvY2tTaXplKSA/IFN0cmluZyhvYmplY3QuYmxvY2tTaXplKSA6IFwiMFwiLFxuICAgICAgICAgICAgaGVhZGVyOiBpc1NldChvYmplY3QuaGVhZGVyKSA/IEhlYWRlci5mcm9tSlNPTihvYmplY3QuaGVhZGVyKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG51bVR4czogaXNTZXQob2JqZWN0Lm51bVR4cykgPyBTdHJpbmcob2JqZWN0Lm51bVR4cykgOiBcIjBcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmJsb2NrSWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5ibG9ja0lkID0gbWVzc2FnZS5ibG9ja0lkXG4gICAgICAgICAgICAgICAgPyBCbG9ja0lELnRvSlNPTihtZXNzYWdlLmJsb2NrSWQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmJsb2NrU2l6ZSAhPT0gdW5kZWZpbmVkICYmIChvYmouYmxvY2tTaXplID0gbWVzc2FnZS5ibG9ja1NpemUpO1xuICAgICAgICBtZXNzYWdlLmhlYWRlciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmhlYWRlciA9IG1lc3NhZ2UuaGVhZGVyID8gSGVhZGVyLnRvSlNPTihtZXNzYWdlLmhlYWRlcikgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLm51bVR4cyAhPT0gdW5kZWZpbmVkICYmIChvYmoubnVtVHhzID0gbWVzc2FnZS5udW1UeHMpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQmxvY2tNZXRhKCk7XG4gICAgICAgIG1lc3NhZ2UuYmxvY2tJZCA9XG4gICAgICAgICAgICBvYmplY3QuYmxvY2tJZCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5ibG9ja0lkICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBCbG9ja0lELmZyb21QYXJ0aWFsKG9iamVjdC5ibG9ja0lkKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmJsb2NrU2l6ZSA9IG9iamVjdC5ibG9ja1NpemUgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UuaGVhZGVyID1cbiAgICAgICAgICAgIG9iamVjdC5oZWFkZXIgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuaGVhZGVyICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBIZWFkZXIuZnJvbVBhcnRpYWwob2JqZWN0LmhlYWRlcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5udW1UeHMgPSBvYmplY3QubnVtVHhzID8/IFwiMFwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VUeFByb29mKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3RIYXNoOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBkYXRhOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBwcm9vZjogdW5kZWZpbmVkLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgVHhQcm9vZiA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5yb290SGFzaC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2Uucm9vdEhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5ieXRlcyhtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnByb29mICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFByb29mLmVuY29kZShtZXNzYWdlLnByb29mLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVHhQcm9vZigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uucm9vdEhhc2ggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRhdGEgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnByb29mID0gUHJvb2YuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm9vdEhhc2g6IGlzU2V0KG9iamVjdC5yb290SGFzaClcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3Qucm9vdEhhc2gpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgZGF0YTogaXNTZXQob2JqZWN0LmRhdGEpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmRhdGEpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgcHJvb2Y6IGlzU2V0KG9iamVjdC5wcm9vZikgPyBQcm9vZi5mcm9tSlNPTihvYmplY3QucHJvb2YpIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uucm9vdEhhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5yb290SGFzaCA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLnJvb3RIYXNoICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLnJvb3RIYXNoIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5kYXRhID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuZGF0YSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5kYXRhIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnByb29mICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucHJvb2YgPSBtZXNzYWdlLnByb29mID8gUHJvb2YudG9KU09OKG1lc3NhZ2UucHJvb2YpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVR4UHJvb2YoKTtcbiAgICAgICAgbWVzc2FnZS5yb290SGFzaCA9IG9iamVjdC5yb290SGFzaCA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLmRhdGEgPSBvYmplY3QuZGF0YSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnByb29mID1cbiAgICAgICAgICAgIG9iamVjdC5wcm9vZiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wcm9vZiAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUHJvb2YuZnJvbVBhcnRpYWwob2JqZWN0LnByb29mKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5jb25zdCBhdG9iID0gZ2xvYmFsVGhpcy5hdG9iIHx8XG4gICAgKChiNjQpID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKSk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgY29uc3QgYmluID0gYXRvYihiNjQpO1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuY29uc3QgYnRvYSA9IGdsb2JhbFRoaXMuYnRvYSB8fFxuICAgICgoYmluKSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGJpbiwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpO1xuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGNvbnN0IGJpbiA9IFtdO1xuICAgIGFyci5mb3JFYWNoKChieXRlKSA9PiB7XG4gICAgICAgIGJpbi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBidG9hKGJpbi5qb2luKFwiXCIpKTtcbn1cbmZ1bmN0aW9uIHRvVGltZXN0YW1wKGRhdGUpIHtcbiAgICBjb25zdCBzZWNvbmRzID0gTWF0aC50cnVuYyhkYXRlLmdldFRpbWUoKSAvIDEwMDApLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgbmFub3MgPSAoZGF0ZS5nZXRUaW1lKCkgJSAxMDAwKSAqIDEwMDAwMDA7XG4gICAgcmV0dXJuIHsgc2Vjb25kcywgbmFub3MgfTtcbn1cbmZ1bmN0aW9uIGZyb21UaW1lc3RhbXAodCkge1xuICAgIGxldCBtaWxsaXMgPSBOdW1iZXIodC5zZWNvbmRzKSAqIDEwMDA7XG4gICAgbWlsbGlzICs9IHQubmFub3MgLyAxMDAwMDAwO1xuICAgIHJldHVybiBuZXcgRGF0ZShtaWxsaXMpO1xufVxuZnVuY3Rpb24gZnJvbUpzb25UaW1lc3RhbXAobykge1xuICAgIGlmIChvIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gdG9UaW1lc3RhbXAobyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB0b1RpbWVzdGFtcChuZXcgRGF0ZShvKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gVGltZXN0YW1wLmZyb21KU09OKG8pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvbmdUb1N0cmluZyhsb25nKSB7XG4gICAgcmV0dXJuIGxvbmcudG9TdHJpbmcoKTtcbn1cbmlmIChfbTAudXRpbC5Mb25nICE9PSBMb25nKSB7XG4gICAgX20wLnV0aWwuTG9uZyA9IExvbmc7XG4gICAgX20wLmNvbmZpZ3VyZSgpO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImdvb2dsZS5wcm90b2J1ZlwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUR1cmF0aW9uKCkge1xuICAgIHJldHVybiB7IHNlY29uZHM6IFwiMFwiLCBuYW5vczogMCB9O1xufVxuZXhwb3J0IGNvbnN0IER1cmF0aW9uID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnNlY29uZHMgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDY0KG1lc3NhZ2Uuc2Vjb25kcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFub3MgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UubmFub3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRHVyYXRpb24oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlY29uZHMgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFub3MgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2Vjb25kczogaXNTZXQob2JqZWN0LnNlY29uZHMpID8gU3RyaW5nKG9iamVjdC5zZWNvbmRzKSA6IFwiMFwiLFxuICAgICAgICAgICAgbmFub3M6IGlzU2V0KG9iamVjdC5uYW5vcykgPyBOdW1iZXIob2JqZWN0Lm5hbm9zKSA6IDAsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5zZWNvbmRzICE9PSB1bmRlZmluZWQgJiYgKG9iai5zZWNvbmRzID0gbWVzc2FnZS5zZWNvbmRzKTtcbiAgICAgICAgbWVzc2FnZS5uYW5vcyAhPT0gdW5kZWZpbmVkICYmIChvYmoubmFub3MgPSBNYXRoLnJvdW5kKG1lc3NhZ2UubmFub3MpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUR1cmF0aW9uKCk7XG4gICAgICAgIG1lc3NhZ2Uuc2Vjb25kcyA9IG9iamVjdC5zZWNvbmRzID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLm5hbm9zID0gb2JqZWN0Lm5hbm9zID8/IDA7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gbG9uZ1RvU3RyaW5nKGxvbmcpIHtcbiAgICByZXR1cm4gbG9uZy50b1N0cmluZygpO1xufVxuaWYgKF9tMC51dGlsLkxvbmcgIT09IExvbmcpIHtcbiAgICBfbTAudXRpbC5Mb25nID0gTG9uZztcbiAgICBfbTAuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHVyYXRpb24uanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL2dvb2dsZS9wcm90b2J1Zi9kdXJhdGlvblwiO1xuaW1wb3J0IExvbmcgZnJvbSBcImxvbmdcIjtcbmltcG9ydCAqIGFzIF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gXCJ0ZW5kZXJtaW50LnR5cGVzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29uc2Vuc3VzUGFyYW1zKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJsb2NrOiB1bmRlZmluZWQsXG4gICAgICAgIGV2aWRlbmNlOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbGlkYXRvcjogdW5kZWZpbmVkLFxuICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBDb25zZW5zdXNQYXJhbXMgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYmxvY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQmxvY2tQYXJhbXMuZW5jb2RlKG1lc3NhZ2UuYmxvY2ssIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXZpZGVuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgRXZpZGVuY2VQYXJhbXMuZW5jb2RlKG1lc3NhZ2UuZXZpZGVuY2UsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudmFsaWRhdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFZhbGlkYXRvclBhcmFtcy5lbmNvZGUobWVzc2FnZS52YWxpZGF0b3IsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudmVyc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZXJzaW9uUGFyYW1zLmVuY29kZShtZXNzYWdlLnZlcnNpb24sIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb25zZW5zdXNQYXJhbXMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJsb2NrID0gQmxvY2tQYXJhbXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2aWRlbmNlID0gRXZpZGVuY2VQYXJhbXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbGlkYXRvciA9IFZhbGlkYXRvclBhcmFtcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmVyc2lvbiA9IFZlcnNpb25QYXJhbXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmxvY2s6IGlzU2V0KG9iamVjdC5ibG9jaylcbiAgICAgICAgICAgICAgICA/IEJsb2NrUGFyYW1zLmZyb21KU09OKG9iamVjdC5ibG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGV2aWRlbmNlOiBpc1NldChvYmplY3QuZXZpZGVuY2UpXG4gICAgICAgICAgICAgICAgPyBFdmlkZW5jZVBhcmFtcy5mcm9tSlNPTihvYmplY3QuZXZpZGVuY2UpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxpZGF0b3I6IGlzU2V0KG9iamVjdC52YWxpZGF0b3IpXG4gICAgICAgICAgICAgICAgPyBWYWxpZGF0b3JQYXJhbXMuZnJvbUpTT04ob2JqZWN0LnZhbGlkYXRvcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZlcnNpb246IGlzU2V0KG9iamVjdC52ZXJzaW9uKVxuICAgICAgICAgICAgICAgID8gVmVyc2lvblBhcmFtcy5mcm9tSlNPTihvYmplY3QudmVyc2lvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmJsb2NrICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYmxvY2sgPSBtZXNzYWdlLmJsb2NrXG4gICAgICAgICAgICAgICAgPyBCbG9ja1BhcmFtcy50b0pTT04obWVzc2FnZS5ibG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuZXZpZGVuY2UgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5ldmlkZW5jZSA9IG1lc3NhZ2UuZXZpZGVuY2VcbiAgICAgICAgICAgICAgICA/IEV2aWRlbmNlUGFyYW1zLnRvSlNPTihtZXNzYWdlLmV2aWRlbmNlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3IgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai52YWxpZGF0b3IgPSBtZXNzYWdlLnZhbGlkYXRvclxuICAgICAgICAgICAgICAgID8gVmFsaWRhdG9yUGFyYW1zLnRvSlNPTihtZXNzYWdlLnZhbGlkYXRvcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UudmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnZlcnNpb24gPSBtZXNzYWdlLnZlcnNpb25cbiAgICAgICAgICAgICAgICA/IFZlcnNpb25QYXJhbXMudG9KU09OKG1lc3NhZ2UudmVyc2lvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb25zZW5zdXNQYXJhbXMoKTtcbiAgICAgICAgbWVzc2FnZS5ibG9jayA9XG4gICAgICAgICAgICBvYmplY3QuYmxvY2sgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYmxvY2sgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IEJsb2NrUGFyYW1zLmZyb21QYXJ0aWFsKG9iamVjdC5ibG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5ldmlkZW5jZSA9XG4gICAgICAgICAgICBvYmplY3QuZXZpZGVuY2UgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZXZpZGVuY2UgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IEV2aWRlbmNlUGFyYW1zLmZyb21QYXJ0aWFsKG9iamVjdC5ldmlkZW5jZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3IgPVxuICAgICAgICAgICAgb2JqZWN0LnZhbGlkYXRvciAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC52YWxpZGF0b3IgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFZhbGlkYXRvclBhcmFtcy5mcm9tUGFydGlhbChvYmplY3QudmFsaWRhdG9yKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnZlcnNpb24gPVxuICAgICAgICAgICAgb2JqZWN0LnZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudmVyc2lvbiAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gVmVyc2lvblBhcmFtcy5mcm9tUGFydGlhbChvYmplY3QudmVyc2lvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQmxvY2tQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHsgbWF4Qnl0ZXM6IFwiMFwiLCBtYXhHYXM6IFwiMFwiLCB0aW1lSW90YU1zOiBcIjBcIiB9O1xufVxuZXhwb3J0IGNvbnN0IEJsb2NrUGFyYW1zID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLm1heEJ5dGVzICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQ2NChtZXNzYWdlLm1heEJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tYXhHYXMgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQ2NChtZXNzYWdlLm1heEdhcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudGltZUlvdGFNcyAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDY0KG1lc3NhZ2UudGltZUlvdGFNcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VCbG9ja1BhcmFtcygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWF4Qnl0ZXMgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWF4R2FzID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpbWVJb3RhTXMgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXhCeXRlczogaXNTZXQob2JqZWN0Lm1heEJ5dGVzKSA/IFN0cmluZyhvYmplY3QubWF4Qnl0ZXMpIDogXCIwXCIsXG4gICAgICAgICAgICBtYXhHYXM6IGlzU2V0KG9iamVjdC5tYXhHYXMpID8gU3RyaW5nKG9iamVjdC5tYXhHYXMpIDogXCIwXCIsXG4gICAgICAgICAgICB0aW1lSW90YU1zOiBpc1NldChvYmplY3QudGltZUlvdGFNcykgPyBTdHJpbmcob2JqZWN0LnRpbWVJb3RhTXMpIDogXCIwXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5tYXhCeXRlcyAhPT0gdW5kZWZpbmVkICYmIChvYmoubWF4Qnl0ZXMgPSBtZXNzYWdlLm1heEJ5dGVzKTtcbiAgICAgICAgbWVzc2FnZS5tYXhHYXMgIT09IHVuZGVmaW5lZCAmJiAob2JqLm1heEdhcyA9IG1lc3NhZ2UubWF4R2FzKTtcbiAgICAgICAgbWVzc2FnZS50aW1lSW90YU1zICE9PSB1bmRlZmluZWQgJiYgKG9iai50aW1lSW90YU1zID0gbWVzc2FnZS50aW1lSW90YU1zKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUJsb2NrUGFyYW1zKCk7XG4gICAgICAgIG1lc3NhZ2UubWF4Qnl0ZXMgPSBvYmplY3QubWF4Qnl0ZXMgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UubWF4R2FzID0gb2JqZWN0Lm1heEdhcyA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS50aW1lSW90YU1zID0gb2JqZWN0LnRpbWVJb3RhTXMgPz8gXCIwXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUV2aWRlbmNlUGFyYW1zKCkge1xuICAgIHJldHVybiB7IG1heEFnZU51bUJsb2NrczogXCIwXCIsIG1heEFnZUR1cmF0aW9uOiB1bmRlZmluZWQsIG1heEJ5dGVzOiBcIjBcIiB9O1xufVxuZXhwb3J0IGNvbnN0IEV2aWRlbmNlUGFyYW1zID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLm1heEFnZU51bUJsb2NrcyAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50NjQobWVzc2FnZS5tYXhBZ2VOdW1CbG9ja3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1heEFnZUR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIER1cmF0aW9uLmVuY29kZShtZXNzYWdlLm1heEFnZUR1cmF0aW9uLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1heEJ5dGVzICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50NjQobWVzc2FnZS5tYXhCeXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFdmlkZW5jZVBhcmFtcygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWF4QWdlTnVtQmxvY2tzID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1heEFnZUR1cmF0aW9uID0gRHVyYXRpb24uZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1heEJ5dGVzID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWF4QWdlTnVtQmxvY2tzOiBpc1NldChvYmplY3QubWF4QWdlTnVtQmxvY2tzKVxuICAgICAgICAgICAgICAgID8gU3RyaW5nKG9iamVjdC5tYXhBZ2VOdW1CbG9ja3MpXG4gICAgICAgICAgICAgICAgOiBcIjBcIixcbiAgICAgICAgICAgIG1heEFnZUR1cmF0aW9uOiBpc1NldChvYmplY3QubWF4QWdlRHVyYXRpb24pXG4gICAgICAgICAgICAgICAgPyBEdXJhdGlvbi5mcm9tSlNPTihvYmplY3QubWF4QWdlRHVyYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtYXhCeXRlczogaXNTZXQob2JqZWN0Lm1heEJ5dGVzKSA/IFN0cmluZyhvYmplY3QubWF4Qnl0ZXMpIDogXCIwXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5tYXhBZ2VOdW1CbG9ja3MgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5tYXhBZ2VOdW1CbG9ja3MgPSBtZXNzYWdlLm1heEFnZU51bUJsb2Nrcyk7XG4gICAgICAgIG1lc3NhZ2UubWF4QWdlRHVyYXRpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5tYXhBZ2VEdXJhdGlvbiA9IG1lc3NhZ2UubWF4QWdlRHVyYXRpb25cbiAgICAgICAgICAgICAgICA/IER1cmF0aW9uLnRvSlNPTihtZXNzYWdlLm1heEFnZUR1cmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5tYXhCeXRlcyAhPT0gdW5kZWZpbmVkICYmIChvYmoubWF4Qnl0ZXMgPSBtZXNzYWdlLm1heEJ5dGVzKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUV2aWRlbmNlUGFyYW1zKCk7XG4gICAgICAgIG1lc3NhZ2UubWF4QWdlTnVtQmxvY2tzID0gb2JqZWN0Lm1heEFnZU51bUJsb2NrcyA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5tYXhBZ2VEdXJhdGlvbiA9XG4gICAgICAgICAgICBvYmplY3QubWF4QWdlRHVyYXRpb24gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QubWF4QWdlRHVyYXRpb24gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IER1cmF0aW9uLmZyb21QYXJ0aWFsKG9iamVjdC5tYXhBZ2VEdXJhdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5tYXhCeXRlcyA9IG9iamVjdC5tYXhCeXRlcyA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlVmFsaWRhdG9yUGFyYW1zKCkge1xuICAgIHJldHVybiB7IHB1YktleVR5cGVzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IFZhbGlkYXRvclBhcmFtcyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5wdWJLZXlUeXBlcykge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVmFsaWRhdG9yUGFyYW1zKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wdWJLZXlUeXBlcy5wdXNoKHJlYWRlci5zdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHB1YktleVR5cGVzOiBBcnJheS5pc0FycmF5KG9iamVjdD8ucHViS2V5VHlwZXMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QucHViS2V5VHlwZXMubWFwKChlKSA9PiBTdHJpbmcoZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5wdWJLZXlUeXBlcykge1xuICAgICAgICAgICAgb2JqLnB1YktleVR5cGVzID0gbWVzc2FnZS5wdWJLZXlUeXBlcy5tYXAoKGUpID0+IGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnB1YktleVR5cGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVZhbGlkYXRvclBhcmFtcygpO1xuICAgICAgICBtZXNzYWdlLnB1YktleVR5cGVzID0gb2JqZWN0LnB1YktleVR5cGVzPy5tYXAoKGUpID0+IGUpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VWZXJzaW9uUGFyYW1zKCkge1xuICAgIHJldHVybiB7IGFwcFZlcnNpb246IFwiMFwiIH07XG59XG5leHBvcnQgY29uc3QgVmVyc2lvblBhcmFtcyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5hcHBWZXJzaW9uICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50NjQobWVzc2FnZS5hcHBWZXJzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVZlcnNpb25QYXJhbXMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFwcFZlcnNpb24gPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXBwVmVyc2lvbjogaXNTZXQob2JqZWN0LmFwcFZlcnNpb24pID8gU3RyaW5nKG9iamVjdC5hcHBWZXJzaW9uKSA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYXBwVmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIChvYmouYXBwVmVyc2lvbiA9IG1lc3NhZ2UuYXBwVmVyc2lvbik7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VWZXJzaW9uUGFyYW1zKCk7XG4gICAgICAgIG1lc3NhZ2UuYXBwVmVyc2lvbiA9IG9iamVjdC5hcHBWZXJzaW9uID8/IFwiMFwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VIYXNoZWRQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHsgYmxvY2tNYXhCeXRlczogXCIwXCIsIGJsb2NrTWF4R2FzOiBcIjBcIiB9O1xufVxuZXhwb3J0IGNvbnN0IEhhc2hlZFBhcmFtcyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5ibG9ja01heEJ5dGVzICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQ2NChtZXNzYWdlLmJsb2NrTWF4Qnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJsb2NrTWF4R2FzICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50NjQobWVzc2FnZS5ibG9ja01heEdhcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VIYXNoZWRQYXJhbXMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJsb2NrTWF4Qnl0ZXMgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmxvY2tNYXhHYXMgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBibG9ja01heEJ5dGVzOiBpc1NldChvYmplY3QuYmxvY2tNYXhCeXRlcylcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3QuYmxvY2tNYXhCeXRlcylcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICAgICAgYmxvY2tNYXhHYXM6IGlzU2V0KG9iamVjdC5ibG9ja01heEdhcykgPyBTdHJpbmcob2JqZWN0LmJsb2NrTWF4R2FzKSA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYmxvY2tNYXhCeXRlcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmJsb2NrTWF4Qnl0ZXMgPSBtZXNzYWdlLmJsb2NrTWF4Qnl0ZXMpO1xuICAgICAgICBtZXNzYWdlLmJsb2NrTWF4R2FzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYmxvY2tNYXhHYXMgPSBtZXNzYWdlLmJsb2NrTWF4R2FzKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUhhc2hlZFBhcmFtcygpO1xuICAgICAgICBtZXNzYWdlLmJsb2NrTWF4Qnl0ZXMgPSBvYmplY3QuYmxvY2tNYXhCeXRlcyA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5ibG9ja01heEdhcyA9IG9iamVjdC5ibG9ja01heEdhcyA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBsb25nVG9TdHJpbmcobG9uZykge1xuICAgIHJldHVybiBsb25nLnRvU3RyaW5nKCk7XG59XG5pZiAoX20wLnV0aWwuTG9uZyAhPT0gTG9uZykge1xuICAgIF9tMC51dGlsLkxvbmcgPSBMb25nO1xuICAgIF9tMC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJhbXMuanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGdycGMgfSBmcm9tIFwiQGltcHJvYmFibGUtZW5nL2dycGMtd2ViXCI7XG5pbXBvcnQgeyBUaW1lc3RhbXAgfSBmcm9tIFwiLi4vLi4vZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcFwiO1xuaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSBcIi4uL3R5cGVzL3R5cGVzXCI7XG5pbXBvcnQgeyBQcm9vZk9wcyB9IGZyb20gXCIuLi9jcnlwdG8vcHJvb2ZcIjtcbmltcG9ydCB7IEV2aWRlbmNlUGFyYW1zLCBWYWxpZGF0b3JQYXJhbXMsIFZlcnNpb25QYXJhbXMsIH0gZnJvbSBcIi4uL3R5cGVzL3BhcmFtc1wiO1xuaW1wb3J0IHsgUHVibGljS2V5IH0gZnJvbSBcIi4uL2NyeXB0by9rZXlzXCI7XG5pbXBvcnQgeyBCcm93c2VySGVhZGVycyB9IGZyb20gXCJicm93c2VyLWhlYWRlcnNcIjtcbmltcG9ydCBMb25nIGZyb20gXCJsb25nXCI7XG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwidGVuZGVybWludC5hYmNpXCI7XG5leHBvcnQgdmFyIENoZWNrVHhUeXBlO1xuKGZ1bmN0aW9uIChDaGVja1R4VHlwZSkge1xuICAgIENoZWNrVHhUeXBlW0NoZWNrVHhUeXBlW1wiTkVXXCJdID0gMF0gPSBcIk5FV1wiO1xuICAgIENoZWNrVHhUeXBlW0NoZWNrVHhUeXBlW1wiUkVDSEVDS1wiXSA9IDFdID0gXCJSRUNIRUNLXCI7XG4gICAgQ2hlY2tUeFR5cGVbQ2hlY2tUeFR5cGVbXCJVTlJFQ09HTklaRURcIl0gPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufSkoQ2hlY2tUeFR5cGUgfHwgKENoZWNrVHhUeXBlID0ge30pKTtcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1R4VHlwZUZyb21KU09OKG9iamVjdCkge1xuICAgIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSBcIk5FV1wiOlxuICAgICAgICAgICAgcmV0dXJuIENoZWNrVHhUeXBlLk5FVztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICBjYXNlIFwiUkVDSEVDS1wiOlxuICAgICAgICAgICAgcmV0dXJuIENoZWNrVHhUeXBlLlJFQ0hFQ0s7XG4gICAgICAgIGNhc2UgLTE6XG4gICAgICAgIGNhc2UgXCJVTlJFQ09HTklaRURcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBDaGVja1R4VHlwZS5VTlJFQ09HTklaRUQ7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVHhUeXBlVG9KU09OKG9iamVjdCkge1xuICAgIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgICAgIGNhc2UgQ2hlY2tUeFR5cGUuTkVXOlxuICAgICAgICAgICAgcmV0dXJuIFwiTkVXXCI7XG4gICAgICAgIGNhc2UgQ2hlY2tUeFR5cGUuUkVDSEVDSzpcbiAgICAgICAgICAgIHJldHVybiBcIlJFQ0hFQ0tcIjtcbiAgICAgICAgY2FzZSBDaGVja1R4VHlwZS5VTlJFQ09HTklaRUQ6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJVTlJFQ09HTklaRURcIjtcbiAgICB9XG59XG5leHBvcnQgdmFyIEV2aWRlbmNlVHlwZTtcbihmdW5jdGlvbiAoRXZpZGVuY2VUeXBlKSB7XG4gICAgRXZpZGVuY2VUeXBlW0V2aWRlbmNlVHlwZVtcIlVOS05PV05cIl0gPSAwXSA9IFwiVU5LTk9XTlwiO1xuICAgIEV2aWRlbmNlVHlwZVtFdmlkZW5jZVR5cGVbXCJEVVBMSUNBVEVfVk9URVwiXSA9IDFdID0gXCJEVVBMSUNBVEVfVk9URVwiO1xuICAgIEV2aWRlbmNlVHlwZVtFdmlkZW5jZVR5cGVbXCJMSUdIVF9DTElFTlRfQVRUQUNLXCJdID0gMl0gPSBcIkxJR0hUX0NMSUVOVF9BVFRBQ0tcIjtcbiAgICBFdmlkZW5jZVR5cGVbRXZpZGVuY2VUeXBlW1wiVU5SRUNPR05JWkVEXCJdID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKEV2aWRlbmNlVHlwZSB8fCAoRXZpZGVuY2VUeXBlID0ge30pKTtcbmV4cG9ydCBmdW5jdGlvbiBldmlkZW5jZVR5cGVGcm9tSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgXCJVTktOT1dOXCI6XG4gICAgICAgICAgICByZXR1cm4gRXZpZGVuY2VUeXBlLlVOS05PV047XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSBcIkRVUExJQ0FURV9WT1RFXCI6XG4gICAgICAgICAgICByZXR1cm4gRXZpZGVuY2VUeXBlLkRVUExJQ0FURV9WT1RFO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgIGNhc2UgXCJMSUdIVF9DTElFTlRfQVRUQUNLXCI6XG4gICAgICAgICAgICByZXR1cm4gRXZpZGVuY2VUeXBlLkxJR0hUX0NMSUVOVF9BVFRBQ0s7XG4gICAgICAgIGNhc2UgLTE6XG4gICAgICAgIGNhc2UgXCJVTlJFQ09HTklaRURcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBFdmlkZW5jZVR5cGUuVU5SRUNPR05JWkVEO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBldmlkZW5jZVR5cGVUb0pTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSBFdmlkZW5jZVR5cGUuVU5LTk9XTjpcbiAgICAgICAgICAgIHJldHVybiBcIlVOS05PV05cIjtcbiAgICAgICAgY2FzZSBFdmlkZW5jZVR5cGUuRFVQTElDQVRFX1ZPVEU6XG4gICAgICAgICAgICByZXR1cm4gXCJEVVBMSUNBVEVfVk9URVwiO1xuICAgICAgICBjYXNlIEV2aWRlbmNlVHlwZS5MSUdIVF9DTElFTlRfQVRUQUNLOlxuICAgICAgICAgICAgcmV0dXJuIFwiTElHSFRfQ0xJRU5UX0FUVEFDS1wiO1xuICAgICAgICBjYXNlIEV2aWRlbmNlVHlwZS5VTlJFQ09HTklaRUQ6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJVTlJFQ09HTklaRURcIjtcbiAgICB9XG59XG5leHBvcnQgdmFyIFJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHQ7XG4oZnVuY3Rpb24gKFJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHQpIHtcbiAgICAvKiogVU5LTk9XTiAtIFVua25vd24gcmVzdWx0LCBhYm9ydCBhbGwgc25hcHNob3QgcmVzdG9yYXRpb24gKi9cbiAgICBSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0W1Jlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHRbXCJVTktOT1dOXCJdID0gMF0gPSBcIlVOS05PV05cIjtcbiAgICAvKiogQUNDRVBUIC0gU25hcHNob3QgYWNjZXB0ZWQsIGFwcGx5IGNodW5rcyAqL1xuICAgIFJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHRbUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdFtcIkFDQ0VQVFwiXSA9IDFdID0gXCJBQ0NFUFRcIjtcbiAgICAvKiogQUJPUlQgLSBBYm9ydCBhbGwgc25hcHNob3QgcmVzdG9yYXRpb24gKi9cbiAgICBSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0W1Jlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHRbXCJBQk9SVFwiXSA9IDJdID0gXCJBQk9SVFwiO1xuICAgIC8qKiBSRUpFQ1QgLSBSZWplY3QgdGhpcyBzcGVjaWZpYyBzbmFwc2hvdCwgdHJ5IG90aGVycyAqL1xuICAgIFJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHRbUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdFtcIlJFSkVDVFwiXSA9IDNdID0gXCJSRUpFQ1RcIjtcbiAgICAvKiogUkVKRUNUX0ZPUk1BVCAtIFJlamVjdCBhbGwgc25hcHNob3RzIG9mIHRoaXMgZm9ybWF0LCB0cnkgb3RoZXJzICovXG4gICAgUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdFtSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0W1wiUkVKRUNUX0ZPUk1BVFwiXSA9IDRdID0gXCJSRUpFQ1RfRk9STUFUXCI7XG4gICAgLyoqIFJFSkVDVF9TRU5ERVIgLSBSZWplY3QgYWxsIHNuYXBzaG90cyBmcm9tIHRoZSBzZW5kZXIocyksIHRyeSBvdGhlcnMgKi9cbiAgICBSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0W1Jlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHRbXCJSRUpFQ1RfU0VOREVSXCJdID0gNV0gPSBcIlJFSkVDVF9TRU5ERVJcIjtcbiAgICBSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0W1Jlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHRbXCJVTlJFQ09HTklaRURcIl0gPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufSkoUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdCB8fCAoUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdCA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gcmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdEZyb21KU09OKG9iamVjdCkge1xuICAgIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSBcIlVOS05PV05cIjpcbiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0LlVOS05PV047XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSBcIkFDQ0VQVFwiOlxuICAgICAgICAgICAgcmV0dXJuIFJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHQuQUNDRVBUO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgIGNhc2UgXCJBQk9SVFwiOlxuICAgICAgICAgICAgcmV0dXJuIFJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHQuQUJPUlQ7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSBcIlJFSkVDVFwiOlxuICAgICAgICAgICAgcmV0dXJuIFJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHQuUkVKRUNUO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgIGNhc2UgXCJSRUpFQ1RfRk9STUFUXCI6XG4gICAgICAgICAgICByZXR1cm4gUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdC5SRUpFQ1RfRk9STUFUO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgIGNhc2UgXCJSRUpFQ1RfU0VOREVSXCI6XG4gICAgICAgICAgICByZXR1cm4gUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdC5SRUpFQ1RfU0VOREVSO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICBjYXNlIFwiVU5SRUNPR05JWkVEXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdC5VTlJFQ09HTklaRUQ7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHRUb0pTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSBSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0LlVOS05PV046XG4gICAgICAgICAgICByZXR1cm4gXCJVTktOT1dOXCI7XG4gICAgICAgIGNhc2UgUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdC5BQ0NFUFQ6XG4gICAgICAgICAgICByZXR1cm4gXCJBQ0NFUFRcIjtcbiAgICAgICAgY2FzZSBSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0LkFCT1JUOlxuICAgICAgICAgICAgcmV0dXJuIFwiQUJPUlRcIjtcbiAgICAgICAgY2FzZSBSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0LlJFSkVDVDpcbiAgICAgICAgICAgIHJldHVybiBcIlJFSkVDVFwiO1xuICAgICAgICBjYXNlIFJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHQuUkVKRUNUX0ZPUk1BVDpcbiAgICAgICAgICAgIHJldHVybiBcIlJFSkVDVF9GT1JNQVRcIjtcbiAgICAgICAgY2FzZSBSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0LlJFSkVDVF9TRU5ERVI6XG4gICAgICAgICAgICByZXR1cm4gXCJSRUpFQ1RfU0VOREVSXCI7XG4gICAgICAgIGNhc2UgUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdC5VTlJFQ09HTklaRUQ6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJVTlJFQ09HTklaRURcIjtcbiAgICB9XG59XG5leHBvcnQgdmFyIFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdDtcbihmdW5jdGlvbiAoUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0KSB7XG4gICAgLyoqIFVOS05PV04gLSBVbmtub3duIHJlc3VsdCwgYWJvcnQgYWxsIHNuYXBzaG90IHJlc3RvcmF0aW9uICovXG4gICAgUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0W1Jlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdFtcIlVOS05PV05cIl0gPSAwXSA9IFwiVU5LTk9XTlwiO1xuICAgIC8qKiBBQ0NFUFQgLSBDaHVuayBzdWNjZXNzZnVsbHkgYWNjZXB0ZWQgKi9cbiAgICBSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHRbUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0W1wiQUNDRVBUXCJdID0gMV0gPSBcIkFDQ0VQVFwiO1xuICAgIC8qKiBBQk9SVCAtIEFib3J0IGFsbCBzbmFwc2hvdCByZXN0b3JhdGlvbiAqL1xuICAgIFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdFtSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHRbXCJBQk9SVFwiXSA9IDJdID0gXCJBQk9SVFwiO1xuICAgIC8qKiBSRVRSWSAtIFJldHJ5IGNodW5rIChjb21iaW5lIHdpdGggcmVmZXRjaCBhbmQgcmVqZWN0KSAqL1xuICAgIFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdFtSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHRbXCJSRVRSWVwiXSA9IDNdID0gXCJSRVRSWVwiO1xuICAgIC8qKiBSRVRSWV9TTkFQU0hPVCAtIFJldHJ5IHNuYXBzaG90IChjb21iaW5lIHdpdGggcmVmZXRjaCBhbmQgcmVqZWN0KSAqL1xuICAgIFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdFtSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHRbXCJSRVRSWV9TTkFQU0hPVFwiXSA9IDRdID0gXCJSRVRSWV9TTkFQU0hPVFwiO1xuICAgIC8qKiBSRUpFQ1RfU05BUFNIT1QgLSBSZWplY3QgdGhpcyBzbmFwc2hvdCwgdHJ5IG90aGVycyAqL1xuICAgIFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdFtSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHRbXCJSRUpFQ1RfU05BUFNIT1RcIl0gPSA1XSA9IFwiUkVKRUNUX1NOQVBTSE9UXCI7XG4gICAgUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0W1Jlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdFtcIlVOUkVDT0dOSVpFRFwiXSA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHQgfHwgKFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdCA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gcmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0RnJvbUpTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIFwiVU5LTk9XTlwiOlxuICAgICAgICAgICAgcmV0dXJuIFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdC5VTktOT1dOO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgXCJBQ0NFUFRcIjpcbiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHQuQUNDRVBUO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgIGNhc2UgXCJBQk9SVFwiOlxuICAgICAgICAgICAgcmV0dXJuIFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdC5BQk9SVDtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICBjYXNlIFwiUkVUUllcIjpcbiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHQuUkVUUlk7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgY2FzZSBcIlJFVFJZX1NOQVBTSE9UXCI6XG4gICAgICAgICAgICByZXR1cm4gUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0LlJFVFJZX1NOQVBTSE9UO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgIGNhc2UgXCJSRUpFQ1RfU05BUFNIT1RcIjpcbiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHQuUkVKRUNUX1NOQVBTSE9UO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICBjYXNlIFwiVU5SRUNPR05JWkVEXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0LlVOUkVDT0dOSVpFRDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0VG9KU09OKG9iamVjdCkge1xuICAgIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgICAgIGNhc2UgUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0LlVOS05PV046XG4gICAgICAgICAgICByZXR1cm4gXCJVTktOT1dOXCI7XG4gICAgICAgIGNhc2UgUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0LkFDQ0VQVDpcbiAgICAgICAgICAgIHJldHVybiBcIkFDQ0VQVFwiO1xuICAgICAgICBjYXNlIFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdC5BQk9SVDpcbiAgICAgICAgICAgIHJldHVybiBcIkFCT1JUXCI7XG4gICAgICAgIGNhc2UgUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0LlJFVFJZOlxuICAgICAgICAgICAgcmV0dXJuIFwiUkVUUllcIjtcbiAgICAgICAgY2FzZSBSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHQuUkVUUllfU05BUFNIT1Q6XG4gICAgICAgICAgICByZXR1cm4gXCJSRVRSWV9TTkFQU0hPVFwiO1xuICAgICAgICBjYXNlIFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdC5SRUpFQ1RfU05BUFNIT1Q6XG4gICAgICAgICAgICByZXR1cm4gXCJSRUpFQ1RfU05BUFNIT1RcIjtcbiAgICAgICAgY2FzZSBSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHQuVU5SRUNPR05JWkVEOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwiVU5SRUNPR05JWkVEXCI7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlQmFzZVJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZWNobzogdW5kZWZpbmVkLFxuICAgICAgICBmbHVzaDogdW5kZWZpbmVkLFxuICAgICAgICBpbmZvOiB1bmRlZmluZWQsXG4gICAgICAgIHNldE9wdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBpbml0Q2hhaW46IHVuZGVmaW5lZCxcbiAgICAgICAgcXVlcnk6IHVuZGVmaW5lZCxcbiAgICAgICAgYmVnaW5CbG9jazogdW5kZWZpbmVkLFxuICAgICAgICBjaGVja1R4OiB1bmRlZmluZWQsXG4gICAgICAgIGRlbGl2ZXJUeDogdW5kZWZpbmVkLFxuICAgICAgICBlbmRCbG9jazogdW5kZWZpbmVkLFxuICAgICAgICBjb21taXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgbGlzdFNuYXBzaG90czogdW5kZWZpbmVkLFxuICAgICAgICBvZmZlclNuYXBzaG90OiB1bmRlZmluZWQsXG4gICAgICAgIGxvYWRTbmFwc2hvdENodW5rOiB1bmRlZmluZWQsXG4gICAgICAgIGFwcGx5U25hcHNob3RDaHVuazogdW5kZWZpbmVkLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5lY2hvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlcXVlc3RFY2hvLmVuY29kZShtZXNzYWdlLmVjaG8sIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmx1c2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVxdWVzdEZsdXNoLmVuY29kZShtZXNzYWdlLmZsdXNoLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmluZm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVxdWVzdEluZm8uZW5jb2RlKG1lc3NhZ2UuaW5mbywgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZXRPcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVxdWVzdFNldE9wdGlvbi5lbmNvZGUobWVzc2FnZS5zZXRPcHRpb24sIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5pdENoYWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlcXVlc3RJbml0Q2hhaW4uZW5jb2RlKG1lc3NhZ2UuaW5pdENoYWluLCB3cml0ZXIudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnF1ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlcXVlc3RRdWVyeS5lbmNvZGUobWVzc2FnZS5xdWVyeSwgd3JpdGVyLnVpbnQzMig1MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5iZWdpbkJsb2NrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlcXVlc3RCZWdpbkJsb2NrLmVuY29kZShtZXNzYWdlLmJlZ2luQmxvY2ssIHdyaXRlci51aW50MzIoNTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2hlY2tUeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBSZXF1ZXN0Q2hlY2tUeC5lbmNvZGUobWVzc2FnZS5jaGVja1R4LCB3cml0ZXIudWludDMyKDY2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRlbGl2ZXJUeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBSZXF1ZXN0RGVsaXZlclR4LmVuY29kZShtZXNzYWdlLmRlbGl2ZXJUeCwgd3JpdGVyLnVpbnQzMig3NCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lbmRCbG9jayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBSZXF1ZXN0RW5kQmxvY2suZW5jb2RlKG1lc3NhZ2UuZW5kQmxvY2ssIHdyaXRlci51aW50MzIoODIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29tbWl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlcXVlc3RDb21taXQuZW5jb2RlKG1lc3NhZ2UuY29tbWl0LCB3cml0ZXIudWludDMyKDkwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxpc3RTbmFwc2hvdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVxdWVzdExpc3RTbmFwc2hvdHMuZW5jb2RlKG1lc3NhZ2UubGlzdFNuYXBzaG90cywgd3JpdGVyLnVpbnQzMig5OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5vZmZlclNuYXBzaG90ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlcXVlc3RPZmZlclNuYXBzaG90LmVuY29kZShtZXNzYWdlLm9mZmVyU25hcHNob3QsIHdyaXRlci51aW50MzIoMTA2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxvYWRTbmFwc2hvdENodW5rICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlcXVlc3RMb2FkU25hcHNob3RDaHVuay5lbmNvZGUobWVzc2FnZS5sb2FkU25hcHNob3RDaHVuaywgd3JpdGVyLnVpbnQzMigxMTQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYXBwbHlTbmFwc2hvdENodW5rICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlcXVlc3RBcHBseVNuYXBzaG90Q2h1bmsuZW5jb2RlKG1lc3NhZ2UuYXBwbHlTbmFwc2hvdENodW5rLCB3cml0ZXIudWludDMyKDEyMikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlcXVlc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVjaG8gPSBSZXF1ZXN0RWNoby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmx1c2ggPSBSZXF1ZXN0Rmx1c2guZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmluZm8gPSBSZXF1ZXN0SW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2V0T3B0aW9uID0gUmVxdWVzdFNldE9wdGlvbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5pdENoYWluID0gUmVxdWVzdEluaXRDaGFpbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucXVlcnkgPSBSZXF1ZXN0UXVlcnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJlZ2luQmxvY2sgPSBSZXF1ZXN0QmVnaW5CbG9jay5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2hlY2tUeCA9IFJlcXVlc3RDaGVja1R4LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kZWxpdmVyVHggPSBSZXF1ZXN0RGVsaXZlclR4LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW5kQmxvY2sgPSBSZXF1ZXN0RW5kQmxvY2suZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb21taXQgPSBSZXF1ZXN0Q29tbWl0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGlzdFNuYXBzaG90cyA9IFJlcXVlc3RMaXN0U25hcHNob3RzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uub2ZmZXJTbmFwc2hvdCA9IFJlcXVlc3RPZmZlclNuYXBzaG90LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9hZFNuYXBzaG90Q2h1bmsgPSBSZXF1ZXN0TG9hZFNuYXBzaG90Q2h1bmsuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hcHBseVNuYXBzaG90Q2h1bmsgPSBSZXF1ZXN0QXBwbHlTbmFwc2hvdENodW5rLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVjaG86IGlzU2V0KG9iamVjdC5lY2hvKSA/IFJlcXVlc3RFY2hvLmZyb21KU09OKG9iamVjdC5lY2hvKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZsdXNoOiBpc1NldChvYmplY3QuZmx1c2gpXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0Rmx1c2guZnJvbUpTT04ob2JqZWN0LmZsdXNoKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaW5mbzogaXNTZXQob2JqZWN0LmluZm8pID8gUmVxdWVzdEluZm8uZnJvbUpTT04ob2JqZWN0LmluZm8pIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2V0T3B0aW9uOiBpc1NldChvYmplY3Quc2V0T3B0aW9uKVxuICAgICAgICAgICAgICAgID8gUmVxdWVzdFNldE9wdGlvbi5mcm9tSlNPTihvYmplY3Quc2V0T3B0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaW5pdENoYWluOiBpc1NldChvYmplY3QuaW5pdENoYWluKVxuICAgICAgICAgICAgICAgID8gUmVxdWVzdEluaXRDaGFpbi5mcm9tSlNPTihvYmplY3QuaW5pdENoYWluKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcXVlcnk6IGlzU2V0KG9iamVjdC5xdWVyeSlcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RRdWVyeS5mcm9tSlNPTihvYmplY3QucXVlcnkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBiZWdpbkJsb2NrOiBpc1NldChvYmplY3QuYmVnaW5CbG9jaylcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RCZWdpbkJsb2NrLmZyb21KU09OKG9iamVjdC5iZWdpbkJsb2NrKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2hlY2tUeDogaXNTZXQob2JqZWN0LmNoZWNrVHgpXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0Q2hlY2tUeC5mcm9tSlNPTihvYmplY3QuY2hlY2tUeClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRlbGl2ZXJUeDogaXNTZXQob2JqZWN0LmRlbGl2ZXJUeClcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3REZWxpdmVyVHguZnJvbUpTT04ob2JqZWN0LmRlbGl2ZXJUeClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGVuZEJsb2NrOiBpc1NldChvYmplY3QuZW5kQmxvY2spXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0RW5kQmxvY2suZnJvbUpTT04ob2JqZWN0LmVuZEJsb2NrKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29tbWl0OiBpc1NldChvYmplY3QuY29tbWl0KVxuICAgICAgICAgICAgICAgID8gUmVxdWVzdENvbW1pdC5mcm9tSlNPTihvYmplY3QuY29tbWl0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbGlzdFNuYXBzaG90czogaXNTZXQob2JqZWN0Lmxpc3RTbmFwc2hvdHMpXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0TGlzdFNuYXBzaG90cy5mcm9tSlNPTihvYmplY3QubGlzdFNuYXBzaG90cylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9mZmVyU25hcHNob3Q6IGlzU2V0KG9iamVjdC5vZmZlclNuYXBzaG90KVxuICAgICAgICAgICAgICAgID8gUmVxdWVzdE9mZmVyU25hcHNob3QuZnJvbUpTT04ob2JqZWN0Lm9mZmVyU25hcHNob3QpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsb2FkU25hcHNob3RDaHVuazogaXNTZXQob2JqZWN0LmxvYWRTbmFwc2hvdENodW5rKVxuICAgICAgICAgICAgICAgID8gUmVxdWVzdExvYWRTbmFwc2hvdENodW5rLmZyb21KU09OKG9iamVjdC5sb2FkU25hcHNob3RDaHVuaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFwcGx5U25hcHNob3RDaHVuazogaXNTZXQob2JqZWN0LmFwcGx5U25hcHNob3RDaHVuaylcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RBcHBseVNuYXBzaG90Q2h1bmsuZnJvbUpTT04ob2JqZWN0LmFwcGx5U25hcHNob3RDaHVuaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmVjaG8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5lY2hvID0gbWVzc2FnZS5lY2hvID8gUmVxdWVzdEVjaG8udG9KU09OKG1lc3NhZ2UuZWNobykgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmZsdXNoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZmx1c2ggPSBtZXNzYWdlLmZsdXNoXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0Rmx1c2gudG9KU09OKG1lc3NhZ2UuZmx1c2gpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmluZm8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5pbmZvID0gbWVzc2FnZS5pbmZvID8gUmVxdWVzdEluZm8udG9KU09OKG1lc3NhZ2UuaW5mbykgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnNldE9wdGlvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnNldE9wdGlvbiA9IG1lc3NhZ2Uuc2V0T3B0aW9uXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0U2V0T3B0aW9uLnRvSlNPTihtZXNzYWdlLnNldE9wdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuaW5pdENoYWluICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouaW5pdENoYWluID0gbWVzc2FnZS5pbml0Q2hhaW5cbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RJbml0Q2hhaW4udG9KU09OKG1lc3NhZ2UuaW5pdENoYWluKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5xdWVyeSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnF1ZXJ5ID0gbWVzc2FnZS5xdWVyeVxuICAgICAgICAgICAgICAgID8gUmVxdWVzdFF1ZXJ5LnRvSlNPTihtZXNzYWdlLnF1ZXJ5KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5iZWdpbkJsb2NrICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYmVnaW5CbG9jayA9IG1lc3NhZ2UuYmVnaW5CbG9ja1xuICAgICAgICAgICAgICAgID8gUmVxdWVzdEJlZ2luQmxvY2sudG9KU09OKG1lc3NhZ2UuYmVnaW5CbG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuY2hlY2tUeCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmNoZWNrVHggPSBtZXNzYWdlLmNoZWNrVHhcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RDaGVja1R4LnRvSlNPTihtZXNzYWdlLmNoZWNrVHgpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmRlbGl2ZXJUeCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmRlbGl2ZXJUeCA9IG1lc3NhZ2UuZGVsaXZlclR4XG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0RGVsaXZlclR4LnRvSlNPTihtZXNzYWdlLmRlbGl2ZXJUeClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuZW5kQmxvY2sgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5lbmRCbG9jayA9IG1lc3NhZ2UuZW5kQmxvY2tcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RFbmRCbG9jay50b0pTT04obWVzc2FnZS5lbmRCbG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuY29tbWl0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouY29tbWl0ID0gbWVzc2FnZS5jb21taXRcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RDb21taXQudG9KU09OKG1lc3NhZ2UuY29tbWl0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5saXN0U25hcHNob3RzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubGlzdFNuYXBzaG90cyA9IG1lc3NhZ2UubGlzdFNuYXBzaG90c1xuICAgICAgICAgICAgICAgID8gUmVxdWVzdExpc3RTbmFwc2hvdHMudG9KU09OKG1lc3NhZ2UubGlzdFNuYXBzaG90cylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uub2ZmZXJTbmFwc2hvdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLm9mZmVyU25hcHNob3QgPSBtZXNzYWdlLm9mZmVyU25hcHNob3RcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RPZmZlclNuYXBzaG90LnRvSlNPTihtZXNzYWdlLm9mZmVyU25hcHNob3QpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmxvYWRTbmFwc2hvdENodW5rICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubG9hZFNuYXBzaG90Q2h1bmsgPSBtZXNzYWdlLmxvYWRTbmFwc2hvdENodW5rXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0TG9hZFNuYXBzaG90Q2h1bmsudG9KU09OKG1lc3NhZ2UubG9hZFNuYXBzaG90Q2h1bmspXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmFwcGx5U25hcHNob3RDaHVuayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmFwcGx5U25hcHNob3RDaHVuayA9IG1lc3NhZ2UuYXBwbHlTbmFwc2hvdENodW5rXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0QXBwbHlTbmFwc2hvdENodW5rLnRvSlNPTihtZXNzYWdlLmFwcGx5U25hcHNob3RDaHVuaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0KCk7XG4gICAgICAgIG1lc3NhZ2UuZWNobyA9XG4gICAgICAgICAgICBvYmplY3QuZWNobyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5lY2hvICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0RWNoby5mcm9tUGFydGlhbChvYmplY3QuZWNobylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5mbHVzaCA9XG4gICAgICAgICAgICBvYmplY3QuZmx1c2ggIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZmx1c2ggIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RGbHVzaC5mcm9tUGFydGlhbChvYmplY3QuZmx1c2gpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuaW5mbyA9XG4gICAgICAgICAgICBvYmplY3QuaW5mbyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5pbmZvICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0SW5mby5mcm9tUGFydGlhbChvYmplY3QuaW5mbylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zZXRPcHRpb24gPVxuICAgICAgICAgICAgb2JqZWN0LnNldE9wdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5zZXRPcHRpb24gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RTZXRPcHRpb24uZnJvbVBhcnRpYWwob2JqZWN0LnNldE9wdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5pbml0Q2hhaW4gPVxuICAgICAgICAgICAgb2JqZWN0LmluaXRDaGFpbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5pbml0Q2hhaW4gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RJbml0Q2hhaW4uZnJvbVBhcnRpYWwob2JqZWN0LmluaXRDaGFpbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5xdWVyeSA9XG4gICAgICAgICAgICBvYmplY3QucXVlcnkgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucXVlcnkgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RRdWVyeS5mcm9tUGFydGlhbChvYmplY3QucXVlcnkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYmVnaW5CbG9jayA9XG4gICAgICAgICAgICBvYmplY3QuYmVnaW5CbG9jayAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5iZWdpbkJsb2NrICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXF1ZXN0QmVnaW5CbG9jay5mcm9tUGFydGlhbChvYmplY3QuYmVnaW5CbG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5jaGVja1R4ID1cbiAgICAgICAgICAgIG9iamVjdC5jaGVja1R4ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmNoZWNrVHggIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RDaGVja1R4LmZyb21QYXJ0aWFsKG9iamVjdC5jaGVja1R4KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmRlbGl2ZXJUeCA9XG4gICAgICAgICAgICBvYmplY3QuZGVsaXZlclR4ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmRlbGl2ZXJUeCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUmVxdWVzdERlbGl2ZXJUeC5mcm9tUGFydGlhbChvYmplY3QuZGVsaXZlclR4KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmVuZEJsb2NrID1cbiAgICAgICAgICAgIG9iamVjdC5lbmRCbG9jayAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5lbmRCbG9jayAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUmVxdWVzdEVuZEJsb2NrLmZyb21QYXJ0aWFsKG9iamVjdC5lbmRCbG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5jb21taXQgPVxuICAgICAgICAgICAgb2JqZWN0LmNvbW1pdCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5jb21taXQgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RDb21taXQuZnJvbVBhcnRpYWwob2JqZWN0LmNvbW1pdClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5saXN0U25hcHNob3RzID1cbiAgICAgICAgICAgIG9iamVjdC5saXN0U25hcHNob3RzICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0Lmxpc3RTbmFwc2hvdHMgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RMaXN0U25hcHNob3RzLmZyb21QYXJ0aWFsKG9iamVjdC5saXN0U25hcHNob3RzKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLm9mZmVyU25hcHNob3QgPVxuICAgICAgICAgICAgb2JqZWN0Lm9mZmVyU25hcHNob3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Qub2ZmZXJTbmFwc2hvdCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUmVxdWVzdE9mZmVyU25hcHNob3QuZnJvbVBhcnRpYWwob2JqZWN0Lm9mZmVyU25hcHNob3QpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UubG9hZFNuYXBzaG90Q2h1bmsgPVxuICAgICAgICAgICAgb2JqZWN0LmxvYWRTbmFwc2hvdENodW5rICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICBvYmplY3QubG9hZFNuYXBzaG90Q2h1bmsgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RMb2FkU25hcHNob3RDaHVuay5mcm9tUGFydGlhbChvYmplY3QubG9hZFNuYXBzaG90Q2h1bmspXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYXBwbHlTbmFwc2hvdENodW5rID1cbiAgICAgICAgICAgIG9iamVjdC5hcHBseVNuYXBzaG90Q2h1bmsgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIG9iamVjdC5hcHBseVNuYXBzaG90Q2h1bmsgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlcXVlc3RBcHBseVNuYXBzaG90Q2h1bmsuZnJvbVBhcnRpYWwob2JqZWN0LmFwcGx5U25hcHNob3RDaHVuaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVxdWVzdEVjaG8oKSB7XG4gICAgcmV0dXJuIHsgbWVzc2FnZTogXCJcIiB9O1xufVxuZXhwb3J0IGNvbnN0IFJlcXVlc3RFY2hvID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLm1lc3NhZ2UgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdEVjaG8oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1lc3NhZ2UgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGlzU2V0KG9iamVjdC5tZXNzYWdlKSA/IFN0cmluZyhvYmplY3QubWVzc2FnZSkgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UubWVzc2FnZSAhPT0gdW5kZWZpbmVkICYmIChvYmoubWVzc2FnZSA9IG1lc3NhZ2UubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0RWNobygpO1xuICAgICAgICBtZXNzYWdlLm1lc3NhZ2UgPSBvYmplY3QubWVzc2FnZSA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXF1ZXN0Rmx1c2goKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuZXhwb3J0IGNvbnN0IFJlcXVlc3RGbHVzaCA9IHtcbiAgICBlbmNvZGUoXywgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlcXVlc3RGbHVzaCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04oXykge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICB0b0pTT04oXykge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKF8pIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0Rmx1c2goKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVxdWVzdEluZm8oKSB7XG4gICAgcmV0dXJuIHsgdmVyc2lvbjogXCJcIiwgYmxvY2tWZXJzaW9uOiBcIjBcIiwgcDJwVmVyc2lvbjogXCIwXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBSZXF1ZXN0SW5mbyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS52ZXJzaW9uICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS52ZXJzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ibG9ja1ZlcnNpb24gIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS51aW50NjQobWVzc2FnZS5ibG9ja1ZlcnNpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnAycFZlcnNpb24gIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS51aW50NjQobWVzc2FnZS5wMnBWZXJzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlcXVlc3RJbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52ZXJzaW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmxvY2tWZXJzaW9uID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wMnBWZXJzaW9uID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcnNpb246IGlzU2V0KG9iamVjdC52ZXJzaW9uKSA/IFN0cmluZyhvYmplY3QudmVyc2lvbikgOiBcIlwiLFxuICAgICAgICAgICAgYmxvY2tWZXJzaW9uOiBpc1NldChvYmplY3QuYmxvY2tWZXJzaW9uKVxuICAgICAgICAgICAgICAgID8gU3RyaW5nKG9iamVjdC5ibG9ja1ZlcnNpb24pXG4gICAgICAgICAgICAgICAgOiBcIjBcIixcbiAgICAgICAgICAgIHAycFZlcnNpb246IGlzU2V0KG9iamVjdC5wMnBWZXJzaW9uKSA/IFN0cmluZyhvYmplY3QucDJwVmVyc2lvbikgOiBcIjBcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiAob2JqLnZlcnNpb24gPSBtZXNzYWdlLnZlcnNpb24pO1xuICAgICAgICBtZXNzYWdlLmJsb2NrVmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmJsb2NrVmVyc2lvbiA9IG1lc3NhZ2UuYmxvY2tWZXJzaW9uKTtcbiAgICAgICAgbWVzc2FnZS5wMnBWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgKG9iai5wMnBWZXJzaW9uID0gbWVzc2FnZS5wMnBWZXJzaW9uKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlcXVlc3RJbmZvKCk7XG4gICAgICAgIG1lc3NhZ2UudmVyc2lvbiA9IG9iamVjdC52ZXJzaW9uID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuYmxvY2tWZXJzaW9uID0gb2JqZWN0LmJsb2NrVmVyc2lvbiA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5wMnBWZXJzaW9uID0gb2JqZWN0LnAycFZlcnNpb24gPz8gXCIwXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVJlcXVlc3RTZXRPcHRpb24oKSB7XG4gICAgcmV0dXJuIHsga2V5OiBcIlwiLCB2YWx1ZTogXCJcIiB9O1xufVxuZXhwb3J0IGNvbnN0IFJlcXVlc3RTZXRPcHRpb24gPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uua2V5ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbHVlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0U2V0T3B0aW9uKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5rZXkgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52YWx1ZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBpc1NldChvYmplY3Qua2V5KSA/IFN0cmluZyhvYmplY3Qua2V5KSA6IFwiXCIsXG4gICAgICAgICAgICB2YWx1ZTogaXNTZXQob2JqZWN0LnZhbHVlKSA/IFN0cmluZyhvYmplY3QudmFsdWUpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmtleSAhPT0gdW5kZWZpbmVkICYmIChvYmoua2V5ID0gbWVzc2FnZS5rZXkpO1xuICAgICAgICBtZXNzYWdlLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgKG9iai52YWx1ZSA9IG1lc3NhZ2UudmFsdWUpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdFNldE9wdGlvbigpO1xuICAgICAgICBtZXNzYWdlLmtleSA9IG9iamVjdC5rZXkgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS52YWx1ZSA9IG9iamVjdC52YWx1ZSA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXF1ZXN0SW5pdENoYWluKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgY2hhaW5JZDogXCJcIixcbiAgICAgICAgY29uc2Vuc3VzUGFyYW1zOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtdLFxuICAgICAgICBhcHBTdGF0ZUJ5dGVzOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBpbml0aWFsSGVpZ2h0OiBcIjBcIixcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IFJlcXVlc3RJbml0Q2hhaW4gPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBUaW1lc3RhbXAuZW5jb2RlKG1lc3NhZ2UudGltZSwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jaGFpbklkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5jaGFpbklkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb25zZW5zdXNQYXJhbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQ29uc2Vuc3VzUGFyYW1zLmVuY29kZShtZXNzYWdlLmNvbnNlbnN1c1BhcmFtcywgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS52YWxpZGF0b3JzKSB7XG4gICAgICAgICAgICBWYWxpZGF0b3JVcGRhdGUuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYXBwU3RhdGVCeXRlcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDIpLmJ5dGVzKG1lc3NhZ2UuYXBwU3RhdGVCeXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5pdGlhbEhlaWdodCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDgpLmludDY0KG1lc3NhZ2UuaW5pdGlhbEhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0SW5pdENoYWluKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50aW1lID0gVGltZXN0YW1wLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jaGFpbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29uc2Vuc3VzUGFyYW1zID0gQ29uc2Vuc3VzUGFyYW1zLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JzLnB1c2goVmFsaWRhdG9yVXBkYXRlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXBwU3RhdGVCeXRlcyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5pdGlhbEhlaWdodCA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWU6IGlzU2V0KG9iamVjdC50aW1lKSA/IGZyb21Kc29uVGltZXN0YW1wKG9iamVjdC50aW1lKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNoYWluSWQ6IGlzU2V0KG9iamVjdC5jaGFpbklkKSA/IFN0cmluZyhvYmplY3QuY2hhaW5JZCkgOiBcIlwiLFxuICAgICAgICAgICAgY29uc2Vuc3VzUGFyYW1zOiBpc1NldChvYmplY3QuY29uc2Vuc3VzUGFyYW1zKVxuICAgICAgICAgICAgICAgID8gQ29uc2Vuc3VzUGFyYW1zLmZyb21KU09OKG9iamVjdC5jb25zZW5zdXNQYXJhbXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxpZGF0b3JzOiBBcnJheS5pc0FycmF5KG9iamVjdD8udmFsaWRhdG9ycylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC52YWxpZGF0b3JzLm1hcCgoZSkgPT4gVmFsaWRhdG9yVXBkYXRlLmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBhcHBTdGF0ZUJ5dGVzOiBpc1NldChvYmplY3QuYXBwU3RhdGVCeXRlcylcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuYXBwU3RhdGVCeXRlcylcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgICBpbml0aWFsSGVpZ2h0OiBpc1NldChvYmplY3QuaW5pdGlhbEhlaWdodClcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3QuaW5pdGlhbEhlaWdodClcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudGltZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnRpbWUgPSBmcm9tVGltZXN0YW1wKG1lc3NhZ2UudGltZSkudG9JU09TdHJpbmcoKSk7XG4gICAgICAgIG1lc3NhZ2UuY2hhaW5JZCAhPT0gdW5kZWZpbmVkICYmIChvYmouY2hhaW5JZCA9IG1lc3NhZ2UuY2hhaW5JZCk7XG4gICAgICAgIG1lc3NhZ2UuY29uc2Vuc3VzUGFyYW1zICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouY29uc2Vuc3VzUGFyYW1zID0gbWVzc2FnZS5jb25zZW5zdXNQYXJhbXNcbiAgICAgICAgICAgICAgICA/IENvbnNlbnN1c1BhcmFtcy50b0pTT04obWVzc2FnZS5jb25zZW5zdXNQYXJhbXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAobWVzc2FnZS52YWxpZGF0b3JzKSB7XG4gICAgICAgICAgICBvYmoudmFsaWRhdG9ycyA9IG1lc3NhZ2UudmFsaWRhdG9ycy5tYXAoKGUpID0+IGUgPyBWYWxpZGF0b3JVcGRhdGUudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai52YWxpZGF0b3JzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZS5hcHBTdGF0ZUJ5dGVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYXBwU3RhdGVCeXRlcyA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmFwcFN0YXRlQnl0ZXMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gbWVzc2FnZS5hcHBTdGF0ZUJ5dGVzXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UuaW5pdGlhbEhlaWdodCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmluaXRpYWxIZWlnaHQgPSBtZXNzYWdlLmluaXRpYWxIZWlnaHQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdEluaXRDaGFpbigpO1xuICAgICAgICBtZXNzYWdlLnRpbWUgPVxuICAgICAgICAgICAgb2JqZWN0LnRpbWUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudGltZSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gVGltZXN0YW1wLmZyb21QYXJ0aWFsKG9iamVjdC50aW1lKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmNoYWluSWQgPSBvYmplY3QuY2hhaW5JZCA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmNvbnNlbnN1c1BhcmFtcyA9XG4gICAgICAgICAgICBvYmplY3QuY29uc2Vuc3VzUGFyYW1zICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmNvbnNlbnN1c1BhcmFtcyAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gQ29uc2Vuc3VzUGFyYW1zLmZyb21QYXJ0aWFsKG9iamVjdC5jb25zZW5zdXNQYXJhbXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UudmFsaWRhdG9ycyA9XG4gICAgICAgICAgICBvYmplY3QudmFsaWRhdG9ycz8ubWFwKChlKSA9PiBWYWxpZGF0b3JVcGRhdGUuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLmFwcFN0YXRlQnl0ZXMgPSBvYmplY3QuYXBwU3RhdGVCeXRlcyA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLmluaXRpYWxIZWlnaHQgPSBvYmplY3QuaW5pdGlhbEhlaWdodCA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVxdWVzdFF1ZXJ5KCkge1xuICAgIHJldHVybiB7IGRhdGE6IG5ldyBVaW50OEFycmF5KCksIHBhdGg6IFwiXCIsIGhlaWdodDogXCIwXCIsIHByb3ZlOiBmYWxzZSB9O1xufVxuZXhwb3J0IGNvbnN0IFJlcXVlc3RRdWVyeSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5kYXRhLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wYXRoICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5wYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5oZWlnaHQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5pbnQ2NChtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucHJvdmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzIpLmJvb2wobWVzc2FnZS5wcm92ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0UXVlcnkoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRhdGEgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhdGggPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5oZWlnaHQgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHJvdmUgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBpc1NldChvYmplY3QuZGF0YSlcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuZGF0YSlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgICBwYXRoOiBpc1NldChvYmplY3QucGF0aCkgPyBTdHJpbmcob2JqZWN0LnBhdGgpIDogXCJcIixcbiAgICAgICAgICAgIGhlaWdodDogaXNTZXQob2JqZWN0LmhlaWdodCkgPyBTdHJpbmcob2JqZWN0LmhlaWdodCkgOiBcIjBcIixcbiAgICAgICAgICAgIHByb3ZlOiBpc1NldChvYmplY3QucHJvdmUpID8gQm9vbGVhbihvYmplY3QucHJvdmUpIDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZGF0YSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UuZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5wYXRoICE9PSB1bmRlZmluZWQgJiYgKG9iai5wYXRoID0gbWVzc2FnZS5wYXRoKTtcbiAgICAgICAgbWVzc2FnZS5oZWlnaHQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmhlaWdodCA9IG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgbWVzc2FnZS5wcm92ZSAhPT0gdW5kZWZpbmVkICYmIChvYmoucHJvdmUgPSBtZXNzYWdlLnByb3ZlKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlcXVlc3RRdWVyeSgpO1xuICAgICAgICBtZXNzYWdlLmRhdGEgPSBvYmplY3QuZGF0YSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnBhdGggPSBvYmplY3QucGF0aCA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmhlaWdodCA9IG9iamVjdC5oZWlnaHQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UucHJvdmUgPSBvYmplY3QucHJvdmUgPz8gZmFsc2U7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVJlcXVlc3RCZWdpbkJsb2NrKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc2g6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIGhlYWRlcjogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0Q29tbWl0SW5mbzogdW5kZWZpbmVkLFxuICAgICAgICBieXphbnRpbmVWYWxpZGF0b3JzOiBbXSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IFJlcXVlc3RCZWdpbkJsb2NrID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmhhc2gubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5ieXRlcyhtZXNzYWdlLmhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmhlYWRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBIZWFkZXIuZW5jb2RlKG1lc3NhZ2UuaGVhZGVyLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxhc3RDb21taXRJbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIExhc3RDb21taXRJbmZvLmVuY29kZShtZXNzYWdlLmxhc3RDb21taXRJbmZvLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmJ5emFudGluZVZhbGlkYXRvcnMpIHtcbiAgICAgICAgICAgIEV2aWRlbmNlLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdEJlZ2luQmxvY2soKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhhc2ggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhlYWRlciA9IEhlYWRlci5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGFzdENvbW1pdEluZm8gPSBMYXN0Q29tbWl0SW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYnl6YW50aW5lVmFsaWRhdG9ycy5wdXNoKEV2aWRlbmNlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoYXNoOiBpc1NldChvYmplY3QuaGFzaClcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuaGFzaClcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgICBoZWFkZXI6IGlzU2V0KG9iamVjdC5oZWFkZXIpID8gSGVhZGVyLmZyb21KU09OKG9iamVjdC5oZWFkZXIpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbGFzdENvbW1pdEluZm86IGlzU2V0KG9iamVjdC5sYXN0Q29tbWl0SW5mbylcbiAgICAgICAgICAgICAgICA/IExhc3RDb21taXRJbmZvLmZyb21KU09OKG9iamVjdC5sYXN0Q29tbWl0SW5mbylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJ5emFudGluZVZhbGlkYXRvcnM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5ieXphbnRpbmVWYWxpZGF0b3JzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmJ5emFudGluZVZhbGlkYXRvcnMubWFwKChlKSA9PiBFdmlkZW5jZS5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuaGFzaCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmhhc2ggPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5oYXNoICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmhhc2ggOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UuaGVhZGVyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouaGVhZGVyID0gbWVzc2FnZS5oZWFkZXIgPyBIZWFkZXIudG9KU09OKG1lc3NhZ2UuaGVhZGVyKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UubGFzdENvbW1pdEluZm8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5sYXN0Q29tbWl0SW5mbyA9IG1lc3NhZ2UubGFzdENvbW1pdEluZm9cbiAgICAgICAgICAgICAgICA/IExhc3RDb21taXRJbmZvLnRvSlNPTihtZXNzYWdlLmxhc3RDb21taXRJbmZvKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYnl6YW50aW5lVmFsaWRhdG9ycykge1xuICAgICAgICAgICAgb2JqLmJ5emFudGluZVZhbGlkYXRvcnMgPSBtZXNzYWdlLmJ5emFudGluZVZhbGlkYXRvcnMubWFwKChlKSA9PiBlID8gRXZpZGVuY2UudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5ieXphbnRpbmVWYWxpZGF0b3JzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlcXVlc3RCZWdpbkJsb2NrKCk7XG4gICAgICAgIG1lc3NhZ2UuaGFzaCA9IG9iamVjdC5oYXNoID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UuaGVhZGVyID1cbiAgICAgICAgICAgIG9iamVjdC5oZWFkZXIgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuaGVhZGVyICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBIZWFkZXIuZnJvbVBhcnRpYWwob2JqZWN0LmhlYWRlcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5sYXN0Q29tbWl0SW5mbyA9XG4gICAgICAgICAgICBvYmplY3QubGFzdENvbW1pdEluZm8gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QubGFzdENvbW1pdEluZm8gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IExhc3RDb21taXRJbmZvLmZyb21QYXJ0aWFsKG9iamVjdC5sYXN0Q29tbWl0SW5mbylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5ieXphbnRpbmVWYWxpZGF0b3JzID1cbiAgICAgICAgICAgIG9iamVjdC5ieXphbnRpbmVWYWxpZGF0b3JzPy5tYXAoKGUpID0+IEV2aWRlbmNlLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVxdWVzdENoZWNrVHgoKSB7XG4gICAgcmV0dXJuIHsgdHg6IG5ldyBVaW50OEFycmF5KCksIHR5cGU6IDAgfTtcbn1cbmV4cG9ydCBjb25zdCBSZXF1ZXN0Q2hlY2tUeCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS50eC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2UudHgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0Q2hlY2tUeCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnR5cGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHg6IGlzU2V0KG9iamVjdC50eCkgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnR4KSA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgICB0eXBlOiBpc1NldChvYmplY3QudHlwZSkgPyBjaGVja1R4VHlwZUZyb21KU09OKG9iamVjdC50eXBlKSA6IDAsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50eCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnR4ID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UudHggIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UudHggOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UudHlwZSAhPT0gdW5kZWZpbmVkICYmIChvYmoudHlwZSA9IGNoZWNrVHhUeXBlVG9KU09OKG1lc3NhZ2UudHlwZSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdENoZWNrVHgoKTtcbiAgICAgICAgbWVzc2FnZS50eCA9IG9iamVjdC50eCA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnR5cGUgPSBvYmplY3QudHlwZSA/PyAwO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXF1ZXN0RGVsaXZlclR4KCkge1xuICAgIHJldHVybiB7IHR4OiBuZXcgVWludDhBcnJheSgpIH07XG59XG5leHBvcnQgY29uc3QgUmVxdWVzdERlbGl2ZXJUeCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS50eC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2UudHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdERlbGl2ZXJUeCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHg6IGlzU2V0KG9iamVjdC50eCkgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnR4KSA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50eCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnR4ID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UudHggIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UudHggOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0RGVsaXZlclR4KCk7XG4gICAgICAgIG1lc3NhZ2UudHggPSBvYmplY3QudHggPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVxdWVzdEVuZEJsb2NrKCkge1xuICAgIHJldHVybiB7IGhlaWdodDogXCIwXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBSZXF1ZXN0RW5kQmxvY2sgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaGVpZ2h0ICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQ2NChtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0RW5kQmxvY2soKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhlaWdodCA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhlaWdodDogaXNTZXQob2JqZWN0LmhlaWdodCkgPyBTdHJpbmcob2JqZWN0LmhlaWdodCkgOiBcIjBcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmhlaWdodCAhPT0gdW5kZWZpbmVkICYmIChvYmouaGVpZ2h0ID0gbWVzc2FnZS5oZWlnaHQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdEVuZEJsb2NrKCk7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gb2JqZWN0LmhlaWdodCA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVxdWVzdENvbW1pdCgpIHtcbiAgICByZXR1cm4ge307XG59XG5leHBvcnQgY29uc3QgUmVxdWVzdENvbW1pdCA9IHtcbiAgICBlbmNvZGUoXywgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlcXVlc3RDb21taXQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKF8pIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgdG9KU09OKF8pIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChfKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdENvbW1pdCgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXF1ZXN0TGlzdFNuYXBzaG90cygpIHtcbiAgICByZXR1cm4ge307XG59XG5leHBvcnQgY29uc3QgUmVxdWVzdExpc3RTbmFwc2hvdHMgPSB7XG4gICAgZW5jb2RlKF8sIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0TGlzdFNuYXBzaG90cygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04oXykge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICB0b0pTT04oXykge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKF8pIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0TGlzdFNuYXBzaG90cygpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXF1ZXN0T2ZmZXJTbmFwc2hvdCgpIHtcbiAgICByZXR1cm4geyBzbmFwc2hvdDogdW5kZWZpbmVkLCBhcHBIYXNoOiBuZXcgVWludDhBcnJheSgpIH07XG59XG5leHBvcnQgY29uc3QgUmVxdWVzdE9mZmVyU25hcHNob3QgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc25hcHNob3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgU25hcHNob3QuZW5jb2RlKG1lc3NhZ2Uuc25hcHNob3QsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYXBwSGFzaC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2UuYXBwSGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXF1ZXN0T2ZmZXJTbmFwc2hvdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc25hcHNob3QgPSBTbmFwc2hvdC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXBwSGFzaCA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzbmFwc2hvdDogaXNTZXQob2JqZWN0LnNuYXBzaG90KVxuICAgICAgICAgICAgICAgID8gU25hcHNob3QuZnJvbUpTT04ob2JqZWN0LnNuYXBzaG90KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXBwSGFzaDogaXNTZXQob2JqZWN0LmFwcEhhc2gpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmFwcEhhc2gpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uuc25hcHNob3QgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5zbmFwc2hvdCA9IG1lc3NhZ2Uuc25hcHNob3RcbiAgICAgICAgICAgICAgICA/IFNuYXBzaG90LnRvSlNPTihtZXNzYWdlLnNuYXBzaG90KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5hcHBIYXNoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYXBwSGFzaCA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmFwcEhhc2ggIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UuYXBwSGFzaCA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlcXVlc3RPZmZlclNuYXBzaG90KCk7XG4gICAgICAgIG1lc3NhZ2Uuc25hcHNob3QgPVxuICAgICAgICAgICAgb2JqZWN0LnNuYXBzaG90ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnNuYXBzaG90ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBTbmFwc2hvdC5mcm9tUGFydGlhbChvYmplY3Quc25hcHNob3QpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYXBwSGFzaCA9IG9iamVjdC5hcHBIYXNoID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVJlcXVlc3RMb2FkU25hcHNob3RDaHVuaygpIHtcbiAgICByZXR1cm4geyBoZWlnaHQ6IFwiMFwiLCBmb3JtYXQ6IDAsIGNodW5rOiAwIH07XG59XG5leHBvcnQgY29uc3QgUmVxdWVzdExvYWRTbmFwc2hvdENodW5rID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmhlaWdodCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkudWludDY0KG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5mb3JtYXQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLnVpbnQzMihtZXNzYWdlLmZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2h1bmsgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLnVpbnQzMihtZXNzYWdlLmNodW5rKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlcXVlc3RMb2FkU25hcHNob3RDaHVuaygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mb3JtYXQgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jaHVuayA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGVpZ2h0OiBpc1NldChvYmplY3QuaGVpZ2h0KSA/IFN0cmluZyhvYmplY3QuaGVpZ2h0KSA6IFwiMFwiLFxuICAgICAgICAgICAgZm9ybWF0OiBpc1NldChvYmplY3QuZm9ybWF0KSA/IE51bWJlcihvYmplY3QuZm9ybWF0KSA6IDAsXG4gICAgICAgICAgICBjaHVuazogaXNTZXQob2JqZWN0LmNodW5rKSA/IE51bWJlcihvYmplY3QuY2h1bmspIDogMCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmhlaWdodCAhPT0gdW5kZWZpbmVkICYmIChvYmouaGVpZ2h0ID0gbWVzc2FnZS5oZWlnaHQpO1xuICAgICAgICBtZXNzYWdlLmZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIChvYmouZm9ybWF0ID0gTWF0aC5yb3VuZChtZXNzYWdlLmZvcm1hdCkpO1xuICAgICAgICBtZXNzYWdlLmNodW5rICE9PSB1bmRlZmluZWQgJiYgKG9iai5jaHVuayA9IE1hdGgucm91bmQobWVzc2FnZS5jaHVuaykpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdExvYWRTbmFwc2hvdENodW5rKCk7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gb2JqZWN0LmhlaWdodCA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5mb3JtYXQgPSBvYmplY3QuZm9ybWF0ID8/IDA7XG4gICAgICAgIG1lc3NhZ2UuY2h1bmsgPSBvYmplY3QuY2h1bmsgPz8gMDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVxdWVzdEFwcGx5U25hcHNob3RDaHVuaygpIHtcbiAgICByZXR1cm4geyBpbmRleDogMCwgY2h1bms6IG5ldyBVaW50OEFycmF5KCksIHNlbmRlcjogXCJcIiB9O1xufVxuZXhwb3J0IGNvbnN0IFJlcXVlc3RBcHBseVNuYXBzaG90Q2h1bmsgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkudWludDMyKG1lc3NhZ2UuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNodW5rLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuYnl0ZXMobWVzc2FnZS5jaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VuZGVyICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcobWVzc2FnZS5zZW5kZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdEFwcGx5U25hcHNob3RDaHVuaygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5kZXggPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jaHVuayA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2VuZGVyID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmRleDogaXNTZXQob2JqZWN0LmluZGV4KSA/IE51bWJlcihvYmplY3QuaW5kZXgpIDogMCxcbiAgICAgICAgICAgIGNodW5rOiBpc1NldChvYmplY3QuY2h1bmspXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmNodW5rKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHNlbmRlcjogaXNTZXQob2JqZWN0LnNlbmRlcikgPyBTdHJpbmcob2JqZWN0LnNlbmRlcikgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuaW5kZXggIT09IHVuZGVmaW5lZCAmJiAob2JqLmluZGV4ID0gTWF0aC5yb3VuZChtZXNzYWdlLmluZGV4KSk7XG4gICAgICAgIG1lc3NhZ2UuY2h1bmsgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5jaHVuayA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmNodW5rICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmNodW5rIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnNlbmRlciAhPT0gdW5kZWZpbmVkICYmIChvYmouc2VuZGVyID0gbWVzc2FnZS5zZW5kZXIpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVxdWVzdEFwcGx5U25hcHNob3RDaHVuaygpO1xuICAgICAgICBtZXNzYWdlLmluZGV4ID0gb2JqZWN0LmluZGV4ID8/IDA7XG4gICAgICAgIG1lc3NhZ2UuY2h1bmsgPSBvYmplY3QuY2h1bmsgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5zZW5kZXIgPSBvYmplY3Quc2VuZGVyID8/IFwiXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGV4Y2VwdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBlY2hvOiB1bmRlZmluZWQsXG4gICAgICAgIGZsdXNoOiB1bmRlZmluZWQsXG4gICAgICAgIGluZm86IHVuZGVmaW5lZCxcbiAgICAgICAgc2V0T3B0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGluaXRDaGFpbjogdW5kZWZpbmVkLFxuICAgICAgICBxdWVyeTogdW5kZWZpbmVkLFxuICAgICAgICBiZWdpbkJsb2NrOiB1bmRlZmluZWQsXG4gICAgICAgIGNoZWNrVHg6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVsaXZlclR4OiB1bmRlZmluZWQsXG4gICAgICAgIGVuZEJsb2NrOiB1bmRlZmluZWQsXG4gICAgICAgIGNvbW1pdDogdW5kZWZpbmVkLFxuICAgICAgICBsaXN0U25hcHNob3RzOiB1bmRlZmluZWQsXG4gICAgICAgIG9mZmVyU25hcHNob3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgbG9hZFNuYXBzaG90Q2h1bms6IHVuZGVmaW5lZCxcbiAgICAgICAgYXBwbHlTbmFwc2hvdENodW5rOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5leGNlcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVzcG9uc2VFeGNlcHRpb24uZW5jb2RlKG1lc3NhZ2UuZXhjZXB0aW9uLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmVjaG8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVzcG9uc2VFY2hvLmVuY29kZShtZXNzYWdlLmVjaG8sIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmx1c2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVzcG9uc2VGbHVzaC5lbmNvZGUobWVzc2FnZS5mbHVzaCwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlc3BvbnNlSW5mby5lbmNvZGUobWVzc2FnZS5pbmZvLCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNldE9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBSZXNwb25zZVNldE9wdGlvbi5lbmNvZGUobWVzc2FnZS5zZXRPcHRpb24sIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5pdENoYWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlc3BvbnNlSW5pdENoYWluLmVuY29kZShtZXNzYWdlLmluaXRDaGFpbiwgd3JpdGVyLnVpbnQzMig1MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5xdWVyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBSZXNwb25zZVF1ZXJ5LmVuY29kZShtZXNzYWdlLnF1ZXJ5LCB3cml0ZXIudWludDMyKDU4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJlZ2luQmxvY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVzcG9uc2VCZWdpbkJsb2NrLmVuY29kZShtZXNzYWdlLmJlZ2luQmxvY2ssIHdyaXRlci51aW50MzIoNjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2hlY2tUeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBSZXNwb25zZUNoZWNrVHguZW5jb2RlKG1lc3NhZ2UuY2hlY2tUeCwgd3JpdGVyLnVpbnQzMig3NCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kZWxpdmVyVHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVzcG9uc2VEZWxpdmVyVHguZW5jb2RlKG1lc3NhZ2UuZGVsaXZlclR4LCB3cml0ZXIudWludDMyKDgyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmVuZEJsb2NrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlc3BvbnNlRW5kQmxvY2suZW5jb2RlKG1lc3NhZ2UuZW5kQmxvY2ssIHdyaXRlci51aW50MzIoOTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29tbWl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlc3BvbnNlQ29tbWl0LmVuY29kZShtZXNzYWdlLmNvbW1pdCwgd3JpdGVyLnVpbnQzMig5OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5saXN0U25hcHNob3RzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlc3BvbnNlTGlzdFNuYXBzaG90cy5lbmNvZGUobWVzc2FnZS5saXN0U25hcHNob3RzLCB3cml0ZXIudWludDMyKDEwNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5vZmZlclNuYXBzaG90ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlc3BvbnNlT2ZmZXJTbmFwc2hvdC5lbmNvZGUobWVzc2FnZS5vZmZlclNuYXBzaG90LCB3cml0ZXIudWludDMyKDExNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sb2FkU25hcHNob3RDaHVuayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBSZXNwb25zZUxvYWRTbmFwc2hvdENodW5rLmVuY29kZShtZXNzYWdlLmxvYWRTbmFwc2hvdENodW5rLCB3cml0ZXIudWludDMyKDEyMikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hcHBseVNuYXBzaG90Q2h1bmsgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmsuZW5jb2RlKG1lc3NhZ2UuYXBwbHlTbmFwc2hvdENodW5rLCB3cml0ZXIudWludDMyKDEzMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5leGNlcHRpb24gPSBSZXNwb25zZUV4Y2VwdGlvbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZWNobyA9IFJlc3BvbnNlRWNoby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmx1c2ggPSBSZXNwb25zZUZsdXNoLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbmZvID0gUmVzcG9uc2VJbmZvLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZXRPcHRpb24gPSBSZXNwb25zZVNldE9wdGlvbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5pdENoYWluID0gUmVzcG9uc2VJbml0Q2hhaW4uZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnF1ZXJ5ID0gUmVzcG9uc2VRdWVyeS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmVnaW5CbG9jayA9IFJlc3BvbnNlQmVnaW5CbG9jay5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2hlY2tUeCA9IFJlc3BvbnNlQ2hlY2tUeC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRlbGl2ZXJUeCA9IFJlc3BvbnNlRGVsaXZlclR4LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW5kQmxvY2sgPSBSZXNwb25zZUVuZEJsb2NrLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29tbWl0ID0gUmVzcG9uc2VDb21taXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5saXN0U25hcHNob3RzID0gUmVzcG9uc2VMaXN0U25hcHNob3RzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uub2ZmZXJTbmFwc2hvdCA9IFJlc3BvbnNlT2ZmZXJTbmFwc2hvdC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxvYWRTbmFwc2hvdENodW5rID0gUmVzcG9uc2VMb2FkU25hcHNob3RDaHVuay5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFwcGx5U25hcHNob3RDaHVuayA9IFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbjogaXNTZXQob2JqZWN0LmV4Y2VwdGlvbilcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlRXhjZXB0aW9uLmZyb21KU09OKG9iamVjdC5leGNlcHRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBlY2hvOiBpc1NldChvYmplY3QuZWNobykgPyBSZXNwb25zZUVjaG8uZnJvbUpTT04ob2JqZWN0LmVjaG8pIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmx1c2g6IGlzU2V0KG9iamVjdC5mbHVzaClcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlRmx1c2guZnJvbUpTT04ob2JqZWN0LmZsdXNoKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaW5mbzogaXNTZXQob2JqZWN0LmluZm8pID8gUmVzcG9uc2VJbmZvLmZyb21KU09OKG9iamVjdC5pbmZvKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNldE9wdGlvbjogaXNTZXQob2JqZWN0LnNldE9wdGlvbilcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlU2V0T3B0aW9uLmZyb21KU09OKG9iamVjdC5zZXRPcHRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBpbml0Q2hhaW46IGlzU2V0KG9iamVjdC5pbml0Q2hhaW4pXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUluaXRDaGFpbi5mcm9tSlNPTihvYmplY3QuaW5pdENoYWluKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcXVlcnk6IGlzU2V0KG9iamVjdC5xdWVyeSlcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlUXVlcnkuZnJvbUpTT04ob2JqZWN0LnF1ZXJ5KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYmVnaW5CbG9jazogaXNTZXQob2JqZWN0LmJlZ2luQmxvY2spXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUJlZ2luQmxvY2suZnJvbUpTT04ob2JqZWN0LmJlZ2luQmxvY2spXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjaGVja1R4OiBpc1NldChvYmplY3QuY2hlY2tUeClcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlQ2hlY2tUeC5mcm9tSlNPTihvYmplY3QuY2hlY2tUeClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRlbGl2ZXJUeDogaXNTZXQob2JqZWN0LmRlbGl2ZXJUeClcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlRGVsaXZlclR4LmZyb21KU09OKG9iamVjdC5kZWxpdmVyVHgpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBlbmRCbG9jazogaXNTZXQob2JqZWN0LmVuZEJsb2NrKVxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VFbmRCbG9jay5mcm9tSlNPTihvYmplY3QuZW5kQmxvY2spXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjb21taXQ6IGlzU2V0KG9iamVjdC5jb21taXQpXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUNvbW1pdC5mcm9tSlNPTihvYmplY3QuY29tbWl0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbGlzdFNuYXBzaG90czogaXNTZXQob2JqZWN0Lmxpc3RTbmFwc2hvdHMpXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUxpc3RTbmFwc2hvdHMuZnJvbUpTT04ob2JqZWN0Lmxpc3RTbmFwc2hvdHMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvZmZlclNuYXBzaG90OiBpc1NldChvYmplY3Qub2ZmZXJTbmFwc2hvdClcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlT2ZmZXJTbmFwc2hvdC5mcm9tSlNPTihvYmplY3Qub2ZmZXJTbmFwc2hvdClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxvYWRTbmFwc2hvdENodW5rOiBpc1NldChvYmplY3QubG9hZFNuYXBzaG90Q2h1bmspXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUxvYWRTbmFwc2hvdENodW5rLmZyb21KU09OKG9iamVjdC5sb2FkU25hcHNob3RDaHVuaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFwcGx5U25hcHNob3RDaHVuazogaXNTZXQob2JqZWN0LmFwcGx5U25hcHNob3RDaHVuaylcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rLmZyb21KU09OKG9iamVjdC5hcHBseVNuYXBzaG90Q2h1bmspXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5leGNlcHRpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5leGNlcHRpb24gPSBtZXNzYWdlLmV4Y2VwdGlvblxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VFeGNlcHRpb24udG9KU09OKG1lc3NhZ2UuZXhjZXB0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5lY2hvICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZWNobyA9IG1lc3NhZ2UuZWNobyA/IFJlc3BvbnNlRWNoby50b0pTT04obWVzc2FnZS5lY2hvKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuZmx1c2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5mbHVzaCA9IG1lc3NhZ2UuZmx1c2hcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlRmx1c2gudG9KU09OKG1lc3NhZ2UuZmx1c2gpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmluZm8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5pbmZvID0gbWVzc2FnZS5pbmZvID8gUmVzcG9uc2VJbmZvLnRvSlNPTihtZXNzYWdlLmluZm8pIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5zZXRPcHRpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5zZXRPcHRpb24gPSBtZXNzYWdlLnNldE9wdGlvblxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VTZXRPcHRpb24udG9KU09OKG1lc3NhZ2Uuc2V0T3B0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5pbml0Q2hhaW4gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5pbml0Q2hhaW4gPSBtZXNzYWdlLmluaXRDaGFpblxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VJbml0Q2hhaW4udG9KU09OKG1lc3NhZ2UuaW5pdENoYWluKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5xdWVyeSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnF1ZXJ5ID0gbWVzc2FnZS5xdWVyeVxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VRdWVyeS50b0pTT04obWVzc2FnZS5xdWVyeSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuYmVnaW5CbG9jayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmJlZ2luQmxvY2sgPSBtZXNzYWdlLmJlZ2luQmxvY2tcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlQmVnaW5CbG9jay50b0pTT04obWVzc2FnZS5iZWdpbkJsb2NrKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5jaGVja1R4ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouY2hlY2tUeCA9IG1lc3NhZ2UuY2hlY2tUeFxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VDaGVja1R4LnRvSlNPTihtZXNzYWdlLmNoZWNrVHgpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmRlbGl2ZXJUeCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmRlbGl2ZXJUeCA9IG1lc3NhZ2UuZGVsaXZlclR4XG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZURlbGl2ZXJUeC50b0pTT04obWVzc2FnZS5kZWxpdmVyVHgpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmVuZEJsb2NrICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZW5kQmxvY2sgPSBtZXNzYWdlLmVuZEJsb2NrXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUVuZEJsb2NrLnRvSlNPTihtZXNzYWdlLmVuZEJsb2NrKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5jb21taXQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5jb21taXQgPSBtZXNzYWdlLmNvbW1pdFxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VDb21taXQudG9KU09OKG1lc3NhZ2UuY29tbWl0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5saXN0U25hcHNob3RzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubGlzdFNuYXBzaG90cyA9IG1lc3NhZ2UubGlzdFNuYXBzaG90c1xuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VMaXN0U25hcHNob3RzLnRvSlNPTihtZXNzYWdlLmxpc3RTbmFwc2hvdHMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLm9mZmVyU25hcHNob3QgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5vZmZlclNuYXBzaG90ID0gbWVzc2FnZS5vZmZlclNuYXBzaG90XG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZU9mZmVyU25hcHNob3QudG9KU09OKG1lc3NhZ2Uub2ZmZXJTbmFwc2hvdClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UubG9hZFNuYXBzaG90Q2h1bmsgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5sb2FkU25hcHNob3RDaHVuayA9IG1lc3NhZ2UubG9hZFNuYXBzaG90Q2h1bmtcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlTG9hZFNuYXBzaG90Q2h1bmsudG9KU09OKG1lc3NhZ2UubG9hZFNuYXBzaG90Q2h1bmspXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmFwcGx5U25hcHNob3RDaHVuayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmFwcGx5U25hcHNob3RDaHVuayA9IG1lc3NhZ2UuYXBwbHlTbmFwc2hvdENodW5rXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUFwcGx5U25hcHNob3RDaHVuay50b0pTT04obWVzc2FnZS5hcHBseVNuYXBzaG90Q2h1bmspXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2UoKTtcbiAgICAgICAgbWVzc2FnZS5leGNlcHRpb24gPVxuICAgICAgICAgICAgb2JqZWN0LmV4Y2VwdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5leGNlcHRpb24gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlRXhjZXB0aW9uLmZyb21QYXJ0aWFsKG9iamVjdC5leGNlcHRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuZWNobyA9XG4gICAgICAgICAgICBvYmplY3QuZWNobyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5lY2hvICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUVjaG8uZnJvbVBhcnRpYWwob2JqZWN0LmVjaG8pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuZmx1c2ggPVxuICAgICAgICAgICAgb2JqZWN0LmZsdXNoICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmZsdXNoICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUZsdXNoLmZyb21QYXJ0aWFsKG9iamVjdC5mbHVzaClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5pbmZvID1cbiAgICAgICAgICAgIG9iamVjdC5pbmZvICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmluZm8gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlSW5mby5mcm9tUGFydGlhbChvYmplY3QuaW5mbylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zZXRPcHRpb24gPVxuICAgICAgICAgICAgb2JqZWN0LnNldE9wdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5zZXRPcHRpb24gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlU2V0T3B0aW9uLmZyb21QYXJ0aWFsKG9iamVjdC5zZXRPcHRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuaW5pdENoYWluID1cbiAgICAgICAgICAgIG9iamVjdC5pbml0Q2hhaW4gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuaW5pdENoYWluICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUluaXRDaGFpbi5mcm9tUGFydGlhbChvYmplY3QuaW5pdENoYWluKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnF1ZXJ5ID1cbiAgICAgICAgICAgIG9iamVjdC5xdWVyeSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5xdWVyeSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VRdWVyeS5mcm9tUGFydGlhbChvYmplY3QucXVlcnkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYmVnaW5CbG9jayA9XG4gICAgICAgICAgICBvYmplY3QuYmVnaW5CbG9jayAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5iZWdpbkJsb2NrICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUJlZ2luQmxvY2suZnJvbVBhcnRpYWwob2JqZWN0LmJlZ2luQmxvY2spXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuY2hlY2tUeCA9XG4gICAgICAgICAgICBvYmplY3QuY2hlY2tUeCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5jaGVja1R4ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUNoZWNrVHguZnJvbVBhcnRpYWwob2JqZWN0LmNoZWNrVHgpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuZGVsaXZlclR4ID1cbiAgICAgICAgICAgIG9iamVjdC5kZWxpdmVyVHggIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZGVsaXZlclR4ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZURlbGl2ZXJUeC5mcm9tUGFydGlhbChvYmplY3QuZGVsaXZlclR4KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmVuZEJsb2NrID1cbiAgICAgICAgICAgIG9iamVjdC5lbmRCbG9jayAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5lbmRCbG9jayAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VFbmRCbG9jay5mcm9tUGFydGlhbChvYmplY3QuZW5kQmxvY2spXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuY29tbWl0ID1cbiAgICAgICAgICAgIG9iamVjdC5jb21taXQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuY29tbWl0ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUNvbW1pdC5mcm9tUGFydGlhbChvYmplY3QuY29tbWl0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmxpc3RTbmFwc2hvdHMgPVxuICAgICAgICAgICAgb2JqZWN0Lmxpc3RTbmFwc2hvdHMgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QubGlzdFNuYXBzaG90cyAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VMaXN0U25hcHNob3RzLmZyb21QYXJ0aWFsKG9iamVjdC5saXN0U25hcHNob3RzKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLm9mZmVyU25hcHNob3QgPVxuICAgICAgICAgICAgb2JqZWN0Lm9mZmVyU25hcHNob3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Qub2ZmZXJTbmFwc2hvdCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VPZmZlclNuYXBzaG90LmZyb21QYXJ0aWFsKG9iamVjdC5vZmZlclNuYXBzaG90KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmxvYWRTbmFwc2hvdENodW5rID1cbiAgICAgICAgICAgIG9iamVjdC5sb2FkU25hcHNob3RDaHVuayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgb2JqZWN0LmxvYWRTbmFwc2hvdENodW5rICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBSZXNwb25zZUxvYWRTbmFwc2hvdENodW5rLmZyb21QYXJ0aWFsKG9iamVjdC5sb2FkU25hcHNob3RDaHVuaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5hcHBseVNuYXBzaG90Q2h1bmsgPVxuICAgICAgICAgICAgb2JqZWN0LmFwcGx5U25hcHNob3RDaHVuayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgb2JqZWN0LmFwcGx5U25hcHNob3RDaHVuayAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmsuZnJvbVBhcnRpYWwob2JqZWN0LmFwcGx5U25hcHNob3RDaHVuaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVzcG9uc2VFeGNlcHRpb24oKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IFwiXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBSZXNwb25zZUV4Y2VwdGlvbiA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5lcnJvciAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VFeGNlcHRpb24oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcnJvcjogaXNTZXQob2JqZWN0LmVycm9yKSA/IFN0cmluZyhvYmplY3QuZXJyb3IpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmVycm9yICE9PSB1bmRlZmluZWQgJiYgKG9iai5lcnJvciA9IG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VFeGNlcHRpb24oKTtcbiAgICAgICAgbWVzc2FnZS5lcnJvciA9IG9iamVjdC5lcnJvciA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXNwb25zZUVjaG8oKSB7XG4gICAgcmV0dXJuIHsgbWVzc2FnZTogXCJcIiB9O1xufVxuZXhwb3J0IGNvbnN0IFJlc3BvbnNlRWNobyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5tZXNzYWdlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlRWNobygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWVzc2FnZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVzc2FnZTogaXNTZXQob2JqZWN0Lm1lc3NhZ2UpID8gU3RyaW5nKG9iamVjdC5tZXNzYWdlKSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5tZXNzYWdlICE9PSB1bmRlZmluZWQgJiYgKG9iai5tZXNzYWdlID0gbWVzc2FnZS5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlRWNobygpO1xuICAgICAgICBtZXNzYWdlLm1lc3NhZ2UgPSBvYmplY3QubWVzc2FnZSA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXNwb25zZUZsdXNoKCkge1xuICAgIHJldHVybiB7fTtcbn1cbmV4cG9ydCBjb25zdCBSZXNwb25zZUZsdXNoID0ge1xuICAgIGVuY29kZShfLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VGbHVzaCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04oXykge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICB0b0pTT04oXykge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKF8pIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZUZsdXNoKCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVJlc3BvbnNlSW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBcIlwiLFxuICAgICAgICB2ZXJzaW9uOiBcIlwiLFxuICAgICAgICBhcHBWZXJzaW9uOiBcIjBcIixcbiAgICAgICAgbGFzdEJsb2NrSGVpZ2h0OiBcIjBcIixcbiAgICAgICAgbGFzdEJsb2NrQXBwSGFzaDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IFJlc3BvbnNlSW5mbyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5kYXRhICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52ZXJzaW9uICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS52ZXJzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hcHBWZXJzaW9uICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkudWludDY0KG1lc3NhZ2UuYXBwVmVyc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubGFzdEJsb2NrSGVpZ2h0ICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuaW50NjQobWVzc2FnZS5sYXN0QmxvY2tIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxhc3RCbG9ja0FwcEhhc2gubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQyKS5ieXRlcyhtZXNzYWdlLmxhc3RCbG9ja0FwcEhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VJbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kYXRhID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmVyc2lvbiA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFwcFZlcnNpb24gPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxhc3RCbG9ja0hlaWdodCA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5sYXN0QmxvY2tBcHBIYXNoID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IGlzU2V0KG9iamVjdC5kYXRhKSA/IFN0cmluZyhvYmplY3QuZGF0YSkgOiBcIlwiLFxuICAgICAgICAgICAgdmVyc2lvbjogaXNTZXQob2JqZWN0LnZlcnNpb24pID8gU3RyaW5nKG9iamVjdC52ZXJzaW9uKSA6IFwiXCIsXG4gICAgICAgICAgICBhcHBWZXJzaW9uOiBpc1NldChvYmplY3QuYXBwVmVyc2lvbikgPyBTdHJpbmcob2JqZWN0LmFwcFZlcnNpb24pIDogXCIwXCIsXG4gICAgICAgICAgICBsYXN0QmxvY2tIZWlnaHQ6IGlzU2V0KG9iamVjdC5sYXN0QmxvY2tIZWlnaHQpXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcob2JqZWN0Lmxhc3RCbG9ja0hlaWdodClcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICAgICAgbGFzdEJsb2NrQXBwSGFzaDogaXNTZXQob2JqZWN0Lmxhc3RCbG9ja0FwcEhhc2gpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0Lmxhc3RCbG9ja0FwcEhhc2gpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuZGF0YSAhPT0gdW5kZWZpbmVkICYmIChvYmouZGF0YSA9IG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIG1lc3NhZ2UudmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIChvYmoudmVyc2lvbiA9IG1lc3NhZ2UudmVyc2lvbik7XG4gICAgICAgIG1lc3NhZ2UuYXBwVmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIChvYmouYXBwVmVyc2lvbiA9IG1lc3NhZ2UuYXBwVmVyc2lvbik7XG4gICAgICAgIG1lc3NhZ2UubGFzdEJsb2NrSGVpZ2h0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubGFzdEJsb2NrSGVpZ2h0ID0gbWVzc2FnZS5sYXN0QmxvY2tIZWlnaHQpO1xuICAgICAgICBtZXNzYWdlLmxhc3RCbG9ja0FwcEhhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5sYXN0QmxvY2tBcHBIYXNoID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UubGFzdEJsb2NrQXBwSGFzaCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBtZXNzYWdlLmxhc3RCbG9ja0FwcEhhc2hcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlSW5mbygpO1xuICAgICAgICBtZXNzYWdlLmRhdGEgPSBvYmplY3QuZGF0YSA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLnZlcnNpb24gPSBvYmplY3QudmVyc2lvbiA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmFwcFZlcnNpb24gPSBvYmplY3QuYXBwVmVyc2lvbiA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5sYXN0QmxvY2tIZWlnaHQgPSBvYmplY3QubGFzdEJsb2NrSGVpZ2h0ID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLmxhc3RCbG9ja0FwcEhhc2ggPSBvYmplY3QubGFzdEJsb2NrQXBwSGFzaCA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXNwb25zZVNldE9wdGlvbigpIHtcbiAgICByZXR1cm4geyBjb2RlOiAwLCBsb2c6IFwiXCIsIGluZm86IFwiXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBSZXNwb25zZVNldE9wdGlvbiA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5jb2RlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQzMihtZXNzYWdlLmNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxvZyAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UubG9nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbmZvICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM0KS5zdHJpbmcobWVzc2FnZS5pbmZvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlU2V0T3B0aW9uKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb2RlID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9nID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5mbyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZTogaXNTZXQob2JqZWN0LmNvZGUpID8gTnVtYmVyKG9iamVjdC5jb2RlKSA6IDAsXG4gICAgICAgICAgICBsb2c6IGlzU2V0KG9iamVjdC5sb2cpID8gU3RyaW5nKG9iamVjdC5sb2cpIDogXCJcIixcbiAgICAgICAgICAgIGluZm86IGlzU2V0KG9iamVjdC5pbmZvKSA/IFN0cmluZyhvYmplY3QuaW5mbykgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuY29kZSAhPT0gdW5kZWZpbmVkICYmIChvYmouY29kZSA9IE1hdGgucm91bmQobWVzc2FnZS5jb2RlKSk7XG4gICAgICAgIG1lc3NhZ2UubG9nICE9PSB1bmRlZmluZWQgJiYgKG9iai5sb2cgPSBtZXNzYWdlLmxvZyk7XG4gICAgICAgIG1lc3NhZ2UuaW5mbyAhPT0gdW5kZWZpbmVkICYmIChvYmouaW5mbyA9IG1lc3NhZ2UuaW5mbyk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZVNldE9wdGlvbigpO1xuICAgICAgICBtZXNzYWdlLmNvZGUgPSBvYmplY3QuY29kZSA/PyAwO1xuICAgICAgICBtZXNzYWdlLmxvZyA9IG9iamVjdC5sb2cgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5pbmZvID0gb2JqZWN0LmluZm8gPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVzcG9uc2VJbml0Q2hhaW4oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uc2Vuc3VzUGFyYW1zOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtdLFxuICAgICAgICBhcHBIYXNoOiBuZXcgVWludDhBcnJheSgpLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgUmVzcG9uc2VJbml0Q2hhaW4gPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY29uc2Vuc3VzUGFyYW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbnNlbnN1c1BhcmFtcy5lbmNvZGUobWVzc2FnZS5jb25zZW5zdXNQYXJhbXMsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UudmFsaWRhdG9ycykge1xuICAgICAgICAgICAgVmFsaWRhdG9yVXBkYXRlLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmFwcEhhc2gubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI2KS5ieXRlcyhtZXNzYWdlLmFwcEhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VJbml0Q2hhaW4oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbnNlbnN1c1BhcmFtcyA9IENvbnNlbnN1c1BhcmFtcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmFsaWRhdG9ycy5wdXNoKFZhbGlkYXRvclVwZGF0ZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFwcEhhc2ggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29uc2Vuc3VzUGFyYW1zOiBpc1NldChvYmplY3QuY29uc2Vuc3VzUGFyYW1zKVxuICAgICAgICAgICAgICAgID8gQ29uc2Vuc3VzUGFyYW1zLmZyb21KU09OKG9iamVjdC5jb25zZW5zdXNQYXJhbXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxpZGF0b3JzOiBBcnJheS5pc0FycmF5KG9iamVjdD8udmFsaWRhdG9ycylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC52YWxpZGF0b3JzLm1hcCgoZSkgPT4gVmFsaWRhdG9yVXBkYXRlLmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBhcHBIYXNoOiBpc1NldChvYmplY3QuYXBwSGFzaClcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuYXBwSGFzaClcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5jb25zZW5zdXNQYXJhbXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5jb25zZW5zdXNQYXJhbXMgPSBtZXNzYWdlLmNvbnNlbnN1c1BhcmFtc1xuICAgICAgICAgICAgICAgID8gQ29uc2Vuc3VzUGFyYW1zLnRvSlNPTihtZXNzYWdlLmNvbnNlbnN1c1BhcmFtcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbGlkYXRvcnMpIHtcbiAgICAgICAgICAgIG9iai52YWxpZGF0b3JzID0gbWVzc2FnZS52YWxpZGF0b3JzLm1hcCgoZSkgPT4gZSA/IFZhbGlkYXRvclVwZGF0ZS50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnZhbGlkYXRvcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlLmFwcEhhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5hcHBIYXNoID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuYXBwSGFzaCAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5hcHBIYXNoIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VJbml0Q2hhaW4oKTtcbiAgICAgICAgbWVzc2FnZS5jb25zZW5zdXNQYXJhbXMgPVxuICAgICAgICAgICAgb2JqZWN0LmNvbnNlbnN1c1BhcmFtcyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5jb25zZW5zdXNQYXJhbXMgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IENvbnNlbnN1c1BhcmFtcy5mcm9tUGFydGlhbChvYmplY3QuY29uc2Vuc3VzUGFyYW1zKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnZhbGlkYXRvcnMgPVxuICAgICAgICAgICAgb2JqZWN0LnZhbGlkYXRvcnM/Lm1hcCgoZSkgPT4gVmFsaWRhdG9yVXBkYXRlLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS5hcHBIYXNoID0gb2JqZWN0LmFwcEhhc2ggPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVzcG9uc2VRdWVyeSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb2RlOiAwLFxuICAgICAgICBsb2c6IFwiXCIsXG4gICAgICAgIGluZm86IFwiXCIsXG4gICAgICAgIGluZGV4OiBcIjBcIixcbiAgICAgICAga2V5OiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICB2YWx1ZTogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgcHJvb2ZPcHM6IHVuZGVmaW5lZCxcbiAgICAgICAgaGVpZ2h0OiBcIjBcIixcbiAgICAgICAgY29kZXNwYWNlOiBcIlwiLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgUmVzcG9uc2VRdWVyeSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5jb2RlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQzMihtZXNzYWdlLmNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxvZyAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UubG9nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbmZvICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM0KS5zdHJpbmcobWVzc2FnZS5pbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbmRleCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLmludDY0KG1lc3NhZ2UuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmtleS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTApLmJ5dGVzKG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52YWx1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTgpLmJ5dGVzKG1lc3NhZ2UudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnByb29mT3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFByb29mT3BzLmVuY29kZShtZXNzYWdlLnByb29mT3BzLCB3cml0ZXIudWludDMyKDY2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmhlaWdodCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNzIpLmludDY0KG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb2Rlc3BhY2UgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoODIpLnN0cmluZyhtZXNzYWdlLmNvZGVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZVF1ZXJ5KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb2RlID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9nID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5mbyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmluZGV4ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmFsdWUgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnByb29mT3BzID0gUHJvb2ZPcHMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhlaWdodCA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29kZXNwYWNlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2RlOiBpc1NldChvYmplY3QuY29kZSkgPyBOdW1iZXIob2JqZWN0LmNvZGUpIDogMCxcbiAgICAgICAgICAgIGxvZzogaXNTZXQob2JqZWN0LmxvZykgPyBTdHJpbmcob2JqZWN0LmxvZykgOiBcIlwiLFxuICAgICAgICAgICAgaW5mbzogaXNTZXQob2JqZWN0LmluZm8pID8gU3RyaW5nKG9iamVjdC5pbmZvKSA6IFwiXCIsXG4gICAgICAgICAgICBpbmRleDogaXNTZXQob2JqZWN0LmluZGV4KSA/IFN0cmluZyhvYmplY3QuaW5kZXgpIDogXCIwXCIsXG4gICAgICAgICAgICBrZXk6IGlzU2V0KG9iamVjdC5rZXkpID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5rZXkpIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHZhbHVlOiBpc1NldChvYmplY3QudmFsdWUpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnZhbHVlKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHByb29mT3BzOiBpc1NldChvYmplY3QucHJvb2ZPcHMpXG4gICAgICAgICAgICAgICAgPyBQcm9vZk9wcy5mcm9tSlNPTihvYmplY3QucHJvb2ZPcHMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBoZWlnaHQ6IGlzU2V0KG9iamVjdC5oZWlnaHQpID8gU3RyaW5nKG9iamVjdC5oZWlnaHQpIDogXCIwXCIsXG4gICAgICAgICAgICBjb2Rlc3BhY2U6IGlzU2V0KG9iamVjdC5jb2Rlc3BhY2UpID8gU3RyaW5nKG9iamVjdC5jb2Rlc3BhY2UpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmNvZGUgIT09IHVuZGVmaW5lZCAmJiAob2JqLmNvZGUgPSBNYXRoLnJvdW5kKG1lc3NhZ2UuY29kZSkpO1xuICAgICAgICBtZXNzYWdlLmxvZyAhPT0gdW5kZWZpbmVkICYmIChvYmoubG9nID0gbWVzc2FnZS5sb2cpO1xuICAgICAgICBtZXNzYWdlLmluZm8gIT09IHVuZGVmaW5lZCAmJiAob2JqLmluZm8gPSBtZXNzYWdlLmluZm8pO1xuICAgICAgICBtZXNzYWdlLmluZGV4ICE9PSB1bmRlZmluZWQgJiYgKG9iai5pbmRleCA9IG1lc3NhZ2UuaW5kZXgpO1xuICAgICAgICBtZXNzYWdlLmtleSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmtleSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmtleSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5rZXkgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UudmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai52YWx1ZSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLnZhbHVlICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLnZhbHVlIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnByb29mT3BzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucHJvb2ZPcHMgPSBtZXNzYWdlLnByb29mT3BzXG4gICAgICAgICAgICAgICAgPyBQcm9vZk9wcy50b0pTT04obWVzc2FnZS5wcm9vZk9wcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5oZWlnaHQgPSBtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIG1lc3NhZ2UuY29kZXNwYWNlICE9PSB1bmRlZmluZWQgJiYgKG9iai5jb2Rlc3BhY2UgPSBtZXNzYWdlLmNvZGVzcGFjZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZVF1ZXJ5KCk7XG4gICAgICAgIG1lc3NhZ2UuY29kZSA9IG9iamVjdC5jb2RlID8/IDA7XG4gICAgICAgIG1lc3NhZ2UubG9nID0gb2JqZWN0LmxvZyA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmluZm8gPSBvYmplY3QuaW5mbyA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmluZGV4ID0gb2JqZWN0LmluZGV4ID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLmtleSA9IG9iamVjdC5rZXkgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS52YWx1ZSA9IG9iamVjdC52YWx1ZSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnByb29mT3BzID1cbiAgICAgICAgICAgIG9iamVjdC5wcm9vZk9wcyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wcm9vZk9wcyAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUHJvb2ZPcHMuZnJvbVBhcnRpYWwob2JqZWN0LnByb29mT3BzKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmhlaWdodCA9IG9iamVjdC5oZWlnaHQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UuY29kZXNwYWNlID0gb2JqZWN0LmNvZGVzcGFjZSA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXNwb25zZUJlZ2luQmxvY2soKSB7XG4gICAgcmV0dXJuIHsgZXZlbnRzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IFJlc3BvbnNlQmVnaW5CbG9jayA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5ldmVudHMpIHtcbiAgICAgICAgICAgIEV2ZW50LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VCZWdpbkJsb2NrKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudHMucHVzaChFdmVudC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXZlbnRzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uZXZlbnRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmV2ZW50cy5tYXAoKGUpID0+IEV2ZW50LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZXZlbnRzKSB7XG4gICAgICAgICAgICBvYmouZXZlbnRzID0gbWVzc2FnZS5ldmVudHMubWFwKChlKSA9PiAoZSA/IEV2ZW50LnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmV2ZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZUJlZ2luQmxvY2soKTtcbiAgICAgICAgbWVzc2FnZS5ldmVudHMgPSBvYmplY3QuZXZlbnRzPy5tYXAoKGUpID0+IEV2ZW50LmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVzcG9uc2VDaGVja1R4KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvZGU6IDAsXG4gICAgICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIGxvZzogXCJcIixcbiAgICAgICAgaW5mbzogXCJcIixcbiAgICAgICAgZ2FzV2FudGVkOiBcIjBcIixcbiAgICAgICAgZ2FzVXNlZDogXCIwXCIsXG4gICAgICAgIGV2ZW50czogW10sXG4gICAgICAgIGNvZGVzcGFjZTogXCJcIixcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IFJlc3BvbnNlQ2hlY2tUeCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5jb2RlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQzMihtZXNzYWdlLmNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5ieXRlcyhtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxvZyAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UubG9nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbmZvICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM0KS5zdHJpbmcobWVzc2FnZS5pbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5nYXNXYW50ZWQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS5pbnQ2NChtZXNzYWdlLmdhc1dhbnRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZ2FzVXNlZCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDgpLmludDY0KG1lc3NhZ2UuZ2FzVXNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZXZlbnRzKSB7XG4gICAgICAgICAgICBFdmVudC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMig1OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb2Rlc3BhY2UgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNjYpLnN0cmluZyhtZXNzYWdlLmNvZGVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZUNoZWNrVHgoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvZGUgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kYXRhID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5sb2cgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbmZvID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2FzV2FudGVkID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmdhc1VzZWQgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXZlbnRzLnB1c2goRXZlbnQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb2Rlc3BhY2UgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvZGU6IGlzU2V0KG9iamVjdC5jb2RlKSA/IE51bWJlcihvYmplY3QuY29kZSkgOiAwLFxuICAgICAgICAgICAgZGF0YTogaXNTZXQob2JqZWN0LmRhdGEpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmRhdGEpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgbG9nOiBpc1NldChvYmplY3QubG9nKSA/IFN0cmluZyhvYmplY3QubG9nKSA6IFwiXCIsXG4gICAgICAgICAgICBpbmZvOiBpc1NldChvYmplY3QuaW5mbykgPyBTdHJpbmcob2JqZWN0LmluZm8pIDogXCJcIixcbiAgICAgICAgICAgIGdhc1dhbnRlZDogaXNTZXQob2JqZWN0Lmdhc193YW50ZWQpID8gU3RyaW5nKG9iamVjdC5nYXNfd2FudGVkKSA6IFwiMFwiLFxuICAgICAgICAgICAgZ2FzVXNlZDogaXNTZXQob2JqZWN0Lmdhc191c2VkKSA/IFN0cmluZyhvYmplY3QuZ2FzX3VzZWQpIDogXCIwXCIsXG4gICAgICAgICAgICBldmVudHM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5ldmVudHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QuZXZlbnRzLm1hcCgoZSkgPT4gRXZlbnQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIGNvZGVzcGFjZTogaXNTZXQob2JqZWN0LmNvZGVzcGFjZSkgPyBTdHJpbmcob2JqZWN0LmNvZGVzcGFjZSkgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuY29kZSAhPT0gdW5kZWZpbmVkICYmIChvYmouY29kZSA9IE1hdGgucm91bmQobWVzc2FnZS5jb2RlKSk7XG4gICAgICAgIG1lc3NhZ2UuZGF0YSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmRhdGEgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmRhdGEgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UubG9nICE9PSB1bmRlZmluZWQgJiYgKG9iai5sb2cgPSBtZXNzYWdlLmxvZyk7XG4gICAgICAgIG1lc3NhZ2UuaW5mbyAhPT0gdW5kZWZpbmVkICYmIChvYmouaW5mbyA9IG1lc3NhZ2UuaW5mbyk7XG4gICAgICAgIG1lc3NhZ2UuZ2FzV2FudGVkICE9PSB1bmRlZmluZWQgJiYgKG9iai5nYXNfd2FudGVkID0gbWVzc2FnZS5nYXNXYW50ZWQpO1xuICAgICAgICBtZXNzYWdlLmdhc1VzZWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmdhc191c2VkID0gbWVzc2FnZS5nYXNVc2VkKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZXZlbnRzKSB7XG4gICAgICAgICAgICBvYmouZXZlbnRzID0gbWVzc2FnZS5ldmVudHMubWFwKChlKSA9PiAoZSA/IEV2ZW50LnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmV2ZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UuY29kZXNwYWNlICE9PSB1bmRlZmluZWQgJiYgKG9iai5jb2Rlc3BhY2UgPSBtZXNzYWdlLmNvZGVzcGFjZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZUNoZWNrVHgoKTtcbiAgICAgICAgbWVzc2FnZS5jb2RlID0gb2JqZWN0LmNvZGUgPz8gMDtcbiAgICAgICAgbWVzc2FnZS5kYXRhID0gb2JqZWN0LmRhdGEgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5sb2cgPSBvYmplY3QubG9nID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuaW5mbyA9IG9iamVjdC5pbmZvID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZ2FzV2FudGVkID0gb2JqZWN0Lmdhc1dhbnRlZCA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5nYXNVc2VkID0gb2JqZWN0Lmdhc1VzZWQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UuZXZlbnRzID0gb2JqZWN0LmV2ZW50cz8ubWFwKChlKSA9PiBFdmVudC5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UuY29kZXNwYWNlID0gb2JqZWN0LmNvZGVzcGFjZSA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXNwb25zZURlbGl2ZXJUeCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb2RlOiAwLFxuICAgICAgICBkYXRhOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBsb2c6IFwiXCIsXG4gICAgICAgIGluZm86IFwiXCIsXG4gICAgICAgIGdhc1dhbnRlZDogXCIwXCIsXG4gICAgICAgIGdhc1VzZWQ6IFwiMFwiLFxuICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICBjb2Rlc3BhY2U6IFwiXCIsXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBSZXNwb25zZURlbGl2ZXJUeCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5jb2RlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQzMihtZXNzYWdlLmNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5ieXRlcyhtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxvZyAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UubG9nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbmZvICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM0KS5zdHJpbmcobWVzc2FnZS5pbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5nYXNXYW50ZWQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS5pbnQ2NChtZXNzYWdlLmdhc1dhbnRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZ2FzVXNlZCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDgpLmludDY0KG1lc3NhZ2UuZ2FzVXNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZXZlbnRzKSB7XG4gICAgICAgICAgICBFdmVudC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMig1OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb2Rlc3BhY2UgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNjYpLnN0cmluZyhtZXNzYWdlLmNvZGVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZURlbGl2ZXJUeCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29kZSA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRhdGEgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxvZyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmluZm8gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5nYXNXYW50ZWQgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2FzVXNlZCA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudHMucHVzaChFdmVudC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvZGVzcGFjZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZTogaXNTZXQob2JqZWN0LmNvZGUpID8gTnVtYmVyKG9iamVjdC5jb2RlKSA6IDAsXG4gICAgICAgICAgICBkYXRhOiBpc1NldChvYmplY3QuZGF0YSlcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuZGF0YSlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgICBsb2c6IGlzU2V0KG9iamVjdC5sb2cpID8gU3RyaW5nKG9iamVjdC5sb2cpIDogXCJcIixcbiAgICAgICAgICAgIGluZm86IGlzU2V0KG9iamVjdC5pbmZvKSA/IFN0cmluZyhvYmplY3QuaW5mbykgOiBcIlwiLFxuICAgICAgICAgICAgZ2FzV2FudGVkOiBpc1NldChvYmplY3QuZ2FzX3dhbnRlZCkgPyBTdHJpbmcob2JqZWN0Lmdhc193YW50ZWQpIDogXCIwXCIsXG4gICAgICAgICAgICBnYXNVc2VkOiBpc1NldChvYmplY3QuZ2FzX3VzZWQpID8gU3RyaW5nKG9iamVjdC5nYXNfdXNlZCkgOiBcIjBcIixcbiAgICAgICAgICAgIGV2ZW50czogQXJyYXkuaXNBcnJheShvYmplY3Q/LmV2ZW50cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5ldmVudHMubWFwKChlKSA9PiBFdmVudC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgY29kZXNwYWNlOiBpc1NldChvYmplY3QuY29kZXNwYWNlKSA/IFN0cmluZyhvYmplY3QuY29kZXNwYWNlKSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5jb2RlICE9PSB1bmRlZmluZWQgJiYgKG9iai5jb2RlID0gTWF0aC5yb3VuZChtZXNzYWdlLmNvZGUpKTtcbiAgICAgICAgbWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZGF0YSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UuZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5sb2cgIT09IHVuZGVmaW5lZCAmJiAob2JqLmxvZyA9IG1lc3NhZ2UubG9nKTtcbiAgICAgICAgbWVzc2FnZS5pbmZvICE9PSB1bmRlZmluZWQgJiYgKG9iai5pbmZvID0gbWVzc2FnZS5pbmZvKTtcbiAgICAgICAgbWVzc2FnZS5nYXNXYW50ZWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmdhc193YW50ZWQgPSBtZXNzYWdlLmdhc1dhbnRlZCk7XG4gICAgICAgIG1lc3NhZ2UuZ2FzVXNlZCAhPT0gdW5kZWZpbmVkICYmIChvYmouZ2FzX3VzZWQgPSBtZXNzYWdlLmdhc1VzZWQpO1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudHMpIHtcbiAgICAgICAgICAgIG9iai5ldmVudHMgPSBtZXNzYWdlLmV2ZW50cy5tYXAoKGUpID0+IChlID8gRXZlbnQudG9KU09OKGUpIDogdW5kZWZpbmVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouZXZlbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZS5jb2Rlc3BhY2UgIT09IHVuZGVmaW5lZCAmJiAob2JqLmNvZGVzcGFjZSA9IG1lc3NhZ2UuY29kZXNwYWNlKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlRGVsaXZlclR4KCk7XG4gICAgICAgIG1lc3NhZ2UuY29kZSA9IG9iamVjdC5jb2RlID8/IDA7XG4gICAgICAgIG1lc3NhZ2UuZGF0YSA9IG9iamVjdC5kYXRhID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UubG9nID0gb2JqZWN0LmxvZyA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmluZm8gPSBvYmplY3QuaW5mbyA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmdhc1dhbnRlZCA9IG9iamVjdC5nYXNXYW50ZWQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UuZ2FzVXNlZCA9IG9iamVjdC5nYXNVc2VkID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLmV2ZW50cyA9IG9iamVjdC5ldmVudHM/Lm1hcCgoZSkgPT4gRXZlbnQuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLmNvZGVzcGFjZSA9IG9iamVjdC5jb2Rlc3BhY2UgPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVzcG9uc2VFbmRCbG9jaygpIHtcbiAgICByZXR1cm4geyB2YWxpZGF0b3JVcGRhdGVzOiBbXSwgY29uc2Vuc3VzUGFyYW1VcGRhdGVzOiB1bmRlZmluZWQsIGV2ZW50czogW10gfTtcbn1cbmV4cG9ydCBjb25zdCBSZXNwb25zZUVuZEJsb2NrID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnZhbGlkYXRvclVwZGF0ZXMpIHtcbiAgICAgICAgICAgIFZhbGlkYXRvclVwZGF0ZS5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb25zZW5zdXNQYXJhbVVwZGF0ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQ29uc2Vuc3VzUGFyYW1zLmVuY29kZShtZXNzYWdlLmNvbnNlbnN1c1BhcmFtVXBkYXRlcywgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5ldmVudHMpIHtcbiAgICAgICAgICAgIEV2ZW50LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VFbmRCbG9jaygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmFsaWRhdG9yVXBkYXRlcy5wdXNoKFZhbGlkYXRvclVwZGF0ZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbnNlbnN1c1BhcmFtVXBkYXRlcyA9IENvbnNlbnN1c1BhcmFtcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXZlbnRzLnB1c2goRXZlbnQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbGlkYXRvclVwZGF0ZXM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py52YWxpZGF0b3JVcGRhdGVzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnZhbGlkYXRvclVwZGF0ZXMubWFwKChlKSA9PiBWYWxpZGF0b3JVcGRhdGUuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIGNvbnNlbnN1c1BhcmFtVXBkYXRlczogaXNTZXQob2JqZWN0LmNvbnNlbnN1c1BhcmFtVXBkYXRlcylcbiAgICAgICAgICAgICAgICA/IENvbnNlbnN1c1BhcmFtcy5mcm9tSlNPTihvYmplY3QuY29uc2Vuc3VzUGFyYW1VcGRhdGVzKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZXZlbnRzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uZXZlbnRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmV2ZW50cy5tYXAoKGUpID0+IEV2ZW50LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2UudmFsaWRhdG9yVXBkYXRlcykge1xuICAgICAgICAgICAgb2JqLnZhbGlkYXRvclVwZGF0ZXMgPSBtZXNzYWdlLnZhbGlkYXRvclVwZGF0ZXMubWFwKChlKSA9PiBlID8gVmFsaWRhdG9yVXBkYXRlLnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmoudmFsaWRhdG9yVXBkYXRlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UuY29uc2Vuc3VzUGFyYW1VcGRhdGVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouY29uc2Vuc3VzUGFyYW1VcGRhdGVzID0gbWVzc2FnZS5jb25zZW5zdXNQYXJhbVVwZGF0ZXNcbiAgICAgICAgICAgICAgICA/IENvbnNlbnN1c1BhcmFtcy50b0pTT04obWVzc2FnZS5jb25zZW5zdXNQYXJhbVVwZGF0ZXMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudHMpIHtcbiAgICAgICAgICAgIG9iai5ldmVudHMgPSBtZXNzYWdlLmV2ZW50cy5tYXAoKGUpID0+IChlID8gRXZlbnQudG9KU09OKGUpIDogdW5kZWZpbmVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouZXZlbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlRW5kQmxvY2soKTtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JVcGRhdGVzID1cbiAgICAgICAgICAgIG9iamVjdC52YWxpZGF0b3JVcGRhdGVzPy5tYXAoKGUpID0+IFZhbGlkYXRvclVwZGF0ZS5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UuY29uc2Vuc3VzUGFyYW1VcGRhdGVzID1cbiAgICAgICAgICAgIG9iamVjdC5jb25zZW5zdXNQYXJhbVVwZGF0ZXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIG9iamVjdC5jb25zZW5zdXNQYXJhbVVwZGF0ZXMgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IENvbnNlbnN1c1BhcmFtcy5mcm9tUGFydGlhbChvYmplY3QuY29uc2Vuc3VzUGFyYW1VcGRhdGVzKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmV2ZW50cyA9IG9iamVjdC5ldmVudHM/Lm1hcCgoZSkgPT4gRXZlbnQuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXNwb25zZUNvbW1pdCgpIHtcbiAgICByZXR1cm4geyBkYXRhOiBuZXcgVWludDhBcnJheSgpLCByZXRhaW5IZWlnaHQ6IFwiMFwiIH07XG59XG5leHBvcnQgY29uc3QgUmVzcG9uc2VDb21taXQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZGF0YS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmV0YWluSGVpZ2h0ICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50NjQobWVzc2FnZS5yZXRhaW5IZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VDb21taXQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRhdGEgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJldGFpbkhlaWdodCA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IGlzU2V0KG9iamVjdC5kYXRhKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5kYXRhKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHJldGFpbkhlaWdodDogaXNTZXQob2JqZWN0LnJldGFpbkhlaWdodClcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3QucmV0YWluSGVpZ2h0KVxuICAgICAgICAgICAgICAgIDogXCIwXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZGF0YSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UuZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5yZXRhaW5IZWlnaHQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5yZXRhaW5IZWlnaHQgPSBtZXNzYWdlLnJldGFpbkhlaWdodCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZUNvbW1pdCgpO1xuICAgICAgICBtZXNzYWdlLmRhdGEgPSBvYmplY3QuZGF0YSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnJldGFpbkhlaWdodCA9IG9iamVjdC5yZXRhaW5IZWlnaHQgPz8gXCIwXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVJlc3BvbnNlTGlzdFNuYXBzaG90cygpIHtcbiAgICByZXR1cm4geyBzbmFwc2hvdHM6IFtdIH07XG59XG5leHBvcnQgY29uc3QgUmVzcG9uc2VMaXN0U25hcHNob3RzID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnNuYXBzaG90cykge1xuICAgICAgICAgICAgU25hcHNob3QuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZUxpc3RTbmFwc2hvdHMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNuYXBzaG90cy5wdXNoKFNuYXBzaG90LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzbmFwc2hvdHM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5zbmFwc2hvdHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3Quc25hcHNob3RzLm1hcCgoZSkgPT4gU25hcHNob3QuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5zbmFwc2hvdHMpIHtcbiAgICAgICAgICAgIG9iai5zbmFwc2hvdHMgPSBtZXNzYWdlLnNuYXBzaG90cy5tYXAoKGUpID0+IGUgPyBTbmFwc2hvdC50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnNuYXBzaG90cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXNwb25zZUxpc3RTbmFwc2hvdHMoKTtcbiAgICAgICAgbWVzc2FnZS5zbmFwc2hvdHMgPVxuICAgICAgICAgICAgb2JqZWN0LnNuYXBzaG90cz8ubWFwKChlKSA9PiBTbmFwc2hvdC5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVJlc3BvbnNlT2ZmZXJTbmFwc2hvdCgpIHtcbiAgICByZXR1cm4geyByZXN1bHQ6IDAgfTtcbn1cbmV4cG9ydCBjb25zdCBSZXNwb25zZU9mZmVyU25hcHNob3QgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UucmVzdWx0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDMyKG1lc3NhZ2UucmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlT2ZmZXJTbmFwc2hvdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVzdWx0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3VsdDogaXNTZXQob2JqZWN0LnJlc3VsdClcbiAgICAgICAgICAgICAgICA/IHJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHRGcm9tSlNPTihvYmplY3QucmVzdWx0KVxuICAgICAgICAgICAgICAgIDogMCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnJlc3VsdCA9IHJlc3BvbnNlT2ZmZXJTbmFwc2hvdF9SZXN1bHRUb0pTT04obWVzc2FnZS5yZXN1bHQpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlT2ZmZXJTbmFwc2hvdCgpO1xuICAgICAgICBtZXNzYWdlLnJlc3VsdCA9IG9iamVjdC5yZXN1bHQgPz8gMDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVzcG9uc2VMb2FkU25hcHNob3RDaHVuaygpIHtcbiAgICByZXR1cm4geyBjaHVuazogbmV3IFVpbnQ4QXJyYXkoKSB9O1xufVxuZXhwb3J0IGNvbnN0IFJlc3BvbnNlTG9hZFNuYXBzaG90Q2h1bmsgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY2h1bmsubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5ieXRlcyhtZXNzYWdlLmNodW5rKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlTG9hZFNuYXBzaG90Q2h1bmsoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNodW5rID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNodW5rOiBpc1NldChvYmplY3QuY2h1bmspXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmNodW5rKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmNodW5rICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouY2h1bmsgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5jaHVuayAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5jaHVuayA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3BvbnNlTG9hZFNuYXBzaG90Q2h1bmsoKTtcbiAgICAgICAgbWVzc2FnZS5jaHVuayA9IG9iamVjdC5jaHVuayA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZXNwb25zZUFwcGx5U25hcHNob3RDaHVuaygpIHtcbiAgICByZXR1cm4geyByZXN1bHQ6IDAsIHJlZmV0Y2hDaHVua3M6IFtdLCByZWplY3RTZW5kZXJzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnJlc3VsdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLnJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpO1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5yZWZldGNoQ2h1bmtzKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKHYpO1xuICAgICAgICB9XG4gICAgICAgIHdyaXRlci5sZGVsaW0oKTtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UucmVqZWN0U2VuZGVycykge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmsoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlc3VsdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZDIgPSByZWFkZXIudWludDMyKCkgKyByZWFkZXIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yZWZldGNoQ2h1bmtzLnB1c2gocmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVmZXRjaENodW5rcy5wdXNoKHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlamVjdFNlbmRlcnMucHVzaChyZWFkZXIuc3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN1bHQ6IGlzU2V0KG9iamVjdC5yZXN1bHQpXG4gICAgICAgICAgICAgICAgPyByZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHRGcm9tSlNPTihvYmplY3QucmVzdWx0KVxuICAgICAgICAgICAgICAgIDogMCxcbiAgICAgICAgICAgIHJlZmV0Y2hDaHVua3M6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5yZWZldGNoQ2h1bmtzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnJlZmV0Y2hDaHVua3MubWFwKChlKSA9PiBOdW1iZXIoZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIHJlamVjdFNlbmRlcnM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5yZWplY3RTZW5kZXJzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnJlamVjdFNlbmRlcnMubWFwKChlKSA9PiBTdHJpbmcoZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnJlc3VsdCA9IHJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdFRvSlNPTihtZXNzYWdlLnJlc3VsdCkpO1xuICAgICAgICBpZiAobWVzc2FnZS5yZWZldGNoQ2h1bmtzKSB7XG4gICAgICAgICAgICBvYmoucmVmZXRjaENodW5rcyA9IG1lc3NhZ2UucmVmZXRjaENodW5rcy5tYXAoKGUpID0+IE1hdGgucm91bmQoZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnJlZmV0Y2hDaHVua3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZWplY3RTZW5kZXJzKSB7XG4gICAgICAgICAgICBvYmoucmVqZWN0U2VuZGVycyA9IG1lc3NhZ2UucmVqZWN0U2VuZGVycy5tYXAoKGUpID0+IGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnJlamVjdFNlbmRlcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmsoKTtcbiAgICAgICAgbWVzc2FnZS5yZXN1bHQgPSBvYmplY3QucmVzdWx0ID8/IDA7XG4gICAgICAgIG1lc3NhZ2UucmVmZXRjaENodW5rcyA9IG9iamVjdC5yZWZldGNoQ2h1bmtzPy5tYXAoKGUpID0+IGUpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLnJlamVjdFNlbmRlcnMgPSBvYmplY3QucmVqZWN0U2VuZGVycz8ubWFwKChlKSA9PiBlKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29uc2Vuc3VzUGFyYW1zKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJsb2NrOiB1bmRlZmluZWQsXG4gICAgICAgIGV2aWRlbmNlOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbGlkYXRvcjogdW5kZWZpbmVkLFxuICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBDb25zZW5zdXNQYXJhbXMgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYmxvY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQmxvY2tQYXJhbXMuZW5jb2RlKG1lc3NhZ2UuYmxvY2ssIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXZpZGVuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgRXZpZGVuY2VQYXJhbXMuZW5jb2RlKG1lc3NhZ2UuZXZpZGVuY2UsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudmFsaWRhdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFZhbGlkYXRvclBhcmFtcy5lbmNvZGUobWVzc2FnZS52YWxpZGF0b3IsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudmVyc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZXJzaW9uUGFyYW1zLmVuY29kZShtZXNzYWdlLnZlcnNpb24sIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb25zZW5zdXNQYXJhbXMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJsb2NrID0gQmxvY2tQYXJhbXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2aWRlbmNlID0gRXZpZGVuY2VQYXJhbXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbGlkYXRvciA9IFZhbGlkYXRvclBhcmFtcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmVyc2lvbiA9IFZlcnNpb25QYXJhbXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmxvY2s6IGlzU2V0KG9iamVjdC5ibG9jaylcbiAgICAgICAgICAgICAgICA/IEJsb2NrUGFyYW1zLmZyb21KU09OKG9iamVjdC5ibG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGV2aWRlbmNlOiBpc1NldChvYmplY3QuZXZpZGVuY2UpXG4gICAgICAgICAgICAgICAgPyBFdmlkZW5jZVBhcmFtcy5mcm9tSlNPTihvYmplY3QuZXZpZGVuY2UpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxpZGF0b3I6IGlzU2V0KG9iamVjdC52YWxpZGF0b3IpXG4gICAgICAgICAgICAgICAgPyBWYWxpZGF0b3JQYXJhbXMuZnJvbUpTT04ob2JqZWN0LnZhbGlkYXRvcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZlcnNpb246IGlzU2V0KG9iamVjdC52ZXJzaW9uKVxuICAgICAgICAgICAgICAgID8gVmVyc2lvblBhcmFtcy5mcm9tSlNPTihvYmplY3QudmVyc2lvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmJsb2NrICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYmxvY2sgPSBtZXNzYWdlLmJsb2NrXG4gICAgICAgICAgICAgICAgPyBCbG9ja1BhcmFtcy50b0pTT04obWVzc2FnZS5ibG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuZXZpZGVuY2UgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5ldmlkZW5jZSA9IG1lc3NhZ2UuZXZpZGVuY2VcbiAgICAgICAgICAgICAgICA/IEV2aWRlbmNlUGFyYW1zLnRvSlNPTihtZXNzYWdlLmV2aWRlbmNlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3IgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai52YWxpZGF0b3IgPSBtZXNzYWdlLnZhbGlkYXRvclxuICAgICAgICAgICAgICAgID8gVmFsaWRhdG9yUGFyYW1zLnRvSlNPTihtZXNzYWdlLnZhbGlkYXRvcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UudmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnZlcnNpb24gPSBtZXNzYWdlLnZlcnNpb25cbiAgICAgICAgICAgICAgICA/IFZlcnNpb25QYXJhbXMudG9KU09OKG1lc3NhZ2UudmVyc2lvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb25zZW5zdXNQYXJhbXMoKTtcbiAgICAgICAgbWVzc2FnZS5ibG9jayA9XG4gICAgICAgICAgICBvYmplY3QuYmxvY2sgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYmxvY2sgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IEJsb2NrUGFyYW1zLmZyb21QYXJ0aWFsKG9iamVjdC5ibG9jaylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5ldmlkZW5jZSA9XG4gICAgICAgICAgICBvYmplY3QuZXZpZGVuY2UgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZXZpZGVuY2UgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IEV2aWRlbmNlUGFyYW1zLmZyb21QYXJ0aWFsKG9iamVjdC5ldmlkZW5jZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3IgPVxuICAgICAgICAgICAgb2JqZWN0LnZhbGlkYXRvciAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC52YWxpZGF0b3IgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFZhbGlkYXRvclBhcmFtcy5mcm9tUGFydGlhbChvYmplY3QudmFsaWRhdG9yKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnZlcnNpb24gPVxuICAgICAgICAgICAgb2JqZWN0LnZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudmVyc2lvbiAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gVmVyc2lvblBhcmFtcy5mcm9tUGFydGlhbChvYmplY3QudmVyc2lvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQmxvY2tQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHsgbWF4Qnl0ZXM6IFwiMFwiLCBtYXhHYXM6IFwiMFwiIH07XG59XG5leHBvcnQgY29uc3QgQmxvY2tQYXJhbXMgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UubWF4Qnl0ZXMgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDY0KG1lc3NhZ2UubWF4Qnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1heEdhcyAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDY0KG1lc3NhZ2UubWF4R2FzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUJsb2NrUGFyYW1zKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tYXhCeXRlcyA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tYXhHYXMgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXhCeXRlczogaXNTZXQob2JqZWN0Lm1heEJ5dGVzKSA/IFN0cmluZyhvYmplY3QubWF4Qnl0ZXMpIDogXCIwXCIsXG4gICAgICAgICAgICBtYXhHYXM6IGlzU2V0KG9iamVjdC5tYXhHYXMpID8gU3RyaW5nKG9iamVjdC5tYXhHYXMpIDogXCIwXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5tYXhCeXRlcyAhPT0gdW5kZWZpbmVkICYmIChvYmoubWF4Qnl0ZXMgPSBtZXNzYWdlLm1heEJ5dGVzKTtcbiAgICAgICAgbWVzc2FnZS5tYXhHYXMgIT09IHVuZGVmaW5lZCAmJiAob2JqLm1heEdhcyA9IG1lc3NhZ2UubWF4R2FzKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUJsb2NrUGFyYW1zKCk7XG4gICAgICAgIG1lc3NhZ2UubWF4Qnl0ZXMgPSBvYmplY3QubWF4Qnl0ZXMgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UubWF4R2FzID0gb2JqZWN0Lm1heEdhcyA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTGFzdENvbW1pdEluZm8oKSB7XG4gICAgcmV0dXJuIHsgcm91bmQ6IDAsIHZvdGVzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IExhc3RDb21taXRJbmZvID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnJvdW5kICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDMyKG1lc3NhZ2Uucm91bmQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnZvdGVzKSB7XG4gICAgICAgICAgICBWb3RlSW5mby5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUxhc3RDb21taXRJbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yb3VuZCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uudm90ZXMucHVzaChWb3RlSW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm91bmQ6IGlzU2V0KG9iamVjdC5yb3VuZCkgPyBOdW1iZXIob2JqZWN0LnJvdW5kKSA6IDAsXG4gICAgICAgICAgICB2b3RlczogQXJyYXkuaXNBcnJheShvYmplY3Q/LnZvdGVzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnZvdGVzLm1hcCgoZSkgPT4gVm90ZUluZm8uZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnJvdW5kICE9PSB1bmRlZmluZWQgJiYgKG9iai5yb3VuZCA9IE1hdGgucm91bmQobWVzc2FnZS5yb3VuZCkpO1xuICAgICAgICBpZiAobWVzc2FnZS52b3Rlcykge1xuICAgICAgICAgICAgb2JqLnZvdGVzID0gbWVzc2FnZS52b3Rlcy5tYXAoKGUpID0+IGUgPyBWb3RlSW5mby50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnZvdGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUxhc3RDb21taXRJbmZvKCk7XG4gICAgICAgIG1lc3NhZ2Uucm91bmQgPSBvYmplY3Qucm91bmQgPz8gMDtcbiAgICAgICAgbWVzc2FnZS52b3RlcyA9IG9iamVjdC52b3Rlcz8ubWFwKChlKSA9PiBWb3RlSW5mby5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUV2ZW50KCkge1xuICAgIHJldHVybiB7IHR5cGU6IFwiXCIsIGF0dHJpYnV0ZXM6IFtdIH07XG59XG5leHBvcnQgY29uc3QgRXZlbnQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgRXZlbnRBdHRyaWJ1dGUuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFdmVudCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHlwZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF0dHJpYnV0ZXMucHVzaChFdmVudEF0dHJpYnV0ZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogaXNTZXQob2JqZWN0LnR5cGUpID8gU3RyaW5nKG9iamVjdC50eXBlKSA6IFwiXCIsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uYXR0cmlidXRlcylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5hdHRyaWJ1dGVzLm1hcCgoZSkgPT4gRXZlbnRBdHRyaWJ1dGUuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnR5cGUgIT09IHVuZGVmaW5lZCAmJiAob2JqLnR5cGUgPSBtZXNzYWdlLnR5cGUpO1xuICAgICAgICBpZiAobWVzc2FnZS5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBvYmouYXR0cmlidXRlcyA9IG1lc3NhZ2UuYXR0cmlidXRlcy5tYXAoKGUpID0+IGUgPyBFdmVudEF0dHJpYnV0ZS50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRXZlbnQoKTtcbiAgICAgICAgbWVzc2FnZS50eXBlID0gb2JqZWN0LnR5cGUgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5hdHRyaWJ1dGVzID1cbiAgICAgICAgICAgIG9iamVjdC5hdHRyaWJ1dGVzPy5tYXAoKGUpID0+IEV2ZW50QXR0cmlidXRlLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlRXZlbnRBdHRyaWJ1dGUoKSB7XG4gICAgcmV0dXJuIHsga2V5OiBuZXcgVWludDhBcnJheSgpLCB2YWx1ZTogbmV3IFVpbnQ4QXJyYXkoKSwgaW5kZXg6IGZhbHNlIH07XG59XG5leHBvcnQgY29uc3QgRXZlbnRBdHRyaWJ1dGUgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uua2V5Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbHVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuYnl0ZXMobWVzc2FnZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5kZXggPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmJvb2wobWVzc2FnZS5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFdmVudEF0dHJpYnV0ZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uua2V5ID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52YWx1ZSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5kZXggPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IGlzU2V0KG9iamVjdC5rZXkpID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5rZXkpIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHZhbHVlOiBpc1NldChvYmplY3QudmFsdWUpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnZhbHVlKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIGluZGV4OiBpc1NldChvYmplY3QuaW5kZXgpID8gQm9vbGVhbihvYmplY3QuaW5kZXgpIDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5rZXkgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5rZXkgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5rZXkgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2Uua2V5IDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudmFsdWUgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS52YWx1ZSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS52YWx1ZSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5pbmRleCAhPT0gdW5kZWZpbmVkICYmIChvYmouaW5kZXggPSBtZXNzYWdlLmluZGV4KTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUV2ZW50QXR0cmlidXRlKCk7XG4gICAgICAgIG1lc3NhZ2Uua2V5ID0gb2JqZWN0LmtleSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnZhbHVlID0gb2JqZWN0LnZhbHVlID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UuaW5kZXggPSBvYmplY3QuaW5kZXggPz8gZmFsc2U7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVR4UmVzdWx0KCkge1xuICAgIHJldHVybiB7IGhlaWdodDogXCIwXCIsIGluZGV4OiAwLCB0eDogbmV3IFVpbnQ4QXJyYXkoKSwgcmVzdWx0OiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBUeFJlc3VsdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5oZWlnaHQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDY0KG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikudWludDMyKG1lc3NhZ2UuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnR4Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuYnl0ZXMobWVzc2FnZS50eCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJlc3BvbnNlRGVsaXZlclR4LmVuY29kZShtZXNzYWdlLnJlc3VsdCwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVR4UmVzdWx0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5oZWlnaHQgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5kZXggPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50eCA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVzdWx0ID0gUmVzcG9uc2VEZWxpdmVyVHguZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGVpZ2h0OiBpc1NldChvYmplY3QuaGVpZ2h0KSA/IFN0cmluZyhvYmplY3QuaGVpZ2h0KSA6IFwiMFwiLFxuICAgICAgICAgICAgaW5kZXg6IGlzU2V0KG9iamVjdC5pbmRleCkgPyBOdW1iZXIob2JqZWN0LmluZGV4KSA6IDAsXG4gICAgICAgICAgICB0eDogaXNTZXQob2JqZWN0LnR4KSA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QudHgpIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHJlc3VsdDogaXNTZXQob2JqZWN0LnJlc3VsdClcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlRGVsaXZlclR4LmZyb21KU09OKG9iamVjdC5yZXN1bHQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5oZWlnaHQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmhlaWdodCA9IG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgbWVzc2FnZS5pbmRleCAhPT0gdW5kZWZpbmVkICYmIChvYmouaW5kZXggPSBNYXRoLnJvdW5kKG1lc3NhZ2UuaW5kZXgpKTtcbiAgICAgICAgbWVzc2FnZS50eCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnR4ID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UudHggIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UudHggOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UucmVzdWx0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucmVzdWx0ID0gbWVzc2FnZS5yZXN1bHRcbiAgICAgICAgICAgICAgICA/IFJlc3BvbnNlRGVsaXZlclR4LnRvSlNPTihtZXNzYWdlLnJlc3VsdClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUeFJlc3VsdCgpO1xuICAgICAgICBtZXNzYWdlLmhlaWdodCA9IG9iamVjdC5oZWlnaHQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UuaW5kZXggPSBvYmplY3QuaW5kZXggPz8gMDtcbiAgICAgICAgbWVzc2FnZS50eCA9IG9iamVjdC50eCA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnJlc3VsdCA9XG4gICAgICAgICAgICBvYmplY3QucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnJlc3VsdCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUmVzcG9uc2VEZWxpdmVyVHguZnJvbVBhcnRpYWwob2JqZWN0LnJlc3VsdClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlVmFsaWRhdG9yKCkge1xuICAgIHJldHVybiB7IGFkZHJlc3M6IG5ldyBVaW50OEFycmF5KCksIHBvd2VyOiBcIjBcIiB9O1xufVxuZXhwb3J0IGNvbnN0IFZhbGlkYXRvciA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5hZGRyZXNzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5hZGRyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wb3dlciAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDY0KG1lc3NhZ2UucG93ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVmFsaWRhdG9yKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hZGRyZXNzID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wb3dlciA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZHJlc3M6IGlzU2V0KG9iamVjdC5hZGRyZXNzKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5hZGRyZXNzKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHBvd2VyOiBpc1NldChvYmplY3QucG93ZXIpID8gU3RyaW5nKG9iamVjdC5wb3dlcikgOiBcIjBcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmFkZHJlc3MgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5hZGRyZXNzID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuYWRkcmVzcyAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5hZGRyZXNzIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnBvd2VyICE9PSB1bmRlZmluZWQgJiYgKG9iai5wb3dlciA9IG1lc3NhZ2UucG93ZXIpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVmFsaWRhdG9yKCk7XG4gICAgICAgIG1lc3NhZ2UuYWRkcmVzcyA9IG9iamVjdC5hZGRyZXNzID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UucG93ZXIgPSBvYmplY3QucG93ZXIgPz8gXCIwXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVZhbGlkYXRvclVwZGF0ZSgpIHtcbiAgICByZXR1cm4geyBwdWJLZXk6IHVuZGVmaW5lZCwgcG93ZXI6IFwiMFwiIH07XG59XG5leHBvcnQgY29uc3QgVmFsaWRhdG9yVXBkYXRlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnB1YktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBQdWJsaWNLZXkuZW5jb2RlKG1lc3NhZ2UucHViS2V5LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBvd2VyICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50NjQobWVzc2FnZS5wb3dlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VWYWxpZGF0b3JVcGRhdGUoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnB1YktleSA9IFB1YmxpY0tleS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucG93ZXIgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwdWJLZXk6IGlzU2V0KG9iamVjdC5wdWJLZXkpXG4gICAgICAgICAgICAgICAgPyBQdWJsaWNLZXkuZnJvbUpTT04ob2JqZWN0LnB1YktleSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHBvd2VyOiBpc1NldChvYmplY3QucG93ZXIpID8gU3RyaW5nKG9iamVjdC5wb3dlcikgOiBcIjBcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnB1YktleSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnB1YktleSA9IG1lc3NhZ2UucHViS2V5XG4gICAgICAgICAgICAgICAgPyBQdWJsaWNLZXkudG9KU09OKG1lc3NhZ2UucHViS2V5KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5wb3dlciAhPT0gdW5kZWZpbmVkICYmIChvYmoucG93ZXIgPSBtZXNzYWdlLnBvd2VyKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVZhbGlkYXRvclVwZGF0ZSgpO1xuICAgICAgICBtZXNzYWdlLnB1YktleSA9XG4gICAgICAgICAgICBvYmplY3QucHViS2V5ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnB1YktleSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gUHVibGljS2V5LmZyb21QYXJ0aWFsKG9iamVjdC5wdWJLZXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UucG93ZXIgPSBvYmplY3QucG93ZXIgPz8gXCIwXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVZvdGVJbmZvKCkge1xuICAgIHJldHVybiB7IHZhbGlkYXRvcjogdW5kZWZpbmVkLCBzaWduZWRMYXN0QmxvY2s6IGZhbHNlIH07XG59XG5leHBvcnQgY29uc3QgVm90ZUluZm8gPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudmFsaWRhdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFZhbGlkYXRvci5lbmNvZGUobWVzc2FnZS52YWxpZGF0b3IsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2lnbmVkTGFzdEJsb2NrID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5ib29sKG1lc3NhZ2Uuc2lnbmVkTGFzdEJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVZvdGVJbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52YWxpZGF0b3IgPSBWYWxpZGF0b3IuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNpZ25lZExhc3RCbG9jayA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbGlkYXRvcjogaXNTZXQob2JqZWN0LnZhbGlkYXRvcilcbiAgICAgICAgICAgICAgICA/IFZhbGlkYXRvci5mcm9tSlNPTihvYmplY3QudmFsaWRhdG9yKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2lnbmVkTGFzdEJsb2NrOiBpc1NldChvYmplY3Quc2lnbmVkTGFzdEJsb2NrKVxuICAgICAgICAgICAgICAgID8gQm9vbGVhbihvYmplY3Quc2lnbmVkTGFzdEJsb2NrKVxuICAgICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3IgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai52YWxpZGF0b3IgPSBtZXNzYWdlLnZhbGlkYXRvclxuICAgICAgICAgICAgICAgID8gVmFsaWRhdG9yLnRvSlNPTihtZXNzYWdlLnZhbGlkYXRvcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uuc2lnbmVkTGFzdEJsb2NrICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouc2lnbmVkTGFzdEJsb2NrID0gbWVzc2FnZS5zaWduZWRMYXN0QmxvY2spO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVm90ZUluZm8oKTtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3IgPVxuICAgICAgICAgICAgb2JqZWN0LnZhbGlkYXRvciAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC52YWxpZGF0b3IgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFZhbGlkYXRvci5mcm9tUGFydGlhbChvYmplY3QudmFsaWRhdG9yKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnNpZ25lZExhc3RCbG9jayA9IG9iamVjdC5zaWduZWRMYXN0QmxvY2sgPz8gZmFsc2U7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUV2aWRlbmNlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IDAsXG4gICAgICAgIHZhbGlkYXRvcjogdW5kZWZpbmVkLFxuICAgICAgICBoZWlnaHQ6IFwiMFwiLFxuICAgICAgICB0aW1lOiB1bmRlZmluZWQsXG4gICAgICAgIHRvdGFsVm90aW5nUG93ZXI6IFwiMFwiLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgRXZpZGVuY2UgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLnR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbGlkYXRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWYWxpZGF0b3IuZW5jb2RlKG1lc3NhZ2UudmFsaWRhdG9yLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmhlaWdodCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDY0KG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50aW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFRpbWVzdGFtcC5lbmNvZGUobWVzc2FnZS50aW1lLCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnRvdGFsVm90aW5nUG93ZXIgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS5pbnQ2NChtZXNzYWdlLnRvdGFsVm90aW5nUG93ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRXZpZGVuY2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnR5cGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbGlkYXRvciA9IFZhbGlkYXRvci5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpbWUgPSBUaW1lc3RhbXAuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRvdGFsVm90aW5nUG93ZXIgPSBsb25nVG9TdHJpbmcocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBpc1NldChvYmplY3QudHlwZSkgPyBldmlkZW5jZVR5cGVGcm9tSlNPTihvYmplY3QudHlwZSkgOiAwLFxuICAgICAgICAgICAgdmFsaWRhdG9yOiBpc1NldChvYmplY3QudmFsaWRhdG9yKVxuICAgICAgICAgICAgICAgID8gVmFsaWRhdG9yLmZyb21KU09OKG9iamVjdC52YWxpZGF0b3IpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBoZWlnaHQ6IGlzU2V0KG9iamVjdC5oZWlnaHQpID8gU3RyaW5nKG9iamVjdC5oZWlnaHQpIDogXCIwXCIsXG4gICAgICAgICAgICB0aW1lOiBpc1NldChvYmplY3QudGltZSkgPyBmcm9tSnNvblRpbWVzdGFtcChvYmplY3QudGltZSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3RhbFZvdGluZ1Bvd2VyOiBpc1NldChvYmplY3QudG90YWxWb3RpbmdQb3dlcilcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3QudG90YWxWb3RpbmdQb3dlcilcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudHlwZSAhPT0gdW5kZWZpbmVkICYmIChvYmoudHlwZSA9IGV2aWRlbmNlVHlwZVRvSlNPTihtZXNzYWdlLnR5cGUpKTtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3IgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai52YWxpZGF0b3IgPSBtZXNzYWdlLnZhbGlkYXRvclxuICAgICAgICAgICAgICAgID8gVmFsaWRhdG9yLnRvSlNPTihtZXNzYWdlLnZhbGlkYXRvcilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5oZWlnaHQgPSBtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIG1lc3NhZ2UudGltZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnRpbWUgPSBmcm9tVGltZXN0YW1wKG1lc3NhZ2UudGltZSkudG9JU09TdHJpbmcoKSk7XG4gICAgICAgIG1lc3NhZ2UudG90YWxWb3RpbmdQb3dlciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnRvdGFsVm90aW5nUG93ZXIgPSBtZXNzYWdlLnRvdGFsVm90aW5nUG93ZXIpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRXZpZGVuY2UoKTtcbiAgICAgICAgbWVzc2FnZS50eXBlID0gb2JqZWN0LnR5cGUgPz8gMDtcbiAgICAgICAgbWVzc2FnZS52YWxpZGF0b3IgPVxuICAgICAgICAgICAgb2JqZWN0LnZhbGlkYXRvciAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC52YWxpZGF0b3IgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFZhbGlkYXRvci5mcm9tUGFydGlhbChvYmplY3QudmFsaWRhdG9yKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmhlaWdodCA9IG9iamVjdC5oZWlnaHQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UudGltZSA9XG4gICAgICAgICAgICBvYmplY3QudGltZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC50aW1lICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBUaW1lc3RhbXAuZnJvbVBhcnRpYWwob2JqZWN0LnRpbWUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UudG90YWxWb3RpbmdQb3dlciA9IG9iamVjdC50b3RhbFZvdGluZ1Bvd2VyID8/IFwiMFwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTbmFwc2hvdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBoZWlnaHQ6IFwiMFwiLFxuICAgICAgICBmb3JtYXQ6IDAsXG4gICAgICAgIGNodW5rczogMCxcbiAgICAgICAgaGFzaDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgbWV0YWRhdGE6IG5ldyBVaW50OEFycmF5KCksXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBTbmFwc2hvdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5oZWlnaHQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQ2NChtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZm9ybWF0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS51aW50MzIobWVzc2FnZS5mb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNodW5rcyAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkudWludDMyKG1lc3NhZ2UuY2h1bmtzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5oYXNoLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNCkuYnl0ZXMobWVzc2FnZS5oYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tZXRhZGF0YS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDIpLmJ5dGVzKG1lc3NhZ2UubWV0YWRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU25hcHNob3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhlaWdodCA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZm9ybWF0ID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2h1bmtzID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGFzaCA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWV0YWRhdGEgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGVpZ2h0OiBpc1NldChvYmplY3QuaGVpZ2h0KSA/IFN0cmluZyhvYmplY3QuaGVpZ2h0KSA6IFwiMFwiLFxuICAgICAgICAgICAgZm9ybWF0OiBpc1NldChvYmplY3QuZm9ybWF0KSA/IE51bWJlcihvYmplY3QuZm9ybWF0KSA6IDAsXG4gICAgICAgICAgICBjaHVua3M6IGlzU2V0KG9iamVjdC5jaHVua3MpID8gTnVtYmVyKG9iamVjdC5jaHVua3MpIDogMCxcbiAgICAgICAgICAgIGhhc2g6IGlzU2V0KG9iamVjdC5oYXNoKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5oYXNoKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBpc1NldChvYmplY3QubWV0YWRhdGEpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0Lm1ldGFkYXRhKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmhlaWdodCAhPT0gdW5kZWZpbmVkICYmIChvYmouaGVpZ2h0ID0gbWVzc2FnZS5oZWlnaHQpO1xuICAgICAgICBtZXNzYWdlLmZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIChvYmouZm9ybWF0ID0gTWF0aC5yb3VuZChtZXNzYWdlLmZvcm1hdCkpO1xuICAgICAgICBtZXNzYWdlLmNodW5rcyAhPT0gdW5kZWZpbmVkICYmIChvYmouY2h1bmtzID0gTWF0aC5yb3VuZChtZXNzYWdlLmNodW5rcykpO1xuICAgICAgICBtZXNzYWdlLmhhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5oYXNoID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuaGFzaCAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5oYXNoIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLm1ldGFkYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubWV0YWRhdGEgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5tZXRhZGF0YSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5tZXRhZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNuYXBzaG90KCk7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gb2JqZWN0LmhlaWdodCA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5mb3JtYXQgPSBvYmplY3QuZm9ybWF0ID8/IDA7XG4gICAgICAgIG1lc3NhZ2UuY2h1bmtzID0gb2JqZWN0LmNodW5rcyA/PyAwO1xuICAgICAgICBtZXNzYWdlLmhhc2ggPSBvYmplY3QuaGFzaCA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLm1ldGFkYXRhID0gb2JqZWN0Lm1ldGFkYXRhID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZXhwb3J0IGNsYXNzIEFCQ0lBcHBsaWNhdGlvbkNsaWVudEltcGwge1xuICAgIHJwYztcbiAgICBjb25zdHJ1Y3RvcihycGMpIHtcbiAgICAgICAgdGhpcy5ycGMgPSBycGM7XG4gICAgICAgIHRoaXMuZWNobyA9IHRoaXMuZWNoby5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmZsdXNoID0gdGhpcy5mbHVzaC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmluZm8gPSB0aGlzLmluZm8uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZXRPcHRpb24gPSB0aGlzLnNldE9wdGlvbi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlbGl2ZXJUeCA9IHRoaXMuZGVsaXZlclR4LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuY2hlY2tUeCA9IHRoaXMuY2hlY2tUeC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNvbW1pdCA9IHRoaXMuY29tbWl0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaW5pdENoYWluID0gdGhpcy5pbml0Q2hhaW4uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5iZWdpbkJsb2NrID0gdGhpcy5iZWdpbkJsb2NrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZW5kQmxvY2sgPSB0aGlzLmVuZEJsb2NrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubGlzdFNuYXBzaG90cyA9IHRoaXMubGlzdFNuYXBzaG90cy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9mZmVyU25hcHNob3QgPSB0aGlzLm9mZmVyU25hcHNob3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5sb2FkU25hcHNob3RDaHVuayA9IHRoaXMubG9hZFNuYXBzaG90Q2h1bmsuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hcHBseVNuYXBzaG90Q2h1bmsgPSB0aGlzLmFwcGx5U25hcHNob3RDaHVuay5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBlY2hvKHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShBQkNJQXBwbGljYXRpb25FY2hvRGVzYywgUmVxdWVzdEVjaG8uZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgZmx1c2gocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KEFCQ0lBcHBsaWNhdGlvbkZsdXNoRGVzYywgUmVxdWVzdEZsdXNoLmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIGluZm8ocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KEFCQ0lBcHBsaWNhdGlvbkluZm9EZXNjLCBSZXF1ZXN0SW5mby5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbiAgICBzZXRPcHRpb24ocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KEFCQ0lBcHBsaWNhdGlvblNldE9wdGlvbkRlc2MsIFJlcXVlc3RTZXRPcHRpb24uZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgZGVsaXZlclR4KHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShBQkNJQXBwbGljYXRpb25EZWxpdmVyVHhEZXNjLCBSZXF1ZXN0RGVsaXZlclR4LmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIGNoZWNrVHgocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KEFCQ0lBcHBsaWNhdGlvbkNoZWNrVHhEZXNjLCBSZXF1ZXN0Q2hlY2tUeC5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbiAgICBxdWVyeShyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoQUJDSUFwcGxpY2F0aW9uUXVlcnlEZXNjLCBSZXF1ZXN0UXVlcnkuZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgY29tbWl0KHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShBQkNJQXBwbGljYXRpb25Db21taXREZXNjLCBSZXF1ZXN0Q29tbWl0LmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIGluaXRDaGFpbihyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoQUJDSUFwcGxpY2F0aW9uSW5pdENoYWluRGVzYywgUmVxdWVzdEluaXRDaGFpbi5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbiAgICBiZWdpbkJsb2NrKHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShBQkNJQXBwbGljYXRpb25CZWdpbkJsb2NrRGVzYywgUmVxdWVzdEJlZ2luQmxvY2suZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgZW5kQmxvY2socmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KEFCQ0lBcHBsaWNhdGlvbkVuZEJsb2NrRGVzYywgUmVxdWVzdEVuZEJsb2NrLmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIGxpc3RTbmFwc2hvdHMocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KEFCQ0lBcHBsaWNhdGlvbkxpc3RTbmFwc2hvdHNEZXNjLCBSZXF1ZXN0TGlzdFNuYXBzaG90cy5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbiAgICBvZmZlclNuYXBzaG90KHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShBQkNJQXBwbGljYXRpb25PZmZlclNuYXBzaG90RGVzYywgUmVxdWVzdE9mZmVyU25hcHNob3QuZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgbG9hZFNuYXBzaG90Q2h1bmsocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KEFCQ0lBcHBsaWNhdGlvbkxvYWRTbmFwc2hvdENodW5rRGVzYywgUmVxdWVzdExvYWRTbmFwc2hvdENodW5rLmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIGFwcGx5U25hcHNob3RDaHVuayhyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoQUJDSUFwcGxpY2F0aW9uQXBwbHlTbmFwc2hvdENodW5rRGVzYywgUmVxdWVzdEFwcGx5U25hcHNob3RDaHVuay5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBBQkNJQXBwbGljYXRpb25EZXNjID0ge1xuICAgIHNlcnZpY2VOYW1lOiBcInRlbmRlcm1pbnQuYWJjaS5BQkNJQXBwbGljYXRpb25cIixcbn07XG5leHBvcnQgY29uc3QgQUJDSUFwcGxpY2F0aW9uRWNob0Rlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJFY2hvXCIsXG4gICAgc2VydmljZTogQUJDSUFwcGxpY2F0aW9uRGVzYyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IHtcbiAgICAgICAgc2VyaWFsaXplQmluYXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlcXVlc3RFY2hvLmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLlJlc3BvbnNlRWNoby5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFCQ0lBcHBsaWNhdGlvbkZsdXNoRGVzYyA9IHtcbiAgICBtZXRob2ROYW1lOiBcIkZsdXNoXCIsXG4gICAgc2VydmljZTogQUJDSUFwcGxpY2F0aW9uRGVzYyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IHtcbiAgICAgICAgc2VyaWFsaXplQmluYXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlcXVlc3RGbHVzaC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5SZXNwb25zZUZsdXNoLmRlY29kZShkYXRhKSxcbiAgICAgICAgICAgICAgICB0b09iamVjdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQUJDSUFwcGxpY2F0aW9uSW5mb0Rlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJJbmZvXCIsXG4gICAgc2VydmljZTogQUJDSUFwcGxpY2F0aW9uRGVzYyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IHtcbiAgICAgICAgc2VyaWFsaXplQmluYXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlcXVlc3RJbmZvLmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLlJlc3BvbnNlSW5mby5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFCQ0lBcHBsaWNhdGlvblNldE9wdGlvbkRlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJTZXRPcHRpb25cIixcbiAgICBzZXJ2aWNlOiBBQkNJQXBwbGljYXRpb25EZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVxdWVzdFNldE9wdGlvbi5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5SZXNwb25zZVNldE9wdGlvbi5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFCQ0lBcHBsaWNhdGlvbkRlbGl2ZXJUeERlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJEZWxpdmVyVHhcIixcbiAgICBzZXJ2aWNlOiBBQkNJQXBwbGljYXRpb25EZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVxdWVzdERlbGl2ZXJUeC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5SZXNwb25zZURlbGl2ZXJUeC5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFCQ0lBcHBsaWNhdGlvbkNoZWNrVHhEZXNjID0ge1xuICAgIG1ldGhvZE5hbWU6IFwiQ2hlY2tUeFwiLFxuICAgIHNlcnZpY2U6IEFCQ0lBcHBsaWNhdGlvbkRlc2MsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiB7XG4gICAgICAgIHNlcmlhbGl6ZUJpbmFyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXF1ZXN0Q2hlY2tUeC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5SZXNwb25zZUNoZWNrVHguZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBQkNJQXBwbGljYXRpb25RdWVyeURlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJRdWVyeVwiLFxuICAgIHNlcnZpY2U6IEFCQ0lBcHBsaWNhdGlvbkRlc2MsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiB7XG4gICAgICAgIHNlcmlhbGl6ZUJpbmFyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXF1ZXN0UXVlcnkuZW5jb2RlKHRoaXMpLmZpbmlzaCgpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgcmVzcG9uc2VUeXBlOiB7XG4gICAgICAgIGRlc2VyaWFsaXplQmluYXJ5KGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uUmVzcG9uc2VRdWVyeS5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFCQ0lBcHBsaWNhdGlvbkNvbW1pdERlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJDb21taXRcIixcbiAgICBzZXJ2aWNlOiBBQkNJQXBwbGljYXRpb25EZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVxdWVzdENvbW1pdC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5SZXNwb25zZUNvbW1pdC5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFCQ0lBcHBsaWNhdGlvbkluaXRDaGFpbkRlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJJbml0Q2hhaW5cIixcbiAgICBzZXJ2aWNlOiBBQkNJQXBwbGljYXRpb25EZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVxdWVzdEluaXRDaGFpbi5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5SZXNwb25zZUluaXRDaGFpbi5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFCQ0lBcHBsaWNhdGlvbkJlZ2luQmxvY2tEZXNjID0ge1xuICAgIG1ldGhvZE5hbWU6IFwiQmVnaW5CbG9ja1wiLFxuICAgIHNlcnZpY2U6IEFCQ0lBcHBsaWNhdGlvbkRlc2MsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiB7XG4gICAgICAgIHNlcmlhbGl6ZUJpbmFyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXF1ZXN0QmVnaW5CbG9jay5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5SZXNwb25zZUJlZ2luQmxvY2suZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBQkNJQXBwbGljYXRpb25FbmRCbG9ja0Rlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJFbmRCbG9ja1wiLFxuICAgIHNlcnZpY2U6IEFCQ0lBcHBsaWNhdGlvbkRlc2MsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiB7XG4gICAgICAgIHNlcmlhbGl6ZUJpbmFyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXF1ZXN0RW5kQmxvY2suZW5jb2RlKHRoaXMpLmZpbmlzaCgpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgcmVzcG9uc2VUeXBlOiB7XG4gICAgICAgIGRlc2VyaWFsaXplQmluYXJ5KGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uUmVzcG9uc2VFbmRCbG9jay5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFCQ0lBcHBsaWNhdGlvbkxpc3RTbmFwc2hvdHNEZXNjID0ge1xuICAgIG1ldGhvZE5hbWU6IFwiTGlzdFNuYXBzaG90c1wiLFxuICAgIHNlcnZpY2U6IEFCQ0lBcHBsaWNhdGlvbkRlc2MsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiB7XG4gICAgICAgIHNlcmlhbGl6ZUJpbmFyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXF1ZXN0TGlzdFNuYXBzaG90cy5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5SZXNwb25zZUxpc3RTbmFwc2hvdHMuZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBQkNJQXBwbGljYXRpb25PZmZlclNuYXBzaG90RGVzYyA9IHtcbiAgICBtZXRob2ROYW1lOiBcIk9mZmVyU25hcHNob3RcIixcbiAgICBzZXJ2aWNlOiBBQkNJQXBwbGljYXRpb25EZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVxdWVzdE9mZmVyU25hcHNob3QuZW5jb2RlKHRoaXMpLmZpbmlzaCgpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgcmVzcG9uc2VUeXBlOiB7XG4gICAgICAgIGRlc2VyaWFsaXplQmluYXJ5KGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uUmVzcG9uc2VPZmZlclNuYXBzaG90LmRlY29kZShkYXRhKSxcbiAgICAgICAgICAgICAgICB0b09iamVjdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQUJDSUFwcGxpY2F0aW9uTG9hZFNuYXBzaG90Q2h1bmtEZXNjID0ge1xuICAgIG1ldGhvZE5hbWU6IFwiTG9hZFNuYXBzaG90Q2h1bmtcIixcbiAgICBzZXJ2aWNlOiBBQkNJQXBwbGljYXRpb25EZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVxdWVzdExvYWRTbmFwc2hvdENodW5rLmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLlJlc3BvbnNlTG9hZFNuYXBzaG90Q2h1bmsuZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBQkNJQXBwbGljYXRpb25BcHBseVNuYXBzaG90Q2h1bmtEZXNjID0ge1xuICAgIG1ldGhvZE5hbWU6IFwiQXBwbHlTbmFwc2hvdENodW5rXCIsXG4gICAgc2VydmljZTogQUJDSUFwcGxpY2F0aW9uRGVzYyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IHtcbiAgICAgICAgc2VyaWFsaXplQmluYXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlcXVlc3RBcHBseVNuYXBzaG90Q2h1bmsuZW5jb2RlKHRoaXMpLmZpbmlzaCgpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgcmVzcG9uc2VUeXBlOiB7XG4gICAgICAgIGRlc2VyaWFsaXplQmluYXJ5KGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmsuZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjbGFzcyBHcnBjV2ViSW1wbCB7XG4gICAgaG9zdDtcbiAgICBvcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKGhvc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgdW5hcnkobWV0aG9kRGVzYywgX3JlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7IC4uLl9yZXF1ZXN0LCAuLi5tZXRob2REZXNjLnJlcXVlc3RUeXBlIH07XG4gICAgICAgIGNvbnN0IG1heWJlQ29tYmluZWRNZXRhZGF0YSA9IG1ldGFkYXRhICYmIHRoaXMub3B0aW9ucy5tZXRhZGF0YVxuICAgICAgICAgICAgPyBuZXcgQnJvd3NlckhlYWRlcnMoe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucz8ubWV0YWRhdGEuaGVhZGVyc01hcCxcbiAgICAgICAgICAgICAgICAuLi5tZXRhZGF0YT8uaGVhZGVyc01hcCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IG1ldGFkYXRhIHx8IHRoaXMub3B0aW9ucy5tZXRhZGF0YTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGdycGMudW5hcnkobWV0aG9kRGVzYywge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgaG9zdDogdGhpcy5ob3N0LFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtYXliZUNvbWJpbmVkTWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0OiB0aGlzLm9wdGlvbnMudHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgIGRlYnVnOiB0aGlzLm9wdGlvbnMuZGVidWcsXG4gICAgICAgICAgICAgICAgb25FbmQ6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSBncnBjLkNvZGUuT0spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIuY29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5tZXRhZGF0YSA9IHJlc3BvbnNlLnRyYWlsZXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5jb25zdCBhdG9iID0gZ2xvYmFsVGhpcy5hdG9iIHx8XG4gICAgKChiNjQpID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKSk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgY29uc3QgYmluID0gYXRvYihiNjQpO1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuY29uc3QgYnRvYSA9IGdsb2JhbFRoaXMuYnRvYSB8fFxuICAgICgoYmluKSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGJpbiwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpO1xuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGNvbnN0IGJpbiA9IFtdO1xuICAgIGFyci5mb3JFYWNoKChieXRlKSA9PiB7XG4gICAgICAgIGJpbi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBidG9hKGJpbi5qb2luKFwiXCIpKTtcbn1cbmZ1bmN0aW9uIHRvVGltZXN0YW1wKGRhdGUpIHtcbiAgICBjb25zdCBzZWNvbmRzID0gTWF0aC50cnVuYyhkYXRlLmdldFRpbWUoKSAvIDEwMDApLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgbmFub3MgPSAoZGF0ZS5nZXRUaW1lKCkgJSAxMDAwKSAqIDEwMDAwMDA7XG4gICAgcmV0dXJuIHsgc2Vjb25kcywgbmFub3MgfTtcbn1cbmZ1bmN0aW9uIGZyb21UaW1lc3RhbXAodCkge1xuICAgIGxldCBtaWxsaXMgPSBOdW1iZXIodC5zZWNvbmRzKSAqIDEwMDA7XG4gICAgbWlsbGlzICs9IHQubmFub3MgLyAxMDAwMDAwO1xuICAgIHJldHVybiBuZXcgRGF0ZShtaWxsaXMpO1xufVxuZnVuY3Rpb24gZnJvbUpzb25UaW1lc3RhbXAobykge1xuICAgIGlmIChvIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gdG9UaW1lc3RhbXAobyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB0b1RpbWVzdGFtcChuZXcgRGF0ZShvKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gVGltZXN0YW1wLmZyb21KU09OKG8pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvbmdUb1N0cmluZyhsb25nKSB7XG4gICAgcmV0dXJuIGxvbmcudG9TdHJpbmcoKTtcbn1cbmlmIChfbTAudXRpbC5Mb25nICE9PSBMb25nKSB7XG4gICAgX20wLnV0aWwuTG9uZyA9IExvbmc7XG4gICAgX20wLmNvbmZpZ3VyZSgpO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBBbnkgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZ29vZ2xlL3Byb3RvYnVmL2FueVwiO1xuaW1wb3J0IExvbmcgZnJvbSBcImxvbmdcIjtcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSBcIi4uLy4uLy4uLy4uL3RlbmRlcm1pbnQvYWJjaS90eXBlc1wiO1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImNvc21vcy5iYXNlLmFiY2kudjFiZXRhMVwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVR4UmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGVpZ2h0OiBcIjBcIixcbiAgICAgICAgdHhoYXNoOiBcIlwiLFxuICAgICAgICBjb2Rlc3BhY2U6IFwiXCIsXG4gICAgICAgIGNvZGU6IDAsXG4gICAgICAgIGRhdGE6IFwiXCIsXG4gICAgICAgIHJhd0xvZzogXCJcIixcbiAgICAgICAgbG9nczogW10sXG4gICAgICAgIGluZm86IFwiXCIsXG4gICAgICAgIGdhc1dhbnRlZDogXCIwXCIsXG4gICAgICAgIGdhc1VzZWQ6IFwiMFwiLFxuICAgICAgICB0eDogdW5kZWZpbmVkLFxuICAgICAgICB0aW1lc3RhbXA6IFwiXCIsXG4gICAgICAgIGV2ZW50czogW10sXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBUeFJlc3BvbnNlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmhlaWdodCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50NjQobWVzc2FnZS5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnR4aGFzaCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UudHhoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb2Rlc3BhY2UgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLmNvZGVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29kZSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikudWludDMyKG1lc3NhZ2UuY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGF0YSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0Mikuc3RyaW5nKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmF3TG9nICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDUwKS5zdHJpbmcobWVzc2FnZS5yYXdMb2cpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmxvZ3MpIHtcbiAgICAgICAgICAgIEFCQ0lNZXNzYWdlTG9nLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDU4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmluZm8gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNjYpLnN0cmluZyhtZXNzYWdlLmluZm8pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmdhc1dhbnRlZCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNzIpLmludDY0KG1lc3NhZ2UuZ2FzV2FudGVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5nYXNVc2VkICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4MCkuaW50NjQobWVzc2FnZS5nYXNVc2VkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50eCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBBbnkuZW5jb2RlKG1lc3NhZ2UudHgsIHdyaXRlci51aW50MzIoOTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudGltZXN0YW1wICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDk4KS5zdHJpbmcobWVzc2FnZS50aW1lc3RhbXApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmV2ZW50cykge1xuICAgICAgICAgICAgRXZlbnQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTA2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVHhSZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnR4aGFzaCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvZGVzcGFjZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvZGUgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kYXRhID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmF3TG9nID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9ncy5wdXNoKEFCQ0lNZXNzYWdlTG9nLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5mbyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmdhc1dhbnRlZCA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2FzVXNlZCA9IGxvbmdUb1N0cmluZyhyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHggPSBBbnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50aW1lc3RhbXAgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXZlbnRzLnB1c2goRXZlbnQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhlaWdodDogaXNTZXQob2JqZWN0LmhlaWdodCkgPyBTdHJpbmcob2JqZWN0LmhlaWdodCkgOiBcIjBcIixcbiAgICAgICAgICAgIHR4aGFzaDogaXNTZXQob2JqZWN0LnR4aGFzaCkgPyBTdHJpbmcob2JqZWN0LnR4aGFzaCkgOiBcIlwiLFxuICAgICAgICAgICAgY29kZXNwYWNlOiBpc1NldChvYmplY3QuY29kZXNwYWNlKSA/IFN0cmluZyhvYmplY3QuY29kZXNwYWNlKSA6IFwiXCIsXG4gICAgICAgICAgICBjb2RlOiBpc1NldChvYmplY3QuY29kZSkgPyBOdW1iZXIob2JqZWN0LmNvZGUpIDogMCxcbiAgICAgICAgICAgIGRhdGE6IGlzU2V0KG9iamVjdC5kYXRhKSA/IFN0cmluZyhvYmplY3QuZGF0YSkgOiBcIlwiLFxuICAgICAgICAgICAgcmF3TG9nOiBpc1NldChvYmplY3QucmF3TG9nKSA/IFN0cmluZyhvYmplY3QucmF3TG9nKSA6IFwiXCIsXG4gICAgICAgICAgICBsb2dzOiBBcnJheS5pc0FycmF5KG9iamVjdD8ubG9ncylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5sb2dzLm1hcCgoZSkgPT4gQUJDSU1lc3NhZ2VMb2cuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIGluZm86IGlzU2V0KG9iamVjdC5pbmZvKSA/IFN0cmluZyhvYmplY3QuaW5mbykgOiBcIlwiLFxuICAgICAgICAgICAgZ2FzV2FudGVkOiBpc1NldChvYmplY3QuZ2FzV2FudGVkKSA/IFN0cmluZyhvYmplY3QuZ2FzV2FudGVkKSA6IFwiMFwiLFxuICAgICAgICAgICAgZ2FzVXNlZDogaXNTZXQob2JqZWN0Lmdhc1VzZWQpID8gU3RyaW5nKG9iamVjdC5nYXNVc2VkKSA6IFwiMFwiLFxuICAgICAgICAgICAgdHg6IGlzU2V0KG9iamVjdC50eCkgPyBBbnkuZnJvbUpTT04ob2JqZWN0LnR4KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogaXNTZXQob2JqZWN0LnRpbWVzdGFtcCkgPyBTdHJpbmcob2JqZWN0LnRpbWVzdGFtcCkgOiBcIlwiLFxuICAgICAgICAgICAgZXZlbnRzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uZXZlbnRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmV2ZW50cy5tYXAoKGUpID0+IEV2ZW50LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5oZWlnaHQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmhlaWdodCA9IG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgbWVzc2FnZS50eGhhc2ggIT09IHVuZGVmaW5lZCAmJiAob2JqLnR4aGFzaCA9IG1lc3NhZ2UudHhoYXNoKTtcbiAgICAgICAgbWVzc2FnZS5jb2Rlc3BhY2UgIT09IHVuZGVmaW5lZCAmJiAob2JqLmNvZGVzcGFjZSA9IG1lc3NhZ2UuY29kZXNwYWNlKTtcbiAgICAgICAgbWVzc2FnZS5jb2RlICE9PSB1bmRlZmluZWQgJiYgKG9iai5jb2RlID0gTWF0aC5yb3VuZChtZXNzYWdlLmNvZGUpKTtcbiAgICAgICAgbWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQgJiYgKG9iai5kYXRhID0gbWVzc2FnZS5kYXRhKTtcbiAgICAgICAgbWVzc2FnZS5yYXdMb2cgIT09IHVuZGVmaW5lZCAmJiAob2JqLnJhd0xvZyA9IG1lc3NhZ2UucmF3TG9nKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UubG9ncykge1xuICAgICAgICAgICAgb2JqLmxvZ3MgPSBtZXNzYWdlLmxvZ3MubWFwKChlKSA9PiBlID8gQUJDSU1lc3NhZ2VMb2cudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5sb2dzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZS5pbmZvICE9PSB1bmRlZmluZWQgJiYgKG9iai5pbmZvID0gbWVzc2FnZS5pbmZvKTtcbiAgICAgICAgbWVzc2FnZS5nYXNXYW50ZWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmdhc1dhbnRlZCA9IG1lc3NhZ2UuZ2FzV2FudGVkKTtcbiAgICAgICAgbWVzc2FnZS5nYXNVc2VkICE9PSB1bmRlZmluZWQgJiYgKG9iai5nYXNVc2VkID0gbWVzc2FnZS5nYXNVc2VkKTtcbiAgICAgICAgbWVzc2FnZS50eCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnR4ID0gbWVzc2FnZS50eCA/IEFueS50b0pTT04obWVzc2FnZS50eCkgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkICYmIChvYmoudGltZXN0YW1wID0gbWVzc2FnZS50aW1lc3RhbXApO1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudHMpIHtcbiAgICAgICAgICAgIG9iai5ldmVudHMgPSBtZXNzYWdlLmV2ZW50cy5tYXAoKGUpID0+IChlID8gRXZlbnQudG9KU09OKGUpIDogdW5kZWZpbmVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouZXZlbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVR4UmVzcG9uc2UoKTtcbiAgICAgICAgbWVzc2FnZS5oZWlnaHQgPSBvYmplY3QuaGVpZ2h0ID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLnR4aGFzaCA9IG9iamVjdC50eGhhc2ggPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5jb2Rlc3BhY2UgPSBvYmplY3QuY29kZXNwYWNlID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuY29kZSA9IG9iamVjdC5jb2RlID8/IDA7XG4gICAgICAgIG1lc3NhZ2UuZGF0YSA9IG9iamVjdC5kYXRhID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UucmF3TG9nID0gb2JqZWN0LnJhd0xvZyA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmxvZ3MgPSBvYmplY3QubG9ncz8ubWFwKChlKSA9PiBBQkNJTWVzc2FnZUxvZy5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UuaW5mbyA9IG9iamVjdC5pbmZvID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZ2FzV2FudGVkID0gb2JqZWN0Lmdhc1dhbnRlZCA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5nYXNVc2VkID0gb2JqZWN0Lmdhc1VzZWQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UudHggPVxuICAgICAgICAgICAgb2JqZWN0LnR4ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnR4ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBBbnkuZnJvbVBhcnRpYWwob2JqZWN0LnR4KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9IG9iamVjdC50aW1lc3RhbXAgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5ldmVudHMgPSBvYmplY3QuZXZlbnRzPy5tYXAoKGUpID0+IEV2ZW50LmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQUJDSU1lc3NhZ2VMb2coKSB7XG4gICAgcmV0dXJuIHsgbXNnSW5kZXg6IDAsIGxvZzogXCJcIiwgZXZlbnRzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IEFCQ0lNZXNzYWdlTG9nID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLm1zZ0luZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQzMihtZXNzYWdlLm1zZ0luZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sb2cgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLmxvZyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZXZlbnRzKSB7XG4gICAgICAgICAgICBTdHJpbmdFdmVudC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUFCQ0lNZXNzYWdlTG9nKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tc2dJbmRleCA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxvZyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50cy5wdXNoKFN0cmluZ0V2ZW50LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtc2dJbmRleDogaXNTZXQob2JqZWN0Lm1zZ0luZGV4KSA/IE51bWJlcihvYmplY3QubXNnSW5kZXgpIDogMCxcbiAgICAgICAgICAgIGxvZzogaXNTZXQob2JqZWN0LmxvZykgPyBTdHJpbmcob2JqZWN0LmxvZykgOiBcIlwiLFxuICAgICAgICAgICAgZXZlbnRzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uZXZlbnRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmV2ZW50cy5tYXAoKGUpID0+IFN0cmluZ0V2ZW50LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5tc2dJbmRleCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLm1zZ0luZGV4ID0gTWF0aC5yb3VuZChtZXNzYWdlLm1zZ0luZGV4KSk7XG4gICAgICAgIG1lc3NhZ2UubG9nICE9PSB1bmRlZmluZWQgJiYgKG9iai5sb2cgPSBtZXNzYWdlLmxvZyk7XG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50cykge1xuICAgICAgICAgICAgb2JqLmV2ZW50cyA9IG1lc3NhZ2UuZXZlbnRzLm1hcCgoZSkgPT4gZSA/IFN0cmluZ0V2ZW50LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouZXZlbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUFCQ0lNZXNzYWdlTG9nKCk7XG4gICAgICAgIG1lc3NhZ2UubXNnSW5kZXggPSBvYmplY3QubXNnSW5kZXggPz8gMDtcbiAgICAgICAgbWVzc2FnZS5sb2cgPSBvYmplY3QubG9nID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZXZlbnRzID1cbiAgICAgICAgICAgIG9iamVjdC5ldmVudHM/Lm1hcCgoZSkgPT4gU3RyaW5nRXZlbnQuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTdHJpbmdFdmVudCgpIHtcbiAgICByZXR1cm4geyB0eXBlOiBcIlwiLCBhdHRyaWJ1dGVzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IFN0cmluZ0V2ZW50ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIEF0dHJpYnV0ZS5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVN0cmluZ0V2ZW50KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50eXBlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXR0cmlidXRlcy5wdXNoKEF0dHJpYnV0ZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogaXNTZXQob2JqZWN0LnR5cGUpID8gU3RyaW5nKG9iamVjdC50eXBlKSA6IFwiXCIsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uYXR0cmlidXRlcylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5hdHRyaWJ1dGVzLm1hcCgoZSkgPT4gQXR0cmlidXRlLmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50eXBlICE9PSB1bmRlZmluZWQgJiYgKG9iai50eXBlID0gbWVzc2FnZS50eXBlKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgb2JqLmF0dHJpYnV0ZXMgPSBtZXNzYWdlLmF0dHJpYnV0ZXMubWFwKChlKSA9PiBlID8gQXR0cmlidXRlLnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouYXR0cmlidXRlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTdHJpbmdFdmVudCgpO1xuICAgICAgICBtZXNzYWdlLnR5cGUgPSBvYmplY3QudHlwZSA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLmF0dHJpYnV0ZXMgPVxuICAgICAgICAgICAgb2JqZWN0LmF0dHJpYnV0ZXM/Lm1hcCgoZSkgPT4gQXR0cmlidXRlLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQXR0cmlidXRlKCkge1xuICAgIHJldHVybiB7IGtleTogXCJcIiwgdmFsdWU6IFwiXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBBdHRyaWJ1dGUgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uua2V5ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZhbHVlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VBdHRyaWJ1dGUoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IGlzU2V0KG9iamVjdC5rZXkpID8gU3RyaW5nKG9iamVjdC5rZXkpIDogXCJcIixcbiAgICAgICAgICAgIHZhbHVlOiBpc1NldChvYmplY3QudmFsdWUpID8gU3RyaW5nKG9iamVjdC52YWx1ZSkgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uua2V5ICE9PSB1bmRlZmluZWQgJiYgKG9iai5rZXkgPSBtZXNzYWdlLmtleSk7XG4gICAgICAgIG1lc3NhZ2UudmFsdWUgIT09IHVuZGVmaW5lZCAmJiAob2JqLnZhbHVlID0gbWVzc2FnZS52YWx1ZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VBdHRyaWJ1dGUoKTtcbiAgICAgICAgbWVzc2FnZS5rZXkgPSBvYmplY3Qua2V5ID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UudmFsdWUgPSBvYmplY3QudmFsdWUgPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlR2FzSW5mbygpIHtcbiAgICByZXR1cm4geyBnYXNXYW50ZWQ6IFwiMFwiLCBnYXNVc2VkOiBcIjBcIiB9O1xufVxuZXhwb3J0IGNvbnN0IEdhc0luZm8gPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZ2FzV2FudGVkICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50NjQobWVzc2FnZS5nYXNXYW50ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmdhc1VzZWQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS51aW50NjQobWVzc2FnZS5nYXNVc2VkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUdhc0luZm8oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmdhc1dhbnRlZCA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2FzVXNlZCA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnYXNXYW50ZWQ6IGlzU2V0KG9iamVjdC5nYXNXYW50ZWQpID8gU3RyaW5nKG9iamVjdC5nYXNXYW50ZWQpIDogXCIwXCIsXG4gICAgICAgICAgICBnYXNVc2VkOiBpc1NldChvYmplY3QuZ2FzVXNlZCkgPyBTdHJpbmcob2JqZWN0Lmdhc1VzZWQpIDogXCIwXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5nYXNXYW50ZWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmdhc1dhbnRlZCA9IG1lc3NhZ2UuZ2FzV2FudGVkKTtcbiAgICAgICAgbWVzc2FnZS5nYXNVc2VkICE9PSB1bmRlZmluZWQgJiYgKG9iai5nYXNVc2VkID0gbWVzc2FnZS5nYXNVc2VkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUdhc0luZm8oKTtcbiAgICAgICAgbWVzc2FnZS5nYXNXYW50ZWQgPSBvYmplY3QuZ2FzV2FudGVkID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLmdhc1VzZWQgPSBvYmplY3QuZ2FzVXNlZCA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVzdWx0KCkge1xuICAgIHJldHVybiB7IGRhdGE6IG5ldyBVaW50OEFycmF5KCksIGxvZzogXCJcIiwgZXZlbnRzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IFJlc3VsdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5kYXRhLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sb2cgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLmxvZyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZXZlbnRzKSB7XG4gICAgICAgICAgICBFdmVudC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJlc3VsdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGF0YSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9nID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXZlbnRzLnB1c2goRXZlbnQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IGlzU2V0KG9iamVjdC5kYXRhKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5kYXRhKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIGxvZzogaXNTZXQob2JqZWN0LmxvZykgPyBTdHJpbmcob2JqZWN0LmxvZykgOiBcIlwiLFxuICAgICAgICAgICAgZXZlbnRzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uZXZlbnRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmV2ZW50cy5tYXAoKGUpID0+IEV2ZW50LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZGF0YSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UuZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5sb2cgIT09IHVuZGVmaW5lZCAmJiAob2JqLmxvZyA9IG1lc3NhZ2UubG9nKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZXZlbnRzKSB7XG4gICAgICAgICAgICBvYmouZXZlbnRzID0gbWVzc2FnZS5ldmVudHMubWFwKChlKSA9PiAoZSA/IEV2ZW50LnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmV2ZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZXN1bHQoKTtcbiAgICAgICAgbWVzc2FnZS5kYXRhID0gb2JqZWN0LmRhdGEgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5sb2cgPSBvYmplY3QubG9nID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZXZlbnRzID0gb2JqZWN0LmV2ZW50cz8ubWFwKChlKSA9PiBFdmVudC5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVNpbXVsYXRpb25SZXNwb25zZSgpIHtcbiAgICByZXR1cm4geyBnYXNJbmZvOiB1bmRlZmluZWQsIHJlc3VsdDogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgU2ltdWxhdGlvblJlc3BvbnNlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmdhc0luZm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgR2FzSW5mby5lbmNvZGUobWVzc2FnZS5nYXNJbmZvLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBSZXN1bHQuZW5jb2RlKG1lc3NhZ2UucmVzdWx0LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2ltdWxhdGlvblJlc3BvbnNlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5nYXNJbmZvID0gR2FzSW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVzdWx0ID0gUmVzdWx0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdhc0luZm86IGlzU2V0KG9iamVjdC5nYXNJbmZvKVxuICAgICAgICAgICAgICAgID8gR2FzSW5mby5mcm9tSlNPTihvYmplY3QuZ2FzSW5mbylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJlc3VsdDogaXNTZXQob2JqZWN0LnJlc3VsdCkgPyBSZXN1bHQuZnJvbUpTT04ob2JqZWN0LnJlc3VsdCkgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5nYXNJbmZvICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZ2FzSW5mbyA9IG1lc3NhZ2UuZ2FzSW5mb1xuICAgICAgICAgICAgICAgID8gR2FzSW5mby50b0pTT04obWVzc2FnZS5nYXNJbmZvKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5yZXN1bHQgPSBtZXNzYWdlLnJlc3VsdCA/IFJlc3VsdC50b0pTT04obWVzc2FnZS5yZXN1bHQpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpbXVsYXRpb25SZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLmdhc0luZm8gPVxuICAgICAgICAgICAgb2JqZWN0Lmdhc0luZm8gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZ2FzSW5mbyAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gR2FzSW5mby5mcm9tUGFydGlhbChvYmplY3QuZ2FzSW5mbylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5yZXN1bHQgPVxuICAgICAgICAgICAgb2JqZWN0LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5yZXN1bHQgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlc3VsdC5mcm9tUGFydGlhbChvYmplY3QucmVzdWx0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VNc2dEYXRhKCkge1xuICAgIHJldHVybiB7IG1zZ1R5cGU6IFwiXCIsIGRhdGE6IG5ldyBVaW50OEFycmF5KCkgfTtcbn1cbmV4cG9ydCBjb25zdCBNc2dEYXRhID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLm1zZ1R5cGUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLm1zZ1R5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5ieXRlcyhtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnRGF0YSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubXNnVHlwZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRhdGEgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbXNnVHlwZTogaXNTZXQob2JqZWN0Lm1zZ1R5cGUpID8gU3RyaW5nKG9iamVjdC5tc2dUeXBlKSA6IFwiXCIsXG4gICAgICAgICAgICBkYXRhOiBpc1NldChvYmplY3QuZGF0YSlcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuZGF0YSlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5tc2dUeXBlICE9PSB1bmRlZmluZWQgJiYgKG9iai5tc2dUeXBlID0gbWVzc2FnZS5tc2dUeXBlKTtcbiAgICAgICAgbWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZGF0YSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UuZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1zZ0RhdGEoKTtcbiAgICAgICAgbWVzc2FnZS5tc2dUeXBlID0gb2JqZWN0Lm1zZ1R5cGUgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5kYXRhID0gb2JqZWN0LmRhdGEgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlVHhNc2dEYXRhKCkge1xuICAgIHJldHVybiB7IGRhdGE6IFtdIH07XG59XG5leHBvcnQgY29uc3QgVHhNc2dEYXRhID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmRhdGEpIHtcbiAgICAgICAgICAgIE1zZ0RhdGEuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUeE1zZ0RhdGEoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRhdGEucHVzaChNc2dEYXRhLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBBcnJheS5pc0FycmF5KG9iamVjdD8uZGF0YSlcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5kYXRhLm1hcCgoZSkgPT4gTXNnRGF0YS5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEpIHtcbiAgICAgICAgICAgIG9iai5kYXRhID0gbWVzc2FnZS5kYXRhLm1hcCgoZSkgPT4gKGUgPyBNc2dEYXRhLnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmRhdGEgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVHhNc2dEYXRhKCk7XG4gICAgICAgIG1lc3NhZ2UuZGF0YSA9IG9iamVjdC5kYXRhPy5tYXAoKGUpID0+IE1zZ0RhdGEuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTZWFyY2hUeHNSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG90YWxDb3VudDogXCIwXCIsXG4gICAgICAgIGNvdW50OiBcIjBcIixcbiAgICAgICAgcGFnZU51bWJlcjogXCIwXCIsXG4gICAgICAgIHBhZ2VUb3RhbDogXCIwXCIsXG4gICAgICAgIGxpbWl0OiBcIjBcIixcbiAgICAgICAgdHhzOiBbXSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IFNlYXJjaFR4c1Jlc3VsdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS50b3RhbENvdW50ICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50NjQobWVzc2FnZS50b3RhbENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb3VudCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLnVpbnQ2NChtZXNzYWdlLmNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wYWdlTnVtYmVyICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkudWludDY0KG1lc3NhZ2UucGFnZU51bWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFnZVRvdGFsICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikudWludDY0KG1lc3NhZ2UucGFnZVRvdGFsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5saW1pdCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLnVpbnQ2NChtZXNzYWdlLmxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS50eHMpIHtcbiAgICAgICAgICAgIFR4UmVzcG9uc2UuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTZWFyY2hUeHNSZXN1bHQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRvdGFsQ291bnQgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvdW50ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWdlTnVtYmVyID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWdlVG90YWwgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxpbWl0ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50eHMucHVzaChUeFJlc3BvbnNlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3RhbENvdW50OiBpc1NldChvYmplY3QudG90YWxDb3VudCkgPyBTdHJpbmcob2JqZWN0LnRvdGFsQ291bnQpIDogXCIwXCIsXG4gICAgICAgICAgICBjb3VudDogaXNTZXQob2JqZWN0LmNvdW50KSA/IFN0cmluZyhvYmplY3QuY291bnQpIDogXCIwXCIsXG4gICAgICAgICAgICBwYWdlTnVtYmVyOiBpc1NldChvYmplY3QucGFnZU51bWJlcikgPyBTdHJpbmcob2JqZWN0LnBhZ2VOdW1iZXIpIDogXCIwXCIsXG4gICAgICAgICAgICBwYWdlVG90YWw6IGlzU2V0KG9iamVjdC5wYWdlVG90YWwpID8gU3RyaW5nKG9iamVjdC5wYWdlVG90YWwpIDogXCIwXCIsXG4gICAgICAgICAgICBsaW1pdDogaXNTZXQob2JqZWN0LmxpbWl0KSA/IFN0cmluZyhvYmplY3QubGltaXQpIDogXCIwXCIsXG4gICAgICAgICAgICB0eHM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py50eHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QudHhzLm1hcCgoZSkgPT4gVHhSZXNwb25zZS5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudG90YWxDb3VudCAhPT0gdW5kZWZpbmVkICYmIChvYmoudG90YWxDb3VudCA9IG1lc3NhZ2UudG90YWxDb3VudCk7XG4gICAgICAgIG1lc3NhZ2UuY291bnQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmNvdW50ID0gbWVzc2FnZS5jb3VudCk7XG4gICAgICAgIG1lc3NhZ2UucGFnZU51bWJlciAhPT0gdW5kZWZpbmVkICYmIChvYmoucGFnZU51bWJlciA9IG1lc3NhZ2UucGFnZU51bWJlcik7XG4gICAgICAgIG1lc3NhZ2UucGFnZVRvdGFsICE9PSB1bmRlZmluZWQgJiYgKG9iai5wYWdlVG90YWwgPSBtZXNzYWdlLnBhZ2VUb3RhbCk7XG4gICAgICAgIG1lc3NhZ2UubGltaXQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmxpbWl0ID0gbWVzc2FnZS5saW1pdCk7XG4gICAgICAgIGlmIChtZXNzYWdlLnR4cykge1xuICAgICAgICAgICAgb2JqLnR4cyA9IG1lc3NhZ2UudHhzLm1hcCgoZSkgPT4gKGUgPyBUeFJlc3BvbnNlLnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnR4cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTZWFyY2hUeHNSZXN1bHQoKTtcbiAgICAgICAgbWVzc2FnZS50b3RhbENvdW50ID0gb2JqZWN0LnRvdGFsQ291bnQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UuY291bnQgPSBvYmplY3QuY291bnQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UucGFnZU51bWJlciA9IG9iamVjdC5wYWdlTnVtYmVyID8/IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLnBhZ2VUb3RhbCA9IG9iamVjdC5wYWdlVG90YWwgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UubGltaXQgPSBvYmplY3QubGltaXQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UudHhzID0gb2JqZWN0LnR4cz8ubWFwKChlKSA9PiBUeFJlc3BvbnNlLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG52YXIgZ2xvYmFsVGhpcyA9ICgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIHRocm93IFwiVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0XCI7XG59KSgpO1xuY29uc3QgYXRvYiA9IGdsb2JhbFRoaXMuYXRvYiB8fFxuICAgICgoYjY0KSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGI2NCwgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJiaW5hcnlcIikpO1xuZnVuY3Rpb24gYnl0ZXNGcm9tQmFzZTY0KGI2NCkge1xuICAgIGNvbnN0IGJpbiA9IGF0b2IoYjY0KTtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShiaW4ubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBhcnJbaV0gPSBiaW4uY2hhckNvZGVBdChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbmNvbnN0IGJ0b2EgPSBnbG9iYWxUaGlzLmJ0b2EgfHxcbiAgICAoKGJpbikgPT4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiaW4sIFwiYmluYXJ5XCIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpKTtcbmZ1bmN0aW9uIGJhc2U2NEZyb21CeXRlcyhhcnIpIHtcbiAgICBjb25zdCBiaW4gPSBbXTtcbiAgICBhcnIuZm9yRWFjaCgoYnl0ZSkgPT4ge1xuICAgICAgICBiaW4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYnRvYShiaW4uam9pbihcIlwiKSk7XG59XG5mdW5jdGlvbiBsb25nVG9TdHJpbmcobG9uZykge1xuICAgIHJldHVybiBsb25nLnRvU3RyaW5nKCk7XG59XG5pZiAoX20wLnV0aWwuTG9uZyAhPT0gTG9uZykge1xuICAgIF9tMC51dGlsLkxvbmcgPSBMb25nO1xuICAgIF9tMC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hYmNpLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwiY29zbW9zLmNyeXB0by5tdWx0aXNpZy52MWJldGExXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlTXVsdGlTaWduYXR1cmUoKSB7XG4gICAgcmV0dXJuIHsgc2lnbmF0dXJlczogW10gfTtcbn1cbmV4cG9ydCBjb25zdCBNdWx0aVNpZ25hdHVyZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zaWduYXR1cmVzKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5ieXRlcyh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU11bHRpU2lnbmF0dXJlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zaWduYXR1cmVzLnB1c2gocmVhZGVyLmJ5dGVzKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaWduYXR1cmVzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uc2lnbmF0dXJlcylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5zaWduYXR1cmVzLm1hcCgoZSkgPT4gYnl0ZXNGcm9tQmFzZTY0KGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2lnbmF0dXJlcykge1xuICAgICAgICAgICAgb2JqLnNpZ25hdHVyZXMgPSBtZXNzYWdlLnNpZ25hdHVyZXMubWFwKChlKSA9PiBiYXNlNjRGcm9tQnl0ZXMoZSAhPT0gdW5kZWZpbmVkID8gZSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zaWduYXR1cmVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU11bHRpU2lnbmF0dXJlKCk7XG4gICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlcyA9IG9iamVjdC5zaWduYXR1cmVzPy5tYXAoKGUpID0+IGUpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VDb21wYWN0Qml0QXJyYXkoKSB7XG4gICAgcmV0dXJuIHsgZXh0cmFCaXRzU3RvcmVkOiAwLCBlbGVtczogbmV3IFVpbnQ4QXJyYXkoKSB9O1xufVxuZXhwb3J0IGNvbnN0IENvbXBhY3RCaXRBcnJheSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5leHRyYUJpdHNTdG9yZWQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkudWludDMyKG1lc3NhZ2UuZXh0cmFCaXRzU3RvcmVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lbGVtcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2UuZWxlbXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcGFjdEJpdEFycmF5KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5leHRyYUJpdHNTdG9yZWQgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lbGVtcyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBleHRyYUJpdHNTdG9yZWQ6IGlzU2V0KG9iamVjdC5leHRyYUJpdHNTdG9yZWQpXG4gICAgICAgICAgICAgICAgPyBOdW1iZXIob2JqZWN0LmV4dHJhQml0c1N0b3JlZClcbiAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgICAgICBlbGVtczogaXNTZXQob2JqZWN0LmVsZW1zKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5lbGVtcylcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5leHRyYUJpdHNTdG9yZWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5leHRyYUJpdHNTdG9yZWQgPSBNYXRoLnJvdW5kKG1lc3NhZ2UuZXh0cmFCaXRzU3RvcmVkKSk7XG4gICAgICAgIG1lc3NhZ2UuZWxlbXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5lbGVtcyA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmVsZW1zICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmVsZW1zIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcGFjdEJpdEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UuZXh0cmFCaXRzU3RvcmVkID0gb2JqZWN0LmV4dHJhQml0c1N0b3JlZCA/PyAwO1xuICAgICAgICBtZXNzYWdlLmVsZW1zID0gb2JqZWN0LmVsZW1zID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xudmFyIGdsb2JhbFRoaXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB0aHJvdyBcIlVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdFwiO1xufSkoKTtcbmNvbnN0IGF0b2IgPSBnbG9iYWxUaGlzLmF0b2IgfHxcbiAgICAoKGI2NCkgPT4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiNjQsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwiYmluYXJ5XCIpKTtcbmZ1bmN0aW9uIGJ5dGVzRnJvbUJhc2U2NChiNjQpIHtcbiAgICBjb25zdCBiaW4gPSBhdG9iKGI2NCk7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYmluLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5jb25zdCBidG9hID0gZ2xvYmFsVGhpcy5idG9hIHx8XG4gICAgKChiaW4pID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYmluLCBcImJpbmFyeVwiKS50b1N0cmluZyhcImJhc2U2NFwiKSk7XG5mdW5jdGlvbiBiYXNlNjRGcm9tQnl0ZXMoYXJyKSB7XG4gICAgY29uc3QgYmluID0gW107XG4gICAgYXJyLmZvckVhY2goKGJ5dGUpID0+IHtcbiAgICAgICAgYmluLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJ0b2EoYmluLmpvaW4oXCJcIikpO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpc2lnLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBBbnkgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZ29vZ2xlL3Byb3RvYnVmL2FueVwiO1xuaW1wb3J0IHsgQ29tcGFjdEJpdEFycmF5IH0gZnJvbSBcIi4uLy4uLy4uL2NyeXB0by9tdWx0aXNpZy92MWJldGExL211bHRpc2lnXCI7XG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImNvc21vcy50eC5zaWduaW5nLnYxYmV0YTFcIjtcbi8qKiBTaWduTW9kZSByZXByZXNlbnRzIGEgc2lnbmluZyBtb2RlIHdpdGggaXRzIG93biBzZWN1cml0eSBndWFyYW50ZWVzLiAqL1xuZXhwb3J0IHZhciBTaWduTW9kZTtcbihmdW5jdGlvbiAoU2lnbk1vZGUpIHtcbiAgICAvKipcbiAgICAgKiBTSUdOX01PREVfVU5TUEVDSUZJRUQgLSBTSUdOX01PREVfVU5TUEVDSUZJRUQgc3BlY2lmaWVzIGFuIHVua25vd24gc2lnbmluZyBtb2RlIGFuZCB3aWxsIGJlXG4gICAgICogcmVqZWN0ZWRcbiAgICAgKi9cbiAgICBTaWduTW9kZVtTaWduTW9kZVtcIlNJR05fTU9ERV9VTlNQRUNJRklFRFwiXSA9IDBdID0gXCJTSUdOX01PREVfVU5TUEVDSUZJRURcIjtcbiAgICAvKipcbiAgICAgKiBTSUdOX01PREVfRElSRUNUIC0gU0lHTl9NT0RFX0RJUkVDVCBzcGVjaWZpZXMgYSBzaWduaW5nIG1vZGUgd2hpY2ggdXNlcyBTaWduRG9jIGFuZCBpc1xuICAgICAqIHZlcmlmaWVkIHdpdGggcmF3IGJ5dGVzIGZyb20gVHhcbiAgICAgKi9cbiAgICBTaWduTW9kZVtTaWduTW9kZVtcIlNJR05fTU9ERV9ESVJFQ1RcIl0gPSAxXSA9IFwiU0lHTl9NT0RFX0RJUkVDVFwiO1xuICAgIC8qKlxuICAgICAqIFNJR05fTU9ERV9URVhUVUFMIC0gU0lHTl9NT0RFX1RFWFRVQUwgaXMgYSBmdXR1cmUgc2lnbmluZyBtb2RlIHRoYXQgd2lsbCB2ZXJpZnkgc29tZVxuICAgICAqIGh1bWFuLXJlYWRhYmxlIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb24gdG9wIG9mIHRoZSBiaW5hcnkgcmVwcmVzZW50YXRpb25cbiAgICAgKiBmcm9tIFNJR05fTU9ERV9ESVJFQ1RcbiAgICAgKi9cbiAgICBTaWduTW9kZVtTaWduTW9kZVtcIlNJR05fTU9ERV9URVhUVUFMXCJdID0gMl0gPSBcIlNJR05fTU9ERV9URVhUVUFMXCI7XG4gICAgLyoqXG4gICAgICogU0lHTl9NT0RFX0xFR0FDWV9BTUlOT19KU09OIC0gU0lHTl9NT0RFX0xFR0FDWV9BTUlOT19KU09OIGlzIGEgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgbW9kZSB3aGljaCB1c2VzXG4gICAgICogQW1pbm8gSlNPTiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmVcbiAgICAgKi9cbiAgICBTaWduTW9kZVtTaWduTW9kZVtcIlNJR05fTU9ERV9MRUdBQ1lfQU1JTk9fSlNPTlwiXSA9IDEyN10gPSBcIlNJR05fTU9ERV9MRUdBQ1lfQU1JTk9fSlNPTlwiO1xuICAgIFNpZ25Nb2RlW1NpZ25Nb2RlW1wiVU5SRUNPR05JWkVEXCJdID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKFNpZ25Nb2RlIHx8IChTaWduTW9kZSA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gc2lnbk1vZGVGcm9tSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgXCJTSUdOX01PREVfVU5TUEVDSUZJRURcIjpcbiAgICAgICAgICAgIHJldHVybiBTaWduTW9kZS5TSUdOX01PREVfVU5TUEVDSUZJRUQ7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSBcIlNJR05fTU9ERV9ESVJFQ1RcIjpcbiAgICAgICAgICAgIHJldHVybiBTaWduTW9kZS5TSUdOX01PREVfRElSRUNUO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgIGNhc2UgXCJTSUdOX01PREVfVEVYVFVBTFwiOlxuICAgICAgICAgICAgcmV0dXJuIFNpZ25Nb2RlLlNJR05fTU9ERV9URVhUVUFMO1xuICAgICAgICBjYXNlIDEyNzpcbiAgICAgICAgY2FzZSBcIlNJR05fTU9ERV9MRUdBQ1lfQU1JTk9fSlNPTlwiOlxuICAgICAgICAgICAgcmV0dXJuIFNpZ25Nb2RlLlNJR05fTU9ERV9MRUdBQ1lfQU1JTk9fSlNPTjtcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgY2FzZSBcIlVOUkVDT0dOSVpFRFwiOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFNpZ25Nb2RlLlVOUkVDT0dOSVpFRDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2lnbk1vZGVUb0pTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSBTaWduTW9kZS5TSUdOX01PREVfVU5TUEVDSUZJRUQ6XG4gICAgICAgICAgICByZXR1cm4gXCJTSUdOX01PREVfVU5TUEVDSUZJRURcIjtcbiAgICAgICAgY2FzZSBTaWduTW9kZS5TSUdOX01PREVfRElSRUNUOlxuICAgICAgICAgICAgcmV0dXJuIFwiU0lHTl9NT0RFX0RJUkVDVFwiO1xuICAgICAgICBjYXNlIFNpZ25Nb2RlLlNJR05fTU9ERV9URVhUVUFMOlxuICAgICAgICAgICAgcmV0dXJuIFwiU0lHTl9NT0RFX1RFWFRVQUxcIjtcbiAgICAgICAgY2FzZSBTaWduTW9kZS5TSUdOX01PREVfTEVHQUNZX0FNSU5PX0pTT046XG4gICAgICAgICAgICByZXR1cm4gXCJTSUdOX01PREVfTEVHQUNZX0FNSU5PX0pTT05cIjtcbiAgICAgICAgY2FzZSBTaWduTW9kZS5VTlJFQ09HTklaRUQ6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJVTlJFQ09HTklaRURcIjtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVCYXNlU2lnbmF0dXJlRGVzY3JpcHRvcnMoKSB7XG4gICAgcmV0dXJuIHsgc2lnbmF0dXJlczogW10gfTtcbn1cbmV4cG9ydCBjb25zdCBTaWduYXR1cmVEZXNjcmlwdG9ycyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zaWduYXR1cmVzKSB7XG4gICAgICAgICAgICBTaWduYXR1cmVEZXNjcmlwdG9yLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2lnbmF0dXJlRGVzY3JpcHRvcnMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZXMucHVzaChTaWduYXR1cmVEZXNjcmlwdG9yLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaWduYXR1cmVzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uc2lnbmF0dXJlcylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5zaWduYXR1cmVzLm1hcCgoZSkgPT4gU2lnbmF0dXJlRGVzY3JpcHRvci5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ25hdHVyZXMpIHtcbiAgICAgICAgICAgIG9iai5zaWduYXR1cmVzID0gbWVzc2FnZS5zaWduYXR1cmVzLm1hcCgoZSkgPT4gZSA/IFNpZ25hdHVyZURlc2NyaXB0b3IudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zaWduYXR1cmVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25hdHVyZURlc2NyaXB0b3JzKCk7XG4gICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlcyA9XG4gICAgICAgICAgICBvYmplY3Quc2lnbmF0dXJlcz8ubWFwKChlKSA9PiBTaWduYXR1cmVEZXNjcmlwdG9yLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlU2lnbmF0dXJlRGVzY3JpcHRvcigpIHtcbiAgICByZXR1cm4geyBwdWJsaWNLZXk6IHVuZGVmaW5lZCwgZGF0YTogdW5kZWZpbmVkLCBzZXF1ZW5jZTogXCIwXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBTaWduYXR1cmVEZXNjcmlwdG9yID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnB1YmxpY0tleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBBbnkuZW5jb2RlKG1lc3NhZ2UucHVibGljS2V5LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhLmVuY29kZShtZXNzYWdlLmRhdGEsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VxdWVuY2UgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS51aW50NjQobWVzc2FnZS5zZXF1ZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTaWduYXR1cmVEZXNjcmlwdG9yKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wdWJsaWNLZXkgPSBBbnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRhdGEgPSBTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGEuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlcXVlbmNlID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHB1YmxpY0tleTogaXNTZXQob2JqZWN0LnB1YmxpY0tleSlcbiAgICAgICAgICAgICAgICA/IEFueS5mcm9tSlNPTihvYmplY3QucHVibGljS2V5KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGF0YTogaXNTZXQob2JqZWN0LmRhdGEpXG4gICAgICAgICAgICAgICAgPyBTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGEuZnJvbUpTT04ob2JqZWN0LmRhdGEpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzZXF1ZW5jZTogaXNTZXQob2JqZWN0LnNlcXVlbmNlKSA/IFN0cmluZyhvYmplY3Quc2VxdWVuY2UpIDogXCIwXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5wdWJsaWNLZXkgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wdWJsaWNLZXkgPSBtZXNzYWdlLnB1YmxpY0tleVxuICAgICAgICAgICAgICAgID8gQW55LnRvSlNPTihtZXNzYWdlLnB1YmxpY0tleSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuZGF0YSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmRhdGEgPSBtZXNzYWdlLmRhdGFcbiAgICAgICAgICAgICAgICA/IFNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YS50b0pTT04obWVzc2FnZS5kYXRhKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5zZXF1ZW5jZSAhPT0gdW5kZWZpbmVkICYmIChvYmouc2VxdWVuY2UgPSBtZXNzYWdlLnNlcXVlbmNlKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25hdHVyZURlc2NyaXB0b3IoKTtcbiAgICAgICAgbWVzc2FnZS5wdWJsaWNLZXkgPVxuICAgICAgICAgICAgb2JqZWN0LnB1YmxpY0tleSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wdWJsaWNLZXkgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IEFueS5mcm9tUGFydGlhbChvYmplY3QucHVibGljS2V5KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmRhdGEgPVxuICAgICAgICAgICAgb2JqZWN0LmRhdGEgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZGF0YSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhLmZyb21QYXJ0aWFsKG9iamVjdC5kYXRhKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnNlcXVlbmNlID0gb2JqZWN0LnNlcXVlbmNlID8/IFwiMFwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGEoKSB7XG4gICAgcmV0dXJuIHsgc2luZ2xlOiB1bmRlZmluZWQsIG11bHRpOiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGEgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2luZ2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YV9TaW5nbGUuZW5jb2RlKG1lc3NhZ2Uuc2luZ2xlLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm11bHRpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YV9NdWx0aS5lbmNvZGUobWVzc2FnZS5tdWx0aSwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2luZ2xlID0gU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhX1NpbmdsZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubXVsdGkgPSBTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGFfTXVsdGkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2luZ2xlOiBpc1NldChvYmplY3Quc2luZ2xlKVxuICAgICAgICAgICAgICAgID8gU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhX1NpbmdsZS5mcm9tSlNPTihvYmplY3Quc2luZ2xlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbXVsdGk6IGlzU2V0KG9iamVjdC5tdWx0aSlcbiAgICAgICAgICAgICAgICA/IFNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YV9NdWx0aS5mcm9tSlNPTihvYmplY3QubXVsdGkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5zaW5nbGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5zaW5nbGUgPSBtZXNzYWdlLnNpbmdsZVxuICAgICAgICAgICAgICAgID8gU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhX1NpbmdsZS50b0pTT04obWVzc2FnZS5zaW5nbGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLm11bHRpICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubXVsdGkgPSBtZXNzYWdlLm11bHRpXG4gICAgICAgICAgICAgICAgPyBTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGFfTXVsdGkudG9KU09OKG1lc3NhZ2UubXVsdGkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhKCk7XG4gICAgICAgIG1lc3NhZ2Uuc2luZ2xlID1cbiAgICAgICAgICAgIG9iamVjdC5zaW5nbGUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Quc2luZ2xlICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGFfU2luZ2xlLmZyb21QYXJ0aWFsKG9iamVjdC5zaW5nbGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UubXVsdGkgPVxuICAgICAgICAgICAgb2JqZWN0Lm11bHRpICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0Lm11bHRpICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGFfTXVsdGkuZnJvbVBhcnRpYWwob2JqZWN0Lm11bHRpKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGFfU2luZ2xlKCkge1xuICAgIHJldHVybiB7IG1vZGU6IDAsIHNpZ25hdHVyZTogbmV3IFVpbnQ4QXJyYXkoKSB9O1xufVxuZXhwb3J0IGNvbnN0IFNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YV9TaW5nbGUgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UubW9kZSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLm1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ25hdHVyZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2Uuc2lnbmF0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YV9TaW5nbGUoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1vZGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RlOiBpc1NldChvYmplY3QubW9kZSkgPyBzaWduTW9kZUZyb21KU09OKG9iamVjdC5tb2RlKSA6IDAsXG4gICAgICAgICAgICBzaWduYXR1cmU6IGlzU2V0KG9iamVjdC5zaWduYXR1cmUpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnNpZ25hdHVyZSlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5tb2RlICE9PSB1bmRlZmluZWQgJiYgKG9iai5tb2RlID0gc2lnbk1vZGVUb0pTT04obWVzc2FnZS5tb2RlKSk7XG4gICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouc2lnbmF0dXJlID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2Uuc2lnbmF0dXJlICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLnNpZ25hdHVyZSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YV9TaW5nbGUoKTtcbiAgICAgICAgbWVzc2FnZS5tb2RlID0gb2JqZWN0Lm1vZGUgPz8gMDtcbiAgICAgICAgbWVzc2FnZS5zaWduYXR1cmUgPSBvYmplY3Quc2lnbmF0dXJlID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YV9NdWx0aSgpIHtcbiAgICByZXR1cm4geyBiaXRhcnJheTogdW5kZWZpbmVkLCBzaWduYXR1cmVzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IFNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YV9NdWx0aSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5iaXRhcnJheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb21wYWN0Qml0QXJyYXkuZW5jb2RlKG1lc3NhZ2UuYml0YXJyYXksIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2Uuc2lnbmF0dXJlcykge1xuICAgICAgICAgICAgU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhX011bHRpKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5iaXRhcnJheSA9IENvbXBhY3RCaXRBcnJheS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlcy5wdXNoKFNpZ25hdHVyZURlc2NyaXB0b3JfRGF0YS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYml0YXJyYXk6IGlzU2V0KG9iamVjdC5iaXRhcnJheSlcbiAgICAgICAgICAgICAgICA/IENvbXBhY3RCaXRBcnJheS5mcm9tSlNPTihvYmplY3QuYml0YXJyYXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzaWduYXR1cmVzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uc2lnbmF0dXJlcylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5zaWduYXR1cmVzLm1hcCgoZSkgPT4gU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhLmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5iaXRhcnJheSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmJpdGFycmF5ID0gbWVzc2FnZS5iaXRhcnJheVxuICAgICAgICAgICAgICAgID8gQ29tcGFjdEJpdEFycmF5LnRvSlNPTihtZXNzYWdlLmJpdGFycmF5KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2lnbmF0dXJlcykge1xuICAgICAgICAgICAgb2JqLnNpZ25hdHVyZXMgPSBtZXNzYWdlLnNpZ25hdHVyZXMubWFwKChlKSA9PiBlID8gU2lnbmF0dXJlRGVzY3JpcHRvcl9EYXRhLnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouc2lnbmF0dXJlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGFfTXVsdGkoKTtcbiAgICAgICAgbWVzc2FnZS5iaXRhcnJheSA9XG4gICAgICAgICAgICBvYmplY3QuYml0YXJyYXkgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYml0YXJyYXkgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IENvbXBhY3RCaXRBcnJheS5mcm9tUGFydGlhbChvYmplY3QuYml0YXJyYXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlcyA9XG4gICAgICAgICAgICBvYmplY3Quc2lnbmF0dXJlcz8ubWFwKChlKSA9PiBTaWduYXR1cmVEZXNjcmlwdG9yX0RhdGEuZnJvbVBhcnRpYWwoZSkpIHx8XG4gICAgICAgICAgICAgICAgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xudmFyIGdsb2JhbFRoaXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB0aHJvdyBcIlVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdFwiO1xufSkoKTtcbmNvbnN0IGF0b2IgPSBnbG9iYWxUaGlzLmF0b2IgfHxcbiAgICAoKGI2NCkgPT4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiNjQsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwiYmluYXJ5XCIpKTtcbmZ1bmN0aW9uIGJ5dGVzRnJvbUJhc2U2NChiNjQpIHtcbiAgICBjb25zdCBiaW4gPSBhdG9iKGI2NCk7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYmluLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5jb25zdCBidG9hID0gZ2xvYmFsVGhpcy5idG9hIHx8XG4gICAgKChiaW4pID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYmluLCBcImJpbmFyeVwiKS50b1N0cmluZyhcImJhc2U2NFwiKSk7XG5mdW5jdGlvbiBiYXNlNjRGcm9tQnl0ZXMoYXJyKSB7XG4gICAgY29uc3QgYmluID0gW107XG4gICAgYXJyLmZvckVhY2goKGJ5dGUpID0+IHtcbiAgICAgICAgYmluLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJ0b2EoYmluLmpvaW4oXCJcIikpO1xufVxuZnVuY3Rpb24gbG9uZ1RvU3RyaW5nKGxvbmcpIHtcbiAgICByZXR1cm4gbG9uZy50b1N0cmluZygpO1xufVxuaWYgKF9tMC51dGlsLkxvbmcgIT09IExvbmcpIHtcbiAgICBfbTAudXRpbC5Mb25nID0gTG9uZztcbiAgICBfbTAuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnbmluZy5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgQW55IH0gZnJvbSBcIi4uLy4uLy4uL2dvb2dsZS9wcm90b2J1Zi9hbnlcIjtcbmltcG9ydCB7IHNpZ25Nb2RlRnJvbUpTT04sIHNpZ25Nb2RlVG9KU09OLCB9IGZyb20gXCIuLi9zaWduaW5nL3YxYmV0YTEvc2lnbmluZ1wiO1xuaW1wb3J0IHsgQ29tcGFjdEJpdEFycmF5IH0gZnJvbSBcIi4uLy4uL2NyeXB0by9tdWx0aXNpZy92MWJldGExL211bHRpc2lnXCI7XG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0IHsgQ29pbiB9IGZyb20gXCIuLi8uLi9iYXNlL3YxYmV0YTEvY29pblwiO1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImNvc21vcy50eC52MWJldGExXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlVHgoKSB7XG4gICAgcmV0dXJuIHsgYm9keTogdW5kZWZpbmVkLCBhdXRoSW5mbzogdW5kZWZpbmVkLCBzaWduYXR1cmVzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IFR4ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVHhCb2R5LmVuY29kZShtZXNzYWdlLmJvZHksIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYXV0aEluZm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQXV0aEluZm8uZW5jb2RlKG1lc3NhZ2UuYXV0aEluZm8sIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2Uuc2lnbmF0dXJlcykge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuYnl0ZXModik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUeCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keSA9IFR4Qm9keS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXV0aEluZm8gPSBBdXRoSW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlcy5wdXNoKHJlYWRlci5ieXRlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYm9keTogaXNTZXQob2JqZWN0LmJvZHkpID8gVHhCb2R5LmZyb21KU09OKG9iamVjdC5ib2R5KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGF1dGhJbmZvOiBpc1NldChvYmplY3QuYXV0aEluZm8pXG4gICAgICAgICAgICAgICAgPyBBdXRoSW5mby5mcm9tSlNPTihvYmplY3QuYXV0aEluZm8pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzaWduYXR1cmVzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uc2lnbmF0dXJlcylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5zaWduYXR1cmVzLm1hcCgoZSkgPT4gYnl0ZXNGcm9tQmFzZTY0KGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5ib2R5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYm9keSA9IG1lc3NhZ2UuYm9keSA/IFR4Qm9keS50b0pTT04obWVzc2FnZS5ib2R5KSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuYXV0aEluZm8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5hdXRoSW5mbyA9IG1lc3NhZ2UuYXV0aEluZm9cbiAgICAgICAgICAgICAgICA/IEF1dGhJbmZvLnRvSlNPTihtZXNzYWdlLmF1dGhJbmZvKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2lnbmF0dXJlcykge1xuICAgICAgICAgICAgb2JqLnNpZ25hdHVyZXMgPSBtZXNzYWdlLnNpZ25hdHVyZXMubWFwKChlKSA9PiBiYXNlNjRGcm9tQnl0ZXMoZSAhPT0gdW5kZWZpbmVkID8gZSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zaWduYXR1cmVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVR4KCk7XG4gICAgICAgIG1lc3NhZ2UuYm9keSA9XG4gICAgICAgICAgICBvYmplY3QuYm9keSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5ib2R5ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBUeEJvZHkuZnJvbVBhcnRpYWwob2JqZWN0LmJvZHkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYXV0aEluZm8gPVxuICAgICAgICAgICAgb2JqZWN0LmF1dGhJbmZvICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmF1dGhJbmZvICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBBdXRoSW5mby5mcm9tUGFydGlhbChvYmplY3QuYXV0aEluZm8pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlcyA9IG9iamVjdC5zaWduYXR1cmVzPy5tYXAoKGUpID0+IGUpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VUeFJhdygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBib2R5Qnl0ZXM6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIGF1dGhJbmZvQnl0ZXM6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIHNpZ25hdHVyZXM6IFtdLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgVHhSYXcgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYm9keUJ5dGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5ib2R5Qnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmF1dGhJbmZvQnl0ZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5ieXRlcyhtZXNzYWdlLmF1dGhJbmZvQnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnNpZ25hdHVyZXMpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLmJ5dGVzKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVHhSYXcoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHlCeXRlcyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXV0aEluZm9CeXRlcyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlcy5wdXNoKHJlYWRlci5ieXRlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYm9keUJ5dGVzOiBpc1NldChvYmplY3QuYm9keUJ5dGVzKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5ib2R5Qnl0ZXMpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgYXV0aEluZm9CeXRlczogaXNTZXQob2JqZWN0LmF1dGhJbmZvQnl0ZXMpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmF1dGhJbmZvQnl0ZXMpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgc2lnbmF0dXJlczogQXJyYXkuaXNBcnJheShvYmplY3Q/LnNpZ25hdHVyZXMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3Quc2lnbmF0dXJlcy5tYXAoKGUpID0+IGJ5dGVzRnJvbUJhc2U2NChlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYm9keUJ5dGVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYm9keUJ5dGVzID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuYm9keUJ5dGVzICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmJvZHlCeXRlcyA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5hdXRoSW5mb0J5dGVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYXV0aEluZm9CeXRlcyA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmF1dGhJbmZvQnl0ZXMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gbWVzc2FnZS5hdXRoSW5mb0J5dGVzXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ25hdHVyZXMpIHtcbiAgICAgICAgICAgIG9iai5zaWduYXR1cmVzID0gbWVzc2FnZS5zaWduYXR1cmVzLm1hcCgoZSkgPT4gYmFzZTY0RnJvbUJ5dGVzKGUgIT09IHVuZGVmaW5lZCA/IGUgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouc2lnbmF0dXJlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUeFJhdygpO1xuICAgICAgICBtZXNzYWdlLmJvZHlCeXRlcyA9IG9iamVjdC5ib2R5Qnl0ZXMgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5hdXRoSW5mb0J5dGVzID0gb2JqZWN0LmF1dGhJbmZvQnl0ZXMgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5zaWduYXR1cmVzID0gb2JqZWN0LnNpZ25hdHVyZXM/Lm1hcCgoZSkgPT4gZSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVNpZ25Eb2MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYm9keUJ5dGVzOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBhdXRoSW5mb0J5dGVzOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBjaGFpbklkOiBcIlwiLFxuICAgICAgICBhY2NvdW50TnVtYmVyOiBcIjBcIixcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IFNpZ25Eb2MgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYm9keUJ5dGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5ib2R5Qnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmF1dGhJbmZvQnl0ZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5ieXRlcyhtZXNzYWdlLmF1dGhJbmZvQnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNoYWluSWQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLmNoYWluSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmFjY291bnROdW1iZXIgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDMyKS51aW50NjQobWVzc2FnZS5hY2NvdW50TnVtYmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25Eb2MoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHlCeXRlcyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXV0aEluZm9CeXRlcyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2hhaW5JZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFjY291bnROdW1iZXIgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYm9keUJ5dGVzOiBpc1NldChvYmplY3QuYm9keUJ5dGVzKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5ib2R5Qnl0ZXMpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgYXV0aEluZm9CeXRlczogaXNTZXQob2JqZWN0LmF1dGhJbmZvQnl0ZXMpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmF1dGhJbmZvQnl0ZXMpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgY2hhaW5JZDogaXNTZXQob2JqZWN0LmNoYWluSWQpID8gU3RyaW5nKG9iamVjdC5jaGFpbklkKSA6IFwiXCIsXG4gICAgICAgICAgICBhY2NvdW50TnVtYmVyOiBpc1NldChvYmplY3QuYWNjb3VudE51bWJlcilcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3QuYWNjb3VudE51bWJlcilcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYm9keUJ5dGVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYm9keUJ5dGVzID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuYm9keUJ5dGVzICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmJvZHlCeXRlcyA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5hdXRoSW5mb0J5dGVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYXV0aEluZm9CeXRlcyA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmF1dGhJbmZvQnl0ZXMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gbWVzc2FnZS5hdXRoSW5mb0J5dGVzXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UuY2hhaW5JZCAhPT0gdW5kZWZpbmVkICYmIChvYmouY2hhaW5JZCA9IG1lc3NhZ2UuY2hhaW5JZCk7XG4gICAgICAgIG1lc3NhZ2UuYWNjb3VudE51bWJlciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmFjY291bnROdW1iZXIgPSBtZXNzYWdlLmFjY291bnROdW1iZXIpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2lnbkRvYygpO1xuICAgICAgICBtZXNzYWdlLmJvZHlCeXRlcyA9IG9iamVjdC5ib2R5Qnl0ZXMgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5hdXRoSW5mb0J5dGVzID0gb2JqZWN0LmF1dGhJbmZvQnl0ZXMgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5jaGFpbklkID0gb2JqZWN0LmNoYWluSWQgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5hY2NvdW50TnVtYmVyID0gb2JqZWN0LmFjY291bnROdW1iZXIgPz8gXCIwXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVR4Qm9keSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgIG1lbW86IFwiXCIsXG4gICAgICAgIHRpbWVvdXRIZWlnaHQ6IFwiMFwiLFxuICAgICAgICBleHRlbnNpb25PcHRpb25zOiBbXSxcbiAgICAgICAgbm9uQ3JpdGljYWxFeHRlbnNpb25PcHRpb25zOiBbXSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IFR4Qm9keSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5tZXNzYWdlcykge1xuICAgICAgICAgICAgQW55LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1lbW8gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLm1lbW8pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnRpbWVvdXRIZWlnaHQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS51aW50NjQobWVzc2FnZS50aW1lb3V0SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5leHRlbnNpb25PcHRpb25zKSB7XG4gICAgICAgICAgICBBbnkuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoODE4NikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMpIHtcbiAgICAgICAgICAgIEFueS5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxNjM3OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVR4Qm9keSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWVzc2FnZXMucHVzaChBbnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tZW1vID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGltZW91dEhlaWdodCA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwMjM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXh0ZW5zaW9uT3B0aW9ucy5wdXNoKEFueS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyMDQ3OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucy5wdXNoKEFueS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVzc2FnZXM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5tZXNzYWdlcylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5tZXNzYWdlcy5tYXAoKGUpID0+IEFueS5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgbWVtbzogaXNTZXQob2JqZWN0Lm1lbW8pID8gU3RyaW5nKG9iamVjdC5tZW1vKSA6IFwiXCIsXG4gICAgICAgICAgICB0aW1lb3V0SGVpZ2h0OiBpc1NldChvYmplY3QudGltZW91dEhlaWdodClcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhvYmplY3QudGltZW91dEhlaWdodClcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICAgICAgZXh0ZW5zaW9uT3B0aW9uczogQXJyYXkuaXNBcnJheShvYmplY3Q/LmV4dGVuc2lvbk9wdGlvbnMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QuZXh0ZW5zaW9uT3B0aW9ucy5tYXAoKGUpID0+IEFueS5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgbm9uQ3JpdGljYWxFeHRlbnNpb25PcHRpb25zOiBBcnJheS5pc0FycmF5KG9iamVjdD8ubm9uQ3JpdGljYWxFeHRlbnNpb25PcHRpb25zKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0Lm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucy5tYXAoKGUpID0+IEFueS5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLm1lc3NhZ2VzKSB7XG4gICAgICAgICAgICBvYmoubWVzc2FnZXMgPSBtZXNzYWdlLm1lc3NhZ2VzLm1hcCgoZSkgPT4gZSA/IEFueS50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLm1lc3NhZ2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZS5tZW1vICE9PSB1bmRlZmluZWQgJiYgKG9iai5tZW1vID0gbWVzc2FnZS5tZW1vKTtcbiAgICAgICAgbWVzc2FnZS50aW1lb3V0SGVpZ2h0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudGltZW91dEhlaWdodCA9IG1lc3NhZ2UudGltZW91dEhlaWdodCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmV4dGVuc2lvbk9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9iai5leHRlbnNpb25PcHRpb25zID0gbWVzc2FnZS5leHRlbnNpb25PcHRpb25zLm1hcCgoZSkgPT4gZSA/IEFueS50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmV4dGVuc2lvbk9wdGlvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9iai5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMgPSBtZXNzYWdlLm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucy5tYXAoKGUpID0+IChlID8gQW55LnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUeEJvZHkoKTtcbiAgICAgICAgbWVzc2FnZS5tZXNzYWdlcyA9IG9iamVjdC5tZXNzYWdlcz8ubWFwKChlKSA9PiBBbnkuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLm1lbW8gPSBvYmplY3QubWVtbyA/PyBcIlwiO1xuICAgICAgICBtZXNzYWdlLnRpbWVvdXRIZWlnaHQgPSBvYmplY3QudGltZW91dEhlaWdodCA/PyBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5leHRlbnNpb25PcHRpb25zID1cbiAgICAgICAgICAgIG9iamVjdC5leHRlbnNpb25PcHRpb25zPy5tYXAoKGUpID0+IEFueS5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2Uubm9uQ3JpdGljYWxFeHRlbnNpb25PcHRpb25zID1cbiAgICAgICAgICAgIG9iamVjdC5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnM/Lm1hcCgoZSkgPT4gQW55LmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQXV0aEluZm8oKSB7XG4gICAgcmV0dXJuIHsgc2lnbmVySW5mb3M6IFtdLCBmZWU6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IEF1dGhJbmZvID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnNpZ25lckluZm9zKSB7XG4gICAgICAgICAgICBTaWduZXJJbmZvLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZlZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBGZWUuZW5jb2RlKG1lc3NhZ2UuZmVlLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQXV0aEluZm8oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNpZ25lckluZm9zLnB1c2goU2lnbmVySW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZlZSA9IEZlZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaWduZXJJbmZvczogQXJyYXkuaXNBcnJheShvYmplY3Q/LnNpZ25lckluZm9zKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnNpZ25lckluZm9zLm1hcCgoZSkgPT4gU2lnbmVySW5mby5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgZmVlOiBpc1NldChvYmplY3QuZmVlKSA/IEZlZS5mcm9tSlNPTihvYmplY3QuZmVlKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5zaWduZXJJbmZvcykge1xuICAgICAgICAgICAgb2JqLnNpZ25lckluZm9zID0gbWVzc2FnZS5zaWduZXJJbmZvcy5tYXAoKGUpID0+IGUgPyBTaWduZXJJbmZvLnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouc2lnbmVySW5mb3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlLmZlZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmZlZSA9IG1lc3NhZ2UuZmVlID8gRmVlLnRvSlNPTihtZXNzYWdlLmZlZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQXV0aEluZm8oKTtcbiAgICAgICAgbWVzc2FnZS5zaWduZXJJbmZvcyA9XG4gICAgICAgICAgICBvYmplY3Quc2lnbmVySW5mb3M/Lm1hcCgoZSkgPT4gU2lnbmVySW5mby5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UuZmVlID1cbiAgICAgICAgICAgIG9iamVjdC5mZWUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZmVlICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBGZWUuZnJvbVBhcnRpYWwob2JqZWN0LmZlZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlU2lnbmVySW5mbygpIHtcbiAgICByZXR1cm4geyBwdWJsaWNLZXk6IHVuZGVmaW5lZCwgbW9kZUluZm86IHVuZGVmaW5lZCwgc2VxdWVuY2U6IFwiMFwiIH07XG59XG5leHBvcnQgY29uc3QgU2lnbmVySW5mbyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wdWJsaWNLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQW55LmVuY29kZShtZXNzYWdlLnB1YmxpY0tleSwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tb2RlSW5mbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBNb2RlSW5mby5lbmNvZGUobWVzc2FnZS5tb2RlSW5mbywgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZXF1ZW5jZSAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLnVpbnQ2NChtZXNzYWdlLnNlcXVlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25lckluZm8oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnB1YmxpY0tleSA9IEFueS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubW9kZUluZm8gPSBNb2RlSW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2VxdWVuY2UgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHVibGljS2V5OiBpc1NldChvYmplY3QucHVibGljS2V5KVxuICAgICAgICAgICAgICAgID8gQW55LmZyb21KU09OKG9iamVjdC5wdWJsaWNLZXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtb2RlSW5mbzogaXNTZXQob2JqZWN0Lm1vZGVJbmZvKVxuICAgICAgICAgICAgICAgID8gTW9kZUluZm8uZnJvbUpTT04ob2JqZWN0Lm1vZGVJbmZvKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2VxdWVuY2U6IGlzU2V0KG9iamVjdC5zZXF1ZW5jZSkgPyBTdHJpbmcob2JqZWN0LnNlcXVlbmNlKSA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UucHVibGljS2V5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucHVibGljS2V5ID0gbWVzc2FnZS5wdWJsaWNLZXlcbiAgICAgICAgICAgICAgICA/IEFueS50b0pTT04obWVzc2FnZS5wdWJsaWNLZXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLm1vZGVJbmZvICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubW9kZUluZm8gPSBtZXNzYWdlLm1vZGVJbmZvXG4gICAgICAgICAgICAgICAgPyBNb2RlSW5mby50b0pTT04obWVzc2FnZS5tb2RlSW5mbylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uuc2VxdWVuY2UgIT09IHVuZGVmaW5lZCAmJiAob2JqLnNlcXVlbmNlID0gbWVzc2FnZS5zZXF1ZW5jZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTaWduZXJJbmZvKCk7XG4gICAgICAgIG1lc3NhZ2UucHVibGljS2V5ID1cbiAgICAgICAgICAgIG9iamVjdC5wdWJsaWNLZXkgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucHVibGljS2V5ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBBbnkuZnJvbVBhcnRpYWwob2JqZWN0LnB1YmxpY0tleSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5tb2RlSW5mbyA9XG4gICAgICAgICAgICBvYmplY3QubW9kZUluZm8gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QubW9kZUluZm8gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IE1vZGVJbmZvLmZyb21QYXJ0aWFsKG9iamVjdC5tb2RlSW5mbylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zZXF1ZW5jZSA9IG9iamVjdC5zZXF1ZW5jZSA/PyBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTW9kZUluZm8oKSB7XG4gICAgcmV0dXJuIHsgc2luZ2xlOiB1bmRlZmluZWQsIG11bHRpOiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBNb2RlSW5mbyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5zaW5nbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgTW9kZUluZm9fU2luZ2xlLmVuY29kZShtZXNzYWdlLnNpbmdsZSwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tdWx0aSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBNb2RlSW5mb19NdWx0aS5lbmNvZGUobWVzc2FnZS5tdWx0aSwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1vZGVJbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zaW5nbGUgPSBNb2RlSW5mb19TaW5nbGUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm11bHRpID0gTW9kZUluZm9fTXVsdGkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2luZ2xlOiBpc1NldChvYmplY3Quc2luZ2xlKVxuICAgICAgICAgICAgICAgID8gTW9kZUluZm9fU2luZ2xlLmZyb21KU09OKG9iamVjdC5zaW5nbGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtdWx0aTogaXNTZXQob2JqZWN0Lm11bHRpKVxuICAgICAgICAgICAgICAgID8gTW9kZUluZm9fTXVsdGkuZnJvbUpTT04ob2JqZWN0Lm11bHRpKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uuc2luZ2xlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouc2luZ2xlID0gbWVzc2FnZS5zaW5nbGVcbiAgICAgICAgICAgICAgICA/IE1vZGVJbmZvX1NpbmdsZS50b0pTT04obWVzc2FnZS5zaW5nbGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLm11bHRpICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubXVsdGkgPSBtZXNzYWdlLm11bHRpXG4gICAgICAgICAgICAgICAgPyBNb2RlSW5mb19NdWx0aS50b0pTT04obWVzc2FnZS5tdWx0aSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNb2RlSW5mbygpO1xuICAgICAgICBtZXNzYWdlLnNpbmdsZSA9XG4gICAgICAgICAgICBvYmplY3Quc2luZ2xlICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnNpbmdsZSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gTW9kZUluZm9fU2luZ2xlLmZyb21QYXJ0aWFsKG9iamVjdC5zaW5nbGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UubXVsdGkgPVxuICAgICAgICAgICAgb2JqZWN0Lm11bHRpICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0Lm11bHRpICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBNb2RlSW5mb19NdWx0aS5mcm9tUGFydGlhbChvYmplY3QubXVsdGkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZU1vZGVJbmZvX1NpbmdsZSgpIHtcbiAgICByZXR1cm4geyBtb2RlOiAwIH07XG59XG5leHBvcnQgY29uc3QgTW9kZUluZm9fU2luZ2xlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLm1vZGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5tb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1vZGVJbmZvX1NpbmdsZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubW9kZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RlOiBpc1NldChvYmplY3QubW9kZSkgPyBzaWduTW9kZUZyb21KU09OKG9iamVjdC5tb2RlKSA6IDAsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5tb2RlICE9PSB1bmRlZmluZWQgJiYgKG9iai5tb2RlID0gc2lnbk1vZGVUb0pTT04obWVzc2FnZS5tb2RlKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNb2RlSW5mb19TaW5nbGUoKTtcbiAgICAgICAgbWVzc2FnZS5tb2RlID0gb2JqZWN0Lm1vZGUgPz8gMDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTW9kZUluZm9fTXVsdGkoKSB7XG4gICAgcmV0dXJuIHsgYml0YXJyYXk6IHVuZGVmaW5lZCwgbW9kZUluZm9zOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IE1vZGVJbmZvX011bHRpID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmJpdGFycmF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbXBhY3RCaXRBcnJheS5lbmNvZGUobWVzc2FnZS5iaXRhcnJheSwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5tb2RlSW5mb3MpIHtcbiAgICAgICAgICAgIE1vZGVJbmZvLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTW9kZUluZm9fTXVsdGkoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJpdGFycmF5ID0gQ29tcGFjdEJpdEFycmF5LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tb2RlSW5mb3MucHVzaChNb2RlSW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYml0YXJyYXk6IGlzU2V0KG9iamVjdC5iaXRhcnJheSlcbiAgICAgICAgICAgICAgICA/IENvbXBhY3RCaXRBcnJheS5mcm9tSlNPTihvYmplY3QuYml0YXJyYXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtb2RlSW5mb3M6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5tb2RlSW5mb3MpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QubW9kZUluZm9zLm1hcCgoZSkgPT4gTW9kZUluZm8uZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmJpdGFycmF5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYml0YXJyYXkgPSBtZXNzYWdlLmJpdGFycmF5XG4gICAgICAgICAgICAgICAgPyBDb21wYWN0Qml0QXJyYXkudG9KU09OKG1lc3NhZ2UuYml0YXJyYXkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAobWVzc2FnZS5tb2RlSW5mb3MpIHtcbiAgICAgICAgICAgIG9iai5tb2RlSW5mb3MgPSBtZXNzYWdlLm1vZGVJbmZvcy5tYXAoKGUpID0+IGUgPyBNb2RlSW5mby50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLm1vZGVJbmZvcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNb2RlSW5mb19NdWx0aSgpO1xuICAgICAgICBtZXNzYWdlLmJpdGFycmF5ID1cbiAgICAgICAgICAgIG9iamVjdC5iaXRhcnJheSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5iaXRhcnJheSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gQ29tcGFjdEJpdEFycmF5LmZyb21QYXJ0aWFsKG9iamVjdC5iaXRhcnJheSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5tb2RlSW5mb3MgPVxuICAgICAgICAgICAgb2JqZWN0Lm1vZGVJbmZvcz8ubWFwKChlKSA9PiBNb2RlSW5mby5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZlZSgpIHtcbiAgICByZXR1cm4geyBhbW91bnQ6IFtdLCBnYXNMaW1pdDogXCIwXCIsIHBheWVyOiBcIlwiLCBncmFudGVyOiBcIlwiIH07XG59XG5leHBvcnQgY29uc3QgRmVlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmFtb3VudCkge1xuICAgICAgICAgICAgQ29pbi5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5nYXNMaW1pdCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLnVpbnQ2NChtZXNzYWdlLmdhc0xpbWl0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wYXllciAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UucGF5ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmdyYW50ZXIgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzQpLnN0cmluZyhtZXNzYWdlLmdyYW50ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRmVlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hbW91bnQucHVzaChDb2luLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2FzTGltaXQgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBheWVyID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ3JhbnRlciA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYW1vdW50OiBBcnJheS5pc0FycmF5KG9iamVjdD8uYW1vdW50KVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmFtb3VudC5tYXAoKGUpID0+IENvaW4uZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIGdhc0xpbWl0OiBpc1NldChvYmplY3QuZ2FzTGltaXQpID8gU3RyaW5nKG9iamVjdC5nYXNMaW1pdCkgOiBcIjBcIixcbiAgICAgICAgICAgIHBheWVyOiBpc1NldChvYmplY3QucGF5ZXIpID8gU3RyaW5nKG9iamVjdC5wYXllcikgOiBcIlwiLFxuICAgICAgICAgICAgZ3JhbnRlcjogaXNTZXQob2JqZWN0LmdyYW50ZXIpID8gU3RyaW5nKG9iamVjdC5ncmFudGVyKSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYW1vdW50KSB7XG4gICAgICAgICAgICBvYmouYW1vdW50ID0gbWVzc2FnZS5hbW91bnQubWFwKChlKSA9PiAoZSA/IENvaW4udG9KU09OKGUpIDogdW5kZWZpbmVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouYW1vdW50ID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZS5nYXNMaW1pdCAhPT0gdW5kZWZpbmVkICYmIChvYmouZ2FzTGltaXQgPSBtZXNzYWdlLmdhc0xpbWl0KTtcbiAgICAgICAgbWVzc2FnZS5wYXllciAhPT0gdW5kZWZpbmVkICYmIChvYmoucGF5ZXIgPSBtZXNzYWdlLnBheWVyKTtcbiAgICAgICAgbWVzc2FnZS5ncmFudGVyICE9PSB1bmRlZmluZWQgJiYgKG9iai5ncmFudGVyID0gbWVzc2FnZS5ncmFudGVyKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUZlZSgpO1xuICAgICAgICBtZXNzYWdlLmFtb3VudCA9IG9iamVjdC5hbW91bnQ/Lm1hcCgoZSkgPT4gQ29pbi5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UuZ2FzTGltaXQgPSBvYmplY3QuZ2FzTGltaXQgPz8gXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UucGF5ZXIgPSBvYmplY3QucGF5ZXIgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS5ncmFudGVyID0gb2JqZWN0LmdyYW50ZXIgPz8gXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG52YXIgZ2xvYmFsVGhpcyA9ICgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIHRocm93IFwiVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0XCI7XG59KSgpO1xuY29uc3QgYXRvYiA9IGdsb2JhbFRoaXMuYXRvYiB8fFxuICAgICgoYjY0KSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGI2NCwgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJiaW5hcnlcIikpO1xuZnVuY3Rpb24gYnl0ZXNGcm9tQmFzZTY0KGI2NCkge1xuICAgIGNvbnN0IGJpbiA9IGF0b2IoYjY0KTtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShiaW4ubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBhcnJbaV0gPSBiaW4uY2hhckNvZGVBdChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbmNvbnN0IGJ0b2EgPSBnbG9iYWxUaGlzLmJ0b2EgfHxcbiAgICAoKGJpbikgPT4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiaW4sIFwiYmluYXJ5XCIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpKTtcbmZ1bmN0aW9uIGJhc2U2NEZyb21CeXRlcyhhcnIpIHtcbiAgICBjb25zdCBiaW4gPSBbXTtcbiAgICBhcnIuZm9yRWFjaCgoYnl0ZSkgPT4ge1xuICAgICAgICBiaW4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYnRvYShiaW4uam9pbihcIlwiKSk7XG59XG5mdW5jdGlvbiBsb25nVG9TdHJpbmcobG9uZykge1xuICAgIHJldHVybiBsb25nLnRvU3RyaW5nKCk7XG59XG5pZiAoX20wLnV0aWwuTG9uZyAhPT0gTG9uZykge1xuICAgIF9tMC51dGlsLkxvbmcgPSBMb25nO1xuICAgIF9tMC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eC5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3JwYyB9IGZyb20gXCJAaW1wcm9iYWJsZS1lbmcvZ3JwYy13ZWJcIjtcbmltcG9ydCB7IFBhZ2VSZXF1ZXN0LCBQYWdlUmVzcG9uc2UgfSBmcm9tIFwiLi4vLi4vYmFzZS9xdWVyeS92MWJldGExL3BhZ2luYXRpb25cIjtcbmltcG9ydCB7IFR4UmVzcG9uc2UsIEdhc0luZm8sIFJlc3VsdCB9IGZyb20gXCIuLi8uLi9iYXNlL2FiY2kvdjFiZXRhMS9hYmNpXCI7XG5pbXBvcnQgeyBUeCB9IGZyb20gXCIuL3R4XCI7XG5pbXBvcnQgeyBCcm93c2VySGVhZGVycyB9IGZyb20gXCJicm93c2VyLWhlYWRlcnNcIjtcbmltcG9ydCAqIGFzIF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gXCJjb3Ntb3MudHgudjFiZXRhMVwiO1xuLyoqIE9yZGVyQnkgZGVmaW5lcyB0aGUgc29ydGluZyBvcmRlciAqL1xuZXhwb3J0IHZhciBPcmRlckJ5O1xuKGZ1bmN0aW9uIChPcmRlckJ5KSB7XG4gICAgLyoqIE9SREVSX0JZX1VOU1BFQ0lGSUVEIC0gT1JERVJfQllfVU5TUEVDSUZJRUQgc3BlY2lmaWVzIGFuIHVua25vd24gc29ydGluZyBvcmRlci4gT3JkZXJCeSBkZWZhdWx0cyB0byBBU0MgaW4gdGhpcyBjYXNlLiAqL1xuICAgIE9yZGVyQnlbT3JkZXJCeVtcIk9SREVSX0JZX1VOU1BFQ0lGSUVEXCJdID0gMF0gPSBcIk9SREVSX0JZX1VOU1BFQ0lGSUVEXCI7XG4gICAgLyoqIE9SREVSX0JZX0FTQyAtIE9SREVSX0JZX0FTQyBkZWZpbmVzIGFzY2VuZGluZyBvcmRlciAqL1xuICAgIE9yZGVyQnlbT3JkZXJCeVtcIk9SREVSX0JZX0FTQ1wiXSA9IDFdID0gXCJPUkRFUl9CWV9BU0NcIjtcbiAgICAvKiogT1JERVJfQllfREVTQyAtIE9SREVSX0JZX0RFU0MgZGVmaW5lcyBkZXNjZW5kaW5nIG9yZGVyICovXG4gICAgT3JkZXJCeVtPcmRlckJ5W1wiT1JERVJfQllfREVTQ1wiXSA9IDJdID0gXCJPUkRFUl9CWV9ERVNDXCI7XG4gICAgT3JkZXJCeVtPcmRlckJ5W1wiVU5SRUNPR05JWkVEXCJdID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKE9yZGVyQnkgfHwgKE9yZGVyQnkgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIG9yZGVyQnlGcm9tSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgXCJPUkRFUl9CWV9VTlNQRUNJRklFRFwiOlxuICAgICAgICAgICAgcmV0dXJuIE9yZGVyQnkuT1JERVJfQllfVU5TUEVDSUZJRUQ7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSBcIk9SREVSX0JZX0FTQ1wiOlxuICAgICAgICAgICAgcmV0dXJuIE9yZGVyQnkuT1JERVJfQllfQVNDO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgIGNhc2UgXCJPUkRFUl9CWV9ERVNDXCI6XG4gICAgICAgICAgICByZXR1cm4gT3JkZXJCeS5PUkRFUl9CWV9ERVNDO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICBjYXNlIFwiVU5SRUNPR05JWkVEXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gT3JkZXJCeS5VTlJFQ09HTklaRUQ7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG9yZGVyQnlUb0pTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSBPcmRlckJ5Lk9SREVSX0JZX1VOU1BFQ0lGSUVEOlxuICAgICAgICAgICAgcmV0dXJuIFwiT1JERVJfQllfVU5TUEVDSUZJRURcIjtcbiAgICAgICAgY2FzZSBPcmRlckJ5Lk9SREVSX0JZX0FTQzpcbiAgICAgICAgICAgIHJldHVybiBcIk9SREVSX0JZX0FTQ1wiO1xuICAgICAgICBjYXNlIE9yZGVyQnkuT1JERVJfQllfREVTQzpcbiAgICAgICAgICAgIHJldHVybiBcIk9SREVSX0JZX0RFU0NcIjtcbiAgICAgICAgY2FzZSBPcmRlckJ5LlVOUkVDT0dOSVpFRDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICAgIH1cbn1cbi8qKiBCcm9hZGNhc3RNb2RlIHNwZWNpZmllcyB0aGUgYnJvYWRjYXN0IG1vZGUgZm9yIHRoZSBUeFNlcnZpY2UuQnJvYWRjYXN0IFJQQyBtZXRob2QuICovXG5leHBvcnQgdmFyIEJyb2FkY2FzdE1vZGU7XG4oZnVuY3Rpb24gKEJyb2FkY2FzdE1vZGUpIHtcbiAgICAvKiogQlJPQURDQVNUX01PREVfVU5TUEVDSUZJRUQgLSB6ZXJvLXZhbHVlIGZvciBtb2RlIG9yZGVyaW5nICovXG4gICAgQnJvYWRjYXN0TW9kZVtCcm9hZGNhc3RNb2RlW1wiQlJPQURDQVNUX01PREVfVU5TUEVDSUZJRURcIl0gPSAwXSA9IFwiQlJPQURDQVNUX01PREVfVU5TUEVDSUZJRURcIjtcbiAgICAvKipcbiAgICAgKiBCUk9BRENBU1RfTU9ERV9CTE9DSyAtIEJST0FEQ0FTVF9NT0RFX0JMT0NLIGRlZmluZXMgYSB0eCBicm9hZGNhc3RpbmcgbW9kZSB3aGVyZSB0aGUgY2xpZW50IHdhaXRzIGZvclxuICAgICAqIHRoZSB0eCB0byBiZSBjb21taXR0ZWQgaW4gYSBibG9jay5cbiAgICAgKi9cbiAgICBCcm9hZGNhc3RNb2RlW0Jyb2FkY2FzdE1vZGVbXCJCUk9BRENBU1RfTU9ERV9CTE9DS1wiXSA9IDFdID0gXCJCUk9BRENBU1RfTU9ERV9CTE9DS1wiO1xuICAgIC8qKlxuICAgICAqIEJST0FEQ0FTVF9NT0RFX1NZTkMgLSBCUk9BRENBU1RfTU9ERV9TWU5DIGRlZmluZXMgYSB0eCBicm9hZGNhc3RpbmcgbW9kZSB3aGVyZSB0aGUgY2xpZW50IHdhaXRzIGZvclxuICAgICAqIGEgQ2hlY2tUeCBleGVjdXRpb24gcmVzcG9uc2Ugb25seS5cbiAgICAgKi9cbiAgICBCcm9hZGNhc3RNb2RlW0Jyb2FkY2FzdE1vZGVbXCJCUk9BRENBU1RfTU9ERV9TWU5DXCJdID0gMl0gPSBcIkJST0FEQ0FTVF9NT0RFX1NZTkNcIjtcbiAgICAvKipcbiAgICAgKiBCUk9BRENBU1RfTU9ERV9BU1lOQyAtIEJST0FEQ0FTVF9NT0RFX0FTWU5DIGRlZmluZXMgYSB0eCBicm9hZGNhc3RpbmcgbW9kZSB3aGVyZSB0aGUgY2xpZW50IHJldHVybnNcbiAgICAgKiBpbW1lZGlhdGVseS5cbiAgICAgKi9cbiAgICBCcm9hZGNhc3RNb2RlW0Jyb2FkY2FzdE1vZGVbXCJCUk9BRENBU1RfTU9ERV9BU1lOQ1wiXSA9IDNdID0gXCJCUk9BRENBU1RfTU9ERV9BU1lOQ1wiO1xuICAgIEJyb2FkY2FzdE1vZGVbQnJvYWRjYXN0TW9kZVtcIlVOUkVDT0dOSVpFRFwiXSA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShCcm9hZGNhc3RNb2RlIHx8IChCcm9hZGNhc3RNb2RlID0ge30pKTtcbmV4cG9ydCBmdW5jdGlvbiBicm9hZGNhc3RNb2RlRnJvbUpTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIFwiQlJPQURDQVNUX01PREVfVU5TUEVDSUZJRURcIjpcbiAgICAgICAgICAgIHJldHVybiBCcm9hZGNhc3RNb2RlLkJST0FEQ0FTVF9NT0RFX1VOU1BFQ0lGSUVEO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgXCJCUk9BRENBU1RfTU9ERV9CTE9DS1wiOlxuICAgICAgICAgICAgcmV0dXJuIEJyb2FkY2FzdE1vZGUuQlJPQURDQVNUX01PREVfQkxPQ0s7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgY2FzZSBcIkJST0FEQ0FTVF9NT0RFX1NZTkNcIjpcbiAgICAgICAgICAgIHJldHVybiBCcm9hZGNhc3RNb2RlLkJST0FEQ0FTVF9NT0RFX1NZTkM7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSBcIkJST0FEQ0FTVF9NT0RFX0FTWU5DXCI6XG4gICAgICAgICAgICByZXR1cm4gQnJvYWRjYXN0TW9kZS5CUk9BRENBU1RfTU9ERV9BU1lOQztcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgY2FzZSBcIlVOUkVDT0dOSVpFRFwiOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIEJyb2FkY2FzdE1vZGUuVU5SRUNPR05JWkVEO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBicm9hZGNhc3RNb2RlVG9KU09OKG9iamVjdCkge1xuICAgIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgICAgIGNhc2UgQnJvYWRjYXN0TW9kZS5CUk9BRENBU1RfTU9ERV9VTlNQRUNJRklFRDpcbiAgICAgICAgICAgIHJldHVybiBcIkJST0FEQ0FTVF9NT0RFX1VOU1BFQ0lGSUVEXCI7XG4gICAgICAgIGNhc2UgQnJvYWRjYXN0TW9kZS5CUk9BRENBU1RfTU9ERV9CTE9DSzpcbiAgICAgICAgICAgIHJldHVybiBcIkJST0FEQ0FTVF9NT0RFX0JMT0NLXCI7XG4gICAgICAgIGNhc2UgQnJvYWRjYXN0TW9kZS5CUk9BRENBU1RfTU9ERV9TWU5DOlxuICAgICAgICAgICAgcmV0dXJuIFwiQlJPQURDQVNUX01PREVfU1lOQ1wiO1xuICAgICAgICBjYXNlIEJyb2FkY2FzdE1vZGUuQlJPQURDQVNUX01PREVfQVNZTkM6XG4gICAgICAgICAgICByZXR1cm4gXCJCUk9BRENBU1RfTU9ERV9BU1lOQ1wiO1xuICAgICAgICBjYXNlIEJyb2FkY2FzdE1vZGUuVU5SRUNPR05JWkVEOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwiVU5SRUNPR05JWkVEXCI7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlQmFzZUdldFR4c0V2ZW50UmVxdWVzdCgpIHtcbiAgICByZXR1cm4geyBldmVudHM6IFtdLCBwYWdpbmF0aW9uOiB1bmRlZmluZWQsIG9yZGVyQnk6IDAgfTtcbn1cbmV4cG9ydCBjb25zdCBHZXRUeHNFdmVudFJlcXVlc3QgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZXZlbnRzKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcodik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBQYWdlUmVxdWVzdC5lbmNvZGUobWVzc2FnZS5wYWdpbmF0aW9uLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm9yZGVyQnkgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDMyKG1lc3NhZ2Uub3JkZXJCeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VHZXRUeHNFdmVudFJlcXVlc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50cy5wdXNoKHJlYWRlci5zdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uID0gUGFnZVJlcXVlc3QuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm9yZGVyQnkgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXZlbnRzOiBBcnJheS5pc0FycmF5KG9iamVjdD8uZXZlbnRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmV2ZW50cy5tYXAoKGUpID0+IFN0cmluZyhlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgcGFnaW5hdGlvbjogaXNTZXQob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVxdWVzdC5mcm9tSlNPTihvYmplY3QucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9yZGVyQnk6IGlzU2V0KG9iamVjdC5vcmRlckJ5KSA/IG9yZGVyQnlGcm9tSlNPTihvYmplY3Qub3JkZXJCeSkgOiAwLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50cykge1xuICAgICAgICAgICAgb2JqLmV2ZW50cyA9IG1lc3NhZ2UuZXZlbnRzLm1hcCgoZSkgPT4gZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouZXZlbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucGFnaW5hdGlvbiA9IG1lc3NhZ2UucGFnaW5hdGlvblxuICAgICAgICAgICAgICAgID8gUGFnZVJlcXVlc3QudG9KU09OKG1lc3NhZ2UucGFnaW5hdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uub3JkZXJCeSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLm9yZGVyQnkgPSBvcmRlckJ5VG9KU09OKG1lc3NhZ2Uub3JkZXJCeSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlR2V0VHhzRXZlbnRSZXF1ZXN0KCk7XG4gICAgICAgIG1lc3NhZ2UuZXZlbnRzID0gb2JqZWN0LmV2ZW50cz8ubWFwKChlKSA9PiBlKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS5wYWdpbmF0aW9uID1cbiAgICAgICAgICAgIG9iamVjdC5wYWdpbmF0aW9uICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnBhZ2luYXRpb24gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFBhZ2VSZXF1ZXN0LmZyb21QYXJ0aWFsKG9iamVjdC5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLm9yZGVyQnkgPSBvYmplY3Qub3JkZXJCeSA/PyAwO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VHZXRUeHNFdmVudFJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IHR4czogW10sIHR4UmVzcG9uc2VzOiBbXSwgcGFnaW5hdGlvbjogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgR2V0VHhzRXZlbnRSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS50eHMpIHtcbiAgICAgICAgICAgIFR4LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnR4UmVzcG9uc2VzKSB7XG4gICAgICAgICAgICBUeFJlc3BvbnNlLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUGFnZVJlc3BvbnNlLmVuY29kZShtZXNzYWdlLnBhZ2luYXRpb24sIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VHZXRUeHNFdmVudFJlc3BvbnNlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50eHMucHVzaChUeC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnR4UmVzcG9uc2VzLnB1c2goVHhSZXNwb25zZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhZ2luYXRpb24gPSBQYWdlUmVzcG9uc2UuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHhzOiBBcnJheS5pc0FycmF5KG9iamVjdD8udHhzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnR4cy5tYXAoKGUpID0+IFR4LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICB0eFJlc3BvbnNlczogQXJyYXkuaXNBcnJheShvYmplY3Q/LnR4UmVzcG9uc2VzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnR4UmVzcG9uc2VzLm1hcCgoZSkgPT4gVHhSZXNwb25zZS5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgcGFnaW5hdGlvbjogaXNTZXQob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVzcG9uc2UuZnJvbUpTT04ob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2UudHhzKSB7XG4gICAgICAgICAgICBvYmoudHhzID0gbWVzc2FnZS50eHMubWFwKChlKSA9PiAoZSA/IFR4LnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnR4cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnR4UmVzcG9uc2VzKSB7XG4gICAgICAgICAgICBvYmoudHhSZXNwb25zZXMgPSBtZXNzYWdlLnR4UmVzcG9uc2VzLm1hcCgoZSkgPT4gZSA/IFR4UmVzcG9uc2UudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai50eFJlc3BvbnNlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnBhZ2luYXRpb24gPSBtZXNzYWdlLnBhZ2luYXRpb25cbiAgICAgICAgICAgICAgICA/IFBhZ2VSZXNwb25zZS50b0pTT04obWVzc2FnZS5wYWdpbmF0aW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUdldFR4c0V2ZW50UmVzcG9uc2UoKTtcbiAgICAgICAgbWVzc2FnZS50eHMgPSBvYmplY3QudHhzPy5tYXAoKGUpID0+IFR4LmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS50eFJlc3BvbnNlcyA9XG4gICAgICAgICAgICBvYmplY3QudHhSZXNwb25zZXM/Lm1hcCgoZSkgPT4gVHhSZXNwb25zZS5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UucGFnaW5hdGlvbiA9XG4gICAgICAgICAgICBvYmplY3QucGFnaW5hdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5wYWdpbmF0aW9uICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBQYWdlUmVzcG9uc2UuZnJvbVBhcnRpYWwob2JqZWN0LnBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUJyb2FkY2FzdFR4UmVxdWVzdCgpIHtcbiAgICByZXR1cm4geyB0eEJ5dGVzOiBuZXcgVWludDhBcnJheSgpLCBtb2RlOiAwIH07XG59XG5leHBvcnQgY29uc3QgQnJvYWRjYXN0VHhSZXF1ZXN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnR4Qnl0ZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5ieXRlcyhtZXNzYWdlLnR4Qnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1vZGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UubW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VCcm9hZGNhc3RUeFJlcXVlc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnR4Qnl0ZXMgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1vZGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHhCeXRlczogaXNTZXQob2JqZWN0LnR4Qnl0ZXMpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnR4Qnl0ZXMpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgbW9kZTogaXNTZXQob2JqZWN0Lm1vZGUpID8gYnJvYWRjYXN0TW9kZUZyb21KU09OKG9iamVjdC5tb2RlKSA6IDAsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50eEJ5dGVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudHhCeXRlcyA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLnR4Qnl0ZXMgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UudHhCeXRlcyA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgbWVzc2FnZS5tb2RlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubW9kZSA9IGJyb2FkY2FzdE1vZGVUb0pTT04obWVzc2FnZS5tb2RlKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VCcm9hZGNhc3RUeFJlcXVlc3QoKTtcbiAgICAgICAgbWVzc2FnZS50eEJ5dGVzID0gb2JqZWN0LnR4Qnl0ZXMgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5tb2RlID0gb2JqZWN0Lm1vZGUgPz8gMDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQnJvYWRjYXN0VHhSZXNwb25zZSgpIHtcbiAgICByZXR1cm4geyB0eFJlc3BvbnNlOiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBCcm9hZGNhc3RUeFJlc3BvbnNlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnR4UmVzcG9uc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVHhSZXNwb25zZS5lbmNvZGUobWVzc2FnZS50eFJlc3BvbnNlLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQnJvYWRjYXN0VHhSZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHhSZXNwb25zZSA9IFR4UmVzcG9uc2UuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHhSZXNwb25zZTogaXNTZXQob2JqZWN0LnR4UmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgPyBUeFJlc3BvbnNlLmZyb21KU09OKG9iamVjdC50eFJlc3BvbnNlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudHhSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnR4UmVzcG9uc2UgPSBtZXNzYWdlLnR4UmVzcG9uc2VcbiAgICAgICAgICAgICAgICA/IFR4UmVzcG9uc2UudG9KU09OKG1lc3NhZ2UudHhSZXNwb25zZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VCcm9hZGNhc3RUeFJlc3BvbnNlKCk7XG4gICAgICAgIG1lc3NhZ2UudHhSZXNwb25zZSA9XG4gICAgICAgICAgICBvYmplY3QudHhSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC50eFJlc3BvbnNlICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBUeFJlc3BvbnNlLmZyb21QYXJ0aWFsKG9iamVjdC50eFJlc3BvbnNlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTaW11bGF0ZVJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHsgdHg6IHVuZGVmaW5lZCwgdHhCeXRlczogbmV3IFVpbnQ4QXJyYXkoKSB9O1xufVxuZXhwb3J0IGNvbnN0IFNpbXVsYXRlUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS50eCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBUeC5lbmNvZGUobWVzc2FnZS50eCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50eEJ5dGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuYnl0ZXMobWVzc2FnZS50eEJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpbXVsYXRlUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHggPSBUeC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHhCeXRlcyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eDogaXNTZXQob2JqZWN0LnR4KSA/IFR4LmZyb21KU09OKG9iamVjdC50eCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0eEJ5dGVzOiBpc1NldChvYmplY3QudHhCeXRlcylcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QudHhCeXRlcylcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50eCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnR4ID0gbWVzc2FnZS50eCA/IFR4LnRvSlNPTihtZXNzYWdlLnR4KSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UudHhCeXRlcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnR4Qnl0ZXMgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS50eEJ5dGVzICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLnR4Qnl0ZXMgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTaW11bGF0ZVJlcXVlc3QoKTtcbiAgICAgICAgbWVzc2FnZS50eCA9XG4gICAgICAgICAgICBvYmplY3QudHggIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudHggIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFR4LmZyb21QYXJ0aWFsKG9iamVjdC50eClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS50eEJ5dGVzID0gb2JqZWN0LnR4Qnl0ZXMgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlU2ltdWxhdGVSZXNwb25zZSgpIHtcbiAgICByZXR1cm4geyBnYXNJbmZvOiB1bmRlZmluZWQsIHJlc3VsdDogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgU2ltdWxhdGVSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5nYXNJbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEdhc0luZm8uZW5jb2RlKG1lc3NhZ2UuZ2FzSW5mbywgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgUmVzdWx0LmVuY29kZShtZXNzYWdlLnJlc3VsdCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpbXVsYXRlUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmdhc0luZm8gPSBHYXNJbmZvLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yZXN1bHQgPSBSZXN1bHQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2FzSW5mbzogaXNTZXQob2JqZWN0Lmdhc0luZm8pXG4gICAgICAgICAgICAgICAgPyBHYXNJbmZvLmZyb21KU09OKG9iamVjdC5nYXNJbmZvKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmVzdWx0OiBpc1NldChvYmplY3QucmVzdWx0KSA/IFJlc3VsdC5mcm9tSlNPTihvYmplY3QucmVzdWx0KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmdhc0luZm8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5nYXNJbmZvID0gbWVzc2FnZS5nYXNJbmZvXG4gICAgICAgICAgICAgICAgPyBHYXNJbmZvLnRvSlNPTihtZXNzYWdlLmdhc0luZm8pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnJlc3VsdCA9IG1lc3NhZ2UucmVzdWx0ID8gUmVzdWx0LnRvSlNPTihtZXNzYWdlLnJlc3VsdCkgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2ltdWxhdGVSZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLmdhc0luZm8gPVxuICAgICAgICAgICAgb2JqZWN0Lmdhc0luZm8gIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZ2FzSW5mbyAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gR2FzSW5mby5mcm9tUGFydGlhbChvYmplY3QuZ2FzSW5mbylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5yZXN1bHQgPVxuICAgICAgICAgICAgb2JqZWN0LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5yZXN1bHQgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFJlc3VsdC5mcm9tUGFydGlhbChvYmplY3QucmVzdWx0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VHZXRUeFJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHsgaGFzaDogXCJcIiB9O1xufVxuZXhwb3J0IGNvbnN0IEdldFR4UmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5oYXNoICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5oYXNoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUdldFR4UmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGFzaCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGFzaDogaXNTZXQob2JqZWN0Lmhhc2gpID8gU3RyaW5nKG9iamVjdC5oYXNoKSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5oYXNoICE9PSB1bmRlZmluZWQgJiYgKG9iai5oYXNoID0gbWVzc2FnZS5oYXNoKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUdldFR4UmVxdWVzdCgpO1xuICAgICAgICBtZXNzYWdlLmhhc2ggPSBvYmplY3QuaGFzaCA/PyBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VHZXRUeFJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IHR4OiB1bmRlZmluZWQsIHR4UmVzcG9uc2U6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IEdldFR4UmVzcG9uc2UgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVHguZW5jb2RlKG1lc3NhZ2UudHgsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudHhSZXNwb25zZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBUeFJlc3BvbnNlLmVuY29kZShtZXNzYWdlLnR4UmVzcG9uc2UsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VHZXRUeFJlc3BvbnNlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50eCA9IFR4LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50eFJlc3BvbnNlID0gVHhSZXNwb25zZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eDogaXNTZXQob2JqZWN0LnR4KSA/IFR4LmZyb21KU09OKG9iamVjdC50eCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0eFJlc3BvbnNlOiBpc1NldChvYmplY3QudHhSZXNwb25zZSlcbiAgICAgICAgICAgICAgICA/IFR4UmVzcG9uc2UuZnJvbUpTT04ob2JqZWN0LnR4UmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50eCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnR4ID0gbWVzc2FnZS50eCA/IFR4LnRvSlNPTihtZXNzYWdlLnR4KSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UudHhSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnR4UmVzcG9uc2UgPSBtZXNzYWdlLnR4UmVzcG9uc2VcbiAgICAgICAgICAgICAgICA/IFR4UmVzcG9uc2UudG9KU09OKG1lc3NhZ2UudHhSZXNwb25zZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VHZXRUeFJlc3BvbnNlKCk7XG4gICAgICAgIG1lc3NhZ2UudHggPVxuICAgICAgICAgICAgb2JqZWN0LnR4ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnR4ICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBUeC5mcm9tUGFydGlhbChvYmplY3QudHgpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UudHhSZXNwb25zZSA9XG4gICAgICAgICAgICBvYmplY3QudHhSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC50eFJlc3BvbnNlICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBUeFJlc3BvbnNlLmZyb21QYXJ0aWFsKG9iamVjdC50eFJlc3BvbnNlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlQ2xpZW50SW1wbCB7XG4gICAgcnBjO1xuICAgIGNvbnN0cnVjdG9yKHJwYykge1xuICAgICAgICB0aGlzLnJwYyA9IHJwYztcbiAgICAgICAgdGhpcy5zaW11bGF0ZSA9IHRoaXMuc2ltdWxhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5nZXRUeCA9IHRoaXMuZ2V0VHguYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5icm9hZGNhc3RUeCA9IHRoaXMuYnJvYWRjYXN0VHguYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5nZXRUeHNFdmVudCA9IHRoaXMuZ2V0VHhzRXZlbnQuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgc2ltdWxhdGUocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KFNlcnZpY2VTaW11bGF0ZURlc2MsIFNpbXVsYXRlUmVxdWVzdC5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbiAgICBnZXRUeChyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoU2VydmljZUdldFR4RGVzYywgR2V0VHhSZXF1ZXN0LmZyb21QYXJ0aWFsKHJlcXVlc3QpLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIGJyb2FkY2FzdFR4KHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShTZXJ2aWNlQnJvYWRjYXN0VHhEZXNjLCBCcm9hZGNhc3RUeFJlcXVlc3QuZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgZ2V0VHhzRXZlbnQocmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnVuYXJ5KFNlcnZpY2VHZXRUeHNFdmVudERlc2MsIEdldFR4c0V2ZW50UmVxdWVzdC5mcm9tUGFydGlhbChyZXF1ZXN0KSwgbWV0YWRhdGEpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBTZXJ2aWNlRGVzYyA9IHtcbiAgICBzZXJ2aWNlTmFtZTogXCJjb3Ntb3MudHgudjFiZXRhMS5TZXJ2aWNlXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VTaW11bGF0ZURlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJTaW11bGF0ZVwiLFxuICAgIHNlcnZpY2U6IFNlcnZpY2VEZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gU2ltdWxhdGVSZXF1ZXN0LmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLlNpbXVsYXRlUmVzcG9uc2UuZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBTZXJ2aWNlR2V0VHhEZXNjID0ge1xuICAgIG1ldGhvZE5hbWU6IFwiR2V0VHhcIixcbiAgICBzZXJ2aWNlOiBTZXJ2aWNlRGVzYyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IHtcbiAgICAgICAgc2VyaWFsaXplQmluYXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIEdldFR4UmVxdWVzdC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5HZXRUeFJlc3BvbnNlLmRlY29kZShkYXRhKSxcbiAgICAgICAgICAgICAgICB0b09iamVjdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgU2VydmljZUJyb2FkY2FzdFR4RGVzYyA9IHtcbiAgICBtZXRob2ROYW1lOiBcIkJyb2FkY2FzdFR4XCIsXG4gICAgc2VydmljZTogU2VydmljZURlc2MsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiB7XG4gICAgICAgIHNlcmlhbGl6ZUJpbmFyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBCcm9hZGNhc3RUeFJlcXVlc3QuZW5jb2RlKHRoaXMpLmZpbmlzaCgpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgcmVzcG9uc2VUeXBlOiB7XG4gICAgICAgIGRlc2VyaWFsaXplQmluYXJ5KGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uQnJvYWRjYXN0VHhSZXNwb25zZS5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VHZXRUeHNFdmVudERlc2MgPSB7XG4gICAgbWV0aG9kTmFtZTogXCJHZXRUeHNFdmVudFwiLFxuICAgIHNlcnZpY2U6IFNlcnZpY2VEZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gR2V0VHhzRXZlbnRSZXF1ZXN0LmVuY29kZSh0aGlzKS5maW5pc2goKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc3BvbnNlVHlwZToge1xuICAgICAgICBkZXNlcmlhbGl6ZUJpbmFyeShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLkdldFR4c0V2ZW50UmVzcG9uc2UuZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjbGFzcyBHcnBjV2ViSW1wbCB7XG4gICAgaG9zdDtcbiAgICBvcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKGhvc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgdW5hcnkobWV0aG9kRGVzYywgX3JlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7IC4uLl9yZXF1ZXN0LCAuLi5tZXRob2REZXNjLnJlcXVlc3RUeXBlIH07XG4gICAgICAgIGNvbnN0IG1heWJlQ29tYmluZWRNZXRhZGF0YSA9IG1ldGFkYXRhICYmIHRoaXMub3B0aW9ucy5tZXRhZGF0YVxuICAgICAgICAgICAgPyBuZXcgQnJvd3NlckhlYWRlcnMoe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucz8ubWV0YWRhdGEuaGVhZGVyc01hcCxcbiAgICAgICAgICAgICAgICAuLi5tZXRhZGF0YT8uaGVhZGVyc01hcCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IG1ldGFkYXRhIHx8IHRoaXMub3B0aW9ucy5tZXRhZGF0YTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGdycGMudW5hcnkobWV0aG9kRGVzYywge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgaG9zdDogdGhpcy5ob3N0LFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtYXliZUNvbWJpbmVkTWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0OiB0aGlzLm9wdGlvbnMudHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgIGRlYnVnOiB0aGlzLm9wdGlvbnMuZGVidWcsXG4gICAgICAgICAgICAgICAgb25FbmQ6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSBncnBjLkNvZGUuT0spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIuY29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5tZXRhZGF0YSA9IHJlc3BvbnNlLnRyYWlsZXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5jb25zdCBhdG9iID0gZ2xvYmFsVGhpcy5hdG9iIHx8XG4gICAgKChiNjQpID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKSk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgY29uc3QgYmluID0gYXRvYihiNjQpO1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuY29uc3QgYnRvYSA9IGdsb2JhbFRoaXMuYnRvYSB8fFxuICAgICgoYmluKSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGJpbiwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpO1xuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGNvbnN0IGJpbiA9IFtdO1xuICAgIGFyci5mb3JFYWNoKChieXRlKSA9PiB7XG4gICAgICAgIGJpbi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBidG9hKGJpbi5qb2luKFwiXCIpKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJ2aWNlLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBncnBjIH0gZnJvbSBcIkBpbXByb2JhYmxlLWVuZy9ncnBjLXdlYlwiO1xuaW1wb3J0IHsgQnJvd3NlckhlYWRlcnMgfSBmcm9tIFwiYnJvd3Nlci1oZWFkZXJzXCI7XG5pbXBvcnQgeyBDb2luIH0gZnJvbSBcIi4uLy4uL2Jhc2UvdjFiZXRhMS9jb2luXCI7XG5pbXBvcnQgeyBJbnB1dCwgT3V0cHV0IH0gZnJvbSBcIi4vYmFua1wiO1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImNvc21vcy5iYW5rLnYxYmV0YTFcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VNc2dTZW5kKCkge1xuICAgIHJldHVybiB7IGZyb21BZGRyZXNzOiBcIlwiLCB0b0FkZHJlc3M6IFwiXCIsIGFtb3VudDogW10gfTtcbn1cbmV4cG9ydCBjb25zdCBNc2dTZW5kID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmZyb21BZGRyZXNzICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5mcm9tQWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudG9BZGRyZXNzICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS50b0FkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmFtb3VudCkge1xuICAgICAgICAgICAgQ29pbi5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1zZ1NlbmQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZyb21BZGRyZXNzID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudG9BZGRyZXNzID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYW1vdW50LnB1c2goQ29pbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnJvbUFkZHJlc3M6IGlzU2V0KG9iamVjdC5mcm9tQWRkcmVzcykgPyBTdHJpbmcob2JqZWN0LmZyb21BZGRyZXNzKSA6IFwiXCIsXG4gICAgICAgICAgICB0b0FkZHJlc3M6IGlzU2V0KG9iamVjdC50b0FkZHJlc3MpID8gU3RyaW5nKG9iamVjdC50b0FkZHJlc3MpIDogXCJcIixcbiAgICAgICAgICAgIGFtb3VudDogQXJyYXkuaXNBcnJheShvYmplY3Q/LmFtb3VudClcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5hbW91bnQubWFwKChlKSA9PiBDb2luLmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5mcm9tQWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmZyb21BZGRyZXNzID0gbWVzc2FnZS5mcm9tQWRkcmVzcyk7XG4gICAgICAgIG1lc3NhZ2UudG9BZGRyZXNzICE9PSB1bmRlZmluZWQgJiYgKG9iai50b0FkZHJlc3MgPSBtZXNzYWdlLnRvQWRkcmVzcyk7XG4gICAgICAgIGlmIChtZXNzYWdlLmFtb3VudCkge1xuICAgICAgICAgICAgb2JqLmFtb3VudCA9IG1lc3NhZ2UuYW1vdW50Lm1hcCgoZSkgPT4gKGUgPyBDb2luLnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmFtb3VudCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dTZW5kKCk7XG4gICAgICAgIG1lc3NhZ2UuZnJvbUFkZHJlc3MgPSBvYmplY3QuZnJvbUFkZHJlc3MgPz8gXCJcIjtcbiAgICAgICAgbWVzc2FnZS50b0FkZHJlc3MgPSBvYmplY3QudG9BZGRyZXNzID8/IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuYW1vdW50ID0gb2JqZWN0LmFtb3VudD8ubWFwKChlKSA9PiBDb2luLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTXNnU2VuZFJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7fTtcbn1cbmV4cG9ydCBjb25zdCBNc2dTZW5kUmVzcG9uc2UgPSB7XG4gICAgZW5jb2RlKF8sIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dTZW5kUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKF8pIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgdG9KU09OKF8pIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChfKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnU2VuZFJlc3BvbnNlKCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZU1zZ011bHRpU2VuZCgpIHtcbiAgICByZXR1cm4geyBpbnB1dHM6IFtdLCBvdXRwdXRzOiBbXSB9O1xufVxuZXhwb3J0IGNvbnN0IE1zZ011bHRpU2VuZCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5pbnB1dHMpIHtcbiAgICAgICAgICAgIElucHV0LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLm91dHB1dHMpIHtcbiAgICAgICAgICAgIE91dHB1dC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1zZ011bHRpU2VuZCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5wdXRzLnB1c2goSW5wdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5vdXRwdXRzLnB1c2goT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dHM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5pbnB1dHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QuaW5wdXRzLm1hcCgoZSkgPT4gSW5wdXQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIG91dHB1dHM6IEFycmF5LmlzQXJyYXkob2JqZWN0Py5vdXRwdXRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0Lm91dHB1dHMubWFwKChlKSA9PiBPdXRwdXQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5pbnB1dHMpIHtcbiAgICAgICAgICAgIG9iai5pbnB1dHMgPSBtZXNzYWdlLmlucHV0cy5tYXAoKGUpID0+IChlID8gSW5wdXQudG9KU09OKGUpIDogdW5kZWZpbmVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouaW5wdXRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uub3V0cHV0cykge1xuICAgICAgICAgICAgb2JqLm91dHB1dHMgPSBtZXNzYWdlLm91dHB1dHMubWFwKChlKSA9PiBlID8gT3V0cHV0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmoub3V0cHV0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dNdWx0aVNlbmQoKTtcbiAgICAgICAgbWVzc2FnZS5pbnB1dHMgPSBvYmplY3QuaW5wdXRzPy5tYXAoKGUpID0+IElucHV0LmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS5vdXRwdXRzID0gb2JqZWN0Lm91dHB1dHM/Lm1hcCgoZSkgPT4gT3V0cHV0LmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTXNnTXVsdGlTZW5kUmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuZXhwb3J0IGNvbnN0IE1zZ011bHRpU2VuZFJlc3BvbnNlID0ge1xuICAgIGVuY29kZShfLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnTXVsdGlTZW5kUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKF8pIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgdG9KU09OKF8pIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChfKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnTXVsdGlTZW5kUmVzcG9uc2UoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5leHBvcnQgY2xhc3MgTXNnQ2xpZW50SW1wbCB7XG4gICAgcnBjO1xuICAgIGNvbnN0cnVjdG9yKHJwYykge1xuICAgICAgICB0aGlzLnJwYyA9IHJwYztcbiAgICAgICAgdGhpcy5zZW5kID0gdGhpcy5zZW5kLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubXVsdGlTZW5kID0gdGhpcy5tdWx0aVNlbmQuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgc2VuZChyZXF1ZXN0LCBtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMudW5hcnkoTXNnU2VuZERlc2MsIE1zZ1NlbmQuZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgbXVsdGlTZW5kKHJlcXVlc3QsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy51bmFyeShNc2dNdWx0aVNlbmREZXNjLCBNc2dNdWx0aVNlbmQuZnJvbVBhcnRpYWwocmVxdWVzdCksIG1ldGFkYXRhKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgTXNnRGVzYyA9IHtcbiAgICBzZXJ2aWNlTmFtZTogXCJjb3Ntb3MuYmFuay52MWJldGExLk1zZ1wiLFxufTtcbmV4cG9ydCBjb25zdCBNc2dTZW5kRGVzYyA9IHtcbiAgICBtZXRob2ROYW1lOiBcIlNlbmRcIixcbiAgICBzZXJ2aWNlOiBNc2dEZXNjLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZToge1xuICAgICAgICBzZXJpYWxpemVCaW5hcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gTXNnU2VuZC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5Nc2dTZW5kUmVzcG9uc2UuZGVjb2RlKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRvT2JqZWN0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBNc2dNdWx0aVNlbmREZXNjID0ge1xuICAgIG1ldGhvZE5hbWU6IFwiTXVsdGlTZW5kXCIsXG4gICAgc2VydmljZTogTXNnRGVzYyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IHtcbiAgICAgICAgc2VyaWFsaXplQmluYXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIE1zZ011bHRpU2VuZC5lbmNvZGUodGhpcykuZmluaXNoKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXNwb25zZVR5cGU6IHtcbiAgICAgICAgZGVzZXJpYWxpemVCaW5hcnkoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5Nc2dNdWx0aVNlbmRSZXNwb25zZS5kZWNvZGUoZGF0YSksXG4gICAgICAgICAgICAgICAgdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNsYXNzIEdycGNXZWJJbXBsIHtcbiAgICBob3N0O1xuICAgIG9wdGlvbnM7XG4gICAgY29uc3RydWN0b3IoaG9zdCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICB1bmFyeShtZXRob2REZXNjLCBfcmVxdWVzdCwgbWV0YWRhdGEpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHsgLi4uX3JlcXVlc3QsIC4uLm1ldGhvZERlc2MucmVxdWVzdFR5cGUgfTtcbiAgICAgICAgY29uc3QgbWF5YmVDb21iaW5lZE1ldGFkYXRhID0gbWV0YWRhdGEgJiYgdGhpcy5vcHRpb25zLm1ldGFkYXRhXG4gICAgICAgICAgICA/IG5ldyBCcm93c2VySGVhZGVycyh7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zPy5tZXRhZGF0YS5oZWFkZXJzTWFwLFxuICAgICAgICAgICAgICAgIC4uLm1ldGFkYXRhPy5oZWFkZXJzTWFwLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogbWV0YWRhdGEgfHwgdGhpcy5vcHRpb25zLm1ldGFkYXRhO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgZ3JwYy51bmFyeShtZXRob2REZXNjLCB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICBob3N0OiB0aGlzLmhvc3QsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1heWJlQ29tYmluZWRNZXRhZGF0YSxcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQ6IHRoaXMub3B0aW9ucy50cmFuc3BvcnQsXG4gICAgICAgICAgICAgICAgZGVidWc6IHRoaXMub3B0aW9ucy5kZWJ1ZyxcbiAgICAgICAgICAgICAgICBvbkVuZDogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IGdycGMuQ29kZS5PSykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5jb2RlID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1ldGFkYXRhID0gcmVzcG9uc2UudHJhaWxlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR4LmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwiY29zbW9zLmNyeXB0by5zZWNwMjU2azFcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQdWJLZXkoKSB7XG4gICAgcmV0dXJuIHsga2V5OiBuZXcgVWludDhBcnJheSgpIH07XG59XG5leHBvcnQgY29uc3QgUHViS2V5ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmtleS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVB1YktleSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uua2V5ID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleTogaXNTZXQob2JqZWN0LmtleSkgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LmtleSkgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uua2V5ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoua2V5ID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2Uua2V5ICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmtleSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVB1YktleSgpO1xuICAgICAgICBtZXNzYWdlLmtleSA9IG9iamVjdC5rZXkgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUHJpdktleSgpIHtcbiAgICByZXR1cm4geyBrZXk6IG5ldyBVaW50OEFycmF5KCkgfTtcbn1cbmV4cG9ydCBjb25zdCBQcml2S2V5ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmtleS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVByaXZLZXkoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IGlzU2V0KG9iamVjdC5rZXkpID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5rZXkpIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmtleSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmtleSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmtleSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5rZXkgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQcml2S2V5KCk7XG4gICAgICAgIG1lc3NhZ2Uua2V5ID0gb2JqZWN0LmtleSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5jb25zdCBhdG9iID0gZ2xvYmFsVGhpcy5hdG9iIHx8XG4gICAgKChiNjQpID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKSk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgY29uc3QgYmluID0gYXRvYihiNjQpO1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuY29uc3QgYnRvYSA9IGdsb2JhbFRoaXMuYnRvYSB8fFxuICAgICgoYmluKSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGJpbiwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpO1xuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGNvbnN0IGJpbiA9IFtdO1xuICAgIGFyci5mb3JFYWNoKChieXRlKSA9PiB7XG4gICAgICAgIGJpbi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBidG9hKGJpbi5qb2luKFwiXCIpKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlzLmpzLm1hcCIsImltcG9ydCB7IGJ1ZmZlcl90b19iYXNlNjQsIHplcm9fb3V0IH0gZnJvbSAnIy91dGlsL2RhdGEnO1xuaW1wb3J0IFNlbnNpdGl2ZUJ5dGVzIGZyb20gJy4vc2Vuc2l0aXZlLWJ5dGVzJztcblxuXG4vKipcbiAqIENhbGxiYWNrIHRoYXQgcmV0dXJucyBvciByZXNvbHZlcyB0byBhIHByaXZhdGUga2V5IGFzIGFuIFVpbnQ4QXJyYXkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgS2V5UHJvZHVjZXIge1xuXHQoKTogVWludDhBcnJheSB8IFByb21pc2U8VWludDhBcnJheT47XG59XG5cblxuLyoqXG4gKiBDb21wdXRlIGFuZCBzdG9yZSBYT1Igd2l0aGluIEFycmF5QnVmZmVyIHNvIHRoYXQgc2Vuc2l0aXZlIGRhdGEgY2FuIGJlIG92ZXJ3cml0dGVuIGluIG1lbW9yeSBpbW1lZGlhdGVseSBhZnRlciB1c2UuXG4gKi9cbmZ1bmN0aW9uIGluYnVmZmVyX3hvcihhdHU4X2E6IFVpbnQ4QXJyYXksIGF0dThfYjogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkge1xuXHQvLyBtYWtlIHN1cmUgYnl0ZSBsZW5ndGhzIG1hdGNoXG5cdGNvbnN0IG5iX2EgPSBhdHU4X2EuYnl0ZUxlbmd0aDtcblx0aWYobmJfYSAhPT0gYXR1OF9iLmJ5dGVMZW5ndGgpIHRocm93IG5ldyBFcnJvcignSW5wdXRzIG11c3QgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGJ5dGUgbGVuZ3RoJyk7XG5cblx0Ly8gcHJlcCBvdXRwdXQgYnVmZmVyXG5cdGNvbnN0IGF0dThfb3V0ID0gbmV3IFVpbnQ4QXJyYXkobmJfYSk7XG5cblx0Ly8geG9yIG9uZSBieXRlIGF0IGEgdGltZVxuXHRmb3IobGV0IGliX2VhY2g9MDsgaWJfZWFjaDxuYl9hOyBpYl9lYWNoKyspIHtcblx0XHRhdHU4X291dFtpYl9lYWNoXSA9IGF0dThfYVtpYl9lYWNoXSBeIGF0dThfYltpYl9lYWNoXTtcblx0fVxuXG5cdC8vIHJldHVybiBvdXRwdXQgYnVmZmVyXG5cdHJldHVybiBhdHU4X291dDtcbn1cblxuLyoqXG4gKiBGZXRjaCBhIGRlcml2ZWQga2V5IGRldGVybWluaXN0aWNhbGx5IGdpdmVuIHNvbWUgc2FsdCBhbmQgb3B0aW9uYWwgaW5mby5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hfZGVyaXZlZChka19iYXNlOiBDcnlwdG9LZXksIGF0dThfc2FsdDogVWludDhBcnJheSwgbmlfYml0cz0yNTYsIGF0dThfaW5mbz1uZXcgVWludDhBcnJheSgwKSk6IFByb21pc2U8VWludDhBcnJheT4ge1xuXHRyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5kZXJpdmVCaXRzKHtcblx0XHRuYW1lOiAnSEtERicsXG5cdFx0aGFzaDogJ1NIQS0yNTYnLFxuXHRcdHNhbHQ6IGF0dThfc2FsdCxcblx0XHRpbmZvOiBhdHU4X2luZm8sXG5cdH0sIGRrX2Jhc2UsIG5pX2JpdHMpKTtcbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBvbmUtdGltZSBwYWQgZm9yIGVuY3J5cHRpbmcgdGhlIHByaXZhdGUga2V5IGluIG1lbW9yeS5cbiAqIHtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PbmUtdGltZV9wYWR9XG4gKiBcbiAqIEdpdmVuIGEgcHJpdmF0ZSBrZXkgJ3MnLCBkZXJpdmUgdHdvIDI1Ni1iaXQga2V5cyAodiwgdCkgc3VjaCB0aGF0IGB2IFhPUiB0ID0gc2AgLlxuICogVGhlIHB1cnBvc2Ugb2YgY3JlYXRpbmcgKHYsIHQpIGlzIHRvIGNvbmNlYWwgdGhlIHByaXZhdGUga2V5IHdoZW4gc2VjdXJlIGtleSBvcHRpb25zIGFyZSBub3RcbiAqIGF2YWlsYWJsZSBvbiB0aGUgc3lzdGVtIChlLmcuLCBXZWIgQ3J5cHRvIGRvZXMgbm90IHN1cHBvcnQgc2VjcDI1NmsxIHByaXZhdGUga2V5cykuXG4gKiBcbiAqIEluc3RlYWQsIGdlbmVyYXRlIGEgcmFuZG9tIGJhc2Uga2V5IGFuZCBpbXBvcnQgaXQgaW50byBhIG5ldyBDcnlwdG9LZXkgb2JqZWN0IHRoYXQgaXMgbm90IGV4dHJhY3RhYmxlXG4gKiBhbmQgY2FuIG9ubHkgYmUgdXNlZCB0byBkZXJpdmUgYml0cy4gVGhlIHJlYXNvbm9uaW5nIGJlaGluZCBub3Qgc2ltcGx5IG1ha2luZyB0aGlzIGtleSBleHRyYWN0YWJsZSBpc1xuICogdG8gYmUgYWJsZSB0byBkZXJpdmUgbmV3IGtleXMgb2YgYW55IGxlbmd0aC5cbiAqIFxuICogVXNpbmcgdGhlIGJhc2Uga2V5IG9iamVjdCwgZGVyaXZlIGJpdHMgdG8gcHJvZHVjZSB0aGUgJ2Rlcml2ZWQnIGtleSAndicuXG4gKiBcbiAqIFRoZSBuZXh0IHN0ZXAgaXMgdG8gY29tcHV0ZSB0aGUgZGVsdGEga2V5ICd0JyBzdWNoIHRoYXQgYHYgWE9SIHQgPSBzYC5cbiAqIFxuICogRmluYWxseSwgd2lwZSBhbGwgaW50ZXJtZWRpYXRlIGJ1ZmZlcnMuIEF0IHRoaXMgcG9pbnQsIHRoZSBzYWx0IG5lZWRlZCBmb3IgZGVyaXZpbmcgdGhlICdkZXJpdmVkJyBrZXksXG4gKiBhbmQgdGhlICdkZWx0YScga2V5IGFyZSB0aGUgb25seSByZWxldmFudCBkYXRhIHN0b3JlZCBpbiBwcm9jZXNzIG1lbW9yeS4gVGhlIGNvbXBsZW1lbnRhcnkgJ2Jhc2UnIGtleVxuICogaXMgYWNjZXNzaWJsZSB2aWEgcmVmZXJlbmNlIHRvIGEgQ3J5cHRvS2V5IG9iamVjdCwgaWRlYWxseSBzdG9yZWQgaW4gY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIHN1YnN5c3RlbXMuXG4gKiBcbiAqIEFueSB0aW1lIHRoZSBwcml2YXRlIGtleSBpcyBuZWVkZWQgZm9yIHNpZ25pbmcgKG9yIGFueSBvdGhlciB0YXNrLCBhbGwgb2Ygd2hpY2ggbXVzdCBoYXBwZW4gaW4tcHJvY2VzcyksXG4gKiB0aGUgc3RlcHMgYXJlOlxuICogICAtIGFjcXVpcmUgcmVmZXJlbmNlcyB0byB0aGUgYmFzZSBrZXkgQ3J5cHRvS2V5IGFuZCB0aGUgc2FsdCBVaW50OEFycmF5XG4gKiAgIC0gYXN5bmNocm9ub3VzbHkgZGVyaXZlIHRoZSAnZGVyaXZlZCcga2V5IHVzaW5nIHRoZSBiYXNlIGtleVxuICogICAtIGFjcXVpcmUgcmVmZXJlbmNlIHRvIHRoZSAnZGVsdGEnIGtleVxuICogICAtIGNvbXB1dGUgcHJpdmF0ZSBrZXkgYnkgcGVyZm9ybWluZyBgZGVyaXZlZF9rZXkgWE9SIGRlbHRhX2tleWBcbiAqICAgLSB1c2UgdGhlIHByaXZhdGUga2V5XG4gKiAgIC0gd2lwZSB0aGUgZGVyaXZlZCBrZXkgYW5kIHByaXZhdGUga2V5IGJ1ZmZlcnNcbiAqIFxuICogT3ZlcmFsbCwgdGhpcyBkb2VzIG5vdCBhZGQgYSBncmVhdCBkZWFsIG9mIHByb3RlY3Rpb24gYWdhaW5zdCBhIHN1ZmZpY2llbnRseSBwcml2aWxlZ2VkICYgY2FwYWJsZSBhdHRhY2tlcixcbiAqIGhvd2V2ZXIsIGl0IGRvZXMgKGFsYmVpdCB1bmRlciBpZGVhbCBjaXJjdW1zdGFuY2VzKSByZWR1Y2UgdGhlIGFtb3VudCBvZiB0aW1lIHRoZSBwcml2YXRlIGtleSBleGlzdHMgYXRcbiAqIGEgc2luZ2xlIGxvY2F0aW9uIHdpdGhpbiBwcm9jZXNzIG1lbW9yeSwgdGh1cyByZWR1Y2luZyBpdHMgdGVtcG9yYWwgZm9vdHByaW50LlxuICovXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZV9wYWlyKGZrX3NrOiBLZXlQcm9kdWNlciwgYXR1OF9zYWx0OiBVaW50OEFycmF5LCBuaV9iaXRzPTI1Nik6IFByb21pc2U8W0NyeXB0b0tleSwgU2Vuc2l0aXZlQnl0ZXNdPiB7XG5cdC8vIGRlcml2ZSBhIHJhbmRvbSAyNTYtYml0ICdvbmUtdGltZSBwYWQnIGtleVxuXHRjb25zdCBhdHU4X290cCA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkobmlfYml0cyA+PiAzKSk7XG5cblx0Ly8gaW1wb3J0IHRoZSBiYXNlIGtleSBpbnRvIGEgbmV3IG1hbmFnZWQga2V5IG9iamVjdCB0aGF0IGNhbiBkZXJpdmUgYml0c1xuXHRjb25zdCBka19iYXNlID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGF0dThfb3RwLCB7XG5cdFx0bmFtZTogJ0hLREYnLFxuXHRcdGhhc2g6ICdTSEEtMjU2Jyxcblx0fSwgZmFsc2UsIFsnZGVyaXZlQml0cyddKTtcblxuXHQvLyB3aXBlIHRoZSBiYXNlIGtleSBmcm9tIG1lbW9yeVxuXHR6ZXJvX291dChhdHU4X290cCk7XG5cblx0Ly8gZmV0Y2ggdGhlICdvbmUtdGltZSBwYWQnIGtleVxuXHRjb25zdCBrbl9kZXJpdmVkID0gbmV3IFNlbnNpdGl2ZUJ5dGVzKGF3YWl0IGZldGNoX2Rlcml2ZWQoZGtfYmFzZSwgYXR1OF9zYWx0LCBuaV9iaXRzKSk7XG5cblx0Ly8gZmV0Y2ggcHJpdmF0ZSBrZXlcblx0Y29uc3Qga25fc2sgPSBuZXcgU2Vuc2l0aXZlQnl0ZXMoYXdhaXQgZmtfc2soKSk7XG5cblx0Ly8gY29tcHV0ZSB0aGUgZGVsdGEga2V5XG5cdGNvbnN0IGtuX3hvciA9IGtuX3NrLnhvcihrbl9kZXJpdmVkKTtcblxuXHQvLyB3aXBlIHRoZSBwcml2YXRlIGtleSBmcm9tIG1lbW9yeVxuXHRrbl9zay53aXBlKCk7XG5cblx0Ly8gd2lwZSB0aGUgZGVyaXZlZCBrZXkgZnJvbSBtZW1vcnlcblx0a25fZGVyaXZlZC53aXBlKCk7XG5cblx0Ly8gcmV0dXJuIHRoZSBiYXNlIGtleSBhbmQgb25lLXRpbWUgcGFkIGtleVxuXHRyZXR1cm4gW2RrX2Jhc2UsIGtuX3hvcl07XG59XG5cblxuaW50ZXJmYWNlIFJ1bnRpbWVQcml2YXRlS2V5RmllbGRzIHtcblx0YXR1OF9zYWx0OiBVaW50OEFycmF5O1xuXHRrbl94b3I6IFNlbnNpdGl2ZUJ5dGVzIHwgbnVsbDtcblx0ZGtfYmFzZTogQ3J5cHRvS2V5IHwgbnVsbDtcbn1cblxuXG5jb25zdCBobV9wcml2YXRlcyA9IG5ldyBNYXA8UnVudGltZUtleSwgUnVudGltZVByaXZhdGVLZXlGaWVsZHM+KCk7XG5cblxuLyoqXG4gKiBNYWludGFpbnMgYSBwcml2YXRlIGtleSB0aGF0IG5lZWRzIHRvIGV4aXN0IGluIHByb2Nlc3PCoG1lbW9yeSB3aGVuIHVzZWQsIGJ1dCBjYW4gb3RoZXJ3aXNlIGJlbmVmaXQgZnJvbVxuICogY3J5cHRvZ3JhcGhpYyBzdWJzeXN0ZW0gc2VjdXJpdHkgYXQgcmVzdC4gVGhpcyBpcyBuZWNlc3NhcnkgZm9yIGVsbGlwdGljIGN1cnZlcyB0aGF0IGFyZSBub3Qgc3VwcG9ydGVkXG4gKiBieSB0aGUgV2ViIENyeXB0byBBUEkgc3VjaCBhcyBzZWNwMjU2azEgLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSdW50aW1lS2V5IHtcblx0LyoqXG5cdCAqIENyZWF0ZSBhIG5ldyBwcml2YXRlIGtleSBvYmplY3QuIFRoaXMgZnVuY3Rpb24gd2lsbCBhbHNvIHdpcGUgdGhlIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbCBwcml2YXRlIGtleSBmcm9tIG1lbW9yeS5cblx0ICogQHBhcmFtIGF0dThfc2sgLSB0aGUgcHJpdmF0ZSBrZXkgKHdpbGwgZ2V0IHplcm9lZCBvdXQgaW1tZWRpYXRlbHkgYWZ0ZXIgY2FsbGluZylcblx0ICovXG5cdHN0YXRpYyBhc3luYyBjcmVhdGUoZmtfc2s6IEtleVByb2R1Y2VyLCBuaV9iaXRzPTI1Nik6IFByb21pc2U8UnVudGltZUtleT4ge1xuXHRcdC8vIGluc3RhbnRpYXRlIG9iamVjdFxuXHRcdGNvbnN0IGtfa2V5ID0gbmV3IFJ1bnRpbWVLZXkoKTtcblxuXHRcdC8vIGRlc3RydWN0dXJlIHByaXZhdGUgZmllbGQocylcblx0XHRjb25zdCBnX3ByaXZhdGUgPSBobV9wcml2YXRlcy5nZXQoa19rZXkpITtcblxuXHRcdC8vIGdlbmVyYXRlIHBhaXJcblx0XHRjb25zdCBbZGtfYmFzZSwga25feG9yXSA9IGF3YWl0IGdlbmVyYXRlX3BhaXIoZmtfc2ssIGdfcHJpdmF0ZS5hdHU4X3NhbHQsIG5pX2JpdHMpO1xuXG5cdFx0Ly8gdXBkYXRlIHByaXZhdGUgZmllbGRzXG5cdFx0T2JqZWN0LmFzc2lnbihnX3ByaXZhdGUsIHtcblx0XHRcdGRrX2Jhc2UsXG5cdFx0XHRrbl94b3IsXG5cdFx0fSk7XG5cblx0XHQvLyByZXR1cm4ga2V5IG9iamVjdFxuXHRcdHJldHVybiBrX2tleTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBuZXcgcHJpdmF0ZSBrZXkgb2JqZWN0LiBUaGlzIGZ1bmN0aW9uIHdpbGwgYWxzbyB3aXBlIHRoZSBjb250ZW50cyBvZiB0aGUgb3JpZ2luYWwgcHJpdmF0ZSBrZXkgZnJvbSBtZW1vcnkuXG5cdCAqIEBwYXJhbSBhdHU4X3NrIC0gdGhlIHByaXZhdGUga2V5ICh3aWxsIGdldCB6ZXJvZWQgb3V0IGltbWVkaWF0ZWx5IGFmdGVyIGNhbGxpbmcpXG5cdCAqL1xuXHRzdGF0aWMgYXN5bmMgY3JlYXRlUmF3KGF0dThfc2s6IFVpbnQ4QXJyYXksIG5pX2JpdHM9MjU2KTogUHJvbWlzZTxSdW50aW1lS2V5PiB7XG5cdFx0cmV0dXJuIFJ1bnRpbWVLZXkuY3JlYXRlKCgpID0+IGF0dThfc2ssIG5pX2JpdHMpO1xuXHR9XG5cblxuXHQvKipcblx0ICogQ29uc3RydWN0IHByaXZhdGVseSBzaW5jZSBpbml0aWFsaXphdGlvbiBpcyBhc3luY2hyb25vdXMuXG5cdCAqL1xuXHRwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIGdlbmVyYXRlIHJhbmRvbSBzYWx0IHRvIHVzZSB3aGVuIGRlcml2aW5nIHRoZSBkZXJpdmVkIGtleVxuXHRcdGNvbnN0IGF0dThfc2FsdCA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMzIpKTtcblxuXHRcdC8vIGludGl0aWFsaXplIHByaXZhdGUgZmllbGQocylcblx0XHRobV9wcml2YXRlcy5zZXQodGhpcywge1xuXHRcdFx0YXR1OF9zYWx0LFxuXHRcdFx0a25feG9yOiBudWxsLFxuXHRcdFx0ZGtfYmFzZTogbnVsbCxcblx0XHR9KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIFJlY3JlYXRlIHRoZSBwcml2YXRlIGtleSwgb25seSBhbGxvd2luZyBpdCB0byBleGlzdCBpbiBzdGFjayBtZW1vcnkgd2l0aGluIGEgc2luZ2xlIGV2ZW50IGxvb3AgdGljay5cblx0ICovXG5cdGFzeW5jIGFjY2Vzczx3X3JldHVybj11bmtub3duPihma191c2U6IChhdHU4X3NrOiBVaW50OEFycmF5KSA9PiB3X3JldHVybik6IFByb21pc2U8d19yZXR1cm4+IHtcblx0XHQvLyByZWYgYW5kIGRlc3RydWN0dXJlIHByaXZhdGUgZmllbGRzXG5cdFx0Y29uc3QgZ19wcml2YXRlcyA9IGhtX3ByaXZhdGVzLmdldCh0aGlzKSE7XG5cdFx0Y29uc3Qge1xuXHRcdFx0ZGtfYmFzZSxcblx0XHRcdGF0dThfc2FsdCxcblx0XHRcdGtuX3hvcixcblx0XHR9ID0gZ19wcml2YXRlcztcblxuXHRcdC8vIHByZXBhcmUgdG8gY2FwdHVyZSB3aGF0ZXZlciB0aGUgY2FsbGJhY2sgZG9lc1xuXHRcdGxldCB3X3JldHVybiE6IHdfcmV0dXJuO1xuXHRcdGxldCBlX3Rocm93bjogdW5rbm93bjtcblxuXHRcdC8vIHByZXBhcmUgdGhlIG5leHQgb25lLXRpbWUgcGFkXG5cdFx0Y29uc3QgW2RrX2Jhc2VfbmV3LCBrbl94b3JfbmV3XSA9IGF3YWl0IGdlbmVyYXRlX3BhaXIoKCkgPT4gbmV3IFByb21pc2UoYXN5bmMoZmtfcmVzb2x2ZSkgPT4ge1xuXHRcdFx0Ly8gZmV0Y2ggdGhlICdkZXJpdmVkJyBrZXlcblx0XHRcdGNvbnN0IGtuX2Rlcml2ZWQgPSBuZXcgU2Vuc2l0aXZlQnl0ZXMoYXdhaXQgZmV0Y2hfZGVyaXZlZChka19iYXNlISwgYXR1OF9zYWx0LCAyNTYpKTtcblxuXHRcdFx0Ly8gY29tcHV0ZSB0aGUgcHJpdmF0ZSBrZXlcblx0XHRcdGNvbnN0IGtuX3NrID0ga25feG9yIS54b3Ioa25fZGVyaXZlZCk7XG5cblx0XHRcdC8vIHdpcGUgdGhlIGRlcml2ZWQga2V5XG5cdFx0XHRrbl9kZXJpdmVkLndpcGUoKTtcblxuXHRcdFx0Ly8gYXR0ZW1wdCB0byBwZXJmb3JtIHN5bmNocm9ub3VzIGNhbGxiYWNrXG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBhbGxvdyB0aGUgY2FsbGVyIHRvIHVzZSB0aGUgcHJpdmF0ZSBrZXlcblx0XHRcdFx0d19yZXR1cm4gPSBma191c2Uoa25fc2suZGF0YSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBjYXRjaCB3aGF0ZXZlciB3YXMgdGhyb3duIGFuZCBzYXZlIGl0XG5cdFx0XHRjYXRjaChfZV90aHJvd24pIHtcblx0XHRcdFx0ZV90aHJvd24gPSBfZV90aHJvd247XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGxiYWNrIGdlbmVyYXRlIHBhaXJcblx0XHRcdGZrX3Jlc29sdmUoa25fc2suZGF0YSk7XG5cblx0XHRcdC8vIHRoZW4gd2lwZSB0aGUgcHJpdmF0ZSBrZXkgKHJlZHVuZGFudCBiZWNhdXNlIG9mIGNhbGwgdG8gZ2VuZXJhdGUgcGFpcilcblx0XHRcdHF1ZXVlTWljcm90YXNrKCgpID0+IHtcblx0XHRcdFx0a25fc2sud2lwZSgpO1xuXHRcdFx0fSk7XG5cdFx0fSksIGF0dThfc2FsdCk7XG5cblx0XHQvLyByb3RhdGUga2V5c1xuXHRcdGdfcHJpdmF0ZXMuZGtfYmFzZSA9IGRrX2Jhc2VfbmV3O1xuXHRcdGdfcHJpdmF0ZXMua25feG9yID0ga25feG9yX25ldztcblxuXHRcdC8vIGVtdWxhdGUgd2hhdGV2ZXIgdGhlIGNhbGxiYWNrIGRpZFxuXHRcdGlmKGVfdGhyb3duKSB7XG5cdFx0XHR0aHJvdyBlX3Rocm93bjtcblx0XHR9XG5cdFx0Ly8gcmV0dXJuIHdoYXRldmVyIHRoZSBjYWxsZXIgcmV0dXJuZWRcblx0XHRlbHNlIHtcblx0XHRcdHJldHVybiB3X3JldHVybjtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRGVzdHJveSB0aGUgaW5zdGFuY2UgYW5kIGFueSBvZiBpdHMgbWF0ZXJpYWxzXG5cdCAqL1xuXHRkZXN0cm95KCk6IHZvaWQge1xuXHRcdC8vIGRlc3RydWN0dXJlIGZpZWxkc1xuXHRcdGNvbnN0IHtcblx0XHRcdGF0dThfc2FsdCxcblx0XHRcdGtuX3hvcixcblx0XHR9ID0gaG1fcHJpdmF0ZXMuZ2V0KHRoaXMpITtcblxuXHRcdC8vIHJlbW92ZSBvdHBcblx0XHRrbl94b3I/LndpcGUoKTtcblxuXHRcdC8vIGNsZWFyIHNhbHRcblx0XHR6ZXJvX291dChhdHU4X3NhbHQpO1xuXG5cdFx0Ly8gcmVtb3ZlIHBvaW50ZXJcblx0XHRobV9wcml2YXRlcy5kZWxldGUodGhpcyk7XG5cdH1cbn1cbiIsImltcG9ydCBTZW5zaXRpdmVCeXRlcyBmcm9tICcuL3NlbnNpdGl2ZS1ieXRlcyc7XG5cblxuLyoqXG4gKiBQcm92aWRlcyBzZWxlY3QgYmlnIGludGVnZXIgb3BlcmF0aW9ucyBpbnRlbmRlZCBmb3Igc2Vuc2l0aXZlIGRhdGEgc3VjaCBhcyBwcml2YXRlIGtleSBtYXRlcmlhbC5cbiAqIFJhdGhlciB0aGFuIGFsbG93aW5nIGtleSBtYXRlcmlhbCB0byBwb3NzaWJseSBvdXRsaXZlIGdhcmJhZ2UgY29sbGVjdGlvbiBpbiBtZW1vcnkgYnkgdXNpbmcgaGV4IHN0cmluZ3NcbiAqIG9yIEJpZ0ludCBkdXJpbmcgY3J5cHRvZ3JhcGhpYyBvcGVyYXRpb25zLCB1c2UgVWludDhBcnJheSBpbiBvcmRlciB0byB3aXBlIGFsbCBpbnRlcm1lZGlhdGUgdmFsdWVzIGJ5IFxuICogemVyb2luZyB0aGVtIG91dCAob3ZlcndyaXRpbmcgYWxsIGJ5dGVzIHdpdGggMHgwMCkgaW1tZWRpYXRlbHkgYWZ0ZXIgdXNlLiBFeGNlcHQgZm9yIGB3aXBlYCwgYWxsIGluc3RhbmNlXG4gKiBtZXRob2RzIGFyZSBpbW11dGFibGUuXG4gKiBcbiAqIEJ5dGUgb3JkZXIgZm9yIGludGVnZXIgZW5jb2RpbmcgYXNzdW1lcyBiaWctZW5kaWFuLCBlLmcuLCBbMHhERSwgMHhBRCwgMHhCRSwgMHhFRl0gPT09IDM3MzU5Mjg1NTkuXG4gKiBcbiAqIFNvbWUgbWF5IHdvbmRlciB3aHkgbm90IHVzZSBVaW50MzJBcnJheSBmb3IgbW9yZSBlZmZpY2llbnQgY29tcHV0YXRpb25zIHdpdGggbmF0aXZlIDMyLWJpdCBpbnRzLlxuICogSW4gQ2hyb21pdW0sIGBTbWlgIGNhbiBzdG9yZSAzMSBiaXQgc2lnbmVkIGludHMgb24gMzItYml0IGFyY2hzLCBhbmQgMzIgYml0IHNpZ25lZCBpbnRzIG9uIDY0LWJpdCBhcmNocy5cbiAqIDxodHRwczovL3NvdXJjZS5jaHJvbWl1bS5vcmcvY2hyb21pdW0vdjgvdjguZ2l0LysvbWFpbjpzcmMvb2JqZWN0cy9zbWkuaDtsPTE3O2RyYz1iZjA5NmVjOTYwZWVlMThjOTE2YjRiY2I0ZDk2YmU3YjM5ZjczMmFkPlxuICogPGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81NzQyNjc3My8xNjQxMTYwPlxuICogTWVhbmluZyB0aGF0IDMyLWJpdCB1bnNpZ25lZCBpbnRlZ2VycyB3aWxsIGFsd2F5cyBlbmQgdXAgYmVpbmcgXCJib3hlZFwiLCBpLmUuLCByZXByZXNlbnRlZCBieSBwb2ludGVycyB0b1xuICogaGVhcCBvYmplY3RzIGluIFY4LCBsZWFkaW5nIHRvIHRoZSBwb3RlbnRpYWwgZm9yIG1vcmUgc2Vuc2l0aXZlIGdhcmJhZ2UgZW5kaW5nIHVwIGluIGRlYWxsb2NhdGVkIFJBTS5cbiAqIFxuICogQXMgZm9yIFVpbnQxNkFycmF5LCBhbm90aGVyIGlzc3VlIGFyaXNlcy4gSXQgd291bGQgcmVxdWlyZSB0aGUgdXNlIG9mIERhdGFWaWV3IHRvIGNvbnRyb2wgZm9yIGVuZGlhbm5lc3NcbiAqIG9uIHRoZSBwbGF0Zm9ybSwgd2hpY2ggX21heV8gaW50cm9kdWNlIHRlbXBvcmFyeSB2YWx1ZXMgKHNvbWUgb2Ygd2hpY2ggbWF5IGFsbG9jYXRlIG9uIHRoZSBoZWFwKSBkZXBlbmRpbmdcbiAqIG9uIHRoZSBydW50aW1lIGltcGxlbWVudGF0aW9uLiBIb3dldmVyLCB0aGlzIGhhcyBub3QgYmVlbiB0aG9yb3VnaGx5IGludmVzdGlnYXRlZCBhbmQgaW5kZWVkIG1heSBvZmZlciB0aGVcbiAqIHNhbWUgcHJvdGVjdGlvbiBhcyBVaW50OEFycmF5IHdpdGggcG90ZW50aWFsbHkgbW9yZSBlZmZpY2llbnQgY29tcHV0YXRpb25zIG9uIGJpZy1lbmRpYW4gcGxhdGZvcm1zIChsaXR0bGUtXG4gKiBlbmRpYW4gcGxhdGZvcm1zIG1heSBvciBtYXkgbm90IHNlZSBwZXJmb3JtYW5jZSBoaXQgZnJvbSBEYXRhVmlldydzIGVuZGlhbiBjb252ZXJzaW9uKS5cbiAqIFxuICogSW4gY29uY2x1c2lvbiwgVWludDhBcnJheSBvZmZlcnMgdGhlIHNhZmVzdCBieXRlLXdpc2UgY2FsY3VsYXRpb25zIHNpbmNlIGFsbCBpbnRlZ2VyIG9wZXJhdGlvbnMgb24gdGhlaXJcbiAqIHZhbHVlcyBhcmUgbW9zdCBsaWtlbHkgKGdpdmVuIGFsbCBvcHRpb25zKSB0byBuZXZlciBsZWF2ZSBDUFUgcmVnaXN0ZXJzIGFuZCB0aHVzIG5ldmVyIGVuZCB1cCBpbiB0aGUgaGVhcC5cbiAqIFxuICogRm9yIHNha2Ugb2Ygc2ltcGxpY2l0eSBhbmQgaW4gdGhlIGludGVyZXN0IG9mIGF2b2lkaW5nIGh1bWFuIGVycm9ycywgdGhlIGBvdGhlcmAgaW5zdGFuY2UgcGFzc2VkIHRvIGFueVxuICogbWV0aG9kIG11c3QgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGJ5dGUgbGVuZ3RoLlxuICogRm9yIGV4YW1wbGU6XG4gKiBgYGB0c1xuICogY29uc3QgYSA9IFVpbnQ4QXJyYXkoMzIpOyBhWzBdID0gMHgwMTtcbiAqIGNvbnN0IGIgPSBVaW50OEFycmF5KDY0KTsgYlswXSA9IDB4MDM7XG4gKiBjb25zdCBzYSA9IG5ldyBTZW5zaXRpdmVCaWdVaW50KGEpO1xuICogY29uc3Qgc2IgPSBuZXcgU2Vuc2l0aXZlQmlnVWludChiKTtcbiAqIHNhLnRpbWVzKHNiKTsgIC8vIHRocm93cyBFcnJvciBzaW5jZSBgc2FgIGlzIDMyIGJ5dGVzIHdoaWxlIGBzYmAgaXMgNjQgYnl0ZXNcbiAqIGBgYFxuICogXG4gKiBPbmUgY29uc2lkZXJhdGlvbiB0aGF0IHNob3VsZCBiZSBtYWRlIGlzIHdoZXRoZXIgdGltaW5nIGF0dGFja3MgYXJlIHBhcnQgb2YgdGhlIHVzZXIncyB0aHJlYXQgbW9kZWwuXG4gKiBJdCBpcyB1bmNsZWFyIGhvdywgb3IgZXZlbiBpZiwgdGhlIG1ldGhvZHMgZW1wbG95ZWQgYnkgdGhpcyBkYXRhIHN0cnVjdHVyZSBtYWtlIGl0IHN1c2NlcHRpYmxlIHRvXG4gKiB0aW1pbmcgYXR0YWNrcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Vuc2l0aXZlQmlnVWludCBleHRlbmRzIFNlbnNpdGl2ZUJ5dGVzIHtcblx0LyoqXG5cdCAqIEdlbmVyYXRlIGEgY3J5cHRvZ3JhcGhpY2FsbHkgcmFuZG9tIHZhbHVlIGhhdmluZyB0aGUgZ2l2ZW4gbnVtYmVyIG9mIGJ5dGVzLlxuXHQgKi9cblx0c3RhdGljIG92ZXJyaWRlIHJhbmRvbShuYl9zaXplOiBudW1iZXIpOiBTZW5zaXRpdmVCaWdVaW50IHtcblx0XHRyZXR1cm4gbmV3IFNlbnNpdGl2ZUJpZ1VpbnQoY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShuYl9zaXplKSkpO1xuXHR9XG5cblxuXHQvKipcblx0ICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBjcmVhdGluZyBuaWwtaW5pdGlhbGl6ZWQgbnVtYmVyIG9mIGdpdmVuIHNpemUgaW4gYnl0ZXMuXG5cdCAqL1xuXHRzdGF0aWMgb3ZlcnJpZGUgZW1wdHkobmJfc2l6ZT0wKTogU2Vuc2l0aXZlQmlnVWludCB7XG5cdFx0cmV0dXJuIG5ldyBTZW5zaXRpdmVCaWdVaW50KG5ldyBVaW50OEFycmF5KG5iX3NpemUpKTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG1heCBiZXR3ZWVuIHR3byBpbnN0YW5jZXMuXG5cdCAqL1xuXHRzdGF0aWMgbWF4KGtuX2E6IFNlbnNpdGl2ZUJpZ1VpbnQsIGtuX2I6IFNlbnNpdGl2ZUJpZ1VpbnQpOiBTZW5zaXRpdmVCaWdVaW50IHtcblx0XHRpZihrbl9hLmd0ZShrbl9iKSkge1xuXHRcdFx0cmV0dXJuIGtuX2EuY2xvbmUoKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRyZXR1cm4ga25fYi5jbG9uZSgpO1xuXHRcdH1cblx0fVxuXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG1pbiBiZXR3ZWVuIHR3byBpbnN0YW5jZXMuXG5cdCAqL1xuXHRzdGF0aWMgbWluKGtuX2E6IFNlbnNpdGl2ZUJpZ1VpbnQsIGtuX2I6IFNlbnNpdGl2ZUJpZ1VpbnQpOiBTZW5zaXRpdmVCaWdVaW50IHtcblx0XHRpZihrbl9hLmx0ZShrbl9iKSkge1xuXHRcdFx0cmV0dXJuIGtuX2EuY2xvbmUoKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRyZXR1cm4ga25fYi5jbG9uZSgpO1xuXHRcdH1cblx0fVxuXG5cblx0LyoqXG5cdCAqIENsb25lIHRoaXMgaW5zdGFuY2Ugc28gdGhhdCBpdCBjYW4gYmUgZGVzdHJveWVkIHdpdGhvdXQgYWZmZWN0aW5nIHRoZSBjbG9uZS5cblx0ICovXG5cdG92ZXJyaWRlIGNsb25lKCk6IFNlbnNpdGl2ZUJpZ1VpbnQge1xuXHRcdHJldHVybiBuZXcgU2Vuc2l0aXZlQmlnVWludChVaW50OEFycmF5LmZyb20odGhpcy5kYXRhKSk7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBDb21wYXJlIHRoaXMgaW50IHZhbHVlIHRvIHNvbWUgb3RoZXIncy5cblx0ICovXG5cdGNvbXBhcmUoa25fb3RoZXI6IFNlbnNpdGl2ZUJpZ1VpbnQpOiBudW1iZXIge1xuXHRcdC8vIHJlZiBkYXRhXG5cdFx0Y29uc3QgYXR1OF9kYXRhX3RoaXMgPSB0aGlzLmRhdGE7XG5cblx0XHQvLyBjYWNoZSBieXRlIGxlbmd0aFxuXHRcdGNvbnN0IG5iX2RpZ2l0c190aGlzID0gYXR1OF9kYXRhX3RoaXMuYnl0ZUxlbmd0aDtcblxuXHRcdC8vIHJlZiBvdGhlcidzIGRhdGFcblx0XHRjb25zdCBhdHU4X2RhdGFfb3RoZXIgPSBrbl9vdGhlci5kYXRhO1xuXG5cdFx0Ly8gYW5kIGNhY2hlIGl0cyBieXRlIGxlbmd0aFxuXHRcdGNvbnN0IG5iX2RpZ2l0c19vdGhlciA9IGF0dThfZGF0YV9vdGhlci5ieXRlTGVuZ3RoO1xuXG5cdFx0Ly8gZGlnaXQgY291bnQgZGlzY3JlcGFuY3kgKHRoaXMgY2hlY2sgaGFwcGVucyBhdCB0aGUgdG9wIG9mIGFsbCBvcGVyYXRpb25zKVxuXHRcdGlmKG5iX2RpZ2l0c19vdGhlciAhPT0gbmJfZGlnaXRzX3RoaXMpIHtcblx0XHRcdC8vIHBhbmljIHdpcGVzXG5cdFx0XHR0aGlzLndpcGUoKTtcblx0XHRcdGtuX290aGVyLndpcGUoKTtcblxuXHRcdFx0Ly8gcmVmdXNlIG9wZXJhdGlvblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdSZWZ1c2luZyB0byBjb21wYXJlIGJ1ZmZlcnMgb2YgZGlmZmVyZW50IGJ5dGUgbGVuZ3RoJyk7XG5cdFx0fVxuXG5cdFx0Ly8gZWFjaCBieXRlIGluIGJvdGggYnVmZmVyc1xuXHRcdGZvcihsZXQgaWJfZWFjaD0wOyBpYl9lYWNoPG5iX2RpZ2l0c190aGlzOyBpYl9lYWNoKyspIHtcblx0XHRcdC8vIGNhY2hlIGJ5dGUgdmFsdWVzXG5cdFx0XHRjb25zdCB4Yl9hID0gYXR1OF9kYXRhX3RoaXNbaWJfZWFjaF07XG5cdFx0XHRjb25zdCB4Yl9iID0gYXR1OF9kYXRhX290aGVyW2liX2VhY2hdO1xuXG5cdFx0XHQvLyB2YWx1ZXMgZGlmZmVyXG5cdFx0XHRpZih4Yl9hICE9PSB4Yl9iKSB7XG5cdFx0XHRcdC8vIHRoaXMgaXMgZ3JlYXRlclxuXHRcdFx0XHRpZih4Yl9hID4geGJfYikge1xuXHRcdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIG90aGVyIGlzIGdyZWF0ZXJcblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gdGhleSBhcmUgZXF1YWxcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEVxdWFsIHRvIG90aGVyLlxuXHQgKi9cblx0ZXEoa25fb3RoZXI6IFNlbnNpdGl2ZUJpZ1VpbnQpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5jb21wYXJlKGtuX290aGVyKSA9PT0gMDtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEdyZWF0ZXIgdGhhbiBvdGhlci5cblx0ICovXG5cdGd0KGtuX290aGVyOiBTZW5zaXRpdmVCaWdVaW50KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuY29tcGFyZShrbl9vdGhlcikgPiAwO1xuXHR9XG5cblxuXHQvKipcblx0ICogR3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIG90aGVyLlxuXHQgKi9cblx0Z3RlKGtuX290aGVyOiBTZW5zaXRpdmVCaWdVaW50KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuY29tcGFyZShrbl9vdGhlcikgPj0gMDtcblx0fVxuXG5cblx0LyoqXG5cdCAqIExlc3MgdGhhbiBvdGhlci5cblx0ICovXG5cdGx0KGtuX290aGVyOiBTZW5zaXRpdmVCaWdVaW50KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuY29tcGFyZShrbl9vdGhlcikgPCAwO1xuXHR9XG5cblxuXHQvKipcblx0ICogTGVzcyB0aGFuIG9yIGVxdWFsIHRvIG90aGVyXG5cdCAqL1xuXHRsdGUoa25fb3RoZXI6IFNlbnNpdGl2ZUJpZ1VpbnQpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5jb21wYXJlKGtuX290aGVyKSA8PSAwO1xuXHR9XG5cblxuXHQvKipcblx0ICogQ2FsY3VsYXRlIHRoZSBhYnNvbHV0ZSBkaWZmZXJlbmNlIGB8YSAtIGJ8YCBiZXR3ZWVuIHR3byB2YWx1ZXMuXG5cdCAqL1xuXHRkaWZmKGtuX290aGVyOiBTZW5zaXRpdmVCaWdVaW50KTogU2Vuc2l0aXZlQmlnVWludCB7XG5cdFx0Ly8gcmVmIGRhdGFcblx0XHRjb25zdCBhdHU4X2RhdGFfdGhpcyA9IHRoaXMuZGF0YTtcblxuXHRcdC8vIGNhY2hlIGJ5dGUgbGVuZ3RoXG5cdFx0Y29uc3QgbmJfZGlnaXRzID0gYXR1OF9kYXRhX3RoaXMuYnl0ZUxlbmd0aDtcblxuXHRcdC8vIGNvbXBhcmUgdG8gb3RoZXJcblx0XHRjb25zdCB4Y19jb21wYXJlID0gdGhpcy5jb21wYXJlKGtuX290aGVyKTtcblxuXHRcdC8vIHdyb25nIG9yZGVyXG5cdFx0aWYoeGNfY29tcGFyZSA8IDApIHtcblx0XHRcdHJldHVybiBrbl9vdGhlci5kaWZmKHRoaXMpO1xuXHRcdH1cblx0XHQvLyBlcXVhbFxuXHRcdGVsc2UgaWYoMCA9PT0geGNfY29tcGFyZSkge1xuXHRcdFx0cmV0dXJuIFNlbnNpdGl2ZUJpZ1VpbnQuZW1wdHkobmJfZGlnaXRzKTtcblx0XHR9XG5cblx0XHQvLyByZWYgb3RoZXIncyBkYXRhXG5cdFx0Y29uc3QgYXR1OF9kYXRhX290aGVyID0ga25fb3RoZXIuZGF0YTtcblxuXHRcdC8vIHByZXAgb3V0cHV0IGJ1ZmZlclxuXHRcdGNvbnN0IGF0dThfb3V0ID0gbmV3IFVpbnQ4QXJyYXkobmJfZGlnaXRzKTtcblxuXHRcdC8vIGJvcnJvdyB2YWx1ZXNcblx0XHRsZXQgeGJfYm9ycm93ID0gMDtcblxuXHRcdC8vIGVhY2ggb3ZlcmxhcHBpbmcgYnl0ZSBpbiBib3RoIGJ1ZmZlcnMgZnJvbSByaWdodCB0byBsZWZ0XG5cdFx0Zm9yKGxldCBpYl9lYWNoPW5iX2RpZ2l0cy0xOyBpYl9lYWNoPj0wOyBpYl9lYWNoLS0pIHtcblx0XHRcdC8vIGNhbGN1bGF0ZSBieXRlIHZhbHVlIGRpZmZlcmVuY2Vcblx0XHRcdGxldCB4Yl9kaWZmID0gYXR1OF9kYXRhX3RoaXNbaWJfZWFjaF0gLSBhdHU4X2RhdGFfb3RoZXJbaWJfZWFjaF0gLSB4Yl9ib3Jyb3c7XG5cblx0XHRcdC8vIG5lZ2F0aXZlIGRpZmY7IGJvcnJvdyBmcm9tIG5leHRcblx0XHRcdGlmKHhiX2RpZmYgPCAwKSB7XG5cdFx0XHRcdHhiX2RpZmYgKz0gMHgxMDA7XG5cdFx0XHRcdHhiX2JvcnJvdyA9IDE7XG5cdFx0XHR9XG5cdFx0XHQvLyBub24tbmVnYXRpdmUgZGlmZjsgcmVzZXQgYm9ycm93XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0eGJfYm9ycm93ID0gMDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gc2V0IG91dHB1dFxuXHRcdFx0YXR1OF9vdXRbaWJfZWFjaF0gPSB4Yl9kaWZmO1xuXHRcdH1cblxuXHRcdC8vIHdyYXAgaW4gb2JqZWN0XG5cdFx0cmV0dXJuIG5ldyBTZW5zaXRpdmVCaWdVaW50KGF0dThfb3V0KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZSB0aGlzIG1vZHVsbyBvZiB0aGUgZ2l2ZW4gYmFzZSAoZGl2aXNvcikuXG5cdCAqL1xuXHRtb2Qoa25fYmFzZTogU2Vuc2l0aXZlQmlnVWludCk6IFNlbnNpdGl2ZUJpZ1VpbnQge1xuXHRcdC8vIHJlZiBkYXRhXG5cdFx0Y29uc3QgYXR1OF9kYXRhX3RoaXMgPSB0aGlzLmRhdGE7XG5cblx0XHQvLyBjYWNoZSBieXRlIGxlbmd0aFxuXHRcdGNvbnN0IG5iX2RpZ2l0c190aGlzID0gYXR1OF9kYXRhX3RoaXMuYnl0ZUxlbmd0aDtcblxuXHRcdC8vIGNvbXBhcmUgdmFsdWVzXG5cdFx0bGV0IHhjX2NvbXBhcmUgPSB0aGlzLmNvbXBhcmUoa25fYmFzZSk7XG5cblx0XHQvLyBiYXNlIGlzIGdyZWF0ZXIgaW4gdmFsdWU7IG5vIG5lZWQgdG8gY29tcHV0ZSBtb2R1bG9cblx0XHRpZih4Y19jb21wYXJlIDwgMCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2xvbmUoKTtcblx0XHR9XG5cdFx0Ly8gYmFzZSBpcyBlcXVhbCBpbiB2YWx1ZTsgbW9kdWxvIGlzIHplcm9cblx0XHRlbHNlIGlmKDAgPT09IHhjX2NvbXBhcmUpIHtcblx0XHRcdHJldHVybiBTZW5zaXRpdmVCaWdVaW50LmVtcHR5KG5iX2RpZ2l0c190aGlzKTtcblx0XHR9XG5cblx0XHQvLyByZWYgb3RoZXIncyBkYXRhXG5cdFx0Y29uc3QgYXR1OF9kYXRhX290aGVyID0ga25fYmFzZS5kYXRhO1xuXG5cdFx0Ly8gYW5kIGNhY2hlIGl0cyBieXRlIGxlbmd0aFxuXHRcdGNvbnN0IG5iX2RpZ2l0c19vdGhlciA9IGF0dThfZGF0YV9vdGhlci5ieXRlTGVuZ3RoO1xuXG5cblx0XHQvLyBUT0RPOiBhY3R1YWxseSBpbXBsZW1lbnQgZGl2aXNpb24gb3RoZXJ3aXNlIGl0IHdpbGwgaGFuZ1xuXG5cblx0XHQvLyBjb3B5IHRoaXMgdmFsdWUgZm9yIHJvdW5kcyBvZiBkaXZpc2lvblxuXHRcdGxldCBrbl9wcmV2ID0gdGhpcy5jbG9uZSgpO1xuXG5cdFx0Ly8gd2hpbGUgdmFsdWUgaXMgbGFyZ2VyIHRoYW4gYmFzZSAoZGl2aXNvcilcblx0XHRmb3IoOzspIHtcblx0XHRcdC8vIGNhbGN1bGF0ZSBkaWZmZXJlbmNlXG5cdFx0XHRjb25zdCBrbl9kaWZmID0ga25fcHJldi5kaWZmKGtuX2Jhc2UpO1xuXG5cdFx0XHQvLyB3aXBlIHByZXZpb3VzIGNvbnRlbnRzXG5cdFx0XHRrbl9wcmV2LndpcGUoKTtcblxuXHRcdFx0Ly8gY29tcGFyZSB2YWx1ZXNcblx0XHRcdHhjX2NvbXBhcmUgPSBrbl9kaWZmLmNvbXBhcmUoa25fYmFzZSk7XG5cblx0XHRcdC8vIHdpdGhpbiByYW5nZVxuXHRcdFx0aWYoeGNfY29tcGFyZSA8PSAwKSB7XG5cdFx0XHRcdHJldHVybiBrbl9kaWZmO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyByZXBlYXRcblx0XHRcdGtuX3ByZXYgPSBrbl9kaWZmO1xuXHRcdH1cblx0fVxuXG5cdG1vZHVsdXMoa25fZGl2aXNvcjogU2Vuc2l0aXZlQmlnVWludCkge1xuXHRcdC8vIHJlZiBkYXRhXG5cdFx0Y29uc3QgYXR1OF9kYXRhX3RoaXMgPSB0aGlzLmRhdGE7XG5cblx0XHQvLyBjYWNoZSBieXRlIGxlbmd0aFxuXHRcdGNvbnN0IG5iX2RpZ2l0c190aGlzID0gYXR1OF9kYXRhX3RoaXMuYnl0ZUxlbmd0aDtcblxuXHRcdC8vIGNvbXBhcmUgdmFsdWVzXG5cdFx0bGV0IHhjX2NvbXBhcmUgPSB0aGlzLmNvbXBhcmUoa25fZGl2aXNvcik7XG5cblx0XHQvLyBiYXNlIGlzIGdyZWF0ZXIgaW4gdmFsdWU7IG5vIG5lZWQgdG8gY29tcHV0ZSBtb2R1bG9cblx0XHRpZih4Y19jb21wYXJlIDwgMCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2xvbmUoKTtcblx0XHR9XG5cdFx0Ly8gYmFzZSBpcyBlcXVhbCBpbiB2YWx1ZTsgbW9kdWxvIGlzIHplcm9cblx0XHRlbHNlIGlmKDAgPT09IHhjX2NvbXBhcmUpIHtcblx0XHRcdHJldHVybiBTZW5zaXRpdmVCaWdVaW50LmVtcHR5KG5iX2RpZ2l0c190aGlzKTtcblx0XHR9XG5cblx0XHQvLyByZWYgb3RoZXIncyBkYXRhXG5cdFx0Y29uc3QgYXR1OF9kYXRhX290aGVyID0ga25fZGl2aXNvci5kYXRhO1xuXG5cdFx0Ly8gYW5kIGNhY2hlIGl0cyBieXRlIGxlbmd0aFxuXHRcdGNvbnN0IG5iX2RpZ2l0c19vdGhlciA9IGF0dThfZGF0YV9vdGhlci5ieXRlTGVuZ3RoO1xuXHR9XG5cbn1cbiIsIlxuaW1wb3J0IFJ1bnRpbWVLZXkgZnJvbSAnLi9ydW50aW1lLWtleSc7XG5cbmltcG9ydCBTZW5zaXRpdmVCaWdVaW50IGZyb20gJy4vc2Vuc2l0aXZlLWJpZy11aW50JztcblxuaW1wb3J0IHsgYnVmZmVyX3RvX2Jhc2U2NCwgY29uY2F0LCBoZXhfdG9fYnVmZmVyLCBobWFjLCBzaGEyNTYsIHplcm9fb3V0IH0gZnJvbSAnIy91dGlsL2RhdGEnO1xuXG5pbXBvcnQge1xuXHRpbnN0YW50aWF0ZVNlY3AyNTZrMSxcblx0U2VjcDI1NmsxLFxufSBmcm9tICdAc29sYXItcmVwdWJsaWMvd2FzbS1zZWNwMjU2azEnO1xuaW1wb3J0IHsgTWFuYWdlZEtleSB9IGZyb20gJy4va2V5cmluZyc7XG5cblxuY29uc3QgS05fWkVST18zMiA9IFNlbnNpdGl2ZUJpZ1VpbnQuZW1wdHkoMzIpO1xuXG4vLyBzZWNwMjU2azEgY3VydmUgb3JkZXI7IGVxdWl2YWxlbnQgdG8gdGhlIG51bWJlciBvZiB2YWxpZCBwb2ludHMgaW4gZmllbGRcbi8vIDxodHRwczovL25ldXJvbWFuY2VyLnNrL3N0ZC9zZWNnL3NlY3AyNTZrMT5cbi8vIDxodHRwczovL3NlY2cub3JnL3NlYzItdjIucGRmPlxuY29uc3QgS05fQ1VSVkVfTl9TRUNQMjU2SzEgPSBuZXcgU2Vuc2l0aXZlQmlnVWludChoZXhfdG9fYnVmZmVyKCdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWJhYWVkY2U2YWY0OGEwM2JiZmQyNWU4Y2QwMzY0MTQxJykpO1xuXG4vLyBtaW5pbXVtIGRpc3RhbmNlIHRvIGVuZm9yY2UgKGluIGJpdHMpIGF3YXkgZnJvbSB0aGUgdmFsaWQgZW5kcG9pbnRzIG9mIHRoZSBmaWVsZFxuY29uc3QgTklfTUlOSU1VTV9CT1JERVIgPSA2NDtcblxuLy8gcHJpdmF0ZSBrZXlzIGxvd2VyIHRoYW4gdGhpcyB2YWx1ZSBhcmUgYXQgaGlnaCByaXNrIG9mIGJlaW5nIGd1ZXNzZWRcbmNvbnN0IEtOX0RBTkdFUl9MTyA9IG5ldyBTZW5zaXRpdmVCaWdVaW50KFxuXHRoZXhfdG9fYnVmZmVyKFxuXHRcdCgoMSA8PCAoTklfTUlOSU1VTV9CT1JERVIgJSA4KSkudG9TdHJpbmcoMTYpXG5cdFx0KycwMCcucmVwZWF0KE5JX01JTklNVU1fQk9SREVSID4+PiAzKSkucGFkU3RhcnQoNjQsICcwJylcblx0KSk7XG5cbi8vIHByaXZhdGUga2V5cyBncmVhdGVyIHRoYW4gdGhpcyB2YWx1ZSBhcmUgYXQgaGlnaCByaXNrIG9mIGJlaW5nIGd1ZXNzZWRcbmNvbnN0IEtOX0RBTkdFUl9ISSA9IEtOX0NVUlZFX05fU0VDUDI1NksxLmRpZmYoS05fREFOR0VSX0xPKTtcblxuXG5cbi8vIHNoYXJlZCBzZWNwMjU2azEgaW5zdGFuY2VcbmxldCB5X3NlY3AyNTZrMTogU2VjcDI1NmsxIHwgdW5kZWZpbmVkO1xuXG4vLyBjYWxsYmFja3Mgd2FpdGluZyBmb3IgaW5pdFxubGV0IGFfd2FpdF9zZWNwMjU2azE6ICgoeTogU2VjcDI1NmsxKSA9PiB2b2lkKVtdIHwgbnVsbCA9IG51bGw7XG5cbi8vIHJlcXVlc3QgdG8gaW5pdGlhbGl6ZSBzZWNwMjU2azFcbmFzeW5jIGZ1bmN0aW9uIGluaXRfc2VjcDI1NmsxKCk6IFByb21pc2U8U2VjcDI1NmsxPiB7XG5cdC8vIGFscmVhZHkgaW5pdGlhbGl6ZWRcblx0aWYoeV9zZWNwMjU2azEpIHJldHVybiB5X3NlY3AyNTZrMTtcblxuXHQvLyBhbHJlYWR5IGluIHRoZSBwcm9jZXNzIG9mIGluaXRpYWxpemluZ1xuXHRpZihhX3dhaXRfc2VjcDI1NmsxKSB7XG5cdFx0Ly8gYWRkIHRvIGNhbGxiYWNrIGxpc3Rcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKGZrX3Jlc29sdmUpID0+IHtcblx0XHRcdGFfd2FpdF9zZWNwMjU2azEhLnB1c2goZmtfcmVzb2x2ZSk7XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBzdGFydCBhY2NlcHRpbmcgYWRkaXRpb25hbCBsaXN0ZW5lcnNcblx0YV93YWl0X3NlY3AyNTZrMSA9IFtdO1xuXG5cdC8vIGluaXRpYWxpemVcblx0eV9zZWNwMjU2azEgPSBhd2FpdCBpbnN0YW50aWF0ZVNlY3AyNTZrMShjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDMyKSkpO1xuXG5cdC8vIGNvcHkgbGlzdFxuXHRjb25zdCBhX2V4ZWNzID0gYV93YWl0X3NlY3AyNTZrMS5zbGljZSgpO1xuXG5cdC8vIGRvbid0IGFsbG93IG1vcmUgcHVzaGluZ1xuXHRhX3dhaXRfc2VjcDI1NmsxID0gbnVsbDtcblxuXHQvLyBleGVjdXRlIGNhbGxiYWNrc1xuXHRmb3IoY29uc3QgZmtfY2FsbGJhY2sgb2YgYV9leGVjcykge1xuXHRcdGZrX2NhbGxiYWNrKHlfc2VjcDI1NmsxKTtcblx0fVxuXG5cdC8vIHJldHVybiBpbnN0YW5jZVxuXHRyZXR1cm4geV9zZWNwMjU2azE7XG59XG5cblxuaW50ZXJmYWNlIFNlY3AyNTZrMUtleUZpZWxkcyB7XG5cdC8vIHByaXZhdGUga2V5XG5cdGtrX3NrOiBSdW50aW1lS2V5O1xuXG5cdC8vIGNvbXByZXNzZWQgcHVibGljIGtleVxuXHRhdHU4X3BrMzM6IFVpbnQ4QXJyYXk7XG5cblx0Ly8gdW5jb21wcmVzc2VkIHB1YmxpYyBrZXlcblx0YXR1OF9wazY1OiBVaW50OEFycmF5O1xuXG5cdC8vIGV4cG9ydGFibGUgZmxhZ1xuXHRiX2V4cG9ydGFibGU6IGJvb2xlYW47XG59XG5cbi8vIHByaXZhdGUgZmllbGRzXG5jb25zdCBobV9wcml2YXRlcyA9IG5ldyBNYXA8U2VjcDI1NmsxS2V5LCBTZWNwMjU2azFLZXlGaWVsZHM+KCk7XG5cblxuLyoqXG4gKiBFbmNhcHN1bGF0ZXMgYSBzZWNwMjU2azEgcHJpdmF0ZSBrZXkuXG4gKi9cbi8vIGV4cG9ydCBjbGFzcyBTZWNwMjU2azFLZXk8c2lfdHlwZSBleHRlbmRzIEtleVR5cGU+IGV4dGVuZHMgTWFuYWdlZEtleTxzaV90eXBlPiB7XG5leHBvcnQgY2xhc3MgU2VjcDI1NmsxS2V5IHtcblx0c3RhdGljIHdpdGhpbkN1cnZlKGtnX3NrOiBTZW5zaXRpdmVCaWdVaW50KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIEtOX1pFUk9fMzIubHQoa2dfc2spICYmIEtOX0NVUlZFX05fU0VDUDI1NksxLmd0KGtnX3NrKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBWZXJpZmllcyB0aGUgZ2l2ZW4gcHVibGljIGtleSBwcm9kdWNlZCB0aGUgZ2l2ZW4gc2lnbmF0dXJlIGZvciB0aGUgZ2l2ZW4gbWVzc2FnZS5cblx0ICovXG5cdHN0YXRpYyBhc3luYyB2ZXJpZnkoYXR1OF9zaWduYXR1cmU6IFVpbnQ4QXJyYXksIGF0dThfbWVzc2FnZTogVWludDhBcnJheSwgYXR1OF9wazogVWludDhBcnJheSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRcdC8vIHNlY3AyNTZrMSBub3QgeWV0IGluaXRpYWxpemVkOyBpbml0aWFsaXplIGl0XG5cdFx0aWYoIXlfc2VjcDI1NmsxKSBhd2FpdCBpbml0X3NlY3AyNTZrMSgpO1xuXG5cdFx0Ly8gY29tcHV0ZSBtZXNzYWdlIGRpZ2VzdFxuXHRcdGNvbnN0IGF0dThfZGlnZXN0ID0gYXdhaXQgc2hhMjU2KGF0dThfbWVzc2FnZSk7XG5cblx0XHQvLyB2ZXJpZnkgc2lnbmF0dXJlXG5cdFx0cmV0dXJuIHlfc2VjcDI1NmsxIS52ZXJpZnlTaWduYXR1cmVDb21wYWN0TG93UyhhdHU4X3NpZ25hdHVyZSwgYXR1OF9waywgYXR1OF9kaWdlc3QpO1xuXHR9XG5cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgbmV3IHNlY3AyNTZrMSBwcml2YXRlIGtleSBwYWlyIHVzaW5nIENTUFJORy5cblx0ICovXG5cdHN0YXRpYyBhc3luYyBnZW5lcmF0ZVByaXZhdGVLZXkoYl9leHBvcnRhYmxlPWZhbHNlKTogUHJvbWlzZTxbUnVudGltZUtleSwgU2VjcDI1NmsxS2V5XT4ge1xuXHRcdC8vIHNlY3AyNTZrMSBub3QgeWV0IGluaXRpYWxpemVkOyBpbml0aWFsaXplIGl0XG5cdFx0aWYoIXlfc2VjcDI1NmsxKSBhd2FpdCBpbml0X3NlY3AyNTZrMSgpO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgYW4gb3JpZ2luYWwgcHJpdmF0ZSBrZXkgaW4gYW4gZXhwbGljaXQsIHNlbGYtY29udGFpbmVkIHNjb3BlXG5cdFx0Y29uc3Qga2tfc2sgPSBhd2FpdCBSdW50aW1lS2V5LmNyZWF0ZSgoKSA9PiB7XG5cdFx0XHQvLyBnZW5lcmF0ZSBwcml2YXRlIGtleSBhY2NvcmRpbmcgdG8gRklQUyAxODYtNCBCLjQuMiA8aHR0cHM6Ly9udmxwdWJzLm5pc3QuZ292L25pc3RwdWJzL0ZJUFMvTklTVC5GSVBTLjE4Ni00LnBkZj5cblx0XHRcdGxldCBhdHU4X3NrOiBVaW50OEFycmF5O1xuXHRcdFx0d2hpbGUoIXlfc2VjcDI1NmsxIS52YWxpZGF0ZVByaXZhdGVLZXkoYXR1OF9zaz1jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDMyKSkpKTtcblxuXHRcdFx0Ly8gcmV0dXJuIHByaXZhdGUga2V5IGRhdGEgKHdpbGwgYXV0b21hdGljYWxseSBnZXQgemVyby1lZCBvdXQgYnkgY2FsbGVyKVxuXHRcdFx0cmV0dXJuIGF0dThfc2s7XG5cdFx0fSk7XG5cblx0XHQvLyBpbXBvcnQgaW50byBuZXcgaW5zdGFuY2Vcblx0XHRyZXR1cm4gW2trX3NrLCBhd2FpdCBTZWNwMjU2azFLZXkuaW1wb3J0KGtrX3NrLCBiX2V4cG9ydGFibGUpXTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIFVuY29tcHJlc3NlcyBhIHB1YmxpYyBrZXlcblx0ICovXG5cdHN0YXRpYyB1bmNvbXByZXNzUHVibGljS2V5KGF0dThfcHVia2V5OiBVaW50OEFycmF5KTogVWludDhBcnJheSB7XG5cdFx0cmV0dXJuIHlfc2VjcDI1NmsxIS51bmNvbXByZXNzUHVibGljS2V5KGF0dThfcHVia2V5KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEltcG9ydHMgYSBzZWNwMjU2azEgcHJpdmF0ZSBrZXkgdG8gYmUgdXNlZCBmb3Igc2lnbmluZy92ZXJpZnlpbmcuXG5cdCAqIEBwYXJhbSBra19zayAtIHRoZSBwcml2YXRlIGtleVxuXHQgKiBAcGFyYW0gYl9leHBvcnRhYmxlIC0gd2hldGhlciBvciBub3QgdGhlIF9wdWJsaWMga2V5XyBjYW4gYmUgZXhwb3J0ZWRcblx0ICogQHJldHVybnMgYSBuZXcge0BsaW5rY29kZSBTZWNwMjU2azF9IGluc3RhbmNlXG5cdCAqL1xuXHRzdGF0aWMgYXN5bmMgaW1wb3J0KGtrX3NrOiBSdW50aW1lS2V5LCBiX2V4cG9ydGFibGU9ZmFsc2UpOiBQcm9taXNlPFNlY3AyNTZrMUtleT4ge1xuXHRcdC8vIHNlY3AyNTZrMSBub3QgeWV0IGluaXRpYWxpemVkOyBpbml0aWFsaXplIGl0XG5cdFx0aWYoIXlfc2VjcDI1NmsxKSBhd2FpdCBpbml0X3NlY3AyNTZrMSgpO1xuXG5cdFx0Ly8gY3JlYXRlIGluc3RhbmNlIGFuZCBpbXBvcnQga2V5XG5cdFx0cmV0dXJuIGF3YWl0IG5ldyBTZWNwMjU2azFLZXkoeV9zZWNwMjU2azEhKS5pbXBvcnQoa2tfc2ssIGJfZXhwb3J0YWJsZSk7XG5cdH1cblxuXG5cdC8vIHdoZXRoZXIgdGhlIGluc3RhbmNlIGhhcyBiZWVuIGluaXRpYWxpemVkXG5cdF9iX2luaXQgPSBmYWxzZTtcblxuXHQvKipcblx0ICogTm90IGZvciBwdWJsaWMgdXNlLiBJbnN0ZWFkLCB1c2Ugc3RhdGljIG1ldGhvZCB7QGxpbmtjb2RlIFNlY3AyNTZrMUtleS5pbXBvcnR9IG9yXG5cdCAqIHtAbGlua2NvZGUgU2VjcDI1NmsxS2V5LmdlbmVyYXRlUHJpdmF0ZUtleX0uXG5cdCAqL1xuXHRwcml2YXRlIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfeV9zZWNwMjU2azE6IFNlY3AyNTZrMSkge31cblxuXG5cdC8qKlxuXHQgKiBJbXBvcnRzIGEgc2VjcDI1NmsxIHByaXZhdGUga2V5LlxuXHQgKiBAcGFyYW0ga2tfc2sgLSB0aGUgcHJpdmF0ZSBrZXlcblx0ICogQHBhcmFtIGJfZXhwb3J0YWJsZSAtIHdoZXRoZXIgb3Igbm90IHRoZSBfcHVibGljIGtleV8gY2FuIGJlIGV4cG9ydGVkXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblx0YXN5bmMgaW1wb3J0KGtrX3NrOiBSdW50aW1lS2V5LCBiX2V4cG9ydGFibGU9ZmFsc2UpOiBQcm9taXNlPHRoaXM+IHtcblx0XHRjb25zdCBfeV9zZWNwMjU2azEgPSB0aGlzLl95X3NlY3AyNTZrMTtcblxuXHRcdC8vIGFjY2VzcyBwcml2YXRlIGtleVxuXHRcdGF3YWl0IGtrX3NrLmFjY2VzcygoYXR1OF9zaykgPT4ge1xuXHRcdFx0Ly8gdmFsaWRhdGUgcHJpdmF0ZSBrZXlcblx0XHRcdGlmKCF0aGlzLl95X3NlY3AyNTZrMS52YWxpZGF0ZVByaXZhdGVLZXkoYXR1OF9zaykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gdmFsaWRhdGUgc2VjcDI1NmsxIHByaXZhdGUga2V5YCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHN0b3JlIHByaXZhdGUgZmllbGRzXG5cdFx0XHRobV9wcml2YXRlcy5zZXQodGhpcywge1xuXHRcdFx0XHRra19zayxcblx0XHRcdFx0YXR1OF9wazMzOiBfeV9zZWNwMjU2azEuZGVyaXZlUHVibGljS2V5Q29tcHJlc3NlZChhdHU4X3NrKSxcblx0XHRcdFx0YXR1OF9wazY1OiBfeV9zZWNwMjU2azEuZGVyaXZlUHVibGljS2V5VW5jb21wcmVzc2VkKGF0dThfc2spLFxuXHRcdFx0XHRiX2V4cG9ydGFibGUsXG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdC8vIHZhbGlkYXRlIHB1YmtleXNcblx0XHRjb25zdCB7XG5cdFx0XHRhdHU4X3BrMzMsXG5cdFx0XHRhdHU4X3BrNjUsXG5cdFx0fSA9IGhtX3ByaXZhdGVzLmdldCh0aGlzKSE7XG5cblx0XHQvLyB2YWxpZGF0ZSB0aGUgY29tcHJlc3NlZCBwdWJsaWMga2V5XG5cdFx0aWYoIV95X3NlY3AyNTZrMS52YWxpZGF0ZVB1YmxpY0tleShhdHU4X3BrMzMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB2YWxpZGF0ZSBzZWNwMjU2azEgY29tcHJlc3NlZCBwdWJsaWMga2V5YCk7XG5cdFx0fVxuXG5cdFx0Ly8gdmFsaWRhdGUgdGhlIHVuY29tcHJlc3NlZCBwdWJsaWMga2V5XG5cdFx0aWYoIV95X3NlY3AyNTZrMS52YWxpZGF0ZVB1YmxpY0tleShhdHU4X3BrNjUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB2YWxpZGF0ZSBzZWNwMjU2azEgdW5jb21wcmVzc2VkIHB1YmxpYyBrZXlgKTtcblx0XHR9XG5cblx0XHQvLyBzYXZlIGluaXRpYWxpemF0aW9uIHN0YXRlXG5cdFx0dGhpcy5fYl9pbml0ID0gdHJ1ZTtcblxuXHRcdC8vIGVuYWJsZSBjaGFpbmluZ1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblxuXHQvKipcblx0ICogRXhwb3J0cyB0aGUgcHVibGljIGtleSBpZmYgaW5zdGFuY2Ugd2FzIGNvbnN0cnVjdGVkIHdpdGggZXhwb3J0YWJsZSBzZXQgdG8gYHRydWVgLlxuXHQgKiBPdGhlcndpc2UgdGhyb3dzIGFuIGVycm9yLlxuXHQgKiBAcGFyYW0gYl91bmNvbXByZXNzZWQgLSBwYXNzIGB0cnVlYCB0byByZXR1cm4gdGhlIHVuY29tcHJlc3NlZCA2NS1ieXRlIGtleSwgb3RoZXJ3aXNlIHJldHVybnMgdGhlIGNvbXByZXNzZWQgMzMtYnl0ZSBrZXkgYnkgZGVmYXVsdC5cblx0ICovXG5cdGV4cG9ydFB1YmxpY0tleShiX3VuY29tcHJlc3NlZD1mYWxzZSk6IFVpbnQ4QXJyYXkge1xuXHRcdGNvbnN0IHtcblx0XHRcdGF0dThfcGszMyxcblx0XHRcdGF0dThfcGs2NSxcblx0XHRcdGJfZXhwb3J0YWJsZSxcblx0XHR9ID0gaG1fcHJpdmF0ZXMuZ2V0KHRoaXMpITtcblxuXHRcdC8vIHB1YmxpYyBrZXkgaXMgZXhwb3J0YWJsZVxuXHRcdGlmKHRydWUgPT09IGJfZXhwb3J0YWJsZSkgeyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktYm9vbGVhbi1saXRlcmFsLWNvbXBhcmVcblx0XHRcdC8vIHVzZXIgd2FudHMgdGhlIHVuY29tcHJlc3NlZCBwdWJsaWMga2V5XG5cdFx0XHRpZihiX3VuY29tcHJlc3NlZCkge1xuXHRcdFx0XHRyZXR1cm4gYXR1OF9wazY1O1xuXHRcdFx0fVxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHJldHVybiB0aGUgY29tcHJlc3NlZCBwdWJsaWMga2V5IGJ5IGRlZmF1bHRcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gYXR1OF9wazMzO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBwdWJsaWMga2V5IGlzIG5vdCBleHBvcnRhYmxlXG5cdFx0ZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1B1YmxpYyBrZXkgaXMgbm90IGV4cG9ydGFibGUnKTtcblx0XHR9XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBTaWducyBhcmJpdHJhcnkgbWVzc2FnZSB1c2luZyB0aGlzIHByaXZhdGUga2V5LCByZXR1cm5pbmcgdGhlIGNvbXBhY3QsIG5vbi1tYWxsZWFibGUgc2lnbmF0dXJlLlxuXHQgKi9cblx0YXN5bmMgc2lnbihhdHU4X21lc3NhZ2U6IFVpbnQ4QXJyYXksIGJfZXh0cmFfZW50cm9weT1mYWxzZSk6IFByb21pc2U8VWludDhBcnJheT4ge1xuXHRcdC8vIGhhc2ggbWVzc2FnZVxuXHRcdGNvbnN0IGF0dThfZGlnZXN0ID0gYXdhaXQgc2hhMjU2KGF0dThfbWVzc2FnZSk7XG5cblx0XHQvLyBkZXN0cnVjdHVyZSBwcml2YXRlIGZpZWxkKHMpXG5cdFx0Y29uc3Qge1xuXHRcdFx0a2tfc2ssXG5cdFx0fSA9IGhtX3ByaXZhdGVzLmdldCh0aGlzKSE7XG5cblx0XHQvLyBhY2Nlc3MgdGhlIHByaXZhdGUga2V5OyBzaWduIHRoZSBtZXNzYWdlIGByIHx8IFNgIHdoZXJlIGBTYCBpcyBpbiBsb3dlci1TIGZvcm1cblx0XHRyZXR1cm4gYXdhaXQga2tfc2suYWNjZXNzKChhdHU4X3NrKSA9PiB7XG5cdFx0XHRpZihiX2V4dHJhX2VudHJvcHkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3lfc2VjcDI1NmsxLnNpZ25NZXNzYWdlSGFzaENvbXBhY3QoYXR1OF9zaywgYXR1OF9kaWdlc3QsIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMzIpKSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3lfc2VjcDI1NmsxLnNpZ25NZXNzYWdlSGFzaENvbXBhY3QoYXR1OF9zaywgYXR1OF9kaWdlc3QpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblxuXHQvKipcblx0ICogVmVyaWZpZXMgdGhhdCB0aGlzIGtleSBwcm9kdWNlZCB0aGUgZ2l2ZW4gc2lnbmF0dXJlIGZvciB0aGUgZ2l2ZW4gbWVzc2FnZS5cblx0ICovXG5cdGFzeW5jIHZlcmlmeShhdHU4X3NpZ25hdHVyZTogVWludDhBcnJheSwgYXR1OF9tZXNzYWdlOiBVaW50OEFycmF5KTogUHJvbWlzZTxib29sZWFuPiB7XG5cdFx0Ly8gY29tcHV0ZSBtZXNzYWdlIGRpZ2VzdFxuXHRcdGNvbnN0IGF0dThfZGlnZXN0ID0gYXdhaXQgc2hhMjU2KGF0dThfbWVzc2FnZSk7XG5cblx0XHQvLyBkZXN0cnVjdHVyZSBwcml2YXRlIGZpZWxkXG5cdFx0Y29uc3Qge1xuXHRcdFx0YXR1OF9wazY1LFxuXHRcdH0gPSBobV9wcml2YXRlcy5nZXQodGhpcykhO1xuXG5cdFx0Ly8gcGVyZm9ybSBzaWduYXR1cmUgdmVyaWZpY2F0aW9uXG5cdFx0cmV0dXJuIHRoaXMuX3lfc2VjcDI1NmsxLnZlcmlmeVNpZ25hdHVyZUNvbXBhY3RMb3dTKGF0dThfc2lnbmF0dXJlLCBhdHU4X3BrNjUsIGF0dThfZGlnZXN0KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIFBlcmZvcm1zIEVDREggdG8gZ2V0IGEgc2hhcmVkIHNlY3JldCB3aXRoIGFub3RoZXIgcHVibGljIGtleS5cblx0ICovXG5cdGFzeW5jIGVjZGgoYXR1OF9wazogVWludDhBcnJheSk6IFByb21pc2U8VWludDhBcnJheT4ge1xuXHRcdC8vIGRlc3RydWN0dXJlIHByaXZhdGUgZmllbGQocylcblx0XHRjb25zdCB7XG5cdFx0XHRra19zayxcblx0XHR9ID0gaG1fcHJpdmF0ZXMuZ2V0KHRoaXMpITtcblxuXHRcdC8vIGFjY2VzcyB0aGUgcHJpdmF0ZSBrZXk7IHBlcmZvcm0gZWNkaDsgcmV0dXJuIHNlY3JldFxuXHRcdHJldHVybiBhd2FpdCBra19zay5hY2Nlc3MoYXR1OF9zayA9PiB0aGlzLl95X3NlY3AyNTZrMS5lY2RoKGF0dThfc2ssIGF0dThfcGspKTtcblx0fVxuXG5cblx0YWRkKGF0dThfdHdlYWs6IFVpbnQ4QXJyYXkpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcblx0XHQvLyBkZXN0cnVjdHVyZSBwcml2YXRlIGZpZWxkKHMpXG5cdFx0Y29uc3Qge1xuXHRcdFx0a2tfc2ssXG5cdFx0fSA9IGhtX3ByaXZhdGVzLmdldCh0aGlzKSE7XG5cblx0XHQvLyBhY2Nlc3MgdGhlIHByaXZhdGUga2V5OyBhZGQgdHdlYWsgcHJpdmF0ZSBrZXlcblx0XHRyZXR1cm4ga2tfc2suYWNjZXNzKGF0dThfc2sgPT4gdGhpcy5feV9zZWNwMjU2azEuYWRkVHdlYWtQcml2YXRlS2V5KGF0dThfc2ssIGF0dThfdHdlYWspKTtcblx0fVxuXG5cdC8vIC8qKlxuXHQvLyAgKiBDb21wdXRlIHRoZSBzaGFyZWQgc2VjcmV0IGJldHdlZW4gdGhpcyBhbmQgdGhlIGdpdmVuIHB1YmxpYyBrZXkuXG5cdC8vICAqL1xuXHQvLyBhc3luYyBjb21wdXRlU2hhcmVkU2VjcmV0V2l0aChhdHU4X3BrX290aGVyOiBVaW50OEFycmF5KTogUHJvbWlzZTxSdW50aW1lUHJpdmF0ZUtleT4ge1xuXHQvLyBcdC8vIGRlc3RydWN0dXJlIHByaXZhdGUgZmllbGRcblx0Ly8gXHRjb25zdCB7XG5cdC8vIFx0XHRra19zayxcblx0Ly8gXHR9ID0gaG1fcHJpdmF0ZXMuZ2V0KHRoaXMpO1xuXG5cdFx0XG5cdC8vIFx0Ly8gYWNjZXNzIHRoZSBwcml2YXRlIGtleVxuXHQvLyBcdHJldHVybiBhd2FpdCBSdW50aW1lUHJpdmF0ZUtleS5jcmVhdGUoa2tfc2suYWNjZXNzKChhdHU4X3NrKSA9PiB7XG5cdC8vIFx0XHQvLyBnZXQgYW5kIHJldHVybiB0aGUgc2hhcmVkIHNlY3JldFxuXHQvLyBcdFx0cmV0dXJuIHlfbGliYXV0aC5nZXRTaGFyZWRTZWNyZXQoYXR1OF9zaywgYXR1OF9wa19vdGhlcik7XG5cblx0Ly8gXHRcdC8vIHJldHVybiBzZWNwLmdldFNoYXJlZFNlY3JldChhdHU4X3NrLCBhdHU4X3BrX290aGVyKTtcblx0Ly8gXHR9KSk7XG5cdC8vIH1cbn0iLCJpbXBvcnQge1xuXHRjcmVhdGVfc3RvcmVfY2xhc3MsXG5cdFdyaXRhYmxlU3RvcmVEaWN0LFxufSBmcm9tICcuL19iYXNlJztcblxuaW1wb3J0IHsgU0lfU1RPUkVfU0VDUkVUUyB9IGZyb20gJyMvc2hhcmUvY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHsgU2VjcmV0IH0gZnJvbSAnIy9tZXRhL3NlY3JldCc7XG5pbXBvcnQgdHlwZSB7IFJlc291cmNlIH0gZnJvbSAnIy9tZXRhL3Jlc291cmNlJztcblxudHlwZSBQYXRoRnJvbTxcblx0Z19zZWNyZXQgZXh0ZW5kcyBTZWNyZXRbJ2ludGVyZmFjZSddLFxuPiA9IGAvc2VjcmV0LiR7Z19zZWNyZXRbJ3R5cGUnXX0vdXVpZC4ke2dfc2VjcmV0Wyd1dWlkJ119YDtcblxuZXhwb3J0IGNvbnN0IFNlY3JldHMgPSBjcmVhdGVfc3RvcmVfY2xhc3Moe1xuXHRzdG9yZTogU0lfU1RPUkVfU0VDUkVUUyxcblx0ZXh0ZW5zaW9uOiAnZGljdCcsXG5cdGNsYXNzOiBjbGFzcyBTZWNyZXRzSSBleHRlbmRzIFdyaXRhYmxlU3RvcmVEaWN0PHR5cGVvZiBTSV9TVE9SRV9TRUNSRVRTPiB7XG5cdFx0c3RhdGljIHBhdGhGcm9tKGdfc2VjcmV0OiBTZWNyZXRbJ2ludGVyZmFjZSddKTogUGF0aEZyb208dHlwZW9mIGdfc2VjcmV0PiB7XG5cdFx0XHRyZXR1cm4gYC9zZWNyZXQuJHtnX3NlY3JldC50eXBlfS91dWlkLiR7Z19zZWNyZXQudXVpZH1gO1xuXHRcdH1cblxuXHRcdC8vIGZvcihwX3Jlc291cmNlOiBzdHJpbmcpOiBudW1iZXJbXSB7XG5cdFx0Ly8gXHRyZXR1cm4gdGhpcy5fd19jYWNoZS5tYXBbcF9yZXNvdXJjZV0gPz8gW107XG5cdFx0Ly8gfVxuXG5cdFx0YXN5bmMgcHV0KGdfc2VjcmV0OiBTZWNyZXRbJ2ludGVyZmFjZSddKTogUHJvbWlzZTxQYXRoRnJvbTx0eXBlb2YgZ19zZWNyZXQ+PiB7XG5cdFx0XHQvLyBwcmVwYXJlIHBhdGhcblx0XHRcdGNvbnN0IHBfcmVzID0gU2VjcmV0c0kucGF0aEZyb20oZ19zZWNyZXQpO1xuXG5cdFx0XHQvLyB1cGRhdGUgY2FjaGVcblx0XHRcdHRoaXMuX3dfY2FjaGVbcF9yZXNdID0gZ19zZWNyZXQ7XG5cblx0XHRcdC8vIGF0dGVtcHQgdG8gc2F2ZVxuXHRcdFx0YXdhaXQgdGhpcy5zYXZlKCk7XG5cblx0XHRcdC8vIHJldHVybiBwYXRoXG5cdFx0XHRyZXR1cm4gcF9yZXM7XG5cdFx0fVxuXG5cblx0fSxcbn0pO1xuXG4iLCJpbXBvcnQgdHlwZSB7IEFjY291bnQgfSBmcm9tICcjL21ldGEvYWNjb3VudCc7XG5pbXBvcnQgdHlwZSB7IEZhbWlseUtleSB9IGZyb20gJyMvbWV0YS9jaGFpbic7XG5pbXBvcnQgdHlwZSB7IFJlc291cmNlIH0gZnJvbSAnIy9tZXRhL3Jlc291cmNlJztcblxuaW1wb3J0IHtcblx0Y3JlYXRlX3N0b3JlX2NsYXNzLFxuXHRXcml0YWJsZVN0b3JlTWFwLFxufSBmcm9tICcuL19iYXNlJztcblxuaW1wb3J0IHsgU0lfU1RPUkVfQUNDT1VOVFMgfSBmcm9tICcjL3NoYXJlL2NvbnN0YW50cyc7XG5pbXBvcnQgdHlwZSB7IFJlcGxhY2UgfSBmcm9tICd0cy10b29sYmVsdC9vdXQvU3RyaW5nL1JlcGxhY2UnO1xuXG50eXBlIFBhdGhGb3I8XG5cdHNpX2ZhbWlseSBleHRlbmRzIEZhbWlseUtleSxcblx0c19wdWJrZXkgZXh0ZW5kcyBzdHJpbmcsXG4+ID0gYC9mYW1pbHkuJHtzaV9mYW1pbHl9L2FjY291bnQuJHtSZXBsYWNlPHNfcHVia2V5LCAnOicsICcrJz59YDtcblxudHlwZSBQYXRoRnJvbUFjY291bnQ8XG5cdGdfYWNjb3VudCBleHRlbmRzIEFjY291bnRbJ2ludGVyZmFjZSddLFxuPiA9IFBhdGhGb3I8Z19hY2NvdW50WydmYW1pbHknXSwgZ19hY2NvdW50WydwdWJrZXknXT47XG5cbmV4cG9ydCBjb25zdCBBY2NvdW50cyA9IGNyZWF0ZV9zdG9yZV9jbGFzcyh7XG5cdHN0b3JlOiBTSV9TVE9SRV9BQ0NPVU5UUyxcblx0ZXh0ZW5zaW9uOiAnbWFwJyxcblx0Y2xhc3M6IGNsYXNzIEFjY291bnRzSSBleHRlbmRzIFdyaXRhYmxlU3RvcmVNYXA8dHlwZW9mIFNJX1NUT1JFX0FDQ09VTlRTPiB7XG5cdFx0c3RhdGljIHBhdGhGb3I8XG5cdFx0XHRzaV9mYW1pbHkgZXh0ZW5kcyBGYW1pbHlLZXksXG5cdFx0XHRzX3B1YmtleSBleHRlbmRzIHN0cmluZyxcblx0XHQ+KHNpX2ZhbWlseTogc2lfZmFtaWx5LCBzX3B1YmtleTogc19wdWJrZXkpOiBQYXRoRm9yPHNpX2ZhbWlseSwgc19wdWJrZXk+IHtcblx0XHRcdHJldHVybiBgL2ZhbWlseS4ke3NpX2ZhbWlseX0vYWNjb3VudC4ke3NfcHVia2V5LnJlcGxhY2UoLzovZywgJysnKX1gIGFzIFBhdGhGb3I8c2lfZmFtaWx5LCBzX3B1YmtleT47XG5cdFx0fVxuXG5cdFx0c3RhdGljIHBhdGhGcm9tKGdfYWNjb3VudDogQWNjb3VudFsnaW50ZXJmYWNlJ10pOiBQYXRoRnJvbUFjY291bnQ8dHlwZW9mIGdfYWNjb3VudD4ge1xuXHRcdFx0cmV0dXJuIEFjY291bnRzSS5wYXRoRm9yKGdfYWNjb3VudC5mYW1pbHksIGdfYWNjb3VudC5wdWJrZXkpO1xuXHRcdH1cblxuXHRcdHN0YXRpYyBnZXQoc2lfZmFtaWx5OiBGYW1pbHlLZXksIHNfcHVia2V5OiBzdHJpbmcpOiBQcm9taXNlPG51bGwgfCBBY2NvdW50WydpbnRlcmZhY2UnXT4ge1xuXHRcdFx0cmV0dXJuIEFjY291bnRzLm9wZW4oa3MgPT4ga3MuZ2V0KHNpX2ZhbWlseSwgc19wdWJrZXkpKTtcblx0XHR9XG5cblx0XHRnZXQoc2lfZmFtaWx5OiBGYW1pbHlLZXksIHNfcHVia2V5OiBzdHJpbmcpOiBBY2NvdW50WydpbnRlcmZhY2UnXSB8IG51bGwge1xuXHRcdFx0Ly8gcHJlcGFyZSBwYXRoXG5cdFx0XHRjb25zdCBwX3JlcyA9IEFjY291bnRzSS5wYXRoRm9yKHNpX2ZhbWlseSwgc19wdWJrZXkpO1xuXG5cdFx0XHQvLyBmZXRjaFxuXHRcdFx0cmV0dXJuIHRoaXMuX3dfY2FjaGVbcF9yZXNdID8/IG51bGw7XG5cdFx0fVxuXG5cdFx0YXN5bmMgcHV0KGdfYWNjb3VudDogQWNjb3VudFsnaW50ZXJmYWNlJ10pOiBQcm9taXNlPFBhdGhGcm9tQWNjb3VudDx0eXBlb2YgZ19hY2NvdW50Pj4ge1xuXHRcdFx0Ly8gcHJlcGFyZSBwYXRoXG5cdFx0XHRjb25zdCBwX3JlcyA9IEFjY291bnRzSS5wYXRoRnJvbShnX2FjY291bnQpO1xuXG5cdFx0XHQvLyB1cGRhdGUgY2FjaGVcblx0XHRcdHRoaXMuX3dfY2FjaGVbcF9yZXNdID0gZ19hY2NvdW50O1xuXG5cdFx0XHQvLyBhdHRlbXB0IHRvIHNhdmVcblx0XHRcdGF3YWl0IHRoaXMuc2F2ZSgpO1xuXG5cdFx0XHQvLyByZXR1cm4gcGF0aFxuXHRcdFx0cmV0dXJuIHBfcmVzO1xuXHRcdH1cblx0fSxcbn0pO1xuIiwiLypcclxuICogICAgICBiaWdudW1iZXIuanMgdjkuMC4yXHJcbiAqICAgICAgQSBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIGFyYml0cmFyeS1wcmVjaXNpb24gYXJpdGhtZXRpYy5cclxuICogICAgICBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9iaWdudW1iZXIuanNcclxuICogICAgICBDb3B5cmlnaHQgKGMpIDIwMjEgTWljaGFlbCBNY2xhdWdobGluIDxNOGNoODhsQGdtYWlsLmNvbT5cclxuICogICAgICBNSVQgTGljZW5zZWQuXHJcbiAqXHJcbiAqICAgICAgQmlnTnVtYmVyLnByb3RvdHlwZSBtZXRob2RzICAgICB8ICBCaWdOdW1iZXIgbWV0aG9kc1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIGFic29sdXRlVmFsdWUgICAgICAgICAgICBhYnMgICAgfCAgY2xvbmVcclxuICogICAgICBjb21wYXJlZFRvICAgICAgICAgICAgICAgICAgICAgIHwgIGNvbmZpZyAgICAgICAgICAgICAgIHNldFxyXG4gKiAgICAgIGRlY2ltYWxQbGFjZXMgICAgICAgICAgICBkcCAgICAgfCAgICAgIERFQ0lNQUxfUExBQ0VTXHJcbiAqICAgICAgZGl2aWRlZEJ5ICAgICAgICAgICAgICAgIGRpdiAgICB8ICAgICAgUk9VTkRJTkdfTU9ERVxyXG4gKiAgICAgIGRpdmlkZWRUb0ludGVnZXJCeSAgICAgICBpZGl2ICAgfCAgICAgIEVYUE9ORU5USUFMX0FUXHJcbiAqICAgICAgZXhwb25lbnRpYXRlZEJ5ICAgICAgICAgIHBvdyAgICB8ICAgICAgUkFOR0VcclxuICogICAgICBpbnRlZ2VyVmFsdWUgICAgICAgICAgICAgICAgICAgIHwgICAgICBDUllQVE9cclxuICogICAgICBpc0VxdWFsVG8gICAgICAgICAgICAgICAgZXEgICAgIHwgICAgICBNT0RVTE9fTU9ERVxyXG4gKiAgICAgIGlzRmluaXRlICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgIFBPV19QUkVDSVNJT05cclxuICogICAgICBpc0dyZWF0ZXJUaGFuICAgICAgICAgICAgZ3QgICAgIHwgICAgICBGT1JNQVRcclxuICogICAgICBpc0dyZWF0ZXJUaGFuT3JFcXVhbFRvICAgZ3RlICAgIHwgICAgICBBTFBIQUJFVFxyXG4gKiAgICAgIGlzSW50ZWdlciAgICAgICAgICAgICAgICAgICAgICAgfCAgaXNCaWdOdW1iZXJcclxuICogICAgICBpc0xlc3NUaGFuICAgICAgICAgICAgICAgbHQgICAgIHwgIG1heGltdW0gICAgICAgICAgICAgIG1heFxyXG4gKiAgICAgIGlzTGVzc1RoYW5PckVxdWFsVG8gICAgICBsdGUgICAgfCAgbWluaW11bSAgICAgICAgICAgICAgbWluXHJcbiAqICAgICAgaXNOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICB8ICByYW5kb21cclxuICogICAgICBpc05lZ2F0aXZlICAgICAgICAgICAgICAgICAgICAgIHwgIHN1bVxyXG4gKiAgICAgIGlzUG9zaXRpdmUgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIGlzWmVybyAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIG1pbnVzICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIG1vZHVsbyAgICAgICAgICAgICAgICAgICBtb2QgICAgfFxyXG4gKiAgICAgIG11bHRpcGxpZWRCeSAgICAgICAgICAgICB0aW1lcyAgfFxyXG4gKiAgICAgIG5lZ2F0ZWQgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHBsdXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHByZWNpc2lvbiAgICAgICAgICAgICAgICBzZCAgICAgfFxyXG4gKiAgICAgIHNoaWZ0ZWRCeSAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHNxdWFyZVJvb3QgICAgICAgICAgICAgICBzcXJ0ICAgfFxyXG4gKiAgICAgIHRvRXhwb25lbnRpYWwgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHRvRml4ZWQgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHRvRm9ybWF0ICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHRvRnJhY3Rpb24gICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHRvSlNPTiAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHRvTnVtYmVyICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHRvUHJlY2lzaW9uICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHRvU3RyaW5nICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgIHZhbHVlT2YgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKlxyXG4gKi9cclxuXHJcblxyXG52YXJcclxuICBpc051bWVyaWMgPSAvXi0/KD86XFxkKyg/OlxcLlxcZCopP3xcXC5cXGQrKSg/OmVbKy1dP1xcZCspPyQvaSxcclxuICBtYXRoY2VpbCA9IE1hdGguY2VpbCxcclxuICBtYXRoZmxvb3IgPSBNYXRoLmZsb29yLFxyXG5cclxuICBiaWdudW1iZXJFcnJvciA9ICdbQmlnTnVtYmVyIEVycm9yXSAnLFxyXG4gIHRvb01hbnlEaWdpdHMgPSBiaWdudW1iZXJFcnJvciArICdOdW1iZXIgcHJpbWl0aXZlIGhhcyBtb3JlIHRoYW4gMTUgc2lnbmlmaWNhbnQgZGlnaXRzOiAnLFxyXG5cclxuICBCQVNFID0gMWUxNCxcclxuICBMT0dfQkFTRSA9IDE0LFxyXG4gIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFmZmZmZmZmZmZmZmZmLCAgICAgICAgIC8vIDJeNTMgLSAxXHJcbiAgLy8gTUFYX0lOVDMyID0gMHg3ZmZmZmZmZiwgICAgICAgICAgICAgICAgICAgLy8gMl4zMSAtIDFcclxuICBQT1dTX1RFTiA9IFsxLCAxMCwgMTAwLCAxZTMsIDFlNCwgMWU1LCAxZTYsIDFlNywgMWU4LCAxZTksIDFlMTAsIDFlMTEsIDFlMTIsIDFlMTNdLFxyXG4gIFNRUlRfQkFTRSA9IDFlNyxcclxuXHJcbiAgLy8gRURJVEFCTEVcclxuICAvLyBUaGUgbGltaXQgb24gdGhlIHZhbHVlIG9mIERFQ0lNQUxfUExBQ0VTLCBUT19FWFBfTkVHLCBUT19FWFBfUE9TLCBNSU5fRVhQLCBNQVhfRVhQLCBhbmRcclxuICAvLyB0aGUgYXJndW1lbnRzIHRvIHRvRXhwb25lbnRpYWwsIHRvRml4ZWQsIHRvRm9ybWF0LCBhbmQgdG9QcmVjaXNpb24uXHJcbiAgTUFYID0gMUU5OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBNQVhfSU5UMzJcclxuXHJcblxyXG4vKlxyXG4gKiBDcmVhdGUgYW5kIHJldHVybiBhIEJpZ051bWJlciBjb25zdHJ1Y3Rvci5cclxuICovXHJcbmZ1bmN0aW9uIGNsb25lKGNvbmZpZ09iamVjdCkge1xyXG4gIHZhciBkaXYsIGNvbnZlcnRCYXNlLCBwYXJzZU51bWVyaWMsXHJcbiAgICBQID0gQmlnTnVtYmVyLnByb3RvdHlwZSA9IHsgY29uc3RydWN0b3I6IEJpZ051bWJlciwgdG9TdHJpbmc6IG51bGwsIHZhbHVlT2Y6IG51bGwgfSxcclxuICAgIE9ORSA9IG5ldyBCaWdOdW1iZXIoMSksXHJcblxyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRURJVEFCTEUgQ09ORklHIERFRkFVTFRTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcblxyXG4gICAgLy8gVGhlIGRlZmF1bHQgdmFsdWVzIGJlbG93IG11c3QgYmUgaW50ZWdlcnMgd2l0aGluIHRoZSBpbmNsdXNpdmUgcmFuZ2VzIHN0YXRlZC5cclxuICAgIC8vIFRoZSB2YWx1ZXMgY2FuIGFsc28gYmUgY2hhbmdlZCBhdCBydW4tdGltZSB1c2luZyBCaWdOdW1iZXIuc2V0LlxyXG5cclxuICAgIC8vIFRoZSBtYXhpbXVtIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyBmb3Igb3BlcmF0aW9ucyBpbnZvbHZpbmcgZGl2aXNpb24uXHJcbiAgICBERUNJTUFMX1BMQUNFUyA9IDIwLCAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gTUFYXHJcblxyXG4gICAgLy8gVGhlIHJvdW5kaW5nIG1vZGUgdXNlZCB3aGVuIHJvdW5kaW5nIHRvIHRoZSBhYm92ZSBkZWNpbWFsIHBsYWNlcywgYW5kIHdoZW4gdXNpbmdcclxuICAgIC8vIHRvRXhwb25lbnRpYWwsIHRvRml4ZWQsIHRvRm9ybWF0IGFuZCB0b1ByZWNpc2lvbiwgYW5kIHJvdW5kIChkZWZhdWx0IHZhbHVlKS5cclxuICAgIC8vIFVQICAgICAgICAgMCBBd2F5IGZyb20gemVyby5cclxuICAgIC8vIERPV04gICAgICAgMSBUb3dhcmRzIHplcm8uXHJcbiAgICAvLyBDRUlMICAgICAgIDIgVG93YXJkcyArSW5maW5pdHkuXHJcbiAgICAvLyBGTE9PUiAgICAgIDMgVG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICAvLyBIQUxGX1VQICAgIDQgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHVwLlxyXG4gICAgLy8gSEFMRl9ET1dOICA1IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCBkb3duLlxyXG4gICAgLy8gSEFMRl9FVkVOICA2IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzIGV2ZW4gbmVpZ2hib3VyLlxyXG4gICAgLy8gSEFMRl9DRUlMICA3IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzICtJbmZpbml0eS5cclxuICAgIC8vIEhBTEZfRkxPT1IgOCBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgdG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICBST1VORElOR19NT0RFID0gNCwgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gOFxyXG5cclxuICAgIC8vIEVYUE9ORU5USUFMX0FUIDogW1RPX0VYUF9ORUcgLCBUT19FWFBfUE9TXVxyXG5cclxuICAgIC8vIFRoZSBleHBvbmVudCB2YWx1ZSBhdCBhbmQgYmVuZWF0aCB3aGljaCB0b1N0cmluZyByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uLlxyXG4gICAgLy8gTnVtYmVyIHR5cGU6IC03XHJcbiAgICBUT19FWFBfTkVHID0gLTcsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gLU1BWFxyXG5cclxuICAgIC8vIFRoZSBleHBvbmVudCB2YWx1ZSBhdCBhbmQgYWJvdmUgd2hpY2ggdG9TdHJpbmcgcmV0dXJucyBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgIC8vIE51bWJlciB0eXBlOiAyMVxyXG4gICAgVE9fRVhQX1BPUyA9IDIxLCAgICAgICAgICAgICAgICAgICAgICAgICAvLyAwIHRvIE1BWFxyXG5cclxuICAgIC8vIFJBTkdFIDogW01JTl9FWFAsIE1BWF9FWFBdXHJcblxyXG4gICAgLy8gVGhlIG1pbmltdW0gZXhwb25lbnQgdmFsdWUsIGJlbmVhdGggd2hpY2ggdW5kZXJmbG93IHRvIHplcm8gb2NjdXJzLlxyXG4gICAgLy8gTnVtYmVyIHR5cGU6IC0zMjQgICg1ZS0zMjQpXHJcbiAgICBNSU5fRVhQID0gLTFlNywgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0xIHRvIC1NQVhcclxuXHJcbiAgICAvLyBUaGUgbWF4aW11bSBleHBvbmVudCB2YWx1ZSwgYWJvdmUgd2hpY2ggb3ZlcmZsb3cgdG8gSW5maW5pdHkgb2NjdXJzLlxyXG4gICAgLy8gTnVtYmVyIHR5cGU6ICAzMDggICgxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOClcclxuICAgIC8vIEZvciBNQVhfRVhQID4gMWU3LCBlLmcuIG5ldyBCaWdOdW1iZXIoJzFlMTAwMDAwMDAwJykucGx1cygxKSBtYXkgYmUgc2xvdy5cclxuICAgIE1BWF9FWFAgPSAxZTcsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMSB0byBNQVhcclxuXHJcbiAgICAvLyBXaGV0aGVyIHRvIHVzZSBjcnlwdG9ncmFwaGljYWxseS1zZWN1cmUgcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uLCBpZiBhdmFpbGFibGUuXHJcbiAgICBDUllQVE8gPSBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRydWUgb3IgZmFsc2VcclxuXHJcbiAgICAvLyBUaGUgbW9kdWxvIG1vZGUgdXNlZCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBtb2R1bHVzOiBhIG1vZCBuLlxyXG4gICAgLy8gVGhlIHF1b3RpZW50IChxID0gYSAvIG4pIGlzIGNhbGN1bGF0ZWQgYWNjb3JkaW5nIHRvIHRoZSBjb3JyZXNwb25kaW5nIHJvdW5kaW5nIG1vZGUuXHJcbiAgICAvLyBUaGUgcmVtYWluZGVyIChyKSBpcyBjYWxjdWxhdGVkIGFzOiByID0gYSAtIG4gKiBxLlxyXG4gICAgLy9cclxuICAgIC8vIFVQICAgICAgICAwIFRoZSByZW1haW5kZXIgaXMgcG9zaXRpdmUgaWYgdGhlIGRpdmlkZW5kIGlzIG5lZ2F0aXZlLCBlbHNlIGlzIG5lZ2F0aXZlLlxyXG4gICAgLy8gRE9XTiAgICAgIDEgVGhlIHJlbWFpbmRlciBoYXMgdGhlIHNhbWUgc2lnbiBhcyB0aGUgZGl2aWRlbmQuXHJcbiAgICAvLyAgICAgICAgICAgICBUaGlzIG1vZHVsbyBtb2RlIGlzIGNvbW1vbmx5IGtub3duIGFzICd0cnVuY2F0ZWQgZGl2aXNpb24nIGFuZCBpc1xyXG4gICAgLy8gICAgICAgICAgICAgZXF1aXZhbGVudCB0byAoYSAlIG4pIGluIEphdmFTY3JpcHQuXHJcbiAgICAvLyBGTE9PUiAgICAgMyBUaGUgcmVtYWluZGVyIGhhcyB0aGUgc2FtZSBzaWduIGFzIHRoZSBkaXZpc29yIChQeXRob24gJSkuXHJcbiAgICAvLyBIQUxGX0VWRU4gNiBUaGlzIG1vZHVsbyBtb2RlIGltcGxlbWVudHMgdGhlIElFRUUgNzU0IHJlbWFpbmRlciBmdW5jdGlvbi5cclxuICAgIC8vIEVVQ0xJRCAgICA5IEV1Y2xpZGlhbiBkaXZpc2lvbi4gcSA9IHNpZ24obikgKiBmbG9vcihhIC8gYWJzKG4pKS5cclxuICAgIC8vICAgICAgICAgICAgIFRoZSByZW1haW5kZXIgaXMgYWx3YXlzIHBvc2l0aXZlLlxyXG4gICAgLy9cclxuICAgIC8vIFRoZSB0cnVuY2F0ZWQgZGl2aXNpb24sIGZsb29yZWQgZGl2aXNpb24sIEV1Y2xpZGlhbiBkaXZpc2lvbiBhbmQgSUVFRSA3NTQgcmVtYWluZGVyXHJcbiAgICAvLyBtb2RlcyBhcmUgY29tbW9ubHkgdXNlZCBmb3IgdGhlIG1vZHVsdXMgb3BlcmF0aW9uLlxyXG4gICAgLy8gQWx0aG91Z2ggdGhlIG90aGVyIHJvdW5kaW5nIG1vZGVzIGNhbiBhbHNvIGJlIHVzZWQsIHRoZXkgbWF5IG5vdCBnaXZlIHVzZWZ1bCByZXN1bHRzLlxyXG4gICAgTU9EVUxPX01PREUgPSAxLCAgICAgICAgICAgICAgICAgICAgICAgICAvLyAwIHRvIDlcclxuXHJcbiAgICAvLyBUaGUgbWF4aW11bSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzIG9mIHRoZSByZXN1bHQgb2YgdGhlIGV4cG9uZW50aWF0ZWRCeSBvcGVyYXRpb24uXHJcbiAgICAvLyBJZiBQT1dfUFJFQ0lTSU9OIGlzIDAsIHRoZXJlIHdpbGwgYmUgdW5saW1pdGVkIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgIFBPV19QUkVDSVNJT04gPSAwLCAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBNQVhcclxuXHJcbiAgICAvLyBUaGUgZm9ybWF0IHNwZWNpZmljYXRpb24gdXNlZCBieSB0aGUgQmlnTnVtYmVyLnByb3RvdHlwZS50b0Zvcm1hdCBtZXRob2QuXHJcbiAgICBGT1JNQVQgPSB7XHJcbiAgICAgIHByZWZpeDogJycsXHJcbiAgICAgIGdyb3VwU2l6ZTogMyxcclxuICAgICAgc2Vjb25kYXJ5R3JvdXBTaXplOiAwLFxyXG4gICAgICBncm91cFNlcGFyYXRvcjogJywnLFxyXG4gICAgICBkZWNpbWFsU2VwYXJhdG9yOiAnLicsXHJcbiAgICAgIGZyYWN0aW9uR3JvdXBTaXplOiAwLFxyXG4gICAgICBmcmFjdGlvbkdyb3VwU2VwYXJhdG9yOiAnXFx4QTAnLCAgICAgICAgLy8gbm9uLWJyZWFraW5nIHNwYWNlXHJcbiAgICAgIHN1ZmZpeDogJydcclxuICAgIH0sXHJcblxyXG4gICAgLy8gVGhlIGFscGhhYmV0IHVzZWQgZm9yIGJhc2UgY29udmVyc2lvbi4gSXQgbXVzdCBiZSBhdCBsZWFzdCAyIGNoYXJhY3RlcnMgbG9uZywgd2l0aCBubyAnKycsXHJcbiAgICAvLyAnLScsICcuJywgd2hpdGVzcGFjZSwgb3IgcmVwZWF0ZWQgY2hhcmFjdGVyLlxyXG4gICAgLy8gJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJF8nXHJcbiAgICBBTFBIQUJFVCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLFxyXG4gICAgYWxwaGFiZXRIYXNOb3JtYWxEZWNpbWFsRGlnaXRzID0gdHJ1ZTtcclxuXHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5cclxuICAvLyBDT05TVFJVQ1RPUlxyXG5cclxuXHJcbiAgLypcclxuICAgKiBUaGUgQmlnTnVtYmVyIGNvbnN0cnVjdG9yIGFuZCBleHBvcnRlZCBmdW5jdGlvbi5cclxuICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIEJpZ051bWJlciBvYmplY3QuXHJcbiAgICpcclxuICAgKiB2IHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn0gQSBudW1lcmljIHZhbHVlLlxyXG4gICAqIFtiXSB7bnVtYmVyfSBUaGUgYmFzZSBvZiB2LiBJbnRlZ2VyLCAyIHRvIEFMUEhBQkVULmxlbmd0aCBpbmNsdXNpdmUuXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gQmlnTnVtYmVyKHYsIGIpIHtcclxuICAgIHZhciBhbHBoYWJldCwgYywgY2FzZUNoYW5nZWQsIGUsIGksIGlzTnVtLCBsZW4sIHN0cixcclxuICAgICAgeCA9IHRoaXM7XHJcblxyXG4gICAgLy8gRW5hYmxlIGNvbnN0cnVjdG9yIGNhbGwgd2l0aG91dCBgbmV3YC5cclxuICAgIGlmICghKHggaW5zdGFuY2VvZiBCaWdOdW1iZXIpKSByZXR1cm4gbmV3IEJpZ051bWJlcih2LCBiKTtcclxuXHJcbiAgICBpZiAoYiA9PSBudWxsKSB7XHJcblxyXG4gICAgICBpZiAodiAmJiB2Ll9pc0JpZ051bWJlciA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHgucyA9IHYucztcclxuXHJcbiAgICAgICAgaWYgKCF2LmMgfHwgdi5lID4gTUFYX0VYUCkge1xyXG4gICAgICAgICAgeC5jID0geC5lID0gbnVsbDtcclxuICAgICAgICB9IGVsc2UgaWYgKHYuZSA8IE1JTl9FWFApIHtcclxuICAgICAgICAgIHguYyA9IFt4LmUgPSAwXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeC5lID0gdi5lO1xyXG4gICAgICAgICAgeC5jID0gdi5jLnNsaWNlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICgoaXNOdW0gPSB0eXBlb2YgdiA9PSAnbnVtYmVyJykgJiYgdiAqIDAgPT0gMCkge1xyXG5cclxuICAgICAgICAvLyBVc2UgYDEgLyBuYCB0byBoYW5kbGUgbWludXMgemVybyBhbHNvLlxyXG4gICAgICAgIHgucyA9IDEgLyB2IDwgMCA/ICh2ID0gLXYsIC0xKSA6IDE7XHJcblxyXG4gICAgICAgIC8vIEZhc3QgcGF0aCBmb3IgaW50ZWdlcnMsIHdoZXJlIG4gPCAyMTQ3NDgzNjQ4ICgyKiozMSkuXHJcbiAgICAgICAgaWYgKHYgPT09IH5+dikge1xyXG4gICAgICAgICAgZm9yIChlID0gMCwgaSA9IHY7IGkgPj0gMTA7IGkgLz0gMTAsIGUrKyk7XHJcblxyXG4gICAgICAgICAgaWYgKGUgPiBNQVhfRVhQKSB7XHJcbiAgICAgICAgICAgIHguYyA9IHguZSA9IG51bGw7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB4LmUgPSBlO1xyXG4gICAgICAgICAgICB4LmMgPSBbdl07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RyID0gU3RyaW5nKHYpO1xyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICBpZiAoIWlzTnVtZXJpYy50ZXN0KHN0ciA9IFN0cmluZyh2KSkpIHJldHVybiBwYXJzZU51bWVyaWMoeCwgc3RyLCBpc051bSk7XHJcblxyXG4gICAgICAgIHgucyA9IHN0ci5jaGFyQ29kZUF0KDApID09IDQ1ID8gKHN0ciA9IHN0ci5zbGljZSgxKSwgLTEpIDogMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRGVjaW1hbCBwb2ludD9cclxuICAgICAgaWYgKChlID0gc3RyLmluZGV4T2YoJy4nKSkgPiAtMSkgc3RyID0gc3RyLnJlcGxhY2UoJy4nLCAnJyk7XHJcblxyXG4gICAgICAvLyBFeHBvbmVudGlhbCBmb3JtP1xyXG4gICAgICBpZiAoKGkgPSBzdHIuc2VhcmNoKC9lL2kpKSA+IDApIHtcclxuXHJcbiAgICAgICAgLy8gRGV0ZXJtaW5lIGV4cG9uZW50LlxyXG4gICAgICAgIGlmIChlIDwgMCkgZSA9IGk7XHJcbiAgICAgICAgZSArPSArc3RyLnNsaWNlKGkgKyAxKTtcclxuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgICB9IGVsc2UgaWYgKGUgPCAwKSB7XHJcblxyXG4gICAgICAgIC8vIEludGVnZXIuXHJcbiAgICAgICAgZSA9IHN0ci5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIEJhc2Uge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2J9J1xyXG4gICAgICBpbnRDaGVjayhiLCAyLCBBTFBIQUJFVC5sZW5ndGgsICdCYXNlJyk7XHJcblxyXG4gICAgICAvLyBBbGxvdyBleHBvbmVudGlhbCBub3RhdGlvbiB0byBiZSB1c2VkIHdpdGggYmFzZSAxMCBhcmd1bWVudCwgd2hpbGVcclxuICAgICAgLy8gYWxzbyByb3VuZGluZyB0byBERUNJTUFMX1BMQUNFUyBhcyB3aXRoIG90aGVyIGJhc2VzLlxyXG4gICAgICBpZiAoYiA9PSAxMCAmJiBhbHBoYWJldEhhc05vcm1hbERlY2ltYWxEaWdpdHMpIHtcclxuICAgICAgICB4ID0gbmV3IEJpZ051bWJlcih2KTtcclxuICAgICAgICByZXR1cm4gcm91bmQoeCwgREVDSU1BTF9QTEFDRVMgKyB4LmUgKyAxLCBST1VORElOR19NT0RFKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3RyID0gU3RyaW5nKHYpO1xyXG5cclxuICAgICAgaWYgKGlzTnVtID0gdHlwZW9mIHYgPT0gJ251bWJlcicpIHtcclxuXHJcbiAgICAgICAgLy8gQXZvaWQgcG90ZW50aWFsIGludGVycHJldGF0aW9uIG9mIEluZmluaXR5IGFuZCBOYU4gYXMgYmFzZSA0NCsgdmFsdWVzLlxyXG4gICAgICAgIGlmICh2ICogMCAhPSAwKSByZXR1cm4gcGFyc2VOdW1lcmljKHgsIHN0ciwgaXNOdW0sIGIpO1xyXG5cclxuICAgICAgICB4LnMgPSAxIC8gdiA8IDAgPyAoc3RyID0gc3RyLnNsaWNlKDEpLCAtMSkgOiAxO1xyXG5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gTnVtYmVyIHByaW1pdGl2ZSBoYXMgbW9yZSB0aGFuIDE1IHNpZ25pZmljYW50IGRpZ2l0czoge259J1xyXG4gICAgICAgIGlmIChCaWdOdW1iZXIuREVCVUcgJiYgc3RyLnJlcGxhY2UoL14wXFwuMCp8XFwuLywgJycpLmxlbmd0aCA+IDE1KSB7XHJcbiAgICAgICAgICB0aHJvdyBFcnJvclxyXG4gICAgICAgICAgICh0b29NYW55RGlnaXRzICsgdik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHgucyA9IHN0ci5jaGFyQ29kZUF0KDApID09PSA0NSA/IChzdHIgPSBzdHIuc2xpY2UoMSksIC0xKSA6IDE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFscGhhYmV0ID0gQUxQSEFCRVQuc2xpY2UoMCwgYik7XHJcbiAgICAgIGUgPSBpID0gMDtcclxuXHJcbiAgICAgIC8vIENoZWNrIHRoYXQgc3RyIGlzIGEgdmFsaWQgYmFzZSBiIG51bWJlci5cclxuICAgICAgLy8gRG9uJ3QgdXNlIFJlZ0V4cCwgc28gYWxwaGFiZXQgY2FuIGNvbnRhaW4gc3BlY2lhbCBjaGFyYWN0ZXJzLlxyXG4gICAgICBmb3IgKGxlbiA9IHN0ci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGlmIChhbHBoYWJldC5pbmRleE9mKGMgPSBzdHIuY2hhckF0KGkpKSA8IDApIHtcclxuICAgICAgICAgIGlmIChjID09ICcuJykge1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgJy4nIGlzIG5vdCB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCBpdCBoYXMgbm90IGJlIGZvdW5kIGJlZm9yZS5cclxuICAgICAgICAgICAgaWYgKGkgPiBlKSB7XHJcbiAgICAgICAgICAgICAgZSA9IGxlbjtcclxuICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmICghY2FzZUNoYW5nZWQpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIEFsbG93IGUuZy4gaGV4YWRlY2ltYWwgJ0ZGJyBhcyB3ZWxsIGFzICdmZicuXHJcbiAgICAgICAgICAgIGlmIChzdHIgPT0gc3RyLnRvVXBwZXJDYXNlKCkgJiYgKHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpKSB8fFxyXG4gICAgICAgICAgICAgICAgc3RyID09IHN0ci50b0xvd2VyQ2FzZSgpICYmIChzdHIgPSBzdHIudG9VcHBlckNhc2UoKSkpIHtcclxuICAgICAgICAgICAgICBjYXNlQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgaSA9IC0xO1xyXG4gICAgICAgICAgICAgIGUgPSAwO1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpYyh4LCBTdHJpbmcodiksIGlzTnVtLCBiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFByZXZlbnQgbGF0ZXIgY2hlY2sgZm9yIGxlbmd0aCBvbiBjb252ZXJ0ZWQgbnVtYmVyLlxyXG4gICAgICBpc051bSA9IGZhbHNlO1xyXG4gICAgICBzdHIgPSBjb252ZXJ0QmFzZShzdHIsIGIsIDEwLCB4LnMpO1xyXG5cclxuICAgICAgLy8gRGVjaW1hbCBwb2ludD9cclxuICAgICAgaWYgKChlID0gc3RyLmluZGV4T2YoJy4nKSkgPiAtMSkgc3RyID0gc3RyLnJlcGxhY2UoJy4nLCAnJyk7XHJcbiAgICAgIGVsc2UgZSA9IHN0ci5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGV0ZXJtaW5lIGxlYWRpbmcgemVyb3MuXHJcbiAgICBmb3IgKGkgPSAwOyBzdHIuY2hhckNvZGVBdChpKSA9PT0gNDg7IGkrKyk7XHJcblxyXG4gICAgLy8gRGV0ZXJtaW5lIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgZm9yIChsZW4gPSBzdHIubGVuZ3RoOyBzdHIuY2hhckNvZGVBdCgtLWxlbikgPT09IDQ4Oyk7XHJcblxyXG4gICAgaWYgKHN0ciA9IHN0ci5zbGljZShpLCArK2xlbikpIHtcclxuICAgICAgbGVuIC09IGk7XHJcblxyXG4gICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gTnVtYmVyIHByaW1pdGl2ZSBoYXMgbW9yZSB0aGFuIDE1IHNpZ25pZmljYW50IGRpZ2l0czoge259J1xyXG4gICAgICBpZiAoaXNOdW0gJiYgQmlnTnVtYmVyLkRFQlVHICYmXHJcbiAgICAgICAgbGVuID4gMTUgJiYgKHYgPiBNQVhfU0FGRV9JTlRFR0VSIHx8IHYgIT09IG1hdGhmbG9vcih2KSkpIHtcclxuICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgKHRvb01hbnlEaWdpdHMgKyAoeC5zICogdikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAgLy8gT3ZlcmZsb3c/XHJcbiAgICAgIGlmICgoZSA9IGUgLSBpIC0gMSkgPiBNQVhfRVhQKSB7XHJcblxyXG4gICAgICAgIC8vIEluZmluaXR5LlxyXG4gICAgICAgIHguYyA9IHguZSA9IG51bGw7XHJcblxyXG4gICAgICAvLyBVbmRlcmZsb3c/XHJcbiAgICAgIH0gZWxzZSBpZiAoZSA8IE1JTl9FWFApIHtcclxuXHJcbiAgICAgICAgLy8gWmVyby5cclxuICAgICAgICB4LmMgPSBbeC5lID0gMF07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeC5lID0gZTtcclxuICAgICAgICB4LmMgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gVHJhbnNmb3JtIGJhc2VcclxuXHJcbiAgICAgICAgLy8gZSBpcyB0aGUgYmFzZSAxMCBleHBvbmVudC5cclxuICAgICAgICAvLyBpIGlzIHdoZXJlIHRvIHNsaWNlIHN0ciB0byBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIGNvZWZmaWNpZW50IGFycmF5LlxyXG4gICAgICAgIGkgPSAoZSArIDEpICUgTE9HX0JBU0U7XHJcbiAgICAgICAgaWYgKGUgPCAwKSBpICs9IExPR19CQVNFOyAgLy8gaSA8IDFcclxuXHJcbiAgICAgICAgaWYgKGkgPCBsZW4pIHtcclxuICAgICAgICAgIGlmIChpKSB4LmMucHVzaCgrc3RyLnNsaWNlKDAsIGkpKTtcclxuXHJcbiAgICAgICAgICBmb3IgKGxlbiAtPSBMT0dfQkFTRTsgaSA8IGxlbjspIHtcclxuICAgICAgICAgICAgeC5jLnB1c2goK3N0ci5zbGljZShpLCBpICs9IExPR19CQVNFKSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaSA9IExPR19CQVNFIC0gKHN0ciA9IHN0ci5zbGljZShpKSkubGVuZ3RoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpIC09IGxlbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgIHguYy5wdXNoKCtzdHIpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gWmVyby5cclxuICAgICAgeC5jID0gW3guZSA9IDBdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIC8vIENPTlNUUlVDVE9SIFBST1BFUlRJRVNcclxuXHJcblxyXG4gIEJpZ051bWJlci5jbG9uZSA9IGNsb25lO1xyXG5cclxuICBCaWdOdW1iZXIuUk9VTkRfVVAgPSAwO1xyXG4gIEJpZ051bWJlci5ST1VORF9ET1dOID0gMTtcclxuICBCaWdOdW1iZXIuUk9VTkRfQ0VJTCA9IDI7XHJcbiAgQmlnTnVtYmVyLlJPVU5EX0ZMT09SID0gMztcclxuICBCaWdOdW1iZXIuUk9VTkRfSEFMRl9VUCA9IDQ7XHJcbiAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRE9XTiA9IDU7XHJcbiAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRVZFTiA9IDY7XHJcbiAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfQ0VJTCA9IDc7XHJcbiAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRkxPT1IgPSA4O1xyXG4gIEJpZ051bWJlci5FVUNMSUQgPSA5O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBDb25maWd1cmUgaW5mcmVxdWVudGx5LWNoYW5naW5nIGxpYnJhcnktd2lkZSBzZXR0aW5ncy5cclxuICAgKlxyXG4gICAqIEFjY2VwdCBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIG9wdGlvbmFsIHByb3BlcnRpZXMgKGlmIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGlzXHJcbiAgICogYSBudW1iZXIsIGl0IG11c3QgYmUgYW4gaW50ZWdlciB3aXRoaW4gdGhlIGluY2x1c2l2ZSByYW5nZSBzdGF0ZWQpOlxyXG4gICAqXHJcbiAgICogICBERUNJTUFMX1BMQUNFUyAgIHtudW1iZXJ9ICAgICAgICAgICAwIHRvIE1BWFxyXG4gICAqICAgUk9VTkRJTkdfTU9ERSAgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byA4XHJcbiAgICogICBFWFBPTkVOVElBTF9BVCAgIHtudW1iZXJ8bnVtYmVyW119ICAtTUFYIHRvIE1BWCAgb3IgIFstTUFYIHRvIDAsIDAgdG8gTUFYXVxyXG4gICAqICAgUkFOR0UgICAgICAgICAgICB7bnVtYmVyfG51bWJlcltdfSAgLU1BWCB0byBNQVggKG5vdCB6ZXJvKSAgb3IgIFstTUFYIHRvIC0xLCAxIHRvIE1BWF1cclxuICAgKiAgIENSWVBUTyAgICAgICAgICAge2Jvb2xlYW59ICAgICAgICAgIHRydWUgb3IgZmFsc2VcclxuICAgKiAgIE1PRFVMT19NT0RFICAgICAge251bWJlcn0gICAgICAgICAgIDAgdG8gOVxyXG4gICAqICAgUE9XX1BSRUNJU0lPTiAgICAgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byBNQVhcclxuICAgKiAgIEFMUEhBQkVUICAgICAgICAge3N0cmluZ30gICAgICAgICAgIEEgc3RyaW5nIG9mIHR3byBvciBtb3JlIHVuaXF1ZSBjaGFyYWN0ZXJzIHdoaWNoIGRvZXNcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBjb250YWluICcuJy5cclxuICAgKiAgIEZPUk1BVCAgICAgICAgICAge29iamVjdH0gICAgICAgICAgIEFuIG9iamVjdCB3aXRoIHNvbWUgb2YgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxyXG4gICAqICAgICBwcmVmaXggICAgICAgICAgICAgICAgIHtzdHJpbmd9XHJcbiAgICogICAgIGdyb3VwU2l6ZSAgICAgICAgICAgICAge251bWJlcn1cclxuICAgKiAgICAgc2Vjb25kYXJ5R3JvdXBTaXplICAgICB7bnVtYmVyfVxyXG4gICAqICAgICBncm91cFNlcGFyYXRvciAgICAgICAgIHtzdHJpbmd9XHJcbiAgICogICAgIGRlY2ltYWxTZXBhcmF0b3IgICAgICAge3N0cmluZ31cclxuICAgKiAgICAgZnJhY3Rpb25Hcm91cFNpemUgICAgICB7bnVtYmVyfVxyXG4gICAqICAgICBmcmFjdGlvbkdyb3VwU2VwYXJhdG9yIHtzdHJpbmd9XHJcbiAgICogICAgIHN1ZmZpeCAgICAgICAgICAgICAgICAge3N0cmluZ31cclxuICAgKlxyXG4gICAqIChUaGUgdmFsdWVzIGFzc2lnbmVkIHRvIHRoZSBhYm92ZSBGT1JNQVQgb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdCBjaGVja2VkIGZvciB2YWxpZGl0eS4pXHJcbiAgICpcclxuICAgKiBFLmcuXHJcbiAgICogQmlnTnVtYmVyLmNvbmZpZyh7IERFQ0lNQUxfUExBQ0VTIDogMjAsIFJPVU5ESU5HX01PREUgOiA0IH0pXHJcbiAgICpcclxuICAgKiBJZ25vcmUgcHJvcGVydGllcy9wYXJhbWV0ZXJzIHNldCB0byBudWxsIG9yIHVuZGVmaW5lZCwgZXhjZXB0IGZvciBBTFBIQUJFVC5cclxuICAgKlxyXG4gICAqIFJldHVybiBhbiBvYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllcyBjdXJyZW50IHZhbHVlcy5cclxuICAgKi9cclxuICBCaWdOdW1iZXIuY29uZmlnID0gQmlnTnVtYmVyLnNldCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHZhciBwLCB2O1xyXG5cclxuICAgIGlmIChvYmogIT0gbnVsbCkge1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcpIHtcclxuXHJcbiAgICAgICAgLy8gREVDSU1BTF9QTEFDRVMge251bWJlcn0gSW50ZWdlciwgMCB0byBNQVggaW5jbHVzaXZlLlxyXG4gICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBERUNJTUFMX1BMQUNFUyB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7dn0nXHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0RFQ0lNQUxfUExBQ0VTJykpIHtcclxuICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICBpbnRDaGVjayh2LCAwLCBNQVgsIHApO1xyXG4gICAgICAgICAgREVDSU1BTF9QTEFDRVMgPSB2O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUk9VTkRJTkdfTU9ERSB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBST1VORElOR19NT0RFIHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHt2fSdcclxuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnUk9VTkRJTkdfTU9ERScpKSB7XHJcbiAgICAgICAgICB2ID0gb2JqW3BdO1xyXG4gICAgICAgICAgaW50Q2hlY2sodiwgMCwgOCwgcCk7XHJcbiAgICAgICAgICBST1VORElOR19NT0RFID0gdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEVYUE9ORU5USUFMX0FUIHtudW1iZXJ8bnVtYmVyW119XHJcbiAgICAgICAgLy8gSW50ZWdlciwgLU1BWCB0byBNQVggaW5jbHVzaXZlIG9yXHJcbiAgICAgICAgLy8gW2ludGVnZXIgLU1BWCB0byAwIGluY2x1c2l2ZSwgMCB0byBNQVggaW5jbHVzaXZlXS5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gRVhQT05FTlRJQUxfQVQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge3Z9J1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCA9ICdFWFBPTkVOVElBTF9BVCcpKSB7XHJcbiAgICAgICAgICB2ID0gb2JqW3BdO1xyXG4gICAgICAgICAgaWYgKHYgJiYgdi5wb3ApIHtcclxuICAgICAgICAgICAgaW50Q2hlY2sodlswXSwgLU1BWCwgMCwgcCk7XHJcbiAgICAgICAgICAgIGludENoZWNrKHZbMV0sIDAsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgIFRPX0VYUF9ORUcgPSB2WzBdO1xyXG4gICAgICAgICAgICBUT19FWFBfUE9TID0gdlsxXTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGludENoZWNrKHYsIC1NQVgsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgIFRPX0VYUF9ORUcgPSAtKFRPX0VYUF9QT1MgPSB2IDwgMCA/IC12IDogdik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSQU5HRSB7bnVtYmVyfG51bWJlcltdfSBOb24temVybyBpbnRlZ2VyLCAtTUFYIHRvIE1BWCBpbmNsdXNpdmUgb3JcclxuICAgICAgICAvLyBbaW50ZWdlciAtTUFYIHRvIC0xIGluY2x1c2l2ZSwgaW50ZWdlciAxIHRvIE1BWCBpbmNsdXNpdmVdLlxyXG4gICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBSQU5HRSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V8Y2Fubm90IGJlIHplcm99OiB7dn0nXHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ1JBTkdFJykpIHtcclxuICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICBpZiAodiAmJiB2LnBvcCkge1xyXG4gICAgICAgICAgICBpbnRDaGVjayh2WzBdLCAtTUFYLCAtMSwgcCk7XHJcbiAgICAgICAgICAgIGludENoZWNrKHZbMV0sIDEsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgIE1JTl9FWFAgPSB2WzBdO1xyXG4gICAgICAgICAgICBNQVhfRVhQID0gdlsxXTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGludENoZWNrKHYsIC1NQVgsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgIGlmICh2KSB7XHJcbiAgICAgICAgICAgICAgTUlOX0VYUCA9IC0oTUFYX0VYUCA9IHYgPCAwID8gLXYgOiB2KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aHJvdyBFcnJvclxyXG4gICAgICAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyBwICsgJyBjYW5ub3QgYmUgemVybzogJyArIHYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDUllQVE8ge2Jvb2xlYW59IHRydWUgb3IgZmFsc2UuXHJcbiAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIENSWVBUTyBub3QgdHJ1ZSBvciBmYWxzZToge3Z9J1xyXG4gICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBjcnlwdG8gdW5hdmFpbGFibGUnXHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0NSWVBUTycpKSB7XHJcbiAgICAgICAgICB2ID0gb2JqW3BdO1xyXG4gICAgICAgICAgaWYgKHYgPT09ICEhdikge1xyXG4gICAgICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY3J5cHRvICE9ICd1bmRlZmluZWQnICYmIGNyeXB0byAmJlxyXG4gICAgICAgICAgICAgICAoY3J5cHRvLmdldFJhbmRvbVZhbHVlcyB8fCBjcnlwdG8ucmFuZG9tQnl0ZXMpKSB7XHJcbiAgICAgICAgICAgICAgICBDUllQVE8gPSB2O1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBDUllQVE8gPSAhdjtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ2NyeXB0byB1bmF2YWlsYWJsZScpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBDUllQVE8gPSB2O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvclxyXG4gICAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgcCArICcgbm90IHRydWUgb3IgZmFsc2U6ICcgKyB2KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE1PRFVMT19NT0RFIHtudW1iZXJ9IEludGVnZXIsIDAgdG8gOSBpbmNsdXNpdmUuXHJcbiAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE1PRFVMT19NT0RFIHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHt2fSdcclxuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnTU9EVUxPX01PREUnKSkge1xyXG4gICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgIGludENoZWNrKHYsIDAsIDksIHApO1xyXG4gICAgICAgICAgTU9EVUxPX01PREUgPSB2O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUE9XX1BSRUNJU0lPTiB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIFBPV19QUkVDSVNJT04ge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge3Z9J1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCA9ICdQT1dfUFJFQ0lTSU9OJykpIHtcclxuICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICBpbnRDaGVjayh2LCAwLCBNQVgsIHApO1xyXG4gICAgICAgICAgUE9XX1BSRUNJU0lPTiA9IHY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGT1JNQVQge29iamVjdH1cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gRk9STUFUIG5vdCBhbiBvYmplY3Q6IHt2fSdcclxuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnRk9STUFUJykpIHtcclxuICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICBpZiAodHlwZW9mIHYgPT0gJ29iamVjdCcpIEZPUk1BVCA9IHY7XHJcbiAgICAgICAgICBlbHNlIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgcCArICcgbm90IGFuIG9iamVjdDogJyArIHYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQUxQSEFCRVQge3N0cmluZ31cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQUxQSEFCRVQgaW52YWxpZDoge3Z9J1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCA9ICdBTFBIQUJFVCcpKSB7XHJcbiAgICAgICAgICB2ID0gb2JqW3BdO1xyXG5cclxuICAgICAgICAgIC8vIERpc2FsbG93IGlmIGxlc3MgdGhhbiB0d28gY2hhcmFjdGVycyxcclxuICAgICAgICAgIC8vIG9yIGlmIGl0IGNvbnRhaW5zICcrJywgJy0nLCAnLicsIHdoaXRlc3BhY2UsIG9yIGEgcmVwZWF0ZWQgY2hhcmFjdGVyLlxyXG4gICAgICAgICAgaWYgKHR5cGVvZiB2ID09ICdzdHJpbmcnICYmICEvXi4/JHxbK1xcLS5cXHNdfCguKS4qXFwxLy50ZXN0KHYpKSB7XHJcbiAgICAgICAgICAgIGFscGhhYmV0SGFzTm9ybWFsRGVjaW1hbERpZ2l0cyA9IHYuc2xpY2UoMCwgMTApID09ICcwMTIzNDU2Nzg5JztcclxuICAgICAgICAgICAgQUxQSEFCRVQgPSB2O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArIHAgKyAnIGludmFsaWQ6ICcgKyB2KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gT2JqZWN0IGV4cGVjdGVkOiB7dn0nXHJcbiAgICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ09iamVjdCBleHBlY3RlZDogJyArIG9iaik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBERUNJTUFMX1BMQUNFUzogREVDSU1BTF9QTEFDRVMsXHJcbiAgICAgIFJPVU5ESU5HX01PREU6IFJPVU5ESU5HX01PREUsXHJcbiAgICAgIEVYUE9ORU5USUFMX0FUOiBbVE9fRVhQX05FRywgVE9fRVhQX1BPU10sXHJcbiAgICAgIFJBTkdFOiBbTUlOX0VYUCwgTUFYX0VYUF0sXHJcbiAgICAgIENSWVBUTzogQ1JZUFRPLFxyXG4gICAgICBNT0RVTE9fTU9ERTogTU9EVUxPX01PREUsXHJcbiAgICAgIFBPV19QUkVDSVNJT046IFBPV19QUkVDSVNJT04sXHJcbiAgICAgIEZPUk1BVDogRk9STUFULFxyXG4gICAgICBBTFBIQUJFVDogQUxQSEFCRVRcclxuICAgIH07XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdiBpcyBhIEJpZ051bWJlciBpbnN0YW5jZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKlxyXG4gICAqIElmIEJpZ051bWJlci5ERUJVRyBpcyB0cnVlLCB0aHJvdyBpZiBhIEJpZ051bWJlciBpbnN0YW5jZSBpcyBub3Qgd2VsbC1mb3JtZWQuXHJcbiAgICpcclxuICAgKiB2IHthbnl9XHJcbiAgICpcclxuICAgKiAnW0JpZ051bWJlciBFcnJvcl0gSW52YWxpZCBCaWdOdW1iZXI6IHt2fSdcclxuICAgKi9cclxuICBCaWdOdW1iZXIuaXNCaWdOdW1iZXIgPSBmdW5jdGlvbiAodikge1xyXG4gICAgaWYgKCF2IHx8IHYuX2lzQmlnTnVtYmVyICE9PSB0cnVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoIUJpZ051bWJlci5ERUJVRykgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgdmFyIGksIG4sXHJcbiAgICAgIGMgPSB2LmMsXHJcbiAgICAgIGUgPSB2LmUsXHJcbiAgICAgIHMgPSB2LnM7XHJcblxyXG4gICAgb3V0OiBpZiAoe30udG9TdHJpbmcuY2FsbChjKSA9PSAnW29iamVjdCBBcnJheV0nKSB7XHJcblxyXG4gICAgICBpZiAoKHMgPT09IDEgfHwgcyA9PT0gLTEpICYmIGUgPj0gLU1BWCAmJiBlIDw9IE1BWCAmJiBlID09PSBtYXRoZmxvb3IoZSkpIHtcclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGVsZW1lbnQgaXMgemVybywgdGhlIEJpZ051bWJlciB2YWx1ZSBtdXN0IGJlIHplcm8uXHJcbiAgICAgICAgaWYgKGNbMF0gPT09IDApIHtcclxuICAgICAgICAgIGlmIChlID09PSAwICYmIGMubGVuZ3RoID09PSAxKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrIG91dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSBudW1iZXIgb2YgZGlnaXRzIHRoYXQgY1swXSBzaG91bGQgaGF2ZSwgYmFzZWQgb24gdGhlIGV4cG9uZW50LlxyXG4gICAgICAgIGkgPSAoZSArIDEpICUgTE9HX0JBU0U7XHJcbiAgICAgICAgaWYgKGkgPCAxKSBpICs9IExPR19CQVNFO1xyXG5cclxuICAgICAgICAvLyBDYWxjdWxhdGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiBjWzBdLlxyXG4gICAgICAgIC8vaWYgKE1hdGguY2VpbChNYXRoLmxvZyhjWzBdICsgMSkgLyBNYXRoLkxOMTApID09IGkpIHtcclxuICAgICAgICBpZiAoU3RyaW5nKGNbMF0pLmxlbmd0aCA9PSBpKSB7XHJcblxyXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbiA9IGNbaV07XHJcbiAgICAgICAgICAgIGlmIChuIDwgMCB8fCBuID49IEJBU0UgfHwgbiAhPT0gbWF0aGZsb29yKG4pKSBicmVhayBvdXQ7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gTGFzdCBlbGVtZW50IGNhbm5vdCBiZSB6ZXJvLCB1bmxlc3MgaXQgaXMgdGhlIG9ubHkgZWxlbWVudC5cclxuICAgICAgICAgIGlmIChuICE9PSAwKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAvLyBJbmZpbml0eS9OYU5cclxuICAgIH0gZWxzZSBpZiAoYyA9PT0gbnVsbCAmJiBlID09PSBudWxsICYmIChzID09PSBudWxsIHx8IHMgPT09IDEgfHwgcyA9PT0gLTEpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRocm93IEVycm9yXHJcbiAgICAgIChiaWdudW1iZXJFcnJvciArICdJbnZhbGlkIEJpZ051bWJlcjogJyArIHYpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIG1heGltdW0gb2YgdGhlIGFyZ3VtZW50cy5cclxuICAgKlxyXG4gICAqIGFyZ3VtZW50cyB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9XHJcbiAgICovXHJcbiAgQmlnTnVtYmVyLm1heGltdW0gPSBCaWdOdW1iZXIubWF4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIG1heE9yTWluKGFyZ3VtZW50cywgUC5sdCk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgbWluaW11bSBvZiB0aGUgYXJndW1lbnRzLlxyXG4gICAqXHJcbiAgICogYXJndW1lbnRzIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn1cclxuICAgKi9cclxuICBCaWdOdW1iZXIubWluaW11bSA9IEJpZ051bWJlci5taW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gbWF4T3JNaW4oYXJndW1lbnRzLCBQLmd0KTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdpdGggYSByYW5kb20gdmFsdWUgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIDAgYW5kIGxlc3MgdGhhbiAxLFxyXG4gICAqIGFuZCB3aXRoIGRwLCBvciBERUNJTUFMX1BMQUNFUyBpZiBkcCBpcyBvbWl0dGVkLCBkZWNpbWFsIHBsYWNlcyAob3IgbGVzcyBpZiB0cmFpbGluZ1xyXG4gICAqIHplcm9zIGFyZSBwcm9kdWNlZCkuXHJcbiAgICpcclxuICAgKiBbZHBdIHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzLiBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICpcclxuICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfSdcclxuICAgKiAnW0JpZ051bWJlciBFcnJvcl0gY3J5cHRvIHVuYXZhaWxhYmxlJ1xyXG4gICAqL1xyXG4gIEJpZ051bWJlci5yYW5kb20gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHBvdzJfNTMgPSAweDIwMDAwMDAwMDAwMDAwO1xyXG5cclxuICAgIC8vIFJldHVybiBhIDUzIGJpdCBpbnRlZ2VyIG4sIHdoZXJlIDAgPD0gbiA8IDkwMDcxOTkyNTQ3NDA5OTIuXHJcbiAgICAvLyBDaGVjayBpZiBNYXRoLnJhbmRvbSgpIHByb2R1Y2VzIG1vcmUgdGhhbiAzMiBiaXRzIG9mIHJhbmRvbW5lc3MuXHJcbiAgICAvLyBJZiBpdCBkb2VzLCBhc3N1bWUgYXQgbGVhc3QgNTMgYml0cyBhcmUgcHJvZHVjZWQsIG90aGVyd2lzZSBhc3N1bWUgYXQgbGVhc3QgMzAgYml0cy5cclxuICAgIC8vIDB4NDAwMDAwMDAgaXMgMl4zMCwgMHg4MDAwMDAgaXMgMl4yMywgMHgxZmZmZmYgaXMgMl4yMSAtIDEuXHJcbiAgICB2YXIgcmFuZG9tNTNiaXRJbnQgPSAoTWF0aC5yYW5kb20oKSAqIHBvdzJfNTMpICYgMHgxZmZmZmZcclxuICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hdGhmbG9vcihNYXRoLnJhbmRvbSgpICogcG93Ml81Myk7IH1cclxuICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICgoTWF0aC5yYW5kb20oKSAqIDB4NDAwMDAwMDAgfCAwKSAqIDB4ODAwMDAwKSArXHJcbiAgICAgICAoTWF0aC5yYW5kb20oKSAqIDB4ODAwMDAwIHwgMCk7IH07XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkcCkge1xyXG4gICAgICB2YXIgYSwgYiwgZSwgaywgdixcclxuICAgICAgICBpID0gMCxcclxuICAgICAgICBjID0gW10sXHJcbiAgICAgICAgcmFuZCA9IG5ldyBCaWdOdW1iZXIoT05FKTtcclxuXHJcbiAgICAgIGlmIChkcCA9PSBudWxsKSBkcCA9IERFQ0lNQUxfUExBQ0VTO1xyXG4gICAgICBlbHNlIGludENoZWNrKGRwLCAwLCBNQVgpO1xyXG5cclxuICAgICAgayA9IG1hdGhjZWlsKGRwIC8gTE9HX0JBU0UpO1xyXG5cclxuICAgICAgaWYgKENSWVBUTykge1xyXG5cclxuICAgICAgICAvLyBCcm93c2VycyBzdXBwb3J0aW5nIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuXHJcbiAgICAgICAgaWYgKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcclxuXHJcbiAgICAgICAgICBhID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoayAqPSAyKSk7XHJcblxyXG4gICAgICAgICAgZm9yICg7IGkgPCBrOykge1xyXG5cclxuICAgICAgICAgICAgLy8gNTMgYml0czpcclxuICAgICAgICAgICAgLy8gKChNYXRoLnBvdygyLCAzMikgLSAxKSAqIE1hdGgucG93KDIsIDIxKSkudG9TdHJpbmcoMilcclxuICAgICAgICAgICAgLy8gMTExMTEgMTExMTExMTEgMTExMTExMTEgMTExMTExMTEgMTExMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDBcclxuICAgICAgICAgICAgLy8gKChNYXRoLnBvdygyLCAzMikgLSAxKSA+Pj4gMTEpLnRvU3RyaW5nKDIpXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExMTExIDExMTExMTExIDExMTExMTExXHJcbiAgICAgICAgICAgIC8vIDB4MjAwMDAgaXMgMl4yMS5cclxuICAgICAgICAgICAgdiA9IGFbaV0gKiAweDIwMDAwICsgKGFbaSArIDFdID4+PiAxMSk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZWplY3Rpb24gc2FtcGxpbmc6XHJcbiAgICAgICAgICAgIC8vIDAgPD0gdiA8IDkwMDcxOTkyNTQ3NDA5OTJcclxuICAgICAgICAgICAgLy8gUHJvYmFiaWxpdHkgdGhhdCB2ID49IDllMTUsIGlzXHJcbiAgICAgICAgICAgIC8vIDcxOTkyNTQ3NDA5OTIgLyA5MDA3MTk5MjU0NzQwOTkyIH49IDAuMDAwOCwgaS5lLiAxIGluIDEyNTFcclxuICAgICAgICAgICAgaWYgKHYgPj0gOWUxNSkge1xyXG4gICAgICAgICAgICAgIGIgPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgyKSk7XHJcbiAgICAgICAgICAgICAgYVtpXSA9IGJbMF07XHJcbiAgICAgICAgICAgICAgYVtpICsgMV0gPSBiWzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAvLyAwIDw9IHYgPD0gODk5OTk5OTk5OTk5OTk5OVxyXG4gICAgICAgICAgICAgIC8vIDAgPD0gKHYgJSAxZTE0KSA8PSA5OTk5OTk5OTk5OTk5OVxyXG4gICAgICAgICAgICAgIGMucHVzaCh2ICUgMWUxNCk7XHJcbiAgICAgICAgICAgICAgaSArPSAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpID0gayAvIDI7XHJcblxyXG4gICAgICAgIC8vIE5vZGUuanMgc3VwcG9ydGluZyBjcnlwdG8ucmFuZG9tQnl0ZXMuXHJcbiAgICAgICAgfSBlbHNlIGlmIChjcnlwdG8ucmFuZG9tQnl0ZXMpIHtcclxuXHJcbiAgICAgICAgICAvLyBidWZmZXJcclxuICAgICAgICAgIGEgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoayAqPSA3KTtcclxuXHJcbiAgICAgICAgICBmb3IgKDsgaSA8IGs7KSB7XHJcblxyXG4gICAgICAgICAgICAvLyAweDEwMDAwMDAwMDAwMDAgaXMgMl40OCwgMHgxMDAwMDAwMDAwMCBpcyAyXjQwXHJcbiAgICAgICAgICAgIC8vIDB4MTAwMDAwMDAwIGlzIDJeMzIsIDB4MTAwMDAwMCBpcyAyXjI0XHJcbiAgICAgICAgICAgIC8vIDExMTExIDExMTExMTExIDExMTExMTExIDExMTExMTExIDExMTExMTExIDExMTExMTExIDExMTExMTExXHJcbiAgICAgICAgICAgIC8vIDAgPD0gdiA8IDkwMDcxOTkyNTQ3NDA5OTJcclxuICAgICAgICAgICAgdiA9ICgoYVtpXSAmIDMxKSAqIDB4MTAwMDAwMDAwMDAwMCkgKyAoYVtpICsgMV0gKiAweDEwMDAwMDAwMDAwKSArXHJcbiAgICAgICAgICAgICAgIChhW2kgKyAyXSAqIDB4MTAwMDAwMDAwKSArIChhW2kgKyAzXSAqIDB4MTAwMDAwMCkgK1xyXG4gICAgICAgICAgICAgICAoYVtpICsgNF0gPDwgMTYpICsgKGFbaSArIDVdIDw8IDgpICsgYVtpICsgNl07XHJcblxyXG4gICAgICAgICAgICBpZiAodiA+PSA5ZTE1KSB7XHJcbiAgICAgICAgICAgICAgY3J5cHRvLnJhbmRvbUJ5dGVzKDcpLmNvcHkoYSwgaSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIDAgPD0gKHYgJSAxZTE0KSA8PSA5OTk5OTk5OTk5OTk5OVxyXG4gICAgICAgICAgICAgIGMucHVzaCh2ICUgMWUxNCk7XHJcbiAgICAgICAgICAgICAgaSArPSA3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpID0gayAvIDc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIENSWVBUTyA9IGZhbHNlO1xyXG4gICAgICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyAnY3J5cHRvIHVuYXZhaWxhYmxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVc2UgTWF0aC5yYW5kb20uXHJcbiAgICAgIGlmICghQ1JZUFRPKSB7XHJcblxyXG4gICAgICAgIGZvciAoOyBpIDwgazspIHtcclxuICAgICAgICAgIHYgPSByYW5kb201M2JpdEludCgpO1xyXG4gICAgICAgICAgaWYgKHYgPCA5ZTE1KSBjW2krK10gPSB2ICUgMWUxNDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGsgPSBjWy0taV07XHJcbiAgICAgIGRwICU9IExPR19CQVNFO1xyXG5cclxuICAgICAgLy8gQ29udmVydCB0cmFpbGluZyBkaWdpdHMgdG8gemVyb3MgYWNjb3JkaW5nIHRvIGRwLlxyXG4gICAgICBpZiAoayAmJiBkcCkge1xyXG4gICAgICAgIHYgPSBQT1dTX1RFTltMT0dfQkFTRSAtIGRwXTtcclxuICAgICAgICBjW2ldID0gbWF0aGZsb29yKGsgLyB2KSAqIHY7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBlbGVtZW50cyB3aGljaCBhcmUgemVyby5cclxuICAgICAgZm9yICg7IGNbaV0gPT09IDA7IGMucG9wKCksIGktLSk7XHJcblxyXG4gICAgICAvLyBaZXJvP1xyXG4gICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICBjID0gW2UgPSAwXTtcclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgZWxlbWVudHMgd2hpY2ggYXJlIHplcm8gYW5kIGFkanVzdCBleHBvbmVudCBhY2NvcmRpbmdseS5cclxuICAgICAgICBmb3IgKGUgPSAtMSA7IGNbMF0gPT09IDA7IGMuc3BsaWNlKDAsIDEpLCBlIC09IExPR19CQVNFKTtcclxuXHJcbiAgICAgICAgLy8gQ291bnQgdGhlIGRpZ2l0cyBvZiB0aGUgZmlyc3QgZWxlbWVudCBvZiBjIHRvIGRldGVybWluZSBsZWFkaW5nIHplcm9zLCBhbmQuLi5cclxuICAgICAgICBmb3IgKGkgPSAxLCB2ID0gY1swXTsgdiA+PSAxMDsgdiAvPSAxMCwgaSsrKTtcclxuXHJcbiAgICAgICAgLy8gYWRqdXN0IHRoZSBleHBvbmVudCBhY2NvcmRpbmdseS5cclxuICAgICAgICBpZiAoaSA8IExPR19CQVNFKSBlIC09IExPR19CQVNFIC0gaTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmFuZC5lID0gZTtcclxuICAgICAgcmFuZC5jID0gYztcclxuICAgICAgcmV0dXJuIHJhbmQ7XHJcbiAgICB9O1xyXG4gIH0pKCk7XHJcblxyXG5cclxuICAgLypcclxuICAgKiBSZXR1cm4gYSBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHN1bSBvZiB0aGUgYXJndW1lbnRzLlxyXG4gICAqXHJcbiAgICogYXJndW1lbnRzIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn1cclxuICAgKi9cclxuICBCaWdOdW1iZXIuc3VtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGkgPSAxLFxyXG4gICAgICBhcmdzID0gYXJndW1lbnRzLFxyXG4gICAgICBzdW0gPSBuZXcgQmlnTnVtYmVyKGFyZ3NbMF0pO1xyXG4gICAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDspIHN1bSA9IHN1bS5wbHVzKGFyZ3NbaSsrXSk7XHJcbiAgICByZXR1cm4gc3VtO1xyXG4gIH07XHJcblxyXG5cclxuICAvLyBQUklWQVRFIEZVTkNUSU9OU1xyXG5cclxuXHJcbiAgLy8gQ2FsbGVkIGJ5IEJpZ051bWJlciBhbmQgQmlnTnVtYmVyLnByb3RvdHlwZS50b1N0cmluZy5cclxuICBjb252ZXJ0QmFzZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZGVjaW1hbCA9ICcwMTIzNDU2Nzg5JztcclxuXHJcbiAgICAvKlxyXG4gICAgICogQ29udmVydCBzdHJpbmcgb2YgYmFzZUluIHRvIGFuIGFycmF5IG9mIG51bWJlcnMgb2YgYmFzZU91dC5cclxuICAgICAqIEVnLiB0b0Jhc2VPdXQoJzI1NScsIDEwLCAxNikgcmV0dXJucyBbMTUsIDE1XS5cclxuICAgICAqIEVnLiB0b0Jhc2VPdXQoJ2ZmJywgMTYsIDEwKSByZXR1cm5zIFsyLCA1LCA1XS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdG9CYXNlT3V0KHN0ciwgYmFzZUluLCBiYXNlT3V0LCBhbHBoYWJldCkge1xyXG4gICAgICB2YXIgaixcclxuICAgICAgICBhcnIgPSBbMF0sXHJcbiAgICAgICAgYXJyTCxcclxuICAgICAgICBpID0gMCxcclxuICAgICAgICBsZW4gPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgICAgZm9yICg7IGkgPCBsZW47KSB7XHJcbiAgICAgICAgZm9yIChhcnJMID0gYXJyLmxlbmd0aDsgYXJyTC0tOyBhcnJbYXJyTF0gKj0gYmFzZUluKTtcclxuXHJcbiAgICAgICAgYXJyWzBdICs9IGFscGhhYmV0LmluZGV4T2Yoc3RyLmNoYXJBdChpKyspKTtcclxuXHJcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGFyci5sZW5ndGg7IGorKykge1xyXG5cclxuICAgICAgICAgIGlmIChhcnJbal0gPiBiYXNlT3V0IC0gMSkge1xyXG4gICAgICAgICAgICBpZiAoYXJyW2ogKyAxXSA9PSBudWxsKSBhcnJbaiArIDFdID0gMDtcclxuICAgICAgICAgICAgYXJyW2ogKyAxXSArPSBhcnJbal0gLyBiYXNlT3V0IHwgMDtcclxuICAgICAgICAgICAgYXJyW2pdICU9IGJhc2VPdXQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYXJyLnJldmVyc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb252ZXJ0IGEgbnVtZXJpYyBzdHJpbmcgb2YgYmFzZUluIHRvIGEgbnVtZXJpYyBzdHJpbmcgb2YgYmFzZU91dC5cclxuICAgIC8vIElmIHRoZSBjYWxsZXIgaXMgdG9TdHJpbmcsIHdlIGFyZSBjb252ZXJ0aW5nIGZyb20gYmFzZSAxMCB0byBiYXNlT3V0LlxyXG4gICAgLy8gSWYgdGhlIGNhbGxlciBpcyBCaWdOdW1iZXIsIHdlIGFyZSBjb252ZXJ0aW5nIGZyb20gYmFzZUluIHRvIGJhc2UgMTAuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0ciwgYmFzZUluLCBiYXNlT3V0LCBzaWduLCBjYWxsZXJJc1RvU3RyaW5nKSB7XHJcbiAgICAgIHZhciBhbHBoYWJldCwgZCwgZSwgaywgciwgeCwgeGMsIHksXHJcbiAgICAgICAgaSA9IHN0ci5pbmRleE9mKCcuJyksXHJcbiAgICAgICAgZHAgPSBERUNJTUFMX1BMQUNFUyxcclxuICAgICAgICBybSA9IFJPVU5ESU5HX01PREU7XHJcblxyXG4gICAgICAvLyBOb24taW50ZWdlci5cclxuICAgICAgaWYgKGkgPj0gMCkge1xyXG4gICAgICAgIGsgPSBQT1dfUFJFQ0lTSU9OO1xyXG5cclxuICAgICAgICAvLyBVbmxpbWl0ZWQgcHJlY2lzaW9uLlxyXG4gICAgICAgIFBPV19QUkVDSVNJT04gPSAwO1xyXG4gICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCcuJywgJycpO1xyXG4gICAgICAgIHkgPSBuZXcgQmlnTnVtYmVyKGJhc2VJbik7XHJcbiAgICAgICAgeCA9IHkucG93KHN0ci5sZW5ndGggLSBpKTtcclxuICAgICAgICBQT1dfUFJFQ0lTSU9OID0gaztcclxuXHJcbiAgICAgICAgLy8gQ29udmVydCBzdHIgYXMgaWYgYW4gaW50ZWdlciwgdGhlbiByZXN0b3JlIHRoZSBmcmFjdGlvbiBwYXJ0IGJ5IGRpdmlkaW5nIHRoZVxyXG4gICAgICAgIC8vIHJlc3VsdCBieSBpdHMgYmFzZSByYWlzZWQgdG8gYSBwb3dlci5cclxuXHJcbiAgICAgICAgeS5jID0gdG9CYXNlT3V0KHRvRml4ZWRQb2ludChjb2VmZlRvU3RyaW5nKHguYyksIHguZSwgJzAnKSxcclxuICAgICAgICAgMTAsIGJhc2VPdXQsIGRlY2ltYWwpO1xyXG4gICAgICAgIHkuZSA9IHkuYy5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENvbnZlcnQgdGhlIG51bWJlciBhcyBpbnRlZ2VyLlxyXG5cclxuICAgICAgeGMgPSB0b0Jhc2VPdXQoc3RyLCBiYXNlSW4sIGJhc2VPdXQsIGNhbGxlcklzVG9TdHJpbmdcclxuICAgICAgID8gKGFscGhhYmV0ID0gQUxQSEFCRVQsIGRlY2ltYWwpXHJcbiAgICAgICA6IChhbHBoYWJldCA9IGRlY2ltYWwsIEFMUEhBQkVUKSk7XHJcblxyXG4gICAgICAvLyB4YyBub3cgcmVwcmVzZW50cyBzdHIgYXMgYW4gaW50ZWdlciBhbmQgY29udmVydGVkIHRvIGJhc2VPdXQuIGUgaXMgdGhlIGV4cG9uZW50LlxyXG4gICAgICBlID0gayA9IHhjLmxlbmd0aDtcclxuXHJcbiAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgICAgZm9yICg7IHhjWy0ta10gPT0gMDsgeGMucG9wKCkpO1xyXG5cclxuICAgICAgLy8gWmVybz9cclxuICAgICAgaWYgKCF4Y1swXSkgcmV0dXJuIGFscGhhYmV0LmNoYXJBdCgwKTtcclxuXHJcbiAgICAgIC8vIERvZXMgc3RyIHJlcHJlc2VudCBhbiBpbnRlZ2VyPyBJZiBzbywgbm8gbmVlZCBmb3IgdGhlIGRpdmlzaW9uLlxyXG4gICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAtLWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeC5jID0geGM7XHJcbiAgICAgICAgeC5lID0gZTtcclxuXHJcbiAgICAgICAgLy8gVGhlIHNpZ24gaXMgbmVlZGVkIGZvciBjb3JyZWN0IHJvdW5kaW5nLlxyXG4gICAgICAgIHgucyA9IHNpZ247XHJcbiAgICAgICAgeCA9IGRpdih4LCB5LCBkcCwgcm0sIGJhc2VPdXQpO1xyXG4gICAgICAgIHhjID0geC5jO1xyXG4gICAgICAgIHIgPSB4LnI7XHJcbiAgICAgICAgZSA9IHguZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8geGMgbm93IHJlcHJlc2VudHMgc3RyIGNvbnZlcnRlZCB0byBiYXNlT3V0LlxyXG5cclxuICAgICAgLy8gVEhlIGluZGV4IG9mIHRoZSByb3VuZGluZyBkaWdpdC5cclxuICAgICAgZCA9IGUgKyBkcCArIDE7XHJcblxyXG4gICAgICAvLyBUaGUgcm91bmRpbmcgZGlnaXQ6IHRoZSBkaWdpdCB0byB0aGUgcmlnaHQgb2YgdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXAuXHJcbiAgICAgIGkgPSB4Y1tkXTtcclxuXHJcbiAgICAgIC8vIExvb2sgYXQgdGhlIHJvdW5kaW5nIGRpZ2l0cyBhbmQgbW9kZSB0byBkZXRlcm1pbmUgd2hldGhlciB0byByb3VuZCB1cC5cclxuXHJcbiAgICAgIGsgPSBiYXNlT3V0IC8gMjtcclxuICAgICAgciA9IHIgfHwgZCA8IDAgfHwgeGNbZCArIDFdICE9IG51bGw7XHJcblxyXG4gICAgICByID0gcm0gPCA0ID8gKGkgIT0gbnVsbCB8fCByKSAmJiAocm0gPT0gMCB8fCBybSA9PSAoeC5zIDwgMCA/IDMgOiAyKSlcclxuICAgICAgICAgICAgOiBpID4gayB8fCBpID09IGsgJiYocm0gPT0gNCB8fCByIHx8IHJtID09IDYgJiYgeGNbZCAtIDFdICYgMSB8fFxyXG4gICAgICAgICAgICAgcm0gPT0gKHgucyA8IDAgPyA4IDogNykpO1xyXG5cclxuICAgICAgLy8gSWYgdGhlIGluZGV4IG9mIHRoZSByb3VuZGluZyBkaWdpdCBpcyBub3QgZ3JlYXRlciB0aGFuIHplcm8sIG9yIHhjIHJlcHJlc2VudHNcclxuICAgICAgLy8gemVybywgdGhlbiB0aGUgcmVzdWx0IG9mIHRoZSBiYXNlIGNvbnZlcnNpb24gaXMgemVybyBvciwgaWYgcm91bmRpbmcgdXAsIGEgdmFsdWVcclxuICAgICAgLy8gc3VjaCBhcyAwLjAwMDAxLlxyXG4gICAgICBpZiAoZCA8IDEgfHwgIXhjWzBdKSB7XHJcblxyXG4gICAgICAgIC8vIDFeLWRwIG9yIDBcclxuICAgICAgICBzdHIgPSByID8gdG9GaXhlZFBvaW50KGFscGhhYmV0LmNoYXJBdCgxKSwgLWRwLCBhbHBoYWJldC5jaGFyQXQoMCkpIDogYWxwaGFiZXQuY2hhckF0KDApO1xyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyBUcnVuY2F0ZSB4YyB0byB0aGUgcmVxdWlyZWQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAgICAgIHhjLmxlbmd0aCA9IGQ7XHJcblxyXG4gICAgICAgIC8vIFJvdW5kIHVwP1xyXG4gICAgICAgIGlmIChyKSB7XHJcblxyXG4gICAgICAgICAgLy8gUm91bmRpbmcgdXAgbWF5IG1lYW4gdGhlIHByZXZpb3VzIGRpZ2l0IGhhcyB0byBiZSByb3VuZGVkIHVwIGFuZCBzbyBvbi5cclxuICAgICAgICAgIGZvciAoLS1iYXNlT3V0OyArK3hjWy0tZF0gPiBiYXNlT3V0Oykge1xyXG4gICAgICAgICAgICB4Y1tkXSA9IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWQpIHtcclxuICAgICAgICAgICAgICArK2U7XHJcbiAgICAgICAgICAgICAgeGMgPSBbMV0uY29uY2F0KHhjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoayA9IHhjLmxlbmd0aDsgIXhjWy0ta107KTtcclxuXHJcbiAgICAgICAgLy8gRS5nLiBbNCwgMTEsIDE1XSBiZWNvbWVzIDRiZi5cclxuICAgICAgICBmb3IgKGkgPSAwLCBzdHIgPSAnJzsgaSA8PSBrOyBzdHIgKz0gYWxwaGFiZXQuY2hhckF0KHhjW2krK10pKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGxlYWRpbmcgemVyb3MsIGRlY2ltYWwgcG9pbnQgYW5kIHRyYWlsaW5nIHplcm9zIGFzIHJlcXVpcmVkLlxyXG4gICAgICAgIHN0ciA9IHRvRml4ZWRQb2ludChzdHIsIGUsIGFscGhhYmV0LmNoYXJBdCgwKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRoZSBjYWxsZXIgd2lsbCBhZGQgdGhlIHNpZ24uXHJcbiAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9O1xyXG4gIH0pKCk7XHJcblxyXG5cclxuICAvLyBQZXJmb3JtIGRpdmlzaW9uIGluIHRoZSBzcGVjaWZpZWQgYmFzZS4gQ2FsbGVkIGJ5IGRpdiBhbmQgY29udmVydEJhc2UuXHJcbiAgZGl2ID0gKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAvLyBBc3N1bWUgbm9uLXplcm8geCBhbmQgay5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5KHgsIGssIGJhc2UpIHtcclxuICAgICAgdmFyIG0sIHRlbXAsIHhsbywgeGhpLFxyXG4gICAgICAgIGNhcnJ5ID0gMCxcclxuICAgICAgICBpID0geC5sZW5ndGgsXHJcbiAgICAgICAga2xvID0gayAlIFNRUlRfQkFTRSxcclxuICAgICAgICBraGkgPSBrIC8gU1FSVF9CQVNFIHwgMDtcclxuXHJcbiAgICAgIGZvciAoeCA9IHguc2xpY2UoKTsgaS0tOykge1xyXG4gICAgICAgIHhsbyA9IHhbaV0gJSBTUVJUX0JBU0U7XHJcbiAgICAgICAgeGhpID0geFtpXSAvIFNRUlRfQkFTRSB8IDA7XHJcbiAgICAgICAgbSA9IGtoaSAqIHhsbyArIHhoaSAqIGtsbztcclxuICAgICAgICB0ZW1wID0ga2xvICogeGxvICsgKChtICUgU1FSVF9CQVNFKSAqIFNRUlRfQkFTRSkgKyBjYXJyeTtcclxuICAgICAgICBjYXJyeSA9ICh0ZW1wIC8gYmFzZSB8IDApICsgKG0gLyBTUVJUX0JBU0UgfCAwKSArIGtoaSAqIHhoaTtcclxuICAgICAgICB4W2ldID0gdGVtcCAlIGJhc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjYXJyeSkgeCA9IFtjYXJyeV0uY29uY2F0KHgpO1xyXG5cclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29tcGFyZShhLCBiLCBhTCwgYkwpIHtcclxuICAgICAgdmFyIGksIGNtcDtcclxuXHJcbiAgICAgIGlmIChhTCAhPSBiTCkge1xyXG4gICAgICAgIGNtcCA9IGFMID4gYkwgPyAxIDogLTE7XHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IGNtcCA9IDA7IGkgPCBhTDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgaWYgKGFbaV0gIT0gYltpXSkge1xyXG4gICAgICAgICAgICBjbXAgPSBhW2ldID4gYltpXSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gY21wO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0KGEsIGIsIGFMLCBiYXNlKSB7XHJcbiAgICAgIHZhciBpID0gMDtcclxuXHJcbiAgICAgIC8vIFN1YnRyYWN0IGIgZnJvbSBhLlxyXG4gICAgICBmb3IgKDsgYUwtLTspIHtcclxuICAgICAgICBhW2FMXSAtPSBpO1xyXG4gICAgICAgIGkgPSBhW2FMXSA8IGJbYUxdID8gMSA6IDA7XHJcbiAgICAgICAgYVthTF0gPSBpICogYmFzZSArIGFbYUxdIC0gYlthTF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zLlxyXG4gICAgICBmb3IgKDsgIWFbMF0gJiYgYS5sZW5ndGggPiAxOyBhLnNwbGljZSgwLCAxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8geDogZGl2aWRlbmQsIHk6IGRpdmlzb3IuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHgsIHksIGRwLCBybSwgYmFzZSkge1xyXG4gICAgICB2YXIgY21wLCBlLCBpLCBtb3JlLCBuLCBwcm9kLCBwcm9kTCwgcSwgcWMsIHJlbSwgcmVtTCwgcmVtMCwgeGksIHhMLCB5YzAsXHJcbiAgICAgICAgeUwsIHl6LFxyXG4gICAgICAgIHMgPSB4LnMgPT0geS5zID8gMSA6IC0xLFxyXG4gICAgICAgIHhjID0geC5jLFxyXG4gICAgICAgIHljID0geS5jO1xyXG5cclxuICAgICAgLy8gRWl0aGVyIE5hTiwgSW5maW5pdHkgb3IgMD9cclxuICAgICAgaWYgKCF4YyB8fCAheGNbMF0gfHwgIXljIHx8ICF5Y1swXSkge1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihcclxuXHJcbiAgICAgICAgIC8vIFJldHVybiBOYU4gaWYgZWl0aGVyIE5hTiwgb3IgYm90aCBJbmZpbml0eSBvciAwLlxyXG4gICAgICAgICAheC5zIHx8ICF5LnMgfHwgKHhjID8geWMgJiYgeGNbMF0gPT0geWNbMF0gOiAheWMpID8gTmFOIDpcclxuXHJcbiAgICAgICAgICAvLyBSZXR1cm4gwrEwIGlmIHggaXMgwrEwIG9yIHkgaXMgwrFJbmZpbml0eSwgb3IgcmV0dXJuIMKxSW5maW5pdHkgYXMgeSBpcyDCsTAuXHJcbiAgICAgICAgICB4YyAmJiB4Y1swXSA9PSAwIHx8ICF5YyA/IHMgKiAwIDogcyAvIDBcclxuICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHEgPSBuZXcgQmlnTnVtYmVyKHMpO1xyXG4gICAgICBxYyA9IHEuYyA9IFtdO1xyXG4gICAgICBlID0geC5lIC0geS5lO1xyXG4gICAgICBzID0gZHAgKyBlICsgMTtcclxuXHJcbiAgICAgIGlmICghYmFzZSkge1xyXG4gICAgICAgIGJhc2UgPSBCQVNFO1xyXG4gICAgICAgIGUgPSBiaXRGbG9vcih4LmUgLyBMT0dfQkFTRSkgLSBiaXRGbG9vcih5LmUgLyBMT0dfQkFTRSk7XHJcbiAgICAgICAgcyA9IHMgLyBMT0dfQkFTRSB8IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlc3VsdCBleHBvbmVudCBtYXkgYmUgb25lIGxlc3MgdGhlbiB0aGUgY3VycmVudCB2YWx1ZSBvZiBlLlxyXG4gICAgICAvLyBUaGUgY29lZmZpY2llbnRzIG9mIHRoZSBCaWdOdW1iZXJzIGZyb20gY29udmVydEJhc2UgbWF5IGhhdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgIGZvciAoaSA9IDA7IHljW2ldID09ICh4Y1tpXSB8fCAwKTsgaSsrKTtcclxuXHJcbiAgICAgIGlmICh5Y1tpXSA+ICh4Y1tpXSB8fCAwKSkgZS0tO1xyXG5cclxuICAgICAgaWYgKHMgPCAwKSB7XHJcbiAgICAgICAgcWMucHVzaCgxKTtcclxuICAgICAgICBtb3JlID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB4TCA9IHhjLmxlbmd0aDtcclxuICAgICAgICB5TCA9IHljLmxlbmd0aDtcclxuICAgICAgICBpID0gMDtcclxuICAgICAgICBzICs9IDI7XHJcblxyXG4gICAgICAgIC8vIE5vcm1hbGlzZSB4YyBhbmQgeWMgc28gaGlnaGVzdCBvcmRlciBkaWdpdCBvZiB5YyBpcyA+PSBiYXNlIC8gMi5cclxuXHJcbiAgICAgICAgbiA9IG1hdGhmbG9vcihiYXNlIC8gKHljWzBdICsgMSkpO1xyXG5cclxuICAgICAgICAvLyBOb3QgbmVjZXNzYXJ5LCBidXQgdG8gaGFuZGxlIG9kZCBiYXNlcyB3aGVyZSB5Y1swXSA9PSAoYmFzZSAvIDIpIC0gMS5cclxuICAgICAgICAvLyBpZiAobiA+IDEgfHwgbisrID09IDEgJiYgeWNbMF0gPCBiYXNlIC8gMikge1xyXG4gICAgICAgIGlmIChuID4gMSkge1xyXG4gICAgICAgICAgeWMgPSBtdWx0aXBseSh5YywgbiwgYmFzZSk7XHJcbiAgICAgICAgICB4YyA9IG11bHRpcGx5KHhjLCBuLCBiYXNlKTtcclxuICAgICAgICAgIHlMID0geWMubGVuZ3RoO1xyXG4gICAgICAgICAgeEwgPSB4Yy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB4aSA9IHlMO1xyXG4gICAgICAgIHJlbSA9IHhjLnNsaWNlKDAsIHlMKTtcclxuICAgICAgICByZW1MID0gcmVtLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gQWRkIHplcm9zIHRvIG1ha2UgcmVtYWluZGVyIGFzIGxvbmcgYXMgZGl2aXNvci5cclxuICAgICAgICBmb3IgKDsgcmVtTCA8IHlMOyByZW1bcmVtTCsrXSA9IDApO1xyXG4gICAgICAgIHl6ID0geWMuc2xpY2UoKTtcclxuICAgICAgICB5eiA9IFswXS5jb25jYXQoeXopO1xyXG4gICAgICAgIHljMCA9IHljWzBdO1xyXG4gICAgICAgIGlmICh5Y1sxXSA+PSBiYXNlIC8gMikgeWMwKys7XHJcbiAgICAgICAgLy8gTm90IG5lY2Vzc2FyeSwgYnV0IHRvIHByZXZlbnQgdHJpYWwgZGlnaXQgbiA+IGJhc2UsIHdoZW4gdXNpbmcgYmFzZSAzLlxyXG4gICAgICAgIC8vIGVsc2UgaWYgKGJhc2UgPT0gMyAmJiB5YzAgPT0gMSkgeWMwID0gMSArIDFlLTE1O1xyXG5cclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICBuID0gMDtcclxuXHJcbiAgICAgICAgICAvLyBDb21wYXJlIGRpdmlzb3IgYW5kIHJlbWFpbmRlci5cclxuICAgICAgICAgIGNtcCA9IGNvbXBhcmUoeWMsIHJlbSwgeUwsIHJlbUwpO1xyXG5cclxuICAgICAgICAgIC8vIElmIGRpdmlzb3IgPCByZW1haW5kZXIuXHJcbiAgICAgICAgICBpZiAoY21wIDwgMCkge1xyXG5cclxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRyaWFsIGRpZ2l0LCBuLlxyXG5cclxuICAgICAgICAgICAgcmVtMCA9IHJlbVswXTtcclxuICAgICAgICAgICAgaWYgKHlMICE9IHJlbUwpIHJlbTAgPSByZW0wICogYmFzZSArIChyZW1bMV0gfHwgMCk7XHJcblxyXG4gICAgICAgICAgICAvLyBuIGlzIGhvdyBtYW55IHRpbWVzIHRoZSBkaXZpc29yIGdvZXMgaW50byB0aGUgY3VycmVudCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgIG4gPSBtYXRoZmxvb3IocmVtMCAvIHljMCk7XHJcblxyXG4gICAgICAgICAgICAvLyAgQWxnb3JpdGhtOlxyXG4gICAgICAgICAgICAvLyAgcHJvZHVjdCA9IGRpdmlzb3IgbXVsdGlwbGllZCBieSB0cmlhbCBkaWdpdCAobikuXHJcbiAgICAgICAgICAgIC8vICBDb21wYXJlIHByb2R1Y3QgYW5kIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgLy8gIElmIHByb2R1Y3QgaXMgZ3JlYXRlciB0aGFuIHJlbWFpbmRlcjpcclxuICAgICAgICAgICAgLy8gICAgU3VidHJhY3QgZGl2aXNvciBmcm9tIHByb2R1Y3QsIGRlY3JlbWVudCB0cmlhbCBkaWdpdC5cclxuICAgICAgICAgICAgLy8gIFN1YnRyYWN0IHByb2R1Y3QgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgIC8vICBJZiBwcm9kdWN0IHdhcyBsZXNzIHRoYW4gcmVtYWluZGVyIGF0IHRoZSBsYXN0IGNvbXBhcmU6XHJcbiAgICAgICAgICAgIC8vICAgIENvbXBhcmUgbmV3IHJlbWFpbmRlciBhbmQgZGl2aXNvci5cclxuICAgICAgICAgICAgLy8gICAgSWYgcmVtYWluZGVyIGlzIGdyZWF0ZXIgdGhhbiBkaXZpc29yOlxyXG4gICAgICAgICAgICAvLyAgICAgIFN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIsIGluY3JlbWVudCB0cmlhbCBkaWdpdC5cclxuXHJcbiAgICAgICAgICAgIGlmIChuID4gMSkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBuIG1heSBiZSA+IGJhc2Ugb25seSB3aGVuIGJhc2UgaXMgMy5cclxuICAgICAgICAgICAgICBpZiAobiA+PSBiYXNlKSBuID0gYmFzZSAtIDE7XHJcblxyXG4gICAgICAgICAgICAgIC8vIHByb2R1Y3QgPSBkaXZpc29yICogdHJpYWwgZGlnaXQuXHJcbiAgICAgICAgICAgICAgcHJvZCA9IG11bHRpcGx5KHljLCBuLCBiYXNlKTtcclxuICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAvLyBDb21wYXJlIHByb2R1Y3QgYW5kIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICAvLyBJZiBwcm9kdWN0ID4gcmVtYWluZGVyIHRoZW4gdHJpYWwgZGlnaXQgbiB0b28gaGlnaC5cclxuICAgICAgICAgICAgICAvLyBuIGlzIDEgdG9vIGhpZ2ggYWJvdXQgNSUgb2YgdGhlIHRpbWUsIGFuZCBpcyBub3Qga25vd24gdG8gaGF2ZVxyXG4gICAgICAgICAgICAgIC8vIGV2ZXIgYmVlbiBtb3JlIHRoYW4gMSB0b28gaGlnaC5cclxuICAgICAgICAgICAgICB3aGlsZSAoY29tcGFyZShwcm9kLCByZW0sIHByb2RMLCByZW1MKSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBuLS07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZGl2aXNvciBmcm9tIHByb2R1Y3QuXHJcbiAgICAgICAgICAgICAgICBzdWJ0cmFjdChwcm9kLCB5TCA8IHByb2RMID8geXogOiB5YywgcHJvZEwsIGJhc2UpO1xyXG4gICAgICAgICAgICAgICAgcHJvZEwgPSBwcm9kLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGNtcCA9IDE7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAvLyBuIGlzIDAgb3IgMSwgY21wIGlzIC0xLlxyXG4gICAgICAgICAgICAgIC8vIElmIG4gaXMgMCwgdGhlcmUgaXMgbm8gbmVlZCB0byBjb21wYXJlIHljIGFuZCByZW0gYWdhaW4gYmVsb3csXHJcbiAgICAgICAgICAgICAgLy8gc28gY2hhbmdlIGNtcCB0byAxIHRvIGF2b2lkIGl0LlxyXG4gICAgICAgICAgICAgIC8vIElmIG4gaXMgMSwgbGVhdmUgY21wIGFzIC0xLCBzbyB5YyBhbmQgcmVtIGFyZSBjb21wYXJlZCBhZ2Fpbi5cclxuICAgICAgICAgICAgICBpZiAobiA9PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZGl2aXNvciA8IHJlbWFpbmRlciwgc28gbiBtdXN0IGJlIGF0IGxlYXN0IDEuXHJcbiAgICAgICAgICAgICAgICBjbXAgPSBuID0gMTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIC8vIHByb2R1Y3QgPSBkaXZpc29yXHJcbiAgICAgICAgICAgICAgcHJvZCA9IHljLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgcHJvZEwgPSBwcm9kLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHByb2RMIDwgcmVtTCkgcHJvZCA9IFswXS5jb25jYXQocHJvZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBTdWJ0cmFjdCBwcm9kdWN0IGZyb20gcmVtYWluZGVyLlxyXG4gICAgICAgICAgICBzdWJ0cmFjdChyZW0sIHByb2QsIHJlbUwsIGJhc2UpO1xyXG4gICAgICAgICAgICByZW1MID0gcmVtLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAvLyBJZiBwcm9kdWN0IHdhcyA8IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgaWYgKGNtcCA9PSAtMSkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBDb21wYXJlIGRpdmlzb3IgYW5kIG5ldyByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgLy8gSWYgZGl2aXNvciA8IG5ldyByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgLy8gVHJpYWwgZGlnaXQgbiB0b28gbG93LlxyXG4gICAgICAgICAgICAgIC8vIG4gaXMgMSB0b28gbG93IGFib3V0IDUlIG9mIHRoZSB0aW1lLCBhbmQgdmVyeSByYXJlbHkgMiB0b28gbG93LlxyXG4gICAgICAgICAgICAgIHdoaWxlIChjb21wYXJlKHljLCByZW0sIHlMLCByZW1MKSA8IDEpIHtcclxuICAgICAgICAgICAgICAgIG4rKztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBkaXZpc29yIGZyb20gcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgICAgc3VidHJhY3QocmVtLCB5TCA8IHJlbUwgPyB5eiA6IHljLCByZW1MLCBiYXNlKTtcclxuICAgICAgICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChjbXAgPT09IDApIHtcclxuICAgICAgICAgICAgbisrO1xyXG4gICAgICAgICAgICByZW0gPSBbMF07XHJcbiAgICAgICAgICB9IC8vIGVsc2UgY21wID09PSAxIGFuZCBuIHdpbGwgYmUgMFxyXG5cclxuICAgICAgICAgIC8vIEFkZCB0aGUgbmV4dCBkaWdpdCwgbiwgdG8gdGhlIHJlc3VsdCBhcnJheS5cclxuICAgICAgICAgIHFjW2krK10gPSBuO1xyXG5cclxuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVtYWluZGVyLlxyXG4gICAgICAgICAgaWYgKHJlbVswXSkge1xyXG4gICAgICAgICAgICByZW1bcmVtTCsrXSA9IHhjW3hpXSB8fCAwO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVtID0gW3hjW3hpXV07XHJcbiAgICAgICAgICAgIHJlbUwgPSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gd2hpbGUgKCh4aSsrIDwgeEwgfHwgcmVtWzBdICE9IG51bGwpICYmIHMtLSk7XHJcblxyXG4gICAgICAgIG1vcmUgPSByZW1bMF0gIT0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gTGVhZGluZyB6ZXJvP1xyXG4gICAgICAgIGlmICghcWNbMF0pIHFjLnNwbGljZSgwLCAxKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGJhc2UgPT0gQkFTRSkge1xyXG5cclxuICAgICAgICAvLyBUbyBjYWxjdWxhdGUgcS5lLCBmaXJzdCBnZXQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2YgcWNbMF0uXHJcbiAgICAgICAgZm9yIChpID0gMSwgcyA9IHFjWzBdOyBzID49IDEwOyBzIC89IDEwLCBpKyspO1xyXG5cclxuICAgICAgICByb3VuZChxLCBkcCArIChxLmUgPSBpICsgZSAqIExPR19CQVNFIC0gMSkgKyAxLCBybSwgbW9yZSk7XHJcblxyXG4gICAgICAvLyBDYWxsZXIgaXMgY29udmVydEJhc2UuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcS5lID0gZTtcclxuICAgICAgICBxLnIgPSArbW9yZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHE7XHJcbiAgICB9O1xyXG4gIH0pKCk7XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIEJpZ051bWJlciBuIGluIGZpeGVkLXBvaW50IG9yIGV4cG9uZW50aWFsXHJcbiAgICogbm90YXRpb24gcm91bmRlZCB0byB0aGUgc3BlY2lmaWVkIGRlY2ltYWwgcGxhY2VzIG9yIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgKlxyXG4gICAqIG46IGEgQmlnTnVtYmVyLlxyXG4gICAqIGk6IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBkaWdpdCByZXF1aXJlZCAoaS5lLiB0aGUgZGlnaXQgdGhhdCBtYXkgYmUgcm91bmRlZCB1cCkuXHJcbiAgICogcm06IHRoZSByb3VuZGluZyBtb2RlLlxyXG4gICAqIGlkOiAxICh0b0V4cG9uZW50aWFsKSBvciAyICh0b1ByZWNpc2lvbikuXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gZm9ybWF0KG4sIGksIHJtLCBpZCkge1xyXG4gICAgdmFyIGMwLCBlLCBuZSwgbGVuLCBzdHI7XHJcblxyXG4gICAgaWYgKHJtID09IG51bGwpIHJtID0gUk9VTkRJTkdfTU9ERTtcclxuICAgIGVsc2UgaW50Q2hlY2socm0sIDAsIDgpO1xyXG5cclxuICAgIGlmICghbi5jKSByZXR1cm4gbi50b1N0cmluZygpO1xyXG5cclxuICAgIGMwID0gbi5jWzBdO1xyXG4gICAgbmUgPSBuLmU7XHJcblxyXG4gICAgaWYgKGkgPT0gbnVsbCkge1xyXG4gICAgICBzdHIgPSBjb2VmZlRvU3RyaW5nKG4uYyk7XHJcbiAgICAgIHN0ciA9IGlkID09IDEgfHwgaWQgPT0gMiAmJiAobmUgPD0gVE9fRVhQX05FRyB8fCBuZSA+PSBUT19FWFBfUE9TKVxyXG4gICAgICAgPyB0b0V4cG9uZW50aWFsKHN0ciwgbmUpXHJcbiAgICAgICA6IHRvRml4ZWRQb2ludChzdHIsIG5lLCAnMCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbiA9IHJvdW5kKG5ldyBCaWdOdW1iZXIobiksIGksIHJtKTtcclxuXHJcbiAgICAgIC8vIG4uZSBtYXkgaGF2ZSBjaGFuZ2VkIGlmIHRoZSB2YWx1ZSB3YXMgcm91bmRlZCB1cC5cclxuICAgICAgZSA9IG4uZTtcclxuXHJcbiAgICAgIHN0ciA9IGNvZWZmVG9TdHJpbmcobi5jKTtcclxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcclxuXHJcbiAgICAgIC8vIHRvUHJlY2lzaW9uIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24gaWYgdGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBkaWdpdHNcclxuICAgICAgLy8gc3BlY2lmaWVkIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBuZWNlc3NhcnkgdG8gcmVwcmVzZW50IHRoZSBpbnRlZ2VyXHJcbiAgICAgIC8vIHBhcnQgb2YgdGhlIHZhbHVlIGluIGZpeGVkLXBvaW50IG5vdGF0aW9uLlxyXG5cclxuICAgICAgLy8gRXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICAgIGlmIChpZCA9PSAxIHx8IGlkID09IDIgJiYgKGkgPD0gZSB8fCBlIDw9IFRPX0VYUF9ORUcpKSB7XHJcblxyXG4gICAgICAgIC8vIEFwcGVuZCB6ZXJvcz9cclxuICAgICAgICBmb3IgKDsgbGVuIDwgaTsgc3RyICs9ICcwJywgbGVuKyspO1xyXG4gICAgICAgIHN0ciA9IHRvRXhwb25lbnRpYWwoc3RyLCBlKTtcclxuXHJcbiAgICAgIC8vIEZpeGVkLXBvaW50IG5vdGF0aW9uLlxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGkgLT0gbmU7XHJcbiAgICAgICAgc3RyID0gdG9GaXhlZFBvaW50KHN0ciwgZSwgJzAnKTtcclxuXHJcbiAgICAgICAgLy8gQXBwZW5kIHplcm9zP1xyXG4gICAgICAgIGlmIChlICsgMSA+IGxlbikge1xyXG4gICAgICAgICAgaWYgKC0taSA+IDApIGZvciAoc3RyICs9ICcuJzsgaS0tOyBzdHIgKz0gJzAnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaSArPSBlIC0gbGVuO1xyXG4gICAgICAgICAgaWYgKGkgPiAwKSB7XHJcbiAgICAgICAgICAgIGlmIChlICsgMSA9PSBsZW4pIHN0ciArPSAnLic7XHJcbiAgICAgICAgICAgIGZvciAoOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuLnMgPCAwICYmIGMwID8gJy0nICsgc3RyIDogc3RyO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIEhhbmRsZSBCaWdOdW1iZXIubWF4IGFuZCBCaWdOdW1iZXIubWluLlxyXG4gIGZ1bmN0aW9uIG1heE9yTWluKGFyZ3MsIG1ldGhvZCkge1xyXG4gICAgdmFyIG4sXHJcbiAgICAgIGkgPSAxLFxyXG4gICAgICBtID0gbmV3IEJpZ051bWJlcihhcmdzWzBdKTtcclxuXHJcbiAgICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbiA9IG5ldyBCaWdOdW1iZXIoYXJnc1tpXSk7XHJcblxyXG4gICAgICAvLyBJZiBhbnkgbnVtYmVyIGlzIE5hTiwgcmV0dXJuIE5hTi5cclxuICAgICAgaWYgKCFuLnMpIHtcclxuICAgICAgICBtID0gbjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfSBlbHNlIGlmIChtZXRob2QuY2FsbChtLCBuKSkge1xyXG4gICAgICAgIG0gPSBuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG07XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBTdHJpcCB0cmFpbGluZyB6ZXJvcywgY2FsY3VsYXRlIGJhc2UgMTAgZXhwb25lbnQgYW5kIGNoZWNrIGFnYWluc3QgTUlOX0VYUCBhbmQgTUFYX0VYUC5cclxuICAgKiBDYWxsZWQgYnkgbWludXMsIHBsdXMgYW5kIHRpbWVzLlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIG5vcm1hbGlzZShuLCBjLCBlKSB7XHJcbiAgICB2YXIgaSA9IDEsXHJcbiAgICAgIGogPSBjLmxlbmd0aDtcclxuXHJcbiAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgZm9yICg7ICFjWy0tal07IGMucG9wKCkpO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSB0aGUgYmFzZSAxMCBleHBvbmVudC4gRmlyc3QgZ2V0IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIGNbMF0uXHJcbiAgICBmb3IgKGogPSBjWzBdOyBqID49IDEwOyBqIC89IDEwLCBpKyspO1xyXG5cclxuICAgIC8vIE92ZXJmbG93P1xyXG4gICAgaWYgKChlID0gaSArIGUgKiBMT0dfQkFTRSAtIDEpID4gTUFYX0VYUCkge1xyXG5cclxuICAgICAgLy8gSW5maW5pdHkuXHJcbiAgICAgIG4uYyA9IG4uZSA9IG51bGw7XHJcblxyXG4gICAgLy8gVW5kZXJmbG93P1xyXG4gICAgfSBlbHNlIGlmIChlIDwgTUlOX0VYUCkge1xyXG5cclxuICAgICAgLy8gWmVyby5cclxuICAgICAgbi5jID0gW24uZSA9IDBdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbi5lID0gZTtcclxuICAgICAgbi5jID0gYztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbjtcclxuICB9XHJcblxyXG5cclxuICAvLyBIYW5kbGUgdmFsdWVzIHRoYXQgZmFpbCB0aGUgdmFsaWRpdHkgdGVzdCBpbiBCaWdOdW1iZXIuXHJcbiAgcGFyc2VOdW1lcmljID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBiYXNlUHJlZml4ID0gL14oLT8pMChbeGJvXSkoPz1cXHdbXFx3Ll0qJCkvaSxcclxuICAgICAgZG90QWZ0ZXIgPSAvXihbXi5dKylcXC4kLyxcclxuICAgICAgZG90QmVmb3JlID0gL15cXC4oW14uXSspJC8sXHJcbiAgICAgIGlzSW5maW5pdHlPck5hTiA9IC9eLT8oSW5maW5pdHl8TmFOKSQvLFxyXG4gICAgICB3aGl0ZXNwYWNlT3JQbHVzID0gL15cXHMqXFwrKD89W1xcdy5dKXxeXFxzK3xcXHMrJC9nO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiAoeCwgc3RyLCBpc051bSwgYikge1xyXG4gICAgICB2YXIgYmFzZSxcclxuICAgICAgICBzID0gaXNOdW0gPyBzdHIgOiBzdHIucmVwbGFjZSh3aGl0ZXNwYWNlT3JQbHVzLCAnJyk7XHJcblxyXG4gICAgICAvLyBObyBleGNlcHRpb24gb24gwrFJbmZpbml0eSBvciBOYU4uXHJcbiAgICAgIGlmIChpc0luZmluaXR5T3JOYU4udGVzdChzKSkge1xyXG4gICAgICAgIHgucyA9IGlzTmFOKHMpID8gbnVsbCA6IHMgPCAwID8gLTEgOiAxO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICghaXNOdW0pIHtcclxuXHJcbiAgICAgICAgICAvLyBiYXNlUHJlZml4ID0gL14oLT8pMChbeGJvXSkoPz1cXHdbXFx3Ll0qJCkvaVxyXG4gICAgICAgICAgcyA9IHMucmVwbGFjZShiYXNlUHJlZml4LCBmdW5jdGlvbiAobSwgcDEsIHAyKSB7XHJcbiAgICAgICAgICAgIGJhc2UgPSAocDIgPSBwMi50b0xvd2VyQ2FzZSgpKSA9PSAneCcgPyAxNiA6IHAyID09ICdiJyA/IDIgOiA4O1xyXG4gICAgICAgICAgICByZXR1cm4gIWIgfHwgYiA9PSBiYXNlID8gcDEgOiBtO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKGIpIHtcclxuICAgICAgICAgICAgYmFzZSA9IGI7XHJcblxyXG4gICAgICAgICAgICAvLyBFLmcuICcxLicgdG8gJzEnLCAnLjEnIHRvICcwLjEnXHJcbiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoZG90QWZ0ZXIsICckMScpLnJlcGxhY2UoZG90QmVmb3JlLCAnMC4kMScpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChzdHIgIT0gcykgcmV0dXJuIG5ldyBCaWdOdW1iZXIocywgYmFzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gTm90IGEgbnVtYmVyOiB7bn0nXHJcbiAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE5vdCBhIGJhc2Uge2J9IG51bWJlcjoge259J1xyXG4gICAgICAgIGlmIChCaWdOdW1iZXIuREVCVUcpIHtcclxuICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdOb3QgYScgKyAoYiA/ICcgYmFzZSAnICsgYiA6ICcnKSArICcgbnVtYmVyOiAnICsgc3RyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5hTlxyXG4gICAgICAgIHgucyA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHguYyA9IHguZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfSkoKTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUm91bmQgeCB0byBzZCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBybS4gQ2hlY2sgZm9yIG92ZXIvdW5kZXItZmxvdy5cclxuICAgKiBJZiByIGlzIHRydXRoeSwgaXQgaXMga25vd24gdGhhdCB0aGVyZSBhcmUgbW9yZSBkaWdpdHMgYWZ0ZXIgdGhlIHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHJvdW5kKHgsIHNkLCBybSwgcikge1xyXG4gICAgdmFyIGQsIGksIGosIGssIG4sIG5pLCByZCxcclxuICAgICAgeGMgPSB4LmMsXHJcbiAgICAgIHBvd3MxMCA9IFBPV1NfVEVOO1xyXG5cclxuICAgIC8vIGlmIHggaXMgbm90IEluZmluaXR5IG9yIE5hTi4uLlxyXG4gICAgaWYgKHhjKSB7XHJcblxyXG4gICAgICAvLyByZCBpcyB0aGUgcm91bmRpbmcgZGlnaXQsIGkuZS4gdGhlIGRpZ2l0IGFmdGVyIHRoZSBkaWdpdCB0aGF0IG1heSBiZSByb3VuZGVkIHVwLlxyXG4gICAgICAvLyBuIGlzIGEgYmFzZSAxZTE0IG51bWJlciwgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IG9mIGFycmF5IHguYyBjb250YWluaW5nIHJkLlxyXG4gICAgICAvLyBuaSBpcyB0aGUgaW5kZXggb2YgbiB3aXRoaW4geC5jLlxyXG4gICAgICAvLyBkIGlzIHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIG4uXHJcbiAgICAgIC8vIGkgaXMgdGhlIGluZGV4IG9mIHJkIHdpdGhpbiBuIGluY2x1ZGluZyBsZWFkaW5nIHplcm9zLlxyXG4gICAgICAvLyBqIGlzIHRoZSBhY3R1YWwgaW5kZXggb2YgcmQgd2l0aGluIG4gKGlmIDwgMCwgcmQgaXMgYSBsZWFkaW5nIHplcm8pLlxyXG4gICAgICBvdXQ6IHtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIHRoZSBmaXJzdCBlbGVtZW50IG9mIHhjLlxyXG4gICAgICAgIGZvciAoZCA9IDEsIGsgPSB4Y1swXTsgayA+PSAxMDsgayAvPSAxMCwgZCsrKTtcclxuICAgICAgICBpID0gc2QgLSBkO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGUgcm91bmRpbmcgZGlnaXQgaXMgaW4gdGhlIGZpcnN0IGVsZW1lbnQgb2YgeGMuLi5cclxuICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgIGkgKz0gTE9HX0JBU0U7XHJcbiAgICAgICAgICBqID0gc2Q7XHJcbiAgICAgICAgICBuID0geGNbbmkgPSAwXTtcclxuXHJcbiAgICAgICAgICAvLyBHZXQgdGhlIHJvdW5kaW5nIGRpZ2l0IGF0IGluZGV4IGogb2Ygbi5cclxuICAgICAgICAgIHJkID0gbiAvIHBvd3MxMFtkIC0gaiAtIDFdICUgMTAgfCAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuaSA9IG1hdGhjZWlsKChpICsgMSkgLyBMT0dfQkFTRSk7XHJcblxyXG4gICAgICAgICAgaWYgKG5pID49IHhjLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHIpIHtcclxuXHJcbiAgICAgICAgICAgICAgLy8gTmVlZGVkIGJ5IHNxcnQuXHJcbiAgICAgICAgICAgICAgZm9yICg7IHhjLmxlbmd0aCA8PSBuaTsgeGMucHVzaCgwKSk7XHJcbiAgICAgICAgICAgICAgbiA9IHJkID0gMDtcclxuICAgICAgICAgICAgICBkID0gMTtcclxuICAgICAgICAgICAgICBpICU9IExPR19CQVNFO1xyXG4gICAgICAgICAgICAgIGogPSBpIC0gTE9HX0JBU0UgKyAxO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGJyZWFrIG91dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbiA9IGsgPSB4Y1tuaV07XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygbi5cclxuICAgICAgICAgICAgZm9yIChkID0gMTsgayA+PSAxMDsgayAvPSAxMCwgZCsrKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgcmQgd2l0aGluIG4uXHJcbiAgICAgICAgICAgIGkgJT0gTE9HX0JBU0U7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGluZGV4IG9mIHJkIHdpdGhpbiBuLCBhZGp1c3RlZCBmb3IgbGVhZGluZyB6ZXJvcy5cclxuICAgICAgICAgICAgLy8gVGhlIG51bWJlciBvZiBsZWFkaW5nIHplcm9zIG9mIG4gaXMgZ2l2ZW4gYnkgTE9HX0JBU0UgLSBkLlxyXG4gICAgICAgICAgICBqID0gaSAtIExPR19CQVNFICsgZDtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgcm91bmRpbmcgZGlnaXQgYXQgaW5kZXggaiBvZiBuLlxyXG4gICAgICAgICAgICByZCA9IGogPCAwID8gMCA6IG4gLyBwb3dzMTBbZCAtIGogLSAxXSAlIDEwIHwgMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHIgPSByIHx8IHNkIDwgMCB8fFxyXG5cclxuICAgICAgICAvLyBBcmUgdGhlcmUgYW55IG5vbi16ZXJvIGRpZ2l0cyBhZnRlciB0aGUgcm91bmRpbmcgZGlnaXQ/XHJcbiAgICAgICAgLy8gVGhlIGV4cHJlc3Npb24gIG4gJSBwb3dzMTBbZCAtIGogLSAxXSAgcmV0dXJucyBhbGwgZGlnaXRzIG9mIG4gdG8gdGhlIHJpZ2h0XHJcbiAgICAgICAgLy8gb2YgdGhlIGRpZ2l0IGF0IGosIGUuZy4gaWYgbiBpcyA5MDg3MTQgYW5kIGogaXMgMiwgdGhlIGV4cHJlc3Npb24gZ2l2ZXMgNzE0LlxyXG4gICAgICAgICB4Y1tuaSArIDFdICE9IG51bGwgfHwgKGogPCAwID8gbiA6IG4gJSBwb3dzMTBbZCAtIGogLSAxXSk7XHJcblxyXG4gICAgICAgIHIgPSBybSA8IDRcclxuICAgICAgICAgPyAocmQgfHwgcikgJiYgKHJtID09IDAgfHwgcm0gPT0gKHgucyA8IDAgPyAzIDogMikpXHJcbiAgICAgICAgIDogcmQgPiA1IHx8IHJkID09IDUgJiYgKHJtID09IDQgfHwgciB8fCBybSA9PSA2ICYmXHJcblxyXG4gICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgZGlnaXQgdG8gdGhlIGxlZnQgb2YgdGhlIHJvdW5kaW5nIGRpZ2l0IGlzIG9kZC5cclxuICAgICAgICAgICgoaSA+IDAgPyBqID4gMCA/IG4gLyBwb3dzMTBbZCAtIGpdIDogMCA6IHhjW25pIC0gMV0pICUgMTApICYgMSB8fFxyXG4gICAgICAgICAgIHJtID09ICh4LnMgPCAwID8gOCA6IDcpKTtcclxuXHJcbiAgICAgICAgaWYgKHNkIDwgMSB8fCAheGNbMF0pIHtcclxuICAgICAgICAgIHhjLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgICAgaWYgKHIpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgc2QgdG8gZGVjaW1hbCBwbGFjZXMuXHJcbiAgICAgICAgICAgIHNkIC09IHguZSArIDE7XHJcblxyXG4gICAgICAgICAgICAvLyAxLCAwLjEsIDAuMDEsIDAuMDAxLCAwLjAwMDEgZXRjLlxyXG4gICAgICAgICAgICB4Y1swXSA9IHBvd3MxMFsoTE9HX0JBU0UgLSBzZCAlIExPR19CQVNFKSAlIExPR19CQVNFXTtcclxuICAgICAgICAgICAgeC5lID0gLXNkIHx8IDA7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gWmVyby5cclxuICAgICAgICAgICAgeGNbMF0gPSB4LmUgPSAwO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGV4Y2VzcyBkaWdpdHMuXHJcbiAgICAgICAgaWYgKGkgPT0gMCkge1xyXG4gICAgICAgICAgeGMubGVuZ3RoID0gbmk7XHJcbiAgICAgICAgICBrID0gMTtcclxuICAgICAgICAgIG5pLS07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHhjLmxlbmd0aCA9IG5pICsgMTtcclxuICAgICAgICAgIGsgPSBwb3dzMTBbTE9HX0JBU0UgLSBpXTtcclxuXHJcbiAgICAgICAgICAvLyBFLmcuIDU2NzAwIGJlY29tZXMgNTYwMDAgaWYgNyBpcyB0aGUgcm91bmRpbmcgZGlnaXQuXHJcbiAgICAgICAgICAvLyBqID4gMCBtZWFucyBpID4gbnVtYmVyIG9mIGxlYWRpbmcgemVyb3Mgb2Ygbi5cclxuICAgICAgICAgIHhjW25pXSA9IGogPiAwID8gbWF0aGZsb29yKG4gLyBwb3dzMTBbZCAtIGpdICUgcG93czEwW2pdKSAqIGsgOiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUm91bmQgdXA/XHJcbiAgICAgICAgaWYgKHIpIHtcclxuXHJcbiAgICAgICAgICBmb3IgKDsgOykge1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgdGhlIGRpZ2l0IHRvIGJlIHJvdW5kZWQgdXAgaXMgaW4gdGhlIGZpcnN0IGVsZW1lbnQgb2YgeGMuLi5cclxuICAgICAgICAgICAgaWYgKG5pID09IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgLy8gaSB3aWxsIGJlIHRoZSBsZW5ndGggb2YgeGNbMF0gYmVmb3JlIGsgaXMgYWRkZWQuXHJcbiAgICAgICAgICAgICAgZm9yIChpID0gMSwgaiA9IHhjWzBdOyBqID49IDEwOyBqIC89IDEwLCBpKyspO1xyXG4gICAgICAgICAgICAgIGogPSB4Y1swXSArPSBrO1xyXG4gICAgICAgICAgICAgIGZvciAoayA9IDE7IGogPj0gMTA7IGogLz0gMTAsIGsrKyk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIGlmIGkgIT0gayB0aGUgbGVuZ3RoIGhhcyBpbmNyZWFzZWQuXHJcbiAgICAgICAgICAgICAgaWYgKGkgIT0gaykge1xyXG4gICAgICAgICAgICAgICAgeC5lKys7XHJcbiAgICAgICAgICAgICAgICBpZiAoeGNbMF0gPT0gQkFTRSkgeGNbMF0gPSAxO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgeGNbbmldICs9IGs7XHJcbiAgICAgICAgICAgICAgaWYgKHhjW25pXSAhPSBCQVNFKSBicmVhaztcclxuICAgICAgICAgICAgICB4Y1tuaS0tXSA9IDA7XHJcbiAgICAgICAgICAgICAgayA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgICAgICBmb3IgKGkgPSB4Yy5sZW5ndGg7IHhjWy0taV0gPT09IDA7IHhjLnBvcCgpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gT3ZlcmZsb3c/IEluZmluaXR5LlxyXG4gICAgICBpZiAoeC5lID4gTUFYX0VYUCkge1xyXG4gICAgICAgIHguYyA9IHguZSA9IG51bGw7XHJcblxyXG4gICAgICAvLyBVbmRlcmZsb3c/IFplcm8uXHJcbiAgICAgIH0gZWxzZSBpZiAoeC5lIDwgTUlOX0VYUCkge1xyXG4gICAgICAgIHguYyA9IFt4LmUgPSAwXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB4O1xyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHZhbHVlT2Yobikge1xyXG4gICAgdmFyIHN0cixcclxuICAgICAgZSA9IG4uZTtcclxuXHJcbiAgICBpZiAoZSA9PT0gbnVsbCkgcmV0dXJuIG4udG9TdHJpbmcoKTtcclxuXHJcbiAgICBzdHIgPSBjb2VmZlRvU3RyaW5nKG4uYyk7XHJcblxyXG4gICAgc3RyID0gZSA8PSBUT19FWFBfTkVHIHx8IGUgPj0gVE9fRVhQX1BPU1xyXG4gICAgICA/IHRvRXhwb25lbnRpYWwoc3RyLCBlKVxyXG4gICAgICA6IHRvRml4ZWRQb2ludChzdHIsIGUsICcwJyk7XHJcblxyXG4gICAgcmV0dXJuIG4ucyA8IDAgPyAnLScgKyBzdHIgOiBzdHI7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gUFJPVE9UWVBFL0lOU1RBTkNFIE1FVEhPRFNcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIuXHJcbiAgICovXHJcbiAgUC5hYnNvbHV0ZVZhbHVlID0gUC5hYnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgeCA9IG5ldyBCaWdOdW1iZXIodGhpcyk7XHJcbiAgICBpZiAoeC5zIDwgMCkgeC5zID0gMTtcclxuICAgIHJldHVybiB4O1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVyblxyXG4gICAqICAgMSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICogICAtMSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgbGVzcyB0aGFuIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICogICAwIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSB2YWx1ZSxcclxuICAgKiAgIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIGVpdGhlciBpcyBOYU4uXHJcbiAgICovXHJcbiAgUC5jb21wYXJlZFRvID0gZnVuY3Rpb24gKHksIGIpIHtcclxuICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIElmIGRwIGlzIHVuZGVmaW5lZCBvciBudWxsIG9yIHRydWUgb3IgZmFsc2UsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIG9mIHRoZVxyXG4gICAqIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyLCBvciBudWxsIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyDCsUluZmluaXR5IG9yIE5hTi5cclxuICAgKlxyXG4gICAqIE90aGVyd2lzZSwgaWYgZHAgaXMgYSBudW1iZXIsIHJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXNcclxuICAgKiBCaWdOdW1iZXIgcm91bmRlZCB0byBhIG1heGltdW0gb2YgZHAgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBybSwgb3JcclxuICAgKiBST1VORElOR19NT0RFIGlmIHJtIGlzIG9taXR0ZWQuXHJcbiAgICpcclxuICAgKiBbZHBdIHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzOiBpbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtkcHxybX0nXHJcbiAgICovXHJcbiAgUC5kZWNpbWFsUGxhY2VzID0gUC5kcCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgIHZhciBjLCBuLCB2LFxyXG4gICAgICB4ID0gdGhpcztcclxuXHJcbiAgICBpZiAoZHAgIT0gbnVsbCkge1xyXG4gICAgICBpbnRDaGVjayhkcCwgMCwgTUFYKTtcclxuICAgICAgaWYgKHJtID09IG51bGwpIHJtID0gUk9VTkRJTkdfTU9ERTtcclxuICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICByZXR1cm4gcm91bmQobmV3IEJpZ051bWJlcih4KSwgZHAgKyB4LmUgKyAxLCBybSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCEoYyA9IHguYykpIHJldHVybiBudWxsO1xyXG4gICAgbiA9ICgodiA9IGMubGVuZ3RoIC0gMSkgLSBiaXRGbG9vcih0aGlzLmUgLyBMT0dfQkFTRSkpICogTE9HX0JBU0U7XHJcblxyXG4gICAgLy8gU3VidHJhY3QgdGhlIG51bWJlciBvZiB0cmFpbGluZyB6ZXJvcyBvZiB0aGUgbGFzdCBudW1iZXIuXHJcbiAgICBpZiAodiA9IGNbdl0pIGZvciAoOyB2ICUgMTAgPT0gMDsgdiAvPSAxMCwgbi0tKTtcclxuICAgIGlmIChuIDwgMCkgbiA9IDA7XHJcblxyXG4gICAgcmV0dXJuIG47XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogIG4gLyAwID0gSVxyXG4gICAqICBuIC8gTiA9IE5cclxuICAgKiAgbiAvIEkgPSAwXHJcbiAgICogIDAgLyBuID0gMFxyXG4gICAqICAwIC8gMCA9IE5cclxuICAgKiAgMCAvIE4gPSBOXHJcbiAgICogIDAgLyBJID0gMFxyXG4gICAqICBOIC8gbiA9IE5cclxuICAgKiAgTiAvIDAgPSBOXHJcbiAgICogIE4gLyBOID0gTlxyXG4gICAqICBOIC8gSSA9IE5cclxuICAgKiAgSSAvIG4gPSBJXHJcbiAgICogIEkgLyAwID0gSVxyXG4gICAqICBJIC8gTiA9IE5cclxuICAgKiAgSSAvIEkgPSBOXHJcbiAgICpcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBkaXZpZGVkIGJ5IHRoZSB2YWx1ZSBvZlxyXG4gICAqIEJpZ051bWJlcih5LCBiKSwgcm91bmRlZCBhY2NvcmRpbmcgdG8gREVDSU1BTF9QTEFDRVMgYW5kIFJPVU5ESU5HX01PREUuXHJcbiAgICovXHJcbiAgUC5kaXZpZGVkQnkgPSBQLmRpdiA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICByZXR1cm4gZGl2KHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYiksIERFQ0lNQUxfUExBQ0VTLCBST1VORElOR19NT0RFKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBpbnRlZ2VyIHBhcnQgb2YgZGl2aWRpbmcgdGhlIHZhbHVlIG9mIHRoaXNcclxuICAgKiBCaWdOdW1iZXIgYnkgdGhlIHZhbHVlIG9mIEJpZ051bWJlcih5LCBiKS5cclxuICAgKi9cclxuICBQLmRpdmlkZWRUb0ludGVnZXJCeSA9IFAuaWRpdiA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICByZXR1cm4gZGl2KHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYiksIDAsIDEpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgZXhwb25lbnRpYXRlZCBieSBuLlxyXG4gICAqXHJcbiAgICogSWYgbSBpcyBwcmVzZW50LCByZXR1cm4gdGhlIHJlc3VsdCBtb2R1bG8gbS5cclxuICAgKiBJZiBuIGlzIG5lZ2F0aXZlIHJvdW5kIGFjY29yZGluZyB0byBERUNJTUFMX1BMQUNFUyBhbmQgUk9VTkRJTkdfTU9ERS5cclxuICAgKiBJZiBQT1dfUFJFQ0lTSU9OIGlzIG5vbi16ZXJvIGFuZCBtIGlzIG5vdCBwcmVzZW50LCByb3VuZCB0byBQT1dfUFJFQ0lTSU9OIHVzaW5nIFJPVU5ESU5HX01PREUuXHJcbiAgICpcclxuICAgKiBUaGUgbW9kdWxhciBwb3dlciBvcGVyYXRpb24gd29ya3MgZWZmaWNpZW50bHkgd2hlbiB4LCBuLCBhbmQgbSBhcmUgaW50ZWdlcnMsIG90aGVyd2lzZSBpdFxyXG4gICAqIGlzIGVxdWl2YWxlbnQgdG8gY2FsY3VsYXRpbmcgeC5leHBvbmVudGlhdGVkQnkobikubW9kdWxvKG0pIHdpdGggYSBQT1dfUFJFQ0lTSU9OIG9mIDAuXHJcbiAgICpcclxuICAgKiBuIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn0gVGhlIGV4cG9uZW50LiBBbiBpbnRlZ2VyLlxyXG4gICAqIFttXSB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IFRoZSBtb2R1bHVzLlxyXG4gICAqXHJcbiAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEV4cG9uZW50IG5vdCBhbiBpbnRlZ2VyOiB7bn0nXHJcbiAgICovXHJcbiAgUC5leHBvbmVudGlhdGVkQnkgPSBQLnBvdyA9IGZ1bmN0aW9uIChuLCBtKSB7XHJcbiAgICB2YXIgaGFsZiwgaXNNb2RFeHAsIGksIGssIG1vcmUsIG5Jc0JpZywgbklzTmVnLCBuSXNPZGQsIHksXHJcbiAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgIG4gPSBuZXcgQmlnTnVtYmVyKG4pO1xyXG5cclxuICAgIC8vIEFsbG93IE5hTiBhbmQgwrFJbmZpbml0eSwgYnV0IG5vdCBvdGhlciBub24taW50ZWdlcnMuXHJcbiAgICBpZiAobi5jICYmICFuLmlzSW50ZWdlcigpKSB7XHJcbiAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ0V4cG9uZW50IG5vdCBhbiBpbnRlZ2VyOiAnICsgdmFsdWVPZihuKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG0gIT0gbnVsbCkgbSA9IG5ldyBCaWdOdW1iZXIobSk7XHJcblxyXG4gICAgLy8gRXhwb25lbnQgb2YgTUFYX1NBRkVfSU5URUdFUiBpcyAxNS5cclxuICAgIG5Jc0JpZyA9IG4uZSA+IDE0O1xyXG5cclxuICAgIC8vIElmIHggaXMgTmFOLCDCsUluZmluaXR5LCDCsTAgb3IgwrExLCBvciBuIGlzIMKxSW5maW5pdHksIE5hTiBvciDCsTAuXHJcbiAgICBpZiAoIXguYyB8fCAheC5jWzBdIHx8IHguY1swXSA9PSAxICYmICF4LmUgJiYgeC5jLmxlbmd0aCA9PSAxIHx8ICFuLmMgfHwgIW4uY1swXSkge1xyXG5cclxuICAgICAgLy8gVGhlIHNpZ24gb2YgdGhlIHJlc3VsdCBvZiBwb3cgd2hlbiB4IGlzIG5lZ2F0aXZlIGRlcGVuZHMgb24gdGhlIGV2ZW5uZXNzIG9mIG4uXHJcbiAgICAgIC8vIElmICtuIG92ZXJmbG93cyB0byDCsUluZmluaXR5LCB0aGUgZXZlbm5lc3Mgb2YgbiB3b3VsZCBiZSBub3QgYmUga25vd24uXHJcbiAgICAgIHkgPSBuZXcgQmlnTnVtYmVyKE1hdGgucG93KCt2YWx1ZU9mKHgpLCBuSXNCaWcgPyAyIC0gaXNPZGQobikgOiArdmFsdWVPZihuKSkpO1xyXG4gICAgICByZXR1cm4gbSA/IHkubW9kKG0pIDogeTtcclxuICAgIH1cclxuXHJcbiAgICBuSXNOZWcgPSBuLnMgPCAwO1xyXG5cclxuICAgIGlmIChtKSB7XHJcblxyXG4gICAgICAvLyB4ICUgbSByZXR1cm5zIE5hTiBpZiBhYnMobSkgaXMgemVybywgb3IgbSBpcyBOYU4uXHJcbiAgICAgIGlmIChtLmMgPyAhbS5jWzBdIDogIW0ucykgcmV0dXJuIG5ldyBCaWdOdW1iZXIoTmFOKTtcclxuXHJcbiAgICAgIGlzTW9kRXhwID0gIW5Jc05lZyAmJiB4LmlzSW50ZWdlcigpICYmIG0uaXNJbnRlZ2VyKCk7XHJcblxyXG4gICAgICBpZiAoaXNNb2RFeHApIHggPSB4Lm1vZChtKTtcclxuXHJcbiAgICAvLyBPdmVyZmxvdyB0byDCsUluZmluaXR5OiA+PTIqKjFlMTAgb3IgPj0xLjAwMDAwMjQqKjFlMTUuXHJcbiAgICAvLyBVbmRlcmZsb3cgdG8gwrEwOiA8PTAuNzkqKjFlMTAgb3IgPD0wLjk5OTk5NzUqKjFlMTUuXHJcbiAgICB9IGVsc2UgaWYgKG4uZSA+IDkgJiYgKHguZSA+IDAgfHwgeC5lIDwgLTEgfHwgKHguZSA9PSAwXHJcbiAgICAgIC8vIFsxLCAyNDAwMDAwMDBdXHJcbiAgICAgID8geC5jWzBdID4gMSB8fCBuSXNCaWcgJiYgeC5jWzFdID49IDI0ZTdcclxuICAgICAgLy8gWzgwMDAwMDAwMDAwMDAwXSAgWzk5OTk5NzUwMDAwMDAwXVxyXG4gICAgICA6IHguY1swXSA8IDhlMTMgfHwgbklzQmlnICYmIHguY1swXSA8PSA5OTk5OTc1ZTcpKSkge1xyXG5cclxuICAgICAgLy8gSWYgeCBpcyBuZWdhdGl2ZSBhbmQgbiBpcyBvZGQsIGsgPSAtMCwgZWxzZSBrID0gMC5cclxuICAgICAgayA9IHgucyA8IDAgJiYgaXNPZGQobikgPyAtMCA6IDA7XHJcblxyXG4gICAgICAvLyBJZiB4ID49IDEsIGsgPSDCsUluZmluaXR5LlxyXG4gICAgICBpZiAoeC5lID4gLTEpIGsgPSAxIC8gaztcclxuXHJcbiAgICAgIC8vIElmIG4gaXMgbmVnYXRpdmUgcmV0dXJuIMKxMCwgZWxzZSByZXR1cm4gwrFJbmZpbml0eS5cclxuICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIobklzTmVnID8gMSAvIGsgOiBrKTtcclxuXHJcbiAgICB9IGVsc2UgaWYgKFBPV19QUkVDSVNJT04pIHtcclxuXHJcbiAgICAgIC8vIFRydW5jYXRpbmcgZWFjaCBjb2VmZmljaWVudCBhcnJheSB0byBhIGxlbmd0aCBvZiBrIGFmdGVyIGVhY2ggbXVsdGlwbGljYXRpb25cclxuICAgICAgLy8gZXF1YXRlcyB0byB0cnVuY2F0aW5nIHNpZ25pZmljYW50IGRpZ2l0cyB0byBQT1dfUFJFQ0lTSU9OICsgWzI4LCA0MV0sXHJcbiAgICAgIC8vIGkuZS4gdGhlcmUgd2lsbCBiZSBhIG1pbmltdW0gb2YgMjggZ3VhcmQgZGlnaXRzIHJldGFpbmVkLlxyXG4gICAgICBrID0gbWF0aGNlaWwoUE9XX1BSRUNJU0lPTiAvIExPR19CQVNFICsgMik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5Jc0JpZykge1xyXG4gICAgICBoYWxmID0gbmV3IEJpZ051bWJlcigwLjUpO1xyXG4gICAgICBpZiAobklzTmVnKSBuLnMgPSAxO1xyXG4gICAgICBuSXNPZGQgPSBpc09kZChuKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGkgPSBNYXRoLmFicygrdmFsdWVPZihuKSk7XHJcbiAgICAgIG5Jc09kZCA9IGkgJSAyO1xyXG4gICAgfVxyXG5cclxuICAgIHkgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcblxyXG4gICAgLy8gUGVyZm9ybXMgNTQgbG9vcCBpdGVyYXRpb25zIGZvciBuIG9mIDkwMDcxOTkyNTQ3NDA5OTEuXHJcbiAgICBmb3IgKDsgOykge1xyXG5cclxuICAgICAgaWYgKG5Jc09kZCkge1xyXG4gICAgICAgIHkgPSB5LnRpbWVzKHgpO1xyXG4gICAgICAgIGlmICgheS5jKSBicmVhaztcclxuXHJcbiAgICAgICAgaWYgKGspIHtcclxuICAgICAgICAgIGlmICh5LmMubGVuZ3RoID4gaykgeS5jLmxlbmd0aCA9IGs7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc01vZEV4cCkge1xyXG4gICAgICAgICAgeSA9IHkubW9kKG0pOyAgICAvL3kgPSB5Lm1pbnVzKGRpdih5LCBtLCAwLCBNT0RVTE9fTU9ERSkudGltZXMobSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGkpIHtcclxuICAgICAgICBpID0gbWF0aGZsb29yKGkgLyAyKTtcclxuICAgICAgICBpZiAoaSA9PT0gMCkgYnJlYWs7XHJcbiAgICAgICAgbklzT2RkID0gaSAlIDI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbiA9IG4udGltZXMoaGFsZik7XHJcbiAgICAgICAgcm91bmQobiwgbi5lICsgMSwgMSk7XHJcblxyXG4gICAgICAgIGlmIChuLmUgPiAxNCkge1xyXG4gICAgICAgICAgbklzT2RkID0gaXNPZGQobik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGkgPSArdmFsdWVPZihuKTtcclxuICAgICAgICAgIGlmIChpID09PSAwKSBicmVhaztcclxuICAgICAgICAgIG5Jc09kZCA9IGkgJSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgeCA9IHgudGltZXMoeCk7XHJcblxyXG4gICAgICBpZiAoaykge1xyXG4gICAgICAgIGlmICh4LmMgJiYgeC5jLmxlbmd0aCA+IGspIHguYy5sZW5ndGggPSBrO1xyXG4gICAgICB9IGVsc2UgaWYgKGlzTW9kRXhwKSB7XHJcbiAgICAgICAgeCA9IHgubW9kKG0pOyAgICAvL3ggPSB4Lm1pbnVzKGRpdih4LCBtLCAwLCBNT0RVTE9fTU9ERSkudGltZXMobSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzTW9kRXhwKSByZXR1cm4geTtcclxuICAgIGlmIChuSXNOZWcpIHkgPSBPTkUuZGl2KHkpO1xyXG5cclxuICAgIHJldHVybiBtID8geS5tb2QobSkgOiBrID8gcm91bmQoeSwgUE9XX1BSRUNJU0lPTiwgUk9VTkRJTkdfTU9ERSwgbW9yZSkgOiB5O1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIHJvdW5kZWQgdG8gYW4gaW50ZWdlclxyXG4gICAqIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0sIG9yIFJPVU5ESU5HX01PREUgaWYgcm0gaXMgb21pdHRlZC5cclxuICAgKlxyXG4gICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgKlxyXG4gICAqICdbQmlnTnVtYmVyIEVycm9yXSBBcmd1bWVudCB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7cm19J1xyXG4gICAqL1xyXG4gIFAuaW50ZWdlclZhbHVlID0gZnVuY3Rpb24gKHJtKSB7XHJcbiAgICB2YXIgbiA9IG5ldyBCaWdOdW1iZXIodGhpcyk7XHJcbiAgICBpZiAocm0gPT0gbnVsbCkgcm0gPSBST1VORElOR19NT0RFO1xyXG4gICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcbiAgICByZXR1cm4gcm91bmQobiwgbi5lICsgMSwgcm0pO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBlcXVhbCB0byB0aGUgdmFsdWUgb2YgQmlnTnVtYmVyKHksIGIpLFxyXG4gICAqIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICovXHJcbiAgUC5pc0VxdWFsVG8gPSBQLmVxID0gZnVuY3Rpb24gKHksIGIpIHtcclxuICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpID09PSAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBhIGZpbml0ZSBudW1iZXIsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICovXHJcbiAgUC5pc0Zpbml0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAhIXRoaXMuYztcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICogb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKi9cclxuICBQLmlzR3JlYXRlclRoYW4gPSBQLmd0ID0gZnVuY3Rpb24gKHksIGIpIHtcclxuICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpID4gMDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZlxyXG4gICAqIEJpZ051bWJlcih5LCBiKSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKi9cclxuICBQLmlzR3JlYXRlclRoYW5PckVxdWFsVG8gPSBQLmd0ZSA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICByZXR1cm4gKGIgPSBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpKSA9PT0gMSB8fCBiID09PSAwO1xyXG5cclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgYW4gaW50ZWdlciwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKi9cclxuICBQLmlzSW50ZWdlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAhIXRoaXMuYyAmJiBiaXRGbG9vcih0aGlzLmUgLyBMT0dfQkFTRSkgPiB0aGlzLmMubGVuZ3RoIC0gMjtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgbGVzcyB0aGFuIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICogb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKi9cclxuICBQLmlzTGVzc1RoYW4gPSBQLmx0ID0gZnVuY3Rpb24gKHksIGIpIHtcclxuICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpIDwgMDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZlxyXG4gICAqIEJpZ051bWJlcih5LCBiKSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKi9cclxuICBQLmlzTGVzc1RoYW5PckVxdWFsVG8gPSBQLmx0ZSA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICByZXR1cm4gKGIgPSBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpKSA9PT0gLTEgfHwgYiA9PT0gMDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgTmFOLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAqL1xyXG4gIFAuaXNOYU4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMucztcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgbmVnYXRpdmUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICovXHJcbiAgUC5pc05lZ2F0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucyA8IDA7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIHBvc2l0aXZlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAqL1xyXG4gIFAuaXNQb3NpdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnMgPiAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyAwIG9yIC0wLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAqL1xyXG4gIFAuaXNaZXJvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5jICYmIHRoaXMuY1swXSA9PSAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqICBuIC0gMCA9IG5cclxuICAgKiAgbiAtIE4gPSBOXHJcbiAgICogIG4gLSBJID0gLUlcclxuICAgKiAgMCAtIG4gPSAtblxyXG4gICAqICAwIC0gMCA9IDBcclxuICAgKiAgMCAtIE4gPSBOXHJcbiAgICogIDAgLSBJID0gLUlcclxuICAgKiAgTiAtIG4gPSBOXHJcbiAgICogIE4gLSAwID0gTlxyXG4gICAqICBOIC0gTiA9IE5cclxuICAgKiAgTiAtIEkgPSBOXHJcbiAgICogIEkgLSBuID0gSVxyXG4gICAqICBJIC0gMCA9IElcclxuICAgKiAgSSAtIE4gPSBOXHJcbiAgICogIEkgLSBJID0gTlxyXG4gICAqXHJcbiAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgbWludXMgdGhlIHZhbHVlIG9mXHJcbiAgICogQmlnTnVtYmVyKHksIGIpLlxyXG4gICAqL1xyXG4gIFAubWludXMgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgdmFyIGksIGosIHQsIHhMVHksXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBhID0geC5zO1xyXG5cclxuICAgIHkgPSBuZXcgQmlnTnVtYmVyKHksIGIpO1xyXG4gICAgYiA9IHkucztcclxuXHJcbiAgICAvLyBFaXRoZXIgTmFOP1xyXG4gICAgaWYgKCFhIHx8ICFiKSByZXR1cm4gbmV3IEJpZ051bWJlcihOYU4pO1xyXG5cclxuICAgIC8vIFNpZ25zIGRpZmZlcj9cclxuICAgIGlmIChhICE9IGIpIHtcclxuICAgICAgeS5zID0gLWI7XHJcbiAgICAgIHJldHVybiB4LnBsdXMoeSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHhlID0geC5lIC8gTE9HX0JBU0UsXHJcbiAgICAgIHllID0geS5lIC8gTE9HX0JBU0UsXHJcbiAgICAgIHhjID0geC5jLFxyXG4gICAgICB5YyA9IHkuYztcclxuXHJcbiAgICBpZiAoIXhlIHx8ICF5ZSkge1xyXG5cclxuICAgICAgLy8gRWl0aGVyIEluZmluaXR5P1xyXG4gICAgICBpZiAoIXhjIHx8ICF5YykgcmV0dXJuIHhjID8gKHkucyA9IC1iLCB5KSA6IG5ldyBCaWdOdW1iZXIoeWMgPyB4IDogTmFOKTtcclxuXHJcbiAgICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkge1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4geSBpZiB5IGlzIG5vbi16ZXJvLCB4IGlmIHggaXMgbm9uLXplcm8sIG9yIHplcm8gaWYgYm90aCBhcmUgemVyby5cclxuICAgICAgICByZXR1cm4geWNbMF0gPyAoeS5zID0gLWIsIHkpIDogbmV3IEJpZ051bWJlcih4Y1swXSA/IHggOlxyXG5cclxuICAgICAgICAgLy8gSUVFRSA3NTQgKDIwMDgpIDYuMzogbiAtIG4gPSAtMCB3aGVuIHJvdW5kaW5nIHRvIC1JbmZpbml0eVxyXG4gICAgICAgICBST1VORElOR19NT0RFID09IDMgPyAtMCA6IDApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgeGUgPSBiaXRGbG9vcih4ZSk7XHJcbiAgICB5ZSA9IGJpdEZsb29yKHllKTtcclxuICAgIHhjID0geGMuc2xpY2UoKTtcclxuXHJcbiAgICAvLyBEZXRlcm1pbmUgd2hpY2ggaXMgdGhlIGJpZ2dlciBudW1iZXIuXHJcbiAgICBpZiAoYSA9IHhlIC0geWUpIHtcclxuXHJcbiAgICAgIGlmICh4TFR5ID0gYSA8IDApIHtcclxuICAgICAgICBhID0gLWE7XHJcbiAgICAgICAgdCA9IHhjO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHllID0geGU7XHJcbiAgICAgICAgdCA9IHljO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0LnJldmVyc2UoKTtcclxuXHJcbiAgICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLlxyXG4gICAgICBmb3IgKGIgPSBhOyBiLS07IHQucHVzaCgwKSk7XHJcbiAgICAgIHQucmV2ZXJzZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgIC8vIEV4cG9uZW50cyBlcXVhbC4gQ2hlY2sgZGlnaXQgYnkgZGlnaXQuXHJcbiAgICAgIGogPSAoeExUeSA9IChhID0geGMubGVuZ3RoKSA8IChiID0geWMubGVuZ3RoKSkgPyBhIDogYjtcclxuXHJcbiAgICAgIGZvciAoYSA9IGIgPSAwOyBiIDwgajsgYisrKSB7XHJcblxyXG4gICAgICAgIGlmICh4Y1tiXSAhPSB5Y1tiXSkge1xyXG4gICAgICAgICAgeExUeSA9IHhjW2JdIDwgeWNbYl07XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyB4IDwgeT8gUG9pbnQgeGMgdG8gdGhlIGFycmF5IG9mIHRoZSBiaWdnZXIgbnVtYmVyLlxyXG4gICAgaWYgKHhMVHkpIHQgPSB4YywgeGMgPSB5YywgeWMgPSB0LCB5LnMgPSAteS5zO1xyXG5cclxuICAgIGIgPSAoaiA9IHljLmxlbmd0aCkgLSAoaSA9IHhjLmxlbmd0aCk7XHJcblxyXG4gICAgLy8gQXBwZW5kIHplcm9zIHRvIHhjIGlmIHNob3J0ZXIuXHJcbiAgICAvLyBObyBuZWVkIHRvIGFkZCB6ZXJvcyB0byB5YyBpZiBzaG9ydGVyIGFzIHN1YnRyYWN0IG9ubHkgbmVlZHMgdG8gc3RhcnQgYXQgeWMubGVuZ3RoLlxyXG4gICAgaWYgKGIgPiAwKSBmb3IgKDsgYi0tOyB4Y1tpKytdID0gMCk7XHJcbiAgICBiID0gQkFTRSAtIDE7XHJcblxyXG4gICAgLy8gU3VidHJhY3QgeWMgZnJvbSB4Yy5cclxuICAgIGZvciAoOyBqID4gYTspIHtcclxuXHJcbiAgICAgIGlmICh4Y1stLWpdIDwgeWNbal0pIHtcclxuICAgICAgICBmb3IgKGkgPSBqOyBpICYmICF4Y1stLWldOyB4Y1tpXSA9IGIpO1xyXG4gICAgICAgIC0teGNbaV07XHJcbiAgICAgICAgeGNbal0gKz0gQkFTRTtcclxuICAgICAgfVxyXG5cclxuICAgICAgeGNbal0gLT0geWNbal07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIGxlYWRpbmcgemVyb3MgYW5kIGFkanVzdCBleHBvbmVudCBhY2NvcmRpbmdseS5cclxuICAgIGZvciAoOyB4Y1swXSA9PSAwOyB4Yy5zcGxpY2UoMCwgMSksIC0teWUpO1xyXG5cclxuICAgIC8vIFplcm8/XHJcbiAgICBpZiAoIXhjWzBdKSB7XHJcblxyXG4gICAgICAvLyBGb2xsb3dpbmcgSUVFRSA3NTQgKDIwMDgpIDYuMyxcclxuICAgICAgLy8gbiAtIG4gPSArMCAgYnV0ICBuIC0gbiA9IC0wICB3aGVuIHJvdW5kaW5nIHRvd2FyZHMgLUluZmluaXR5LlxyXG4gICAgICB5LnMgPSBST1VORElOR19NT0RFID09IDMgPyAtMSA6IDE7XHJcbiAgICAgIHkuYyA9IFt5LmUgPSAwXTtcclxuICAgICAgcmV0dXJuIHk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm8gbmVlZCB0byBjaGVjayBmb3IgSW5maW5pdHkgYXMgK3ggLSAreSAhPSBJbmZpbml0eSAmJiAteCAtIC15ICE9IEluZmluaXR5XHJcbiAgICAvLyBmb3IgZmluaXRlIHggYW5kIHkuXHJcbiAgICByZXR1cm4gbm9ybWFsaXNlKHksIHhjLCB5ZSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogICBuICUgMCA9ICBOXHJcbiAgICogICBuICUgTiA9ICBOXHJcbiAgICogICBuICUgSSA9ICBuXHJcbiAgICogICAwICUgbiA9ICAwXHJcbiAgICogIC0wICUgbiA9IC0wXHJcbiAgICogICAwICUgMCA9ICBOXHJcbiAgICogICAwICUgTiA9ICBOXHJcbiAgICogICAwICUgSSA9ICAwXHJcbiAgICogICBOICUgbiA9ICBOXHJcbiAgICogICBOICUgMCA9ICBOXHJcbiAgICogICBOICUgTiA9ICBOXHJcbiAgICogICBOICUgSSA9ICBOXHJcbiAgICogICBJICUgbiA9ICBOXHJcbiAgICogICBJICUgMCA9ICBOXHJcbiAgICogICBJICUgTiA9ICBOXHJcbiAgICogICBJICUgSSA9ICBOXHJcbiAgICpcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBtb2R1bG8gdGhlIHZhbHVlIG9mXHJcbiAgICogQmlnTnVtYmVyKHksIGIpLiBUaGUgcmVzdWx0IGRlcGVuZHMgb24gdGhlIHZhbHVlIG9mIE1PRFVMT19NT0RFLlxyXG4gICAqL1xyXG4gIFAubW9kdWxvID0gUC5tb2QgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgdmFyIHEsIHMsXHJcbiAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgIHkgPSBuZXcgQmlnTnVtYmVyKHksIGIpO1xyXG5cclxuICAgIC8vIFJldHVybiBOYU4gaWYgeCBpcyBJbmZpbml0eSBvciBOYU4sIG9yIHkgaXMgTmFOIG9yIHplcm8uXHJcbiAgICBpZiAoIXguYyB8fCAheS5zIHx8IHkuYyAmJiAheS5jWzBdKSB7XHJcbiAgICAgIHJldHVybiBuZXcgQmlnTnVtYmVyKE5hTik7XHJcblxyXG4gICAgLy8gUmV0dXJuIHggaWYgeSBpcyBJbmZpbml0eSBvciB4IGlzIHplcm8uXHJcbiAgICB9IGVsc2UgaWYgKCF5LmMgfHwgeC5jICYmICF4LmNbMF0pIHtcclxuICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoeCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKE1PRFVMT19NT0RFID09IDkpIHtcclxuXHJcbiAgICAgIC8vIEV1Y2xpZGlhbiBkaXZpc2lvbjogcSA9IHNpZ24oeSkgKiBmbG9vcih4IC8gYWJzKHkpKVxyXG4gICAgICAvLyByID0geCAtIHF5ICAgIHdoZXJlICAwIDw9IHIgPCBhYnMoeSlcclxuICAgICAgcyA9IHkucztcclxuICAgICAgeS5zID0gMTtcclxuICAgICAgcSA9IGRpdih4LCB5LCAwLCAzKTtcclxuICAgICAgeS5zID0gcztcclxuICAgICAgcS5zICo9IHM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBxID0gZGl2KHgsIHksIDAsIE1PRFVMT19NT0RFKTtcclxuICAgIH1cclxuXHJcbiAgICB5ID0geC5taW51cyhxLnRpbWVzKHkpKTtcclxuXHJcbiAgICAvLyBUbyBtYXRjaCBKYXZhU2NyaXB0ICUsIGVuc3VyZSBzaWduIG9mIHplcm8gaXMgc2lnbiBvZiBkaXZpZGVuZC5cclxuICAgIGlmICgheS5jWzBdICYmIE1PRFVMT19NT0RFID09IDEpIHkucyA9IHgucztcclxuXHJcbiAgICByZXR1cm4geTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiAgbiAqIDAgPSAwXHJcbiAgICogIG4gKiBOID0gTlxyXG4gICAqICBuICogSSA9IElcclxuICAgKiAgMCAqIG4gPSAwXHJcbiAgICogIDAgKiAwID0gMFxyXG4gICAqICAwICogTiA9IE5cclxuICAgKiAgMCAqIEkgPSBOXHJcbiAgICogIE4gKiBuID0gTlxyXG4gICAqICBOICogMCA9IE5cclxuICAgKiAgTiAqIE4gPSBOXHJcbiAgICogIE4gKiBJID0gTlxyXG4gICAqICBJICogbiA9IElcclxuICAgKiAgSSAqIDAgPSBOXHJcbiAgICogIEkgKiBOID0gTlxyXG4gICAqICBJICogSSA9IElcclxuICAgKlxyXG4gICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG11bHRpcGxpZWQgYnkgdGhlIHZhbHVlXHJcbiAgICogb2YgQmlnTnVtYmVyKHksIGIpLlxyXG4gICAqL1xyXG4gIFAubXVsdGlwbGllZEJ5ID0gUC50aW1lcyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICB2YXIgYywgZSwgaSwgaiwgaywgbSwgeGNMLCB4bG8sIHhoaSwgeWNMLCB5bG8sIHloaSwgemMsXHJcbiAgICAgIGJhc2UsIHNxcnRCYXNlLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgeGMgPSB4LmMsXHJcbiAgICAgIHljID0gKHkgPSBuZXcgQmlnTnVtYmVyKHksIGIpKS5jO1xyXG5cclxuICAgIC8vIEVpdGhlciBOYU4sIMKxSW5maW5pdHkgb3IgwrEwP1xyXG4gICAgaWYgKCF4YyB8fCAheWMgfHwgIXhjWzBdIHx8ICF5Y1swXSkge1xyXG5cclxuICAgICAgLy8gUmV0dXJuIE5hTiBpZiBlaXRoZXIgaXMgTmFOLCBvciBvbmUgaXMgMCBhbmQgdGhlIG90aGVyIGlzIEluZmluaXR5LlxyXG4gICAgICBpZiAoIXgucyB8fCAheS5zIHx8IHhjICYmICF4Y1swXSAmJiAheWMgfHwgeWMgJiYgIXljWzBdICYmICF4Yykge1xyXG4gICAgICAgIHkuYyA9IHkuZSA9IHkucyA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeS5zICo9IHgucztcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIMKxSW5maW5pdHkgaWYgZWl0aGVyIGlzIMKxSW5maW5pdHkuXHJcbiAgICAgICAgaWYgKCF4YyB8fCAheWMpIHtcclxuICAgICAgICAgIHkuYyA9IHkuZSA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiDCsTAgaWYgZWl0aGVyIGlzIMKxMC5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeS5jID0gWzBdO1xyXG4gICAgICAgICAgeS5lID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB5O1xyXG4gICAgfVxyXG5cclxuICAgIGUgPSBiaXRGbG9vcih4LmUgLyBMT0dfQkFTRSkgKyBiaXRGbG9vcih5LmUgLyBMT0dfQkFTRSk7XHJcbiAgICB5LnMgKj0geC5zO1xyXG4gICAgeGNMID0geGMubGVuZ3RoO1xyXG4gICAgeWNMID0geWMubGVuZ3RoO1xyXG5cclxuICAgIC8vIEVuc3VyZSB4YyBwb2ludHMgdG8gbG9uZ2VyIGFycmF5IGFuZCB4Y0wgdG8gaXRzIGxlbmd0aC5cclxuICAgIGlmICh4Y0wgPCB5Y0wpIHpjID0geGMsIHhjID0geWMsIHljID0gemMsIGkgPSB4Y0wsIHhjTCA9IHljTCwgeWNMID0gaTtcclxuXHJcbiAgICAvLyBJbml0aWFsaXNlIHRoZSByZXN1bHQgYXJyYXkgd2l0aCB6ZXJvcy5cclxuICAgIGZvciAoaSA9IHhjTCArIHljTCwgemMgPSBbXTsgaS0tOyB6Yy5wdXNoKDApKTtcclxuXHJcbiAgICBiYXNlID0gQkFTRTtcclxuICAgIHNxcnRCYXNlID0gU1FSVF9CQVNFO1xyXG5cclxuICAgIGZvciAoaSA9IHljTDsgLS1pID49IDA7KSB7XHJcbiAgICAgIGMgPSAwO1xyXG4gICAgICB5bG8gPSB5Y1tpXSAlIHNxcnRCYXNlO1xyXG4gICAgICB5aGkgPSB5Y1tpXSAvIHNxcnRCYXNlIHwgMDtcclxuXHJcbiAgICAgIGZvciAoayA9IHhjTCwgaiA9IGkgKyBrOyBqID4gaTspIHtcclxuICAgICAgICB4bG8gPSB4Y1stLWtdICUgc3FydEJhc2U7XHJcbiAgICAgICAgeGhpID0geGNba10gLyBzcXJ0QmFzZSB8IDA7XHJcbiAgICAgICAgbSA9IHloaSAqIHhsbyArIHhoaSAqIHlsbztcclxuICAgICAgICB4bG8gPSB5bG8gKiB4bG8gKyAoKG0gJSBzcXJ0QmFzZSkgKiBzcXJ0QmFzZSkgKyB6Y1tqXSArIGM7XHJcbiAgICAgICAgYyA9ICh4bG8gLyBiYXNlIHwgMCkgKyAobSAvIHNxcnRCYXNlIHwgMCkgKyB5aGkgKiB4aGk7XHJcbiAgICAgICAgemNbai0tXSA9IHhsbyAlIGJhc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHpjW2pdID0gYztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYykge1xyXG4gICAgICArK2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB6Yy5zcGxpY2UoMCwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5vcm1hbGlzZSh5LCB6YywgZSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgbmVnYXRlZCxcclxuICAgKiBpLmUuIG11bHRpcGxpZWQgYnkgLTEuXHJcbiAgICovXHJcbiAgUC5uZWdhdGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHggPSBuZXcgQmlnTnVtYmVyKHRoaXMpO1xyXG4gICAgeC5zID0gLXgucyB8fCBudWxsO1xyXG4gICAgcmV0dXJuIHg7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogIG4gKyAwID0gblxyXG4gICAqICBuICsgTiA9IE5cclxuICAgKiAgbiArIEkgPSBJXHJcbiAgICogIDAgKyBuID0gblxyXG4gICAqICAwICsgMCA9IDBcclxuICAgKiAgMCArIE4gPSBOXHJcbiAgICogIDAgKyBJID0gSVxyXG4gICAqICBOICsgbiA9IE5cclxuICAgKiAgTiArIDAgPSBOXHJcbiAgICogIE4gKyBOID0gTlxyXG4gICAqICBOICsgSSA9IE5cclxuICAgKiAgSSArIG4gPSBJXHJcbiAgICogIEkgKyAwID0gSVxyXG4gICAqICBJICsgTiA9IE5cclxuICAgKiAgSSArIEkgPSBJXHJcbiAgICpcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBwbHVzIHRoZSB2YWx1ZSBvZlxyXG4gICAqIEJpZ051bWJlcih5LCBiKS5cclxuICAgKi9cclxuICBQLnBsdXMgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgdmFyIHQsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBhID0geC5zO1xyXG5cclxuICAgIHkgPSBuZXcgQmlnTnVtYmVyKHksIGIpO1xyXG4gICAgYiA9IHkucztcclxuXHJcbiAgICAvLyBFaXRoZXIgTmFOP1xyXG4gICAgaWYgKCFhIHx8ICFiKSByZXR1cm4gbmV3IEJpZ051bWJlcihOYU4pO1xyXG5cclxuICAgIC8vIFNpZ25zIGRpZmZlcj9cclxuICAgICBpZiAoYSAhPSBiKSB7XHJcbiAgICAgIHkucyA9IC1iO1xyXG4gICAgICByZXR1cm4geC5taW51cyh5KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgeGUgPSB4LmUgLyBMT0dfQkFTRSxcclxuICAgICAgeWUgPSB5LmUgLyBMT0dfQkFTRSxcclxuICAgICAgeGMgPSB4LmMsXHJcbiAgICAgIHljID0geS5jO1xyXG5cclxuICAgIGlmICgheGUgfHwgIXllKSB7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gwrFJbmZpbml0eSBpZiBlaXRoZXIgwrFJbmZpbml0eS5cclxuICAgICAgaWYgKCF4YyB8fCAheWMpIHJldHVybiBuZXcgQmlnTnVtYmVyKGEgLyAwKTtcclxuXHJcbiAgICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgICAvLyBSZXR1cm4geSBpZiB5IGlzIG5vbi16ZXJvLCB4IGlmIHggaXMgbm9uLXplcm8sIG9yIHplcm8gaWYgYm90aCBhcmUgemVyby5cclxuICAgICAgaWYgKCF4Y1swXSB8fCAheWNbMF0pIHJldHVybiB5Y1swXSA/IHkgOiBuZXcgQmlnTnVtYmVyKHhjWzBdID8geCA6IGEgKiAwKTtcclxuICAgIH1cclxuXHJcbiAgICB4ZSA9IGJpdEZsb29yKHhlKTtcclxuICAgIHllID0gYml0Rmxvb3IoeWUpO1xyXG4gICAgeGMgPSB4Yy5zbGljZSgpO1xyXG5cclxuICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLiBGYXN0ZXIgdG8gdXNlIHJldmVyc2UgdGhlbiBkbyB1bnNoaWZ0cy5cclxuICAgIGlmIChhID0geGUgLSB5ZSkge1xyXG4gICAgICBpZiAoYSA+IDApIHtcclxuICAgICAgICB5ZSA9IHhlO1xyXG4gICAgICAgIHQgPSB5YztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhID0gLWE7XHJcbiAgICAgICAgdCA9IHhjO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgZm9yICg7IGEtLTsgdC5wdXNoKDApKTtcclxuICAgICAgdC5yZXZlcnNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYSA9IHhjLmxlbmd0aDtcclxuICAgIGIgPSB5Yy5sZW5ndGg7XHJcblxyXG4gICAgLy8gUG9pbnQgeGMgdG8gdGhlIGxvbmdlciBhcnJheSwgYW5kIGIgdG8gdGhlIHNob3J0ZXIgbGVuZ3RoLlxyXG4gICAgaWYgKGEgLSBiIDwgMCkgdCA9IHljLCB5YyA9IHhjLCB4YyA9IHQsIGIgPSBhO1xyXG5cclxuICAgIC8vIE9ubHkgc3RhcnQgYWRkaW5nIGF0IHljLmxlbmd0aCAtIDEgYXMgdGhlIGZ1cnRoZXIgZGlnaXRzIG9mIHhjIGNhbiBiZSBpZ25vcmVkLlxyXG4gICAgZm9yIChhID0gMDsgYjspIHtcclxuICAgICAgYSA9ICh4Y1stLWJdID0geGNbYl0gKyB5Y1tiXSArIGEpIC8gQkFTRSB8IDA7XHJcbiAgICAgIHhjW2JdID0gQkFTRSA9PT0geGNbYl0gPyAwIDogeGNbYl0gJSBCQVNFO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhKSB7XHJcbiAgICAgIHhjID0gW2FdLmNvbmNhdCh4Yyk7XHJcbiAgICAgICsreWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm8gbmVlZCB0byBjaGVjayBmb3IgemVybywgYXMgK3ggKyAreSAhPSAwICYmIC14ICsgLXkgIT0gMFxyXG4gICAgLy8geWUgPSBNQVhfRVhQICsgMSBwb3NzaWJsZVxyXG4gICAgcmV0dXJuIG5vcm1hbGlzZSh5LCB4YywgeWUpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIElmIHNkIGlzIHVuZGVmaW5lZCBvciBudWxsIG9yIHRydWUgb3IgZmFsc2UsIHJldHVybiB0aGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGRpZ2l0cyBvZlxyXG4gICAqIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciwgb3IgbnVsbCBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgwrFJbmZpbml0eSBvciBOYU4uXHJcbiAgICogSWYgc2QgaXMgdHJ1ZSBpbmNsdWRlIGludGVnZXItcGFydCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgY291bnQuXHJcbiAgICpcclxuICAgKiBPdGhlcndpc2UsIGlmIHNkIGlzIGEgbnVtYmVyLCByZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzXHJcbiAgICogQmlnTnVtYmVyIHJvdW5kZWQgdG8gYSBtYXhpbXVtIG9mIHNkIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvclxyXG4gICAqIFJPVU5ESU5HX01PREUgaWYgcm0gaXMgb21pdHRlZC5cclxuICAgKlxyXG4gICAqIHNkIHtudW1iZXJ8Ym9vbGVhbn0gbnVtYmVyOiBzaWduaWZpY2FudCBkaWdpdHM6IGludGVnZXIsIDEgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgKiAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW46IHdoZXRoZXIgdG8gY291bnQgaW50ZWdlci1wYXJ0IHRyYWlsaW5nIHplcm9zOiB0cnVlIG9yIGZhbHNlLlxyXG4gICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgKlxyXG4gICAqICdbQmlnTnVtYmVyIEVycm9yXSBBcmd1bWVudCB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7c2R8cm19J1xyXG4gICAqL1xyXG4gIFAucHJlY2lzaW9uID0gUC5zZCA9IGZ1bmN0aW9uIChzZCwgcm0pIHtcclxuICAgIHZhciBjLCBuLCB2LFxyXG4gICAgICB4ID0gdGhpcztcclxuXHJcbiAgICBpZiAoc2QgIT0gbnVsbCAmJiBzZCAhPT0gISFzZCkge1xyXG4gICAgICBpbnRDaGVjayhzZCwgMSwgTUFYKTtcclxuICAgICAgaWYgKHJtID09IG51bGwpIHJtID0gUk9VTkRJTkdfTU9ERTtcclxuICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICByZXR1cm4gcm91bmQobmV3IEJpZ051bWJlcih4KSwgc2QsIHJtKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIShjID0geC5jKSkgcmV0dXJuIG51bGw7XHJcbiAgICB2ID0gYy5sZW5ndGggLSAxO1xyXG4gICAgbiA9IHYgKiBMT0dfQkFTRSArIDE7XHJcblxyXG4gICAgaWYgKHYgPSBjW3ZdKSB7XHJcblxyXG4gICAgICAvLyBTdWJ0cmFjdCB0aGUgbnVtYmVyIG9mIHRyYWlsaW5nIHplcm9zIG9mIHRoZSBsYXN0IGVsZW1lbnQuXHJcbiAgICAgIGZvciAoOyB2ICUgMTAgPT0gMDsgdiAvPSAxMCwgbi0tKTtcclxuXHJcbiAgICAgIC8vIEFkZCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiB0aGUgZmlyc3QgZWxlbWVudC5cclxuICAgICAgZm9yICh2ID0gY1swXTsgdiA+PSAxMDsgdiAvPSAxMCwgbisrKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2QgJiYgeC5lICsgMSA+IG4pIG4gPSB4LmUgKyAxO1xyXG5cclxuICAgIHJldHVybiBuO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIHNoaWZ0ZWQgYnkgayBwbGFjZXNcclxuICAgKiAocG93ZXJzIG9mIDEwKS4gU2hpZnQgdG8gdGhlIHJpZ2h0IGlmIG4gPiAwLCBhbmQgdG8gdGhlIGxlZnQgaWYgbiA8IDAuXHJcbiAgICpcclxuICAgKiBrIHtudW1iZXJ9IEludGVnZXIsIC1NQVhfU0FGRV9JTlRFR0VSIHRvIE1BWF9TQUZFX0lOVEVHRVIgaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtrfSdcclxuICAgKi9cclxuICBQLnNoaWZ0ZWRCeSA9IGZ1bmN0aW9uIChrKSB7XHJcbiAgICBpbnRDaGVjayhrLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUik7XHJcbiAgICByZXR1cm4gdGhpcy50aW1lcygnMWUnICsgayk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogIHNxcnQoLW4pID0gIE5cclxuICAgKiAgc3FydChOKSA9ICBOXHJcbiAgICogIHNxcnQoLUkpID0gIE5cclxuICAgKiAgc3FydChJKSA9ICBJXHJcbiAgICogIHNxcnQoMCkgPSAgMFxyXG4gICAqICBzcXJ0KC0wKSA9IC0wXHJcbiAgICpcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIsXHJcbiAgICogcm91bmRlZCBhY2NvcmRpbmcgdG8gREVDSU1BTF9QTEFDRVMgYW5kIFJPVU5ESU5HX01PREUuXHJcbiAgICovXHJcbiAgUC5zcXVhcmVSb290ID0gUC5zcXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG0sIG4sIHIsIHJlcCwgdCxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIGMgPSB4LmMsXHJcbiAgICAgIHMgPSB4LnMsXHJcbiAgICAgIGUgPSB4LmUsXHJcbiAgICAgIGRwID0gREVDSU1BTF9QTEFDRVMgKyA0LFxyXG4gICAgICBoYWxmID0gbmV3IEJpZ051bWJlcignMC41Jyk7XHJcblxyXG4gICAgLy8gTmVnYXRpdmUvTmFOL0luZmluaXR5L3plcm8/XHJcbiAgICBpZiAocyAhPT0gMSB8fCAhYyB8fCAhY1swXSkge1xyXG4gICAgICByZXR1cm4gbmV3IEJpZ051bWJlcighcyB8fCBzIDwgMCAmJiAoIWMgfHwgY1swXSkgPyBOYU4gOiBjID8geCA6IDEgLyAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsIGVzdGltYXRlLlxyXG4gICAgcyA9IE1hdGguc3FydCgrdmFsdWVPZih4KSk7XHJcblxyXG4gICAgLy8gTWF0aC5zcXJ0IHVuZGVyZmxvdy9vdmVyZmxvdz9cclxuICAgIC8vIFBhc3MgeCB0byBNYXRoLnNxcnQgYXMgaW50ZWdlciwgdGhlbiBhZGp1c3QgdGhlIGV4cG9uZW50IG9mIHRoZSByZXN1bHQuXHJcbiAgICBpZiAocyA9PSAwIHx8IHMgPT0gMSAvIDApIHtcclxuICAgICAgbiA9IGNvZWZmVG9TdHJpbmcoYyk7XHJcbiAgICAgIGlmICgobi5sZW5ndGggKyBlKSAlIDIgPT0gMCkgbiArPSAnMCc7XHJcbiAgICAgIHMgPSBNYXRoLnNxcnQoK24pO1xyXG4gICAgICBlID0gYml0Rmxvb3IoKGUgKyAxKSAvIDIpIC0gKGUgPCAwIHx8IGUgJSAyKTtcclxuXHJcbiAgICAgIGlmIChzID09IDEgLyAwKSB7XHJcbiAgICAgICAgbiA9ICc1ZScgKyBlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG4gPSBzLnRvRXhwb25lbnRpYWwoKTtcclxuICAgICAgICBuID0gbi5zbGljZSgwLCBuLmluZGV4T2YoJ2UnKSArIDEpICsgZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgciA9IG5ldyBCaWdOdW1iZXIobik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByID0gbmV3IEJpZ051bWJlcihzICsgJycpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGZvciB6ZXJvLlxyXG4gICAgLy8gciBjb3VsZCBiZSB6ZXJvIGlmIE1JTl9FWFAgaXMgY2hhbmdlZCBhZnRlciB0aGUgdGhpcyB2YWx1ZSB3YXMgY3JlYXRlZC5cclxuICAgIC8vIFRoaXMgd291bGQgY2F1c2UgYSBkaXZpc2lvbiBieSB6ZXJvICh4L3QpIGFuZCBoZW5jZSBJbmZpbml0eSBiZWxvdywgd2hpY2ggd291bGQgY2F1c2VcclxuICAgIC8vIGNvZWZmVG9TdHJpbmcgdG8gdGhyb3cuXHJcbiAgICBpZiAoci5jWzBdKSB7XHJcbiAgICAgIGUgPSByLmU7XHJcbiAgICAgIHMgPSBlICsgZHA7XHJcbiAgICAgIGlmIChzIDwgMykgcyA9IDA7XHJcblxyXG4gICAgICAvLyBOZXd0b24tUmFwaHNvbiBpdGVyYXRpb24uXHJcbiAgICAgIGZvciAoOyA7KSB7XHJcbiAgICAgICAgdCA9IHI7XHJcbiAgICAgICAgciA9IGhhbGYudGltZXModC5wbHVzKGRpdih4LCB0LCBkcCwgMSkpKTtcclxuXHJcbiAgICAgICAgaWYgKGNvZWZmVG9TdHJpbmcodC5jKS5zbGljZSgwLCBzKSA9PT0gKG4gPSBjb2VmZlRvU3RyaW5nKHIuYykpLnNsaWNlKDAsIHMpKSB7XHJcblxyXG4gICAgICAgICAgLy8gVGhlIGV4cG9uZW50IG9mIHIgbWF5IGhlcmUgYmUgb25lIGxlc3MgdGhhbiB0aGUgZmluYWwgcmVzdWx0IGV4cG9uZW50LFxyXG4gICAgICAgICAgLy8gZS5nIDAuMDAwOTk5OSAoZS00KSAtLT4gMC4wMDEgKGUtMyksIHNvIGFkanVzdCBzIHNvIHRoZSByb3VuZGluZyBkaWdpdHNcclxuICAgICAgICAgIC8vIGFyZSBpbmRleGVkIGNvcnJlY3RseS5cclxuICAgICAgICAgIGlmIChyLmUgPCBlKSAtLXM7XHJcbiAgICAgICAgICBuID0gbi5zbGljZShzIC0gMywgcyArIDEpO1xyXG5cclxuICAgICAgICAgIC8vIFRoZSA0dGggcm91bmRpbmcgZGlnaXQgbWF5IGJlIGluIGVycm9yIGJ5IC0xIHNvIGlmIHRoZSA0IHJvdW5kaW5nIGRpZ2l0c1xyXG4gICAgICAgICAgLy8gYXJlIDk5OTkgb3IgNDk5OSAoaS5lLiBhcHByb2FjaGluZyBhIHJvdW5kaW5nIGJvdW5kYXJ5KSBjb250aW51ZSB0aGVcclxuICAgICAgICAgIC8vIGl0ZXJhdGlvbi5cclxuICAgICAgICAgIGlmIChuID09ICc5OTk5JyB8fCAhcmVwICYmIG4gPT0gJzQ5OTknKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBPbiB0aGUgZmlyc3QgaXRlcmF0aW9uIG9ubHksIGNoZWNrIHRvIHNlZSBpZiByb3VuZGluZyB1cCBnaXZlcyB0aGVcclxuICAgICAgICAgICAgLy8gZXhhY3QgcmVzdWx0IGFzIHRoZSBuaW5lcyBtYXkgaW5maW5pdGVseSByZXBlYXQuXHJcbiAgICAgICAgICAgIGlmICghcmVwKSB7XHJcbiAgICAgICAgICAgICAgcm91bmQodCwgdC5lICsgREVDSU1BTF9QTEFDRVMgKyAyLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHQudGltZXModCkuZXEoeCkpIHtcclxuICAgICAgICAgICAgICAgIHIgPSB0O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkcCArPSA0O1xyXG4gICAgICAgICAgICBzICs9IDQ7XHJcbiAgICAgICAgICAgIHJlcCA9IDE7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgcm91bmRpbmcgZGlnaXRzIGFyZSBudWxsLCAwezAsNH0gb3IgNTB7MCwzfSwgY2hlY2sgZm9yIGV4YWN0XHJcbiAgICAgICAgICAgIC8vIHJlc3VsdC4gSWYgbm90LCB0aGVuIHRoZXJlIGFyZSBmdXJ0aGVyIGRpZ2l0cyBhbmQgbSB3aWxsIGJlIHRydXRoeS5cclxuICAgICAgICAgICAgaWYgKCErbiB8fCAhK24uc2xpY2UoMSkgJiYgbi5jaGFyQXQoMCkgPT0gJzUnKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIFRydW5jYXRlIHRvIHRoZSBmaXJzdCByb3VuZGluZyBkaWdpdC5cclxuICAgICAgICAgICAgICByb3VuZChyLCByLmUgKyBERUNJTUFMX1BMQUNFUyArIDIsIDEpO1xyXG4gICAgICAgICAgICAgIG0gPSAhci50aW1lcyhyKS5lcSh4KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJvdW5kKHIsIHIuZSArIERFQ0lNQUxfUExBQ0VTICsgMSwgUk9VTkRJTkdfTU9ERSwgbSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaW4gZXhwb25lbnRpYWwgbm90YXRpb24gYW5kXHJcbiAgICogcm91bmRlZCB1c2luZyBST1VORElOR19NT0RFIHRvIGRwIGZpeGVkIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAqXHJcbiAgICogW2RwXSB7bnVtYmVyfSBEZWNpbWFsIHBsYWNlcy4gSW50ZWdlciwgMCB0byBNQVggaW5jbHVzaXZlLlxyXG4gICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgKlxyXG4gICAqICdbQmlnTnVtYmVyIEVycm9yXSBBcmd1bWVudCB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7ZHB8cm19J1xyXG4gICAqL1xyXG4gIFAudG9FeHBvbmVudGlhbCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgIGlmIChkcCAhPSBudWxsKSB7XHJcbiAgICAgIGludENoZWNrKGRwLCAwLCBNQVgpO1xyXG4gICAgICBkcCsrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZvcm1hdCh0aGlzLCBkcCwgcm0sIDEpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGZpeGVkLXBvaW50IG5vdGF0aW9uIHJvdW5kaW5nXHJcbiAgICogdG8gZHAgZml4ZWQgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBybSwgb3IgUk9VTkRJTkdfTU9ERSBpZiBybSBpcyBvbWl0dGVkLlxyXG4gICAqXHJcbiAgICogTm90ZTogYXMgd2l0aCBKYXZhU2NyaXB0J3MgbnVtYmVyIHR5cGUsICgtMCkudG9GaXhlZCgwKSBpcyAnMCcsXHJcbiAgICogYnV0IGUuZy4gKC0wLjAwMDAxKS50b0ZpeGVkKDApIGlzICctMCcuXHJcbiAgICpcclxuICAgKiBbZHBdIHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzLiBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtkcHxybX0nXHJcbiAgICovXHJcbiAgUC50b0ZpeGVkID0gZnVuY3Rpb24gKGRwLCBybSkge1xyXG4gICAgaWYgKGRwICE9IG51bGwpIHtcclxuICAgICAgaW50Q2hlY2soZHAsIDAsIE1BWCk7XHJcbiAgICAgIGRwID0gZHAgKyB0aGlzLmUgKyAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZvcm1hdCh0aGlzLCBkcCwgcm0pO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGZpeGVkLXBvaW50IG5vdGF0aW9uIHJvdW5kZWRcclxuICAgKiB1c2luZyBybSBvciBST1VORElOR19NT0RFIHRvIGRwIGRlY2ltYWwgcGxhY2VzLCBhbmQgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgcHJvcGVydGllc1xyXG4gICAqIG9mIHRoZSBmb3JtYXQgb3IgRk9STUFUIG9iamVjdCAoc2VlIEJpZ051bWJlci5zZXQpLlxyXG4gICAqXHJcbiAgICogVGhlIGZvcm1hdHRpbmcgb2JqZWN0IG1heSBjb250YWluIHNvbWUgb3IgYWxsIG9mIHRoZSBwcm9wZXJ0aWVzIHNob3duIGJlbG93LlxyXG4gICAqXHJcbiAgICogRk9STUFUID0ge1xyXG4gICAqICAgcHJlZml4OiAnJyxcclxuICAgKiAgIGdyb3VwU2l6ZTogMyxcclxuICAgKiAgIHNlY29uZGFyeUdyb3VwU2l6ZTogMCxcclxuICAgKiAgIGdyb3VwU2VwYXJhdG9yOiAnLCcsXHJcbiAgICogICBkZWNpbWFsU2VwYXJhdG9yOiAnLicsXHJcbiAgICogICBmcmFjdGlvbkdyb3VwU2l6ZTogMCxcclxuICAgKiAgIGZyYWN0aW9uR3JvdXBTZXBhcmF0b3I6ICdcXHhBMCcsICAgICAgLy8gbm9uLWJyZWFraW5nIHNwYWNlXHJcbiAgICogICBzdWZmaXg6ICcnXHJcbiAgICogfTtcclxuICAgKlxyXG4gICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICogW2Zvcm1hdF0ge29iamVjdH0gRm9ybWF0dGluZyBvcHRpb25zLiBTZWUgRk9STUFUIHBiamVjdCBhYm92ZS5cclxuICAgKlxyXG4gICAqICdbQmlnTnVtYmVyIEVycm9yXSBBcmd1bWVudCB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7ZHB8cm19J1xyXG4gICAqICdbQmlnTnVtYmVyIEVycm9yXSBBcmd1bWVudCBub3QgYW4gb2JqZWN0OiB7Zm9ybWF0fSdcclxuICAgKi9cclxuICBQLnRvRm9ybWF0ID0gZnVuY3Rpb24gKGRwLCBybSwgZm9ybWF0KSB7XHJcbiAgICB2YXIgc3RyLFxyXG4gICAgICB4ID0gdGhpcztcclxuXHJcbiAgICBpZiAoZm9ybWF0ID09IG51bGwpIHtcclxuICAgICAgaWYgKGRwICE9IG51bGwgJiYgcm0gJiYgdHlwZW9mIHJtID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgZm9ybWF0ID0gcm07XHJcbiAgICAgICAgcm0gPSBudWxsO1xyXG4gICAgICB9IGVsc2UgaWYgKGRwICYmIHR5cGVvZiBkcCA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGZvcm1hdCA9IGRwO1xyXG4gICAgICAgIGRwID0gcm0gPSBudWxsO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvcm1hdCA9IEZPUk1BVDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZm9ybWF0ICE9ICdvYmplY3QnKSB7XHJcbiAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ0FyZ3VtZW50IG5vdCBhbiBvYmplY3Q6ICcgKyBmb3JtYXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0ciA9IHgudG9GaXhlZChkcCwgcm0pO1xyXG5cclxuICAgIGlmICh4LmMpIHtcclxuICAgICAgdmFyIGksXHJcbiAgICAgICAgYXJyID0gc3RyLnNwbGl0KCcuJyksXHJcbiAgICAgICAgZzEgPSArZm9ybWF0Lmdyb3VwU2l6ZSxcclxuICAgICAgICBnMiA9ICtmb3JtYXQuc2Vjb25kYXJ5R3JvdXBTaXplLFxyXG4gICAgICAgIGdyb3VwU2VwYXJhdG9yID0gZm9ybWF0Lmdyb3VwU2VwYXJhdG9yIHx8ICcnLFxyXG4gICAgICAgIGludFBhcnQgPSBhcnJbMF0sXHJcbiAgICAgICAgZnJhY3Rpb25QYXJ0ID0gYXJyWzFdLFxyXG4gICAgICAgIGlzTmVnID0geC5zIDwgMCxcclxuICAgICAgICBpbnREaWdpdHMgPSBpc05lZyA/IGludFBhcnQuc2xpY2UoMSkgOiBpbnRQYXJ0LFxyXG4gICAgICAgIGxlbiA9IGludERpZ2l0cy5sZW5ndGg7XHJcblxyXG4gICAgICBpZiAoZzIpIGkgPSBnMSwgZzEgPSBnMiwgZzIgPSBpLCBsZW4gLT0gaTtcclxuXHJcbiAgICAgIGlmIChnMSA+IDAgJiYgbGVuID4gMCkge1xyXG4gICAgICAgIGkgPSBsZW4gJSBnMSB8fCBnMTtcclxuICAgICAgICBpbnRQYXJ0ID0gaW50RGlnaXRzLnN1YnN0cigwLCBpKTtcclxuICAgICAgICBmb3IgKDsgaSA8IGxlbjsgaSArPSBnMSkgaW50UGFydCArPSBncm91cFNlcGFyYXRvciArIGludERpZ2l0cy5zdWJzdHIoaSwgZzEpO1xyXG4gICAgICAgIGlmIChnMiA+IDApIGludFBhcnQgKz0gZ3JvdXBTZXBhcmF0b3IgKyBpbnREaWdpdHMuc2xpY2UoaSk7XHJcbiAgICAgICAgaWYgKGlzTmVnKSBpbnRQYXJ0ID0gJy0nICsgaW50UGFydDtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3RyID0gZnJhY3Rpb25QYXJ0XHJcbiAgICAgICA/IGludFBhcnQgKyAoZm9ybWF0LmRlY2ltYWxTZXBhcmF0b3IgfHwgJycpICsgKChnMiA9ICtmb3JtYXQuZnJhY3Rpb25Hcm91cFNpemUpXHJcbiAgICAgICAgPyBmcmFjdGlvblBhcnQucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcZHsnICsgZzIgKyAnfVxcXFxCJywgJ2cnKSxcclxuICAgICAgICAgJyQmJyArIChmb3JtYXQuZnJhY3Rpb25Hcm91cFNlcGFyYXRvciB8fCAnJykpXHJcbiAgICAgICAgOiBmcmFjdGlvblBhcnQpXHJcbiAgICAgICA6IGludFBhcnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChmb3JtYXQucHJlZml4IHx8ICcnKSArIHN0ciArIChmb3JtYXQuc3VmZml4IHx8ICcnKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgdHdvIEJpZ051bWJlcnMgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBhcyBhIHNpbXBsZVxyXG4gICAqIGZyYWN0aW9uIHdpdGggYW4gaW50ZWdlciBudW1lcmF0b3IgYW5kIGFuIGludGVnZXIgZGVub21pbmF0b3IuXHJcbiAgICogVGhlIGRlbm9taW5hdG9yIHdpbGwgYmUgYSBwb3NpdGl2ZSBub24temVybyB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNwZWNpZmllZFxyXG4gICAqIG1heGltdW0gZGVub21pbmF0b3IuIElmIGEgbWF4aW11bSBkZW5vbWluYXRvciBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgZGVub21pbmF0b3Igd2lsbCBiZVxyXG4gICAqIHRoZSBsb3dlc3QgdmFsdWUgbmVjZXNzYXJ5IHRvIHJlcHJlc2VudCB0aGUgbnVtYmVyIGV4YWN0bHkuXHJcbiAgICpcclxuICAgKiBbbWRdIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn0gSW50ZWdlciA+PSAxLCBvciBJbmZpbml0eS4gVGhlIG1heGltdW0gZGVub21pbmF0b3IuXHJcbiAgICpcclxuICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX0gOiB7bWR9J1xyXG4gICAqL1xyXG4gIFAudG9GcmFjdGlvbiA9IGZ1bmN0aW9uIChtZCkge1xyXG4gICAgdmFyIGQsIGQwLCBkMSwgZDIsIGUsIGV4cCwgbiwgbjAsIG4xLCBxLCByLCBzLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgeGMgPSB4LmM7XHJcblxyXG4gICAgaWYgKG1kICE9IG51bGwpIHtcclxuICAgICAgbiA9IG5ldyBCaWdOdW1iZXIobWQpO1xyXG5cclxuICAgICAgLy8gVGhyb3cgaWYgbWQgaXMgbGVzcyB0aGFuIG9uZSBvciBpcyBub3QgYW4gaW50ZWdlciwgdW5sZXNzIGl0IGlzIEluZmluaXR5LlxyXG4gICAgICBpZiAoIW4uaXNJbnRlZ2VyKCkgJiYgKG4uYyB8fCBuLnMgIT09IDEpIHx8IG4ubHQoT05FKSkge1xyXG4gICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyAnQXJndW1lbnQgJyArXHJcbiAgICAgICAgICAgIChuLmlzSW50ZWdlcigpID8gJ291dCBvZiByYW5nZTogJyA6ICdub3QgYW4gaW50ZWdlcjogJykgKyB2YWx1ZU9mKG4pKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICgheGMpIHJldHVybiBuZXcgQmlnTnVtYmVyKHgpO1xyXG5cclxuICAgIGQgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICBuMSA9IGQwID0gbmV3IEJpZ051bWJlcihPTkUpO1xyXG4gICAgZDEgPSBuMCA9IG5ldyBCaWdOdW1iZXIoT05FKTtcclxuICAgIHMgPSBjb2VmZlRvU3RyaW5nKHhjKTtcclxuXHJcbiAgICAvLyBEZXRlcm1pbmUgaW5pdGlhbCBkZW5vbWluYXRvci5cclxuICAgIC8vIGQgaXMgYSBwb3dlciBvZiAxMCBhbmQgdGhlIG1pbmltdW0gbWF4IGRlbm9taW5hdG9yIHRoYXQgc3BlY2lmaWVzIHRoZSB2YWx1ZSBleGFjdGx5LlxyXG4gICAgZSA9IGQuZSA9IHMubGVuZ3RoIC0geC5lIC0gMTtcclxuICAgIGQuY1swXSA9IFBPV1NfVEVOWyhleHAgPSBlICUgTE9HX0JBU0UpIDwgMCA/IExPR19CQVNFICsgZXhwIDogZXhwXTtcclxuICAgIG1kID0gIW1kIHx8IG4uY29tcGFyZWRUbyhkKSA+IDAgPyAoZSA+IDAgPyBkIDogbjEpIDogbjtcclxuXHJcbiAgICBleHAgPSBNQVhfRVhQO1xyXG4gICAgTUFYX0VYUCA9IDEgLyAwO1xyXG4gICAgbiA9IG5ldyBCaWdOdW1iZXIocyk7XHJcblxyXG4gICAgLy8gbjAgPSBkMSA9IDBcclxuICAgIG4wLmNbMF0gPSAwO1xyXG5cclxuICAgIGZvciAoOyA7KSAge1xyXG4gICAgICBxID0gZGl2KG4sIGQsIDAsIDEpO1xyXG4gICAgICBkMiA9IGQwLnBsdXMocS50aW1lcyhkMSkpO1xyXG4gICAgICBpZiAoZDIuY29tcGFyZWRUbyhtZCkgPT0gMSkgYnJlYWs7XHJcbiAgICAgIGQwID0gZDE7XHJcbiAgICAgIGQxID0gZDI7XHJcbiAgICAgIG4xID0gbjAucGx1cyhxLnRpbWVzKGQyID0gbjEpKTtcclxuICAgICAgbjAgPSBkMjtcclxuICAgICAgZCA9IG4ubWludXMocS50aW1lcyhkMiA9IGQpKTtcclxuICAgICAgbiA9IGQyO1xyXG4gICAgfVxyXG5cclxuICAgIGQyID0gZGl2KG1kLm1pbnVzKGQwKSwgZDEsIDAsIDEpO1xyXG4gICAgbjAgPSBuMC5wbHVzKGQyLnRpbWVzKG4xKSk7XHJcbiAgICBkMCA9IGQwLnBsdXMoZDIudGltZXMoZDEpKTtcclxuICAgIG4wLnMgPSBuMS5zID0geC5zO1xyXG4gICAgZSA9IGUgKiAyO1xyXG5cclxuICAgIC8vIERldGVybWluZSB3aGljaCBmcmFjdGlvbiBpcyBjbG9zZXIgdG8geCwgbjAvZDAgb3IgbjEvZDFcclxuICAgIHIgPSBkaXYobjEsIGQxLCBlLCBST1VORElOR19NT0RFKS5taW51cyh4KS5hYnMoKS5jb21wYXJlZFRvKFxyXG4gICAgICAgIGRpdihuMCwgZDAsIGUsIFJPVU5ESU5HX01PREUpLm1pbnVzKHgpLmFicygpKSA8IDEgPyBbbjEsIGQxXSA6IFtuMCwgZDBdO1xyXG5cclxuICAgIE1BWF9FWFAgPSBleHA7XHJcblxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBjb252ZXJ0ZWQgdG8gYSBudW1iZXIgcHJpbWl0aXZlLlxyXG4gICAqL1xyXG4gIFAudG9OdW1iZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gK3ZhbHVlT2YodGhpcyk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgcm91bmRlZCB0byBzZCBzaWduaWZpY2FudCBkaWdpdHNcclxuICAgKiB1c2luZyByb3VuZGluZyBtb2RlIHJtIG9yIFJPVU5ESU5HX01PREUuIElmIHNkIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0c1xyXG4gICAqIG5lY2Vzc2FyeSB0byByZXByZXNlbnQgdGhlIGludGVnZXIgcGFydCBvZiB0aGUgdmFsdWUgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24sIHRoZW4gdXNlXHJcbiAgICogZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICpcclxuICAgKiBbc2RdIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0cy4gSW50ZWdlciwgMSB0byBNQVggaW5jbHVzaXZlLlxyXG4gICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgKlxyXG4gICAqICdbQmlnTnVtYmVyIEVycm9yXSBBcmd1bWVudCB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7c2R8cm19J1xyXG4gICAqL1xyXG4gIFAudG9QcmVjaXNpb24gPSBmdW5jdGlvbiAoc2QsIHJtKSB7XHJcbiAgICBpZiAoc2QgIT0gbnVsbCkgaW50Q2hlY2soc2QsIDEsIE1BWCk7XHJcbiAgICByZXR1cm4gZm9ybWF0KHRoaXMsIHNkLCBybSwgMik7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaW4gYmFzZSBiLCBvciBiYXNlIDEwIGlmIGIgaXNcclxuICAgKiBvbWl0dGVkLiBJZiBhIGJhc2UgaXMgc3BlY2lmaWVkLCBpbmNsdWRpbmcgYmFzZSAxMCwgcm91bmQgYWNjb3JkaW5nIHRvIERFQ0lNQUxfUExBQ0VTIGFuZFxyXG4gICAqIFJPVU5ESU5HX01PREUuIElmIGEgYmFzZSBpcyBub3Qgc3BlY2lmaWVkLCBhbmQgdGhpcyBCaWdOdW1iZXIgaGFzIGEgcG9zaXRpdmUgZXhwb25lbnRcclxuICAgKiB0aGF0IGlzIGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhbiBUT19FWFBfUE9TLCBvciBhIG5lZ2F0aXZlIGV4cG9uZW50IGVxdWFsIHRvIG9yIGxlc3MgdGhhblxyXG4gICAqIFRPX0VYUF9ORUcsIHJldHVybiBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgKlxyXG4gICAqIFtiXSB7bnVtYmVyfSBJbnRlZ2VyLCAyIHRvIEFMUEhBQkVULmxlbmd0aCBpbmNsdXNpdmUuXHJcbiAgICpcclxuICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQmFzZSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7Yn0nXHJcbiAgICovXHJcbiAgUC50b1N0cmluZyA9IGZ1bmN0aW9uIChiKSB7XHJcbiAgICB2YXIgc3RyLFxyXG4gICAgICBuID0gdGhpcyxcclxuICAgICAgcyA9IG4ucyxcclxuICAgICAgZSA9IG4uZTtcclxuXHJcbiAgICAvLyBJbmZpbml0eSBvciBOYU4/XHJcbiAgICBpZiAoZSA9PT0gbnVsbCkge1xyXG4gICAgICBpZiAocykge1xyXG4gICAgICAgIHN0ciA9ICdJbmZpbml0eSc7XHJcbiAgICAgICAgaWYgKHMgPCAwKSBzdHIgPSAnLScgKyBzdHI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RyID0gJ05hTic7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChiID09IG51bGwpIHtcclxuICAgICAgICBzdHIgPSBlIDw9IFRPX0VYUF9ORUcgfHwgZSA+PSBUT19FWFBfUE9TXHJcbiAgICAgICAgID8gdG9FeHBvbmVudGlhbChjb2VmZlRvU3RyaW5nKG4uYyksIGUpXHJcbiAgICAgICAgIDogdG9GaXhlZFBvaW50KGNvZWZmVG9TdHJpbmcobi5jKSwgZSwgJzAnKTtcclxuICAgICAgfSBlbHNlIGlmIChiID09PSAxMCAmJiBhbHBoYWJldEhhc05vcm1hbERlY2ltYWxEaWdpdHMpIHtcclxuICAgICAgICBuID0gcm91bmQobmV3IEJpZ051bWJlcihuKSwgREVDSU1BTF9QTEFDRVMgKyBlICsgMSwgUk9VTkRJTkdfTU9ERSk7XHJcbiAgICAgICAgc3RyID0gdG9GaXhlZFBvaW50KGNvZWZmVG9TdHJpbmcobi5jKSwgbi5lLCAnMCcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGludENoZWNrKGIsIDIsIEFMUEhBQkVULmxlbmd0aCwgJ0Jhc2UnKTtcclxuICAgICAgICBzdHIgPSBjb252ZXJ0QmFzZSh0b0ZpeGVkUG9pbnQoY29lZmZUb1N0cmluZyhuLmMpLCBlLCAnMCcpLCAxMCwgYiwgcywgdHJ1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzIDwgMCAmJiBuLmNbMF0pIHN0ciA9ICctJyArIHN0cjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RyO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhcyB0b1N0cmluZywgYnV0IGRvIG5vdCBhY2NlcHQgYSBiYXNlIGFyZ3VtZW50LCBhbmQgaW5jbHVkZSB0aGUgbWludXMgc2lnbiBmb3JcclxuICAgKiBuZWdhdGl2ZSB6ZXJvLlxyXG4gICAqL1xyXG4gIFAudmFsdWVPZiA9IFAudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHZhbHVlT2YodGhpcyk7XHJcbiAgfTtcclxuXHJcblxyXG4gIFAuX2lzQmlnTnVtYmVyID0gdHJ1ZTtcclxuXHJcbiAgUFtTeW1ib2wudG9TdHJpbmdUYWddID0gJ0JpZ051bWJlcic7XHJcblxyXG4gIC8vIE5vZGUuanMgdjEwLjEyLjArXHJcbiAgUFtTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IFAudmFsdWVPZjtcclxuXHJcbiAgaWYgKGNvbmZpZ09iamVjdCAhPSBudWxsKSBCaWdOdW1iZXIuc2V0KGNvbmZpZ09iamVjdCk7XHJcblxyXG4gIHJldHVybiBCaWdOdW1iZXI7XHJcbn1cclxuXHJcblxyXG4vLyBQUklWQVRFIEhFTFBFUiBGVU5DVElPTlNcclxuXHJcbi8vIFRoZXNlIGZ1bmN0aW9ucyBkb24ndCBuZWVkIGFjY2VzcyB0byB2YXJpYWJsZXMsXHJcbi8vIGUuZy4gREVDSU1BTF9QTEFDRVMsIGluIHRoZSBzY29wZSBvZiB0aGUgYGNsb25lYCBmdW5jdGlvbiBhYm92ZS5cclxuXHJcblxyXG5mdW5jdGlvbiBiaXRGbG9vcihuKSB7XHJcbiAgdmFyIGkgPSBuIHwgMDtcclxuICByZXR1cm4gbiA+IDAgfHwgbiA9PT0gaSA/IGkgOiBpIC0gMTtcclxufVxyXG5cclxuXHJcbi8vIFJldHVybiBhIGNvZWZmaWNpZW50IGFycmF5IGFzIGEgc3RyaW5nIG9mIGJhc2UgMTAgZGlnaXRzLlxyXG5mdW5jdGlvbiBjb2VmZlRvU3RyaW5nKGEpIHtcclxuICB2YXIgcywgeixcclxuICAgIGkgPSAxLFxyXG4gICAgaiA9IGEubGVuZ3RoLFxyXG4gICAgciA9IGFbMF0gKyAnJztcclxuXHJcbiAgZm9yICg7IGkgPCBqOykge1xyXG4gICAgcyA9IGFbaSsrXSArICcnO1xyXG4gICAgeiA9IExPR19CQVNFIC0gcy5sZW5ndGg7XHJcbiAgICBmb3IgKDsgei0tOyBzID0gJzAnICsgcyk7XHJcbiAgICByICs9IHM7XHJcbiAgfVxyXG5cclxuICAvLyBEZXRlcm1pbmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgZm9yIChqID0gci5sZW5ndGg7IHIuY2hhckNvZGVBdCgtLWopID09PSA0ODspO1xyXG5cclxuICByZXR1cm4gci5zbGljZSgwLCBqICsgMSB8fCAxKTtcclxufVxyXG5cclxuXHJcbi8vIENvbXBhcmUgdGhlIHZhbHVlIG9mIEJpZ051bWJlcnMgeCBhbmQgeS5cclxuZnVuY3Rpb24gY29tcGFyZSh4LCB5KSB7XHJcbiAgdmFyIGEsIGIsXHJcbiAgICB4YyA9IHguYyxcclxuICAgIHljID0geS5jLFxyXG4gICAgaSA9IHgucyxcclxuICAgIGogPSB5LnMsXHJcbiAgICBrID0geC5lLFxyXG4gICAgbCA9IHkuZTtcclxuXHJcbiAgLy8gRWl0aGVyIE5hTj9cclxuICBpZiAoIWkgfHwgIWopIHJldHVybiBudWxsO1xyXG5cclxuICBhID0geGMgJiYgIXhjWzBdO1xyXG4gIGIgPSB5YyAmJiAheWNbMF07XHJcblxyXG4gIC8vIEVpdGhlciB6ZXJvP1xyXG4gIGlmIChhIHx8IGIpIHJldHVybiBhID8gYiA/IDAgOiAtaiA6IGk7XHJcblxyXG4gIC8vIFNpZ25zIGRpZmZlcj9cclxuICBpZiAoaSAhPSBqKSByZXR1cm4gaTtcclxuXHJcbiAgYSA9IGkgPCAwO1xyXG4gIGIgPSBrID09IGw7XHJcblxyXG4gIC8vIEVpdGhlciBJbmZpbml0eT9cclxuICBpZiAoIXhjIHx8ICF5YykgcmV0dXJuIGIgPyAwIDogIXhjIF4gYSA/IDEgOiAtMTtcclxuXHJcbiAgLy8gQ29tcGFyZSBleHBvbmVudHMuXHJcbiAgaWYgKCFiKSByZXR1cm4gayA+IGwgXiBhID8gMSA6IC0xO1xyXG5cclxuICBqID0gKGsgPSB4Yy5sZW5ndGgpIDwgKGwgPSB5Yy5sZW5ndGgpID8gayA6IGw7XHJcblxyXG4gIC8vIENvbXBhcmUgZGlnaXQgYnkgZGlnaXQuXHJcbiAgZm9yIChpID0gMDsgaSA8IGo7IGkrKykgaWYgKHhjW2ldICE9IHljW2ldKSByZXR1cm4geGNbaV0gPiB5Y1tpXSBeIGEgPyAxIDogLTE7XHJcblxyXG4gIC8vIENvbXBhcmUgbGVuZ3Rocy5cclxuICByZXR1cm4gayA9PSBsID8gMCA6IGsgPiBsIF4gYSA/IDEgOiAtMTtcclxufVxyXG5cclxuXHJcbi8qXHJcbiAqIENoZWNrIHRoYXQgbiBpcyBhIHByaW1pdGl2ZSBudW1iZXIsIGFuIGludGVnZXIsIGFuZCBpbiByYW5nZSwgb3RoZXJ3aXNlIHRocm93LlxyXG4gKi9cclxuZnVuY3Rpb24gaW50Q2hlY2sobiwgbWluLCBtYXgsIG5hbWUpIHtcclxuICBpZiAobiA8IG1pbiB8fCBuID4gbWF4IHx8IG4gIT09IG1hdGhmbG9vcihuKSkge1xyXG4gICAgdGhyb3cgRXJyb3JcclxuICAgICAoYmlnbnVtYmVyRXJyb3IgKyAobmFtZSB8fCAnQXJndW1lbnQnKSArICh0eXBlb2YgbiA9PSAnbnVtYmVyJ1xyXG4gICAgICAgPyBuIDwgbWluIHx8IG4gPiBtYXggPyAnIG91dCBvZiByYW5nZTogJyA6ICcgbm90IGFuIGludGVnZXI6ICdcclxuICAgICAgIDogJyBub3QgYSBwcmltaXRpdmUgbnVtYmVyOiAnKSArIFN0cmluZyhuKSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8gQXNzdW1lcyBmaW5pdGUgbi5cclxuZnVuY3Rpb24gaXNPZGQobikge1xyXG4gIHZhciBrID0gbi5jLmxlbmd0aCAtIDE7XHJcbiAgcmV0dXJuIGJpdEZsb29yKG4uZSAvIExPR19CQVNFKSA9PSBrICYmIG4uY1trXSAlIDIgIT0gMDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHRvRXhwb25lbnRpYWwoc3RyLCBlKSB7XHJcbiAgcmV0dXJuIChzdHIubGVuZ3RoID4gMSA/IHN0ci5jaGFyQXQoMCkgKyAnLicgKyBzdHIuc2xpY2UoMSkgOiBzdHIpICtcclxuICAgKGUgPCAwID8gJ2UnIDogJ2UrJykgKyBlO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gdG9GaXhlZFBvaW50KHN0ciwgZSwgeikge1xyXG4gIHZhciBsZW4sIHpzO1xyXG5cclxuICAvLyBOZWdhdGl2ZSBleHBvbmVudD9cclxuICBpZiAoZSA8IDApIHtcclxuXHJcbiAgICAvLyBQcmVwZW5kIHplcm9zLlxyXG4gICAgZm9yICh6cyA9IHogKyAnLic7ICsrZTsgenMgKz0geik7XHJcbiAgICBzdHIgPSB6cyArIHN0cjtcclxuXHJcbiAgLy8gUG9zaXRpdmUgZXhwb25lbnRcclxuICB9IGVsc2Uge1xyXG4gICAgbGVuID0gc3RyLmxlbmd0aDtcclxuXHJcbiAgICAvLyBBcHBlbmQgemVyb3MuXHJcbiAgICBpZiAoKytlID4gbGVuKSB7XHJcbiAgICAgIGZvciAoenMgPSB6LCBlIC09IGxlbjsgLS1lOyB6cyArPSB6KTtcclxuICAgICAgc3RyICs9IHpzO1xyXG4gICAgfSBlbHNlIGlmIChlIDwgbGVuKSB7XHJcbiAgICAgIHN0ciA9IHN0ci5zbGljZSgwLCBlKSArICcuJyArIHN0ci5zbGljZShlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzdHI7XHJcbn1cclxuXHJcblxyXG4vLyBFWFBPUlRcclxuXHJcblxyXG5leHBvcnQgdmFyIEJpZ051bWJlciA9IGNsb25lKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCaWdOdW1iZXI7XHJcbiIsImltcG9ydCB7IHl3X2FjY291bnQsIHl3X2NoYWluLCB5d19jaGFpbl9yZWYgfSBmcm9tICcjL2FwcC9tZW0nO1xuaW1wb3J0IHR5cGUgeyBCZWNoMzIsIEJpcDQ0LCBDaGFpbiwgQ2hhaW5QYXRoLCBGYW1pbHksIEhvbGRpbmdQYXRoLCBOYXRpdmVDb2luIH0gZnJvbSAnIy9tZXRhL2NoYWluJztcbmltcG9ydCB0eXBlIHsgTmV0d29yayB9IGZyb20gJyMvbWV0YS9uZXR3b3JrJztcbmltcG9ydCB7IENoYWlucyB9IGZyb20gJyMvc3RvcmUvY2hhaW5zJztcbmltcG9ydCB7IEVudGl0aWVzIH0gZnJvbSAnIy9zdG9yZS9lbnRpdGllcyc7XG5pbXBvcnQgdHlwZSB7IEFjdGl2ZU5ldHdvcmssIEJhbGFuY2VCdW5kbGUsIENhY2hlZCwgRTJlSW5mbywgVHJhbnNmZXIsIFdzVHhSZXN1bHQgfSBmcm9tICcjL3N0b3JlL25ldHdvcmtzJztcbmltcG9ydCB7IFF1ZXJ5Q2FjaGUgfSBmcm9tICcjL3N0b3JlL3F1ZXJ5LWNhY2hlJztcbmltcG9ydCB7IERpY3QsIGZvZGVtdHYsIGZvbGQsIEpzb25PYmplY3QsIG9kZXJvbSwgUHJvbWlzYWJsZSB9IGZyb20gJyMvdXRpbC9iZWx0JztcbmltcG9ydCB7Z3JwY30gZnJvbSAnQGltcHJvYmFibGUtZW5nL2dycGMtd2ViJztcblxuaW1wb3J0IHtcblx0R3JwY1dlYkltcGwsXG5cdFF1ZXJ5QmFsYW5jZVJlc3BvbnNlLFxuXHRRdWVyeUNsaWVudEltcGwgYXMgQmFua1F1ZXJ5Q2xpZW50LFxufSBmcm9tICdjb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9iYW5rL3YxYmV0YTEvcXVlcnknO1xuXG5pbXBvcnQge1xuXHRRdWVyeUNsaWVudEltcGwgYXMgQXV0aFF1ZXJ5Q2xpZW50LFxufSBmcm9tICdjb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9hdXRoL3YxYmV0YTEvcXVlcnknO1xuXG5pbXBvcnQgdHlwZSB7XG5cdENvaW4sXG59IGZyb20gJ2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL2Jhc2UvdjFiZXRhMS9jb2luJztcblxuaW1wb3J0IHtcblx0U2VydmljZUdldFR4c0V2ZW50RGVzYyxcblx0R2V0VHhzRXZlbnRSZXF1ZXN0LFxuXHRHZXRUeHNFdmVudFJlc3BvbnNlLFxuXHRTZXJ2aWNlQ2xpZW50SW1wbCBhcyBUeFNlcnZpY2VDbGllbnQsXG5cdE9yZGVyQnksXG5cdEJyb2FkY2FzdE1vZGUsXG59IGZyb20gJ2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL3R4L3YxYmV0YTEvc2VydmljZSc7XG5cbmltcG9ydCB0eXBlIHtcblx0VHhSZXN1bHQsXG59IGZyb20gJ2Nvc21vcy1ncnBjL2Rpc3QvdGVuZGVybWludC9hYmNpL3R5cGVzJztcblxuaW1wb3J0IHtcblx0TXNnU2VuZCxcblx0TXNnQ2xpZW50SW1wbCBhcyBCYW5rTXNnQ2xpZW50LFxufSBmcm9tICdjb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9iYW5rL3YxYmV0YTEvdHgnO1xuaW1wb3J0IHsgaW5zdGFudGlhdGVTZWNwMjU2azEgfSBmcm9tICdAc29sYXItcmVwdWJsaWMvd2FzbS1zZWNwMjU2azEnO1xuXG5pbXBvcnQgdHlwZSB7IEFueSB9IGZyb20gJ2Nvc21vcy1ncnBjL2Rpc3QvZ29vZ2xlL3Byb3RvYnVmL2FueSc7XG5pbXBvcnQgeyBQdWJLZXkgfSBmcm9tICdjb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9jcnlwdG8vc2VjcDI1NmsxL2tleXMnO1xuXG5pbXBvcnQgeyBBdXRoSW5mbywgU2lnbkRvYywgVHgsIFR4Qm9keSwgVHhSYXcgfSBmcm9tICdjb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy90eC92MWJldGExL3R4JztcbmltcG9ydCB7IGJhc2U2NF90b19idWZmZXIsIGJ1ZmZlcl90b19iYXNlNjQsIGJ1ZmZlcl90b19zdHJpbmc4LCBzaGEyNTYsIHNoYTI1Nl9zeW5jLCBzdHJpbmc4X3RvX2J1ZmZlciwgdGV4dF90b19idWZmZXIgfSBmcm9tICcjL3V0aWwvZGF0YSc7XG5pbXBvcnQgeyBTaWduTW9kZSB9IGZyb20gJ2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL3R4L3NpZ25pbmcvdjFiZXRhMS9zaWduaW5nJztcbmltcG9ydCB7IEtleXJpbmcgfSBmcm9tICcjL2NyeXB0by9rZXlyaW5nJztcbmltcG9ydCB7IFNlY3JldHMgfSBmcm9tICcjL3N0b3JlL3NlY3JldHMnO1xuaW1wb3J0IHsgU2VjcDI1NmsxS2V5IH0gZnJvbSAnIy9jcnlwdG8vc2VjcDI1NmsxJztcbmltcG9ydCBSdW50aW1lS2V5IGZyb20gJyMvY3J5cHRvL3J1bnRpbWUta2V5JztcbmltcG9ydCB7IEFjY291bnRzIH0gZnJvbSAnIy9zdG9yZS9hY2NvdW50cyc7XG5pbXBvcnQgeyBCYXNlQWNjb3VudCB9IGZyb20gJ2Nvc21vcy1ncnBjL2Rpc3QvY29zbW9zL2F1dGgvdjFiZXRhMS9hdXRoJztcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcbmltcG9ydCB0eXBlIHsgQWNjb3VudCB9IGZyb20gJyMvbWV0YS9hY2NvdW50JztcbmltcG9ydCB7IHN5c2VyciB9IGZyb20gJyMvYXBwL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7IE1lcmdlIH0gZnJvbSAndHMtdG9vbGJlbHQvb3V0L09iamVjdC9NZXJnZSc7XG5pbXBvcnQgdHlwZSB7IENhc3QgfSBmcm9tICd0cy10b29sYmVsdC9vdXQvQW55L0Nhc3QnO1xuaW1wb3J0IHsgQVRVOF9TSEEyNTZfU1RBUlNIRUxMLCBlbmNyeXB0IH0gZnJvbSAnIy9jcnlwdG8vdmF1bHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVkRXZlbnQge1xuXHR0eXBlOiAndHJhbnNmZXInIHwgJ21lc3NhZ2UnIHwgJ2NvaW5fc3BlbnQnIHwgJ2NvaW5fcmVjZWl2ZWQnO1xuXHRhdHRyaWJ1dGVzOiB7XG5cdFx0a2V5OiBzdHJpbmc7XG5cdFx0dmFsdWU6IHN0cmluZztcblx0fVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyb2FkY2FzdENvbmZpZyB7XG5cdG1zZ3M6IEFueVtdO1xuXHRtZW1vOiBzdHJpbmc7XG5cdGdhc0xpbWl0OiBiaWdpbnQ7XG5cdGdhc0ZlZTogQ29pbiB8IHtcblx0XHRwcmljZTogbnVtYmVyIHwgc3RyaW5nIHwgQmlnTnVtYmVyO1xuXHR9O1xuXHRhY2NvdW50PzogQWNjb3VudFsnaW50ZXJmYWNlJ107XG59XG5cblxuZXhwb3J0IGNvbnN0IGZvbGRfYXR0cnMgPSAoZ19ldmVudDogVHlwZWRFdmVudCk6IERpY3QgPT4gZm9sZChnX2V2ZW50LmF0dHJpYnV0ZXMsIGdfYXR0ciA9PiAoe1xuXHRbZ19hdHRyLmtleV06IGdfYXR0ci52YWx1ZSxcbn0pKTtcblxuXG5hc3luYyBmdW5jdGlvbiBzaWduX2RvYyh4Z19hY2NvdW50X251bWJlcjogYmlnaW50LCBhdHU4X2F1dGg6IFVpbnQ4QXJyYXksIGF0dThfYm9keTogVWludDhBcnJheSwgc2lfY2hhaW46IHN0cmluZyk6IFByb21pc2U8VWludDhBcnJheT4ge1xuXHRjb25zdCBnX2RvYyA9IFNpZ25Eb2MuZnJvbVBhcnRpYWwoe1xuXHRcdGFjY291bnROdW1iZXI6IHhnX2FjY291bnRfbnVtYmVyKycnLFxuXHRcdGF1dGhJbmZvQnl0ZXM6IGF0dThfYXV0aCxcblx0XHRib2R5Qnl0ZXM6IGF0dThfYm9keSxcblx0XHRjaGFpbklkOiBzaV9jaGFpbixcblx0fSk7XG5cblx0Ly8gZW5jb2RlIHNpZ25kb2Ncblx0Y29uc3QgYXR1OF9kb2MgPSBTaWduRG9jLmVuY29kZShnX2RvYykuZmluaXNoKCk7XG5cblx0Ly8gcmVmIGFjY291bnQgc2VjcmV0IHBhdGhcblx0Y29uc3QgcF9zZWNyZXQgPSB5d19hY2NvdW50LmdldCgpLnNlY3JldDtcblxuXHQvLyBmZXRjaCBzZWNyZXRcblx0Y29uc3QgZ19zZWNyZXQgPSBhd2FpdCBTZWNyZXRzLmdldChwX3NlY3JldCk7XG5cblx0aWYoJ25vbmUnICE9PSBnX3NlY3JldD8uc2VjdXJpdHkudHlwZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihgS2V5cmluZyBub3QgeWV0IGltcGxlbWVudGVkYCk7XG5cdH1cblxuXHQvLyBpbXBvcnQgc2lnbmluZyBrZXlcblx0Y29uc3Qga19rZXkgPSBhd2FpdCBTZWNwMjU2azFLZXkuaW1wb3J0KGF3YWl0IFJ1bnRpbWVLZXkuY3JlYXRlUmF3KHN0cmluZzhfdG9fYnVmZmVyKGdfc2VjcmV0LmRhdGEpKSk7XG5cblx0Ly8gc2lnbiBkb2N1bWVudFxuXHRyZXR1cm4gYXdhaXQga19rZXkuc2lnbihhdHU4X2RvYywgdHJ1ZSk7XG59XG5cblxuLyoqXG4gKiBTaWduaW5nIGluZm9ybWF0aW9uIGZvciBhIHNpbmdsZSBzaWduZXIgdGhhdCBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIHRyYW5zYWN0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL2Jsb2IvdjAuNDIuMi94L2F1dGgvc2lnbmluZy9zaWduX21vZGVfaGFuZGxlci5nbyNMMjMtTDM3XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbmVyRGF0YSB7XG5cdHJlYWRvbmx5IGFjY291bnROdW1iZXI6IGJpZ2ludDtcblx0cmVhZG9ubHkgc2VxdWVuY2U6IGJpZ2ludDtcblx0cmVhZG9ubHkgY2hhaW5JZDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSnNvbk1zZ1NlbmQgZXh0ZW5kcyBKc29uT2JqZWN0IHtcblx0ZnJvbUFkZHJlc3M6IHN0cmluZztcblx0dG9BZGRyZXNzOiBzdHJpbmc7XG5cdGFtb3VudDoge1xuXHRcdGRlbm9tOiBzdHJpbmc7XG5cdFx0YW1vdW50OiBzdHJpbmc7XG5cdH1bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQZW5kaW5nU2VuZCBleHRlbmRzIEpzb25PYmplY3Qge1xuXHRjaGFpbjogQ2hhaW5QYXRoO1xuXHRoYXNoOiBzdHJpbmc7XG5cdG93bmVyOiBCZWNoMzIuU3RyaW5nO1xuXHRjb2luOiBzdHJpbmc7XG5cdG1zZzogSnNvbk1zZ1NlbmQ7XG5cdHJhdzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQ29zbW9zTmV0d29yayBpbXBsZW1lbnRzIEFjdGl2ZU5ldHdvcmsge1xuXHRwcml2YXRlIHJlYWRvbmx5IF9wX2NoYWluOiBDaGFpblBhdGg7XG5cdHByaXZhdGUgcmVhZG9ubHkgX3lfZ3JwYzogR3JwY1dlYkltcGw7XG5cdHByaXZhdGUgX2tzX2NhY2hlOiBBd2FpdGVkPFJldHVyblR5cGU8dHlwZW9mIFF1ZXJ5Q2FjaGUucmVhZD4+O1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2dfbmV0d29yazogTmV0d29ya1snaW50ZXJmYWNlJ10sIHByaXZhdGUgcmVhZG9ubHkgX2dfY2hhaW46IENoYWluWydpbnRlcmZhY2UnXSkge1xuXHRcdHRoaXMuX3BfY2hhaW4gPSBDaGFpbnMucGF0aEZyb20oX2dfY2hhaW4pO1xuXG5cdFx0dGhpcy5feV9ncnBjID0gbmV3IEdycGNXZWJJbXBsKF9nX25ldHdvcmsuZ3JwY1dlYlVybCwge1xuXHRcdFx0dHJhbnNwb3J0OiBncnBjLkNyb3NzQnJvd3Nlckh0dHBUcmFuc3BvcnQoe3dpdGhDcmVkZW50aWFsczpmYWxzZX0pLFxuXHRcdH0pO1xuXG5cdFx0dm9pZCB0aGlzLnJlbG9hZENhY2hlZCgpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGFzeW5jIF9zaWduZXJfZGF0YShzYV9zZW5kZXI6IHN0cmluZyk6IFByb21pc2U8U2lnbmVyRGF0YT4ge1xuXHRcdC8vIGdldCBhY2NvdW50IGRhdGFcblx0XHRjb25zdCBnX3Jlc3BvbnNlID0gYXdhaXQgbmV3IEF1dGhRdWVyeUNsaWVudCh0aGlzLl95X2dycGMpLmFjY291bnQoe1xuXHRcdFx0YWRkcmVzczogc2Ffc2VuZGVyLFxuXHRcdH0pO1xuXG5cdFx0Ly8gZGVzdHJ1Y3R1cmUgcmVzcG9uc2Vcblx0XHRjb25zdCB7XG5cdFx0XHR0eXBlVXJsOiBzaV90eXBlLFxuXHRcdFx0dmFsdWU6IGF0dThfZGF0YSxcblx0XHR9ID0gZ19yZXNwb25zZT8uYWNjb3VudCB8fCB7fTtcblxuXHRcdC8vIG5vdCBmb3VuZFxuXHRcdGlmKCFzaV90eXBlKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEFjY291bnQgZm9yICR7c2Ffc2VuZGVyfSB3YXMgbm90IGZvdW5kIG9uIGNoYWluLiBMaWtlbHkgaGFzIHplcm8gYmFsYW5jZS5gKTtcblx0XHR9XG5cdFx0ZWxzZSBpZihzaV90eXBlICE9PSAnL2Nvc21vcy5hdXRoLnYxYmV0YTEuQmFzZUFjY291bnQnKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBzaWduIHdpdGggYWNjb3VudCBvZiB0eXBlIFwiJHtzaV90eXBlfVwiLCBjYW4gb25seSBzaWduIHdpdGggQmFzZUFjY291bnQuYCk7XG5cdFx0fVxuXG5cdFx0Ly8gZGVjb2RlIGRhdGFcblx0XHRjb25zdCBnX2FjY291bnQgPSBCYXNlQWNjb3VudC5kZWNvZGUoYXR1OF9kYXRhISk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Y2hhaW5JZDogdGhpcy5fZ19jaGFpbi5pZCxcblx0XHRcdGFjY291bnROdW1iZXI6IEJpZ0ludChnX2FjY291bnQuYWNjb3VudE51bWJlciksXG5cdFx0XHRzZXF1ZW5jZTogQmlnSW50KGdfYWNjb3VudC5zZXF1ZW5jZSksXG5cdFx0fTtcblx0fVxuXG5cdHByb3RlY3RlZCBhc3luYyBfdXBkYXRlX2JhbGFuY2Uoc2Ffb3duZXI6IHN0cmluZywgc2lfY29pbjogc3RyaW5nLCBnX2JhbGFuY2U6IENvaW4sIHh0X3doZW46IG51bWJlcik6IFByb21pc2U8W0hvbGRpbmdQYXRoLCBDYWNoZWQ8Q29pbj4gfCBudWxsXT4ge1xuXHRcdGNvbnN0IHBfaG9sZGluZyA9IEVudGl0aWVzLmhvbGRpbmdQYXRoRm9yKHNhX293bmVyLCBzaV9jb2luLCB0aGlzLl9wX2NoYWluKTtcblxuXHRcdC8vIHJlYWQgZnJvbSBjYWNoZVxuXHRcdGNvbnN0IGdfY2FjaGVkID0gdGhpcy5fa3NfY2FjaGUuYXQocF9ob2xkaW5nKSBhcyBDYWNoZWQ8Q29pbj4gfCBudWxsO1xuXG5cdFx0Ly8gdXBkYXRlIGNhY2hlXG5cdFx0YXdhaXQgUXVlcnlDYWNoZS5vcGVuKGFzeW5jKGtzKSA9PiB7XG5cdFx0XHQvLyB1cGRhdGUgZW50cnlcblx0XHRcdGF3YWl0IGtzLnNldChwX2hvbGRpbmcsIHtcblx0XHRcdFx0dGltZXN0YW1wOiB4dF93aGVuLFxuXHRcdFx0XHRkYXRhOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGdfYmFsYW5jZSkpLFxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIHJlc2V0IGNhY2hlZCBzdG9yZSBpbnN0YW5jZVxuXHRcdFx0dGhpcy5fa3NfY2FjaGUgPSBrcztcblx0XHR9KTtcblxuXHRcdC8vIHJldHVybiB1cGRhdGVkIGJhbGFuY2UgYW5kIGNhY2hlZFxuXHRcdHJldHVybiBbcF9ob2xkaW5nLCBnX2NhY2hlZF07XG5cdH1cblxuXHRhc3luYyByZWxvYWRDYWNoZWQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dGhpcy5fa3NfY2FjaGUgPSBhd2FpdCBRdWVyeUNhY2hlLnJlYWQoKTtcblx0fVxuXG5cdGNhY2hlZEJhbGFuY2Uoc2Ffb3duZXI6IHN0cmluZywgc2lfY29pbjogc3RyaW5nKTogQ2FjaGVkPENvaW4+IHwgbnVsbCB7XG5cdFx0Y29uc3QgcF9ob2xkaW5nID0gRW50aXRpZXMuaG9sZGluZ1BhdGhGb3Ioc2Ffb3duZXIsIHNpX2NvaW4sIHRoaXMuX3BfY2hhaW4pO1xuXG5cdFx0cmV0dXJuIHRoaXMuX2tzX2NhY2hlLmF0KHBfaG9sZGluZykgYXMgQ2FjaGVkPENvaW4+IHwgbnVsbDtcblx0fVxuXG5cdGFzeW5jIGJhbmtCYWxhbmNlKHNhX293bmVyOiBCZWNoMzIuU3RyaW5nLCBzaV9jb2luPzogc3RyaW5nLCB4dF9zaW5jZT0wKTogUHJvbWlzZTxCYWxhbmNlQnVuZGxlPiB7XG5cdFx0Y29uc3QgeHRfcmVxID0gRGF0ZS5ub3coKTtcblxuXHRcdC8vIG5vcm1hbGl6ZSBjb2luIGlkXG5cdFx0c2lfY29pbiA9IHNpX2NvaW4gfHwgT2JqZWN0LmtleXModGhpcy5fZ19jaGFpbi5jb2lucylbMF07XG5cblx0XHQvLyAvLyBub3JtYWxpemUgc2luY2Vcblx0XHQvLyBpZih4dF9zaW5jZSA8PSAwKSB4dF9zaW5jZSArPSB4dF9yZXE7XG5cblx0XHQvLyAvLyByZWFkIGNhY2hlXG5cdFx0Ly8gY29uc3QgZ19jYWNoZWQgPSB0aGlzLmNhY2hlZEJhbGFuY2Uoc2Ffb3duZXIsIHNpX2NvaW4pO1xuXG5cdFx0Ly8gLy8gY2FjaGUgaXMgd2l0aGluIGFza2luZyB0aW1lXG5cdFx0Ly8gaWYoZ19jYWNoZWQ/LnRpbWVzdGFtcCA+PSB4dF9zaW5jZSkge1xuXHRcdC8vIFx0cmV0dXJuIFxuXHRcdC8vIH1cblxuXHRcdC8vIHF1ZXJ5IGJhbGFuY2Vcblx0XHRjb25zdCBnX3Jlc3BvbnNlID0gYXdhaXQgbmV3IEJhbmtRdWVyeUNsaWVudCh0aGlzLl95X2dycGMpLmJhbGFuY2Uoe1xuXHRcdFx0YWRkcmVzczogc2Ffb3duZXIsXG5cdFx0XHRkZW5vbTogdGhpcy5fZ19jaGFpbi5jb2luc1tzaV9jb2luXS5kZW5vbSxcblx0XHR9KTtcblxuXHRcdGNvbnN0IHtcblx0XHRcdGJhbGFuY2U6IGdfYmFsYW5jZSxcblx0XHR9ID0gZ19yZXNwb25zZTtcblxuXHRcdC8vIG5vIHJlc3BvbnNlXG5cdFx0aWYoIWdfYmFsYW5jZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggYmFsYW5jZWApO1xuXHRcdH1cblxuXHRcdC8vIHJldHVybiB1cGRhdGVkIGJhbGFuY2Vcblx0XHRjb25zdCBbcF9ob2xkaW5nLCBnX2NhY2hlZF0gPSBhd2FpdCB0aGlzLl91cGRhdGVfYmFsYW5jZShzYV9vd25lciwgc2lfY29pbiwgZ19iYWxhbmNlLCB4dF9yZXEpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRiYWxhbmNlOiBnX2JhbGFuY2UsXG5cdFx0XHRjYWNoZWQ6IGdfY2FjaGVkLFxuXHRcdFx0aG9sZGluZzogcF9ob2xkaW5nLFxuXHRcdH0gYXMgQmFsYW5jZUJ1bmRsZTtcblx0fVxuXG5cdGFzeW5jIGJhbmtCYWxhbmNlcyhzYV9vd25lcjogQmVjaDMyLlN0cmluZyk6IFByb21pc2U8RGljdDxCYWxhbmNlQnVuZGxlPj4ge1xuXHRcdGNvbnN0IHh0X3JlcSA9IERhdGUubm93KCk7XG5cblx0XHRjb25zdCBnX3Jlc3BvbnNlID0gYXdhaXQgbmV3IEJhbmtRdWVyeUNsaWVudCh0aGlzLl95X2dycGMpLmFsbEJhbGFuY2VzKHtcblx0XHRcdGFkZHJlc3M6IHNhX293bmVyLFxuXHRcdH0pO1xuXG5cdFx0Y29uc3Qge1xuXHRcdFx0YmFsYW5jZXM6IGFfYmFsYW5jZXMsXG5cdFx0fSA9IGdfcmVzcG9uc2U7XG5cblx0XHQvLyByZWYgY29pbnNcblx0XHRjb25zdCBoX2NvaW5zID0gdGhpcy5fZ19jaGFpbi5jb2lucztcblxuXHRcdC8vIGNyZWF0ZSBsb29rdXAgdGFibGUgZm9yIGRlbm9tc1xuXHRcdGNvbnN0IGhfZGVub21zID0gb2Rlcm9tKGhfY29pbnMsIChzaV9jb2luLCBnX2NvaW4pID0+ICh7XG5cdFx0XHRbZ19jb2luLmRlbm9tXTogc2lfY29pbixcblx0XHR9KSk7XG5cblx0XHQvLyBwcmVwIG91dHB1dHNcblx0XHRjb25zdCBoX291dHM6IERpY3Q8QmFsYW5jZUJ1bmRsZT4gPSB7fTtcblxuXHRcdC8vIGVhY2ggcmV0dXJuZWQgYmFsYW5jZVxuXHRcdGZvcihjb25zdCBnX2JhbGFuY2Ugb2YgYV9iYWxhbmNlcykge1xuXHRcdFx0Ly8gbG9va3VwIGNvaW5cblx0XHRcdGNvbnN0IHNpX2NvaW4gPSBoX2Rlbm9tc1tnX2JhbGFuY2UuZGVub21dO1xuXHRcdFx0Y29uc3QgZ19jb2luID0gaF9jb2luc1tzaV9jb2luXTtcblxuXHRcdFx0Ly8gYWRkIHR1cGxlIHRvIGRpY3Rcblx0XHRcdGNvbnN0IFtwX2hvbGRpbmcsIGdfY2FjaGVkXSA9IGF3YWl0IHRoaXMuX3VwZGF0ZV9iYWxhbmNlKHNhX293bmVyLCBzaV9jb2luLCBnX2JhbGFuY2UsIHh0X3JlcSk7XG5cdFx0XHRoX291dHNbc2lfY29pbl0gPSB7XG5cdFx0XHRcdGJhbGFuY2U6IGdfYmFsYW5jZSxcblx0XHRcdFx0Y2FjaGVkOiBnX2NhY2hlZCxcblx0XHRcdFx0aG9sZGluZzogcF9ob2xkaW5nLFxuXHRcdFx0fSBhcyBCYWxhbmNlQnVuZGxlO1xuXHRcdH1cblxuXHRcdHJldHVybiBoX291dHM7XG5cdH1cblxuXHRnZXQgaGFzUnBjKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAhIXRoaXMuX2dfbmV0d29yay5ycGNIb3N0O1xuXHR9XG5cblx0bGlzdGVuKGFfZXZlbnRzOiBzdHJpbmdbXSwgZmtlX3JlY2VpdmU6IChkX2tpbGw6IEV2ZW50IHwgbnVsbCwgZ192YWx1ZT86IEpzb25PYmplY3QpID0+IFByb21pc2FibGU8dm9pZD4pOiAoKSA9PiB2b2lkIHtcblx0XHRjb25zdCBwX2hvc3QgPSB0aGlzLl9nX25ldHdvcmsucnBjSG9zdDtcblxuXHRcdGlmKCFwX2hvc3QpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHN1YnNjcmliZSB0byBldmVudHM7IG5vIFJQQyBob3N0IGNvbmZpZ3VyZWQgb24gbmV0d29yaycpO1xuXG5cdFx0Y29uc3QgZF93cyA9IG5ldyBXZWJTb2NrZXQoYHdzczovLyR7cF9ob3N0fS93ZWJzb2NrZXRgKTtcblxuXHRcdGRfd3Mub25vcGVuID0gKGRfZXZlbnQpID0+IHtcblx0XHRcdGRfd3Muc2VuZChKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdGpzb25ycGM6ICcyLjAnLFxuXHRcdFx0XHRtZXRob2Q6ICdzdWJzY3JpYmUnLFxuXHRcdFx0XHRpZDogJzAnLFxuXHRcdFx0XHRwYXJhbXM6IHtcblx0XHRcdFx0XHRxdWVyeTogYV9ldmVudHMuam9pbignIEFORCAnKSxcblx0XHRcdFx0fSxcblx0XHRcdH0pKTtcblx0XHR9O1xuXG5cdFx0ZF93cy5vbm1lc3NhZ2UgPSAoZF9ldmVudDogTWVzc2FnZUV2ZW50PHN0cmluZz4pID0+IHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGRfZXZlbnQuZGF0YSk7XG5cblx0XHRcdGNvbnN0IGdfbXNnID0gSlNPTi5wYXJzZShkX2V2ZW50LmRhdGEgfHwgJ3t9Jyk7XG5cblx0XHRcdGNvbnN0IGdfdmFsdWUgPSBnX21zZz8ucmVzdWx0Py5kYXRhPy52YWx1ZTtcblxuXHRcdFx0aWYoZ192YWx1ZSkge1xuXHRcdFx0XHR2b2lkIGZrZV9yZWNlaXZlKG51bGwsIGdfdmFsdWUgYXMgSnNvbk9iamVjdCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGxldCBiX3VzZXJfY2xvc2VkID0gZmFsc2U7XG5cdFx0ZF93cy5vbmNsb3NlID0gKGRfZXZlbnQpID0+IHtcblx0XHRcdGlmKCFiX3VzZXJfY2xvc2VkKSB7XG5cdFx0XHRcdHZvaWQgZmtlX3JlY2VpdmUoZF9ldmVudCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGRfd3Mub25lcnJvciA9IChkX2V2ZW50KSA9PiB7XG5cdFx0XHR2b2lkIGZrZV9yZWNlaXZlKGRfZXZlbnQpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Yl91c2VyX2Nsb3NlZCA9IHRydWU7XG5cdFx0XHRkX3dzLmNsb3NlKCk7XG5cdFx0fTtcblx0fVxuXG5cblx0b25SZWNlaXZlKHNhX293bmVyOiBCZWNoMzIuU3RyaW5nLCBma2VfcmVjZWl2ZTogKGRfa2lsbDogRXZlbnQgfCBudWxsLCBnX3R4PzogV3NUeFJlc3VsdCkgPT4gUHJvbWlzYWJsZTx2b2lkPik6ICgpID0+IHZvaWQge1xuXHRcdHJldHVybiB0aGlzLmxpc3RlbihbXG5cdFx0XHRgdG0uZXZlbnQ9J1R4J2AsXG5cdFx0XHRgdHJhbnNmZXIucmVjaXBpZW50PScke3NhX293bmVyfSdgLFxuXHRcdF0sIChkX2tpbGwsIGdfdmFsdWUpID0+IHtcblx0XHRcdHZvaWQgZmtlX3JlY2VpdmUoZF9raWxsLCAoZ192YWx1ZT8uVHhSZXN1bHQgfHwgdm9pZCAwKSBhcyBXc1R4UmVzdWx0IHwgdW5kZWZpbmVkKTtcblx0XHR9KTtcblx0fVxuXG5cdG9uU2VuZChzYV9vd25lcjogQmVjaDMyLlN0cmluZywgZmtlX3NlbmQ6IChkX2tpbGw6IEV2ZW50IHwgbnVsbCwgZ190eD86IFdzVHhSZXN1bHQpID0+IFByb21pc2FibGU8dm9pZD4pOiAoKSA9PiB2b2lkIHtcblx0XHRyZXR1cm4gdGhpcy5saXN0ZW4oW1xuXHRcdFx0YHRtLmV2ZW50PSdUeCdgLFxuXHRcdFx0YHRyYW5zZmVyLnNlbmRlcj0nJHtzYV9vd25lcn0nYCxcblx0XHRdLCAoZF9raWxsLCBnX3ZhbHVlKSA9PiB7XG5cdFx0XHR2b2lkIGZrZV9zZW5kKGRfa2lsbCwgKGdfdmFsdWU/LlR4UmVzdWx0IHx8IHZvaWQgMCkgYXMgV3NUeFJlc3VsdCB8IHVuZGVmaW5lZCk7XG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyBlMmVJbmZvRm9yKHNhX290aGVyOiBCZWNoMzIuU3RyaW5nKTogUHJvbWlzZTxFMmVJbmZvPiB7XG5cdFx0Y29uc3QgZ19yZXNwb25zZSA9IGF3YWl0IG5ldyBUeFNlcnZpY2VDbGllbnQodGhpcy5feV9ncnBjKS5nZXRUeHNFdmVudCh7XG5cdFx0XHRldmVudHM6IFtcblx0XHRcdFx0YG1lc3NhZ2Uuc2VuZGVyPScke3NhX290aGVyfSdgLFxuXHRcdFx0XSxcblx0XHRcdHBhZ2luYXRpb246IHtcblx0XHRcdFx0bGltaXQ6ICcxJyxcblx0XHRcdH0sXG5cdFx0XHRvcmRlckJ5OiBPcmRlckJ5Lk9SREVSX0JZX0RFU0MsXG5cdFx0fSk7XG5cblx0XHRpZighZ19yZXNwb25zZT8udHhzPy5sZW5ndGgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgT3duZXIgaGFzIG5vdCBzaWduZWQgYW55IG1lc3NhZ2VzIHlldCBvbi1jaGFpbmApO1xuXHRcdH1cblxuXHRcdGNvbnN0IGFfc2lnbmVycyA9IGdfcmVzcG9uc2UudHhzWzBdLmF1dGhJbmZvIS5zaWduZXJJbmZvcztcblx0XHRpZigxICE9PSBhX3NpZ25lcnMubGVuZ3RoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE11bHRpcGxlIG93bmVyc2ApO1xuXHRcdH1cblxuXHRcdGNvbnN0IHtcblx0XHRcdHR5cGVVcmw6IHNpX3B1YmtleV90eXBlLFxuXHRcdFx0dmFsdWU6IGF0dThfcHVia2V5XzMzLFxuXHRcdH0gPSBhX3NpZ25lcnNbMF0ucHVibGljS2V5ITtcblxuXHRcdGlmKCcvY29zbW9zLmNyeXB0by5zZWNwMjU2azEuUHViS2V5JyAhPT0gc2lfcHVia2V5X3R5cGUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBwdWJsaWMga2V5IHR5cGVgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VxdWVuY2U6IGFfc2lnbmVyc1swXS5zZXF1ZW5jZSxcblx0XHRcdGhlaWdodDogZ19yZXNwb25zZS50eFJlc3BvbnNlc1swXS5oZWlnaHQsXG5cdFx0XHRwdWJrZXk6IFNlY3AyNTZrMUtleS51bmNvbXByZXNzUHVibGljS2V5KGF0dThfcHVia2V5XzMzKSxcblx0XHR9O1xuXHR9XG5cblx0YXN5bmMgZWNkaEVuY3J5cHQoYXR1OF9vdGhlcl9wdWJrZXk6IFVpbnQ4QXJyYXksIGF0dThfaW5wdXQ6IFVpbnQ4QXJyYXksIGF0dThfbm9uY2U6IFVpbnQ4QXJyYXksIGdfY2hhaW49eXdfY2hhaW4uZ2V0KCkpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcblx0XHQvLyByZWYgYWNjb3VudCBzZWNyZXQgcGF0aFxuXHRcdGNvbnN0IHBfc2VjcmV0ID0geXdfYWNjb3VudC5nZXQoKS5zZWNyZXQ7XG5cblx0XHQvLyBmZXRjaCBzZWNyZXRcblx0XHRjb25zdCBnX3NlY3JldCA9IGF3YWl0IFNlY3JldHMuZ2V0KHBfc2VjcmV0KTtcblxuXHRcdGlmKCdub25lJyAhPT0gZ19zZWNyZXQ/LnNlY3VyaXR5LnR5cGUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgS2V5cmluZyBub3QgeWV0IGltcGxlbWVudGVkYCk7XG5cdFx0fVxuXG5cdFx0Ly8gaW1wb3J0IHNpZ25pbmcga2V5XG5cdFx0Y29uc3Qga19rZXkgPSBhd2FpdCBTZWNwMjU2azFLZXkuaW1wb3J0KGF3YWl0IFJ1bnRpbWVLZXkuY3JlYXRlUmF3KHN0cmluZzhfdG9fYnVmZmVyKGdfc2VjcmV0LmRhdGEpKSk7XG5cblx0XHQvLyBzaWduIGRvY3VtZW50XG5cdFx0Y29uc3QgYXR1OF9zaGFyZWQgPSBhd2FpdCBrX2tleS5lY2RoKGF0dThfb3RoZXJfcHVia2V5KTtcblxuXHRcdC8vIGltcG9ydCBiYXNlIGtleVxuXHRcdGNvbnN0IGRrX2hrZGYgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgYXR1OF9zaGFyZWQsICdIS0RGJywgZmFsc2UsIFsnZGVyaXZlS2V5J10pO1xuXG5cdFx0Ly8gZGVyaXZlIGVuY3J5cHRpb24ga2V5XG5cdFx0Y29uc3QgZGtfYWVzX2JpdHMgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRlcml2ZUJpdHMoe1xuXHRcdFx0bmFtZTogJ0hLREYnLFxuXHRcdFx0aGFzaDogJ1NIQS0yNTYnLFxuXHRcdFx0c2FsdDogQVRVOF9TSEEyNTZfU1RBUlNIRUxMLFxuXHRcdFx0aW5mbzogc2hhMjU2X3N5bmModGV4dF90b19idWZmZXIoZ19jaGFpbi5pZCkpLFxuXHRcdH0sIGRrX2hrZGYsIDI1Nik7XG5cblx0XHQvLyBkZXJpdmUgZW5jcnlwdGlvbiBrZXlcblx0XHRjb25zdCBka19hZXMgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRlcml2ZUtleSh7XG5cdFx0XHRuYW1lOiAnSEtERicsXG5cdFx0XHRoYXNoOiAnU0hBLTI1NicsXG5cdFx0XHRpbmZvOiBzaGEyNTZfc3luYyh0ZXh0X3RvX2J1ZmZlcihnX2NoYWluLmlkKSksXG5cdFx0fSwgZGtfaGtkZiwge1xuXHRcdFx0bmFtZTogJ0FFUy1HQ00nLFxuXHRcdFx0bGVuZ3RoOiAyNTYsXG5cdFx0fSwgZmFsc2UsIFsnZW5jcnlwdCcsICdkZWNyeXB0J10pO1xuXG5cdFx0Ly8gZW5jcnlwdCBtZW1vXG5cdFx0Y29uc3QgYXR1OF9lbmNyeXB0ZWQgPSBhd2FpdCBlbmNyeXB0KGF0dThfaW5wdXQsIGRrX2FlcywgYXR1OF9ub25jZSk7XG5cblx0XHRyZXR1cm4gYXR1OF9lbmNyeXB0ZWQ7XG5cdH1cblxuXHRhc3luYyBpc0NvbnRyYWN0KHNhX2FjY291bnQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRcdGNvbnN0IGdfcmVzcG9uc2UgPSBhd2FpdCBuZXcgVHhTZXJ2aWNlQ2xpZW50KHRoaXMuX3lfZ3JwYykuZ2V0VHhzRXZlbnQoe1xuXHRcdFx0ZXZlbnRzOiBbXG5cdFx0XHRcdGBtZXNzYWdlLmNvbnRyYWN0X2FkZHJlc3M9JyR7c2FfYWNjb3VudH0nYCxcblx0XHRcdF0sXG5cdFx0XHRvcmRlckJ5OiBPcmRlckJ5Lk9SREVSX0JZX0FTQyxcblx0XHRcdHBhZ2luYXRpb246IHtcblx0XHRcdFx0bGltaXQ6ICcxJyxcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZ19yZXNwb25zZS50eFJlc3BvbnNlcy5sZW5ndGggPiAwO1xuXHR9XG5cblx0YXN5bmMgcmVjZWl2ZWQoc2Ffb3duZXI6IHN0cmluZywgbl9taW5fYmxvY2s9MCk6IFByb21pc2U8VHJhbnNmZXJbXT4ge1xuXHRcdGNvbnN0IGdfcmVzcG9uc2UgPSBhd2FpdCBuZXcgVHhTZXJ2aWNlQ2xpZW50KHRoaXMuX3lfZ3JwYykuZ2V0VHhzRXZlbnQoe1xuXHRcdFx0ZXZlbnRzOiBbXG5cdFx0XHRcdGB0cmFuc2Zlci5yZWNpcGllbnQ9JyR7c2Ffb3duZXJ9J2AsXG5cdFx0XHRcdGB0eC5oZWlnaHQ+PSR7bl9taW5fYmxvY2t9YCxcblx0XHRcdF0sXG5cdFx0XHRwYWdpbmF0aW9uOiB7XG5cdFx0XHRcdGxpbWl0OiAnMTAwJyxcblx0XHRcdH0sXG5cdFx0fSk7XG5cblxuXHRcdGNvbnN0IHlfY2xpZW50ID0gZ3JwYy5jbGllbnQoU2VydmljZUdldFR4c0V2ZW50RGVzYywge1xuXHRcdFx0aG9zdDogJ3dzczovL3JwYy50ZXN0bmV0LnNlY3JldHNhdHVybi5uZXQvd2Vic29ja2V0Jyxcblx0XHRcdHRyYW5zcG9ydDogZ3JwYy5XZWJzb2NrZXRUcmFuc3BvcnQoKSxcblx0XHRcdGRlYnVnOiB0cnVlLFxuXHRcdH0pO1xuXG5cdFx0eV9jbGllbnQub25IZWFkZXJzKChnX2hlYWRlcnMpID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKGdfaGVhZGVycyk7XG5cdFx0XHRkZWJ1Z2dlcjtcblx0XHR9KTtcblxuXHRcdHlfY2xpZW50Lm9uTWVzc2FnZSgoZ19tc2cpID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKGdfbXNnKTtcblx0XHRcdGRlYnVnZ2VyO1xuXHRcdH0pO1xuXG5cdFx0eV9jbGllbnQub25FbmQoKHdfc3RhdHVzLCBzX21zZywgZ190cmFpbGVycykgPT4ge1xuXHRcdFx0Y29uc29sZS5sb2coe1xuXHRcdFx0XHR3X3N0YXR1cyxcblx0XHRcdFx0c19tc2csXG5cdFx0XHRcdGdfdHJhaWxlcnMsXG5cdFx0XHR9KTtcblx0XHRcdGRlYnVnZ2VyO1xuXHRcdFx0Y29uc29sZS5sb2coJyNlbmQnKTtcblx0XHR9KTtcblxuXHRcdHlfY2xpZW50LnN0YXJ0KCk7XG5cblx0XHRjb25zdCBnX3R4ID0gR2V0VHhzRXZlbnRSZXF1ZXN0LmZyb21QYXJ0aWFsKHtcblx0XHRcdGV2ZW50czogW1xuXHRcdFx0XHRgdG0uZXZlbnQ9J1R4J2AsXG5cdFx0XHRdLFxuXHRcdH0pO1xuXHRcdGRlYnVnZ2VyO1xuXHRcdHlfY2xpZW50LnNlbmQoe1xuXHRcdFx0Li4uZ190eCxcblx0XHRcdC4uLlNlcnZpY2VHZXRUeHNFdmVudERlc2MucmVxdWVzdFR5cGUsXG5cdFx0fSk7XG5cdFx0eV9jbGllbnQuZmluaXNoU2VuZCgpO1xuXG5cdFx0XHQvLyB0aGlzLl95X2dycGMgPSBuZXcgR3JwY1dlYkltcGwoX2dfbmV0d29yay5ncnBjV2ViVXJsLCB7XG5cdFx0XHQvLyBcdHRyYW5zcG9ydDogZ3JwYy5Dcm9zc0Jyb3dzZXJIdHRwVHJhbnNwb3J0KHt3aXRoQ3JlZGVudGlhbHM6ZmFsc2V9KSxcblx0XHRcdC8vIH0pOycsXG5cdFx0XHQvLyB0cmFuc3BvcnQ6IGdycGMuQ3Jvc3NCcm93c2VySHR0cFRyYW5zcG9ydCh7d2l0aENyZWRlbnRpYWxzOmZhbHNlfSksXG5cdFx0Ly8gfSk7XG5cblx0XHQvLyBcblx0XHRpZighZ19yZXNwb25zZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggdHJhbnNhY3Rpb24nKTtcblx0XHR9XG5cblx0XHQvLyBtb3JlIHBhZ2VzXG5cdFx0Y29uc3Qgbl9wYWdlcyA9ICsoZ19yZXNwb25zZS5wYWdpbmF0aW9uPy50b3RhbCB8fCAxKTtcblx0XHRpZihuX3BhZ2VzID4gMSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdOb3QgeWV0IGltcGxlbWVudGVkJyk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgYV9vdXRzOiBUcmFuc2ZlcltdID0gW107XG5cblx0XHQvLyBlYWNoIHR4blxuXHRcdGZvcihjb25zdCBnX3R4biBvZiBnX3Jlc3BvbnNlLnR4UmVzcG9uc2VzKSB7XG5cdFx0XHQvLyBwYXJzZSBldmVudHNcblx0XHRcdGNvbnN0IGFfZXZlbnRzID0gSlNPTi5wYXJzZShnX3R4bi5yYXdMb2cpWzBdLmV2ZW50cyEgYXMgVHlwZWRFdmVudFtdO1xuXG5cdFx0XHQvLyBlYWNoIGV2ZW50XG5cdFx0XHRmb3IoY29uc3QgZ19ldmVudCBvZiBhX2V2ZW50cykge1xuXHRcdFx0XHQvLyBsb2NhdGUgdGhlIHRyYW5zZmVyIGV2ZW50XG5cdFx0XHRcdGlmKCd0cmFuc2ZlcicgPT09IGdfZXZlbnQudHlwZSkge1xuXHRcdFx0XHRcdC8vIHBhcnNlIHRoZSBhdHRyaWJ1dGVzIGludG8gZGljdFxuXHRcdFx0XHRcdGNvbnN0IGhfYXR0cnMgPSBmb2xkX2F0dHJzKGdfZXZlbnQpIGFzIFBpY2s8VHJhbnNmZXIsICdzZW5kZXInIHwgJ3JlY2lwaWVudCcgfCAnYW1vdW50Jz47XG5cblx0XHRcdFx0XHQvLyBwdXNoIHRyYW5zZmVyIG9iamVjdFxuXHRcdFx0XHRcdGFfb3V0cy5wdXNoKHtcblx0XHRcdFx0XHRcdC4uLmhfYXR0cnMsXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IGdfdHhuLmhlaWdodCxcblx0XHRcdFx0XHRcdHRpbWVzdGFtcDogZ190eG4udGltZXN0YW1wLFxuXHRcdFx0XHRcdFx0dHhoYXNoOiBnX3R4bi50eGhhc2gsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zb2xlLmxvZyhhX291dHMpO1xuXHRcdFxuXHRcdC8vIFRPRE86IGNhY2hlIHR4UmVzcG9uc2VzIGF0IGN1cnJlbnQgaGVpZ2h0XG5cblx0XHRyZXR1cm4gYV9vdXRzO1xuXHR9XG5cblx0YXN5bmMgYmFua1NlbmQoc2Ffc2VuZGVyOiBCZWNoMzIuU3RyaW5nLCBzYV9yZWNpcGllbnQ6IEJlY2gzMi5TdHJpbmcsIHNpX2NvaW46IHN0cmluZywgeGdfYW1vdW50OiBiaWdpbnQsIHNfbWVtbz0nJywgZ19jaGFpbj15d19jaGFpbi5nZXQoKSk6IFByb21pc2U8UGVuZGluZ1NlbmQ+IHtcblx0XHRjb25zdCBnX2NvaW4gPSBnX2NoYWluLmNvaW5zW3NpX2NvaW5dO1xuXG5cdFx0Y29uc3QgZ19tc2dfc2VuZCA9IE1zZ1NlbmQuZnJvbVBhcnRpYWwoe1xuXHRcdFx0YW1vdW50OiBbe1xuXHRcdFx0XHRkZW5vbTogZ19jb2luLmRlbm9tLFxuXHRcdFx0XHRhbW91bnQ6IHhnX2Ftb3VudC50b1N0cmluZygpLFxuXHRcdFx0fV0sXG5cdFx0XHRmcm9tQWRkcmVzczogc2Ffc2VuZGVyLFxuXHRcdFx0dG9BZGRyZXNzOiBzYV9yZWNpcGllbnQsXG5cdFx0fSk7XG5cblx0XHRjb25zdCBnX2VuY29kZWQ6IEFueSA9IHtcblx0XHRcdHR5cGVVcmw6ICcvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kJyxcblx0XHRcdHZhbHVlOiBNc2dTZW5kLmVuY29kZShnX21zZ19zZW5kKS5maW5pc2goKSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgW3NpX3R4biwgYXR1OF90eG5dID0gYXdhaXQgdGhpcy5icm9hZGNhc3Qoe1xuXHRcdFx0bXNnczogW2dfZW5jb2RlZF0sXG5cdFx0XHRtZW1vOiBzX21lbW8sXG5cdFx0XHRnYXNMaW1pdDogMjBfMDAwbixcblx0XHRcdGdhc0ZlZToge1xuXHRcdFx0XHRwcmljZTogMC4yNSxcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Y2hhaW46IHl3X2NoYWluX3JlZi5nZXQoKSxcblx0XHRcdG93bmVyOiBzYV9zZW5kZXIsXG5cdFx0XHRoYXNoOiBzaV90eG4sXG5cdFx0XHRjb2luOiBzaV9jb2luLFxuXHRcdFx0bXNnOiBnX21zZ19zZW5kIGFzIEpzb25Nc2dTZW5kLFxuXHRcdFx0cmF3OiBidWZmZXJfdG9fc3RyaW5nOChhdHU4X3R4biksXG5cdFx0fTtcblx0fVxuXG5cdGFzeW5jIGJyb2FkY2FzdChnY19icm9hZGNhc3Q6IEJyb2FkY2FzdENvbmZpZyk6IFByb21pc2U8W3N0cmluZywgVWludDhBcnJheV0+IHtcblx0XHRjb25zdCB7XG5cdFx0XHRtc2dzOiBhX21zZ3MsXG5cdFx0XHRtZW1vOiBzX21lbW8sXG5cdFx0XHRnYXNMaW1pdDogeGdfZ2FzX2xpbWl0LFxuXHRcdFx0Z2FzRmVlOiBnY19mZWUsXG5cdFx0XHRhY2NvdW50OiBnX2FjY291bnQ9eXdfYWNjb3VudC5nZXQoKSxcblx0XHR9ID0gZ2NfYnJvYWRjYXN0O1xuXG5cdFx0Ly8gcHJlcCBnYXMgZmVlIGRhdGFcblx0XHRsZXQge1xuXHRcdFx0YW1vdW50OiBzX2dhc19mZWVfYW1vdW50LFxuXHRcdFx0ZGVub206IHNfZGVub20sXG5cdFx0fSA9IGdjX2ZlZSBhcyBDb2luO1xuXG5cdFx0Ly8gY3JlYXRlIGdhcyBmZWUgZnJvbSBwcmljZVxuXHRcdGlmKGdjX2ZlZVsncHJpY2UnXSkge1xuXHRcdFx0Ly8gY29tcHV0ZSB0aGUgZ2FzIGZlZSBhbW91bnQgYmFzZWQgb24gZ2FzIHByaWNlIGFuZCBnYXMgbGltaXRcblx0XHRcdHNfZ2FzX2ZlZV9hbW91bnQgPSBuZXcgQmlnTnVtYmVyKGdjX2ZlZVsncHJpY2UnXSBhcyBCaWdOdW1iZXIpLnRpbWVzKHhnX2dhc19saW1pdC50b1N0cmluZygpKS50b1N0cmluZygpO1xuXG5cdFx0XHQvLyB1c2UgZGVmYXVsdCBuYXRpdmUgY29pblxuXHRcdFx0c19kZW5vbSA9IE9iamVjdC52YWx1ZXMoeXdfY2hhaW4uZ2V0KCkuY29pbnMpWzBdLmRlbm9tO1xuXHRcdH1cblxuXHRcdC8vIGRlcml2ZSBhY2NvdW50J3MgYWRkcmVzc1xuXHRcdGNvbnN0IHNhX293bmVyID0gQ2hhaW5zLmFkZHJlc3NGb3IoZ19hY2NvdW50LnB1YmtleSwgdGhpcy5fZ19jaGFpbik7XG5cblx0XHQvLyByZWYgYWNjb3VudCBzZWNyZXQgcGF0aFxuXHRcdGNvbnN0IHBfc2VjcmV0ID0geXdfYWNjb3VudC5nZXQoKS5zZWNyZXQ7XG5cblx0XHQvLyBmZXRjaCBzZWNyZXRcblx0XHRjb25zdCBnX3NlY3JldCA9IGF3YWl0IFNlY3JldHMuZ2V0KHBfc2VjcmV0KTtcblxuXHRcdGlmKCdub25lJyAhPT0gZ19zZWNyZXQ/LnNlY3VyaXR5LnR5cGUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgS2V5cmluZyBub3QgeWV0IGltcGxlbWVudGVkYCk7XG5cdFx0fVxuXG5cdFx0Ly8gaW1wb3J0IHNpZ25pbmcga2V5XG5cdFx0Y29uc3Qga19zZWNwID0gYXdhaXQgU2VjcDI1NmsxS2V5LmltcG9ydChhd2FpdCBSdW50aW1lS2V5LmNyZWF0ZSgoKSA9PiBzdHJpbmc4X3RvX2J1ZmZlcihnX3NlY3JldC5kYXRhKSksIHRydWUpO1xuXG5cdFx0Ly8gZXhwb3J0IGl0cyBwdWJsaWMga2V5XG5cdFx0Y29uc3QgYXR1OF9wayA9IGtfc2VjcC5leHBvcnRQdWJsaWNLZXkoKTtcblxuXHRcdC8vIGVuY29kZSB0eG4gYm9keVxuXHRcdGNvbnN0IGdfdHhfYm9keSA9IFR4Qm9keS5mcm9tUGFydGlhbCh7XG5cdFx0XHRtZXNzYWdlczogYV9tc2dzLFxuXHRcdFx0bWVtbzogc19tZW1vLFxuXHRcdH0pO1xuXHRcdGNvbnN0IGF0dThfYm9keSA9IFR4Qm9keS5lbmNvZGUoZ190eF9ib2R5KS5maW5pc2goKTtcblxuXHRcdC8vIGZldGNoIGxhdGVzdCBzaWduZXIgaW5mb1xuXHRcdGNvbnN0IGdfc2lnbmVyID0gYXdhaXQgdGhpcy5fc2lnbmVyX2RhdGEoc2Ffb3duZXIpO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgYXV0aCBpbmZvIGJ5dGVzXG5cdFx0Y29uc3QgZ19hdXRoX2JvZHkgPSBBdXRoSW5mby5mcm9tUGFydGlhbCh7XG5cdFx0XHRzaWduZXJJbmZvczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cHVibGljS2V5OiB7XG5cdFx0XHRcdFx0XHR0eXBlVXJsOiAnL2Nvc21vcy5jcnlwdG8uc2VjcDI1NmsxLlB1YktleScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogUHViS2V5LmVuY29kZShQdWJLZXkuZnJvbVBhcnRpYWwoe1xuXHRcdFx0XHRcdFx0XHRrZXk6IGF0dThfcGssXG5cdFx0XHRcdFx0XHR9KSkuZmluaXNoKCksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRtb2RlSW5mbzoge1xuXHRcdFx0XHRcdFx0c2luZ2xlOiB7XG5cdFx0XHRcdFx0XHRcdG1vZGU6IFNpZ25Nb2RlLlNJR05fTU9ERV9ESVJFQ1QsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0c2VxdWVuY2U6IGdfc2lnbmVyLnNlcXVlbmNlKycnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdGZlZToge1xuXHRcdFx0XHRhbW91bnQ6IFt7XG5cdFx0XHRcdFx0YW1vdW50OiBzX2dhc19mZWVfYW1vdW50LFxuXHRcdFx0XHRcdGRlbm9tOiBzX2Rlbm9tLFxuXHRcdFx0XHR9XSxcblx0XHRcdFx0Z2FzTGltaXQ6IHhnX2dhc19saW1pdCsnJyxcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHRjb25zdCBhdHU4X2F1dGggPSBBdXRoSW5mby5lbmNvZGUoZ19hdXRoX2JvZHkpLmZpbmlzaCgpO1xuXG5cdFx0Ly8gcHJvZHVjZSBzaWduZWQgZG9jIGJ5dGVzXG5cdFx0Y29uc3QgYXR1OF9zaWduYXR1cmUgPSBhd2FpdCBzaWduX2RvYyhnX3NpZ25lci5hY2NvdW50TnVtYmVyLCBhdHU4X2F1dGgsIGF0dThfYm9keSwgeXdfY2hhaW4uZ2V0KCkuaWQpO1xuXG5cdFx0Ly8gcHJvZHVjZSB0eG4gcmF3IGJ5dGVzXG5cdFx0Y29uc3QgYXR1OF90eG4gPSBUeFJhdy5lbmNvZGUoVHhSYXcuZnJvbVBhcnRpYWwoe1xuXHRcdFx0Ym9keUJ5dGVzOiBhdHU4X2JvZHksXG5cdFx0XHRhdXRoSW5mb0J5dGVzOiBhdHU4X2F1dGgsXG5cdFx0XHRzaWduYXR1cmVzOiBbYXR1OF9zaWduYXR1cmVdLFxuXHRcdH0pKS5maW5pc2goKTtcblxuXHRcdC8vIGJyb2FkY2FzdCB0eG5cblx0XHRjb25zdCBnX3Jlc3BvbnNlID0gYXdhaXQgbmV3IFR4U2VydmljZUNsaWVudCh0aGlzLl95X2dycGMpLmJyb2FkY2FzdFR4KHtcblx0XHRcdHR4Qnl0ZXM6IGF0dThfdHhuLFxuXHRcdFx0bW9kZTogQnJvYWRjYXN0TW9kZS5CUk9BRENBU1RfTU9ERV9BU1lOQyxcblx0XHR9KTtcblxuXHRcdGNvbnN0IHNpX3R4biA9IGdfcmVzcG9uc2UudHhSZXNwb25zZT8udHhoYXNoO1xuXG5cdFx0aWYoIXNpX3R4bikge1xuXHRcdFx0dGhyb3cgc3lzZXJyKHtcblx0XHRcdFx0dGV4dDogJ1R4biBmYWlsZWQgdG8gYnJvYWRjYXN0Jyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBbc2lfdHhuLCBhdHU4X3R4bl07XG5cdH1cbn1cbiIsImltcG9ydCB0eXBlIHsgUmVwbGFjZSB9IGZyb20gJ3RzLXRvb2xiZWx0L291dC9TdHJpbmcvUmVwbGFjZSc7XG5pbXBvcnQgdHlwZSB7IEFwcCwgQXBwU2NoZW1lS2V5IH0gZnJvbSAnIy9tZXRhL2FwcCc7XG5pbXBvcnQgdHlwZSB7IFJlc291cmNlIH0gZnJvbSAnIy9tZXRhL3Jlc291cmNlJztcbmltcG9ydCB0eXBlIHsgSW1hZ2VNZWRpYSwgTWVkaWEgfSBmcm9tICcjL21ldGEvbWVkaWEnO1xuXG5pbXBvcnQge1xuXHRjcmVhdGVfc3RvcmVfY2xhc3MsXG5cdFdyaXRhYmxlU3RvcmVNYXAsXG59IGZyb20gJy4vX2Jhc2UnO1xuXG5pbXBvcnQgeyBTSV9TVE9SRV9NRURJQSB9IGZyb20gJyMvc2hhcmUvY29uc3RhbnRzJztcblxuZXhwb3J0IGNvbnN0IE1lZGlhcyA9IGNyZWF0ZV9zdG9yZV9jbGFzcyh7XG5cdHN0b3JlOiBTSV9TVE9SRV9NRURJQSxcblx0ZXh0ZW5zaW9uOiAnbWFwJyxcblx0Y2xhc3M6IGNsYXNzIE1lZGlhSSBleHRlbmRzIFdyaXRhYmxlU3RvcmVNYXA8dHlwZW9mIFNJX1NUT1JFX01FRElBPiB7XG5cblx0XHQvLyBzdGF0aWMgcGF0aEZvcjxcblx0XHQvLyBcdHNfaG9zdCBleHRlbmRzIHN0cmluZyxcblx0XHQvLyBcdHNfc2NoZW1lIGV4dGVuZHMgQXBwU2NoZW1lS2V5LFxuXHRcdC8vIFx0Z19hcHAgZXh0ZW5kcyBBcHA8UmVwbGFjZTxzX2hvc3QsICc6JywgJysnPiwgc19zY2hlbWU+LFxuXHRcdC8vID4oc19ob3N0OiBzX2hvc3QsIHNfc2NoZW1lOiBzX3NjaGVtZSk6IFJlc291cmNlLlBhdGg8Z19hcHA+IHtcblx0XHQvLyBcdHJldHVybiBgL3NjaGVtZS4ke3Nfc2NoZW1lfS9ob3N0LiR7c19ob3N0LnJlcGxhY2UoLzovZywgJysnKX1gIGFzIFJlc291cmNlLlBhdGg8Z19hcHA+O1xuXHRcdC8vIH1cblxuXHRcdC8vIHN0YXRpYyBwYXRoRnJvbTxcblx0XHQvLyBcdGdfYXBwIGV4dGVuZHMgQXBwLFxuXHRcdC8vID4oZ19hcHA6IEFwcFsnaW50ZXJmYWNlJ10pOiBSZXNvdXJjZS5QYXRoPGdfYXBwPiB7XG5cdFx0Ly8gXHRyZXR1cm4gTWVkaWFJLnBhdGhGb3IoZ19hcHAuaG9zdCwgZ19hcHAuc2NoZW1lKTtcblx0XHQvLyB9XG5cblx0XHQvLyBzdGF0aWMgZ2V0KHNfaG9zdDogc3RyaW5nLCBzX3NjaGVtZTogQXBwU2NoZW1lS2V5KTogUHJvbWlzZTxudWxsIHwgQXBwWydpbnRlcmZhY2UnXT4ge1xuXHRcdC8vIFx0cmV0dXJuIE1lZGlhLm9wZW4oa3NfYXBwcyA9PiBrc19hcHBzLmdldChzX2hvc3QsIHNfc2NoZW1lKSk7XG5cdFx0Ly8gfVxuXG5cdFx0Ly8gZ2V0KHNfaG9zdDogc3RyaW5nLCBzX3NjaGVtZTogQXBwU2NoZW1lS2V5KTogTWVkaWFbJ2ludGVyZmFjZSddIHwgbnVsbCB7XG5cdFx0Ly8gXHQvLyBwcmVwYXJlIGFwcCBwYXRoXG5cdFx0Ly8gXHRjb25zdCBwX2FwcCA9IE1lZGlhSS5wYXRoRm9yKHNfaG9zdCwgc19zY2hlbWUpO1xuXG5cdFx0Ly8gXHQvLyBmZXRjaFxuXHRcdC8vIFx0cmV0dXJuIHRoaXMuX3dfY2FjaGVbcF9hcHBdID8/IG51bGw7XG5cdFx0Ly8gfVxuXG5cblx0XHQvLyBhc3luYyBwdXQoZ19hcHA6IE1lZGlhWydpbnRlcmZhY2UnXSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdC8vIFx0Ly8gcHJlcGFyZSBhcHAgcGF0aFxuXHRcdC8vIFx0Y29uc3QgcF9hcHAgPSBNZWRpYUkucGF0aEZvcihnX2FwcC5ob3N0LCBnX2FwcC5zY2hlbWUpO1xuXG5cdFx0Ly8gXHQvLyB1cGRhdGUgY2FjaGVcblx0XHQvLyBcdHRoaXMuX3dfY2FjaGVbcF9hcHBdID0gZ19hcHA7XG5cblx0XHQvLyBcdC8vIGF0dGVtcHQgdG8gc2F2ZVxuXHRcdC8vIFx0YXdhaXQgdGhpcy5zYXZlKCk7XG5cdFx0Ly8gfVxuXHR9LFxufSk7XG5cbiIsImltcG9ydCB7XG5cdGNyZWF0ZV9zdG9yZV9jbGFzcyxcblx0V3JpdGFibGVTdG9yZU1hcCxcbn0gZnJvbSAnLi9fYmFzZSc7XG5cbmltcG9ydCB7IFNJX1NUT1JFX05FVFdPUktTIH0gZnJvbSAnIy9zaGFyZS9jb25zdGFudHMnO1xuaW1wb3J0IHR5cGUgeyBOZXR3b3JrLCBOZXR3b3JrUGF0aCB9IGZyb20gJyMvbWV0YS9uZXR3b3JrJztcbmltcG9ydCB7IGJ1ZmZlcl90b19iYXNlNjQsIHNoYTI1Nl9zeW5jLCB0ZXh0X3RvX2J1ZmZlciB9IGZyb20gJyMvdXRpbC9kYXRhJztcbmltcG9ydCB0eXBlIHsgUXVlcnlCYWxhbmNlUmVzcG9uc2UgfSBmcm9tICdjb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9iYW5rL3YxYmV0YTEvcXVlcnknO1xuaW1wb3J0IHsgQ29zbW9zTmV0d29yaywgUGVuZGluZ1NlbmQgfSBmcm9tICcjL2NoYWluL21haW4nO1xuaW1wb3J0IHR5cGUgeyBCZWNoMzIsIENoYWluLCBIb2xkaW5nUGF0aCB9IGZyb20gJyMvbWV0YS9jaGFpbic7XG5pbXBvcnQgeyB5d19jaGFpbiB9IGZyb20gJyMvYXBwL21lbSc7XG5pbXBvcnQgdHlwZSB7IENvaW4gfSBmcm9tICdjb3Ntb3MtZ3JwYy9kaXN0L2Nvc21vcy9iYXNlL3YxYmV0YTEvY29pbic7XG5pbXBvcnQgdHlwZSB7IERpY3QsIEpzb25PYmplY3QsIFByb21pc2FibGUgfSBmcm9tICcjL3V0aWwvYmVsdCc7XG5pbXBvcnQgdHlwZSB7IFR4UmVzdWx0IH0gZnJvbSAnY29zbW9zLWdycGMvZGlzdC90ZW5kZXJtaW50L2FiY2kvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBCYWxhbmNlQnVuZGxlID0ge1xuXHRiYWxhbmNlOiBDb2luO1xuXHRjYWNoZWQ6IENhY2hlZDxDb2luPiB8IG51bGw7XG5cdGhvbGRpbmc6IEhvbGRpbmdQYXRoO1xufSAmIEpzb25PYmplY3Q7XG5cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2ZlciB7XG5cdHNlbmRlcjogQmVjaDMyLlN0cmluZztcblx0cmVjaXBpZW50OiBCZWNoMzIuU3RyaW5nO1xuXHRhbW91bnQ6IHN0cmluZztcblx0aGVpZ2h0OiBzdHJpbmc7XG5cdHRpbWVzdGFtcDogc3RyaW5nO1xuXHR0eGhhc2g6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYWNoZWQ8Z193cmFwcGVkPiBleHRlbmRzIEpzb25PYmplY3Qge1xuXHR0aW1lc3RhbXA6IG51bWJlcjtcblx0ZGF0YTogZ193cmFwcGVkICYgSnNvbk9iamVjdDtcblx0YmxvY2s/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV3NUeFJlc3VsdCB7XG5cdGhlaWdodDogc3RyaW5nO1xuXHR0eDogc3RyaW5nO1xuXHRyZXN1bHQ6IHtcblx0XHRkYXRhOiBzdHJpbmc7XG5cdFx0ZXZlbnRzOiB7XG5cdFx0XHR0eXBlOiBzdHJpbmc7XG5cdFx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRcdGtleTogc3RyaW5nO1xuXHRcdFx0XHR2YWx1ZTogc3RyaW5nO1xuXHRcdFx0XHRpbmRleD86IGJvb2xlYW47XG5cdFx0XHR9O1xuXHRcdH1bXTtcblx0XHRnYXNfdXNlZDogc3RyaW5nO1xuXHRcdGdhc193YW50ZWQ6IHN0cmluZztcblx0XHRsb2c6IHN0cmluZztcblx0fTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFMmVJbmZvIHtcblx0c2VxdWVuY2U6IHN0cmluZztcblx0aGVpZ2h0OiBzdHJpbmc7XG5cdHB1YmtleTogVWludDhBcnJheTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY3RpdmVOZXR3b3JrIHtcblx0LyoqXG5cdCAqIFJldHJpZXZlcyBhbmQgdXBkYXRlcyB0aGUgYmFuayBiYWxhbmNlIGZvciBhIHNpbmdsZSBjb2luXG5cdCAqL1xuXHRiYW5rQmFsYW5jZShzYV9vd25lcjogQmVjaDMyLlN0cmluZywgc2lfY29pbj86IHN0cmluZyk6IFByb21pc2U8QmFsYW5jZUJ1bmRsZT47XG5cblx0LyoqXG5cdCAqIFJldHJpZXZlcyBhbmQgdXBkYXRlcyB0aGUgYmFuayBiYWxhbmNlIGZvciBhbGwgY29pbnMgb24gdGhpcyBjaGFpblxuXHQgKi9cblx0YmFua0JhbGFuY2VzKHNhX293bmVyOiBCZWNoMzIuU3RyaW5nKTogUHJvbWlzZTxEaWN0PEJhbGFuY2VCdW5kbGU+PjtcblxuXHRiYW5rU2VuZChzYV9zZW5kZXI6IEJlY2gzMi5TdHJpbmcsIHNhX3JlY2lwaWVudDogQmVjaDMyLlN0cmluZywgc2lfY29pbjogc3RyaW5nLCB4Z19hbW91bnQ6IGJpZ2ludCwgbWVtbz86IHN0cmluZywgZ19jaGFpbj86IENoYWluWydpbnRlcmZhY2UnXSk6IFByb21pc2U8UGVuZGluZ1NlbmQ+O1xuXG5cdGUyZUluZm9Gb3Ioc2Ffb3RoZXI6IEJlY2gzMi5TdHJpbmcpOiBQcm9taXNlPEUyZUluZm8+O1xuXG5cdGVjZGhFbmNyeXB0KGF0dThfb3RoZXJfcHVia2V5OiBVaW50OEFycmF5LCBhdHU4X2lucHV0OiBVaW50OEFycmF5LCBhdHU4X25vbmNlOiBVaW50OEFycmF5LCBnX2NoYWluOiBDaGFpblsnaW50ZXJmYWNlJ10pOiBQcm9taXNlPFVpbnQ4QXJyYXk+XG5cblx0aXNDb250cmFjdChzYV9hY2NvdW50OiBCZWNoMzIuU3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcblxuXHRsaXN0ZW4oYV9ldmVudHM6IHN0cmluZ1tdLCBma2VfcmVjZWl2ZTogKGRfa2lsbDogRXZlbnQgfCBudWxsLCBnX3ZhbHVlPzogSnNvbk9iamVjdCkgPT4gUHJvbWlzYWJsZTx2b2lkPik6ICgpID0+IHZvaWQ7XG5cblx0Z2V0IGhhc1JwYygpOiBib29sZWFuO1xuXG5cdG9uUmVjZWl2ZShzYV9vd25lcjogc3RyaW5nLCBma2VfcmVjZWl2ZTogKGRfa2lsbDogRXZlbnQgfCBudWxsLCBnX3R4PzogV3NUeFJlc3VsdCkgPT4gUHJvbWlzYWJsZTx2b2lkPik6ICgpID0+IHZvaWQ7XG5cblx0b25TZW5kKHNhX293bmVyOiBzdHJpbmcsIGZrZV9zZW5kOiAoZF9raWxsOiBFdmVudCB8IG51bGwsIGdfdHg/OiBXc1R4UmVzdWx0KSA9PiBQcm9taXNhYmxlPHZvaWQ+KTogKCkgPT4gdm9pZDtcblxuXHRjYWNoZWRCYWxhbmNlKHNhX293bmVyOiBCZWNoMzIuU3RyaW5nLCBzaV9jb2luOiBzdHJpbmcpOiBDYWNoZWQ8Q29pbj4gfCBudWxsO1xuXG59XG5cbmV4cG9ydCBjb25zdCBOZXR3b3JrcyA9IGNyZWF0ZV9zdG9yZV9jbGFzcyh7XG5cdHN0b3JlOiBTSV9TVE9SRV9ORVRXT1JLUyxcblx0ZXh0ZW5zaW9uOiAnbWFwJyxcblx0Y2xhc3M6IGNsYXNzIE5ldHdvcmtzSSBleHRlbmRzIFdyaXRhYmxlU3RvcmVNYXA8dHlwZW9mIFNJX1NUT1JFX05FVFdPUktTPiB7XG5cdFx0c3RhdGljIHBhdGhGb3IocF9iYXNlOiBzdHJpbmcpOiBOZXR3b3JrUGF0aCB7XG5cdFx0XHRyZXR1cm4gYC9uZXR3b3JrLiR7YnVmZmVyX3RvX2Jhc2U2NChzaGEyNTZfc3luYyh0ZXh0X3RvX2J1ZmZlcihwX2Jhc2UpKSl9YDtcblx0XHR9XG5cblx0XHRzdGF0aWMgcGF0aEZyb20oZ19uZXR3b3JrOiBOZXR3b3JrWydpbnRlcmZhY2UnXSkge1xuXHRcdFx0cmV0dXJuIE5ldHdvcmtzSS5wYXRoRm9yKGdfbmV0d29yay5ncnBjV2ViVXJsKTtcblx0XHR9XG5cblx0XHRzdGF0aWMgYWN0aXZhdGUoZ19uZXR3b3JrOiBOZXR3b3JrWydpbnRlcmZhY2UnXSwgZ19jaGFpbjogQ2hhaW5bJ2ludGVyZmFjZSddPXl3X2NoYWluLmdldCgpKTogQWN0aXZlTmV0d29yayB7XG5cdFx0XHRyZXR1cm4gbmV3IENvc21vc05ldHdvcmsoZ19uZXR3b3JrLCBnX2NoYWluKTtcblx0XHR9XG5cdH0sXG59KTtcbiIsImltcG9ydCB7XG5cdGNyZWF0ZV9zdG9yZV9jbGFzcyxcblx0V3JpdGFibGVTdG9yZSxcbn0gZnJvbSAnLi9fYmFzZSc7XG5cbmltcG9ydCB7IFNJX1NUT1JFX1RBR1MgfSBmcm9tICcjL3NoYXJlL2NvbnN0YW50cyc7XG5pbXBvcnQgdHlwZSB7IFRhZywgVGFnUGF0aCB9IGZyb20gJyMvbWV0YS90YWcnO1xuaW1wb3J0IHR5cGUgeyBSZXNvdXJjZSB9IGZyb20gJyMvbWV0YS9yZXNvdXJjZSc7XG5cblxuZXhwb3J0IGNvbnN0IFRhZ3MgPSBjcmVhdGVfc3RvcmVfY2xhc3Moe1xuXHRzdG9yZTogU0lfU1RPUkVfVEFHUyxcblx0Y2xhc3M6IGNsYXNzIFRhZ3NJIGV4dGVuZHMgV3JpdGFibGVTdG9yZTx0eXBlb2YgU0lfU1RPUkVfVEFHUz4ge1xuXHRcdHN0YXRpYyB0YWdQYXRoRm9yKGdfdGFnOiBUYWdbJ2ludGVyZmFjZSddKTogVGFnUGF0aCB7XG5cdFx0XHRyZXR1cm4gYC90YWcuJHtnX3RhZy5pbmRleH1gO1xuXHRcdH1cblxuXHRcdGdldFRhZyhpX3RhZzogbnVtYmVyKTogVGFnWydpbnRlcmZhY2UnXSB8IG51bGwge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3dfY2FjaGUucmVnaXN0cnlbaV90YWddID8/IG51bGw7XG5cdFx0fVxuXG5cdFx0Z2V0SWRzRm9yKHBfcmVzb3VyY2U6IFJlc291cmNlLlBhdGgpOiBudW1iZXJbXSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fd19jYWNoZS5tYXBbcF9yZXNvdXJjZV0gPz8gW107XG5cdFx0fVxuXG5cdFx0Z2V0VGFnc0ZvcihwX3Jlc291cmNlOiBSZXNvdXJjZS5QYXRoKTogVGFnWydpbnRlcmZhY2UnXVtdIHtcblx0XHRcdHJldHVybiB0aGlzLmdldElkc0ZvcihwX3Jlc291cmNlKS5tYXAoaV90YWcgPT4gdGhpcy5nZXRUYWcoaV90YWcpISkuZmlsdGVyKGcgPT4gISFnKTtcblx0XHR9XG5cblx0XHRzZXRJZHNGb3IocF9yZXNzb3VyY2U6IFJlc291cmNlLlBhdGgsIGFfaWRzOiBudW1iZXJbXSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdFx0Ly8gdXBkYXRlIGNhY2hlXG5cdFx0XHR0aGlzLl93X2NhY2hlLm1hcFtwX3Jlc3NvdXJjZV0gPSBhX2lkcztcblxuXHRcdFx0Ly8gc2F2ZSBzdG9yZVxuXHRcdFx0cmV0dXJuIHRoaXMuc2F2ZSgpO1xuXHRcdH1cblxuXHRcdHNldFRhZ3NGb3IocF9yZXNvdXJjZTogUmVzb3VyY2UuUGF0aCwgYV90YWdzOiBUYWdbJ2ludGVyZmFjZSddW10pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRcdHJldHVybiB0aGlzLnNldElkc0ZvcihwX3Jlc291cmNlLCBhX3RhZ3MubWFwKGcgPT4gZy5pbmRleCkpO1xuXHRcdH1cblx0fSxcbn0pO1xuXG4iLCJpbXBvcnQgeyBub29wLCBzYWZlX25vdF9lcXVhbCwgc3Vic2NyaWJlLCBydW5fYWxsLCBpc19mdW5jdGlvbiB9IGZyb20gJy4uL2ludGVybmFsL2luZGV4Lm1qcyc7XG5leHBvcnQgeyBnZXRfc3RvcmVfdmFsdWUgYXMgZ2V0IH0gZnJvbSAnLi4vaW50ZXJuYWwvaW5kZXgubWpzJztcblxuY29uc3Qgc3Vic2NyaWJlcl9xdWV1ZSA9IFtdO1xuLyoqXG4gKiBDcmVhdGVzIGEgYFJlYWRhYmxlYCBzdG9yZSB0aGF0IGFsbG93cyByZWFkaW5nIGJ5IHN1YnNjcmlwdGlvbi5cbiAqIEBwYXJhbSB2YWx1ZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge1N0YXJ0U3RvcE5vdGlmaWVyfXN0YXJ0IHN0YXJ0IGFuZCBzdG9wIG5vdGlmaWNhdGlvbnMgZm9yIHN1YnNjcmlwdGlvbnNcbiAqL1xuZnVuY3Rpb24gcmVhZGFibGUodmFsdWUsIHN0YXJ0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic2NyaWJlOiB3cml0YWJsZSh2YWx1ZSwgc3RhcnQpLnN1YnNjcmliZVxuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBhIGBXcml0YWJsZWAgc3RvcmUgdGhhdCBhbGxvd3MgYm90aCB1cGRhdGluZyBhbmQgcmVhZGluZyBieSBzdWJzY3JpcHRpb24uXG4gKiBAcGFyYW0geyo9fXZhbHVlIGluaXRpYWwgdmFsdWVcbiAqIEBwYXJhbSB7U3RhcnRTdG9wTm90aWZpZXI9fXN0YXJ0IHN0YXJ0IGFuZCBzdG9wIG5vdGlmaWNhdGlvbnMgZm9yIHN1YnNjcmlwdGlvbnNcbiAqL1xuZnVuY3Rpb24gd3JpdGFibGUodmFsdWUsIHN0YXJ0ID0gbm9vcCkge1xuICAgIGxldCBzdG9wO1xuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldCgpO1xuICAgIGZ1bmN0aW9uIHNldChuZXdfdmFsdWUpIHtcbiAgICAgICAgaWYgKHNhZmVfbm90X2VxdWFsKHZhbHVlLCBuZXdfdmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG5ld192YWx1ZTtcbiAgICAgICAgICAgIGlmIChzdG9wKSB7IC8vIHN0b3JlIGlzIHJlYWR5XG4gICAgICAgICAgICAgICAgY29uc3QgcnVuX3F1ZXVlID0gIXN1YnNjcmliZXJfcXVldWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Vic2NyaWJlciBvZiBzdWJzY3JpYmVycykge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyWzFdKCk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJfcXVldWUucHVzaChzdWJzY3JpYmVyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChydW5fcXVldWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyX3F1ZXVlW2ldWzBdKHN1YnNjcmliZXJfcXVldWVbaSArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZShmbikge1xuICAgICAgICBzZXQoZm4odmFsdWUpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlKHJ1biwgaW52YWxpZGF0ZSA9IG5vb3ApIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlciA9IFtydW4sIGludmFsaWRhdGVdO1xuICAgICAgICBzdWJzY3JpYmVycy5hZGQoc3Vic2NyaWJlcik7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAxKSB7XG4gICAgICAgICAgICBzdG9wID0gc3RhcnQoc2V0KSB8fCBub29wO1xuICAgICAgICB9XG4gICAgICAgIHJ1bih2YWx1ZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgICAgICAgICBzdG9wID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc2V0LCB1cGRhdGUsIHN1YnNjcmliZSB9O1xufVxuZnVuY3Rpb24gZGVyaXZlZChzdG9yZXMsIGZuLCBpbml0aWFsX3ZhbHVlKSB7XG4gICAgY29uc3Qgc2luZ2xlID0gIUFycmF5LmlzQXJyYXkoc3RvcmVzKTtcbiAgICBjb25zdCBzdG9yZXNfYXJyYXkgPSBzaW5nbGVcbiAgICAgICAgPyBbc3RvcmVzXVxuICAgICAgICA6IHN0b3JlcztcbiAgICBjb25zdCBhdXRvID0gZm4ubGVuZ3RoIDwgMjtcbiAgICByZXR1cm4gcmVhZGFibGUoaW5pdGlhbF92YWx1ZSwgKHNldCkgPT4ge1xuICAgICAgICBsZXQgaW5pdGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICBsZXQgcGVuZGluZyA9IDA7XG4gICAgICAgIGxldCBjbGVhbnVwID0gbm9vcDtcbiAgICAgICAgY29uc3Qgc3luYyA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZm4oc2luZ2xlID8gdmFsdWVzWzBdIDogdmFsdWVzLCBzZXQpO1xuICAgICAgICAgICAgaWYgKGF1dG8pIHtcbiAgICAgICAgICAgICAgICBzZXQocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsZWFudXAgPSBpc19mdW5jdGlvbihyZXN1bHQpID8gcmVzdWx0IDogbm9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdW5zdWJzY3JpYmVycyA9IHN0b3Jlc19hcnJheS5tYXAoKHN0b3JlLCBpKSA9PiBzdWJzY3JpYmUoc3RvcmUsICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICBwZW5kaW5nICY9IH4oMSA8PCBpKTtcbiAgICAgICAgICAgIGlmIChpbml0ZWQpIHtcbiAgICAgICAgICAgICAgICBzeW5jKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHBlbmRpbmcgfD0gKDEgPDwgaSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgaW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgc3luYygpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgICAgIHJ1bl9hbGwodW5zdWJzY3JpYmVycyk7XG4gICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgIH07XG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IGRlcml2ZWQsIHJlYWRhYmxlLCB3cml0YWJsZSB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjhcXFwiIGhlaWdodD1cXFwiOFxcXCI+XFxuXFx0PGcgc3R5bGU9XFxcImZpbGw6IHZhcigtLXN2Zy1jb2xvci1mZywgY3VycmVudENvbG9yKTtcXFwiPlxcblxcdFxcdDxyZWN0IHg9XFxcIjNcXFwiIHdpZHRoPVxcXCIyXFxcIiBoZWlnaHQ9XFxcIjhcXFwiIC8+XFxuXFx0XFx0PHJlY3QgeT1cXFwiNVxcXCIgd2lkdGg9XFxcIjJcXFwiIGhlaWdodD1cXFwiOFxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoLTkwIDAgNSlcXFwiIC8+XFxuXFx0PC9nPlxcbjwvc3ZnPlwiIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0ZXhwb3J0IGxldCBlbGVtZW50OiBIVE1MRWxlbWVudDtcbjwvc2NyaXB0PlxuXG57I2lmIGVsZW1lbnQ/Lm91dGVySFRNTH1cblx0e0BodG1sIGVsZW1lbnQub3V0ZXJIVE1MfVxuey9pZn1cbiIsImltcG9ydCB7IEpzb25WYWx1ZSwgb2RlIH0gZnJvbSAnLi9iZWx0JztcblxuXG5cbnR5cGUgU3BsaXQ8UyBleHRlbmRzIHN0cmluZywgRCBleHRlbmRzIHN0cmluZz4gPSBTIGV4dGVuZHMgYCR7aW5mZXIgVH0ke0R9JHtpbmZlciBVfWAgPyBbVCwgLi4uU3BsaXQ8VSwgRD5dIDogW1NdO1xuXG50eXBlIFRha2VMYXN0PFY+ID0gViBleHRlbmRzIFtdXG5cdD8gbmV2ZXJcblx0OiBWIGV4dGVuZHMgW3N0cmluZ11cblx0XHQ/IFZbMF1cblx0XHQ6IFYgZXh0ZW5kcyBbc3RyaW5nLCAuLi5pbmZlciBSXVxuXHRcdFx0PyBUYWtlTGFzdDxSPlxuXHRcdFx0OiBuZXZlcjtcblxudHlwZSBUcmltTGVmdDxWIGV4dGVuZHMgc3RyaW5nPiA9IFYgZXh0ZW5kcyBgICR7aW5mZXIgUn1gID8gVHJpbUxlZnQ8Uj4gOiBWO1xuXG50eXBlIFRyaW1SaWdodDxWIGV4dGVuZHMgc3RyaW5nPiA9IFYgZXh0ZW5kcyBgJHtpbmZlciBSfSBgID8gVHJpbVJpZ2h0PFI+IDogVjtcblxudHlwZSBUcmltPFYgZXh0ZW5kcyBzdHJpbmc+ID0gVHJpbUxlZnQ8VHJpbVJpZ2h0PFY+PjtcblxudHlwZSBTdHJpcE1vZGlmaWVyPFYgZXh0ZW5kcyBzdHJpbmcsIE0gZXh0ZW5kcyBzdHJpbmc+ID0gViBleHRlbmRzIGAke2luZmVyIEx9JHtNfSR7aW5mZXIgQX1gID8gTCA6IFY7XG5cbnR5cGUgU3RyaXBNb2RpZmllcnM8ViBleHRlbmRzIHN0cmluZz4gPSBTdHJpcE1vZGlmaWVyPFxuXHRTdHJpcE1vZGlmaWVyPFxuXHRcdFN0cmlwTW9kaWZpZXI8XG5cdFx0XHRTdHJpcE1vZGlmaWVyPFYsICcuJz4sICcjJ1xuXHRcdD4sXG5cdCdbJz4sXG4nOic+O1xuXG50eXBlIFRha2VMYXN0QWZ0ZXJUb2tlbjxWIGV4dGVuZHMgc3RyaW5nLCBUIGV4dGVuZHMgc3RyaW5nPiA9IFN0cmlwTW9kaWZpZXJzPFxuXHRUYWtlTGFzdDxcblx0XHRTcGxpdDxcblx0XHRcdFRyaW08Vj4sIFRcblx0XHQ+XG5cdD5cbj47XG5cbnR5cGUgR2V0TGFzdEVsZW1lbnROYW1lPFYgZXh0ZW5kcyBzdHJpbmc+ID0gVGFrZUxhc3RBZnRlclRva2VuPFxuXHRUYWtlTGFzdEFmdGVyVG9rZW48ViwgJyAnPixcblx0Jz4nXG4+O1xuXG50eXBlIEdldEVhY2hFbGVtZW50TmFtZTxWLCBMIGV4dGVuZHMgc3RyaW5nW10gPSBbXT4gPSBWIGV4dGVuZHMgW11cblx0PyBMXG5cdDogViBleHRlbmRzIFtzdHJpbmddXG5cdFx0PyBbLi4uTCwgR2V0TGFzdEVsZW1lbnROYW1lPFZbMF0+XVxuXHRcdDogViBleHRlbmRzIFtzdHJpbmcsIC4uLmluZmVyIFJdXG5cdFx0XHQ/IEdldEVhY2hFbGVtZW50TmFtZTxSLCBbLi4uTCwgR2V0TGFzdEVsZW1lbnROYW1lPFZbMF0+XT5cblx0XHRcdDogW107XG5cbnR5cGUgR2V0RWxlbWVudE5hbWVzPFYgZXh0ZW5kcyBzdHJpbmc+ID0gR2V0RWFjaEVsZW1lbnROYW1lPFNwbGl0PFYsICcsJz4+O1xuXG50eXBlIEVsZW1lbnRCeU5hbWU8ViBleHRlbmRzIHN0cmluZz4gPSBWIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwXG5cdD8gSFRNTEVsZW1lbnRUYWdOYW1lTWFwW1ZdXG5cdDogViBleHRlbmRzIGtleW9mIFNWR0VsZW1lbnRUYWdOYW1lTWFwXG5cdFx0PyBTVkdFbGVtZW50VGFnTmFtZU1hcFtWXVxuXHRcdDogRWxlbWVudDtcblxudHlwZSBNYXRjaEVhY2hFbGVtZW50PFYsIEwgZXh0ZW5kcyBFbGVtZW50ID0gRWxlbWVudD4gPSBWIGV4dGVuZHMgW11cblx0PyBMXG5cdDogViBleHRlbmRzIFtzdHJpbmddXG5cdFx0PyBFbGVtZW50QnlOYW1lPFZbMF0+XG5cdFx0OiBWIGV4dGVuZHMgW3N0cmluZywgLi4uaW5mZXIgUl1cblx0XHRcdD8gTWF0Y2hFYWNoRWxlbWVudDxSLCBMIHwgRWxlbWVudEJ5TmFtZTxWWzBdPj5cblx0XHRcdDogTDtcblxudHlwZSBRdWVyeVJlc3VsdDxcblx0c3Ffc2VsZWN0b3IgZXh0ZW5kcyBzdHJpbmcsXG4+ID0gTWF0Y2hFYWNoRWxlbWVudDxHZXRFbGVtZW50TmFtZXM8c3Ffc2VsZWN0b3I+PjtcblxuZXhwb3J0IGNvbnN0IHFzID0gPFxuXHRzcV9zZWxlY3RvciBleHRlbmRzIHN0cmluZyxcbj4oXG5cdGRtX25vZGU6IFBhcmVudE5vZGUgfCBIVE1MRWxlbWVudCxcblx0c3Ffc2VsZWN0b3I6IHNxX3NlbGVjdG9yLFxuKTogbnVsbCB8IFF1ZXJ5UmVzdWx0PHNxX3NlbGVjdG9yPiA9PiBkbV9ub2RlLnF1ZXJ5U2VsZWN0b3Ioc3Ffc2VsZWN0b3IpO1xuXG5leHBvcnQgY29uc3QgcXNhID0gPFxuXHRzcV9zZWxlY3RvciBleHRlbmRzIHN0cmluZyxcbj4oXG5cdGRtX25vZGU6IFBhcmVudE5vZGUgfCBIVE1MRWxlbWVudCxcblx0c3Ffc2VsZWN0b3I6IHNxX3NlbGVjdG9yLFxuKTogUXVlcnlSZXN1bHQ8c3Ffc2VsZWN0b3I+W10gPT4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG1fbm9kZS5xdWVyeVNlbGVjdG9yQWxsKHNxX3NlbGVjdG9yKSwgMCkgYXMgUXVlcnlSZXN1bHQ8c3Ffc2VsZWN0b3I+W107XG5cbmV4cG9ydCBmdW5jdGlvbiBkZDxcblx0c2lfdGFnIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwLFxuPihcblx0c190YWc6IHNpX3RhZyxcblx0aF9hdHRyczogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbj4gPSB7fSxcblx0YV9jaGlsZHJlbjogKEVsZW1lbnQgfCBzdHJpbmcpW10gPSBbXSxcbik6IEhUTUxFbGVtZW50VGFnTmFtZU1hcFtzaV90YWddIHtcblx0Y29uc3QgZG1fbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoc190YWcpO1xuXG5cdGZvcihjb25zdCBzaV9hdHRyIGluIGhfYXR0cnMpIHtcblx0XHRkbV9ub2RlLnNldEF0dHJpYnV0ZShzaV9hdHRyLCBoX2F0dHJzW3NpX2F0dHJdKycnKTtcblx0fVxuXG5cdGZvcihjb25zdCB3X2NoaWxkIG9mIGFfY2hpbGRyZW4pIHtcblx0XHRkbV9ub2RlLmFwcGVuZCh3X2NoaWxkKTtcblx0fVxuXG5cdHJldHVybiBkbV9ub2RlO1xufVxuXG5cbmNvbnN0IFNfVVVJRF9WNCA9ICd4eHh4eHh4eF94eHh4XzR4eHhfeXh4eF94eHh4eHh4eHh4eHgnO1xuY29uc3QgUl9VVUlEX1Y0ID0gL1t4eV0vZztcblxuZXhwb3J0IGNvbnN0IHV1aWRfdjQgPSBjcnlwdG8ucmFuZG9tVVVJRD8gKCkgPT4gY3J5cHRvLnJhbmRvbVVVSUQoKTogKCk6IHN0cmluZyA9PiB7XG5cdGxldCBkdF9ub3cgPSBEYXRlLm5vdygpO1xuXHRpZigndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHBlcmZvcm1hbmNlKSBkdF9ub3cgKz0gcGVyZm9ybWFuY2Uubm93KCk7XG5cdHJldHVybiBTX1VVSURfVjQucmVwbGFjZShSX1VVSURfVjQsIChzKSA9PiB7XG5cdFx0Y29uc3QgeF9yID0gKGR0X25vdyArIChNYXRoLnJhbmRvbSgpKjE2KSkgJSAxNiB8IDA7XG5cdFx0ZHRfbm93ID0gTWF0aC5mbG9vcihkdF9ub3cgLyAxNik7XG5cdFx0cmV0dXJuICgneCcgPT09IHM/IHhfcjogKCh4X3IgJiAweDMpIHwgMHg4KSkudG9TdHJpbmcoMTYpO1xuXHR9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkX2Nvb2tpZSgpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcblx0cmV0dXJuIGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpLnJlZHVjZSgoaF9vdXQsIHNfY29va2llKSA9PiB7XG5cdFx0Y29uc3QgYV9zcGxpdCA9IHNfY29va2llLnRyaW0oKS5zcGxpdCgnPScpO1xuXHRcdHJldHVybiB7XG5cdFx0XHQuLi5oX291dCxcblx0XHRcdFthX3NwbGl0WzBdXTogYV9zcGxpdC5zbGljZSgxKS5qb2luKCc9JyksXG5cdFx0fTtcblx0fSwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZF9jb29raWVfanNvbjxUIGV4dGVuZHMgSnNvblZhbHVlPUpzb25WYWx1ZT4oc2lfa2V5OiBzdHJpbmcpOiBUIHwgbnVsbCB7XG5cdGNvbnN0IGhfY29va2llID0gcmVhZF9jb29raWUoKTtcblxuXHRpZighKHNpX2tleSBpbiBoX2Nvb2tpZSkpIHJldHVybiBudWxsO1xuXG5cdGxldCB3X3ZhbHVlOiBKc29uVmFsdWU7XG5cdHRyeSB7XG5cdFx0d192YWx1ZSA9IEpTT04ucGFyc2UoaF9jb29raWVbc2lfa2V5XSk7XG5cdH1cblx0Y2F0Y2goZV9wYXJzZSkge1xuXHRcdGNvbnNvbGUuZXJyb3IoYGZhaWxlZCB0byBwYXJzZSBjb29raWUgSlNPTiB2YWx1ZSBhc3NvY2lhdGVkIHdpdGgga2V5ICcke3NpX2tleX0nYCk7XG5cdFx0ZGVsZXRlX2Nvb2tpZShzaV9rZXkpO1xuXHR9XG5cblx0cmV0dXJuIHdfdmFsdWUgYXMgVDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlX2Nvb2tpZShoX2Nvb2tpZTogUmVjb3JkPHN0cmluZywgSnNvblZhbHVlPiwgeHRfZXhwaXJlczogbnVtYmVyKSB7XG5cdGNvbnN0IGhfc2VyaWFsaXplOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cblx0Zm9yKGNvbnN0IFtzaV9rZXksIHpfdmFsdWVdIG9mIG9kZShoX2Nvb2tpZSkpIHtcblx0XHRpZignc3RyaW5nJyA9PT0gdHlwZW9mIHpfdmFsdWUpIHtcblx0XHRcdGhfc2VyaWFsaXplW3NpX2tleV0gPSB6X3ZhbHVlO1xuXHRcdH1cblx0XHRlbHNlIGlmKG51bGwgPT09IHpfdmFsdWUgfHwgJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB6X3ZhbHVlKSB7XG5cdFx0XHRkZWxldGVfY29va2llKHNpX2tleSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aF9zZXJpYWxpemVbc2lfa2V5XSA9IEpTT04uc3RyaW5naWZ5KHpfdmFsdWUpO1xuXHRcdH1cblx0fVxuXG5cdGRvY3VtZW50LmNvb2tpZSA9IE9iamVjdC5lbnRyaWVzKHtcblx0XHQuLi5oX3NlcmlhbGl6ZSxcblx0XHQnbWF4LWFnZSc6ICcnK3h0X2V4cGlyZXMsXG5cdH0pXG5cdFx0Lm1hcCgoW3NpX2tleSwgc192YWx1ZV0pID0+IGAke3NpX2tleX09JHtzX3ZhbHVlfWApXG5cdFx0LmpvaW4oJzsgJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVfY29va2llKHNpX2Nvb2tpZTogc3RyaW5nKSB7XG5cdHJldHVybiB3cml0ZV9jb29raWUoe1xuXHRcdFtzaV9jb29raWVdOiAnJyxcblx0fSwgMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuX2V4dGVybmFsX2xpbmsocF91cmw6IHN0cmluZykge1xuXHRjaHJvbWUudGFicy5jcmVhdGUoe1xuXHRcdHVybDogcF91cmwsXG5cdH0pO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBSZXNvdXJjZSB9IGZyb20gJyMvbWV0YS9yZXNvdXJjZSc7XG5pbXBvcnQgdHlwZSB7IEltYWdlU2V0LCBQZnAgfSBmcm9tICcjL21ldGEvcGZwJztcblxuaW1wb3J0IHtcblx0Y3JlYXRlX3N0b3JlX2NsYXNzLFxuXHRXcml0YWJsZVN0b3JlTWFwLFxufSBmcm9tICcuL19iYXNlJztcblxuaW1wb3J0IHsgU0lfU1RPUkVfUEZQUyB9IGZyb20gJyMvc2hhcmUvY29uc3RhbnRzJztcbmltcG9ydCB7IGRkIH0gZnJvbSAnIy91dGlsL2RvbSc7XG5pbXBvcnQgdHlwZSB7IE1lZGlhcyB9IGZyb20gJy4vbWVkaWFzJztcbmltcG9ydCB0eXBlIHsgRGljdCB9IGZyb20gJyMvdXRpbC9iZWx0JztcblxuZXhwb3J0IHR5cGUgUmVuZGVyQ29uZmlnID0ge1xuXHRhbHQ/OiBzdHJpbmc7XG5cdGRpbTogbnVtYmVyO1xuXHRtZWRpYXM6IEluc3RhbmNlVHlwZTx0eXBlb2YgTWVkaWFzPjtcbn07XG5cblxuZnVuY3Rpb24gcGljdHVyZShoX2ltYWdlOiBJbWFnZVNldCwgZ2NfcmVuZGVyOiBSZW5kZXJDb25maWcsIGhfYXR0cnM6IERpY3Q9e30pOiBIVE1MUGljdHVyZUVsZW1lbnQge1xuXHQvLyBkZXN0cnVjdHVyZSByZXNvbHV0aW9uc1xuXHRjb25zdCB7XG5cdFx0ZGVmYXVsdDogcF9kZWZhdWx0LFxuXHRcdDE2OiBwXzE2LFxuXHRcdDMyOiBwXzMyLFxuXHRcdDQ4OiBwXzQ4LFxuXHRcdDY0OiBwXzY0LFxuXHRcdDk2OiBwXzk2LFxuXHRcdDEyODogcF8xMjgsXG5cdFx0MjU2OiBwXzI1Nixcblx0fSA9IGhfaW1hZ2U7XG5cblx0Ly8gcmVmIG1lZGlhcyBzdG9yZVxuXHRjb25zdCBrc19tZWRpYXMgPSBnY19yZW5kZXIubWVkaWFzO1xuXG5cdC8vIHJlYWQgZWFjaCByZXNvbHV0aW9uXG5cdC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRlZC1vcHRpb25hbC1jaGFpbiAqL1xuXHRjb25zdCBzeF8xNiA9IHBfMTY/IGtzX21lZGlhcy5hdChwXzE2KT8uZGF0YSE6IG51bGw7XG5cdGNvbnN0IHN4XzMyID0gcF8zMj8ga3NfbWVkaWFzLmF0KHBfMzIpPy5kYXRhITogbnVsbDtcblx0Y29uc3Qgc3hfNDggPSBwXzQ4PyBrc19tZWRpYXMuYXQocF80OCk/LmRhdGEhOiBudWxsO1xuXHRjb25zdCBzeF82NCA9IHBfNjQ/IGtzX21lZGlhcy5hdChwXzY0KT8uZGF0YSE6IG51bGw7XG5cdGNvbnN0IHN4Xzk2ID0gcF85Nj8ga3NfbWVkaWFzLmF0KHBfOTYpPy5kYXRhITogbnVsbDtcblx0Y29uc3Qgc3hfMTI4ID0gcF8xMjg/IGtzX21lZGlhcy5hdChwXzEyOCk/LmRhdGEhOiBudWxsO1xuXHRjb25zdCBzeF8yNTYgPSBwXzI1Nj8ga3NfbWVkaWFzLmF0KHBfMjU2KT8uZGF0YSE6IG51bGw7XG5cdGNvbnN0IHN4X2RlZmF1bHQgPSBrc19tZWRpYXMuYXQocF9kZWZhdWx0KSEuZGF0YTtcblx0LyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0ZWQtb3B0aW9uYWwtY2hhaW4gKi9cblxuXHRjb25zdCBzeF9hbnlfeCA9IHN4XzE2IHx8IHN4XzMyIHx8IHN4XzQ4IHx8IHN4XzY0IHx8IHN4Xzk2IHx8IHN4XzEyOCB8fCBzeF8yNTY7XG5cblx0Y29uc3QgeF9kaW1fMXggPSBnY19yZW5kZXIuZGltO1xuXHRjb25zdCB4X2RpbV8yeCA9IHhfZGltXzF4ICogMjtcblxuXHRsZXQgc3hfMXg6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXHRsZXQgc3hfMng6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG5cdC8vIHNvbWUgb3B0aW9uIGV4aXN0c1xuXHRpZihzeF9hbnlfeCkge1xuXHRcdC8vIDF4IHJlc29sdXRpb25cblx0XHRpZih4X2RpbV8xeCA8PSA2NCkge1xuXHRcdFx0aWYoeF9kaW1fMXggPD0gMzIpIHtcblx0XHRcdFx0aWYoeF9kaW1fMXggPD0gMTYpIHtcblx0XHRcdFx0XHRzeF8xeCA9IHN4X2FueV94O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdHN4XzF4ID0gc3hfMzIgfHwgc3hfNDggfHwgc3hfNjQgfHwgc3hfOTYgfHwgc3hfMTI4IHx8IHN4XzI1Njtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZih4X2RpbV8xeCA8PSA0OCkge1xuXHRcdFx0XHRzeF8xeCA9IHN4XzQ4IHx8IHN4XzY0IHx8IHN4Xzk2IHx8IHN4XzEyOCB8fCBzeF8yNTY7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0c3hfMXggPSBzeF82NCB8fCBzeF85NiB8fCBzeF8xMjggfHwgc3hfMjU2O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmKHhfZGltXzF4IDw9IDEyOCkge1xuXHRcdFx0aWYoeF9kaW1fMXggPD0gOTYpIHtcblx0XHRcdFx0c3hfMXggPSBzeF85NiB8fCBzeF8xMjggfHwgc3hfMjU2O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHN4XzF4ID0gc3hfMTI4IHx8IHN4XzI1Njtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZih4X2RpbV8xeCA8PSAyNTYpIHtcblx0XHRcdHN4XzF4ID0gc3hfMjU2O1xuXHRcdH1cblxuXHRcdC8vIDJ4IHJlc29sdXRpb25cblx0XHRpZih4X2RpbV8yeCA8PSA2NCkge1xuXHRcdFx0aWYoeF9kaW1fMnggPD0gMzIpIHtcblx0XHRcdFx0aWYoeF9kaW1fMnggPD0gMTYpIHtcblx0XHRcdFx0XHRzeF8yeCA9IHN4X2FueV94O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdHN4XzJ4ID0gc3hfMzIgfHwgc3hfNDggfHwgc3hfNjQgfHwgc3hfOTYgfHwgc3hfMTI4IHx8IHN4XzI1Njtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZih4X2RpbV8yeCA8PSA0OCkge1xuXHRcdFx0XHRzeF8yeCA9IHN4XzQ4IHx8IHN4XzY0IHx8IHN4Xzk2IHx8IHN4XzEyOCB8fCBzeF8yNTY7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0c3hfMnggPSBzeF82NCB8fCBzeF85NiB8fCBzeF8xMjggfHwgc3hfMjU2O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmKHhfZGltXzJ4IDw9IDEyOCkge1xuXHRcdFx0aWYoeF9kaW1fMnggPD0gOTYpIHtcblx0XHRcdFx0c3hfMnggPSBzeF85NiB8fCBzeF8xMjggfHwgc3hfMjU2O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHN4XzJ4ID0gc3hfMTI4IHx8IHN4XzI1Njtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZih4X2RpbV8yeCA8PSAyNTYpIHtcblx0XHRcdHN4XzJ4ID0gc3hfMjU2O1xuXHRcdH1cblx0fVxuXG5cdC8vIHBpY3R1cmUgZWxlbWVudFxuXHRyZXR1cm4gZGQoJ3BpY3R1cmUnLCB7XG5cdFx0Li4uaF9hdHRycyxcblx0fSwgW1xuXHRcdC8vIDJ4IHZlcnNpb25cblx0XHQuLi5zeF8yeD8gW2RkKCdzb3VyY2UnLCB7XG5cdFx0XHRzcmNzZXQ6IHN4XzJ4LFxuXHRcdFx0bWVkaWE6ICcobWluLXJlc29sdXRpb246IDJkcHB4KScsXG5cdFx0fSldOiBbXSxcblxuXHRcdC8vIGRlZmF1bHQgaW1nXG5cdFx0ZGQoJ2ltZycsIHtcblx0XHRcdHNyYzogc3hfMXggfHwgc3hfZGVmYXVsdCxcblx0XHRcdGFsdDogZ2NfcmVuZGVyLmFsdCB8fCAnJyxcblx0XHR9KSxcblx0XSk7XG59XG5cbmV4cG9ydCBjb25zdCBQZnBzID0gY3JlYXRlX3N0b3JlX2NsYXNzKHtcblx0c3RvcmU6IFNJX1NUT1JFX1BGUFMsXG5cdGV4dGVuc2lvbjogJ21hcCcsXG5cdGNsYXNzOiBjbGFzcyBQZnBJIGV4dGVuZHMgV3JpdGFibGVTdG9yZU1hcDx0eXBlb2YgU0lfU1RPUkVfUEZQUz4ge1xuXHRcdHN0YXRpYyBhc3luYyBsb2FkKHBfcGZwOiBSZXNvdXJjZS5QYXRoPFBmcD4sIGdjX3JlbmRlcjogUmVuZGVyQ29uZmlnKTogUHJvbWlzZTxIVE1MRWxlbWVudCB8IG51bGw+IHtcblx0XHRcdGNvbnN0IGdfcGZwID0gYXdhaXQgUGZwcy5hdChwX3BmcCk7XG5cblx0XHRcdGlmKCFnX3BmcCkgcmV0dXJuIG51bGw7XG5cblx0XHRcdHJldHVybiBQZnBzLnJlbmRlcihnX3BmcCwgZ2NfcmVuZGVyKTtcblx0XHR9XG5cblx0XHRzdGF0aWMgcmVuZGVyKGdfcGZwOiBQZnBbJ2ludGVyZmFjZSddLCBnY19yZW5kZXI6IFJlbmRlckNvbmZpZyk6IEhUTUxFbGVtZW50IHtcblx0XHRcdC8vIGRpbWVuc2lvbiBzdHlsaW5nXG5cdFx0XHRjb25zdCBzeF9zdHlsZV9waWN0dXJlID0gYHdpZHRoOiR7Z2NfcmVuZGVyLmRpbX1weDsgaGVpZ2h0OiR7Z2NfcmVuZGVyLmRpbX1weDtgO1xuXG5cdFx0XHQvLyBkZXBlbmRpbmcgb24gcGZwIHR5cGVcblx0XHRcdHN3aXRjaChnX3BmcC50eXBlKSB7XG5cdFx0XHRcdC8vIHBsYWluIHBmcCB0eXBlXG5cdFx0XHRcdGNhc2UgJ3BsYWluJzoge1xuXHRcdFx0XHRcdHJldHVybiBwaWN0dXJlKGdfcGZwLmltYWdlLCBnY19yZW5kZXIsIHtcblx0XHRcdFx0XHRcdGNsYXNzOiAnZ2xvYmFsX3BmcCcsXG5cdFx0XHRcdFx0XHRzdHlsZTogc3hfc3R5bGVfcGljdHVyZSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGEgcGFpciBvZiBpY29ucyBvZiBlcXVhbCB2aXN1YWwgc2lnbmlmaWNhbmNlXG5cdFx0XHRcdGNhc2UgJ3BhaXInOiB7XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGEgY29tcG9zaXRlIGNvbnNpc3Rpbmcgb2YgYSBmb3JlZ3JvdW5kIGljb24gYW5kIGJhY2tncm91bmQgaWNvblxuXHRcdFx0XHRjYXNlICdjb21wb3NpdGUnOiB7XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHQvLyBUT0RPOiBsb2cgZXJyb3Jcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYXN5bmMgcHV0KGdfYXBwOiBNZWRpYVsnaW50ZXJmYWNlJ10pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyBcdC8vIHByZXBhcmUgYXBwIHBhdGhcblx0XHQvLyBcdGNvbnN0IHBfYXBwID0gTWVkaWFJLnBhdGhGb3IoZ19hcHAuaG9zdCwgZ19hcHAuc2NoZW1lKTtcblxuXHRcdC8vIFx0Ly8gdXBkYXRlIGNhY2hlXG5cdFx0Ly8gXHR0aGlzLl93X2NhY2hlW3BfYXBwXSA9IGdfYXBwO1xuXG5cdFx0Ly8gXHQvLyBhdHRlbXB0IHRvIHNhdmVcblx0XHQvLyBcdGF3YWl0IHRoaXMuc2F2ZSgpO1xuXHRcdC8vIH1cblx0fSxcbn0pO1xuXG4iLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuXHRpbXBvcnQgdHlwZSB7IFBmcFBhdGggfSBmcm9tICcjL21ldGEvcGZwJztcblxuXHRpbXBvcnQgUHV0IGZyb20gJy4vUHV0LnN2ZWx0ZSc7XG5cdGltcG9ydCB7IFBmcHMgfSBmcm9tICcjL3N0b3JlL3BmcHMnO1xuXHRpbXBvcnQgeyBNZWRpYXMgfSBmcm9tICcjL3N0b3JlL21lZGlhcyc7XG5cdGltcG9ydCB7eXdfc3RvcmVfbWVkaWFzfSBmcm9tICcuLi9tZW0nO1xuXHRpbXBvcnQgdHlwZSB7IE5hbWVhYmxlLCBQZnBhYmxlIH0gZnJvbSAnIy9tZXRhL2FibGUnO1xuXHRpbXBvcnQgeyBGX05PT1AgfSBmcm9tICcjL3V0aWwvYmVsdCc7XG5cdGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSc7XG5cblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuXHQvKipcblx0ICogRXh0cmFjdCByZWYgYW5kIG5hbWUgZnJvbSBhIHJlc291cmNlXG5cdCAqL1xuXHRleHBvcnQgbGV0IHJlc291cmNlOiAoUGZwYWJsZSAmIE5hbWVhYmxlKSB8IG51bGwgPSBudWxsO1xuXHRjb25zdCBnX3Jlc291cmNlID0gcmVzb3VyY2U7XG5cblx0LyoqXG5cdCAqIFJlc291cmNlIHBhdGggdG8gdGhlIHBmcFxuXHQgKi9cblx0ZXhwb3J0IGxldCByZWY6IFBmcFBhdGggfCBudWxsIHwgJycgPSBnX3Jlc291cmNlPy5wZnAgfHwgJyc7XG5cblx0LyoqXG5cdCAqIE5hbWUgdG8gdXNlIGZvciBhbHQgYW5kIGZhbGxiYWNrXG5cdCAqL1xuXHRleHBvcnQgbGV0IG5hbWUgPSBnX3Jlc291cmNlPy5uYW1lIHx8ICcnO1xuXHRjb25zdCBzX25hbWUgPSBuYW1lO1xuXG5cdC8qKlxuXHQgKiBTcXVhcmUgZGltZW5zaW9ucyBvZiB0aGUgb3V0cHV0IGVsZW1lbnRcblx0ICovXG5cdGV4cG9ydCBsZXQgZGltOiBudW1iZXI7XG5cdGNvbnN0IHhfZGltID0gZGltO1xuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIGEgcHJlZGV0ZXJtaW5kIHN0eWxpbmcgdG8gdGhlIGJvcmRlclxuXHQgKi9cblx0ZXhwb3J0IGxldCBjaXJjdWxhciA9IGZhbHNlO1xuXHRjb25zdCBzX2NsYXNzZXMgPSBjaXJjdWxhcj8gJyc6ICdzcXVhcmUnO1xuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIGEgcHJlZGV0ZXJtaW5lZCBzdHlsaW5nIHRvIHRoZSBiYWNrZ3JvdW5kXG5cdCAqL1xuXHRleHBvcnQgbGV0IGJnOiAnc2F0aW4nIHwgdW5kZWZpbmVkID0gdm9pZCAwO1xuXHRjb25zdCBzaV9zdHlsZV9iZyA9IGJnO1xuXG5cdGV4cG9ydCBsZXQgZ2VuU3R5bGUgPSAnJztcblx0Y29uc3Qgc3hfc3R5bGVfZ2VuID0gYHdpZHRoOiR7eF9kaW19cHg7IGhlaWdodDoke3hfZGltfXB4OyBgXG5cdFx0KyhnZW5TdHlsZSB8fCAnJylcblx0XHQrKHJlZj8gYGZvbnQtc2l6ZToke3hfZGltfXB4O2A6ICcnKVxuXHRcdCsoY2lyY3VsYXI/IGBib3JkZXItcmFkaXVzOiR7eF9kaW19cHg7YDogJycpO1xuXG5cdGV4cG9ydCBsZXQgcm9vdFN0eWxlID0gJyc7XG5cdGNvbnN0IHN4X3N0eWxlX3Jvb3QgPSByb290U3R5bGU7XG5cblx0ZXhwb3J0IGxldCBzZXR0bGU6IFZvaWRGdW5jdGlvbiB8IHVuZGVmaW5lZCA9IHZvaWQgMDtcblxuXHRhc3luYyBmdW5jdGlvbiBsb2FkX3BmcCgpIHtcblx0XHQvLyBsb2FkIG1lZGlhIHN0b3JlIGlmIGl0J3Mgbm90IGNhY2hlZFxuXHRcdGNvbnN0IGtzX21lZGlhcyA9ICR5d19zdG9yZV9tZWRpYXMgfHwgYXdhaXQgTWVkaWFzLnJlYWQoKTtcblxuXHRcdC8vIGxvYWQgcGZwIGJ5IHJlZlxuXHRcdGNvbnN0IGRtX3BmcCA9IGF3YWl0IFBmcHMubG9hZChyZWYgYXMgUGZwUGF0aCwge1xuXHRcdFx0YWx0OiBzX25hbWUsXG5cdFx0XHRkaW06IHhfZGltLFxuXHRcdFx0bWVkaWFzOiBrc19tZWRpYXMsXG5cdFx0fSk7XG5cblx0XHRxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG5cdFx0XHRkaXNwYXRjaCgnbG9hZGVkJyk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZG1fcGZwO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dGxlX2lubmVyKCk6IFByb21pc2U8bmV2ZXI+IHtcblx0XHRpZihzZXR0bGUpIHF1ZXVlTWljcm90YXNrKCgpID0+IHNldHRsZSEoKSk7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKEZfTk9PUCk7XG5cdH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cblx0QGltcG9ydCAnLi9fYmFzZS5sZXNzJztcblxuXHQudGlsZSB7XG5cdFx0ZGlzcGxheTogaW5saW5lLWZsZXg7XG5cdFx0dmVydGljYWwtYWxpZ246IG1pZGRsZTtcblx0XHRsaW5lLWhlaWdodDogMDtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cblx0XHQmLnNhdGluIHtcblx0XHRcdGJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudChlbGxpcHNlIGZhcnRoZXN0LXNpZGUgYXQgYm90dG9tIHJpZ2h0LCAjMDcwODBhLCAjMGYxMzE3KTtcblx0XHR9XG5cdH1cblxuXHQvLyAuaWNvbiB7XG5cdC8vIFx0Ji5kZWZhdWx0IHtcblx0Ly8gXHRcdC8vIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLWdyYXlzb2Z0KTtcblx0Ly8gXHRcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLWJnKTtcblx0Ly8gXHRcdGJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudChlbGxpcHNlIGZhcnRoZXN0LXNpZGUgYXQgYm90dG9tIHJpZ2h0LCBkYXJrZW4oQHRoZW1lLWNvbG9yLWJsYWNrLCA1MCUpLCB2YXIoLS10aGVtZS1jb2xvci1iZykpO1xuXHQvLyBcdFx0b3V0bGluZTogMXB4IHNvbGlkIHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnkpO1xuXHQvLyBcdH1cblx0Ly8gfVxuXG5cdC5pY29uLWRvbSB7XG5cdFx0Y29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXRleHQtbGlnaHQpO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRmb250LXNpemU6IDMwcHg7XG5cblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci1iZyk7XG5cdFx0YmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KGVsbGlwc2UgZmFydGhlc3Qtc2lkZSBhdCBib3R0b20gcmlnaHQsIGRhcmtlbihAdGhlbWUtY29sb3ItYmxhY2ssIDUwJSksIHZhcigtLXRoZW1lLWNvbG9yLWJnKSk7XG5cdFx0b3V0bGluZTogMXB4IHNvbGlkIHZhcigtLXRoZW1lLWNvbG9yLWJvcmRlcik7XG5cdH1cbjwvc3R5bGU+XG5cbjwhLS0gY2xhc3M6ZGVmYXVsdD17IWtfaWNvbn0gIC0tPlxuPHNwYW4gY2xhc3M9XCJnbG9iYWxfcGZwIHRpbGUge3NfY2xhc3Nlc31cIlxuXHRjbGFzczpzYXRpbj17J3NhdGluJyA9PT0gc2lfc3R5bGVfYmd9XG5cdHN0eWxlPXtzeF9zdHlsZV9yb290fVxuXHRkYXRhLXBhdGg9e3JlZn1cbj5cblx0eyNpZiByZWZ9XG5cdFx0eyNhd2FpdCBsb2FkX3BmcCgpfVxuXHRcdFx0TG9hZGluZyBwZnAuLi5cblx0XHR7OnRoZW4gZG1fcGZwfVxuXHRcdFx0eyNpZiBkbV9wZnB9XG5cdFx0XHRcdDxQdXQgZWxlbWVudD17ZG1fcGZwfSAvPlxuXHRcdFx0ezplbHNlfVxuXHRcdFx0XHQ8IS0tIFRPRE86IGVycm9yIHBsYWNlaG9sZGVyIC0tPlxuXHRcdFx0XHQ8c3BhbiBjbGFzcz1cImVycm9yXCI+XG5cdFx0XHRcdFx0RXJyb3Jcblx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0ey9pZn1cblxuXHRcdFx0eyNhd2FpdCBzZXR0bGVfaW5uZXIoKSB0aGVuIF99X3svYXdhaXR9XG5cdFx0ey9hd2FpdH1cblx0ezplbHNlfVxuXHRcdDxzcGFuIGNsYXNzPVwiaWNvbi1kb21cIiBzdHlsZT17c3hfc3R5bGVfZ2VufT5cblx0XHRcdHtzX25hbWVbMF0gfHwgJyd9XG5cdFx0PC9zcGFuPlxuXHRcdHsjYXdhaXQgc2V0dGxlX2lubmVyKCkgdGhlbiBffV97L2F3YWl0fVxuXHR7L2lmfVxuPC9zcGFuPiIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj5cXG5cXHQ8c3R5bGUgdHlwZT1cXFwidGV4dC9jc3NcXFwiPlxcblxcdFxcdC5zMnItY2xvc2UtZmcge1xcblxcdFxcdFxcdGZpbGw6IHZhcigtLXN2Zy1jb2xvci1mZywgY3VycmVudENvbG9yKTtcXG5cXHRcXHR9XFxuXFx0PC9zdHlsZT5cXG5cXHQ8cGF0aCBjbGFzcz1cXFwiczJyLWNsb3NlLWZnXFxcIiBkPVxcXCJNMTkgNi40MSAxNy41OSA1IDEyIDEwLjU5IDYuNDEgNSA1IDYuNDEgMTAuNTkgMTIgNSAxNy41OSA2LjQxIDE5IDEyIDEzLjQxIDE3LjU5IDE5IDE5IDE3LjU5IDEzLjQxIDEyIDE5IDYuNDF6XFxcIi8+XFxuPC9zdmc+XFxuXCIiLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuXHRpbXBvcnQgU1hfSUNPTl9DTE9TRSBmcm9tICcjL2ljb24vY2xvc2Uuc3ZnP3Jhdyc7XG5cblx0ZXhwb3J0IGxldCBhYnNvbHV0ZSA9IGZhbHNlO1xuXHRleHBvcnQgbGV0IGhlaWdodGxlc3MgPSBmYWxzZTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cblx0LmNsb3NlIHtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0dG9wOiAwO1xuXHRcdHJpZ2h0OiAwO1xuXHRcdG1hcmdpbjogdmFyKC0tbWFyZ2luLCAxMHB4KTtcblx0XHRwYWRkaW5nOiAxMnB4O1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHQtLWljb24tZGlhbWV0ZXI6IDI0cHg7XG5cdFx0LS1pY29uLWNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5KTtcblxuXHRcdG91dGxpbmU6IDFweCBzb2xpZCB2YXIoLS10aGVtZS1jb2xvci1ib3JkZXIpO1xuXHRcdGJvcmRlci1yYWRpdXM6IDBweDtcblx0XHR0cmFuc2l0aW9uOiBib3JkZXItcmFkaXVzIDY1MG1zIHZhcigtLWVhc2Utb3V0LWV4cG8pO1xuXHRcdHBvaW50ZXItZXZlbnRzOiBhbGw7XG5cblx0XHQvLyBtYXJnaW4tdG9wOiBjYWxjKDBweCAtICh2YXIoLS11aS1wYWRkaW5nKSAqIDAuNzUpKTtcblx0XHQvLyBtYXJnaW4tcmlnaHQ6IGNhbGMoMHB4IC0gKHZhcigtLXVpLXBhZGRpbmcpICogMC43NSkpO1xuXG5cdFx0Ji5hYnNvbHV0ZSB7XG5cdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0fVxuXG5cdFx0Jjo6YmVmb3JlIHtcblx0XHRcdC0tb2NjbHVzaW9uLXRoaWNrbmVzczogNHB4O1xuXG5cdFx0XHRjb250ZW50OiAnJztcblx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdHRvcDogY2FsYyh2YXIoLS1vY2NsdXNpb24tdGhpY2tuZXNzKSAvIDIpO1xuXHRcdFx0bGVmdDogY2FsYyh2YXIoLS1vY2NsdXNpb24tdGhpY2tuZXNzKSAvIDIpO1xuXHRcdFx0d2lkdGg6IGNhbGMoMTAwJSAtIHZhcigtLW9jY2x1c2lvbi10aGlja25lc3MpKTtcblx0XHRcdGhlaWdodDogY2FsYygxMDAlIC0gdmFyKC0tb2NjbHVzaW9uLXRoaWNrbmVzcykpO1xuXHRcdFx0b3V0bGluZTogdmFyKC0tb2NjbHVzaW9uLXRoaWNrbmVzcykgc29saWQgdmFyKC0tdGhlbWUtY29sb3ItYmcpO1xuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRcdH1cblxuXHRcdCY6aG92ZXIge1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogMjJweDtcblx0XHR9XG5cdH1cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJjbG9zZSBpY29uXCIgY2xhc3M6YWJzb2x1dGU9e2Fic29sdXRlfSBvbjpjbGljaz5cblx0e0BodG1sIFNYX0lDT05fQ0xPU0V9XG48L2Rpdj5cbiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCB0eXBlIHsgUGZwLCBQZnBQYXRoIH0gZnJvbSAnIy9tZXRhL3BmcCc7XG5cblx0aW1wb3J0IHR5cGUgeyBSZXNvdXJjZSB9IGZyb20gJyMvbWV0YS9yZXNvdXJjZSc7XG5cblx0aW1wb3J0IFBmcERpc3BsYXkgZnJvbSAnLi9QZnBEaXNwbGF5LnN2ZWx0ZSc7XG5cblx0aW1wb3J0IHR5cGUgeyBOYW1lYWJsZSwgUGZwYWJsZSB9IGZyb20gJyMvbWV0YS9hYmxlJztcblx0aW1wb3J0IHsgeXdfc3RvcmVfdGFncyB9IGZyb20gJy4uL21lbSc7XG5cdGltcG9ydCB0eXBlIHsgUHJvbWlzYWJsZSB9IGZyb20gJyMvdXRpbC9iZWx0Jztcblx0aW1wb3J0IHsgb25EZXN0cm95IH0gZnJvbSAnc3ZlbHRlJztcblx0XG5cdFxuXHQvLyBpbXBvcnQgTG9ja091dGxpbmUgZnJvbSAnc3ZlbHRlLW1hdGVyaWFsLWljb25zL0xvY2tPdXRsaW5lLnN2ZWx0ZSc7XG5cdFxuXHQvLyBpbXBvcnQge1xuXHQvLyBcdEhfQUREUl9UT19DT05UQUNULFxuXHQvLyBcdEhfSUNPTlMsXG5cdC8vIFx0SF9UQUdTLFxuXHQvLyB9IGZyb20gJyMvc2ltL2RhdGEnO1xuXHRcblx0Ly8gaW1wb3J0IEFkZHJlc3MgZnJvbSAnLi9BZGRyZXNzLnN2ZWx0ZSc7XG5cblx0LyoqXG5cdCAqIFBhdGggdG8gYmFzZSByZXNvdXJjZSB0byByZXByZXNlbnRcblx0ICovXG5cdGV4cG9ydCBsZXQgcmVzb3VyY2VQYXRoID0gJyc7XG5cdGNvbnN0IHBfcmVzb3VyY2UgPSByZXNvdXJjZVBhdGg7XG5cblx0LyoqXG5cdCAqIEJhc2UgcmVzb3VyY2UgdG8gcmVwcmVzZW50XG5cdCAqL1xuXHRleHBvcnQgbGV0IHJlc291cmNlOiAoTmFtZWFibGUgJiBQZnBhYmxlKSA9IG51bGwhO1xuXHRjb25zdCBnX3Jlc291cmNlID0gcmVzb3VyY2U7XG5cdFxuXHQvKipcblx0ICogT3ZlcnJpZGVzIG5hbWUgYXV0b21hdGljYWxseSBleHRyYWN0ZWQgZnJvbSByZXNvdXJjZVxuXHQgKi9cblx0ZXhwb3J0IGxldCBuYW1lID0gZ19yZXNvdXJjZT8ubmFtZTtcblx0Y29uc3Qgc19uYW1lID0gbmFtZTtcblxuXHQvKipcblx0ICogQWRkcyBgICh7VkFMVUV9KWAgYWZ0ZXIgdGhlIG5hbWUgaW4gYSBkaW1tZXIgY29sb3Jcblx0ICovXG5cdGV4cG9ydCBsZXQgcG9zdG5hbWUgPSAnJztcblx0Y29uc3Qgc19wb3N0bmFtZSA9IHBvc3RuYW1lO1xuXG5cdC8qKlxuXHQgKiBPdmVycmlkZXMgcGZwIGF1dG9tYXRpY2FsbHkgZXh0cmFjdGVkIGZyb20gcmVzb3VyY2Vcblx0ICovXG5cdGV4cG9ydCBsZXQgcGZwOiBQZnBQYXRoID0gZ19yZXNvdXJjZT8ucGZwO1xuXHRjb25zdCBwX3BmcCA9IHBmcDtcblxuXHQvKipcblx0ICogU2V0cyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgcGZwIGljb25cblx0ICovXG5cdGV4cG9ydCBsZXQgcGZwRGltID0gNDg7XG5cdGNvbnN0IHhfZGltX3BmcCA9IHBmcERpbTtcblxuXG5cdGV4cG9ydCBsZXQgYW1vdW50OiBQcm9taXNhYmxlPHN0cmluZz4gPSAnJztcblx0ZXhwb3J0IGxldCBmaWF0OiBQcm9taXNhYmxlPHN0cmluZz4gPSAnJztcblx0ZXhwb3J0IGxldCBzeW1ib2wgPSAnJztcblx0ZXhwb3J0IGxldCBsb2NrSWNvbiA9IGZhbHNlO1xuXHRleHBvcnQgbGV0IGFkZHJlc3MgPSAnJztcblx0ZXhwb3J0IGxldCBkZXRhaWwgPSAnJztcblx0ZXhwb3J0IGxldCBwcmVmaXggPSAnJztcblxuXG5cdC8vIGV4cG9ydCBsZXQgdGFnUmVmczogVGFnLlJlZltdIHwgbnVsbCA9IG51bGw7XG5cdGV4cG9ydCBsZXQgcm9vdFN0eWxlID0gJyc7XG5cblx0ZXhwb3J0IGxldCByb290Q2xhc3NlcyA9ICcnO1xuXHRjb25zdCBzX2NsYXNzZXMgPSByb290Q2xhc3NlcztcblxuXHRleHBvcnQgbGV0IGljb25DbGFzcyA9ICcnO1xuXHQvLyBjb25zdCBrX2ljb24gPSBpY29uO1xuXHQvLyAkOiBhX3RhZ3MgPSB0YWdSZWZzPy5sZW5ndGg/IHRhZ1JlZnMubWFwKHBfdGFnID0+IEhfVEFHU1twX3RhZ10pOiBbXTtcblxuXHQvLyBsb2FkIHRhZ3MgZnJvbSByZXNvdXJjZSBwYXRoXG5cdGNvbnN0IGFfdGFncyA9ICR5d19zdG9yZV90YWdzPy5nZXRUYWdzRm9yKHBfcmVzb3VyY2UpIHx8IFtdO1xuXHRcblx0Y29uc3QgYXNfaW50ZXJ2YWxzID0gbmV3IFNldDxudW1iZXI+KCk7XG5cblx0b25EZXN0cm95KCgpID0+IHtcblx0XHRmb3IoY29uc3QgaV9pbnRlcnZhbCBvZiBhc19pbnRlcnZhbHMpIHtcblx0XHRcdGNsZWFySW50ZXJ2YWwoaV9pbnRlcnZhbCk7XG5cdFx0fVxuXHR9KTtcblxuXHRsZXQgc19zcGluID0gJyc7XG5cdGFzeW5jIGZ1bmN0aW9uIHN0YXJ0X3NwaW5uZXI8d192YWx1ZT4oZHBfdGhpbmc6IFByb21pc2FibGU8d192YWx1ZT4pOiBQcm9taXNlPHdfdmFsdWU+IHtcblx0XHRjb25zdCBBX1NQSU4gPSBbJ+KXnCDil50nLCAnIMuJ4peeJywgJyDLjeKXnScsICfil58g4peeJywgJ+KXnMuNICcsICfil5/LiSAnXTtcblx0XHRsZXQgaV9zcGluID0gMDtcblx0XHRzX3NwaW4gPSBBX1NQSU5bMF07XG5cblx0XHQvLyB0aGluZyBpcyBhIHByb21pc2Vcblx0XHRpZihkcF90aGluZyBpbnN0YW5jZW9mIFByb21pc2UpIHtcblx0XHRcdC8vIHN0YXJ0IHNwaW5uZXJcblx0XHRcdGNvbnN0IGlfaW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHRpX3NwaW4gPSAoaV9zcGluICsgMSkgJSBBX1NQSU4ubGVuZ3RoO1xuXHRcdFx0XHRzX3NwaW4gPSBBX1NQSU5baV9zcGluXTtcblx0XHRcdH0sIDEyNSk7XG5cblx0XHRcdC8vIGFkZCB0byBpbnRlcnZhbHNcblx0XHRcdGFzX2ludGVydmFscy5hZGQoaV9pbnRlcnZhbCk7XG5cblx0XHRcdC8vIGF3YWl0IHRoaW5nIHRvIHJlc29sdmVcblx0XHRcdGNvbnN0IHdfdmFsdWUgPSBhd2FpdCBkcF90aGluZztcblxuXHRcdFx0Ly8gc3RvcCBpbnRlcnZhbFxuXHRcdFx0Y2xlYXJJbnRlcnZhbChpX2ludGVydmFsKTtcblxuXHRcdFx0Ly8gcmV0dXJuIHZhbHVlXG5cdFx0XHRyZXR1cm4gd192YWx1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZHBfdGhpbmc7XG5cdH1cblxuXG5cdC8vIGNvbnN0IGtfY29udGFjdCA9IGFkZHJlc3M/IEhfQUREUl9UT19DT05UQUNUW2FkZHJlc3NdIHx8IG51bGw6IG51bGw7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cblx0QGltcG9ydCAnLi9fYmFzZS5sZXNzJztcblxuXHQubW9ub2xpbmUoKSB7XG5cdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRvdmVyZmxvdy14OiBoaWRkZW47XG5cdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdH1cblxuXHQ6cm9vdCB7XG5cdFx0LS1yb3ctcGFkZGluZzogMjBweDtcblx0XHQtLWljb24tbWFyZ2luOiAxNHB4O1xuXHR9XG5cblx0LnJvdyB7XG5cdFx0cGFkZGluZzogdmFyKC0tcm93LXBhZGRpbmcpO1xuXHRcdGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS10aGVtZS1jb2xvci1ib3JkZXIpO1xuXHRcdGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS10aGVtZS1jb2xvci1ib3JkZXIpO1xuXHRcdG1heC13aWR0aDogdmFyKC0tYXBwLXdpbmRvdy13aWR0aCk7XG5cdFx0Ly8gb3ZlcmZsb3cteDogc2Nyb2xsO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblxuXHRcdC8vIGRpc3BsYXk6IGZsZXg7XG5cdFx0Ly8gYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuXHRcdD4uYmFubmVyIHtcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdH1cblxuXHRcdCY6bnRoLWNoaWxkKG4rMikge1xuXHRcdFx0Ym9yZGVyLXRvcC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdFx0fVxuXG5cdFx0XG5cdFx0Lmljb24ge1xuXHRcdFx0LS1pY29uLWRpYW1ldGVyOiB2YXIoLS1pY29uLWRpYW1ldGVyLCB2YXIoLS1hcHAtaWNvbi1kaWFtZXRlcikpO1xuXG5cdFx0XHRmbGV4OiAwIDAgdmFyKC0taWNvbi1kaWFtZXRlcik7XG5cdFx0XHRtYXJnaW4tcmlnaHQ6IHZhcigtLWljb24tbWFyZ2luKTtcblxuXHRcdFx0Ji5ib3JkZXJlZCB7XG5cdFx0XHRcdC0taWNvbi1kaWFtZXRlcjogY2FsYyh2YXIoLS1hcHAtaWNvbi1kaWFtZXRlcikgLSAycHgpO1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1idXR0b24tY29sb3IsIHZhcigtLXRoZW1lLWNvbG9yLWJvcmRlcikpO1xuXHRcdFx0fVxuXG5cdFx0XHQmPi5pY29uLTIwIHtcblx0XHRcdFx0Omdsb2JhbCgmKSB7XG5cdFx0XHRcdFx0LS1pY29uLWRpYW1ldGVyOiAxOHB4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGltZyB7XG5cdFx0XHRcdDpnbG9iYWwoJikge1xuXHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6IDIwJTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQmLnNpdGUge1xuXHRcdFx0XHQ6Z2xvYmFsKCYpIHtcblx0XHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci10ZXh0LWxpZ2h0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIGRpc3BsYXk6IGZsZXg7XG5cdFx0Ly8gZmxleC1kaXJlY3Rpb246IHJvdztcblx0XHQvLyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuXHRcdC5jb250ZW50IHtcblx0XHRcdGZsZXg6IGF1dG87XG5cblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRtYXgtd2lkdGg6IGNhbGModmFyKC0tYXBwLXdpbmRvdy13aWR0aCkgLSB2YXIoLS1hcHAtaWNvbi1kaWFtZXRlcikgLSB2YXIoLS1pY29uLW1hcmdpbikgLSB2YXIoLS1yb3ctcGFkZGluZykgLSB2YXIoLS1yb3ctcGFkZGluZykpO1xuXG5cdFx0XHQ+LnBhcnQge1xuXHRcdFx0XHRmbGV4OiBhdXRvO1xuXG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cblx0XHRcdFx0Ji5tYWluIHtcblx0XHRcdFx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXG5cdFx0XHRcdFx0Pi50aXRsZSB7XG5cdFx0XHRcdFx0XHRmbGV4OiAwO1xuXG5cdFx0XHRcdFx0XHQ+Lm5hbWUge1xuXHRcdFx0XHRcdFx0XHQuZm9udChyZWd1bGFyKTtcblxuXHRcdFx0XHRcdFx0XHRkaXNwbGF5OiBpbmxpbmUtZmxleDtcblx0XHRcdFx0XHRcdFx0bWF4LXdpZHRoOiAxMDAlO1xuXG5cdFx0XHRcdFx0XHRcdD4udGV4dCB7XG5cdFx0XHRcdFx0XHRcdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdFx0XHRcdFx0XHRcdC5tb25vbGluZSgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0LnBvc3RuYW1lIHtcblx0XHRcdFx0XHRcdFx0XHRjb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItdGV4dC1tZWQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdD4uc3ltYm9sIHtcblx0XHRcdFx0XHRcdFx0Y29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXRleHQtbWVkKTtcblx0XHRcdFx0XHRcdFx0bWFyZ2luLWxlZnQ6IDAuNjNjaDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0PnN2ZyB7XG5cdFx0XHRcdFx0XHRcdDpnbG9iYWwoJikge1xuXHRcdFx0XHRcdFx0XHRcdG1hcmdpbi1sZWZ0OiAtMXB4O1xuXHRcdFx0XHRcdFx0XHRcdHZlcnRpY2FsLWFsaWduOiAtM3B4O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Pi5zdWJ0aXRsZSB7XG5cdFx0XHRcdFx0XHRmbGV4OiAwO1xuXG5cdFx0XHRcdFx0XHQ+Om50aC1jaGlsZChuKzIpIHtcblx0XHRcdFx0XHRcdFx0Omdsb2JhbCgmKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWFyZ2luLWxlZnQ6IDRweDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQ+LmRldGFpbCB7XG5cdFx0XHRcdFx0XHRcdGNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci10ZXh0LW1lZCk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHQuZm9udCh0aW55KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Pi5jb250YWN0IHtcblx0XHRcdFx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0XHRcdFx0Y29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXRleHQtbWVkKTtcblx0XHRcdFx0XHRcdFx0LmZvbnQodGlueSk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHQ+Lmljb24ge1xuXHRcdFx0XHRcdFx0XHRcdC0taWNvbi1kaWFtZXRlcjogMC44ZW07XG5cdFx0XHRcdFx0XHRcdFx0LS1pY29uLW1hcmdpbjogMC41ZW07XG5cdFx0XHRcdFx0XHRcdFx0bWFyZ2luLXRvcDogLTFweDtcblx0XHRcdFx0XHRcdFx0XHRjb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItdGV4dC1tZWQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdD4udGV4dCB7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdCYuc3RhdHVzIHtcblx0XHRcdFx0XHR0ZXh0LWFsaWduOiByaWdodDtcblx0XHRcdFx0XHRtYXgtd2lkdGg6IDU1JTtcblxuXHRcdFx0XHRcdC5hbW91bnQge1xuXHRcdFx0XHRcdFx0LmZvbnQocmVndWxhcik7XG5cdFx0XHRcdFx0XHRmbGV4OiAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC5maWF0IHtcblx0XHRcdFx0XHRcdC5mb250KHRpbnkpO1xuXHRcdFx0XHRcdFx0ZmxleDogMDtcblx0XHRcdFx0XHRcdGNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci10ZXh0LW1lZCk7XG5cdFx0XHRcdFx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC5udW1iZXIge1xuXHRcdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRcdG1heC13aWR0aDogMThjaDtcblx0XHRvdmVyZmxvdy14OiBzY3JvbGw7XG5cdFx0LmhpZGUtc2Nyb2xsYmFyKCk7XG5cblx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHR9XG5cblx0LnJlc3Qge1xuXHRcdG1hcmdpbi1sZWZ0OiBjYWxjKHZhcigtLWljb24tbWFyZ2luKSArIHZhcigtLWFwcC1pY29uLWRpYW1ldGVyKSk7XG5cdH1cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJyb3cge3NfY2xhc3Nlc31cIiBzdHlsZT17cm9vdFN0eWxlfSBvbjpjbGljaz5cblx0PGRpdiBjbGFzcz1cImJhbm5lclwiPlxuXHRcdDxzcGFuIGNsYXNzPVwiaWNvbiB7aWNvbkNsYXNzfVwiPlxuXHRcdFx0PHNsb3QgbmFtZT1cImljb25cIj5cblx0XHRcdDwhLS0gY2xhc3M6Ym9yZGVyZWQ9e2tfaWNvbj8uaXNIdG1sfT4gLS0+XG5cdFx0XHRcdDxzbG90IG5hbWU9XCJpY29uXCI+XG5cdFx0XHRcdFx0PFBmcERpc3BsYXkgcmVmPXtwX3BmcH0gbmFtZT17c19uYW1lfSBkaW09e3hfZGltX3BmcH0gLz5cblx0XHRcdFx0PC9zbG90PlxuXHRcdFx0PC9zbG90PlxuXHRcdDwvc3Bhbj5cblx0XHQ8c3BhbiBjbGFzcz1cImNvbnRlbnRcIj5cblx0XHRcdDxzcGFuIGNsYXNzPVwibWFpbiBwYXJ0XCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJ0aXRsZVwiPlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwibmFtZVwiPlxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+XG5cdFx0XHRcdFx0XHRcdHtzX25hbWV9XG5cdFx0XHRcdFx0XHRcdHsjaWYgc19wb3N0bmFtZX1cblx0XHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cInBvc3RuYW1lXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHQoe3NfcG9zdG5hbWV9KVxuXHRcdFx0XHRcdFx0XHRcdDwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0ey9pZn1cblx0XHRcdFx0XHRcdDwvc3Bhbj5cblx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdFx0PCEtLSB7I2lmIHN5bWJvbH1cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwic3ltYm9sXCI+XG5cdFx0XHRcdFx0XHRcdHtzeW1ib2x9XG5cdFx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdFx0ey9pZn0gLS0+XG5cdFx0XHRcdFx0eyNpZiBsb2NrSWNvbn1cblx0XHRcdFx0XHRcdDwhLS0gPExvY2tPdXRsaW5lIGNvbG9yPSd2YXIoLS10aGVtZS1jb2xvci10ZXh0LW1lZCknIHNpemU9JzE4cHgnIC8+IC0tPlxuXHRcdFx0XHRcdHsvaWZ9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHR7I2lmIGFkZHJlc3MgfHwgc3ltYm9sIHx8IGRldGFpbCB8fCBhX3RhZ3MubGVuZ3RoIHx8ICQkc2xvdHMuZGV0YWlsfVxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJzdWJ0aXRsZVwiPlxuXHQ8IS0tIFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHsjaWYga19jb250YWN0fVxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImNvbnRhY3RcIj5cblx0XHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImljb25cIj5cblx0XHRcdFx0XHRcdFx0XHRcdDxGYSBpY29uPXtmYVVzZXJ9IC8+XG5cdFx0XHRcdFx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwidGV4dFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0e2tfY29udGFjdC5kZWYubGFiZWx9XG5cdFx0XHRcdFx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHQ8L3NwYW4+IC0tPlxuXHRcdFx0XHRcdFx0eyNpZiBkZXRhaWwgfHwgc3ltYm9sIHx8ICQkc2xvdHMuZGV0YWlsfVxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImRldGFpbFwiPlxuXHRcdFx0XHRcdFx0XHRcdDxzbG90IG5hbWU9XCJkZXRhaWxcIj5cblx0XHRcdFx0XHRcdFx0XHRcdHtwcmVmaXh9e2RldGFpbCB8fCBzeW1ib2x9XG5cdFx0XHRcdFx0XHRcdFx0PC9zbG90PlxuXHRcdFx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdFx0XHR7OmVsc2UgaWYgYWRkcmVzc31cblx0XHRcdFx0XHRcdFx0PCEtLSA8QWRkcmVzcyBhZGRyZXNzPXthZGRyZXNzfSAvPiAtLT5cblx0XHRcdFx0XHRcdHsvaWZ9XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdHsvaWZ9XG5cdFx0XHQ8L3NwYW4+XG5cblx0XHRcdDxzcGFuIGNsYXNzPVwic3RhdHVzIHBhcnRcIj5cblx0XHRcdFx0eyNpZiAkJHNsb3RzLnN0YXR1c31cblx0XHRcdFx0XHQ8c2xvdCBuYW1lPVwic3RhdHVzXCI+PC9zbG90PlxuXHRcdFx0XHR7OmVsc2UgaWYgYW1vdW50fVxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJhbW91bnRcIj5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwibnVtYmVyXCI+XG5cdFx0XHRcdFx0XHRcdHsjYXdhaXQgc3RhcnRfc3Bpbm5lcihhbW91bnQpfVxuXHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiZm9udC1mYW1pbHlfbW9ub1wiPlxuXHRcdFx0XHRcdFx0XHRcdFx0e3Nfc3Bpbn1cblx0XHRcdFx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdFx0XHRcdHs6dGhlbiBzX2Ftb3VudH1cblx0XHRcdFx0XHRcdFx0XHQ8c3Bhbj5cblx0XHRcdFx0XHRcdFx0XHRcdHthbW91bnR9XG5cdFx0XHRcdFx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHR7L2F3YWl0fVxuXHRcdFx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdFx0eyNpZiBmaWF0fVxuXHRcdFx0XHRcdFx0PGRpdj5cblx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJmaWF0XCI+XG5cdFx0XHRcdFx0XHRcdFx0eyNhd2FpdCBmaWF0fVxuXHRcdFx0XHRcdFx0XHRcdFx0JC4uLlxuXHRcdFx0XHRcdFx0XHRcdHs6dGhlbiBzX2ZpYXR9XG5cdFx0XHRcdFx0XHRcdFx0XHR7c19maWF0fVxuXHRcdFx0XHRcdFx0XHRcdHsvYXdhaXR9XG5cdFx0XHRcdFx0XHRcdDwvc3Bhbj5cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdHsvaWZ9XG5cdFx0XHRcdHsvaWZ9XG5cdFx0XHQ8L3NwYW4+XG5cdFx0PC9zcGFuPlxuXHRcdHsjaWYgJCRzbG90cy5yaWdodH1cblx0XHRcdDxzbG90IG5hbWU9XCJyaWdodFwiIC8+XG5cdFx0ey9pZn1cblx0PC9kaXY+XG5cblx0PGRpdiBjbGFzcz1cInJlc3RcIj5cblx0XHR7I2lmIGFfdGFncy5sZW5ndGggfHwgJCRzbG90cy50YWdzfVxuXHRcdFx0PHNsb3QgbmFtZT1cInRhZ3NcIj5cblx0XHRcdFx0PCEtLSA8VGFncyB0YWdzPXthX3RhZ3N9IGNvbGxhcHNlZCAvPiAtLT5cblx0XHRcdDwvc2xvdD5cblx0XHR7L2lmfVxuXG5cdFx0PHNsb3QgbmFtZT1cImJlbG93XCI+PC9zbG90PlxuXHQ8L2Rpdj5cbjwvZGl2PlxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0aW1wb3J0IHtjcmVhdGVFdmVudERpc3BhdGNoZXJ9IGZyb20gJ3N2ZWx0ZSc7XG5cblx0aW1wb3J0IFNYX0lDT05fQUREIGZyb20gJyMvaWNvbi9hZGQtc21hbGwuc3ZnP3Jhdyc7XG5cdGltcG9ydCBDbG9zZSBmcm9tICcuL0Nsb3NlLnN2ZWx0ZSc7XG5cdGltcG9ydCB7IHl3X3BvcHVwIH0gZnJvbSAnLi4vbWVtJztcblxuXHRleHBvcnQgbGV0IHRpdGxlOiBzdHJpbmc7XG5cblx0ZXhwb3J0IGxldCBidXR0b25zOiBzdHJpbmdbXSA9IFtdO1xuXG5cdGV4cG9ydCBsZXQgYmFyZSA9IGZhbHNlO1xuXG5cdGV4cG9ydCBsZXQgY2xvc2VzID0gZmFsc2U7XG5cdGNvbnN0IGJfY2xvc2VzID0gY2xvc2VzO1xuXG5cdGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG5cdC50aXRsZSB7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcblxuXHRcdD4ucmlnaHQge1xuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGdhcDogOHB4O1xuXHRcdH1cblxuXHRcdC5waWxsIHtcblx0XHRcdD4uaWNvbiB7XG5cdFx0XHRcdC0taWNvbi1kaWFtZXRlcjogOHB4O1xuXHRcdFx0XHQtLWljb24tY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuPC9zdHlsZT5cblxuPGRpdiBjbGFzcz1cInRpdGxlXCI+XG5cdDxzcGFuIGNsYXNzPVwidGV4dFwiPlxuXHRcdHt0aXRsZX1cblx0PC9zcGFuPlxuXG5cdDxzcGFuIGNsYXNzPVwicmlnaHRcIj5cblx0XHR7I2VhY2ggYnV0dG9ucyBhcyBzX2J1dHRvbn1cblx0XHRcdDxidXR0b24gY2xhc3M9XCJwaWxsXCIgb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKHNfYnV0dG9uLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICdfJykpfT5cblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+XG5cdFx0XHRcdFx0e3NfYnV0dG9ufVxuXHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHR7L2VhY2h9XG5cblx0XHR7I2lmICFiYXJlfVxuXHRcdFx0PGJ1dHRvbiBjbGFzcz1cInBpbGxcIiBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goJ2FkZF9uZXcnKX0+XG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwiaWNvblwiPlxuXHRcdFx0XHRcdHtAaHRtbCBTWF9JQ09OX0FERH1cblx0XHRcdFx0PC9zcGFuPlxuXG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwidGV4dFwiPlxuXHRcdFx0XHRcdEFkZCBOZXdcblx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0PC9idXR0b24+XG5cdFx0ey9pZn1cblxuXHRcdHsjaWYgYl9jbG9zZXN9XG5cdFx0XHQ8Q2xvc2Ugb246Y2xpY2s9eygpID0+ICR5d19wb3B1cCA9IG51bGx9IC8+XG5cdFx0ey9pZn1cblx0PC9zcGFuPlxuPC9kaXY+XG4iLCJleHBvcnQgeyBpZGVudGl0eSBhcyBsaW5lYXIgfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuXG4vKlxuQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0ZGVzbFxuRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIExpY2Vuc2UgaHR0cHM6Ly9naXRodWIuY29tL21hdHRkZXNsL2Vhc2VzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcbiovXG5mdW5jdGlvbiBiYWNrSW5PdXQodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4ICogMS41MjU7XG4gICAgaWYgKCh0ICo9IDIpIDwgMSlcbiAgICAgICAgcmV0dXJuIDAuNSAqICh0ICogdCAqICgocyArIDEpICogdCAtIHMpKTtcbiAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMik7XG59XG5mdW5jdGlvbiBiYWNrSW4odCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xufVxuZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG59XG5mdW5jdGlvbiBib3VuY2VPdXQodCkge1xuICAgIGNvbnN0IGEgPSA0LjAgLyAxMS4wO1xuICAgIGNvbnN0IGIgPSA4LjAgLyAxMS4wO1xuICAgIGNvbnN0IGMgPSA5LjAgLyAxMC4wO1xuICAgIGNvbnN0IGNhID0gNDM1Ni4wIC8gMzYxLjA7XG4gICAgY29uc3QgY2IgPSAzNTQ0Mi4wIC8gMTgwNS4wO1xuICAgIGNvbnN0IGNjID0gMTYwNjEuMCAvIDE4MDUuMDtcbiAgICBjb25zdCB0MiA9IHQgKiB0O1xuICAgIHJldHVybiB0IDwgYVxuICAgICAgICA/IDcuNTYyNSAqIHQyXG4gICAgICAgIDogdCA8IGJcbiAgICAgICAgICAgID8gOS4wNzUgKiB0MiAtIDkuOSAqIHQgKyAzLjRcbiAgICAgICAgICAgIDogdCA8IGNcbiAgICAgICAgICAgICAgICA/IGNhICogdDIgLSBjYiAqIHQgKyBjY1xuICAgICAgICAgICAgICAgIDogMTAuOCAqIHQgKiB0IC0gMjAuNTIgKiB0ICsgMTAuNzI7XG59XG5mdW5jdGlvbiBib3VuY2VJbk91dCh0KSB7XG4gICAgcmV0dXJuIHQgPCAwLjVcbiAgICAgICAgPyAwLjUgKiAoMS4wIC0gYm91bmNlT3V0KDEuMCAtIHQgKiAyLjApKVxuICAgICAgICA6IDAuNSAqIGJvdW5jZU91dCh0ICogMi4wIC0gMS4wKSArIDAuNTtcbn1cbmZ1bmN0aW9uIGJvdW5jZUluKHQpIHtcbiAgICByZXR1cm4gMS4wIC0gYm91bmNlT3V0KDEuMCAtIHQpO1xufVxuZnVuY3Rpb24gY2lyY0luT3V0KHQpIHtcbiAgICBpZiAoKHQgKj0gMikgPCAxKVxuICAgICAgICByZXR1cm4gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpO1xuICAgIHJldHVybiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSk7XG59XG5mdW5jdGlvbiBjaXJjSW4odCkge1xuICAgIHJldHVybiAxLjAgLSBNYXRoLnNxcnQoMS4wIC0gdCAqIHQpO1xufVxuZnVuY3Rpb24gY2lyY091dCh0KSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgxIC0gLS10ICogdCk7XG59XG5mdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gdCA8IDAuNSA/IDQuMCAqIHQgKiB0ICogdCA6IDAuNSAqIE1hdGgucG93KDIuMCAqIHQgLSAyLjAsIDMuMCkgKyAxLjA7XG59XG5mdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiB0O1xufVxuZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICAgIGNvbnN0IGYgPSB0IC0gMS4wO1xuICAgIHJldHVybiBmICogZiAqIGYgKyAxLjA7XG59XG5mdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgIHJldHVybiB0IDwgMC41XG4gICAgICAgID8gMC41ICpcbiAgICAgICAgICAgIE1hdGguc2luKCgoKzEzLjAgKiBNYXRoLlBJKSAvIDIpICogMi4wICogdCkgKlxuICAgICAgICAgICAgTWF0aC5wb3coMi4wLCAxMC4wICogKDIuMCAqIHQgLSAxLjApKVxuICAgICAgICA6IDAuNSAqXG4gICAgICAgICAgICBNYXRoLnNpbigoKC0xMy4wICogTWF0aC5QSSkgLyAyKSAqICgyLjAgKiB0IC0gMS4wICsgMS4wKSkgKlxuICAgICAgICAgICAgTWF0aC5wb3coMi4wLCAtMTAuMCAqICgyLjAgKiB0IC0gMS4wKSkgK1xuICAgICAgICAgICAgMS4wO1xufVxuZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gTWF0aC5zaW4oKDEzLjAgKiB0ICogTWF0aC5QSSkgLyAyKSAqIE1hdGgucG93KDIuMCwgMTAuMCAqICh0IC0gMS4wKSk7XG59XG5mdW5jdGlvbiBlbGFzdGljT3V0KHQpIHtcbiAgICByZXR1cm4gKE1hdGguc2luKCgtMTMuMCAqICh0ICsgMS4wKSAqIE1hdGguUEkpIC8gMikgKiBNYXRoLnBvdygyLjAsIC0xMC4wICogdCkgKyAxLjApO1xufVxuZnVuY3Rpb24gZXhwb0luT3V0KHQpIHtcbiAgICByZXR1cm4gdCA9PT0gMC4wIHx8IHQgPT09IDEuMFxuICAgICAgICA/IHRcbiAgICAgICAgOiB0IDwgMC41XG4gICAgICAgICAgICA/ICswLjUgKiBNYXRoLnBvdygyLjAsIDIwLjAgKiB0IC0gMTAuMClcbiAgICAgICAgICAgIDogLTAuNSAqIE1hdGgucG93KDIuMCwgMTAuMCAtIHQgKiAyMC4wKSArIDEuMDtcbn1cbmZ1bmN0aW9uIGV4cG9Jbih0KSB7XG4gICAgcmV0dXJuIHQgPT09IDAuMCA/IHQgOiBNYXRoLnBvdygyLjAsIDEwLjAgKiAodCAtIDEuMCkpO1xufVxuZnVuY3Rpb24gZXhwb091dCh0KSB7XG4gICAgcmV0dXJuIHQgPT09IDEuMCA/IHQgOiAxLjAgLSBNYXRoLnBvdygyLjAsIC0xMC4wICogdCk7XG59XG5mdW5jdGlvbiBxdWFkSW5PdXQodCkge1xuICAgIHQgLz0gMC41O1xuICAgIGlmICh0IDwgMSlcbiAgICAgICAgcmV0dXJuIDAuNSAqIHQgKiB0O1xuICAgIHQtLTtcbiAgICByZXR1cm4gLTAuNSAqICh0ICogKHQgLSAyKSAtIDEpO1xufVxuZnVuY3Rpb24gcXVhZEluKHQpIHtcbiAgICByZXR1cm4gdCAqIHQ7XG59XG5mdW5jdGlvbiBxdWFkT3V0KHQpIHtcbiAgICByZXR1cm4gLXQgKiAodCAtIDIuMCk7XG59XG5mdW5jdGlvbiBxdWFydEluT3V0KHQpIHtcbiAgICByZXR1cm4gdCA8IDAuNVxuICAgICAgICA/ICs4LjAgKiBNYXRoLnBvdyh0LCA0LjApXG4gICAgICAgIDogLTguMCAqIE1hdGgucG93KHQgLSAxLjAsIDQuMCkgKyAxLjA7XG59XG5mdW5jdGlvbiBxdWFydEluKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codCwgNC4wKTtcbn1cbmZ1bmN0aW9uIHF1YXJ0T3V0KHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codCAtIDEuMCwgMy4wKSAqICgxLjAgLSB0KSArIDEuMDtcbn1cbmZ1bmN0aW9uIHF1aW50SW5PdXQodCkge1xuICAgIGlmICgodCAqPSAyKSA8IDEpXG4gICAgICAgIHJldHVybiAwLjUgKiB0ICogdCAqIHQgKiB0ICogdDtcbiAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpO1xufVxuZnVuY3Rpb24gcXVpbnRJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdCAqIHQgKiB0O1xufVxuZnVuY3Rpb24gcXVpbnRPdXQodCkge1xuICAgIHJldHVybiAtLXQgKiB0ICogdCAqIHQgKiB0ICsgMTtcbn1cbmZ1bmN0aW9uIHNpbmVJbk91dCh0KSB7XG4gICAgcmV0dXJuIC0wLjUgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHQpIC0gMSk7XG59XG5mdW5jdGlvbiBzaW5lSW4odCkge1xuICAgIGNvbnN0IHYgPSBNYXRoLmNvcyh0ICogTWF0aC5QSSAqIDAuNSk7XG4gICAgaWYgKE1hdGguYWJzKHYpIDwgMWUtMTQpXG4gICAgICAgIHJldHVybiAxO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIDEgLSB2O1xufVxuZnVuY3Rpb24gc2luZU91dCh0KSB7XG4gICAgcmV0dXJuIE1hdGguc2luKCh0ICogTWF0aC5QSSkgLyAyKTtcbn1cblxuZXhwb3J0IHsgYmFja0luLCBiYWNrSW5PdXQsIGJhY2tPdXQsIGJvdW5jZUluLCBib3VuY2VJbk91dCwgYm91bmNlT3V0LCBjaXJjSW4sIGNpcmNJbk91dCwgY2lyY091dCwgY3ViaWNJbiwgY3ViaWNJbk91dCwgY3ViaWNPdXQsIGVsYXN0aWNJbiwgZWxhc3RpY0luT3V0LCBlbGFzdGljT3V0LCBleHBvSW4sIGV4cG9Jbk91dCwgZXhwb091dCwgcXVhZEluLCBxdWFkSW5PdXQsIHF1YWRPdXQsIHF1YXJ0SW4sIHF1YXJ0SW5PdXQsIHF1YXJ0T3V0LCBxdWludEluLCBxdWludEluT3V0LCBxdWludE91dCwgc2luZUluLCBzaW5lSW5PdXQsIHNpbmVPdXQgfTtcbiIsImltcG9ydCB7IGN1YmljSW5PdXQsIGxpbmVhciwgY3ViaWNPdXQgfSBmcm9tICcuLi9lYXNpbmcvaW5kZXgubWpzJztcbmltcG9ydCB7IGlzX2Z1bmN0aW9uLCBhc3NpZ24gfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XG5cbmZ1bmN0aW9uIGJsdXIobm9kZSwgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gNDAwLCBlYXNpbmcgPSBjdWJpY0luT3V0LCBhbW91bnQgPSA1LCBvcGFjaXR5ID0gMCB9ID0ge30pIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgY29uc3QgdGFyZ2V0X29wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcbiAgICBjb25zdCBmID0gc3R5bGUuZmlsdGVyID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLmZpbHRlcjtcbiAgICBjb25zdCBvZCA9IHRhcmdldF9vcGFjaXR5ICogKDEgLSBvcGFjaXR5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiAoX3QsIHUpID0+IGBvcGFjaXR5OiAke3RhcmdldF9vcGFjaXR5IC0gKG9kICogdSl9OyBmaWx0ZXI6ICR7Zn0gYmx1cigke3UgKiBhbW91bnR9cHgpO2BcbiAgICB9O1xufVxuZnVuY3Rpb24gZmFkZShub2RlLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGxpbmVhciB9ID0ge30pIHtcbiAgICBjb25zdCBvID0gK2dldENvbXB1dGVkU3R5bGUobm9kZSkub3BhY2l0eTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiB0ID0+IGBvcGFjaXR5OiAke3QgKiBvfWBcbiAgICB9O1xufVxuZnVuY3Rpb24gZmx5KG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNPdXQsIHggPSAwLCB5ID0gMCwgb3BhY2l0eSA9IDAgfSA9IHt9KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHRhcmdldF9vcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICBjb25zdCBvZCA9IHRhcmdldF9vcGFjaXR5ICogKDEgLSBvcGFjaXR5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiAodCwgdSkgPT4gYFxuXHRcdFx0dHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7KDEgLSB0KSAqIHh9cHgsICR7KDEgLSB0KSAqIHl9cHgpO1xuXHRcdFx0b3BhY2l0eTogJHt0YXJnZXRfb3BhY2l0eSAtIChvZCAqIHUpfWBcbiAgICB9O1xufVxuZnVuY3Rpb24gc2xpZGUobm9kZSwgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gNDAwLCBlYXNpbmcgPSBjdWJpY091dCB9ID0ge30pIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgY29uc3Qgb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlRmxvYXQoc3R5bGUuaGVpZ2h0KTtcbiAgICBjb25zdCBwYWRkaW5nX3RvcCA9IHBhcnNlRmxvYXQoc3R5bGUucGFkZGluZ1RvcCk7XG4gICAgY29uc3QgcGFkZGluZ19ib3R0b20gPSBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdCb3R0b20pO1xuICAgIGNvbnN0IG1hcmdpbl90b3AgPSBwYXJzZUZsb2F0KHN0eWxlLm1hcmdpblRvcCk7XG4gICAgY29uc3QgbWFyZ2luX2JvdHRvbSA9IHBhcnNlRmxvYXQoc3R5bGUubWFyZ2luQm90dG9tKTtcbiAgICBjb25zdCBib3JkZXJfdG9wX3dpZHRoID0gcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJUb3BXaWR0aCk7XG4gICAgY29uc3QgYm9yZGVyX2JvdHRvbV93aWR0aCA9IHBhcnNlRmxvYXQoc3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6IHQgPT4gJ292ZXJmbG93OiBoaWRkZW47JyArXG4gICAgICAgICAgICBgb3BhY2l0eTogJHtNYXRoLm1pbih0ICogMjAsIDEpICogb3BhY2l0eX07YCArXG4gICAgICAgICAgICBgaGVpZ2h0OiAke3QgKiBoZWlnaHR9cHg7YCArXG4gICAgICAgICAgICBgcGFkZGluZy10b3A6ICR7dCAqIHBhZGRpbmdfdG9wfXB4O2AgK1xuICAgICAgICAgICAgYHBhZGRpbmctYm90dG9tOiAke3QgKiBwYWRkaW5nX2JvdHRvbX1weDtgICtcbiAgICAgICAgICAgIGBtYXJnaW4tdG9wOiAke3QgKiBtYXJnaW5fdG9wfXB4O2AgK1xuICAgICAgICAgICAgYG1hcmdpbi1ib3R0b206ICR7dCAqIG1hcmdpbl9ib3R0b219cHg7YCArXG4gICAgICAgICAgICBgYm9yZGVyLXRvcC13aWR0aDogJHt0ICogYm9yZGVyX3RvcF93aWR0aH1weDtgICtcbiAgICAgICAgICAgIGBib3JkZXItYm90dG9tLXdpZHRoOiAke3QgKiBib3JkZXJfYm90dG9tX3dpZHRofXB4O2BcbiAgICB9O1xufVxuZnVuY3Rpb24gc2NhbGUobm9kZSwgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gNDAwLCBlYXNpbmcgPSBjdWJpY091dCwgc3RhcnQgPSAwLCBvcGFjaXR5ID0gMCB9ID0ge30pIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgY29uc3QgdGFyZ2V0X29wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgIGNvbnN0IHNkID0gMSAtIHN0YXJ0O1xuICAgIGNvbnN0IG9kID0gdGFyZ2V0X29wYWNpdHkgKiAoMSAtIG9wYWNpdHkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6IChfdCwgdSkgPT4gYFxuXHRcdFx0dHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gc2NhbGUoJHsxIC0gKHNkICogdSl9KTtcblx0XHRcdG9wYWNpdHk6ICR7dGFyZ2V0X29wYWNpdHkgLSAob2QgKiB1KX1cblx0XHRgXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRyYXcobm9kZSwgeyBkZWxheSA9IDAsIHNwZWVkLCBkdXJhdGlvbiwgZWFzaW5nID0gY3ViaWNJbk91dCB9ID0ge30pIHtcbiAgICBsZXQgbGVuID0gbm9kZS5nZXRUb3RhbExlbmd0aCgpO1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBpZiAoc3R5bGUuc3Ryb2tlTGluZWNhcCAhPT0gJ2J1dHQnKSB7XG4gICAgICAgIGxlbiArPSBwYXJzZUludChzdHlsZS5zdHJva2VXaWR0aCk7XG4gICAgfVxuICAgIGlmIChkdXJhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChzcGVlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IDgwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gbGVuIC8gc3BlZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24obGVuKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogKHQsIHUpID0+IGBzdHJva2UtZGFzaGFycmF5OiAke3QgKiBsZW59ICR7dSAqIGxlbn1gXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyb3NzZmFkZShfYSkge1xuICAgIHZhciB7IGZhbGxiYWNrIH0gPSBfYSwgZGVmYXVsdHMgPSBfX3Jlc3QoX2EsIFtcImZhbGxiYWNrXCJdKTtcbiAgICBjb25zdCB0b19yZWNlaXZlID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHRvX3NlbmQgPSBuZXcgTWFwKCk7XG4gICAgZnVuY3Rpb24gY3Jvc3NmYWRlKGZyb20sIG5vZGUsIHBhcmFtcykge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSBkID0+IE1hdGguc3FydChkKSAqIDMwLCBlYXNpbmcgPSBjdWJpY091dCB9ID0gYXNzaWduKGFzc2lnbih7fSwgZGVmYXVsdHMpLCBwYXJhbXMpO1xuICAgICAgICBjb25zdCB0byA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGR4ID0gZnJvbS5sZWZ0IC0gdG8ubGVmdDtcbiAgICAgICAgY29uc3QgZHkgPSBmcm9tLnRvcCAtIHRvLnRvcDtcbiAgICAgICAgY29uc3QgZHcgPSBmcm9tLndpZHRoIC8gdG8ud2lkdGg7XG4gICAgICAgIGNvbnN0IGRoID0gZnJvbS5oZWlnaHQgLyB0by5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IGQgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIGNvbnN0IG9wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlbGF5LFxuICAgICAgICAgICAgZHVyYXRpb246IGlzX2Z1bmN0aW9uKGR1cmF0aW9uKSA/IGR1cmF0aW9uKGQpIDogZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNpbmcsXG4gICAgICAgICAgICBjc3M6ICh0LCB1KSA9PiBgXG5cdFx0XHRcdG9wYWNpdHk6ICR7dCAqIG9wYWNpdHl9O1xuXHRcdFx0XHR0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcblx0XHRcdFx0dHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7dSAqIGR4fXB4LCR7dSAqIGR5fXB4KSBzY2FsZSgke3QgKyAoMSAtIHQpICogZHd9LCAke3QgKyAoMSAtIHQpICogZGh9KTtcblx0XHRcdGBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNpdGlvbihpdGVtcywgY291bnRlcnBhcnRzLCBpbnRybykge1xuICAgICAgICByZXR1cm4gKG5vZGUsIHBhcmFtcykgPT4ge1xuICAgICAgICAgICAgaXRlbXMuc2V0KHBhcmFtcy5rZXksIHtcbiAgICAgICAgICAgICAgICByZWN0OiBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ZXJwYXJ0cy5oYXMocGFyYW1zLmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyByZWN0IH0gPSBjb3VudGVycGFydHMuZ2V0KHBhcmFtcy5rZXkpO1xuICAgICAgICAgICAgICAgICAgICBjb3VudGVycGFydHMuZGVsZXRlKHBhcmFtcy5rZXkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3Jvc3NmYWRlKHJlY3QsIG5vZGUsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBub2RlIGlzIGRpc2FwcGVhcmluZyBhbHRvZ2V0aGVyXG4gICAgICAgICAgICAgICAgLy8gKGkuZS4gd2Fzbid0IGNsYWltZWQgYnkgdGhlIG90aGVyIGxpc3QpXG4gICAgICAgICAgICAgICAgLy8gdGhlbiB3ZSBuZWVkIHRvIHN1cHBseSBhbiBvdXRyb1xuICAgICAgICAgICAgICAgIGl0ZW1zLmRlbGV0ZShwYXJhbXMua2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2sgJiYgZmFsbGJhY2sobm9kZSwgcGFyYW1zLCBpbnRybyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICB0cmFuc2l0aW9uKHRvX3NlbmQsIHRvX3JlY2VpdmUsIGZhbHNlKSxcbiAgICAgICAgdHJhbnNpdGlvbih0b19yZWNlaXZlLCB0b19zZW5kLCB0cnVlKVxuICAgIF07XG59XG5cbmV4cG9ydCB7IGJsdXIsIGNyb3NzZmFkZSwgZHJhdywgZmFkZSwgZmx5LCBzY2FsZSwgc2xpZGUgfTtcbiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCB7XG5cdFx0c2xpZGUgYXMgc3ZlbHRlX3NsaWRlLFxuXHRcdHR5cGUgU2xpZGVQYXJhbXMsXG5cdFx0dHlwZSBUcmFuc2l0aW9uQ29uZmlnLFxuXHR9IGZyb20gJ3N2ZWx0ZS90cmFuc2l0aW9uJztcblxuXHRleHBvcnQgbGV0IG5hbWUgPSBcIlwiO1xuXHRleHBvcnQgbGV0IGtleTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBTZXQgdG8gdHJ1ZSB0byByZW5kZXIgdGhlIGZpZWxkIG9uIGEgc2luZ2xlIHJvd1xuXHQgKi9cblx0ZXhwb3J0IGxldCBzaG9ydCA9IGZhbHNlO1xuXG5cdGV4cG9ydCBsZXQgc2xpZGVzID0gZmFsc2U7XG5cdGV4cG9ydCBsZXQgZG91YmxlID0gZmFsc2U7XG5cblx0Ly8gaW50ZXJmYWNlIEF1dG9Db25maWcge1xuXHQvLyBcdGZuOiAobm9kZTogRWxlbWVudCwgeyBkZWxheSwgZHVyYXRpb24sIGVhc2luZyB9PzogU2xpZGVQYXJhbXMpID0+IFRyYW5zaXRpb25Db25maWc7XG5cdC8vIFx0Y29uZmlnOiBUcmFuc2l0aW9uQ29uZmlnO1xuXHQvLyB9XG5cblx0Ly8gZnVuY3Rpb24gYXV0byhkbV9ub2RlOiBIVE1MRWxlbWVudCwgZ2NfYXV0bzoge30pOiBUcmFuc2l0aW9uQ29uZmlnIHtcblx0Ly8gXHRpZihzbGlkZSkge1xuXHQvLyBcdFx0cmV0dXJuIHN2ZWx0ZV9zbGlkZShkbV9ub2RlLCB7XG5cdC8vIFx0XHRcdGR1cmF0aW9uOiA1MDAsXG5cdC8vIFx0XHR9KTtcblx0Ly8gXHR9XG5cblx0Ly8gXHRyZXR1cm4gdm9pZCAwIGFzIHVua25vd24gYXMgVHJhbnNpdGlvbkNvbmZpZztcblx0Ly8gfVxuXHRcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cblx0QGltcG9ydCAnLi9fYmFzZS5sZXNzJztcblxuXHQuZmllbGQge1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cblx0XHQuZmllbGQtbmFtZSB7XG5cdFx0XHRtYXJnaW4tYm90dG9tOiAxMHB4O1xuXHRcdFx0Y29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXRleHQtbWVkKTtcblxuXHRcdFx0Zm9udC1zaXplOiAxM3B4O1xuXHRcdFx0Zm9udC13ZWlnaHQ6IDMwMDtcblx0XHR9XG5cblx0XHQuZmllbGQtdmFsdWUge1xuXHRcdFx0LmZvbnQocmVndWxhcik7XG5cdFx0XHRjb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItdGV4dC1saWdodCk7XG5cdFx0fVxuXG5cdFx0Ji5zaG9ydCB7XG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXG5cdFx0XHQ+LmZpZWxkLW5hbWUge1xuXHRcdFx0XHRmbGV4OiAxO1xuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAwO1xuXHRcdFx0fVxuXG5cdFx0XHQ+LmZpZWxkLXZhbHVlIHtcblx0XHRcdFx0ZmxleDogMztcblx0XHRcdFx0d2lkdGg6IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwiZmllbGRcIiBjbGFzczpzaG9ydD17c2hvcnR9IGlkPVwiZmllbGQte2tleX1cIiBjbGFzczpkb3VibGU9e2RvdWJsZX0+XG5cdDxkaXYgY2xhc3M9XCJmaWVsZC1uYW1lXCIgdHJhbnNpdGlvbjpzdmVsdGVfc2xpZGU9e3tkdXJhdGlvbjpzbGlkZXM/IDM1MDogMH19PlxuXHRcdDxsYWJlbCBmb3I9XCJ7a2V5fVwiPntuYW1lfTwvbGFiZWw+XG5cdDwvZGl2PlxuXG5cdDxkaXYgY2xhc3M9XCJmaWVsZC12YWx1ZVwiIHRyYW5zaXRpb246c3ZlbHRlX3NsaWRlPXt7ZHVyYXRpb246c2xpZGVzPyAzNTA6IDB9fT5cblx0XHQ8c2xvdD48L3Nsb3Q+XG5cdDwvZGl2PlxuXG5cdDxzbG90IG5hbWU9XCJwb3N0XCIgLz5cbjwvZGl2PiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICdzdmVsdGUnO1xuXHRcblx0aW1wb3J0IHsgRl9OT09QLCBQcm9taXNhYmxlIH0gZnJvbSAnIy91dGlsL2JlbHQnO1xuXHRpbXBvcnQgdHlwZSB7IFBhZ2UsIFBhZ2VDb25maWcgfSBmcm9tICcuLi9zY3JlZW4vX3NjcmVlbnMnO1xuXG5cdHR5cGUgUHJvbWlzYWJsZUlnbm9yZUZ1bmN0aW9uID0gKCkgPT4gUHJvbWlzYWJsZTxhbnk+O1xuXG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIGluY2x1ZGVzIGEgY2FuY2VsIGJ1dHRvblxuXHQgKi9cblx0ZXhwb3J0IGxldCBjYW5jZWw6IFZvaWRGdW5jdGlvbiB8ICdwb3AnIHwgYm9vbGVhbiA9IGZhbHNlO1xuXHRjb25zdCBiX2NhbmNlbCA9ICEhY2FuY2VsO1xuXHRjb25zdCBmX2NhbmNlbCA9ICdmdW5jdGlvbicgPT09IHR5cGVvZiBjYW5jZWw/IGNhbmNlbDogRl9OT09QO1xuXG5cdC8qKlxuXHQgKiBJZiBgdHJ1ZWAsIHNldHMgdGhlIGNhbmNlbCBidXR0b24gdG8gcG9wIHRoZSBwYWdlIGZyb20gdGhlIHN0YWNrXG5cdCAqL1xuXHRleHBvcnQgbGV0IGJhY2sgPSBmYWxzZTtcblx0Y29uc3QgYl9iYWNrID0gYmFjaztcblxuXHQvKipcblx0ICogU2V0cyB0aGUgY29uZmlybWF0aW9uIGxhYmVsIGFuZCBvcHRpb25hbGx5IGl0cyBhY3Rpb24gYW5kIGRpc2FibGVkIHN0YXRlXG5cdCAqL1xuXHRleHBvcnQgbGV0IGNvbmZpcm06IHJlYWRvbmx5IFtzdHJpbmcsIFByb21pc2FibGVJZ25vcmVGdW5jdGlvbj8sIGJvb2xlYW4/XSA9IFsnRG9uZScsIEZfTk9PUCwgZmFsc2VdO1xuXHRjb25zdCBbc19jb25maXJtLCBmX2NvbmZpcm1dID0gY29uZmlybTtcblxuXHQvLyBhcHBlbmQgdGV4dCB0byBjb25maXJtYXRpb24gbGFiZWxcblx0bGV0IHNfY29uZmlybV9hcHBlbmQgPSAnJztcblxuXHQvLyByZWFjdGl2ZSBjb25maXJtYXRpb24gdGV4dFxuXHQkOiBzX2NvbmZpcm1fZmluYWwgPSBzX2NvbmZpcm0rc19jb25maXJtX2FwcGVuZDtcblxuXHQvKipcblx0ICogRm9yY2UgdGhlIHVzZXIgdG8gd2FpdCBmb3Igc29tZSBkdXJhdGlvblxuXHQgKi9cblx0ZXhwb3J0IGxldCB3YWl0OiBib29sZWFuIHwgbnVtYmVyID0gMDtcblx0Y29uc3QgeHRfd2FpdCA9IHRydWUgPT09IHdhaXQ/IDUwMDA6IHdhaXQgfHwgMDtcblxuXHQvLyB3YWl0aW5nIHN0YXRlXG5cdGxldCBiX3dhaXRpbmcgPSB4dF93YWl0ID4gMDtcblxuXHQvLyBzZXR1cCB3YWl0aW5nXG5cdGlmKGJfd2FpdGluZykge1xuXHRcdC8vIGh1bWFuLXJlYWRhYmxlIHNlY29uZHNcblx0XHRsZXQgbl9zZWNvbmRzID0gTWF0aC5yb3VuZCh4dF93YWl0IC8gMTAwMCk7XG5cdFx0c19jb25maXJtX2FwcGVuZCA9IGAgKCR7bl9zZWNvbmRzfXMpYDtcblxuXHRcdC8vIGludGVydmFsIHRvIHVwZGF0ZSBsYWJlbFxuXHRcdGNvbnN0IGlfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRuX3NlY29uZHMgLT0gMTtcblx0XHRcdHNfY29uZmlybV9hcHBlbmQgPSBgICgke25fc2Vjb25kc31zKWA7XG5cdFx0fSwgMTAwMCk7XG5cblx0XHQvLyB0aW1lb3V0IHRvIHN0b3Agd2FpdGluZ1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Yl93YWl0aW5nID0gZmFsc2U7XG5cdFx0XHRzX2NvbmZpcm1fYXBwZW5kID0gJyc7XG5cdFx0XHRjbGVhckludGVydmFsKGlfaW50ZXJ2YWwpO1xuXHRcdH0sIHh0X3dhaXQpO1xuXHR9XG5cblx0Ly8gcmVhY3RpdmUgZGlzYWJsZWQgZmxhZyBvbiBjb25maXJtYXRpb24gb25seVxuXHQkOiBiX2Rpc2FibGVkID0gY29uZmlybVsyXSB8fCBmYWxzZTtcblxuXHQvLyBidXN5IGZsYWdcblx0bGV0IGJfYnVzeSA9IGZhbHNlO1xuXG5cdC8vIHJlYWN0aXZlIGRpc2FibGVkIGZsYWcgZm9yIGFsbCBlbnRyaWVzXG5cdGV4cG9ydCBsZXQgZGlzYWJsZWQgPSBmYWxzZTtcblxuXHQvKipcblx0ICogT3ZlcnJpZGVzIHRoZSBjb25maXJtIGJ1dHRvbiB0byBwdXNoIHRoZSBnaXZlbiBzY3JlZW4gb3IgY2FsbGJhY2tcblx0ICovXG5cdGV4cG9ydCBsZXQgY29udGQ6IFBhZ2VDb25maWcgfCBudWxsID0gbnVsbDtcblx0Y29uc3QgZl9jb250aW51ZSA9IGNvbnRkPyAoKSA9PiBrX3BhZ2UucHVzaChjb250ZCEpOiBudWxsO1xuXG5cblx0Ly8gZ2V0IHBhZ2UgZnJvbSBjb250ZXh0XG5cdGNvbnN0IGtfcGFnZSA9IGdldENvbnRleHQ8UGFnZT4oJ3BhZ2UnKTtcblxuXHQvLyBoYW5kbGUgY2FuY2VsIGFjdGlvblxuXHRmdW5jdGlvbiBjYW5jZWxfYWN0aW9uKCkge1xuXHRcdC8vIGNhbmNlbGxhdGlvbiBoYW5kbGVyIGlzIHNldDsgY2FsbCBpdFxuXHRcdGlmKGJfY2FuY2VsICYmIGZfY2FuY2VsKSB7XG5cdFx0XHRmX2NhbmNlbCgpO1xuXHRcdH1cblxuXHRcdC8vIGJhY2sgaXMgc2V0XG5cdFx0aWYoYl9iYWNrIHx8ICdwb3AnID09PSBjYW5jZWwpIHtcblx0XHRcdGtfcGFnZS5wb3AoKTtcblx0XHR9XG5cdH1cblxuXHQvLyBoYW5kbGUgY29uZmlybSBhY3Rpb25cblx0YXN5bmMgZnVuY3Rpb24gY29uZmlybV9hY3Rpb24oKSB7XG5cdFx0Ly8gYXNzdW1lIGNvbmZpcm1hdGlvbiBnb2VzIGZpbmVcblx0XHRsZXQgYl9jb250aW51ZSA9IHRydWU7XG5cblx0XHQvLyBkaXNhYmxlIGV2ZXJ5dGhpbmcgd2hpbGUgYXdhaXRpbmdcblx0XHRiX2J1c3kgPSB0cnVlO1xuXG5cdFx0Ly8gYXdhaXQgZm9yIGNvbmZpcm1hdGlvblxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCAoZl9jb25maXJtIHx8IEZfTk9PUCBhcyBQcm9taXNhYmxlSWdub3JlRnVuY3Rpb24pKCk7XG5cdFx0fVxuXHRcdC8vIGRvIG5vdCBjb250aW51ZSBpbiBjYXNlIG9mIGVycm9yXG5cdFx0Y2F0Y2goZV9jb25maXJtKSB7XG5cdFx0XHRiX2NvbnRpbnVlID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gcmUtZW5hYmxlXG5cdFx0Yl9idXN5ID0gZmFsc2U7XG5cblx0XHQvLyBjb250aW51ZSBhY3Rpb24gc2V0XG5cdFx0aWYoZl9jb250aW51ZSAmJiBiX2NvbnRpbnVlKSB7XG5cdFx0XHRmX2NvbnRpbnVlKCk7XG5cdFx0fVxuXHR9XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG5cdGRpdi5hY3Rpb25zLWxpbmUge1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC1kaXJlY3Rpb246IHJvdztcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcblx0XHRnYXA6IHZhcigtLXVpLXBhZGRpbmcpO1xuXHRcdHBhZGRpbmctYm90dG9tOiB2YXIoLS11aS1wYWRkaW5nKTtcblx0XHRhbGlnbi1pdGVtczogZmxleC1lbmQ7XG5cdFx0ZmxleDogYXV0bztcblxuXHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblxuXHRcdCY+YnV0dG9uIHtcblx0XHRcdGZsZXg6IDE7XG5cdFx0fVxuXHR9XG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwiYWN0aW9ucy1saW5lXCI+XG5cdHsjaWYgYl9jYW5jZWwgfHwgYl9iYWNrfVxuXHRcdDxidXR0b24gZGlzYWJsZWQ9e2Rpc2FibGVkIHx8IGJfYnVzeX0gb246Y2xpY2s9eygpID0+IGNhbmNlbF9hY3Rpb24oKX0+XG5cdFx0XHR7Yl9jYW5jZWw/ICdDYW5jZWwnOiAnQmFjayd9XG5cdFx0PC9idXR0b24+XG5cdHsvaWZ9XG5cblx0PGJ1dHRvbiBkaXNhYmxlZD17Yl9kaXNhYmxlZCB8fCBkaXNhYmxlZCB8fCBiX3dhaXRpbmcgfHwgYl9idXN5fSBjbGFzcz1cInByaW1hcnlcIiBvbjpjbGljaz17KCkgPT4gY29uZmlybV9hY3Rpb24oKX0+XG5cdFx0e3NfY29uZmlybV9maW5hbH1cblx0PC9idXR0b24+XG48L2Rpdj4iLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMThcXFwiIGZpbGw9XFxcIm5vbmVcXFwiPlxcblxcdDxnIHN0eWxlPVxcXCJmaWxsOiB2YXIoLS1zdmctY29sb3ItZmcsIGN1cnJlbnRDb2xvcik7XFxcIj5cXG5cXHRcXHQ8cmVjdCB4PVxcXCIxMlxcXCIgeT1cXFwiNFxcXCIgd2lkdGg9XFxcIjJcXFwiIGhlaWdodD1cXFwiOVxcXCIgLz5cXG5cXHRcXHQ8cmVjdCB4PVxcXCI1XFxcIiB5PVxcXCI2XFxcIiB3aWR0aD1cXFwiMlxcXCIgaGVpZ2h0PVxcXCI5XFxcIiB0cmFuc2Zvcm09XFxcInJvdGF0ZSgtOTAgNSA2KVxcXCIgLz5cXG5cXHRcXHQ8cGF0aCBkPVxcXCJNMTQgNS41VjRIMTIuNUwzIDEzLjVMNC41IDE1TDE0IDUuNVpcXFwiIC8+XFxuXFx0PC9nPlxcbjwvc3ZnPlxcblwiIiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjE4XFxcIiBoZWlnaHQ9XFxcIjE4XFxcIiBmaWxsPVxcXCJub25lXFxcIj5cXG5cXHQ8c3R5bGU+XFxuXFx0XFx0LnMyci1hY3Rpb24tcmVjdi1mZy1zdHJva2Uge1xcblxcdFxcdFxcdHN0cm9rZTogdmFyKC0tc3ZnLWNvbG9yLWZnLCBjdXJyZW50Q29sb3IpO1xcblxcdFxcdH1cXG5cXHQ8L3N0eWxlPlxcblxcdDxwYXRoIHN0eWxlPVxcXCJmaWxsOnZhcigtLXN2Zy1jb2xvci1mZywgY3VycmVudENvbG9yKVxcXCIgZD1cXFwiTTMgMTRoMTJ2MkgzelxcXCIvPlxcblxcdDxwYXRoIGNsYXNzPVxcXCJzMnItYWN0aW9uLXJlY3YtZmctc3Ryb2tlXFxcIiBkPVxcXCJNOSAxMlYxTTQuNSA3LjUgOSAxMmw0LjUtNC41XFxcIiBzdHJva2Utd2lkdGg9XFxcIjJcXFwiLz5cXG48L3N2Zz5cIiIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIyMlxcXCIgaGVpZ2h0PVxcXCIyMlxcXCI+XFxuXFx0PGcgc3R5bGU9XFxcImZpbGw6IHZhcigtLXN2Zy1jb2xvci1mZywgY3VycmVudENvbG9yKTtcXFwiPlxcblxcdFxcdDxyZWN0IHg9XFxcIjEwXFxcIiB5PVxcXCI0XFxcIiB3aWR0aD1cXFwiMlxcXCIgaGVpZ2h0PVxcXCIxNFxcXCIgcng9XFxcIjFcXFwiIC8+XFxuXFx0XFx0PHJlY3QgeD1cXFwiNFxcXCIgeT1cXFwiMTBcXFwiIHdpZHRoPVxcXCIxNFxcXCIgaGVpZ2h0PVxcXCIyXFxcIiByeT1cXFwiMVxcXCIgLz5cXG5cXHQ8L2c+XFxuPC9zdmc+XCIiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiPlxcblxcdDxwYXRoIHN0eWxlPVxcXCJmaWxsOiB2YXIoLS1zdmctY29sb3ItZmcsIGN1cnJlbnRDb2xvcik7XFxcIiBkPVxcXCJNMTEgN2gydjJoLTJ6bTAgNGgydjZoLTJ6bTEtOUM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MSAwLTgtMy41OS04LThzMy41OS04IDgtOCA4IDMuNTkgOCA4LTMuNTkgOC04IDh6XFxcIi8+XFxuPC9zdmc+XCIiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiPlxcblxcdDxwYXRoIHN0eWxlPVxcXCJmaWxsOiB2YXIoLS1zdmctY29sb3ItZmcsIGN1cnJlbnRDb2xvcik7XFxcIiBkPVxcXCJNMyAxNy4yNVYyMWgzLjc1TDE3LjgxIDkuOTRsLTMuNzUtMy43NUwzIDE3LjI1ek0yMC43MSA3LjA0YS45OTYuOTk2IDAgMCAwIDAtMS40MWwtMi4zNC0yLjM0YS45OTYuOTk2IDAgMCAwLTEuNDEgMGwtMS44MyAxLjgzIDMuNzUgMy43NSAxLjgzLTEuODN6XFxcIi8+XFxuPC9zdmc+XCIiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiPlxcblxcdDxwYXRoIHN0eWxlPVxcXCJmaWxsOiB2YXIoLS1zdmctY29sb3ItZmcsIGN1cnJlbnRDb2xvcik7XFxcIiBkPVxcXCJNMTYgOXYxMEg4VjloOG0tMS41LTZoLTVsLTEgMUg1djJoMTRWNGgtMy41bC0xLTF6TTE4IDdINnYxMmMwIDEuMS45IDIgMiAyaDhjMS4xIDAgMi0uOSAyLTJWN3pcXFwiLz5cXG48L3N2Zz5cIiIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIxNlxcXCIgaGVpZ2h0PVxcXCIxNlxcXCIgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBmaWxsPVxcXCJub25lXFxcIj5cXG5cXHQ8c3R5bGU+XFxuXFx0XFx0LnN0YXItYWN0aW9uLXdyYXAtZmcge1xcblxcdFxcdFxcdGZpbGw6IHZhcigtLXN2Zy1jb2xvci1mZywgY3VycmVudENvbG9yKTtcXG5cXHRcXHR9XFxuXFx0PC9zdHlsZT5cXG5cXHQ8cGF0aCBjbGFzcz1cXFwic3Rhci1hY3Rpb24td3JhcC1mZ1xcXCIgZD1cXFwiTTExLDMuNkw3LjgsNi43TDQuNiwzLjZjLTAuMy0wLjMtMC44LTAuMy0xLjEsMHMtMC4zLDAuOCwwLDEuMWwzLjcsMy43YzAuMywwLjMsMC44LDAuMywxLjEsMEwxMiw0LjcgYzAuMy0wLjMsMC4zLTAuOCwwLTEuMUMxMS44LDMuMywxMS4zLDMuMywxMSwzLjZ6IE0xMi42LDEyLjNjMCwwLjQtMC4zLDAuOC0wLjcsMC44SDMuN2MtMC40LDAtMC44LTAuNC0wLjgtMC44bDAsMGwwLDB2LTEuNiBjMC0wLjQsMC40LTAuOCwwLjgtMC44czAuOCwwLjQsMC44LDAuOHYwLjhIMTF2LTAuOGMwLTAuNCwwLjQtMC44LDAuOC0wLjhzMC44LDAuNCwwLjgsMC44VjEyLjNDMTIuNywxMi4zLDEyLjcsMTIuMywxMi42LDEyLjMgTDEyLjYsMTIuM3pcXFwiIC8+XFxuPC9zdmc+XFxuXCIiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMTZcXFwiIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgZmlsbD1cXFwibm9uZVxcXCI+XFxuXFx0PHN0eWxlPlxcblxcdFxcdC5zdGFyLWFjdGlvbi11bndyYXAtZmcge1xcblxcdFxcdFxcdGZpbGw6IHZhcigtLXN2Zy1jb2xvci1mZywgY3VycmVudENvbG9yKTtcXG5cXHRcXHR9XFxuXFx0PC9zdHlsZT5cXG5cXHQ8cGF0aCBjbGFzcz1cXFwic3Rhci1hY3Rpb24tdW53cmFwLWZnXFxcIiBkPVxcXCJNMTIsNy44YzAuMy0wLjMsMC4zLTAuOCwwLTEuMUw4LjMsM0M4LDIuNyw3LjUsMi43LDcuMiwzTDMuNSw2LjhDMy4yLDcsMy4yLDcuNSwzLjUsNy44YzAuMywwLjMsMC44LDAuMywxLjEsMFxcblxcdGwzLjItMy4xTDExLDcuOEMxMS4zLDguMSwxMS44LDguMSwxMiw3Ljh6IE0xMi42LDEyLjRjMCwwLjQtMC4zLDAuOC0wLjcsMC44SDMuN2MtMC40LDAtMC44LTAuNC0wLjgtMC44bDAsMGwwLDB2LTEuNlxcblxcdGMwLTAuNCwwLjQtMC44LDAuOC0wLjhzMC44LDAuNCwwLjgsMC44djAuOEgxMXYtMC44YzAtMC40LDAuNC0wLjgsMC44LTAuOHMwLjgsMC40LDAuOCwwLjhWMTIuNEwxMi42LDEyLjRMMTIuNiwxMi40elxcXCIgLz5cXG48L3N2Zz5cXG5cIiIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCI+XFxuXFx0PGNpcmNsZSBjeD1cXFwiMTFcXFwiIGN5PVxcXCIxMVxcXCIgcj1cXFwiMTBcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIHN0eWxlPVxcXCJzdHJva2U6dmFyKC0tc3ZnLWNvbG9yLWJnLCBjdXJyZW50Q29sb3IpXFxcIi8+XFxuXFx0PHBhdGggc3R5bGU9XFxcImZpbGw6dmFyKC0tc3ZnLWNvbG9yLWZnLCBjdXJyZW50Q29sb3IpXFxcIiBkPVxcXCJtOC4zNjQgMTEuNjMxIDUuNjU2LTUuNjU3TDE2IDcuOTU0bC01LjY1NyA1LjY1N3pNNy42IDEyLjQgNyAxM3YyaDJsLjYtLjZ6XFxcIi8+XFxuPC9zdmc+XCIiLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMThcXFwiIHZpZXdCb3g9XFxcIjAgMCAxOCAxOFxcXCI+XFxuXFx0PHN0eWxlIHR5cGU9XFxcInRleHQvY3NzXFxcIj5cXG5cXHRcXHQuczJyLWNoZWNrZWQtZmcge1xcblxcdFxcdFxcdGZpbGw6IHZhcigtLXN2Zy1jb2xvci1mZywgY3VycmVudENvbG9yKTtcXG5cXHRcXHR9XFxuXFx0PC9zdHlsZT5cXG5cXHQ8cGF0aCBjbGFzcz1cXFwiczJyLWNoZWNrZWQtZmdcXFwiIGQ9XFxcIk0xNiAwSDJDMC45IDAgMCAwLjkgMCAyVjE2QzAgMTcuMSAwLjkgMTggMiAxOEgxNkMxNy4xIDE4IDE4IDE3LjEgMTggMTZWMkMxOCAwLjkgMTcuMSAwIDE2IDBaTTcuNzEgMTMuMjlDNy4zMiAxMy42OCA2LjY5IDEzLjY4IDYuMyAxMy4yOUwyLjcxIDkuN0MyLjMyIDkuMzEgMi4zMiA4LjY4IDIuNzEgOC4yOUMzLjEgNy45IDMuNzMgNy45IDQuMTIgOC4yOUw3IDExLjE3TDEzLjg4IDQuMjlDMTQuMjcgMy45IDE0LjkgMy45IDE1LjI5IDQuMjlDMTUuNjggNC42OCAxNS42OCA1LjMxIDE1LjI5IDUuN0w3LjcxIDEzLjI5WlxcXCIgLz5cXG48L3N2Zz5cXG5cIiIsImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIxOFxcXCIgaGVpZ2h0PVxcXCIxOFxcXCIgdmlld0JveD1cXFwiMCAwIDE4IDE4XFxcIj5cXG5cXHQ8c3R5bGUgdHlwZT1cXFwidGV4dC9jc3NcXFwiPlxcblxcdFxcdC5zMnItdW5jaGVja2VkLWZnIHtcXG5cXHRcXHRcXHRmaWxsOiB2YXIoLS1zdmctY29sb3ItZmcsIGN1cnJlbnRDb2xvcik7XFxuXFx0XFx0fVxcblxcdDwvc3R5bGU+XFxuXFx0PHBhdGggY2xhc3M9XFxcInMyci11bmNoZWNrZWQtZmdcXFwiIGQ9XFxcIk0xNSAxNkgzQzIuNDUgMTYgMiAxNS41NSAyIDE1VjNDMiAyLjQ1IDIuNDUgMiAzIDJIMTVDMTUuNTUgMiAxNiAyLjQ1IDE2IDNWMTVDMTYgMTUuNTUgMTUuNTUgMTYgMTUgMTZaTTE2IDBIMkMwLjkgMCAwIDAuOSAwIDJWMTZDMCAxNy4xIDAuOSAxOCAyIDE4SDE2QzE3LjEgMTggMTggMTcuMSAxOCAxNlYyQzE4IDAuOSAxNy4xIDAgMTYgMFpcXFwiIC8+XFxuPC9zdmc+XFxuXCIiLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuXHRpbXBvcnQgeyBGX05PT1AgfSBmcm9tICcjL3V0aWwvYmVsdCc7XG5cblx0aW1wb3J0IFNYX0lDT05fQ0hFQ0tFRCBmcm9tICcjL2ljb24vY2hlY2tlZC5zdmc/cmF3Jztcblx0aW1wb3J0IFNYX0lDT05fVU5DSEVDS0VEIGZyb20gJyMvaWNvbi91bmNoZWNrZWQuc3ZnP3Jhdyc7XG5cblx0LyoqXG5cdCAqIEhUTUwgZWxlbWVudCBpZFxuXHQgKi9cblx0ZXhwb3J0IGxldCBpZDogc3RyaW5nO1xuXHRjb25zdCBzX2lkID0gaWQ7XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGNsYXNzIG9mIHRoZSBmaWVsZHNldCBjb250YWluZXIgZWxlbWVudFxuXHQgKi9cblx0ZXhwb3J0IGxldCBjb250YWluZXJDbGFzcyA9ICcnO1xuXG5cdC8qKlxuXHQgKiBFeHBvc2VkIGJpbmRpbmcgb2YgdGhlIGNoZWNrZWQgdmFsdWVcblx0ICovXG5cdGV4cG9ydCBsZXQgY2hlY2tlZCA9IGZhbHNlO1xuXG5cdGV4cG9ydCBsZXQgZGlzYWJsZUhhbmRsZXIgPSBmYWxzZTtcblxuXHQvLyBleHBvcnQgbGV0IHN0b3BMYWJlbENsaWNrcyA9IGZhbHNlO1xuXHQvLyBjb25zdCBiX3RleHRfcHJvcGFnYXRlcyA9ICFzdG9wTGFiZWxDbGlja3M7XG5cblx0Ly8gY29uc29sZS5sb2coe1xuXHQvLyBcdGJfdGV4dF9wcm9wYWdhdGVzLFxuXHQvLyB9KTtcblxuXHRmdW5jdGlvbiBoYW5kbGVfZmllbGRfY2xpY2soZF9ldmVudCkge1xuXHRcdC8vIGlnbm9yZSBsYWJlbCBjbGljayBwcm9wYWdhdGlvbnNcblx0XHRpZignTEFCRUwnICE9PSBkX2V2ZW50LnRhcmdldC50YWdOYW1lKSB7XG5cdFx0XHQvLyBhbGwgb3RoZXJzXG5cdFx0XHRpZighZGlzYWJsZUhhbmRsZXIpIHtcblx0XHRcdFx0Y2hlY2tlZCA9ICFjaGVja2VkO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIHN0b3AgcHJvcGFnYXRpb25cblx0XHRkX2V2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHR9XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG5cdGZpZWxkc2V0IHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGdhcDogMTRweDtcblx0XHRtYXJnaW46IDA7XG5cdFx0cGFkZGluZzogMDtcblx0XHRib3JkZXI6IDA7XG5cblx0XHQuY2hlY2tib3gge1xuXG5cdFx0XHQuaWNvbiB7XG5cdFx0XHRcdC0taWNvbi1kaWFtZXRlcjogMThweDtcblx0XHRcdFx0LS1pY29uLWNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5KTtcblx0XHRcdFx0dmVydGljYWwtYWxpZ246IG1pZGRsZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbjwvc3R5bGU+XG5cblxuPGZpZWxkc2V0IGNsYXNzPVwie2NvbnRhaW5lckNsYXNzfVwiIG9uOmNsaWNrPXtoYW5kbGVfZmllbGRfY2xpY2t9PlxuXHQ8c3BhbiBjbGFzcz1cImNoZWNrYm94XCI+XG5cdFx0PGlucHV0IGlkPXtzX2lkfSB0eXBlPVwiY2hlY2tib3hcIiBoaWRkZW4gYmluZDpjaGVja2VkPXtjaGVja2VkfT5cblx0XHQ8c3BhbiBjbGFzcz1cImljb25cIj5cblx0XHRcdHtAaHRtbCBjaGVja2VkPyBTWF9JQ09OX0NIRUNLRUQ6IFNYX0lDT05fVU5DSEVDS0VEfVxuXHRcdDwvc3Bhbj5cblx0PC9zcGFuPlxuXG5cdHsjaWYgJCRzbG90cy5kZWZhdWx0fVxuXHRcdDxsYWJlbCBmb3I9e3NfaWR9PlxuXHRcdFx0PHNsb3QgLz5cblx0XHQ8L2xhYmVsPlxuXHR7L2lmfVxuPC9maWVsZHNldD4iLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuXHRpbXBvcnQge3l3X3BvcHVwLCB5d19jb250ZXh0X3BvcHVwLCB5d19zdG9yZV90YWdzfSBmcm9tICcjIy9tZW0nO1xuXHRpbXBvcnQgdHlwZSB7IFJlc291cmNlIH0gZnJvbSAnIy9tZXRhL3Jlc291cmNlJztcblx0aW1wb3J0IHR5cGUgeyBUYWcgfSBmcm9tICcjL21ldGEvdGFnJztcblxuXHRpbXBvcnQgQWN0aW9uc0xpbmUgZnJvbSAnLi9BY3Rpb25zTGluZS5zdmVsdGUnO1xuXHRpbXBvcnQgQ2hlY2tib3hGaWVsZCBmcm9tICcuL0NoZWNrYm94RmllbGQuc3ZlbHRlJztcblx0aW1wb3J0IElubGluZVRhZ3MgZnJvbSAnLi9JbmxpbmVUYWdzLnN2ZWx0ZSc7XG5cblx0aW1wb3J0IFJvdyBmcm9tICcuL1Jvdy5zdmVsdGUnO1xuXHRpbXBvcnQgU3ViSGVhZGVyIGZyb20gJy4vU3ViSGVhZGVyLnN2ZWx0ZSc7XG5cblx0Ly8gZmV0Y2ggdGhlIHJlc291cmNlIHBhdGggZnJvbSBwb3B1cCBjb250ZXh0IHN0b3JlXG5cdGNvbnN0IHBfcmVzb3VyY2UgPSAoJHl3X2NvbnRleHRfcG9wdXAgYXMge1xuXHRcdHJlc291cmNlOiBSZXNvdXJjZS5QYXRoO1xuXHR9KVsncmVzb3VyY2UnXTtcblxuXHRpbnRlcmZhY2UgVGFnT3B0aW9uIHtcblx0XHR0YWc6IFRhZ1snaW50ZXJmYWNlJ107XG5cdFx0c2VsZWN0ZWQ6IGJvb2xlYW47XG5cdH1cblxuXHRjb25zdCBmX3NvcnRfdGFncyA9IChnX2E6IFRhZ1snaW50ZXJmYWNlJ10sIGdfYjogVGFnWydpbnRlcmZhY2UnXSkgPT4gZ19hLmluZGV4IC0gZ19iLmluZGV4O1xuXG5cdC8vIGNhY2hlIHRoZSB0YWdzIGZvciB0aGUgcmVzb3VyY2Vcblx0Y29uc3QgYXNfcHJlYXBwbGllZCA9IG5ldyBTZXQoJHl3X3N0b3JlX3RhZ3MhLmdldElkc0ZvcihwX3Jlc291cmNlKSk7XG5cdGxldCBhX3RhZ19vcHRpb25zOiBUYWdPcHRpb25bXSA9ICR5d19zdG9yZV90YWdzIS5yYXcucmVnaXN0cnkuc29ydChmX3NvcnRfdGFncykubWFwKGdfdGFnID0+ICh7XG5cdFx0dGFnOiBnX3RhZyxcblx0XHRzZWxlY3RlZDogYXNfcHJlYXBwbGllZC5oYXMoZ190YWcuaW5kZXgpLFxuXHR9KSk7XG5cblx0Ly8gbGV0IGhfdGFnc19zZWwgPSBvZGVyb20oSF9UQUdTLCAocF90YWcsIGtfdGFnKSA9PiAoe1xuXHQvLyBcdFtwX3RhZ106IHtcblx0Ly8gXHRcdG9iamVjdDoga190YWcsXG5cdC8vIFx0XHRzZWxlY3RlZDogKCR5d19wb3B1cF9jb250ZXh0IS50YWdzIGFzIFRhZ1tdKS5pbmNsdWRlcyhrX3RhZyksXG5cdC8vIFx0fSxcblx0Ly8gfSkpO1xuXG5cdC8vICgkeXdfcG9wdXBfY29udGV4dCEudGFncyBhcyBUYWdbXSk7XG5cblx0Ly8gZnVuY3Rpb24gc2VsZWN0X3RhZyhrX3RhZzogVGFnKSB7XG5cdC8vIFx0JHl3X3BvcHVwX2NvbnRleHQhLnRhZ3MgPSBbLi4uJHl3X3BvcHVwX2NvbnRleHQhLnRhZ3MsIGtfdGFnXTtcblx0Ly8gXHQkeXdfcG9wdXAgPSBudWxsO1xuXHQvLyB9XG5cblx0ZnVuY3Rpb24gdG9nZ2xlX3RhZyhpX3RhZzogbnVtYmVyKSB7XG5cdFx0Ly8gZmluZCBvcHRpb24gYnkgdGFnIGluZGV4XG5cdFx0Y29uc3QgZ19vcHRpb24gPSBhX3RhZ19vcHRpb25zLmZpbmQoZyA9PiBpX3RhZyA9PT0gZy50YWcuaW5kZXgpITtcblxuXHRcdC8vIHRvZ2dsZSBzZWxlY3Rpb25cblx0XHRnX29wdGlvbi5zZWxlY3RlZCA9ICFnX29wdGlvbi5zZWxlY3RlZDtcblxuXHRcdC8vIG1hcmsgYXMgZGlydHlcblx0XHRhX3RhZ19vcHRpb25zID0gYV90YWdfb3B0aW9ucztcblx0fVxuXG5cdGFzeW5jIGZ1bmN0aW9uIGFwcGx5X3RhZ3MoKSB7XG5cdFx0Ly8gdXBkYXRlIHN0b3JlXG5cdFx0YXdhaXQgJHl3X3N0b3JlX3RhZ3MhLnNldFRhZ3NGb3IocF9yZXNvdXJjZSwgYV90YWdzKTtcblxuXHRcdC8vIGRpc21pc3MgcG9wdXBcblx0XHQkeXdfcG9wdXAgPSBudWxsO1xuXHR9XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG5cdEBpbXBvcnQgJy4vX2Jhc2UubGVzcyc7XG5cblx0LnJvd3Mge1xuXHRcdG1hcmdpbi1sZWZ0OiBjYWxjKDBweCAtIHZhcigtLXVpLXBhZGRpbmcpKTtcblx0XHRtYXJnaW4tcmlnaHQ6IGNhbGMoMHB4IC0gdmFyKC0tdWktcGFkZGluZykpO1xuXHRcdG1hcmdpbi10b3A6IDFlbTtcblx0XHRtYXJnaW4tYm90dG9tOiAxZW07XG5cdH1cblxuXHQuZmxvYXQge1xuXHRcdC0tYW50aS1wYWRkaW5nOiBjYWxjKDBweCAtIHZhcigtLXVpLXBhZGRpbmcpKTtcblx0XHRwb3NpdGlvbjogc3RpY2t5O1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLWJnKTtcblx0XHRtYXJnaW4tbGVmdDogdmFyKC0tYW50aS1wYWRkaW5nKTtcblx0XHRtYXJnaW4tcmlnaHQ6IHZhcigtLWFudGktcGFkZGluZyk7XG5cdFx0cGFkZGluZy1sZWZ0OiB2YXIoLS11aS1wYWRkaW5nKTtcblx0XHRwYWRkaW5nLXJpZ2h0OiB2YXIoLS11aS1wYWRkaW5nKTtcblx0XHRwYWRkaW5nLXRvcDogdmFyKC0tdWktcGFkZGluZyk7XG5cdFx0Ym90dG9tOiB2YXIoLS1hbnRpLXBhZGRpbmcpO1xuXHRcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgwZGVnLCB2YXIoLS10aGVtZS1jb2xvci1iZykgMCUsIHZhcigtLXRoZW1lLWNvbG9yLWJnKSA4MCUsIHRyYW5zcGFyZW50KTtcblx0fVxuPC9zdHlsZT5cblxuPHNlY3Rpb24gY2xhc3M9XCJzY3JlZW5cIj5cblx0PFN1YkhlYWRlciB0aXRsZT1cIlNlbGVjdCBUYWcocylcIiBiYXJlIGNsb3NlcyAvPlxuXG5cdDxkaXYgY2xhc3M9XCJyb3dzXCI+XG5cdFx0eyNlYWNoIGFfdGFnX29wdGlvbnMgYXMge3RhZzpnX3RhZywgc2VsZWN0ZWQ6Yl9zZWxlY3RlZH19XG5cdFx0XHQ8Um93XG5cdFx0XHRcdHJvb3RTdHlsZT1cIi0tYXBwLWljb24tZGlhbWV0ZXI6MTJweDtcIlxuXHRcdFx0XHRpY29uQ2xhc3M9J2FsaWduLXNlbGZfY2VudGVyJ1xuXHRcdFx0XHRuYW1lPXtnX3RhZy5uYW1lfVxuXHRcdFx0XHRvbjpjbGljaz17KCkgPT4gdG9nZ2xlX3RhZyhnX3RhZy5pbmRleCl9XG5cdFx0XHQ+XG5cdFx0XHRcdDwhLS0gPElubGluZVRhZ3MgY29sbGFwc2VkPXtiX2NvbGxhcHNlZH0gc2xvdD1cImljb25cIiAvPiAtLT5cblxuXHRcdFx0XHQ8c3ZlbHRlOmZyYWdtZW50IHNsb3Q9XCJyaWdodFwiPlxuXHRcdFx0XHRcdDxDaGVja2JveEZpZWxkIGlkPVwidGFnLSR7Z190YWcuaW5kZXh9XCIgYmluZDpjaGVja2VkPXtiX3NlbGVjdGVkfSBkaXNhYmxlSGFuZGxlciAvPlxuXHRcdFx0XHQ8L3N2ZWx0ZTpmcmFnbWVudD5cblx0XHRcdDwvUm93PlxuXHRcdHsvZWFjaH1cblxuXHRcdDwhLS0geyNlYWNoIG9kZShoX3RhZ3Nfc2VsKSBhcyBbcF90YWcsIHtvYmplY3Q6a190YWcsIHNlbGVjdGVkOmJfc2VsZWN0ZWR9XX1cblx0XHR7L2VhY2h9IC0tPlxuXHQ8L2Rpdj5cblxuXHQ8ZGl2IGNsYXNzPVwiZmxvYXRcIj5cblx0XHQ8QWN0aW9uc0xpbmUgY29uZmlybT17WydBcHBseScsIGFwcGx5X3RhZ3NdfSAvPlxuXG5cdFx0PCEtLSA8ZGl2IGNsYXNzPVwiYWN0aW9uLWxpbmVcIj5cblx0XHRcdDxidXR0b24gY2xhc3M9XCJwcmltYXJ5XCIgb246Y2xpY2s9eygpID0+IGFwcGx5X3RhZ3MoKX0+XG5cdFx0XHRcdEFwcGx5XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHQ8L2Rpdj4gLS0+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0aW1wb3J0IHtcblx0XHRjdWJpY091dCxcblx0fSBmcm9tICdzdmVsdGUvZWFzaW5nJztcblxuXHRpbXBvcnQgdHlwZSB7XG5cdFx0U2xpZGVQYXJhbXMsXG5cdFx0VHJhbnNpdGlvbkNvbmZpZyxcblx0fSBmcm9tICdzdmVsdGUvdHJhbnNpdGlvbic7XG5cblx0aW1wb3J0IFNYX0lDT05fQUREIGZyb20gJyMvaWNvbi9hZGQuc3ZnP3Jhdyc7XG5cdGltcG9ydCBTWF9JQ09OX0VESVQgZnJvbSAnIy9pY29uL2VkaXQtc21hbGwuc3ZnP3Jhdyc7XG5cblx0aW1wb3J0IHtcblx0XHR5d19wb3B1cCxcblx0XHR5d19jb250ZXh0X3BvcHVwLFxuXHRcdHl3X3N0b3JlX3RhZ3MsXG5cdH0gZnJvbSAnIyMvbWVtJztcblxuXHRpbXBvcnQgUG9wdXBUYWdzU2VsZWN0IGZyb20gJy4vUG9wdXBUYWdzU2VsZWN0LnN2ZWx0ZSc7XG5cdGltcG9ydCB0eXBlIHsgVGFncyB9IGZyb20gJyMvc3RvcmUvdGFncyc7XG5cdGltcG9ydCB7IG9uRGVzdHJveSB9IGZyb20gJ3N2ZWx0ZSc7XG5cdGltcG9ydCB0eXBlIHsgRGljdCB9IGZyb20gJyMvdXRpbC9iZWx0Jztcblx0aW1wb3J0IHR5cGUgeyBUYWcgfSBmcm9tICcjL21ldGEvdGFnJztcblxuXHQvKipcblx0ICogUGF0aCB0byB0aGUgcmVzb3VyY2UgdG8gZmV0Y2ggdGFncyBmb3Jcblx0ICovXG5cdGV4cG9ydCBsZXQgcmVzb3VyY2VQYXRoOiBzdHJpbmc7XG5cdGNvbnN0IHBfcmVzb3VyY2UgPSByZXNvdXJjZVBhdGg7XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgZWRpdHRpbmcgdGhlIHRhZ3MgaGVyZVxuXHQgKi9cblx0ZXhwb3J0IGxldCBlZGl0YWJsZSA9IGZhbHNlO1xuXHRjb25zdCBiX2VkaXRhYmxlID0gZWRpdGFibGU7XG5cblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgZGlzcGxheXMgdGhlIHRhZ3MgaW4gY29sbGFwc2VkIGZvcm1cblx0ICovXG5cdGV4cG9ydCBsZXQgY29sbGFwc2VkID0gZmFsc2U7XG5cdGNvbnN0IGJfY29sbGFwc2VkID0gY29sbGFwc2VkO1xuXG5cdGV4cG9ydCBsZXQgcHJlZml4Q2xhc3MgPSAnJztcblx0ZXhwb3J0IGxldCBzdWZmaXhDbGFzcyA9ICcnO1xuXG5cdGV4cG9ydCBsZXQgcm9vdFN0eWxlID0gJyc7XG5cblx0Ly8gc3Vic2NyaWJlIHRvIHRhZyBzdG9yZSBjaGFuZ2VzIGFuZCByZWxvYWRcblx0bGV0IGNfcmVsb2FkX3RhZ3MgPSAwO1xuXHRjb25zdCBmX3Vuc3Vic2NyaWJlID0geXdfc3RvcmVfdGFncy5zdWJzY3JpYmUoKCkgPT4gY19yZWxvYWRfdGFncysrKTtcblx0b25EZXN0cm95KCgpID0+IHtcblx0XHRmX3Vuc3Vic2NyaWJlKCk7XG5cdH0pO1xuXG5cdC8vIGNhY2hlIHRoZSB0YWdzIHN0b3JlIGZvciBlZGl0dGluZ1xuXHRsZXQga3NfdGFnczogSW5zdGFuY2VUeXBlPHR5cGVvZiBUYWdzPjtcblxuXHQvLyBjYWNoZSB0aGUgbGlzdCBvZiB0YWdzIGZvciB0aGlzIHJlc291cmNlXG5cdCQ6IGFfdGFncyA9ICR5d19zdG9yZV90YWdzIS5nZXRUYWdzRm9yKHBfcmVzb3VyY2UpO1xuXHQvLyBsZXQgYV90YWdzOiBUYWdbJ2ludGVyZmFjZSddW107XG5cblx0Ly8gLy8gZmV0Y2ggdGFncyBmb3IgdGhlIGdpdmVuIHJlc291cmNlXG5cdC8vIGFzeW5jIGZ1bmN0aW9uIHJlc291cmNlX3RhZ3MoKSB7XG5cdC8vIFx0Ly8gbG9hZCBtZWRpYSBzdG9yZSBpZiBpdCdzIG5vdCBjYWNoZWRcblx0Ly8gXHRrc190YWdzID0gJHl3X3N0b3JlX3RhZ3MgfHwgYXdhaXQgVGFncy5yZWFkKCk7XG5cblx0Ly8gXHQvLyBkZXN0cnVjdHVyZSB0YWdzIHN0b3JlXG5cdC8vIFx0Y29uc3Qge1xuXHQvLyBcdFx0cmVnaXN0cnk6IGFfcmVnaXN0cnksXG5cdC8vIFx0XHRtYXA6IGhfbWFwLFxuXHQvLyBcdH0gPSBrc190YWdzLnJhdztcblxuXHQvLyBcdC8vIGxvb2t1cCByZXNvdXJjZSB0YWcgaWRzIGFuZCBzYXZlIHRvIGNhY2hlXG5cdC8vIFx0cmV0dXJuIGFfdGFncz0oaF9tYXBbcF9yZXNvdXJjZV0gPz8gW10pLm1hcChpX3RhZyA9PiBhX3JlZ2lzdHJ5W2lfdGFnXSk7XG5cdC8vIH1cblxuXHRpZihiX2VkaXRhYmxlKSB7XG5cdFx0eXdfY29udGV4dF9wb3B1cC5zdWJzY3JpYmUoKGdfY3R4OiBEaWN0PGFueT4gfCBudWxsKSA9PiB7XG5cdFx0XHRpZihnX2N0eD8udGFncykge1xuXHRcdFx0XHRhX3RhZ3MgPSBnX2N0eC50YWdzO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0b25EZXN0cm95KCgpID0+IHtcblx0XHRcdCR5d19jb250ZXh0X3BvcHVwPSBudWxsO1xuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2hvd190YWdfc2VsZWN0b3IoKSB7XG5cdFx0JHl3X2NvbnRleHRfcG9wdXA9IHtcblx0XHRcdHJlc291cmNlOiBwX3Jlc291cmNlLFxuXHRcdH07XG5cblx0XHQkeXdfcG9wdXAgPSBQb3B1cFRhZ3NTZWxlY3Q7XG5cdH1cblxuXHRsZXQgZG1fY2x1c3RlcjogSFRNTEVsZW1lbnQ7XG5cblx0YXN5bmMgZnVuY3Rpb24gcmVtb3ZlX3RhZyhnX3RhZzogVGFnWydpbnRlcmZhY2UnXSkge1xuXHRcdC8vIGZpbmQgdGFnIGJ5IGlkXG5cdFx0Y29uc3QgaV90YWcgPSBhX3RhZ3MuZmluZEluZGV4KGcgPT4gZy5pbmRleCA9PT0gZ190YWcuaW5kZXgpO1xuXG5cdFx0Ly8gKHFzYShkbV9jbHVzdGVyLCAnLmRlbGV0ZS5pY29uJylbTWF0aC5taW4odGFncy5sZW5ndGggLSAxLCBpX3RhZyArIDEpXSBhcyBIVE1MRWxlbWVudCkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuXHRcdC8vIHJlbW92ZSBpdCBmcm9tIHRoZSBtdXRhYmxlIGxpc3Rcblx0XHRhX3RhZ3Muc3BsaWNlKGlfdGFnLCAxKTtcblxuXHRcdC8vIHNhdmUgaXQgYmFjayB0byB0aGUgc3RvcmVcblx0XHRhd2FpdCBrc190YWdzLnNhdmUoKTtcblx0fVxuXG5cblx0ZnVuY3Rpb24gc3NsaWRlKGRtX25vZGU6IEVsZW1lbnQsIHtcblx0XHRkZWxheTogeHRfZGVsYXkgPSAwLFxuXHRcdGR1cmF0aW9uOiB4dF9kdXJhdGlvbiA9IDQwMCxcblx0XHRlYXNpbmc6IGZfZWFzaW5nID0gY3ViaWNPdXQsXG5cdH06IFNsaWRlUGFyYW1zID0ge30pOiBUcmFuc2l0aW9uQ29uZmlnIHtcblx0XHRjb25zdCBkX3N0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkbV9ub2RlKTtcblx0XHRjb25zdCB4X29wYWNpdHkgPSArZF9zdHlsZS5vcGFjaXR5O1xuXHRcdGNvbnN0IHhfd2lkdGggPSBwYXJzZUZsb2F0KGRfc3R5bGUud2lkdGgpO1xuXHRcdGNvbnN0IHhfcGFkZGluZ19sZWZ0ID0gcGFyc2VGbG9hdChkX3N0eWxlLnBhZGRpbmdMZWZ0KTtcblx0XHRjb25zdCB4X3BhZGRpbmdfcmlnaHQgPSBwYXJzZUZsb2F0KGRfc3R5bGUucGFkZGluZ1JpZ2h0KTtcblx0XHRjb25zdCB4X21hcmdpbl9sZWZ0ID0gcGFyc2VGbG9hdChkX3N0eWxlLm1hcmdpbkxlZnQpO1xuXHRcdGNvbnN0IHhfbWFyZ2luX3JpZ2h0ID0gcGFyc2VGbG9hdChkX3N0eWxlLm1hcmdpblJpZ2h0KTtcblx0XHRjb25zdCB4X2JvcmRlcl9sZWZ0X3dpZHRoID0gcGFyc2VGbG9hdChkX3N0eWxlLmJvcmRlckxlZnRXaWR0aCk7XG5cdFx0Y29uc3QgeF9ib3JkZXJfcmlnaHRfd2lkdGggPSBwYXJzZUZsb2F0KGRfc3R5bGUuYm9yZGVyUmlnaHRXaWR0aCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0ZGVsYXk6IHh0X2RlbGF5LFxuXHRcdFx0ZHVyYXRpb246IHh0X2R1cmF0aW9uLFxuXHRcdFx0ZWFzaW5nOiBmX2Vhc2luZyxcblx0XHRcdGNzczogeHQgPT5cblx0XHRcdFx0Jy0tZGVsZXRlLWRpc3BsYXk6IG5vbmU7JyArXG5cdFx0XHRcdCdvdmVyZmxvdzogaGlkZGVuOycgK1xuXHRcdFx0XHRgb3BhY2l0eTogJHtNYXRoLm1pbih4dCAqIDIwLCAxKSAqIHhfb3BhY2l0eX07YCArXG5cdFx0XHRcdGB3aWR0aDogJHt4dCAqIHhfd2lkdGh9cHg7YCArXG5cdFx0XHRcdGBwYWRkaW5nLWxlZnQ6ICR7eHQgKiB4X3BhZGRpbmdfbGVmdH1weDtgICtcblx0XHRcdFx0YHBhZGRpbmctcmlnaHQ6ICR7eHQgKiB4X3BhZGRpbmdfcmlnaHR9cHg7YCArXG5cdFx0XHRcdGBtYXJnaW4tbGVmdDogJHt4dCAqIHhfbWFyZ2luX2xlZnR9cHg7YCArXG5cdFx0XHRcdGBtYXJnaW4tcmlnaHQ6ICR7eHQgKiB4X21hcmdpbl9yaWdodH1weDtgICtcblx0XHRcdFx0YGJvcmRlci1sZWZ0LXdpZHRoOiAke3h0ICogeF9ib3JkZXJfbGVmdF93aWR0aH1weDtgICtcblx0XHRcdFx0YGJvcmRlci1yaWdodC13aWR0aDogJHt4dCAqIHhfYm9yZGVyX3JpZ2h0X3dpZHRofXB4O2Bcblx0XHR9O1xuXHR9XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG5cdEBpbXBvcnQgJy4vX2Jhc2UubGVzcyc7XG5cblx0LmNsdXN0ZXIge1xuXHRcdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRcdHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG5cdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRnYXA6IDRweDtcblx0XHRmbGV4LWZsb3c6IHJvdyB3cmFwO1xuXHRcdFxuXHRcdCYuY29sbGFwc2VkIHtcblx0XHRcdG1hcmdpbjogdmFyKC0tdGFnLWNsdXN0ZXItbWFyZ2luLCAwKTtcblx0XHRcdG1hcmdpbi10b3A6IDVweDtcblx0XHRcdGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0fVxuXG5cdFx0Ji5lZGl0YWJsZSB7XG5cdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5cdFx0XHQvLyBtYXJnaW46IHZhcigtLXRhZy1jbHVzdGVyLW1hcmdpbiwgMCB2YXIoLS11aS1wYWRkaW5nKSk7XG5cblx0XHRcdD4udGFnIHtcblx0XHRcdFx0cGFkZGluZy1yaWdodDogMnB4O1xuXHRcdFx0fVxuXG5cdFx0XHQgbWFyZ2luLXRvcDotMTBweDtcblx0XHRcdCBtYXJnaW4tYm90dG9tOjVweDtcblx0XHR9XG5cblx0XHQ+LnRhZyB7XG5cdFx0XHQtLXRhZy13aWR0aDogYXV0bztcblx0XHRcdC0tdGFnLWhlaWdodDogMjJweDtcblxuXHRcdFx0ZGlzcGxheTogaW5saW5lLWZsZXg7XG5cdFx0XHR3aWR0aDogdmFyKC0tdGFnLXdpZHRoKTtcblx0XHRcdGhlaWdodDogdmFyKC0tdGFnLWhlaWdodCk7XG5cdFx0XHRib3JkZXItcmFkaXVzOiAxZW07XG5cdFx0XHRwYWRkaW5nOiAwIDFjaDtcblx0XHRcdGZvbnQtc2l6ZTogMTNweDtcblxuXHRcdFx0Pi5sYWJlbCB7XG5cdFx0XHRcdG1hcmdpbi10b3A6IDFweDtcblx0XHRcdFx0dGV4dC1zaGFkb3c6IC0xcHggMXB4IDEuM3B4IHJnYigwIDAgMCAvIDQwJSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vICY6bnRoLWNoaWxkKG4rMikge1xuXHRcdFx0Ly8gXHRtYXJnaW4tbGVmdDogOHB4O1xuXHRcdFx0Ly8gfVxuXG5cdFx0XHQmLmNvbGxhcHNlZCB7XG5cdFx0XHRcdC0tdGFnLXdpZHRoOiB2YXIoLS1hcHAtdGFnLWRpYW1ldGVyKTtcblx0XHRcdFx0LS10YWctaGVpZ2h0OiB2YXIoLS1hcHAtdGFnLWRpYW1ldGVyKTtcblx0XHRcdFx0cGFkZGluZzogMDtcblx0XHRcdH1cblxuXHRcdFx0LmRlbGV0ZS5pY29uIHtcblx0XHRcdFx0LS1pY29uLWRpYW1ldGVyOiAyMnB4O1xuXHRcdFx0XHR0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG5cdFx0XHRcdHRyYW5zaXRpb246IHRyYW5zZm9ybSAyMDBtcyBlYXNlLW91dCwgZmlsdGVyIDIwMG1zIGVhc2Utb3V0O1xuXHRcdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0XHRcdGZpbHRlcjogZHJvcC1zaGFkb3coMHB4IDBweCAwcHggYmxhY2spO1xuXHRcdFx0XHRkaXNwbGF5OiB2YXIoLS1kZWxldGUtZGlzcGxheSwgaW5pdGlhbCk7XG5cblx0XHRcdFx0Jjpob3ZlciB7XG5cdFx0XHRcdFx0dHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpIHNjYWxlKDEuMDc1KTtcblx0XHRcdFx0XHRmaWx0ZXI6IGRyb3Atc2hhZG93KC0xcHggM3B4IDJweCByZ2JhKDAsIDAsIDAsIDAuNCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Pi5lZGl0IHtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblxuXHRcdFx0Pi5pY29uIHtcblx0XHRcdFx0LS1pY29uLWNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5KTtcblx0XHRcdFx0LS1pY29uLWRpYW1ldGVyOiAyMnB4O1xuXHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblxuXHRcdFx0XHQvLyAtLWljb24tY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnkpO1xuXHRcdFx0XHQvLyAtLWljb24tZGlhbWV0ZXI6IDE2cHg7XG5cdFx0XHRcdC8vIC0tYnV0dG9uLWRpYW1ldGVyOiAyMnB4O1xuXHRcdFx0XHQvLyBkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHQvLyBwYWRkaW5nOiAycHg7XG5cdFx0XHRcdC8vIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuXG5cdFx0XHRcdC8vIG1hcmdpbi1sZWZ0OiA0cHg7XG5cblx0XHRcdFx0Ly8gJjo6YmVmb3JlIHtcblx0XHRcdFx0Ly8gXHQtLW9mZnNldDogMHB4O1xuXHRcdFx0XHQvLyBcdGNvbnRlbnQ6IFwiXCI7XG5cdFx0XHRcdC8vIFx0b3V0bGluZTogMnB4IHNvbGlkIHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnkpO1xuXHRcdFx0XHQvLyBcdGJvcmRlci1yYWRpdXM6IHZhcigtLWJ1dHRvbi1kaWFtZXRlcik7XG5cdFx0XHRcdC8vIFx0bWluLXdpZHRoOiBjYWxjKHZhcigtLWJ1dHRvbi1kaWFtZXRlcikgLSAoMiAqIHZhcigtLW9mZnNldCkpKTtcblx0XHRcdFx0Ly8gXHRtaW4taGVpZ2h0OiBjYWxjKHZhcigtLWJ1dHRvbi1kaWFtZXRlcikgLSAoMiAqIHZhcigtLW9mZnNldCkpKTtcblx0XHRcdFx0Ly8gXHRtYXJnaW4tbGVmdDogLTNweDtcblx0XHRcdFx0Ly8gXHRtYXJnaW4tdG9wOiAxcHg7XG5cdFx0XHRcdC8vIFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0XHQvLyB9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LnByZWZpeCwuc3VmZml4IHtcblx0XHRcdC5mb250KHRpbnkpO1xuXHRcdFx0Y29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXRleHQtbGlnaHQpO1xuXHRcdFx0ZGlzcGxheTogaW5saW5lLWZsZXg7XG5cdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0fVxuXHR9XG48L3N0eWxlPlxuXG48c3BhbiBjbGFzcz1cImNsdXN0ZXJcIiBjbGFzczplZGl0YWJsZT17Yl9lZGl0YWJsZX0gY2xhc3M6Y29sbGFwc2VkPXtiX2NvbGxhcHNlZH0gYmluZDp0aGlzPXtkbV9jbHVzdGVyfSBzdHlsZT17cm9vdFN0eWxlfT5cblx0eyNpZiAkJHNsb3RzLnByZWZpeH1cblx0XHQ8c3BhbiBjbGFzcz1cInByZWZpeCB7cHJlZml4Q2xhc3N9XCI+XG5cdFx0XHQ8c2xvdCBuYW1lPVwicHJlZml4XCI+PC9zbG90PlxuXHRcdDwvc3Bhbj5cblx0ey9pZn1cblxuXHR7I2tleSBjX3JlbG9hZF90YWdzfVxuXHRcdHsjZWFjaCBhX3RhZ3MgYXMgZ190YWcsIGlfdGFnfVxuXHRcdFx0PHNwYW4gY2xhc3M9XCJ0YWdcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6e2dfdGFnLmNvbG9yfTtcIiBjbGFzczpjb2xsYXBzZWQ9e2JfY29sbGFwc2VkfSBvdXQ6c3NsaWRlPXt7ZHVyYXRpb246Yl9lZGl0YWJsZT8gMzAwOiAwfX0+XG5cdFx0XHRcdHsjaWYgIWJfY29sbGFwc2VkfVxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwibGFiZWxcIj5cblx0XHRcdFx0XHRcdHtnX3RhZy5uYW1lfVxuXHRcdFx0XHRcdDwvc3Bhbj5cblx0XHRcdFx0ey9pZn1cblxuXHRcdFx0XHR7I2lmIGJfZWRpdGFibGV9XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJkZWxldGUgaWNvblwiIG9uOmNsaWNrPXsoKSA9PiByZW1vdmVfdGFnKGdfdGFnKX0+XG5cdFx0XHRcdFx0XHR7QGh0bWwgU1hfSUNPTl9BRER9XG5cdFx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0XHR7L2lmfVxuXHRcdFx0PC9zcGFuPlxuXHRcdHsvZWFjaH1cblx0ey9rZXl9XG5cblx0eyNpZiBiX2VkaXRhYmxlfVxuXHRcdDxzcGFuIGNsYXNzPVwiZWRpdFwiIG9uOmNsaWNrPXsoKSA9PiBzaG93X3RhZ19zZWxlY3RvcigpfT5cblx0XHRcdDxzcGFuIGNsYXNzPVwiaWNvblwiPlxuXHRcdFx0XHR7QGh0bWwgU1hfSUNPTl9FRElUfVxuXHRcdFx0PC9zcGFuPlxuXHRcdDwvc3Bhbj5cblx0ey9pZn1cblxuXHR7I2lmICQkc2xvdHMuc3VmZml4fVxuXHRcdDxzcGFuIGNsYXNzPVwic3VmZml4IHtzdWZmaXhDbGFzc31cIj5cblx0XHRcdDxzbG90IG5hbWU9XCJzdWZmaXhcIj48L3Nsb3Q+XG5cdFx0PC9zcGFuPlxuXHR7L2lmfVxuPC9zcGFuPiIsIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiIGxhbmc9XCJ0c1wiPlxuXHRleHBvcnQgZW51bSBBY3Rpb25JZCB7XG5cdFx0U0VORCA9ICdzZW5kJyxcblx0XHRSRUNWID0gJ3JlY3YnLFxuXHRcdEFERCA9ICdhZGQnLFxuXHRcdEVESVQgPSAnZWRpdCcsXG5cdFx0V1JBUCA9ICd3cmFwJyxcblx0XHRVTldSQVAgPSAndW53cmFwJyxcblx0fVxuXG5cdGV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uQ29uZmlnIHtcblx0XHRsYWJlbDogc3RyaW5nO1xuXHRcdHRyaWdnZXI6IFZvaWRGdW5jdGlvbjtcblx0fVxuXG5cdGV4cG9ydCB0eXBlIEFjdGlvbnMgPSBQYXJ0aWFsPFJlY29yZDxBY3Rpb25JZCwgQWN0aW9uQ29uZmlnPj47XG48L3NjcmlwdD5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0aW1wb3J0IHtvZGUsIFByb21pc2FibGV9IGZyb20gJyMvdXRpbC9iZWx0Jztcblx0XG5cdGltcG9ydCBTWF9JQ09OX1NFTkQgZnJvbSAnIy9pY29uL3NlbmQuc3ZnP3Jhdyc7XG5cdGltcG9ydCBTWF9JQ09OX1JFQ1YgZnJvbSAnIy9pY29uL3JlY3Yuc3ZnP3Jhdyc7XG5cdGltcG9ydCBTWF9JQ09OX0FERCBmcm9tICcjL2ljb24vYWRkLnN2Zz9yYXcnO1xuXHRpbXBvcnQgU1hfSUNPTl9JTkZPIGZyb20gJyMvaWNvbi9pbmZvLnN2Zz9yYXcnO1xuXHRpbXBvcnQgU1hfSUNPTl9FRElUIGZyb20gJyMvaWNvbi9lZGl0LnN2Zz9yYXcnO1xuXHRpbXBvcnQgU1hfSUNPTl9ERUxFVEUgZnJvbSAnIy9pY29uL2RlbGV0ZS5zdmc/cmF3Jztcblx0aW1wb3J0IFNYX0lDT05fV1JBUCBmcm9tICcjL2ljb24vd3JhcC5zdmc/cmF3Jztcblx0aW1wb3J0IFNYX0lDT05fVU5XUkFQIGZyb20gJyMvaWNvbi91bndyYXAuc3ZnP3Jhdyc7XG5cblx0aW1wb3J0IHR5cGUgeyBSZXNvdXJjZSB9IGZyb20gJyMvbWV0YS9yZXNvdXJjZSc7XG5cdGltcG9ydCB0eXBlIHsgUGZwLCBQZnBQYXRoIH0gZnJvbSAnIy9tZXRhL3BmcCc7XG5cdGltcG9ydCBQZnBEaXNwbGF5IGZyb20gJy4vUGZwRGlzcGxheS5zdmVsdGUnO1xuXHRpbXBvcnQgdHlwZSB7IE5hbWVhYmxlLCBQZnBhYmxlIH0gZnJvbSAnIy9tZXRhL2FibGUnO1xuXHRpbXBvcnQgeyB5d19zdG9yZV90YWdzIH0gZnJvbSAnLi4vbWVtJztcblx0aW1wb3J0IElubGluZVRhZ3MgZnJvbSAnLi9JbmxpbmVUYWdzLnN2ZWx0ZSc7XG5cblx0Y29uc3QgSF9BQ1RJT05fSUNPTlM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG5cdFx0c2VuZDogU1hfSUNPTl9TRU5ELFxuXHRcdHJlY3Y6IFNYX0lDT05fUkVDVixcblx0XHRhZGQ6IFNYX0lDT05fQURELFxuXHRcdGVkaXQ6IFNYX0lDT05fRURJVCxcblx0XHR3cmFwOiBTWF9JQ09OX1dSQVAsXG5cdFx0dW53cmFwOiBTWF9JQ09OX1VOV1JBUCxcblx0XHRkZWxldGU6IFNYX0lDT05fREVMRVRFLFxuXHR9O1xuXG5cdC8qKlxuXHQgKiBFeHRyYWN0IHBmcCBhbmQgbmFtZSBmcm9tIGEgcmVzb3VyY2Vcblx0ICovXG5cdGV4cG9ydCBsZXQgcmVzb3VyY2U6IChQZnBhYmxlICYgTmFtZWFibGUpIHwgbnVsbCA9IG51bGw7XG5cblx0LyoqXG5cdCAqIEluZmVyIHBmcCBmcm9tIHJlc291cmNlXG5cdCAqL1xuXHRleHBvcnQgbGV0IHBmcDogUGZwUGF0aCB8ICcnID0gcmVzb3VyY2U/LnBmcCB8fCAnJztcblx0Ly8gY29uc3QgcF9wZnAgPSBwZnA7XG5cblx0LyoqXG5cdCAqIFNldCB0byB0cnVlIHRvIHVzZSBhIGNpcmN1bGFyIHBmcFxuXHQgKi9cblx0ZXhwb3J0IGxldCBjaXJjdWxhciA9IGZhbHNlO1xuXHRjb25zdCBiX2NpcmN1bGFyID0gY2lyY3VsYXI7XG5cblx0LyoqXG5cdCAqIFNldCB0byB0cnVlIHRvIGRpc2FibGUgcGZwXG5cdCAqL1xuXHRleHBvcnQgbGV0IG5vUGZwID0gZmFsc2U7XG5cdGNvbnN0IGJfbm9fcGZwID0gbm9QZnA7XG5cblx0LyoqXG5cdCAqIFBhdGggdG8gdGhlIHJlc291cmNlXG5cdCAqL1xuXHRleHBvcnQgbGV0IHJlc291cmNlUGF0aDogc3RyaW5nO1xuXHRjb25zdCBwX3Jlc291cmNlID0gcmVzb3VyY2VQYXRoO1xuXG5cdC8vIHJlYWN0aXZlbHkgbG9hZCB0YWdzIGZvciB0aGlzIHJlc291cmNlXG5cdCQ6IGFfdGFncyA9ICR5d19zdG9yZV90YWdzIS5nZXRUYWdzRm9yKHBfcmVzb3VyY2UpO1xuXG5cdGV4cG9ydCBsZXQgcm9vdENsYXNzZXMgPSAnJztcblx0Y29uc3Qgc19jbGFzc2VzID0gcm9vdENsYXNzZXM7XG5cblx0ZXhwb3J0IGxldCB0aXRsZTogUHJvbWlzYWJsZTxzdHJpbmc+ID0gcmVzb3VyY2U/Lm5hbWUgfHwgJyc7XG5cblx0ZXhwb3J0IGxldCBzdWJ0aXRsZSA9ICcnO1xuXG5cdC8qKlxuXHQgKiBDb25maWd1cmUgd2hpY2ggYWN0aW9ucyBhcmUgYXZhaWxhYmxlIHRvIHRoaXMgcmVzb3VyY2Vcblx0ICovXG5cdGV4cG9ydCBsZXQgYWN0aW9uczogbnVsbCB8IFBhcnRpYWw8QWN0aW9ucz4gPSBudWxsO1xuXHRjb25zdCBoX2FjdGlvbnMgPSBhY3Rpb25zIGFzIEFjdGlvbnM7XG5cblxuXHRleHBvcnQgbGV0IGluZm8gPSBmYWxzZTtcblxuXG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG5cdEBpbXBvcnQgJy4vX2Jhc2UubGVzcyc7XG5cblx0LnBvcnRyYWl0IHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0cGFkZGluZy10b3A6IDFlbTtcblxuXHRcdD4ucGZwIHtcblx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHRcdFx0bWFyZ2luLWJvdHRvbTogMTBweDtcblx0XHRcdFxuXHRcdFx0Pi5pY29uIHtcblx0XHRcdFx0LS1pY29uLWRpYW1ldGVyOiA2NHB4O1xuXG5cdFx0XHRcdC5ncm91cCB7XG5cdFx0XHRcdFx0Omdsb2JhbCgmKSB7XG5cdFx0XHRcdFx0XHR0cmFuc2Zvcm06IHNjYWxlKDEuNSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW1nIHtcblx0XHRcdFx0XHQ6Z2xvYmFsKCYpIHtcblx0XHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6IDIwJTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQ+LnRpdGxlIHtcblx0XHRcdC5mb250KGh1Z2UpO1xuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0Z2FwOiA0cHg7XG5cdFx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdFx0b3ZlcmZsb3c6IHNjcm9sbDtcblx0XHRcdC5oaWRlLXNjcm9sbGJhcigpO1xuXG5cdFx0XHQ+LmluZm8ge1xuXHRcdFx0XHRmaWxsOiB2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5KTtcblx0XHRcdFx0dmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuXG5cdFx0XHRcdD5zdmcge1xuXHRcdFx0XHRcdDpnbG9iYWwoJikge1xuXHRcdFx0XHRcdFx0bWFyZ2luLXRvcDogLTRweDtcblx0XHRcdFx0XHRcdHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG5cdFx0XHRcdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdFx0XHRcdGhlaWdodDogMjBweDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQ+LnN1YnRpdGxlIHtcblx0XHRcdC5mb250KHJlZ3VsYXIpO1xuXHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHRcdFx0Y29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXRleHQtbWVkKTtcblx0XHRcdG1hcmdpbi10b3A6IDRweDtcblx0XHR9XG5cblx0XHQ+LmFjdGlvbnMge1xuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0bWFyZ2luLXRvcDogMXJlbTtcblx0XHRcdG1hcmdpbi1ib3R0b206IDFyZW07XG5cblx0XHRcdD4uYWN0aW9uIHtcblx0XHRcdFx0LmZvbnQodGlueSk7XG5cblx0XHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdFx0XHRmbGV4OiAwO1xuXHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0XHRnYXA6IDVweDtcblxuXHRcdFx0XHRjb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItdGV4dC1tZWQpO1xuXHRcdFx0XHRtaW4td2lkdGg6IGNhbGMoNDhweCArIDMuNWV4KTtcblxuXHRcdFx0XHQ+Lmljb24ge1xuXHRcdFx0XHRcdC0tYnV0dG9uLWRpYW1ldGVyOiA0OHB4O1xuXHRcdFx0XHRcdC0taWNvbi1kaWFtZXRlcjogMjBweDtcblx0XHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci1ib3JkZXIpO1xuXG5cdFx0XHRcdFx0ZGlzcGxheTogaW5saW5lLWZsZXg7XG5cdFx0XHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdCY6aG92ZXIge1xuXHRcdFx0XHRcdD4uaWNvbiB7XG5cdFx0XHRcdFx0XHQtLWljb24tY29sb3I6IGJsYWNrO1xuXHRcdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItcHJpbWFyeSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG48L3N0eWxlPlxuXG5cbjxkaXYgY2xhc3M9XCJwb3J0cmFpdCB7c19jbGFzc2VzfVwiIGRhdGEtcGF0aD17cF9yZXNvdXJjZX0+XG5cdHsjaWYgIWJfbm9fcGZwfVxuXHRcdDxkaXYgY2xhc3M9XCJwZnBcIj5cblx0XHRcdHsjaWYgJCRzbG90cy5wZnB9XG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwiaWNvblwiPlxuXHRcdFx0XHRcdDxzbG90IG5hbWU9XCJwZnBcIj5cblx0XHRcdFx0XHRcdEVtcHR5IHBmcCBzbG90XG5cdFx0XHRcdFx0PC9zbG90PlxuXHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHR7OmVsc2V9XG5cdFx0XHRcdDxQZnBEaXNwbGF5IHJlZj17cGZwfSByZXNvdXJjZT17cmVzb3VyY2V9IGRpbT17NjR9IGNpcmN1bGFyPXtiX2NpcmN1bGFyfSAvPlxuXHRcdFx0ey9pZn1cblx0XHQ8L2Rpdj5cblx0ey9pZn1cblx0PGRpdiBjbGFzcz1cInRpdGxlXCI+XG5cdFx0PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+XG5cdFx0XHR7I2F3YWl0IHRpdGxlfVxuXHRcdFx0XHQuLi5cblx0XHRcdHs6dGhlbiBzX3RpdGxlfVxuXHRcdFx0XHR7c190aXRsZX1cblx0XHRcdHsvYXdhaXR9XG5cdFx0PC9zcGFuPlxuXHRcdHsjaWYgaW5mb31cblx0XHRcdDxzcGFuIGNsYXNzPVwiaW5mb1wiPlxuXHRcdFx0XHR7QGh0bWwgU1hfSUNPTl9JTkZPfVxuXHRcdFx0PC9zcGFuPlxuXHRcdHsvaWZ9XG5cdDwvZGl2PlxuXHR7I2lmIHN1YnRpdGxlIHx8ICQkc2xvdHMuc3VidGl0bGV9XG5cdFx0PGRpdiBjbGFzcz1cInN1YnRpdGxlXCI+XG5cdFx0XHQ8c3BhbiBjbGFzcz1cInRleHRcIj5cblx0XHRcdFx0PHNsb3QgbmFtZT1cInN1YnRpdGxlXCI+XG5cdFx0XHRcdFx0e3N1YnRpdGxlfVxuXHRcdFx0XHQ8L3Nsb3Q+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0PC9kaXY+XG5cdHsvaWZ9XG5cblx0PElubGluZVRhZ3MgcmVzb3VyY2VQYXRoPXtwX3Jlc291cmNlfSByb290U3R5bGU9J21hcmdpbjogdmFyKC0tdWktcGFkZGluZykgMCAwIDA7JyAvPlxuXG5cdHsjaWYgaF9hY3Rpb25zfVxuXHRcdDxkaXYgY2xhc3M9XCJhY3Rpb25zXCI+XG5cdFx0XHR7I2VhY2ggb2RlKGhfYWN0aW9ucykgYXMgW3NpX2FjdGlvbiwgZ2NfYWN0aW9uXX1cblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJhY3Rpb24gYWN0aW9uLXtzaV9hY3Rpb259XCIgb246Y2xpY2s9eygpID0+IGdjX2FjdGlvbi50cmlnZ2VyKCl9PlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiaWNvblwiPlxuXHRcdFx0XHRcdFx0e0BodG1sIEhfQUNUSU9OX0lDT05TW3NpX2FjdGlvbl19XG5cdFx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwibGFiZWxcIj5cblx0XHRcdFx0XHRcdHtnY19hY3Rpb24ubGFiZWx9XG5cdFx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHR7L2VhY2h9XG5cdFx0PC9kaXY+XG5cdHsvaWZ9XG5cblx0XG48L2Rpdj4iLCJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+XFxuXFx0PHN0eWxlIHR5cGU9XFxcInRleHQvY3NzXFxcIj5cXG5cXHRcXHQuczJyLWRyb3AtZG93bi1mZyB7XFxuXFx0XFx0XFx0ZmlsbDogdmFyKC0tc3ZnLWNvbG9yLWZnLCBjdXJyZW50Q29sb3IpO1xcblxcdFxcdH1cXG5cXHQ8L3N0eWxlPlxcblxcdDxwYXRoIGNsYXNzPVxcXCJzMnItZHJvcC1kb3duLWZnXFxcIiBkPVxcXCJNOC43MDk1NiAxMS43MUwxMS4yOTk2IDE0LjNDMTEuNjg5NiAxNC42OSAxMi4zMTk2IDE0LjY5IDEyLjcwOTYgMTQuM0wxNS4yOTk2IDExLjcxQzE1LjkyOTYgMTEuMDggMTUuNDc5NiAxMCAxNC41ODk2IDEwSDkuNDA5NTZDOC41MTk1NiAxMCA4LjA3OTU2IDExLjA4IDguNzA5NTYgMTEuNzFaXFxcIiAvPlxcbjwvc3ZnPlxcblwiIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHBhcmVudCwgY29udGFpbmVyKSB7XG4gICAgY29uc3QgcGFyZW50Qm91bmRpbmcgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgYm91bmRpbmdDb250YWluZXIgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3Qgb3V0ID0ge307XG5cbiAgICBvdXQudG9wID0gcGFyZW50Qm91bmRpbmcudG9wIDwgMDtcbiAgICBvdXQubGVmdCA9IHBhcmVudEJvdW5kaW5nLmxlZnQgPCAwO1xuICAgIG91dC5ib3R0b20gPVxuICAgICAgICBwYXJlbnRCb3VuZGluZy5ib3R0b20gKyBib3VuZGluZ0NvbnRhaW5lci5oZWlnaHQgPlxuICAgICAgICAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpO1xuXG4gICAgb3V0LnJpZ2h0ID1cbiAgICAgICAgcGFyZW50Qm91bmRpbmcucmlnaHQgPlxuICAgICAgICAod2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKTtcbiAgICBvdXQuYW55ID0gb3V0LnRvcCB8fCBvdXQubGVmdCB8fCBvdXQuYm90dG9tIHx8IG91dC5yaWdodDtcblxuICAgIHJldHVybiBvdXQ7XG59XG4iLCI8c2NyaXB0PlxuICAgIGV4cG9ydCBsZXQgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGlzRmlyc3QgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGlzSG92ZXIgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGlzU2VsZWN0YWJsZSA9IGZhbHNlO1xuICAgIGV4cG9ydCBsZXQgZ2V0T3B0aW9uTGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgZXhwb3J0IGxldCBpdGVtID0gdW5kZWZpbmVkO1xuICAgIGV4cG9ydCBsZXQgZmlsdGVyVGV4dCA9ICcnO1xuXG4gICAgbGV0IGl0ZW1DbGFzc2VzID0gJyc7XG5cbiAgICAkOiB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXMgPSBbXTtcbiAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2FjdGl2ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZpcnN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSG92ZXIpIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnaG92ZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbS5pc0dyb3VwSGVhZGVyKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2dyb3VwSGVhZGVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0uaXNHcm91cEl0ZW0pIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnZ3JvdXBJdGVtJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1NlbGVjdGFibGUpIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnbm90U2VsZWN0YWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1DbGFzc2VzID0gY2xhc3Nlcy5qb2luKCcgJyk7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICAuaXRlbSB7XG4gICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICAgaGVpZ2h0OiB2YXIoLS1oZWlnaHQsIDQycHgpO1xuICAgICAgICBsaW5lLWhlaWdodDogdmFyKC0taGVpZ2h0LCA0MnB4KTtcbiAgICAgICAgcGFkZGluZzogdmFyKC0taXRlbVBhZGRpbmcsIDAgMjBweCk7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1pdGVtQ29sb3IsIGluaGVyaXQpO1xuICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB9XG5cbiAgICAuZ3JvdXBIZWFkZXIge1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdmFyKC0tZ3JvdXBUaXRsZVRleHRUcmFuc2Zvcm0sIHVwcGVyY2FzZSk7XG4gICAgfVxuXG4gICAgLmdyb3VwSXRlbSB7XG4gICAgICAgIHBhZGRpbmctbGVmdDogdmFyKC0tZ3JvdXBJdGVtUGFkZGluZ0xlZnQsIDQwcHgpO1xuICAgIH1cblxuICAgIC5pdGVtOmFjdGl2ZSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWl0ZW1BY3RpdmVCYWNrZ3JvdW5kLCAjYjlkYWZmKTtcbiAgICB9XG5cbiAgICAuaXRlbS5hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1pdGVtSXNBY3RpdmVCRywgIzAwN2FmZik7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1pdGVtSXNBY3RpdmVDb2xvciwgI2ZmZik7XG4gICAgfVxuXG4gICAuaXRlbS5ub3RTZWxlY3RhYmxlIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWl0ZW1Jc05vdFNlbGVjdGFibGVDb2xvciwgIzk5OSk7XG4gICAgfVxuXG4gICAgLml0ZW0uZmlyc3Qge1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1pdGVtRmlyc3RCb3JkZXJSYWRpdXMsIDRweCA0cHggMCAwKTtcbiAgICB9XG5cbiAgICAuaXRlbS5ob3Zlcjpub3QoLmFjdGl2ZSkge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1pdGVtSG92ZXJCRywgI2U3ZjJmZik7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1pdGVtSG92ZXJDb2xvciwgaW5oZXJpdCk7XG4gICAgfVxuPC9zdHlsZT5cblxuPGRpdiBjbGFzcz1cIml0ZW0ge2l0ZW1DbGFzc2VzfVwiPlxuICAgIHtAaHRtbCBnZXRPcHRpb25MYWJlbChpdGVtLCBmaWx0ZXJUZXh0KX1cbjwvZGl2PlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBiZWZvcmVVcGRhdGUsIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgb25Nb3VudCwgdGljayB9IGZyb20gJ3N2ZWx0ZSc7XG4gICAgaW1wb3J0IGlzT3V0T2ZWaWV3cG9ydCBmcm9tICcuL3V0aWxzL2lzT3V0T2ZWaWV3cG9ydCc7XG4gICAgaW1wb3J0IEl0ZW1Db21wb25lbnQgZnJvbSAnLi9JdGVtLnN2ZWx0ZSc7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBjb250YWluZXIgPSB1bmRlZmluZWQ7XG4gICAgZXhwb3J0IGxldCBWaXJ0dWFsTGlzdCA9IG51bGw7XG4gICAgZXhwb3J0IGxldCBJdGVtID0gSXRlbUNvbXBvbmVudDtcbiAgICBleHBvcnQgbGV0IGlzVmlydHVhbExpc3QgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGl0ZW1zID0gW107XG4gICAgZXhwb3J0IGxldCBsYWJlbElkZW50aWZpZXIgPSAnbGFiZWwnO1xuICAgIGV4cG9ydCBsZXQgZ2V0T3B0aW9uTGFiZWwgPSAob3B0aW9uLCBmaWx0ZXJUZXh0KSA9PiB7XG4gICAgICAgIGlmIChvcHRpb24pXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uLmlzQ3JlYXRvclxuICAgICAgICAgICAgICAgID8gYENyZWF0ZSBcXFwiJHtmaWx0ZXJUZXh0fVxcXCJgXG4gICAgICAgICAgICAgICAgOiBvcHRpb25bbGFiZWxJZGVudGlmaWVyXTtcbiAgICB9O1xuICAgIGV4cG9ydCBsZXQgZ2V0R3JvdXBIZWFkZXJMYWJlbCA9IG51bGw7XG4gICAgZXhwb3J0IGxldCBpdGVtSGVpZ2h0ID0gNDA7XG4gICAgZXhwb3J0IGxldCBob3Zlckl0ZW1JbmRleCA9IDA7XG4gICAgZXhwb3J0IGxldCB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICBleHBvcnQgbGV0IG9wdGlvbklkZW50aWZpZXIgPSAndmFsdWUnO1xuICAgIGV4cG9ydCBsZXQgaGlkZUVtcHR5U3RhdGUgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IG5vT3B0aW9uc01lc3NhZ2UgPSAnTm8gb3B0aW9ucyc7XG4gICAgZXhwb3J0IGxldCBpc011bHRpID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBhY3RpdmVJdGVtSW5kZXggPSAwO1xuICAgIGV4cG9ydCBsZXQgZmlsdGVyVGV4dCA9ICcnO1xuICAgIGV4cG9ydCBsZXQgcGFyZW50ID0gbnVsbDtcbiAgICBleHBvcnQgbGV0IGxpc3RQbGFjZW1lbnQgPSBudWxsO1xuICAgIGV4cG9ydCBsZXQgbGlzdEF1dG9XaWR0aCA9IG51bGw7XG4gICAgZXhwb3J0IGxldCBsaXN0T2Zmc2V0ID0gNTtcblxuICAgIGxldCBpc1Njcm9sbGluZ1RpbWVyID0gMDtcbiAgICBsZXQgaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICBsZXQgcHJldl9pdGVtcztcblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCAmJiAhaXNNdWx0aSAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgX2hvdmVySXRlbUluZGV4ID0gaXRlbXMuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgIChpdGVtKSA9PiBpdGVtW29wdGlvbklkZW50aWZpZXJdID09PSB2YWx1ZVtvcHRpb25JZGVudGlmaWVyXVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKF9ob3Zlckl0ZW1JbmRleCkge1xuICAgICAgICAgICAgICAgIGhvdmVySXRlbUluZGV4ID0gX2hvdmVySXRlbUluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2Nyb2xsVG9BY3RpdmVJdGVtKCdhY3RpdmUnKTtcblxuICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdzY3JvbGwnLFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChpc1Njcm9sbGluZ1RpbWVyKTtcblxuICAgICAgICAgICAgICAgIGlzU2Nyb2xsaW5nVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBiZWZvcmVVcGRhdGUoKCkgPT4ge1xuICAgICAgICBpZiAoIWl0ZW1zKSBpdGVtcyA9IFtdO1xuICAgICAgICBpZiAoaXRlbXMgIT09IHByZXZfaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaG92ZXJJdGVtSW5kZXggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldl9pdGVtcyA9IGl0ZW1zO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0KGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0uaXNDcmVhdG9yKSByZXR1cm47XG4gICAgICAgIGRpc3BhdGNoKCdpdGVtU2VsZWN0ZWQnLCBpdGVtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVIb3ZlcihpKSB7XG4gICAgICAgIGlmIChpc1Njcm9sbGluZykgcmV0dXJuO1xuICAgICAgICBob3Zlckl0ZW1JbmRleCA9IGk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soYXJncykge1xuICAgICAgICBjb25zdCB7IGl0ZW0sIGksIGV2ZW50IH0gPSBhcmdzO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB2YWx1ZSAmJlxuICAgICAgICAgICAgIWlzTXVsdGkgJiZcbiAgICAgICAgICAgIHZhbHVlW29wdGlvbklkZW50aWZpZXJdID09PSBpdGVtW29wdGlvbklkZW50aWZpZXJdXG4gICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBjbG9zZUxpc3QoKTtcblxuICAgICAgICBpZiAoaXRlbS5pc0NyZWF0b3IpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKCdpdGVtQ3JlYXRlZCcsIGZpbHRlclRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzSXRlbVNlbGVjdGFibGUoaXRlbSkpIHtcbiAgICAgICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGk7XG4gICAgICAgICAgICBob3Zlckl0ZW1JbmRleCA9IGk7XG4gICAgICAgICAgICBoYW5kbGVTZWxlY3QoaXRlbSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zZUxpc3QoKSB7XG4gICAgICAgIGRpc3BhdGNoKCdjbG9zZUxpc3QnKTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiB1cGRhdGVIb3Zlckl0ZW0oaW5jcmVtZW50KSB7XG4gICAgICAgIGlmIChpc1ZpcnR1YWxMaXN0KSByZXR1cm47XG5cbiAgICAgICAgbGV0IGlzTm9uU2VsZWN0YWJsZUl0ZW0gPSB0cnVlO1xuXG4gICAgICAgIHdoaWxlIChpc05vblNlbGVjdGFibGVJdGVtKSB7XG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ID4gMCAmJiBob3Zlckl0ZW1JbmRleCA9PT0gaXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGhvdmVySXRlbUluZGV4ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5jcmVtZW50IDwgMCAmJiBob3Zlckl0ZW1JbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGhvdmVySXRlbUluZGV4ID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaG92ZXJJdGVtSW5kZXggPSBob3Zlckl0ZW1JbmRleCArIGluY3JlbWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXNOb25TZWxlY3RhYmxlSXRlbSA9ICFpc0l0ZW1TZWxlY3RhYmxlKGl0ZW1zW2hvdmVySXRlbUluZGV4XSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aWNrKCk7XG5cbiAgICAgICAgc2Nyb2xsVG9BY3RpdmVJdGVtKCdob3ZlcicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZSkge1xuICAgICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjbG9zZUxpc3QoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGl0ZW1zLmxlbmd0aCAmJiB1cGRhdGVIb3Zlckl0ZW0oMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaXRlbXMubGVuZ3RoICYmIHVwZGF0ZUhvdmVySXRlbSgtMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvdmVySXRlbSA9IGl0ZW1zW2hvdmVySXRlbUluZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgICFpc011bHRpICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlW29wdGlvbklkZW50aWZpZXJdID09PSBob3Zlckl0ZW1bb3B0aW9uSWRlbnRpZmllcl1cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VMaXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaG92ZXJJdGVtLmlzQ3JlYXRvcikge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCgnaXRlbUNyZWF0ZWQnLCBmaWx0ZXJUZXh0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBob3Zlckl0ZW1JbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2VsZWN0KGl0ZW1zW2hvdmVySXRlbUluZGV4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnVGFiJzpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvc2VMaXN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbb3B0aW9uSWRlbnRpZmllcl0gPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tob3Zlckl0ZW1JbmRleF1bb3B0aW9uSWRlbnRpZmllcl1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9zZUxpc3QoKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBob3Zlckl0ZW1JbmRleDtcbiAgICAgICAgICAgICAgICBoYW5kbGVTZWxlY3QoaXRlbXNbaG92ZXJJdGVtSW5kZXhdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvQWN0aXZlSXRlbShjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKGlzVmlydHVhbExpc3QgfHwgIWNvbnRhaW5lcikgcmV0dXJuO1xuXG4gICAgICAgIGxldCBvZmZzZXRCb3VuZGluZztcbiAgICAgICAgY29uc3QgZm9jdXNlZEVsZW1Cb3VuZGluZyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgYC5saXN0SXRlbSAuJHtjbGFzc05hbWV9YFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChmb2N1c2VkRWxlbUJvdW5kaW5nKSB7XG4gICAgICAgICAgICBvZmZzZXRCb3VuZGluZyA9XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSAtXG4gICAgICAgICAgICAgICAgZm9jdXNlZEVsZW1Cb3VuZGluZy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIH1cblxuICAgICAgICBjb250YWluZXIuc2Nyb2xsVG9wIC09IG9mZnNldEJvdW5kaW5nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSXRlbUFjdGl2ZShpdGVtLCB2YWx1ZSwgb3B0aW9uSWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWVbb3B0aW9uSWRlbnRpZmllcl0gPT09IGl0ZW1bb3B0aW9uSWRlbnRpZmllcl07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNJdGVtRmlyc3QoaXRlbUluZGV4KSB7XG4gICAgICAgIHJldHVybiBpdGVtSW5kZXggPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNJdGVtSG92ZXIoaG92ZXJJdGVtSW5kZXgsIGl0ZW0sIGl0ZW1JbmRleCwgaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIGlzSXRlbVNlbGVjdGFibGUoaXRlbSkgJiYgKGhvdmVySXRlbUluZGV4ID09PSBpdGVtSW5kZXggfHwgaXRlbXMubGVuZ3RoID09PSAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0l0ZW1TZWxlY3RhYmxlKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIChpdGVtLmlzR3JvdXBIZWFkZXIgJiYgaXRlbS5pc1NlbGVjdGFibGUpIHx8XG4gICAgICAgICAgICBpdGVtLnNlbGVjdGFibGUgfHxcbiAgICAgICAgICAgICFpdGVtLmhhc093blByb3BlcnR5KCdzZWxlY3RhYmxlJykgLy8gRGVmYXVsdDsgaWYgYHNlbGVjdGFibGVgIHdhcyBub3Qgc3BlY2lmaWVkLCB0aGUgb2JqZWN0IGlzIHNlbGVjdGFibGVcbiAgICB9XG5cbiAgICBsZXQgbGlzdFN0eWxlO1xuICAgIGZ1bmN0aW9uIGNvbXB1dGVQbGFjZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCB9ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGxpc3RTdHlsZSA9ICcnO1xuICAgICAgICBsaXN0U3R5bGUgKz0gYG1pbi13aWR0aDoke3dpZHRofXB4O3dpZHRoOiR7XG4gICAgICAgICAgICBsaXN0QXV0b1dpZHRoID8gJ2F1dG8nIDogJzEwMCUnXG4gICAgICAgIH07YDtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBsaXN0UGxhY2VtZW50ID09PSAndG9wJyB8fFxuICAgICAgICAgICAgKGxpc3RQbGFjZW1lbnQgPT09ICdhdXRvJyAmJiBpc091dE9mVmlld3BvcnQocGFyZW50LCBjb250YWluZXIpLmJvdHRvbSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBsaXN0U3R5bGUgKz0gYGJvdHRvbToke2hlaWdodCArIGxpc3RPZmZzZXR9cHg7YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RTdHlsZSArPSBgdG9wOiR7aGVpZ2h0ICsgbGlzdE9mZnNldH1weDtgO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJDoge1xuICAgICAgICBpZiAocGFyZW50ICYmIGNvbnRhaW5lcikgY29tcHV0ZVBsYWNlbWVudCgpO1xuICAgIH1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gICAgLmxpc3RDb250YWluZXIge1xuICAgICAgICBib3gtc2hhZG93OiB2YXIoLS1saXN0U2hhZG93LCAwIDJweCAzcHggMCByZ2JhKDQ0LCA2MiwgODAsIDAuMjQpKTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbGlzdEJvcmRlclJhZGl1cywgNHB4KTtcbiAgICAgICAgbWF4LWhlaWdodDogdmFyKC0tbGlzdE1heEhlaWdodCwgMjUwcHgpO1xuICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1saXN0QmFja2dyb3VuZCwgI2ZmZik7XG4gICAgICAgIGJvcmRlcjogdmFyKC0tbGlzdEJvcmRlciwgbm9uZSk7XG4gICAgICAgIHBvc2l0aW9uOiB2YXIoLS1saXN0UG9zaXRpb24sIGFic29sdXRlKTtcbiAgICAgICAgei1pbmRleDogdmFyKC0tbGlzdFpJbmRleCwgMik7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBsZWZ0OiB2YXIoLS1saXN0TGVmdCwgMCk7XG4gICAgICAgIHJpZ2h0OiB2YXIoLS1saXN0UmlnaHQsIDApO1xuICAgIH1cblxuICAgIC52aXJ0dWFsTGlzdCB7XG4gICAgICAgIGhlaWdodDogdmFyKC0tdmlydHVhbExpc3RIZWlnaHQsIDIwMHB4KTtcbiAgICB9XG5cbiAgICAubGlzdEdyb3VwVGl0bGUge1xuICAgICAgICBjb2xvcjogdmFyKC0tZ3JvdXBUaXRsZUNvbG9yLCAjOGY4ZjhmKTtcbiAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgICBmb250LXNpemU6IHZhcigtLWdyb3VwVGl0bGVGb250U2l6ZSwgMTJweCk7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1ncm91cFRpdGxlRm9udFdlaWdodCwgNjAwKTtcbiAgICAgICAgaGVpZ2h0OiB2YXIoLS1oZWlnaHQsIDQycHgpO1xuICAgICAgICBsaW5lLWhlaWdodDogdmFyKC0taGVpZ2h0LCA0MnB4KTtcbiAgICAgICAgcGFkZGluZzogdmFyKC0tZ3JvdXBUaXRsZVBhZGRpbmcsIDAgMjBweCk7XG4gICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICBvdmVyZmxvdy14OiBoaWRkZW47XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB2YXIoLS1ncm91cFRpdGxlVGV4dFRyYW5zZm9ybSwgdXBwZXJjYXNlKTtcbiAgICB9XG5cbiAgICAuZW1wdHkge1xuICAgICAgICB0ZXh0LWFsaWduOiB2YXIoLS1saXN0RW1wdHlUZXh0QWxpZ24sIGNlbnRlcik7XG4gICAgICAgIHBhZGRpbmc6IHZhcigtLWxpc3RFbXB0eVBhZGRpbmcsIDIwcHggMCk7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1saXN0RW1wdHlDb2xvciwgIzc4ODQ4Zik7XG4gICAgfVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTp3aW5kb3cgb246a2V5ZG93bj17aGFuZGxlS2V5RG93bn0gb246cmVzaXplPXtjb21wdXRlUGxhY2VtZW50fSAvPlxuXG48ZGl2XG4gICAgY2xhc3M9XCJsaXN0Q29udGFpbmVyXCJcbiAgICBjbGFzczp2aXJ0dWFsTGlzdD17aXNWaXJ0dWFsTGlzdH1cbiAgICBiaW5kOnRoaXM9e2NvbnRhaW5lcn1cbiAgICBzdHlsZT17bGlzdFN0eWxlfT5cbiAgICB7I2lmIGlzVmlydHVhbExpc3R9XG4gICAgICAgIDxzdmVsdGU6Y29tcG9uZW50XG4gICAgICAgICAgICB0aGlzPXtWaXJ0dWFsTGlzdH1cbiAgICAgICAgICAgIHtpdGVtc31cbiAgICAgICAgICAgIHtpdGVtSGVpZ2h0fVxuICAgICAgICAgICAgbGV0Oml0ZW1cbiAgICAgICAgICAgIGxldDppPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIG9uOm1vdXNlb3Zlcj17KCkgPT4gaGFuZGxlSG92ZXIoaSl9XG4gICAgICAgICAgICAgICAgb246Zm9jdXM9eygpID0+IGhhbmRsZUhvdmVyKGkpfVxuICAgICAgICAgICAgICAgIG9uOmNsaWNrPXsoZXZlbnQpID0+IGhhbmRsZUNsaWNrKHsgaXRlbSwgaSwgZXZlbnQgfSl9XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJsaXN0SXRlbVwiPlxuICAgICAgICAgICAgICAgIDxzdmVsdGU6Y29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgIHRoaXM9e0l0ZW19XG4gICAgICAgICAgICAgICAgICAgIHtpdGVtfVxuICAgICAgICAgICAgICAgICAgICB7ZmlsdGVyVGV4dH1cbiAgICAgICAgICAgICAgICAgICAge2dldE9wdGlvbkxhYmVsfVxuICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0PXtpc0l0ZW1GaXJzdChpKX1cbiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmU9e2lzSXRlbUFjdGl2ZShpdGVtLCB2YWx1ZSwgb3B0aW9uSWRlbnRpZmllcil9XG4gICAgICAgICAgICAgICAgICAgIGlzSG92ZXI9e2lzSXRlbUhvdmVyKGhvdmVySXRlbUluZGV4LCBpdGVtLCBpLCBpdGVtcyl9XG4gICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0YWJsZT17aXNJdGVtU2VsZWN0YWJsZShpdGVtKX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3N2ZWx0ZTpjb21wb25lbnQ+XG4gICAgezplbHNlfVxuICAgICAgICB7I2VhY2ggaXRlbXMgYXMgaXRlbSwgaX1cbiAgICAgICAgICAgIHsjaWYgaXRlbS5pc0dyb3VwSGVhZGVyICYmICFpdGVtLmlzU2VsZWN0YWJsZX1cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdEdyb3VwVGl0bGVcIj57Z2V0R3JvdXBIZWFkZXJMYWJlbChpdGVtKX08L2Rpdj5cbiAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIG9uOm1vdXNlb3Zlcj17KCkgPT4gaGFuZGxlSG92ZXIoaSl9XG4gICAgICAgICAgICAgICAgICAgIG9uOmZvY3VzPXsoKSA9PiBoYW5kbGVIb3ZlcihpKX1cbiAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9eyhldmVudCkgPT4gaGFuZGxlQ2xpY2soeyBpdGVtLCBpLCBldmVudCB9KX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJsaXN0SXRlbVwiXG4gICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgPHN2ZWx0ZTpjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXM9e0l0ZW19XG4gICAgICAgICAgICAgICAgICAgICAgICB7aXRlbX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtmaWx0ZXJUZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAge2dldE9wdGlvbkxhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNGaXJzdD17aXNJdGVtRmlyc3QoaSl9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZT17aXNJdGVtQWN0aXZlKGl0ZW0sIHZhbHVlLCBvcHRpb25JZGVudGlmaWVyKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzSG92ZXI9e2lzSXRlbUhvdmVyKGhvdmVySXRlbUluZGV4LCBpdGVtLCBpLCBpdGVtcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGFibGU9e2lzSXRlbVNlbGVjdGFibGUoaXRlbSl9IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICB7I2lmICFoaWRlRW1wdHlTdGF0ZX1cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj57bm9PcHRpb25zTWVzc2FnZX08L2Rpdj5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIHsvZWFjaH1cbiAgICB7L2lmfVxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAgIGV4cG9ydCBsZXQgZ2V0U2VsZWN0aW9uTGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgZXhwb3J0IGxldCBpdGVtID0gdW5kZWZpbmVkO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICAuc2VsZWN0aW9uIHtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB9XG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwic2VsZWN0aW9uXCI+XG4gICAge0BodG1sIGdldFNlbGVjdGlvbkxhYmVsKGl0ZW0pfVxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSc7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCB2YWx1ZSA9IFtdO1xuICAgIGV4cG9ydCBsZXQgYWN0aXZlVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgZXhwb3J0IGxldCBpc0Rpc2FibGVkID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBtdWx0aUZ1bGxJdGVtQ2xlYXJhYmxlID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBnZXRTZWxlY3Rpb25MYWJlbCA9IHVuZGVmaW5lZDtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZUNsZWFyKGksIGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBkaXNwYXRjaCgnbXVsdGlJdGVtQ2xlYXInLCB7IGkgfSk7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICAubXVsdGlTZWxlY3RJdGVtIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tbXVsdGlJdGVtQkcsICNlYmVkZWYpO1xuICAgICAgICBtYXJnaW46IHZhcigtLW11bHRpSXRlbU1hcmdpbiwgNXB4IDVweCAwIDApO1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1tdWx0aUl0ZW1Cb3JkZXJSYWRpdXMsIDE2cHgpO1xuICAgICAgICBoZWlnaHQ6IHZhcigtLW11bHRpSXRlbUhlaWdodCwgMzJweCk7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiB2YXIoLS1tdWx0aUl0ZW1IZWlnaHQsIDMycHgpO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgICAgIHBhZGRpbmc6IHZhcigtLW11bHRpSXRlbVBhZGRpbmcsIDAgMTBweCAwIDE1cHgpO1xuICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgLm11bHRpU2VsZWN0SXRlbV9sYWJlbCB7XG4gICAgICAgIG1hcmdpbjogdmFyKC0tbXVsdGlMYWJlbE1hcmdpbiwgMCA1cHggMCAwKTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgfVxuXG4gICAgLm11bHRpU2VsZWN0SXRlbTpob3ZlcixcbiAgICAubXVsdGlTZWxlY3RJdGVtLmFjdGl2ZSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW11bHRpSXRlbUFjdGl2ZUJHLCAjMDA2ZmZmKTtcbiAgICAgICAgY29sb3I6IHZhcigtLW11bHRpSXRlbUFjdGl2ZUNvbG9yLCAjZmZmKTtcbiAgICB9XG5cbiAgICAubXVsdGlTZWxlY3RJdGVtLmRpc2FibGVkOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tbXVsdGlJdGVtRGlzYWJsZWRIb3ZlckJnLCAjZWJlZGVmKTtcbiAgICAgICAgY29sb3I6IHZhcigtLW11bHRpSXRlbURpc2FibGVkSG92ZXJDb2xvciwgI2MxYzZjYyk7XG4gICAgfVxuXG4gICAgLm11bHRpU2VsZWN0SXRlbV9jbGVhciB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW11bHRpQ2xlYXJSYWRpdXMsIDUwJSk7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLW11bHRpQ2xlYXJCRywgIzUyNjE2Zik7XG4gICAgICAgIG1pbi13aWR0aDogdmFyKC0tbXVsdGlDbGVhcldpZHRoLCAxNnB4KTtcbiAgICAgICAgbWF4LXdpZHRoOiB2YXIoLS1tdWx0aUNsZWFyV2lkdGgsIDE2cHgpO1xuICAgICAgICBoZWlnaHQ6IHZhcigtLW11bHRpQ2xlYXJIZWlnaHQsIDE2cHgpO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHRvcDogdmFyKC0tbXVsdGlDbGVhclRvcCwgOHB4KTtcbiAgICAgICAgdGV4dC1hbGlnbjogdmFyKC0tbXVsdGlDbGVhclRleHRBbGlnbiwgY2VudGVyKTtcbiAgICAgICAgcGFkZGluZzogdmFyKC0tbXVsdGlDbGVhclBhZGRpbmcsIDFweCk7XG4gICAgfVxuXG4gICAgLm11bHRpU2VsZWN0SXRlbV9jbGVhcjpob3ZlcixcbiAgICAuYWN0aXZlIC5tdWx0aVNlbGVjdEl0ZW1fY2xlYXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1tdWx0aUNsZWFySG92ZXJCRywgI2ZmZik7XG4gICAgfVxuXG4gICAgLm11bHRpU2VsZWN0SXRlbV9jbGVhcjpob3ZlciBzdmcsXG4gICAgLmFjdGl2ZSAubXVsdGlTZWxlY3RJdGVtX2NsZWFyIHN2ZyB7XG4gICAgICAgIGZpbGw6IHZhcigtLW11bHRpQ2xlYXJIb3ZlckZpbGwsICMwMDZmZmYpO1xuICAgIH1cblxuICAgIC5tdWx0aVNlbGVjdEl0ZW1fY2xlYXIgc3ZnIHtcbiAgICAgICAgZmlsbDogdmFyKC0tbXVsdGlDbGVhckZpbGwsICNlYmVkZWYpO1xuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgIH1cbjwvc3R5bGU+XG5cbnsjZWFjaCB2YWx1ZSBhcyBpdGVtLCBpfVxuICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJtdWx0aVNlbGVjdEl0ZW0ge2FjdGl2ZVZhbHVlID09PSBpID8gJ2FjdGl2ZScgOiAnJ30ge2lzRGlzYWJsZWRcbiAgICAgICAgICAgID8gJ2Rpc2FibGVkJ1xuICAgICAgICAgICAgOiAnJ31cIlxuICAgICAgICBvbjpjbGljaz17KGV2ZW50KSA9PlxuICAgICAgICAgICAgbXVsdGlGdWxsSXRlbUNsZWFyYWJsZSA/IGhhbmRsZUNsZWFyKGksIGV2ZW50KSA6IHt9fT5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm11bHRpU2VsZWN0SXRlbV9sYWJlbFwiPlxuICAgICAgICAgICAge0BodG1sIGdldFNlbGVjdGlvbkxhYmVsKGl0ZW0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgeyNpZiAhaXNEaXNhYmxlZCAmJiAhbXVsdGlGdWxsSXRlbUNsZWFyYWJsZX1cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzcz1cIm11bHRpU2VsZWN0SXRlbV9jbGVhclwiXG4gICAgICAgICAgICAgICAgb246Y2xpY2s9eyhldmVudCkgPT4gaGFuZGxlQ2xlYXIoaSwgZXZlbnQpfT5cbiAgICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjEwMCVcIlxuICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PVwiLTIgLTIgNTAgNTBcIlxuICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGU9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgIHJvbGU9XCJwcmVzZW50YXRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGQ9XCJNMzQuOTIzLDM3LjI1MUwyNCwyNi4zMjhMMTMuMDc3LDM3LjI1MUw5LjQzNiwzMy42MWwxMC45MjMtMTAuOTIzTDkuNDM2LDExLjc2NWwzLjY0MS0zLjY0MUwyNCwxOS4wNDdMMzQuOTIzLDguMTI0IGwzLjY0MSwzLjY0MUwyNy42NDEsMjIuNjg4TDM4LjU2NCwzMy42MUwzNC45MjMsMzcuMjUxelwiIC8+XG4gICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgey9pZn1cbiAgICA8L2Rpdj5cbnsvZWFjaH1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCwgdGljayB9IGZyb20gJ3N2ZWx0ZSc7XG5cbiAgICBleHBvcnQgbGV0IGl0ZW1zID0gdW5kZWZpbmVkO1xuICAgIGV4cG9ydCBsZXQgaGVpZ2h0ID0gJzEwMCUnO1xuICAgIGV4cG9ydCBsZXQgaXRlbUhlaWdodCA9IDQwO1xuICAgIGV4cG9ydCBsZXQgaG92ZXJJdGVtSW5kZXggPSAwO1xuICAgIGV4cG9ydCBsZXQgc3RhcnQgPSAwO1xuICAgIGV4cG9ydCBsZXQgZW5kID0gMDtcblxuICAgIGxldCBoZWlnaHRfbWFwID0gW107XG4gICAgbGV0IHJvd3M7XG4gICAgbGV0IHZpZXdwb3J0O1xuICAgIGxldCBjb250ZW50cztcbiAgICBsZXQgdmlld3BvcnRfaGVpZ2h0ID0gMDtcbiAgICBsZXQgdmlzaWJsZTtcbiAgICBsZXQgbW91bnRlZDtcblxuICAgIGxldCB0b3AgPSAwO1xuICAgIGxldCBib3R0b20gPSAwO1xuICAgIGxldCBhdmVyYWdlX2hlaWdodDtcblxuICAgICQ6IHZpc2libGUgPSBpdGVtcy5zbGljZShzdGFydCwgZW5kKS5tYXAoKGRhdGEsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgaW5kZXg6IGkgKyBzdGFydCwgZGF0YSB9O1xuICAgIH0pO1xuXG4gICAgJDogaWYgKG1vdW50ZWQpIHJlZnJlc2goaXRlbXMsIHZpZXdwb3J0X2hlaWdodCwgaXRlbUhlaWdodCk7XG5cbiAgICBhc3luYyBmdW5jdGlvbiByZWZyZXNoKGl0ZW1zLCB2aWV3cG9ydF9oZWlnaHQsIGl0ZW1IZWlnaHQpIHtcbiAgICAgICAgY29uc3QgeyBzY3JvbGxUb3AgfSA9IHZpZXdwb3J0O1xuXG4gICAgICAgIGF3YWl0IHRpY2soKTtcblxuICAgICAgICBsZXQgY29udGVudF9oZWlnaHQgPSB0b3AgLSBzY3JvbGxUb3A7XG4gICAgICAgIGxldCBpID0gc3RhcnQ7XG5cbiAgICAgICAgd2hpbGUgKGNvbnRlbnRfaGVpZ2h0IDwgdmlld3BvcnRfaGVpZ2h0ICYmIGkgPCBpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCByb3cgPSByb3dzW2kgLSBzdGFydF07XG5cbiAgICAgICAgICAgIGlmICghcm93KSB7XG4gICAgICAgICAgICAgICAgZW5kID0gaSArIDE7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGljaygpO1xuICAgICAgICAgICAgICAgIHJvdyA9IHJvd3NbaSAtIHN0YXJ0XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgcm93X2hlaWdodCA9IChoZWlnaHRfbWFwW2ldID0gaXRlbUhlaWdodCB8fCByb3cub2Zmc2V0SGVpZ2h0KTtcbiAgICAgICAgICAgIGNvbnRlbnRfaGVpZ2h0ICs9IHJvd19oZWlnaHQ7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBlbmQgPSBpO1xuXG4gICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IGl0ZW1zLmxlbmd0aCAtIGVuZDtcbiAgICAgICAgYXZlcmFnZV9oZWlnaHQgPSAodG9wICsgY29udGVudF9oZWlnaHQpIC8gZW5kO1xuXG4gICAgICAgIGJvdHRvbSA9IHJlbWFpbmluZyAqIGF2ZXJhZ2VfaGVpZ2h0O1xuICAgICAgICBoZWlnaHRfbWFwLmxlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcblxuICAgICAgICBpZiAodmlld3BvcnQpIHZpZXdwb3J0LnNjcm9sbFRvcCA9IDA7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlX3Njcm9sbCgpIHtcbiAgICAgICAgY29uc3QgeyBzY3JvbGxUb3AgfSA9IHZpZXdwb3J0O1xuXG4gICAgICAgIGNvbnN0IG9sZF9zdGFydCA9IHN0YXJ0O1xuXG4gICAgICAgIGZvciAobGV0IHYgPSAwOyB2IDwgcm93cy5sZW5ndGg7IHYgKz0gMSkge1xuICAgICAgICAgICAgaGVpZ2h0X21hcFtzdGFydCArIHZdID0gaXRlbUhlaWdodCB8fCByb3dzW3ZdLm9mZnNldEhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IHkgPSAwO1xuXG4gICAgICAgIHdoaWxlIChpIDwgaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCByb3dfaGVpZ2h0ID0gaGVpZ2h0X21hcFtpXSB8fCBhdmVyYWdlX2hlaWdodDtcbiAgICAgICAgICAgIGlmICh5ICsgcm93X2hlaWdodCA+IHNjcm9sbFRvcCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gaTtcbiAgICAgICAgICAgICAgICB0b3AgPSB5O1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHkgKz0gcm93X2hlaWdodDtcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChpIDwgaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB5ICs9IGhlaWdodF9tYXBbaV0gfHwgYXZlcmFnZV9oZWlnaHQ7XG4gICAgICAgICAgICBpICs9IDE7XG5cbiAgICAgICAgICAgIGlmICh5ID4gc2Nyb2xsVG9wICsgdmlld3BvcnRfaGVpZ2h0KSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZCA9IGk7XG5cbiAgICAgICAgY29uc3QgcmVtYWluaW5nID0gaXRlbXMubGVuZ3RoIC0gZW5kO1xuICAgICAgICBhdmVyYWdlX2hlaWdodCA9IHkgLyBlbmQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBpdGVtcy5sZW5ndGgpIGhlaWdodF9tYXBbaSsrXSA9IGF2ZXJhZ2VfaGVpZ2h0O1xuICAgICAgICBib3R0b20gPSByZW1haW5pbmcgKiBhdmVyYWdlX2hlaWdodDtcblxuICAgICAgICBpZiAoc3RhcnQgPCBvbGRfc3RhcnQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRpY2soKTtcblxuICAgICAgICAgICAgbGV0IGV4cGVjdGVkX2hlaWdodCA9IDA7XG4gICAgICAgICAgICBsZXQgYWN0dWFsX2hlaWdodCA9IDA7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IG9sZF9zdGFydDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJvd3NbaSAtIHN0YXJ0XSkge1xuICAgICAgICAgICAgICAgICAgICBleHBlY3RlZF9oZWlnaHQgKz0gaGVpZ2h0X21hcFtpXTtcbiAgICAgICAgICAgICAgICAgICAgYWN0dWFsX2hlaWdodCArPSBpdGVtSGVpZ2h0IHx8IHJvd3NbaSAtIHN0YXJ0XS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkID0gYWN0dWFsX2hlaWdodCAtIGV4cGVjdGVkX2hlaWdodDtcbiAgICAgICAgICAgIHZpZXdwb3J0LnNjcm9sbFRvKDAsIHNjcm9sbFRvcCArIGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIHJvd3MgPSBjb250ZW50cy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3ZlbHRlLXZpcnR1YWwtbGlzdC1yb3cnKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgfSk7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAgIHN2ZWx0ZS12aXJ0dWFsLWxpc3Qtdmlld3BvcnQge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuXG4gICAgc3ZlbHRlLXZpcnR1YWwtbGlzdC1jb250ZW50cyxcbiAgICBzdmVsdGUtdmlydHVhbC1saXN0LXJvdyB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cblxuICAgIHN2ZWx0ZS12aXJ0dWFsLWxpc3Qtcm93IHtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlLXZpcnR1YWwtbGlzdC12aWV3cG9ydFxuICAgIGJpbmQ6dGhpcz17dmlld3BvcnR9XG4gICAgYmluZDpvZmZzZXRIZWlnaHQ9e3ZpZXdwb3J0X2hlaWdodH1cbiAgICBvbjpzY3JvbGw9e2hhbmRsZV9zY3JvbGx9XG4gICAgc3R5bGU9XCJoZWlnaHQ6IHtoZWlnaHR9O1wiPlxuICAgIDxzdmVsdGUtdmlydHVhbC1saXN0LWNvbnRlbnRzXG4gICAgICAgIGJpbmQ6dGhpcz17Y29udGVudHN9XG4gICAgICAgIHN0eWxlPVwicGFkZGluZy10b3A6IHt0b3B9cHg7IHBhZGRpbmctYm90dG9tOiB7Ym90dG9tfXB4O1wiPlxuICAgICAgICB7I2VhY2ggdmlzaWJsZSBhcyByb3cgKHJvdy5pbmRleCl9XG4gICAgICAgICAgICA8c3ZlbHRlLXZpcnR1YWwtbGlzdC1yb3c+XG4gICAgICAgICAgICAgICAgPHNsb3QgaXRlbT17cm93LmRhdGF9IGk9e3Jvdy5pbmRleH0ge2hvdmVySXRlbUluZGV4fT5NaXNzaW5nIHRlbXBsYXRlPC9zbG90PlxuICAgICAgICAgICAgPC9zdmVsdGUtdmlydHVhbC1saXN0LXJvdz5cbiAgICAgICAgey9lYWNofVxuICAgIDwvc3ZlbHRlLXZpcnR1YWwtbGlzdC1jb250ZW50cz5cbjwvc3ZlbHRlLXZpcnR1YWwtbGlzdC12aWV3cG9ydD5cbiIsIjxzdmdcbiAgICB3aWR0aD1cIjEwMCVcIlxuICAgIGhlaWdodD1cIjEwMCVcIlxuICAgIHZpZXdCb3g9XCItMiAtMiA1MCA1MFwiXG4gICAgZm9jdXNhYmxlPVwiZmFsc2VcIlxuICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4+XG4gICAgPHBhdGhcbiAgICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgIGQ9XCJNMzQuOTIzLDM3LjI1MUwyNCwyNi4zMjhMMTMuMDc3LDM3LjI1MUw5LjQzNiwzMy42MWwxMC45MjMtMTAuOTIzTDkuNDM2LDExLjc2NWwzLjY0MS0zLjY0MUwyNCwxOS4wNDdMMzQuOTIzLDguMTI0XG4gICAgbDMuNjQxLDMuNjQxTDI3LjY0MSwyMi42ODhMMzguNTY0LDMzLjYxTDM0LjkyMywzNy4yNTF6XCJcbiAgICAvPlxuPC9zdmc+XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICBsZXQgdGltZW91dDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBleGVjdXRlZEZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgY29udGV4dCA9IHRoaXM7XG4gICAgICAgIGxldCBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIGxldCBsYXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFpbW1lZGlhdGUpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcblxuICAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9O1xufVxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBiZWZvcmVVcGRhdGUsIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG5cbiAgICBpbXBvcnQgX0xpc3QgZnJvbSAnLi9MaXN0LnN2ZWx0ZSc7XG4gICAgaW1wb3J0IF9JdGVtIGZyb20gJy4vSXRlbS5zdmVsdGUnO1xuICAgIGltcG9ydCBfU2VsZWN0aW9uIGZyb20gJy4vU2VsZWN0aW9uLnN2ZWx0ZSc7XG4gICAgaW1wb3J0IF9NdWx0aVNlbGVjdGlvbiBmcm9tICcuL011bHRpU2VsZWN0aW9uLnN2ZWx0ZSc7XG4gICAgaW1wb3J0IF9WaXJ0dWFsTGlzdCBmcm9tICcuL1ZpcnR1YWxMaXN0LnN2ZWx0ZSc7XG4gICAgaW1wb3J0IF9DbGVhckljb24gZnJvbSAnLi9DbGVhckljb24uc3ZlbHRlJztcbiAgICBpbXBvcnQgZGVib3VuY2UgZnJvbSAnLi91dGlscy9kZWJvdW5jZSc7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBpZCA9IG51bGw7XG4gICAgZXhwb3J0IGxldCBjb250YWluZXIgPSB1bmRlZmluZWQ7XG4gICAgZXhwb3J0IGxldCBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICBleHBvcnQgbGV0IGlzTXVsdGkgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IG11bHRpRnVsbEl0ZW1DbGVhcmFibGUgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGlzRGlzYWJsZWQgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGlzQ3JlYXRhYmxlID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBpc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IHZhbHVlID0gbnVsbDtcbiAgICBleHBvcnQgbGV0IGZpbHRlclRleHQgPSAnJztcbiAgICBleHBvcnQgbGV0IHBsYWNlaG9sZGVyID0gJ1NlbGVjdC4uLic7XG4gICAgZXhwb3J0IGxldCBwbGFjZWhvbGRlckFsd2F5c1Nob3cgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGl0ZW1zID0gbnVsbDtcbiAgICBleHBvcnQgbGV0IGl0ZW1GaWx0ZXIgPSAobGFiZWwsIGZpbHRlclRleHQsIG9wdGlvbikgPT5cbiAgICAgICAgYCR7bGFiZWx9YC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlclRleHQudG9Mb3dlckNhc2UoKSk7XG4gICAgZXhwb3J0IGxldCBncm91cEJ5ID0gdW5kZWZpbmVkO1xuICAgIGV4cG9ydCBsZXQgZ3JvdXBGaWx0ZXIgPSAoZ3JvdXBzKSA9PiBncm91cHM7XG4gICAgZXhwb3J0IGxldCBpc0dyb3VwSGVhZGVyU2VsZWN0YWJsZSA9IGZhbHNlO1xuICAgIGV4cG9ydCBsZXQgZ2V0R3JvdXBIZWFkZXJMYWJlbCA9IChvcHRpb24pID0+IHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbltsYWJlbElkZW50aWZpZXJdIHx8IG9wdGlvbi5pZDtcbiAgICB9O1xuICAgIGV4cG9ydCBsZXQgbGFiZWxJZGVudGlmaWVyID0gJ2xhYmVsJztcbiAgICBleHBvcnQgbGV0IGdldE9wdGlvbkxhYmVsID0gKG9wdGlvbiwgZmlsdGVyVGV4dCkgPT4ge1xuICAgICAgICByZXR1cm4gb3B0aW9uLmlzQ3JlYXRvclxuICAgICAgICAgICAgPyBgQ3JlYXRlIFxcXCIke2ZpbHRlclRleHR9XFxcImBcbiAgICAgICAgICAgIDogb3B0aW9uW2xhYmVsSWRlbnRpZmllcl07XG4gICAgfTtcbiAgICBleHBvcnQgbGV0IG9wdGlvbklkZW50aWZpZXIgPSAndmFsdWUnO1xuICAgIGV4cG9ydCBsZXQgbG9hZE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgZXhwb3J0IGxldCBoYXNFcnJvciA9IGZhbHNlO1xuICAgIGV4cG9ydCBsZXQgY29udGFpbmVyU3R5bGVzID0gJyc7XG4gICAgZXhwb3J0IGxldCBnZXRTZWxlY3Rpb25MYWJlbCA9IChvcHRpb24pID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbikgcmV0dXJuIG9wdGlvbltsYWJlbElkZW50aWZpZXJdO1xuICAgICAgICBlbHNlIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICBleHBvcnQgbGV0IGNyZWF0ZUdyb3VwSGVhZGVySXRlbSA9IChncm91cFZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogZ3JvdXBWYWx1ZSxcbiAgICAgICAgICAgIGxhYmVsOiBncm91cFZhbHVlLFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBleHBvcnQgbGV0IGNyZWF0ZUl0ZW0gPSAoZmlsdGVyVGV4dCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGZpbHRlclRleHQsXG4gICAgICAgICAgICBsYWJlbDogZmlsdGVyVGV4dCxcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgZXhwb3J0IGNvbnN0IGdldEZpbHRlcmVkSXRlbXMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZEl0ZW1zO1xuICAgIH07XG5cbiAgICBleHBvcnQgbGV0IGlzU2VhcmNoYWJsZSA9IHRydWU7XG4gICAgZXhwb3J0IGxldCBpbnB1dFN0eWxlcyA9ICcnO1xuICAgIGV4cG9ydCBsZXQgaXNDbGVhcmFibGUgPSB0cnVlO1xuICAgIGV4cG9ydCBsZXQgaXNXYWl0aW5nID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBsaXN0UGxhY2VtZW50ID0gJ2F1dG8nO1xuICAgIGV4cG9ydCBsZXQgbGlzdE9wZW4gPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGlzVmlydHVhbExpc3QgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGxvYWRPcHRpb25zSW50ZXJ2YWwgPSAzMDA7XG4gICAgZXhwb3J0IGxldCBub09wdGlvbnNNZXNzYWdlID0gJ05vIG9wdGlvbnMnO1xuICAgIGV4cG9ydCBsZXQgaGlkZUVtcHR5U3RhdGUgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGlucHV0QXR0cmlidXRlcyA9IHt9O1xuICAgIGV4cG9ydCBsZXQgbGlzdEF1dG9XaWR0aCA9IHRydWU7XG4gICAgZXhwb3J0IGxldCBpdGVtSGVpZ2h0ID0gNDA7XG4gICAgZXhwb3J0IGxldCBJY29uID0gdW5kZWZpbmVkO1xuICAgIGV4cG9ydCBsZXQgaWNvblByb3BzID0ge307XG4gICAgZXhwb3J0IGxldCBzaG93Q2hldnJvbiA9IGZhbHNlO1xuICAgIGV4cG9ydCBsZXQgc2hvd0luZGljYXRvciA9IGZhbHNlO1xuICAgIGV4cG9ydCBsZXQgY29udGFpbmVyQ2xhc3NlcyA9ICcnO1xuICAgIGV4cG9ydCBsZXQgaW5kaWNhdG9yU3ZnID0gdW5kZWZpbmVkO1xuICAgIGV4cG9ydCBsZXQgbGlzdE9mZnNldCA9IDU7XG5cbiAgICBleHBvcnQgbGV0IENsZWFySWNvbiA9IF9DbGVhckljb247XG4gICAgZXhwb3J0IGxldCBJdGVtID0gX0l0ZW07XG4gICAgZXhwb3J0IGxldCBMaXN0ID0gX0xpc3Q7XG4gICAgZXhwb3J0IGxldCBTZWxlY3Rpb24gPSBfU2VsZWN0aW9uO1xuICAgIGV4cG9ydCBsZXQgTXVsdGlTZWxlY3Rpb24gPSBfTXVsdGlTZWxlY3Rpb247XG4gICAgZXhwb3J0IGxldCBWaXJ0dWFsTGlzdCA9IF9WaXJ0dWFsTGlzdDtcblxuICAgIGZ1bmN0aW9uIGZpbHRlck1ldGhvZChhcmdzKSB7XG4gICAgICAgIGlmIChhcmdzLmxvYWRPcHRpb25zICYmIGFyZ3MuZmlsdGVyVGV4dC5sZW5ndGggPiAwKSByZXR1cm47XG4gICAgICAgIGlmICghYXJncy5pdGVtcykgcmV0dXJuIFtdO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGFyZ3MuaXRlbXMgJiZcbiAgICAgICAgICAgIGFyZ3MuaXRlbXMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgdHlwZW9mIGFyZ3MuaXRlbXNbMF0gIT09ICdvYmplY3QnXG4gICAgICAgICkge1xuICAgICAgICAgICAgYXJncy5pdGVtcyA9IGNvbnZlcnRTdHJpbmdJdGVtc1RvT2JqZWN0cyhhcmdzLml0ZW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaWx0ZXJSZXN1bHRzID0gYXJncy5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGxldCBtYXRjaGVzRmlsdGVyID0gaXRlbUZpbHRlcihcbiAgICAgICAgICAgICAgICBnZXRPcHRpb25MYWJlbChpdGVtLCBhcmdzLmZpbHRlclRleHQpLFxuICAgICAgICAgICAgICAgIGFyZ3MuZmlsdGVyVGV4dCxcbiAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbWF0Y2hlc0ZpbHRlciAmJlxuICAgICAgICAgICAgICAgIGFyZ3MuaXNNdWx0aSAmJlxuICAgICAgICAgICAgICAgIGFyZ3MudmFsdWUgJiZcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGFyZ3MudmFsdWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzRmlsdGVyID0gIWFyZ3MudmFsdWUuc29tZSgoeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeFthcmdzLm9wdGlvbklkZW50aWZpZXJdID09PSBpdGVtW2FyZ3Mub3B0aW9uSWRlbnRpZmllcl1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXNGaWx0ZXI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhcmdzLmdyb3VwQnkpIHtcbiAgICAgICAgICAgIGZpbHRlclJlc3VsdHMgPSBmaWx0ZXJHcm91cGVkSXRlbXMoZmlsdGVyUmVzdWx0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJncy5pc0NyZWF0YWJsZSkge1xuICAgICAgICAgICAgZmlsdGVyUmVzdWx0cyA9IGFkZENyZWF0YWJsZUl0ZW0oZmlsdGVyUmVzdWx0cywgYXJncy5maWx0ZXJUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXJSZXN1bHRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZENyZWF0YWJsZUl0ZW0oX2l0ZW1zLCBfZmlsdGVyVGV4dCkge1xuICAgICAgICBpZiAoX2ZpbHRlclRleHQubGVuZ3RoID09PSAwKSByZXR1cm4gX2l0ZW1zO1xuICAgICAgICBjb25zdCBpdGVtVG9DcmVhdGUgPSBjcmVhdGVJdGVtKF9maWx0ZXJUZXh0KTtcbiAgICAgICAgaWYgKF9pdGVtc1swXSAmJiBfZmlsdGVyVGV4dCA9PT0gX2l0ZW1zWzBdW2xhYmVsSWRlbnRpZmllcl0pXG4gICAgICAgICAgICByZXR1cm4gX2l0ZW1zO1xuICAgICAgICBpdGVtVG9DcmVhdGUuaXNDcmVhdG9yID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIFsuLi5faXRlbXMsIGl0ZW1Ub0NyZWF0ZV07XG4gICAgfVxuXG4gICAgJDogZmlsdGVyZWRJdGVtcyA9IGZpbHRlck1ldGhvZCh7XG4gICAgICAgIGxvYWRPcHRpb25zLFxuICAgICAgICBmaWx0ZXJUZXh0LFxuICAgICAgICBpdGVtcyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGlzTXVsdGksXG4gICAgICAgIG9wdGlvbklkZW50aWZpZXIsXG4gICAgICAgIGdyb3VwQnksXG4gICAgICAgIGlzQ3JlYXRhYmxlLFxuICAgIH0pO1xuXG4gICAgZXhwb3J0IGxldCBzZWxlY3RlZFZhbHVlID0gbnVsbDtcbiAgICAkOiB7XG4gICAgICAgIGlmIChzZWxlY3RlZFZhbHVlKVxuICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICdzZWxlY3RlZFZhbHVlIGlzIG5vIGxvbmdlciB1c2VkLiBQbGVhc2UgdXNlIHZhbHVlIGluc3RlYWQuJ1xuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgYWN0aXZlVmFsdWU7XG4gICAgbGV0IHByZXZfdmFsdWU7XG4gICAgbGV0IHByZXZfZmlsdGVyVGV4dDtcbiAgICBsZXQgcHJldl9pc0ZvY3VzZWQ7XG4gICAgbGV0IHByZXZfaXNNdWx0aTtcbiAgICBsZXQgaG92ZXJJdGVtSW5kZXg7XG5cbiAgICBjb25zdCBnZXRJdGVtcyA9IGRlYm91bmNlKGFzeW5jICgpID0+IHtcbiAgICAgICAgaXNXYWl0aW5nID0gdHJ1ZTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGxvYWRPcHRpb25zKGZpbHRlclRleHQpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybignc3ZlbHRlLXNlbGVjdCBsb2FkT3B0aW9ucyBlcnJvciA6Pj4gJywgZXJyKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKCdlcnJvcicsIHsgdHlwZTogJ2xvYWRPcHRpb25zJywgZGV0YWlsczogZXJyIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmVzICYmICFyZXMuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcyAmJiByZXMubGVuZ3RoID4gMCAmJiB0eXBlb2YgcmVzWzBdICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICByZXMgPSBjb252ZXJ0U3RyaW5nSXRlbXNUb09iamVjdHMocmVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmlsdGVyZWRJdGVtcyA9IFsuLi5yZXNdO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdsb2FkZWQnLCB7IGl0ZW1zOiBmaWx0ZXJlZEl0ZW1zIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZEl0ZW1zID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0NyZWF0YWJsZSkge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkSXRlbXMgPSBhZGRDcmVhdGFibGVJdGVtKGZpbHRlcmVkSXRlbXMsIGZpbHRlclRleHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpc1dhaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlzRm9jdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBsaXN0T3BlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9LCBsb2FkT3B0aW9uc0ludGVydmFsKTtcblxuICAgICQ6IHVwZGF0ZVZhbHVlRGlzcGxheShpdGVtcyk7XG5cbiAgICBmdW5jdGlvbiBzZXRWYWx1ZSgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0ge1xuICAgICAgICAgICAgICAgIFtvcHRpb25JZGVudGlmaWVyXTogdmFsdWUsXG4gICAgICAgICAgICAgICAgbGFiZWw6IHZhbHVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc011bHRpICYmIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUubWFwKChpdGVtKSA9PlxuICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyA/IHsgdmFsdWU6IGl0ZW0sIGxhYmVsOiBpdGVtIH0gOiBpdGVtXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IF9pbnB1dEF0dHJpYnV0ZXM7XG4gICAgZnVuY3Rpb24gYXNzaWduSW5wdXRBdHRyaWJ1dGVzKCkge1xuICAgICAgICBfaW5wdXRBdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhdXRvY2FwaXRhbGl6ZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogJ29mZicsXG4gICAgICAgICAgICAgICAgYXV0b2NvcnJlY3Q6ICdvZmYnLFxuICAgICAgICAgICAgICAgIHNwZWxsY2hlY2s6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRhYmluZGV4OiAwLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAnYXJpYS1hdXRvY29tcGxldGUnOiAnbGlzdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXRBdHRyaWJ1dGVzXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICBfaW5wdXRBdHRyaWJ1dGVzLmlkID0gaWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzU2VhcmNoYWJsZSkge1xuICAgICAgICAgICAgX2lucHV0QXR0cmlidXRlcy5yZWFkb25seSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb252ZXJ0U3RyaW5nSXRlbXNUb09iamVjdHMoX2l0ZW1zKSB7XG4gICAgICAgIHJldHVybiBfaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbSxcbiAgICAgICAgICAgICAgICBsYWJlbDogYCR7aXRlbX1gLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyR3JvdXBlZEl0ZW1zKF9pdGVtcykge1xuICAgICAgICBjb25zdCBncm91cFZhbHVlcyA9IFtdO1xuICAgICAgICBjb25zdCBncm91cHMgPSB7fTtcblxuICAgICAgICBfaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXBWYWx1ZSA9IGdyb3VwQnkoaXRlbSk7XG5cbiAgICAgICAgICAgIGlmICghZ3JvdXBWYWx1ZXMuaW5jbHVkZXMoZ3JvdXBWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBncm91cFZhbHVlcy5wdXNoKGdyb3VwVmFsdWUpO1xuICAgICAgICAgICAgICAgIGdyb3Vwc1tncm91cFZhbHVlXSA9IFtdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGdyb3VwVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBzW2dyb3VwVmFsdWVdLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNyZWF0ZUdyb3VwSGVhZGVySXRlbShncm91cFZhbHVlLCBpdGVtKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBncm91cFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzR3JvdXBIZWFkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RhYmxlOiBpc0dyb3VwSGVhZGVyU2VsZWN0YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBncm91cHNbZ3JvdXBWYWx1ZV0ucHVzaChcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHsgaXNHcm91cEl0ZW06ICEhZ3JvdXBWYWx1ZSB9LCBpdGVtKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc29ydGVkR3JvdXBlZEl0ZW1zID0gW107XG5cbiAgICAgICAgZ3JvdXBGaWx0ZXIoZ3JvdXBWYWx1ZXMpLmZvckVhY2goKGdyb3VwVmFsdWUpID0+IHtcbiAgICAgICAgICAgIHNvcnRlZEdyb3VwZWRJdGVtcy5wdXNoKC4uLmdyb3Vwc1tncm91cFZhbHVlXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzb3J0ZWRHcm91cGVkSXRlbXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzcGF0Y2hTZWxlY3RlZEl0ZW0oKSB7XG4gICAgICAgIGlmIChpc011bHRpKSB7XG4gICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkodmFsdWUpICE9PSBKU09OLnN0cmluZ2lmeShwcmV2X3ZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja1ZhbHVlRm9yRHVwbGljYXRlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdzZWxlY3QnLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXByZXZfdmFsdWUgfHxcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlW29wdGlvbklkZW50aWZpZXJdKSAhPT1cbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcmV2X3ZhbHVlW29wdGlvbklkZW50aWZpZXJdKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKCdzZWxlY3QnLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cEZvY3VzKCkge1xuICAgICAgICBpZiAoaXNGb2N1c2VkIHx8IGxpc3RPcGVuKSB7XG4gICAgICAgICAgICBoYW5kbGVGb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlucHV0KSBpbnB1dC5ibHVyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cE11bHRpKCkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gWy4uLnZhbHVlXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dXBTaW5nbGUoKSB7XG4gICAgICAgIGlmICh2YWx1ZSkgdmFsdWUgPSBudWxsO1xuICAgIH1cblxuICAgICQ6IHtcbiAgICAgICAgaWYgKHZhbHVlKSBzZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgICQ6IHtcbiAgICAgICAgaWYgKGlucHV0QXR0cmlidXRlcyB8fCAhaXNTZWFyY2hhYmxlKSBhc3NpZ25JbnB1dEF0dHJpYnV0ZXMoKTtcbiAgICB9XG5cbiAgICAkOiB7XG4gICAgICAgIGlmIChpc011bHRpKSB7XG4gICAgICAgICAgICBzZXR1cE11bHRpKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldl9pc011bHRpICYmICFpc011bHRpKSB7XG4gICAgICAgICAgICBzZXR1cFNpbmdsZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJDoge1xuICAgICAgICBpZiAoaXNNdWx0aSAmJiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjaGVja1ZhbHVlRm9yRHVwbGljYXRlcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJDoge1xuICAgICAgICBpZiAodmFsdWUpIGRpc3BhdGNoU2VsZWN0ZWRJdGVtKCk7XG4gICAgfVxuXG4gICAgJDoge1xuICAgICAgICBpZiAoIXZhbHVlICYmIGlzTXVsdGkgJiYgcHJldl92YWx1ZSkge1xuICAgICAgICAgICAgZGlzcGF0Y2goJ3NlbGVjdCcsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICQ6IHtcbiAgICAgICAgaWYgKGlzRm9jdXNlZCAhPT0gcHJldl9pc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgIHNldHVwRm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICQ6IHtcbiAgICAgICAgaWYgKGZpbHRlclRleHQgIT09IHByZXZfZmlsdGVyVGV4dCkge1xuICAgICAgICAgICAgc2V0dXBGaWx0ZXJUZXh0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cEZpbHRlclRleHQoKSB7XG4gICAgICAgIGlmIChmaWx0ZXJUZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIGlzRm9jdXNlZCA9IHRydWU7XG4gICAgICAgIGxpc3RPcGVuID0gdHJ1ZTtcblxuICAgICAgICBpZiAobG9hZE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGdldEl0ZW1zKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0T3BlbiA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChpc011bHRpKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkOiBzaG93U2VsZWN0ZWRJdGVtID0gdmFsdWUgJiYgZmlsdGVyVGV4dC5sZW5ndGggPT09IDA7XG4gICAgJDogc2hvd0NsZWFySWNvbiA9XG4gICAgICAgIHNob3dTZWxlY3RlZEl0ZW0gJiYgaXNDbGVhcmFibGUgJiYgIWlzRGlzYWJsZWQgJiYgIWlzV2FpdGluZztcbiAgICAkOiBwbGFjZWhvbGRlclRleHQgPVxuICAgICAgICBwbGFjZWhvbGRlckFsd2F5c1Nob3cgJiYgaXNNdWx0aVxuICAgICAgICAgICAgPyBwbGFjZWhvbGRlclxuICAgICAgICAgICAgOiB2YWx1ZVxuICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgOiBwbGFjZWhvbGRlcjtcbiAgICAkOiBzaG93TXVsdGlTZWxlY3QgPSBpc011bHRpICYmIHZhbHVlICYmIHZhbHVlLmxlbmd0aCA+IDA7XG5cbiAgICBiZWZvcmVVcGRhdGUoYXN5bmMgKCkgPT4ge1xuICAgICAgICBwcmV2X3ZhbHVlID0gdmFsdWU7XG4gICAgICAgIHByZXZfZmlsdGVyVGV4dCA9IGZpbHRlclRleHQ7XG4gICAgICAgIHByZXZfaXNGb2N1c2VkID0gaXNGb2N1c2VkO1xuICAgICAgICBwcmV2X2lzTXVsdGkgPSBpc011bHRpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gY2hlY2tWYWx1ZUZvckR1cGxpY2F0ZXMoKSB7XG4gICAgICAgIGxldCBub0R1cGxpY2F0ZXMgPSB0cnVlO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkcyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgdW5pcXVlVmFsdWVzID0gW107XG5cbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goKHZhbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaWRzLmluY2x1ZGVzKHZhbFtvcHRpb25JZGVudGlmaWVyXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWRzLnB1c2godmFsW29wdGlvbklkZW50aWZpZXJdKTtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlVmFsdWVzLnB1c2godmFsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub0R1cGxpY2F0ZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFub0R1cGxpY2F0ZXMpIHZhbHVlID0gdW5pcXVlVmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub0R1cGxpY2F0ZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluZEl0ZW0oc2VsZWN0aW9uKSB7XG4gICAgICAgIGxldCBtYXRjaFRvID0gc2VsZWN0aW9uXG4gICAgICAgICAgICA/IHNlbGVjdGlvbltvcHRpb25JZGVudGlmaWVyXVxuICAgICAgICAgICAgOiB2YWx1ZVtvcHRpb25JZGVudGlmaWVyXTtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW1bb3B0aW9uSWRlbnRpZmllcl0gPT09IG1hdGNoVG8pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVZhbHVlRGlzcGxheShpdGVtcykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhaXRlbXMgfHxcbiAgICAgICAgICAgIGl0ZW1zLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgaXRlbXMuc29tZSgoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnKVxuICAgICAgICApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF2YWx1ZSB8fFxuICAgICAgICAgICAgKGlzTXVsdGlcbiAgICAgICAgICAgICAgICA/IHZhbHVlLnNvbWUoXG4gICAgICAgICAgICAgICAgICAgICAgKHNlbGVjdGlvbikgPT4gIXNlbGVjdGlvbiB8fCAhc2VsZWN0aW9uW29wdGlvbklkZW50aWZpZXJdXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiAhdmFsdWVbb3B0aW9uSWRlbnRpZmllcl0pXG4gICAgICAgIClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUubWFwKChzZWxlY3Rpb24pID0+IGZpbmRJdGVtKHNlbGVjdGlvbikgfHwgc2VsZWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gZmluZEl0ZW0oKSB8fCB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZU11bHRpSXRlbUNsZWFyKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgZGV0YWlsIH0gPSBldmVudDtcbiAgICAgICAgY29uc3QgaXRlbVRvUmVtb3ZlID0gdmFsdWVbZGV0YWlsID8gZGV0YWlsLmkgOiB2YWx1ZS5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGl0ZW1Ub1JlbW92ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzcGF0Y2goJ2NsZWFyJywgaXRlbVRvUmVtb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICAgICAgaWYgKCFpc0ZvY3VzZWQpIHJldHVybjtcblxuICAgICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBsaXN0T3BlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgYWN0aXZlVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgbGlzdE9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnVGFiJzpcbiAgICAgICAgICAgICAgICBpZiAoIWxpc3RPcGVuKSBpc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0JhY2tzcGFjZSc6XG4gICAgICAgICAgICAgICAgaWYgKCFpc011bHRpIHx8IGZpbHRlclRleHQubGVuZ3RoID4gMCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChpc011bHRpICYmIHZhbHVlICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTXVsdGlJdGVtQ2xlYXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVWYWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhY3RpdmVWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlVmFsdWUgPT09IDAgfHwgYWN0aXZlVmFsdWUgPT09IHVuZGVmaW5lZCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmxlbmd0aCA+IGFjdGl2ZVZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhY3RpdmVWYWx1ZSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgICAgICAgIGlmICghaXNNdWx0aSB8fCBmaWx0ZXJUZXh0Lmxlbmd0aCA+IDApIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVWYWx1ZSA9IHZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5sZW5ndGggPiBhY3RpdmVWYWx1ZSAmJiBhY3RpdmVWYWx1ZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVWYWx1ZSAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgIWlzTXVsdGkgfHxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyVGV4dC5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlVmFsdWUgPT09IHZhbHVlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3RpdmVWYWx1ZSA8IHZhbHVlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlVmFsdWUgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVGb2N1cygpIHtcbiAgICAgICAgaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKGlucHV0KSBpbnB1dC5mb2N1cygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVdpbmRvd0V2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICghY29udGFpbmVyKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGV2ZW50VGFyZ2V0ID1cbiAgICAgICAgICAgIGV2ZW50LnBhdGggJiYgZXZlbnQucGF0aC5sZW5ndGggPiAwID8gZXZlbnQucGF0aFswXSA6IGV2ZW50LnRhcmdldDtcbiAgICAgICAgaWYgKGNvbnRhaW5lci5jb250YWlucyhldmVudFRhcmdldCkgfHwgY29udGFpbmVyLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaXNGb2N1c2VkID0gZmFsc2U7XG4gICAgICAgIGxpc3RPcGVuID0gZmFsc2U7XG4gICAgICAgIGFjdGl2ZVZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoaW5wdXQpIGlucHV0LmJsdXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDbGljaygpIHtcbiAgICAgICAgaWYgKGlzRGlzYWJsZWQpIHJldHVybjtcbiAgICAgICAgaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICAgICAgbGlzdE9wZW4gPSAhbGlzdE9wZW47XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUNsZWFyKCkge1xuICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGlzdE9wZW4gPSBmYWxzZTtcbiAgICAgICAgZGlzcGF0Y2goJ2NsZWFyJywgdmFsdWUpO1xuICAgICAgICBoYW5kbGVGb2N1cygpO1xuICAgIH1cblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBpZiAoaXNGb2N1c2VkICYmIGlucHV0KSBpbnB1dC5mb2N1cygpO1xuICAgIH0pO1xuXG4gICAgJDogbGlzdFByb3BzID0ge1xuICAgICAgICBJdGVtLFxuICAgICAgICBmaWx0ZXJUZXh0LFxuICAgICAgICBvcHRpb25JZGVudGlmaWVyLFxuICAgICAgICBub09wdGlvbnNNZXNzYWdlLFxuICAgICAgICBoaWRlRW1wdHlTdGF0ZSxcbiAgICAgICAgaXNWaXJ0dWFsTGlzdCxcbiAgICAgICAgVmlydHVhbExpc3QsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBpc011bHRpLFxuICAgICAgICBnZXRHcm91cEhlYWRlckxhYmVsLFxuICAgICAgICBpdGVtczogZmlsdGVyZWRJdGVtcyxcbiAgICAgICAgaXRlbUhlaWdodCxcbiAgICAgICAgZ2V0T3B0aW9uTGFiZWwsXG4gICAgICAgIGxpc3RQbGFjZW1lbnQsXG4gICAgICAgIHBhcmVudDogY29udGFpbmVyLFxuICAgICAgICBsaXN0QXV0b1dpZHRoLFxuICAgICAgICBsaXN0T2Zmc2V0LFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpdGVtU2VsZWN0ZWQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgeyBkZXRhaWwgfSA9IGV2ZW50O1xuXG4gICAgICAgIGlmIChkZXRhaWwpIHtcbiAgICAgICAgICAgIGZpbHRlclRleHQgPSAnJztcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCBkZXRhaWwpO1xuXG4gICAgICAgICAgICBpZiAoIWl0ZW0uaXNHcm91cEhlYWRlciB8fCBpdGVtLmlzU2VsZWN0YWJsZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc011bHRpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZS5jb25jYXQoW2l0ZW1dKSA6IFtpdGVtXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0ZW07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsaXN0T3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZW1DcmVhdGVkKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgZGV0YWlsIH0gPSBldmVudDtcbiAgICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgfHwgW107XG4gICAgICAgICAgICB2YWx1ZSA9IFsuLi52YWx1ZSwgY3JlYXRlSXRlbShkZXRhaWwpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gY3JlYXRlSXRlbShkZXRhaWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzcGF0Y2goJ2l0ZW1DcmVhdGVkJywgZGV0YWlsKTtcbiAgICAgICAgZmlsdGVyVGV4dCA9ICcnO1xuICAgICAgICBsaXN0T3BlbiA9IGZhbHNlO1xuICAgICAgICBhY3RpdmVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zZUxpc3QoKSB7XG4gICAgICAgIGZpbHRlclRleHQgPSAnJztcbiAgICAgICAgbGlzdE9wZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBleHBvcnQgbGV0IGFyaWFWYWx1ZXMgPSAodmFsdWVzKSA9PiB7XG4gICAgICAgIHJldHVybiBgT3B0aW9uICR7dmFsdWVzfSwgc2VsZWN0ZWQuYDtcbiAgICB9O1xuXG4gICAgZXhwb3J0IGxldCBhcmlhTGlzdE9wZW4gPSAobGFiZWwsIGNvdW50KSA9PiB7XG4gICAgICAgIHJldHVybiBgWW91IGFyZSBjdXJyZW50bHkgZm9jdXNlZCBvbiBvcHRpb24gJHtsYWJlbH0uIFRoZXJlIGFyZSAke2NvdW50fSByZXN1bHRzIGF2YWlsYWJsZS5gO1xuICAgIH07XG5cbiAgICBleHBvcnQgbGV0IGFyaWFGb2N1c2VkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gYFNlbGVjdCBpcyBmb2N1c2VkLCB0eXBlIHRvIHJlZmluZSBsaXN0LCBwcmVzcyBkb3duIHRvIG9wZW4gdGhlIG1lbnUuYDtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlQXJpYVNlbGVjdGlvbigpIHtcbiAgICAgICAgbGV0IHNlbGVjdGVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChpc011bHRpICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNlbGVjdGVkID0gdmFsdWUubWFwKCh2KSA9PiBnZXRTZWxlY3Rpb25MYWJlbCh2KSkuam9pbignLCAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdGVkID0gZ2V0U2VsZWN0aW9uTGFiZWwodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFyaWFWYWx1ZXMoc2VsZWN0ZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUFyaWFDb250ZW50KCkge1xuICAgICAgICBpZiAoIWlzRm9jdXNlZCB8fCAhZmlsdGVyZWRJdGVtcyB8fCBmaWx0ZXJlZEl0ZW1zLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiAnJztcblxuICAgICAgICBsZXQgX2l0ZW0gPSBmaWx0ZXJlZEl0ZW1zW2hvdmVySXRlbUluZGV4XTtcbiAgICAgICAgaWYgKGxpc3RPcGVuICYmIF9pdGVtKSB7XG4gICAgICAgICAgICBsZXQgbGFiZWwgPSBnZXRTZWxlY3Rpb25MYWJlbChfaXRlbSk7XG4gICAgICAgICAgICBsZXQgY291bnQgPSBmaWx0ZXJlZEl0ZW1zID8gZmlsdGVyZWRJdGVtcy5sZW5ndGggOiAwO1xuXG4gICAgICAgICAgICByZXR1cm4gYXJpYUxpc3RPcGVuKGxhYmVsLCBjb3VudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYXJpYUZvY3VzZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICQ6IGFyaWFTZWxlY3Rpb24gPSB2YWx1ZSA/IGhhbmRsZUFyaWFTZWxlY3Rpb24oaXNNdWx0aSkgOiAnJztcbiAgICAkOiBhcmlhQ29udGV4dCA9IGhhbmRsZUFyaWFDb250ZW50KFxuICAgICAgICBmaWx0ZXJlZEl0ZW1zLFxuICAgICAgICBob3Zlckl0ZW1JbmRleCxcbiAgICAgICAgaXNGb2N1c2VkLFxuICAgICAgICBsaXN0T3BlblxuICAgICk7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAgIC5zZWxlY3RDb250YWluZXIge1xuICAgICAgICAtLWludGVybmFsUGFkZGluZzogMCAxNnB4O1xuICAgICAgICBib3JkZXI6IHZhcigtLWJvcmRlciwgMXB4IHNvbGlkICNkOGRiZGYpO1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXJSYWRpdXMsIDNweCk7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIGhlaWdodDogdmFyKC0taGVpZ2h0LCA0MnB4KTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nLCB2YXIoLS1pbnRlcm5hbFBhZGRpbmcpKTtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZCwgI2ZmZik7XG4gICAgICAgIG1hcmdpbjogdmFyKC0tbWFyZ2luLCAwKTtcbiAgICB9XG5cbiAgICAuc2VsZWN0Q29udGFpbmVyIGlucHV0IHtcbiAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1pbnB1dENvbG9yLCAjM2Y0ZjVmKTtcbiAgICAgICAgaGVpZ2h0OiB2YXIoLS1oZWlnaHQsIDQycHgpO1xuICAgICAgICBsaW5lLWhlaWdodDogdmFyKC0taGVpZ2h0LCA0MnB4KTtcbiAgICAgICAgcGFkZGluZzogdmFyKC0taW5wdXRQYWRkaW5nLCB2YXIoLS1wYWRkaW5nLCB2YXIoLS1pbnRlcm5hbFBhZGRpbmcpKSk7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1pbnB1dEZvbnRTaXplLCAxNHB4KTtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IHZhcigtLWlucHV0TGV0dGVyU3BhY2luZywgLTAuMDhweCk7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgbGVmdDogdmFyKC0taW5wdXRMZWZ0LCAwKTtcbiAgICAgICAgbWFyZ2luOiB2YXIoLS1pbnB1dE1hcmdpbiwgMCk7XG4gICAgfVxuXG4gICAgLnNlbGVjdENvbnRhaW5lciBpbnB1dDo6cGxhY2Vob2xkZXIge1xuICAgICAgICBjb2xvcjogdmFyKC0tcGxhY2Vob2xkZXJDb2xvciwgIzc4ODQ4Zik7XG4gICAgICAgIG9wYWNpdHk6IHZhcigtLXBsYWNlaG9sZGVyT3BhY2l0eSwgMSk7XG4gICAgfVxuXG4gICAgLnNlbGVjdENvbnRhaW5lciBpbnB1dDpmb2N1cyB7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgfVxuXG4gICAgLnNlbGVjdENvbnRhaW5lcjpob3ZlciB7XG4gICAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0tYm9yZGVySG92ZXJDb2xvciwgI2IyYjhiZik7XG4gICAgfVxuXG4gICAgLnNlbGVjdENvbnRhaW5lci5mb2N1c2VkIHtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1ib3JkZXJGb2N1c0NvbG9yLCAjMDA2ZmU4KTtcbiAgICB9XG5cbiAgICAuc2VsZWN0Q29udGFpbmVyLmRpc2FibGVkIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tZGlzYWJsZWRCYWNrZ3JvdW5kLCAjZWJlZGVmKTtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1kaXNhYmxlZEJvcmRlckNvbG9yLCAjZWJlZGVmKTtcbiAgICAgICAgY29sb3I6IHZhcigtLWRpc2FibGVkQ29sb3IsICNjMWM2Y2MpO1xuICAgIH1cblxuICAgIC5zZWxlY3RDb250YWluZXIuZGlzYWJsZWQgaW5wdXQ6OnBsYWNlaG9sZGVyIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWRpc2FibGVkUGxhY2Vob2xkZXJDb2xvciwgI2MxYzZjYyk7XG4gICAgICAgIG9wYWNpdHk6IHZhcigtLWRpc2FibGVkUGxhY2Vob2xkZXJPcGFjaXR5LCAxKTtcbiAgICB9XG5cbiAgICAuc2VsZWN0ZWRJdGVtIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IHZhcigtLWhlaWdodCwgNDJweCk7XG4gICAgICAgIGhlaWdodDogdmFyKC0taGVpZ2h0LCA0MnB4KTtcbiAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICBwYWRkaW5nOiB2YXIoLS1zZWxlY3RlZEl0ZW1QYWRkaW5nLCAwIDIwcHggMCAwKTtcbiAgICB9XG5cbiAgICAuc2VsZWN0ZWRJdGVtOmZvY3VzIHtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICB9XG5cbiAgICAuY2xlYXJTZWxlY3Qge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHJpZ2h0OiB2YXIoLS1jbGVhclNlbGVjdFJpZ2h0LCAxMHB4KTtcbiAgICAgICAgdG9wOiB2YXIoLS1jbGVhclNlbGVjdFRvcCwgMTFweCk7XG4gICAgICAgIGJvdHRvbTogdmFyKC0tY2xlYXJTZWxlY3RCb3R0b20sIDExcHgpO1xuICAgICAgICB3aWR0aDogdmFyKC0tY2xlYXJTZWxlY3RXaWR0aCwgMjBweCk7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1jbGVhclNlbGVjdENvbG9yLCAjYzVjYWNmKTtcbiAgICAgICAgZmxleDogbm9uZSAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIC5jbGVhclNlbGVjdDpob3ZlciB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1jbGVhclNlbGVjdEhvdmVyQ29sb3IsICMyYzNlNTApO1xuICAgIH1cblxuICAgIC5zZWxlY3RDb250YWluZXIuZm9jdXNlZCAuY2xlYXJTZWxlY3Qge1xuICAgICAgICBjb2xvcjogdmFyKC0tY2xlYXJTZWxlY3RGb2N1c0NvbG9yLCAjM2Y0ZjVmKTtcbiAgICB9XG5cbiAgICAuaW5kaWNhdG9yIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogdmFyKC0taW5kaWNhdG9yUmlnaHQsIDEwcHgpO1xuICAgICAgICB0b3A6IHZhcigtLWluZGljYXRvclRvcCwgMTFweCk7XG4gICAgICAgIHdpZHRoOiB2YXIoLS1pbmRpY2F0b3JXaWR0aCwgMjBweCk7XG4gICAgICAgIGhlaWdodDogdmFyKC0taW5kaWNhdG9ySGVpZ2h0LCAyMHB4KTtcbiAgICAgICAgY29sb3I6IHZhcigtLWluZGljYXRvckNvbG9yLCAjYzVjYWNmKTtcbiAgICB9XG5cbiAgICAuaW5kaWNhdG9yIHN2ZyB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgZmlsbDogdmFyKC0taW5kaWNhdG9yRmlsbCwgY3VycmVudGNvbG9yKTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICAgIHN0cm9rZTogdmFyKC0taW5kaWNhdG9yU3Ryb2tlLCBjdXJyZW50Y29sb3IpO1xuICAgICAgICBzdHJva2Utd2lkdGg6IDA7XG4gICAgfVxuXG4gICAgLnNwaW5uZXIge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHJpZ2h0OiB2YXIoLS1zcGlubmVyUmlnaHQsIDEwcHgpO1xuICAgICAgICB0b3A6IHZhcigtLXNwaW5uZXJMZWZ0LCAxMXB4KTtcbiAgICAgICAgd2lkdGg6IHZhcigtLXNwaW5uZXJXaWR0aCwgMjBweCk7XG4gICAgICAgIGhlaWdodDogdmFyKC0tc3Bpbm5lckhlaWdodCwgMjBweCk7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zcGlubmVyQ29sb3IsICM1MWNlNmMpO1xuICAgICAgICBhbmltYXRpb246IHJvdGF0ZSAwLjc1cyBsaW5lYXIgaW5maW5pdGU7XG4gICAgfVxuXG4gICAgLnNwaW5uZXJfaWNvbiB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgbWFyZ2luOiBhdXRvO1xuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTtcbiAgICB9XG5cbiAgICAuc3Bpbm5lcl9wYXRoIHtcbiAgICAgICAgc3Ryb2tlLWRhc2hhcnJheTogOTA7XG4gICAgICAgIHN0cm9rZS1saW5lY2FwOiByb3VuZDtcbiAgICB9XG5cbiAgICAubXVsdGlTZWxlY3Qge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBwYWRkaW5nOiB2YXIoLS1tdWx0aVNlbGVjdFBhZGRpbmcsIDAgMzVweCAwIDE2cHgpO1xuICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XG4gICAgfVxuXG4gICAgLm11bHRpU2VsZWN0ID4gKiB7XG4gICAgICAgIGZsZXg6IDEgMSA1MHB4O1xuICAgIH1cblxuICAgIC5zZWxlY3RDb250YWluZXIubXVsdGlTZWxlY3QgaW5wdXQge1xuICAgICAgICBwYWRkaW5nOiB2YXIoLS1tdWx0aVNlbGVjdElucHV0UGFkZGluZywgMCk7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgbWFyZ2luOiB2YXIoLS1tdWx0aVNlbGVjdElucHV0TWFyZ2luLCAwKTtcbiAgICB9XG5cbiAgICAuaGFzRXJyb3Ige1xuICAgICAgICBib3JkZXI6IHZhcigtLWVycm9yQm9yZGVyLCAxcHggc29saWQgI2ZmMmQ1NSk7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWVycm9yQmFja2dyb3VuZCwgI2ZmZik7XG4gICAgfVxuXG4gICAgLmExMXlUZXh0IHtcbiAgICAgICAgei1pbmRleDogOTk5OTtcbiAgICAgICAgYm9yZGVyOiAwcHg7XG4gICAgICAgIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcbiAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgIHdpZHRoOiAxcHg7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgcGFkZGluZzogMHB4O1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIH1cblxuICAgIEBrZXlmcmFtZXMgcm90YXRlIHtcbiAgICAgICAgMTAwJSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgICAgICB9XG4gICAgfVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTp3aW5kb3dcbiAgICBvbjpjbGljaz17aGFuZGxlV2luZG93RXZlbnR9XG4gICAgb246Zm9jdXNpbj17aGFuZGxlV2luZG93RXZlbnR9XG4gICAgb246a2V5ZG93bj17aGFuZGxlS2V5RG93bn0gLz5cblxuPGRpdlxuICAgIGNsYXNzPVwic2VsZWN0Q29udGFpbmVyIHtjb250YWluZXJDbGFzc2VzfVwiXG4gICAgY2xhc3M6aGFzRXJyb3JcbiAgICBjbGFzczptdWx0aVNlbGVjdD17aXNNdWx0aX1cbiAgICBjbGFzczpkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICBjbGFzczpmb2N1c2VkPXtpc0ZvY3VzZWR9XG4gICAgc3R5bGU9e2NvbnRhaW5lclN0eWxlc31cbiAgICBvbjpjbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgYmluZDp0aGlzPXtjb250YWluZXJ9PlxuICAgIDxzcGFuXG4gICAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgICAgIGFyaWEtYXRvbWljPVwiZmFsc2VcIlxuICAgICAgICBhcmlhLXJlbGV2YW50PVwiYWRkaXRpb25zIHRleHRcIlxuICAgICAgICBjbGFzcz1cImExMXlUZXh0XCI+XG4gICAgICAgIHsjaWYgaXNGb2N1c2VkfVxuICAgICAgICAgICAgPHNwYW4gaWQ9XCJhcmlhLXNlbGVjdGlvblwiPnthcmlhU2VsZWN0aW9ufTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGlkPVwiYXJpYS1jb250ZXh0XCI+XG4gICAgICAgICAgICAgICAge2FyaWFDb250ZXh0fVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICB7L2lmfVxuICAgIDwvc3Bhbj5cblxuICAgIHsjaWYgSWNvbn1cbiAgICAgICAgPHN2ZWx0ZTpjb21wb25lbnQgdGhpcz17SWNvbn0gey4uLmljb25Qcm9wc30gLz5cbiAgICB7L2lmfVxuXG4gICAgeyNpZiBzaG93TXVsdGlTZWxlY3R9XG4gICAgICAgIDxzdmVsdGU6Y29tcG9uZW50XG4gICAgICAgICAgICB0aGlzPXtNdWx0aVNlbGVjdGlvbn1cbiAgICAgICAgICAgIHt2YWx1ZX1cbiAgICAgICAgICAgIHtnZXRTZWxlY3Rpb25MYWJlbH1cbiAgICAgICAgICAgIHthY3RpdmVWYWx1ZX1cbiAgICAgICAgICAgIHtpc0Rpc2FibGVkfVxuICAgICAgICAgICAge211bHRpRnVsbEl0ZW1DbGVhcmFibGV9XG4gICAgICAgICAgICBvbjptdWx0aUl0ZW1DbGVhcj17aGFuZGxlTXVsdGlJdGVtQ2xlYXJ9XG4gICAgICAgICAgICBvbjpmb2N1cz17aGFuZGxlRm9jdXN9IC8+XG4gICAgey9pZn1cblxuICAgIDxpbnB1dFxuICAgICAgICByZWFkT25seT17IWlzU2VhcmNoYWJsZX1cbiAgICAgICAgey4uLl9pbnB1dEF0dHJpYnV0ZXN9XG4gICAgICAgIGJpbmQ6dGhpcz17aW5wdXR9XG4gICAgICAgIG9uOmZvY3VzPXtoYW5kbGVGb2N1c31cbiAgICAgICAgYmluZDp2YWx1ZT17ZmlsdGVyVGV4dH1cbiAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyVGV4dH1cbiAgICAgICAgc3R5bGU9e2lucHV0U3R5bGVzfVxuICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH0gLz5cblxuICAgIHsjaWYgIWlzTXVsdGkgJiYgc2hvd1NlbGVjdGVkSXRlbX1cbiAgICAgICAgPGRpdiBjbGFzcz1cInNlbGVjdGVkSXRlbVwiIG9uOmZvY3VzPXtoYW5kbGVGb2N1c30+XG4gICAgICAgICAgICA8c3ZlbHRlOmNvbXBvbmVudFxuICAgICAgICAgICAgICAgIHRoaXM9e1NlbGVjdGlvbn1cbiAgICAgICAgICAgICAgICBpdGVtPXt2YWx1ZX1cbiAgICAgICAgICAgICAgICB7Z2V0U2VsZWN0aW9uTGFiZWx9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG5cbiAgICB7I2lmIHNob3dDbGVhckljb259XG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPVwiY2xlYXJTZWxlY3RcIlxuICAgICAgICAgICAgb246Y2xpY2t8cHJldmVudERlZmF1bHQ9e2hhbmRsZUNsZWFyfVxuICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gICAgICAgICAgICA8c3ZlbHRlOmNvbXBvbmVudCB0aGlzPXtDbGVhckljb259IC8+XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG5cbiAgICB7I2lmICFzaG93Q2xlYXJJY29uICYmIChzaG93SW5kaWNhdG9yIHx8IChzaG93Q2hldnJvbiAmJiAhdmFsdWUpIHx8ICghaXNTZWFyY2hhYmxlICYmICFpc0Rpc2FibGVkICYmICFpc1dhaXRpbmcgJiYgKChzaG93U2VsZWN0ZWRJdGVtICYmICFpc0NsZWFyYWJsZSkgfHwgIXNob3dTZWxlY3RlZEl0ZW0pKSl9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbmRpY2F0b3JcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgICAgICAgIHsjaWYgaW5kaWNhdG9yU3ZnfVxuICAgICAgICAgICAgICAgIHtAaHRtbCBpbmRpY2F0b3JTdmd9XG4gICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjEwMCVcIlxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIxMDAlXCJcbiAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyMCAyMFwiXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZT1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICBkPVwiTTQuNTE2IDcuNTQ4YzAuNDM2LTAuNDQ2IDEuMDQzLTAuNDgxIDEuNTc2IDBsMy45MDggMy43NDdcbiAgICAgICAgICAzLjkwOC0zLjc0N2MwLjUzMy0wLjQ4MSAxLjE0MS0wLjQ0NiAxLjU3NCAwIDAuNDM2IDAuNDQ1IDAuNDA4IDEuMTk3IDBcbiAgICAgICAgICAxLjYxNS0wLjQwNiAwLjQxOC00LjY5NSA0LjUwMi00LjY5NSA0LjUwMi0wLjIxNyAwLjIyMy0wLjUwMlxuICAgICAgICAgIDAuMzM1LTAuNzg3IDAuMzM1cy0wLjU3LTAuMTEyLTAuNzg5LTAuMzM1YzBcbiAgICAgICAgICAwLTQuMjg3LTQuMDg0LTQuNjk1LTQuNTAycy0wLjQzNi0xLjE3IDAtMS42MTV6XCIgLz5cbiAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG5cbiAgICB7I2lmIGlzV2FpdGluZ31cbiAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXJcIj5cbiAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJzcGlubmVyX2ljb25cIiB2aWV3Qm94PVwiMjUgMjUgNTAgNTBcIj5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic3Bpbm5lcl9wYXRoXCJcbiAgICAgICAgICAgICAgICAgICAgY3g9XCI1MFwiXG4gICAgICAgICAgICAgICAgICAgIGN5PVwiNTBcIlxuICAgICAgICAgICAgICAgICAgICByPVwiMjBcIlxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjVcIlxuICAgICAgICAgICAgICAgICAgICBzdHJva2UtbWl0ZXJsaW1pdD1cIjEwXCIgLz5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuXG4gICAgeyNpZiBsaXN0T3Blbn1cbiAgICAgICAgPHN2ZWx0ZTpjb21wb25lbnRcbiAgICAgICAgICAgIHRoaXM9e0xpc3R9XG4gICAgICAgICAgICB7Li4ubGlzdFByb3BzfVxuICAgICAgICAgICAgYmluZDpob3Zlckl0ZW1JbmRleFxuICAgICAgICAgICAgb246aXRlbVNlbGVjdGVkPXtpdGVtU2VsZWN0ZWR9XG4gICAgICAgICAgICBvbjppdGVtQ3JlYXRlZD17aXRlbUNyZWF0ZWR9XG4gICAgICAgICAgICBvbjpjbG9zZUxpc3Q9e2Nsb3NlTGlzdH0gLz5cbiAgICB7L2lmfVxuXG4gICAgeyNpZiAhaXNNdWx0aSB8fCAoaXNNdWx0aSAmJiAhc2hvd011bHRpU2VsZWN0KX1cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBuYW1lPXtpbnB1dEF0dHJpYnV0ZXMubmFtZX1cbiAgICAgICAgICAgIHR5cGU9XCJoaWRkZW5cIlxuICAgICAgICAgICAgdmFsdWU9e3ZhbHVlID8gZ2V0U2VsZWN0aW9uTGFiZWwodmFsdWUpIDogbnVsbH0gLz5cbiAgICB7L2lmfVxuXG4gICAgeyNpZiBpc011bHRpICYmIHNob3dNdWx0aVNlbGVjdH1cbiAgICAgICAgeyNlYWNoIHZhbHVlIGFzIGl0ZW19XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBuYW1lPXtpbnB1dEF0dHJpYnV0ZXMubmFtZX1cbiAgICAgICAgICAgICAgICB0eXBlPVwiaGlkZGVuXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT17aXRlbSA/IGdldFNlbGVjdGlvbkxhYmVsKGl0ZW0pIDogbnVsbH0gLz5cbiAgICAgICAgey9lYWNofVxuICAgIHsvaWZ9XG48L2Rpdj5cbiIsIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiIGxhbmc9XCJ0c1wiPlxuXHRleHBvcnQgdHlwZSBTZWxlY3RPcHRpb248XG5cdFx0c2lfdmFsdWUgZXh0ZW5kcyBzdHJpbmc9c3RyaW5nLFxuXHRcdGdfZXh0cmEgZXh0ZW5kcyBKc29uT2JqZWN0PXt9LFxuXHQ+ID0gTWVyZ2U8e1xuXHRcdHZhbHVlOiBzaV92YWx1ZTtcblx0XHRwcmltYXJ5Pzogc3RyaW5nO1xuXHRcdHNlY29uZGFyeT86IHN0cmluZztcblx0XHRvYmplY3Q/OiBOYW1lYWJsZSAmIFBmcGFibGU7XG5cdFx0cGZwPzogUGZwUGF0aDtcblx0fSwgZ19leHRyYT47XG48L3NjcmlwdD5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0aW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG5cdGltcG9ydCBTZWxlY3QgZnJvbSBcInN2ZWx0ZS1zZWxlY3RcIjtcblx0aW1wb3J0IHsgZGQgfSBmcm9tICcjL3V0aWwvZG9tJztcblxuXHRpbXBvcnQgU1hfSUNPTl9EUk9QRE9XTiBmcm9tICcjL2ljb24vZHJvcC1kb3duLnN2Zz9yYXcnO1xuXHRpbXBvcnQgdHlwZSB7IE5hbWVhYmxlLCBQZnBhYmxlIH0gZnJvbSAnIy9tZXRhL2FibGUnO1xuXHRpbXBvcnQgdHlwZSB7IFBmcFBhdGggfSBmcm9tICcjL21ldGEvcGZwJztcblx0aW1wb3J0IHR5cGUgeyBKc29uT2JqZWN0IH0gZnJvbSAnIy91dGlsL2JlbHQnO1xuXHRpbXBvcnQgdHlwZSB7IE1lcmdlIH0gZnJvbSAndHMtdG9vbGJlbHQvb3V0L09iamVjdC9NZXJnZSc7XG5cblx0ZXhwb3J0IGxldCBpZCA9ICcnO1xuXHRleHBvcnQgbGV0IHBsYWNlaG9sZGVyID0gJyc7XG5cdGV4cG9ydCBsZXQgbGlzdE9mZnNldCA9IDE7XG5cdGV4cG9ydCBsZXQgaXNDbGVhcmFibGUgPSBmYWxzZTtcblx0ZXhwb3J0IGxldCBzaG93SW5kaWNhdG9yID0gdHJ1ZTtcblx0ZXhwb3J0IGxldCBpdGVtczogdW5rbm93bltdO1xuXHRleHBvcnQgbGV0IHZhbHVlOiB1bmtub3duID0gdm9pZCAwO1xuXG5cdGV4cG9ydCBsZXQgcGZwTWFwOiBSZWNvcmQ8UGZwUGF0aCwgSFRNTEVsZW1lbnQ+IHwgbnVsbCA9IG51bGw7XG5cdGNvbnN0IGhfcGZwcyA9IHBmcE1hcDtcblxuXHRleHBvcnQgbGV0IHByaW1hcnlDbGFzcyA9ICcnO1xuXHRleHBvcnQgbGV0IHNlY29uZGFyeUNsYXNzID0gJyc7XG5cblx0ZXhwb3J0IGxldCBjb250YWluZXJDbGFzc2VzID0gJyc7XG5cblx0ZnVuY3Rpb24gY3JlYXRlX2xhYmVsKGdfaXRlbTogU2VsZWN0T3B0aW9uKSB7XG5cdFx0aWYoZ19pdGVtLnByaW1hcnkpIHtcblx0XHRcdHJldHVybiBkZCgnc3BhbicsIHtcblx0XHRcdFx0Y2xhc3M6ICdnbG9iYWxfc2VsZWN0LWl0ZW0nLFxuXHRcdFx0fSwgW1xuXHRcdFx0XHRoX3BmcHM/IGhfcGZwc1tnX2l0ZW0ub2JqZWN0IS5wZnBdIHx8ICcnOiAnJyxcblx0XHRcdFx0ZGQoJ3NwYW4nLCB7XG5cdFx0XHRcdFx0Y2xhc3M6ICduYW1lICcrcHJpbWFyeUNsYXNzLFxuXHRcdFx0XHR9LCBbXG5cdFx0XHRcdFx0Z19pdGVtLnByaW1hcnksXG5cdFx0XHRcdF0pLFxuXHRcdFx0XHRkZCgnc3BhbicsIHtcblx0XHRcdFx0XHRjbGFzczogJ3NlY29uZGFyeSAnK3NlY29uZGFyeUNsYXNzLFxuXHRcdFx0XHR9LCBbXG5cdFx0XHRcdFx0Z19pdGVtLnNlY29uZGFyeSB8fCAnJyxcblx0XHRcdFx0XSksXG5cdFx0XHRdKS5vdXRlckhUTUw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGdfaXRlbS52YWx1ZTtcblx0fVxuXG5cdGxldCBkbV9zdGFyX3NlbGVjdDogSFRNTEVsZW1lbnQ7XG5cdGxldCBzeF9tYXhfaGVpZ2h0ID0gJzUwMHB4Jztcblx0b25Nb3VudCgoKSA9PiB7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCB4X2JvdHRvbSA9IGRtX3N0YXJfc2VsZWN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcblx0XHRcdFx0c3hfbWF4X2hlaWdodCA9IE1hdGgubWluKHdpbmRvdy5pbm5lckhlaWdodCAtIHhfYm90dG9tIC0gMjAsIDUwMCkrJ3B4Jztcblx0XHRcdH0gY2F0Y2goZV9ib3VuZHMpIHt9XG5cdFx0fSwgMTAwMCk7XG5cdH0pO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuXHRAaW1wb3J0ICcuL19iYXNlLmxlc3MnO1xuXG5cdC5nbG9iYWxfc2VsZWN0LWl0ZW0ge1xuXHRcdD4uZ2xvYmFsX3BmcCB7XG5cdFx0XHQ6Z2xvYmFsKCYpIHtcblx0XHRcdFx0cGFkZGluZy1yaWdodDogMC43NWNoO1xuXHRcdFx0XHRtYXJnaW4tdG9wOiAtMC4yNWVtO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC5zdGFyLXNlbGVjdCB7XG5cdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdC5zdHlsZS1zdmVsdGUtc2VsZWN0KCk7XG5cdFx0LmZvbnQocmVndWxhcik7XG5cblx0XHQ+aW5wdXQge1xuXG5cdFx0XHQmOjphZnRlciB7XG5cdFx0XHRcdGNvbnRlbnQ6ICcnO1xuXHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0XHRcdHJpZ2h0OiAwO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdD4uaWNvbiB7XG5cdFx0XHQtLWljb24tZGlhbWV0ZXI6IDI0cHg7XG5cdFx0XHQtLWljb24tY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnkpO1xuXHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0dG9wOiAwO1xuXHRcdFx0cmlnaHQ6IDA7XG5cdFx0XHRwYWRkaW5nOiAxMnB4O1xuXHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdH1cblxuXHRcdC5zZWNvbmRhcnkge1xuXHRcdFx0Omdsb2JhbCgmKSB7XG5cdFx0XHRcdGNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci10ZXh0LW1lZCk7XG5cdFx0XHR9XG5cblx0XHRcdDpnbG9iYWwoJjo6YmVmb3JlKSB7XG5cdFx0XHRcdGNvbnRlbnQ6ICcgLSAnO1xuXHRcdFx0XHRjb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItdGV4dC1tZWQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC5pdGVtLmFjdGl2ZSB7XG5cdFx0XHQ6Z2xvYmFsKCYpIHtcblx0XHRcdFx0ZGlzcGxheTogbm9uZTtcblx0XHRcdH1cblxuXHRcdFx0LnNlY29uZGFyeSB7XG5cdFx0XHRcdDpnbG9iYWwoJikge1xuXHRcdFx0XHRcdGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdDpnbG9iYWwoJjo6YmVmb3JlKSB7XG5cdFx0XHRcdFx0Y29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuPC9zdHlsZT5cblxuPGRpdiBjbGFzcz1cInN0YXItc2VsZWN0IHtjb250YWluZXJDbGFzc2VzfVwiIGJpbmQ6dGhpcz17ZG1fc3Rhcl9zZWxlY3R9PlxuXHQ8U2VsZWN0IGlkPVwic2VuZGVyLXNlbGVjdFwiXG5cdFx0cGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuXHRcdGxpc3RPZmZzZXQ9e2xpc3RPZmZzZXR9XG5cdFx0aXNDbGVhcmFibGU9e2lzQ2xlYXJhYmxlfVxuXHRcdHNob3dJbmRpY2F0b3I9e3Nob3dJbmRpY2F0b3J9XG5cdFx0aW5kaWNhdG9yU3ZnPXtTWF9JQ09OX0RST1BET1dOfVxuXHRcdGxpc3RQbGFjZW1lbnQ9J2JvdHRvbSdcblx0XHRpdGVtcz17aXRlbXN9XG5cdFx0YmluZDp2YWx1ZT17dmFsdWV9XG5cdFx0Z2V0T3B0aW9uTGFiZWw9e2NyZWF0ZV9sYWJlbH1cblx0XHRnZXRTZWxlY3Rpb25MYWJlbD17Y3JlYXRlX2xhYmVsfVxuXHRcdC0tbGlzdE1heEhlaWdodD17c3hfbWF4X2hlaWdodH1cblx0Lz5cbjwvZGl2PiIsImltcG9ydCB0eXBlIHsgTmFtZWFibGUsIFBmcGFibGUgfSBmcm9tICcjL21ldGEvYWJsZSc7XG5pbXBvcnQgdHlwZSB7IFJlc291cmNlIH0gZnJvbSAnIy9tZXRhL3Jlc291cmNlJztcbmltcG9ydCB0eXBlIHsgUGFyYW1ldHJpY1N2ZWx0ZUNvbnN0cnVjdG9yIH0gZnJvbSAnIy9tZXRhL3N2ZWx0ZSc7XG5pbXBvcnQgeyBEaWN0LCBvZGUsIG9mZSB9IGZyb20gJyMvdXRpbC9iZWx0JztcbmltcG9ydCB7IGRkIH0gZnJvbSAnIy91dGlsL2RvbSc7XG5pbXBvcnQgeyBjdWJpY091dCB9IGZyb20gJ3N2ZWx0ZS9lYXNpbmcnO1xuaW1wb3J0IHR5cGUgeyBSZWFkYWJsZSB9IGZyb20gJ3N2ZWx0ZS9zdG9yZSc7XG5pbXBvcnQgUGZwRGlzcGxheSBmcm9tICcuL3VpL1BmcERpc3BsYXkuc3ZlbHRlJztcblxuZXhwb3J0IGZ1bmN0aW9uIG9uY2Vfc3RvcmVfdXBkYXRlcyh5d19zdG9yZTogUmVhZGFibGU8YW55PiwgYl90cnV0aHk9ZmFsc2UpOiAodHlwZW9mIHl3X3N0b3JlKSBleHRlbmRzIFJlYWRhYmxlPGluZmVyIHdfb3V0Pj8gUHJvbWlzZTx3X291dD46IG5ldmVyIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChma19yZXNvbHZlKSA9PiB7XG5cdFx0Ly8gaWdub3JlIGluaXRpYWxpemF0aW9uIGNhbGxcblx0XHRsZXQgYl9pbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdFx0Ly8gc3Vic2NyaWJlXG5cdFx0Y29uc3QgZl91bnN1YnNjcmliZSA9IHl3X3N0b3JlLnN1YnNjcmliZSgod192YWx1ZSkgPT4ge1xuXHRcdFx0Ly8gcnVubmVyIGdldHMgY2FsbGVkIGltbWVkaWF0ZWx5LCBidXQgd2FpdCBmb3IgdGhlIHVwZGF0ZVxuXHRcdFx0aWYoIWJfaW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0Yl9pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gXG5cdFx0XHRpZighYl90cnV0aHkgfHwgd192YWx1ZSkge1xuXHRcdFx0XHQvLyB1bnN1YnNjcmliZVxuXHRcdFx0XHRmX3Vuc3Vic2NyaWJlKCk7XG5cblx0XHRcdFx0Ly8gcmVzb2x2ZSB3aXRoIHZhbHVlXG5cdFx0XHRcdGZrX3Jlc29sdmUod192YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYW5fc2xpZGUoZG1fbm9kZTogRWxlbWVudCwge1xuXHRkZWxheTogeHRfZGVsYXk9MCxcblx0ZHVyYXRpb246IHh0X2R1cmF0aW9uPTQwMCxcblx0ZWFzaW5nOiBmX2Vhc2luZz1jdWJpY091dCxcbn06IFN2ZWx0ZVRyYW5zaXRpb25Db25maWcpOiBTdmVsdGVUcmFuc2l0aW9uUmV0dXJuVHlwZSB7XG5cdGNvbnN0IGRfc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRtX25vZGUpO1xuXHRjb25zdCB4X29wYWNpdHkgPSArZF9zdHlsZS5vcGFjaXR5O1xuXHRjb25zdCB4X2hlaWdodCA9IHBhcnNlRmxvYXQoZF9zdHlsZS5oZWlnaHQpO1xuXHRjb25zdCB4X3BhZGRpbmdfdG9wID0gcGFyc2VGbG9hdChkX3N0eWxlLnBhZGRpbmdUb3ApO1xuXHRjb25zdCB4X3BhZGRpbmdfYm90dG9tID0gcGFyc2VGbG9hdChkX3N0eWxlLnBhZGRpbmdCb3R0b20pO1xuXHRjb25zdCB4X21hcmdpbl90b3AgPSBwYXJzZUZsb2F0KGRfc3R5bGUubWFyZ2luVG9wKTtcblx0Y29uc3QgeF9tYXJnaW5fYm90dG9tID0gcGFyc2VGbG9hdChkX3N0eWxlLm1hcmdpbkJvdHRvbSk7XG5cdGNvbnN0IHhfYm9yZGVyX3RvcF93aWR0aCA9IHBhcnNlRmxvYXQoZF9zdHlsZS5ib3JkZXJUb3BXaWR0aCk7XG5cdGNvbnN0IHhfYm9yZGVyX2JvdHRvbV93aWR0aCA9IHBhcnNlRmxvYXQoZF9zdHlsZS5ib3JkZXJCb3R0b21XaWR0aCk7XG5cblx0cmV0dXJuIHtcblx0XHRkZWxheTogeHRfZGVsYXksXG5cdFx0ZHVyYXRpb246IHh0X2R1cmF0aW9uLFxuXHRcdGVhc2luZzogZl9lYXNpbmcsXG5cdFx0Y3NzOiB4dCA9PiAnJ1xuXHRcdFx0KydvdmVyZmxvdzogaGlkZGVuOydcblx0XHRcdCtgb3BhY2l0eTogJHtNYXRoLm1pbih4dCAqIDIwLCAxKSAqIHhfb3BhY2l0eX07YFxuXHRcdFx0K2BoZWlnaHQ6ICR7eHQgKiB4X2hlaWdodH1weDtgXG5cdFx0XHQrYHBhZGRpbmctdG9wOiAke3h0ICogeF9wYWRkaW5nX3RvcH1weDtgXG5cdFx0XHQrYHBhZGRpbmctYm90dG9tOiAke3h0ICogeF9wYWRkaW5nX2JvdHRvbX1weDtgXG5cdFx0XHQrYG1hcmdpbi10b3A6ICR7eHQgKiB4X21hcmdpbl90b3B9cHg7YFxuXHRcdFx0K2BtYXJnaW4tYm90dG9tOiAke3h0ICogeF9tYXJnaW5fYm90dG9tfXB4O2Bcblx0XHRcdCtgYm9yZGVyLXRvcC13aWR0aDogJHt4dCAqIHhfYm9yZGVyX3RvcF93aWR0aH1weDtgXG5cdFx0XHQrYGJvcmRlci1ib3R0b20td2lkdGg6ICR7eHQgKiB4X2JvcmRlcl9ib3R0b21fd2lkdGh9cHg7YCxcblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN2ZWx0ZV90b19kb20oXG5cdGRjX2NyZWF0b3I6IFBhcmFtZXRyaWNTdmVsdGVDb25zdHJ1Y3Rvcixcblx0aF9wcm9wczogUGFyYW1ldHJpY1N2ZWx0ZUNvbnN0cnVjdG9yLlBhcnRzPHR5cGVvZiBkY19jcmVhdG9yPlsncGFyYW1zJ10sXG5cdHNpX2V2ZW50Pzogc3RyaW5nXG4pOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG5cdGNvbnN0IGRtX2RpdiA9IGRkKCdkaXYnKTtcblxuXHRjb25zdCB5Y19jb21wb25lbnQgPSBuZXcgZGNfY3JlYXRvcih7XG5cdFx0dGFyZ2V0OiBkbV9kaXYsXG5cdFx0cHJvcHM6IGhfcHJvcHMsXG5cdH0pO1xuXG5cdGlmKHNpX2V2ZW50KSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChma19yZXNvbHZlKSA9PiB7XG5cdFx0XHR5Y19jb21wb25lbnQuJG9uKHNpX2V2ZW50LCAoKSA9PiB7XG5cdFx0XHRcdGZrX3Jlc29sdmUoZG1fZGl2LmZpcnN0Q2hpbGQgYXMgSFRNTEVsZW1lbnQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShkbV9kaXYuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudCk7XG5cdH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZF9wZnBzPFxuXHRwX3JlcyBleHRlbmRzIFJlc291cmNlLlBhdGgsXG5cdGdfcmVzIGV4dGVuZHMgKE5hbWVhYmxlICYgUGZwYWJsZSksXG4+KGhfcmVzb3VyY2VzOiBSZWNvcmQ8cF9yZXMsIGdfcmVzPiwgaF9wcm9wczogUGZwRGlzcGxheVsnJCRwcm9wX2RlZiddKTogUHJvbWlzZTxSZWNvcmQ8cF9yZXMsIEhUTUxFbGVtZW50Pj4ge1xuXHRyZXR1cm4gb2ZlKFxuXHRcdGF3YWl0IFByb21pc2UuYWxsKFxuXHRcdFx0b2RlKGhfcmVzb3VyY2VzKS5tYXAoKFtfLCBnX3Jlc291cmNlXSkgPT4gbmV3IFByb21pc2UoXG5cdFx0XHRcdChma19yZXNvbHZlOiAoYV9lbnRyeTogW3BfcmVzLCBIVE1MRWxlbWVudF0pID0+IHZvaWQpID0+IHtcblx0XHRcdFx0XHRjb25zdCBkbV9kdW1teSA9IGRkKCdzcGFuJyk7XG5cdFx0XHRcdFx0Y29uc3QgeWNfcGZwID0gbmV3IFBmcERpc3BsYXkoe1xuXHRcdFx0XHRcdFx0dGFyZ2V0OiBkbV9kdW1teSxcblx0XHRcdFx0XHRcdHByb3BzOiB7XG5cdFx0XHRcdFx0XHRcdC4uLmhfcHJvcHMsXG5cdFx0XHRcdFx0XHRcdHJlc291cmNlOiBnX3Jlc291cmNlLFxuXHRcdFx0XHRcdFx0XHRzZXR0bGUoKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgZG1fcGZwID0gZG1fZHVtbXkuZmlyc3RDaGlsZD8uY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0XHRcdFx0XHRcdHljX3BmcC4kZGVzdHJveSgpO1xuXHRcdFx0XHRcdFx0XHRcdGZrX3Jlc29sdmUoW2dfcmVzb3VyY2UucGZwIGFzIHBfcmVzLCBkbV9wZnBdKTtcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdCkpXG5cdFx0KSk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IENvaW5HZWNrb0ZpYXQgfSBmcm9tIFwiIy9zdG9yZS93ZWItYXBpc1wiO1xuXG5jb25zdCBEX0lOVExfVVNEID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdlbi1VUycsIHtcblx0c3R5bGU6ICdjdXJyZW5jeScsXG5cdGN1cnJlbmN5OiAnVVNEJyxcblx0Y3VycmVuY3lEaXNwbGF5OiAnc3ltYm9sJyxcbn0pO1xuXG5jb25zdCBEX0lOVExfVVNEX0xUMSA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tVVMnLCB7XG5cdHN0eWxlOiAnY3VycmVuY3knLFxuXHRjdXJyZW5jeTogJ1VTRCcsXG5cdGN1cnJlbmN5RGlzcGxheTogJ3N5bWJvbCcsXG5cdG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMixcblx0bWF4aW11bUZyYWN0aW9uRGlnaXRzOiA1LFxufSk7XG5cbmNvbnN0IEFfTlVNRVJJQ19HVDEgPSBbXG5cdHtcblx0XHRvcmRlcjogMWUyMSxcblx0XHRzdWZmaXg6ICdzZXB0Jyxcblx0XHRtZXRyaWM6ICd5b3R0YScsXG5cdFx0bTogJ1knLFxuXHR9LFxuXHR7XG5cdFx0b3JkZXI6IDFlMjEsXG5cdFx0c3VmZml4OiAnc2V4dCcsXG5cdFx0bWV0cmljOiAnemV0dGEnLFxuXHRcdG06ICdaJyxcblx0fSxcblx0e1xuXHRcdG9yZGVyOiAxZTE4LFxuXHRcdHN1ZmZpeDogJ3F1aW50Jyxcblx0XHRtZXRyaWM6ICdleGEnLFxuXHRcdG06ICdFJyxcblx0fSxcblx0e1xuXHRcdG9yZGVyOiAxZTE1LFxuXHRcdHN1ZmZpeDogJ3F1YWQnLFxuXHRcdG1ldHJpYzogJ3BldGEnLFxuXHRcdG06ICdQJyxcblx0fSxcblx0e1xuXHRcdG9yZGVyOiAxZTEyLFxuXHRcdHN1ZmZpeDogJ3RyaWwnLFxuXHRcdG1ldHJpYzogJ3RlcnJhJyxcblx0XHRtOiAnVCcsXG5cdH0sXG5cdHtcblx0XHRvcmRlcjogMWU5LFxuXHRcdHN1ZmZpeDogJ2JpbCcsXG5cdFx0bWV0cmljOiAnZ2lnYScsXG5cdFx0bTogJ0cnLFxuXHR9LFxuXHR7XG5cdFx0b3JkZXI6IDFlNixcblx0XHRzdWZmaXg6ICdtaWwnLFxuXHRcdG1ldHJpYzogJ21lZ2EnLFxuXHRcdG06ICdNJyxcblx0fSxcbl07XG5cbmNvbnN0IEFfTlVNRVJJQ19MVDEgPSBbXG5cdHtcblx0XHRvcmRlcjogMWUtMjQsXG5cdFx0c3VmZml4OiAnc2VwdGgnLFxuXHRcdG1ldHJpYzogJ3lvY3RvJyxcblx0XHRtOiAneScsXG5cdH0sXG5cdHtcblx0XHRvcmRlcjogMWUtMjEsXG5cdFx0c3VmZml4OiAnc2V4dGgnLFxuXHRcdG1ldHJpYzogJ3plcHRvJyxcblx0XHRtOiAneicsXG5cdH0sXG5cdHtcblx0XHRvcmRlcjogMWUtMTgsXG5cdFx0c3VmZml4OiAncXVpbnRoJyxcblx0XHRtZXRyaWM6ICdhdHRvJyxcblx0XHRtOiAnYScsXG5cdH0sXG5cdHtcblx0XHRvcmRlcjogMWUtMTUsXG5cdFx0c3VmZml4OiAncXVhZHRoJyxcblx0XHRtZXRyaWM6ICdmZW10bycsXG5cdFx0bTogJ2YnLFxuXHR9LFxuXHR7XG5cdFx0b3JkZXI6IDFlLTEyLFxuXHRcdHN1ZmZpeDogJ3RyaWx0aCcsXG5cdFx0bWV0cmljOiAncGljbycsXG5cdFx0bTogJ3AnLFxuXHR9LFxuXHR7XG5cdFx0b3JkZXI6IDFlLTksXG5cdFx0c3VmZml4OiAnYmlsdGgnLFxuXHRcdG1ldHJpYzogJ25hbm8nLFxuXHRcdG06ICduJyxcblx0fSxcblx0e1xuXHRcdG9yZGVyOiAxZS02LFxuXHRcdHN1ZmZpeDogJ21pbHRoJyxcblx0XHRtZXRyaWM6ICdtaXJjbycsXG5cdFx0bTogJ868Jyxcblx0fSxcblx0e1xuXHRcdG9yZGVyOiAxZS0zLFxuXHRcdHN1ZmZpeDogJ3Roc3RoJyxcblx0XHRtZXRyaWM6ICdtaWxsaScsXG5cdFx0bTogJ20nLFxuXHR9LFxuXTtcblxuY29uc3QgRF9JTlRMX0FNT1VOVF9MVDEgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ2VuLVVTJywge1xuXHRub3RhdGlvbjogJ3N0YW5kYXJkJyxcblx0bWF4aW11bVNpZ25pZmljYW50RGlnaXRzOiA2LFxufSk7XG5cbmNvbnN0IERfSU5UTF9BTU9VTlRfR1QxID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdlbi1VUycsIHtcblx0bm90YXRpb246ICdzdGFuZGFyZCcsXG5cdG1heGltdW1GcmFjdGlvbkRpZ2l0czogMyxcbn0pO1xuXG5jb25zdCBEX0lOVExfQU1PVU5UX0dUMUUzID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdlbi1VUycsIHtcblx0bm90YXRpb246ICdzdGFuZGFyZCcsXG5cdG1heGltdW1TaWduaWZpY2FudERpZ2l0czogNixcbn0pO1xuXG5jb25zdCBEX0lOVExfQU1PVU5UX0kxRTMgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ2VuLVVTJywge1xuXHRub3RhdGlvbjogJ3N0YW5kYXJkJyxcblx0bWF4aW11bVNpZ25pZmljYW50RGlnaXRzOiA0LFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRfYW1vdW50KHhfYW1vdW50OiBudW1iZXIsIGJfc2hvcnRlcj1mYWxzZSk6IHN0cmluZyB7XG5cdC8vIGlmKGJfc2hvcnRlcikgZGVidWdnZXI7XG5cblx0Ly8gemVyb1xuXHRpZigwID09PSB4X2Ftb3VudCkgcmV0dXJuICcwJztcblxuXHQvLyBsZWZ0IHNpZGUgb2YgZGVpbWNhbFxuXHRpZih4X2Ftb3VudCA+PSAxZTYpIHtcblx0XHRmb3IoY29uc3QgZ2NfYWJiciBvZiBBX05VTUVSSUNfR1QxKSB7XG5cdFx0XHRpZih4X2Ftb3VudCA+PSBnY19hYmJyLm9yZGVyKSB7XG5cdFx0XHRcdHJldHVybiAoeF9hbW91bnQgLyBnY19hYmJyLm9yZGVyKS50b1ByZWNpc2lvbigzKSsnICcrZ2NfYWJici5zdWZmaXg7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdC8vIHJpZ2h0IHNpZGUgb2YgZGVjaW1hbFxuXHRlbHNlIGlmKHhfYW1vdW50IDwgMSkge1xuXHRcdGZvcihjb25zdCBnY19hYmJyIG9mIEFfTlVNRVJJQ19MVDEpIHtcblx0XHRcdGlmKHhfYW1vdW50IDw9IGdjX2FiYnIub3JkZXIpIHtcblx0XHRcdFx0cmV0dXJuICh4X2Ftb3VudCAqIGdjX2FiYnIub3JkZXIpLnRvUHJlY2lzaW9uKDMpKycgJytnY19hYmJyLm1ldHJpYztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBsZXNzIHRoYW4gMVxuXHRcdHJldHVybiBEX0lOVExfQU1PVU5UX0xUMS5mb3JtYXQoeF9hbW91bnQpO1xuXHR9XG5cblx0Ly8gYmV0d2VlbiAxayBhbmQgMU1cblx0aWYoeF9hbW91bnQgPj0gMWUzKSB7XG5cdFx0Ly8gbWFrZSB0aG91c2FuZHMgc2hvcnRlclxuXHRcdGlmKGJfc2hvcnRlcikge1xuXHRcdFx0cmV0dXJuIERfSU5UTF9BTU9VTlRfSTFFMy5mb3JtYXQoeF9hbW91bnQgLyAxZTMpKycgayc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIERfSU5UTF9BTU9VTlRfR1QxRTMuZm9ybWF0KHhfYW1vdW50KTtcblx0fVxuXG5cdC8vIGdyZWF0ZXIgdGhhbiAxXG5cdHJldHVybiBEX0lOVExfQU1PVU5UX0dUMS5mb3JtYXQoeF9hbW91bnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0X2ZpYXQoeF9hbW91bnQ6IG51bWJlciwgc2lfZmlhdDogQ29pbkdlY2tvRmlhdD0ndXNkJywgYl9vbWl0X3NpZ249ZmFsc2UsIG5fZGVjaW1hbHM9Mik6IHN0cmluZyB7XG5cdGNvbnN0IHNfZm9ybWF0dGVkID0geF9hbW91bnQgPCAxPyBEX0lOVExfVVNEX0xUMS5mb3JtYXQoeF9hbW91bnQpOiBEX0lOVExfVVNELmZvcm1hdCh4X2Ftb3VudCk7XG5cblx0cmV0dXJuIGJfb21pdF9zaWduPyBzX2Zvcm1hdHRlZC5yZXBsYWNlKC9eWyRdLywgJycpOiBzX2Zvcm1hdHRlZDtcbn1cblxuLy8gLyoqXG4vLyAgKiByZXR1cm5zIHRoZSBmaWF0IGVxdWl2YWxlbnQgb2YgdGhlIGdpdmVuIHRva2VuIGFtb3VudFxuLy8gICovXG4vLyBleHBvcnQgZnVuY3Rpb24gYW1vdW50X3RvX2ZpYXQoeF9hbW91bnQ6IG51bWJlciwga190b2tlbjogVG9rZW4sIGJfb21pdF9zaWduPWZhbHNlKTogc3RyaW5nIHtcbi8vIFx0cmV0dXJuIGZvcm1hdF9maWF0KEhfVkVSU1VTX1VTRFtrX3Rva2VuLmRlZi5pcmldLnZhbHVlICogeF9hbW91bnQsIGJfb21pdF9zaWduKTtcbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIGFiYnJldmlhdGVfYWRkcihzYV9hZGRyOiBzdHJpbmcpIHtcblx0cmV0dXJuIHNhX2FkZHIucmVwbGFjZSgvXihcXHcrMS4uLikuKyguezd9KS8sICckMVsuLi5dJDInKTtcbn1cbiIsImltcG9ydCB7XG5cdGNyZWF0ZV9zdG9yZV9jbGFzcyxcblx0V3JpdGFibGVTdG9yZSxcblx0V3JpdGFibGVTdG9yZU1hcCxcbn0gZnJvbSAnLi9fYmFzZSc7XG5cbmltcG9ydCB7U0lfU1RPUkVfV0VCX0FQSVMsIFhUX01JTlVURVN9IGZyb20gJyMvc2hhcmUvY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHtSZXNvdXJjZX0gZnJvbSAnIy9tZXRhL3Jlc291cmNlJztcbmltcG9ydCB0eXBlIHtSZXNwb25zZUNhY2hlLCBXZWJBcGksIFdlYkFwaVBhdGh9IGZyb20gJyMvbWV0YS93ZWItYXBpJztcbmltcG9ydCB7YnVmZmVyX3RvX2Jhc2U2NCwgc2hhMjU2X3N5bmMsIHRleHRfdG9fYnVmZmVyfSBmcm9tICcjL3V0aWwvZGF0YSc7XG5pbXBvcnQgdHlwZSB7IFZhbHVlcyB9IGZyb20gJyMvbWV0YS9iZWx0JztcbmltcG9ydCB7IERpY3QsIEpzb25PYmplY3QsIG9kZSwgb2RlcmFjIH0gZnJvbSAnIy91dGlsL2JlbHQnO1xuaW1wb3J0IHR5cGUgeyBNZXJnZSB9IGZyb20gJ3RzLXRvb2xiZWx0L291dC9PYmplY3QvTWVyZ2UnO1xuXG5leHBvcnQgY29uc3QgQV9DT0lOR0VDS09fVlMgPSBbXG5cdCdidGMnLFxuXHQnZXRoJyxcblx0J2x0YycsXG5cdCdiY2gnLFxuXHQnYm5iJyxcblx0J2VvcycsXG5cdCd4cnAnLFxuXHQneGxtJyxcblx0J2xpbmsnLFxuXHQnZG90Jyxcblx0J3lmaScsXG5cdCd1c2QnLFxuXHQnYWVkJyxcblx0J2FycycsXG5cdCdhdWQnLFxuXHQnYmR0Jyxcblx0J2JoZCcsXG5cdCdibWQnLFxuXHQnYnJsJyxcblx0J2NhZCcsXG5cdCdjaGYnLFxuXHQnY2xwJyxcblx0J2NueScsXG5cdCdjemsnLFxuXHQnZGtrJyxcblx0J2V1cicsXG5cdCdnYnAnLFxuXHQnaGtkJyxcblx0J2h1ZicsXG5cdCdpZHInLFxuXHQnaWxzJyxcblx0J2lucicsXG5cdCdqcHknLFxuXHQna3J3Jyxcblx0J2t3ZCcsXG5cdCdsa3InLFxuXHQnbW1rJyxcblx0J214bicsXG5cdCdteXInLFxuXHQnbmduJyxcblx0J25vaycsXG5cdCduemQnLFxuXHQncGhwJyxcblx0J3BrcicsXG5cdCdwbG4nLFxuXHQncnViJyxcblx0J3NhcicsXG5cdCdzZWsnLFxuXHQnc2dkJyxcblx0J3RoYicsXG5cdCd0cnknLFxuXHQndHdkJyxcblx0J3VhaCcsXG5cdCd2ZWYnLFxuXHQndm5kJyxcblx0J3phcicsXG5cdCd4ZHInLFxuXHQneGFnJyxcblx0J3hhdScsXG5cdCdiaXRzJyxcblx0J3NhdHMnLFxuXTtcblxuZXhwb3J0IHR5cGUgQ29pbkdlY2tvRmlhdCA9IFZhbHVlczx0eXBlb2YgQV9DT0lOR0VDS09fVlM+O1xuXG5jb25zdCBjb2luZ2Vja29fdXJsID0gKGFfY29pbnM6IHN0cmluZ1tdLCBzaV92ZXJzdXM6IENvaW5HZWNrb0ZpYXQpID0+ICdodHRwczovL2FwaS5jb2luZ2Vja28uY29tL2FwaS92My9zaW1wbGUvcHJpY2U/J1xuXHQrbmV3IFVSTFNlYXJjaFBhcmFtcyhvZGUoe1xuXHRcdGlkczogYV9jb2lucy5qb2luKCcsJyksXG5cdFx0dnNfY3VycmVuY2llczogc2lfdmVyc3VzLFxuXHRcdGluY2x1ZGVfbGFzdF91cGRhdGVkX2F0OiAndHJ1ZScsXG5cdH0pKTtcblxudHlwZSBDb2luR2Vja29TaW1wbGVQcmljZTxcblx0c2lfY29pbiBleHRlbmRzIHN0cmluZz1zdHJpbmcsXG5cdHNpX3ZlcnN1cyBleHRlbmRzIENvaW5HZWNrb0ZpYXQ9Q29pbkdlY2tvRmlhdCxcbj4gPSBSZWNvcmQ8c2lfY29pbiwgTWVyZ2U8e1xuXHRbc2lfdiBpbiBzaV92ZXJzdXNdOiBudW1iZXI7XG59LCB7XG5cdGxhc3RfdXBkYXRlZF9hdDogbnVtYmVyO1xufT4+O1xuXG5leHBvcnQgY29uc3QgQ29pbkdlY2tvID0ge1xuXHRhc3luYyBjb2luc1ZlcnN1cyhhX2NvaW5zOiBzdHJpbmdbXSwgc2lfdmVyc3VzOiBDb2luR2Vja29GaWF0PSd1c2QnLCB4dF9tYXhfYWdlPTUqWFRfTUlOVVRFUyk6IFByb21pc2U8RGljdDxudW1iZXI+PiB7XG5cdFx0Ly8gbWFwIGVhY2ggY29pbiB0byByZXF1ZXN0IHBhdGhcblx0XHRjb25zdCBhX2FwaXMgPSBhX2NvaW5zLm1hcChzaSA9PiBXZWJBcGlzLnBhdGhGb3IoJ0dFVCcsIGNvaW5nZWNrb191cmwoW3NpXSwgc2lfdmVyc3VzKSkpO1xuXG5cdFx0Ly8gcmVhZCBmcm9tIHN0b3JlXG5cdFx0cmV0dXJuIGF3YWl0IFdlYkFwaXMub3Blbihhc3luYyhrc19hcGlzKSA9PiB7XG5cdFx0XHQvLyBwcmVwIG91dCBtYXBcblx0XHRcdGNvbnN0IGhfb3V0OiBEaWN0PG51bWJlcj4gPSB7fTtcblxuXHRcdFx0Ly8gdHJ5IHRvIHVzZSBjYWNoZVxuXHRcdFx0aWYoeHRfbWF4X2FnZSA+IDApIHtcblx0XHRcdFx0Ly8gZXhwaXJ5IGN1dG9mZlxuXHRcdFx0XHRjb25zdCB4dF9jdXRvZmYgPSBEYXRlLm5vdygpIC0geHRfbWF4X2FnZTtcblxuXHRcdFx0XHQvLyBpZiBjYWNoZSBpcyBzdGlsbCB2YWxpZFxuXHRcdFx0XHRsZXQgYl9jYWNoZV92YWxpZCA9IHRydWU7XG5cblx0XHRcdFx0Ly8gZWFjaCBjb2luIGJlaW5nIHJlcXVlc3RlZFxuXHRcdFx0XHRmb3IobGV0IGlfY29pbj0wOyBpX2NvaW48YV9jb2lucy5sZW5ndGg7IGlfY29pbisrKSB7XG5cdFx0XHRcdFx0Y29uc3QgZ19hcGkgPSBrc19hcGlzLmF0KGFfYXBpc1tpX2NvaW5dKTtcblxuXHRcdFx0XHRcdC8vIG5vdCB5ZXQgc3RhbGVcblx0XHRcdFx0XHRpZihnX2FwaSAmJiBnX2FwaS50aW1lID4geHRfY3V0b2ZmKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBzaV9jb2luID0gYV9jb2luc1tpX2NvaW5dO1xuXHRcdFx0XHRcdFx0aF9vdXRbc2lfY29pbl0gPSAoZ19hcGkucmVzcG9uc2UuY2FjaGUgYXMgQ29pbkdlY2tvU2ltcGxlUHJpY2UpW3NpX2NvaW5dW3NpX3ZlcnN1c10hO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBlbmNvdW50ZXJlZCBzdGFsZSBlbnRyeVxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0Yl9jYWNoZV92YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY2FjaGUgaXMgc3RpbGwgdmFsaWQ7IHJldHVybiByZXNwb25zZXNcblx0XHRcdFx0aWYoYl9jYWNoZV92YWxpZCkge1xuXHRcdFx0XHRcdHJldHVybiBoX291dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBmZXRjaCBmcm9tIGFwaVxuXHRcdFx0Y29uc3QgZF9yZXMgPSBhd2FpdCBmZXRjaChjb2luZ2Vja29fdXJsKGFfY29pbnMsIHNpX3ZlcnN1cykpO1xuXG5cdFx0XHQvLyBsb2FkIHJlc3BvbnNlXG5cdFx0XHRjb25zdCBoX3Jlc3BvbnNlID0gYXdhaXQgZF9yZXMuanNvbigpIGFzIENvaW5HZWNrb1NpbXBsZVByaWNlPHN0cmluZywgdHlwZW9mIHNpX3ZlcnN1cz47XG5cblx0XHRcdC8vIHJlZiByYXcgY2FjaGVcblx0XHRcdGNvbnN0IGhfY2FjaGUgPSBrc19hcGlzLnJhdztcblxuXHRcdFx0Ly8gY2FjaGUgZGF0ZXRpbWVcblx0XHRcdGNvbnN0IHh0X25vdyA9IERhdGUubm93KCk7XG5cdFx0XHRmb3IoY29uc3QgW3NpX2NvaW4sIGdfY29pbl0gb2Ygb2RlKGhfcmVzcG9uc2UpKSB7XG5cdFx0XHRcdGNvbnN0IGdfY2FjaGUgPSBoX2NhY2hlW3NpX2NvaW5dID0gaF9jYWNoZVtzaV9jb2luXSB8fCB7fTtcblx0XHRcdFx0Z19jYWNoZS5yZXNwb25zZSA9IGdfY29pbjtcblx0XHRcdFx0Z19jYWNoZS50aW1lID0geHRfbm93O1xuXHRcdFx0XHRoX291dFtzaV9jb2luXSA9IGdfY29pbltzaV92ZXJzdXNdITtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGhfb3V0O1xuXHRcdH0pO1xuXHR9LFxufTtcblxuZXhwb3J0IGNvbnN0IFdlYkFwaXMgPSBjcmVhdGVfc3RvcmVfY2xhc3Moe1xuXHRzdG9yZTogU0lfU1RPUkVfV0VCX0FQSVMsXG5cdGV4dGVuc2lvbjogJ21hcCcsXG5cdGNsYXNzOiBjbGFzcyBXZWJBcGlzSSBleHRlbmRzIFdyaXRhYmxlU3RvcmVNYXA8dHlwZW9mIFNJX1NUT1JFX1dFQl9BUElTPiB7XG5cdFx0c3RhdGljIHBhdGhGb3Ioc2lfbWV0aG9kOiBXZWJBcGlbJ2ludGVyZmFjZSddWydtZXRob2QnXSwgcF9hcGk6IHN0cmluZyk6IFdlYkFwaVBhdGgge1xuXHRcdFx0Ly8gZ2VuZXJhdGUgaGFzaFxuXHRcdFx0Y29uc3Qgc19oYXNoID0gYnVmZmVyX3RvX2Jhc2U2NChzaGEyNTZfc3luYyh0ZXh0X3RvX2J1ZmZlcihzaV9tZXRob2QrJyAnK3BfYXBpKSkpO1xuXG5cdFx0XHQvLyBwcm9kdWNlIHBhdGhcblx0XHRcdHJldHVybiBgL2NhY2hlLndlYi1hcGkvc2hhMjU2LiR7c19oYXNofWA7XG5cdFx0fVxuXG5cdFx0c3RhdGljIHBhdGhGcm9tKGdfYXBpOiBXZWJBcGlbJ2ludGVyZmFjZSddKTogV2ViQXBpUGF0aCB7XG5cdFx0XHRyZXR1cm4gV2ViQXBpc0kucGF0aEZvcihnX2FwaS5tZXRob2QsIGdfYXBpLnBhdGgpO1xuXHRcdH1cblx0fSxcbn0pO1xuXG4iLCJpbXBvcnQge1xuXHRjcmVhdGVfc3RvcmVfY2xhc3MsXG5cdFdyaXRhYmxlU3RvcmVEaWN0LFxuXHRXcml0YWJsZVN0b3JlTWFwLFxufSBmcm9tICcuL19iYXNlJztcblxuaW1wb3J0IHsgU0lfU1RPUkVfQUdFTlRTIH0gZnJvbSAnIy9zaGFyZS9jb25zdGFudHMnO1xuaW1wb3J0IHR5cGUgeyBSZXNvdXJjZSB9IGZyb20gJyMvbWV0YS9yZXNvdXJjZSc7XG5pbXBvcnQgdHlwZSB7IENvbnRhY3QsIENvbnRhY3RQYXRoIH0gZnJvbSAnIy9tZXRhL2NvbnRhY3QnO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRQYXRoLCBGYW1pbHlLZXkgfSBmcm9tICcjL21ldGEvY2hhaW4nO1xuaW1wb3J0IHsgeXdfY2hhaW4sIHl3X2ZhbWlseSB9IGZyb20gJyMvYXBwL21lbSc7XG5cblxuZXhwb3J0IGNvbnN0IEFnZW50cyA9IGNyZWF0ZV9zdG9yZV9jbGFzcyh7XG5cdHN0b3JlOiBTSV9TVE9SRV9BR0VOVFMsXG5cdGV4dGVuc2lvbjogJ21hcCcsXG5cdGNsYXNzOiBjbGFzcyBBZ2VudHNJIGV4dGVuZHMgV3JpdGFibGVTdG9yZU1hcDx0eXBlb2YgU0lfU1RPUkVfQUdFTlRTPiB7XG5cdFx0c3RhdGljIHBhdGhGb3JBZ2VudChzYV9hZGRyOiBzdHJpbmcsIHNpX2ZhbWlseTogRmFtaWx5S2V5PXl3X2ZhbWlseS5nZXQoKSk6IEFnZW50UGF0aCB7XG5cdFx0XHRyZXR1cm4gYC9mYW1pbHkuJHtzaV9mYW1pbHl9L2FnZW50LiR7c2FfYWRkci5yZXBsYWNlKC9eXFx3KzEvLCAnJyl9YDtcblx0XHR9XG5cblx0XHRzdGF0aWMgcGF0aEZvckNvbnRhY3Qoc2FfYWRkcjogc3RyaW5nLCBzaV9mYW1pbHk6IEZhbWlseUtleT15d19mYW1pbHkuZ2V0KCkpOiBDb250YWN0UGF0aCB7XG5cdFx0XHRyZXR1cm4gYCR7QWdlbnRzSS5wYXRoRm9yQWdlbnQoc2FfYWRkciwgc2lfZmFtaWx5KX0vYXMuY29udGFjdGA7XG5cdFx0fVxuXG5cdFx0c3RhdGljIHBhdGhGcm9tQ29udGFjdChnX2NvbnRhY3Q6IENvbnRhY3RbJ2ludGVyZmFjZSddKTogQ29udGFjdFBhdGgge1xuXHRcdFx0cmV0dXJuIEFnZW50c0kucGF0aEZvckNvbnRhY3QoZ19jb250YWN0LmFkZHJlc3MsIGdfY29udGFjdC5mYW1pbHkpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIExvYWRzIGFnZW50cyBzdG9yZSBhbmQgZmluZHMgdGhlIGNvbnRhY3QgYnkgaXRzIHBhdGhcblx0XHQgKi9cblx0XHRzdGF0aWMgYXN5bmMgZ2V0Q29udGFjdChwX2NvbnRhY3Q6IENvbnRhY3RQYXRoKTogUHJvbWlzZTxDb250YWN0WydpbnRlcmZhY2UnXSB8IG51bGw+IHtcblx0XHRcdC8vIHJlYWQgYWdlbnRzIHN0b3JlXG5cdFx0XHRjb25zdCBrc19hZ2VudHMgPSBhd2FpdCBBZ2VudHMucmVhZCgpO1xuXG5cdFx0XHQvLyBmaW5kIGNvbnRhY3Rcblx0XHRcdHJldHVybiBrc19hZ2VudHMuYXQocF9jb250YWN0KSBhcyBDb250YWN0WydpbnRlcmZhY2UnXTtcblx0XHR9XG5cblx0XHQqIGNvbnRhY3RzKHNpX2ZhbWlseTogRmFtaWx5S2V5PXl3X2ZhbWlseS5nZXQoKSk6IEl0ZXJhYmxlSXRlcmF0b3I8W0NvbnRhY3RQYXRoLCBDb250YWN0WydpbnRlcmZhY2UnXV0+IHtcblx0XHRcdC8vIHJlZiBjYWNoZVxuXHRcdFx0Y29uc3QgaF9jYWNoZSA9IHRoaXMuX3dfY2FjaGU7XG5cblx0XHRcdC8vIGZpbHRlciBieSBmYW1pbHkgcHJlZml4XG5cdFx0XHRjb25zdCBzX2FnZW50X3ByZWZpeDogQWdlbnRQYXRoID0gYC9mYW1pbHkuJHtzaV9mYW1pbHl9L2FnZW50LmA7XG5cblx0XHRcdC8vIGVhY2ggYWdlbnQgaW4gY2FjaGVcblx0XHRcdGZvcihjb25zdCBwX2FnZW50IGluIGhfY2FjaGUpIHtcblx0XHRcdFx0Ly8gYWdlbnQgaW4gZGlmZmVyZW50IGZhbWlseTsgc2tpcFxuXHRcdFx0XHRpZighcF9hZ2VudC5zdGFydHNXaXRoKHNfYWdlbnRfcHJlZml4KSkgY29udGludWU7XG5cblx0XHRcdFx0Ly8gbm90IGEgY29udGFjdDsgc2tpcFxuXHRcdFx0XHRpZighcF9hZ2VudC5lbmRzV2l0aCgnL2FzLmNvbnRhY3QnKSkgY29udGludWU7XG5cblx0XHRcdFx0Ly8gYWdlbnQgaXMgYSBjb250YWN0XG5cdFx0XHRcdHlpZWxkIFtwX2FnZW50IGFzIENvbnRhY3RQYXRoLCBoX2NhY2hlW3BfYWdlbnRdXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRhc3luYyBwdXRDb250YWN0KGdfcmVzOiBDb250YWN0WydpbnRlcmZhY2UnXSk6IFByb21pc2U8Q29udGFjdFBhdGg+IHtcblx0XHRcdC8vIHByZXBhcmUgY29udGFjdCBwYXRoXG5cdFx0XHRjb25zdCBwX3JlcyA9IEFnZW50c0kucGF0aEZyb21Db250YWN0KGdfcmVzKTtcblxuXHRcdFx0Ly8gdXBkYXRlIGNhY2hlXG5cdFx0XHR0aGlzLl93X2NhY2hlW3BfcmVzXSA9IGdfcmVzO1xuXG5cdFx0XHQvLyBhdHRlbXB0IHRvIHNhdmVcblx0XHRcdGF3YWl0IHRoaXMuc2F2ZSgpO1xuXG5cdFx0XHQvLyByZXR1cm4gcGF0aFxuXHRcdFx0cmV0dXJuIHBfcmVzO1xuXHRcdH1cblx0fSxcbn0pO1xuIiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjI0XFxcIj5cXG5cXHQ8cGF0aCBzdHlsZT1cXFwiZmlsbDogdmFyKC0tc3ZnLWNvbG9yLWZnLCBjdXJyZW50Q29sb3IpO1xcXCIgZD1cXFwiTTMgMTNINVYxMUgzVjEzWk0zIDE3SDVWMTVIM1YxN1pNNSAyMVYxOUgzQzMgMjAuMSAzLjg5IDIxIDUgMjFaTTMgOUg1VjdIM1Y5Wk0xNSAyMUgxN1YxOUgxNVYyMVpNMTkgM0g5QzcuODkgMyA3IDMuOSA3IDVWMTVDNyAxNi4xIDcuODkgMTcgOSAxN0gxOUMyMC4xIDE3IDIxIDE2LjEgMjEgMTVWNUMyMSAzLjkgMjAuMSAzIDE5IDNaTTE5IDE1SDlWNUgxOVYxNVpNMTEgMjFIMTNWMTlIMTFWMjFaTTcgMjFIOVYxOUg3VjIxWlxcXCIgLz5cXG48L3N2Zz5cXG5cIiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuXG5cdGltcG9ydCB7IHN5c2VyciB9IGZyb20gJyMjL2NvbW1vbic7XG5cdGltcG9ydCBTWF9JQ09OX0NPUFkgZnJvbSAnIy9pY29uL2NvcHkuc3ZnP3Jhdyc7XG5cblx0LyoqXG5cdCAqIGh1bWFuLXJlYWRhYmxlIHBhcnRcblx0ICovXG5cdGV4cG9ydCBsZXQgcHJlZml4ID0gJyc7XG5cblx0LyoqXG5cdCAqIGFkZHJlc3MgcGFydFxuXHQgKi9cblx0ZXhwb3J0IGxldCBhZGRyZXNzOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIElmIGB0cnVlYCwgZGlzcGxheSBjb3B5IGljb24gYW5kIGJpbmRzIHRvIGNsaWNrIGV2ZW50c1xuXHQgKi9cblx0ZXhwb3J0IGxldCBjb3B5YWJsZTogYm9vbGVhbiB8IHN0cmluZyA9IGZhbHNlO1xuXHRjb25zdCBiX2NvcHlhYmxlID0gISFjb3B5YWJsZTtcblx0Y29uc3Qgc19jb3B5X3N0eWxlID0gdHJ1ZSA9PT0gY29weWFibGU/ICdpY29uJzogY29weWFibGUgfHwgJyc7XG5cblxuXHRsZXQgZG1fY29waWVkOiBIVE1MRWxlbWVudDtcblxuXHRsZXQgYl9jb3B5X2NvbmZpcm0gPSBmYWxzZTtcblx0YXN5bmMgZnVuY3Rpb24gY29weSgpIHtcblx0XHQvLyBhdHRlbXB0IHRvIHBlcmZvcm0gY29weVxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChhZGRyZXNzKTtcblx0XHR9XG5cdFx0Ly8gdW5hYmxlIHRvIHVzZSBjbGlwYm9hcmRcblx0XHRjYXRjaChlX3dyaXRlKSB7XG5cdFx0XHRzeXNlcnIoe1xuXHRcdFx0XHR0ZXh0OiAnRmFpbGVkIHRvIHdyaXRlIHRvIHRoZSBuYXZpZ2F0b3IgY2xpcGJvYXJkJyxcblx0XHRcdFx0ZXJyb3I6IGVfd3JpdGUsXG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGJfY29weV9jb25maXJtID0gdHJ1ZTtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGJfY29weV9jb25maXJtID0gZmFsc2U7XG5cdFx0XHQvLyBkbV9jb3BpZWQuc3R5bGUub3BhY2l0eSA9ICcwJztcblxuXHRcdFx0Ly8gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHQvLyBcdGJfY29weV9jb25maXJtID0gZmFsc2U7XG5cdFx0XHQvLyB9LCA4NTApO1xuXHRcdH0sIDgwMCk7XG5cdH1cblxuXHQvLyBiaW5kIHRvIGhlYWQgZWxlbWVudFxuXHRsZXQgZG1faGVhZDogSFRNTEVsZW1lbnQ7XG5cblx0Ly8gc2V0IHRydWUgd2hlbiBoZWFkIG92ZXJmbG93c1xuXHRsZXQgYl9oZWFkX292ZXJmbG93cyA9IGZhbHNlO1xuXG5cdG9uTW91bnQoKCkgPT4ge1xuXHRcdGJfaGVhZF9vdmVyZmxvd3MgPSBkbV9oZWFkLnNjcm9sbFdpZHRoID4gZG1faGVhZC5vZmZzZXRXaWR0aDtcblx0fSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG5cdEBpbXBvcnQgJy4vX2Jhc2UubGVzcyc7XG5cblx0LmFkZHJlc3Mge1xuXHRcdHdpZHRoOiBjYWxjKDEwMCUgLSAyLjVjaCk7XG5cdFx0YWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuXG5cdFx0Y29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXRleHQtbWVkKTtcblx0XHRkaXNwbGF5OiBpbmxpbmUtZmxleDtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0XHQmLmNvcHlhYmxlIHtcblx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0XHR3aWR0aDogY2FsYygxMDAlIC0gMy41Y2gpO1xuXHRcdFx0Y3Vyc29yOiBjb3B5O1xuXHRcdH1cblxuXHRcdD4ucHJlZml4IHtcblx0XHRcdC5mb250KHRpbnkpO1xuXHRcdFx0ZmxleC1zaHJpbms6IDA7XG5cdFx0XHRtYXJnaW4tcmlnaHQ6IDAuMjVlbTtcblx0XHR9XG5cblx0XHQ+LmhlYWQge1xuXHRcdFx0LmZvbnQobW9uby10aW55KTtcblx0XHRcdGZsZXg6IGF1dG87XG5cdFx0XHRtaW4td2lkdGg6IDEwY2g7XG5cdFx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdH1cblxuXHRcdD4udGFpbCB7XG5cdFx0XHQuZm9udChtb25vLXRpbnkpO1xuXHRcdFx0ZmxleDogMDtcblx0XHRcdG1pbi13aWR0aDogN2NoO1xuXHRcdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblxuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5cdFx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdH1cblxuXHRcdD4uY29weSB7XG5cdFx0XHRjb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItcHJpbWFyeSk7XG5cblx0XHRcdCYuaWNvbiB7XG5cdFx0XHRcdC0taWNvbi1kaWFtZXRlcjogMjJweDtcblx0XHRcdFx0LS1pY29uLWNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5KTtcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiA2cHg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Pi5jb3BpZWQge1xuXHRcdFx0b3BhY2l0eTogMDtcblx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdGxlZnQ6IGNhbGMoNTAlIC0gNDBweCk7XG5cdFx0XHR0b3A6IC02cHg7XG5cdFx0XHRjb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItYmxhY2spO1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogNnB4O1xuXHRcdFx0cGFkZGluZzogOHB4IDIwcHg7XG5cdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci10ZXh0LWxpZ2h0KTtcblx0XHRcdGJveC1zaGFkb3c6IC0ycHggM3B4IDZweDtcblx0XHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0XHQmOm5vdCguY29uZmlybSkge1xuXHRcdFx0XHR0cmFuc2l0aW9uOiBvcGFjaXR5IDgwMG1zIGxpbmVhcjtcblx0XHRcdH1cblxuXHRcdFx0Ji5jb25maXJtIHtcblx0XHRcdFx0b3BhY2l0eTogMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbjwvc3R5bGU+XG5cbjxzcGFuIGNsYXNzPVwiYWRkcmVzc1wiIGNsYXNzOmNvcHlhYmxlPXtiX2NvcHlhYmxlfSBvbjpjbGljaz17Yl9jb3B5YWJsZT8gKCkgPT4gY29weSgpOiB2b2lkIDB9PlxuXHR7I2lmIHByZWZpeH1cblx0XHQ8c3BhbiBjbGFzcz1cInByZWZpeFwiPlxuXHRcdFx0e3ByZWZpeH1cblx0XHQ8L3NwYW4+XG5cdHsvaWZ9XG5cdDxzcGFuIGNsYXNzPVwiaGVhZFwiIGJpbmQ6dGhpcz17ZG1faGVhZH0+XG5cdFx0e2FkZHJlc3N9XG5cdDwvc3Bhbj5cblx0PHNwYW4gY2xhc3M9XCJ0YWlsXCIgY2xhc3M6ZGlzcGxheV9ub25lPXshYl9oZWFkX292ZXJmbG93c30+XG5cdFx0e2FkZHJlc3N9XG5cdDwvc3Bhbj5cblxuXHR7I2lmIGJfY29weWFibGV9XG5cdFx0eyNpZiAnaWNvbicgPT09IHNfY29weV9zdHlsZX1cblx0XHRcdDxzcGFuIGNsYXNzPVwiY29weSBpY29uXCI+XG5cdFx0XHRcdHtAaHRtbCBTWF9JQ09OX0NPUFl9XG5cdFx0XHQ8L3NwYW4+XG5cdFx0ezplbHNlfVxuXHRcdFx0PHNwYW4gY2xhc3M9XCJjb3B5XCI+XG5cdFx0XHRcdENvcHlcblx0XHRcdDwvc3Bhbj5cblx0XHR7L2lmfVxuXG5cdFx0PHNwYW4gY2xhc3M9XCJjb3BpZWRcIiBjbGFzczpjb25maXJtPXtiX2NvcHlfY29uZmlybX0gYmluZDp0aGlzPXtkbV9jb3BpZWR9PlxuXHRcdFx0Q29waWVkIVxuXHRcdDwvc3Bhbj5cblx0ey9pZn1cbjwvc3Bhbj5cbiIsIlxuaW1wb3J0IHtcblx0Y3JlYXRlX3N0b3JlX2NsYXNzLFxuXHRXcml0YWJsZVN0b3JlQXJyYXksXG59IGZyb20gJy4vX2Jhc2UnO1xuXG5pbXBvcnQgeyBSX0JFQ0gzMiwgU0lfU1RPUkVfQ0hBSU5TLCBTSV9TVE9SRV9FVkVOVFMgfSBmcm9tICcjL3NoYXJlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyB5d19jaGFpbiB9IGZyb20gJyMvYXBwL21lbSc7XG5pbXBvcnQgeyBvZGUgfSBmcm9tICcjL3V0aWwvYmVsdCc7XG5pbXBvcnQgeyBiYXNlNjRfdG9fYnVmZmVyLCByaXBlbWQxNjBfc3luYywgc2hhMjU2X3N5bmMgfSBmcm9tICcjL3V0aWwvZGF0YSc7XG5pbXBvcnQgdHlwZSB7IEV2ZW50VHlwZUtleSwgTG9nRXZlbnQgfSBmcm9tICcjL21ldGEvc3RvcmUnO1xuaW1wb3J0IHR5cGUgeyBBY2NvdW50UGF0aCB9IGZyb20gJyMvbWV0YS9hY2NvdW50JztcbmltcG9ydCB0eXBlIHsgQmVjaDMyIH0gZnJvbSAnIy9tZXRhL2NoYWluJztcblxuZXhwb3J0IGludGVyZmFjZSBFdmVudEZpbHRlckNvbmZpZyB7XG5cdHR5cGU/OiBFdmVudFR5cGVLZXk7XG5cdGFjY291bnQ/OiBBY2NvdW50UGF0aDtcblx0b3duZXI/OiBCZWNoMzIuU3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgRXZlbnRzID0gY3JlYXRlX3N0b3JlX2NsYXNzKHtcblx0c3RvcmU6IFNJX1NUT1JFX0VWRU5UUyxcblx0ZXh0ZW5zaW9uOiAnYXJyYXknLFxuXHRjbGFzczogY2xhc3MgRXZlbnRzSSBleHRlbmRzIFdyaXRhYmxlU3RvcmVBcnJheTx0eXBlb2YgU0lfU1RPUkVfRVZFTlRTPiB7XG5cdFx0c3RhdGljIGFzeW5jIGZpbHRlcihnY19maWx0ZXI6IEV2ZW50RmlsdGVyQ29uZmlnKTogUHJvbWlzZTxJdGVyYWJsZUl0ZXJhdG9yPExvZ0V2ZW50Pj4ge1xuXHRcdFx0Y29uc3Qga3NfZXZlbnRzID0gYXdhaXQgRXZlbnRzLnJlYWQoKSBhcyBFdmVudHNJO1xuXG5cdFx0XHRyZXR1cm4ga3NfZXZlbnRzLmZpbHRlcihnY19maWx0ZXIpO1xuXHRcdH1cblxuXHRcdHN0YXRpYyBhc3luYyBpbnNlcnQoZ19ldmVudDogTG9nRXZlbnQpOiBQcm9taXNlPG51bWJlcj4ge1xuXHRcdFx0cmV0dXJuIGF3YWl0IEV2ZW50cy5vcGVuKGtzID0+IGtzLmluc2VydChnX2V2ZW50KSk7XG5cdFx0fVxuXG5cdFx0KiBmaWx0ZXIoZ2NfZmlsdGVyOiBFdmVudEZpbHRlckNvbmZpZz17fSk6IEl0ZXJhYmxlSXRlcmF0b3I8TG9nRXZlbnQ+IHtcblx0XHRcdGZvcihjb25zdCBnX2V2ZW50IG9mIHRoaXMuX3dfY2FjaGUgYXMgTG9nRXZlbnRbXSkge1xuXHRcdFx0XHRpZihnY19maWx0ZXIudHlwZSAmJiBnY19maWx0ZXIudHlwZSAhPT0gZ19ldmVudC50eXBlKSBjb250aW51ZTtcblx0XHRcdFx0aWYoZ2NfZmlsdGVyLmFjY291bnQgJiYgZ2NfZmlsdGVyLmFjY291bnQgIT09IGdfZXZlbnQuZGF0YVsnYWNjb3VudCddKSBjb250aW51ZTtcblx0XHRcdFx0aWYoZ2NfZmlsdGVyLm93bmVyICYmIGdjX2ZpbHRlci5vd25lciAhPT0gZ19ldmVudC5kYXRhWydvd25lciddKSBjb250aW51ZTtcblxuXHRcdFx0XHR5aWVsZCBnX2V2ZW50O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGFzeW5jIGRlbGV0ZShnX2RlbGV0ZTogTG9nRXZlbnQpOiBQcm9taXNlPG51bWJlcj4ge1xuXHRcdFx0Y29uc3QgYV9ldmVudHMgPSB0aGlzLl93X2NhY2hlIGFzIExvZ0V2ZW50W107XG5cblx0XHRcdGNvbnN0IHh0X2RlbGV0ZSA9IGdfZGVsZXRlLnRpbWU7XG5cblx0XHRcdGNvbnN0IHNpX2RlbGV0ZSA9IEpTT04uc3RyaW5naWZ5KGdfZGVsZXRlKTtcblxuXHRcdFx0REVMRVRJT046IHtcblx0XHRcdFx0Zm9yKGxldCBpX2V2ZW50PTAsIG5sX2V2ZW50cz1hX2V2ZW50cy5sZW5ndGg7IGlfZXZlbnQ8bmxfZXZlbnRzOyBpX2V2ZW50KyspIHtcblx0XHRcdFx0XHRjb25zdCBnX3Rlc3QgPSBhX2V2ZW50c1tpX2V2ZW50XTtcblxuXHRcdFx0XHRcdGlmKHh0X2RlbGV0ZSA9PT0gZ190ZXN0LnRpbWUpIHtcblx0XHRcdFx0XHRcdC8vIGZvdW5kIGVudHJ5XG5cdFx0XHRcdFx0XHRpZihzaV9kZWxldGUgPT09IEpTT04uc3RyaW5naWZ5KGdfdGVzdCkpIHtcblx0XHRcdFx0XHRcdFx0YV9ldmVudHMuc3BsaWNlKGlfZXZlbnQsIDEpO1xuXHRcdFx0XHRcdFx0XHRicmVhayBERUxFVElPTjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpdGVtIHdhcyBub3QgZm91bmRcblx0XHRcdFx0cmV0dXJuIGFfZXZlbnRzLmxlbmd0aDtcblx0XHRcdH1cblxuXHRcdFx0YXdhaXQgdGhpcy5zYXZlKCk7XG5cblx0XHRcdHJldHVybiBhX2V2ZW50cy5sZW5ndGg7XG5cdFx0fVxuXG5cdFx0YXN5bmMgaW5zZXJ0KGdfZXZlbnQ6IExvZ0V2ZW50KTogUHJvbWlzZTxudW1iZXI+IHtcblx0XHRcdGNvbnN0IHh0X2V2ZW50ID0gZ19ldmVudC50aW1lO1xuXG5cdFx0XHRjb25zdCBhX2V2ZW50cyA9IHRoaXMuX3dfY2FjaGUgYXMgTG9nRXZlbnRbXTtcblxuXHRcdFx0Y29uc3Qgc2lfZXZlbnQgPSBKU09OLnN0cmluZ2lmeShnX2V2ZW50KTtcblxuXHRcdFx0SU5TRVJUSU9OOiB7XG5cdFx0XHRcdGZvcihsZXQgaV9ldmVudD0wLCBubF9ldmVudHM9YV9ldmVudHMubGVuZ3RoOyBpX2V2ZW50PG5sX2V2ZW50czsgaV9ldmVudCsrKSB7XG5cdFx0XHRcdFx0Y29uc3QgZ190ZXN0ID0gYV9ldmVudHNbaV9ldmVudF07XG5cblx0XHRcdFx0XHRpZih4dF9ldmVudCA+IGdfdGVzdC50aW1lKSB7XG5cdFx0XHRcdFx0XHRhX2V2ZW50cy5zcGxpY2UoaV9ldmVudCwgMCwgZ19ldmVudCk7XG5cdFx0XHRcdFx0XHRicmVhayBJTlNFUlRJT047XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHNhbWUgZXhhY3QgbWlsbGlzZWNvbmRcblx0XHRcdFx0XHRlbHNlIGlmKHh0X2V2ZW50ID09PSBnX3Rlc3QudGltZSkge1xuXHRcdFx0XHRcdFx0Ly8gZHVwbGljYXRlIGV2ZW50LCBhYm9ydFxuXHRcdFx0XHRcdFx0aWYoc2lfZXZlbnQgPT09IEpTT04uc3RyaW5naWZ5KGdfdGVzdCkpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGFfZXZlbnRzLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBhZGQgZXZlbnQgdG8gbGlzdFxuXHRcdFx0XHRhX2V2ZW50cy5wdXNoKGdfZXZlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBzYXZlIGNoYW5nZXNcblx0XHRcdGF3YWl0IHRoaXMuc2F2ZSgpO1xuXG5cdFx0XHQvLyByZXR1cm4gbmV3IGxpc3QgbGVuZ3RoXG5cdFx0XHRyZXR1cm4gYV9ldmVudHMubGVuZ3RoO1xuXHRcdH1cblx0fSxcbn0pO1xuXG4iLCJpbXBvcnQge1xuXHRjcmVhdGVfc3RvcmVfY2xhc3MsXG5cdFdyaXRhYmxlU3RvcmVEaWN0LFxufSBmcm9tICcuL19iYXNlJztcblxuaW1wb3J0IHtTSV9TVE9SRV9TRVRUSU5HU30gZnJvbSAnIy9zaGFyZS9jb25zdGFudHMnO1xuaW1wb3J0IHR5cGUgeyBEaWN0IH0gZnJvbSAnIy91dGlsL2JlbHQnO1xuXG5cbmV4cG9ydCB0eXBlIFNldHRpbmdzUmVnaXN0cnkgPSB7XG5cdGFsbG93X2ZpbGVfdXJscz86IGJvb2xlYW47XG5cdGUyZV9lbmNyeXB0ZWRfbWVtb3M/OiBEaWN0PHtcblx0XHRlbmFibGVkOiBib29sZWFuO1xuXHRcdHB1Ymxpc2hlZDogYm9vbGVhbjtcblx0fT47XG59O1xuXG5leHBvcnQgdHlwZSBTZXR0aW5nc0tleSA9IGtleW9mIFNldHRpbmdzUmVnaXN0cnk7XG5cbmV4cG9ydCBjb25zdCBTZXR0aW5ncyA9IGNyZWF0ZV9zdG9yZV9jbGFzcyh7XG5cdHN0b3JlOiBTSV9TVE9SRV9TRVRUSU5HUyxcblx0ZXh0ZW5zaW9uOiAnZGljdCcsXG5cdGNsYXNzOiBjbGFzcyBTZXR0aW5nc0kgZXh0ZW5kcyBXcml0YWJsZVN0b3JlRGljdDx0eXBlb2YgU0lfU1RPUkVfU0VUVElOR1M+IHtcblx0XHQvLyBzdGF0aWMgYXN5bmMgZ2V0PHNpX2tleSBleHRlbmRzIFNldHRpbmdzS2V5PihzaV9rZXk6IHNpX2tleSk6IFByb21pc2U8bnVsbCB8IFNldHRpbmdzUmVnaXN0cnlbc2lfa2V5XT4ge1xuXHRcdC8vIFx0cmV0dXJuIGF3YWl0IFNldHRpbmdzLm9wZW4oKGtzX3NldHRpbmdzKSA9PiBrc19zZXR0aW5ncy5nZXQoc2lfa2V5KSk7XG5cdFx0Ly8gfVxuXG5cdFx0Ly8gc3RhdGljIGFzeW5jIHB1dDxcblx0XHQvLyBcdHNpX2tleSBleHRlbmRzIFNldHRpbmdzS2V5LFxuXHRcdC8vIFx0d192YWx1ZSBleHRlbmRzIFNldHRpbmdzUmVnaXN0cnlbc2lfa2V5XSxcblx0XHQvLyA+KHNpX2tleTogc2lfa2V5LCB3X3ZhbHVlOiB3X3ZhbHVlKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Ly8gXHRyZXR1cm4gYXdhaXQgU2V0dGluZ3Mub3Blbigoa3Nfc2V0dGluZ3MpID0+IGtzX3NldHRpbmdzLnB1dChzaV9rZXksIHdfdmFsdWUpKTtcblx0XHQvLyB9XG5cdH0sXG59KTtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlld1xuICogLSBtb2RpZmllZCBkYXZpZHNoaW1qcy9xcmNvZGVqcyBsaWJyYXJ5IGZvciB1c2UgaW4gbm9kZS5qc1xuICogLSBVc2luZyB0aGUgJ1FSQ29kZSBmb3IgSmF2YXNjcmlwdCBsaWJyYXJ5J1xuICogLSBGaXhlZCBkYXRhc2V0IG9mICdRUkNvZGUgZm9yIEphdmFzY3JpcHQgbGlicmFyeScgZm9yIHN1cHBvcnQgZnVsbC1zcGVjLlxuICogLSB0aGlzIGxpYnJhcnkgaGFzIG5vIGRlcGVuZGVuY2llcy5cbiAqXG4gKiBAdmVyc2lvbiAwLjkuMSAoMjAxNi0wMi0xMilcbiAqIEBhdXRob3IgZGF2aWRzaGltanMsIHBhcG5rdWtuXG4gKiBAc2VlIDxhIGhyZWY9XCJodHRwOi8vd3d3LmQtcHJvamVjdC5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL3d3dy5kLXByb2plY3QuY29tLzwvYT5cbiAqIEBzZWUgPGEgaHJlZj1cImh0dHA6Ly9qZXJvbWVldGllbm5lLmdpdGh1Yi5jb20vanF1ZXJ5LXFyY29kZS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vamVyb21lZXRpZW5uZS5naXRodWIuY29tL2pxdWVyeS1xcmNvZGUvPC9hPlxuICogQHNlZSA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2Rhdmlkc2hpbWpzL3FyY29kZWpzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9naXRodWIuY29tL2Rhdmlkc2hpbWpzL3FyY29kZWpzPC9hPlxuICovXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBRUkNvZGUgZm9yIEphdmFTY3JpcHRcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgS2F6dWhpa28gQXJhc2Vcbi8vXG4vLyBVUkw6IGh0dHA6Ly93d3cuZC1wcm9qZWN0LmNvbS9cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4vLyAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4vL1xuLy8gVGhlIHdvcmQgXCJRUiBDb2RlXCIgaXMgcmVnaXN0ZXJlZCB0cmFkZW1hcmsgb2YgXG4vLyBERU5TTyBXQVZFIElOQ09SUE9SQVRFRFxuLy8gICBodHRwOi8vd3d3LmRlbnNvLXdhdmUuY29tL3FyY29kZS9mYXFwYXRlbnQtZS5odG1sXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIFFSOGJpdEJ5dGUoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBRUk1vZGUuTU9ERV84QklUX0JZVEU7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucGFyc2VkRGF0YSA9IFtdO1xuXG4gIC8vIEFkZGVkIHRvIHN1cHBvcnQgVVRGLTggQ2hhcmFjdGVyc1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgYnl0ZUFycmF5ID0gW107XG4gICAgdmFyIGNvZGUgPSB0aGlzLmRhdGEuY2hhckNvZGVBdChpKTtcblxuICAgIGlmIChjb2RlID4gMHgxMDAwMCkge1xuICAgICAgYnl0ZUFycmF5WzBdID0gMHhGMCB8ICgoY29kZSAmIDB4MUMwMDAwKSA+Pj4gMTgpO1xuICAgICAgYnl0ZUFycmF5WzFdID0gMHg4MCB8ICgoY29kZSAmIDB4M0YwMDApID4+PiAxMik7XG4gICAgICBieXRlQXJyYXlbMl0gPSAweDgwIHwgKChjb2RlICYgMHhGQzApID4+PiA2KTtcbiAgICAgIGJ5dGVBcnJheVszXSA9IDB4ODAgfCAoY29kZSAmIDB4M0YpO1xuICAgIH0gZWxzZSBpZiAoY29kZSA+IDB4ODAwKSB7XG4gICAgICBieXRlQXJyYXlbMF0gPSAweEUwIHwgKChjb2RlICYgMHhGMDAwKSA+Pj4gMTIpO1xuICAgICAgYnl0ZUFycmF5WzFdID0gMHg4MCB8ICgoY29kZSAmIDB4RkMwKSA+Pj4gNik7XG4gICAgICBieXRlQXJyYXlbMl0gPSAweDgwIHwgKGNvZGUgJiAweDNGKTtcbiAgICB9IGVsc2UgaWYgKGNvZGUgPiAweDgwKSB7XG4gICAgICBieXRlQXJyYXlbMF0gPSAweEMwIHwgKChjb2RlICYgMHg3QzApID4+PiA2KTtcbiAgICAgIGJ5dGVBcnJheVsxXSA9IDB4ODAgfCAoY29kZSAmIDB4M0YpO1xuICAgIH0gZWxzZSB7XG4gICAgICBieXRlQXJyYXlbMF0gPSBjb2RlO1xuICAgIH1cblxuICAgIHRoaXMucGFyc2VkRGF0YS5wdXNoKGJ5dGVBcnJheSk7XG4gIH1cblxuICB0aGlzLnBhcnNlZERhdGEgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCB0aGlzLnBhcnNlZERhdGEpO1xuXG4gIGlmICh0aGlzLnBhcnNlZERhdGEubGVuZ3RoICE9IHRoaXMuZGF0YS5sZW5ndGgpIHtcbiAgICB0aGlzLnBhcnNlZERhdGEudW5zaGlmdCgxOTEpO1xuICAgIHRoaXMucGFyc2VkRGF0YS51bnNoaWZ0KDE4Nyk7XG4gICAgdGhpcy5wYXJzZWREYXRhLnVuc2hpZnQoMjM5KTtcbiAgfVxufVxuXG5RUjhiaXRCeXRlLnByb3RvdHlwZSA9IHtcbiAgZ2V0TGVuZ3RoOiBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VkRGF0YS5sZW5ndGg7XG4gIH0sXG4gIHdyaXRlOiBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnBhcnNlZERhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBidWZmZXIucHV0KHRoaXMucGFyc2VkRGF0YVtpXSwgOCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBRUkNvZGVNb2RlbCh0eXBlTnVtYmVyLCBlcnJvckNvcnJlY3RMZXZlbCkge1xuICB0aGlzLnR5cGVOdW1iZXIgPSB0eXBlTnVtYmVyO1xuICB0aGlzLmVycm9yQ29ycmVjdExldmVsID0gZXJyb3JDb3JyZWN0TGV2ZWw7XG4gIHRoaXMubW9kdWxlcyA9IG51bGw7XG4gIHRoaXMubW9kdWxlQ291bnQgPSAwO1xuICB0aGlzLmRhdGFDYWNoZSA9IG51bGw7XG4gIHRoaXMuZGF0YUxpc3QgPSBbXTtcbn1cblxuUVJDb2RlTW9kZWwucHJvdG90eXBlPXthZGREYXRhOmZ1bmN0aW9uKGRhdGEpe3ZhciBuZXdEYXRhPW5ldyBRUjhiaXRCeXRlKGRhdGEpO3RoaXMuZGF0YUxpc3QucHVzaChuZXdEYXRhKTt0aGlzLmRhdGFDYWNoZT1udWxsO30saXNEYXJrOmZ1bmN0aW9uKHJvdyxjb2wpe2lmKHJvdzwwfHx0aGlzLm1vZHVsZUNvdW50PD1yb3d8fGNvbDwwfHx0aGlzLm1vZHVsZUNvdW50PD1jb2wpe3Rocm93IG5ldyBFcnJvcihyb3crXCIsXCIrY29sKTt9XG5yZXR1cm4gdGhpcy5tb2R1bGVzW3Jvd11bY29sXTt9LGdldE1vZHVsZUNvdW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW9kdWxlQ291bnQ7fSxtYWtlOmZ1bmN0aW9uKCl7dGhpcy5tYWtlSW1wbChmYWxzZSx0aGlzLmdldEJlc3RNYXNrUGF0dGVybigpKTt9LG1ha2VJbXBsOmZ1bmN0aW9uKHRlc3QsbWFza1BhdHRlcm4pe3RoaXMubW9kdWxlQ291bnQ9dGhpcy50eXBlTnVtYmVyKjQrMTc7dGhpcy5tb2R1bGVzPW5ldyBBcnJheSh0aGlzLm1vZHVsZUNvdW50KTtmb3IodmFyIHJvdz0wO3Jvdzx0aGlzLm1vZHVsZUNvdW50O3JvdysrKXt0aGlzLm1vZHVsZXNbcm93XT1uZXcgQXJyYXkodGhpcy5tb2R1bGVDb3VudCk7Zm9yKHZhciBjb2w9MDtjb2w8dGhpcy5tb2R1bGVDb3VudDtjb2wrKyl7dGhpcy5tb2R1bGVzW3Jvd11bY29sXT1udWxsO319XG50aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4oMCwwKTt0aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4odGhpcy5tb2R1bGVDb3VudC03LDApO3RoaXMuc2V0dXBQb3NpdGlvblByb2JlUGF0dGVybigwLHRoaXMubW9kdWxlQ291bnQtNyk7dGhpcy5zZXR1cFBvc2l0aW9uQWRqdXN0UGF0dGVybigpO3RoaXMuc2V0dXBUaW1pbmdQYXR0ZXJuKCk7dGhpcy5zZXR1cFR5cGVJbmZvKHRlc3QsbWFza1BhdHRlcm4pO2lmKHRoaXMudHlwZU51bWJlcj49Nyl7dGhpcy5zZXR1cFR5cGVOdW1iZXIodGVzdCk7fVxuaWYodGhpcy5kYXRhQ2FjaGU9PW51bGwpe3RoaXMuZGF0YUNhY2hlPVFSQ29kZU1vZGVsLmNyZWF0ZURhdGEodGhpcy50eXBlTnVtYmVyLHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwsdGhpcy5kYXRhTGlzdCk7fVxudGhpcy5tYXBEYXRhKHRoaXMuZGF0YUNhY2hlLG1hc2tQYXR0ZXJuKTt9LHNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm46ZnVuY3Rpb24ocm93LGNvbCl7Zm9yKHZhciByPS0xO3I8PTc7cisrKXtpZihyb3crcjw9LTF8fHRoaXMubW9kdWxlQ291bnQ8PXJvdytyKWNvbnRpbnVlO2Zvcih2YXIgYz0tMTtjPD03O2MrKyl7aWYoY29sK2M8PS0xfHx0aGlzLm1vZHVsZUNvdW50PD1jb2wrYyljb250aW51ZTtpZigoMDw9ciYmcjw9NiYmKGM9PTB8fGM9PTYpKXx8KDA8PWMmJmM8PTYmJihyPT0wfHxyPT02KSl8fCgyPD1yJiZyPD00JiYyPD1jJiZjPD00KSl7dGhpcy5tb2R1bGVzW3JvdytyXVtjb2wrY109dHJ1ZTt9ZWxzZXt0aGlzLm1vZHVsZXNbcm93K3JdW2NvbCtjXT1mYWxzZTt9fX19LGdldEJlc3RNYXNrUGF0dGVybjpmdW5jdGlvbigpe3ZhciBtaW5Mb3N0UG9pbnQ9MDt2YXIgcGF0dGVybj0wO2Zvcih2YXIgaT0wO2k8ODtpKyspe3RoaXMubWFrZUltcGwodHJ1ZSxpKTt2YXIgbG9zdFBvaW50PVFSVXRpbC5nZXRMb3N0UG9pbnQodGhpcyk7aWYoaT09MHx8bWluTG9zdFBvaW50Pmxvc3RQb2ludCl7bWluTG9zdFBvaW50PWxvc3RQb2ludDtwYXR0ZXJuPWk7fX1cbnJldHVybiBwYXR0ZXJuO30sY3JlYXRlTW92aWVDbGlwOmZ1bmN0aW9uKHRhcmdldF9tYyxpbnN0YW5jZV9uYW1lLGRlcHRoKXt2YXIgcXJfbWM9dGFyZ2V0X21jLmNyZWF0ZUVtcHR5TW92aWVDbGlwKGluc3RhbmNlX25hbWUsZGVwdGgpO3ZhciBjcz0xO3RoaXMubWFrZSgpO2Zvcih2YXIgcm93PTA7cm93PHRoaXMubW9kdWxlcy5sZW5ndGg7cm93Kyspe3ZhciB5PXJvdypjcztmb3IodmFyIGNvbD0wO2NvbDx0aGlzLm1vZHVsZXNbcm93XS5sZW5ndGg7Y29sKyspe3ZhciB4PWNvbCpjczt2YXIgZGFyaz10aGlzLm1vZHVsZXNbcm93XVtjb2xdO2lmKGRhcmspe3FyX21jLmJlZ2luRmlsbCgwLDEwMCk7cXJfbWMubW92ZVRvKHgseSk7cXJfbWMubGluZVRvKHgrY3MseSk7cXJfbWMubGluZVRvKHgrY3MseStjcyk7cXJfbWMubGluZVRvKHgseStjcyk7cXJfbWMuZW5kRmlsbCgpO319fVxucmV0dXJuIHFyX21jO30sc2V0dXBUaW1pbmdQYXR0ZXJuOmZ1bmN0aW9uKCl7Zm9yKHZhciByPTg7cjx0aGlzLm1vZHVsZUNvdW50LTg7cisrKXtpZih0aGlzLm1vZHVsZXNbcl1bNl0hPW51bGwpe2NvbnRpbnVlO31cbnRoaXMubW9kdWxlc1tyXVs2XT0ociUyPT0wKTt9XG5mb3IodmFyIGM9ODtjPHRoaXMubW9kdWxlQ291bnQtODtjKyspe2lmKHRoaXMubW9kdWxlc1s2XVtjXSE9bnVsbCl7Y29udGludWU7fVxudGhpcy5tb2R1bGVzWzZdW2NdPShjJTI9PTApO319LHNldHVwUG9zaXRpb25BZGp1c3RQYXR0ZXJuOmZ1bmN0aW9uKCl7dmFyIHBvcz1RUlV0aWwuZ2V0UGF0dGVyblBvc2l0aW9uKHRoaXMudHlwZU51bWJlcik7Zm9yKHZhciBpPTA7aTxwb3MubGVuZ3RoO2krKyl7Zm9yKHZhciBqPTA7ajxwb3MubGVuZ3RoO2orKyl7dmFyIHJvdz1wb3NbaV07dmFyIGNvbD1wb3Nbal07aWYodGhpcy5tb2R1bGVzW3Jvd11bY29sXSE9bnVsbCl7Y29udGludWU7fVxuZm9yKHZhciByPS0yO3I8PTI7cisrKXtmb3IodmFyIGM9LTI7Yzw9MjtjKyspe2lmKHI9PS0yfHxyPT0yfHxjPT0tMnx8Yz09Mnx8KHI9PTAmJmM9PTApKXt0aGlzLm1vZHVsZXNbcm93K3JdW2NvbCtjXT10cnVlO31lbHNle3RoaXMubW9kdWxlc1tyb3crcl1bY29sK2NdPWZhbHNlO319fX19fSxzZXR1cFR5cGVOdW1iZXI6ZnVuY3Rpb24odGVzdCl7dmFyIGJpdHM9UVJVdGlsLmdldEJDSFR5cGVOdW1iZXIodGhpcy50eXBlTnVtYmVyKTtmb3IodmFyIGk9MDtpPDE4O2krKyl7dmFyIG1vZD0oIXRlc3QmJigoYml0cz4+aSkmMSk9PTEpO3RoaXMubW9kdWxlc1tNYXRoLmZsb29yKGkvMyldW2klMyt0aGlzLm1vZHVsZUNvdW50LTgtM109bW9kO31cbmZvcih2YXIgaT0wO2k8MTg7aSsrKXt2YXIgbW9kPSghdGVzdCYmKChiaXRzPj5pKSYxKT09MSk7dGhpcy5tb2R1bGVzW2klMyt0aGlzLm1vZHVsZUNvdW50LTgtM11bTWF0aC5mbG9vcihpLzMpXT1tb2Q7fX0sc2V0dXBUeXBlSW5mbzpmdW5jdGlvbih0ZXN0LG1hc2tQYXR0ZXJuKXt2YXIgZGF0YT0odGhpcy5lcnJvckNvcnJlY3RMZXZlbDw8Myl8bWFza1BhdHRlcm47dmFyIGJpdHM9UVJVdGlsLmdldEJDSFR5cGVJbmZvKGRhdGEpO2Zvcih2YXIgaT0wO2k8MTU7aSsrKXt2YXIgbW9kPSghdGVzdCYmKChiaXRzPj5pKSYxKT09MSk7aWYoaTw2KXt0aGlzLm1vZHVsZXNbaV1bOF09bW9kO31lbHNlIGlmKGk8OCl7dGhpcy5tb2R1bGVzW2krMV1bOF09bW9kO31lbHNle3RoaXMubW9kdWxlc1t0aGlzLm1vZHVsZUNvdW50LTE1K2ldWzhdPW1vZDt9fVxuZm9yKHZhciBpPTA7aTwxNTtpKyspe3ZhciBtb2Q9KCF0ZXN0JiYoKGJpdHM+PmkpJjEpPT0xKTtpZihpPDgpe3RoaXMubW9kdWxlc1s4XVt0aGlzLm1vZHVsZUNvdW50LWktMV09bW9kO31lbHNlIGlmKGk8OSl7dGhpcy5tb2R1bGVzWzhdWzE1LWktMSsxXT1tb2Q7fWVsc2V7dGhpcy5tb2R1bGVzWzhdWzE1LWktMV09bW9kO319XG50aGlzLm1vZHVsZXNbdGhpcy5tb2R1bGVDb3VudC04XVs4XT0oIXRlc3QpO30sbWFwRGF0YTpmdW5jdGlvbihkYXRhLG1hc2tQYXR0ZXJuKXt2YXIgaW5jPS0xO3ZhciByb3c9dGhpcy5tb2R1bGVDb3VudC0xO3ZhciBiaXRJbmRleD03O3ZhciBieXRlSW5kZXg9MDtmb3IodmFyIGNvbD10aGlzLm1vZHVsZUNvdW50LTE7Y29sPjA7Y29sLT0yKXtpZihjb2w9PTYpY29sLS07d2hpbGUodHJ1ZSl7Zm9yKHZhciBjPTA7YzwyO2MrKyl7aWYodGhpcy5tb2R1bGVzW3Jvd11bY29sLWNdPT1udWxsKXt2YXIgZGFyaz1mYWxzZTtpZihieXRlSW5kZXg8ZGF0YS5sZW5ndGgpe2Rhcms9KCgoZGF0YVtieXRlSW5kZXhdPj4+Yml0SW5kZXgpJjEpPT0xKTt9XG52YXIgbWFzaz1RUlV0aWwuZ2V0TWFzayhtYXNrUGF0dGVybixyb3csY29sLWMpO2lmKG1hc2spe2Rhcms9IWRhcms7fVxudGhpcy5tb2R1bGVzW3Jvd11bY29sLWNdPWRhcms7Yml0SW5kZXgtLTtpZihiaXRJbmRleD09LTEpe2J5dGVJbmRleCsrO2JpdEluZGV4PTc7fX19XG5yb3crPWluYztpZihyb3c8MHx8dGhpcy5tb2R1bGVDb3VudDw9cm93KXtyb3ctPWluYztpbmM9LWluYzticmVhazt9fX19fTtRUkNvZGVNb2RlbC5QQUQwPTB4RUM7UVJDb2RlTW9kZWwuUEFEMT0weDExO1FSQ29kZU1vZGVsLmNyZWF0ZURhdGE9ZnVuY3Rpb24odHlwZU51bWJlcixlcnJvckNvcnJlY3RMZXZlbCxkYXRhTGlzdCl7dmFyIHJzQmxvY2tzPVFSUlNCbG9jay5nZXRSU0Jsb2Nrcyh0eXBlTnVtYmVyLGVycm9yQ29ycmVjdExldmVsKTt2YXIgYnVmZmVyPW5ldyBRUkJpdEJ1ZmZlcigpO2Zvcih2YXIgaT0wO2k8ZGF0YUxpc3QubGVuZ3RoO2krKyl7dmFyIGRhdGE9ZGF0YUxpc3RbaV07YnVmZmVyLnB1dChkYXRhLm1vZGUsNCk7YnVmZmVyLnB1dChkYXRhLmdldExlbmd0aCgpLFFSVXRpbC5nZXRMZW5ndGhJbkJpdHMoZGF0YS5tb2RlLHR5cGVOdW1iZXIpKTtkYXRhLndyaXRlKGJ1ZmZlcik7fVxudmFyIHRvdGFsRGF0YUNvdW50PTA7Zm9yKHZhciBpPTA7aTxyc0Jsb2Nrcy5sZW5ndGg7aSsrKXt0b3RhbERhdGFDb3VudCs9cnNCbG9ja3NbaV0uZGF0YUNvdW50O31cbmlmKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKT50b3RhbERhdGFDb3VudCo4KXt0aHJvdyBuZXcgRXJyb3IoXCJjb2RlIGxlbmd0aCBvdmVyZmxvdy4gKFwiXG4rYnVmZmVyLmdldExlbmd0aEluQml0cygpXG4rXCI+XCJcbit0b3RhbERhdGFDb3VudCo4XG4rXCIpXCIpO31cbmlmKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSs0PD10b3RhbERhdGFDb3VudCo4KXtidWZmZXIucHV0KDAsNCk7fVxud2hpbGUoYnVmZmVyLmdldExlbmd0aEluQml0cygpJTghPTApe2J1ZmZlci5wdXRCaXQoZmFsc2UpO31cbndoaWxlKHRydWUpe2lmKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKT49dG90YWxEYXRhQ291bnQqOCl7YnJlYWs7fVxuYnVmZmVyLnB1dChRUkNvZGVNb2RlbC5QQUQwLDgpO2lmKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKT49dG90YWxEYXRhQ291bnQqOCl7YnJlYWs7fVxuYnVmZmVyLnB1dChRUkNvZGVNb2RlbC5QQUQxLDgpO31cbnJldHVybiBRUkNvZGVNb2RlbC5jcmVhdGVCeXRlcyhidWZmZXIscnNCbG9ja3MpO307UVJDb2RlTW9kZWwuY3JlYXRlQnl0ZXM9ZnVuY3Rpb24oYnVmZmVyLHJzQmxvY2tzKXt2YXIgb2Zmc2V0PTA7dmFyIG1heERjQ291bnQ9MDt2YXIgbWF4RWNDb3VudD0wO3ZhciBkY2RhdGE9bmV3IEFycmF5KHJzQmxvY2tzLmxlbmd0aCk7dmFyIGVjZGF0YT1uZXcgQXJyYXkocnNCbG9ja3MubGVuZ3RoKTtmb3IodmFyIHI9MDtyPHJzQmxvY2tzLmxlbmd0aDtyKyspe3ZhciBkY0NvdW50PXJzQmxvY2tzW3JdLmRhdGFDb3VudDt2YXIgZWNDb3VudD1yc0Jsb2Nrc1tyXS50b3RhbENvdW50LWRjQ291bnQ7bWF4RGNDb3VudD1NYXRoLm1heChtYXhEY0NvdW50LGRjQ291bnQpO21heEVjQ291bnQ9TWF0aC5tYXgobWF4RWNDb3VudCxlY0NvdW50KTtkY2RhdGFbcl09bmV3IEFycmF5KGRjQ291bnQpO2Zvcih2YXIgaT0wO2k8ZGNkYXRhW3JdLmxlbmd0aDtpKyspe2RjZGF0YVtyXVtpXT0weGZmJmJ1ZmZlci5idWZmZXJbaStvZmZzZXRdO31cbm9mZnNldCs9ZGNDb3VudDt2YXIgcnNQb2x5PVFSVXRpbC5nZXRFcnJvckNvcnJlY3RQb2x5bm9taWFsKGVjQ291bnQpO3ZhciByYXdQb2x5PW5ldyBRUlBvbHlub21pYWwoZGNkYXRhW3JdLHJzUG9seS5nZXRMZW5ndGgoKS0xKTt2YXIgbW9kUG9seT1yYXdQb2x5Lm1vZChyc1BvbHkpO2VjZGF0YVtyXT1uZXcgQXJyYXkocnNQb2x5LmdldExlbmd0aCgpLTEpO2Zvcih2YXIgaT0wO2k8ZWNkYXRhW3JdLmxlbmd0aDtpKyspe3ZhciBtb2RJbmRleD1pK21vZFBvbHkuZ2V0TGVuZ3RoKCktZWNkYXRhW3JdLmxlbmd0aDtlY2RhdGFbcl1baV09KG1vZEluZGV4Pj0wKT9tb2RQb2x5LmdldChtb2RJbmRleCk6MDt9fVxudmFyIHRvdGFsQ29kZUNvdW50PTA7Zm9yKHZhciBpPTA7aTxyc0Jsb2Nrcy5sZW5ndGg7aSsrKXt0b3RhbENvZGVDb3VudCs9cnNCbG9ja3NbaV0udG90YWxDb3VudDt9XG52YXIgZGF0YT1uZXcgQXJyYXkodG90YWxDb2RlQ291bnQpO3ZhciBpbmRleD0wO2Zvcih2YXIgaT0wO2k8bWF4RGNDb3VudDtpKyspe2Zvcih2YXIgcj0wO3I8cnNCbG9ja3MubGVuZ3RoO3IrKyl7aWYoaTxkY2RhdGFbcl0ubGVuZ3RoKXtkYXRhW2luZGV4KytdPWRjZGF0YVtyXVtpXTt9fX1cbmZvcih2YXIgaT0wO2k8bWF4RWNDb3VudDtpKyspe2Zvcih2YXIgcj0wO3I8cnNCbG9ja3MubGVuZ3RoO3IrKyl7aWYoaTxlY2RhdGFbcl0ubGVuZ3RoKXtkYXRhW2luZGV4KytdPWVjZGF0YVtyXVtpXTt9fX1cbnJldHVybiBkYXRhO307dmFyIFFSTW9kZT17TU9ERV9OVU1CRVI6MTw8MCxNT0RFX0FMUEhBX05VTToxPDwxLE1PREVfOEJJVF9CWVRFOjE8PDIsTU9ERV9LQU5KSToxPDwzfTt2YXIgUVJFcnJvckNvcnJlY3RMZXZlbD17TDoxLE06MCxROjMsSDoyfTt2YXIgUVJNYXNrUGF0dGVybj17UEFUVEVSTjAwMDowLFBBVFRFUk4wMDE6MSxQQVRURVJOMDEwOjIsUEFUVEVSTjAxMTozLFBBVFRFUk4xMDA6NCxQQVRURVJOMTAxOjUsUEFUVEVSTjExMDo2LFBBVFRFUk4xMTE6N307dmFyIFFSVXRpbD17UEFUVEVSTl9QT1NJVElPTl9UQUJMRTpbW10sWzYsMThdLFs2LDIyXSxbNiwyNl0sWzYsMzBdLFs2LDM0XSxbNiwyMiwzOF0sWzYsMjQsNDJdLFs2LDI2LDQ2XSxbNiwyOCw1MF0sWzYsMzAsNTRdLFs2LDMyLDU4XSxbNiwzNCw2Ml0sWzYsMjYsNDYsNjZdLFs2LDI2LDQ4LDcwXSxbNiwyNiw1MCw3NF0sWzYsMzAsNTQsNzhdLFs2LDMwLDU2LDgyXSxbNiwzMCw1OCw4Nl0sWzYsMzQsNjIsOTBdLFs2LDI4LDUwLDcyLDk0XSxbNiwyNiw1MCw3NCw5OF0sWzYsMzAsNTQsNzgsMTAyXSxbNiwyOCw1NCw4MCwxMDZdLFs2LDMyLDU4LDg0LDExMF0sWzYsMzAsNTgsODYsMTE0XSxbNiwzNCw2Miw5MCwxMThdLFs2LDI2LDUwLDc0LDk4LDEyMl0sWzYsMzAsNTQsNzgsMTAyLDEyNl0sWzYsMjYsNTIsNzgsMTA0LDEzMF0sWzYsMzAsNTYsODIsMTA4LDEzNF0sWzYsMzQsNjAsODYsMTEyLDEzOF0sWzYsMzAsNTgsODYsMTE0LDE0Ml0sWzYsMzQsNjIsOTAsMTE4LDE0Nl0sWzYsMzAsNTQsNzgsMTAyLDEyNiwxNTBdLFs2LDI0LDUwLDc2LDEwMiwxMjgsMTU0XSxbNiwyOCw1NCw4MCwxMDYsMTMyLDE1OF0sWzYsMzIsNTgsODQsMTEwLDEzNiwxNjJdLFs2LDI2LDU0LDgyLDExMCwxMzgsMTY2XSxbNiwzMCw1OCw4NiwxMTQsMTQyLDE3MF1dLEcxNTooMTw8MTApfCgxPDw4KXwoMTw8NSl8KDE8PDQpfCgxPDwyKXwoMTw8MSl8KDE8PDApLEcxODooMTw8MTIpfCgxPDwxMSl8KDE8PDEwKXwoMTw8OSl8KDE8PDgpfCgxPDw1KXwoMTw8Mil8KDE8PDApLEcxNV9NQVNLOigxPDwxNCl8KDE8PDEyKXwoMTw8MTApfCgxPDw0KXwoMTw8MSksZ2V0QkNIVHlwZUluZm86ZnVuY3Rpb24oZGF0YSl7dmFyIGQ9ZGF0YTw8MTA7d2hpbGUoUVJVdGlsLmdldEJDSERpZ2l0KGQpLVFSVXRpbC5nZXRCQ0hEaWdpdChRUlV0aWwuRzE1KT49MCl7ZF49KFFSVXRpbC5HMTU8PChRUlV0aWwuZ2V0QkNIRGlnaXQoZCktUVJVdGlsLmdldEJDSERpZ2l0KFFSVXRpbC5HMTUpKSk7fVxucmV0dXJuKChkYXRhPDwxMCl8ZCleUVJVdGlsLkcxNV9NQVNLO30sZ2V0QkNIVHlwZU51bWJlcjpmdW5jdGlvbihkYXRhKXt2YXIgZD1kYXRhPDwxMjt3aGlsZShRUlV0aWwuZ2V0QkNIRGlnaXQoZCktUVJVdGlsLmdldEJDSERpZ2l0KFFSVXRpbC5HMTgpPj0wKXtkXj0oUVJVdGlsLkcxODw8KFFSVXRpbC5nZXRCQ0hEaWdpdChkKS1RUlV0aWwuZ2V0QkNIRGlnaXQoUVJVdGlsLkcxOCkpKTt9XG5yZXR1cm4oZGF0YTw8MTIpfGQ7fSxnZXRCQ0hEaWdpdDpmdW5jdGlvbihkYXRhKXt2YXIgZGlnaXQ9MDt3aGlsZShkYXRhIT0wKXtkaWdpdCsrO2RhdGE+Pj49MTt9XG5yZXR1cm4gZGlnaXQ7fSxnZXRQYXR0ZXJuUG9zaXRpb246ZnVuY3Rpb24odHlwZU51bWJlcil7cmV0dXJuIFFSVXRpbC5QQVRURVJOX1BPU0lUSU9OX1RBQkxFW3R5cGVOdW1iZXItMV07fSxnZXRNYXNrOmZ1bmN0aW9uKG1hc2tQYXR0ZXJuLGksail7c3dpdGNoKG1hc2tQYXR0ZXJuKXtjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjAwMDpyZXR1cm4oaStqKSUyPT0wO2Nhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMDAxOnJldHVybiBpJTI9PTA7Y2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4wMTA6cmV0dXJuIGolMz09MDtjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjAxMTpyZXR1cm4oaStqKSUzPT0wO2Nhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTAwOnJldHVybihNYXRoLmZsb29yKGkvMikrTWF0aC5mbG9vcihqLzMpKSUyPT0wO2Nhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTAxOnJldHVybihpKmopJTIrKGkqaiklMz09MDtjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjExMDpyZXR1cm4oKGkqaiklMisoaSpqKSUzKSUyPT0wO2Nhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTExOnJldHVybigoaSpqKSUzKyhpK2opJTIpJTI9PTA7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJiYWQgbWFza1BhdHRlcm46XCIrbWFza1BhdHRlcm4pO319LGdldEVycm9yQ29ycmVjdFBvbHlub21pYWw6ZnVuY3Rpb24oZXJyb3JDb3JyZWN0TGVuZ3RoKXt2YXIgYT1uZXcgUVJQb2x5bm9taWFsKFsxXSwwKTtmb3IodmFyIGk9MDtpPGVycm9yQ29ycmVjdExlbmd0aDtpKyspe2E9YS5tdWx0aXBseShuZXcgUVJQb2x5bm9taWFsKFsxLFFSTWF0aC5nZXhwKGkpXSwwKSk7fVxucmV0dXJuIGE7fSxnZXRMZW5ndGhJbkJpdHM6ZnVuY3Rpb24obW9kZSx0eXBlKXtpZigxPD10eXBlJiZ0eXBlPDEwKXtzd2l0Y2gobW9kZSl7Y2FzZSBRUk1vZGUuTU9ERV9OVU1CRVI6cmV0dXJuIDEwO2Nhc2UgUVJNb2RlLk1PREVfQUxQSEFfTlVNOnJldHVybiA5O2Nhc2UgUVJNb2RlLk1PREVfOEJJVF9CWVRFOnJldHVybiA4O2Nhc2UgUVJNb2RlLk1PREVfS0FOSkk6cmV0dXJuIDg7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJtb2RlOlwiK21vZGUpO319ZWxzZSBpZih0eXBlPDI3KXtzd2l0Y2gobW9kZSl7Y2FzZSBRUk1vZGUuTU9ERV9OVU1CRVI6cmV0dXJuIDEyO2Nhc2UgUVJNb2RlLk1PREVfQUxQSEFfTlVNOnJldHVybiAxMTtjYXNlIFFSTW9kZS5NT0RFXzhCSVRfQllURTpyZXR1cm4gMTY7Y2FzZSBRUk1vZGUuTU9ERV9LQU5KSTpyZXR1cm4gMTA7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJtb2RlOlwiK21vZGUpO319ZWxzZSBpZih0eXBlPDQxKXtzd2l0Y2gobW9kZSl7Y2FzZSBRUk1vZGUuTU9ERV9OVU1CRVI6cmV0dXJuIDE0O2Nhc2UgUVJNb2RlLk1PREVfQUxQSEFfTlVNOnJldHVybiAxMztjYXNlIFFSTW9kZS5NT0RFXzhCSVRfQllURTpyZXR1cm4gMTY7Y2FzZSBRUk1vZGUuTU9ERV9LQU5KSTpyZXR1cm4gMTI7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJtb2RlOlwiK21vZGUpO319ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJ0eXBlOlwiK3R5cGUpO319LGdldExvc3RQb2ludDpmdW5jdGlvbihxckNvZGUpe3ZhciBtb2R1bGVDb3VudD1xckNvZGUuZ2V0TW9kdWxlQ291bnQoKTt2YXIgbG9zdFBvaW50PTA7Zm9yKHZhciByb3c9MDtyb3c8bW9kdWxlQ291bnQ7cm93Kyspe2Zvcih2YXIgY29sPTA7Y29sPG1vZHVsZUNvdW50O2NvbCsrKXt2YXIgc2FtZUNvdW50PTA7dmFyIGRhcms9cXJDb2RlLmlzRGFyayhyb3csY29sKTtmb3IodmFyIHI9LTE7cjw9MTtyKyspe2lmKHJvdytyPDB8fG1vZHVsZUNvdW50PD1yb3crcil7Y29udGludWU7fVxuZm9yKHZhciBjPS0xO2M8PTE7YysrKXtpZihjb2wrYzwwfHxtb2R1bGVDb3VudDw9Y29sK2Mpe2NvbnRpbnVlO31cbmlmKHI9PTAmJmM9PTApe2NvbnRpbnVlO31cbmlmKGRhcms9PXFyQ29kZS5pc0Rhcmsocm93K3IsY29sK2MpKXtzYW1lQ291bnQrKzt9fX1cbmlmKHNhbWVDb3VudD41KXtsb3N0UG9pbnQrPSgzK3NhbWVDb3VudC01KTt9fX1cbmZvcih2YXIgcm93PTA7cm93PG1vZHVsZUNvdW50LTE7cm93Kyspe2Zvcih2YXIgY29sPTA7Y29sPG1vZHVsZUNvdW50LTE7Y29sKyspe3ZhciBjb3VudD0wO2lmKHFyQ29kZS5pc0Rhcmsocm93LGNvbCkpY291bnQrKztpZihxckNvZGUuaXNEYXJrKHJvdysxLGNvbCkpY291bnQrKztpZihxckNvZGUuaXNEYXJrKHJvdyxjb2wrMSkpY291bnQrKztpZihxckNvZGUuaXNEYXJrKHJvdysxLGNvbCsxKSljb3VudCsrO2lmKGNvdW50PT0wfHxjb3VudD09NCl7bG9zdFBvaW50Kz0zO319fVxuZm9yKHZhciByb3c9MDtyb3c8bW9kdWxlQ291bnQ7cm93Kyspe2Zvcih2YXIgY29sPTA7Y29sPG1vZHVsZUNvdW50LTY7Y29sKyspe2lmKHFyQ29kZS5pc0Rhcmsocm93LGNvbCkmJiFxckNvZGUuaXNEYXJrKHJvdyxjb2wrMSkmJnFyQ29kZS5pc0Rhcmsocm93LGNvbCsyKSYmcXJDb2RlLmlzRGFyayhyb3csY29sKzMpJiZxckNvZGUuaXNEYXJrKHJvdyxjb2wrNCkmJiFxckNvZGUuaXNEYXJrKHJvdyxjb2wrNSkmJnFyQ29kZS5pc0Rhcmsocm93LGNvbCs2KSl7bG9zdFBvaW50Kz00MDt9fX1cbmZvcih2YXIgY29sPTA7Y29sPG1vZHVsZUNvdW50O2NvbCsrKXtmb3IodmFyIHJvdz0wO3Jvdzxtb2R1bGVDb3VudC02O3JvdysrKXtpZihxckNvZGUuaXNEYXJrKHJvdyxjb2wpJiYhcXJDb2RlLmlzRGFyayhyb3crMSxjb2wpJiZxckNvZGUuaXNEYXJrKHJvdysyLGNvbCkmJnFyQ29kZS5pc0Rhcmsocm93KzMsY29sKSYmcXJDb2RlLmlzRGFyayhyb3crNCxjb2wpJiYhcXJDb2RlLmlzRGFyayhyb3crNSxjb2wpJiZxckNvZGUuaXNEYXJrKHJvdys2LGNvbCkpe2xvc3RQb2ludCs9NDA7fX19XG52YXIgZGFya0NvdW50PTA7Zm9yKHZhciBjb2w9MDtjb2w8bW9kdWxlQ291bnQ7Y29sKyspe2Zvcih2YXIgcm93PTA7cm93PG1vZHVsZUNvdW50O3JvdysrKXtpZihxckNvZGUuaXNEYXJrKHJvdyxjb2wpKXtkYXJrQ291bnQrKzt9fX1cbnZhciByYXRpbz1NYXRoLmFicygxMDAqZGFya0NvdW50L21vZHVsZUNvdW50L21vZHVsZUNvdW50LTUwKS81O2xvc3RQb2ludCs9cmF0aW8qMTA7cmV0dXJuIGxvc3RQb2ludDt9fTt2YXIgUVJNYXRoPXtnbG9nOmZ1bmN0aW9uKG4pe2lmKG48MSl7dGhyb3cgbmV3IEVycm9yKFwiZ2xvZyhcIituK1wiKVwiKTt9XG5yZXR1cm4gUVJNYXRoLkxPR19UQUJMRVtuXTt9LGdleHA6ZnVuY3Rpb24obil7d2hpbGUobjwwKXtuKz0yNTU7fVxud2hpbGUobj49MjU2KXtuLT0yNTU7fVxucmV0dXJuIFFSTWF0aC5FWFBfVEFCTEVbbl07fSxFWFBfVEFCTEU6bmV3IEFycmF5KDI1NiksTE9HX1RBQkxFOm5ldyBBcnJheSgyNTYpfTtmb3IodmFyIGk9MDtpPDg7aSsrKXtRUk1hdGguRVhQX1RBQkxFW2ldPTE8PGk7fVxuZm9yKHZhciBpPTg7aTwyNTY7aSsrKXtRUk1hdGguRVhQX1RBQkxFW2ldPVFSTWF0aC5FWFBfVEFCTEVbaS00XV5RUk1hdGguRVhQX1RBQkxFW2ktNV1eUVJNYXRoLkVYUF9UQUJMRVtpLTZdXlFSTWF0aC5FWFBfVEFCTEVbaS04XTt9XG5mb3IodmFyIGk9MDtpPDI1NTtpKyspe1FSTWF0aC5MT0dfVEFCTEVbUVJNYXRoLkVYUF9UQUJMRVtpXV09aTt9XG5mdW5jdGlvbiBRUlBvbHlub21pYWwobnVtLHNoaWZ0KXtpZihudW0ubGVuZ3RoPT11bmRlZmluZWQpe3Rocm93IG5ldyBFcnJvcihudW0ubGVuZ3RoK1wiL1wiK3NoaWZ0KTt9XG52YXIgb2Zmc2V0PTA7d2hpbGUob2Zmc2V0PG51bS5sZW5ndGgmJm51bVtvZmZzZXRdPT0wKXtvZmZzZXQrKzt9XG50aGlzLm51bT1uZXcgQXJyYXkobnVtLmxlbmd0aC1vZmZzZXQrc2hpZnQpO2Zvcih2YXIgaT0wO2k8bnVtLmxlbmd0aC1vZmZzZXQ7aSsrKXt0aGlzLm51bVtpXT1udW1baStvZmZzZXRdO319XG5RUlBvbHlub21pYWwucHJvdG90eXBlPXtnZXQ6ZnVuY3Rpb24oaW5kZXgpe3JldHVybiB0aGlzLm51bVtpbmRleF07fSxnZXRMZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5udW0ubGVuZ3RoO30sbXVsdGlwbHk6ZnVuY3Rpb24oZSl7dmFyIG51bT1uZXcgQXJyYXkodGhpcy5nZXRMZW5ndGgoKStlLmdldExlbmd0aCgpLTEpO2Zvcih2YXIgaT0wO2k8dGhpcy5nZXRMZW5ndGgoKTtpKyspe2Zvcih2YXIgaj0wO2o8ZS5nZXRMZW5ndGgoKTtqKyspe251bVtpK2pdXj1RUk1hdGguZ2V4cChRUk1hdGguZ2xvZyh0aGlzLmdldChpKSkrUVJNYXRoLmdsb2coZS5nZXQoaikpKTt9fVxucmV0dXJuIG5ldyBRUlBvbHlub21pYWwobnVtLDApO30sbW9kOmZ1bmN0aW9uKGUpe2lmKHRoaXMuZ2V0TGVuZ3RoKCktZS5nZXRMZW5ndGgoKTwwKXtyZXR1cm4gdGhpczt9XG52YXIgcmF0aW89UVJNYXRoLmdsb2codGhpcy5nZXQoMCkpLVFSTWF0aC5nbG9nKGUuZ2V0KDApKTt2YXIgbnVtPW5ldyBBcnJheSh0aGlzLmdldExlbmd0aCgpKTtmb3IodmFyIGk9MDtpPHRoaXMuZ2V0TGVuZ3RoKCk7aSsrKXtudW1baV09dGhpcy5nZXQoaSk7fVxuZm9yKHZhciBpPTA7aTxlLmdldExlbmd0aCgpO2krKyl7bnVtW2ldXj1RUk1hdGguZ2V4cChRUk1hdGguZ2xvZyhlLmdldChpKSkrcmF0aW8pO31cbnJldHVybiBuZXcgUVJQb2x5bm9taWFsKG51bSwwKS5tb2QoZSk7fX07ZnVuY3Rpb24gUVJSU0Jsb2NrKHRvdGFsQ291bnQsZGF0YUNvdW50KXt0aGlzLnRvdGFsQ291bnQ9dG90YWxDb3VudDt0aGlzLmRhdGFDb3VudD1kYXRhQ291bnQ7fVxuUVJSU0Jsb2NrLlJTX0JMT0NLX1RBQkxFPVtbMSwyNiwxOV0sWzEsMjYsMTZdLFsxLDI2LDEzXSxbMSwyNiw5XSxbMSw0NCwzNF0sWzEsNDQsMjhdLFsxLDQ0LDIyXSxbMSw0NCwxNl0sWzEsNzAsNTVdLFsxLDcwLDQ0XSxbMiwzNSwxN10sWzIsMzUsMTNdLFsxLDEwMCw4MF0sWzIsNTAsMzJdLFsyLDUwLDI0XSxbNCwyNSw5XSxbMSwxMzQsMTA4XSxbMiw2Nyw0M10sWzIsMzMsMTUsMiwzNCwxNl0sWzIsMzMsMTEsMiwzNCwxMl0sWzIsODYsNjhdLFs0LDQzLDI3XSxbNCw0MywxOV0sWzQsNDMsMTVdLFsyLDk4LDc4XSxbNCw0OSwzMV0sWzIsMzIsMTQsNCwzMywxNV0sWzQsMzksMTMsMSw0MCwxNF0sWzIsMTIxLDk3XSxbMiw2MCwzOCwyLDYxLDM5XSxbNCw0MCwxOCwyLDQxLDE5XSxbNCw0MCwxNCwyLDQxLDE1XSxbMiwxNDYsMTE2XSxbMyw1OCwzNiwyLDU5LDM3XSxbNCwzNiwxNiw0LDM3LDE3XSxbNCwzNiwxMiw0LDM3LDEzXSxbMiw4Niw2OCwyLDg3LDY5XSxbNCw2OSw0MywxLDcwLDQ0XSxbNiw0MywxOSwyLDQ0LDIwXSxbNiw0MywxNSwyLDQ0LDE2XSxbNCwxMDEsODFdLFsxLDgwLDUwLDQsODEsNTFdLFs0LDUwLDIyLDQsNTEsMjNdLFszLDM2LDEyLDgsMzcsMTNdLFsyLDExNiw5MiwyLDExNyw5M10sWzYsNTgsMzYsMiw1OSwzN10sWzQsNDYsMjAsNiw0NywyMV0sWzcsNDIsMTQsNCw0MywxNV0sWzQsMTMzLDEwN10sWzgsNTksMzcsMSw2MCwzOF0sWzgsNDQsMjAsNCw0NSwyMV0sWzEyLDMzLDExLDQsMzQsMTJdLFszLDE0NSwxMTUsMSwxNDYsMTE2XSxbNCw2NCw0MCw1LDY1LDQxXSxbMTEsMzYsMTYsNSwzNywxN10sWzExLDM2LDEyLDUsMzcsMTNdLFs1LDEwOSw4NywxLDExMCw4OF0sWzUsNjUsNDEsNSw2Niw0Ml0sWzUsNTQsMjQsNyw1NSwyNV0sWzExLDM2LDEyXSxbNSwxMjIsOTgsMSwxMjMsOTldLFs3LDczLDQ1LDMsNzQsNDZdLFsxNSw0MywxOSwyLDQ0LDIwXSxbMyw0NSwxNSwxMyw0NiwxNl0sWzEsMTM1LDEwNyw1LDEzNiwxMDhdLFsxMCw3NCw0NiwxLDc1LDQ3XSxbMSw1MCwyMiwxNSw1MSwyM10sWzIsNDIsMTQsMTcsNDMsMTVdLFs1LDE1MCwxMjAsMSwxNTEsMTIxXSxbOSw2OSw0Myw0LDcwLDQ0XSxbMTcsNTAsMjIsMSw1MSwyM10sWzIsNDIsMTQsMTksNDMsMTVdLFszLDE0MSwxMTMsNCwxNDIsMTE0XSxbMyw3MCw0NCwxMSw3MSw0NV0sWzE3LDQ3LDIxLDQsNDgsMjJdLFs5LDM5LDEzLDE2LDQwLDE0XSxbMywxMzUsMTA3LDUsMTM2LDEwOF0sWzMsNjcsNDEsMTMsNjgsNDJdLFsxNSw1NCwyNCw1LDU1LDI1XSxbMTUsNDMsMTUsMTAsNDQsMTZdLFs0LDE0NCwxMTYsNCwxNDUsMTE3XSxbMTcsNjgsNDJdLFsxNyw1MCwyMiw2LDUxLDIzXSxbMTksNDYsMTYsNiw0NywxN10sWzIsMTM5LDExMSw3LDE0MCwxMTJdLFsxNyw3NCw0Nl0sWzcsNTQsMjQsMTYsNTUsMjVdLFszNCwzNywxM10sWzQsMTUxLDEyMSw1LDE1MiwxMjJdLFs0LDc1LDQ3LDE0LDc2LDQ4XSxbMTEsNTQsMjQsMTQsNTUsMjVdLFsxNiw0NSwxNSwxNCw0NiwxNl0sWzYsMTQ3LDExNyw0LDE0OCwxMThdLFs2LDczLDQ1LDE0LDc0LDQ2XSxbMTEsNTQsMjQsMTYsNTUsMjVdLFszMCw0NiwxNiwyLDQ3LDE3XSxbOCwxMzIsMTA2LDQsMTMzLDEwN10sWzgsNzUsNDcsMTMsNzYsNDhdLFs3LDU0LDI0LDIyLDU1LDI1XSxbMjIsNDUsMTUsMTMsNDYsMTZdLFsxMCwxNDIsMTE0LDIsMTQzLDExNV0sWzE5LDc0LDQ2LDQsNzUsNDddLFsyOCw1MCwyMiw2LDUxLDIzXSxbMzMsNDYsMTYsNCw0NywxN10sWzgsMTUyLDEyMiw0LDE1MywxMjNdLFsyMiw3Myw0NSwzLDc0LDQ2XSxbOCw1MywyMywyNiw1NCwyNF0sWzEyLDQ1LDE1LDI4LDQ2LDE2XSxbMywxNDcsMTE3LDEwLDE0OCwxMThdLFszLDczLDQ1LDIzLDc0LDQ2XSxbNCw1NCwyNCwzMSw1NSwyNV0sWzExLDQ1LDE1LDMxLDQ2LDE2XSxbNywxNDYsMTE2LDcsMTQ3LDExN10sWzIxLDczLDQ1LDcsNzQsNDZdLFsxLDUzLDIzLDM3LDU0LDI0XSxbMTksNDUsMTUsMjYsNDYsMTZdLFs1LDE0NSwxMTUsMTAsMTQ2LDExNl0sWzE5LDc1LDQ3LDEwLDc2LDQ4XSxbMTUsNTQsMjQsMjUsNTUsMjVdLFsyMyw0NSwxNSwyNSw0NiwxNl0sWzEzLDE0NSwxMTUsMywxNDYsMTE2XSxbMiw3NCw0NiwyOSw3NSw0N10sWzQyLDU0LDI0LDEsNTUsMjVdLFsyMyw0NSwxNSwyOCw0NiwxNl0sWzE3LDE0NSwxMTVdLFsxMCw3NCw0NiwyMyw3NSw0N10sWzEwLDU0LDI0LDM1LDU1LDI1XSxbMTksNDUsMTUsMzUsNDYsMTZdLFsxNywxNDUsMTE1LDEsMTQ2LDExNl0sWzE0LDc0LDQ2LDIxLDc1LDQ3XSxbMjksNTQsMjQsMTksNTUsMjVdLFsxMSw0NSwxNSw0Niw0NiwxNl0sWzEzLDE0NSwxMTUsNiwxNDYsMTE2XSxbMTQsNzQsNDYsMjMsNzUsNDddLFs0NCw1NCwyNCw3LDU1LDI1XSxbNTksNDYsMTYsMSw0NywxN10sWzEyLDE1MSwxMjEsNywxNTIsMTIyXSxbMTIsNzUsNDcsMjYsNzYsNDhdLFszOSw1NCwyNCwxNCw1NSwyNV0sWzIyLDQ1LDE1LDQxLDQ2LDE2XSxbNiwxNTEsMTIxLDE0LDE1MiwxMjJdLFs2LDc1LDQ3LDM0LDc2LDQ4XSxbNDYsNTQsMjQsMTAsNTUsMjVdLFsyLDQ1LDE1LDY0LDQ2LDE2XSxbMTcsMTUyLDEyMiw0LDE1MywxMjNdLFsyOSw3NCw0NiwxNCw3NSw0N10sWzQ5LDU0LDI0LDEwLDU1LDI1XSxbMjQsNDUsMTUsNDYsNDYsMTZdLFs0LDE1MiwxMjIsMTgsMTUzLDEyM10sWzEzLDc0LDQ2LDMyLDc1LDQ3XSxbNDgsNTQsMjQsMTQsNTUsMjVdLFs0Miw0NSwxNSwzMiw0NiwxNl0sWzIwLDE0NywxMTcsNCwxNDgsMTE4XSxbNDAsNzUsNDcsNyw3Niw0OF0sWzQzLDU0LDI0LDIyLDU1LDI1XSxbMTAsNDUsMTUsNjcsNDYsMTZdLFsxOSwxNDgsMTE4LDYsMTQ5LDExOV0sWzE4LDc1LDQ3LDMxLDc2LDQ4XSxbMzQsNTQsMjQsMzQsNTUsMjVdLFsyMCw0NSwxNSw2MSw0NiwxNl1dO1FSUlNCbG9jay5nZXRSU0Jsb2Nrcz1mdW5jdGlvbih0eXBlTnVtYmVyLGVycm9yQ29ycmVjdExldmVsKXt2YXIgcnNCbG9jaz1RUlJTQmxvY2suZ2V0UnNCbG9ja1RhYmxlKHR5cGVOdW1iZXIsZXJyb3JDb3JyZWN0TGV2ZWwpO2lmKHJzQmxvY2s9PXVuZGVmaW5lZCl7dGhyb3cgbmV3IEVycm9yKFwiYmFkIHJzIGJsb2NrIEAgdHlwZU51bWJlcjpcIit0eXBlTnVtYmVyK1wiL2Vycm9yQ29ycmVjdExldmVsOlwiK2Vycm9yQ29ycmVjdExldmVsKTt9XG52YXIgbGVuZ3RoPXJzQmxvY2subGVuZ3RoLzM7dmFyIGxpc3Q9W107Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXt2YXIgY291bnQ9cnNCbG9ja1tpKjMrMF07dmFyIHRvdGFsQ291bnQ9cnNCbG9ja1tpKjMrMV07dmFyIGRhdGFDb3VudD1yc0Jsb2NrW2kqMysyXTtmb3IodmFyIGo9MDtqPGNvdW50O2orKyl7bGlzdC5wdXNoKG5ldyBRUlJTQmxvY2sodG90YWxDb3VudCxkYXRhQ291bnQpKTt9fVxucmV0dXJuIGxpc3Q7fTtRUlJTQmxvY2suZ2V0UnNCbG9ja1RhYmxlPWZ1bmN0aW9uKHR5cGVOdW1iZXIsZXJyb3JDb3JyZWN0TGV2ZWwpe3N3aXRjaChlcnJvckNvcnJlY3RMZXZlbCl7Y2FzZSBRUkVycm9yQ29ycmVjdExldmVsLkw6cmV0dXJuIFFSUlNCbG9jay5SU19CTE9DS19UQUJMRVsodHlwZU51bWJlci0xKSo0KzBdO2Nhc2UgUVJFcnJvckNvcnJlY3RMZXZlbC5NOnJldHVybiBRUlJTQmxvY2suUlNfQkxPQ0tfVEFCTEVbKHR5cGVOdW1iZXItMSkqNCsxXTtjYXNlIFFSRXJyb3JDb3JyZWN0TGV2ZWwuUTpyZXR1cm4gUVJSU0Jsb2NrLlJTX0JMT0NLX1RBQkxFWyh0eXBlTnVtYmVyLTEpKjQrMl07Y2FzZSBRUkVycm9yQ29ycmVjdExldmVsLkg6cmV0dXJuIFFSUlNCbG9jay5SU19CTE9DS19UQUJMRVsodHlwZU51bWJlci0xKSo0KzNdO2RlZmF1bHQ6cmV0dXJuIHVuZGVmaW5lZDt9fTtmdW5jdGlvbiBRUkJpdEJ1ZmZlcigpe3RoaXMuYnVmZmVyPVtdO3RoaXMubGVuZ3RoPTA7fVxuUVJCaXRCdWZmZXIucHJvdG90eXBlPXtnZXQ6ZnVuY3Rpb24oaW5kZXgpe3ZhciBidWZJbmRleD1NYXRoLmZsb29yKGluZGV4LzgpO3JldHVybigodGhpcy5idWZmZXJbYnVmSW5kZXhdPj4+KDctaW5kZXglOCkpJjEpPT0xO30scHV0OmZ1bmN0aW9uKG51bSxsZW5ndGgpe2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7dGhpcy5wdXRCaXQoKChudW0+Pj4obGVuZ3RoLWktMSkpJjEpPT0xKTt9fSxnZXRMZW5ndGhJbkJpdHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGg7fSxwdXRCaXQ6ZnVuY3Rpb24oYml0KXt2YXIgYnVmSW5kZXg9TWF0aC5mbG9vcih0aGlzLmxlbmd0aC84KTtpZih0aGlzLmJ1ZmZlci5sZW5ndGg8PWJ1ZkluZGV4KXt0aGlzLmJ1ZmZlci5wdXNoKDApO31cbmlmKGJpdCl7dGhpcy5idWZmZXJbYnVmSW5kZXhdfD0oMHg4MD4+Pih0aGlzLmxlbmd0aCU4KSk7fVxudGhpcy5sZW5ndGgrKzt9fTt2YXIgUVJDb2RlTGltaXRMZW5ndGg9W1sxNywxNCwxMSw3XSxbMzIsMjYsMjAsMTRdLFs1Myw0MiwzMiwyNF0sWzc4LDYyLDQ2LDM0XSxbMTA2LDg0LDYwLDQ0XSxbMTM0LDEwNiw3NCw1OF0sWzE1NCwxMjIsODYsNjRdLFsxOTIsMTUyLDEwOCw4NF0sWzIzMCwxODAsMTMwLDk4XSxbMjcxLDIxMywxNTEsMTE5XSxbMzIxLDI1MSwxNzcsMTM3XSxbMzY3LDI4NywyMDMsMTU1XSxbNDI1LDMzMSwyNDEsMTc3XSxbNDU4LDM2MiwyNTgsMTk0XSxbNTIwLDQxMiwyOTIsMjIwXSxbNTg2LDQ1MCwzMjIsMjUwXSxbNjQ0LDUwNCwzNjQsMjgwXSxbNzE4LDU2MCwzOTQsMzEwXSxbNzkyLDYyNCw0NDIsMzM4XSxbODU4LDY2Niw0ODIsMzgyXSxbOTI5LDcxMSw1MDksNDAzXSxbMTAwMyw3NzksNTY1LDQzOV0sWzEwOTEsODU3LDYxMSw0NjFdLFsxMTcxLDkxMSw2NjEsNTExXSxbMTI3Myw5OTcsNzE1LDUzNV0sWzEzNjcsMTA1OSw3NTEsNTkzXSxbMTQ2NSwxMTI1LDgwNSw2MjVdLFsxNTI4LDExOTAsODY4LDY1OF0sWzE2MjgsMTI2NCw5MDgsNjk4XSxbMTczMiwxMzcwLDk4Miw3NDJdLFsxODQwLDE0NTIsMTAzMCw3OTBdLFsxOTUyLDE1MzgsMTExMiw4NDJdLFsyMDY4LDE2MjgsMTE2OCw4OThdLFsyMTg4LDE3MjIsMTIyOCw5NThdLFsyMzAzLDE4MDksMTI4Myw5ODNdLFsyNDMxLDE5MTEsMTM1MSwxMDUxXSxbMjU2MywxOTg5LDE0MjMsMTA5M10sWzI2OTksMjA5OSwxNDk5LDExMzldLFsyODA5LDIyMTMsMTU3OSwxMjE5XSxbMjk1MywyMzMxLDE2NjMsMTI3M11dO1xuXG5cbi8qKiBDb25zdHJ1Y3RvciAqL1xuZnVuY3Rpb24gUVJDb2RlKG9wdGlvbnMpIHtcbiAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgXG4gIC8vRGVmYXVsdCBvcHRpb25zXG4gIHRoaXMub3B0aW9ucyA9IHtcbiAgICBwYWRkaW5nOiA0LFxuICAgIHdpZHRoOiAyNTYsIFxuICAgIGhlaWdodDogMjU2LFxuICAgIHR5cGVOdW1iZXI6IDQsXG4gICAgY29sb3I6IFwiIzAwMDAwMFwiLFxuICAgIGJhY2tncm91bmQ6IFwiI2ZmZmZmZlwiLFxuICAgIGVjbDogXCJNXCJcbiAgfTtcbiAgXG4gIC8vSW4gY2FzZSB0aGUgb3B0aW9ucyBpcyBzdHJpbmdcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBjb250ZW50OiBvcHRpb25zXG4gICAgfTtcbiAgfVxuICBcbiAgLy9NZXJnZSBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnNbaV0gPSBvcHRpb25zW2ldO1xuICAgIH1cbiAgfVxuICBcbiAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuY29udGVudCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCAnY29udGVudCcgYXMgc3RyaW5nIVwiKTtcbiAgfVxuICBcbiAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50Lmxlbmd0aCA9PT0gMCAvKiB8fCB0aGlzLm9wdGlvbnMuY29udGVudC5sZW5ndGggPiA3MDg5ICovKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgJ2NvbnRlbnQnIHRvIGJlIG5vbi1lbXB0eSFcIik7XG4gIH1cbiAgXG4gIGlmICghKHRoaXMub3B0aW9ucy5wYWRkaW5nID49IDApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgJ3BhZGRpbmcnIHZhbHVlIHRvIGJlIG5vbi1uZWdhdGl2ZSFcIik7XG4gIH1cbiAgXG4gIGlmICghKHRoaXMub3B0aW9ucy53aWR0aCA+IDApIHx8ICEodGhpcy5vcHRpb25zLmhlaWdodCA+IDApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgJ3dpZHRoJyBvciAnaGVpZ2h0JyB2YWx1ZSB0byBiZSBoaWdoZXIgdGhhbiB6ZXJvIVwiKTtcbiAgfVxuICBcbiAgLy9HZXRzIHRoZSBlcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gIGZ1bmN0aW9uIF9nZXRFcnJvckNvcnJlY3RMZXZlbChlY2wpIHtcbiAgICBzd2l0Y2ggKGVjbCkge1xuICAgICAgICBjYXNlIFwiTFwiOlxuICAgICAgICAgIHJldHVybiBRUkVycm9yQ29ycmVjdExldmVsLkw7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgICAgcmV0dXJuIFFSRXJyb3JDb3JyZWN0TGV2ZWwuTTtcbiAgICAgICAgICBcbiAgICAgICAgY2FzZSBcIlFcIjpcbiAgICAgICAgICByZXR1cm4gUVJFcnJvckNvcnJlY3RMZXZlbC5RO1xuICAgICAgICAgIFxuICAgICAgICBjYXNlIFwiSFwiOlxuICAgICAgICAgIHJldHVybiBRUkVycm9yQ29ycmVjdExldmVsLkg7XG4gICAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbndvbiBlcnJvciBjb3JyZWN0aW9uIGxldmVsOiBcIiArIGVjbCk7XG4gICAgICB9XG4gIH1cbiAgXG4gIC8vR2V0IHR5cGUgbnVtYmVyXG4gIGZ1bmN0aW9uIF9nZXRUeXBlTnVtYmVyKGNvbnRlbnQsIGVjbCkgeyAgICAgIFxuICAgIHZhciBsZW5ndGggPSBfZ2V0VVRGOExlbmd0aChjb250ZW50KTtcbiAgICBcbiAgICB2YXIgdHlwZSA9IDE7XG4gICAgdmFyIGxpbWl0ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gUVJDb2RlTGltaXRMZW5ndGgubGVuZ3RoOyBpIDw9IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgdGFibGUgPSBRUkNvZGVMaW1pdExlbmd0aFtpXTtcbiAgICAgIGlmICghdGFibGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udGVudCB0b28gbG9uZzogZXhwZWN0ZWQgXCIgKyBsaW1pdCArIFwiIGJ1dCBnb3QgXCIgKyBsZW5ndGgpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBzd2l0Y2ggKGVjbCkge1xuICAgICAgICBjYXNlIFwiTFwiOlxuICAgICAgICAgIGxpbWl0ID0gdGFibGVbMF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgICAgbGltaXQgPSB0YWJsZVsxXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBcbiAgICAgICAgY2FzZSBcIlFcIjpcbiAgICAgICAgICBsaW1pdCA9IHRhYmxlWzJdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICBjYXNlIFwiSFwiOlxuICAgICAgICAgIGxpbWl0ID0gdGFibGVbM107XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbndvbiBlcnJvciBjb3JyZWN0aW9uIGxldmVsOiBcIiArIGVjbCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChsZW5ndGggPD0gbGltaXQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHR5cGUrKztcbiAgICB9XG4gICAgXG4gICAgaWYgKHR5cGUgPiBRUkNvZGVMaW1pdExlbmd0aC5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnRlbnQgdG9vIGxvbmdcIik7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgLy9HZXRzIHRleHQgbGVuZ3RoXG4gIGZ1bmN0aW9uIF9nZXRVVEY4TGVuZ3RoKGNvbnRlbnQpIHtcbiAgICB2YXIgcmVzdWx0ID0gZW5jb2RlVVJJKGNvbnRlbnQpLnRvU3RyaW5nKCkucmVwbGFjZSgvXFwlWzAtOWEtZkEtRl17Mn0vZywgJ2EnKTtcbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCArIChyZXN1bHQubGVuZ3RoICE9IGNvbnRlbnQgPyAzIDogMCk7XG4gIH1cbiAgXG4gIC8vR2VuZXJhdGUgUVIgQ29kZSBtYXRyaXhcbiAgdmFyIGNvbnRlbnQgPSB0aGlzLm9wdGlvbnMuY29udGVudDtcbiAgdmFyIHR5cGUgPSBfZ2V0VHlwZU51bWJlcihjb250ZW50LCB0aGlzLm9wdGlvbnMuZWNsKTtcbiAgdmFyIGVjbCA9IF9nZXRFcnJvckNvcnJlY3RMZXZlbCh0aGlzLm9wdGlvbnMuZWNsKTtcbiAgdGhpcy5xcmNvZGUgPSBuZXcgUVJDb2RlTW9kZWwodHlwZSwgZWNsKTtcbiAgdGhpcy5xcmNvZGUuYWRkRGF0YShjb250ZW50KTtcbiAgdGhpcy5xcmNvZGUubWFrZSgpO1xufVxuXG4vKiogR2VuZXJhdGVzIFFSIENvZGUgYXMgU1ZHIGltYWdlICovXG5RUkNvZGUucHJvdG90eXBlLnN2ZyA9IGZ1bmN0aW9uKG9wdCkge1xuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7IH07XG4gIHZhciBtb2R1bGVzID0gdGhpcy5xcmNvZGUubW9kdWxlcztcbiAgXG4gIGlmICh0eXBlb2Ygb3B0ID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBvcHQgPSB7IGNvbnRhaW5lcjogb3B0aW9ucy5jb250YWluZXIgfHwgXCJzdmdcIiB9O1xuICB9XG4gIFxuICAvL0FwcGx5IG5ldyBsaW5lcyBhbmQgaW5kZW50cyBpbiBTVkc/XG4gIHZhciBwcmV0dHkgPSB0eXBlb2Ygb3B0aW9ucy5wcmV0dHkgIT0gXCJ1bmRlZmluZWRcIiA/ICEhb3B0aW9ucy5wcmV0dHkgOiB0cnVlO1xuICBcbiAgdmFyIGluZGVudCA9IHByZXR0eSA/ICcgICcgOiAnJztcbiAgdmFyIEVPTCA9IHByZXR0eSA/ICdcXHJcXG4nIDogJyc7XG4gIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gIHZhciBoZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgdmFyIGxlbmd0aCA9IG1vZHVsZXMubGVuZ3RoO1xuICB2YXIgeHNpemUgPSB3aWR0aCAvIChsZW5ndGggKyAyICogb3B0aW9ucy5wYWRkaW5nKTtcbiAgdmFyIHlzaXplID0gaGVpZ2h0IC8gKGxlbmd0aCArIDIgKiBvcHRpb25zLnBhZGRpbmcpO1xuICBcbiAgLy9Kb2luICh1bmlvbiwgbWVyZ2UpIHJlY3RhbmdsZXMgaW50byBvbmUgc2hhcGU/XG4gIHZhciBqb2luID0gdHlwZW9mIG9wdGlvbnMuam9pbiAhPSBcInVuZGVmaW5lZFwiID8gISFvcHRpb25zLmpvaW4gOiBmYWxzZTtcbiAgXG4gIC8vU3dhcCB0aGUgWCBhbmQgWSBtb2R1bGVzLCBwdWxsIHJlcXVlc3QgIzJcbiAgdmFyIHN3YXAgPSB0eXBlb2Ygb3B0aW9ucy5zd2FwICE9IFwidW5kZWZpbmVkXCIgPyAhIW9wdGlvbnMuc3dhcCA6IGZhbHNlO1xuICBcbiAgLy9BcHBseSA8P3htbC4uLj8+IGRlY2xhcmF0aW9uIGluIFNWRz9cbiAgdmFyIHhtbERlY2xhcmF0aW9uID0gdHlwZW9mIG9wdGlvbnMueG1sRGVjbGFyYXRpb24gIT0gXCJ1bmRlZmluZWRcIiA/ICEhb3B0aW9ucy54bWxEZWNsYXJhdGlvbiA6IHRydWU7XG4gIFxuICAvL1BvcHVsYXRlIHdpdGggcHJlZGVmaW5lZCBzaGFwZSBpbnN0ZWFkIG9mIFwicmVjdFwiIGVsZW1lbnRzLCB0aGFua3MgdG8gQGtrb2Nka29cbiAgdmFyIHByZWRlZmluZWQgPSB0eXBlb2Ygb3B0aW9ucy5wcmVkZWZpbmVkICE9IFwidW5kZWZpbmVkXCIgPyAhIW9wdGlvbnMucHJlZGVmaW5lZCA6IGZhbHNlO1xuICB2YXIgZGVmcyA9IHByZWRlZmluZWQgPyBpbmRlbnQgKyAnPGRlZnM+PHBhdGggaWQ9XCJxcm1vZHVsZVwiIGQ9XCJNMCAwIGgnICsgeXNpemUgKyAnIHYnICsgeHNpemUgKyAnIEgwIHpcIiBzdHlsZT1cImZpbGw6JyArIG9wdGlvbnMuY29sb3IgKyAnO3NoYXBlLXJlbmRlcmluZzpjcmlzcEVkZ2VzO1wiIC8+PC9kZWZzPicgKyBFT0wgOiAnJztcbiAgXG4gIC8vQmFja2dyb3VuZCByZWN0YW5nbGVcbiAgdmFyIGJncmVjdCA9IGluZGVudCArICc8cmVjdCB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCInICsgd2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIiBzdHlsZT1cImZpbGw6JyArIG9wdGlvbnMuYmFja2dyb3VuZCArICc7c2hhcGUtcmVuZGVyaW5nOmNyaXNwRWRnZXM7XCIvPicgKyBFT0w7XG4gIFxuICAvL1JlY3RhbmdsZXMgcmVwcmVzZW50aW5nIG1vZHVsZXNcbiAgdmFyIG1vZHJlY3QgPSAnJztcbiAgdmFyIHBhdGhkYXRhID0gJyc7XG5cbiAgZm9yICh2YXIgeSA9IDA7IHkgPCBsZW5ndGg7IHkrKykge1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgbGVuZ3RoOyB4KyspIHtcbiAgICAgIHZhciBtb2R1bGUgPSBtb2R1bGVzW3hdW3ldO1xuICAgICAgaWYgKG1vZHVsZSkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHB4ID0gKHggKiB4c2l6ZSArIG9wdGlvbnMucGFkZGluZyAqIHhzaXplKTtcbiAgICAgICAgdmFyIHB5ID0gKHkgKiB5c2l6ZSArIG9wdGlvbnMucGFkZGluZyAqIHlzaXplKTtcbiAgICAgICAgXG4gICAgICAgIC8vU29tZSB1c2VycyBoYXZlIGhhZCBpc3N1ZXMgd2l0aCB0aGUgUVIgQ29kZSwgdGhhbmtzIHRvIEBkYW5pb3NvIGZvciB0aGUgc29sdXRpb25cbiAgICAgICAgaWYgKHN3YXApIHtcbiAgICAgICAgICB2YXIgdCA9IHB4O1xuICAgICAgICAgIHB4ID0gcHk7XG4gICAgICAgICAgcHkgPSB0O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoam9pbikge1xuICAgICAgICAgIC8vTW9kdWxlIGFzIGEgcGFydCBvZiBzdmcgcGF0aCBkYXRhLCB0aGFua3MgdG8gQGRhbmlvc29cbiAgICAgICAgICB2YXIgdyA9IHhzaXplICsgcHhcbiAgICAgICAgICB2YXIgaCA9IHlzaXplICsgcHlcblxuICAgICAgICAgIHB4ID0gKE51bWJlci5pc0ludGVnZXIocHgpKT8gTnVtYmVyKHB4KTogcHgudG9GaXhlZCgyKTtcbiAgICAgICAgICBweSA9IChOdW1iZXIuaXNJbnRlZ2VyKHB5KSk/IE51bWJlcihweSk6IHB5LnRvRml4ZWQoMik7XG4gICAgICAgICAgdyA9IChOdW1iZXIuaXNJbnRlZ2VyKHcpKT8gTnVtYmVyKHcpOiB3LnRvRml4ZWQoMik7XG4gICAgICAgICAgaCA9IChOdW1iZXIuaXNJbnRlZ2VyKGgpKT8gTnVtYmVyKGgpOiBoLnRvRml4ZWQoMik7XG5cbiAgICAgICAgICBwYXRoZGF0YSArPSAoJ00nICsgcHggKyAnLCcgKyBweSArICcgVicgKyBoICsgJyBIJyArIHcgKyAnIFYnICsgcHkgKyAnIEgnICsgcHggKyAnIFogJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJlZGVmaW5lZCkge1xuICAgICAgICAgIC8vTW9kdWxlIGFzIGEgcHJlZGVmaW5lZCBzaGFwZSwgdGhhbmtzIHRvIEBra29jZGtvXG4gICAgICAgICAgbW9kcmVjdCArPSBpbmRlbnQgKyAnPHVzZSB4PVwiJyArIHB4LnRvU3RyaW5nKCkgKyAnXCIgeT1cIicgKyBweS50b1N0cmluZygpICsgJ1wiIGhyZWY9XCIjcXJtb2R1bGVcIiAvPicgKyBFT0w7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy9Nb2R1bGUgYXMgcmVjdGFuZ2xlIGVsZW1lbnRcbiAgICAgICAgICBtb2RyZWN0ICs9IGluZGVudCArICc8cmVjdCB4PVwiJyArIHB4LnRvU3RyaW5nKCkgKyAnXCIgeT1cIicgKyBweS50b1N0cmluZygpICsgJ1wiIHdpZHRoPVwiJyArIHhzaXplICsgJ1wiIGhlaWdodD1cIicgKyB5c2l6ZSArICdcIiBzdHlsZT1cImZpbGw6JyArIG9wdGlvbnMuY29sb3IgKyAnO3NoYXBlLXJlbmRlcmluZzpjcmlzcEVkZ2VzO1wiLz4nICsgRU9MO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICBpZiAoam9pbikge1xuICAgIG1vZHJlY3QgPSBpbmRlbnQgKyAnPHBhdGggeD1cIjBcIiB5PVwiMFwiIHN0eWxlPVwiZmlsbDonICsgb3B0aW9ucy5jb2xvciArICc7c2hhcGUtcmVuZGVyaW5nOmNyaXNwRWRnZXM7XCIgZD1cIicgKyBwYXRoZGF0YSArICdcIiAvPic7XG4gIH1cblxuICB2YXIgc3ZnID0gXCJcIjtcbiAgc3dpdGNoIChvcHQuY29udGFpbmVyKSB7XG4gICAgLy9XcmFwcGVkIGluIFNWRyBkb2N1bWVudFxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgIGlmICh4bWxEZWNsYXJhdGlvbikge1xuICAgICAgICBzdmcgKz0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBzdGFuZGFsb25lPVwieWVzXCI/PicgKyBFT0w7XG4gICAgICB9XG4gICAgICBzdmcgKz0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxLjFcIiB3aWR0aD1cIicgKyB3aWR0aCArICdcIiBoZWlnaHQ9XCInICsgaGVpZ2h0ICsgJ1wiPicgKyBFT0w7XG4gICAgICBzdmcgKz0gZGVmcyArIGJncmVjdCArIG1vZHJlY3Q7XG4gICAgICBzdmcgKz0gJzwvc3ZnPic7XG4gICAgICBicmVhaztcbiAgICAgIFxuICAgIC8vVmlld2JveCBmb3IgcmVzcG9uc2l2ZSB1c2UgaW4gYSBicm93c2VyLCB0aGFua3MgdG8gQGRhbmlvc29cbiAgICBjYXNlIFwic3ZnLXZpZXdib3hcIjpcbiAgICAgIGlmICh4bWxEZWNsYXJhdGlvbikge1xuICAgICAgICBzdmcgKz0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBzdGFuZGFsb25lPVwieWVzXCI/PicgKyBFT0w7XG4gICAgICB9XG4gICAgICBzdmcgKz0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxLjFcIiB2aWV3Qm94PVwiMCAwICcgKyB3aWR0aCArICcgJyArIGhlaWdodCArICdcIj4nICsgRU9MO1xuICAgICAgc3ZnICs9IGRlZnMgKyBiZ3JlY3QgKyBtb2RyZWN0O1xuICAgICAgc3ZnICs9ICc8L3N2Zz4nO1xuICAgICAgYnJlYWs7XG4gICAgICBcbiAgICBcbiAgICAvL1dyYXBwZWQgaW4gZ3JvdXAgZWxlbWVudCAgICBcbiAgICBjYXNlIFwiZ1wiOlxuICAgICAgc3ZnICs9ICc8ZyB3aWR0aD1cIicgKyB3aWR0aCArICdcIiBoZWlnaHQ9XCInICsgaGVpZ2h0ICsgJ1wiPicgKyBFT0w7XG4gICAgICBzdmcgKz0gZGVmcyArIGJncmVjdCArIG1vZHJlY3Q7XG4gICAgICBzdmcgKz0gJzwvZz4nO1xuICAgICAgYnJlYWs7XG4gICAgICBcbiAgICAvL1dpdGhvdXQgYSBjb250YWluZXJcbiAgICBkZWZhdWx0OlxuICAgICAgc3ZnICs9IChkZWZzICsgYmdyZWN0ICsgbW9kcmVjdCkucmVwbGFjZSgvXlxccysvLCBcIlwiKTsgLy9DbGVhciBpbmRlbnRzIG9uIGVhY2ggbGluZVxuICAgICAgYnJlYWs7XG4gIH1cbiAgXG4gIHJldHVybiBzdmc7XG59O1xuXG4vKiogV3JpdGVzIFFSIENvZGUgaW1hZ2UgdG8gYSBmaWxlICovXG5RUkNvZGUucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbihmaWxlLCBjYWxsYmFjaykge1xuICB2YXIgZGF0YSA9IHRoaXMuc3ZnKCk7XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2FsbGJhY2sgPSBmdW5jdGlvbihlcnJvciwgcmVzdWx0KSB7IH07XG4gIH1cbiAgdHJ5IHtcbiAgICAvL1BhY2thZ2UgJ2ZzJyBpcyBhdmFpbGFibGUgaW4gbm9kZS5qcyBidXQgbm90IGluIGEgd2ViIGJyb3dzZXJcbiAgICB2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgIGZzLndyaXRlRmlsZShmaWxlLCBkYXRhLCBjYWxsYmFjayk7XG4gIH1cbiAgY2F0Y2ggKGUpIHtcbiAgICAvL1NvcnJ5LCAnZnMnIGlzIG5vdCBhdmFpbGFibGVcbiAgICBjYWxsYmFjayhlKTtcbiAgfVxufTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT0gXCJ1bmRlZmluZWRcIikge1xuICBtb2R1bGUuZXhwb3J0cyA9IFFSQ29kZTtcbn1cbiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCBTWF9JQ09OX0NPUFkgZnJvbSAnIy9pY29uL2NvcHkuc3ZnP3Jhdyc7XG5cblx0ZXhwb3J0IGxldCBrZXk6IHN0cmluZztcblx0Y29uc3Qgc2lfa2V5ID0ga2V5O1xuXG5cdGV4cG9ydCBsZXQgYWRkcmVzcyA9IGZhbHNlO1xuXHRjb25zdCBiX2FkZHJlc3MgPSBhZGRyZXNzO1xuXG5cdGV4cG9ydCBsZXQgY2VudGVyID0gYl9hZGRyZXNzO1xuXHRjb25zdCBiX2NlbnRlciA9IGNlbnRlcjtcblxuXHRleHBvcnQgbGV0IGNvcHlhYmxlID0gZmFsc2U7XG5cdGNvbnN0IGJfY29weWFibGUgPSBjb3B5YWJsZTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cblx0LmluZm8ge1xuXHRcdC0taWNvbi1kaWFtZXRlcjogMjRweDtcblxuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdFx0aGVpZ2h0OiB2YXIoLS11aS1yb3ctaGVpZ2h0KTtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdHBhZGRpbmc6IHZhcigtLXVpLXBhZGRpbmcpIDEycHg7XG5cblx0XHRib3JkZXI6IDFweCBkYXNoZWQgdmFyKC0tdGhlbWUtY29sb3ItYm9yZGVyKTtcblx0XHRib3JkZXItcmFkaXVzOiB2YXIoLS11aS1ib3JkZXItcmFkaXVzKTtcblxuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRcdCYuY29weWFibGUge1xuXHRcdFx0Y3Vyc29yOiBjb3B5O1xuXHRcdH1cblxuXHRcdD4qIHtcblx0XHRcdGZsZXg6IHZhcigtLWZsZXgsIDApO1xuXHRcdH1cblxuXHRcdC5pbmZvLXZhbHVlIHtcblx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0ZGlzcGxheTogZmxleDtcblxuXHRcdFx0Pi5hZGRyZXNzIHtcblx0XHRcdFx0Omdsb2JhbCgmKSB7XG5cdFx0XHRcdFx0d2lkdGg6IGNhbGMoMTAwJSAtIDFjaCkgIWltcG9ydGFudDtcblx0XHRcdFx0XHRjb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItdGV4dC1saWdodCkgIWltcG9ydGFudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC5pY29uIHtcblx0XHRcdC0taWNvbi1kaWFtZXRlcjogdmFyKC0taWNvbi1kaWFtZXRlcik7XG5cdFx0XHQtLWljb24tY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnkpO1xuXHRcdFx0ZGlzcGxheTogaW5saW5lLWZsZXg7XG5cdFx0fVxuXHR9XG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwiaW5mb1wiIGNsYXNzOmNvcHlhYmxlPXtiX2NvcHlhYmxlfSBjbGFzczpjZW50ZXI9e2JfY2VudGVyfT5cblx0PHNwYW4gaWQ9e3NpX2tleX0gY2xhc3M9XCJpbmZvLXZhbHVlXCI+XG5cdFx0PHNsb3Q+PC9zbG90PlxuXHQ8L3NwYW4+XG5cdHsjaWYgYl9jb3B5YWJsZX1cblx0XHQ8c3BhbiBjbGFzcz1cImljb25cIj5cblx0XHRcdHtAaHRtbCBTWF9JQ09OX0NPUFl9XG5cdFx0PC9zcGFuPlxuXHR7L2lmfVxuPC9kaXY+XG4iLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuXHRpbXBvcnQgUVJDb2RlIGZyb20gJ3FyY29kZS1zdmcnO1xuXHRcblx0aW1wb3J0IHt5d19wb3B1cCwgeXdfY29udGV4dF9wb3B1cCwgeXdfYWNjb3VudF9yZWYsIHl3X2NoYWluX3JlZn0gZnJvbSAnLi4vbWVtJztcblxuXHRpbXBvcnQgRmllbGQgZnJvbSAnLi9GaWVsZC5zdmVsdGUnO1xuXHRpbXBvcnQgSW5mbyBmcm9tICcuL0luZm8uc3ZlbHRlJztcblx0aW1wb3J0IEFkZHJlc3MgZnJvbSAnLi9BZGRyZXNzLnN2ZWx0ZSc7XG5cdGltcG9ydCBDbG9zZSBmcm9tICcuL0Nsb3NlLnN2ZWx0ZSc7XG5cdGltcG9ydCBTdGFyU2VsZWN0LCB7U2VsZWN0T3B0aW9ufSBmcm9tICcuL1N0YXJTZWxlY3Quc3ZlbHRlJztcblx0aW1wb3J0IHtDaGFpbnN9IGZyb20gJyMvc3RvcmUvY2hhaW5zJztcblx0aW1wb3J0IHtvZGUsIG9kZXJhYywgb2ZlfSBmcm9tICcjL3V0aWwvYmVsdCc7XG5cdGltcG9ydCB0eXBlIHtDaGFpbiwgQ2hhaW5QYXRofSBmcm9tICcjL21ldGEvY2hhaW4nO1xuXHRpbXBvcnQge0FjY291bnRzfSBmcm9tICcjL3N0b3JlL2FjY291bnRzJztcblx0aW1wb3J0IHR5cGUge0FjY291bnQsIEFjY291bnRQYXRofSBmcm9tICcjL21ldGEvYWNjb3VudCc7XG5cdGltcG9ydCB0eXBlIHsgUGZwUGF0aCB9IGZyb20gJyMvbWV0YS9wZnAnO1xuXHRpbXBvcnQgUGZwRGlzcGxheSBmcm9tICcuL1BmcERpc3BsYXkuc3ZlbHRlJztcblx0aW1wb3J0IHsgZGQgfSBmcm9tICcjL3V0aWwvZG9tJztcblx0aW1wb3J0IHR5cGUgeyBSZXNvdXJjZSB9IGZyb20gJyMvbWV0YS9yZXNvdXJjZSc7XG5cdGltcG9ydCB0eXBlIHsgTmFtZWFibGUsIFBmcGFibGUgfSBmcm9tICcjL21ldGEvYWJsZSc7XG5cblx0Ly8gc2VsZWN0ZWQgYWNjb3VudFxuXHRsZXQgZ19vcHRpb25fc2VsZWN0ZWRfYWNjb3VudDogUGljazxTZWxlY3RPcHRpb248QWNjb3VudFBhdGg+LCAndmFsdWUnPiA9IHt2YWx1ZTokeXdfYWNjb3VudF9yZWZ9O1xuXHQkOiBwX2FjY291bnRfc2VsZWN0ZWQgPSBnX29wdGlvbl9zZWxlY3RlZF9hY2NvdW50LnZhbHVlO1xuXG5cdC8vIHJlYWN0aXZlbHkgdXBkYXRlIGFjY291bnRcblx0bGV0IGdfYWNjb3VudF9zZWxlY3RlZDogQWNjb3VudFsnaW50ZXJmYWNlJ107XG5cdCQ6IHtcblx0XHRpZihwX2FjY291bnRfc2VsZWN0ZWQpIHtcblx0XHRcdHZvaWQgQWNjb3VudHMucmVhZCgpLnRoZW4oKGtzX2FjY291bnRzKSA9PiB7XG5cdFx0XHRcdGdfYWNjb3VudF9zZWxlY3RlZCA9IGtzX2FjY291bnRzLmF0KHBfYWNjb3VudF9zZWxlY3RlZCBhcyBBY2NvdW50UGF0aCkhO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gY29udmVydCBhbiBhY2NvdW50IHBhdGgraW50ZXJmYWNlIHRvIGEgc2VsZWN0IG9wdGlvblxuXHRjb25zdCBhY2NvdW50X3RvX29wdGlvbiA9IChwX2FjY291bnQ6IEFjY291bnRQYXRoLCBnX2FjY291bnQ6IEFjY291bnRbJ2ludGVyZmFjZSddKTogU2VsZWN0T3B0aW9uPEFjY291bnRQYXRoPiA9PiAoe1xuXHRcdG9iamVjdDogZ19hY2NvdW50LFxuXHRcdHZhbHVlOiBwX2FjY291bnQsXG5cdFx0cHJpbWFyeTogZ19hY2NvdW50Lm5hbWUsXG5cdFx0c2Vjb25kYXJ5OiBnX2FjY291bnQuZXh0cmE/LnRvdGFsX2ZpYXRfY2FjaGUgfHwgJyg/KScsXG5cdH0pO1xuXG5cdC8vIHByZXAgYWNjb3VudCBwZnBzXG5cdGxldCBoX3BmcHNfYWNjb3VudDogUmVjb3JkPFBmcFBhdGgsIEhUTUxFbGVtZW50PiA9IHt9O1xuXG5cdC8vIGxvYWRzIGFjY291bnQgZnJvbSBzdG9yZSBhbmQgcHJvZHVjZXMgbGlzdCBvZiBzZWxlY3Qgb3B0aW9uc1xuXHRhc3luYyBmdW5jdGlvbiBsb2FkX2FjY291bnRfb3B0aW9ucygpOiBQcm9taXNlPFNlbGVjdE9wdGlvbjxBY2NvdW50UGF0aD5bXT4ge1xuXHRcdC8vIGxvYWQgYWNjb3VudHMgc3RvcmVcblx0XHRjb25zdCBrc19hY2NvdW50cyA9IGF3YWl0IEFjY291bnRzLnJlYWQoKTtcblxuXHRcdC8vIGFzeW5jaHJvbm91c2x5IGxvYWQgYWxsIHBmcHNcblx0XHRoX3BmcHNfYWNjb3VudCA9IG9mZShcblx0XHRcdGF3YWl0IFByb21pc2UuYWxsKFxuXHRcdFx0XHRvZGUoa3NfYWNjb3VudHMucmF3KS5tYXAoKFtfLCBnX2FjY291bnRdKSA9PiBuZXcgUHJvbWlzZShcblx0XHRcdFx0XHQoZmtfcmVzb2x2ZTogKGFfZW50cnk6IFtQZnBQYXRoLCBIVE1MRWxlbWVudF0pID0+IHZvaWQpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IGRtX2R1bW15ID0gZGQoJ3NwYW4nKTtcblx0XHRcdFx0XHRcdGNvbnN0IHljX3BmcCA9IG5ldyBQZnBEaXNwbGF5KHtcblx0XHRcdFx0XHRcdFx0dGFyZ2V0OiBkbV9kdW1teSxcblx0XHRcdFx0XHRcdFx0cHJvcHM6IHtcblx0XHRcdFx0XHRcdFx0XHRkaW06IDI4LFxuXHRcdFx0XHRcdFx0XHRcdGdlblN0eWxlOiAnZm9udC1zaXplOiAxOHB4OycsXG5cdFx0XHRcdFx0XHRcdFx0cmVzb3VyY2U6IGdfYWNjb3VudCxcblx0XHRcdFx0XHRcdFx0XHRzZXR0bGUoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBkbV9wZnAgPSBkbV9kdW1teS5maXJzdENoaWxkPy5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRcdFx0XHR5Y19wZnAuJGRlc3Ryb3koKTtcblx0XHRcdFx0XHRcdFx0XHRcdGZrX3Jlc29sdmUoW2dfYWNjb3VudC5wZnAsIGRtX3BmcF0pO1xuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCkpXG5cdFx0XHQpKTtcblxuXHRcdC8vIGNvbnZlcnQgY2hhaW4gZGljdCB0byBsaXN0IG9mIHNlbGVjdCBvcHRpb25zXG5cdFx0cmV0dXJuIG9kZXJhYyhrc19hY2NvdW50cy5yYXcsIGFjY291bnRfdG9fb3B0aW9uKTtcblx0fVxuXG5cdC8vIHNlbGVjdGVkIGNoYWluXG5cdGxldCBnX29wdGlvbl9zZWxlY3RlZF9jaGFpbjogUGljazxTZWxlY3RPcHRpb248Q2hhaW5QYXRoPiwgJ3ZhbHVlJz4gPSB7dmFsdWU6JHl3X2NoYWluX3JlZn07XG5cdCQ6IHBfY2hhaW5fc2VsZWN0ZWQgPSBnX29wdGlvbl9zZWxlY3RlZF9jaGFpbi52YWx1ZTtcblxuXHQvLyByZWFjdGl2ZWx5IHVwZGF0ZSBzZWxlY3RlZCBjaGFpblxuXHRsZXQgZ19jaGFpbl9zZWxlY3RlZDogQ2hhaW5bJ2ludGVyZmFjZSddO1xuXHQkOiB7XG5cdFx0aWYocF9jaGFpbl9zZWxlY3RlZCkge1xuXHRcdFx0dm9pZCBDaGFpbnMucmVhZCgpLnRoZW4oKGtzX2NoYWlucykgPT4ge1xuXHRcdFx0XHRnX2NoYWluX3NlbGVjdGVkID0ga3NfY2hhaW5zLmF0KHBfY2hhaW5fc2VsZWN0ZWQgYXMgQ2hhaW5QYXRoKSE7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHQvLyBjb252ZXJ0IGEgY2hhaW4gcGF0aCtpbnRlcmZhY2UgdG8gYSBzZWxlY3Qgb3B0aW9uXG5cdGNvbnN0IGNoYWluX3RvX29wdGlvbiA9IChwX2NoYWluOiBDaGFpblBhdGgsIGdfY2hhaW46IENoYWluWydpbnRlcmZhY2UnXSkgPT4gKHtcblx0XHRvYmplY3Q6IGdfY2hhaW4sXG5cdFx0dmFsdWU6IHBfY2hhaW4sXG5cdFx0cHJpbWFyeTogZ19jaGFpbi5uYW1lLFxuXHRcdHNlY29uZGFyeTogZ19jaGFpbi5pZCxcblx0XHRwZnA6IGdfY2hhaW4ucGZwLFxuXHR9KTtcblxuXHQvLyBwcmVwIGNoYWluIHBmcHNcblx0bGV0IGhfcGZwc19jaGFpbjogUmVjb3JkPENoYWluUGF0aCwgSFRNTEVsZW1lbnQ+ID0ge307XG5cblx0Ly8gbG9hZHMgY2hhaW4gZnJvbSBzdG9yZSBhbmQgcHJvZHVjZXMgbGlzdCBvZiBzZWxlY3Qgb3B0aW9uc1xuXHRhc3luYyBmdW5jdGlvbiBsb2FkX2NoYWluX29wdGlvbnMoKTogUHJvbWlzZTxTZWxlY3RPcHRpb25bXT4ge1xuXHRcdC8vIGxvYWQgY2hhaW5zIHN0b3JlXG5cdFx0Y29uc3Qga3NfY2hhaW5zID0gYXdhaXQgQ2hhaW5zLnJlYWQoKTtcblxuXHRcdC8vIGFzeW5jaHJvbm91c2x5IGxvYWQgYWxsIHBmcHNcblx0XHRoX3BmcHNfY2hhaW4gPSBhd2FpdCBsb2FkX3BmcHMoa3NfY2hhaW5zLnJhdyk7XG5cblx0XHQvLyBjb252ZXJ0IGNoYWluIGRpY3QgdG8gbGlzdCBvZiBzZWxlY3Qgb3B0aW9uc1xuXHRcdHJldHVybiBvZGVyYWMoa3NfY2hhaW5zLnJhdywgY2hhaW5fdG9fb3B0aW9uKTtcblx0fVxuXHRcblx0XG5cdC8vIG5vIGNvbnRleHQgd2FzIHByb3ZpZGVkLCBkZWZhdWx0IHRvIGN1cnJlbnQgYWNjb3VudFxuXHRpZighJHl3X2NvbnRleHRfcG9wdXA/LmFjY291bnQpIHtcblx0XHQkeXdfY29udGV4dF9wb3B1cCA9IHthY2NvdW50OiR5d19hY2NvdW50X3JlZn07XG5cdH1cblxuXG5cdC8vIHJlYWN0aXZlbHkgZ2VuZXJhdGUgcXJjb2RlXG5cdGxldCBkbV9xcjogSFRNTEVsZW1lbnQ7XG5cdCQ6IHtcblx0XHRpZihkbV9xciAmJiBnX2FjY291bnRfc2VsZWN0ZWQgJiYgZ19jaGFpbl9zZWxlY3RlZCkge1xuXHRcdFx0Y29uc3QgeV9xcmNvZGUgPSBuZXcgUVJDb2RlKHtcblx0XHRcdFx0Y29udGVudDogYHN0YXJzaGVsbDoke0NoYWlucy5hZGRyZXNzRm9yKGdfYWNjb3VudF9zZWxlY3RlZC5wdWJrZXksIGdfY2hhaW5fc2VsZWN0ZWQpIHx8ICcnfWAsXG5cdFx0XHRcdHdpZHRoOiAyNDAsXG5cdFx0XHRcdGhlaWdodDogMjQwLFxuXHRcdFx0XHRwYWRkaW5nOiAzLFxuXHRcdFx0XHRlY2w6ICdIJyxcblx0XHRcdFx0am9pbjogdHJ1ZSxcblx0XHRcdH0pLnN2ZygpO1xuXG5cdFx0XHRkbV9xci5pbm5lckhUTUwgPSB5X3FyY29kZTtcblx0XHR9XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiBsb2FkX3BmcHM8XG5cdFx0cF9yZXMgZXh0ZW5kcyBSZXNvdXJjZS5QYXRoLFxuXHRcdGdfcmVzIGV4dGVuZHMgKE5hbWVhYmxlICYgUGZwYWJsZSksXG5cdD4oaF9yZXNvdXJjZXM6IFJlY29yZDxwX3JlcywgZ19yZXM+KTogUHJvbWlzZTxSZWNvcmQ8cF9yZXMsIEhUTUxFbGVtZW50Pj4ge1xuXHRcdHJldHVybiBvZmUoXG5cdFx0XHRhd2FpdCBQcm9taXNlLmFsbChcblx0XHRcdFx0b2RlKGhfcmVzb3VyY2VzKS5tYXAoKFtfLCBnX3Jlc291cmNlXSkgPT4gbmV3IFByb21pc2UoXG5cdFx0XHRcdFx0KGZrX3Jlc29sdmU6IChhX2VudHJ5OiBbcF9yZXMsIEhUTUxFbGVtZW50XSkgPT4gdm9pZCkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgZG1fZHVtbXkgPSBkZCgnc3BhbicpO1xuXHRcdFx0XHRcdFx0Y29uc3QgeWNfcGZwID0gbmV3IFBmcERpc3BsYXkoe1xuXHRcdFx0XHRcdFx0XHR0YXJnZXQ6IGRtX2R1bW15LFxuXHRcdFx0XHRcdFx0XHRwcm9wczoge1xuXHRcdFx0XHRcdFx0XHRcdGRpbTogMjgsXG5cdFx0XHRcdFx0XHRcdFx0Z2VuU3R5bGU6ICdmb250LXNpemU6IDE4cHg7Jyxcblx0XHRcdFx0XHRcdFx0XHRyZXNvdXJjZTogZ19yZXNvdXJjZSxcblx0XHRcdFx0XHRcdFx0XHRzZXR0bGUoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBkbV9wZnAgPSBkbV9kdW1teS5maXJzdENoaWxkPy5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRcdFx0XHR5Y19wZnAuJGRlc3Ryb3koKTtcblx0XHRcdFx0XHRcdFx0XHRcdGZrX3Jlc29sdmUoW2dfcmVzb3VyY2UucGZwIGFzIHBfcmVzLCBkbV9wZnBdKTtcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpKVxuXHRcdFx0KSk7XG5cdH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cblx0QGltcG9ydCAnLi9fYmFzZS5sZXNzJztcblxuXHQucXItY29kZSB7XG5cdFx0ZmxleC1zaHJpbms6IDA7XG5cdFx0d2lkdGg6IDI0MHB4O1xuXHRcdGhlaWdodDogMjQwcHg7XG5cdFx0Ym9yZGVyLXJhZGl1czogOHB4O1xuXHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHRcdG1hcmdpbi1sZWZ0OiBhdXRvO1xuXHRcdG1hcmdpbi1yaWdodDogYXV0bztcblx0fVxuXG5cdC5pbmZvIHtcblx0XHQuZm9udChyZWd1bGFyKTtcblx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdH1cbjwvc3R5bGU+XG5cblxuPGgzPlxuXHRSZWNlaXZlXG48L2gzPlxuXG48Q2xvc2UgYWJzb2x1dGUgLS1tYXJnaW49JzVweCcgb246Y2xpY2s9eygpID0+ICR5d19wb3B1cCA9IG51bGx9IC8+XG5cbjxGaWVsZCBzaG9ydFxuXHRrZXk9XCJjaGFpbi1zZWxlY3RcIlxuXHRuYW1lPVwiQ2hhaW5cIlxuPlxuXHR7I2F3YWl0IGxvYWRfY2hhaW5fb3B0aW9ucygpfVxuXHRcdExvYWRpbmcgY2hhaW5zLi4uXG5cdHs6dGhlbiBhX2NoYWluc19zZWxlY3R9XG5cdFx0PFN0YXJTZWxlY3QgaWQ9XCJjaGFpbi1zZWxlY3RcIlxuXHRcdFx0cGZwTWFwPXtoX3BmcHNfY2hhaW59XG5cdFx0XHRwbGFjZWhvbGRlcj1cIlNlbGVjdCBjaGFpblwiXG5cdFx0XHRpdGVtcz17YV9jaGFpbnNfc2VsZWN0fVxuXHRcdFx0YmluZDp2YWx1ZT17Z19vcHRpb25fc2VsZWN0ZWRfY2hhaW59XG5cdFx0Lz5cblx0ey9hd2FpdH1cbjwvRmllbGQ+XG5cbjxGaWVsZCBzaG9ydFxuXHRrZXk9XCJhY2NvdW50LXNlbGVjdFwiXG5cdG5hbWU9XCJBY2NvdW50XCJcbj5cblx0eyNhd2FpdCBsb2FkX2FjY291bnRfb3B0aW9ucygpfVxuXHRcdExvYWRpbmcgQWNjb3VudHMuLi5cblx0ezp0aGVuIGFfYWNjb3VudHNfc2VsZWN0fVxuXHRcdDxTdGFyU2VsZWN0IGlkPVwiYWNjb3VudC1zZWxlY3RcIlxuXHRcdFx0cGZwTWFwPXtoX3BmcHNfYWNjb3VudH1cblx0XHRcdHBsYWNlaG9sZGVyPVwiU2VsZWN0IGFjY291bnRcIlxuXHRcdFx0c2Vjb25kYXJ5Q2xhc3M9J2JhbGFuY2UnXG5cdFx0XHRpdGVtcz17YV9hY2NvdW50c19zZWxlY3R9XG5cdFx0XHRiaW5kOnZhbHVlPXtnX29wdGlvbl9zZWxlY3RlZF9hY2NvdW50fVxuXHRcdC8+XG5cdHsvYXdhaXR9XG48L0ZpZWxkPlxuXG48SW5mbyBhZGRyZXNzIGtleT1cInJlY2VpdmUtYWRkcmVzc1wiPlxuXHR7I2lmIGdfYWNjb3VudF9zZWxlY3RlZCAmJiBnX2NoYWluX3NlbGVjdGVkfVxuXHRcdDxBZGRyZXNzIGNvcHlhYmxlIGFkZHJlc3M9e0NoYWlucy5hZGRyZXNzRm9yKGdfYWNjb3VudF9zZWxlY3RlZD8ucHVia2V5LCBnX2NoYWluX3NlbGVjdGVkKSB8fCAnJ30gLz5cblx0ey9pZn1cbjwvSW5mbz5cblxuXG48ZGl2IGNsYXNzPVwicXItY29kZVwiIGJpbmQ6dGhpcz17ZG1fcXJ9IC8+XG5cbjxkaXYgY2xhc3M9XCJpbmZvXCI+XG5cdFNjYW4gUVIgY29kZSB0byByZWNlaXZlIHRvIHRoaXMgYWRkcmVzc1xuPC9kaXY+IiwiaW1wb3J0IHR5cGUgeyBSZXBsYWNlIH0gZnJvbSAndHMtdG9vbGJlbHQvb3V0L1N0cmluZy9SZXBsYWNlJztcbmltcG9ydCB0eXBlIHsgQXBwLCBBcHBTY2hlbWVLZXkgfSBmcm9tICcjL21ldGEvYXBwJztcbmltcG9ydCB0eXBlIHsgUmVzb3VyY2UgfSBmcm9tICcjL21ldGEvcmVzb3VyY2UnO1xuXG5pbXBvcnQge1xuXHRjcmVhdGVfc3RvcmVfY2xhc3MsXG5cdFdyaXRhYmxlU3RvcmVNYXAsXG59IGZyb20gJy4vX2Jhc2UnO1xuXG5pbXBvcnQgeyBTSV9TVE9SRV9BUFBTIH0gZnJvbSAnIy9zaGFyZS9jb25zdGFudHMnO1xuXG5leHBvcnQgY29uc3QgQXBwcyA9IGNyZWF0ZV9zdG9yZV9jbGFzcyh7XG5cdHN0b3JlOiBTSV9TVE9SRV9BUFBTLFxuXHRjbGFzczogY2xhc3MgQXBwc0kgZXh0ZW5kcyBXcml0YWJsZVN0b3JlTWFwPHR5cGVvZiBTSV9TVE9SRV9BUFBTPiB7XG5cdFx0c3RhdGljIHBhdGhGb3I8XG5cdFx0XHRzX2hvc3QgZXh0ZW5kcyBzdHJpbmcsXG5cdFx0XHRzX3NjaGVtZSBleHRlbmRzIEFwcFNjaGVtZUtleSxcblx0XHRcdGdfYXBwIGV4dGVuZHMgQXBwPFJlcGxhY2U8c19ob3N0LCAnOicsICcrJz4sIHNfc2NoZW1lPixcblx0XHQ+KHNfaG9zdDogc19ob3N0LCBzX3NjaGVtZTogc19zY2hlbWUpOiBSZXNvdXJjZS5QYXRoPGdfYXBwPiB7XG5cdFx0XHRyZXR1cm4gYC9zY2hlbWUuJHtzX3NjaGVtZX0vaG9zdC4ke3NfaG9zdC5yZXBsYWNlKC86L2csICcrJyl9YCBhcyBSZXNvdXJjZS5QYXRoPGdfYXBwPjtcblx0XHR9XG5cblx0XHRzdGF0aWMgcGF0aEZyb208XG5cdFx0XHRnX2FwcCBleHRlbmRzIEFwcCxcblx0XHQ+KGdfYXBwOiBBcHBbJ2ludGVyZmFjZSddKTogUmVzb3VyY2UuUGF0aDxnX2FwcD4ge1xuXHRcdFx0cmV0dXJuIEFwcHNJLnBhdGhGb3IoZ19hcHAuaG9zdCwgZ19hcHAuc2NoZW1lKTtcblx0XHR9XG5cblx0XHRzdGF0aWMgZ2V0KHNfaG9zdDogc3RyaW5nLCBzX3NjaGVtZTogQXBwU2NoZW1lS2V5KTogUHJvbWlzZTxudWxsIHwgQXBwWydpbnRlcmZhY2UnXT4ge1xuXHRcdFx0cmV0dXJuIEFwcHMub3Blbihrc19hcHBzID0+IGtzX2FwcHMuZ2V0KHNfaG9zdCwgc19zY2hlbWUpKTtcblx0XHR9XG5cblx0XHRnZXQoc19ob3N0OiBzdHJpbmcsIHNfc2NoZW1lOiBBcHBTY2hlbWVLZXkpOiBBcHBbJ2ludGVyZmFjZSddIHwgbnVsbCB7XG5cdFx0XHQvLyBwcmVwYXJlIGFwcCBwYXRoXG5cdFx0XHRjb25zdCBwX2FwcCA9IEFwcHNJLnBhdGhGb3Ioc19ob3N0LCBzX3NjaGVtZSk7XG5cblx0XHRcdC8vIGZldGNoXG5cdFx0XHRyZXR1cm4gdGhpcy5fd19jYWNoZVtwX2FwcF0gPz8gbnVsbDtcblx0XHR9XG5cblxuXHRcdGFzeW5jIHB1dChnX2FwcDogQXBwWydpbnRlcmZhY2UnXSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdFx0Ly8gcHJlcGFyZSBhcHAgcGF0aFxuXHRcdFx0Y29uc3QgcF9hcHAgPSBBcHBzSS5wYXRoRm9yKGdfYXBwLmhvc3QsIGdfYXBwLnNjaGVtZSk7XG5cblx0XHRcdC8vIHVwZGF0ZSBjYWNoZVxuXHRcdFx0dGhpcy5fd19jYWNoZVtwX2FwcF0gPSBnX2FwcDtcblxuXHRcdFx0Ly8gYXR0ZW1wdCB0byBzYXZlXG5cdFx0XHRhd2FpdCB0aGlzLnNhdmUoKTtcblx0XHR9XG5cdH0sXG59KTtcblxuIiwiLy8gRmFsbGJhY2sgbG9jYWxlLlxuLy8gKHdoZW4gbm90IGEgc2luZ2xlIG9uZSBvZiB0aGUgc3VwcGxpZWQgXCJwcmVmZXJyZWRcIiBsb2NhbGVzIGlzIGF2YWlsYWJsZSlcbnZhciBkZWZhdWx0TG9jYWxlID0gJ2VuJzsgLy8gRm9yIGFsbCBsb2NhbGVzIGFkZGVkXG4vLyB0aGVpciByZWxhdGl2ZSB0aW1lIGZvcm1hdHRlciBtZXNzYWdlcyB3aWxsIGJlIHN0b3JlZCBoZXJlLlxuXG52YXIgbG9jYWxlc0RhdGEgPSB7fTsgLy8gQWNjb3JkaW5nIHRvIHRoZSBzcGVjIEJDUCA0NyBsYW5ndWFnZSB0YWdzIGFyZSBjYXNlLWluc2Vuc2l0aXZlLlxuLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU2NDZcblxudmFyIGxvd2VyY2FzZUxvY2FsZUxvb2t1cCA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRMb2NhbGUoKSB7XG4gIHJldHVybiBkZWZhdWx0TG9jYWxlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRMb2NhbGUobG9jYWxlKSB7XG4gIGRlZmF1bHRMb2NhbGUgPSBsb2NhbGU7XG59XG4vKipcclxuICogR2V0cyBsb2NhbGUgZGF0YSBwcmV2aW91c2x5IGFkZGVkIGJ5IGBhZGRMb2NhbGVEYXRhKClgLlxyXG4gKiBAcmV0dXJuICB7b2JqZWN0fSBbbG9jYWxlRGF0YV1cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGVEYXRhKGxvY2FsZSkge1xuICByZXR1cm4gbG9jYWxlc0RhdGFbbG9jYWxlXTtcbn1cbi8qKlxyXG4gKiBBZGRzIGxvY2FsZSBkYXRhLlxyXG4gKiBJcyBjYWxsZWQgYnkgYFJlbGF0aXZlVGltZUZvcm1hdC5hZGRMb2NhbGUoLi4uKWAuXHJcbiAqIEBwYXJhbSAge29iamVjdH0gbG9jYWxlRGF0YVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZExvY2FsZURhdGEobG9jYWxlRGF0YSkge1xuICBpZiAoIWxvY2FsZURhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGxvY2FsZSBkYXRhIHBhc3NlZCcpO1xuICB9IC8vIFRoaXMgbG9jYWxlIGRhdGEgaXMgc3RvcmVkIGluIGEgZ2xvYmFsIHZhcmlhYmxlXG4gIC8vIGFuZCBsYXRlciB1c2VkIHdoZW4gY2FsbGluZyBgLmZvcm1hdCh0aW1lKWAuXG5cblxuICBsb2NhbGVzRGF0YVtsb2NhbGVEYXRhLmxvY2FsZV0gPSBsb2NhbGVEYXRhO1xuICBsb3dlcmNhc2VMb2NhbGVMb29rdXBbbG9jYWxlRGF0YS5sb2NhbGUudG9Mb3dlckNhc2UoKV0gPSBsb2NhbGVEYXRhLmxvY2FsZTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIGEgbG9jYWxlIGZvciB3aGljaCBsb2NhbGUgZGF0YSBoYXMgYmVlbiBhZGRlZFxyXG4gKiB2aWEgYFJlbGF0aXZlVGltZUZvcm1hdC5hZGRMb2NhbGUoLi4uKWAuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbG9jYWxlXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gW2xvY2FsZV1cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlTG9jYWxlKGxvY2FsZSkge1xuICBpZiAobG9jYWxlc0RhdGFbbG9jYWxlXSkge1xuICAgIHJldHVybiBsb2NhbGU7XG4gIH1cblxuICBpZiAobG93ZXJjYXNlTG9jYWxlTG9va3VwW2xvY2FsZS50b0xvd2VyQ2FzZSgpXSkge1xuICAgIHJldHVybiBsb3dlcmNhc2VMb2NhbGVMb29rdXBbbG9jYWxlLnRvTG93ZXJDYXNlKCldO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Mb2NhbGVEYXRhU3RvcmUuanMubWFwIiwiaW1wb3J0IHsgcmVzb2x2ZUxvY2FsZSBhcyByZXNvbHZlTG9jYWxlRm9yRGF0YSB9IGZyb20gJy4vTG9jYWxlRGF0YVN0b3JlLmpzJztcbi8qKlxyXG4gKiBSZXNvbHZlcyBhIGxvY2FsZSB0byBhIHN1cHBvcnRlZCBvbmUgKGlmIGFueSkuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbG9jYWxlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBBbiBvYmplY3QgdGhhdCBtYXkgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnR5OlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlTWF0Y2hlcj1cImxvb2t1cFwiXSAtIFRoZSBsb2NhbGUgbWF0Y2hpbmcgYWxnb3JpdGhtIHRvIHVzZS4gUG9zc2libGUgdmFsdWVzIGFyZSBcImxvb2t1cFwiIGFuZCBcImJlc3QgZml0XCIuIEN1cnJlbnRseSBvbmx5IFwibG9va3VwXCIgaXMgc3VwcG9ydGVkLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFtsb2NhbGVdXHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIFJldHVybnMgXCJzclwiXHJcbiAqIHJlc29sdmVMb2NhbGUoXCJzci1DeXJsLUJBXCIpXHJcbiAqIC8vIFJldHVybnMgYHVuZGVmaW5lZGBcclxuICogcmVzb2x2ZUxvY2FsZShcInh4LUxhdG5cIilcclxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIGxvY2FsZU1hdGNoZXIgPSBvcHRpb25zLmxvY2FsZU1hdGNoZXIgfHwgJ2xvb2t1cCc7XG5cbiAgc3dpdGNoIChsb2NhbGVNYXRjaGVyKSB7XG4gICAgY2FzZSAnbG9va3VwJzpcbiAgICAgIHJldHVybiByZXNvbHZlTG9jYWxlTG9va3VwKGxvY2FsZSk7XG4gICAgLy8gXCJiZXN0IGZpdFwiIGxvY2FsZSBtYXRjaGluZyBpcyBub3Qgc3VwcG9ydGVkLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRhbXBoZXRhbWluZS9yZWxhdGl2ZS10aW1lLWZvcm1hdC9pc3N1ZXMvMlxuXG4gICAgY2FzZSAnYmVzdCBmaXQnOlxuICAgICAgLy8gcmV0dXJuIHJlc29sdmVMb2NhbGVCZXN0Rml0KGxvY2FsZSlcbiAgICAgIHJldHVybiByZXNvbHZlTG9jYWxlTG9va3VwKGxvY2FsZSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIFxcXCJsb2NhbGVNYXRjaGVyXFxcIiBvcHRpb246IFwiLmNvbmNhdChsb2NhbGVNYXRjaGVyKSk7XG4gIH1cbn1cbi8qKlxyXG4gKiBSZXNvbHZlcyBhIGxvY2FsZSB0byBhIHN1cHBvcnRlZCBvbmUgKGlmIGFueSkuXHJcbiAqIFN0YXJ0cyBmcm9tIHRoZSBtb3N0IHNwZWNpZmljIGxvY2FsZSBhbmQgZ3JhZHVhbGx5XHJcbiAqIGZhbGxzIGJhY2sgdG8gbGVzcyBzcGVjaWZpYyBvbmVzLlxyXG4gKiBUaGlzIGlzIGEgYmFzaWMgaW1wbGVtZW50YXRpb24gb2YgdGhlIFwibG9va3VwXCIgYWxnb3JpdGhtLlxyXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDY0NyNzZWN0aW9uLTMuNFxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGxvY2FsZVxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFtsb2NhbGVdXHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIFJldHVybnMgXCJzclwiXHJcbiAqIHJlc29sdmVMb2NhbGVMb29rdXAoXCJzci1DeXJsLUJBXCIpXHJcbiAqIC8vIFJldHVybnMgYHVuZGVmaW5lZGBcclxuICogcmVzb2x2ZUxvY2FsZUxvb2t1cChcInh4LUxhdG5cIilcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlTG9jYWxlTG9va3VwKGxvY2FsZSkge1xuICB2YXIgcmVzb2x2ZWRMb2NhbGUgPSByZXNvbHZlTG9jYWxlRm9yRGF0YShsb2NhbGUpO1xuXG4gIGlmIChyZXNvbHZlZExvY2FsZSkge1xuICAgIHJldHVybiByZXNvbHZlZExvY2FsZTtcbiAgfSAvLyBgc3ItQ3lybC1CQWAgLT4gYHNyLUN5cmxgIC0+IGBzcmAuXG5cblxuICB2YXIgcGFydHMgPSBsb2NhbGUuc3BsaXQoJy0nKTtcblxuICB3aGlsZSAobG9jYWxlLmxlbmd0aCA+IDEpIHtcbiAgICBwYXJ0cy5wb3AoKTtcbiAgICBsb2NhbGUgPSBwYXJ0cy5qb2luKCctJyk7XG5cbiAgICB2YXIgX3Jlc29sdmVkTG9jYWxlID0gcmVzb2x2ZUxvY2FsZUZvckRhdGEobG9jYWxlKTtcblxuICAgIGlmIChfcmVzb2x2ZWRMb2NhbGUpIHtcbiAgICAgIHJldHVybiBfcmVzb2x2ZWRMb2NhbGU7XG4gICAgfVxuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlTG9jYWxlLmpzLm1hcCIsIi8vICh0aGlzIGZpbGUgd2FzIGF1dG9nZW5lcmF0ZWQgYnkgYGdlbmVyYXRlLWxvY2FsZXNgKVxuLy8gXCJwbHVyYWwgcnVsZXNcIiBmdW5jdGlvbnMgYXJlIG5vdCBzdG9yZWQgaW4gbG9jYWxlIEpTT04gZmlsZXMgYmVjYXVzZSB0aGV5J3JlIG5vdCBzdHJpbmdzLlxuLy8gVGhpcyBmaWxlIGlzbid0IGJpZyDigJQgaXQncyBhYm91dCA1IGtpbG9ieXRlcyBpbiBzaXplIChtaW5pZmllZCkuXG4vLyBBbHRlcm5hdGl2ZWx5LCB0aGUgcGx1cmFsaXphdGlvbiBydWxlcyBmb3IgZWFjaCBsb2NhbGUgY291bGQgYmUgc3RvcmVkXG4vLyBpbiB0aGVpciBKU09OIGZpbGVzIGluIGEgbm9uLXBhcnNlZCBmb3JtIGFuZCBsYXRlciBwYXJzZWQgdmlhIGBtYWtlLXBsdXJhbGAgbGlicmFyeS5cbi8vIEJ1dCBgbWFrZS1wbHVyYWxgIGxpYnJhcnkgaXRzZWxmIGlzIHJlbGF0aXZlbHkgYmlnIGluIHNpemU6XG4vLyBgbWFrZS1wbHVyYWwubWluLmpzYCBpcyBhYm91dCA2IGtpbG9ieXRlcyAoaHR0cHM6Ly91bnBrZy5jb20vbWFrZS1wbHVyYWwvKS5cbi8vIFNvLCBpdCdzIG1vcmUgcHJhY3RpY2FsIHRvIGJ5cGFzcyBydW50aW1lIGBtYWtlLXBsdXJhbGAgcGx1cmFsaXphdGlvbiBydWxlcyBjb21waWxhdGlvblxuLy8gYW5kIGp1c3QgaW5jbHVkZSB0aGUgYWxyZWFkeSBjb21waWxlZCBwbHVhcmxpemF0aW9uIHJ1bGVzIGZvciBhbGwgbG9jYWxlcyBpbiB0aGUgbGlicmFyeSBjb2RlLlxudmFyICQgPSB7XG4gIGFmOiBmdW5jdGlvbiBhZihuKSB7XG4gICAgcmV0dXJuIG4gPT0gMSA/ICdvbmUnIDogJ290aGVyJztcbiAgfSxcbiAgYW06IGZ1bmN0aW9uIGFtKG4pIHtcbiAgICByZXR1cm4gbiA+PSAwICYmIG4gPD0gMSA/ICdvbmUnIDogJ290aGVyJztcbiAgfSxcbiAgYXI6IGZ1bmN0aW9uIGFyKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICB0MCA9IE51bWJlcihzWzBdKSA9PSBuLFxuICAgICAgICBuMTAwID0gdDAgJiYgc1swXS5zbGljZSgtMik7XG4gICAgcmV0dXJuIG4gPT0gMCA/ICd6ZXJvJyA6IG4gPT0gMSA/ICdvbmUnIDogbiA9PSAyID8gJ3R3bycgOiBuMTAwID49IDMgJiYgbjEwMCA8PSAxMCA/ICdmZXcnIDogbjEwMCA+PSAxMSAmJiBuMTAwIDw9IDk5ID8gJ21hbnknIDogJ290aGVyJztcbiAgfSxcbiAgYXN0OiBmdW5jdGlvbiBhc3Qobikge1xuICAgIHZhciBzID0gU3RyaW5nKG4pLnNwbGl0KCcuJyksXG4gICAgICAgIHYwID0gIXNbMV07XG4gICAgcmV0dXJuIG4gPT0gMSAmJiB2MCA/ICdvbmUnIDogJ290aGVyJztcbiAgfSxcbiAgYmU6IGZ1bmN0aW9uIGJlKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICB0MCA9IE51bWJlcihzWzBdKSA9PSBuLFxuICAgICAgICBuMTAgPSB0MCAmJiBzWzBdLnNsaWNlKC0xKSxcbiAgICAgICAgbjEwMCA9IHQwICYmIHNbMF0uc2xpY2UoLTIpO1xuICAgIHJldHVybiBuMTAgPT0gMSAmJiBuMTAwICE9IDExID8gJ29uZScgOiBuMTAgPj0gMiAmJiBuMTAgPD0gNCAmJiAobjEwMCA8IDEyIHx8IG4xMDAgPiAxNCkgPyAnZmV3JyA6IHQwICYmIG4xMCA9PSAwIHx8IG4xMCA+PSA1ICYmIG4xMCA8PSA5IHx8IG4xMDAgPj0gMTEgJiYgbjEwMCA8PSAxNCA/ICdtYW55JyA6ICdvdGhlcic7XG4gIH0sXG4gIGJyOiBmdW5jdGlvbiBicihuKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcobikuc3BsaXQoJy4nKSxcbiAgICAgICAgdDAgPSBOdW1iZXIoc1swXSkgPT0gbixcbiAgICAgICAgbjEwID0gdDAgJiYgc1swXS5zbGljZSgtMSksXG4gICAgICAgIG4xMDAgPSB0MCAmJiBzWzBdLnNsaWNlKC0yKSxcbiAgICAgICAgbjEwMDAwMDAgPSB0MCAmJiBzWzBdLnNsaWNlKC02KTtcbiAgICByZXR1cm4gbjEwID09IDEgJiYgbjEwMCAhPSAxMSAmJiBuMTAwICE9IDcxICYmIG4xMDAgIT0gOTEgPyAnb25lJyA6IG4xMCA9PSAyICYmIG4xMDAgIT0gMTIgJiYgbjEwMCAhPSA3MiAmJiBuMTAwICE9IDkyID8gJ3R3bycgOiAobjEwID09IDMgfHwgbjEwID09IDQgfHwgbjEwID09IDkpICYmIChuMTAwIDwgMTAgfHwgbjEwMCA+IDE5KSAmJiAobjEwMCA8IDcwIHx8IG4xMDAgPiA3OSkgJiYgKG4xMDAgPCA5MCB8fCBuMTAwID4gOTkpID8gJ2ZldycgOiBuICE9IDAgJiYgdDAgJiYgbjEwMDAwMDAgPT0gMCA/ICdtYW55JyA6ICdvdGhlcic7XG4gIH0sXG4gIGJzOiBmdW5jdGlvbiBicyhuKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcobikuc3BsaXQoJy4nKSxcbiAgICAgICAgaSA9IHNbMF0sXG4gICAgICAgIGYgPSBzWzFdIHx8ICcnLFxuICAgICAgICB2MCA9ICFzWzFdLFxuICAgICAgICBpMTAgPSBpLnNsaWNlKC0xKSxcbiAgICAgICAgaTEwMCA9IGkuc2xpY2UoLTIpLFxuICAgICAgICBmMTAgPSBmLnNsaWNlKC0xKSxcbiAgICAgICAgZjEwMCA9IGYuc2xpY2UoLTIpO1xuICAgIHJldHVybiB2MCAmJiBpMTAgPT0gMSAmJiBpMTAwICE9IDExIHx8IGYxMCA9PSAxICYmIGYxMDAgIT0gMTEgPyAnb25lJyA6IHYwICYmIGkxMCA+PSAyICYmIGkxMCA8PSA0ICYmIChpMTAwIDwgMTIgfHwgaTEwMCA+IDE0KSB8fCBmMTAgPj0gMiAmJiBmMTAgPD0gNCAmJiAoZjEwMCA8IDEyIHx8IGYxMDAgPiAxNCkgPyAnZmV3JyA6ICdvdGhlcic7XG4gIH0sXG4gIGNlYjogZnVuY3Rpb24gY2ViKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgZiA9IHNbMV0gfHwgJycsXG4gICAgICAgIHYwID0gIXNbMV0sXG4gICAgICAgIGkxMCA9IGkuc2xpY2UoLTEpLFxuICAgICAgICBmMTAgPSBmLnNsaWNlKC0xKTtcbiAgICByZXR1cm4gdjAgJiYgKGkgPT0gMSB8fCBpID09IDIgfHwgaSA9PSAzKSB8fCB2MCAmJiBpMTAgIT0gNCAmJiBpMTAgIT0gNiAmJiBpMTAgIT0gOSB8fCAhdjAgJiYgZjEwICE9IDQgJiYgZjEwICE9IDYgJiYgZjEwICE9IDkgPyAnb25lJyA6ICdvdGhlcic7XG4gIH0sXG4gIGNzOiBmdW5jdGlvbiBjcyhuKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcobikuc3BsaXQoJy4nKSxcbiAgICAgICAgaSA9IHNbMF0sXG4gICAgICAgIHYwID0gIXNbMV07XG4gICAgcmV0dXJuIG4gPT0gMSAmJiB2MCA/ICdvbmUnIDogaSA+PSAyICYmIGkgPD0gNCAmJiB2MCA/ICdmZXcnIDogIXYwID8gJ21hbnknIDogJ290aGVyJztcbiAgfSxcbiAgY3k6IGZ1bmN0aW9uIGN5KG4pIHtcbiAgICByZXR1cm4gbiA9PSAwID8gJ3plcm8nIDogbiA9PSAxID8gJ29uZScgOiBuID09IDIgPyAndHdvJyA6IG4gPT0gMyA/ICdmZXcnIDogbiA9PSA2ID8gJ21hbnknIDogJ290aGVyJztcbiAgfSxcbiAgZGE6IGZ1bmN0aW9uIGRhKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgdDAgPSBOdW1iZXIoc1swXSkgPT0gbjtcbiAgICByZXR1cm4gbiA9PSAxIHx8ICF0MCAmJiAoaSA9PSAwIHx8IGkgPT0gMSkgPyAnb25lJyA6ICdvdGhlcic7XG4gIH0sXG4gIGRzYjogZnVuY3Rpb24gZHNiKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgZiA9IHNbMV0gfHwgJycsXG4gICAgICAgIHYwID0gIXNbMV0sXG4gICAgICAgIGkxMDAgPSBpLnNsaWNlKC0yKSxcbiAgICAgICAgZjEwMCA9IGYuc2xpY2UoLTIpO1xuICAgIHJldHVybiB2MCAmJiBpMTAwID09IDEgfHwgZjEwMCA9PSAxID8gJ29uZScgOiB2MCAmJiBpMTAwID09IDIgfHwgZjEwMCA9PSAyID8gJ3R3bycgOiB2MCAmJiAoaTEwMCA9PSAzIHx8IGkxMDAgPT0gNCkgfHwgZjEwMCA9PSAzIHx8IGYxMDAgPT0gNCA/ICdmZXcnIDogJ290aGVyJztcbiAgfSxcbiAgZHo6IGZ1bmN0aW9uIGR6KG4pIHtcbiAgICByZXR1cm4gJ290aGVyJztcbiAgfSxcbiAgZXM6IGZ1bmN0aW9uIGVzKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgdjAgPSAhc1sxXSxcbiAgICAgICAgaTEwMDAwMDAgPSBpLnNsaWNlKC02KTtcbiAgICByZXR1cm4gbiA9PSAxID8gJ29uZScgOiBpICE9IDAgJiYgaTEwMDAwMDAgPT0gMCAmJiB2MCA/ICdtYW55JyA6ICdvdGhlcic7XG4gIH0sXG4gIGZmOiBmdW5jdGlvbiBmZihuKSB7XG4gICAgcmV0dXJuIG4gPj0gMCAmJiBuIDwgMiA/ICdvbmUnIDogJ290aGVyJztcbiAgfSxcbiAgZnI6IGZ1bmN0aW9uIGZyKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgdjAgPSAhc1sxXSxcbiAgICAgICAgaTEwMDAwMDAgPSBpLnNsaWNlKC02KTtcbiAgICByZXR1cm4gbiA+PSAwICYmIG4gPCAyID8gJ29uZScgOiBpICE9IDAgJiYgaTEwMDAwMDAgPT0gMCAmJiB2MCA/ICdtYW55JyA6ICdvdGhlcic7XG4gIH0sXG4gIGdhOiBmdW5jdGlvbiBnYShuKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcobikuc3BsaXQoJy4nKSxcbiAgICAgICAgdDAgPSBOdW1iZXIoc1swXSkgPT0gbjtcbiAgICByZXR1cm4gbiA9PSAxID8gJ29uZScgOiBuID09IDIgPyAndHdvJyA6IHQwICYmIG4gPj0gMyAmJiBuIDw9IDYgPyAnZmV3JyA6IHQwICYmIG4gPj0gNyAmJiBuIDw9IDEwID8gJ21hbnknIDogJ290aGVyJztcbiAgfSxcbiAgZ2Q6IGZ1bmN0aW9uIGdkKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICB0MCA9IE51bWJlcihzWzBdKSA9PSBuO1xuICAgIHJldHVybiBuID09IDEgfHwgbiA9PSAxMSA/ICdvbmUnIDogbiA9PSAyIHx8IG4gPT0gMTIgPyAndHdvJyA6IHQwICYmIG4gPj0gMyAmJiBuIDw9IDEwIHx8IHQwICYmIG4gPj0gMTMgJiYgbiA8PSAxOSA/ICdmZXcnIDogJ290aGVyJztcbiAgfSxcbiAgaGU6IGZ1bmN0aW9uIGhlKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgdjAgPSAhc1sxXSxcbiAgICAgICAgdDAgPSBOdW1iZXIoc1swXSkgPT0gbixcbiAgICAgICAgbjEwID0gdDAgJiYgc1swXS5zbGljZSgtMSk7XG4gICAgcmV0dXJuIG4gPT0gMSAmJiB2MCA/ICdvbmUnIDogaSA9PSAyICYmIHYwID8gJ3R3bycgOiB2MCAmJiAobiA8IDAgfHwgbiA+IDEwKSAmJiB0MCAmJiBuMTAgPT0gMCA/ICdtYW55JyA6ICdvdGhlcic7XG4gIH0sXG4gIGlzOiBmdW5jdGlvbiBpcyhuKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcobikuc3BsaXQoJy4nKSxcbiAgICAgICAgaSA9IHNbMF0sXG4gICAgICAgIHQwID0gTnVtYmVyKHNbMF0pID09IG4sXG4gICAgICAgIGkxMCA9IGkuc2xpY2UoLTEpLFxuICAgICAgICBpMTAwID0gaS5zbGljZSgtMik7XG4gICAgcmV0dXJuIHQwICYmIGkxMCA9PSAxICYmIGkxMDAgIT0gMTEgfHwgIXQwID8gJ29uZScgOiAnb3RoZXInO1xuICB9LFxuICBpdDogZnVuY3Rpb24gaXQobikge1xuICAgIHZhciBzID0gU3RyaW5nKG4pLnNwbGl0KCcuJyksXG4gICAgICAgIGkgPSBzWzBdLFxuICAgICAgICB2MCA9ICFzWzFdLFxuICAgICAgICBpMTAwMDAwMCA9IGkuc2xpY2UoLTYpO1xuICAgIHJldHVybiBuID09IDEgJiYgdjAgPyAnb25lJyA6IGkgIT0gMCAmJiBpMTAwMDAwMCA9PSAwICYmIHYwID8gJ21hbnknIDogJ290aGVyJztcbiAgfSxcbiAga3NoOiBmdW5jdGlvbiBrc2gobikge1xuICAgIHJldHVybiBuID09IDAgPyAnemVybycgOiBuID09IDEgPyAnb25lJyA6ICdvdGhlcic7XG4gIH0sXG4gIGx0OiBmdW5jdGlvbiBsdChuKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcobikuc3BsaXQoJy4nKSxcbiAgICAgICAgZiA9IHNbMV0gfHwgJycsXG4gICAgICAgIHQwID0gTnVtYmVyKHNbMF0pID09IG4sXG4gICAgICAgIG4xMCA9IHQwICYmIHNbMF0uc2xpY2UoLTEpLFxuICAgICAgICBuMTAwID0gdDAgJiYgc1swXS5zbGljZSgtMik7XG4gICAgcmV0dXJuIG4xMCA9PSAxICYmIChuMTAwIDwgMTEgfHwgbjEwMCA+IDE5KSA/ICdvbmUnIDogbjEwID49IDIgJiYgbjEwIDw9IDkgJiYgKG4xMDAgPCAxMSB8fCBuMTAwID4gMTkpID8gJ2ZldycgOiBmICE9IDAgPyAnbWFueScgOiAnb3RoZXInO1xuICB9LFxuICBsdjogZnVuY3Rpb24gbHYobikge1xuICAgIHZhciBzID0gU3RyaW5nKG4pLnNwbGl0KCcuJyksXG4gICAgICAgIGYgPSBzWzFdIHx8ICcnLFxuICAgICAgICB2ID0gZi5sZW5ndGgsXG4gICAgICAgIHQwID0gTnVtYmVyKHNbMF0pID09IG4sXG4gICAgICAgIG4xMCA9IHQwICYmIHNbMF0uc2xpY2UoLTEpLFxuICAgICAgICBuMTAwID0gdDAgJiYgc1swXS5zbGljZSgtMiksXG4gICAgICAgIGYxMDAgPSBmLnNsaWNlKC0yKSxcbiAgICAgICAgZjEwID0gZi5zbGljZSgtMSk7XG4gICAgcmV0dXJuIHQwICYmIG4xMCA9PSAwIHx8IG4xMDAgPj0gMTEgJiYgbjEwMCA8PSAxOSB8fCB2ID09IDIgJiYgZjEwMCA+PSAxMSAmJiBmMTAwIDw9IDE5ID8gJ3plcm8nIDogbjEwID09IDEgJiYgbjEwMCAhPSAxMSB8fCB2ID09IDIgJiYgZjEwID09IDEgJiYgZjEwMCAhPSAxMSB8fCB2ICE9IDIgJiYgZjEwID09IDEgPyAnb25lJyA6ICdvdGhlcic7XG4gIH0sXG4gIG1rOiBmdW5jdGlvbiBtayhuKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcobikuc3BsaXQoJy4nKSxcbiAgICAgICAgaSA9IHNbMF0sXG4gICAgICAgIGYgPSBzWzFdIHx8ICcnLFxuICAgICAgICB2MCA9ICFzWzFdLFxuICAgICAgICBpMTAgPSBpLnNsaWNlKC0xKSxcbiAgICAgICAgaTEwMCA9IGkuc2xpY2UoLTIpLFxuICAgICAgICBmMTAgPSBmLnNsaWNlKC0xKSxcbiAgICAgICAgZjEwMCA9IGYuc2xpY2UoLTIpO1xuICAgIHJldHVybiB2MCAmJiBpMTAgPT0gMSAmJiBpMTAwICE9IDExIHx8IGYxMCA9PSAxICYmIGYxMDAgIT0gMTEgPyAnb25lJyA6ICdvdGhlcic7XG4gIH0sXG4gIG10OiBmdW5jdGlvbiBtdChuKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcobikuc3BsaXQoJy4nKSxcbiAgICAgICAgdDAgPSBOdW1iZXIoc1swXSkgPT0gbixcbiAgICAgICAgbjEwMCA9IHQwICYmIHNbMF0uc2xpY2UoLTIpO1xuICAgIHJldHVybiBuID09IDEgPyAnb25lJyA6IG4gPT0gMCB8fCBuMTAwID49IDIgJiYgbjEwMCA8PSAxMCA/ICdmZXcnIDogbjEwMCA+PSAxMSAmJiBuMTAwIDw9IDE5ID8gJ21hbnknIDogJ290aGVyJztcbiAgfSxcbiAgcGE6IGZ1bmN0aW9uIHBhKG4pIHtcbiAgICByZXR1cm4gbiA9PSAwIHx8IG4gPT0gMSA/ICdvbmUnIDogJ290aGVyJztcbiAgfSxcbiAgcGw6IGZ1bmN0aW9uIHBsKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgdjAgPSAhc1sxXSxcbiAgICAgICAgaTEwID0gaS5zbGljZSgtMSksXG4gICAgICAgIGkxMDAgPSBpLnNsaWNlKC0yKTtcbiAgICByZXR1cm4gbiA9PSAxICYmIHYwID8gJ29uZScgOiB2MCAmJiBpMTAgPj0gMiAmJiBpMTAgPD0gNCAmJiAoaTEwMCA8IDEyIHx8IGkxMDAgPiAxNCkgPyAnZmV3JyA6IHYwICYmIGkgIT0gMSAmJiAoaTEwID09IDAgfHwgaTEwID09IDEpIHx8IHYwICYmIGkxMCA+PSA1ICYmIGkxMCA8PSA5IHx8IHYwICYmIGkxMDAgPj0gMTIgJiYgaTEwMCA8PSAxNCA/ICdtYW55JyA6ICdvdGhlcic7XG4gIH0sXG4gIHB0OiBmdW5jdGlvbiBwdChuKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcobikuc3BsaXQoJy4nKSxcbiAgICAgICAgaSA9IHNbMF0sXG4gICAgICAgIHYwID0gIXNbMV0sXG4gICAgICAgIGkxMDAwMDAwID0gaS5zbGljZSgtNik7XG4gICAgcmV0dXJuIGkgPT0gMCB8fCBpID09IDEgPyAnb25lJyA6IGkgIT0gMCAmJiBpMTAwMDAwMCA9PSAwICYmIHYwID8gJ21hbnknIDogJ290aGVyJztcbiAgfSxcbiAgcm86IGZ1bmN0aW9uIHJvKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICB2MCA9ICFzWzFdLFxuICAgICAgICB0MCA9IE51bWJlcihzWzBdKSA9PSBuLFxuICAgICAgICBuMTAwID0gdDAgJiYgc1swXS5zbGljZSgtMik7XG4gICAgcmV0dXJuIG4gPT0gMSAmJiB2MCA/ICdvbmUnIDogIXYwIHx8IG4gPT0gMCB8fCBuMTAwID49IDIgJiYgbjEwMCA8PSAxOSA/ICdmZXcnIDogJ290aGVyJztcbiAgfSxcbiAgcnU6IGZ1bmN0aW9uIHJ1KG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgdjAgPSAhc1sxXSxcbiAgICAgICAgaTEwID0gaS5zbGljZSgtMSksXG4gICAgICAgIGkxMDAgPSBpLnNsaWNlKC0yKTtcbiAgICByZXR1cm4gdjAgJiYgaTEwID09IDEgJiYgaTEwMCAhPSAxMSA/ICdvbmUnIDogdjAgJiYgaTEwID49IDIgJiYgaTEwIDw9IDQgJiYgKGkxMDAgPCAxMiB8fCBpMTAwID4gMTQpID8gJ2ZldycgOiB2MCAmJiBpMTAgPT0gMCB8fCB2MCAmJiBpMTAgPj0gNSAmJiBpMTAgPD0gOSB8fCB2MCAmJiBpMTAwID49IDExICYmIGkxMDAgPD0gMTQgPyAnbWFueScgOiAnb3RoZXInO1xuICB9LFxuICBzZTogZnVuY3Rpb24gc2Uobikge1xuICAgIHJldHVybiBuID09IDEgPyAnb25lJyA6IG4gPT0gMiA/ICd0d28nIDogJ290aGVyJztcbiAgfSxcbiAgc2k6IGZ1bmN0aW9uIHNpKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgZiA9IHNbMV0gfHwgJyc7XG4gICAgcmV0dXJuIG4gPT0gMCB8fCBuID09IDEgfHwgaSA9PSAwICYmIGYgPT0gMSA/ICdvbmUnIDogJ290aGVyJztcbiAgfSxcbiAgc2w6IGZ1bmN0aW9uIHNsKG4pIHtcbiAgICB2YXIgcyA9IFN0cmluZyhuKS5zcGxpdCgnLicpLFxuICAgICAgICBpID0gc1swXSxcbiAgICAgICAgdjAgPSAhc1sxXSxcbiAgICAgICAgaTEwMCA9IGkuc2xpY2UoLTIpO1xuICAgIHJldHVybiB2MCAmJiBpMTAwID09IDEgPyAnb25lJyA6IHYwICYmIGkxMDAgPT0gMiA/ICd0d28nIDogdjAgJiYgKGkxMDAgPT0gMyB8fCBpMTAwID09IDQpIHx8ICF2MCA/ICdmZXcnIDogJ290aGVyJztcbiAgfVxufTtcbiQuYXMgPSAkLmFtO1xuJC5heiA9ICQuYWY7XG4kLmJnID0gJC5hZjtcbiQuYm4gPSAkLmFtO1xuJC5icnggPSAkLmFmO1xuJC5jYSA9ICQuYXN0O1xuJC5jZSA9ICQuYWY7XG4kLmNociA9ICQuYWY7XG4kLmRlID0gJC5hc3Q7XG4kLmVlID0gJC5hZjtcbiQuZWwgPSAkLmFmO1xuJC5lbiA9ICQuYXN0O1xuJC5ldCA9ICQuYXN0O1xuJC5ldSA9ICQuYWY7XG4kLmZhID0gJC5hbTtcbiQuZmkgPSAkLmFzdDtcbiQuZmlsID0gJC5jZWI7XG4kLmZvID0gJC5hZjtcbiQuZnVyID0gJC5hZjtcbiQuZnkgPSAkLmFzdDtcbiQuZ2wgPSAkLmFzdDtcbiQuZ3UgPSAkLmFtO1xuJC5oYSA9ICQuYWY7XG4kLmhpID0gJC5hbTtcbiQuaHIgPSAkLmJzO1xuJC5oc2IgPSAkLmRzYjtcbiQuaHUgPSAkLmFmO1xuJC5oeSA9ICQuZmY7XG4kLmlhID0gJC5hc3Q7XG4kLmlkID0gJC5kejtcbiQuaWcgPSAkLmR6O1xuJC5qYSA9ICQuZHo7XG4kLmpnbyA9ICQuYWY7XG4kLmp2ID0gJC5kejtcbiQua2EgPSAkLmFmO1xuJC5rZWEgPSAkLmR6O1xuJC5rayA9ICQuYWY7XG4kLmtsID0gJC5hZjtcbiQua20gPSAkLmR6O1xuJC5rbiA9ICQuYW07XG4kLmtvID0gJC5kejtcbiQua3UgPSAkLmFmO1xuJC5reSA9ICQuYWY7XG4kLmxiID0gJC5hZjtcbiQubGt0ID0gJC5kejtcbiQubG8gPSAkLmR6O1xuJC5tbCA9ICQuYWY7XG4kLm1uID0gJC5hZjtcbiQubXIgPSAkLmFmO1xuJC5tcyA9ICQuZHo7XG4kLm15ID0gJC5kejtcbiQubmIgPSAkLmFmO1xuJC5uZSA9ICQuYWY7XG4kLm5sID0gJC5hc3Q7XG4kLm5uID0gJC5hZjtcbiQubm8gPSAkLmFmO1xuJC5vciA9ICQuYWY7XG4kLnBjbSA9ICQuYW07XG4kLnBzID0gJC5hZjtcbiQucm0gPSAkLmFmO1xuJC5zYWggPSAkLmR6O1xuJC5zYyA9ICQuYXN0O1xuJC5zZCA9ICQuYWY7XG4kLnNrID0gJC5jcztcbiQuc28gPSAkLmFmO1xuJC5zcSA9ICQuYWY7XG4kLnNyID0gJC5icztcbiQuc3UgPSAkLmR6O1xuJC5zdiA9ICQuYXN0O1xuJC5zdyA9ICQuYXN0O1xuJC50YSA9ICQuYWY7XG4kLnRlID0gJC5hZjtcbiQudGggPSAkLmR6O1xuJC50aSA9ICQucGE7XG4kLnRrID0gJC5hZjtcbiQudG8gPSAkLmR6O1xuJC50ciA9ICQuYWY7XG4kLnVnID0gJC5hZjtcbiQudWsgPSAkLnJ1O1xuJC51ciA9ICQuYXN0O1xuJC51eiA9ICQuYWY7XG4kLnZpID0gJC5kejtcbiQud2FlID0gJC5hZjtcbiQud28gPSAkLmR6O1xuJC55aSA9ICQuYXN0O1xuJC55byA9ICQuZHo7XG4kLnl1ZSA9ICQuZHo7XG4kLnpoID0gJC5kejtcbiQuenUgPSAkLmFtO1xuZXhwb3J0IGRlZmF1bHQgJDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBsdXJhbFJ1bGVGdW5jdGlvbnMuanMubWFwIiwiLyoqXHJcbiAqIFJldHVybnMgYSBgbG9jYWxlYCBmb3Igd2hpY2ggYSBmdW5jdGlvbiBleGlzdHMgaW4gYC4vUGx1cmFsUnVsZUZ1bmN0aW9ucy5qc2AuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbG9jYWxlXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICogQGV4YW1wbGVcclxuICogZ2V0UGx1cmFsUnVsZXNMb2NhbGUoXCJydS1SVS1DeXJsXCIpIC8vIFJldHVybnMgXCJydVwiLlxyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBsdXJhbFJ1bGVzTG9jYWxlKGxvY2FsZSkge1xuICAvLyBcInB0XCIgbGFuZ3VhZ2UgaXMgdGhlIG9ubHkgb25lIGhhdmluZyBkaWZmZXJlbnQgcGx1cmFsaXphdGlvbiBydWxlc1xuICAvLyBmb3IgdGhlIG9uZSAoXCJwdFwiKSAoUG9ydHVndWVzZSkgbG9jYWxlIGFuZCB0aGUgb3RoZXIgKFwicHQtUFRcIikgKEV1cm9wZWFuIFBvcnR1Z3Vlc2UpLlxuICAvLyBodHRwOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzL2xhdGVzdC9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWxcbiAgLy8gKHNlZSB0aGUgZW50cmllcyBmb3IgXCJwdFwiIGFuZCBcInB0X1BUXCIgdGhlcmUpXG4gIGlmIChsb2NhbGUgPT09ICdwdC1QVCcpIHtcbiAgICByZXR1cm4gbG9jYWxlO1xuICB9XG5cbiAgcmV0dXJuIGdldExhbmd1YWdlRnJvbUxhbmd1YWdlVGFnKGxvY2FsZSk7XG59XG4vKipcclxuICogRXh0cmFjdHMgbGFuZ3VhZ2UgZnJvbSBhbiBJRVRGIEJDUCA0NyBsYW5ndWFnZSB0YWcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZVRhZyAtIElFVEYgQkNQIDQ3IGxhbmd1YWdlIHRhZy5cclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBSZXR1cm5zIFwiaGVcIlxyXG4gKiBnZXRMYW5ndWFnZUZyb21MYW5ndWFnZVRhZyhcImhlLUlMLXUtY2EtaGVicmV3LXR6LWplcnVzbG1cIilcclxuICogLy8gUmV0dXJucyBcImFyXCJcclxuICogZ2V0TGFuZ3VhZ2VGcm9tTGFuZ3VhZ2VUYWcoXCJhci11LW51LWxhdG5cIilcclxuICovXG5cbnZhciBMQU5HVUFHRV9SRUdfRVhQID0gL14oW2EtejAtOV0rKS9pO1xuXG5mdW5jdGlvbiBnZXRMYW5ndWFnZUZyb21MYW5ndWFnZVRhZyhsYW5ndWFnZVRhZykge1xuICB2YXIgbWF0Y2ggPSBsYW5ndWFnZVRhZy5tYXRjaChMQU5HVUFHRV9SRUdfRVhQKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgbG9jYWxlOiBcIi5jb25jYXQobGFuZ3VhZ2VUYWcpKTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaFsxXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFBsdXJhbFJ1bGVzTG9jYWxlLmpzLm1hcCIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLy8gSW1wb3J0aW5nIGBQbHVyYWxSdWxlYCBwb2x5ZmlsbCBmcm9tIGEgc2VwYXJhdGUgcGFja2FnZVxuLy8gcmVzdWx0cyBpbiBhIGJ1bmRsZSB0aGF0IGlzIGxhcmdlciBieSAxa0IgZm9yIHNvbWUgcmVhc29uLlxuLy8gZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWZhdWx0IH0gZnJvbSAnaW50bC1wbHVyYWwtcnVsZXMtcG9seWZpbGwvY2FyZGluYWwnXG5pbXBvcnQgUGx1cmFsUnVsZUZ1bmN0aW9ucyBmcm9tIFwiLi9QbHVyYWxSdWxlRnVuY3Rpb25zLmpzXCI7XG5pbXBvcnQgZ2V0UGx1cmFsUnVsZXNMb2NhbGUgZnJvbSBcIi4vZ2V0UGx1cmFsUnVsZXNMb2NhbGUuanNcIjtcbi8qKlxyXG4gKiBgSW50bC5QbHVyYWxSdWxlc2AgcG9seWZpbGwuXHJcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1BsdXJhbFJ1bGVzXHJcbiAqL1xuXG52YXIgUGx1cmFsUnVsZXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVyYWxSdWxlcyhsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1cmFsUnVsZXMpO1xuXG4gICAgdmFyIGxvY2FsZXMgPSBQbHVyYWxSdWxlcy5zdXBwb3J0ZWRMb2NhbGVzT2YobG9jYWxlKTtcblxuICAgIGlmIChsb2NhbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVbnN1cHBvcnRlZCBsb2NhbGU6IFwiICsgbG9jYWxlKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnR5cGUgIT09IFwiY2FyZGluYWxcIikge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJPbmx5IFxcXCJjYXJkaW5hbFxcXCIgXFxcInR5cGVcXFwiIGlzIHN1cHBvcnRlZFwiKTtcbiAgICB9XG5cbiAgICB0aGlzLiQgPSBQbHVyYWxSdWxlRnVuY3Rpb25zW2dldFBsdXJhbFJ1bGVzTG9jYWxlKGxvY2FsZXNbMF0pXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQbHVyYWxSdWxlcywgW3tcbiAgICBrZXk6IFwic2VsZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdChudW1iZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLiQobnVtYmVyKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJzdXBwb3J0ZWRMb2NhbGVzT2ZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3VwcG9ydGVkTG9jYWxlc09mKGxvY2FsZXMpIHtcbiAgICAgIGlmICh0eXBlb2YgbG9jYWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBsb2NhbGVzID0gW2xvY2FsZXNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbG9jYWxlcy5maWx0ZXIoZnVuY3Rpb24gKGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gUGx1cmFsUnVsZUZ1bmN0aW9uc1tnZXRQbHVyYWxSdWxlc0xvY2FsZShsb2NhbGUpXTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQbHVyYWxSdWxlcztcbn0oKTtcblxuZXhwb3J0IHsgUGx1cmFsUnVsZXMgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGx1cmFsUnVsZXMuanMubWFwIiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IHsgZ2V0RGVmYXVsdExvY2FsZSwgc2V0RGVmYXVsdExvY2FsZSwgZ2V0TG9jYWxlRGF0YSwgYWRkTG9jYWxlRGF0YSB9IGZyb20gJy4vTG9jYWxlRGF0YVN0b3JlLmpzJztcbmltcG9ydCByZXNvbHZlTG9jYWxlIGZyb20gJy4vcmVzb2x2ZUxvY2FsZS5qcyc7XG5pbXBvcnQgUGx1cmFsUnVsZXMgZnJvbSAnLi9QbHVyYWxSdWxlcy5qcyc7IC8vIEltcG9ydGluZyBgUGx1cmFsUnVsZWAgcG9seWZpbGwgZnJvbSBhIHNlcGFyYXRlIHBhY2thZ2Vcbi8vIHJlc3VsdHMgaW4gYSBidW5kbGUgdGhhdCBpcyBsYXJnZXIgYnkgMWtCIGZvciBzb21lIHJlYXNvbi5cbi8vIGltcG9ydCBQbHVyYWxSdWxlcyBmcm9tICdpbnRsLXBsdXJhbC1ydWxlcy1wb2x5ZmlsbC9jYXJkaW5hbCdcbi8vIFZhbGlkIHRpbWUgdW5pdHMuXG5cbmV4cG9ydCB2YXIgVU5JVFMgPSBbXCJzZWNvbmRcIiwgXCJtaW51dGVcIiwgXCJob3VyXCIsIFwiZGF5XCIsIFwid2Vla1wiLCBcIm1vbnRoXCIsIFwicXVhcnRlclwiLCBcInllYXJcIl07IC8vIFZhbGlkIHZhbHVlcyBmb3IgdGhlIGBudW1lcmljYCBvcHRpb24uXG5cbnZhciBOVU1FUklDX1ZBTFVFUyA9IFtcImF1dG9cIiwgXCJhbHdheXNcIl07IC8vIFZhbGlkIHZhbHVlcyBmb3IgdGhlIGBzdHlsZWAgb3B0aW9uLlxuXG52YXIgU1RZTEVfVkFMVUVTID0gW1wibG9uZ1wiLCBcInNob3J0XCIsIFwibmFycm93XCJdOyAvLyBWYWxpZCB2YWx1ZXMgZm9yIHRoZSBgbG9jYWxlTWF0Y2hlcmAgb3B0aW9uLlxuXG52YXIgTE9DQUxFX01BVENIRVJfVkFMVUVTID0gW1wibG9va3VwXCIsIFwiYmVzdCBmaXRcIl07XG4vKipcclxuICogUG9seWZpbGwgZm9yIGBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdGAgcHJvcG9zYWwuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWludGwtcmVsYXRpdmUtdGltZVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pbnRsLXJlbGF0aXZlLXRpbWUvaXNzdWVzLzU1XHJcbiAqL1xuXG52YXIgUmVsYXRpdmVUaW1lRm9ybWF0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXHJcbiAgICogQHBhcmFtIHsoc3RyaW5nfHN0cmluZ1tdKX0gW2xvY2FsZXNdIC0gUHJlZmVycmVkIGxvY2FsZXMgKG9yIGxvY2FsZSkuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIEZvcm1hdHRpbmcgb3B0aW9ucy5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3R5bGU9XCJsb25nXCJdIC0gT25lIG9mOiBcImxvbmdcIiwgXCJzaG9ydFwiLCBcIm5hcnJvd1wiLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5udW1lcmljPVwiYWx3YXlzXCJdIC0gKFZlcnNpb24gPj0gMikgT25lIG9mOiBcImFsd2F5c1wiLCBcImF1dG9cIi5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlTWF0Y2hlcj1cImxvb2t1cFwiXSAtIE9uZSBvZjogXCJsb29rdXBcIiwgXCJiZXN0IGZpdFwiLiBDdXJyZW50bHkgb25seSBcImxvb2t1cFwiIGlzIHN1cHBvcnRlZC5cclxuICAgKi9cbiAgZnVuY3Rpb24gUmVsYXRpdmVUaW1lRm9ybWF0KCkge1xuICAgIHZhciBsb2NhbGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVsYXRpdmVUaW1lRm9ybWF0KTtcblxuICAgIHZhciBudW1lcmljID0gb3B0aW9ucy5udW1lcmljLFxuICAgICAgICBzdHlsZSA9IG9wdGlvbnMuc3R5bGUsXG4gICAgICAgIGxvY2FsZU1hdGNoZXIgPSBvcHRpb25zLmxvY2FsZU1hdGNoZXI7XG4gICAgdGhpcy5udW1lcmljID0gXCJhbHdheXNcIjtcbiAgICB0aGlzLnN0eWxlID0gXCJsb25nXCI7XG4gICAgdGhpcy5sb2NhbGVNYXRjaGVyID0gXCJsb29rdXBcIjsgLy8gU2V0IGBudW1lcmljYCBvcHRpb24uXG5cbiAgICBpZiAobnVtZXJpYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoTlVNRVJJQ19WQUxVRVMuaW5kZXhPZihudW1lcmljKSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIFxcXCJudW1lcmljXFxcIiBvcHRpb246IFwiLmNvbmNhdChudW1lcmljKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubnVtZXJpYyA9IG51bWVyaWM7XG4gICAgfSAvLyBTZXQgYHN0eWxlYCBvcHRpb24uXG5cblxuICAgIGlmIChzdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoU1RZTEVfVkFMVUVTLmluZGV4T2Yoc3R5bGUpIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgXFxcInN0eWxlXFxcIiBvcHRpb246IFwiLmNvbmNhdChzdHlsZSkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgfSAvLyBTZXQgYGxvY2FsZU1hdGNoZXJgIG9wdGlvbi5cblxuXG4gICAgaWYgKGxvY2FsZU1hdGNoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKExPQ0FMRV9NQVRDSEVSX1ZBTFVFUy5pbmRleE9mKGxvY2FsZU1hdGNoZXIpIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgXFxcImxvY2FsZU1hdGNoZXJcXFwiIG9wdGlvbjogXCIuY29uY2F0KGxvY2FsZU1hdGNoZXIpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2NhbGVNYXRjaGVyID0gbG9jYWxlTWF0Y2hlcjtcbiAgICB9IC8vIFNldCBgbG9jYWxlYC5cbiAgICAvLyBDb252ZXJ0IGBsb2NhbGVzYCB0byBhbiBhcnJheS5cblxuXG4gICAgaWYgKHR5cGVvZiBsb2NhbGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbG9jYWxlcyA9IFtsb2NhbGVzXTtcbiAgICB9IC8vIEFkZCBkZWZhdWx0IGxvY2FsZS5cblxuXG4gICAgbG9jYWxlcy5wdXNoKGdldERlZmF1bHRMb2NhbGUoKSk7IC8vIENob29zZSB0aGUgbW9zdCBhcHByb3ByaWF0ZSBsb2NhbGUuXG5cbiAgICB0aGlzLmxvY2FsZSA9IFJlbGF0aXZlVGltZUZvcm1hdC5zdXBwb3J0ZWRMb2NhbGVzT2YobG9jYWxlcywge1xuICAgICAgbG9jYWxlTWF0Y2hlcjogdGhpcy5sb2NhbGVNYXRjaGVyXG4gICAgfSlbMF07XG5cbiAgICBpZiAoIXRoaXMubG9jYWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdXBwb3J0ZWQgbG9jYWxlIHdhcyBmb3VuZFwiKTtcbiAgICB9IC8vIENvbnN0cnVjdCBhbiBgSW50bC5QbHVyYWxSdWxlc2AgaW5zdGFuY2UgKHBvbHlmaWxsKS5cblxuXG4gICAgaWYgKFBsdXJhbFJ1bGVzLnN1cHBvcnRlZExvY2FsZXNPZih0aGlzLmxvY2FsZSkubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5wbHVyYWxSdWxlcyA9IG5ldyBQbHVyYWxSdWxlcyh0aGlzLmxvY2FsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlxcXCJcIi5jb25jYXQodGhpcy5sb2NhbGUsIFwiXFxcIiBsb2NhbGUgaXMgbm90IHN1cHBvcnRlZFwiKSk7XG4gICAgfSAvLyBVc2UgYEludGwuTnVtYmVyRm9ybWF0YCBmb3IgZm9ybWF0dGluZyBudW1iZXJzICh3aGVuIGF2YWlsYWJsZSkuXG5cblxuICAgIGlmICh0eXBlb2YgSW50bCAhPT0gJ3VuZGVmaW5lZCcgJiYgSW50bC5OdW1iZXJGb3JtYXQpIHtcbiAgICAgIHRoaXMubnVtYmVyRm9ybWF0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KHRoaXMubG9jYWxlKTtcbiAgICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID0gdGhpcy5udW1iZXJGb3JtYXQucmVzb2x2ZWRPcHRpb25zKCkubnVtYmVyaW5nU3lzdGVtO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm51bWJlcmluZ1N5c3RlbSA9ICdsYXRuJztcbiAgICB9XG5cbiAgICB0aGlzLmxvY2FsZSA9IHJlc29sdmVMb2NhbGUodGhpcy5sb2NhbGUsIHtcbiAgICAgIGxvY2FsZU1hdGNoZXI6IHRoaXMubG9jYWxlTWF0Y2hlclxuICAgIH0pO1xuICB9XG4gIC8qKlxyXG4gICAqIEZvcm1hdHMgdGltZSBgbnVtYmVyYCBpbiBgdW5pdHNgIChlaXRoZXIgaW4gcGFzdCBvciBpbiBmdXR1cmUpLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgLSBUaW1lIGludGVydmFsIHZhbHVlLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gVGltZSBpbnRlcnZhbCBtZWFzdXJlbWVudCB1bml0LlxyXG4gICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiB1bml0IGlzIG5vdCBvbmUgb2YgXCJzZWNvbmRcIiwgXCJtaW51dGVcIiwgXCJob3VyXCIsIFwiZGF5XCIsIFwid2Vla1wiLCBcIm1vbnRoXCIsIFwicXVhcnRlclwiLlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogLy8gUmV0dXJucyBcIjIgZGF5cyBhZ29cIlxyXG4gICAqIHJ0Zi5mb3JtYXQoLTIsIFwiZGF5XCIpXHJcbiAgICogLy8gUmV0dXJucyBcImluIDUgbWludXRlc1wiXHJcbiAgICogcnRmLmZvcm1hdCg1LCBcIm1pbnV0ZVwiKVxyXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFJlbGF0aXZlVGltZUZvcm1hdCwgW3tcbiAgICBrZXk6IFwiZm9ybWF0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdCgpIHtcbiAgICAgIHZhciBfcGFyc2VGb3JtYXRBcmdzID0gcGFyc2VGb3JtYXRBcmdzKGFyZ3VtZW50cyksXG4gICAgICAgICAgX3BhcnNlRm9ybWF0QXJnczIgPSBfc2xpY2VkVG9BcnJheShfcGFyc2VGb3JtYXRBcmdzLCAyKSxcbiAgICAgICAgICBudW1iZXIgPSBfcGFyc2VGb3JtYXRBcmdzMlswXSxcbiAgICAgICAgICB1bml0ID0gX3BhcnNlRm9ybWF0QXJnczJbMV07XG5cbiAgICAgIHJldHVybiB0aGlzLmdldFJ1bGUobnVtYmVyLCB1bml0KS5yZXBsYWNlKCd7MH0nLCB0aGlzLmZvcm1hdE51bWJlcihNYXRoLmFicyhudW1iZXIpKSk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogRm9ybWF0cyB0aW1lIGBudW1iZXJgIGluIGB1bml0c2AgKGVpdGhlciBpbiBwYXN0IG9yIGluIGZ1dHVyZSkuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIC0gVGltZSBpbnRlcnZhbCB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gVGltZSBpbnRlcnZhbCBtZWFzdXJlbWVudCB1bml0LlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0W119IFRoZSBwYXJ0cyAoYHsgdHlwZSwgdmFsdWUsIHVuaXQ/IH1gKS5cclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIHVuaXQgaXMgbm90IG9uZSBvZiBcInNlY29uZFwiLCBcIm1pbnV0ZVwiLCBcImhvdXJcIiwgXCJkYXlcIiwgXCJ3ZWVrXCIsIFwibW9udGhcIiwgXCJxdWFydGVyXCIuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gVmVyc2lvbiAxIChkZXByZWNhdGVkKS5cclxuICAgICAqIC8vIFJldHVybnMgW1xyXG4gICAgICogLy8gICB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJpbiBcIiB9LFxyXG4gICAgICogLy8gICB7IHR5cGU6IFwiZGF5XCIsIHZhbHVlOiBcIjEwMFwiIH0sXHJcbiAgICAgKiAvLyAgIHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIiBkYXlzXCIgfVxyXG4gICAgICogLy8gXVxyXG4gICAgICogcnRmLmZvcm1hdFRvUGFydHMoMTAwLCBcImRheVwiKVxyXG4gICAgICogLy9cclxuICAgICAqIC8vIFZlcnNpb24gMi5cclxuICAgICAqIC8vIFJldHVybnMgW1xyXG4gICAgICogLy8gICB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJpbiBcIiB9LFxyXG4gICAgICogLy8gICB7IHR5cGU6IFwiaW50ZWdlclwiLCB2YWx1ZTogXCIxMDBcIiwgdW5pdDogXCJkYXlcIiB9LFxyXG4gICAgICogLy8gICB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIgZGF5c1wiIH1cclxuICAgICAqIC8vIF1cclxuICAgICAqIHJ0Zi5mb3JtYXRUb1BhcnRzKDEwMCwgXCJkYXlcIilcclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0VG9QYXJ0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRUb1BhcnRzKCkge1xuICAgICAgdmFyIF9wYXJzZUZvcm1hdEFyZ3MzID0gcGFyc2VGb3JtYXRBcmdzKGFyZ3VtZW50cyksXG4gICAgICAgICAgX3BhcnNlRm9ybWF0QXJnczQgPSBfc2xpY2VkVG9BcnJheShfcGFyc2VGb3JtYXRBcmdzMywgMiksXG4gICAgICAgICAgbnVtYmVyID0gX3BhcnNlRm9ybWF0QXJnczRbMF0sXG4gICAgICAgICAgdW5pdCA9IF9wYXJzZUZvcm1hdEFyZ3M0WzFdO1xuXG4gICAgICB2YXIgcnVsZSA9IHRoaXMuZ2V0UnVsZShudW1iZXIsIHVuaXQpO1xuICAgICAgdmFyIHZhbHVlSW5kZXggPSBydWxlLmluZGV4T2YoXCJ7MH1cIik7IC8vIFwieWVzdGVyZGF5XCIvXCJ0b2RheVwiL1widG9tb3Jyb3dcIi5cblxuICAgICAgaWYgKHZhbHVlSW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBbe1xuICAgICAgICAgIHR5cGU6IFwibGl0ZXJhbFwiLFxuICAgICAgICAgIHZhbHVlOiBydWxlXG4gICAgICAgIH1dO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgICAgaWYgKHZhbHVlSW5kZXggPiAwKSB7XG4gICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwibGl0ZXJhbFwiLFxuICAgICAgICAgIHZhbHVlOiBydWxlLnNsaWNlKDAsIHZhbHVlSW5kZXgpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBwYXJ0cyA9IHBhcnRzLmNvbmNhdCh0aGlzLmZvcm1hdE51bWJlclRvUGFydHMoTWF0aC5hYnMobnVtYmVyKSkubWFwKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHBhcnQpLCB7fSwge1xuICAgICAgICAgIHVuaXQ6IHVuaXRcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG5cbiAgICAgIGlmICh2YWx1ZUluZGV4ICsgXCJ7MH1cIi5sZW5ndGggPCBydWxlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJsaXRlcmFsXCIsXG4gICAgICAgICAgdmFsdWU6IHJ1bGUuc2xpY2UodmFsdWVJbmRleCArIFwiezB9XCIubGVuZ3RoKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcnRzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgZm9ybWF0dGluZyBydWxlIGZvciBgdmFsdWVgIGluIGB1bml0c2AgKGVpdGhlciBpbiBwYXN0IG9yIGluIGZ1dHVyZSkuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaW1lIGludGVydmFsIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBUaW1lIGludGVydmFsIG1lYXN1cmVtZW50IHVuaXQuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiB1bml0IGlzIG5vdCBvbmUgb2YgXCJzZWNvbmRcIiwgXCJtaW51dGVcIiwgXCJob3VyXCIsIFwiZGF5XCIsIFwid2Vla1wiLCBcIm1vbnRoXCIsIFwicXVhcnRlclwiLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIC8vIFJldHVybnMgXCJ7MH0gZGF5cyBhZ29cIlxyXG4gICAgICogZ2V0UnVsZSgtMiwgXCJkYXlcIilcclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UnVsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlKHZhbHVlLCB1bml0KSB7XG4gICAgICAvLyBHZXQgbG9jYWxlLXNwZWNpZmljIHRpbWUgaW50ZXJ2YWwgZm9ybWF0dGluZyBydWxlc1xuICAgICAgLy8gb2YgYSBnaXZlbiBgc3R5bGVgIGZvciB0aGUgZ2l2ZW4gdmFsdWUgb2YgbWVhc3VyZW1lbnQgYHVuaXRgLlxuICAgICAgLy9cbiAgICAgIC8vIEUuZy46XG4gICAgICAvL1xuICAgICAgLy8gYGBganNvblxuICAgICAgLy8ge1xuICAgICAgLy8gIFwicGFzdFwiOiB7XG4gICAgICAvLyAgICBcIm9uZVwiOiBcImEgc2Vjb25kIGFnb1wiLFxuICAgICAgLy8gICAgXCJvdGhlclwiOiBcInswfSBzZWNvbmRzIGFnb1wiXG4gICAgICAvLyAgfSxcbiAgICAgIC8vICBcImZ1dHVyZVwiOiB7XG4gICAgICAvLyAgICBcIm9uZVwiOiBcImluIGEgc2Vjb25kXCIsXG4gICAgICAvLyAgICBcIm90aGVyXCI6IFwiaW4gezB9IHNlY29uZHNcIlxuICAgICAgLy8gIH1cbiAgICAgIC8vIH1cbiAgICAgIC8vIGBgYFxuICAgICAgLy9cbiAgICAgIHZhciB1bml0TWVzc2FnZXMgPSBnZXRMb2NhbGVEYXRhKHRoaXMubG9jYWxlKVt0aGlzLnN0eWxlXVt1bml0XTsgLy8gQnVuZGxlIHNpemUgb3B0aW1pemF0aW9uIHRlY2huaXF1ZSBmb3Igc3R5bGVzIGxpa2VcbiAgICAgIC8vIFwidGlueVwiIGluIGBqYXZhc2NyaXB0LXRpbWUtYWdvYDogXCIxbVwiLCBcIjJoXCIsIFwiM2RcIi4uLlxuXG4gICAgICBpZiAodHlwZW9mIHVuaXRNZXNzYWdlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHVuaXRNZXNzYWdlcztcbiAgICAgIH0gLy8gU3BlY2lhbCBjYXNlIGZvciBcInllc3RlcmRheVwiL1widG9kYXlcIi9cInRvbW9ycm93XCIuXG5cblxuICAgICAgaWYgKHRoaXMubnVtZXJpYyA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgLy8gXCJ5ZXN0ZXJkYXlcIiwgXCJ0aGUgZGF5IGJlZm9yZSB5ZXN0ZXJkYXlcIiwgZXRjLlxuICAgICAgICBpZiAodmFsdWUgPT09IC0yIHx8IHZhbHVlID09PSAtMSkge1xuICAgICAgICAgIHZhciBtZXNzYWdlID0gdW5pdE1lc3NhZ2VzW1wicHJldmlvdXNcIi5jb25jYXQodmFsdWUgPT09IC0xID8gJycgOiAnLScgKyBNYXRoLmFicyh2YWx1ZSkpXTtcblxuICAgICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gXCJ0b21vcnJvd1wiLCBcInRoZSBkYXkgYWZ0ZXIgdG9tb3Jyb3dcIiwgZXRjLlxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gMSB8fCB2YWx1ZSA9PT0gMikge1xuICAgICAgICAgIHZhciBfbWVzc2FnZSA9IHVuaXRNZXNzYWdlc1tcIm5leHRcIi5jb25jYXQodmFsdWUgPT09IDEgPyAnJyA6ICctJyArIE1hdGguYWJzKHZhbHVlKSldO1xuXG4gICAgICAgICAgaWYgKF9tZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gX21lc3NhZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIFwidG9kYXlcIlxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgIGlmICh1bml0TWVzc2FnZXMuY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuaXRNZXNzYWdlcy5jdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBDaG9vc2UgZWl0aGVyIFwicGFzdFwiIG9yIFwiZnV0dXJlXCIgYmFzZWQgb24gdGltZSBgdmFsdWVgIHNpZ24uXG4gICAgICAvLyBJZiB0aGVyZSdzIG9ubHkgXCJvdGhlclwiIHRoZW4gaXQncyBiZWluZyBjb2xsYXBzZWQuXG4gICAgICAvLyAodGhlIHJlc3VsdGluZyBidW5kbGUgc2l6ZSBvcHRpbWl6YXRpb24gdGVjaG5pcXVlKVxuXG5cbiAgICAgIHZhciBwbHVyYWxpemVkTWVzc2FnZXMgPSB1bml0TWVzc2FnZXNbaXNOZWdhdGl2ZSh2YWx1ZSkgPyBcInBhc3RcIiA6IFwiZnV0dXJlXCJdOyAvLyBCdW5kbGUgc2l6ZSBvcHRpbWl6YXRpb24gdGVjaG5pcXVlIGZvciBzdHlsZXMgbGlrZSBcIm5hcnJvd1wiXG4gICAgICAvLyBoYXZpbmcgbWVzc2FnZXMgbGlrZSBcImluIHswfSBkLlwiIG9yIFwiezB9IGQuIGFnb1wiLlxuXG4gICAgICBpZiAodHlwZW9mIHBsdXJhbGl6ZWRNZXNzYWdlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gcGx1cmFsaXplZE1lc3NhZ2VzO1xuICAgICAgfSAvLyBRdWFudGlmeSBgdmFsdWVgLlxuICAgICAgLy8gVGhlcmUgc2VlbXMgdG8gYmUgbm8gc3VjaCBsb2NhbGUgaW4gQ0xEUlxuICAgICAgLy8gZm9yIHdoaWNoIFwicGx1cmFsIHJ1bGVzXCIgZnVuY3Rpb24gaXMgbWlzc2luZy5cblxuXG4gICAgICB2YXIgcXVhbnRpZmllciA9IHRoaXMucGx1cmFsUnVsZXMgJiYgdGhpcy5wbHVyYWxSdWxlcy5zZWxlY3QoTWF0aC5hYnModmFsdWUpKSB8fCAnb3RoZXInOyAvLyBcIm90aGVyXCIgcnVsZSBpcyBzdXBwb3NlZCB0byBiZSBhbHdheXMgcHJlc2VudC5cbiAgICAgIC8vIElmIG9ubHkgXCJvdGhlclwiIHJ1bGUgaXMgcHJlc2VudCB0aGVuIFwicnVsZXNcIiBpcyBub3QgYW4gb2JqZWN0IGFuZCBpcyBhIHN0cmluZy5cblxuICAgICAgcmV0dXJuIHBsdXJhbGl6ZWRNZXNzYWdlc1txdWFudGlmaWVyXSB8fCBwbHVyYWxpemVkTWVzc2FnZXMub3RoZXI7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogRm9ybWF0cyBhIG51bWJlciBpbnRvIGEgc3RyaW5nLlxyXG4gICAgICogVXNlcyBgSW50bC5OdW1iZXJGb3JtYXRgIHdoZW4gYXZhaWxhYmxlLlxyXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSBudW1iZXJcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0TnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLm51bWJlckZvcm1hdCA/IHRoaXMubnVtYmVyRm9ybWF0LmZvcm1hdChudW1iZXIpIDogU3RyaW5nKG51bWJlcik7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogRm9ybWF0cyBhIG51bWJlciBpbnRvIGEgbGlzdCBvZiBwYXJ0cy5cclxuICAgICAqIFVzZXMgYEludGwuTnVtYmVyRm9ybWF0YCB3aGVuIGF2YWlsYWJsZS5cclxuICAgICAqIEBwYXJhbSAge251bWJlcn0gbnVtYmVyXHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3RbXX1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0TnVtYmVyVG9QYXJ0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXROdW1iZXJUb1BhcnRzKG51bWJlcikge1xuICAgICAgLy8gYEludGwuTnVtYmVyRm9ybWF0LmZvcm1hdFRvUGFydHMoKWAgaXMgbm90IHByZXNlbnQsIGZvciBleGFtcGxlLFxuICAgICAgLy8gaW4gTm9kZS5qcyA4Lnggd2hpbGUgYEludGwuTnVtYmVyRm9ybWF0YCBpdHNlbGYgaXMgcHJlc2VudC5cbiAgICAgIHJldHVybiB0aGlzLm51bWJlckZvcm1hdCAmJiB0aGlzLm51bWJlckZvcm1hdC5mb3JtYXRUb1BhcnRzID8gdGhpcy5udW1iZXJGb3JtYXQuZm9ybWF0VG9QYXJ0cyhudW1iZXIpIDogW3tcbiAgICAgICAgdHlwZTogXCJpbnRlZ2VyXCIsXG4gICAgICAgIHZhbHVlOiB0aGlzLmZvcm1hdE51bWJlcihudW1iZXIpXG4gICAgICB9XTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgbmV3IG9iamVjdCB3aXRoIHByb3BlcnRpZXMgcmVmbGVjdGluZyB0aGUgbG9jYWxlIGFuZCBkYXRlIGFuZCB0aW1lIGZvcm1hdHRpbmcgb3B0aW9ucyBjb21wdXRlZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24gb2YgdGhpcyBEYXRlVGltZUZvcm1hdCBvYmplY3QuXHJcbiAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlVGltZUZvcm1hdC9yZXNvbHZlZE9wdGlvbnNcclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVzb2x2ZWRPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmVkT3B0aW9ucygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGUsXG4gICAgICAgIHN0eWxlOiB0aGlzLnN0eWxlLFxuICAgICAgICBudW1lcmljOiB0aGlzLm51bWVyaWMsXG4gICAgICAgIG51bWJlcmluZ1N5c3RlbTogdGhpcy5udW1iZXJpbmdTeXN0ZW1cbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlbGF0aXZlVGltZUZvcm1hdDtcbn0oKTtcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhvc2Ugb2YgdGhlIHByb3ZpZGVkIGxvY2FsZXNcclxuICogdGhhdCBhcmUgc3VwcG9ydGVkIGluIGNvbGxhdGlvbiB3aXRob3V0IGhhdmluZyB0byBmYWxsIGJhY2tcclxuICogdG8gdGhlIHJ1bnRpbWUncyBkZWZhdWx0IGxvY2FsZS5cclxuICogQHBhcmFtIHsoc3RyaW5nfHN0cmluZ1tdKX0gbG9jYWxlIC0gQSBzdHJpbmcgd2l0aCBhIEJDUCA0NyBsYW5ndWFnZSB0YWcsIG9yIGFuIGFycmF5IG9mIHN1Y2ggc3RyaW5ncy4gRm9yIHRoZSBnZW5lcmFsIGZvcm0gb2YgdGhlIGxvY2FsZXMgYXJndW1lbnQsIHNlZSB0aGUgSW50bCBwYWdlLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQW4gb2JqZWN0IHRoYXQgbWF5IGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0eTpcclxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsZU1hdGNoZXI9XCJsb29rdXBcIl0gLSBUaGUgbG9jYWxlIG1hdGNoaW5nIGFsZ29yaXRobSB0byB1c2UuIFBvc3NpYmxlIHZhbHVlcyBhcmUgXCJsb29rdXBcIiBhbmQgXCJiZXN0IGZpdFwiLiBDdXJyZW50bHkgb25seSBcImxvb2t1cFwiIGlzIHN1cHBvcnRlZC5cclxuICogQHJldHVybiB7c3RyaW5nW119IEFuIGFycmF5IG9mIHN0cmluZ3MgcmVwcmVzZW50aW5nIGEgc3Vic2V0IG9mIHRoZSBnaXZlbiBsb2NhbGUgdGFncyB0aGF0IGFyZSBzdXBwb3J0ZWQgaW4gY29sbGF0aW9uIHdpdGhvdXQgaGF2aW5nIHRvIGZhbGwgYmFjayB0byB0aGUgcnVudGltZSdzIGRlZmF1bHQgbG9jYWxlLlxyXG4gKiBAZXhhbXBsZVxyXG4gKiB2YXIgbG9jYWxlcyA9IFsnYmFuJywgJ2lkLXUtY28tcGlueWluJywgJ2VzLVBZJ11cclxuICogdmFyIG9wdGlvbnMgPSB7IGxvY2FsZU1hdGNoZXI6ICdsb29rdXAnIH1cclxuICogLy8gUmV0dXJucyBbXCJpZFwiLCBcImVzLVBZXCJdXHJcbiAqIEludGwuUmVsYXRpdmVUaW1lRm9ybWF0LnN1cHBvcnRlZExvY2FsZXNPZihsb2NhbGVzLCBvcHRpb25zKVxyXG4gKi9cblxuXG5leHBvcnQgeyBSZWxhdGl2ZVRpbWVGb3JtYXQgYXMgZGVmYXVsdCB9O1xuXG5SZWxhdGl2ZVRpbWVGb3JtYXQuc3VwcG9ydGVkTG9jYWxlc09mID0gZnVuY3Rpb24gKGxvY2FsZXMpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIC8vIENvbnZlcnQgYGxvY2FsZXNgIHRvIGFuIGFycmF5LlxuICBpZiAodHlwZW9mIGxvY2FsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgbG9jYWxlcyA9IFtsb2NhbGVzXTtcbiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShsb2NhbGVzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgXCJsb2NhbGVzXCIgYXJndW1lbnQnKTtcbiAgfVxuXG4gIHJldHVybiBsb2NhbGVzLmZpbHRlcihmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgcmV0dXJuIHJlc29sdmVMb2NhbGUobG9jYWxlLCBvcHRpb25zKTtcbiAgfSk7XG59O1xuLyoqXHJcbiAqIEFkZHMgbG9jYWxlIGRhdGEgZm9yIGEgc3BlY2lmaWMgbG9jYWxlLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gbG9jYWxlRGF0YVxyXG4gKi9cblxuXG5SZWxhdGl2ZVRpbWVGb3JtYXQuYWRkTG9jYWxlID0gYWRkTG9jYWxlRGF0YTtcbi8qKlxyXG4gKiBTZXRzIGRlZmF1bHQgbG9jYWxlLlxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGxvY2FsZVxyXG4gKi9cblxuUmVsYXRpdmVUaW1lRm9ybWF0LnNldERlZmF1bHRMb2NhbGUgPSBzZXREZWZhdWx0TG9jYWxlO1xuLyoqXHJcbiAqIEdldHMgZGVmYXVsdCBsb2NhbGUuXHJcbiAqIEByZXR1cm4gIHtzdHJpbmd9IGxvY2FsZVxyXG4gKi9cblxuUmVsYXRpdmVUaW1lRm9ybWF0LmdldERlZmF1bHRMb2NhbGUgPSBnZXREZWZhdWx0TG9jYWxlO1xuLyoqXHJcbiAqIEV4cG9ydCBgSW50bC5QbHVyYWxSdWxlc2AganVzdCBpbiBjYXNlIGl0J3MgdXNlZCBzb21ld2hlcmUgZWxzZS5cclxuICovXG5cblJlbGF0aXZlVGltZUZvcm1hdC5QbHVyYWxSdWxlcyA9IFBsdXJhbFJ1bGVzOyAvLyBUaGUgc3BlY2lmaWNhdGlvbiBhbGxvd3MgdW5pdHMgdG8gYmUgaW4gcGx1cmFsIGZvcm0uXG4vLyBDb252ZXJ0IHBsdXJhbCB0byBzaW5ndWxhci5cbi8vIEV4YW1wbGU6IFwic2Vjb25kc1wiIC0+IFwic2Vjb25kXCIuXG5cbnZhciBVTklUX0VSUk9SID0gJ0ludmFsaWQgXCJ1bml0XCIgYXJndW1lbnQnO1xuXG5mdW5jdGlvbiBwYXJzZVVuaXQodW5pdCkge1xuICBpZiAoX3R5cGVvZih1bml0KSA9PT0gJ3N5bWJvbCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFVOSVRfRVJST1IpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB1bml0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiXCIuY29uY2F0KFVOSVRfRVJST1IsIFwiOiBcIikuY29uY2F0KHVuaXQpKTtcbiAgfVxuXG4gIGlmICh1bml0W3VuaXQubGVuZ3RoIC0gMV0gPT09ICdzJykge1xuICAgIHVuaXQgPSB1bml0LnNsaWNlKDAsIHVuaXQubGVuZ3RoIC0gMSk7XG4gIH1cblxuICBpZiAoVU5JVFMuaW5kZXhPZih1bml0KSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlwiLmNvbmNhdChVTklUX0VSUk9SLCBcIjogXCIpLmNvbmNhdCh1bml0KSk7XG4gIH1cblxuICByZXR1cm4gdW5pdDtcbn0gLy8gQ29udmVydHMgYHZhbHVlYCB0byBhIGBOdW1iZXJgLlxuLy8gVGhlIHNwZWNpZmljYXRpb24gYWxsb3dzIHZhbHVlIHRvIGJlIGEgbm9uLW51bWJlci5cbi8vIEZvciBleGFtcGxlLCBcIi0wXCIgaXMgc3VwcG9zZWQgdG8gYmUgdHJlYXRlZCBhcyBgLTBgLlxuLy8gQWxzbyBjaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIuXG5cblxudmFyIE5VTUJFUl9FUlJPUiA9ICdJbnZhbGlkIFwibnVtYmVyXCIgYXJndW1lbnQnO1xuXG5mdW5jdGlvbiBwYXJzZU51bWJlcih2YWx1ZSkge1xuICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cbiAgaWYgKE51bWJlci5pc0Zpbml0ZSkge1xuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJcIi5jb25jYXQoTlVNQkVSX0VSUk9SLCBcIjogXCIpLmNvbmNhdCh2YWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxyXG4gKiBUZWxscyBgMGAgZnJvbSBgLTBgLlxyXG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MjIzMzU5L2FyZS0wLWFuZC0wLXRoZS1zYW1lXHJcbiAqIEBwYXJhbSAge251bWJlcn0gbnVtYmVyXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBleGFtcGxlXHJcbiAqIGlzTmVnYXRpdmVaZXJvKDApOyAvLyBmYWxzZVxyXG4gKiBpc05lZ2F0aXZlWmVybygtMCk7IC8vIHRydWVcclxuICovXG5cblxuZnVuY3Rpb24gaXNOZWdhdGl2ZVplcm8obnVtYmVyKSB7XG4gIHJldHVybiAxIC8gbnVtYmVyID09PSAtSW5maW5pdHk7XG59XG5cbmZ1bmN0aW9uIGlzTmVnYXRpdmUobnVtYmVyKSB7XG4gIHJldHVybiBudW1iZXIgPCAwIHx8IG51bWJlciA9PT0gMCAmJiBpc05lZ2F0aXZlWmVybyhudW1iZXIpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZvcm1hdEFyZ3MoYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlxcXCJ1bml0XFxcIiBhcmd1bWVudCBpcyByZXF1aXJlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBbcGFyc2VOdW1iZXIoYXJnc1swXSksIHBhcnNlVW5pdChhcmdzWzFdKV07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWxhdGl2ZVRpbWVGb3JtYXQuanMubWFwIiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qKlxyXG4gKiBBIGJhc2ljIGluLW1lbW9yeSBjYWNoZS5cclxuICpcclxuICogaW1wb3J0IENhY2hlIGZyb20gJ2phdmFzY3JpcHQtdGltZS1hZ28vQ2FjaGUnXHJcbiAqIGNvbnN0IGNhY2hlID0gbmV3IENhY2hlKClcclxuICogY29uc3Qgb2JqZWN0ID0gY2FjaGUuZ2V0KCdrZXkxJywgJ2tleTInLCAuLi4pIHx8IGNhY2hlLnB1dCgna2V5MScsICdrZXkyJywgLi4uLCBjcmVhdGVPYmplY3QoKSlcclxuICovXG52YXIgQ2FjaGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDYWNoZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FjaGUpO1xuXG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENhY2hlLCBbe1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGtleXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGtleXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pID0gMCwgX2tleXMgPSBrZXlzOyBfaSA8IF9rZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gX2tleXNbX2ldO1xuXG4gICAgICAgIGlmIChfdHlwZW9mKGNhY2hlKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjYWNoZSA9IGNhY2hlW2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicHV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1dCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwga2V5cyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBrZXlzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGtleXMucG9wKCk7XG4gICAgICB2YXIgbGFzdEtleSA9IGtleXMucG9wKCk7XG4gICAgICB2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG4gICAgICBmb3IgKHZhciBfaTIgPSAwLCBfa2V5czIgPSBrZXlzOyBfaTIgPCBfa2V5czIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICB2YXIga2V5ID0gX2tleXMyW19pMl07XG5cbiAgICAgICAgaWYgKF90eXBlb2YoY2FjaGVba2V5XSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgY2FjaGVba2V5XSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgY2FjaGUgPSBjYWNoZVtrZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FjaGVbbGFzdEtleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2FjaGU7XG59KCk7XG5cbmV4cG9ydCB7IENhY2hlIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlLmpzLm1hcCIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyByZXR1cm4gZnVuY3Rpb24gKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbi8qKlxyXG4gKiBDaG9vc2VzIHRoZSBtb3N0IGFwcHJvcHJpYXRlIGxvY2FsZVxyXG4gKiAob25lIG9mIHRoZSByZWdpc3RlcmVkIG9uZXMpXHJcbiAqIGJhc2VkIG9uIHRoZSBsaXN0IG9mIHByZWZlcnJlZCBgbG9jYWxlc2Agc3VwcGxpZWQgYnkgdGhlIHVzZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nW119IGxvY2FsZXMgLSB0aGUgbGlzdCBvZiBwcmVmZXJhYmxlIGxvY2FsZXMgKGluIFtJRVRGIGZvcm1hdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVURl9sYW5ndWFnZV90YWcpKS5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXNMb2NhbGVEYXRhQXZhaWxhYmxlIC0gdGVzdHMgaWYgYSBsb2NhbGUgaXMgYXZhaWxhYmxlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbW9zdCBzdWl0YWJsZSBsb2NhbGUuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIFJldHVybnMgJ2VuJ1xyXG4gKiBjaG9vc2VMb2NhbGUoWydlbi1VUyddLCB1bmRlZmluZWQsIChsb2NhbGUpID0+IGxvY2FsZSA9PT0gJ3J1JyB8fCBsb2NhbGUgPT09ICdlbicpXHJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hvb3NlTG9jYWxlKGxvY2FsZXMsIGlzTG9jYWxlRGF0YUF2YWlsYWJsZSkge1xuICAvLyBUaGlzIGlzIG5vdCBhbiBpbnRlbGxpZ2VudCBhbGdvcml0aG0sXG4gIC8vIGJ1dCBpdCB3aWxsIGRvIGZvciB0aGlzIGxpYnJhcnkncyBjYXNlLlxuICAvLyBgc3ItQ3lybC1CQWAgLT4gYHNyLUN5cmxgIC0+IGBzcmAuXG4gIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UobG9jYWxlcyksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgdmFyIGxvY2FsZSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgaWYgKGlzTG9jYWxlRGF0YUF2YWlsYWJsZShsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gbG9jYWxlO1xuICAgIH1cblxuICAgIHZhciBwYXJ0cyA9IGxvY2FsZS5zcGxpdCgnLScpO1xuXG4gICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHBhcnRzLnBvcCgpO1xuICAgICAgbG9jYWxlID0gcGFydHMuam9pbignLScpO1xuXG4gICAgICBpZiAoaXNMb2NhbGVEYXRhQXZhaWxhYmxlKGxvY2FsZSkpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJObyBsb2NhbGUgZGF0YSBoYXMgYmVlbiByZWdpc3RlcmVkIGZvciBhbnkgb2YgdGhlIGxvY2FsZXM6IFwiLmNvbmNhdChsb2NhbGVzLmpvaW4oJywgJykpKTtcbn1cbi8qKlxyXG4gKiBXaGV0aGVyIGNhbiB1c2UgYEludGwuRGF0ZVRpbWVGb3JtYXRgIGZvciB0aGVzZSBgbG9jYWxlc2AuXHJcbiAqIFJldHVybnMgdGhlIGZpcnN0IHN1aXRhYmxlIG9uZS5cclxuICogQHBhcmFtICB7KHN0cmluZ3xzdHJpbmdbXSl9IGxvY2FsZXNcclxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIGZpcnN0IGxvY2FsZSB0aGF0IGNhbiBiZSB1c2VkLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludGxEYXRlVGltZUZvcm1hdFN1cHBvcnRlZExvY2FsZShsb2NhbGVzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpbnRsRGF0ZVRpbWVGb3JtYXRTdXBwb3J0ZWQoKSkge1xuICAgIHJldHVybiBJbnRsLkRhdGVUaW1lRm9ybWF0LnN1cHBvcnRlZExvY2FsZXNPZihsb2NhbGVzKVswXTtcbiAgfVxufVxuLyoqXHJcbiAqIFdoZXRoZXIgY2FuIHVzZSBgSW50bC5EYXRlVGltZUZvcm1hdGAuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW50bERhdGVUaW1lRm9ybWF0U3VwcG9ydGVkKCkge1xuICAvLyBCYWJlbCB0cmFuc2Zvcm1zIGB0eXBlb2ZgIGludG8gc29tZSBcImJyYW5jaGVzXCJcbiAgLy8gc28gaXN0YW5idWwgd2lsbCBzaG93IHRoaXMgYXMgXCJicmFuY2ggbm90IGNvdmVyZWRcIi5cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB2YXIgaXNJbnRsQXZhaWxhYmxlID0gKHR5cGVvZiBJbnRsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoSW50bCkpID09PSAnb2JqZWN0JztcbiAgcmV0dXJuIGlzSW50bEF2YWlsYWJsZSAmJiB0eXBlb2YgSW50bC5EYXRlVGltZUZvcm1hdCA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsZS5qcy5tYXAiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU3R5bGVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiBpc09iamVjdChvYmplY3QpICYmIChBcnJheS5pc0FycmF5KG9iamVjdC5zdGVwcykgfHwgLy8gYGdyYWRhdGlvbmAgcHJvcGVydHkgaXMgZGVwcmVjYXRlZDogaXQgaGFzIGJlZW4gcmVuYW1lZCB0byBgc3RlcHNgLlxuICBBcnJheS5pc0FycmF5KG9iamVjdC5ncmFkYXRpb24pIHx8IC8vIGBmbGF2b3VyYCBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkOiBpdCBoYXMgYmVlbiByZW5hbWVkIHRvIGBsYWJlbHNgLlxuICBBcnJheS5pc0FycmF5KG9iamVjdC5mbGF2b3VyKSB8fCB0eXBlb2Ygb2JqZWN0LmZsYXZvdXIgPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkob2JqZWN0LmxhYmVscykgfHwgdHlwZW9mIG9iamVjdC5sYWJlbHMgPT09ICdzdHJpbmcnIHx8IC8vIGB1bml0c2AgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC5cbiAgQXJyYXkuaXNBcnJheShvYmplY3QudW5pdHMpIHx8IC8vIGBjdXN0b21gIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuXG4gIHR5cGVvZiBvYmplY3QuY3VzdG9tID09PSAnZnVuY3Rpb24nKTtcbn1cbnZhciBPQkpFQ1RfQ09OU1RSVUNUT1IgPSB7fS5jb25zdHJ1Y3RvcjtcblxuZnVuY3Rpb24gaXNPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiBfdHlwZW9mKG9iamVjdCkgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LmNvbnN0cnVjdG9yID09PSBPQkpFQ1RfQ09OU1RSVUNUT1I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1N0eWxlT2JqZWN0LmpzLm1hcCIsImV4cG9ydCB2YXIgbWludXRlID0gNjA7IC8vIGluIHNlY29uZHNcblxuZXhwb3J0IHZhciBob3VyID0gNjAgKiBtaW51dGU7IC8vIGluIHNlY29uZHNcblxuZXhwb3J0IHZhciBkYXkgPSAyNCAqIGhvdXI7IC8vIGluIHNlY29uZHNcblxuZXhwb3J0IHZhciB3ZWVrID0gNyAqIGRheTsgLy8gaW4gc2Vjb25kc1xuLy8gaHR0cHM6Ly93d3cucXVvcmEuY29tL1doYXQtaXMtdGhlLWF2ZXJhZ2UtbnVtYmVyLW9mLWRheXMtaW4tYS1tb250aFxuXG5leHBvcnQgdmFyIG1vbnRoID0gMzAuNDQgKiBkYXk7IC8vIGluIHNlY29uZHNcbi8vIFwiNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVwiXG5cbmV4cG9ydCB2YXIgeWVhciA9IDE0NjA5NyAvIDQwMCAqIGRheTsgLy8gaW4gc2Vjb25kc1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Vjb25kc0luVW5pdCh1bml0KSB7XG4gIHN3aXRjaCAodW5pdCkge1xuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICByZXR1cm4gMTtcblxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICByZXR1cm4gbWludXRlO1xuXG4gICAgY2FzZSAnaG91cic6XG4gICAgICByZXR1cm4gaG91cjtcblxuICAgIGNhc2UgJ2RheSc6XG4gICAgICByZXR1cm4gZGF5O1xuXG4gICAgY2FzZSAnd2Vlayc6XG4gICAgICByZXR1cm4gd2VlaztcblxuICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgIHJldHVybiBtb250aDtcblxuICAgIGNhc2UgJ3llYXInOlxuICAgICAgcmV0dXJuIHllYXI7XG4gIH1cbn0gLy8gZXhwb3J0IGZ1bmN0aW9uIGdldFByZXZpb3VzVW5pdEZvcih1bml0KSB7XG4vLyBcdHN3aXRjaCAodW5pdCkge1xuLy8gXHRcdGNhc2UgJ3NlY29uZCc6XG4vLyBcdFx0XHRyZXR1cm4gJ25vdydcbi8vIFx0XHRjYXNlICdtaW51dGUnOlxuLy8gXHRcdFx0cmV0dXJuICdzZWNvbmQnXG4vLyBcdFx0Y2FzZSAnaG91cic6XG4vLyBcdFx0XHRyZXR1cm4gJ21pbnV0ZSdcbi8vIFx0XHRjYXNlICdkYXknOlxuLy8gXHRcdFx0cmV0dXJuICdob3VyJ1xuLy8gXHRcdGNhc2UgJ3dlZWsnOlxuLy8gXHRcdFx0cmV0dXJuICdkYXknXG4vLyBcdFx0Y2FzZSAnbW9udGgnOlxuLy8gXHRcdFx0cmV0dXJuICd3ZWVrJ1xuLy8gXHRcdGNhc2UgJ3llYXInOlxuLy8gXHRcdFx0cmV0dXJuICdtb250aCdcbi8vIFx0fVxuLy8gfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pdHMuanMubWFwIiwiaW1wb3J0IHsgZ2V0U2Vjb25kc0luVW5pdCB9IGZyb20gJy4vdW5pdHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3RlcERlbm9taW5hdG9yKHN0ZXApIHtcbiAgLy8gYGZhY3RvcmAgaXMgYSBsZWdhY3kgcHJvcGVydHkuXG4gIGlmIChzdGVwLmZhY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHN0ZXAuZmFjdG9yO1xuICB9IC8vIFwidW5pdFwiIGlzIG5vdyBjYWxsZWQgXCJmb3JtYXRBc1wiLlxuXG5cbiAgcmV0dXJuIGdldFNlY29uZHNJblVuaXQoc3RlcC51bml0IHx8IHN0ZXAuZm9ybWF0QXMpIHx8IDE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRTdGVwRGVub21pbmF0b3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFJvdW5kRnVuY3Rpb24ocm91bmQpIHtcbiAgc3dpdGNoIChyb3VuZCkge1xuICAgIGNhc2UgJ2Zsb29yJzpcbiAgICAgIHJldHVybiBNYXRoLmZsb29yO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kO1xuICB9XG59IC8vIEZvciBub24tbmVnYXRpdmUgbnVtYmVycy5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpZmZSYXRpb1RvTmV4dFJvdW5kZWROdW1iZXIocm91bmQpIHtcbiAgc3dpdGNoIChyb3VuZCkge1xuICAgIGNhc2UgJ2Zsb29yJzpcbiAgICAgIC8vIE1hdGguZmxvb3IoeCkgPSB4XG4gICAgICAvLyBNYXRoLmZsb29yKHggKyAxKSA9IHggKyAxXG4gICAgICByZXR1cm4gMTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBNYXRoLnJvdW5kKHgpID0geFxuICAgICAgLy8gTWF0aC5yb3VuZCh4ICsgMC41KSA9IHggKyAxXG4gICAgICByZXR1cm4gMC41O1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3VuZC5qcy5tYXAiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCB7IGdldFNlY29uZHNJblVuaXQgfSBmcm9tICcuL3VuaXRzLmpzJztcbmltcG9ydCB7IGdldERpZmZSYXRpb1RvTmV4dFJvdW5kZWROdW1iZXIgfSBmcm9tICcuLi9yb3VuZC5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdGVwTWluVGltZShzdGVwLCBfcmVmKSB7XG4gIHZhciBwcmV2U3RlcCA9IF9yZWYucHJldlN0ZXAsXG4gICAgICB0aW1lc3RhbXAgPSBfcmVmLnRpbWVzdGFtcCxcbiAgICAgIG5vdyA9IF9yZWYubm93LFxuICAgICAgZnV0dXJlID0gX3JlZi5mdXR1cmUsXG4gICAgICByb3VuZCA9IF9yZWYucm91bmQ7XG4gIHZhciBtaW5UaW1lOyAvLyBcInRocmVzaG9sZF9mb3JfeHh4XCIgaXMgYSBsZWdhY3kgcHJvcGVydHkuXG5cbiAgaWYgKHByZXZTdGVwKSB7XG4gICAgaWYgKHByZXZTdGVwLmlkIHx8IHByZXZTdGVwLnVuaXQpIHtcbiAgICAgIG1pblRpbWUgPSBzdGVwW1widGhyZXNob2xkX2Zvcl9cIi5jb25jYXQocHJldlN0ZXAuaWQgfHwgcHJldlN0ZXAudW5pdCldO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtaW5UaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBcInRocmVzaG9sZFwiIGlzIGEgbGVnYWN5IHByb3BlcnR5LlxuICAgIGlmIChzdGVwLnRocmVzaG9sZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBcInRocmVzaG9sZFwiIGlzIGEgbGVnYWN5IG5hbWUgZm9yIFwibWluVGltZVwiLlxuICAgICAgbWluVGltZSA9IHN0ZXAudGhyZXNob2xkOyAvLyBcInRocmVzaG9sZFwiIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQuXG5cbiAgICAgIGlmICh0eXBlb2YgbWluVGltZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtaW5UaW1lID0gbWluVGltZShub3csIGZ1dHVyZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG1pblRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIG1pblRpbWUgPSBzdGVwLm1pblRpbWU7XG4gIH0gLy8gQSBkZXByZWNhdGVkIHdheSBvZiBzcGVjaWZ5aW5nIGEgZGlmZmVyZW50IHRocmVzaG9sZFxuICAvLyBkZXBlbmRpbmcgb24gdGhlIHByZXZpb3VzIHN0ZXAncyB1bml0LlxuXG5cbiAgaWYgKF90eXBlb2YobWluVGltZSkgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByZXZTdGVwICYmIHByZXZTdGVwLmlkICYmIG1pblRpbWVbcHJldlN0ZXAuaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1pblRpbWUgPSBtaW5UaW1lW3ByZXZTdGVwLmlkXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWluVGltZSA9IG1pblRpbWVbXCJkZWZhdWx0XCJdO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgbWluVGltZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG1pblRpbWUgPSBtaW5UaW1lKHRpbWVzdGFtcCwge1xuICAgICAgZnV0dXJlOiBmdXR1cmUsXG4gICAgICBnZXRNaW5UaW1lRm9yVW5pdDogZnVuY3Rpb24gZ2V0TWluVGltZUZvclVuaXQodG9Vbml0LCBmcm9tVW5pdCkge1xuICAgICAgICByZXR1cm4gX2dldE1pblRpbWVGb3JVbml0KHRvVW5pdCwgZnJvbVVuaXQgfHwgcHJldlN0ZXAgJiYgcHJldlN0ZXAuZm9ybWF0QXMsIHtcbiAgICAgICAgICByb3VuZDogcm91bmRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gLy8gRXZhbHVhdGUgdGhlIGB0ZXN0KClgIGZ1bmN0aW9uLlxuICAvLyBgdGVzdCgpYCBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLlxuXG5cbiAgaWYgKG1pblRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChzdGVwLnRlc3QpIHtcbiAgICAgIGlmIChzdGVwLnRlc3QodGltZXN0YW1wLCB7XG4gICAgICAgIG5vdzogbm93LFxuICAgICAgICBmdXR1cmU6IGZ1dHVyZVxuICAgICAgfSkpIHtcbiAgICAgICAgLy8gYDBgIHRocmVzaG9sZCBhbHdheXMgcGFzc2VzLlxuICAgICAgICBtaW5UaW1lID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGBNQVhfU0FGRV9JTlRFR0VSYCB0aHJlc2hvbGQgd29uJ3QgZXZlciBwYXNzIGluIHJlYWwgbGlmZS5cbiAgICAgICAgbWluVGltZSA9IDkwMDcxOTkyNTQ3NDA5OTE7IC8vIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG1pblRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcmV2U3RlcCkge1xuICAgICAgaWYgKHN0ZXAuZm9ybWF0QXMgJiYgcHJldlN0ZXAuZm9ybWF0QXMpIHtcbiAgICAgICAgbWluVGltZSA9IF9nZXRNaW5UaW1lRm9yVW5pdChzdGVwLmZvcm1hdEFzLCBwcmV2U3RlcC5mb3JtYXRBcywge1xuICAgICAgICAgIHJvdW5kOiByb3VuZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIGZpcnN0IHN0ZXAncyBgbWluVGltZWAgaXMgYDBgIGJ5IGRlZmF1bHQuXG4gICAgICBtaW5UaW1lID0gMDtcbiAgICB9XG4gIH0gLy8gV2FybiBpZiBubyBgbWluVGltZWAgd2FzIGRlZmluZWQgb3IgY291bGQgYmUgZGVkdWNlZC5cblxuXG4gIGlmIChtaW5UaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1tqYXZhc2NyaXB0LXRpbWUtYWdvXSBBIHN0ZXAgc2hvdWxkIHNwZWNpZnkgYG1pblRpbWVgOlxcbicgKyBKU09OLnN0cmluZ2lmeShzdGVwLCBudWxsLCAyKSk7XG4gIH1cblxuICByZXR1cm4gbWluVGltZTtcbn1cblxuZnVuY3Rpb24gX2dldE1pblRpbWVGb3JVbml0KHRvVW5pdCwgZnJvbVVuaXQsIF9yZWYyKSB7XG4gIHZhciByb3VuZCA9IF9yZWYyLnJvdW5kO1xuICB2YXIgdG9Vbml0QW1vdW50ID0gZ2V0U2Vjb25kc0luVW5pdCh0b1VuaXQpOyAvLyBpZiAoIWZyb21Vbml0KSB7XG4gIC8vIFx0cmV0dXJuIHRvVW5pdEFtb3VudDtcbiAgLy8gfVxuICAvLyBpZiAoIWZyb21Vbml0KSB7XG4gIC8vIFx0ZnJvbVVuaXQgPSBnZXRQcmV2aW91c1VuaXRGb3IodG9Vbml0KVxuICAvLyB9XG5cbiAgdmFyIGZyb21Vbml0QW1vdW50O1xuXG4gIGlmIChmcm9tVW5pdCA9PT0gJ25vdycpIHtcbiAgICBmcm9tVW5pdEFtb3VudCA9IGdldFNlY29uZHNJblVuaXQodG9Vbml0KTtcbiAgfSBlbHNlIHtcbiAgICBmcm9tVW5pdEFtb3VudCA9IGdldFNlY29uZHNJblVuaXQoZnJvbVVuaXQpO1xuICB9XG5cbiAgaWYgKHRvVW5pdEFtb3VudCAhPT0gdW5kZWZpbmVkICYmIGZyb21Vbml0QW1vdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdG9Vbml0QW1vdW50IC0gZnJvbVVuaXRBbW91bnQgKiAoMSAtIGdldERpZmZSYXRpb1RvTmV4dFJvdW5kZWROdW1iZXIocm91bmQpKTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0U3RlcE1pblRpbWUuanMubWFwIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IGdldFN0ZXBEZW5vbWluYXRvciBmcm9tICcuL2dldFN0ZXBEZW5vbWluYXRvci5qcyc7XG5pbXBvcnQgZ2V0U3RlcE1pblRpbWUgZnJvbSAnLi9nZXRTdGVwTWluVGltZS5qcyc7XG5pbXBvcnQgeyBnZXRSb3VuZEZ1bmN0aW9uIH0gZnJvbSAnLi4vcm91bmQuanMnO1xuLyoqXHJcbiAqIEZpbmRzIGFuIGFwcHJvcHJpYXRlIGBzdGVwYCBvZiBgc3RlcHNgIGZvciB0aGUgdGltZSBpbnRlcnZhbCAoaW4gc2Vjb25kcykuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0W119IHN0ZXBzIC0gVGltZSBmb3JtYXR0aW5nIHN0ZXBzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kc1Bhc3NlZCAtIFRpbWUgaW50ZXJ2YWwgKGluIHNlY29uZHMpLlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA8IDBgIGZvciBwYXN0IGRhdGVzIGFuZCBgPiAwYCBmb3IgZnV0dXJlIGRhdGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5ub3cgLSBDdXJyZW50IHRpbWVzdGFtcC5cclxuICpcclxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5mdXR1cmVdIC0gV2hldGhlciB0aGUgZGF0ZSBzaG91bGQgYmUgZm9ybWF0dGVkIGFzIGEgZnV0dXJlIG9uZVxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIGEgcGFzdCBvbmUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5yb3VuZF0gLSAodW5kb2N1bWVudGVkKSBSb3VuZGluZyBtZWNoYW5pc20uXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nW119IFtvcHRpb25zLnVuaXRzXSAtIEEgbGlzdCBvZiBhbGxvd2VkIHRpbWUgdW5pdHMuXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChFeGFtcGxlOiBbJ3NlY29uZCcsICdtaW51dGUnLCAnaG91cicsIOKApl0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZ2V0TmV4dFN0ZXBdIC0gUGFzcyB0cnVlIHRvIHJldHVybiBgW3N0ZXAsIG5leHRTdGVwXWAgaW5zdGVhZCBvZiBqdXN0IGBzdGVwYC5cclxuICpcclxuICogQHJldHVybiB7T2JqZWN0fE9iamVjdFtdfSBbc3RlcF0g4oCUIEVpdGhlciBhIGBzdGVwYCBvciBgW3ByZXZTdGVwLCBzdGVwLCBuZXh0U3RlcF1gLlxyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3RlcChzdGVwcywgc2Vjb25kc1Bhc3NlZCwgX3JlZikge1xuICB2YXIgbm93ID0gX3JlZi5ub3csXG4gICAgICBmdXR1cmUgPSBfcmVmLmZ1dHVyZSxcbiAgICAgIHJvdW5kID0gX3JlZi5yb3VuZCxcbiAgICAgIHVuaXRzID0gX3JlZi51bml0cyxcbiAgICAgIGdldE5leHRTdGVwID0gX3JlZi5nZXROZXh0U3RlcDtcbiAgLy8gSWdub3JlIHN0ZXBzIGhhdmluZyBub3Qtc3VwcG9ydGVkIHRpbWUgdW5pdHMgaW4gYGZvcm1hdEFzYC5cbiAgc3RlcHMgPSBmaWx0ZXJTdGVwc0J5VW5pdHMoc3RlcHMsIHVuaXRzKTtcblxuICB2YXIgc3RlcCA9IF9nZXRTdGVwKHN0ZXBzLCBzZWNvbmRzUGFzc2VkLCB7XG4gICAgbm93OiBub3csXG4gICAgZnV0dXJlOiBmdXR1cmUsXG4gICAgcm91bmQ6IHJvdW5kXG4gIH0pO1xuXG4gIGlmIChnZXROZXh0U3RlcCkge1xuICAgIGlmIChzdGVwKSB7XG4gICAgICB2YXIgcHJldlN0ZXAgPSBzdGVwc1tzdGVwcy5pbmRleE9mKHN0ZXApIC0gMV07XG4gICAgICB2YXIgbmV4dFN0ZXAgPSBzdGVwc1tzdGVwcy5pbmRleE9mKHN0ZXApICsgMV07XG4gICAgICByZXR1cm4gW3ByZXZTdGVwLCBzdGVwLCBuZXh0U3RlcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgc3RlcHNbMF1dO1xuICB9XG5cbiAgcmV0dXJuIHN0ZXA7XG59XG5cbmZ1bmN0aW9uIF9nZXRTdGVwKHN0ZXBzLCBzZWNvbmRzUGFzc2VkLCBfcmVmMikge1xuICB2YXIgbm93ID0gX3JlZjIubm93LFxuICAgICAgZnV0dXJlID0gX3JlZjIuZnV0dXJlLFxuICAgICAgcm91bmQgPSBfcmVmMi5yb3VuZDtcblxuICAvLyBJZiBubyBzdGVwcyBmaXQgdGhlIGNvbmRpdGlvbnMgdGhlbiByZXR1cm4gbm90aGluZy5cbiAgaWYgKHN0ZXBzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBGaW5kIHRoZSBtb3N0IGFwcHJvcHJpYXRlIHN0ZXAuXG5cblxuICB2YXIgaSA9IGdldFN0ZXBJbmRleChzdGVwcywgc2Vjb25kc1Bhc3NlZCwge1xuICAgIG5vdzogbm93LFxuICAgIGZ1dHVyZTogZnV0dXJlIHx8IHNlY29uZHNQYXNzZWQgPCAwLFxuICAgIHJvdW5kOiByb3VuZFxuICB9KTsgLy8gSWYgbm8gc3RlcCBpcyBhcHBsaWNhYmxlIHRoZSByZXR1cm4gbm90aGluZy5cblxuICBpZiAoaSA9PT0gLTEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc3RlcCA9IHN0ZXBzW2ldOyAvLyBBcHBseSBncmFudWxhcml0eSB0byB0aGUgdGltZSBhbW91bnRcbiAgLy8gKGFuZCBmYWxsIGJhY2sgdG8gdGhlIHByZXZpb3VzIHN0ZXBcbiAgLy8gIGlmIHRoZSBmaXJzdCBsZXZlbCBvZiBncmFudWxhcml0eVxuICAvLyAgaXNuJ3QgbWV0IGJ5IHRoaXMgYW1vdW50KVxuXG4gIGlmIChzdGVwLmdyYW51bGFyaXR5KSB7XG4gICAgLy8gUmVjYWxjdWxhdGUgdGhlIGFtb3VudCBvZiBzZWNvbmRzIHBhc3NlZCBiYXNlZCBvbiBgZ3JhbnVsYXJpdHlgLlxuICAgIHZhciBzZWNvbmRzUGFzc2VkR3JhbnVsYXIgPSBnZXRSb3VuZEZ1bmN0aW9uKHJvdW5kKShNYXRoLmFicyhzZWNvbmRzUGFzc2VkKSAvIGdldFN0ZXBEZW5vbWluYXRvcihzdGVwKSAvIHN0ZXAuZ3JhbnVsYXJpdHkpICogc3RlcC5ncmFudWxhcml0eTsgLy8gSWYgdGhlIGdyYW51bGFyaXR5IGZvciB0aGlzIHN0ZXAgaXMgdG9vIGhpZ2gsXG4gICAgLy8gdGhlbiBmYWxsIGJhY2sgdG8gdGhlIHByZXZpb3VzIHN0ZXAuXG4gICAgLy8gKGlmIHRoZXJlIGlzIGFueSBwcmV2aW91cyBzdGVwKVxuXG4gICAgaWYgKHNlY29uZHNQYXNzZWRHcmFudWxhciA9PT0gMCAmJiBpID4gMCkge1xuICAgICAgcmV0dXJuIHN0ZXBzW2kgLSAxXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RlcDtcbn1cbi8qKlxyXG4gKiBJdGVyYXRlcyB0aHJvdWdoIHN0ZXBzIHVudGlsIGl0IGZpbmRzIHRoZSBtYXhpbXVtIG9uZSBzYXRpc2Z5aW5nIHRoZSBgbWluVGltZWAgdGhyZXNob2xkLlxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IHN0ZXBzIC0gU3RlcHMuXHJcbiAqIEBwYXJhbSAge251bWJlcn0gc2Vjb25kc1Bhc3NlZCAtIEhvdyBtdWNoIHNlY29uZHMgaGF2ZSBwYXNzZWQgc2luY2UgdGhlIGRhdGUgdGlsbCBgbm93YC5cclxuICogQHBhcmFtICB7bnVtYmVyfSBvcHRpb25zLm5vdyAtIEN1cnJlbnQgdGltZXN0YW1wLlxyXG4gKiBAcGFyYW0gIHtib29sZWFufSBvcHRpb25zLmZ1dHVyZSAtIFdoZXRoZXIgdGhlIHRpbWUgaW50ZXJ2YWwgc2hvdWxkIGJlIGZvcm1hdHRlZCBhcyBhIGZ1dHVyZSBvbmUuXHJcbiAqIEBwYXJhbSAge251bWJlcn0gW2ldIC0gR3JhZGF0aW9uIHN0ZXAgY3VycmVudGx5IGJlaW5nIHRlc3RlZC5cclxuICogQHJldHVybiB7bnVtYmVyfSBHcmFkYXRpb24gc3RlcCBpbmRleC5cclxuICovXG5cblxuZnVuY3Rpb24gZ2V0U3RlcEluZGV4KHN0ZXBzLCBzZWNvbmRzUGFzc2VkLCBvcHRpb25zKSB7XG4gIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwO1xuICB2YXIgbWluVGltZSA9IGdldFN0ZXBNaW5UaW1lKHN0ZXBzW2ldLCBfb2JqZWN0U3ByZWFkKHtcbiAgICBwcmV2U3RlcDogc3RlcHNbaSAtIDFdLFxuICAgIHRpbWVzdGFtcDogb3B0aW9ucy5ub3cgLSBzZWNvbmRzUGFzc2VkICogMTAwMFxuICB9LCBvcHRpb25zKSk7IC8vIElmIGBtaW5UaW1lYCBpc24ndCBkZWZpbmVkIG9yIGRlZHVjZWFibGUgZm9yIHRoaXMgc3RlcCwgdGhlbiBzdG9wLlxuXG4gIGlmIChtaW5UaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaSAtIDE7XG4gIH0gLy8gSWYgdGhlIGBtaW5UaW1lYCB0aHJlc2hvbGQgZm9yIG1vdmluZyBmcm9tIHByZXZpb3VzIHN0ZXBcbiAgLy8gdG8gdGhpcyBzdGVwIGlzIHRvbyBoaWdoIHRoZW4gcmV0dXJuIHRoZSBwcmV2aW91cyBzdGVwLlxuXG5cbiAgaWYgKE1hdGguYWJzKHNlY29uZHNQYXNzZWQpIDwgbWluVGltZSkge1xuICAgIHJldHVybiBpIC0gMTtcbiAgfSAvLyBJZiBpdCdzIHRoZSBsYXN0IHN0ZXAgdGhlbiByZXR1cm4gaXQuXG5cblxuICBpZiAoaSA9PT0gc3RlcHMubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBpO1xuICB9IC8vIE1vdmUgdG8gdGhlIG5leHQgc3RlcC5cblxuXG4gIHJldHVybiBnZXRTdGVwSW5kZXgoc3RlcHMsIHNlY29uZHNQYXNzZWQsIG9wdGlvbnMsIGkgKyAxKTtcbn1cbi8qKlxyXG4gKiBMZWF2ZXMgb25seSBhbGxvd2VkIHN0ZXBzLlxyXG4gKiBAcGFyYW0gIHtPYmplY3RbXX0gc3RlcHNcclxuICogQHBhcmFtICB7c3RyaW5nW119IHVuaXRzIC0gQWxsb3dlZCB0aW1lIHVuaXRzLlxyXG4gKiBAcmV0dXJuIHtPYmplY3RbXX1cclxuICovXG5cblxuZnVuY3Rpb24gZmlsdGVyU3RlcHNCeVVuaXRzKHN0ZXBzLCB1bml0cykge1xuICByZXR1cm4gc3RlcHMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMykge1xuICAgIHZhciB1bml0ID0gX3JlZjMudW5pdCxcbiAgICAgICAgZm9ybWF0QXMgPSBfcmVmMy5mb3JtYXRBcztcbiAgICAvLyBcInVuaXRcIiBpcyBub3cgY2FsbGVkIFwiZm9ybWF0QXNcIi5cbiAgICB1bml0ID0gdW5pdCB8fCBmb3JtYXRBczsgLy8gSWYgdGhpcyBzdGVwIGhhcyBhIGB1bml0YCBkZWZpbmVkXG4gICAgLy8gdGhlbiB0aGlzIGB1bml0YCBtdXN0IGJlIGluIHRoZSBsaXN0IG9mIGFsbG93ZWQgYHVuaXRzYC5cblxuICAgIGlmICh1bml0KSB7XG4gICAgICByZXR1cm4gdW5pdHMuaW5kZXhPZih1bml0KSA+PSAwO1xuICAgIH0gLy8gQSBzdGVwIGlzIG5vdCByZXF1aXJlZCB0byBzcGVjaWZ5IGEgYHVuaXRgOlxuICAgIC8vIGFsdGVybmF0aXZlbHksIGl0IGNvdWxkIHNwZWNpZnkgYGZvcm1hdCgpYC5cbiAgICAvLyAoc2VlIFwidHdpdHRlclwiIHN0eWxlIGZvciBhbiBleGFtcGxlKVxuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRTdGVwLmpzLm1hcCIsImltcG9ydCB7IGdldFNlY29uZHNJblVuaXQgfSBmcm9tICcuL3VuaXRzLmpzJztcbmltcG9ydCB7IGdldFJvdW5kRnVuY3Rpb24sIGdldERpZmZSYXRpb1RvTmV4dFJvdW5kZWROdW1iZXIgfSBmcm9tICcuLi9yb3VuZC5qcyc7XG4vKipcclxuICogR2V0cyB0aGUgdGltZSB0byBuZXh0IHVwZGF0ZSBmb3IgYSBzdGVwIHdpdGggYSB0aW1lIHVuaXQgZGVmaW5lZC5cclxuICogQHBhcmFtICB7c3RyaW5nfSB1bml0XHJcbiAqIEBwYXJhbSAge251bWJlcn0gZGF0ZSDigJQgVGhlIGRhdGUgcGFzc2VkIHRvIGAuZm9ybWF0KClgLCBjb252ZXJ0ZWQgdG8gYSB0aW1lc3RhbXAuXHJcbiAqIEBwYXJhbSAge251bWJlcn0gb3B0aW9ucy5ub3dcclxuICogQHBhcmFtICB7c3RyaW5nfSBbb3B0aW9ucy5yb3VuZF0g4oCUICh1bmRvY3VtZW50ZWQpIFJvdW5kaW5nIG1lY2hhbmlzbS5cclxuICogQHJldHVybiB7bnVtYmVyfSBbdGltZVRvTmV4dFVwZGF0ZV1cclxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWVUb05leHRVcGRhdGVGb3JVbml0KHVuaXQsIHRpbWVzdGFtcCwgX3JlZikge1xuICB2YXIgbm93ID0gX3JlZi5ub3csXG4gICAgICByb3VuZCA9IF9yZWYucm91bmQ7XG5cbiAgLy8gRm9yIHNvbWUgdW5pdHMsIGxpa2UgXCJub3dcIiwgdGhlcmUncyBubyBkZWZpbmVkIGFtb3VudCBvZiBzZWNvbmRzIGluIHRoZW0uXG4gIGlmICghZ2V0U2Vjb25kc0luVW5pdCh1bml0KSkge1xuICAgIC8vIElmIHRoZXJlJ3Mgbm8gYW1vdW50IG9mIHNlY29uZHMgZGVmaW5lZCBmb3IgdGhpcyB1bml0XG4gICAgLy8gdGhlbiB0aGUgdXBkYXRlIGludGVydmFsIGNhbid0IGJlIGRldGVybWluZWQgcmVsaWFibHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHVuaXREZW5vbWluYXRvciA9IGdldFNlY29uZHNJblVuaXQodW5pdCkgKiAxMDAwO1xuICB2YXIgZnV0dXJlID0gdGltZXN0YW1wID4gbm93O1xuICB2YXIgcHJlY2lzZUFtb3VudCA9IE1hdGguYWJzKHRpbWVzdGFtcCAtIG5vdyk7XG4gIHZhciByb3VuZGVkQW1vdW50ID0gZ2V0Um91bmRGdW5jdGlvbihyb3VuZCkocHJlY2lzZUFtb3VudCAvIHVuaXREZW5vbWluYXRvcikgKiB1bml0RGVub21pbmF0b3I7XG5cbiAgaWYgKGZ1dHVyZSkge1xuICAgIGlmIChyb3VuZGVkQW1vdW50ID4gMCkge1xuICAgICAgLy8gQW1vdW50IGRlY3JlYXNlcyB3aXRoIHRpbWUuXG4gICAgICByZXR1cm4gcHJlY2lzZUFtb3VudCAtIHJvdW5kZWRBbW91bnQgKyBnZXREaWZmVG9QcmV2aW91c1JvdW5kZWROdW1iZXIocm91bmQsIHVuaXREZW5vbWluYXRvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlZnJlc2ggcmlnaHQgYWZ0ZXIgdGhlIHplcm8gcG9pbnQsXG4gICAgICAvLyB3aGVuIFwiZnV0dXJlXCIgY2hhbmdlcyB0byBcInBhc3RcIi5cbiAgICAgIHJldHVybiBwcmVjaXNlQW1vdW50IC0gcm91bmRlZEFtb3VudCArIDE7XG4gICAgfVxuICB9IC8vIEFtb3VudCBpbmNyZWFzZXMgd2l0aCB0aW1lLlxuXG5cbiAgcmV0dXJuIC0ocHJlY2lzZUFtb3VudCAtIHJvdW5kZWRBbW91bnQpICsgZ2V0RGlmZlRvTmV4dFJvdW5kZWROdW1iZXIocm91bmQsIHVuaXREZW5vbWluYXRvcik7XG59XG5cbmZ1bmN0aW9uIGdldERpZmZUb05leHRSb3VuZGVkTnVtYmVyKHJvdW5kLCB1bml0RGVub21pbmF0b3IpIHtcbiAgcmV0dXJuIGdldERpZmZSYXRpb1RvTmV4dFJvdW5kZWROdW1iZXIocm91bmQpICogdW5pdERlbm9taW5hdG9yO1xufVxuXG5mdW5jdGlvbiBnZXREaWZmVG9QcmV2aW91c1JvdW5kZWROdW1iZXIocm91bmQsIHVuaXREZW5vbWluYXRvcikge1xuICByZXR1cm4gKDEgLSBnZXREaWZmUmF0aW9Ub05leHRSb3VuZGVkTnVtYmVyKHJvdW5kKSkgKiB1bml0RGVub21pbmF0b3IgKyAxO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VGltZVRvTmV4dFVwZGF0ZUZvclVuaXQuanMubWFwIiwiaW1wb3J0IF9nZXRUaW1lVG9OZXh0VXBkYXRlRm9yVW5pdCBmcm9tICcuL2dldFRpbWVUb05leHRVcGRhdGVGb3JVbml0LmpzJztcbmltcG9ydCBnZXRTdGVwTWluVGltZSBmcm9tICcuL2dldFN0ZXBNaW5UaW1lLmpzJztcbmltcG9ydCB7IGdldFJvdW5kRnVuY3Rpb24gfSBmcm9tICcuLi9yb3VuZC5qcyc7IC8vIEEgdGhvdXNhbmQgeWVhcnMgaXMgcHJhY3RpY2FsbHkgYSBtZXRhcGhvciBmb3IgXCJpbmZpbml0eVwiLlxuXG52YXIgWUVBUiA9IDM2NSAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG5leHBvcnQgdmFyIElORklOSVRZID0gMTAwMCAqIFlFQVI7XG4vKipcclxuICogR2V0cyB0aGUgdGltZSB0byBuZXh0IHVwZGF0ZSBmb3IgYSBkYXRlIGFuZCBhIHN0ZXAuXHJcbiAqIEBwYXJhbSAge251bWJlcn0gZGF0ZSDigJQgVGhlIGRhdGUgcGFzc2VkIHRvIGAuZm9ybWF0KClgLCBjb252ZXJ0ZWQgdG8gYSB0aW1lc3RhbXAuXHJcbiAqIEBwYXJhbSAge29iamVjdH0gc3RlcFxyXG4gKiBAcGFyYW0gIHtvYmplY3R9IFtvcHRpb25zLnByZXZpb3VzU3RlcF1cclxuICogQHBhcmFtICB7b2JqZWN0fSBbb3B0aW9ucy5uZXh0U3RlcF1cclxuICogQHBhcmFtICB7bnVtYmVyfSBvcHRpb25zLm5vd1xyXG4gKiBAcGFyYW0gIHtib29sZWFufSBvcHRpb25zLmZ1dHVyZVxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IFtvcHRpb25zLnJvdW5kXSAtICh1bmRvY3VtZW50ZWQpIFJvdW5kaW5nIG1lY2hhbmlzbS5cclxuICogQHJldHVybiB7bnVtYmVyfSBbdGltZVRvTmV4dFVwZGF0ZV1cclxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWVUb05leHRVcGRhdGUoZGF0ZSwgc3RlcCwgX3JlZikge1xuICB2YXIgcHJldlN0ZXAgPSBfcmVmLnByZXZTdGVwLFxuICAgICAgbmV4dFN0ZXAgPSBfcmVmLm5leHRTdGVwLFxuICAgICAgbm93ID0gX3JlZi5ub3csXG4gICAgICBmdXR1cmUgPSBfcmVmLmZ1dHVyZSxcbiAgICAgIHJvdW5kID0gX3JlZi5yb3VuZDtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSA/IGRhdGUuZ2V0VGltZSgpIDogZGF0ZTtcblxuICB2YXIgZ2V0VGltZVRvTmV4dFVwZGF0ZUZvclVuaXQgPSBmdW5jdGlvbiBnZXRUaW1lVG9OZXh0VXBkYXRlRm9yVW5pdCh1bml0KSB7XG4gICAgcmV0dXJuIF9nZXRUaW1lVG9OZXh0VXBkYXRlRm9yVW5pdCh1bml0LCB0aW1lc3RhbXAsIHtcbiAgICAgIG5vdzogbm93LFxuICAgICAgcm91bmQ6IHJvdW5kXG4gICAgfSk7XG4gIH07IC8vIEZvciBmdXR1cmUgZGF0ZXMsIHN0ZXBzIG1vdmUgZnJvbSB0aGUgbGFzdCBvbmUgdG8gdGhlIGZpcnN0IG9uZSxcbiAgLy8gd2hpbGUgZm9yIHBhc3QgZGF0ZXMsIHN0ZXBzIG1vdmUgZnJvbSB0aGUgZmlyc3Qgb25lIHRvIHRoZSBsYXN0IG9uZSxcbiAgLy8gZHVlIHRvIHRoZSBmYWN0IHRoYXQgdGltZSBmbG93cyBpbiBvbmUgZGlyZWN0aW9uLFxuICAvLyBhbmQgZnV0dXJlIGRhdGVzJyBpbnRlcnZhbCBuYXR1cmFsbHkgYmVjb21lcyBzbWFsbGVyXG4gIC8vIHdoaWxlIHBhc3QgZGF0ZXMnIGludGVydmFsIG5hdHVyYWxseSBncm93cyBsYXJnZXIuXG4gIC8vXG4gIC8vIEZvciBmdXR1cmUgZGF0ZXMsIGl0J3MgdGhlIHRyYW5zaXRpb25cbiAgLy8gZnJvbSB0aGUgY3VycmVudCBzdGVwIHRvIHRoZSBwcmV2aW91cyBzdGVwLFxuICAvLyB0aGVyZWZvcmUgY2hlY2sgdGhlIGBtaW5UaW1lYCBvZiB0aGUgY3VycmVudCBzdGVwLlxuICAvL1xuICAvLyBGb3IgcGFzdCBkYXRlcywgaXQncyB0aGUgdHJhbnNpdGlvblxuICAvLyBmcm9tIHRoZSBjdXJyZW50IHN0ZXAgdG8gdGhlIG5leHQgc3RlcCxcbiAgLy8gdGhlcmVmb3JlIGNoZWNrIHRoZSBgbWluVGltZWAgb2YgdGhlIG5leHQgc3RlcC5cbiAgLy9cblxuXG4gIHZhciB0aW1lVG9TdGVwQ2hhbmdlID0gZ2V0VGltZVRvU3RlcENoYW5nZShmdXR1cmUgPyBzdGVwIDogbmV4dFN0ZXAsIHRpbWVzdGFtcCwge1xuICAgIGZ1dHVyZTogZnV0dXJlLFxuICAgIG5vdzogbm93LFxuICAgIHJvdW5kOiByb3VuZCxcbiAgICBwcmV2U3RlcDogZnV0dXJlID8gcHJldlN0ZXAgOiBzdGVwIC8vIGlzRmlyc3RTdGVwOiBmdXR1cmUgJiYgaXNGaXJzdFN0ZXBcblxuICB9KTtcblxuICBpZiAodGltZVRvU3RlcENoYW5nZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gQ2FuJ3QgcmVsaWFibHkgZGV0ZXJtaW5lIFwidGltZSB0byBuZXh0IHVwZGF0ZVwiXG4gICAgLy8gaWYgbm90IGFsbCBvZiB0aGUgc3RlcHMgcHJvdmlkZSBgbWluVGltZWAuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRpbWVUb05leHRVcGRhdGU7XG5cbiAgaWYgKHN0ZXApIHtcbiAgICBpZiAoc3RlcC5nZXRUaW1lVG9OZXh0VXBkYXRlKSB7XG4gICAgICB0aW1lVG9OZXh0VXBkYXRlID0gc3RlcC5nZXRUaW1lVG9OZXh0VXBkYXRlKHRpbWVzdGFtcCwge1xuICAgICAgICBnZXRUaW1lVG9OZXh0VXBkYXRlRm9yVW5pdDogZ2V0VGltZVRvTmV4dFVwZGF0ZUZvclVuaXQsXG4gICAgICAgIGdldFJvdW5kRnVuY3Rpb246IGdldFJvdW5kRnVuY3Rpb24sXG4gICAgICAgIG5vdzogbm93LFxuICAgICAgICBmdXR1cmU6IGZ1dHVyZSxcbiAgICAgICAgcm91bmQ6IHJvdW5kXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGltZVRvTmV4dFVwZGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBcInVuaXRcIiBpcyBub3cgY2FsbGVkIFwiZm9ybWF0QXNcIi5cbiAgICAgIHZhciB1bml0ID0gc3RlcC51bml0IHx8IHN0ZXAuZm9ybWF0QXM7XG5cbiAgICAgIGlmICh1bml0KSB7XG4gICAgICAgIC8vIEZvciBzb21lIHVuaXRzLCBsaWtlIFwibm93XCIsIHRoZXJlJ3Mgbm8gZGVmaW5lZCBhbW91bnQgb2Ygc2Vjb25kcyBpbiB0aGVtLlxuICAgICAgICAvLyBJbiBzdWNoIGNhc2VzLCBgZ2V0VGltZVRvTmV4dFVwZGF0ZUZvclVuaXQoKWAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgICAgLy8gYW5kIHRoZSBuZXh0IHN0ZXAncyBgbWluVGltZWAgY291bGQgYmUgdXNlZCB0byBjYWxjdWxhdGUgdGhlIHVwZGF0ZSBpbnRlcnZhbDpcbiAgICAgICAgLy8gaXQgd2lsbCBqdXN0IGFzc3VtZSB0aGF0IHRoZSBsYWJlbCBuZXZlciBjaGFuZ2VzIGZvciB0aGlzIHN0ZXAuXG4gICAgICAgIHRpbWVUb05leHRVcGRhdGUgPSBnZXRUaW1lVG9OZXh0VXBkYXRlRm9yVW5pdCh1bml0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAodGltZVRvTmV4dFVwZGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRpbWVUb1N0ZXBDaGFuZ2U7XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4odGltZVRvTmV4dFVwZGF0ZSwgdGltZVRvU3RlcENoYW5nZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RlcENoYW5nZXNBdChjdXJyZW50T3JOZXh0U3RlcCwgdGltZXN0YW1wLCBfcmVmMikge1xuICB2YXIgbm93ID0gX3JlZjIubm93LFxuICAgICAgZnV0dXJlID0gX3JlZjIuZnV0dXJlLFxuICAgICAgcm91bmQgPSBfcmVmMi5yb3VuZCxcbiAgICAgIHByZXZTdGVwID0gX3JlZjIucHJldlN0ZXA7XG4gIC8vIFRoZSBmaXJzdCBzdGVwJ3MgYG1pblRpbWVgIGlzIGAwYCBieSBkZWZhdWx0LlxuICAvLyBJdCBkb2Vzbid0IFwiY2hhbmdlXCIgc3RlcHMgYXQgemVybyBwb2ludFxuICAvLyBidXQgaXQgZG9lcyBjaGFuZ2UgdGhlIHdvcmRpbmcgd2hlbiBzd2l0Y2hpbmdcbiAgLy8gZnJvbSBcImZ1dHVyZVwiIHRvIFwicGFzdFwiOiBcImluIC4uLlwiIC0+IFwiLi4uIGFnb1wiLlxuICAvLyBUaGVyZWZvcmUsIHRoZSBsYWJlbCBzaG91bGQgYmUgdXBkYXRlZCBhdCB6ZXJvLXBvaW50IHRvby5cbiAgdmFyIG1pblRpbWUgPSBnZXRTdGVwTWluVGltZShjdXJyZW50T3JOZXh0U3RlcCwge1xuICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLFxuICAgIG5vdzogbm93LFxuICAgIGZ1dHVyZTogZnV0dXJlLFxuICAgIHJvdW5kOiByb3VuZCxcbiAgICBwcmV2U3RlcDogcHJldlN0ZXBcbiAgfSk7XG5cbiAgaWYgKG1pblRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChmdXR1cmUpIHtcbiAgICAvLyBUaGUgc3RlcCBjaGFuZ2VzIHRvIHRoZSBwcmV2aW91cyBzdGVwXG4gICAgLy8gYXMgc29vbiBhcyBgdGltZXN0YW1wIC0gbm93YCBiZWNvbWVzXG4gICAgLy8gbGVzcyB0aGFuIHRoZSBgbWluVGltZWAgb2YgdGhlIGN1cnJlbnQgc3RlcDpcbiAgICAvLyBgdGltZXN0YW1wIC0gbm93ID09PSBtaW5UaW1lIC0gMWBcbiAgICAvLyA9PiBgbm93ID09PSB0aW1lc3RhbXAgLSBtaW5UaW1lICsgMWAuXG4gICAgcmV0dXJuIHRpbWVzdGFtcCAtIG1pblRpbWUgKiAxMDAwICsgMTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgc3RlcCBjaGFuZ2VzIHRvIHRoZSBuZXh0IHN0ZXBcbiAgICAvLyBhcyBzb29uIGFzIGBub3cgLSB0aW1lc3RhbXBgIGJlY29tZXNcbiAgICAvLyBlcXVhbCB0byBgbWluVGltZWAgb2YgdGhlIG5leHQgc3RlcDpcbiAgICAvLyBgbm93IC0gdGltZXN0YW1wID09PSBtaW5UaW1lYFxuICAgIC8vID0+IGBub3cgPT09IHRpbWVzdGFtcCArIG1pblRpbWVgLlxuICAgIC8vIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2Ugd2hlbiBkb3VibGUtdXBkYXRlIGNvdWxkIGJlIHNraXBwZWQuXG4gICAgaWYgKG1pblRpbWUgPT09IDAgJiYgdGltZXN0YW1wID09PSBub3cpIHtcbiAgICAgIHJldHVybiBJTkZJTklUWTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGltZXN0YW1wICsgbWluVGltZSAqIDEwMDA7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaW1lVG9TdGVwQ2hhbmdlKHN0ZXAsIHRpbWVzdGFtcCwgX3JlZjMpIHtcbiAgdmFyIG5vdyA9IF9yZWYzLm5vdyxcbiAgICAgIGZ1dHVyZSA9IF9yZWYzLmZ1dHVyZSxcbiAgICAgIHJvdW5kID0gX3JlZjMucm91bmQsXG4gICAgICBwcmV2U3RlcCA9IF9yZWYzLnByZXZTdGVwO1xuXG4gIGlmIChzdGVwKSB7XG4gICAgdmFyIHN0ZXBDaGFuZ2VzQXQgPSBnZXRTdGVwQ2hhbmdlc0F0KHN0ZXAsIHRpbWVzdGFtcCwge1xuICAgICAgbm93OiBub3csXG4gICAgICBmdXR1cmU6IGZ1dHVyZSxcbiAgICAgIHJvdW5kOiByb3VuZCxcbiAgICAgIHByZXZTdGVwOiBwcmV2U3RlcFxuICAgIH0pO1xuXG4gICAgaWYgKHN0ZXBDaGFuZ2VzQXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBzdGVwQ2hhbmdlc0F0IC0gbm93O1xuICB9IGVsc2Uge1xuICAgIGlmIChmdXR1cmUpIHtcbiAgICAgIC8vIE5vIHN0ZXAuXG4gICAgICAvLyBVcGRhdGUgcmlnaHQgYWZ0ZXIgemVybyBwb2ludCwgd2hlbiBpdCBjaGFuZ2VzIGZyb20gXCJmdXR1cmVcIiB0byBcInBhc3RcIi5cbiAgICAgIHJldHVybiB0aW1lc3RhbXAgLSBub3cgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgbGFzdCBzdGVwIGRvZXNuJ3QgZXZlciBjaGFuZ2Ugd2hlbiBgZGF0ZWAgaXMgaW4gdGhlIHBhc3QuXG4gICAgICByZXR1cm4gSU5GSU5JVFk7XG4gICAgfVxuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRUaW1lVG9OZXh0VXBkYXRlLmpzLm1hcCIsIi8vIEZvciBhbGwgbG9jYWxlcyBhZGRlZFxuLy8gdGhlaXIgcmVsYXRpdmUgdGltZSBmb3JtYXR0ZXIgbWVzc2FnZXMgd2lsbCBiZSBzdG9yZWQgaGVyZS5cbnZhciBsb2NhbGVzRGF0YSA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2FsZURhdGEobG9jYWxlKSB7XG4gIHJldHVybiBsb2NhbGVzRGF0YVtsb2NhbGVdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFkZExvY2FsZURhdGEobG9jYWxlRGF0YSkge1xuICBpZiAoIWxvY2FsZURhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tqYXZhc2NyaXB0LXRpbWUtYWdvXSBObyBsb2NhbGUgZGF0YSBwYXNzZWQuJyk7XG4gIH0gLy8gVGhpcyBsb2NhbGUgZGF0YSBpcyBzdG9yZWQgaW4gYSBnbG9iYWwgdmFyaWFibGVcbiAgLy8gYW5kIGxhdGVyIHVzZWQgd2hlbiBjYWxsaW5nIGAuZm9ybWF0KHRpbWUpYC5cblxuXG4gIGxvY2FsZXNEYXRhW2xvY2FsZURhdGEubG9jYWxlXSA9IGxvY2FsZURhdGE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Mb2NhbGVEYXRhU3RvcmUuanMubWFwIiwiLy8ganVzdCBub3dcbi8vIDEgc2Vjb25kIGFnb1xuLy8gMiBzZWNvbmRzIGFnb1xuLy8g4oCmXG4vLyA1OSBzZWNvbmRzIGFnb1xuLy8gMSBtaW51dGUgYWdvXG4vLyAyIG1pbnV0ZXMgYWdvXG4vLyDigKZcbi8vIDU5IG1pbnV0ZXMgYWdvXG4vLyAxIGhvdXIgYWdvXG4vLyAyIGhvdXJzIGFnb1xuLy8g4oCmXG4vLyAyNCBob3VycyBhZ29cbi8vIDEgZGF5IGFnb1xuLy8gMiBkYXlzIGFnb1xuLy8g4oCmXG4vLyA2IGRheXMgYWdvXG4vLyAxIHdlZWsgYWdvXG4vLyAyIHdlZWtzIGFnb1xuLy8g4oCmXG4vLyAzIHdlZWtzIGFnb1xuLy8gMSBtb250aCBhZ29cbi8vIDIgbW9udGhzIGFnb1xuLy8g4oCmXG4vLyAxMSBtb250aHMgYWdvXG4vLyAxIHllYXIgYWdvXG4vLyAyIHllYXJzIGFnb1xuLy8g4oCmXG5leHBvcnQgZGVmYXVsdCBbe1xuICBmb3JtYXRBczogJ25vdydcbn0sIHtcbiAgZm9ybWF0QXM6ICdzZWNvbmQnXG59LCB7XG4gIGZvcm1hdEFzOiAnbWludXRlJ1xufSwge1xuICBmb3JtYXRBczogJ2hvdXInXG59LCB7XG4gIGZvcm1hdEFzOiAnZGF5J1xufSwge1xuICBmb3JtYXRBczogJ3dlZWsnXG59LCB7XG4gIGZvcm1hdEFzOiAnbW9udGgnXG59LCB7XG4gIGZvcm1hdEFzOiAneWVhcidcbn1dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91bmQuanMubWFwIiwiaW1wb3J0IHJvdW5kIGZyb20gJy4uL3N0ZXBzL3JvdW5kLmpzJzsgLy8ganVzdCBub3dcbi8vIDEgc2Vjb25kIGFnb1xuLy8gMiBzZWNvbmRzIGFnb1xuLy8g4oCmXG4vLyA1OSBzZWNvbmRzIGFnb1xuLy8gMSBtaW51dGUgYWdvXG4vLyAyIG1pbnV0ZXMgYWdvXG4vLyDigKZcbi8vIDU5IG1pbnV0ZXMgYWdvXG4vLyAxIG1pbnV0ZSBhZ29cbi8vIDIgbWludXRlcyBhZ29cbi8vIOKAplxuLy8gNTkgbWludXRlcyBhZ29cbi8vIDEgaG91ciBhZ29cbi8vIDIgaG91cnMgYWdvXG4vLyDigKZcbi8vIDI0IGhvdXJzIGFnb1xuLy8gMSBkYXkgYWdvXG4vLyAyIGRheXMgYWdvXG4vLyDigKZcbi8vIDYgZGF5cyBhZ29cbi8vIDEgd2VlayBhZ29cbi8vIDIgd2Vla3MgYWdvXG4vLyAzIHdlZWtzIGFnb1xuLy8gNCB3ZWVrcyBhZ29cbi8vIDEgbW9udGggYWdvXG4vLyAyIG1vbnRocyBhZ29cbi8vIOKAplxuLy8gMTEgbW9udGhzIGFnb1xuLy8gMSB5ZWFyIGFnb1xuLy8gMiB5ZWFycyBhZ29cbi8vIOKAplxuLy9cblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdGVwczogcm91bmQsXG4gIGxhYmVsczogJ2xvbmcnXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91bmQuanMubWFwIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHJvdW5kIGZyb20gJy4vcm91bmQuanMnOyAvLyBqdXN0IG5vd1xuLy8gMSBtaW51dGUgYWdvXG4vLyAyIG1pbnV0ZXMgYWdvXG4vLyDigKZcbi8vIDU5IG1pbnV0ZXMgYWdvXG4vLyAxIG1pbnV0ZSBhZ29cbi8vIDIgbWludXRlcyBhZ29cbi8vIOKAplxuLy8gNTkgbWludXRlcyBhZ29cbi8vIDEgaG91ciBhZ29cbi8vIDIgaG91cnMgYWdvXG4vLyDigKZcbi8vIDI0IGhvdXJzIGFnb1xuLy8gMSBkYXkgYWdvXG4vLyAyIGRheXMgYWdvXG4vLyDigKZcbi8vIDYgZGF5cyBhZ29cbi8vIDEgd2VlayBhZ29cbi8vIDIgd2Vla3MgYWdvXG4vLyAzIHdlZWtzIGFnb1xuLy8gNCB3ZWVrcyBhZ29cbi8vIDEgbW9udGggYWdvXG4vLyAyIG1vbnRocyBhZ29cbi8vIOKAplxuLy8gMTEgbW9udGhzIGFnb1xuLy8gMSB5ZWFyIGFnb1xuLy8gMiB5ZWFycyBhZ29cbi8vIOKAplxuLy9cblxuZXhwb3J0IGRlZmF1bHQgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCByb3VuZCksIHt9LCB7XG4gIC8vIFNraXAgXCJzZWNvbmRzXCIuXG4gIHN0ZXBzOiByb3VuZC5zdGVwcy5maWx0ZXIoZnVuY3Rpb24gKHN0ZXApIHtcbiAgICByZXR1cm4gc3RlcC5mb3JtYXRBcyAhPT0gJ3NlY29uZCc7XG4gIH0pXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdW5kTWludXRlLmpzLm1hcCIsImltcG9ydCB7IG1pbnV0ZSwgaG91ciwgZGF5LCB3ZWVrLCBtb250aCwgeWVhciB9IGZyb20gJy4vdW5pdHMuanMnOyAvLyBcImZhY3RvclwiIGlzIGEgbGVnYWN5IHByb3BlcnR5LlxuLy8gRGV2ZWxvcGVycyBzaG91bGRuJ3QgbmVlZCB0byB1c2UgaXQgaW4gdGhlaXIgY3VzdG9tIHN0ZXBzLlxuLy8gXCJ0aHJlc2hvbGRcIiBpcyBhIGxlZ2FjeSBuYW1lIG9mIFwibWluXCIuXG4vLyBEZXZlbG9wZXJzIHNob3VsZCB1c2UgXCJtaW5cIiBwcm9wZXJ0eSBuYW1lIGluc3RlYWQgb2YgXCJ0aHJlc2hvbGRcIi5cbi8vIFwidGhyZXNob2xkX2Zvcl9pZE9yVW5pdDogdmFsdWVcIiBpcyBhIGxlZ2FjeSB3YXkgb2Ygc3BlY2lmeWluZyBcIm1pbjogeyBpZDogdmFsdWUgfVwiLlxuLy8gRGV2ZWxvcGVycyBzaG91bGQgdXNlIFwibWluXCIgcHJvcGVydHkgaW5zdGVhZCBvZiBcInRocmVzaG9sZFwiLlxuLy8ganVzdCBub3dcbi8vIDEgbWludXRlIGFnb1xuLy8gMiBtaW51dGVzIGFnb1xuLy8gNSBtaW51dGVzIGFnb1xuLy8gMTAgbWludXRlcyBhZ29cbi8vIDE1IG1pbnV0ZXMgYWdvXG4vLyAyMCBtaW51dGVzIGFnb1xuLy8g4oCmXG4vLyA1MCBtaW51dGVzIGFnb1xuLy8gYW4gaG91ciBhZ29cbi8vIDIgaG91cnMgYWdvXG4vLyDigKZcbi8vIDIwIGhvdXJzIGFnb1xuLy8gYSBkYXkgYWdvXG4vLyAyIGRheXMgYWdvXG4vLyA1IGRheXMgYWdvXG4vLyBhIHdlZWsgYWdvXG4vLyAyIHdlZWtzIGFnb1xuLy8gMyB3ZWVrcyBhZ29cbi8vIGEgbW9udGggYWdvXG4vLyAyIG1vbnRocyBhZ29cbi8vIDQgbW9udGhzIGFnb1xuLy8gYSB5ZWFyIGFnb1xuLy8gMiB5ZWFycyBhZ29cbi8vIOKAplxuXG5leHBvcnQgZGVmYXVsdCBbe1xuICAvLyBUaGlzIHN0ZXAgcmV0dXJucyB0aGUgYW1vdW50IG9mIHNlY29uZHNcbiAgLy8gYnkgZGl2aWRpbmcgdGhlIGFtb3VudCBvZiBzZWNvbmRzIGJ5IGAxYC5cbiAgZmFjdG9yOiAxLFxuICAvLyBcIm5vd1wiIGxhYmVscyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyB0aGUgb3V0cHV0LlxuICB1bml0OiAnbm93J1xufSwge1xuICAvLyBXaGVuIHRoZSBsYW5ndWFnZSBkb2Vzbid0IHN1cHBvcnQgYG5vd2AgdW5pdCxcbiAgLy8gdGhlIGZpcnN0IHN0ZXAgaXMgaWdub3JlZCwgYW5kIGl0IHVzZXMgdGhpcyBgc2Vjb25kYCB1bml0LlxuICB0aHJlc2hvbGQ6IDEsXG4gIC8vIGB0aHJlc2hvbGRfZm9yX25vd2Agc2hvdWxkIGJlIHRoZSBzYW1lIGFzIGB0aHJlc2hvbGRgIG9uIG1pbnV0ZXMuXG4gIHRocmVzaG9sZF9mb3Jfbm93OiA0NS41LFxuICAvLyBUaGlzIHN0ZXAgcmV0dXJucyB0aGUgYW1vdW50IG9mIHNlY29uZHNcbiAgLy8gYnkgZGl2aWRpbmcgdGhlIGFtb3VudCBvZiBzZWNvbmRzIGJ5IGAxYC5cbiAgZmFjdG9yOiAxLFxuICAvLyBcInNlY29uZFwiIGxhYmVscyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyB0aGUgb3V0cHV0LlxuICB1bml0OiAnc2Vjb25kJ1xufSwge1xuICAvLyBgdGhyZXNob2xkYCBzaG91bGQgYmUgdGhlIHNhbWUgYXMgYHRocmVzaG9sZF9mb3Jfbm93YCBvbiBzZWNvbmRzLlxuICB0aHJlc2hvbGQ6IDQ1LjUsXG4gIC8vIFJldHVybiB0aGUgYW1vdW50IG9mIG1pbnV0ZXMgYnkgZGl2aWRpbmcgdGhlIGFtb3VudFxuICAvLyBvZiBzZWNvbmRzIGJ5IHRoZSBhbW91bnQgb2Ygc2Vjb25kcyBpbiBhIG1pbnV0ZS5cbiAgZmFjdG9yOiBtaW51dGUsXG4gIC8vIFwibWludXRlXCIgbGFiZWxzIGFyZSB1c2VkIGZvciBmb3JtYXR0aW5nIHRoZSBvdXRwdXQuXG4gIHVuaXQ6ICdtaW51dGUnXG59LCB7XG4gIC8vIFRoaXMgc3RlcCBpcyBlZmZlY3RpdmUgc3RhcnRpbmcgZnJvbSAyLjUgbWludXRlcy5cbiAgdGhyZXNob2xkOiAyLjUgKiBtaW51dGUsXG4gIC8vIEFsbG93IG9ubHkgNS1taW51dGUgaW5jcmVtZW50cyBvZiBtaW51dGVzIHN0YXJ0aW5nIGZyb20gMi41IG1pbnV0ZXMuXG4gIC8vIGBncmFudWxhcml0eWAg4oCUIChhZHZhbmNlZCkgVGltZSBpbnRlcnZhbCB2YWx1ZSBcImdyYW51bGFyaXR5XCIuXG4gIC8vIEZvciBleGFtcGxlLCBpdCBjb3VsZCBiZSBzZXQgdG8gYDVgIGZvciBtaW51dGVzIHRvIGFsbG93IG9ubHkgNS1taW51dGUgaW5jcmVtZW50c1xuICAvLyB3aGVuIGZvcm1hdHRpbmcgdGltZSBpbnRlcnZhbHM6IGAwIG1pbnV0ZXNgLCBgNSBtaW51dGVzYCwgYDEwIG1pbnV0ZXNgLCBldGMuXG4gIC8vIFBlcmhhcHMgdGhpcyBmZWF0dXJlIHdpbGwgYmUgcmVtb3ZlZCBiZWNhdXNlIHRoZXJlIHNlZW0gdG8gYmUgbm8gdXNlIGNhc2VzXG4gIC8vIG9mIGl0IGluIHRoZSByZWFsIHdvcmxkLlxuICBncmFudWxhcml0eTogNSxcbiAgLy8gUmV0dXJuIHRoZSBhbW91bnQgb2YgbWludXRlcyBieSBkaXZpZGluZyB0aGUgYW1vdW50XG4gIC8vIG9mIHNlY29uZHMgYnkgdGhlIGFtb3VudCBvZiBzZWNvbmRzIGluIGEgbWludXRlLlxuICBmYWN0b3I6IG1pbnV0ZSxcbiAgLy8gXCJtaW51dGVcIiBsYWJlbHMgYXJlIHVzZWQgZm9yIGZvcm1hdHRpbmcgdGhlIG91dHB1dC5cbiAgdW5pdDogJ21pbnV0ZSdcbn0sIHtcbiAgLy8gVGhpcyBzdGVwIGlzIGVmZmVjdGl2ZSBzdGFydGluZyBmcm9tIDIyLjUgbWludXRlcy5cbiAgdGhyZXNob2xkOiAyMi41ICogbWludXRlLFxuICAvLyBSZXR1cm4gdGhlIGFtb3VudCBvZiBtaW51dGVzIGJ5IGRpdmlkaW5nIHRoZSBhbW91bnRcbiAgLy8gb2Ygc2Vjb25kcyBieSB0aGUgYW1vdW50IG9mIHNlY29uZHMgaW4gIGhhbGYtYW4taG91ci5cbiAgZmFjdG9yOiAwLjUgKiBob3VyLFxuICAvLyBcImhhbGYtaG91clwiIGxhYmVscyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyB0aGUgb3V0cHV0LlxuICAvLyAoaWYgYXZhaWxhYmxlLCB3aGljaCBpcyBubyBsb25nZXIgdGhlIGNhc2UpXG4gIHVuaXQ6ICdoYWxmLWhvdXInXG59LCB7XG4gIC8vIFRoaXMgc3RlcCBpcyBlZmZlY3RpdmUgc3RhcnRpbmcgZnJvbSA0Mi41IG1pbnV0ZXMuXG4gIHRocmVzaG9sZDogNDIuNSAqIG1pbnV0ZSxcbiAgdGhyZXNob2xkX2Zvcl9taW51dGU6IDUyLjUgKiBtaW51dGUsXG4gIC8vIFJldHVybiB0aGUgYW1vdW50IG9mIG1pbnV0ZXMgYnkgZGl2aWRpbmcgdGhlIGFtb3VudFxuICAvLyBvZiBzZWNvbmRzIGJ5IHRoZSBhbW91bnQgb2Ygc2Vjb25kcyBpbiBhbiBob3VyLlxuICBmYWN0b3I6IGhvdXIsXG4gIC8vIFwiaG91clwiIGxhYmVscyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyB0aGUgb3V0cHV0LlxuICB1bml0OiAnaG91cidcbn0sIHtcbiAgLy8gVGhpcyBzdGVwIGlzIGVmZmVjdGl2ZSBzdGFydGluZyBmcm9tIDIwLjUgaG91cnMuXG4gIHRocmVzaG9sZDogMjAuNSAvIDI0ICogZGF5LFxuICAvLyBSZXR1cm4gdGhlIGFtb3VudCBvZiBtaW51dGVzIGJ5IGRpdmlkaW5nIHRoZSBhbW91bnRcbiAgLy8gb2Ygc2Vjb25kcyBieSB0aGUgYW1vdW50IG9mIHNlY29uZHMgaW4gYSBkYXkuXG4gIGZhY3RvcjogZGF5LFxuICAvLyBcImRheVwiIGxhYmVscyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyB0aGUgb3V0cHV0LlxuICB1bml0OiAnZGF5J1xufSwge1xuICAvLyBUaGlzIHN0ZXAgaXMgZWZmZWN0aXZlIHN0YXJ0aW5nIGZyb20gNS41IGRheXMuXG4gIHRocmVzaG9sZDogNS41ICogZGF5LFxuICAvLyBSZXR1cm4gdGhlIGFtb3VudCBvZiBtaW51dGVzIGJ5IGRpdmlkaW5nIHRoZSBhbW91bnRcbiAgLy8gb2Ygc2Vjb25kcyBieSB0aGUgYW1vdW50IG9mIHNlY29uZHMgaW4gYSB3ZWVrLlxuICBmYWN0b3I6IHdlZWssXG4gIC8vIFwid2Vla1wiIGxhYmVscyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyB0aGUgb3V0cHV0LlxuICB1bml0OiAnd2Vlaydcbn0sIHtcbiAgLy8gVGhpcyBzdGVwIGlzIGVmZmVjdGl2ZSBzdGFydGluZyBmcm9tIDMuNSB3ZWVrcy5cbiAgdGhyZXNob2xkOiAzLjUgKiB3ZWVrLFxuICAvLyBSZXR1cm4gdGhlIGFtb3VudCBvZiBtaW51dGVzIGJ5IGRpdmlkaW5nIHRoZSBhbW91bnRcbiAgLy8gb2Ygc2Vjb25kcyBieSB0aGUgYW1vdW50IG9mIHNlY29uZHMgaW4gYSBtb250aC5cbiAgZmFjdG9yOiBtb250aCxcbiAgLy8gXCJtb250aFwiIGxhYmVscyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyB0aGUgb3V0cHV0LlxuICB1bml0OiAnbW9udGgnXG59LCB7XG4gIC8vIFRoaXMgc3RlcCBpcyBlZmZlY3RpdmUgc3RhcnRpbmcgZnJvbSAxMC41IG1vbnRocy5cbiAgdGhyZXNob2xkOiAxMC41ICogbW9udGgsXG4gIC8vIFJldHVybiB0aGUgYW1vdW50IG9mIG1pbnV0ZXMgYnkgZGl2aWRpbmcgdGhlIGFtb3VudFxuICAvLyBvZiBzZWNvbmRzIGJ5IHRoZSBhbW91bnQgb2Ygc2Vjb25kcyBpbiBhIHllYXIuXG4gIGZhY3RvcjogeWVhcixcbiAgLy8gXCJ5ZWFyXCIgbGFiZWxzIGFyZSB1c2VkIGZvciBmb3JtYXR0aW5nIHRoZSBvdXRwdXQuXG4gIHVuaXQ6ICd5ZWFyJ1xufV07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHByb3hpbWF0ZS5qcy5tYXAiLCJpbXBvcnQgYXBwcm94aW1hdGUgZnJvbSAnLi4vc3RlcHMvYXBwcm94aW1hdGUuanMnOyAvLyBcImdyYWRhdGlvblwiIGlzIGEgbGVnYWN5IG5hbWUgZm9yIFwic3RlcHNcIi5cbi8vIEl0J3MgaGVyZSBqdXN0IGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eS5cbi8vIFVzZSBcInN0ZXBzXCIgbmFtZSBpbnN0ZWFkLlxuLy8gXCJmbGF2b3VyXCIgaXMgYSBsZWdhY3kgbmFtZSBmb3IgXCJsYWJlbHNcIi5cbi8vIEl0J3MgaGVyZSBqdXN0IGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eS5cbi8vIFVzZSBcImxhYmVsc1wiIG5hbWUgaW5zdGVhZC5cbi8vIFwidW5pdHNcIiBpcyBhIGxlZ2FjeSBwcm9wZXJ0eS5cbi8vIEl0J3MgaGVyZSBqdXN0IGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eS5cbi8vIERldmVsb3BlcnMgc2hvdWxkbid0IG5lZWQgdG8gdXNlIGl0IGluIHRoZWlyIGN1c3RvbSBzdHlsZXMuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ3JhZGF0aW9uOiBhcHByb3hpbWF0ZSxcbiAgZmxhdm91cjogJ2xvbmcnLFxuICB1bml0czogWydub3cnLCAnbWludXRlJywgJ2hvdXInLCAnZGF5JywgJ3dlZWsnLCAnbW9udGgnLCAneWVhciddXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwcm94aW1hdGUuanMubWFwIiwiaW1wb3J0IGFwcHJveGltYXRlIGZyb20gJy4uL3N0ZXBzL2FwcHJveGltYXRlLmpzJzsgLy8gXCJncmFkYXRpb25cIiBpcyBhIGxlZ2FjeSBuYW1lIGZvciBcInN0ZXBzXCIuXG4vLyBJdCdzIGhlcmUganVzdCBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHkuXG4vLyBVc2UgXCJzdGVwc1wiIG5hbWUgaW5zdGVhZC5cbi8vIFwiZmxhdm91clwiIGlzIGEgbGVnYWN5IG5hbWUgZm9yIFwibGFiZWxzXCIuXG4vLyBJdCdzIGhlcmUganVzdCBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHkuXG4vLyBVc2UgXCJsYWJlbHNcIiBuYW1lIGluc3RlYWQuXG4vLyBcInVuaXRzXCIgaXMgYSBsZWdhY3kgcHJvcGVydHkuXG4vLyBJdCdzIGhlcmUganVzdCBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHkuXG4vLyBEZXZlbG9wZXJzIHNob3VsZG4ndCBuZWVkIHRvIHVzZSBpdCBpbiB0aGVpciBjdXN0b20gc3R5bGVzLlxuLy8gU2ltaWxhciB0byB0aGUgZGVmYXVsdCBzdHlsZSBidXQgd2l0aCBcImFnb1wiIG9taXR0ZWQuXG4vL1xuLy8ganVzdCBub3dcbi8vIDUgbWludXRlc1xuLy8gMTAgbWludXRlc1xuLy8gMTUgbWludXRlc1xuLy8gMjAgbWludXRlc1xuLy8gYW4gaG91clxuLy8gMiBob3Vyc1xuLy8g4oCmXG4vLyAyMCBob3Vyc1xuLy8gMSBkYXlcbi8vIDIgZGF5c1xuLy8gYSB3ZWVrXG4vLyAyIHdlZWtzXG4vLyAzIHdlZWtzXG4vLyBhIG1vbnRoXG4vLyAyIG1vbnRoc1xuLy8gMyBtb250aHNcbi8vIDQgbW9udGhzXG4vLyBhIHllYXJcbi8vIDIgeWVhcnNcbi8vXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ3JhZGF0aW9uOiBhcHByb3hpbWF0ZSxcbiAgZmxhdm91cjogJ2xvbmctdGltZScsXG4gIHVuaXRzOiBbJ25vdycsICdtaW51dGUnLCAnaG91cicsICdkYXknLCAnd2VlaycsICdtb250aCcsICd5ZWFyJ11cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHByb3hpbWF0ZVRpbWUuanMubWFwIiwiLy8gTG9va3MgbGlrZSB0aGlzIG9uZSdzIGRlcHJlY2F0ZWQuXG4vLyAvKipcbi8vICAqIFJldHVybnMgYSBzdGVwIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHVuaXQuXG4vLyAgKiBAcGFyYW0gIHtPYmplY3RbXX0gc3RlcHNcbi8vICAqIEBwYXJhbSAge3N0cmluZ30gdW5pdFxuLy8gICogQHJldHVybiB7P09iamVjdH1cbi8vICAqL1xuLy8gZXhwb3J0IGZ1bmN0aW9uIGdldFN0ZXBGb3JVbml0KHN0ZXBzLCB1bml0KSB7XG4vLyBcdGZvciAoY29uc3Qgc3RlcCBvZiBzdGVwcykge1xuLy8gXHRcdGlmIChzdGVwLnVuaXQgPT09IHVuaXQpIHtcbi8vIFx0XHRcdHJldHVybiBzdGVwXG4vLyBcdFx0fVxuLy8gXHR9XG4vLyB9XG4vLyBMb29rcyBsaWtlIHRoaXMgb25lIHdvbid0IGJlIHVzZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cblxuLyoqXHJcbiAqIENvbnZlcnRzIHZhbHVlIHRvIGEgYERhdGVgXHJcbiAqIEBwYXJhbSB7KG51bWJlcnxEYXRlKX0gdmFsdWVcclxuICogQHJldHVybiB7RGF0ZX1cclxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gdmFsdWUgOiBuZXcgRGF0ZSh2YWx1ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCIsImltcG9ydCB7IGRheSwgZ2V0RGF0ZSB9IGZyb20gJy4uL3N0ZXBzL2luZGV4LmpzJztcbmltcG9ydCB7IGludGxEYXRlVGltZUZvcm1hdFN1cHBvcnRlZCB9IGZyb20gJy4uL2xvY2FsZS5qcyc7IC8vIEZvciBjb21wYXRpYmlsaXR5IHdpdGggdGhlIG9sZCB2ZXJzaW9ucyBvZiB0aGlzIGxpYnJhcnkuXG5cbmltcG9ydCByZW5hbWVMZWdhY3lQcm9wZXJ0aWVzIGZyb20gJy4vcmVuYW1lTGVnYWN5UHJvcGVydGllcy5qcyc7IC8vIFR3aXR0ZXItc3R5bGUgcmVsYXRpdmUgZGF0ZS90aW1lIGZvcm1hdHRpbmcuXG4vLyAoXCIxbVwiLCBcIjJoXCIsIFwiTWFyIDNcIiwgXCJBcHIgNCwgMjAxMlwiKS5cbi8vXG4vLyBTZWNvbmRzLCBtaW51dGVzIG9yIGhvdXJzIGFyZSBzaG93biBmb3Igc2hvcnRlciBpbnRlcnZhbHMsXG4vLyBhbmQgbG9uZ2VyIGludGVydmFscyBhcmUgZm9ybWF0dGVkIHVzaW5nIGZ1bGwgZGF0ZSBmb3JtYXQuXG5cbnZhciBzdGVwcyA9IFt7XG4gIGZvcm1hdEFzOiAnc2Vjb25kJ1xufSwge1xuICBmb3JtYXRBczogJ21pbnV0ZSdcbn0sIHtcbiAgZm9ybWF0QXM6ICdob3VyJ1xufV07IC8vIEEgY2FjaGUgZm9yIGBJbnRsLkRhdGVUaW1lRm9ybWF0YCBmb3JtYXR0ZXJzXG4vLyBmb3IgdmFyaW91cyBsb2NhbGVzIChpcyBhIGdsb2JhbCB2YXJpYWJsZSkuXG5cbnZhciBmb3JtYXR0ZXJzID0ge307IC8vIFN0YXJ0aW5nIGZyb20gZGF5IGludGVydmFscywgb3V0cHV0IG1vbnRoIGFuZCBkYXkuXG5cbnZhciBtb250aEFuZERheSA9IHtcbiAgbWluVGltZTogZnVuY3Rpb24gbWluVGltZSh0aW1lc3RhbXAsIF9yZWYpIHtcbiAgICB2YXIgZnV0dXJlID0gX3JlZi5mdXR1cmUsXG4gICAgICAgIGdldE1pblRpbWVGb3JVbml0ID0gX3JlZi5nZXRNaW5UaW1lRm9yVW5pdDtcbiAgICAvLyBSZXR1cm5zIGAyMy41ICogNjAgKiA2MGAgd2hlbiBgcm91bmRgIGlzIFwicm91bmRcIixcbiAgICAvLyBhbmQgYDI0ICogNjAgKiA2MGAgd2hlbiBgcm91bmRgIGlzIFwiZmxvb3JcIi5cbiAgICByZXR1cm4gZ2V0TWluVGltZUZvclVuaXQoJ2RheScpO1xuICB9LFxuICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgbG9jYWxlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoIWZvcm1hdHRlcnNbbG9jYWxlXSkge1xuICAgICAgZm9ybWF0dGVyc1tsb2NhbGVdID0ge307XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5cblxuICAgIGlmICghZm9ybWF0dGVyc1tsb2NhbGVdLmRheU1vbnRoKSB7XG4gICAgICAvLyBcIkFwciAxMVwiIChNTU1kKVxuICAgICAgZm9ybWF0dGVyc1tsb2NhbGVdLmRheU1vbnRoID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7XG4gICAgICAgIG1vbnRoOiAnc2hvcnQnLFxuICAgICAgICBkYXk6ICdudW1lcmljJ1xuICAgICAgfSk7XG4gICAgfSAvLyBPdXRwdXQgbW9udGggYW5kIGRheS5cblxuXG4gICAgcmV0dXJuIGZvcm1hdHRlcnNbbG9jYWxlXS5kYXlNb250aC5mb3JtYXQoZ2V0RGF0ZSh2YWx1ZSkpO1xuICB9XG59OyAvLyBJZiB0aGUgYGRhdGVgIGhhcHBlbmVkL2hhcHBlbnMgb3V0c2lkZSBvZiBjdXJyZW50IHllYXIsXG4vLyB0aGVuIG91dHB1dCBkYXksIG1vbnRoIGFuZCB5ZWFyLlxuLy8gVGhlIGludGVydmFsIHNob3VsZCBiZSBzdWNoIHRoYXQgdGhlIGBkYXRlYCBsaWVzIG91dHNpZGUgb2YgdGhlIGN1cnJlbnQgeWVhci5cblxudmFyIHllYXJNb250aEFuZERheSA9IHtcbiAgbWluVGltZTogZnVuY3Rpb24gbWluVGltZSh0aW1lc3RhbXAsIF9yZWYyKSB7XG4gICAgdmFyIGZ1dHVyZSA9IF9yZWYyLmZ1dHVyZTtcblxuICAgIGlmIChmdXR1cmUpIHtcbiAgICAgIC8vIEphbnVhcnkgMSwgMDA6MDAsIG9mIHRoZSBgZGF0ZWAncyB5ZWFyIGlzIHJpZ2h0IGFmdGVyXG4gICAgICAvLyB0aGUgbWF4aW11bSBgbm93YCBmb3IgZm9ybWF0dGluZyBhIGZ1dHVyZSBkYXRlOlxuICAgICAgLy8gV2hlbiBgbm93YCBpcyBiZWZvcmUgdGhhdCBkYXRlLCB0aGUgYGRhdGVgIGlzIGZvcm1hdHRlZCBhcyBcImRheS9tb250aC95ZWFyXCIgKHRoaXMgc3RlcCksXG4gICAgICAvLyBXaGVuIGBub3dgIGlzIGVxdWFsIHRvIG9yIGFmdGVyIHRoYXQgZGF0ZSwgdGhlIGBkYXRlYCBpcyBmb3JtYXR0ZWQgYXMgXCJkYXkvbW9udGhcIiAoYW5vdGhlciBzdGVwKS5cbiAgICAgIC8vIEFmdGVyIHRoYXQsIGl0J3MgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGFuZCBhZnRlciB0aGF0IGl0J3Mgbm8gbG9uZ2VyIGBmdXR1cmVgLlxuICAgICAgLy8gVGhlIGRhdGUgaXMgcmlnaHQgYWZ0ZXIgdGhlIG1heGltdW0gYG5vd2AgZm9yIGZvcm1hdHRpbmcgYSBmdXR1cmUgZGF0ZSxcbiAgICAgIC8vIHNvIHN1YnRyYWN0IDEgbWlsbGlzZWNvbmQgZnJvbSBpdC5cbiAgICAgIHZhciBtYXhGaXR0aW5nTm93ID0gbmV3IERhdGUobmV3IERhdGUodGltZXN0YW1wKS5nZXRGdWxsWWVhcigpLCAwKS5nZXRUaW1lKCkgLSAxOyAvLyBSZXR1cm4gYG1pblRpbWVgIChpbiBzZWNvbmRzKS5cblxuICAgICAgcmV0dXJuICh0aW1lc3RhbXAgLSBtYXhGaXR0aW5nTm93KSAvIDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEphbnVhcnkgMSwgMDA6MDAsIG9mIHRoZSB5ZWFyIGZvbGxvd2luZyB0aGUgYGRhdGVgJ3MgeWVhclxuICAgICAgLy8gaXMgdGhlIG1pbmltdW0gYG5vd2AgZm9yIGZvcm1hdHRpbmcgYSBwYXN0IGRhdGU6XG4gICAgICAvLyBXaGVuIGBub3dgIGlzIGJlZm9yZSB0aGF0IGRhdGUsIHRoZSBgZGF0ZWAgaXMgZm9ybWF0dGVkIGFzIFwiZGF5L21vbnRoXCIgKGFub3RoZXIgc3RlcCksXG4gICAgICAvLyBXaGVuIGBub3dgIGlzIGVxdWFsIHRvIG9yIGFmdGVyIHRoYXQgZGF0ZSwgdGhlIGBkYXRlYCBpcyBmb3JtYXR0ZWQgYXMgXCJkYXkvbW9udGgveWVhclwiICh0aGlzIHN0ZXApLlxuICAgICAgLy8gQWZ0ZXIgdGhhdCwgaXQncyBob3VycywgbWludXRlcywgc2Vjb25kcywgYW5kIGFmdGVyIHRoYXQgaXQncyBubyBsb25nZXIgYGZ1dHVyZWAuXG4gICAgICB2YXIgbWluRml0dGluZ05vdyA9IG5ldyBEYXRlKG5ldyBEYXRlKHRpbWVzdGFtcCkuZ2V0RnVsbFllYXIoKSArIDEsIDApLmdldFRpbWUoKTsgLy8gUmV0dXJuIGBtaW5UaW1lYCAoaW4gc2Vjb25kcykuXG5cbiAgICAgIHJldHVybiAobWluRml0dGluZ05vdyAtIHRpbWVzdGFtcCkgLyAxMDAwO1xuICAgIH1cbiAgfSxcbiAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIGxvY2FsZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghZm9ybWF0dGVyc1tsb2NhbGVdKSB7XG4gICAgICBmb3JtYXR0ZXJzW2xvY2FsZV0gPSB7fTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuXG4gICAgaWYgKCFmb3JtYXR0ZXJzW2xvY2FsZV0uZGF5TW9udGhZZWFyKSB7XG4gICAgICAvLyBcIkFwciAxMSwgMjAxN1wiICh5TU1NZClcbiAgICAgIGZvcm1hdHRlcnNbbG9jYWxlXS5kYXlNb250aFllYXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHtcbiAgICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgICAgZGF5OiAnbnVtZXJpYydcbiAgICAgIH0pO1xuICAgIH0gLy8gT3V0cHV0IGRheSwgbW9udGggYW5kIHllYXIuXG5cblxuICAgIHJldHVybiBmb3JtYXR0ZXJzW2xvY2FsZV0uZGF5TW9udGhZZWFyLmZvcm1hdChnZXREYXRlKHZhbHVlKSk7XG4gIH1cbn07IC8vIElmIGBJbnRsLkRhdGVUaW1lRm9ybWF0YCBpcyBzdXBwb3J0ZWQsXG4vLyB0aGVuIGxvbmdlciB0aW1lIGludGVydmFscyB3aWxsIGJlIGZvcm1hdHRlZCBhcyBkYXRlcy5cblxuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuaWYgKGludGxEYXRlVGltZUZvcm1hdFN1cHBvcnRlZCgpKSB7XG4gIHN0ZXBzLnB1c2gobW9udGhBbmREYXksIHllYXJNb250aEFuZERheSk7XG59IC8vIE90aGVyd2lzZSwgaWYgYEludGwuRGF0ZVRpbWVGb3JtYXRgIGlzIG5vdCBzdXBwb3J0ZWQsXG4vLyB3aGljaCBjb3VsZCBiZSB0aGUgY2FzZSB3aGVuIHVzaW5nIEludGVybmV0IEV4cGxvcmVyLFxuLy8gdGhlbiBzaW1wbHkgbWltaWNrIFwicm91bmRcIiBzdGVwcy5cbmVsc2Uge1xuICBzdGVwcy5wdXNoKHtcbiAgICBmb3JtYXRBczogJ2RheSdcbiAgfSwge1xuICAgIGZvcm1hdEFzOiAnd2VlaydcbiAgfSwge1xuICAgIGZvcm1hdEFzOiAnbW9udGgnXG4gIH0sIHtcbiAgICBmb3JtYXRBczogJ3llYXInXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN0ZXBzOiBzdGVwcyxcbiAgbGFiZWxzOiBbLy8gXCJtaW5pXCIgbGFiZWxzIGFyZSBvbmx5IGRlZmluZWQgZm9yIGEgZmV3IGxhbmd1YWdlcy5cbiAgJ21pbmknLCAvLyBcInNob3J0LXRpbWVcIiBsYWJlbHMgYXJlIG9ubHkgZGVmaW5lZCBmb3IgYSBmZXcgbGFuZ3VhZ2VzLlxuICAnc2hvcnQtdGltZScsIC8vIFwibmFycm93XCIgYW5kIFwic2hvcnRcIiBsYWJlbHMgYXJlIGRlZmluZWQgZm9yIGFsbCBsYW5ndWFnZXMuXG4gIC8vIFwibmFycm93XCIgbGFiZWxzIGNhbiBzb21ldGltZXMgYmUgd2VpcmQgKGxpa2UgXCIrNWQuXCIpLFxuICAvLyBidXQgXCJzaG9ydFwiIGxhYmVscyBoYXZlIHRoZSBcIiBhZ29cIiBwYXJ0LCBzbyBcIm5hcnJvd1wiIHNlZW1cbiAgLy8gbW9yZSBhcHByb3ByaWF0ZS5cbiAgLy8gXCJzaG9ydFwiIGxhYmVscyB3b3VsZCBoYXZlIGJlZW4gbW9yZSBhcHByb3ByaWF0ZSBpZiB0aGV5XG4gIC8vIGRpZG4ndCBoYXZlIHRoZSBcIiBhZ29cIiBwYXJ0LCBoZW5jZSB0aGUgXCJzaG9ydC10aW1lXCIgYWJvdmUuXG4gICduYXJyb3cnLCAvLyBTaW5jZSBcIm5hcnJvd1wiIGxhYmVscyBhcmUgYWx3YXlzIHByZXNlbnQsIFwic2hvcnRcIiBlbGVtZW50XG4gIC8vIG9mIHRoaXMgYXJyYXkgY2FuIGJlIHJlbW92ZWQuXG4gICdzaG9ydCddXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHdpdHRlci5qcy5tYXAiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgdHdpdHRlciBmcm9tICcuL3R3aXR0ZXIuanMnO1xuZXhwb3J0IGRlZmF1bHQgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0d2l0dGVyKSwge30sIHtcbiAgLy8gQWRkIFwibm93XCIuXG4gIHN0ZXBzOiBbe1xuICAgIGZvcm1hdEFzOiAnbm93J1xuICB9XS5jb25jYXQodHdpdHRlci5zdGVwcylcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHdpdHRlck5vdy5qcy5tYXAiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgdHdpdHRlciBmcm9tICcuL3R3aXR0ZXIuanMnO1xuZXhwb3J0IGRlZmF1bHQgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0d2l0dGVyKSwge30sIHtcbiAgLy8gU2tpcCBcInNlY29uZHNcIi5cbiAgc3RlcHM6IHR3aXR0ZXIuc3RlcHMuZmlsdGVyKGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgcmV0dXJuIHN0ZXAuZm9ybWF0QXMgIT09ICdzZWNvbmQnO1xuICB9KVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10d2l0dGVyTWludXRlLmpzLm1hcCIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB0d2l0dGVyTWludXRlIGZyb20gJy4vdHdpdHRlck1pbnV0ZS5qcyc7XG5leHBvcnQgZGVmYXVsdCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHR3aXR0ZXJNaW51dGUpLCB7fSwge1xuICAvLyBBZGQgXCJub3dcIi5cbiAgc3RlcHM6IFt7XG4gICAgZm9ybWF0QXM6ICdub3cnXG4gIH1dLmNvbmNhdCh0d2l0dGVyTWludXRlLnN0ZXBzKVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10d2l0dGVyTWludXRlTm93LmpzLm1hcCIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IG1pbnV0ZSB9IGZyb20gJy4uL3N0ZXBzL3VuaXRzLmpzJztcbmltcG9ydCB0d2l0dGVyIGZyb20gJy4vdHdpdHRlci5qcyc7XG5leHBvcnQgZGVmYXVsdCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHR3aXR0ZXIpLCB7fSwge1xuICAvLyBTa2lwIFwic2Vjb25kc1wiLlxuICBzdGVwczogdHdpdHRlci5zdGVwcy5maWx0ZXIoZnVuY3Rpb24gKHN0ZXApIHtcbiAgICByZXR1cm4gc3RlcC5mb3JtYXRBcyAhPT0gJ3NlY29uZCc7XG4gIH0pIC8vIFN0YXJ0IHNob3dpbmcgYDFtYCBmcm9tIHRoZSBmaXJzdCBtaW51dGUuXG4gIC5tYXAoZnVuY3Rpb24gKHN0ZXApIHtcbiAgICByZXR1cm4gc3RlcC5mb3JtYXRBcyA9PT0gJ21pbnV0ZScgPyBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0ZXApLCB7fSwge1xuICAgICAgbWluVGltZTogbWludXRlXG4gICAgfSkgOiBzdGVwO1xuICB9KVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10d2l0dGVyRmlyc3RNaW51dGUuanMubWFwIiwiZXhwb3J0IGRlZmF1bHQge1xuICBzdGVwczogW3tcbiAgICBmb3JtYXRBczogJ3NlY29uZCdcbiAgfSwge1xuICAgIGZvcm1hdEFzOiAnbWludXRlJ1xuICB9LCB7XG4gICAgZm9ybWF0QXM6ICdob3VyJ1xuICB9LCB7XG4gICAgZm9ybWF0QXM6ICdkYXknXG4gIH0sIHtcbiAgICBmb3JtYXRBczogJ21vbnRoJ1xuICB9LCB7XG4gICAgZm9ybWF0QXM6ICd5ZWFyJ1xuICB9XSxcbiAgbGFiZWxzOiBbLy8gXCJtaW5pXCIgbGFiZWxzIGFyZSBvbmx5IGRlZmluZWQgZm9yIGEgZmV3IGxhbmd1YWdlcy5cbiAgJ21pbmknLCAvLyBcInNob3J0LXRpbWVcIiBsYWJlbHMgYXJlIG9ubHkgZGVmaW5lZCBmb3IgYSBmZXcgbGFuZ3VhZ2VzLlxuICAnc2hvcnQtdGltZScsIC8vIFwibmFycm93XCIgYW5kIFwic2hvcnRcIiBsYWJlbHMgYXJlIGRlZmluZWQgZm9yIGFsbCBsYW5ndWFnZXMuXG4gIC8vIFwibmFycm93XCIgbGFiZWxzIGNhbiBzb21ldGltZXMgYmUgd2VpcmQgKGxpa2UgXCIrNWQuXCIpLFxuICAvLyBidXQgXCJzaG9ydFwiIGxhYmVscyBoYXZlIHRoZSBcIiBhZ29cIiBwYXJ0LCBzbyBcIm5hcnJvd1wiIHNlZW1cbiAgLy8gbW9yZSBhcHByb3ByaWF0ZS5cbiAgLy8gXCJzaG9ydFwiIGxhYmVscyB3b3VsZCBoYXZlIGJlZW4gbW9yZSBhcHByb3ByaWF0ZSBpZiB0aGV5XG4gIC8vIGRpZG4ndCBoYXZlIHRoZSBcIiBhZ29cIiBwYXJ0LCBoZW5jZSB0aGUgXCJzaG9ydC10aW1lXCIgYWJvdmUuXG4gICduYXJyb3cnLCAvLyBTaW5jZSBcIm5hcnJvd1wiIGxhYmVscyBhcmUgYWx3YXlzIHByZXNlbnQsIFwic2hvcnRcIiBlbGVtZW50XG4gIC8vIG9mIHRoaXMgYXJyYXkgY2FuIGJlIHJlbW92ZWQuXG4gICdzaG9ydCddXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWluaS5qcy5tYXAiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgbWluaSBmcm9tICcuL21pbmkuanMnO1xuZXhwb3J0IGRlZmF1bHQgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtaW5pKSwge30sIHtcbiAgLy8gQWRkIFwibm93XCIuXG4gIHN0ZXBzOiBbe1xuICAgIGZvcm1hdEFzOiAnbm93J1xuICB9XS5jb25jYXQobWluaS5zdGVwcylcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWluaU5vdy5qcy5tYXAiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgbWluaSBmcm9tICcuL21pbmkuanMnO1xuZXhwb3J0IGRlZmF1bHQgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtaW5pKSwge30sIHtcbiAgLy8gU2tpcCBcInNlY29uZHNcIi5cbiAgc3RlcHM6IG1pbmkuc3RlcHMuZmlsdGVyKGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgcmV0dXJuIHN0ZXAuZm9ybWF0QXMgIT09ICdzZWNvbmQnO1xuICB9KVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taW5pTWludXRlLmpzLm1hcCIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBtaW5pTWludXRlIGZyb20gJy4vbWluaU1pbnV0ZS5qcyc7XG5leHBvcnQgZGVmYXVsdCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1pbmlNaW51dGUpLCB7fSwge1xuICAvLyBBZGQgXCJub3dcIi5cbiAgc3RlcHM6IFt7XG4gICAgZm9ybWF0QXM6ICdub3cnXG4gIH1dLmNvbmNhdChtaW5pTWludXRlLnN0ZXBzKVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taW5pTWludXRlTm93LmpzLm1hcCIsImltcG9ydCByb3VuZCBmcm9tICcuL3JvdW5kLmpzJztcbmltcG9ydCByb3VuZE1pbnV0ZSBmcm9tICcuL3JvdW5kTWludXRlLmpzJzsgLy8gYGFwcHJveGltYXRlYCBzdHlsZSBpcyBkZXByZWNhdGVkLlxuXG5pbXBvcnQgYXBwcm94aW1hdGUgZnJvbSAnLi9hcHByb3hpbWF0ZS5qcyc7IC8vIGBhcHByb3hpbWF0ZVRpbWVgIHN0eWxlIGlzIGRlcHJlY2F0ZWQuXG5cbmltcG9ydCBhcHByb3hpbWF0ZVRpbWUgZnJvbSAnLi9hcHByb3hpbWF0ZVRpbWUuanMnO1xuaW1wb3J0IHR3aXR0ZXIgZnJvbSAnLi90d2l0dGVyLmpzJztcbmltcG9ydCB0d2l0dGVyTm93IGZyb20gJy4vdHdpdHRlck5vdy5qcyc7XG5pbXBvcnQgdHdpdHRlck1pbnV0ZSBmcm9tICcuL3R3aXR0ZXJNaW51dGUuanMnO1xuaW1wb3J0IHR3aXR0ZXJNaW51dGVOb3cgZnJvbSAnLi90d2l0dGVyTWludXRlTm93LmpzJztcbmltcG9ydCB0d2l0dGVyRmlyc3RNaW51dGUgZnJvbSAnLi90d2l0dGVyRmlyc3RNaW51dGUuanMnO1xuaW1wb3J0IG1pbmkgZnJvbSAnLi9taW5pLmpzJztcbmltcG9ydCBtaW5pTm93IGZyb20gJy4vbWluaU5vdy5qcyc7XG5pbXBvcnQgbWluaU1pbnV0ZSBmcm9tICcuL21pbmlNaW51dGUuanMnO1xuaW1wb3J0IG1pbmlNaW51dGVOb3cgZnJvbSAnLi9taW5pTWludXRlTm93LmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN0eWxlQnlOYW1lKHN0eWxlKSB7XG4gIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAvLyBcImRlZmF1bHRcIiBzdHlsZSBuYW1lIGlzIGRlcHJlY2F0ZWQuXG4gICAgY2FzZSAnZGVmYXVsdCc6XG4gICAgY2FzZSAncm91bmQnOlxuICAgICAgcmV0dXJuIHJvdW5kO1xuXG4gICAgY2FzZSAncm91bmQtbWludXRlJzpcbiAgICAgIHJldHVybiByb3VuZE1pbnV0ZTtcblxuICAgIGNhc2UgJ2FwcHJveGltYXRlJzpcbiAgICAgIHJldHVybiBhcHByb3hpbWF0ZTtcbiAgICAvLyBcInRpbWVcIiBzdHlsZSBuYW1lIGlzIGRlcHJlY2F0ZWQuXG5cbiAgICBjYXNlICd0aW1lJzpcbiAgICBjYXNlICdhcHByb3hpbWF0ZS10aW1lJzpcbiAgICAgIHJldHVybiBhcHByb3hpbWF0ZVRpbWU7XG5cbiAgICBjYXNlICdtaW5pJzpcbiAgICAgIHJldHVybiBtaW5pO1xuXG4gICAgY2FzZSAnbWluaS1ub3cnOlxuICAgICAgcmV0dXJuIG1pbmlOb3c7XG5cbiAgICBjYXNlICdtaW5pLW1pbnV0ZSc6XG4gICAgICByZXR1cm4gbWluaU1pbnV0ZTtcblxuICAgIGNhc2UgJ21pbmktbWludXRlLW5vdyc6XG4gICAgICByZXR1cm4gbWluaU1pbnV0ZU5vdztcblxuICAgIGNhc2UgJ3R3aXR0ZXInOlxuICAgICAgcmV0dXJuIHR3aXR0ZXI7XG5cbiAgICBjYXNlICd0d2l0dGVyLW5vdyc6XG4gICAgICByZXR1cm4gdHdpdHRlck5vdztcblxuICAgIGNhc2UgJ3R3aXR0ZXItbWludXRlJzpcbiAgICAgIHJldHVybiB0d2l0dGVyTWludXRlO1xuXG4gICAgY2FzZSAndHdpdHRlci1taW51dGUtbm93JzpcbiAgICAgIHJldHVybiB0d2l0dGVyTWludXRlTm93O1xuXG4gICAgY2FzZSAndHdpdHRlci1maXJzdC1taW51dGUnOlxuICAgICAgcmV0dXJuIHR3aXR0ZXJGaXJzdE1pbnV0ZTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBGb3IgaGlzdG9yaWNhbCByZWFzb25zLCB0aGUgZGVmYXVsdCBzdHlsZSBpcyBcImFwcHJveGltYXRlXCIuXG4gICAgICByZXR1cm4gYXBwcm94aW1hdGU7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFN0eWxlQnlOYW1lLmpzLm1hcCIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyByZXR1cm4gZnVuY3Rpb24gKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IFJlbGF0aXZlVGltZUZvcm1hdFBvbHlmaWxsIGZyb20gJ3JlbGF0aXZlLXRpbWUtZm9ybWF0JztcbmltcG9ydCBDYWNoZSBmcm9tICcuL2NhY2hlLmpzJztcbmltcG9ydCBjaG9vc2VMb2NhbGUgZnJvbSAnLi9sb2NhbGUuanMnO1xuaW1wb3J0IGlzU3R5bGVPYmplY3QgZnJvbSAnLi9pc1N0eWxlT2JqZWN0LmpzJztcbmltcG9ydCBnZXRTdGVwIGZyb20gJy4vc3RlcHMvZ2V0U3RlcC5qcyc7XG5pbXBvcnQgZ2V0U3RlcERlbm9taW5hdG9yIGZyb20gJy4vc3RlcHMvZ2V0U3RlcERlbm9taW5hdG9yLmpzJztcbmltcG9ydCBnZXRUaW1lVG9OZXh0VXBkYXRlIGZyb20gJy4vc3RlcHMvZ2V0VGltZVRvTmV4dFVwZGF0ZS5qcyc7XG5pbXBvcnQgeyBhZGRMb2NhbGVEYXRhLCBnZXRMb2NhbGVEYXRhIH0gZnJvbSAnLi9Mb2NhbGVEYXRhU3RvcmUuanMnO1xuaW1wb3J0IGRlZmF1bHRTdHlsZSBmcm9tICcuL3N0eWxlL3JvdW5kTWludXRlLmpzJztcbmltcG9ydCBnZXRTdHlsZUJ5TmFtZSBmcm9tICcuL3N0eWxlL2dldFN0eWxlQnlOYW1lLmpzJztcbmltcG9ydCB7IGdldFJvdW5kRnVuY3Rpb24gfSBmcm9tICcuL3JvdW5kLmpzJzsgLy8gVmFsaWQgdGltZSB1bml0cy5cblxudmFyIFVOSVRTID0gWydub3cnLCAvLyBUaGUgcmVzdCBhcmUgdGhlIHNhbWUgYXMgaW4gYEludGwuUmVsYXRpdmVUaW1lRm9ybWF0YC5cbidzZWNvbmQnLCAnbWludXRlJywgJ2hvdXInLCAnZGF5JywgJ3dlZWsnLCAnbW9udGgnLCAncXVhcnRlcicsICd5ZWFyJ107XG5cbnZhciBUaW1lQWdvID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXHJcbiAgICogQHBhcmFtIHsoc3RyaW5nfHN0cmluZ1tdKX0gbG9jYWxlcz1bXSAtIFByZWZlcnJlZCBsb2NhbGVzIChvciBsb2NhbGUpLlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BvbHlmaWxsXSDigJQgUGFzcyBgZmFsc2VgIHRvIHVzZSBuYXRpdmUgYEludGwuUmVsYXRpdmVUaW1lRm9ybWF0YCBhbmQgYEludGwuUGx1cmFsUnVsZXNgIGluc3RlYWQgb2YgdGhlIHBvbHlmaWxscy5cclxuICAgKi9cbiAgZnVuY3Rpb24gVGltZUFnbygpIHtcbiAgICB2YXIgbG9jYWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgIHBvbHlmaWxsID0gX3JlZi5wb2x5ZmlsbDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaW1lQWdvKTtcblxuICAgIC8vIENvbnZlcnQgYGxvY2FsZXNgIHRvIGFuIGFycmF5LlxuICAgIGlmICh0eXBlb2YgbG9jYWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxvY2FsZXMgPSBbbG9jYWxlc107XG4gICAgfSAvLyBDaG9vc2UgdGhlIG1vc3QgYXBwcm9wcmlhdGUgbG9jYWxlXG4gICAgLy8gZnJvbSB0aGUgbGlzdCBvZiBgbG9jYWxlc2AgYWRkZWQgYnkgdGhlIHVzZXIuXG4gICAgLy8gRm9yIGV4YW1wbGUsIG5ldyBUaW1lQWdvKFwiZW4tVVNcIikgLT4gXCJlblwiLlxuXG5cbiAgICB0aGlzLmxvY2FsZSA9IGNob29zZUxvY2FsZShsb2NhbGVzLmNvbmNhdChUaW1lQWdvLmdldERlZmF1bHRMb2NhbGUoKSksIGdldExvY2FsZURhdGEpO1xuXG4gICAgaWYgKHR5cGVvZiBJbnRsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVXNlIGBJbnRsLk51bWJlckZvcm1hdGAgZm9yIGZvcm1hdHRpbmcgbnVtYmVycyAod2hlbiBhdmFpbGFibGUpLlxuICAgICAgaWYgKEludGwuTnVtYmVyRm9ybWF0KSB7XG4gICAgICAgIHRoaXMubnVtYmVyRm9ybWF0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KHRoaXMubG9jYWxlKTtcbiAgICAgIH1cbiAgICB9IC8vIFNvbWUgcGVvcGxlIGhhdmUgcmVxdWVzdGVkIHRoZSBhYmlsaXR5IHRvIHVzZSBuYXRpdmVcbiAgICAvLyBgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXRgIGFuZCBgSW50bC5QbHVyYWxSdWxlc2BcbiAgICAvLyBpbnN0ZWFkIG9mIHRoZSBwb2x5ZmlsbHMuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NhdGFtcGhldGFtaW5lL2phdmFzY3JpcHQtdGltZS1hZ28vaXNzdWVzLzIxXG5cblxuICAgIGlmIChwb2x5ZmlsbCA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuSW50bFJlbGF0aXZlVGltZUZvcm1hdCA9IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0O1xuICAgICAgdGhpcy5JbnRsUGx1cmFsUnVsZXMgPSBJbnRsLlBsdXJhbFJ1bGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLkludGxSZWxhdGl2ZVRpbWVGb3JtYXQgPSBSZWxhdGl2ZVRpbWVGb3JtYXRQb2x5ZmlsbDtcbiAgICAgIHRoaXMuSW50bFBsdXJhbFJ1bGVzID0gUmVsYXRpdmVUaW1lRm9ybWF0UG9seWZpbGwuUGx1cmFsUnVsZXM7XG4gICAgfSAvLyBDYWNoZSBgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXRgIGluc3RhbmNlLlxuXG5cbiAgICB0aGlzLnJlbGF0aXZlVGltZUZvcm1hdENhY2hlID0gbmV3IENhY2hlKCk7IC8vIENhY2hlIGBJbnRsLlBsdXJhbFJ1bGVzYCBpbnN0YW5jZS5cblxuICAgIHRoaXMucGx1cmFsUnVsZXNDYWNoZSA9IG5ldyBDYWNoZSgpO1xuICB9XG4gIC8qKlxyXG4gICAqIEZvcm1hdHMgcmVsYXRpdmUgZGF0ZS90aW1lLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHsobnVtYmVyfERhdGUpfSBpbnB1dCDigJQgQSBgRGF0ZWAgb3IgYSBqYXZhc2NyaXB0IHRpbWVzdGFtcC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xvYmplY3QpfSBzdHlsZSDigJQgRGF0ZS90aW1lIGZvcm1hdHRpbmcgc3R5bGUuIEVpdGhlciBvbmUgb2YgdGhlIGJ1aWx0LWluIHN0eWxlIG5hbWVzIG9yIGEgXCJjdXN0b21cIiBzdHlsZSBkZWZpbml0aW9uIG9iamVjdCBoYXZpbmcgYHN0ZXBzOiBvYmplY3RbXWAgYW5kIGBsYWJlbHM6IHN0cmluZ1tdYC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5ub3ddIC0gU2V0cyB0aGUgY3VycmVudCBkYXRlIHRpbWVzdGFtcC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IFtvcHRpb25zLmZ1dHVyZV0g4oCUIFRlbGxzIGhvdyB0byBmb3JtYXQgdmFsdWUgYDBgOlxyXG4gICAqICAgICAgICAgYXMgXCJmdXR1cmVcIiAoYHRydWVgKSBvciBcInBhc3RcIiAoYGZhbHNlYCkuXHJcbiAgICogICAgICAgICBJcyBgZmFsc2VgIGJ5IGRlZmF1bHQsIGJ1dCBzaG91bGQgaGF2ZSBiZWVuIGB0cnVlYCBhY3R1YWxseSxcclxuICAgKiAgICAgICAgIGluIG9yZGVyIHRvIGNvcnJlc3BvbmQgdG8gYEludGwuUmVsYXRpdmVUaW1lRm9ybWF0YFxyXG4gICAqICAgICAgICAgdGhhdCB1c2VzIGBmdXR1cmVgIGZvcm1hdHRpbmcgZm9yIGAwYCB1bmxlc3MgYC0wYCBpcyBwYXNzZWQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucm91bmRdIOKAlCBSb3VuZGluZyBtZXRob2QuIE92ZXJyaWRlcyB0aGUgc3R5bGUncyBvbmUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmdldFRpbWVUb05leHRVcGRhdGVdIOKAlCBQYXNzIGB0cnVlYCB0byByZXR1cm4gYFtmb3JtYXR0ZWREYXRlLCB0aW1lVG9OZXh0VXBkYXRlXWAgaW5zdGVhZCBvZiBqdXN0IGBmb3JtYXR0ZWREYXRlYC5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCByZWxhdGl2ZSBkYXRlL3RpbWUuIElmIG5vIGVsaWdpYmxlIGBzdGVwYCBpcyBmb3VuZCwgdGhlbiBhbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQuXHJcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoVGltZUFnbywgW3tcbiAgICBrZXk6IFwiZm9ybWF0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChpbnB1dCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICBpZiAoc3R5bGUgJiYgIWlzU3R5bGUoc3R5bGUpKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IHN0eWxlO1xuICAgICAgICAgIHN0eWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgIHN0eWxlID0gZGVmYXVsdFN0eWxlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHN0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICBzdHlsZSA9IGdldFN0eWxlQnlOYW1lKHN0eWxlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRpbWVzdGFtcCA9IGdldFRpbWVzdGFtcChpbnB1dCk7IC8vIEdldCBsb2NhbGUgbWVzc2FnZXMgZm9yIHRoaXMgdHlwZSBvZiBsYWJlbHMuXG4gICAgICAvLyBcImZsYXZvdXJcIiBpcyBhIGxlZ2FjeSBuYW1lIGZvciBcImxhYmVsc1wiLlxuXG4gICAgICB2YXIgX3RoaXMkZ2V0TGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoc3R5bGUuZmxhdm91ciB8fCBzdHlsZS5sYWJlbHMpLFxuICAgICAgICAgIGxhYmVscyA9IF90aGlzJGdldExhYmVscy5sYWJlbHMsXG4gICAgICAgICAgbGFiZWxzVHlwZSA9IF90aGlzJGdldExhYmVscy5sYWJlbHNUeXBlO1xuXG4gICAgICB2YXIgbm93OyAvLyBDYW4gcGFzcyBhIGN1c3RvbSBgbm93YCwgZS5nLiBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cbiAgICAgIC8vXG4gICAgICAvLyBMZWdhY3kgd2F5IHdhcyBwYXNzaW5nIGBub3dgIGluIGBzdHlsZWAuXG4gICAgICAvLyBUaGF0IHdheSBpcyBkZXByZWNhdGVkLlxuXG4gICAgICBpZiAoc3R5bGUubm93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm93ID0gc3R5bGUubm93O1xuICAgICAgfSAvLyBUaGUgbmV3IHdheSBpcyBwYXNzaW5nIGBub3dgIG9wdGlvbiB0byBgLmZvcm1hdCgpYC5cblxuXG4gICAgICBpZiAobm93ID09PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5ub3cgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub3cgPSBvcHRpb25zLm5vdztcbiAgICAgIH1cblxuICAgICAgaWYgKG5vdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vdyA9IERhdGUubm93KCk7XG4gICAgICB9IC8vIGhvdyBtdWNoIHRpbWUgaGFzIHBhc3NlZCAoaW4gc2Vjb25kcylcblxuXG4gICAgICB2YXIgc2Vjb25kc1Bhc3NlZCA9IChub3cgLSB0aW1lc3RhbXApIC8gMTAwMDsgLy8gaW4gc2Vjb25kc1xuXG4gICAgICB2YXIgZnV0dXJlID0gb3B0aW9ucy5mdXR1cmUgfHwgc2Vjb25kc1Bhc3NlZCA8IDA7XG4gICAgICB2YXIgbm93TGFiZWwgPSBnZXROb3dMYWJlbChsYWJlbHMsIGdldExvY2FsZURhdGEodGhpcy5sb2NhbGUpLm5vdywgZ2V0TG9jYWxlRGF0YSh0aGlzLmxvY2FsZSlbXCJsb25nXCJdLCBmdXR1cmUpOyAvLyBgY3VzdG9tYCDigJMgQSBmdW5jdGlvbiBvZiBgeyBlbGFwc2VkLCB0aW1lLCBkYXRlLCBub3csIGxvY2FsZSB9YC5cbiAgICAgIC8vXG4gICAgICAvLyBMb29rcyBsaWtlIGBjdXN0b21gIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAgLy8gaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICAgIC8vXG4gICAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYSB2YWx1ZSwgdGhlbiB0aGUgYC5mb3JtYXQoKWAgY2FsbCB3aWxsIHJldHVybiB0aGF0IHZhbHVlLlxuICAgICAgLy8gT3RoZXJ3aXNlIHRoZSByZWxhdGl2ZSBkYXRlL3RpbWUgaXMgZm9ybWF0dGVkIGFzIHVzdWFsLlxuICAgICAgLy8gVGhpcyBmZWF0dXJlIGlzIGN1cnJlbnRseSBub3QgdXNlZCBhbnl3aGVyZSBhbmQgaXMgaGVyZVxuICAgICAgLy8ganVzdCBmb3IgcHJvdmlkaW5nIHRoZSB1bHRpbWF0ZSBjdXN0b21pemF0aW9uIHBvaW50XG4gICAgICAvLyBpbiBjYXNlIGFueW9uZSB3b3VsZCBldmVyIG5lZWQgdGhhdC4gUHJlZmVyIHVzaW5nXG4gICAgICAvLyBgc3RlcHNbc3RlcF0uZm9ybWF0KHZhbHVlLCBsb2NhbGUpYCBpbnN0ZWFkLlxuICAgICAgLy9cblxuICAgICAgaWYgKHN0eWxlLmN1c3RvbSkge1xuICAgICAgICB2YXIgY3VzdG9tID0gc3R5bGUuY3VzdG9tKHtcbiAgICAgICAgICBub3c6IG5vdyxcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSh0aW1lc3RhbXApLFxuICAgICAgICAgIHRpbWU6IHRpbWVzdGFtcCxcbiAgICAgICAgICBlbGFwc2VkOiBzZWNvbmRzUGFzc2VkLFxuICAgICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGN1c3RvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gV29uJ3QgcmV0dXJuIGB0aW1lVG9OZXh0VXBkYXRlYCBoZXJlXG4gICAgICAgICAgLy8gYmVjYXVzZSBgY3VzdG9tKClgIHNlZW1zIGRlcHJlY2F0ZWQuXG4gICAgICAgICAgcmV0dXJuIGN1c3RvbTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBHZXQgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIHRpbWUgaW50ZXJ2YWwgdW5pdHMuXG5cblxuICAgICAgdmFyIHVuaXRzID0gZ2V0VGltZUludGVydmFsTWVhc3VyZW1lbnRVbml0cyggLy8gQ29udHJvbGxpbmcgYHN0eWxlLnN0ZXBzYCB0aHJvdWdoIGBzdHlsZS51bml0c2Agc2VlbXMgdG8gYmUgZGVwcmVjYXRlZDpcbiAgICAgIC8vIGNyZWF0ZSBhIG5ldyBjdXN0b20gYHN0eWxlYCBpbnN0ZWFkLlxuICAgICAgc3R5bGUudW5pdHMsIGxhYmVscywgbm93TGFiZWwpOyAvLyAvLyBJZiBubyBhdmFpbGFibGUgdGltZSB1bml0IGlzIHN1aXRhYmxlLCBqdXN0IG91dHB1dCBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICAvLyBpZiAodW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBcdGNvbnNvbGUuZXJyb3IoYE5vbmUgb2YgdGhlIFwiJHt1bml0cy5qb2luKCcsICcpfVwiIHRpbWUgdW5pdHMgaGF2ZSBiZWVuIGZvdW5kIGluIFwiJHtsYWJlbHNUeXBlfVwiIGxhYmVscyBmb3IgXCIke3RoaXMubG9jYWxlfVwiIGxvY2FsZS5gKVxuICAgICAgLy8gXHRyZXR1cm4gJydcbiAgICAgIC8vIH1cblxuICAgICAgdmFyIHJvdW5kID0gb3B0aW9ucy5yb3VuZCB8fCBzdHlsZS5yb3VuZDsgLy8gQ2hvb3NlIHRoZSBhcHByb3ByaWF0ZSB0aW1lIG1lYXN1cmVtZW50IHVuaXRcbiAgICAgIC8vIGFuZCBnZXQgdGhlIGNvcnJlc3BvbmRpbmcgcm91bmRlZCB0aW1lIGFtb3VudC5cblxuICAgICAgdmFyIF9nZXRTdGVwID0gZ2V0U3RlcCggLy8gXCJncmFkYXRpb25cIiBpcyBhIGxlZ2FjeSBuYW1lIGZvciBcInN0ZXBzXCIuXG4gICAgICAvLyBGb3IgaGlzdG9yaWNhbCByZWFzb25zLCBcImFwcHJveGltYXRlXCIgc3RlcHMgYXJlIHVzZWQgYnkgZGVmYXVsdC5cbiAgICAgIC8vIEluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24sIHRoZXJlJ2xsIGJlIG5vIGRlZmF1bHQgZm9yIGBzdGVwc2AuXG4gICAgICBzdHlsZS5ncmFkYXRpb24gfHwgc3R5bGUuc3RlcHMgfHwgZGVmYXVsdFN0eWxlLnN0ZXBzLCBzZWNvbmRzUGFzc2VkLCB7XG4gICAgICAgIG5vdzogbm93LFxuICAgICAgICB1bml0czogdW5pdHMsXG4gICAgICAgIHJvdW5kOiByb3VuZCxcbiAgICAgICAgZnV0dXJlOiBmdXR1cmUsXG4gICAgICAgIGdldE5leHRTdGVwOiB0cnVlXG4gICAgICB9KSxcbiAgICAgICAgICBfZ2V0U3RlcDIgPSBfc2xpY2VkVG9BcnJheShfZ2V0U3RlcCwgMyksXG4gICAgICAgICAgcHJldlN0ZXAgPSBfZ2V0U3RlcDJbMF0sXG4gICAgICAgICAgc3RlcCA9IF9nZXRTdGVwMlsxXSxcbiAgICAgICAgICBuZXh0U3RlcCA9IF9nZXRTdGVwMlsyXTtcblxuICAgICAgdmFyIGZvcm1hdHRlZERhdGUgPSB0aGlzLmZvcm1hdERhdGVGb3JTdGVwKHRpbWVzdGFtcCwgc3RlcCwgc2Vjb25kc1Bhc3NlZCwge1xuICAgICAgICBsYWJlbHM6IGxhYmVscyxcbiAgICAgICAgbGFiZWxzVHlwZTogbGFiZWxzVHlwZSxcbiAgICAgICAgbm93TGFiZWw6IG5vd0xhYmVsLFxuICAgICAgICBub3c6IG5vdyxcbiAgICAgICAgZnV0dXJlOiBmdXR1cmUsXG4gICAgICAgIHJvdW5kOiByb3VuZFxuICAgICAgfSkgfHwgJyc7XG5cbiAgICAgIGlmIChvcHRpb25zLmdldFRpbWVUb05leHRVcGRhdGUpIHtcbiAgICAgICAgdmFyIHRpbWVUb05leHRVcGRhdGUgPSBnZXRUaW1lVG9OZXh0VXBkYXRlKHRpbWVzdGFtcCwgc3RlcCwge1xuICAgICAgICAgIG5leHRTdGVwOiBuZXh0U3RlcCxcbiAgICAgICAgICBwcmV2U3RlcDogcHJldlN0ZXAsXG4gICAgICAgICAgbm93OiBub3csXG4gICAgICAgICAgZnV0dXJlOiBmdXR1cmUsXG4gICAgICAgICAgcm91bmQ6IHJvdW5kXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlZERhdGUsIHRpbWVUb05leHRVcGRhdGVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVkRGF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0RGF0ZUZvclN0ZXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0RGF0ZUZvclN0ZXAodGltZXN0YW1wLCBzdGVwLCBzZWNvbmRzUGFzc2VkLCBfcmVmMikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGxhYmVscyA9IF9yZWYyLmxhYmVscyxcbiAgICAgICAgICBsYWJlbHNUeXBlID0gX3JlZjIubGFiZWxzVHlwZSxcbiAgICAgICAgICBub3dMYWJlbCA9IF9yZWYyLm5vd0xhYmVsLFxuICAgICAgICAgIG5vdyA9IF9yZWYyLm5vdyxcbiAgICAgICAgICBmdXR1cmUgPSBfcmVmMi5mdXR1cmUsXG4gICAgICAgICAgcm91bmQgPSBfcmVmMi5yb3VuZDtcblxuICAgICAgLy8gSWYgbm8gc3RlcCBtYXRjaGVzLCB0aGVuIG91dHB1dCBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICBpZiAoIXN0ZXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RlcC5mb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZm9ybWF0KHRpbWVzdGFtcCwgdGhpcy5sb2NhbGUsIHtcbiAgICAgICAgICBmb3JtYXRBczogZnVuY3Rpb24gZm9ybWF0QXModW5pdCwgdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIE1pbWlja3MgYEludGwuUmVsYXRpdmVUaW1lRm9ybWF0LmZvcm1hdCgpYC5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5mb3JtYXRWYWx1ZSh2YWx1ZSwgdW5pdCwge1xuICAgICAgICAgICAgICBsYWJlbHM6IGxhYmVscyxcbiAgICAgICAgICAgICAgZnV0dXJlOiBmdXR1cmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbm93OiBub3csXG4gICAgICAgICAgZnV0dXJlOiBmdXR1cmVcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIFwidW5pdFwiIGlzIG5vdyBjYWxsZWQgXCJmb3JtYXRBc1wiLlxuXG5cbiAgICAgIHZhciB1bml0ID0gc3RlcC51bml0IHx8IHN0ZXAuZm9ybWF0QXM7XG5cbiAgICAgIGlmICghdW5pdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbamF2YXNjcmlwdC10aW1lLWFnb10gRWFjaCBzdGVwIG11c3QgZGVmaW5lIGVpdGhlciBgZm9ybWF0QXNgIG9yIGBmb3JtYXQoKWAuIFN0ZXA6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShzdGVwKSkpO1xuICAgICAgfSAvLyBgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXRgIGRvZXNuJ3Qgb3BlcmF0ZSBpbiBcIm5vd1wiIHVuaXRzLlxuICAgICAgLy8gVGhlcmVmb3JlLCB0aHJlYXQgXCJub3dcIiBhcyBhIHNwZWNpYWwgY2FzZS5cblxuXG4gICAgICBpZiAodW5pdCA9PT0gJ25vdycpIHtcbiAgICAgICAgcmV0dXJuIG5vd0xhYmVsO1xuICAgICAgfSAvLyBBbW91bnQgaW4gdW5pdHMuXG5cblxuICAgICAgdmFyIGFtb3VudCA9IE1hdGguYWJzKHNlY29uZHNQYXNzZWQpIC8gZ2V0U3RlcERlbm9taW5hdG9yKHN0ZXApOyAvLyBBcHBseSBncmFudWxhcml0eSB0byB0aGUgdGltZSBhbW91bnRcbiAgICAgIC8vIChhbmQgZmFsbGJhY2sgdG8gdGhlIHByZXZpb3VzIHN0ZXBcbiAgICAgIC8vICBpZiB0aGUgZmlyc3QgbGV2ZWwgb2YgZ3JhbnVsYXJpdHlcbiAgICAgIC8vICBpc24ndCBtZXQgYnkgdGhpcyBhbW91bnQpXG4gICAgICAvL1xuICAgICAgLy8gYGdyYW51bGFyaXR5YCDigJQgKGFkdmFuY2VkKSBUaW1lIGludGVydmFsIHZhbHVlIFwiZ3JhbnVsYXJpdHlcIi5cbiAgICAgIC8vIEZvciBleGFtcGxlLCBpdCBjb3VsZCBiZSBzZXQgdG8gYDVgIGZvciBtaW51dGVzIHRvIGFsbG93IG9ubHkgNS1taW51dGUgaW5jcmVtZW50c1xuICAgICAgLy8gd2hlbiBmb3JtYXR0aW5nIHRpbWUgaW50ZXJ2YWxzOiBgMCBtaW51dGVzYCwgYDUgbWludXRlc2AsIGAxMCBtaW51dGVzYCwgZXRjLlxuICAgICAgLy8gUGVyaGFwcyB0aGlzIGZlYXR1cmUgd2lsbCBiZSByZW1vdmVkIGJlY2F1c2UgdGhlcmUgc2VlbSB0byBiZSBubyB1c2UgY2FzZXNcbiAgICAgIC8vIG9mIGl0IGluIHRoZSByZWFsIHdvcmxkLlxuICAgICAgLy9cblxuICAgICAgaWYgKHN0ZXAuZ3JhbnVsYXJpdHkpIHtcbiAgICAgICAgLy8gUmVjYWxjdWxhdGUgdGhlIGFtb3VudCBvZiBzZWNvbmRzIHBhc3NlZCBiYXNlZCBvbiBncmFudWxhcml0eVxuICAgICAgICBhbW91bnQgPSBnZXRSb3VuZEZ1bmN0aW9uKHJvdW5kKShhbW91bnQgLyBzdGVwLmdyYW51bGFyaXR5KSAqIHN0ZXAuZ3JhbnVsYXJpdHk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZUZvckZvcm1hdHRpbmcgPSAtMSAqIE1hdGguc2lnbihzZWNvbmRzUGFzc2VkKSAqIGdldFJvdW5kRnVuY3Rpb24ocm91bmQpKGFtb3VudCk7IC8vIEJ5IGRlZmF1bHQsIHRoaXMgbGlicmFyeSBmb3JtYXRzIGEgYDBgIGluIFwicGFzdFwiIG1vZGUsXG4gICAgICAvLyB1bmxlc3MgYGZ1dHVyZTogdHJ1ZWAgb3B0aW9uIGlzIHBhc3NlZC5cbiAgICAgIC8vIFRoaXMgaXMgZGlmZmVyZW50IHRvIGByZWxhdGl2ZS10aW1lLWZvcm1hdGAncyBiZWhhdmlvclxuICAgICAgLy8gd2hpY2ggZm9ybWF0cyBhIGAwYCBpbiBcImZ1dHVyZVwiIG1vZGUgYnkgZGVmYXVsdCwgdW5sZXNzIGl0J3MgYSBgLTBgLlxuICAgICAgLy8gU28sIGNvbnZlcnQgYDBgIHRvIGAtMGAgaWYgYGZ1dHVyZTogdHJ1ZWAgb3B0aW9uIHdhc24ndCBwYXNzZWQuXG4gICAgICAvLyBgPT09IDBgIG1hdGNoZXMgYm90aCBgMGAgYW5kIGAtMGAuXG5cbiAgICAgIGlmICh2YWx1ZUZvckZvcm1hdHRpbmcgPT09IDApIHtcbiAgICAgICAgaWYgKGZ1dHVyZSkge1xuICAgICAgICAgIHZhbHVlRm9yRm9ybWF0dGluZyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVGb3JGb3JtYXR0aW5nID0gLTA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChsYWJlbHNUeXBlKSB7XG4gICAgICAgIGNhc2UgJ2xvbmcnOlxuICAgICAgICBjYXNlICdzaG9ydCc6XG4gICAgICAgIGNhc2UgJ25hcnJvdyc6XG4gICAgICAgICAgLy8gRm9ybWF0IHRoZSBhbW91bnQgdXNpbmcgYEludGwuUmVsYXRpdmVUaW1lRm9ybWF0YC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGb3JtYXR0ZXIobGFiZWxzVHlwZSkuZm9ybWF0KHZhbHVlRm9yRm9ybWF0dGluZywgdW5pdCk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBGb3JtYXQgdGhlIGFtb3VudC5cbiAgICAgICAgICAvLyAobWltaWNrcyBgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXRgIGJlaGF2aW9yIGZvciBvdGhlciB0aW1lIGxhYmVsIHN0eWxlcylcbiAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRWYWx1ZSh2YWx1ZUZvckZvcm1hdHRpbmcsIHVuaXQsIHtcbiAgICAgICAgICAgIGxhYmVsczogbGFiZWxzLFxuICAgICAgICAgICAgZnV0dXJlOiBmdXR1cmVcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBNaW1pY2tzIHdoYXQgYEludGwuUmVsYXRpdmVUaW1lRm9ybWF0YCBkb2VzIGZvciBhZGRpdGlvbmFsIGxvY2FsZSBzdHlsZXMuXHJcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IHZhbHVlXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHVuaXRcclxuICAgICAqIEBwYXJhbSAge29iamVjdH0gb3B0aW9ucy5sYWJlbHMg4oCUIFJlbGF0aXZlIHRpbWUgbGFiZWxzLlxyXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gW29wdGlvbnMuZnV0dXJlXSDigJQgVGVsbHMgaG93IHRvIGZvcm1hdCB2YWx1ZSBgMGA6IGFzIFwiZnV0dXJlXCIgKGB0cnVlYCkgb3IgXCJwYXN0XCIgKGBmYWxzZWApLiBJcyBgZmFsc2VgIGJ5IGRlZmF1bHQsIGJ1dCBzaG91bGQgaGF2ZSBiZWVuIGB0cnVlYCBhY3R1YWxseS5cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0VmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUsIHVuaXQsIF9yZWYzKSB7XG4gICAgICB2YXIgbGFiZWxzID0gX3JlZjMubGFiZWxzLFxuICAgICAgICAgIGZ1dHVyZSA9IF9yZWYzLmZ1dHVyZTtcbiAgICAgIHJldHVybiB0aGlzLmdldEZvcm1hdHRpbmdSdWxlKGxhYmVscywgdW5pdCwgdmFsdWUsIHtcbiAgICAgICAgZnV0dXJlOiBmdXR1cmVcbiAgICAgIH0pLnJlcGxhY2UoJ3swfScsIHRoaXMuZm9ybWF0TnVtYmVyKE1hdGguYWJzKHZhbHVlKSkpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgZm9ybWF0dGluZyBydWxlIGZvciBgdmFsdWVgIGluIGB1bml0c2AgKGVpdGhlciBpbiBwYXN0IG9yIGluIGZ1dHVyZSkuXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZm9ybWF0dGluZ1J1bGVzIOKAlCBSZWxhdGl2ZSB0aW1lIGxhYmVscyBmb3IgZGlmZmVyZW50IHVuaXRzLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBUaW1lIGludGVydmFsIG1lYXN1cmVtZW50IHVuaXQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaW1lIGludGVydmFsIHZhbHVlLlxyXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gW29wdGlvbnMuZnV0dXJlXSDigJQgVGVsbHMgaG93IHRvIGZvcm1hdCB2YWx1ZSBgMGA6IGFzIFwiZnV0dXJlXCIgKGB0cnVlYCkgb3IgXCJwYXN0XCIgKGBmYWxzZWApLiBJcyBgZmFsc2VgIGJ5IGRlZmF1bHQuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gUmV0dXJucyBcInswfSBkYXlzIGFnb1wiXHJcbiAgICAgKiBnZXRGb3JtYXR0aW5nUnVsZShlbi5sb25nLCBcImRheVwiLCAtMiwgJ2VuJylcclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Rm9ybWF0dGluZ1J1bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rm9ybWF0dGluZ1J1bGUoZm9ybWF0dGluZ1J1bGVzLCB1bml0LCB2YWx1ZSwgX3JlZjQpIHtcbiAgICAgIHZhciBmdXR1cmUgPSBfcmVmNC5mdXR1cmU7XG4gICAgICAvLyBQYXNzaW5nIHRoZSBsYW5ndWFnZSBpcyByZXF1aXJlZCBpbiBvcmRlciB0b1xuICAgICAgLy8gYmUgYWJsZSB0byBjb3JyZWN0bHkgY2xhc3NpZnkgdGhlIGB2YWx1ZWAgYXMgYSBudW1iZXIuXG4gICAgICB2YXIgbG9jYWxlID0gdGhpcy5sb2NhbGU7XG4gICAgICBmb3JtYXR0aW5nUnVsZXMgPSBmb3JtYXR0aW5nUnVsZXNbdW5pdF07IC8vIENoZWNrIGZvciBhIHNwZWNpYWwgXCJjb21wYWN0ZWRcIiBydWxlcyBjYXNlOlxuICAgICAgLy8gaWYgZm9ybWF0dGluZyBydWxlcyBhcmUgdGhlIHNhbWUgZm9yIFwicGFzdFwiIGFuZCBcImZ1dHVyZVwiLFxuICAgICAgLy8gYW5kIGFsc28gZm9yIGFsbCBwb3NzaWJsZSBgdmFsdWVgcywgdGhlbiB0aG9zZSBydWxlcyBhcmVcbiAgICAgIC8vIHN0b3JlZCBhcyBhIHNpbmdsZSBzdHJpbmcuXG5cbiAgICAgIGlmICh0eXBlb2YgZm9ybWF0dGluZ1J1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZm9ybWF0dGluZ1J1bGVzO1xuICAgICAgfSAvLyBDaG9vc2UgZWl0aGVyIFwicGFzdFwiIG9yIFwiZnV0dXJlXCIgYmFzZWQgb24gdGltZSBgdmFsdWVgIHNpZ24uXG4gICAgICAvLyBJZiBcInBhc3RcIiBpcyBzYW1lIGFzIFwiZnV0dXJlXCIgdGhlbiB0aGV5J3JlIHN0b3JlZCBhcyBcIm90aGVyXCIuXG4gICAgICAvLyBJZiB0aGVyZSdzIG9ubHkgXCJvdGhlclwiIHRoZW4gaXQncyBiZWluZyBjb2xsYXBzZWQuXG5cblxuICAgICAgdmFyIHBhc3RPckZ1dHVyZSA9IHZhbHVlID09PSAwID8gZnV0dXJlID8gJ2Z1dHVyZScgOiAncGFzdCcgOiB2YWx1ZSA8IDAgPyAncGFzdCcgOiAnZnV0dXJlJztcbiAgICAgIHZhciBxdWFudGlmaWVyUnVsZXMgPSBmb3JtYXR0aW5nUnVsZXNbcGFzdE9yRnV0dXJlXSB8fCBmb3JtYXR0aW5nUnVsZXM7IC8vIEJ1bmRsZSBzaXplIG9wdGltaXphdGlvbiB0ZWNobmlxdWUuXG5cbiAgICAgIGlmICh0eXBlb2YgcXVhbnRpZmllclJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcXVhbnRpZmllclJ1bGVzO1xuICAgICAgfSAvLyBRdWFudGlmeSBgdmFsdWVgLlxuXG5cbiAgICAgIHZhciBxdWFudGlmaWVyID0gdGhpcy5nZXRQbHVyYWxSdWxlcygpLnNlbGVjdChNYXRoLmFicyh2YWx1ZSkpOyAvLyBcIm90aGVyXCIgcnVsZSBpcyBzdXBwb3NlZCB0byBhbHdheXMgYmUgcHJlc2VudC5cbiAgICAgIC8vIElmIG9ubHkgXCJvdGhlclwiIHJ1bGUgaXMgcHJlc2VudCB0aGVuIFwicnVsZXNcIiBpcyBub3QgYW4gb2JqZWN0IGFuZCBpcyBhIHN0cmluZy5cblxuICAgICAgcmV0dXJuIHF1YW50aWZpZXJSdWxlc1txdWFudGlmaWVyXSB8fCBxdWFudGlmaWVyUnVsZXMub3RoZXI7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogRm9ybWF0cyBhIG51bWJlciBpbnRvIGEgc3RyaW5nLlxyXG4gICAgICogVXNlcyBgSW50bC5OdW1iZXJGb3JtYXRgIHdoZW4gYXZhaWxhYmxlLlxyXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSBudW1iZXJcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0TnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLm51bWJlckZvcm1hdCA/IHRoaXMubnVtYmVyRm9ybWF0LmZvcm1hdChudW1iZXIpIDogU3RyaW5nKG51bWJlcik7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXRgIGZvciBhIGdpdmVuIGBsYWJlbHNUeXBlYC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbHNUeXBlXHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IGBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdGAgaW5zdGFuY2VcclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Rm9ybWF0dGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZvcm1hdHRlcihsYWJlbHNUeXBlKSB7XG4gICAgICAvLyBgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXRgIGluc3RhbmNlIGNyZWF0aW9uIGlzIChoeXBvdGhldGljYWxseSkgYXNzdW1lZFxuICAgICAgLy8gYSBsZW5ndGh5IG9wZXJhdGlvbiBzbyB0aGUgaW5zdGFuY2VzIGFyZSBjYWNoZWQgYW5kIHJldXNlZC5cbiAgICAgIHJldHVybiB0aGlzLnJlbGF0aXZlVGltZUZvcm1hdENhY2hlLmdldCh0aGlzLmxvY2FsZSwgbGFiZWxzVHlwZSkgfHwgdGhpcy5yZWxhdGl2ZVRpbWVGb3JtYXRDYWNoZS5wdXQodGhpcy5sb2NhbGUsIGxhYmVsc1R5cGUsIG5ldyB0aGlzLkludGxSZWxhdGl2ZVRpbWVGb3JtYXQodGhpcy5sb2NhbGUsIHtcbiAgICAgICAgc3R5bGU6IGxhYmVsc1R5cGVcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFuIGBJbnRsLlBsdXJhbFJ1bGVzYCBpbnN0YW5jZS5cclxuICAgICAqIEByZXR1cm4ge29iamVjdH0gYEludGwuUGx1cmFsUnVsZXNgIGluc3RhbmNlXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFBsdXJhbFJ1bGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBsdXJhbFJ1bGVzKCkge1xuICAgICAgLy8gYEludGwuUGx1cmFsUnVsZXNgIGluc3RhbmNlIGNyZWF0aW9uIGlzIChoeXBvdGhldGljYWxseSkgYXNzdW1lZFxuICAgICAgLy8gYSBsZW5ndGh5IG9wZXJhdGlvbiBzbyB0aGUgaW5zdGFuY2VzIGFyZSBjYWNoZWQgYW5kIHJldXNlZC5cbiAgICAgIHJldHVybiB0aGlzLnBsdXJhbFJ1bGVzQ2FjaGUuZ2V0KHRoaXMubG9jYWxlKSB8fCB0aGlzLnBsdXJhbFJ1bGVzQ2FjaGUucHV0KHRoaXMubG9jYWxlLCBuZXcgdGhpcy5JbnRsUGx1cmFsUnVsZXModGhpcy5sb2NhbGUpKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGxvY2FsaXplZCBsYWJlbHMgZm9yIHRoaXMgdHlwZSBvZiBsYWJlbHMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfHN0cmluZ1tdKX0gbGFiZWxzVHlwZSAtIFJlbGF0aXZlIGRhdGUvdGltZSBsYWJlbHMgdHlwZS5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIGl0J3MgYW4gYXJyYXkgdGhlbiBhbGwgbGFiZWwgdHlwZXMgYXJlIHRyaWVkXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnRpbCBhIHN1aXRhYmxlIG9uZSBpcyBmb3VuZC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBvZiBzaGFwZSB7IGxhYmVsc1R5cGUsIGxhYmVscyB9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldExhYmVsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYWJlbHMoKSB7XG4gICAgICB2YXIgbGFiZWxzVHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cbiAgICAgIC8vIENvbnZlcnQgYGxhYmVsc2AgdG8gYW4gYXJyYXkuXG4gICAgICBpZiAodHlwZW9mIGxhYmVsc1R5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGxhYmVsc1R5cGUgPSBbbGFiZWxzVHlwZV07XG4gICAgICB9IC8vIFN1cHBvcnRzIGxlZ2FjeSBcInRpbnlcIiBhbmQgXCJtaW5pLXRpbWVcIiBsYWJlbCBzdHlsZXMuXG5cblxuICAgICAgbGFiZWxzVHlwZSA9IGxhYmVsc1R5cGUubWFwKGZ1bmN0aW9uIChsYWJlbHNUeXBlKSB7XG4gICAgICAgIHN3aXRjaCAobGFiZWxzVHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3RpbnknOlxuICAgICAgICAgIGNhc2UgJ21pbmktdGltZSc6XG4gICAgICAgICAgICByZXR1cm4gJ21pbmknO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBsYWJlbHNUeXBlO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gXCJsb25nXCIgbGFiZWxzIHR5cGUgaXMgdGhlIGRlZmF1bHQgb25lLlxuICAgICAgLy8gKGl0J3MgYWx3YXlzIHByZXNlbnQgZm9yIGFsbCBsYW5ndWFnZXMpXG5cbiAgICAgIGxhYmVsc1R5cGUgPSBsYWJlbHNUeXBlLmNvbmNhdCgnbG9uZycpOyAvLyBGaW5kIGEgc3VpdGFibGUgbGFiZWxzIHR5cGUuXG5cbiAgICAgIHZhciBsb2NhbGVEYXRhID0gZ2V0TG9jYWxlRGF0YSh0aGlzLmxvY2FsZSk7XG5cbiAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UobGFiZWxzVHlwZSksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBfbGFiZWxzVHlwZSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIGlmIChsb2NhbGVEYXRhW19sYWJlbHNUeXBlXSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbHNUeXBlOiBfbGFiZWxzVHlwZSxcbiAgICAgICAgICAgIGxhYmVsczogbG9jYWxlRGF0YVtfbGFiZWxzVHlwZV1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRpbWVBZ287XG59KCk7XG4vKipcclxuICogRGVmYXVsdCBsb2NhbGUgZ2xvYmFsIHZhcmlhYmxlLlxyXG4gKi9cblxuXG5leHBvcnQgeyBUaW1lQWdvIGFzIGRlZmF1bHQgfTtcbnZhciBkZWZhdWx0TG9jYWxlID0gJ2VuJztcbi8qKlxyXG4gKiBHZXRzIGRlZmF1bHQgbG9jYWxlLlxyXG4gKiBAcmV0dXJuICB7c3RyaW5nfSBsb2NhbGVcclxuICovXG5cblRpbWVBZ28uZ2V0RGVmYXVsdExvY2FsZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRlZmF1bHRMb2NhbGU7XG59O1xuLyoqXHJcbiAqIFNldHMgZGVmYXVsdCBsb2NhbGUuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbG9jYWxlXHJcbiAqL1xuXG5cblRpbWVBZ28uc2V0RGVmYXVsdExvY2FsZSA9IGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgcmV0dXJuIGRlZmF1bHRMb2NhbGUgPSBsb2NhbGU7XG59O1xuLyoqXHJcbiAqIEFkZHMgbG9jYWxlIGRhdGEgZm9yIGEgc3BlY2lmaWMgbG9jYWxlIGFuZCBtYXJrcyB0aGUgbG9jYWxlIGFzIGRlZmF1bHQuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbGVEYXRhXHJcbiAqL1xuXG5cblRpbWVBZ28uYWRkRGVmYXVsdExvY2FsZSA9IGZ1bmN0aW9uIChsb2NhbGVEYXRhKSB7XG4gIGlmIChkZWZhdWx0TG9jYWxlSGFzQmVlblNwZWNpZmllZCkge1xuICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdbamF2YXNjcmlwdC10aW1lLWFnb10gYFRpbWVBZ28uYWRkRGVmYXVsdExvY2FsZSgpYCBjYW4gb25seSBiZSBjYWxsZWQgb25jZS4gVG8gYWRkIG90aGVyIGxvY2FsZXMsIHVzZSBgVGltZUFnby5hZGRMb2NhbGUoKWAuJyk7XG4gIH1cblxuICBkZWZhdWx0TG9jYWxlSGFzQmVlblNwZWNpZmllZCA9IHRydWU7XG4gIFRpbWVBZ28uc2V0RGVmYXVsdExvY2FsZShsb2NhbGVEYXRhLmxvY2FsZSk7XG4gIFRpbWVBZ28uYWRkTG9jYWxlKGxvY2FsZURhdGEpO1xufTtcblxudmFyIGRlZmF1bHRMb2NhbGVIYXNCZWVuU3BlY2lmaWVkO1xuLyoqXHJcbiAqIEFkZHMgbG9jYWxlIGRhdGEgZm9yIGEgc3BlY2lmaWMgbG9jYWxlLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gbG9jYWxlRGF0YVxyXG4gKi9cblxuVGltZUFnby5hZGRMb2NhbGUgPSBmdW5jdGlvbiAobG9jYWxlRGF0YSkge1xuICBhZGRMb2NhbGVEYXRhKGxvY2FsZURhdGEpO1xuICBSZWxhdGl2ZVRpbWVGb3JtYXRQb2x5ZmlsbC5hZGRMb2NhbGUobG9jYWxlRGF0YSk7XG59O1xuLyoqXHJcbiAqIChsZWdhY3kgYWxpYXMpXHJcbiAqIEFkZHMgbG9jYWxlIGRhdGEgZm9yIGEgc3BlY2lmaWMgbG9jYWxlLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gbG9jYWxlRGF0YVxyXG4gKiBAZGVwcmVjYXRlZFxyXG4gKi9cblxuXG5UaW1lQWdvLmxvY2FsZSA9IFRpbWVBZ28uYWRkTG9jYWxlO1xuLyoqXHJcbiAqIEFkZHMgY3VzdG9tIGxhYmVscyB0byBsb2NhbGUgZGF0YS5cclxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gKiBAcGFyYW0ge29iamVjdH0gbGFiZWxzXHJcbiAqL1xuXG5UaW1lQWdvLmFkZExhYmVscyA9IGZ1bmN0aW9uIChsb2NhbGUsIG5hbWUsIGxhYmVscykge1xuICB2YXIgbG9jYWxlRGF0YSA9IGdldExvY2FsZURhdGEobG9jYWxlKTtcblxuICBpZiAoIWxvY2FsZURhdGEpIHtcbiAgICBhZGRMb2NhbGVEYXRhKHtcbiAgICAgIGxvY2FsZTogbG9jYWxlXG4gICAgfSk7XG4gICAgbG9jYWxlRGF0YSA9IGdldExvY2FsZURhdGEobG9jYWxlKTsgLy8gdGhyb3cgbmV3IEVycm9yKGBbamF2YXNjcmlwdC10aW1lLWFnb10gTm8gZGF0YSBmb3IgbG9jYWxlIFwiJHtsb2NhbGV9XCJgKVxuICB9XG5cbiAgbG9jYWxlRGF0YVtuYW1lXSA9IGxhYmVscztcbn07IC8vIE5vcm1hbGl6ZXMgYC5mb3JtYXQoKWAgYHRpbWVgIGFyZ3VtZW50LlxuXG5cbmZ1bmN0aW9uIGdldFRpbWVzdGFtcChpbnB1dCkge1xuICBpZiAoaW5wdXQuY29uc3RydWN0b3IgPT09IERhdGUgfHwgaXNNb2NrZWREYXRlKGlucHV0KSkge1xuICAgIHJldHVybiBpbnB1dC5nZXRUaW1lKCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfSAvLyBGb3Igc29tZSB3ZWlyZCByZWFzb24gaXN0YW5idWwgZG9lc24ndCBzZWUgdGhpcyBgdGhyb3dgIGNvdmVyZWQuXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHJlbGF0aXZlIHRpbWUgZm9ybWF0dGVyIGlucHV0OiBcIi5jb25jYXQoX3R5cGVvZihpbnB1dCksIFwiLCBcIikuY29uY2F0KGlucHV0KSk7XG59IC8vIER1cmluZyB0ZXN0aW5nIHZpYSBzb21lIHRlc3RpbmcgbGlicmFyaWVzIGBEYXRlYHMgYXJlbid0IGFjdHVhbGx5IGBEYXRlYHMuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2F0YW1waGV0YW1pbmUvamF2YXNjcmlwdC10aW1lLWFnby9pc3N1ZXMvMjJcblxuXG5mdW5jdGlvbiBpc01vY2tlZERhdGUob2JqZWN0KSB7XG4gIHJldHVybiBfdHlwZW9mKG9iamVjdCkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3QuZ2V0VGltZSA9PT0gJ2Z1bmN0aW9uJztcbn0gLy8gR2V0IGF2YWlsYWJsZSB0aW1lIGludGVydmFsIG1lYXN1cmVtZW50IHVuaXRzLlxuXG5cbmZ1bmN0aW9uIGdldFRpbWVJbnRlcnZhbE1lYXN1cmVtZW50VW5pdHMoYWxsb3dlZFVuaXRzLCBsYWJlbHMsIG5vd0xhYmVsKSB7XG4gIC8vIEdldCBhbGwgdGltZSBpbnRlcnZhbCBtZWFzdXJlbWVudCB1bml0cyB0aGF0J3JlIGF2YWlsYWJsZVxuICAvLyBpbiBsb2NhbGUgZGF0YSBmb3IgYSBnaXZlbiB0aW1lIGxhYmVscyBzdHlsZS5cbiAgdmFyIHVuaXRzID0gT2JqZWN0LmtleXMobGFiZWxzKTsgLy8gYG5vd2AgdW5pdCBpcyBoYW5kbGVkIHNlcGFyYXRlbHkgYW5kIGlzIHNoaXBwZWQgaW4gaXRzIG93biBgbm93Lmpzb25gIGZpbGUuXG4gIC8vIGBub3cuanNvbmAgaXNuJ3QgcHJlc2VudCBmb3IgYWxsIGxvY2FsZXMsIHNvIGl0IGNvdWxkIGJlIHN1YnN0aXR1dGVkIHdpdGhcbiAgLy8gXCIuc2Vjb25kLmN1cnJlbnRcIi5cbiAgLy8gQWRkIGBub3dgIHVuaXQgaWYgaXQncyBhdmFpbGFibGUgaW4gbG9jYWxlIGRhdGEuXG5cbiAgaWYgKG5vd0xhYmVsKSB7XG4gICAgdW5pdHMucHVzaCgnbm93Jyk7XG4gIH0gLy8gSWYgb25seSBhIHNwZWNpZmljIHNldCBvZiBhdmFpbGFibGUgdGltZSBtZWFzdXJlbWVudCB1bml0cyBjYW4gYmUgdXNlZFxuICAvLyB0aGVuIG9ubHkgdGhvc2UgdW5pdHMgYXJlIGFsbG93ZWQgKGlmIHRoZXkncmUgcHJlc2VudCBpbiBsb2NhbGUgZGF0YSkuXG5cblxuICBpZiAoYWxsb3dlZFVuaXRzKSB7XG4gICAgdW5pdHMgPSBhbGxvd2VkVW5pdHMuZmlsdGVyKGZ1bmN0aW9uICh1bml0KSB7XG4gICAgICByZXR1cm4gdW5pdCA9PT0gJ25vdycgfHwgdW5pdHMuaW5kZXhPZih1bml0KSA+PSAwO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHVuaXRzO1xufVxuXG5mdW5jdGlvbiBnZXROb3dMYWJlbChsYWJlbHMsIG5vd0xhYmVscywgbG9uZ0xhYmVscywgZnV0dXJlKSB7XG4gIHZhciBub3dMYWJlbCA9IGxhYmVscy5ub3cgfHwgbm93TGFiZWxzICYmIG5vd0xhYmVscy5ub3c7IC8vIFNwZWNpZmljIFwibm93XCIgbWVzc2FnZSBmb3JtIGV4dGVuZGVkIGxvY2FsZSBkYXRhIChpZiBwcmVzZW50KS5cblxuICBpZiAobm93TGFiZWwpIHtcbiAgICAvLyBCdW5kbGUgc2l6ZSBvcHRpbWl6YXRpb24gdGVjaG5pcXVlLlxuICAgIGlmICh0eXBlb2Ygbm93TGFiZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbm93TGFiZWw7XG4gICAgfSAvLyBOb3QgaGFuZGxpbmcgYHZhbHVlID09PSAwYCBhcyBgbG9jYWxlRGF0YS5ub3cuY3VycmVudGAgaGVyZVxuICAgIC8vIGJlY2F1c2UgaXQgd291bGRuJ3QgbWFrZSBzZW5zZTogXCJub3dcIiBpcyBhIG1vbWVudCxcbiAgICAvLyBzbyBvbmUgY2FuJ3QgcG9zc2libHkgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGFcbiAgICAvLyBcInByZXZpb3VzXCIgbW9tZW50LCBhIFwiY3VycmVudFwiIG1vbWVudCBhbmQgYSBcIm5leHQgbW9tZW50XCIuXG4gICAgLy8gSXQgY2FuIG9ubHkgYmUgZGlmZmVyZW50aWF0ZWQgYmV0d2VlbiBcInBhc3RcIiBhbmQgXCJmdXR1cmVcIi5cblxuXG4gICAgaWYgKGZ1dHVyZSkge1xuICAgICAgcmV0dXJuIG5vd0xhYmVsLmZ1dHVyZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vd0xhYmVsLnBhc3Q7XG4gICAgfVxuICB9IC8vIFVzZSBcIi5zZWNvbmQuY3VycmVudFwiIGFzIFwibm93XCIgbWVzc2FnZS5cblxuXG4gIGlmIChsb25nTGFiZWxzICYmIGxvbmdMYWJlbHMuc2Vjb25kICYmIGxvbmdMYWJlbHMuc2Vjb25kLmN1cnJlbnQpIHtcbiAgICByZXR1cm4gbG9uZ0xhYmVscy5zZWNvbmQuY3VycmVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0eWxlKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT09ICdzdHJpbmcnIHx8IGlzU3R5bGVPYmplY3QodmFyaWFibGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGltZUFnby5qcy5tYXAiLCJleHBvcnQgZGVmYXVsdCB7XG5cdFwibG9jYWxlXCI6IFwiZW5cIixcblx0XCJsb25nXCI6IHtcblx0XHRcInllYXJcIjoge1xuXHRcdFx0XCJwcmV2aW91c1wiOiBcImxhc3QgeWVhclwiLFxuXHRcdFx0XCJjdXJyZW50XCI6IFwidGhpcyB5ZWFyXCIsXG5cdFx0XHRcIm5leHRcIjogXCJuZXh0IHllYXJcIixcblx0XHRcdFwicGFzdFwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiezB9IHllYXIgYWdvXCIsXG5cdFx0XHRcdFwib3RoZXJcIjogXCJ7MH0geWVhcnMgYWdvXCJcblx0XHRcdH0sXG5cdFx0XHRcImZ1dHVyZVwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiaW4gezB9IHllYXJcIixcblx0XHRcdFx0XCJvdGhlclwiOiBcImluIHswfSB5ZWFyc1wiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInF1YXJ0ZXJcIjoge1xuXHRcdFx0XCJwcmV2aW91c1wiOiBcImxhc3QgcXVhcnRlclwiLFxuXHRcdFx0XCJjdXJyZW50XCI6IFwidGhpcyBxdWFydGVyXCIsXG5cdFx0XHRcIm5leHRcIjogXCJuZXh0IHF1YXJ0ZXJcIixcblx0XHRcdFwicGFzdFwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiezB9IHF1YXJ0ZXIgYWdvXCIsXG5cdFx0XHRcdFwib3RoZXJcIjogXCJ7MH0gcXVhcnRlcnMgYWdvXCJcblx0XHRcdH0sXG5cdFx0XHRcImZ1dHVyZVwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiaW4gezB9IHF1YXJ0ZXJcIixcblx0XHRcdFx0XCJvdGhlclwiOiBcImluIHswfSBxdWFydGVyc1wiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcIm1vbnRoXCI6IHtcblx0XHRcdFwicHJldmlvdXNcIjogXCJsYXN0IG1vbnRoXCIsXG5cdFx0XHRcImN1cnJlbnRcIjogXCJ0aGlzIG1vbnRoXCIsXG5cdFx0XHRcIm5leHRcIjogXCJuZXh0IG1vbnRoXCIsXG5cdFx0XHRcInBhc3RcIjoge1xuXHRcdFx0XHRcIm9uZVwiOiBcInswfSBtb250aCBhZ29cIixcblx0XHRcdFx0XCJvdGhlclwiOiBcInswfSBtb250aHMgYWdvXCJcblx0XHRcdH0sXG5cdFx0XHRcImZ1dHVyZVwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiaW4gezB9IG1vbnRoXCIsXG5cdFx0XHRcdFwib3RoZXJcIjogXCJpbiB7MH0gbW9udGhzXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwid2Vla1wiOiB7XG5cdFx0XHRcInByZXZpb3VzXCI6IFwibGFzdCB3ZWVrXCIsXG5cdFx0XHRcImN1cnJlbnRcIjogXCJ0aGlzIHdlZWtcIixcblx0XHRcdFwibmV4dFwiOiBcIm5leHQgd2Vla1wiLFxuXHRcdFx0XCJwYXN0XCI6IHtcblx0XHRcdFx0XCJvbmVcIjogXCJ7MH0gd2VlayBhZ29cIixcblx0XHRcdFx0XCJvdGhlclwiOiBcInswfSB3ZWVrcyBhZ29cIlxuXHRcdFx0fSxcblx0XHRcdFwiZnV0dXJlXCI6IHtcblx0XHRcdFx0XCJvbmVcIjogXCJpbiB7MH0gd2Vla1wiLFxuXHRcdFx0XHRcIm90aGVyXCI6IFwiaW4gezB9IHdlZWtzXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGF5XCI6IHtcblx0XHRcdFwicHJldmlvdXNcIjogXCJ5ZXN0ZXJkYXlcIixcblx0XHRcdFwiY3VycmVudFwiOiBcInRvZGF5XCIsXG5cdFx0XHRcIm5leHRcIjogXCJ0b21vcnJvd1wiLFxuXHRcdFx0XCJwYXN0XCI6IHtcblx0XHRcdFx0XCJvbmVcIjogXCJ7MH0gZGF5IGFnb1wiLFxuXHRcdFx0XHRcIm90aGVyXCI6IFwiezB9IGRheXMgYWdvXCJcblx0XHRcdH0sXG5cdFx0XHRcImZ1dHVyZVwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiaW4gezB9IGRheVwiLFxuXHRcdFx0XHRcIm90aGVyXCI6IFwiaW4gezB9IGRheXNcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJob3VyXCI6IHtcblx0XHRcdFwiY3VycmVudFwiOiBcInRoaXMgaG91clwiLFxuXHRcdFx0XCJwYXN0XCI6IHtcblx0XHRcdFx0XCJvbmVcIjogXCJ7MH0gaG91ciBhZ29cIixcblx0XHRcdFx0XCJvdGhlclwiOiBcInswfSBob3VycyBhZ29cIlxuXHRcdFx0fSxcblx0XHRcdFwiZnV0dXJlXCI6IHtcblx0XHRcdFx0XCJvbmVcIjogXCJpbiB7MH0gaG91clwiLFxuXHRcdFx0XHRcIm90aGVyXCI6IFwiaW4gezB9IGhvdXJzXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwibWludXRlXCI6IHtcblx0XHRcdFwiY3VycmVudFwiOiBcInRoaXMgbWludXRlXCIsXG5cdFx0XHRcInBhc3RcIjoge1xuXHRcdFx0XHRcIm9uZVwiOiBcInswfSBtaW51dGUgYWdvXCIsXG5cdFx0XHRcdFwib3RoZXJcIjogXCJ7MH0gbWludXRlcyBhZ29cIlxuXHRcdFx0fSxcblx0XHRcdFwiZnV0dXJlXCI6IHtcblx0XHRcdFx0XCJvbmVcIjogXCJpbiB7MH0gbWludXRlXCIsXG5cdFx0XHRcdFwib3RoZXJcIjogXCJpbiB7MH0gbWludXRlc1wiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInNlY29uZFwiOiB7XG5cdFx0XHRcImN1cnJlbnRcIjogXCJub3dcIixcblx0XHRcdFwicGFzdFwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiezB9IHNlY29uZCBhZ29cIixcblx0XHRcdFx0XCJvdGhlclwiOiBcInswfSBzZWNvbmRzIGFnb1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJmdXR1cmVcIjoge1xuXHRcdFx0XHRcIm9uZVwiOiBcImluIHswfSBzZWNvbmRcIixcblx0XHRcdFx0XCJvdGhlclwiOiBcImluIHswfSBzZWNvbmRzXCJcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdFwic2hvcnRcIjoge1xuXHRcdFwieWVhclwiOiB7XG5cdFx0XHRcInByZXZpb3VzXCI6IFwibGFzdCB5ci5cIixcblx0XHRcdFwiY3VycmVudFwiOiBcInRoaXMgeXIuXCIsXG5cdFx0XHRcIm5leHRcIjogXCJuZXh0IHlyLlwiLFxuXHRcdFx0XCJwYXN0XCI6IFwiezB9IHlyLiBhZ29cIixcblx0XHRcdFwiZnV0dXJlXCI6IFwiaW4gezB9IHlyLlwiXG5cdFx0fSxcblx0XHRcInF1YXJ0ZXJcIjoge1xuXHRcdFx0XCJwcmV2aW91c1wiOiBcImxhc3QgcXRyLlwiLFxuXHRcdFx0XCJjdXJyZW50XCI6IFwidGhpcyBxdHIuXCIsXG5cdFx0XHRcIm5leHRcIjogXCJuZXh0IHF0ci5cIixcblx0XHRcdFwicGFzdFwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiezB9IHF0ci4gYWdvXCIsXG5cdFx0XHRcdFwib3RoZXJcIjogXCJ7MH0gcXRycy4gYWdvXCJcblx0XHRcdH0sXG5cdFx0XHRcImZ1dHVyZVwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiaW4gezB9IHF0ci5cIixcblx0XHRcdFx0XCJvdGhlclwiOiBcImluIHswfSBxdHJzLlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcIm1vbnRoXCI6IHtcblx0XHRcdFwicHJldmlvdXNcIjogXCJsYXN0IG1vLlwiLFxuXHRcdFx0XCJjdXJyZW50XCI6IFwidGhpcyBtby5cIixcblx0XHRcdFwibmV4dFwiOiBcIm5leHQgbW8uXCIsXG5cdFx0XHRcInBhc3RcIjogXCJ7MH0gbW8uIGFnb1wiLFxuXHRcdFx0XCJmdXR1cmVcIjogXCJpbiB7MH0gbW8uXCJcblx0XHR9LFxuXHRcdFwid2Vla1wiOiB7XG5cdFx0XHRcInByZXZpb3VzXCI6IFwibGFzdCB3ay5cIixcblx0XHRcdFwiY3VycmVudFwiOiBcInRoaXMgd2suXCIsXG5cdFx0XHRcIm5leHRcIjogXCJuZXh0IHdrLlwiLFxuXHRcdFx0XCJwYXN0XCI6IFwiezB9IHdrLiBhZ29cIixcblx0XHRcdFwiZnV0dXJlXCI6IFwiaW4gezB9IHdrLlwiXG5cdFx0fSxcblx0XHRcImRheVwiOiB7XG5cdFx0XHRcInByZXZpb3VzXCI6IFwieWVzdGVyZGF5XCIsXG5cdFx0XHRcImN1cnJlbnRcIjogXCJ0b2RheVwiLFxuXHRcdFx0XCJuZXh0XCI6IFwidG9tb3Jyb3dcIixcblx0XHRcdFwicGFzdFwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiezB9IGRheSBhZ29cIixcblx0XHRcdFx0XCJvdGhlclwiOiBcInswfSBkYXlzIGFnb1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJmdXR1cmVcIjoge1xuXHRcdFx0XHRcIm9uZVwiOiBcImluIHswfSBkYXlcIixcblx0XHRcdFx0XCJvdGhlclwiOiBcImluIHswfSBkYXlzXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiaG91clwiOiB7XG5cdFx0XHRcImN1cnJlbnRcIjogXCJ0aGlzIGhvdXJcIixcblx0XHRcdFwicGFzdFwiOiBcInswfSBoci4gYWdvXCIsXG5cdFx0XHRcImZ1dHVyZVwiOiBcImluIHswfSBoci5cIlxuXHRcdH0sXG5cdFx0XCJtaW51dGVcIjoge1xuXHRcdFx0XCJjdXJyZW50XCI6IFwidGhpcyBtaW51dGVcIixcblx0XHRcdFwicGFzdFwiOiBcInswfSBtaW4uIGFnb1wiLFxuXHRcdFx0XCJmdXR1cmVcIjogXCJpbiB7MH0gbWluLlwiXG5cdFx0fSxcblx0XHRcInNlY29uZFwiOiB7XG5cdFx0XHRcImN1cnJlbnRcIjogXCJub3dcIixcblx0XHRcdFwicGFzdFwiOiBcInswfSBzZWMuIGFnb1wiLFxuXHRcdFx0XCJmdXR1cmVcIjogXCJpbiB7MH0gc2VjLlwiXG5cdFx0fVxuXHR9LFxuXHRcIm5hcnJvd1wiOiB7XG5cdFx0XCJ5ZWFyXCI6IHtcblx0XHRcdFwicHJldmlvdXNcIjogXCJsYXN0IHlyLlwiLFxuXHRcdFx0XCJjdXJyZW50XCI6IFwidGhpcyB5ci5cIixcblx0XHRcdFwibmV4dFwiOiBcIm5leHQgeXIuXCIsXG5cdFx0XHRcInBhc3RcIjogXCJ7MH0geXIuIGFnb1wiLFxuXHRcdFx0XCJmdXR1cmVcIjogXCJpbiB7MH0geXIuXCJcblx0XHR9LFxuXHRcdFwicXVhcnRlclwiOiB7XG5cdFx0XHRcInByZXZpb3VzXCI6IFwibGFzdCBxdHIuXCIsXG5cdFx0XHRcImN1cnJlbnRcIjogXCJ0aGlzIHF0ci5cIixcblx0XHRcdFwibmV4dFwiOiBcIm5leHQgcXRyLlwiLFxuXHRcdFx0XCJwYXN0XCI6IHtcblx0XHRcdFx0XCJvbmVcIjogXCJ7MH0gcXRyLiBhZ29cIixcblx0XHRcdFx0XCJvdGhlclwiOiBcInswfSBxdHJzLiBhZ29cIlxuXHRcdFx0fSxcblx0XHRcdFwiZnV0dXJlXCI6IHtcblx0XHRcdFx0XCJvbmVcIjogXCJpbiB7MH0gcXRyLlwiLFxuXHRcdFx0XHRcIm90aGVyXCI6IFwiaW4gezB9IHF0cnMuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwibW9udGhcIjoge1xuXHRcdFx0XCJwcmV2aW91c1wiOiBcImxhc3QgbW8uXCIsXG5cdFx0XHRcImN1cnJlbnRcIjogXCJ0aGlzIG1vLlwiLFxuXHRcdFx0XCJuZXh0XCI6IFwibmV4dCBtby5cIixcblx0XHRcdFwicGFzdFwiOiBcInswfSBtby4gYWdvXCIsXG5cdFx0XHRcImZ1dHVyZVwiOiBcImluIHswfSBtby5cIlxuXHRcdH0sXG5cdFx0XCJ3ZWVrXCI6IHtcblx0XHRcdFwicHJldmlvdXNcIjogXCJsYXN0IHdrLlwiLFxuXHRcdFx0XCJjdXJyZW50XCI6IFwidGhpcyB3ay5cIixcblx0XHRcdFwibmV4dFwiOiBcIm5leHQgd2suXCIsXG5cdFx0XHRcInBhc3RcIjogXCJ7MH0gd2suIGFnb1wiLFxuXHRcdFx0XCJmdXR1cmVcIjogXCJpbiB7MH0gd2suXCJcblx0XHR9LFxuXHRcdFwiZGF5XCI6IHtcblx0XHRcdFwicHJldmlvdXNcIjogXCJ5ZXN0ZXJkYXlcIixcblx0XHRcdFwiY3VycmVudFwiOiBcInRvZGF5XCIsXG5cdFx0XHRcIm5leHRcIjogXCJ0b21vcnJvd1wiLFxuXHRcdFx0XCJwYXN0XCI6IHtcblx0XHRcdFx0XCJvbmVcIjogXCJ7MH0gZGF5IGFnb1wiLFxuXHRcdFx0XHRcIm90aGVyXCI6IFwiezB9IGRheXMgYWdvXCJcblx0XHRcdH0sXG5cdFx0XHRcImZ1dHVyZVwiOiB7XG5cdFx0XHRcdFwib25lXCI6IFwiaW4gezB9IGRheVwiLFxuXHRcdFx0XHRcIm90aGVyXCI6IFwiaW4gezB9IGRheXNcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJob3VyXCI6IHtcblx0XHRcdFwiY3VycmVudFwiOiBcInRoaXMgaG91clwiLFxuXHRcdFx0XCJwYXN0XCI6IFwiezB9IGhyLiBhZ29cIixcblx0XHRcdFwiZnV0dXJlXCI6IFwiaW4gezB9IGhyLlwiXG5cdFx0fSxcblx0XHRcIm1pbnV0ZVwiOiB7XG5cdFx0XHRcImN1cnJlbnRcIjogXCJ0aGlzIG1pbnV0ZVwiLFxuXHRcdFx0XCJwYXN0XCI6IFwiezB9IG1pbi4gYWdvXCIsXG5cdFx0XHRcImZ1dHVyZVwiOiBcImluIHswfSBtaW4uXCJcblx0XHR9LFxuXHRcdFwic2Vjb25kXCI6IHtcblx0XHRcdFwiY3VycmVudFwiOiBcIm5vd1wiLFxuXHRcdFx0XCJwYXN0XCI6IFwiezB9IHNlYy4gYWdvXCIsXG5cdFx0XHRcImZ1dHVyZVwiOiBcImluIHswfSBzZWMuXCJcblx0XHR9XG5cdH0sXG5cdFwibm93XCI6IHtcblx0XHRcIm5vd1wiOiB7XG5cdFx0XHRcImN1cnJlbnRcIjogXCJub3dcIixcblx0XHRcdFwiZnV0dXJlXCI6IFwiaW4gYSBtb21lbnRcIixcblx0XHRcdFwicGFzdFwiOiBcImp1c3Qgbm93XCJcblx0XHR9XG5cdH0sXG5cdFwibWluaVwiOiB7XG5cdFx0XCJ5ZWFyXCI6IFwiezB9eXJcIixcblx0XHRcIm1vbnRoXCI6IFwiezB9bW9cIixcblx0XHRcIndlZWtcIjogXCJ7MH13a1wiLFxuXHRcdFwiZGF5XCI6IFwiezB9ZFwiLFxuXHRcdFwiaG91clwiOiBcInswfWhcIixcblx0XHRcIm1pbnV0ZVwiOiBcInswfW1cIixcblx0XHRcInNlY29uZFwiOiBcInswfXNcIixcblx0XHRcIm5vd1wiOiBcIm5vd1wiXG5cdH0sXG5cdFwic2hvcnQtdGltZVwiOiB7XG5cdFx0XCJ5ZWFyXCI6IFwiezB9IHlyLlwiLFxuXHRcdFwibW9udGhcIjogXCJ7MH0gbW8uXCIsXG5cdFx0XCJ3ZWVrXCI6IFwiezB9IHdrLlwiLFxuXHRcdFwiZGF5XCI6IHtcblx0XHRcdFwib25lXCI6IFwiezB9IGRheVwiLFxuXHRcdFx0XCJvdGhlclwiOiBcInswfSBkYXlzXCJcblx0XHR9LFxuXHRcdFwiaG91clwiOiBcInswfSBoci5cIixcblx0XHRcIm1pbnV0ZVwiOiBcInswfSBtaW4uXCIsXG5cdFx0XCJzZWNvbmRcIjogXCJ7MH0gc2VjLlwiXG5cdH0sXG5cdFwibG9uZy10aW1lXCI6IHtcblx0XHRcInllYXJcIjoge1xuXHRcdFx0XCJvbmVcIjogXCJ7MH0geWVhclwiLFxuXHRcdFx0XCJvdGhlclwiOiBcInswfSB5ZWFyc1wiXG5cdFx0fSxcblx0XHRcIm1vbnRoXCI6IHtcblx0XHRcdFwib25lXCI6IFwiezB9IG1vbnRoXCIsXG5cdFx0XHRcIm90aGVyXCI6IFwiezB9IG1vbnRoc1wiXG5cdFx0fSxcblx0XHRcIndlZWtcIjoge1xuXHRcdFx0XCJvbmVcIjogXCJ7MH0gd2Vla1wiLFxuXHRcdFx0XCJvdGhlclwiOiBcInswfSB3ZWVrc1wiXG5cdFx0fSxcblx0XHRcImRheVwiOiB7XG5cdFx0XHRcIm9uZVwiOiBcInswfSBkYXlcIixcblx0XHRcdFwib3RoZXJcIjogXCJ7MH0gZGF5c1wiXG5cdFx0fSxcblx0XHRcImhvdXJcIjoge1xuXHRcdFx0XCJvbmVcIjogXCJ7MH0gaG91clwiLFxuXHRcdFx0XCJvdGhlclwiOiBcInswfSBob3Vyc1wiXG5cdFx0fSxcblx0XHRcIm1pbnV0ZVwiOiB7XG5cdFx0XHRcIm9uZVwiOiBcInswfSBtaW51dGVcIixcblx0XHRcdFwib3RoZXJcIjogXCJ7MH0gbWludXRlc1wiXG5cdFx0fSxcblx0XHRcInNlY29uZFwiOiB7XG5cdFx0XHRcIm9uZVwiOiBcInswfSBzZWNvbmRcIixcblx0XHRcdFwib3RoZXJcIjogXCJ7MH0gc2Vjb25kc1wiXG5cdFx0fVxuXHR9XG59IiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHdpZHRoPVxcXCIxOFxcXCIgaGVpZ2h0PVxcXCIxOFxcXCIgdmlld0JveD1cXFwiMCAwIDE4IDE4XFxcIiBmaWxsPVxcXCJub25lXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPlxcbjxwYXRoIGQ9XFxcIk0xMiA2SDE4VjhIMTJWNlpcXFwiIGZpbGw9XFxcIiNGN0Y3RjdcXFwiLz5cXG48cGF0aCBkPVxcXCJNMTQgMTBMMTQgNEwxNiA0TDE2IDEwTDE0IDEwWlxcXCIgZmlsbD1cXFwiI0Y3RjdGN1xcXCIvPlxcbjxjaXJjbGUgY3g9XFxcIjdcXFwiIGN5PVxcXCI1XFxcIiByPVxcXCIyXFxcIiBzdHJva2U9XFxcIiNGN0Y3RjdcXFwiIHN0cm9rZS13aWR0aD1cXFwiMlxcXCIvPlxcbjxwYXRoIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCIgY2xpcC1ydWxlPVxcXCJldmVub2RkXFxcIiBkPVxcXCJNMSAxNUMxLjQ3NjA4IDEyLjE2MjMgMy45NDQwNSAxMCA2LjkxNzA0IDEwQzkuODkwMDQgMTAgMTIuMzU4IDEyLjE2MjMgMTIuODM0MSAxNUgxMC43OTFDMTAuMzQ3IDEzLjI3NDggOC43ODA4OCAxMiA2LjkxNzA0IDEyQzUuMDUzMiAxMiAzLjQ4NzEgMTMuMjc0OCAzLjA0MzA2IDE1SDFaXFxcIiBmaWxsPVxcXCIjRjdGN0Y3XFxcIi8+XFxuPC9zdmc+XFxuXCIiLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIiBsYW5nPVwidHNcIj5cblx0aW1wb3J0IHR5cGUgeyBQZnBQYXRoIH0gZnJvbSAnIy9tZXRhL3BmcCc7XG5cblx0ZXhwb3J0IGVudW0gVHhuQ29udGV4dCB7XG5cdFx0Tk9ORT0nbm9uZScsXG5cdFx0VE9LRU49J3Rva2VuJyxcblx0XHRDT05UQUNUPSdjb250YWN0Jyxcblx0fVxuXG5cdGludGVyZmFjZSBEZXRhaWwge1xuXHRcdGljb246IEhUTUxFbGVtZW50O1xuXHRcdG5hbWU6IHN0cmluZztcblx0XHR0aXRsZTogc3RyaW5nO1xuXHRcdHN1YnRpdGxlOiBzdHJpbmc7XG5cdFx0YW1vdW50Pzogc3RyaW5nO1xuXHRcdGZpYXQ/OiBzdHJpbmc7XG5cdFx0cGZwPzogUGZwUGF0aDtcblx0XHRwZW5kaW5nPzogYm9vbGVhbjtcblx0XHRsaW5rPzogbnVsbCB8IHtcblx0XHRcdGhyZWY6IHN0cmluZztcblx0XHRcdHRleHQ6IHN0cmluZztcblx0XHR9O1xuXHR9XG48L3NjcmlwdD5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0aW1wb3J0IHR5cGUgeyBFdmVudFR5cGVLZXksIExvZ0V2ZW50IH0gZnJvbSAnIy9tZXRhL3N0b3JlJztcblx0aW1wb3J0IHsgZGQsIG9wZW5fZXh0ZXJuYWxfbGluayB9IGZyb20gJyMvdXRpbC9kb20nO1xuXG5cdGltcG9ydCBSb3cgZnJvbSAnLi4vdWkvUm93LnN2ZWx0ZSc7XG5cblx0aW1wb3J0IFRpbWVBZ28gZnJvbSAnamF2YXNjcmlwdC10aW1lLWFnbyc7XG5cdGltcG9ydCBlbmdsaXNoX2xvY2FsZSBmcm9tICdqYXZhc2NyaXB0LXRpbWUtYWdvL2xvY2FsZS9lbic7XG5cblx0aW1wb3J0IFNYX1NFTkQgZnJvbSAnIy9pY29uL3NlbmQuc3ZnP3Jhdyc7XG5cdGltcG9ydCBTWF9SRUNWIGZyb20gJyMvaWNvbi9yZWN2LnN2Zz9yYXcnO1xuXHRpbXBvcnQgU1hfQUNDX0NSRUFURUQgZnJvbSAnIy9pY29uL2FjY291bnQtYWRkZWQuc3ZnP3Jhdyc7XG5cdGltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcblx0aW1wb3J0IHsgQ2hhaW5zIH0gZnJvbSAnIy9zdG9yZS9jaGFpbnMnO1xuXHRpbXBvcnQgdHlwZSB7IFByb21pc2FibGUgfSBmcm9tICcjL3V0aWwvYmVsdCc7XG5cdGltcG9ydCB7IGFiYnJldmlhdGVfYWRkciwgZm9ybWF0X2Ftb3VudCB9IGZyb20gJyMvdXRpbC9mb3JtYXQnO1xuXHRpbXBvcnQgeyBBY2NvdW50cyB9IGZyb20gJyMvc3RvcmUvYWNjb3VudHMnO1xuXHRpbXBvcnQgdHlwZSB7IEFjY291bnRQYXRoIH0gZnJvbSAnIy9tZXRhL2FjY291bnQnO1xuXHRpbXBvcnQgeyBBZ2VudHMgfSBmcm9tICcjL3N0b3JlL2FnZW50cyc7XG5cdGltcG9ydCBQdXQgZnJvbSAnLi4vdWkvUHV0LnN2ZWx0ZSc7XG5cdGltcG9ydCBQZnBEaXNwbGF5IGZyb20gJy4uL3VpL1BmcERpc3BsYXkuc3ZlbHRlJztcbmltcG9ydCB7IEVudGl0aWVzIH0gZnJvbSAnIy9zdG9yZS9lbnRpdGllcyc7XG5pbXBvcnQgeyBSX1RSQU5TRkVSX0FNT1VOVCB9IGZyb20gJyMvc2hhcmUvY29uc3RhbnRzJztcblxuXHQvLyBpbXBvcnQge2RlZmluaXRpb259IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVJvYm90Jztcblx0Ly8gY29uc3QgU1hQX1JPQk9UID0gZGVmaW5pdGlvbi5pY29uWzRdO1xuXHRjb25zdCBTWFBfUk9CT1QgPSAnJztcblxuXHQvLyBpbXBvcnQgU1hfUEVSU09OQUwgZnJvbSAnQG1hdGVyaWFsLWRlc2lnbi1pY29ucy9zdmcvb3V0bGluZWQvYWNjb3VudF9ib3guc3ZnP3Jhdyc7XG5cdC8vIGltcG9ydCBTWF9DT05UUkFDVCBmcm9tICdAbWF0ZXJpYWwtZGVzaWduLWljb25zL3N2Zy9vdXRsaW5lZC9hbmFseXRpY3Muc3ZnP3Jhdyc7XG5cblx0ZXhwb3J0IGxldCBldmVudHM6IExvZ0V2ZW50W107XG5cdGV4cG9ydCBsZXQgY29udGV4dDogVHhuQ29udGV4dCA9IFR4bkNvbnRleHQuTk9ORTtcblxuXHRjb25zdCBiX2N0eF9jb250YWN0ID0gY29udGV4dCA9PT0gVHhuQ29udGV4dC5DT05UQUNUO1xuXHRjb25zdCBiX2N0eF90b2tlbiA9IGNvbnRleHQgPT09IFR4bkNvbnRleHQuVE9LRU47XG5cblx0Ly8gY29uc3QgSF9UWE5fSUNPTlMgPSB7XG5cdC8vIFx0W1R4bi5UeXBlLlVOS05dOiBJY29uLkJMQU5LLFxuXHQvLyBcdFtUeG4uVHlwZS5TRU5EXTogSWNvbi5mcm9tSHRtbChTWF9TRU5ELCB7Y2xhc3M6J2ljb24tMjAnfSksXG5cdC8vIFx0W1R4bi5UeXBlLlJFQ1ZdOiBJY29uLmZyb21IdG1sKFNYX1JFQ1YsIHtjbGFzczonaWNvbi0yMCd9KSxcblx0Ly8gXHRbVHhuLlR5cGUuQ09NUF06IEljb24uZnJvbUh0bWwoYDxzdmc+PHBhdGggZD1cIiR7U1hQX1JPQk9UfVwiLz48L3N2Zz5gLCB7Y2xhc3M6J2ljb24tMjAnfSksXG5cdC8vIFx0W1R4bi5UeXBlLlNOSVAyMF9YRkVSXTogSWNvbi5mcm9tSHRtbChTWF9SRUNWLCB7Y2xhc3M6J2ljb24tMjAnfSksXG5cdC8vIH0gYXMgUmVjb3JkPFR4bi5UeXBlIHwgVHhuLkJhbmtpc2hUeXBlLCBJY29uPjtcblxuXHQvLyBjb25zdCBIX1NVTU1BUklaRVJTID0ge1xuXHQvLyBcdFtUeG4uVHlwZS5VTktOXTogXyA9PiAnVW5rbm93bicsXG5cdC8vIFx0W1R4bi5UeXBlLlNFTkRdOiBrID0+IGBTZW5kIG9uICR7ay5kYXRlKCl9YCxcblx0Ly8gXHRbVHhuLlR5cGUuUkVDVl06IGsgPT4gYFJlY3Ygb24gJHtrLmRhdGUoKX1gLFxuXHQvLyBcdFtUeG4uVHlwZS5DT01QXTogayA9PiBgQ29tcHV0ZSBvbiAke2suZGF0ZSgpfWAsXG5cdC8vIH0gYXMgUmVjb3JkPFR4bi5UeXBlIHwgVHhuLkJhbmtpc2hUeXBlLCAoa190eG46IFR4bikgPT4gc3RyaW5nPjtcblxuXHQvLyBjb25zdCBIX1RYTl9DTEFTU0VTID0ge1xuXHQvLyBcdFtUeG4uVHlwZS5TRU5EXTogJ2NvbG9yLWljb24tc2VuZCcsXG5cdC8vIFx0W1R4bi5UeXBlLlJFQ1ZdOiAnY29sb3ItaWNvbi1yZWN2Jyxcblx0Ly8gfSBhcyBSZWNvcmQ8VHhuLlR5cGUgfCBUeG4uQmFua2lzaFR5cGUsIHN0cmluZz47XG5cblx0Y29uc3QgbWtfaWNvbiA9IChzeF9pY29uOiBzdHJpbmcpID0+IHtcblx0XHRjb25zdCBkbV9pY29uID0gZGQoJ3NwYW4nLCB7XG5cdFx0XHRjbGFzczogJ2V2ZW50LWljb24nLFxuXHRcdH0pO1xuXHRcdGRtX2ljb24uaW5uZXJIVE1MID0gc3hfaWNvbjtcblx0XHRyZXR1cm4gZG1faWNvbjtcblx0fTtcblxuXHRjb25zdCBETV9JQ09OX1NFTkQgPSBta19pY29uKFNYX1NFTkQpO1xuXHRjb25zdCBETV9JQ09OX1JFQ1YgPSBta19pY29uKFNYX1JFQ1YpO1xuXHRjb25zdCBETV9JQ09OX0FDQ19DUkVBVEVEID0gbWtfaWNvbihTWF9BQ0NfQ1JFQVRFRCk7XG5cblxuXHRUaW1lQWdvLmFkZERlZmF1bHRMb2NhbGUoZW5nbGlzaF9sb2NhbGUpO1xuXHRjb25zdCB5X2FnbyA9IG5ldyBUaW1lQWdvKCdlbi1VUycpO1xuXG5cdGZ1bmN0aW9uIGZvcm1hdF90aW1lX2Fnbyh4dF93aGVuOiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdHJldHVybiB5X2Fnby5mb3JtYXQoeHRfd2hlbiwgJ3R3aXR0ZXInKTtcblx0fVxuXG5cdGNvbnN0IEhfRVZFTlRfTUFQOiB7XG5cdFx0W3NpX3R5cGUgaW4gRXZlbnRUeXBlS2V5XTogKGc6IExvZ0V2ZW50PHNpX3R5cGU+KSA9PiBQcm9taXNhYmxlPERldGFpbD47XG5cdH0gPSB7XG5cdFx0YXN5bmMgcGVuZGluZyhnX2V2ZW50KSB7XG5cdFx0XHRjb25zdCB7XG5cdFx0XHRcdHRpbWU6IHh0X3doZW4sXG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRjaGFpbjogcF9jaGFpbixcblx0XHRcdFx0XHRjb2luOiBzaV9jb2luLFxuXHRcdFx0XHRcdGhhc2g6IHNpX3R4bixcblx0XHRcdFx0XHRvd25lcjogc2Ffb3duZXIsXG5cdFx0XHRcdFx0bXNnOiBnX21zZyxcblx0XHRcdFx0fSxcblx0XHRcdH0gPSBnX2V2ZW50O1xuXG5cblx0XHRcdGNvbnN0IGdfY2hhaW4gPSAoYXdhaXQgQ2hhaW5zLmF0KHBfY2hhaW4pKSE7XG5cblx0XHRcdGNvbnN0IGdfY29pbiA9IGdfY2hhaW4uY29pbnNbc2lfY29pbl07XG5cblx0XHRcdGNvbnN0IHhfYW1vdW50ID0gbmV3IEJpZ051bWJlcihnX2V2ZW50LmRhdGEubXNnLmFtb3VudFswXS5hbW91bnQpLnNoaWZ0ZWRCeSgtZ19jaGFpbi5jb2luc1tzaV9jb2luXS5kZWNpbWFscykudG9OdW1iZXIoKTtcblxuXHRcdFx0Y29uc3Qgc2FfcmVjaXBpZW50ID0gZ19tc2cudG9BZGRyZXNzO1xuXHRcdFx0Y29uc3QgcF9jb250YWN0ID0gQWdlbnRzLnBhdGhGb3JDb250YWN0KHNhX3JlY2lwaWVudCk7XG5cdFx0XHRjb25zdCBnX2NvbnRhY3QgPSBhd2FpdCBBZ2VudHMuZ2V0Q29udGFjdChwX2NvbnRhY3QpO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0aXRsZTogYFNlbmQgJHtnX2NvaW4ubmFtZX1gLFxuXHRcdFx0XHRuYW1lOiBzaV9jb2luLFxuXHRcdFx0XHRpY29uOiBETV9JQ09OX1NFTkQsXG5cdFx0XHRcdHN1YnRpdGxlOiBgJHtmb3JtYXRfdGltZV9hZ28oeHRfd2hlbil9IC8gJHtnX2NvbnRhY3Q/IGdfY29udGFjdC5uYW1lOiBzYV9yZWNpcGllbnR9YCxcblx0XHRcdFx0YW1vdW50OiBgJHtmb3JtYXRfYW1vdW50KHhfYW1vdW50LCB0cnVlKX0gJHtzaV9jb2lufWAsXG5cdFx0XHRcdHBmcDogZ19jb2luLnBmcCxcblx0XHRcdFx0cGVuZGluZzogdHJ1ZSxcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdGFzeW5jIHNlbmQoZ19ldmVudCkge1xuXHRcdFx0Y29uc3Qge1xuXHRcdFx0XHR0aW1lOiB4dF93aGVuLFxuXHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0Y2hhaW46IHBfY2hhaW4sXG5cdFx0XHRcdFx0Y29pbjogc2lfY29pbixcblx0XHRcdFx0XHRoYXNoOiBzaV90eG4sXG5cdFx0XHRcdFx0b3duZXI6IHNhX293bmVyLFxuXHRcdFx0XHRcdG1zZzogZ19tc2csXG5cdFx0XHRcdFx0aGVpZ2h0OiBzX2hlaWdodCxcblx0XHRcdFx0fSxcblx0XHRcdH0gPSBnX2V2ZW50O1xuXG5cblx0XHRcdGNvbnN0IGdfY2hhaW4gPSAoYXdhaXQgQ2hhaW5zLmF0KHBfY2hhaW4pKSE7XG5cblx0XHRcdGNvbnN0IGdfY29pbiA9IGdfY2hhaW4uY29pbnNbc2lfY29pbl07XG5cblx0XHRcdGNvbnN0IHhfYW1vdW50ID0gbmV3IEJpZ051bWJlcihnX2V2ZW50LmRhdGEubXNnLmFtb3VudFswXS5hbW91bnQpLnNoaWZ0ZWRCeSgtZ19jaGFpbi5jb2luc1tzaV9jb2luXS5kZWNpbWFscykudG9OdW1iZXIoKTtcblxuXHRcdFx0Y29uc3Qgc2FfcmVjaXBpZW50ID0gZ19tc2cudG9BZGRyZXNzO1xuXHRcdFx0Y29uc3QgcF9jb250YWN0ID0gQWdlbnRzLnBhdGhGb3JDb250YWN0KHNhX3JlY2lwaWVudCk7XG5cdFx0XHRjb25zdCBnX2NvbnRhY3QgPSBhd2FpdCBBZ2VudHMuZ2V0Q29udGFjdChwX2NvbnRhY3QpO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0aXRsZTogYFNlbnQgJHtnX2NvaW4ubmFtZX1gLFxuXHRcdFx0XHRuYW1lOiBzaV9jb2luLFxuXHRcdFx0XHRpY29uOiBta19pY29uKFNYX1NFTkQpLFxuXHRcdFx0XHRzdWJ0aXRsZTogYCR7Zm9ybWF0X3RpbWVfYWdvKHh0X3doZW4pfSAvICR7Z19jb250YWN0PyBnX2NvbnRhY3QubmFtZTogYWJicmV2aWF0ZV9hZGRyKHNhX3JlY2lwaWVudCl9YCxcblx0XHRcdFx0YW1vdW50OiBgJHtmb3JtYXRfYW1vdW50KHhfYW1vdW50LCB0cnVlKX0gJHtzaV9jb2lufWAsXG5cdFx0XHRcdGxpbms6ICdTQ1JUJyA9PT0gc2lfY29pblxuXHRcdFx0XHRcdD8ge1xuXHRcdFx0XHRcdFx0aHJlZjogYGh0dHBzOi8vc2VjcmV0bm9kZXMuY29tL3NlY3JldC9jaGFpbnMvcHVsc2FyLTIvYmxvY2tzLyR7c19oZWlnaHR9L3RyYW5zYWN0aW9ucy8ke3NpX3R4bn1gLFxuXHRcdFx0XHRcdFx0dGV4dDogJ1ZpZXcgb24gYmxvY2sgZXhwbG9yZXInLFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQ6IG51bGwsXG5cdFx0XHRcdHBmcDogZ19jb2luLnBmcCxcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdGFzeW5jIGFjY291bnRfY3JlYXRlZChnX2V2ZW50KSB7XG5cdFx0XHRjb25zdCB7XG5cdFx0XHRcdHRpbWU6IHh0X3doZW4sXG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRhY2NvdW50OiBwX2FjY291bnQsXG5cdFx0XHRcdH0sXG5cdFx0XHR9ID0gZ19ldmVudDtcblxuXHRcdFx0Y29uc3QgZ19hY2NvdW50ID0gKGF3YWl0IEFjY291bnRzLmF0KHBfYWNjb3VudCkpITtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dGl0bGU6IGBBY2NvdW50IGNyZWF0ZWRgLFxuXHRcdFx0XHRzdWJ0aXRsZTogYCR7Zm9ybWF0X3RpbWVfYWdvKHh0X3doZW4pfSAvICR7Z19hY2NvdW50Lm5hbWV9YCxcblx0XHRcdFx0bmFtZTogZ19hY2NvdW50Lm5hbWUsXG5cdFx0XHRcdGljb246IG1rX2ljb24oU1hfQUNDX0NSRUFURUQpLFxuXHRcdFx0XHRwZnA6IGdfYWNjb3VudC5wZnAgfHwgJycsXG5cdFx0XHR9O1xuXHRcdH0sXG5cblxuXHRcdGFzeW5jIHJlY2VpdmUoZ19ldmVudCkge1xuXHRcdFx0Y29uc3Qge1xuXHRcdFx0XHR0aW1lOiB4dF93aGVuLFxuXHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0aGVpZ2h0OiBzX2hlaWdodCxcblx0XHRcdFx0XHRhbW91bnQ6IHNfYW1vdW50LFxuXHRcdFx0XHRcdGNoYWluOiBwX2NoYWluLFxuXHRcdFx0XHRcdGNvaW46IHNpX2NvaW4sXG5cdFx0XHRcdFx0cmVjaXBpZW50OiBzYV9yZWNpcGllbnQsXG5cdFx0XHRcdFx0c2VuZGVyOiBzYV9zZW5kZXIsXG5cdFx0XHRcdH0sXG5cdFx0XHR9ID0gZ19ldmVudDtcblxuXHRcdFx0Y29uc3Qgc2Ffb3RoZXIgPSBzYV9zZW5kZXI7XG5cdFx0XHRjb25zdCBwX2NvbnRhY3QgPSBBZ2VudHMucGF0aEZvckNvbnRhY3Qoc2Ffb3RoZXIpO1xuXHRcdFx0Y29uc3QgZ19jb250YWN0ID0gYXdhaXQgQWdlbnRzLmdldENvbnRhY3QocF9jb250YWN0KTtcblxuXHRcdFx0Y29uc3QgZ19jaGFpbiA9IChhd2FpdCBDaGFpbnMuYXQocF9jaGFpbikpITtcblx0XHRcdGNvbnN0IGdfY29pbiA9IGdfY2hhaW4uY29pbnNbc2lfY29pbl07XG5cblx0XHRcdGNvbnN0IFssIHNfc2l6ZV0gPSBSX1RSQU5TRkVSX0FNT1VOVC5leGVjKHNfYW1vdW50KSE7XG5cblx0XHRcdGNvbnN0IHhfYW1vdW50ID0gbmV3IEJpZ051bWJlcihzX3NpemUpLnNoaWZ0ZWRCeSgtZ19jaGFpbi5jb2luc1tzaV9jb2luXS5kZWNpbWFscykudG9OdW1iZXIoKTtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dGl0bGU6IGBSZWNlaXZlZCAke2dfY29pbi5uYW1lfWAsXG5cdFx0XHRcdG5hbWU6IHNpX2NvaW4sXG5cdFx0XHRcdGljb246IG1rX2ljb24oU1hfUkVDViksXG5cdFx0XHRcdHN1YnRpdGxlOiBgJHtmb3JtYXRfdGltZV9hZ28oeHRfd2hlbil9IC8gJHtnX2NvbnRhY3Q/IGdfY29udGFjdC5uYW1lOiBhYmJyZXZpYXRlX2FkZHIoc2Ffb3RoZXIpfWAsXG5cdFx0XHRcdGFtb3VudDogYCR7Zm9ybWF0X2Ftb3VudCh4X2Ftb3VudCwgdHJ1ZSl9ICR7c2lfY29pbn1gLFxuXHRcdFx0XHQvLyBsaW5rOiAnU0NSVCcgPT09IHNpX2NvaW4/IGA8YSBocmVmPVwiaHR0cHM6Ly9zZWNyZXRub2Rlcy5jb20vc2VjcmV0L2NoYWlucy9wdWxzYXItMi9ibG9ja3MvJHtzX2hlaWdodH0vdHJhbnNhY3Rpb25zLyR7c2lfdHhufVwiPlZpZXcgb24gYmxvY2sgZXhwbG9yZXI8L2E+YDogJycsXG5cdFx0XHRcdHBmcDogZ19jb2luLnBmcCxcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHRyYW5zYWN0aW9uKGdfZXZlbnQpIHtcblxuXHRcdH0sXG5cdH07XG5cblxuXHRhc3luYyBmdW5jdGlvbiBkZXRhaWxfZXZlbnQoZ19ldmVudDogTG9nRXZlbnQpOiBQcm9taXNlPERldGFpbD4ge1xuXHRcdHJldHVybiBhd2FpdCAoSF9FVkVOVF9NQVBbZ19ldmVudC50eXBlXSBhcyAoZzogTG9nRXZlbnQ8dHlwZW9mIGdfZXZlbnRbJ3R5cGUnXT4pID0+IFByb21pc2FibGU8RGV0YWlsPikoZ19ldmVudCk7XG5cdH1cblxuXHQvLyBmdW5jdGlvbiBkZXRhaWxfYmFua2lzaChnX2Jhbmtpc2g/OiBUeG4uQmFua2lzaCB8IG51bGwpOiB7cHJlZml4OiBzdHJpbmc7IG5hbWU6IHN0cmluZzsgaWNvbjogc3RyaW5nfSB7XG5cdC8vIFx0aWYoIWdfYmFua2lzaCkgcmV0dXJuIHtwcmVmaXg6JycsIG5hbWU6JycsIGljb246Jyd9O1xuXHRcblx0Ly8gXHRjb25zdCBrX2NvbnRhY3QgPSBIX0FERFJfVE9fQ09OVEFDVFtnX2Jhbmtpc2guYWRkcmVzc107XG5cdFxuXHQvLyBcdHJldHVybiB7XG5cdC8vIFx0XHRwcmVmaXg6IChUeG4uQmFua2lzaFR5cGUuU0VORCA9PT0gZ19iYW5raXNoLnR5cGU/ICd0byc6ICdmcicpKyc6Jyxcblx0Ly8gXHRcdG5hbWU6IGtfY29udGFjdD8ga19jb250YWN0LmRlZi5sYWJlbDogJycsXG5cdC8vIFx0XHRpY29uOiBrX2NvbnRhY3Rcblx0Ly8gXHRcdFx0PyBDb250YWN0LlR5cGUuUEVSU09OID09PSBrX2NvbnRhY3QuZGVmLnR5cGVcblx0Ly8gXHRcdFx0XHQ/IFNYX1BFUlNPTkFMXG5cdC8vIFx0XHRcdFx0OiBTWF9DT05UUkFDVFxuXHQvLyBcdFx0XHQ6ICcnLFxuXHQvLyBcdH07XG5cdC8vIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cblx0QGltcG9ydCAnLi9fYmFzZS5sZXNzJztcblxuXHQucm93IC5tYWluIC50aXRsZSB7XG5cdFx0Omdsb2JhbCgmKSB7XG5cdFx0XHRtaW4td2lkdGg6IG1pbi1jb250ZW50O1xuXHRcdH1cblx0fVxuXG5cdC5yb3cgLnBmcC5pY29uIHtcblx0XHQ6Z2xvYmFsKCYpIHtcblx0XHRcdGNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci10ZXh0LWxpZ2h0KTtcblx0XHR9XG5cdH1cblxuXHQudHhuLXR5cGUuaWNvbiB7XG5cdFx0dmVydGljYWwtYWxpZ246IG1pZGRsZTtcblx0XHQtLWljb24tZGlhbWV0ZXI6IDE4cHg7XG5cdFx0LS1pY29uLWNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci10ZXh0LW1lZCk7XG5cdH1cblxuXHQ6Z2xvYmFsKC5ldmVudC1pY29uKSB7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRiYWNrZ3JvdW5kOiB2YXIoLS10aGVtZS1jb2xvci1ib3JkZXIpO1xuXHRcdHBhZGRpbmc6IDlweDtcblx0XHRib3JkZXItcmFkaXVzOiAxOHB4O1xuXHR9XG5cblx0Omdsb2JhbCgudHhucz4ucm93Pi5yZXN0PiopIHtcblx0XHRtYXJnaW4tbGVmdDogLTExcHg7XG5cdH1cblxuXHQucGlsbCB7XG5cdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRcdHBhZGRpbmc6IDAuNGVtIDFlbTtcblx0XHRjb2xvcjogdmFyKC0tdGhlbWUtY29sb3ItZ3JheW1lZCk7XG5cdFx0Ym9yZGVyOiAxcHggc29saWQgdmFyKC0tdGhlbWUtY29sb3ItZ3JheWRhcmspO1xuXHRcdGJvcmRlci1yYWRpdXM6IDQwMGVtO1xuXHRcdG1hcmdpbjogMDtcblx0XHRtYXJnaW4tdG9wOiAwLjVlbTtcblx0fVxuPC9zdHlsZT5cblxuPGRpdiBjbGFzcz1cInR4bnMgbm8tbWFyZ2luXCI+XG5cdDxzbG90IG5hbWU9XCJmaXJzdFwiPjwvc2xvdD5cblxuXHR7I2VhY2ggZXZlbnRzIGFzIGdfZXZlbnR9XG5cdFx0eyNhd2FpdCBkZXRhaWxfZXZlbnQoZ19ldmVudCl9XG5cdFx0XHRMb2FkaW5nIGV2ZW50Li4uXG5cdFx0ezp0aGVuIGdfZGV0YWlsfVxuXHRcdFx0PFJvd1xuXHRcdFx0XHRuYW1lPXtnX2RldGFpbC50aXRsZX1cblx0XHRcdFx0ZGV0YWlsPXtnX2RldGFpbC5zdWJ0aXRsZX1cblx0XHRcdFx0YW1vdW50PXtnX2RldGFpbC5hbW91bnQgfHwgJyd9XG5cdFx0XHRcdGZpYXQ9e2dfZGV0YWlsLmZpYXQgfHwgJyd9XG5cdFx0XHQ+XG5cdFx0XHRcdDxzdmVsdGU6ZnJhZ21lbnQgc2xvdD1cImljb25cIj5cblx0XHRcdFx0XHQ8UHV0IGVsZW1lbnQ9e2dfZGV0YWlsLmljb259IC8+XG5cdFx0XHRcdDwvc3ZlbHRlOmZyYWdtZW50PlxuXG5cdFx0XHRcdDxzdmVsdGU6ZnJhZ21lbnQgc2xvdD1cInJpZ2h0XCI+XG5cdFx0XHRcdFx0eyNpZiAnc3RyaW5nJyA9PT0gdHlwZW9mIGdfZGV0YWlsLnBmcH1cblx0XHRcdFx0XHRcdDxQZnBEaXNwbGF5IGRpbT17MzZ9IG5hbWU9e2dfZGV0YWlsLm5hbWV9IHJlZj17Z19kZXRhaWwucGZwfSBjaXJjdWxhcj17J3BlbmRpbmcnID09PSBnX2V2ZW50LnR5cGV9XG5cdFx0XHRcdFx0XHRcdHJvb3RTdHlsZT0nbWFyZ2luLWxlZnQ6IDFlbTsnXG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdHsvaWZ9XG5cdFx0XHRcdDwvc3ZlbHRlOmZyYWdtZW50PlxuXG5cdFx0XHRcdDxzdmVsdGU6ZnJhZ21lbnQgc2xvdD1cImJlbG93XCI+XG5cdFx0XHRcdFx0eyNpZiBnX2RldGFpbC5wZW5kaW5nfVxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJwaWxsXCIgY2xhc3M6ZGlzcGxheV9ub25lPXshZ19kZXRhaWwucGVuZGluZ30+XG5cdFx0XHRcdFx0XHRcdFBlbmRpbmdcblx0XHRcdFx0XHRcdDwvc3Bhbj5cblx0XHRcdFx0XHR7L2lmfVxuXG5cdFx0XHRcdFx0eyNpZiBnX2RldGFpbC5saW5rfVxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJsaW5rXCI+XG5cdFx0XHRcdFx0XHRcdDxhIGhyZWY9e2dfZGV0YWlsLmxpbmsuaHJlZn0gb246Y2xpY2s9eygpID0+IG9wZW5fZXh0ZXJuYWxfbGluayhnX2RldGFpbC5saW5rLmhyZWYpfT5cblx0XHRcdFx0XHRcdFx0XHR7Z19kZXRhaWwubGluay50ZXh0fVxuXHRcdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdFx0ey9pZn1cblx0XHRcdFx0PC9zdmVsdGU6ZnJhZ21lbnQ+XG5cdFx0XHQ8L1Jvdz5cblx0XHR7L2F3YWl0fVxuPCEtLSBcblx0XHR7I2lmIGdfYmFua2lzaH1cblx0XHRcdDxSb3dcblxuXHRcdFx0XHRpY29uPXtIX1RYTl9JQ09OU1tnX2Jhbmtpc2gudHlwZV19XG5cdFx0XHRcdGljb25DbGFzcz17SF9UWE5fQ0xBU1NFU1tnX2Jhbmtpc2gudHlwZV0gfHwgJyd9XG5cdFx0XHRcdG5hbWU9e0hfU1VNTUFSSVpFUlNbZ19iYW5raXNoLnR5cGVdKGdfZXZlbnQpfVxuXHRcdFx0XHRhZGRyZXNzPXtnX2Jhbmtpc2guYWRkcmVzc31cblx0XHRcdFx0ZGV0YWlsPXtnX2RldGFpbC5uYW1lfVxuXHRcdFx0XHRwcmVmaXg9e2dfZGV0YWlsLnByZWZpeH1cblx0XHRcdFx0YW1vdW50PXtmb3JtYXRfYW1vdW50KGtfdG9rZW4uYXBwcm94KGdfYmFua2lzaC5hbW91bnQpKSsoYl9jdHhfdG9rZW4/ICcnOiBgICR7a190b2tlbi5kZWYuc3ltYm9sfWApfVxuXHRcdFx0XHRmaWF0PXthbW91bnRfdG9fZmlhdChrX3Rva2VuLmFwcHJveChnX2Jhbmtpc2guYW1vdW50KSwga190b2tlbil9XG5cdFx0XHRcdG9uOmNsaWNrPXsoKSA9PiB7XG5cdFx0XHRcdFx0Ly8gcHVzaF9zY3JlZW4oVHhuVmlldywge1xuXHRcdFx0XHRcdC8vIFx0dHhuOiBrX3R4bixcblx0XHRcdFx0XHQvLyB9KTtcblx0XHRcdFx0XHRwdXNoX3NjcmVlbihEZWFkRW5kKTtcblx0XHRcdFx0fX1cblx0XHRcdD5cblx0XHRcdFx0PHN2ZWx0ZTpmcmFnbWVudCBzbG90PVwiZGV0YWlsXCI+XG5cdFx0XHRcdFx0eyNpZiAhYl9jdHhfY29udGFjdH1cblx0XHRcdFx0XHRcdHsjaWYgZ19kZXRhaWwuaWNvbn1cblx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJ0eG4tdHlwZSBpY29uXCI+XG5cdFx0XHRcdFx0XHRcdFx0e0BodG1sIGdfZGV0YWlsLmljb259XG5cdFx0XHRcdFx0XHRcdDwvc3Bhbj5cblx0XHRcdFx0XHRcdHsvaWZ9XG5cdFx0XHRcdFx0XHR7I2lmIGdfZGV0YWlsLm5hbWV9XG5cdFx0XHRcdFx0XHRcdHtnX2RldGFpbC5uYW1lfVxuXHRcdFx0XHRcdFx0ezplbHNlIGlmIGdfYmFua2lzaC5hZGRyZXNzfVxuXHRcdFx0XHRcdFx0XHQ8QWRkcmVzcyBhZGRyZXNzPXtnX2Jhbmtpc2guYWRkcmVzc30gLz5cblx0XHRcdFx0XHRcdHsvaWZ9XG5cdFx0XHRcdFx0ey9pZn1cblx0XHRcdFx0PC9zdmVsdGU6ZnJhZ21lbnQ+XG5cdFx0XHQ8L1Jvdz5cblx0XHR7OmVsc2V9XG5cdFx0XHQ8Um93XG5cdFx0XHRcdGljb249e0hfVFhOX0lDT05TW2dkX3R4bi50eXBlXX1cblx0XHRcdFx0aWNvbkNsYXNzPXtIX1RYTl9DTEFTU0VTW2dkX3R4bi50eXBlXSB8fCAnJ31cblx0XHRcdFx0bmFtZT17SF9TVU1NQVJJWkVSU1tnZF90eG4udHlwZV0oZ19ldmVudCl9XG5cdFx0XHRcdGFkZHJlc3M9e2dkX3R4bi5hZGRyZXNzfVxuXHRcdFx0XHRhbW91bnQ9e2Zvcm1hdF9hbW91bnQoa190b2tlbi5hcHByb3goZ2RfdHhuLmFtb3VudCkpfVxuXHRcdFx0XHRmaWF0PXthbW91bnRfdG9fZmlhdChrX3Rva2VuLmFwcHJveChnZF90eG4uYW1vdW50KSwga190b2tlbil9XG5cdFx0XHQvPlxuXHRcdHsvaWZ9IC0tPlxuXHR7L2VhY2h9XG48L2Rpdj4iLCJpbXBvcnQgeyBDb3Ntb3NOZXR3b3JrIH0gZnJvbSAnIy9jaGFpbi9tYWluJztcbmltcG9ydCB0eXBlIHsgQWNjb3VudCwgQWNjb3VudFBhdGggfSBmcm9tICcjL21ldGEvYWNjb3VudCc7XG5pbXBvcnQgdHlwZSB7IFBsYWluT2JqZWN0IH0gZnJvbSAnIy9tZXRhL2JlbHQnO1xuaW1wb3J0IHsgQmVjaDMyLCBDaGFpbiwgQ2hhaW5QYXRoLCBGYW1pbHlLZXkgfSBmcm9tICcjL21ldGEvY2hhaW4nO1xuaW1wb3J0IHsgTmV0d29yaywgTmV0d29ya1BhdGggfSBmcm9tICcjL21ldGEvbmV0d29yayc7XG5pbXBvcnQgdHlwZSB7IFJlc291cmNlIH0gZnJvbSAnIy9tZXRhL3Jlc291cmNlJztcbmltcG9ydCB0eXBlIHsgU3RvcmUsIFN0b3JlS2V5IH0gZnJvbSAnIy9tZXRhL3N0b3JlJztcbmltcG9ydCB0eXBlIHsgUGFyYW1ldHJpY1N2ZWx0ZUNvbnN0cnVjdG9yIH0gZnJvbSAnIy9tZXRhL3N2ZWx0ZSc7XG5pbXBvcnQgdHlwZSB7IFRva2VuIH0gZnJvbSAnIy9tZXRhL3Rva2VuJztcbmltcG9ydCB7IGdsb2JhbF9yZWNlaXZlIH0gZnJvbSAnIy9zY3JpcHQvbXNnLWdsb2JhbCc7XG5pbXBvcnQgeyBTSV9TVE9SRV9NRURJQSwgU0lfU1RPUkVfVEFHUyB9IGZyb20gJyMvc2hhcmUvY29uc3RhbnRzJztcbmltcG9ydCB7IEFjY291bnRzIH0gZnJvbSAnIy9zdG9yZS9hY2NvdW50cyc7XG5pbXBvcnQgeyBDaGFpbnMgfSBmcm9tICcjL3N0b3JlL2NoYWlucyc7XG5pbXBvcnQgeyBNZWRpYXMgfSBmcm9tICcjL3N0b3JlL21lZGlhcyc7XG5pbXBvcnQgeyBBY3RpdmVOZXR3b3JrLCBOZXR3b3JrcyB9IGZyb20gJyMvc3RvcmUvbmV0d29ya3MnO1xuaW1wb3J0IHsgVGFncyB9IGZyb20gJyMvc3RvcmUvdGFncyc7XG5pbXBvcnQgdHlwZSB7IEhfU1RPUkVfUkVHSVNUUlksIFN0b3JlUmVnaXN0cnkgfSBmcm9tICcjL3N0b3JlL19yZWdpc3RyeSc7XG5pbXBvcnQgeyBEaWN0LCBGX05PT1AsIFByb21pc2FibGUgfSBmcm9tICcjL3V0aWwvYmVsdCc7XG5pbXBvcnQgdHlwZSB7IFN2ZWx0ZUNvbXBvbmVudCwgU3ZlbHRlQ29tcG9uZW50VHlwZWQgfSBmcm9tICdzdmVsdGUnO1xuaW1wb3J0IHtcblx0ZGVyaXZlZCxcblx0U3Vic2NyaWJlcixcblx0VW5zdWJzY3JpYmVyLFxuXHRVcGRhdGVyLFxuXHR3cml0YWJsZSxcblx0dHlwZSBSZWFkYWJsZSxcblx0dHlwZSBXcml0YWJsZSxcbn0gZnJvbSAnc3ZlbHRlL3N0b3JlJztcbmltcG9ydCB7IFRocmVhZElkIH0gZnJvbSAnLi9kZWYnO1xuaW1wb3J0IHR5cGUgeyBOYXZpZ2F0b3IgfSBmcm9tICcuL25hdi9uYXZpZ2F0b3InO1xuaW1wb3J0IHR5cGUgeyBQYWdlIH0gZnJvbSAnLi9uYXYvcGFnZSc7XG5pbXBvcnQgdHlwZSB7IFRocmVhZCB9IGZyb20gJy4vbmF2L3RocmVhZCc7XG5pbXBvcnQgeyBvbmNlX3N0b3JlX3VwZGF0ZXMgfSBmcm9tICcuL3N2ZWx0ZSc7XG5pbXBvcnQgUG9wdXBSZWNlaXZlIGZyb20gJy4vdWkvUG9wdXBSZWNlaXZlLnN2ZWx0ZSc7XG5cblxuLyoqXG4gKiBFeHRlbmRlZCB2ZXJzaW9uIG9mIHN2ZWx0ZSdzIFdyaXRhYmxlIHRoYXQgYWxsb3dzIGZvciBzeW5jaHJvbm91cyBgZ2V0KClgIGNhbGxzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFdyaXRhYmxlU3luYzxcblx0d192YWx1ZSBleHRlbmRzIGFueT1hbnksXG4+IGV4dGVuZHMgV3JpdGFibGU8d192YWx1ZT4ge1xuXHRnZXQoKTogd192YWx1ZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGV4dGVuZHMgc3ZlbHRlIFdyaXRhYmxlIHN0b3JlcyBieSBhbGxvd2luZyBzeW5jaHJvbm91cyBgZ2V0KClgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JpdGFibGVTeW5jPFxuXHR3X3ZhbHVlIGV4dGVuZHMgYW55LFxuPih3X3ZhbHVlOiB3X3ZhbHVlKTogV3JpdGFibGVTeW5jPHdfdmFsdWU+IHtcblx0Ly8gY3JlYXRlIHdyaXRhYmxlIHN0b3JlXG5cdGNvbnN0IHl3X29yaWdpbmFsID0gd3JpdGFibGU8d192YWx1ZT4od192YWx1ZSk7XG5cblx0Ly8gY3JlYXRlIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIG9yaWdpbmFsIHN0b3JlIGFzIGEgcHJvdG90eXBlXG5cdHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeXdfb3JpZ2luYWwpLCB7XG5cdFx0Ly8gaW50ZXJjZXB0IGNhbGwgaW4gb3JkZXIgdG8gdXBkYXRlIGNhY2hlXG5cdFx0c2V0KHdfc2V0OiB3X3ZhbHVlKSB7XG5cdFx0XHR3X3ZhbHVlID0gd19zZXQ7XG5cdFx0XHRyZXR1cm4geXdfb3JpZ2luYWwuc2V0KHdfc2V0KTtcblx0XHR9LFxuXG5cdFx0Ly8gZ2V0IHRoZSBzdG9yZWQgdmFsdWVcblx0XHRnZXQoKTogd192YWx1ZSB7XG5cdFx0XHRyZXR1cm4gd192YWx1ZTtcblx0XHR9LFxuXHR9KSBhcyBXcml0YWJsZVN5bmM8d192YWx1ZT47XG59XG5cbi8qKlxuICogRXh0ZW5kZWQgdmVyc2lvbiBvZiBzdmVsdGUncyBSZWFkYWJsZSB0aGF0IGFsbG93cyBmb3Igc3luY2hyb25vdXMgYGdldCgpYCBjYWxscy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWFkYWJsZVN5bmM8XG5cdHdfdmFsdWUgZXh0ZW5kcyBhbnk9YW55LFxuPiBleHRlbmRzIFJlYWRhYmxlPHdfdmFsdWU+IHtcblx0Z2V0KCk6IHdfdmFsdWU7XG59XG5cbi8vIHR5cGUgRGVyaXZlZENhbGxiYWNrPFxuLy8gXHR3X3ZhbHVlIGV4dGVuZHMgYW55LFxuLy8gXHR6X3NyYyBleHRlbmRzIFdyaXRhYmxlU3luYzx3X3ZhbHVlPiB8IFdyaXRhYmxlU3luYzx3X3ZhbHVlPltdLFxuLy8gPiA9IHpfc3JjIGV4dGVuZHMgV3JpdGFibGVTeW5jPHdfdmFsdWU+W11cbi8vIFx0PyB7XG4vLyBcdFx0KHdfdmFsdWU6IHdfdmFsdWUpOiB3X3ZhbHVlO1xuLy8gXHR9XG4vLyBcdDoge1xuLy8gXHRcdChhX3ZhbHVlczogd192YWx1ZVtdKTogd192YWx1ZTtcbi8vIFx0fTtcblxudHlwZSBBcnJheWFibGU8d190eXBlPiA9IHdfdHlwZSB8IEFycmF5PHdfdHlwZT47XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBleHRlbmRzIHN2ZWx0ZSBEZXJpdmVkIHN0b3JlcyBieSBhbGxvd2luZyBzeW5jaHJvbm91cyBgZ2V0KClgLlxuICovXG4vLyBleHBvcnQgZnVuY3Rpb24gZGVyaXZlZFN5bmM8XG4vLyBcdHdfb3V0IGV4dGVuZHMgYW55LFxuLy8gXHR3X3ZhbHVlIGV4dGVuZHMgYW55LFxuLy8gXHRhX3NyY3MgZXh0ZW5kcyBXcml0YWJsZVN5bmM8d192YWx1ZT5bXT1Xcml0YWJsZVN5bmM8d192YWx1ZT5bXSxcbi8vID4oYV9zcmNzOiBhX3NyY3MsIGZfdHJhbnNmb3JtOiAoLi4uYV9pbnB1dHM6IHdfdmFsdWVbXSkgPT4gd19vdXQpOiBSZWFkYWJsZVN5bmM8d19vdXQ+O1xuLy8gZXhwb3J0IGZ1bmN0aW9uIGRlcml2ZWRTeW5jPFxuLy8gXHR3X291dCBleHRlbmRzIGFueSxcbi8vIFx0d192YWx1ZSBleHRlbmRzIGFueSxcbi8vIFx0eXdfc3JjIGV4dGVuZHMgV3JpdGFibGVTeW5jPHdfdmFsdWU+PVdyaXRhYmxlU3luYzx3X3ZhbHVlPixcbi8vID4oeXdfc3JjOiB5d19zcmMsIGZfdHJhbnNmb3JtOiAoeXdfc3JjOiB5d19zcmMpID0+IHdfb3V0KTogUmVhZGFibGVTeW5jPHdfb3V0PjtcbmV4cG9ydCBmdW5jdGlvbiBkZXJpdmVkU3luYzxcblx0d19vdXQgZXh0ZW5kcyBhbnksXG5cdHdfdmFsdWUgZXh0ZW5kcyBhbnk9YW55LFxuXHR6X3NyYyBleHRlbmRzIEFycmF5YWJsZTxSZWFkYWJsZVN5bmM8d192YWx1ZT4+PUFycmF5YWJsZTxSZWFkYWJsZVN5bmM8d192YWx1ZT4+LFxuPihcblx0el9zcmM6IHpfc3JjLFxuXHRmX3RyYW5zZm9ybTogel9zcmMgZXh0ZW5kcyBSZWFkYWJsZVN5bmNbXVxuXHRcdD8gKGFfaW5wdXRzOiB3X3ZhbHVlW10pID0+IHdfb3V0XG5cdFx0OiB6X3NyYyBleHRlbmRzIFJlYWRhYmxlU3luYzxpbmZlciB3X2FjdHVhbD5cblx0XHRcdD8gKHdfaW5wdXQ6IHdfYWN0dWFsLCBmX3NldDogKHdfc2V0OiB3X291dCkgPT4gdm9pZCkgPT4gd19vdXRcblx0XHRcdDogbmV2ZXJcbik6IFJlYWRhYmxlU3luYzx3X291dD4ge1xuXHQvLyB3cml0YWJsZSBzb3VyY2UgYXJndW1lbnQgaXMgYW4gYXJyYXlcblx0aWYoQXJyYXkuaXNBcnJheSh6X3NyYykpIHtcblx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGRlcml2ZWQ8el9zcmMsIHdfb3V0Pih6X3NyYywgZl90cmFuc2Zvcm0gYXMgKHdfaW5wdXQ6IGFueSkgPT4gd19vdXQpKSwge1xuXHRcdFx0Z2V0KCk6IHdfb3V0IHtcblx0XHRcdFx0cmV0dXJuIGZfdHJhbnNmb3JtKC4uLnpfc3JjKTtcblx0XHRcdH0sXG5cdFx0fSkgYXMgUmVhZGFibGVTeW5jPHdfb3V0Pjtcblx0fVxuXHQvLyBzaW5nbGUgc3RvcmVcblx0ZWxzZSB7XG5cdFx0Ly8gcHJlcCBjYWNoZVxuXHRcdGxldCB3X2NhY2hlOiB3X291dDtcblxuXHRcdC8vIGNyZWF0ZSBkZXJpdmVkIHN0b3JlXG5cdFx0Y29uc3QgeXdfb3JpZ2luYWwgPSBkZXJpdmVkPHpfc3JjLCB3X291dD4oel9zcmMsICh3X2lucHV0LCBma19zZXQpID0+IHtcblx0XHRcdGZfdHJhbnNmb3JtKHdfaW5wdXQsICh3X291dHB1dCkgPT4ge1xuXHRcdFx0XHR3X2NhY2hlID0gd19vdXRwdXQ7XG5cdFx0XHRcdGZrX3NldCh3X291dHB1dCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdC8vIGNyZWF0ZSBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBvcmlnaW5hbCBzdG9yZSBhcyBhIHByb3RvdHlwZVxuXHRcdHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeXdfb3JpZ2luYWwpLCB7XG5cdFx0XHQvLyBnZXQgdGhlIHN0b3JlZCB2YWx1ZVxuXHRcdFx0Z2V0KCk6IHdfb3V0IHtcblx0XHRcdFx0cmV0dXJuIHdfY2FjaGU7XG5cdFx0XHR9LFxuXHRcdH0pIGFzIFJlYWRhYmxlU3luYzx3X291dD47XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgbmF2aWdhdG9yIG9iamVjdCBmb3IgdGhpcyB3aW5kb3dcbiAqL1xuZXhwb3J0IGNvbnN0IHl3X25hdmlnYXRvciA9IHdyaXRhYmxlU3luYzxOYXZpZ2F0b3I+KG51bGwhIGFzIE5hdmlnYXRvcik7XG5cbi8qKlxuICogU2VsZWN0cyB0aGUgYWN0aXZlIGNoYWluXG4gKi9cbmV4cG9ydCBjb25zdCB5d19jaGFpbl9yZWYgPSB3cml0YWJsZVN5bmM8Q2hhaW5QYXRoPignJyBhcyBDaGFpblBhdGgpO1xuZXhwb3J0IGNvbnN0IHl3X2NoYWluID0gZGVyaXZlZFN5bmM8Q2hhaW5bJ2ludGVyZmFjZSddPih5d19jaGFpbl9yZWYsIChwX2NoYWluLCBma19zZXQpID0+IHtcblx0dm9pZCBDaGFpbnMucmVhZCgpLnRoZW4oa3MgPT4gZmtfc2V0KGtzLmF0KHBfY2hhaW4gYXMgQ2hhaW5QYXRoKSEpKVxuXHRcdC5jYXRjaCgoZV9hdXRoKSA9PiB7XG5cdFx0XHRma19zZXQobnVsbCk7XG5cdFx0fSk7XG5cblx0Ly8gcHJvcGFnYXRlIGNoYW5nZSBvZiBjaGFpbiB0byBkZWZhdWx0IG5ldHdvcmsgcHJvdmlkZXJcblx0dm9pZCBOZXR3b3Jrcy5yZWFkKCkudGhlbihrcyA9PiBrcy5lbnRyaWVzKCkuc29tZSgoW3BfbmV0d29yaywgZ19uZXR3b3JrXSkgPT4ge1xuXHRcdGlmKHBfY2hhaW4gPT09IGdfbmV0d29yay5jaGFpbikge1xuXHRcdFx0eXdfbmV0d29ya19yZWYuc2V0KHBfbmV0d29yayk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0pKS5jYXRjaCgoZV9hdXRoKSA9PiB7XG5cdFx0eXdfbmV0d29ya19yZWYuc2V0KCcnKTtcblx0fSk7XG59KTtcblxuXG4vKipcbiAqIFNlbGVjdHMgdGhlIGFjdGl2ZSBuZXR3b3JrXG4gKi9cbmV4cG9ydCBjb25zdCB5d19uZXR3b3JrX3JlZiA9IHdyaXRhYmxlU3luYzxOZXR3b3JrUGF0aD4oJycgYXMgTmV0d29ya1BhdGgpO1xuZXhwb3J0IGNvbnN0IHl3X25ldHdvcmsgPSB3cml0YWJsZVN5bmM8TmV0d29ya1snaW50ZXJmYWNlJ10+KG51bGwhIGFzIE5ldHdvcmtbJ2ludGVyZmFjZSddKTtcbmV4cG9ydCBjb25zdCB5d19uZXR3b3JrX2FjdGl2ZSA9IGRlcml2ZWRTeW5jPEFjdGl2ZU5ldHdvcms+KHl3X25ldHdvcmtfcmVmLCAocF9uZXR3b3JrLCBma19zZXQpID0+IHtcblx0aWYoIXBfbmV0d29yaykge1xuXHRcdHl3X25ldHdvcmsuc2V0KG51bGwgYXMgdW5rbm93biBhcyBOZXR3b3JrWydpbnRlcmZhY2UnXSk7XG5cdFx0Zmtfc2V0KG51bGwgYXMgdW5rbm93biBhcyBBY3RpdmVOZXR3b3JrKTtcblx0fVxuXHRlbHNlIHtcblx0XHQoYXN5bmMoKSA9PiB7XG5cdFx0XHRjb25zdCBrc19uZXR3b3JrcyA9IGF3YWl0IE5ldHdvcmtzLnJlYWQoKTtcblx0XHRcdGNvbnN0IGdfbmV0d29yayA9IGtzX25ldHdvcmtzLmF0KHBfbmV0d29yayBhcyBOZXR3b3JrUGF0aCkhO1xuXHRcdFx0eXdfbmV0d29yay5zZXQoZ19uZXR3b3JrKTtcblxuXHRcdFx0Ly8gY2hhaW4gZGlmZmVyczsgdXBkYXRlXG5cdFx0XHRpZihnX25ldHdvcmsuY2hhaW4gIT09IHl3X2NoYWluX3JlZi5nZXQoKSkge1xuXHRcdFx0XHR5d19jaGFpbl9yZWYuc2V0KGdfbmV0d29yay5jaGFpbik7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGtzX2NoYWlucyA9IGF3YWl0IENoYWlucy5yZWFkKCk7XG5cdFx0XHRjb25zdCBnX2NoYWluID0ga3NfY2hhaW5zLmF0KGdfbmV0d29yay5jaGFpbikhO1xuXG5cdFx0XHRma19zZXQoTmV0d29ya3MuYWN0aXZhdGUoZ19uZXR3b3JrLCBnX2NoYWluKSk7XG5cdFx0fSkoKTtcblx0fVxufSk7XG5cbi8vIGV4cG9ydCBjb25zdCB5d19jaGFpbiA9IHdyaXRhYmxlU3luYzxDaGFpblsnaW50ZXJmYWNlJ10+KG51bGwhIGFzIENoYWluWydpbnRlcmZhY2UnXSk7XG4vLyB5d19jaGFpbl9yZWYuc3Vic2NyaWJlKGFzeW5jKHBfY2hhaW4pID0+IHtcbi8vIFx0Y29uc3Qga3NfY2hhaW5zID0gYXdhaXQgQ2hhaW5zLnJlYWQoKTtcbi8vIFx0eXdfY2hhaW4uc2V0KGtzX2NoYWlucy5hdChwX2NoYWluKSEpO1xuLy8gfSlcblxuLyoqXG4gKiBEZXJpdmUgZmFtaWx5IGZyb20gY2hhaW5cbiAqL1xuZXhwb3J0IGNvbnN0IHl3X2ZhbWlseSA9IHdyaXRhYmxlU3luYzxGYW1pbHlLZXk+KCcnIGFzIEZhbWlseUtleSk7XG55d19jaGFpbi5zdWJzY3JpYmUoZ19jaGFpbiA9PiB5d19mYW1pbHkuc2V0KGdfY2hhaW4/LmZhbWlseSB8fCAnJykpO1xuXG5cbi8qKlxuICogU2VsZWN0cyB0aGUgYWN0aXZlIGFjY291bnRcbiAqL1xuZXhwb3J0IGNvbnN0IHl3X2FjY291bnRfcmVmID0gd3JpdGFibGVTeW5jPEFjY291bnRQYXRoPignJyBhcyBBY2NvdW50UGF0aCk7XG5leHBvcnQgY29uc3QgeXdfYWNjb3VudCA9IGRlcml2ZWRTeW5jPEFjY291bnRbJ2ludGVyZmFjZSddPih5d19hY2NvdW50X3JlZiwgKHBfYWNjb3VudCwgZmtfc2V0KSA9PiB7XG5cdHZvaWQgQWNjb3VudHMucmVhZCgpLnRoZW4oa3MgPT4gZmtfc2V0KGtzLmF0KHBfYWNjb3VudCBhcyBBY2NvdW50UGF0aCkhKSlcblx0XHQuY2F0Y2goKGVfYXV0aCkgPT4ge1xuXHRcdFx0Zmtfc2V0KG51bGwpO1xuXHRcdH0pO1xufSk7XG5cbmV4cG9ydCBjb25zdCB5d19vd25lcjogUmVhZGFibGU8QmVjaDMyLlN0cmluZz4gPSBkZXJpdmVkKFt5d19hY2NvdW50LCB5d19jaGFpbl0sIChbZ19hY2NvdW50LCBnX2NoYWluXSwgZmtfc2V0KSA9PiB7XG5cdGZrX3NldChDaGFpbnMuYWRkcmVzc0ZvcihnX2FjY291bnQucHVia2V5LCBnX2NoYWluKSk7XG59KTtcblxuLy8gZXhwb3J0IGNvbnN0IHl3X2FjY291bnQgPSB3cml0YWJsZVN5bmM8QWNjb3VudFsnaW50ZXJmYWNlJ118bnVsbD4obnVsbCk7XG5cbi8qKlxuICogU2hvd3MvaGlkZXMgdGhlIHZlbmRvciBtZW51XG4gKi9cbmV4cG9ydCBjb25zdCB5d19tZW51X3ZlbmRvciA9IHdyaXRhYmxlU3luYyhmYWxzZSk7XG5cbi8qKlxuICogU2hvd3MvaGlkZXMgdGhlIGFjY291bnQgc2VsZWN0b3Igb3ZlcmxheVxuICovXG5leHBvcnQgY29uc3QgeXdfb3ZlcmxheV9hY2NvdW50ID0gd3JpdGFibGVTeW5jKGZhbHNlKTtcblxuLyoqXG4gKiBTaG93cy9oaWRlcyB0aGUgbmV0d29yayBzZWxlY3RvciBvdmVybGF5XG4gKi9cbmV4cG9ydCBjb25zdCB5d19vdmVybGF5X25ldHdvcmsgPSB3cml0YWJsZVN5bmMoZmFsc2UpO1xuXG5cbi8qKlxuICogU3RvcmUgY2FjaGVzXG4gKi9cblxuY29uc3Qgc3RvcmVfY2FjaGUgPSA8XG5cdHNpX3N0b3JlIGV4dGVuZHMgU3RvcmVLZXksXG4+KHNpX3N0b3JlOiBzaV9zdG9yZSkgPT4gd3JpdGFibGVTeW5jPEluc3RhbmNlVHlwZTxTdG9yZVJlZ2lzdHJ5PHNpX3N0b3JlPj4gfCBudWxsPihudWxsKTtcblxuLy8gcmVsb2FkIGEgZ2l2ZW4gc3RvcmVcbmFzeW5jIGZ1bmN0aW9uIHJlbG9hZChzaV9zdG9yZTogU3RvcmVLZXkpIHtcblx0c3dpdGNoKHNpX3N0b3JlKSB7XG5cdFx0Y2FzZSBTSV9TVE9SRV9NRURJQToge1xuXHRcdFx0Y29uc3Qga3NfbWVkaWFzID0gYXdhaXQgTWVkaWFzLnJlYWQoKTtcblxuXHRcdFx0eXdfc3RvcmVfbWVkaWFzLnVwZGF0ZSgoKSA9PiBrc19tZWRpYXMpO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0Y2FzZSBTSV9TVE9SRV9UQUdTOiB7XG5cdFx0XHRjb25zdCBrc190YWdzID0gYXdhaXQgVGFncy5yZWFkKCk7XG5cblx0XHRcdHl3X3N0b3JlX3RhZ3MudXBkYXRlKCgpID0+IGtzX3RhZ3MpO1xuXHRcdH1cblxuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdC8vIGlnbm9yZVxuXHRcdH1cblx0fVxufVxuXG5cbmV4cG9ydCBjb25zdCB5d19zdG9yZV9tZWRpYXMgPSBzdG9yZV9jYWNoZShTSV9TVE9SRV9NRURJQSk7XG5leHBvcnQgY29uc3QgeXdfc3RvcmVfdGFncyA9IHN0b3JlX2NhY2hlKFNJX1NUT1JFX1RBR1MpO1xuXG5cbi8vIHJlZ2lzdGVyIGZvciB1cGRhdGVzXG5nbG9iYWxfcmVjZWl2ZSh7XG5cdCd1cGRhdGVTdG9yZScoe2tleTpzaV9zdG9yZX0pIHtcblx0XHR2b2lkIHJlbG9hZChzaV9zdG9yZSk7XG5cdH0sXG59KTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVfY2FjaGVzKCk6IFByb21pc2U8dm9pZD4ge1xuXHRhd2FpdCBQcm9taXNlLmFsbChbXG5cdFx0cmVsb2FkKFNJX1NUT1JFX01FRElBKSxcblx0XHRyZWxvYWQoU0lfU1RPUkVfVEFHUyksXG5cdF0pO1xufVxuXG5cbmV4cG9ydCBjb25zdCB5d19wYWdlID0gd3JpdGFibGVTeW5jPFBhZ2U+KG51bGwhIGFzIFBhZ2UpO1xuXG4vLyBleHBvcnQgY29uc3QgeXdfdGhyZWFkX2lkID0gd3JpdGFibGVTeW5jKFRocmVhZElkLkRFRkFVTFQpO1xuXG5leHBvcnQgY29uc3QgeXdfdGhyZWFkID0gd3JpdGFibGVTeW5jPFRocmVhZD4obnVsbCEgYXMgVGhyZWFkKTtcblxuZXhwb3J0IGNvbnN0IHl3X3BhdGggPSB3cml0YWJsZVN5bmMoJycpO1xuXG5leHBvcnQgY29uc3QgeXdfdXJpID0gZGVyaXZlZFN5bmMoeXdfcGF0aCwgJHl3ID0+IGBzMnI6Ly9yb290LyR7JHl3fWApO1xuXG5leHBvcnQgY29uc3QgeXdfcGF0dGVybiA9IHdyaXRhYmxlU3luYygnJyk7XG5cblxuZXhwb3J0IGNvbnN0IHl3X25vdGlmaWNhdGlvbnMgPSB3cml0YWJsZVN5bmM8QXJyYXk8c3RyaW5nIHwgVGhyZWFkSWQ+PihbXSk7XG5cbmV4cG9ydCBjb25zdCB5d19uYXZfY29sbGFwc2VkID0gd3JpdGFibGUoZmFsc2UpO1xuXG5leHBvcnQgY29uc3QgeXdfbmF2X3Zpc2libGUgPSB3cml0YWJsZVN5bmMoZmFsc2UpO1xuXG5leHBvcnQgY29uc3QgeXdfcHJvZ3Jlc3MgPSB3cml0YWJsZVN5bmMoWzAsIDBdIGFzIFtudW1iZXIsIG51bWJlcl0pO1xuXG4vLyBleHBvcnQgY29uc3QgeXdfcGF0aF9wYXJ0cyA9IGRlcml2ZWRTeW5jKHl3X3BhdGgsICR5dyA9PiAoJHl3IGFzIHN0cmluZykuc3BsaXQoJy8nKSk7XG5cblxuXG5leHBvcnQgY29uc3QgeXdfc2VhcmNoID0gd3JpdGFibGUoJycpO1xuXG5leHBvcnQgY29uc3QgeXdfY2FuY2VsX3NlYXJjaCA9IHdyaXRhYmxlU3luYzxWb2lkRnVuY3Rpb24+KEZfTk9PUCk7XG5cbi8vIGV4cG9ydCBjb25zdCB5d19mdXNlID0gd3JpdGFibGU8RnVzZTxTZWFyY2hJdGVtPj4oKTtcblxuZXhwb3J0IGNvbnN0IHl3X3NlbmRfYXNzZXQgPSB3cml0YWJsZVN5bmM8VG9rZW5bJ2ludGVyZmFjZSddIHwgbnVsbD4obnVsbCk7XG5cblxuLy8gZXhwb3J0IGNvbnN0IHl3X3BhcmFtcyA9IHdyaXRhYmxlU3luYyh7XG4vLyBcdGZhbWlseUlkOiB5d19mYW1pbHkuZ2V0KCk/LmRlZi5pZCB8fCAnLmRlZmF1bHQnLFxuLy8gXHRjaGFpbklkOiB5d19jaGFpbi5nZXQoKT8uZGVmLmlkIHx8ICcqJyxcbi8vIFx0YWNjb3VudElkOiB5d19hY2NvdW50LmdldCgpLmRlZi5pZCxcbi8vIH0pO1xuXG5leHBvcnQgY29uc3QgeXdfdGFzayA9IHdyaXRhYmxlU3luYygwKTtcblxuZXhwb3J0IGNvbnN0IHl3X2hlbHAgPSB3cml0YWJsZVN5bmM8SFRNTEVsZW1lbnRbXT4oW10pO1xuXG5leHBvcnQgY29uc3QgeXdfaGVhZGVyX3Byb3BzID0gd3JpdGFibGVTeW5jPERpY3Q+KHt9KTtcblxuZXhwb3J0IGNvbnN0IHl3X2V4aXR0aW5nX2RvbSA9IHdyaXRhYmxlU3luYzxIVE1MRWxlbWVudD4obnVsbCEpO1xuXG5leHBvcnQgY29uc3QgeXdfbWVudV9leHBhbmRlZCA9IHdyaXRhYmxlU3luYyhmYWxzZSk7XG5cblxuZXhwb3J0IGNvbnN0IHl3X292ZXJzY3JvbGxfcGN0ID0gd3JpdGFibGVTeW5jKDApO1xuXG4vKipcbiAqIFByb3ZpZGUgYXJiaXRyYXJ5IGNvbnRleHQgdG8gdGhlIHBvcHVwXG4gKi9cbmV4cG9ydCBjb25zdCB5d19jb250ZXh0X3BvcHVwID0gd3JpdGFibGVTeW5jPERpY3Q8YW55PiB8IG51bGw+KG51bGwpO1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbXBvbmVudCB0byB1c2UgYXMgdGhlIHBvcHVwIGFuZCBzaG93cyBpdFxuICovXG5leHBvcnQgY29uc3QgeXdfcG9wdXAgPSB3cml0YWJsZVN5bmM8UGFyYW1ldHJpY1N2ZWx0ZUNvbnN0cnVjdG9yIHwgbnVsbD4obnVsbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3B1cF9yZWNlaXZlKHBfYWNjb3VudDogQWNjb3VudFBhdGgpOiB2b2lkIHtcblx0eXdfY29udGV4dF9wb3B1cC5zZXQoe1xuXHRcdGFjY291bnQ6IHBfYWNjb3VudCxcblx0fSk7XG5cdHl3X3BvcHVwLnNldChQb3B1cFJlY2VpdmUpO1xufVxuXG5cbi8vIGV4cG9ydCBjb25zdCB5d19wb3B1cF9yZWNlaXZlID0gd3JpdGFibGVTeW5jPEFjY291bnQgfCBudWxsPihudWxsKTtcblxuXG5leHBvcnQgY29uc3QgeXdfYmx1ciA9IHdyaXRhYmxlU3luYyhmYWxzZSk7XG5cbi8vIGV4cG9ydCBjb25zdCB5d19ob2xkaW5nX3NlbmQgPSBkZXJpdmVkKFt5d19hc3NldF9zZW5kLCB5d19hY2NvdW50LCB5d19jaGFpbl0sIChbJHl3X2Fzc2V0LCAkeXdfYWNjLCAkeXdfY2hdKSA9PiB7XG4vLyBcdGlmKCR5d19hc3NldCAmJiAkeXdfYWNjKSB7XG4vLyBcdFx0Y29uc3QgcF90b2tlbiA9ICR5d19hc3NldC5kZWYuaXJpO1xuLy8gXHRcdGNvbnN0IHNhX2hvbGRlciA9ICR5d19hY2MuYWRkcmVzcygkeXdfY2gpO1xuLy8gXHRcdGNvbnN0IHBfaG9sZGluZyA9IEhvbGRpbmcucmVmRnJvbVRva2VuQWNjb3VudChwX3Rva2VuLCBzYV9ob2xkZXIpO1xuLy8gXHRcdHJldHVybiBIX0hPTERJTkdTW3BfaG9sZGluZ107XG4vLyBcdH1cblxuLy8gXHRyZXR1cm4gbnVsbDtcbi8vIH0pO1xuXG5cbmV4cG9ydCBjb25zdCBobV9hcnJpdmFsczogV2Vha01hcDxIVE1MRWxlbWVudCwgVm9pZEZ1bmN0aW9uPiA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBhcnJpdmFsKGRtX3NjcmVlbjogSFRNTEVsZW1lbnQsIGZrX2Fycml2ZTogVm9pZEZ1bmN0aW9uKSB7XG5cdGhtX2Fycml2YWxzLnNldChkbV9zY3JlZW4sIGZrX2Fycml2ZSk7XG59XG5cbi8vIHdhaXQgZm9yIHdpbmRvdyB0byBsb2FkXG52b2lkIG9uY2Vfc3RvcmVfdXBkYXRlcyh5d19uYXZpZ2F0b3IpLnRoZW4oKCkgPT4ge1xuXHQvLyByZXNwb25kIHRvIHdpbmRvdyByZXNpemUgZXZlbnRzIGluIG9yZGVyIHRvIHVwZGF0ZSByb290IGNzcyB2YXJpYWJsZVxuXHRjb25zdCBkX3N0eWxlX3Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGU7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XG5cdFx0ZF9zdHlsZV9yb290LnNldFByb3BlcnR5KCctLWFwcC13aW5kb3ctd2lkdGgnLCBgJHt3aW5kb3cuaW5uZXJXaWR0aH1weGApO1xuXHRcdGRfc3R5bGVfcm9vdC5zZXRQcm9wZXJ0eSgnLS1hcHAtd2luZG93LWhlaWdodCcsIGAke3dpbmRvdy5pbm5lckhlaWdodH1weGApO1xuXHR9KTtcblxuXHQvLyBpbml0aWFsaXplXG5cdHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuXG5cdC8vIGdsb2JhbCBrZXkgZXZlbnRzXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGRfZXZlbnQpID0+IHtcblx0XHQvLyBlc2NhcGUga2V5XG5cdFx0aWYoJ0VzY2FwZScgPT09IGRfZXZlbnQua2V5KSB7XG5cdFx0XHQvLyBwb3B1cCBpcyBvcGVuOyBjbG9zZSBpdFxuXHRcdFx0aWYoeXdfcG9wdXAuZ2V0KCkpIHtcblx0XHRcdFx0eXdfcG9wdXAuc2V0KG51bGwpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59KTtcbiIsImltcG9ydCB0eXBlIHsgRGljdCwgSnNvbk9iamVjdCwgSnNvblZhbHVlIH0gZnJvbSAnIy91dGlsL2JlbHQnO1xuXG5pbXBvcnQgU1hfU1VGRklYRVNfQlVORExFRCBmcm9tICcjLy4uL3N1Ym1vZHVsZXMvcHVibGljc3VmZml4LWxpc3QvcHVibGljX3N1ZmZpeF9saXN0LmRhdD9yYXcnO1xuXG5pbXBvcnQge1xuXHRQX1BVQkxJQ19TVUZGSVhfTElTVCxcblx0UF9TVEFSU0hFTExfREVDUkVFUyxcbn0gZnJvbSBcIiMvc2hhcmUvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBzdG9yYWdlX2dldCB9IGZyb20gJyMvZXh0ZW5zaW9uL3B1YmxpYy1zdG9yYWdlJztcblxuY29uc3QgJF9FWElTVElORyA9IFN5bWJvbCgndXNlLWV4aXN0aW5nLWNhY2hlJyk7XG5cbnR5cGUgJF9FWElTVElORyA9IHR5cGVvZiAkX0VYSVNUSU5HO1xuXG5pbnRlcmZhY2UgR2VuZXJpY0VudHJ5IHtcblx0cXVlcnk/OiAoKSA9PiBEaWN0O1xufVxuXG5pbnRlcmZhY2UgVGV4dEVudHJ5IGV4dGVuZHMgR2VuZXJpY0VudHJ5IHtcblx0Zm9ybWF0OiAndGV4dCc7XG5cdHBhcnNlPyhzeF9kYXRhOiBzdHJpbmcpOiAkX0VYSVNUSU5HIHwgSnNvblZhbHVlO1xufVxuXG5pbnRlcmZhY2UgSnNvbkVudHJ5IGV4dGVuZHMgR2VuZXJpY0VudHJ5IHtcblx0Zm9ybWF0OiAnanNvbic7XG5cdGZpbHRlcj8od192YWx1ZTogSnNvblZhbHVlKTogSnNvblZhbHVlO1xufVxuXG5pbnRlcmZhY2UgQmluYXJ5RW50cnkgZXh0ZW5kcyBHZW5lcmljRW50cnkge1xuXHRmb3JtYXQ6ICdiaW5hcnknO1xufVxuXG50eXBlIEVudHJ5ID0gVGV4dEVudHJ5IHwgSnNvbkVudHJ5IHwgQmluYXJ5RW50cnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVjcmVlIGV4dGVuZHMgSnNvbk9iamVjdCB7XG5cdGFmZmVjdHM6IHN0cmluZztcblx0YWN0aW9uOiAncmVzdHJpY3QnO1xuXHRzdWdnZXN0aW9uOiAndXBncmFkZSc7XG59XG5cbmNvbnN0IEhfUkVHSVNUUlkgPSB7XG5cdFtQX1BVQkxJQ19TVUZGSVhfTElTVF06IHtcblx0XHRmb3JtYXQ6ICd0ZXh0Jyxcblx0XHRwYXJzZShzeF9kYXRhKTogJF9FWElTVElORyB8IHN0cmluZ1tdIHtcdFxuXHRcdFx0Ly8gZmFpbGVkIGZvciBzb21lIHJlYXNvbjsgbm90IGNyaXRpY2FsXG5cdFx0XHRpZighc3hfZGF0YSkgcmV0dXJuICRfRVhJU1RJTkc7XG5cblx0XHRcdC8vIHBhcnNlIHN1ZmZpeCBsaXN0XG5cdFx0XHRjb25zdCBhX3N1ZmZpeGVzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdFx0Zm9yKGxldCBzeF9saW5lIG9mIHN4X2RhdGEuc3BsaXQoL1xcbi9nKSkge1xuXHRcdFx0XHRzeF9saW5lID0gc3hfbGluZS5yZXBsYWNlKC9cXHMrfFxcL1xcLy4qJC8sICcnKTtcblx0XHRcdFx0aWYoc3hfbGluZSkgYV9zdWZmaXhlcy5wdXNoKHN4X2xpbmUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyByZXR1cm4gc3VmZml4IGxpc3Rcblx0XHRcdHJldHVybiBhX3N1ZmZpeGVzO1xuXHRcdH0sXG5cdH0sXG5cblx0W1BfU1RBUlNIRUxMX0RFQ1JFRVNdOiB7XG5cdFx0Zm9ybWF0OiAnanNvbicsXG5cdFx0ZmlsdGVyKHpfZGF0YTogSnNvblZhbHVlKTogSnNvblZhbHVlIHtcblx0XHRcdHJldHVybiAoel9kYXRhIGFzIERlY3JlZVtdKS5maWx0ZXIoKGdfZGVjcmVlKSA9PiB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSkgYXMgSnNvblZhbHVlO1xuXHRcdH0sXG5cdH0sXG59IGFzIGNvbnN0O1xuXG5cbnR5cGUgQ2FjaGVLZXkgPSBrZXlvZiB0eXBlb2YgSF9SRUdJU1RSWTtcblxuaW50ZXJmYWNlIENhY2hlIHtcblx0ZXRhZzogc3RyaW5nO1xuXHRkYXRhOiBKc29uVmFsdWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhY2hlX3B1dChwX3JlczogQ2FjaGVLZXksIGdfY2FjaGU6IENhY2hlKSB7XG5cdHJldHVybiBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoe1tgQGNhY2hlOiR7cF9yZXN9YF06Z19jYWNoZX0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjYWNoZV9nZXQocF9yZXM6IENhY2hlS2V5KTogUHJvbWlzZTxDYWNoZSB8IG51bGw+IHtcblx0cmV0dXJuIGF3YWl0IHN0b3JhZ2VfZ2V0PENhY2hlPihgQGNhY2hlOiR7cF9yZXN9YCk7XG59XG5cbmV4cG9ydCBjbGFzcyBXZWJSZXNvdXJjZUNhY2hlIHtcblx0c3RhdGljIGFzeW5jIHVwZGF0ZUFsbCgpIHtcblx0XHRmb3IoY29uc3QgcF9yZXMgaW4gSF9SRUdJU1RSWSkge1xuXHRcdFx0Y29uc3QgZ19lbnRyeSA9IEhfUkVHSVNUUllbcF9yZXMgYXMgQ2FjaGVLZXldO1xuXG5cdFx0XHQvLyAvLyBidWlsZCBxdWVyeVxuXHRcdFx0Ly8gaWYoJ3F1ZXJ5JyBpbiBnX2VudHJ5KSB7XG5cdFx0XHQvLyBcdGNvbnN0IGdfcXVlcnkgPSBnX2VudHJ5LnF1ZXJ5KCk7XG5cdFx0XHQvLyBcdGlmKGdfcXVlcnkgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBnX3F1ZXJ5KSB7XG5cdFx0XHQvLyBcdFx0Y29uc3Qgc3hfcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhnX3F1ZXJ5KS50b1N0cmluZygpO1xuXHRcdFx0Ly8gXHR9XG5cdFx0XHQvLyB9XG5cblx0XHRcdC8vIGZldGNoIHRoZSByZXNvdXJjZVxuXHRcdFx0Y29uc3QgZF9yZXMgPSBhd2FpdCBmZXRjaChwX3Jlcyk7XG5cblx0XHRcdC8vIGRlcGVuZGluZyBvbiBmb3JtYXRcblx0XHRcdHN3aXRjaChnX2VudHJ5LmZvcm1hdCkge1xuXHRcdFx0XHQvLyBsb2FkIHJlc3BvbnNlIGFzIHRleHRcblx0XHRcdFx0Y2FzZSAndGV4dCc6IHtcblx0XHRcdFx0XHRjb25zdCBzX2RhdGEgPSBhd2FpdCBkX3Jlcy50ZXh0KCk7XG5cblx0XHRcdFx0XHQvLyBwYXJzZSB0aGUgdGV4dHVhbCBkYXRhXG5cdFx0XHRcdFx0Y29uc3Qgel9wYXJzZWQgPSBnX2VudHJ5LnBhcnNlKHNfZGF0YSk7XG5cblx0XHRcdFx0XHQvLyBkbyBub3QgdXBkYXRlIGFueXRoaW5nXG5cdFx0XHRcdFx0aWYoJF9FWElTVElORyA9PT0gel9wYXJzZWQpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0Ly8gc2V0L292ZXJ3cml0ZVxuXHRcdFx0XHRcdGF3YWl0IGNhY2hlX3B1dChwX3JlcyBhcyBDYWNoZUtleSwge1xuXHRcdFx0XHRcdFx0ZXRhZzogZF9yZXMuaGVhZGVycy5nZXQoJ2V0YWcnKSA/PyAnJyxcblx0XHRcdFx0XHRcdGRhdGE6IHNfZGF0YSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGxvYWQgcmVzcG9uc2UgYXMganNvblxuXHRcdFx0XHRjYXNlICdqc29uJzoge1xuXHRcdFx0XHRcdGxldCB3X2RhdGE6IEpzb25WYWx1ZSA9IGF3YWl0IGRfcmVzLmpzb24oKTtcblxuXHRcdFx0XHRcdC8vIGFwcGx5IGZpbHRlclxuXHRcdFx0XHRcdGlmKCdmaWx0ZXInIGluIGdfZW50cnkpIHtcblx0XHRcdFx0XHRcdHdfZGF0YSA9IGdfZW50cnkuZmlsdGVyKHdfZGF0YSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gc2V0L292ZXJ3cml0ZVxuXHRcdFx0XHRcdGF3YWl0IGNhY2hlX3B1dChwX3JlcyBhcyBDYWNoZUtleSwge1xuXHRcdFx0XHRcdFx0ZXRhZzogZF9yZXMuaGVhZGVycy5nZXQoJ2V0YWcnKSA/PyAnJyxcblx0XHRcdFx0XHRcdGRhdGE6IHdfZGF0YSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHQvLyBpZ25vcmVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBhc3luYyBnZXQocF9yZXM6IENhY2hlS2V5KTogUHJvbWlzZTxKc29uVmFsdWUgfCBudWxsPiB7XG5cdFx0cmV0dXJuIChhd2FpdCBjYWNoZV9nZXQocF9yZXMpKT8uZGF0YSB8fCBudWxsO1xuXHR9XG59XG4iXSwibmFtZXMiOlsicmVsTGlzdCIsImxpbmsiLCJwcm9jZXNzUHJlbG9hZCIsIm11dGF0aW9ucyIsIm11dGF0aW9uIiwibm9kZSIsImdldEZldGNoT3B0cyIsInNjcmlwdCIsImZldGNoT3B0cyIsIm5vb3AiLCJ4IiwidGFyIiwic3JjIiwiayIsInZhbHVlIiwiZm4iLCJmbnMiLCJ0aGluZyIsImEiLCJiIiwiZWxlbWVudF9zcmMiLCJ1cmwiLCJvYmoiLCJzdG9yZSIsImNhbGxiYWNrcyIsInVuc3ViIiwiY29tcG9uZW50IiwiY2FsbGJhY2siLCJkZWZpbml0aW9uIiwiY3R4IiwiJCRzY29wZSIsInNsb3RfY3R4IiwiZGlydHkiLCJsZXRzIiwibWVyZ2VkIiwibGVuIiwiaSIsInNsb3QiLCJzbG90X2RlZmluaXRpb24iLCJzbG90X2NoYW5nZXMiLCJnZXRfc2xvdF9jb250ZXh0X2ZuIiwic2xvdF9jb250ZXh0IiwibGVuZ3RoIiwic2xvdHMiLCJyZXN1bHQiLCJrZXkiLCJyZXQiLCJjYiIsIm5vdyIsInRhc2siLCJmdWxmaWxsIiwidGFyZ2V0Iiwicm9vdCIsInN0eWxlX2VsZW1lbnQiLCJzdHlsZSIsImFuY2hvciIsIml0ZXJhdGlvbnMiLCJkZXRhY2hpbmciLCJuYW1lIiwiZGF0YSIsImV2ZW50IiwiaGFuZGxlciIsIm9wdGlvbnMiLCJhdHRyaWJ1dGUiLCJhdHRyaWJ1dGVzIiwiZGVzY3JpcHRvcnMiLCJwcm9wIiwiZWxlbWVudCIsInRleHQiLCJpbnB1dCIsImltcG9ydGFudCIsImlmcmFtZSIsImNyb3Nzb3JpZ2luIiwidW5zdWJzY3JpYmUiLCJ0b2dnbGUiLCJ0eXBlIiwiZGV0YWlsIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJlIiwiaXNfc3ZnIiwiaHRtbCIsInN0ciIsImhhc2giLCJkb2MiLCJpbmZvIiwiZHVyYXRpb24iLCJkZWxheSIsImVhc2UiLCJ1aWQiLCJzdGVwIiwia2V5ZnJhbWVzIiwicCIsInQiLCJydWxlIiwic3R5bGVzaGVldCIsInJ1bGVzIiwiYW5pbWF0aW9uIiwicHJldmlvdXMiLCJuZXh0IiwiYW5pbSIsImRlbGV0ZWQiLCJjb250ZXh0Iiwic2F2ZWRfY29tcG9uZW50IiwiJCQiLCJkaXJlY3Rpb24iLCJraW5kIiwiYmxvY2siLCJsb2NhbCIsImRldGFjaCIsInBhcmFtcyIsImNvbmZpZyIsInJ1bm5pbmciLCJhbmltYXRpb25fbmFtZSIsImdyb3VwIiwiZ28iLCJlYXNpbmciLCJ0aWNrIiwiY3NzIiwic3RhcnRfdGltZSIsImVuZF90aW1lIiwicmVzZXQiLCJpbnRybyIsInJ1bm5pbmdfcHJvZ3JhbSIsInBlbmRpbmdfcHJvZ3JhbSIsImNsZWFyX2FuaW1hdGlvbiIsImluaXQiLCJwcm9ncmFtIiwiZCIsInByb21pc2UiLCJ0b2tlbiIsInVwZGF0ZSIsImluZGV4IiwiY2hpbGRfY3R4IiwibmVlZHNfZmx1c2giLCJjdXJyZW50X2NvbXBvbmVudCIsImVycm9yIiwicmVzb2x2ZWQiLCJsb29rdXAiLCJvbGRfYmxvY2tzIiwiZ2V0X2tleSIsImR5bmFtaWMiLCJsaXN0IiwiZGVzdHJveSIsImNyZWF0ZV9lYWNoX2Jsb2NrIiwiZ2V0X2NvbnRleHQiLCJvIiwibiIsIm9sZF9pbmRleGVzIiwibmV3X2Jsb2NrcyIsIm5ld19sb29rdXAiLCJkZWx0YXMiLCJ3aWxsX21vdmUiLCJkaWRfbW92ZSIsImluc2VydCIsIm5ld19ibG9jayIsIm9sZF9ibG9jayIsIm5ld19rZXkiLCJvbGRfa2V5IiwibGV2ZWxzIiwidXBkYXRlcyIsInRvX251bGxfb3V0IiwiYWNjb3VudGVkX2ZvciIsInNwcmVhZF9wcm9wcyIsImN1c3RvbUVsZW1lbnQiLCJmcmFnbWVudCIsIm9uX21vdW50Iiwib25fZGVzdHJveSIsImFmdGVyX3VwZGF0ZSIsIm5ld19vbl9kZXN0cm95IiwiaW5zdGFuY2UiLCJjcmVhdGVfZnJhZ21lbnQiLCJub3RfZXF1YWwiLCJwcm9wcyIsImFwcGVuZF9zdHlsZXMiLCJwYXJlbnRfY29tcG9uZW50IiwicmVhZHkiLCJyZXN0Iiwibm9kZXMiLCIkJHByb3BzIiwic19pbnB1dCIsInMiLCJoX2EiLCJoX2IiLCJhX2tleXNfYSIsImFfa2V5c19iIiwic2lfa2V5IiwiYV9pbiIsImZfZm9sZCIsImhfb3V0IiwiaV9lYWNoIiwiel9lYWNoIiwiaF9vYmplY3QiLCJhX2VudHJpZXMiLCJoX3RoaW5nIiwiZl9jb25jYXQiLCJiX2FkZF91bmRlZnMiLCJhX291dCIsIndfdmFsdWUiLCJpX2VudHJ5IiwiZl9tZXJnZSIsInh0X3dhaXQiLCJma19yZXNvbHZlIiwid190eXBlIiwieiIsInByZSIsInByZWZpeCIsImNoayIsImMiLCJ2IiwiaW5CaXRzIiwib3V0Qml0cyIsInBhZCIsImJpdHMiLCJtYXhWIiwiYnl0ZXMiLCJ3b3JkcyIsInJlcyIsImVuY29kaW5nIiwiRU5DT0RJTkdfQ09OU1QiLCJlbmNvZGUiLCJMSU1JVCIsIl9fZGVjb2RlIiwibG93ZXJlZCIsInVwcGVyZWQiLCJzcGxpdCIsIndvcmRDaGFycyIsImRlY29kZVVuc2FmZSIsImRlY29kZSIsImRfY2hyb21lIiwicG9seWZpbGxfY2hyb21lX3N0b3JhZ2UiLCJzaV9hcmVhIiwiel9rZXlzIiwiYV9rZXlzIiwiel92YWx1ZSIsImhfc2V0IiwibmxfaXRlbXMiLCJpX2l0ZW0iLCJwX2Fzc2V0IiwiZ19tc2ciLCJmX2xpc3RlbmVyIiwiZ2NfY3JlYXRlIiwiaV90YWIiLCJpX3dpbmRvdyIsInZhbGlkQmFzZTY0IiwiYnVmZmVyTGVuZ3RoRXN0aW1hdGUiLCJzdHJpbmdMZW5ndGgiLCJidWZmZXJMZW5ndGgiLCJidWZmZXIiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsIndlYmFzc2VtYmx5Qnl0ZXMiLCJleHBlY3RlZEltcG9ydE1vZHVsZU5hbWUiLCJoYXNoRXhwb3J0TmFtZSIsImluaXRFeHBvcnROYW1lIiwidXBkYXRlRXhwb3J0TmFtZSIsImZpbmFsRXhwb3J0TmFtZSIsIndhc20iLCJwdHIiLCJnZXRVaW50OE1lbW9yeSIsIm51bSIsImNhY2hlZFVpbnQ4TWVtb3J5IiwiY2FjaGVkVWludDMyTWVtb3J5IiwiY2FjaGVkR2xvYmFsQXJndW1lbnRQdHIiLCJnbG9iYWxBcmd1bWVudFB0ciIsImdldFVpbnQzMk1lbW9yeSIsInBhc3NBcnJheThUb1dhc20iLCJhcnJheSIsImdldEFycmF5VThGcm9tV2FzbSIsInJhd1N0YXRlIiwicHRyMCIsImxlbjAiLCJyZXRQdHIiLCJtZW0iLCJyZWFsUmV0IiwicHRyMSIsImxlbjEiLCJDb250ZXh0RmxhZyIsIkNvbXByZXNzaW9uRmxhZyIsIndyYXBTZWNwMjU2azFXYXNtIiwiaGVhcFU4IiwiaGVhcFUzMiIsImNvbnRleHRQdHIiLCJzZWVkUHRyIiwib3V0cHV0U2hhcmVkU2VjcmV0UHRyIiwicHVibGljS2V5UHRyIiwic2VjcmV0S2V5UHRyIiwicG9pbnRlciIsInBvaW50ZXJWaWV3MzIiLCJ0d2Vha051bTI1NlB0ciIsInB1YmxpY0tleU91dFB0ciIsInB1YmxpY0tleUluUHRyIiwicHVibGljS2V5SW5MZW5ndGgiLCJvdXRwdXRQdHIiLCJvdXRwdXRMZW5ndGhQdHIiLCJjb21wcmVzc2lvbiIsIm91dHB1dFB1YmtleVBvaW50ZXIiLCJyU2lnUHRyIiwibXNnMzJQdHIiLCJvdXRwdXRSU2lnUHRyIiwiaW5wdXRTaWdQdHIiLCJyaWQiLCJzaWdPdXRQdHIiLCJyZWNJRE91dFB0ciIsIm91dHB1dFNpZ1B0ciIsInNpZ1B0ciIsImV4dHJhRW50cm9weVB0ciIsImNvbXBhY3RTaWdJblB0ciIsInNpZ0RFUkluUHRyIiwic2lnREVSSW5MZW5ndGgiLCJvdXRwdXRDb21wYWN0U2lnUHRyIiwib3V0cHV0REVSU2lnUHRyIiwib3V0cHV0REVSU2lnTGVuZ3RoUHRyIiwicHVia2V5UHRyIiwiaGVhcDE2IiwiaGVhcDMyIiwiZmFjdG9yIiwic2l6ZSIsIndhc21NZW1vcnkiLCJTVEFUSUNfQkFTRSIsIlNUQVRJQ1RPUF9JTklUSUFMIiwiRFlOQU1JQ1RPUF9QVFIiLCJTVEFUSUNUT1AiLCJTVEFDS1RPUCIsIlNUQUNLX01BWCIsIkRZTkFNSUNfQkFTRSIsIlRBQkxFX1NJWkUiLCJNQVhfVEFCTEVfU0laRSIsImdldEVyck5vTG9jYXRpb24iLCJlcnIiLCJkZXN0Iiwic2VjcDI1NmsxV2FzbSIsInJhbmRvbVNlZWQiLCJzaWdTY3JhdGNoIiwicHVibGljS2V5U2NyYXRjaCIsIm1lc3NhZ2VIYXNoU2NyYXRjaCIsImV4dHJhRW50cm9weVNjcmF0Y2giLCJpbnRlcm5hbFB1YmxpY0tleVB0ciIsImVjZGhTaGFyZWRTZWNyZXRQdHIiLCJpbnRlcm5hbFNpZ1B0ciIsInNjaG5vcnJTaWdQdHIiLCJwcml2YXRlS2V5UHRyIiwiaW50ZXJuYWxSU2lnUHRyIiwicmVjb3ZlcnlOdW1QdHIiLCJyZWNvdmVyeU51bVB0clZpZXczMiIsImdldFJlY292ZXJ5TnVtUHRyIiwibGVuZ3RoUHRyIiwibGVuZ3RoUHRyVmlldzMyIiwiY2xvbmVBbmRQYWQiLCJleHBlY3RlZExlbmd0aCIsInplcm9QYWRkZWRWYWx1ZSIsInBhcnNlUHVibGljS2V5IiwicHVibGljS2V5IiwicGFkZGVkUHVibGljS2V5Iiwic2V0TGVuZ3RoUHRyIiwiZ2V0TGVuZ3RoUHRyIiwic2VyaWFsaXplUHVibGljS2V5IiwiZmxhZyIsImdldFNlcmlhbGl6ZWRQdWJsaWNLZXkiLCJjb21wcmVzc2VkIiwiY29udmVydFB1YmxpY0tleSIsInBhcnNlU2lnbmF0dXJlIiwic2lnbmF0dXJlIiwiaXNEZXIiLCJwYWRkZWRTaWduYXR1cmUiLCJwYXJzZU9yVGhyb3ciLCJnZXRDb21wYWN0U2lnIiwiZ2V0REVSU2lnIiwiY29udmVydFNpZ25hdHVyZSIsIndhc0RFUiIsImZpbGxQcml2YXRlS2V5UHRyIiwicHJpdmF0ZUtleSIsInBhZGRlZFByaXZhdGVLZXkiLCJ6ZXJvT3V0UHRyIiwiemVyb091dFByaXZhdGVLZXlQdHIiLCJ3aXRoUHJpdmF0ZUtleSIsImluc3RydWN0aW9ucyIsImRlcml2ZVB1YmxpY0tleSIsImZpbGxNZXNzYWdlSGFzaFNjcmF0Y2giLCJtZXNzYWdlSGFzaCIsInBhZGRlZE1lc3NhZ2VIYXNoIiwiZmlsbEV4dHJhRW50cm9weVNjcmF0Y2giLCJleHRyYUVudHJvcHkiLCJwYWRkZWRFeHRyYUVudHJvcHkiLCJub3JtYWxpemVTaWduYXR1cmUiLCJtb2RpZnlTaWduYXR1cmUiLCJub3JtYWxpemUiLCJwYXJzZUFuZE5vcm1hbGl6ZVNpZ25hdHVyZSIsInNpZ25NZXNzYWdlSGFzaCIsInNpZ25NZXNzYWdlSGFzaFNjaG5vcnIiLCJlY2RoIiwidmVyaWZ5TWVzc2FnZSIsInZlcmlmeVNpZ25hdHVyZSIsInZlcmlmeU1lc3NhZ2VTY2hub3JyIiwidmVyaWZ5U2lnbmF0dXJlU2Nobm9yciIsInNpZ25NZXNzYWdlSGFzaFJlY292ZXJhYmxlIiwicmVjb3ZlclB1YmxpY0tleSIsInJlY292ZXJ5SWQiLCJhZGRUd2Vha1ByaXZhdGVLZXkiLCJ0d2Vha1ZhbHVlIiwibXVsVHdlYWtQcml2YXRlS2V5IiwiYWRkVHdlYWtQdWJsaWNLZXkiLCJtdWxUd2Vha1B1YmxpY0tleSIsInJhbmRvbVNlZWRQdHIiLCJwYWRkZWRSYW5kb21TZWVkIiwiYWxnb3JpdGhtIiwiYnl0ZU9mZnNldCIsImJsb2NrcyIsIm9mZnNldCIsIl9ieXRlIiwiX3dvcmQiLCJzdGFydCIsInN1cnJvZ2F0ZSIsImNvZGUiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJHIiwiSCIsIlQxIiwiVDIiLCJiaXRzNjQiLCJsb3czMiIsImhpZ2gzMiIsInkiLCJzaGEyNTYiLCJhdHU4X2RhdGEiLCJjcmVhdGVIYXNoIiwic2hhMjU2X3N5bmMiLCJzX3RleHQiLCJhdHU4X3RleHQiLCJhdHU4X2J1ZmZlciIsInN4X2hleCIsInhiX2J5dGUiLCJubF9oZXgiLCJuYl9idWZmZXIiLCJpX2J5dGUiLCJzeF9idWZmZXIiLCJubF9wYWlycyIsImlfcmVhZCIsImZhY3RvcnkiLCJtb2R1bGUiLCJ0aGlzIiwiQ3J5cHRvSlMiLCJNYXRoIiwidW5kZWZpbmVkIiwiY3J5cHRvIiwiZ2xvYmFsIiwicmVxdWlyZSIsImNyeXB0b1NlY3VyZVJhbmRvbUludCIsImNyZWF0ZSIsInN1YnR5cGUiLCJDX2xpYiIsIkJhc2UiLCJvdmVycmlkZXMiLCJwcm9wZXJ0aWVzIiwicHJvcGVydHlOYW1lIiwiV29yZEFycmF5Iiwic2lnQnl0ZXMiLCJlbmNvZGVyIiwiSGV4Iiwid29yZEFycmF5IiwidGhpc1dvcmRzIiwidGhhdFdvcmRzIiwidGhpc1NpZ0J5dGVzIiwidGhhdFNpZ0J5dGVzIiwidGhhdEJ5dGUiLCJqIiwiY2xvbmUiLCJuQnl0ZXMiLCJDX2VuYyIsImhleENoYXJzIiwiYml0ZSIsImhleFN0ciIsImhleFN0ckxlbmd0aCIsIkxhdGluMSIsImxhdGluMUNoYXJzIiwibGF0aW4xU3RyIiwibGF0aW4xU3RyTGVuZ3RoIiwiVXRmOCIsInV0ZjhTdHIiLCJCdWZmZXJlZEJsb2NrQWxnb3JpdGhtIiwiZG9GbHVzaCIsInByb2Nlc3NlZFdvcmRzIiwiZGF0YVdvcmRzIiwiZGF0YVNpZ0J5dGVzIiwiYmxvY2tTaXplIiwiYmxvY2tTaXplQnl0ZXMiLCJuQmxvY2tzUmVhZHkiLCJuV29yZHNSZWFkeSIsIm5CeXRlc1JlYWR5IiwiY2ZnIiwibWVzc2FnZVVwZGF0ZSIsImhhc2hlciIsIm1lc3NhZ2UiLCJDX2FsZ28iLCJyZXF1aXJlJCQwIiwiSGFzaGVyIiwiSyIsImlzUHJpbWUiLCJzcXJ0TiIsImdldEZyYWN0aW9uYWxCaXRzIiwiblByaW1lIiwiVyIsIlNIQTI1NiIsIk0iLCJmIiwiZyIsImgiLCJnYW1tYTB4IiwiZ2FtbWEwIiwiZ2FtbWExeCIsImdhbW1hMSIsImNoIiwibWFqIiwic2lnbWEwIiwic2lnbWExIiwidDEiLCJ0MiIsIm5CaXRzVG90YWwiLCJuQml0c0xlZnQiLCJYMzJXb3JkQXJyYXkiLCJDX3g2NCIsImhpZ2giLCJsb3ciLCJ4NjRXb3JkcyIsIng2NFdvcmRzTGVuZ3RoIiwieDMyV29yZHMiLCJ4NjRXb3JkIiwid29yZHNMZW5ndGgiLCJ1bmRlZiIsInJlcXVpcmUkJDEiLCJYNjRXb3JkIiwiWDY0V29yZEFycmF5IiwiWDY0V29yZF9jcmVhdGUiLCJTSEE1MTIiLCJIMCIsIkgxIiwiSDIiLCJIMyIsIkg0IiwiSDUiLCJINiIsIkg3IiwiSDBoIiwiSDBsIiwiSDFoIiwiSDFsIiwiSDJoIiwiSDJsIiwiSDNoIiwiSDNsIiwiSDRoIiwiSDRsIiwiSDVoIiwiSDVsIiwiSDZoIiwiSDZsIiwiSDdoIiwiSDdsIiwiYWgiLCJhbCIsImJoIiwiYmwiLCJjbCIsImRoIiwiZGwiLCJlaCIsImVsIiwiZmgiLCJmbCIsImdoIiwiZ2wiLCJoaCIsImhsIiwiV2lsIiwiV2loIiwiV2kiLCJnYW1tYTB4aCIsImdhbW1hMHhsIiwiZ2FtbWEwaCIsImdhbW1hMGwiLCJnYW1tYTF4aCIsImdhbW1hMXhsIiwiZ2FtbWExaCIsImdhbW1hMWwiLCJXaTciLCJXaTdoIiwiV2k3bCIsIldpMTYiLCJXaTE2aCIsIldpMTZsIiwiY2hoIiwiY2hsIiwibWFqaCIsIm1hamwiLCJzaWdtYTBoIiwic2lnbWEwbCIsInNpZ21hMWgiLCJzaWdtYTFsIiwiS2kiLCJLaWgiLCJLaWwiLCJ0MWwiLCJ0MWgiLCJ0MmwiLCJ0MmgiLCJfX3B1YmxpY0ZpZWxkIiwibmJfc2l6ZSIsImtuX3JhbmRvbSIsImtuX2VtcHR5Iiwia25fbmV3Iiwia25fZWFjaCIsIl9hdHU4X2RhdGEiLCJfa2NfY29udGV4dCIsIm5pX3NoaWZ0IiwibmJfZGlnaXRzX3RoaXMiLCJhdHU4X291dHB1dCIsIm5iX3NoaWZ0IiwiYXR1OF9zdWIiLCJuaV9yZW1haW5kZXIiLCJ4bV90cnVuY2F0ZSIsIm5pX2NhcnJ5IiwiaWJfZWFjaCIsImtuX290aGVyIiwiYXR1OF9kYXRhX3RoaXMiLCJhdHU4X2RhdGFfb3RoZXIiLCJ4Yl92YWx1ZSIsIm5iX3RoaXMiLCJhX3dvcmRzIiwiaWJfc3RhcnQiLCJoX2hhbmRsZXJzIiwiZF9ldmVudCIsInNpX3R5cGUiLCJmX2hhbmRsZXIiLCJma190ZXN0IiwieHRfdGltZW91dCIsInNfc3RhY2siLCJmZV9yZWplY3QiLCJpX3RpbWVvdXQiLCJmX3VucmVnaXN0ZXIiLCJzX3ZlcnNpb25fYSIsInNfdmVyc2lvbl9iIiwic192ZXJzaW9uIiwic19wYXJ0IiwiYV9zdWJzIiwia19vdGhlciIsImFfcGFydHNfdGhpcyIsImFfcGFydHNfb3RoZXIiLCJpX3BhcnQiLCJ4X3ZhbHVlX3RoaXMiLCJzX3RhZ190aGlzIiwieF92YWx1ZV9vdGhlciIsInNfdGFnX290aGVyIiwieF9jbXAiLCJzaV93aXJlIiwiZ19zZWVuIiwic2hfcGhyYXNlIiwiZl91cGRhdGUiLCJnX3Jvb3QiLCJhdHU4X3BocmFzZSIsImF0dThfZW50cm9weSIsInhnX25vbmNlX2luaXQiLCJka19yb290X25ldyIsInhnX25vbmNlX25ldyIsImF0dThfc2lnbmF0dXJlIiwiYl9yZWNvdmVyIiwieGdfbm9uY2Vfb2xkIiwiYXR1OF9zaWduYXR1cmVfb2xkIiwibl92ZXJzaW9uIiwiZGtfcm9vdF9vbGQiLCJhdHU4X3ZlY3Rvcl9vbGQiLCJhdHU4X3ZlY3Rvcl9uZXciLCJrbl9yb290X25ldyIsImF0dThfc2lnbmF0dXJlX25ldyIsImVfdGhyb3duIiwiZ19lcnJvciIsImdfd2FybiIsIkNvbnRhY3RBZ2VudFR5cGUiLCJoX2lucHV0Iiwic19wcmVmaXgiLCJnX3BmcCIsImlfcGZwIiwicF9wZnAiLCJnX21lZGlhIiwiZ19lYWNoIiwiZ19jb250YWN0Iiwic192YWx1ZSIsImhtX3ByaXZhdGVzIiwiel9kYXRhIiwid19rZGYiLCJiX2V4dHJhY3RhYmxlIiwiYV91c2FnZXMiLCJkX3Nlc3Npb24iLCJoX3NldF9uYXRpdmUiLCJoX3NldF93cmFwcGVkIiwiZHdfYmFja2dyb3VuZCIsImdfc2Vzc2lvbiIsImdfYmFzZSIsImF0dThfc2FsdCIsImFiX25vbmNlIiwieF9pdGVyYXRpb25fbXVsdGlwbGllciIsImRrX2Jhc2UiLCJvcmlnaW5hbCIsImRrX2tleSIsImF0dThfbm9uY2UiLCJhdHU4X3ZlcmlmeSIsImVfZGVjcnlwdCIsImVfZW5jcnlwdCIsInpfdGVzdCIsInN4X3NhbHQiLCJ3X3Jvb3QiLCJiX2V4cG9ydF9uZXciLCJ4X21pZ3JhdGVfbXVsdGlwbGllciIsImtuX3Jvb3Rfb2xkIiwiZGtfcm9vdCIsImJfZW5jcnlwdCIsImJfc2lnbmVyIiwiZGtfdmVyaWZ5IiwiYXR1OF90ZXN0IiwiYXR1OF9ub25jZV9vbGQiLCJhdHU4X25vbmNlX25ldyIsImFfcHJvbWlzZXMiLCJjYl9wZW5kaW5nIiwiZGtfYWVzX29sZCIsImRrX2Flc19uZXciLCJzeF9lbnRyeSIsImF0dThfZW50cnkiLCJhdHU4X3JlcGxhY2UiLCJka19jaXBoZXIiLCJrcF9zdG9yZSIsIndfcmVhZCIsImNfYXR0ZW1wdHMiLCJzaV9sb2NrIiwic3hfb3duZXIiLCJzaV9mcmFtZSIsInNpX21vbWVudCIsImdfcmVsZWFzZSIsInNpX3NlbGYiLCJrdl90aGlzIiwiZ19wcml2YXRlcyIsIl9zaV9rZXkiLCJzeF9zdG9yZSIsImF0dThfdmVjdG9yIiwiaF9zdG9yZSIsImF0dThfc3RvcmUiLCJlX3JlYWQiLCJmX25vdGlmeSIsImJfaW5pdCIsImF0dThfY2lwaGVydGV4dCIsIl9rdl9zdG9yZSIsIl93X2NhY2hlIiwiaV9rZXkiLCJmX21hcCIsImFfcGFpciIsInBfcmVzIiwic2lfc3RvcmUiLCJkY19zdG9yZSIsInNfZXh0ZW5zaW9uIiwiZmtfdXNlIiwia3Zfc3RvcmUiLCJ3X3N0b3JlIiwiYl9zYXZlIiwia3Nfc3RvcmUiLCJ3X3JldHVybiIsImtzX3NlbGYiLCJmX2NhbGxiYWNrIiwiQ2hhaW5zSSIsInNpX2ZhbWlseSIsInNpX2NoYWluIiwiZ19jaGFpbiIsInNfcHVia2V5IiwiZ19iZWNoMzIiLCJhdHU4X3NoYTI1NiIsImF0dThfcmlwZW1kMTYwIiwic19hZGRyIiwia3MiLCJwX2NoYWluIiwic19hZGRyZXNzIiwic2lfcHVycG9zZSIsIm1fYmVjaDMyIiwicF9wcmVmaXgiLCJnX3JlcyIsImdfZW50aXR5IiwicF9lbnRpdHkiLCJhX3BhdGhzIiwic2lfY29pbiIsInNhX293bmVyIiwiaF9pbnRlcmZhY2VzIiwia3NfcmVzIiwiZ190b2tlbiIsImhfY2FjaGUiLCJ3X291dCIsImZfZXZlcnkiLCJoX291dHMiLCJnX2NvbnRyYWN0Iiwic2lfaW50ZXJmYWNlIiwic2lfaW50ZXJmYWNlX3Rva2VuIiwicF9xdWVyeSIsImdfcmVzdWx0IiwiciIsInUiLCJsIiwicGVuZGluZyIsInJlc29sdmUiLCJyZWplY3QiLCJiYXNlNjQiLCJleHBvcnRzIiwic3RyaW5nIiwiYjY0IiwiczY0IiwiZW5kIiwicGFydHMiLCJjaHVuayIsImludmFsaWRFbmNvZGluZyIsImV2dCIsImxpc3RlbmVycyIsImFyZ3MiLCJmMzIiLCJmOGIiLCJsZSIsIndyaXRlRmxvYXRfZjMyX2NweSIsInZhbCIsImJ1ZiIsInBvcyIsIndyaXRlRmxvYXRfZjMyX3JldiIsInJlYWRGbG9hdF9mMzJfY3B5IiwicmVhZEZsb2F0X2YzMl9yZXYiLCJ3cml0ZUZsb2F0X2llZWU3NTQiLCJ3cml0ZVVpbnQiLCJzaWduIiwiZXhwb25lbnQiLCJtYW50aXNzYSIsInJlYWRGbG9hdF9pZWVlNzU0IiwicmVhZFVpbnQiLCJ1aW50IiwiZjY0Iiwid3JpdGVEb3VibGVfZjY0X2NweSIsIndyaXRlRG91YmxlX2Y2NF9yZXYiLCJyZWFkRG91YmxlX2Y2NF9jcHkiLCJyZWFkRG91YmxlX2Y2NF9yZXYiLCJ3cml0ZURvdWJsZV9pZWVlNzU0Iiwib2ZmMCIsIm9mZjEiLCJyZWFkRG91YmxlX2llZWU3NTQiLCJsbyIsImhpIiwidXRmOCIsImMxIiwiYzIiLCJhbGxvYyIsInNsaWNlIiwiU0laRSIsIk1BWCIsInNsYWIiLCJMb25nQml0cyIsInV0aWwiLCJmcm9tTnVtYmVyIiwiZnJvbSIsInRvTnVtYmVyIiwidW5zaWduZWQiLCJ0b0xvbmciLCJmcm9tSGFzaCIsInRvSGFzaCIsInp6RW5jb2RlIiwibWFzayIsInp6RGVjb2RlIiwicGFydDAiLCJwYXJ0MSIsInBhcnQyIiwicmVxdWlyZSQkMiIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwicmVxdWlyZSQkNSIsInJlcXVpcmUkJDYiLCJyZXF1aXJlJCQ3IiwiQnVmZmVyIiwic2l6ZU9yQXJyYXkiLCJtZXJnZSIsImRzdCIsImlmTm90U2V0Iiwia2V5cyIsIm5ld0Vycm9yIiwiQ3VzdG9tRXJyb3IiLCJmaWVsZE5hbWVzIiwiZmllbGRNYXAiLCJXcml0ZXIiLCJCdWZmZXJXcml0ZXIiLCJ3cml0ZXIiLCJwdXNoIiwid3JpdGVfdWludDMyIiwid3JpdGVfaW50MzIiLCJ3cml0ZV9zaW50MzIiLCJ3cml0ZV91aW50NjQiLCJ3cml0ZV9zaW50NjQiLCJ3cml0ZV9ib29sIiwid3JpdGVfZml4ZWQzMiIsIndyaXRlX2ZpeGVkNjQiLCJ3cml0ZV9mbG9hdCIsIndyaXRlX2RvdWJsZSIsIndyaXRlQnl0ZXNfc2V0Iiwid3JpdGVCeXRlc19mb3IiLCJ3cml0ZV9ieXRlcyIsIndyaXRlX3N0cmluZyIsImZvcmsiLCJsZGVsaW0iLCJoZWFkIiwidGFpbCIsImZpbmlzaCIsIkJ1ZmZlcldyaXRlcl8iLCJ3cml0ZV9ieXRlc19idWZmZXIiLCJ3cml0ZV9zdHJpbmdfYnVmZmVyIiwiUmVhZGVyIiwiQnVmZmVyUmVhZGVyIiwicmVhZGVyIiwid3JpdGVMZW5ndGgiLCJjcmVhdGVfdHlwZWRfYXJyYXkiLCJjcmVhdGVfYXJyYXkiLCJyZWFkX3VpbnQzMl9zZXR1cCIsInJlYWRfaW50MzIiLCJyZWFkX3NpbnQzMiIsInJlYWRfYm9vbCIsInJlYWRfZml4ZWQzMiIsInJlYWRfc2ZpeGVkMzIiLCJyZWFkX2Zsb2F0IiwicmVhZF9kb3VibGUiLCJyZWFkX2J5dGVzIiwicmVhZF9zdHJpbmciLCJza2lwIiwid2lyZVR5cGUiLCJCdWZmZXJSZWFkZXJfIiwicmVhZF9zdHJpbmdfYnVmZmVyIiwicnBjSW1wbCIsInJlcXVlc3REZWxpbWl0ZWQiLCJyZXNwb25zZURlbGltaXRlZCIsInJwY0NhbGwiLCJtZXRob2QiLCJyZXF1ZXN0Q3RvciIsInJlc3BvbnNlQ3RvciIsInJlcXVlc3QiLCJzZWxmIiwicmVzcG9uc2UiLCJlbmRlZEJ5UlBDIiwicnBjIiwicHJvdG9idWYiLCJjb25maWd1cmUiLCJfbTAuV3JpdGVyIiwiX20wLlJlYWRlciIsInRhZyIsIm9iamVjdCIsImlzU2V0IiwiY2FjaGVkT2JqIiwiY2FjaGUiLCJsb3dCaXRzIiwiaGlnaEJpdHMiLCJyYWRpeCIsInJhZGl4VG9Qb3dlciIsInBvd2VyIiwidG9JbnQiLCJ0b1N0cmluZyIsInJhZGl4TG9uZyIsImRpdiIsInJlbTEiLCJyZW0iLCJyZW1EaXYiLCJpbnR2YWwiLCJkaWdpdHMiLCJnZXRIaWdoQml0cyIsImdldEhpZ2hCaXRzVW5zaWduZWQiLCJnZXRMb3dCaXRzIiwiZ2V0TG93Qml0c1Vuc2lnbmVkIiwiZ2V0TnVtQml0c0FicyIsImJpdCIsImlzWmVybyIsImlzTmVnYXRpdmUiLCJpc1Bvc2l0aXZlIiwiaXNPZGQiLCJpc0V2ZW4iLCJlcXVhbHMiLCJvdGhlciIsIm5vdEVxdWFscyIsImxlc3NUaGFuIiwibGVzc1RoYW5PckVxdWFsIiwiZ3JlYXRlclRoYW4iLCJncmVhdGVyVGhhbk9yRXF1YWwiLCJjb21wYXJlIiwidGhpc05lZyIsIm90aGVyTmVnIiwibmVnYXRlIiwiYWRkIiwiYWRkZW5kIiwiYTQ4IiwiYTMyIiwiYTE2IiwiYTAwIiwiYjQ4IiwiYjMyIiwiYjE2IiwiYjAwIiwiYzQ4IiwiYzMyIiwiYzE2IiwiYzAwIiwic3VidHJhY3QiLCJzdWJ0cmFoZW5kIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwiZGl2aWRlIiwiZGl2aXNvciIsImFwcHJveCIsImhhbGZUaGlzIiwibG9nMiIsImRlbHRhIiwiYXBwcm94UmVzIiwiYXBwcm94UmVtIiwibW9kdWxvIiwibm90IiwiYW5kIiwib3IiLCJ4b3IiLCJzaGlmdExlZnQiLCJudW1CaXRzIiwic2hpZnRSaWdodCIsInNoaWZ0UmlnaHRVbnNpZ25lZCIsInRvU2lnbmVkIiwidG9VbnNpZ25lZCIsInRvQnl0ZXMiLCJ0b0J5dGVzTEUiLCJ0b0J5dGVzQkUiLCJmcm9tQnl0ZXMiLCJmcm9tQnl0ZXNMRSIsImZyb21CeXRlc0JFIiwibG9uZ1RvU3RyaW5nIiwiYnl0ZXNGcm9tQmFzZTY0IiwiYmFzZTY0RnJvbUJ5dGVzIiwiZ2xvYmFsVGhpcyIsImF0b2IiLCJiaW4iLCJhcnIiLCJidG9hIiwiYnl0ZSIsImxvbmciLCJfbTAudXRpbCIsIkxvbmciLCJfbTAuY29uZmlndXJlIiwiY3JlYXRlQmFzZVBhcmFtcyIsIlBhcmFtcyIsIm1vZHVsZXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZ2V0dGVyIiwicHJvcGVydHkiLCJ1dGlsXzEiLCJpc0Jyb3dzZXJIZWFkZXJzIiwiYXJnIiwiQnJvd3NlckhlYWRlcnMiLCJfdGhpcyIsInZhbHVlcyIsImFzTWFwIiwiYXNPYmplY3QiLCJwYWlycyIsIm5vcm1hbGl6ZWRLZXkiLCJleGlzdGluZyIsImFycmF5VmFsdWUiLCJub3JtYWxpemVkXzEiLCJrZXlBcnJheSIsImtleUV4aXN0cyIsIm5vcm1hbGl6ZWRWYWx1ZSIsImhlYWRlcnNfMSIsIkJyb3dzZXJIZWFkZXJzXzEiLCJpdGVyYXRlSGVhZGVycyIsImhlYWRlcnMiLCJpdGVyYXRvciIsImVudHJ5IiwiaXRlcmF0ZUhlYWRlcnNLZXlzIiwiaXRlcmF0ZUhlYWRlcnNfMSIsIm5vcm1hbGl6ZU5hbWUiLCJub3JtYWxpemVWYWx1ZSIsImdldEhlYWRlclZhbHVlcyIsImhlYWRlcnNBc05hdGl2ZSIsImdldFZhbHVlIiwidG9XaW5kb3dIZWFkZXJzIiwiZ2V0SGVhZGVyS2V5cyIsIl8iLCJzcGxpdEhlYWRlclZhbHVlIiwiY29tbWFTcGFjZVZhbHVlcyIsImNvbW1hU3BhY2VWYWx1ZSIsImNvbW1hVmFsdWUiLCJjcmVhdGVCYXNlUXVlcnlQYXJhbXNSZXF1ZXN0IiwiUXVlcnlQYXJhbXNSZXF1ZXN0IiwiY3JlYXRlQmFzZVF1ZXJ5UGFyYW1zUmVzcG9uc2UiLCJRdWVyeVBhcmFtc1Jlc3BvbnNlIiwiUXVlcnlDbGllbnRJbXBsIiwibWV0YWRhdGEiLCJRdWVyeVBhcmFtc0Rlc2MiLCJRdWVyeURlc2MiLCJob3N0IiwibWV0aG9kRGVzYyIsIl9yZXF1ZXN0IiwibWF5YmVDb21iaW5lZE1ldGFkYXRhIiwiZ3JwYyIsIkJsb2NrSURGbGFnIiwiU2lnbmVkTXNnVHlwZSIsIkNoZWNrVHhUeXBlIiwiRXZpZGVuY2VUeXBlIiwiUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdCIsIlJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdCIsIkV2ZW50IiwiU2lnbk1vZGUiLCJPcmRlckJ5IiwiQnJvYWRjYXN0TW9kZSIsIm5pX2JpdHMiLCJhdHU4X2luZm8iLCJma19zayIsImF0dThfb3RwIiwia25fZGVyaXZlZCIsImtuX3NrIiwia25feG9yIiwia19rZXkiLCJnX3ByaXZhdGUiLCJhdHU4X3NrIiwiZGtfYmFzZV9uZXciLCJrbl94b3JfbmV3IiwiX2VfdGhyb3duIiwia25fYSIsImtuX2IiLCJ4Yl9hIiwieGJfYiIsIm5iX2RpZ2l0cyIsInhjX2NvbXBhcmUiLCJhdHU4X291dCIsInhiX2JvcnJvdyIsInhiX2RpZmYiLCJrbl9iYXNlIiwia25fcHJldiIsImtuX2RpZmYiLCJrbl9kaXZpc29yIiwiYV9leGVjcyIsImZrX2NhbGxiYWNrIiwiX3lfc2VjcDI1NmsxIiwia2dfc2siLCJhdHU4X21lc3NhZ2UiLCJhdHU4X3BrIiwiYXR1OF9kaWdlc3QiLCJiX2V4cG9ydGFibGUiLCJra19zayIsImF0dThfcHVia2V5IiwiYXR1OF9wazMzIiwiYXR1OF9wazY1IiwiYl91bmNvbXByZXNzZWQiLCJiX2V4dHJhX2VudHJvcHkiLCJhdHU4X3R3ZWFrIiwiU2VjcmV0c0kiLCJnX3NlY3JldCIsIkFjY291bnRzSSIsImdfYWNjb3VudCIsImNvbmZpZ09iamVjdCIsImNvbnZlcnRCYXNlIiwicGFyc2VOdW1lcmljIiwiUCIsIkJpZ051bWJlciIsIk9ORSIsIkRFQ0lNQUxfUExBQ0VTIiwiUk9VTkRJTkdfTU9ERSIsIlRPX0VYUF9ORUciLCJUT19FWFBfUE9TIiwiTUlOX0VYUCIsIk1BWF9FWFAiLCJDUllQVE8iLCJNT0RVTE9fTU9ERSIsIlBPV19QUkVDSVNJT04iLCJGT1JNQVQiLCJBTFBIQUJFVCIsImFscGhhYmV0SGFzTm9ybWFsRGVjaW1hbERpZ2l0cyIsImFscGhhYmV0IiwiY2FzZUNoYW5nZWQiLCJpc051bSIsInJvdW5kIiwib3V0IiwibWF4T3JNaW4iLCJwb3cyXzUzIiwicmFuZG9tNTNiaXRJbnQiLCJkcCIsInJhbmQiLCJzdW0iLCJkZWNpbWFsIiwidG9CYXNlT3V0IiwiYmFzZUluIiwiYmFzZU91dCIsImFyckwiLCJjYWxsZXJJc1RvU3RyaW5nIiwieGMiLCJybSIsImJhc2UiLCJtIiwidGVtcCIsInhsbyIsInhoaSIsImNhcnJ5Iiwia2xvIiwia2hpIiwiYUwiLCJiTCIsImNtcCIsIm1vcmUiLCJwcm9kIiwicHJvZEwiLCJxYyIsInJlbUwiLCJyZW0wIiwieGkiLCJ4TCIsInljMCIsInlMIiwieXoiLCJ5YyIsImZvcm1hdCIsImlkIiwiYzAiLCJuZSIsIm5vcm1hbGlzZSIsImJhc2VQcmVmaXgiLCJkb3RBZnRlciIsImRvdEJlZm9yZSIsImlzSW5maW5pdHlPck5hTiIsIndoaXRlc3BhY2VPclBsdXMiLCJwMSIsInAyIiwic2QiLCJuaSIsInJkIiwicG93czEwIiwidmFsdWVPZiIsImhhbGYiLCJpc01vZEV4cCIsIm5Jc0JpZyIsIm5Jc05lZyIsIm5Jc09kZCIsInhMVHkiLCJ4ZSIsInllIiwicSIsInhjTCIsInljTCIsInlsbyIsInloaSIsInpjIiwic3FydEJhc2UiLCJyZXAiLCJnMSIsImcyIiwiZ3JvdXBTZXBhcmF0b3IiLCJpbnRQYXJ0IiwiZnJhY3Rpb25QYXJ0IiwiaXNOZWciLCJpbnREaWdpdHMiLCJtZCIsImQwIiwiZDEiLCJkMiIsImV4cCIsIm4wIiwibjEiLCJtaW4iLCJtYXgiLCJ6cyIsImdfZXZlbnQiLCJnX2F0dHIiLCJ4Z19hY2NvdW50X251bWJlciIsImF0dThfYXV0aCIsImF0dThfYm9keSIsImdfZG9jIiwiYXR1OF9kb2MiLCJwX3NlY3JldCIsIl9nX25ldHdvcmsiLCJfZ19jaGFpbiIsInNhX3NlbmRlciIsImdfcmVzcG9uc2UiLCJBdXRoUXVlcnlDbGllbnQiLCJnX2JhbGFuY2UiLCJ4dF93aGVuIiwicF9ob2xkaW5nIiwiZ19jYWNoZWQiLCJ4dF9zaW5jZSIsInh0X3JlcSIsIkJhbmtRdWVyeUNsaWVudCIsImFfYmFsYW5jZXMiLCJoX2NvaW5zIiwiaF9kZW5vbXMiLCJnX2NvaW4iLCJhX2V2ZW50cyIsImZrZV9yZWNlaXZlIiwicF9ob3N0IiwiZF93cyIsImdfdmFsdWUiLCJiX3VzZXJfY2xvc2VkIiwiZF9raWxsIiwiZmtlX3NlbmQiLCJzYV9vdGhlciIsIlR4U2VydmljZUNsaWVudCIsImFfc2lnbmVycyIsInNpX3B1YmtleV90eXBlIiwiYXR1OF9wdWJrZXlfMzMiLCJhdHU4X290aGVyX3B1YmtleSIsImF0dThfaW5wdXQiLCJhdHU4X3NoYXJlZCIsImRrX2hrZGYiLCJka19hZXMiLCJzYV9hY2NvdW50Iiwibl9taW5fYmxvY2siLCJ5X2NsaWVudCIsImdfaGVhZGVycyIsIndfc3RhdHVzIiwic19tc2ciLCJnX3RyYWlsZXJzIiwiZ190eCIsImFfb3V0cyIsImdfdHhuIiwiaF9hdHRycyIsInNhX3JlY2lwaWVudCIsInhnX2Ftb3VudCIsInNfbWVtbyIsImdfbXNnX3NlbmQiLCJnX2VuY29kZWQiLCJzaV90eG4iLCJhdHU4X3R4biIsImdjX2Jyb2FkY2FzdCIsImFfbXNncyIsInhnX2dhc19saW1pdCIsImdjX2ZlZSIsInNfZ2FzX2ZlZV9hbW91bnQiLCJzX2Rlbm9tIiwiZ190eF9ib2R5IiwiZ19zaWduZXIiLCJnX2F1dGhfYm9keSIsIk5ldHdvcmtzSSIsInBfYmFzZSIsImdfbmV0d29yayIsImdfdGFnIiwiaV90YWciLCJwX3Jlc291cmNlIiwicF9yZXNzb3VyY2UiLCJhX2lkcyIsImFfdGFncyIsInN0b3AiLCJzdWJzY3JpYmVycyIsInNldCIsIm5ld192YWx1ZSIsInJ1bl9xdWV1ZSIsInN1YnNjcmliZXIiLCJzdWJzY3JpYmUiLCJydW4iLCJpbnZhbGlkYXRlIiwic3RvcmVzIiwiaW5pdGlhbF92YWx1ZSIsInNpbmdsZSIsInN0b3Jlc19hcnJheSIsImF1dG8iLCJpbml0ZWQiLCJjbGVhbnVwIiwic3luYyIsInVuc3Vic2NyaWJlcnMiLCJyYXdfdmFsdWUiLCJodG1sX3RhZyIsImlmX2Jsb2NrIiwiY3JlYXRlX2lmX2Jsb2NrIiwiZG1fbm9kZSIsInNxX3NlbGVjdG9yIiwic190YWciLCJhX2NoaWxkcmVuIiwic2lfYXR0ciIsIndfY2hpbGQiLCJwX3VybCIsImhfaW1hZ2UiLCJnY19yZW5kZXIiLCJwX2RlZmF1bHQiLCJwXzE2IiwicF8zMiIsInBfNDgiLCJwXzY0IiwicF85NiIsInBfMTI4IiwicF8yNTYiLCJrc19tZWRpYXMiLCJzeF8xNiIsInN4XzMyIiwic3hfNDgiLCJzeF82NCIsInN4Xzk2Iiwic3hfMTI4Iiwic3hfMjU2Iiwic3hfZGVmYXVsdCIsInN4X2FueV94IiwieF9kaW1fMXgiLCJ4X2RpbV8yeCIsInN4XzF4Iiwic3hfMngiLCJzeF9zdHlsZV9waWN0dXJlIiwic3BhbiIsImRpc3BhdGNoIiwicmVzb3VyY2UiLCJnX3Jlc291cmNlIiwicmVmIiwic19uYW1lIiwiZGltIiwieF9kaW0iLCJjaXJjdWxhciIsInNfY2xhc3NlcyIsImJnIiwic2lfc3R5bGVfYmciLCJnZW5TdHlsZSIsInN4X3N0eWxlX2dlbiIsInJvb3RTdHlsZSIsInN4X3N0eWxlX3Jvb3QiLCJzZXR0bGUiLCJsb2FkX3BmcCIsIiR5d19zdG9yZV9tZWRpYXMiLCJkbV9wZnAiLCJzZXR0bGVfaW5uZXIiLCJhYnNvbHV0ZSIsImhlaWdodGxlc3MiLCJ0MV92YWx1ZSIsImNyZWF0ZV9pZl9ibG9ja180IiwidF92YWx1ZSIsImNyZWF0ZV9pZl9ibG9ja185IiwiY3JlYXRlX2lmX2Jsb2NrXzgiLCJjcmVhdGVfaWZfYmxvY2tfNSIsImlmX2Jsb2NrNCIsImNyZWF0ZV9pZl9ibG9ja18xIiwiaWZfYmxvY2s1IiwiZGl2MyIsImRpdjEiLCJzcGFuMCIsInNwYW41Iiwic3BhbjMiLCJkaXYwIiwic3BhbjIiLCJzcGFuMSIsInNwYW40IiwiZGl2MiIsImlmX2Jsb2NrMCIsInJlc291cmNlUGF0aCIsInBvc3RuYW1lIiwic19wb3N0bmFtZSIsInBmcCIsInBmcERpbSIsInhfZGltX3BmcCIsImFtb3VudCIsImZpYXQiLCJzeW1ib2wiLCJsb2NrSWNvbiIsImFkZHJlc3MiLCJyb290Q2xhc3NlcyIsImljb25DbGFzcyIsIiR5d19zdG9yZV90YWdzIiwiYXNfaW50ZXJ2YWxzIiwiaV9pbnRlcnZhbCIsInNfc3BpbiIsInN0YXJ0X3NwaW5uZXIiLCJkcF90aGluZyIsIkFfU1BJTiIsImlfc3BpbiIsImJ1dHRvbiIsIlNYX0lDT05fQUREIiwiaWZfYmxvY2sxIiwidGl0bGUiLCJidXR0b25zIiwiYmFyZSIsImNsb3NlcyIsImJfY2xvc2VzIiwic19idXR0b24iLCJjbGlja19oYW5kbGVyXzEiLCJjbGlja19oYW5kbGVyXzIiLCIkeXdfcG9wdXAiLCJvcGFjaXR5IiwiaGVpZ2h0IiwicGFkZGluZ190b3AiLCJwYWRkaW5nX2JvdHRvbSIsIm1hcmdpbl90b3AiLCJtYXJnaW5fYm90dG9tIiwiYm9yZGVyX3RvcF93aWR0aCIsImJvcmRlcl9ib3R0b21fd2lkdGgiLCJsYWJlbCIsImRpdjBfdHJhbnNpdGlvbiIsInN2ZWx0ZV9zbGlkZSIsImRpdjFfdHJhbnNpdGlvbiIsInNob3J0Iiwic2xpZGVzIiwiZG91YmxlIiwiYnV0dG9uX2Rpc2FibGVkX3ZhbHVlIiwiY2FuY2VsIiwiYl9jYW5jZWwiLCJmX2NhbmNlbCIsImJhY2siLCJiX2JhY2siLCJjb25maXJtIiwic19jb25maXJtIiwiZl9jb25maXJtIiwic19jb25maXJtX2FwcGVuZCIsIndhaXQiLCJiX3dhaXRpbmciLCJuX3NlY29uZHMiLCIkJGludmFsaWRhdGUiLCJiX2J1c3kiLCJkaXNhYmxlZCIsImNvbnRkIiwiZl9jb250aW51ZSIsImtfcGFnZSIsImNhbmNlbF9hY3Rpb24iLCJjb25maXJtX2FjdGlvbiIsImJfY29udGludWUiLCJzX2NvbmZpcm1fZmluYWwiLCJiX2Rpc2FibGVkIiwiZmllbGRzZXQiLCJzX2lkIiwiY29udGFpbmVyQ2xhc3MiLCJjaGVja2VkIiwiZGlzYWJsZUhhbmRsZXIiLCJoYW5kbGVfZmllbGRfY2xpY2siLCJjaGVja2JveGZpZWxkX2NoYW5nZXMiLCJyb3dfY2hhbmdlcyIsInNlY3Rpb24iLCJlYWNoX2Jsb2NrcyIsIiR5d19jb250ZXh0X3BvcHVwIiwiZl9zb3J0X3RhZ3MiLCJnX2EiLCJnX2IiLCJhc19wcmVhcHBsaWVkIiwiYV90YWdfb3B0aW9ucyIsInRvZ2dsZV90YWciLCJnX29wdGlvbiIsImFwcGx5X3RhZ3MiLCJjcmVhdGVfaWZfYmxvY2tfMyIsImNyZWF0ZV9pZl9ibG9ja18yIiwiaWZfYmxvY2syIiwiZWRpdGFibGUiLCJiX2VkaXRhYmxlIiwiY29sbGFwc2VkIiwiYl9jb2xsYXBzZWQiLCJwcmVmaXhDbGFzcyIsInN1ZmZpeENsYXNzIiwiY19yZWxvYWRfdGFncyIsImZfdW5zdWJzY3JpYmUiLCJrc190YWdzIiwiZ19jdHgiLCJzaG93X3RhZ19zZWxlY3RvciIsImRtX2NsdXN0ZXIiLCJyZW1vdmVfdGFnIiwic3NsaWRlIiwieHRfZGVsYXkiLCJ4dF9kdXJhdGlvbiIsImZfZWFzaW5nIiwiZF9zdHlsZSIsInhfb3BhY2l0eSIsInhfd2lkdGgiLCJ4X3BhZGRpbmdfbGVmdCIsInhfcGFkZGluZ19yaWdodCIsInhfbWFyZ2luX2xlZnQiLCJ4X21hcmdpbl9yaWdodCIsInhfYm9yZGVyX2xlZnRfd2lkdGgiLCJ4X2JvcmRlcl9yaWdodF93aWR0aCIsInh0IiwiY2xpY2tfaGFuZGxlciIsIiQkdmFsdWUiLCJlYWNoX3ZhbHVlIiwiaW5mb18xIiwiaWZfYmxvY2szIiwiQWN0aW9uSWQiLCJIX0FDVElPTl9JQ09OUyIsIlNYX0lDT05fU0VORCIsIlNYX0lDT05fUkVDViIsIlNYX0lDT05fRURJVCIsImJfY2lyY3VsYXIiLCJub1BmcCIsImJfbm9fcGZwIiwic3VidGl0bGUiLCJhY3Rpb25zIiwiaF9hY3Rpb25zIiwiZ2NfYWN0aW9uIiwicGFyZW50IiwiY29udGFpbmVyIiwicGFyZW50Qm91bmRpbmciLCJib3VuZGluZ0NvbnRhaW5lciIsImlzQWN0aXZlIiwiaXNGaXJzdCIsImlzSG92ZXIiLCJpc1NlbGVjdGFibGUiLCJnZXRPcHRpb25MYWJlbCIsIml0ZW0iLCJmaWx0ZXJUZXh0IiwiaXRlbUNsYXNzZXMiLCJjbGFzc2VzIiwiZWFjaF8xX2Vsc2UiLCJzd2l0Y2hfaW5zdGFuY2VfY2hhbmdlcyIsIm9wdGlvbklkZW50aWZpZXIiLCJpdGVtSW5kZXgiLCJob3Zlckl0ZW1JbmRleCIsIml0ZW1zIiwiVmlydHVhbExpc3QiLCJJdGVtIiwiSXRlbUNvbXBvbmVudCIsImlzVmlydHVhbExpc3QiLCJsYWJlbElkZW50aWZpZXIiLCJvcHRpb24iLCJnZXRHcm91cEhlYWRlckxhYmVsIiwiaXRlbUhlaWdodCIsImhpZGVFbXB0eVN0YXRlIiwibm9PcHRpb25zTWVzc2FnZSIsImlzTXVsdGkiLCJhY3RpdmVJdGVtSW5kZXgiLCJsaXN0UGxhY2VtZW50IiwibGlzdEF1dG9XaWR0aCIsImxpc3RPZmZzZXQiLCJpc1Njcm9sbGluZ1RpbWVyIiwiaXNTY3JvbGxpbmciLCJwcmV2X2l0ZW1zIiwiX2hvdmVySXRlbUluZGV4Iiwic2Nyb2xsVG9BY3RpdmVJdGVtIiwiaGFuZGxlU2VsZWN0IiwiaGFuZGxlSG92ZXIiLCJoYW5kbGVDbGljayIsImNsb3NlTGlzdCIsInVwZGF0ZUhvdmVySXRlbSIsImluY3JlbWVudCIsImlzTm9uU2VsZWN0YWJsZUl0ZW0iLCJoYW5kbGVLZXlEb3duIiwiaG92ZXJJdGVtIiwiY2xhc3NOYW1lIiwib2Zmc2V0Qm91bmRpbmciLCJmb2N1c2VkRWxlbUJvdW5kaW5nIiwibGlzdFN0eWxlIiwiY29tcHV0ZVBsYWNlbWVudCIsIndpZHRoIiwibW91c2VvdmVyX2hhbmRsZXIiLCJmb2N1c19oYW5kbGVyIiwibW91c2VvdmVyX2hhbmRsZXJfMSIsImZvY3VzX2hhbmRsZXJfMSIsImdldFNlbGVjdGlvbkxhYmVsIiwiYWN0aXZlVmFsdWUiLCJpc0Rpc2FibGVkIiwibXVsdGlGdWxsSXRlbUNsZWFyYWJsZSIsImhhbmRsZUNsZWFyIiwic3ZlbHRlX3ZpcnR1YWxfbGlzdF9yb3ciLCJzdmVsdGVfdmlydHVhbF9saXN0X3ZpZXdwb3J0Iiwic3ZlbHRlX3ZpcnR1YWxfbGlzdF9jb250ZW50cyIsImhlaWdodF9tYXAiLCJyb3dzIiwidmlld3BvcnQiLCJjb250ZW50cyIsInZpZXdwb3J0X2hlaWdodCIsInZpc2libGUiLCJtb3VudGVkIiwidG9wIiwiYm90dG9tIiwiYXZlcmFnZV9oZWlnaHQiLCJyZWZyZXNoIiwic2Nyb2xsVG9wIiwiY29udGVudF9oZWlnaHQiLCJyb3ciLCJyZW1haW5pbmciLCJoYW5kbGVfc2Nyb2xsIiwib2xkX3N0YXJ0Iiwicm93X2hlaWdodCIsImV4cGVjdGVkX2hlaWdodCIsImFjdHVhbF9oZWlnaHQiLCJzdmciLCJwYXRoIiwiZnVuYyIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJsYXRlciIsImNhbGxOb3ciLCJpbnB1dF8xIiwiaW5wdXRfMV9uYW1lX3ZhbHVlIiwiaWZfYmxvY2s5IiwiaW5wdXRfMV9yZWFkb25seV92YWx1ZSIsIl9pdGVtcyIsImlzQ3JlYXRhYmxlIiwiaXNGb2N1c2VkIiwicGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlckFsd2F5c1Nob3ciLCJpdGVtRmlsdGVyIiwiZ3JvdXBCeSIsImdyb3VwRmlsdGVyIiwiZ3JvdXBzIiwiaXNHcm91cEhlYWRlclNlbGVjdGFibGUiLCJsb2FkT3B0aW9ucyIsImhhc0Vycm9yIiwiY29udGFpbmVyU3R5bGVzIiwiY3JlYXRlR3JvdXBIZWFkZXJJdGVtIiwiZ3JvdXBWYWx1ZSIsImNyZWF0ZUl0ZW0iLCJnZXRGaWx0ZXJlZEl0ZW1zIiwiZmlsdGVyZWRJdGVtcyIsImlzU2VhcmNoYWJsZSIsImlucHV0U3R5bGVzIiwiaXNDbGVhcmFibGUiLCJpc1dhaXRpbmciLCJsaXN0T3BlbiIsImxvYWRPcHRpb25zSW50ZXJ2YWwiLCJpbnB1dEF0dHJpYnV0ZXMiLCJJY29uIiwiaWNvblByb3BzIiwic2hvd0NoZXZyb24iLCJzaG93SW5kaWNhdG9yIiwiY29udGFpbmVyQ2xhc3NlcyIsImluZGljYXRvclN2ZyIsIkNsZWFySWNvbiIsIl9DbGVhckljb24iLCJfSXRlbSIsIkxpc3QiLCJfTGlzdCIsIlNlbGVjdGlvbiIsIl9TZWxlY3Rpb24iLCJNdWx0aVNlbGVjdGlvbiIsIl9NdWx0aVNlbGVjdGlvbiIsIl9WaXJ0dWFsTGlzdCIsImZpbHRlck1ldGhvZCIsImZpbHRlclJlc3VsdHMiLCJtYXRjaGVzRmlsdGVyIiwiZmlsdGVyR3JvdXBlZEl0ZW1zIiwiYWRkQ3JlYXRhYmxlSXRlbSIsIl9maWx0ZXJUZXh0IiwiaXRlbVRvQ3JlYXRlIiwic2VsZWN0ZWRWYWx1ZSIsInByZXZfdmFsdWUiLCJwcmV2X2ZpbHRlclRleHQiLCJwcmV2X2lzRm9jdXNlZCIsInByZXZfaXNNdWx0aSIsImdldEl0ZW1zIiwic2V0VmFsdWUiLCJfaW5wdXRBdHRyaWJ1dGVzIiwiYXNzaWduSW5wdXRBdHRyaWJ1dGVzIiwiZ3JvdXBWYWx1ZXMiLCJzb3J0ZWRHcm91cGVkSXRlbXMiLCJkaXNwYXRjaFNlbGVjdGVkSXRlbSIsImNoZWNrVmFsdWVGb3JEdXBsaWNhdGVzIiwic2V0dXBGb2N1cyIsImhhbmRsZUZvY3VzIiwic2V0dXBNdWx0aSIsInNldHVwU2luZ2xlIiwic2V0dXBGaWx0ZXJUZXh0Iiwibm9EdXBsaWNhdGVzIiwiaWRzIiwidW5pcXVlVmFsdWVzIiwiZmluZEl0ZW0iLCJzZWxlY3Rpb24iLCJtYXRjaFRvIiwidXBkYXRlVmFsdWVEaXNwbGF5IiwiaGFuZGxlTXVsdGlJdGVtQ2xlYXIiLCJpdGVtVG9SZW1vdmUiLCJoYW5kbGVXaW5kb3dFdmVudCIsImV2ZW50VGFyZ2V0IiwiaXRlbVNlbGVjdGVkIiwiaXRlbUNyZWF0ZWQiLCJhcmlhVmFsdWVzIiwiYXJpYUxpc3RPcGVuIiwiY291bnQiLCJhcmlhRm9jdXNlZCIsImhhbmRsZUFyaWFTZWxlY3Rpb24iLCJzZWxlY3RlZCIsImhhbmRsZUFyaWFDb250ZW50IiwiX2l0ZW0iLCJzaG93U2VsZWN0ZWRJdGVtIiwic2hvd0NsZWFySWNvbiIsInBsYWNlaG9sZGVyVGV4dCIsInNob3dNdWx0aVNlbGVjdCIsImxpc3RQcm9wcyIsImFyaWFTZWxlY3Rpb24iLCJhcmlhQ29udGV4dCIsInBmcE1hcCIsImhfcGZwcyIsInByaW1hcnlDbGFzcyIsInNlY29uZGFyeUNsYXNzIiwiY3JlYXRlX2xhYmVsIiwiZ19pdGVtIiwiZG1fc3Rhcl9zZWxlY3QiLCJzeF9tYXhfaGVpZ2h0IiwieF9ib3R0b20iLCJ2YWx1ZSQxIiwieXdfc3RvcmUiLCJiX3RydXRoeSIsImJfaW5pdGlhbGl6ZWQiLCJoX3Jlc291cmNlcyIsImhfcHJvcHMiLCJkbV9kdW1teSIsInljX3BmcCIsInhfYW1vdW50IiwiYl9zaG9ydGVyIiwiZ2NfYWJiciIsInNpX2ZpYXQiLCJiX29taXRfc2lnbiIsIm5fZGVjaW1hbHMiLCJzX2Zvcm1hdHRlZCIsInNhX2FkZHIiLCJhX2NvaW5zIiwic2lfdmVyc3VzIiwieHRfbWF4X2FnZSIsImFfYXBpcyIsInNpIiwia3NfYXBpcyIsInh0X2N1dG9mZiIsImJfY2FjaGVfdmFsaWQiLCJpX2NvaW4iLCJnX2FwaSIsImhfcmVzcG9uc2UiLCJ4dF9ub3ciLCJnX2NhY2hlIiwiV2ViQXBpc0kiLCJzaV9tZXRob2QiLCJwX2FwaSIsIkFnZW50c0kiLCJwX2NvbnRhY3QiLCJzX2FnZW50X3ByZWZpeCIsInBfYWdlbnQiLCJjb3B5YWJsZSIsImJfY29weWFibGUiLCJzX2NvcHlfc3R5bGUiLCJkbV9jb3BpZWQiLCJiX2NvcHlfY29uZmlybSIsImNvcHkiLCJlX3dyaXRlIiwiZG1faGVhZCIsImJfaGVhZF9vdmVyZmxvd3MiLCJnY19maWx0ZXIiLCJnX2RlbGV0ZSIsInh0X2RlbGV0ZSIsInNpX2RlbGV0ZSIsIkRFTEVUSU9OIiwiaV9ldmVudCIsIm5sX2V2ZW50cyIsImdfdGVzdCIsInh0X2V2ZW50Iiwic2lfZXZlbnQiLCJJTlNFUlRJT04iLCJRUjhiaXRCeXRlIiwiUVJNb2RlIiwiYnl0ZUFycmF5IiwiUVJDb2RlTW9kZWwiLCJ0eXBlTnVtYmVyIiwiZXJyb3JDb3JyZWN0TGV2ZWwiLCJuZXdEYXRhIiwiY29sIiwidGVzdCIsIm1hc2tQYXR0ZXJuIiwibWluTG9zdFBvaW50IiwicGF0dGVybiIsImxvc3RQb2ludCIsIlFSVXRpbCIsInRhcmdldF9tYyIsImluc3RhbmNlX25hbWUiLCJkZXB0aCIsInFyX21jIiwiY3MiLCJkYXJrIiwibW9kIiwiaW5jIiwiYml0SW5kZXgiLCJieXRlSW5kZXgiLCJkYXRhTGlzdCIsInJzQmxvY2tzIiwiUVJSU0Jsb2NrIiwiUVJCaXRCdWZmZXIiLCJ0b3RhbERhdGFDb3VudCIsIm1heERjQ291bnQiLCJtYXhFY0NvdW50IiwiZGNkYXRhIiwiZWNkYXRhIiwiZGNDb3VudCIsImVjQ291bnQiLCJyc1BvbHkiLCJyYXdQb2x5IiwiUVJQb2x5bm9taWFsIiwibW9kUG9seSIsIm1vZEluZGV4IiwidG90YWxDb2RlQ291bnQiLCJRUkVycm9yQ29ycmVjdExldmVsIiwiUVJNYXNrUGF0dGVybiIsImRpZ2l0IiwiZXJyb3JDb3JyZWN0TGVuZ3RoIiwiUVJNYXRoIiwibW9kZSIsInFyQ29kZSIsIm1vZHVsZUNvdW50Iiwic2FtZUNvdW50IiwiZGFya0NvdW50IiwicmF0aW8iLCJzaGlmdCIsInRvdGFsQ291bnQiLCJkYXRhQ291bnQiLCJyc0Jsb2NrIiwiYnVmSW5kZXgiLCJRUkNvZGVMaW1pdExlbmd0aCIsIlFSQ29kZSIsIl9nZXRFcnJvckNvcnJlY3RMZXZlbCIsImVjbCIsIl9nZXRUeXBlTnVtYmVyIiwiY29udGVudCIsIl9nZXRVVEY4TGVuZ3RoIiwibGltaXQiLCJ0YWJsZSIsIm9wdCIsInByZXR0eSIsImluZGVudCIsIkVPTCIsInhzaXplIiwieXNpemUiLCJqb2luIiwic3dhcCIsInhtbERlY2xhcmF0aW9uIiwicHJlZGVmaW5lZCIsImRlZnMiLCJiZ3JlY3QiLCJtb2RyZWN0IiwicGF0aGRhdGEiLCJweCIsInB5IiwidyIsImZpbGUiLCJmcyIsImJfYWRkcmVzcyIsImNlbnRlciIsImJfY2VudGVyIiwiaDMiLCJnX29wdGlvbl9zZWxlY3RlZF9hY2NvdW50IiwiJHl3X2FjY291bnRfcmVmIiwiZ19hY2NvdW50X3NlbGVjdGVkIiwiYWNjb3VudF90b19vcHRpb24iLCJwX2FjY291bnQiLCJoX3BmcHNfYWNjb3VudCIsImxvYWRfYWNjb3VudF9vcHRpb25zIiwia3NfYWNjb3VudHMiLCJnX29wdGlvbl9zZWxlY3RlZF9jaGFpbiIsIiR5d19jaGFpbl9yZWYiLCJnX2NoYWluX3NlbGVjdGVkIiwiY2hhaW5fdG9fb3B0aW9uIiwiaF9wZnBzX2NoYWluIiwibG9hZF9jaGFpbl9vcHRpb25zIiwia3NfY2hhaW5zIiwibG9hZF9wZnBzIiwiZG1fcXIiLCJwX2FjY291bnRfc2VsZWN0ZWQiLCJwX2NoYWluX3NlbGVjdGVkIiwieV9xcmNvZGUiLCJBcHBzSSIsInNfaG9zdCIsInNfc2NoZW1lIiwiZ19hcHAiLCJrc19hcHBzIiwicF9hcHAiLCJkZWZhdWx0TG9jYWxlIiwibG9jYWxlc0RhdGEiLCJsb2NhbGUiLCJnZXRMb2NhbGVEYXRhIiwiYWRkTG9jYWxlRGF0YSIsImxvY2FsZURhdGEiLCJyZXNvbHZlTG9jYWxlIiwibG9jYWxlTWF0Y2hlciIsInJlc29sdmVkTG9jYWxlIiwicmVzb2x2ZUxvY2FsZUZvckRhdGEiLCJfcmVzb2x2ZWRMb2NhbGUiLCJhZiIsImFtIiwiYXIiLCJ0MCIsIm4xMDAiLCJhc3QiLCJ2MCIsImJlIiwibjEwIiwiYnIiLCJuMTAwMDAwMCIsImJzIiwiaTEwIiwiaTEwMCIsImYxMCIsImYxMDAiLCJjZWIiLCJjeSIsImRhIiwiZHNiIiwiZHoiLCJlcyIsImkxMDAwMDAwIiwiZmYiLCJmciIsImdhIiwiZ2QiLCJoZSIsImlzIiwiaXQiLCJrc2giLCJsdCIsImx2IiwibWsiLCJtdCIsInBhIiwicGwiLCJwdCIsInJvIiwicnUiLCJzZSIsInNsIiwibGFuZ3VhZ2VUYWciLCJtYXRjaCIsIl9jbGFzc0NhbGxDaGVjayIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiUGx1cmFsUnVsZXMiLCJsb2NhbGVzIiwibnVtYmVyIiwiX3R5cGVvZiIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJzeW0iLCJfb2JqZWN0U3ByZWFkIiwic291cmNlIiwiX2RlZmluZVByb3BlcnR5IiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIyIiwiX2kiLCJfYXJyIiwiX24iLCJfZCIsIl9zIiwiX2UiLCJSZWxhdGl2ZVRpbWVGb3JtYXQiLCJudW1lcmljIiwiX3BhcnNlRm9ybWF0QXJncyIsIl9wYXJzZUZvcm1hdEFyZ3MyIiwidW5pdCIsIl9wYXJzZUZvcm1hdEFyZ3MzIiwiX3BhcnNlRm9ybWF0QXJnczQiLCJ2YWx1ZUluZGV4IiwicGFydCIsInVuaXRNZXNzYWdlcyIsIl9tZXNzYWdlIiwicGx1cmFsaXplZE1lc3NhZ2VzIiwicXVhbnRpZmllciIsIkNhY2hlIiwiX2xlbiIsIl9rZXkiLCJfa2V5cyIsIl9sZW4yIiwiX2tleTIiLCJsYXN0S2V5IiwiX2kyIiwiX2tleXMyIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSIsImFsbG93QXJyYXlMaWtlIiwiaXNMb2NhbGVEYXRhQXZhaWxhYmxlIiwiX2l0ZXJhdG9yIiwiX3N0ZXAiLCJpc0ludGxBdmFpbGFibGUiLCJfcmVmIiwicHJldlN0ZXAiLCJ0aW1lc3RhbXAiLCJmdXR1cmUiLCJtaW5UaW1lIiwidG9Vbml0IiwiZnJvbVVuaXQiLCJfcmVmMiIsInRvVW5pdEFtb3VudCIsImZyb21Vbml0QW1vdW50Iiwic3RlcHMiLCJzZWNvbmRzUGFzc2VkIiwidW5pdHMiLCJnZXROZXh0U3RlcCIsIm5leHRTdGVwIiwic2Vjb25kc1Bhc3NlZEdyYW51bGFyIiwiX3JlZjMiLCJmb3JtYXRBcyIsInVuaXREZW5vbWluYXRvciIsInByZWNpc2VBbW91bnQiLCJyb3VuZGVkQW1vdW50IiwiZGF0ZSIsImdldFRpbWVUb05leHRVcGRhdGVGb3JVbml0IiwiX2dldFRpbWVUb05leHRVcGRhdGVGb3JVbml0IiwidGltZVRvU3RlcENoYW5nZSIsInRpbWVUb05leHRVcGRhdGUiLCJjdXJyZW50T3JOZXh0U3RlcCIsInN0ZXBDaGFuZ2VzQXQiLCJhcHByb3hpbWF0ZSIsImdldE1pblRpbWVGb3JVbml0IiwibWF4Rml0dGluZ05vdyIsIm1pbkZpdHRpbmdOb3ciLCJyb3VuZE1pbnV0ZSIsIlRpbWVBZ28iLCJwb2x5ZmlsbCIsIlJlbGF0aXZlVGltZUZvcm1hdFBvbHlmaWxsIiwiX3RoaXMkZ2V0TGFiZWxzIiwibGFiZWxzIiwibGFiZWxzVHlwZSIsIm5vd0xhYmVsIiwiY3VzdG9tIiwiX2dldFN0ZXAiLCJfZ2V0U3RlcDIiLCJmb3JtYXR0ZWREYXRlIiwidmFsdWVGb3JGb3JtYXR0aW5nIiwiZm9ybWF0dGluZ1J1bGVzIiwiX3JlZjQiLCJwYXN0T3JGdXR1cmUiLCJxdWFudGlmaWVyUnVsZXMiLCJfbGFiZWxzVHlwZSIsImFsbG93ZWRVbml0cyIsIm5vd0xhYmVscyIsImxvbmdMYWJlbHMiLCJ2YXJpYWJsZSIsInB1dF9jaGFuZ2VzIiwicGZwZGlzcGxheV9jaGFuZ2VzIiwiVHhuQ29udGV4dCIsImV2ZW50cyIsIm1rX2ljb24iLCJzeF9pY29uIiwiZG1faWNvbiIsIkRNX0lDT05fU0VORCIsInlfYWdvIiwiZm9ybWF0X3RpbWVfYWdvIiwiSF9FVkVOVF9NQVAiLCJzX2hlaWdodCIsInNfYW1vdW50Iiwic19zaXplIiwiZGV0YWlsX2V2ZW50IiwiZ19kZXRhaWwiLCJ5d19vcmlnaW5hbCIsIndfc2V0Iiwiel9zcmMiLCJmX3RyYW5zZm9ybSIsIndfY2FjaGUiLCJ3X2lucHV0IiwiZmtfc2V0Iiwid19vdXRwdXQiLCJlX2F1dGgiLCJwX25ldHdvcmsiLCIkeXciLCJkX3N0eWxlX3Jvb3QiLCJzeF9kYXRhIiwiYV9zdWZmaXhlcyIsInN4X2xpbmUiLCJnX2RlY3JlZSIsImdfZW50cnkiLCJkX3JlcyIsInNfZGF0YSIsInpfcGFyc2VkIiwid19kYXRhIl0sIm1hcHBpbmdzIjoiNktBQUEsTUFBTSxFQUFJLFVBQW9CLENBQzFCLE1BQU1BLEVBQVUsU0FBUyxjQUFjLE1BQU0sRUFBRSxRQUMvQyxHQUFJQSxHQUFXQSxFQUFRLFVBQVlBLEVBQVEsU0FBUyxlQUFlLEVBQy9ELE9BRUosVUFBV0MsS0FBUSxTQUFTLGlCQUFpQiwyQkFBMkIsRUFDcEVDLEVBQWVE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VSxFQUM3RUEsRUFBZSxVQUFZLFVBQVUsRUFBR0EsRUFBZSxVQUFZLFVBQVUsRUFDN0VBLEVBQWUsV0FBWSxVQUFVLEVBQUdBLEVBQWUsV0FBWSxVQUFVLEVBQzdFQSxFQUFlLFdBQVksVUFBVSxFQUFHQSxFQUFlLFdBQVksVUFBVSxFQUM3RUEsRUFBZSxXQUFZLFVBQVUsRUFBR0EsRUFBZSxXQUFZLFNBQVUsRUFDN0VBLEVBQWUsV0FBWSxVQUFVLEVBQUdBLEVBQWUsV0FBWSxVQUFVLEVBQzdFQSxFQUFlLFdBQVksVUFBVSxFQUFHQSxFQUFlLFdBQVksU0FBVSxFQUM3RUEsRUFBZSxXQUFZLFVBQVUsRUFBR0EsRUFBZSxXQUFZLFVBQVUsRUFDN0VBLEVBQWUsV0FBWSxVQUFVLEVBQUdBLEVBQWUsVUFBWSxTQUFVLEVBQzdFQSxFQUFlLFVBQVksVUFBVSxFQUFHQSxFQUFlLFVBQVksVUFBVSxFQUM3RUEsRUFBZSxVQUFZLFVBQVUsRUFBR0EsRUFBZSxVQUFZLFVBQVUsRUFDN0VBLEVBQWUsVUFBWSxVQUFVLEVBQUdBLEVBQWUsV0FBWSxVQUFVLEVBQzdFQSxFQUFlLFdBQVksVUFBVSxFQUFHQSxFQUFlLFdBQVksVUFBVSxFQUM3RUEsRUFBZSxXQUFZLFVBQVUsRUFBR0EsRUFBZSxXQUFZLFVBQVUsRUFDN0VBLEVBQWUsV0FBWSxVQUFVLEVBQUdBLEVBQWUsV0FBWSxTQUFVLEVBQzdFQSxFQUFlLFdBQVksU0FBVSxFQUFHQSxFQUFlLFdBQVksVUFBVSxFQUM3RUEsRUFBZSxXQUFZLFVBQVUsRUFBR0EsRUFBZSxXQUFZLFVBQVUsRUFDN0VBLEVBQWUsV0FBWSxVQUFVLEVBQUdBLEVBQWUsV0FBWSxTQUFVLEVBQzdFQSxFQUFlLFdBQVksVUFBVSxFQUFHQSxFQUFlLFdBQVksVUFBVSxFQUM3RUEsRUFBZSxVQUFZLFVBQVUsRUFBR0EsRUFBZSxVQUFZLFVBQVUsRUFDN0VBLEVBQWUsVUFBWSxVQUFVLEVBQUdBLEVBQWUsVUFBWSxTQUFVLEVBQzdFQSxFQUFlLFVBQVksU0FBVSxFQUFHQSxFQUFlLFVBQVks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QUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssSUFBSyxJQUFLLEVBQUcsRUFBRyxFQUFHLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxFQUFHLEVBQUcsRUFBRyxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssRUFBRyxFQUFHLEVBQUcsSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLEVBQUcsRUFBRyxFQUFHLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxFQUFHLEVBQUcsRUFBRyxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssRUFBRyxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxHQUFJLElBQUssSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxFQUFHLEdBQUksR0FBSSxJQUFLLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxJQUFLLEdBQUksR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEdBQUksSUFBSyxJQUFLLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLEdBQUksR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLEVBQUcsR0FBSSxHQUFJLElBQUssSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLElBQUssR0FBSSxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLEdBQUksR0FBSSxJQUFLLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksRUFBRyxHQUFJLEdBQUksSUFBSyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsSUFBSyxHQUFJLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxHQUFJLElBQUssSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxFQUFHLEdBQUksR0FBSSxJQUFLLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxJQUFLLEdBQUksR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEdBQUksSUFBSyxJQUFLLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLEdBQUksR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLEVBQUcsR0FBSSxHQUFJLElBQUssSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLElBQUssRUFDOW5DLENBQUcsQ0FBQyxFQUFHLEVBQUUsRUFBRSxPQUNYLE9BQVNpRSxFQUFQLENBRUYsQ0FZQSxTQUFTLEtBQUtrYyxFQUFLRCxFQUFNaVYsRUFBVSxDQU0vQixLQUFLLElBQU1oVixFQUFNLEVBTWpCLEtBQUssS0FBT0QsRUFBTyxFQU1uQixLQUFLLFNBQVcsQ0FBQyxDQUFDaVYsQ0FDdEIsQ0F5QkEsS0FBSyxVQUFVLFdBRWYsT0FBTyxlQUFlLEtBQUssVUFBVyxhQUFjLENBQUUsTUFBTyxFQUFJLENBQUUsRUFRbkUsU0FBUyxPQUFPMzBCLEVBQUssQ0FDakIsT0FBUUEsR0FBT0EsRUFBSSxjQUFtQixFQUMxQyxDQVFBLEtBQUssT0FBUyxPQU9kLElBQUksVUFBWSxDQUFBLEVBT1osV0FBYSxDQUFBLEVBUWpCLFNBQVMsUUFBUVIsRUFBT20xQixFQUFVLENBQzlCLElBQUkzMEIsRUFBS3M2QixFQUFXQyxFQUNwQixPQUFJNUYsR0FDQW4xQixLQUFXLEdBQ1ArNkIsRUFBUyxHQUFLLzZCLEdBQVNBLEVBQVEsT0FDL0I4NkIsRUFBWSxXQUFXOTZCLEdBQ25CODZCLEdBQ09BLEdBRWZ0NkIsRUFBTSxTQUFTUixHQUFRQSxFQUFRLEdBQUssRUFBSSxHQUFLLEVBQUcsRUFBSSxFQUNoRCs2QixJQUNBLFdBQVcvNkIsR0FBU1EsR0FDakJBLEtBRVBSLEdBQVMsR0FDTCs2QixFQUFTLE1BQVEvNkIsR0FBU0EsRUFBUSxPQUNsQzg2QixFQUFZLFVBQVU5NkIsR0FDbEI4NkIsR0FDT0EsR0FFZnQ2QixFQUFNLFNBQVNSLEVBQU9BLEVBQVEsRUFBSSxHQUFLLEVBQUcsRUFBSyxFQUMzQys2QixJQUNBLFVBQVUvNkIsR0FBU1EsR0FDaEJBLEdBRWYsQ0FTQSxLQUFLLFFBQVUsUUFRZixTQUFTLFdBQVdSLEVBQU9tMUIsRUFBVSxDQUNqQyxHQUFJLE1BQU1uMUIsQ0FBSyxFQUNYLE9BQU9tMUIsRUFBVyxNQUFRLEtBQzlCLEdBQUlBLEVBQVUsQ0FDVixHQUFJbjFCLEVBQVEsRUFDUixPQUFPLE1BQ1gsR0FBSUEsR0FBUyxlQUNULE9BQU8sa0JBQ25CLEtBQVcsQ0FDSCxHQUFJQSxHQUFTLENBQUMsZUFDVixPQUFPLFVBQ1gsR0FBSUEsRUFBUSxHQUFLLGVBQ2IsT0FBTyxTQUNkLENBQ0QsT0FBSUEsRUFBUSxFQUNELFdBQVcsQ0FBQ0EsRUFBT20xQixDQUFRLEVBQUUsSUFBRyxFQUNwQyxTQUFVbjFCLEVBQVEsZUFBa0IsRUFBSUEsRUFBUSxlQUFrQixFQUFHbTFCLENBQVEsQ0FDeEYsQ0FTQSxLQUFLLFdBQWEsV0FTbEIsU0FBUyxTQUFTNkYsRUFBU0MsRUFBVTlGLEVBQVUsQ0FDM0MsT0FBTyxJQUFJLEtBQUs2RixFQUFTQyxFQUFVOUYsQ0FBUSxDQUMvQyxDQVdBLEtBQUssU0FBVyxTQVNoQixJQUFJLFFBQVUsS0FBSyxJQVNuQixTQUFTLFdBQVcvd0IsRUFBSyt3QixFQUFVK0YsRUFBTyxDQUN0QyxHQUFJOTJCLEVBQUksU0FBVyxFQUNmLE1BQU0sTUFBTSxjQUFjLEVBQzlCLEdBQUlBLElBQVEsT0FBU0EsSUFBUSxZQUFjQSxJQUFRLGFBQWVBLElBQVEsWUFDdEUsT0FBTyxLQVNYLEdBUkksT0FBTyt3QixHQUFhLFVBRXBCK0YsRUFBUS9GLEVBQ1JBLEVBQVcsSUFFWEEsRUFBVyxDQUFDLENBQUVBLEVBRWxCK0YsRUFBUUEsR0FBUyxHQUNiQSxFQUFRLEdBQUssR0FBS0EsRUFDbEIsTUFBTSxXQUFXLE9BQU8sRUFFNUIsSUFBSXAyQixFQUNKLElBQUtBLEVBQUlWLEVBQUksUUFBUSxHQUFHLEdBQUssRUFDekIsTUFBTSxNQUFNLGlCQUFpQixFQUM1QixHQUFJVSxJQUFNLEVBQ1gsT0FBTyxXQUFXVixFQUFJLFVBQVUsQ0FBQyxFQUFHK3dCLEVBQVUrRixDQUFLLEVBQUUsTUFRekQsUUFISUMsRUFBZSxXQUFXLFFBQVFELEVBQU8sQ0FBQyxDQUFDLEVBRTNDcDVCLEVBQVMsS0FDSlIsRUFBSSxFQUFHQSxFQUFJOEMsRUFBSSxPQUFROUMsR0FBSyxFQUFHLENBQ3BDLElBQUkyUixFQUFPLEtBQUssSUFBSSxFQUFHN08sRUFBSSxPQUFTOUMsQ0FBQyxFQUNqQ3RCLEVBQVEsU0FBU29FLEVBQUksVUFBVTlDLEVBQUdBLEVBQUkyUixDQUFJLEVBQUdpb0IsQ0FBSyxFQUN0RCxHQUFJam9CLEVBQU8sRUFBRyxDQUNWLElBQUltb0IsRUFBUSxXQUFXLFFBQVFGLEVBQU9qb0IsQ0FBSSxDQUFDLEVBQzNDblIsRUFBU0EsRUFBTyxJQUFJczVCLENBQUssRUFBRSxJQUFJLFdBQVdwN0IsQ0FBSyxDQUFDLENBQzVELE1BQ1k4QixFQUFTQSxFQUFPLElBQUlxNUIsQ0FBWSxFQUNoQ3I1QixFQUFTQSxFQUFPLElBQUksV0FBVzlCLENBQUssQ0FBQyxDQUU1QyxDQUNELE9BQUE4QixFQUFPLFNBQVdxekIsRUFDWHJ6QixDQUNYLENBVUEsS0FBSyxXQUFhLFdBU2xCLFNBQVMsVUFBVSt3QixFQUFLc0MsRUFBVSxDQUM5QixPQUFJLE9BQU90QyxHQUFRLFNBQ1IsV0FBV0EsRUFBS3NDLENBQVEsRUFDL0IsT0FBT3RDLEdBQVEsU0FDUixXQUFXQSxFQUFLc0MsQ0FBUSxFQUU1QixTQUFTdEMsRUFBSSxJQUFLQSxFQUFJLEtBQU0sT0FBT3NDLEdBQWEsVUFBWUEsRUFBV3RDLEVBQUksUUFBUSxDQUM5RixDQVNBLEtBQUssVUFBWSxVQVVqQixJQUFJLGVBQWlCLEdBQUssR0FPdEIsZUFBaUIsR0FBSyxHQU90QixlQUFpQixlQUFpQixlQU9sQyxlQUFpQixlQUFpQixlQU9sQyxlQUFpQixlQUFpQixFQU9sQyxXQUFhLFFBQVEsY0FBYyxFQU1uQyxLQUFPLFFBQVEsQ0FBQyxFQU1wQixLQUFLLEtBQU8sS0FNWixJQUFJLE1BQVEsUUFBUSxFQUFHLEVBQUksRUFNM0IsS0FBSyxNQUFRLE1BTWIsSUFBSSxJQUFNLFFBQVEsQ0FBQyxFQU1uQixLQUFLLElBQU0sSUFNWCxJQUFJLEtBQU8sUUFBUSxFQUFHLEVBQUksRUFNMUIsS0FBSyxLQUFPLEtBTVosSUFBSSxRQUFVLFFBQVEsRUFBRSxFQU14QixLQUFLLFFBQVUsUUFNZixJQUFJLFVBQVksU0FBUyxHQUFjLFdBQWMsRUFBSyxFQU0xRCxLQUFLLFVBQVksVUFNakIsSUFBSSxtQkFBcUIsU0FBUyxHQUFjLEdBQWMsRUFBSSxFQU1sRSxLQUFLLG1CQUFxQixtQkFNMUIsSUFBSSxVQUFZLFNBQVMsRUFBRyxZQUFjLEVBQUssRUFNL0MsS0FBSyxVQUFZLFVBTWpCLElBQUksY0FBZ0IsS0FBSyxVQU16QixjQUFjLE1BQVEsU0FBU3dJLEdBQVEsQ0FDbkMsT0FBTyxLQUFLLFNBQVcsS0FBSyxNQUFRLEVBQUksS0FBSyxHQUNqRCxFQU1BLGNBQWMsU0FBVyxTQUFTbkcsR0FBVyxDQUN6QyxPQUFJLEtBQUssVUFDSSxLQUFLLE9BQVMsR0FBSyxnQkFBbUIsS0FBSyxNQUFRLEdBQ3pELEtBQUssS0FBTyxnQkFBa0IsS0FBSyxNQUFRLEVBQ3RELEVBU0EsY0FBYyxTQUFXLFNBQVNvRyxFQUFTSixFQUFPLENBRTlDLEdBREFBLEVBQVFBLEdBQVMsR0FDYkEsRUFBUSxHQUFLLEdBQUtBLEVBQ2xCLE1BQU0sV0FBVyxPQUFPLEVBQzVCLEdBQUksS0FBSyxPQUFRLEVBQ2IsTUFBTyxJQUNYLEdBQUksS0FBSyxhQUNMLEdBQUksS0FBSyxHQUFHLFNBQVMsRUFBRyxDQUdwQixJQUFJSyxFQUFZLFdBQVdMLENBQUssRUFDNUJNLEVBQU0sS0FBSyxJQUFJRCxDQUFTLEVBQ3hCRSxFQUFPRCxFQUFJLElBQUlELENBQVMsRUFBRSxJQUFJLElBQUksRUFDdEMsT0FBT0MsRUFBSSxTQUFTTixDQUFLLEVBQUlPLEVBQUssTUFBTyxFQUFDLFNBQVNQLENBQUssQ0FDM0QsS0FDRyxPQUFPLElBQU0sS0FBSyxJQUFLLEVBQUMsU0FBU0EsQ0FBSyxFQVE5QyxRQUhJQyxFQUFlLFdBQVcsUUFBUUQsRUFBTyxDQUFDLEVBQUcsS0FBSyxRQUFRLEVBQzFEUSxFQUFNLEtBQ041NUIsRUFBUyxLQUNBLENBQ1QsSUFBSTY1QixFQUFTRCxFQUFJLElBQUlQLENBQVksRUFDN0JTLEVBQVNGLEVBQUksSUFBSUMsRUFBTyxJQUFJUixDQUFZLENBQUMsRUFBRSxNQUFLLElBQU8sRUFDdkRVLEVBQVNELEVBQU8sU0FBU1YsQ0FBSyxFQUVsQyxHQURBUSxFQUFNQyxFQUNGRCxFQUFJLE9BQVEsRUFDWixPQUFPRyxFQUFTLzVCLEVBRWhCLEtBQU8rNUIsRUFBTyxPQUFTLEdBQ25CQSxFQUFTLElBQU1BLEVBQ25CLzVCLEVBQVMsR0FBSys1QixFQUFTLzVCLENBRTlCLENBQ0wsRUFNQSxjQUFjLFlBQWMsU0FBU2c2QixHQUFjLENBQy9DLE9BQU8sS0FBSyxJQUNoQixFQU1BLGNBQWMsb0JBQXNCLFNBQVNDLEdBQXNCLENBQy9ELE9BQU8sS0FBSyxPQUFTLENBQ3pCLEVBTUEsY0FBYyxXQUFhLFNBQVNDLEdBQWEsQ0FDN0MsT0FBTyxLQUFLLEdBQ2hCLEVBTUEsY0FBYyxtQkFBcUIsU0FBU0MsR0FBcUIsQ0FDN0QsT0FBTyxLQUFLLE1BQVEsQ0FDeEIsRUFNQSxjQUFjLGNBQWdCLFNBQVNDLEdBQWdCLENBQ25ELEdBQUksS0FBSyxXQUFZLEVBQ2pCLE9BQU8sS0FBSyxHQUFHLFNBQVMsRUFBSSxHQUFLLEtBQUssTUFBTSxnQkFFaEQsUUFESXJKLEVBQU0sS0FBSyxNQUFRLEVBQUksS0FBSyxLQUFPLEtBQUssSUFDbkNzSixFQUFNLEdBQUlBLEVBQU0sSUFDaEJ0SixFQUFPLEdBQUtzSixJQUFTLEVBREZBLElBQ3hCLENBRUosT0FBTyxLQUFLLE1BQVEsRUFBSUEsRUFBTSxHQUFLQSxFQUFNLENBQzdDLEVBTUEsY0FBYyxPQUFTLFNBQVNDLEdBQVMsQ0FDckMsT0FBTyxLQUFLLE9BQVMsR0FBSyxLQUFLLE1BQVEsQ0FDM0MsRUFNQSxjQUFjLElBQU0sY0FBYyxPQU1sQyxjQUFjLFdBQWEsU0FBU0MsR0FBYSxDQUM3QyxNQUFPLENBQUMsS0FBSyxVQUFZLEtBQUssS0FBTyxDQUN6QyxFQU1BLGNBQWMsV0FBYSxTQUFTQyxHQUFhLENBQzdDLE9BQU8sS0FBSyxVQUFZLEtBQUssTUFBUSxDQUN6QyxFQU1BLGNBQWMsTUFBUSxTQUFTQyxHQUFRLENBQ25DLE9BQVEsS0FBSyxJQUFNLEtBQU8sQ0FDOUIsRUFNQSxjQUFjLE9BQVMsU0FBU0MsR0FBUyxDQUNyQyxPQUFRLEtBQUssSUFBTSxLQUFPLENBQzlCLEVBT0EsY0FBYyxPQUFTLFNBQVNDLEVBQU9DLEVBQU8sQ0FHMUMsT0FGSyxPQUFPQSxDQUFLLElBQ2JBLEVBQVEsVUFBVUEsQ0FBSyxHQUN2QixLQUFLLFdBQWFBLEVBQU0sVUFBYSxLQUFLLE9BQVMsS0FBUSxHQUFNQSxFQUFNLE9BQVMsS0FBUSxFQUNqRixHQUNKLEtBQUssT0FBU0EsRUFBTSxNQUFRLEtBQUssTUFBUUEsRUFBTSxHQUMxRCxFQVFBLGNBQWMsR0FBSyxjQUFjLE9BT2pDLGNBQWMsVUFBWSxTQUFTQyxFQUFVRCxFQUFPLENBQ2hELE1BQU8sQ0FBQyxLQUFLLEdBQW1CQSxDQUFLLENBQ3pDLEVBUUEsY0FBYyxJQUFNLGNBQWMsVUFRbEMsY0FBYyxHQUFLLGNBQWMsVUFPakMsY0FBYyxTQUFXLFNBQVNFLEVBQVNGLEVBQU8sQ0FDOUMsT0FBTyxLQUFLLEtBQXFCQSxDQUFLLEVBQUksQ0FDOUMsRUFRQSxjQUFjLEdBQUssY0FBYyxTQU9qQyxjQUFjLGdCQUFrQixTQUFTRyxFQUFnQkgsRUFBTyxDQUM1RCxPQUFPLEtBQUssS0FBcUJBLENBQUssR0FBSyxDQUMvQyxFQVFBLGNBQWMsSUFBTSxjQUFjLGdCQVFsQyxjQUFjLEdBQUssY0FBYyxnQkFPakMsY0FBYyxZQUFjLFNBQVNJLEVBQVlKLEVBQU8sQ0FDcEQsT0FBTyxLQUFLLEtBQXFCQSxDQUFLLEVBQUksQ0FDOUMsRUFRQSxjQUFjLEdBQUssY0FBYyxZQU9qQyxjQUFjLG1CQUFxQixTQUFTSyxFQUFtQkwsRUFBTyxDQUNsRSxPQUFPLEtBQUssS0FBcUJBLENBQUssR0FBSyxDQUMvQyxFQVFBLGNBQWMsSUFBTSxjQUFjLG1CQVFsQyxjQUFjLEdBQUssY0FBYyxtQkFRakMsY0FBYyxRQUFVLFNBQVNNLEVBQVFOLEVBQU8sQ0FHNUMsR0FGSyxPQUFPQSxDQUFLLElBQ2JBLEVBQVEsVUFBVUEsQ0FBSyxHQUN2QixLQUFLLEdBQUdBLENBQUssRUFDYixNQUFPLEdBQ1gsSUFBSU8sRUFBVSxLQUFLLFdBQVksRUFDM0JDLEVBQVdSLEVBQU0sYUFDckIsT0FBSU8sR0FBVyxDQUFDQyxFQUNMLEdBQ1AsQ0FBQ0QsR0FBV0MsRUFDTCxFQUVOLEtBQUssU0FHRlIsRUFBTSxPQUFTLEVBQU0sS0FBSyxPQUFTLEdBQU9BLEVBQU0sT0FBUyxLQUFLLE1BQVNBLEVBQU0sTUFBUSxFQUFNLEtBQUssTUFBUSxFQUFNLEdBQUssRUFGaEgsS0FBSyxJQUFJQSxDQUFLLEVBQUUsYUFBZSxHQUFLLENBR25ELEVBU0EsY0FBYyxLQUFPLGNBQWMsUUFNbkMsY0FBYyxPQUFTLFNBQVNTLEdBQVMsQ0FDckMsTUFBSSxDQUFDLEtBQUssVUFBWSxLQUFLLEdBQUcsU0FBUyxFQUM1QixVQUNKLEtBQUssSUFBRyxFQUFHLElBQUksR0FBRyxDQUM3QixFQU9BLGNBQWMsSUFBTSxjQUFjLE9BT2xDLGNBQWMsSUFBTSxTQUFTQyxFQUFJQyxFQUFRLENBQ2hDLE9BQU9BLENBQU0sSUFDZEEsRUFBUyxVQUFVQSxDQUFNLEdBSTdCLElBQUlDLEVBQU0sS0FBSyxPQUFTLEdBQ3BCQyxFQUFNLEtBQUssS0FBTyxNQUNsQkMsRUFBTSxLQUFLLE1BQVEsR0FDbkJDLEVBQU0sS0FBSyxJQUFNLE1BRWpCQyxFQUFNTCxFQUFPLE9BQVMsR0FDdEJNLEVBQU1OLEVBQU8sS0FBTyxNQUNwQk8sRUFBTVAsRUFBTyxNQUFRLEdBQ3JCUSxFQUFNUixFQUFPLElBQU0sTUFFbkJTLEVBQU0sRUFBR0MsRUFBTSxFQUFHQyxFQUFNLEVBQUdDLEVBQU0sRUFDckMsT0FBQUEsR0FBT1IsRUFBTUksRUFDYkcsR0FBT0MsSUFBUSxHQUNmQSxHQUFPLE1BQ1BELEdBQU9SLEVBQU1JLEVBQ2JHLEdBQU9DLElBQVEsR0FDZkEsR0FBTyxNQUNQRCxHQUFPUixFQUFNSSxFQUNiRyxHQUFPQyxJQUFRLEdBQ2ZBLEdBQU8sTUFDUEQsR0FBT1IsRUFBTUksRUFDYkksR0FBTyxNQUNBLFNBQVVFLEdBQU8sR0FBTUMsRUFBTUgsR0FBTyxHQUFNQyxFQUFLLEtBQUssUUFBUSxDQUN2RSxFQU9BLGNBQWMsU0FBVyxTQUFTRyxFQUFTQyxFQUFZLENBQ25ELE9BQUssT0FBT0EsQ0FBVSxJQUNsQkEsRUFBYSxVQUFVQSxDQUFVLEdBQzlCLEtBQUssSUFBSUEsRUFBVyxJQUFLLENBQUEsQ0FDcEMsRUFRQSxjQUFjLElBQU0sY0FBYyxTQU9sQyxjQUFjLFNBQVcsU0FBU0MsRUFBU0MsRUFBWSxDQUNuRCxHQUFJLEtBQUssT0FBUSxFQUNiLE9BQU8sS0FLWCxHQUpLLE9BQU9BLENBQVUsSUFDbEJBLEVBQWEsVUFBVUEsQ0FBVSxHQUdqQyxLQUFNLENBQ04sSUFBSWxlLEVBQU0sS0FBSyxJQUFJLEtBQUssSUFDTCxLQUFLLEtBQ0xrZSxFQUFXLElBQ1hBLEVBQVcsSUFBSSxFQUNsQyxPQUFPLFNBQVNsZSxFQUFLLEtBQUssU0FBUSxFQUFJLEtBQUssUUFBUSxDQUN0RCxDQUVELEdBQUlrZSxFQUFXLE9BQVEsRUFDbkIsT0FBTyxLQUNYLEdBQUksS0FBSyxHQUFHLFNBQVMsRUFDakIsT0FBT0EsRUFBVyxRQUFVLFVBQVksS0FDNUMsR0FBSUEsRUFBVyxHQUFHLFNBQVMsRUFDdkIsT0FBTyxLQUFLLFFBQVUsVUFBWSxLQUV0QyxHQUFJLEtBQUssYUFDTCxPQUFJQSxFQUFXLFdBQVksRUFDaEIsS0FBSyxJQUFLLEVBQUMsSUFBSUEsRUFBVyxJQUFHLENBQUUsRUFFL0IsS0FBSyxJQUFLLEVBQUMsSUFBSUEsQ0FBVSxFQUFFLE1BQ25DLEdBQUlBLEVBQVcsV0FBWSxFQUM5QixPQUFPLEtBQUssSUFBSUEsRUFBVyxJQUFLLENBQUEsRUFBRSxNQUd0QyxHQUFJLEtBQUssR0FBRyxVQUFVLEdBQUtBLEVBQVcsR0FBRyxVQUFVLEVBQy9DLE9BQU8sV0FBVyxLQUFLLFNBQVUsRUFBR0EsRUFBVyxTQUFVLEVBQUUsS0FBSyxRQUFRLEVBSzVFLElBQUlmLEVBQU0sS0FBSyxPQUFTLEdBQ3BCQyxFQUFNLEtBQUssS0FBTyxNQUNsQkMsRUFBTSxLQUFLLE1BQVEsR0FDbkJDLEVBQU0sS0FBSyxJQUFNLE1BRWpCQyxFQUFNVyxFQUFXLE9BQVMsR0FDMUJWLEVBQU1VLEVBQVcsS0FBTyxNQUN4QlQsRUFBTVMsRUFBVyxNQUFRLEdBQ3pCUixFQUFNUSxFQUFXLElBQU0sTUFFdkJQLEVBQU0sRUFBR0MsRUFBTSxFQUFHQyxFQUFNLEVBQUdDLEVBQU0sRUFDckMsT0FBQUEsR0FBT1IsRUFBTUksRUFDYkcsR0FBT0MsSUFBUSxHQUNmQSxHQUFPLE1BQ1BELEdBQU9SLEVBQU1LLEVBQ2JFLEdBQU9DLElBQVEsR0FDZkEsR0FBTyxNQUNQQSxHQUFPUCxFQUFNRyxFQUNiRyxHQUFPQyxJQUFRLEdBQ2ZBLEdBQU8sTUFDUEQsR0FBT1IsRUFBTU0sRUFDYkMsR0FBT0MsSUFBUSxHQUNmQSxHQUFPLE1BQ1BBLEdBQU9QLEVBQU1JLEVBQ2JFLEdBQU9DLElBQVEsR0FDZkEsR0FBTyxNQUNQQSxHQUFPTixFQUFNRSxFQUNiRyxHQUFPQyxJQUFRLEdBQ2ZBLEdBQU8sTUFDUEQsR0FBT1IsRUFBTU8sRUFBTU4sRUFBTUssRUFBTUosRUFBTUcsRUFBTUYsRUFBTUMsRUFDakRJLEdBQU8sTUFDQSxTQUFVRSxHQUFPLEdBQU1DLEVBQU1ILEdBQU8sR0FBTUMsRUFBSyxLQUFLLFFBQVEsQ0FDdkUsRUFRQSxjQUFjLElBQU0sY0FBYyxTQVFsQyxjQUFjLE9BQVMsU0FBU08sRUFBT0MsRUFBUyxDQUc1QyxHQUZLLE9BQU9BLENBQU8sSUFDZkEsRUFBVSxVQUFVQSxDQUFPLEdBQzNCQSxFQUFRLE9BQVEsRUFDaEIsTUFBTSxNQUFNLGtCQUFrQixFQUdsQyxHQUFJLEtBQU0sQ0FJTixHQUFJLENBQUMsS0FBSyxVQUNOLEtBQUssT0FBUyxhQUNkQSxFQUFRLE1BQVEsSUFBTUEsRUFBUSxPQUFTLEdBRXZDLE9BQU8sS0FFWCxJQUFJcGUsR0FBTyxLQUFLLFNBQVcsS0FBSyxNQUFRLEtBQUssT0FDekMsS0FBSyxJQUNMLEtBQUssS0FDTG9lLEVBQVEsSUFDUkEsRUFBUSxJQUNwQixFQUNRLE9BQU8sU0FBU3BlLEVBQUssS0FBSyxTQUFRLEVBQUksS0FBSyxRQUFRLENBQ3RELENBRUQsR0FBSSxLQUFLLE9BQVEsRUFDYixPQUFPLEtBQUssU0FBVyxNQUFRLEtBQ25DLElBQUlxZSxFQUFROUMsRUFBSy91QixFQUNqQixHQUFLLEtBQUssU0E2QkgsQ0FLSCxHQUZLNHhCLEVBQVEsV0FDVEEsRUFBVUEsRUFBUSxjQUNsQkEsRUFBUSxHQUFHLElBQUksRUFDZixPQUFPLE1BQ1gsR0FBSUEsRUFBUSxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsRUFDdkIsT0FBTyxLQUNYNXhCLEVBQU0sS0FDVCxLQXZDbUIsQ0FHaEIsR0FBSSxLQUFLLEdBQUcsU0FBUyxFQUFHLENBQ3BCLEdBQUk0eEIsRUFBUSxHQUFHLEdBQUcsR0FBS0EsRUFBUSxHQUFHLE9BQU8sRUFDckMsT0FBTyxVQUNOLEdBQUlBLEVBQVEsR0FBRyxTQUFTLEVBQ3pCLE9BQU8sSUFHUCxJQUFJRSxFQUFXLEtBQUssSUFBSSxDQUFDLEVBRXpCLE9BREFELEVBQVNDLEVBQVMsSUFBSUYsQ0FBTyxFQUFFLElBQUksQ0FBQyxFQUNoQ0MsRUFBTyxHQUFHLElBQUksRUFDUEQsRUFBUSxhQUFlLElBQU0sU0FFcEM3QyxFQUFNLEtBQUssSUFBSTZDLEVBQVEsSUFBSUMsQ0FBTSxDQUFDLEVBQ2xDN3hCLEVBQU02eEIsRUFBTyxJQUFJOUMsRUFBSSxJQUFJNkMsQ0FBTyxDQUFDLEVBQzFCNXhCLEVBRzNCLFNBQW1CNHhCLEVBQVEsR0FBRyxTQUFTLEVBQzNCLE9BQU8sS0FBSyxTQUFXLE1BQVEsS0FDbkMsR0FBSSxLQUFLLGFBQ0wsT0FBSUEsRUFBUSxXQUFZLEVBQ2IsS0FBSyxJQUFLLEVBQUMsSUFBSUEsRUFBUSxJQUFHLENBQUUsRUFDaEMsS0FBSyxJQUFLLEVBQUMsSUFBSUEsQ0FBTyxFQUFFLE1BQzVCLEdBQUlBLEVBQVEsV0FBWSxFQUMzQixPQUFPLEtBQUssSUFBSUEsRUFBUSxJQUFLLENBQUEsRUFBRSxNQUNuQzV4QixFQUFNLElBQ2QsQ0FrQkksSUFEQSt1QixFQUFNLEtBQ0NBLEVBQUksSUFBSTZDLENBQU8sR0FBRyxDQUdyQkMsRUFBUyxLQUFLLElBQUksRUFBRyxLQUFLLE1BQU05QyxFQUFJLFNBQVEsRUFBSzZDLEVBQVEsU0FBUSxDQUFFLENBQUMsRUFXcEUsUUFQSUcsRUFBTyxLQUFLLEtBQUssS0FBSyxJQUFJRixDQUFNLEVBQUksS0FBSyxHQUFHLEVBQzVDRyxFQUFTRCxHQUFRLEdBQU0sRUFBSSxRQUFRLEVBQUdBLEVBQU8sRUFBRSxFQUkvQ0UsRUFBWSxXQUFXSixDQUFNLEVBQzdCSyxFQUFZRCxFQUFVLElBQUlMLENBQU8sRUFDOUJNLEVBQVUsV0FBWSxHQUFJQSxFQUFVLEdBQUduRCxDQUFHLEdBQzdDOEMsR0FBVUcsRUFDVkMsRUFBWSxXQUFXSixFQUFRLEtBQUssUUFBUSxFQUM1Q0ssRUFBWUQsRUFBVSxJQUFJTCxDQUFPLEVBS2pDSyxFQUFVLE9BQVEsSUFDbEJBLEVBQVksS0FFaEJqeUIsRUFBTUEsRUFBSSxJQUFJaXlCLENBQVMsRUFDdkJsRCxFQUFNQSxFQUFJLElBQUltRCxDQUFTLENBQzFCLENBQ0QsT0FBT2x5QixDQUNYLEVBUUEsY0FBYyxJQUFNLGNBQWMsT0FPbEMsY0FBYyxPQUFTLFNBQVNteUIsRUFBT1AsRUFBUyxDQUs1QyxHQUpLLE9BQU9BLENBQU8sSUFDZkEsRUFBVSxVQUFVQSxDQUFPLEdBRzNCLEtBQU0sQ0FDTixJQUFJcGUsR0FBTyxLQUFLLFNBQVcsS0FBSyxNQUFRLEtBQUssT0FDekMsS0FBSyxJQUNMLEtBQUssS0FDTG9lLEVBQVEsSUFDUkEsRUFBUSxJQUNwQixFQUNRLE9BQU8sU0FBU3BlLEVBQUssS0FBSyxTQUFRLEVBQUksS0FBSyxRQUFRLENBQ3RELENBRUQsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJb2UsQ0FBTyxFQUFFLElBQUlBLENBQU8sQ0FBQyxDQUNsRCxFQVFBLGNBQWMsSUFBTSxjQUFjLE9BUWxDLGNBQWMsSUFBTSxjQUFjLE9BTWxDLGNBQWMsSUFBTSxTQUFTUSxHQUFNLENBQy9CLE9BQU8sU0FBUyxDQUFDLEtBQUssSUFBSyxDQUFDLEtBQUssS0FBTSxLQUFLLFFBQVEsQ0FDeEQsRUFPQSxjQUFjLElBQU0sU0FBU0MsRUFBSXRDLEVBQU8sQ0FDcEMsT0FBSyxPQUFPQSxDQUFLLElBQ2JBLEVBQVEsVUFBVUEsQ0FBSyxHQUNwQixTQUFTLEtBQUssSUFBTUEsRUFBTSxJQUFLLEtBQUssS0FBT0EsRUFBTSxLQUFNLEtBQUssUUFBUSxDQUMvRSxFQU9BLGNBQWMsR0FBSyxTQUFTdUMsRUFBR3ZDLEVBQU8sQ0FDbEMsT0FBSyxPQUFPQSxDQUFLLElBQ2JBLEVBQVEsVUFBVUEsQ0FBSyxHQUNwQixTQUFTLEtBQUssSUFBTUEsRUFBTSxJQUFLLEtBQUssS0FBT0EsRUFBTSxLQUFNLEtBQUssUUFBUSxDQUMvRSxFQU9BLGNBQWMsSUFBTSxTQUFTd0MsRUFBSXhDLEVBQU8sQ0FDcEMsT0FBSyxPQUFPQSxDQUFLLElBQ2JBLEVBQVEsVUFBVUEsQ0FBSyxHQUNwQixTQUFTLEtBQUssSUFBTUEsRUFBTSxJQUFLLEtBQUssS0FBT0EsRUFBTSxLQUFNLEtBQUssUUFBUSxDQUMvRSxFQU9BLGNBQWMsVUFBWSxTQUFTeUMsRUFBVUMsRUFBUyxDQUdsRCxPQUZJLE9BQU9BLENBQU8sSUFDZEEsRUFBVUEsRUFBUSxVQUNqQkEsR0FBVyxNQUFRLEVBQ2IsS0FDRkEsRUFBVSxHQUNSLFNBQVMsS0FBSyxLQUFPQSxFQUFVLEtBQUssTUFBUUEsRUFBWSxLQUFLLE1BQVMsR0FBS0EsRUFBVyxLQUFLLFFBQVEsRUFFbkcsU0FBUyxFQUFHLEtBQUssS0FBUUEsRUFBVSxHQUFLLEtBQUssUUFBUSxDQUNwRSxFQVFBLGNBQWMsSUFBTSxjQUFjLFVBT2xDLGNBQWMsV0FBYSxTQUFTQyxFQUFXRCxFQUFTLENBR3BELE9BRkksT0FBT0EsQ0FBTyxJQUNkQSxFQUFVQSxFQUFRLFVBQ2pCQSxHQUFXLE1BQVEsRUFDYixLQUNGQSxFQUFVLEdBQ1IsU0FBVSxLQUFLLE1BQVFBLEVBQVksS0FBSyxNQUFTLEdBQUtBLEVBQVcsS0FBSyxNQUFRQSxFQUFTLEtBQUssUUFBUSxFQUVwRyxTQUFTLEtBQUssTUFBU0EsRUFBVSxHQUFLLEtBQUssTUFBUSxFQUFJLEVBQUksR0FBSSxLQUFLLFFBQVEsQ0FDM0YsRUFRQSxjQUFjLElBQU0sY0FBYyxXQU9sQyxjQUFjLG1CQUFxQixTQUFTRSxFQUFtQkYsRUFBUyxDQUlwRSxHQUhJLE9BQU9BLENBQU8sSUFDZEEsRUFBVUEsRUFBUSxTQUN0QkEsR0FBVyxHQUNQQSxJQUFZLEVBQ1osT0FBTyxLQUVQLElBQUlsZixFQUFPLEtBQUssS0FDaEIsR0FBSWtmLEVBQVUsR0FBSSxDQUNkLElBQUlqZixFQUFNLEtBQUssSUFDZixPQUFPLFNBQVVBLElBQVFpZixFQUFZbGYsR0FBUyxHQUFLa2YsRUFBV2xmLElBQVNrZixFQUFTLEtBQUssUUFBUSxDQUN6RyxLQUFlLFFBQUlBLElBQVksR0FDWixTQUFTbGYsRUFBTSxFQUFHLEtBQUssUUFBUSxFQUUvQixTQUFTQSxJQUFVa2YsRUFBVSxHQUFLLEVBQUcsS0FBSyxRQUFRLENBRXJFLEVBUUEsY0FBYyxLQUFPLGNBQWMsbUJBUW5DLGNBQWMsTUFBUSxjQUFjLG1CQU1wQyxjQUFjLFNBQVcsU0FBU0csR0FBVyxDQUN6QyxPQUFLLEtBQUssU0FFSCxTQUFTLEtBQUssSUFBSyxLQUFLLEtBQU0sRUFBSyxFQUQvQixJQUVmLEVBTUEsY0FBYyxXQUFhLFNBQVNDLEdBQWEsQ0FDN0MsT0FBSSxLQUFLLFNBQ0UsS0FDSixTQUFTLEtBQUssSUFBSyxLQUFLLEtBQU0sRUFBSSxDQUM3QyxFQU9BLGNBQWMsUUFBVSxTQUFTQyxFQUFROU0sRUFBSSxDQUN6QyxPQUFPQSxFQUFLLEtBQUssVUFBVyxFQUFHLEtBQUssVUFBUyxDQUNqRCxFQU1BLGNBQWMsVUFBWSxTQUFTK00sR0FBWSxDQUMzQyxJQUFJckwsRUFBSyxLQUFLLEtBQ1ZELEVBQUssS0FBSyxJQUNkLE1BQU8sQ0FDSEEsRUFBWSxJQUNaQSxJQUFRLEVBQUksSUFDWkEsSUFBTyxHQUFLLElBQ1pBLElBQU8sR0FDUEMsRUFBWSxJQUNaQSxJQUFRLEVBQUksSUFDWkEsSUFBTyxHQUFLLElBQ1pBLElBQU8sRUFDZixDQUNBLEVBTUEsY0FBYyxVQUFZLFNBQVNzTCxHQUFZLENBQzNDLElBQUl0TCxFQUFLLEtBQUssS0FDVkQsRUFBSyxLQUFLLElBQ2QsTUFBTyxDQUNIQyxJQUFPLEdBQ1BBLElBQU8sR0FBSyxJQUNaQSxJQUFRLEVBQUksSUFDWkEsRUFBWSxJQUNaRCxJQUFPLEdBQ1BBLElBQU8sR0FBSyxJQUNaQSxJQUFRLEVBQUksSUFDWkEsRUFBWSxHQUNwQixDQUNBLEVBU0EsS0FBSyxVQUFZLFNBQVN3TCxFQUFVbnpCLEVBQU8wb0IsRUFBVXhDLEVBQUksQ0FDckQsT0FBT0EsRUFBSyxLQUFLLFlBQVlsbUIsRUFBTzBvQixDQUFRLEVBQUksS0FBSyxZQUFZMW9CLEVBQU8wb0IsQ0FBUSxDQUNwRixFQVFBLEtBQUssWUFBYyxTQUFTMEssRUFBWXB6QixFQUFPMG9CLEVBQVUsQ0FDckQsT0FBTyxJQUFJLEtBQ1Axb0IsRUFBTSxHQUNOQSxFQUFNLElBQU8sRUFDYkEsRUFBTSxJQUFNLEdBQ1pBLEVBQU0sSUFBTSxHQUNaQSxFQUFNLEdBQ05BLEVBQU0sSUFBTyxFQUNiQSxFQUFNLElBQU0sR0FDWkEsRUFBTSxJQUFNLEdBQ1owb0IsQ0FDUixDQUNBLEVBUUEsS0FBSyxZQUFjLFNBQVMySyxFQUFZcnpCLEVBQU8wb0IsRUFBVSxDQUNyRCxPQUFPLElBQUksS0FDUDFvQixFQUFNLElBQU0sR0FDWkEsRUFBTSxJQUFNLEdBQ1pBLEVBQU0sSUFBTyxFQUNiQSxFQUFNLEdBQ05BLEVBQU0sSUFBTSxHQUNaQSxFQUFNLElBQU0sR0FDWkEsRUFBTSxJQUFPLEVBQ2JBLEVBQU0sR0FDTjBvQixDQUNSLENBQ0EsRUN0eUNBLFNBQVMsdUJBQXdCLENBQzdCLE1BQU8sQ0FDSCxJQUFLLElBQUksV0FDVCxPQUFRLElBQ1IsTUFBTyxJQUNQLFdBQVksR0FDWixRQUFTLEVBQ2pCLENBQ0EsQ0FDTyxNQUFNLFlBQWMsQ0FDdkIsT0FBTzlXLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxJQUFJLFNBQVcsR0FDdkIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0xWSxFQUFRLEdBQUcsRUFFbkNBLEVBQVEsU0FBVyxLQUNuQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsTUFBTSxFQUV2Q0EsRUFBUSxRQUFVLEtBQ2xCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxLQUFLLEVBRXRDQSxFQUFRLGFBQWUsSUFDdkIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLEtBQUsxWSxFQUFRLFVBQVUsRUFFekNBLEVBQVEsVUFBWSxJQUNwQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSzFZLEVBQVEsT0FBTyxFQUVuQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLHdCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxJQUFNb2EsRUFBTyxRQUNyQixVQUNDLEdBQ0RwYSxFQUFRLE9BQVMwaEIsZUFBYXRILEVBQU8sT0FBUSxDQUFBLEVBQzdDLFVBQ0MsR0FDRHBhLEVBQVEsTUFBUTBoQixlQUFhdEgsRUFBTyxPQUFRLENBQUEsRUFDNUMsVUFDQyxHQUNEcGEsRUFBUSxXQUFhb2EsRUFBTyxPQUM1QixVQUNDLEdBQ0RwYSxFQUFRLFFBQVVvYSxFQUFPLE9BQ3pCLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxJQUFLQyxRQUFNRCxFQUFPLEdBQUcsRUFBSW9GLGtCQUFnQnBGLEVBQU8sR0FBRyxFQUFJLElBQUksV0FDM0QsT0FBUUMsUUFBTUQsRUFBTyxNQUFNLEVBQUksT0FBT0EsRUFBTyxNQUFNLEVBQUksSUFDdkQsTUFBT0MsUUFBTUQsRUFBTyxLQUFLLEVBQUksT0FBT0EsRUFBTyxLQUFLLEVBQUksSUFDcEQsV0FBWUMsUUFBTUQsRUFBTyxVQUFVLEVBQUksUUFBUUEsRUFBTyxVQUFVLEVBQUksR0FDcEUsUUFBU0MsUUFBTUQsRUFBTyxPQUFPLEVBQUksUUFBUUEsRUFBTyxPQUFPLEVBQUksRUFDdkUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLE1BQVEsU0FDWDdkLEVBQUksSUFBTXkvQixrQkFBZ0I1aEIsRUFBUSxNQUFRLE9BQVlBLEVBQVEsSUFBTSxJQUFJLFVBQVksR0FDekZBLEVBQVEsU0FBVyxTQUFjN2QsRUFBSSxPQUFTNmQsRUFBUSxRQUN0REEsRUFBUSxRQUFVLFNBQWM3ZCxFQUFJLE1BQVE2ZCxFQUFRLE9BQ3BEQSxFQUFRLGFBQWUsU0FBYzdkLEVBQUksV0FBYTZkLEVBQVEsWUFDOURBLEVBQVEsVUFBWSxTQUFjN2QsRUFBSSxRQUFVNmQsRUFBUSxTQUNqRDdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsd0JBQ2hCLE9BQUFBLEVBQVEsSUFBTXVjLEVBQU8sS0FBTyxJQUFJLFdBQ2hDdmMsRUFBUSxPQUFTdWMsRUFBTyxRQUFVLElBQ2xDdmMsRUFBUSxNQUFRdWMsRUFBTyxPQUFTLElBQ2hDdmMsRUFBUSxXQUFhdWMsRUFBTyxZQUFjLEdBQzFDdmMsRUFBUSxRQUFVdWMsRUFBTyxTQUFXLEdBQzdCdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyx3QkFBeUIsQ0FDOUIsTUFBTyxDQUFFLFFBQVMsSUFBSSxXQUFjLE1BQU8sR0FBRyxDQUNsRCxDQUNPLE1BQU0sYUFBZSxDQUN4QixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsUUFBUSxTQUFXLEdBQzNCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNMVksRUFBUSxPQUFPLEVBRXZDQSxFQUFRLFFBQVUsS0FDbEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLEtBQUssRUFFbkMwWSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSx5QkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsUUFBVW9hLEVBQU8sUUFDekIsVUFDQyxHQUNEcGEsRUFBUSxNQUFRMGhCLGVBQWF0SCxFQUFPLE9BQVEsQ0FBQSxFQUM1QyxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsUUFBU0MsUUFBTUQsRUFBTyxPQUFPLEVBQ3ZCb0Ysa0JBQWdCcEYsRUFBTyxPQUFPLEVBQzlCLElBQUksV0FDVixNQUFPQyxRQUFNRCxFQUFPLEtBQUssRUFBSSxPQUFPQSxFQUFPLEtBQUssRUFBSSxHQUNoRSxDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsVUFBWSxTQUNmN2QsRUFBSSxRQUFVeS9CLGtCQUFnQjVoQixFQUFRLFVBQVksT0FBWUEsRUFBUSxRQUFVLElBQUksVUFBWSxHQUNyR0EsRUFBUSxRQUFVLFNBQWM3ZCxFQUFJLE1BQVE2ZCxFQUFRLE9BQzdDN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSx5QkFDaEIsT0FBQUEsRUFBUSxRQUFVdWMsRUFBTyxTQUFXLElBQUksV0FDeEN2YyxFQUFRLE1BQVF1YyxFQUFPLE9BQVMsSUFDekJ2YyxDQUNWLENBQ0wsRUFDQSxJQUFJNmhCLGNBQWMsSUFBTSxDQUNwQixHQUFJLE9BQU9BLGFBQWUsSUFDdEIsT0FBT0EsYUFDWCxHQUFJLE9BQU8sS0FBUyxJQUNoQixPQUFPLEtBQ1gsR0FBSSxPQUFPLE9BQVcsSUFDbEIsT0FBTyxPQUNYLEdBQUksT0FBTyxPQUFXLElBQ2xCLE9BQU8sT0FDWCxLQUFNLGdDQUNWLEtBQ0EsTUFBTUMsT0FBT0QsYUFBVyxPQUNsQmxPLEdBQVFrTyxhQUFXLE9BQU8sS0FBS2xPLEVBQUssUUFBUSxFQUFFLFNBQVMsUUFBUSxHQUNyRSxTQUFTZ08sa0JBQWdCaE8sRUFBSyxDQUMxQixNQUFNb08sRUFBTUQsT0FBS25PLENBQUcsRUFDZHFPLEVBQU0sSUFBSSxXQUFXRCxFQUFJLE1BQU0sRUFDckMsUUFBUyxFQUFJLEVBQUcsRUFBSUEsRUFBSSxPQUFRLEVBQUUsRUFDOUJDLEVBQUksR0FBS0QsRUFBSSxXQUFXLENBQUMsRUFFN0IsT0FBT0MsQ0FDWCxDQUNBLE1BQU1DLE9BQU9KLGFBQVcsT0FDbEJFLEdBQVFGLGFBQVcsT0FBTyxLQUFLRSxFQUFLLFFBQVEsRUFBRSxTQUFTLFFBQVEsR0FDckUsU0FBU0gsa0JBQWdCSSxFQUFLLENBQzFCLE1BQU1ELEVBQU0sQ0FBQSxFQUNaLE9BQUFDLEVBQUksUUFBU0UsR0FBUyxDQUNsQkgsRUFBSSxLQUFLLE9BQU8sYUFBYUcsQ0FBSSxDQUFDLENBQzFDLENBQUssRUFDTUQsT0FBS0YsRUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUM1QixDQUNBLFNBQVNMLGVBQWFTLEVBQU0sQ0FDeEIsT0FBT0EsRUFBSyxVQUNoQixDQUNJQyxRQUFRLEtBQUMsT0FBU0MsT0FDbEJELFFBQVEsS0FBQyxLQUFPQyxLQUNoQkMsUUFBQUEsYUFFSixTQUFTOUYsUUFBTTc2QixFQUFPLENBQ2xCLE9BQU9BLEdBQVUsSUFDckIsQ0NwTEEsU0FBUzRnQyxvQkFBbUIsQ0FDeEIsTUFBTyxDQUFFLFlBQWEsQ0FBQSxFQUFJLG1CQUFvQixFQUFLLENBQ3ZELENBQ08sTUFBTUMsU0FBUyxDQUNsQixPQUFPeGlCLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxVQUFXdHVCLEtBQUtrUyxFQUFRLFlBQ3BCLFlBQVksT0FBT2xTLEVBQUc0cUIsRUFBTyxPQUFPLEVBQUUsRUFBRSxLQUFJLENBQUUsRUFBRSxTQUVwRCxPQUFJMVksRUFBUSxxQkFBdUIsSUFDL0IwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLEtBQUsxWSxFQUFRLGtCQUFrQixFQUU5QzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVdWlCLHFCQUNoQixLQUFPbkksRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxZQUFZLEtBQUssWUFBWSxPQUFPb2EsRUFBUUEsRUFBTyxPQUFRLENBQUEsQ0FBQyxFQUNwRSxVQUNDLEdBQ0RwYSxFQUFRLG1CQUFxQm9hLEVBQU8sT0FDcEMsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILFlBQWEsTUFBTSxRQUFRQSxHQUFRLFdBQVcsRUFDeENBLEVBQU8sWUFBWSxJQUFLLEdBQU0sWUFBWSxTQUFTLENBQUMsQ0FBQyxFQUNyRCxDQUFFLEVBQ1IsbUJBQW9CQyxRQUFNRCxFQUFPLGtCQUFrQixFQUM3QyxRQUFRQSxFQUFPLGtCQUFrQixFQUNqQyxFQUNsQixDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBSTZkLEVBQVEsWUFDUjdkLEVBQUksWUFBYzZkLEVBQVEsWUFBWSxJQUFLcGEsR0FBTUEsRUFBSSxZQUFZLE9BQU9BLENBQUMsRUFBSSxNQUFTLEVBR3RGekQsRUFBSSxZQUFjLEdBRXRCNmQsRUFBUSxxQkFBdUIsU0FDMUI3ZCxFQUFJLG1CQUFxQjZkLEVBQVEsb0JBQy9CN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVXVpQixxQkFDaEIsT0FBQXZpQixFQUFRLFlBQ0p1YyxFQUFPLGFBQWEsSUFBSzMyQixHQUFNLFlBQVksWUFBWUEsQ0FBQyxDQUFDLEdBQUssR0FDbEVvYSxFQUFRLG1CQUFxQnVjLEVBQU8sb0JBQXNCLEdBQ25EdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyx1QkFBd0IsQ0FDN0IsTUFBTyxDQUFFLE1BQU8sR0FBSSxRQUFTLEVBQUssQ0FDdEMsQ0FDTyxNQUFNLFlBQWMsQ0FDdkIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLFFBQVUsSUFDbEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLEtBQUssRUFFdENBLEVBQVEsVUFBWSxJQUNwQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSzFZLEVBQVEsT0FBTyxFQUVuQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLHdCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxNQUFRb2EsRUFBTyxTQUN2QixVQUNDLEdBQ0RwYSxFQUFRLFFBQVVvYSxFQUFPLE9BQ3pCLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxNQUFPQyxRQUFNRCxFQUFPLEtBQUssRUFBSSxPQUFPQSxFQUFPLEtBQUssRUFBSSxHQUNwRCxRQUFTQyxRQUFNRCxFQUFPLE9BQU8sRUFBSSxRQUFRQSxFQUFPLE9BQU8sRUFBSSxFQUN2RSxDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsUUFBVSxTQUFjN2QsRUFBSSxNQUFRNmQsRUFBUSxPQUNwREEsRUFBUSxVQUFZLFNBQWM3ZCxFQUFJLFFBQVU2ZCxFQUFRLFNBQ2pEN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSx3QkFDaEIsT0FBQUEsRUFBUSxNQUFRdWMsRUFBTyxPQUFTLEdBQ2hDdmMsRUFBUSxRQUFVdWMsRUFBTyxTQUFXLEdBQzdCdmMsQ0FDVixDQUNMLEVBeUtBLFNBQVMscUJBQXNCLENBQzNCLE1BQU8sQ0FBRSxNQUFPLEdBQUksU0FBVSxFQUFHLFFBQVMsQ0FBQSxFQUM5QyxDQUNPLE1BQU0sVUFBWSxDQUNyQixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDdENwYyxFQUFRLFFBQVUsSUFDbEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLEtBQUssRUFFdENBLEVBQVEsV0FBYSxHQUNyQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsUUFBUSxFQUU3QyxVQUFXbFMsS0FBS2tTLEVBQVEsUUFDcEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU81cUIsQ0FBQyxFQUU5QixPQUFPNHFCLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLHNCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxNQUFRb2EsRUFBTyxTQUN2QixVQUNDLEdBQ0RwYSxFQUFRLFNBQVdvYSxFQUFPLFNBQzFCLFVBQ0MsR0FDRHBhLEVBQVEsUUFBUSxLQUFLb2EsRUFBTyxPQUFRLENBQUEsRUFDcEMsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILE1BQU9DLFFBQU1ELEVBQU8sS0FBSyxFQUFJLE9BQU9BLEVBQU8sS0FBSyxFQUFJLEdBQ3BELFNBQVVDLFFBQU1ELEVBQU8sUUFBUSxFQUFJLE9BQU9BLEVBQU8sUUFBUSxFQUFJLEVBQzdELFFBQVMsTUFBTSxRQUFRQSxHQUFRLE9BQU8sRUFDaENBLEVBQU8sUUFBUSxJQUFLLEdBQU0sT0FBTyxDQUFDLENBQUMsRUFDbkMsQ0FBRSxDQUNwQixDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsUUFBVSxTQUFjN2QsRUFBSSxNQUFRNmQsRUFBUSxPQUNwREEsRUFBUSxXQUFhLFNBQ2hCN2QsRUFBSSxTQUFXLEtBQUssTUFBTTZkLEVBQVEsUUFBUSxHQUMzQ0EsRUFBUSxRQUNSN2QsRUFBSSxRQUFVNmQsRUFBUSxRQUFRLElBQUtwYSxHQUFNQSxDQUFDLEVBRzFDekQsRUFBSSxRQUFVLEdBRVhBLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsc0JBQ2hCLE9BQUFBLEVBQVEsTUFBUXVjLEVBQU8sT0FBUyxHQUNoQ3ZjLEVBQVEsU0FBV3VjLEVBQU8sVUFBWSxFQUN0Q3ZjLEVBQVEsUUFBVXVjLEVBQU8sU0FBUyxJQUFLMzJCLEdBQU1BLENBQUMsR0FBSyxHQUM1Q29hLENBQ1YsQ0FDTCxFQUNBLFNBQVMsb0JBQXFCLENBQzFCLE1BQU8sQ0FDSCxZQUFhLEdBQ2IsV0FBWSxDQUFFLEVBQ2QsS0FBTSxHQUNOLFFBQVMsR0FDVCxLQUFNLEdBQ04sT0FBUSxFQUNoQixDQUNBLENBQ08sTUFBTSxTQUFXLENBQ3BCLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUN0Q3BjLEVBQVEsY0FBZ0IsSUFDeEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLFdBQVcsRUFFaEQsVUFBV2xTLEtBQUtrUyxFQUFRLFdBQ3BCLFVBQVUsT0FBT2xTLEVBQUc0cUIsRUFBTyxPQUFPLEVBQUUsRUFBRSxLQUFJLENBQUUsRUFBRSxTQUVsRCxPQUFJMVksRUFBUSxPQUFTLElBQ2pCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxJQUFJLEVBRXJDQSxFQUFRLFVBQVksSUFDcEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLE9BQU8sRUFFeENBLEVBQVEsT0FBUyxJQUNqQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsSUFBSSxFQUVyQ0EsRUFBUSxTQUFXLElBQ25CMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxNQUFNLEVBRXBDMFksQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUscUJBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLFlBQWNvYSxFQUFPLFNBQzdCLFVBQ0MsR0FDRHBhLEVBQVEsV0FBVyxLQUFLLFVBQVUsT0FBT29hLEVBQVFBLEVBQU8sT0FBUSxDQUFBLENBQUMsRUFDakUsVUFDQyxHQUNEcGEsRUFBUSxLQUFPb2EsRUFBTyxTQUN0QixVQUNDLEdBQ0RwYSxFQUFRLFFBQVVvYSxFQUFPLFNBQ3pCLFVBQ0MsR0FDRHBhLEVBQVEsS0FBT29hLEVBQU8sU0FDdEIsVUFDQyxHQUNEcGEsRUFBUSxPQUFTb2EsRUFBTyxTQUN4QixjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsWUFBYUMsUUFBTUQsRUFBTyxXQUFXLEVBQUksT0FBT0EsRUFBTyxXQUFXLEVBQUksR0FDdEUsV0FBWSxNQUFNLFFBQVFBLEdBQVEsVUFBVSxFQUN0Q0EsRUFBTyxXQUFXLElBQUssR0FBTSxVQUFVLFNBQVMsQ0FBQyxDQUFDLEVBQ2xELENBQUUsRUFDUixLQUFNQyxRQUFNRCxFQUFPLElBQUksRUFBSSxPQUFPQSxFQUFPLElBQUksRUFBSSxHQUNqRCxRQUFTQyxRQUFNRCxFQUFPLE9BQU8sRUFBSSxPQUFPQSxFQUFPLE9BQU8sRUFBSSxHQUMxRCxLQUFNQyxRQUFNRCxFQUFPLElBQUksRUFBSSxPQUFPQSxFQUFPLElBQUksRUFBSSxHQUNqRCxPQUFRQyxRQUFNRCxFQUFPLE1BQU0sRUFBSSxPQUFPQSxFQUFPLE1BQU0sRUFBSSxFQUNuRSxDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsY0FBZ0IsU0FDbkI3ZCxFQUFJLFlBQWM2ZCxFQUFRLGFBQzNCQSxFQUFRLFdBQ1I3ZCxFQUFJLFdBQWE2ZCxFQUFRLFdBQVcsSUFBS3BhLEdBQU1BLEVBQUksVUFBVSxPQUFPQSxDQUFDLEVBQUksTUFBUyxFQUdsRnpELEVBQUksV0FBYSxHQUVyQjZkLEVBQVEsT0FBUyxTQUFjN2QsRUFBSSxLQUFPNmQsRUFBUSxNQUNsREEsRUFBUSxVQUFZLFNBQWM3ZCxFQUFJLFFBQVU2ZCxFQUFRLFNBQ3hEQSxFQUFRLE9BQVMsU0FBYzdkLEVBQUksS0FBTzZkLEVBQVEsTUFDbERBLEVBQVEsU0FBVyxTQUFjN2QsRUFBSSxPQUFTNmQsRUFBUSxRQUMvQzdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUscUJBQ2hCLE9BQUFBLEVBQVEsWUFBY3VjLEVBQU8sYUFBZSxHQUM1Q3ZjLEVBQVEsV0FDSnVjLEVBQU8sWUFBWSxJQUFLMzJCLEdBQU0sVUFBVSxZQUFZQSxDQUFDLENBQUMsR0FBSyxHQUMvRG9hLEVBQVEsS0FBT3VjLEVBQU8sTUFBUSxHQUM5QnZjLEVBQVEsUUFBVXVjLEVBQU8sU0FBVyxHQUNwQ3ZjLEVBQVEsS0FBT3VjLEVBQU8sTUFBUSxHQUM5QnZjLEVBQVEsT0FBU3VjLEVBQU8sUUFBVSxHQUMzQnZjLENBQ1YsQ0FDTCxFQUNBLFNBQVN3YyxRQUFNNzZCLEVBQU8sQ0FDbEIsT0FBT0EsR0FBVSxJQUNyQixxREM5Y0MsU0FBMENzQyxFQUFNeVksRUFBUyxDQUV4REMsRUFBQSxRQUFpQkQsR0FPbkIsR0FBR0UsZUFBTSxVQUFXLENBQ3BCLE9BQWlCLFNBQVM2bEIsRUFBUyxDQUV6QixJQUFJQyxFQUFtQixDQUFBLEVBR3ZCLFNBQVNDLEVBQW9CQyxFQUFVLENBR3RDLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVSxRQUduQyxJQUFJam1CLEVBQVMrbEIsRUFBaUJFLEdBQVksQ0FDekMsRUFBR0EsRUFDSCxFQUFHLEdBQ0gsUUFBUyxDQUFFLENBQ3ZCLEVBR1csT0FBQUgsRUFBUUcsR0FBVSxLQUFLam1CLEVBQU8sUUFBU0EsRUFBUUEsRUFBTyxRQUFTZ21CLENBQW1CLEVBR2xGaG1CLEVBQU8sRUFBSSxHQUdKQSxFQUFPLE9BQ2QsQ0FJRCxPQUFBZ21CLEVBQW9CLEVBQUlGLEVBR3hCRSxFQUFvQixFQUFJRCxFQUd4QkMsRUFBb0IsRUFBSSxTQUFTaGhDLEVBQU8sQ0FBRSxPQUFPQSxDQUFNLEVBR3ZEZ2hDLEVBQW9CLEVBQUksU0FBU2xQLEVBQVNsdkIsRUFBTXMrQixFQUFRLENBQ25ERixFQUFvQixFQUFFbFAsRUFBU2x2QixDQUFJLEdBQ3RDLE9BQU8sZUFBZWt2QixFQUFTbHZCLEVBQU0sQ0FDcEMsYUFBYyxHQUNkLFdBQVksR0FDWixJQUFLcytCLENBQ2xCLENBQWEsQ0FFYixFQUdVRixFQUFvQixFQUFJLFNBQVNobUIsRUFBUSxDQUN4QyxJQUFJa21CLEVBQVNsbUIsR0FBVUEsRUFBTyxXQUM3QixVQUFzQixDQUFFLE9BQU9BLEVBQU8sT0FBYSxFQUNuRCxVQUE0QixDQUFFLE9BQU9BLEdBQ3RDLE9BQUFnbUIsRUFBb0IsRUFBRUUsRUFBUSxJQUFLQSxDQUFNLEVBQ2xDQSxDQUNsQixFQUdVRixFQUFvQixFQUFJLFNBQVNwRyxFQUFRdUcsRUFBVSxDQUFFLE9BQU8sT0FBTyxVQUFVLGVBQWUsS0FBS3ZHLEVBQVF1RyxDQUFRLENBQUUsRUFHbkhILEVBQW9CLEVBQUksR0FHakJBLEVBQW9CQSxFQUFvQixFQUFJLENBQUMsQ0FDcEQsRUFFQSxDQUVILFNBQVNobUIsRUFBUThXLEVBQVNrUCxFQUFxQixDQUl0RCxPQUFPLGVBQWVsUCxFQUFTLGFBQWMsQ0FBRSxNQUFPLEVBQUksQ0FBRSxFQUM1RCxJQUFJc1AsRUFBU0osRUFBb0IsQ0FBQyxFQUNsQyxTQUFTSyxFQUFpQkMsRUFBSyxDQUMzQixPQUFPLE9BQU9BLEdBQVEsVUFBWSxPQUFPQSxFQUFJLFlBQWUsVUFBWSxPQUFPQSxFQUFJLFNBQVksVUFDbkcsQ0FDQSxJQUFJQyxFQUFrQixVQUFZLENBQzlCLFNBQVNBLEVBQWV2NkIsRUFBTWhFLEVBQVMsQ0FDL0JnRSxJQUFTLFNBQVVBLEVBQU8sQ0FBRSxHQUM1QmhFLElBQVksU0FBVUEsRUFBVSxDQUFFLFlBQWEsRUFBSyxHQUN4RCxJQUFJdytCLEVBQVEsS0FFWixHQURBLEtBQUssV0FBYSxHQUNkeDZCLEVBQ0EsR0FBSSxPQUFPLFFBQVksS0FBZUEsYUFBZ0IsUUFBUyxDQUMzRCxJQUFJd3ZCLEVBQU80SyxFQUFPLGNBQWNwNkIsQ0FBSSxFQUNwQ3d2QixFQUFLLFFBQVEsU0FBVXowQixFQUFLLENBQ3hCLElBQUkwL0IsRUFBU0wsRUFBTyxnQkFBZ0JwNkIsRUFBTWpGLENBQUcsRUFDN0MwL0IsRUFBTyxRQUFRLFNBQVV6aEMsRUFBTyxDQUN4QmdELEVBQVEsWUFDUncrQixFQUFNLE9BQU96L0IsRUFBS3EvQixFQUFPLGlCQUFpQnBoQyxDQUFLLENBQUMsRUFHaER3aEMsRUFBTSxPQUFPei9CLEVBQUsvQixDQUFLLENBRW5ELENBQXFCLENBQ3JCLENBQWlCLENBQ0osU0FDUXFoQyxFQUFpQnI2QixDQUFJLEVBQzFCQSxFQUFLLFFBQVEsU0FBVWpGLEVBQUswL0IsRUFBUSxDQUNoQ0QsRUFBTSxPQUFPei9CLEVBQUswL0IsQ0FBTSxDQUM1QyxDQUFpQixVQUVJLE9BQU8sSUFBUSxLQUFlejZCLGFBQWdCLElBQUssQ0FDeEQsSUFBSTA2QixFQUFRMTZCLEVBQ1owNkIsRUFBTSxRQUFRLFNBQVUxaEMsRUFBTytCLEVBQUssQ0FDaEN5L0IsRUFBTSxPQUFPei9CLEVBQUsvQixDQUFLLENBQzNDLENBQWlCLENBQ0osTUFDUSxPQUFPZ0gsR0FBUyxTQUNyQixLQUFLLGlCQUFpQkEsQ0FBSSxFQUVyQixPQUFPQSxHQUFTLFVBQ3JCLE9BQU8sb0JBQW9CQSxDQUFJLEVBQUUsUUFBUSxTQUFVakYsRUFBSyxDQUNwRCxJQUFJNC9CLEVBQVczNkIsRUFDWHk2QixFQUFTRSxFQUFTNS9CLEdBQ2xCLE1BQU0sUUFBUTAvQixDQUFNLEVBQ3BCQSxFQUFPLFFBQVEsU0FBVXpoQyxFQUFPLENBQzVCd2hDLEVBQU0sT0FBT3ovQixFQUFLL0IsQ0FBSyxDQUNuRCxDQUF5QixFQUdEd2hDLEVBQU0sT0FBT3ovQixFQUFLMC9CLENBQU0sQ0FFaEQsQ0FBaUIsQ0FHWixDQUNELE9BQUFGLEVBQWUsVUFBVSxpQkFBbUIsU0FBVW45QixFQUFLLENBRXZELFFBREl3OUIsRUFBUXg5QixFQUFJLE1BQU07QUFBQSxDQUFNLEVBQ25COUMsRUFBSSxFQUFHQSxFQUFJc2dDLEVBQU0sT0FBUXRnQyxJQUFLLENBQ25DLElBQUl3RCxFQUFJODhCLEVBQU10Z0MsR0FDVmdHLEVBQVF4QyxFQUFFLFFBQVEsR0FBRyxFQUN6QixHQUFJd0MsRUFBUSxFQUFHLENBQ1gsSUFBSXZGLEVBQU0rQyxFQUFFLFVBQVUsRUFBR3dDLENBQUssRUFBRSxPQUM1QnRILEVBQVE4RSxFQUFFLFVBQVV3QyxFQUFRLENBQUMsRUFBRSxPQUNuQyxLQUFLLE9BQU92RixFQUFLL0IsQ0FBSyxDQUN6QixDQUNKLENBQ1QsRUFDSXVoQyxFQUFlLFVBQVUsT0FBUyxTQUFVeC9CLEVBQUsvQixFQUFPLENBQ3BELElBQUk2aEMsRUFBZ0JULEVBQU8sY0FBY3IvQixDQUFHLEVBQzVDLEdBQUkvQixJQUFVLE9BQ1YsT0FBTyxLQUFLLFdBQVc2aEMsT0FFdEIsQ0FDRCxJQUFJQyxFQUFXLEtBQUssV0FBV0QsR0FDL0IsR0FBSUMsRUFBVSxDQUNWLElBQUl4NkIsRUFBUXc2QixFQUFTLFFBQVE5aEMsQ0FBSyxFQUM5QnNILEdBQVMsR0FDVHc2QixFQUFTLE9BQU94NkIsRUFBTyxDQUFDLEVBRXhCdzZCLEVBQVMsU0FBVyxHQUNwQixPQUFPLEtBQUssV0FBV0QsRUFFOUIsQ0FDSixDQUNULEVBQ0lOLEVBQWUsVUFBVSxPQUFTLFNBQVV4L0IsRUFBSy9CLEVBQU8sQ0FDcEQsSUFBSXdoQyxFQUFRLEtBQ1JLLEVBQWdCVCxFQUFPLGNBQWNyL0IsQ0FBRyxFQUN2QyxNQUFNLFFBQVEsS0FBSyxXQUFXOC9CLEVBQWMsSUFDN0MsS0FBSyxXQUFXQSxHQUFpQixJQUVqQyxNQUFNLFFBQVE3aEMsQ0FBSyxFQUNuQkEsRUFBTSxRQUFRLFNBQVUraEMsRUFBWSxDQUNoQ1AsRUFBTSxXQUFXSyxHQUFlLEtBQUtULEVBQU8sZUFBZVcsQ0FBVSxDQUFDLENBQ3RGLENBQWEsRUFHRCxLQUFLLFdBQVdGLEdBQWUsS0FBS1QsRUFBTyxlQUFlcGhDLENBQUssQ0FBQyxDQUU1RSxFQUNJdWhDLEVBQWUsVUFBVSxJQUFNLFNBQVV4L0IsRUFBSy9CLEVBQU8sQ0FDakQsSUFBSTZoQyxFQUFnQlQsRUFBTyxjQUFjci9CLENBQUcsRUFDNUMsR0FBSSxNQUFNLFFBQVEvQixDQUFLLEVBQUcsQ0FDdEIsSUFBSWdpQyxFQUFlLENBQUEsRUFDbkJoaUMsRUFBTSxRQUFRLFNBQVUraEMsRUFBWSxDQUNoQ0MsRUFBYSxLQUFLWixFQUFPLGVBQWVXLENBQVUsQ0FBQyxDQUNuRSxDQUFhLEVBQ0QsS0FBSyxXQUFXRixHQUFpQkcsQ0FDcEMsTUFFRyxLQUFLLFdBQVdILEdBQWlCLENBQUNULEVBQU8sZUFBZXBoQyxDQUFLLENBQUMsQ0FFMUUsRUFDSXVoQyxFQUFlLFVBQVUsSUFBTSxTQUFVeC9CLEVBQUsvQixFQUFPLENBQ2pELElBQUlpaUMsRUFBVyxLQUFLLFdBQVdiLEVBQU8sY0FBY3IvQixDQUFHLEdBQ25EbWdDLEVBQVksTUFBTSxRQUFRRCxDQUFRLEVBQ3RDLEdBQUksQ0FBQ0MsRUFDRCxNQUFPLEdBRVgsR0FBSWxpQyxJQUFVLE9BQVcsQ0FDckIsSUFBSW1pQyxFQUFrQmYsRUFBTyxlQUFlcGhDLENBQUssRUFDakQsT0FBT2lpQyxFQUFTLFFBQVFFLENBQWUsR0FBSyxDQUMvQyxLQUVHLE9BQU8sRUFFbkIsRUFDSVosRUFBZSxVQUFVLElBQU0sU0FBVXgvQixFQUFLLENBQzFDLElBQUkwL0IsRUFBUyxLQUFLLFdBQVdMLEVBQU8sY0FBY3IvQixDQUFHLEdBQ3JELE9BQUkwL0IsSUFBVyxPQUNKQSxFQUFPLFNBRVgsRUFDZixFQUNJRixFQUFlLFVBQVUsUUFBVSxTQUFVMWdDLEVBQVUsQ0FDbkQsSUFBSTJnQyxFQUFRLEtBQ1osT0FBTyxvQkFBb0IsS0FBSyxVQUFVLEVBQ3JDLFFBQVEsU0FBVXovQixFQUFLLENBQ3hCbEIsRUFBU2tCLEVBQUt5L0IsRUFBTSxXQUFXei9CLEVBQUksQ0FDdEMsRUFBRSxJQUFJLENBQ2YsRUFDSXcvQixFQUFlLFVBQVUsVUFBWSxVQUFZLENBQzdDLEdBQUksT0FBTyxRQUFZLElBQWEsQ0FDaEMsSUFBSWEsRUFBWSxJQUFJLFFBQ3BCLFlBQUssUUFBUSxTQUFVcmdDLEVBQUswL0IsRUFBUSxDQUNoQ0EsRUFBTyxRQUFRLFNBQVV6aEMsRUFBTyxDQUM1Qm9pQyxFQUFVLE9BQU9yZ0MsRUFBSy9CLENBQUssQ0FDL0MsQ0FBaUIsQ0FDakIsQ0FBYSxFQUNNb2lDLENBQ1YsS0FFRyxPQUFNLElBQUksTUFBTSw4QkFBOEIsQ0FFMUQsRUFDV2IsQ0FDWCxFQUFDLEVBQ0R6UCxFQUFRLGVBQWlCeVAsQ0FHbEIsRUFFQSxTQUFTdm1CLEVBQVE4VyxFQUFTa1AsRUFBcUIsQ0FJdEQsT0FBTyxlQUFlbFAsRUFBUyxhQUFjLENBQUUsTUFBTyxFQUFJLENBQUUsRUFDNUQsSUFBSXVRLEVBQW1CckIsRUFBb0IsQ0FBQyxFQUM1Q2xQLEVBQVEsZUFBaUJ1USxFQUFpQixjQUduQyxFQUVBLFNBQVNybkIsRUFBUThXLEVBQVNrUCxFQUFxQixDQUl0RCxPQUFPLGVBQWVsUCxFQUFTLGFBQWMsQ0FBRSxNQUFPLEVBQUksQ0FBRSxFQUM1RCxTQUFTd1EsRUFBZUMsRUFBUzFoQyxFQUFVLENBR3ZDLFFBRkkyaEMsRUFBV0QsRUFBUSxPQUFPLFVBQVMsRUFDbkNFLEVBQVFELEVBQVMsT0FDZCxDQUFDQyxFQUFNLE1BQ1Y1aEMsRUFBUzRoQyxFQUFNLE1BQU0sRUFBRSxFQUN2QkEsRUFBUUQsRUFBUyxNQUV6QixDQUNBMVEsRUFBUSxlQUFpQndRLEVBQ3pCLFNBQVNJLEVBQW1CSCxFQUFTMWhDLEVBQVUsQ0FHM0MsUUFGSTJoQyxFQUFXRCxFQUFRLE9BQ25CRSxFQUFRRCxFQUFTLE9BQ2QsQ0FBQ0MsRUFBTSxNQUNWNWhDLEVBQVM0aEMsRUFBTSxLQUFLLEVBQ3BCQSxFQUFRRCxFQUFTLE1BRXpCLENBQ0ExUSxFQUFRLG1CQUFxQjRRLENBR3RCLEVBRUEsU0FBUzFuQixFQUFROFcsRUFBU2tQLEVBQXFCLENBSXRELE9BQU8sZUFBZWxQLEVBQVMsYUFBYyxDQUFFLE1BQU8sRUFBSSxDQUFFLEVBQzVELElBQUk2USxFQUFtQjNCLEVBQW9CLENBQUMsRUFDNUMsU0FBUzRCLEVBQWNoZ0MsRUFBTSxDQUl6QixHQUhJLE9BQU9BLEdBQVMsV0FDaEJBLEVBQU8sT0FBT0EsQ0FBSSxHQUVsQiw2QkFBNkIsS0FBS0EsQ0FBSSxFQUN0QyxNQUFNLElBQUksVUFBVSx3Q0FBd0MsRUFFaEUsT0FBT0EsRUFBSyxhQUNoQixDQUNBa3ZCLEVBQVEsY0FBZ0I4USxFQUN4QixTQUFTQyxFQUFlN2lDLEVBQU8sQ0FDM0IsT0FBSSxPQUFPQSxHQUFVLFdBQ2pCQSxFQUFRLE9BQU9BLENBQUssR0FFakJBLENBQ1gsQ0FDQTh4QixFQUFRLGVBQWlCK1EsRUFDekIsU0FBU0MsRUFBZ0JDLEVBQWlCaGhDLEVBQUssQ0FDM0MsSUFBSXdnQyxFQUEwQlEsRUFDOUIsR0FBSVIsYUFBbUIsU0FBV0EsRUFBUSxPQUN0QyxPQUFPQSxFQUFRLE9BQU94Z0MsQ0FBRyxFQUU3QixJQUFJaWhDLEVBQVdULEVBQVEsSUFBSXhnQyxDQUFHLEVBQzlCLE9BQUlpaEMsR0FBWSxPQUFPQSxHQUFhLFNBQ3pCLENBQUNBLENBQVEsRUFFYkEsQ0FDWCxDQUNBbFIsRUFBUSxnQkFBa0JnUixFQUMxQixTQUFTRyxFQUFnQkYsRUFBaUIsQ0FDdEMsT0FBT0EsQ0FDWCxDQUNBLFNBQVNHLEVBQWNILEVBQWlCLENBQ3BDLElBQUlSLEVBQTBCUSxFQUMxQnJCLEVBQVEsQ0FBQSxFQUNSbEwsRUFBTyxDQUFBLEVBQ1gsT0FBSStMLEVBQVEsS0FDUkksRUFBaUIsbUJBQW1CSixFQUFTLFNBQVV4Z0MsRUFBSyxDQUNuRDIvQixFQUFNMy9CLEtBQ1AyL0IsRUFBTTMvQixHQUFPLEdBQ2J5MEIsRUFBSyxLQUFLejBCLENBQUcsRUFFN0IsQ0FBUyxFQUVJd2dDLEVBQVEsUUFDYkEsRUFBUSxRQUFRLFNBQVVZLEVBQUdwaEMsRUFBSyxDQUN6QjIvQixFQUFNMy9CLEtBQ1AyL0IsRUFBTTMvQixHQUFPLEdBQ2J5MEIsRUFBSyxLQUFLejBCLENBQUcsRUFFN0IsQ0FBUyxFQUdENGdDLEVBQWlCLGVBQWVKLEVBQVMsU0FBVUUsRUFBTyxDQUN0RCxJQUFJMWdDLEVBQU0wZ0MsRUFBTSxHQUNYZixFQUFNMy9CLEtBQ1AyL0IsRUFBTTMvQixHQUFPLEdBQ2J5MEIsRUFBSyxLQUFLejBCLENBQUcsRUFFN0IsQ0FBUyxFQUVFeTBCLENBQ1gsQ0FDQTFFLEVBQVEsY0FBZ0JvUixFQUN4QixTQUFTRSxFQUFpQmgvQixFQUFLLENBQzNCLElBQUlxOUIsRUFBUyxDQUFBLEVBQ1Q0QixFQUFtQmovQixFQUFJLE1BQU0sSUFBSSxFQUNyQyxPQUFBaS9CLEVBQWlCLFFBQVEsU0FBVUMsRUFBaUIsQ0FDaERBLEVBQWdCLE1BQU0sR0FBRyxFQUFFLFFBQVEsU0FBVUMsRUFBWSxDQUNyRDlCLEVBQU8sS0FBSzhCLENBQVUsQ0FDbEMsQ0FBUyxDQUNULENBQUssRUFDTTlCLENBQ1gsQ0FDQTNQLEVBQVEsaUJBQW1Cc1IsQ0FHcEIsQ0FDUCxDQUFVLENBQ1YsQ0FBQyx3QkMxV0QsU0FBUywrQkFBZ0MsQ0FDckMsTUFBTyxDQUFFLFFBQVMsR0FBSSxNQUFPLEVBQUUsQ0FDbkMsQ0FDTyxNQUFNLG9CQUFzQixDQUMvQixPQUFPL2tCLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxVQUFZLElBQ3BCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxPQUFPLEVBRXhDQSxFQUFRLFFBQVUsSUFDbEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLEtBQUssRUFFbkMwWSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxnQ0FDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsUUFBVW9hLEVBQU8sU0FDekIsVUFDQyxHQUNEcGEsRUFBUSxNQUFRb2EsRUFBTyxTQUN2QixjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsUUFBU0MsUUFBTUQsRUFBTyxPQUFPLEVBQUksT0FBT0EsRUFBTyxPQUFPLEVBQUksR0FDMUQsTUFBT0MsUUFBTUQsRUFBTyxLQUFLLEVBQUksT0FBT0EsRUFBTyxLQUFLLEVBQUksRUFDaEUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFVBQVksU0FBYzdkLEVBQUksUUFBVTZkLEVBQVEsU0FDeERBLEVBQVEsUUFBVSxTQUFjN2QsRUFBSSxNQUFRNmQsRUFBUSxPQUM3QzdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsZ0NBQ2hCLE9BQUFBLEVBQVEsUUFBVXVjLEVBQU8sU0FBVyxHQUNwQ3ZjLEVBQVEsTUFBUXVjLEVBQU8sT0FBUyxHQUN6QnZjLENBQ1YsQ0FDTCxFQUNBLFNBQVMsZ0NBQWlDLENBQ3RDLE1BQU8sQ0FBRSxRQUFTLE9BQ3RCLENBQ08sTUFBTSxxQkFBdUIsQ0FDaEMsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLFVBQVksUUFDcEIsS0FBSyxPQUFPQSxFQUFRLFFBQVMwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRTFEQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxpQ0FDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsUUFBVSxLQUFLLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUNyRCxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsUUFBU0MsUUFBTUQsRUFBTyxPQUFPLEVBQ3ZCLEtBQUssU0FBU0EsRUFBTyxPQUFPLEVBQzVCLE1BQ2xCLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxVQUFZLFNBQ2Y3ZCxFQUFJLFFBQVU2ZCxFQUFRLFFBQ2pCLEtBQUssT0FBT0EsRUFBUSxPQUFPLEVBQzNCLFFBQ0g3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLGlDQUNoQixPQUFBQSxFQUFRLFFBQ0p1YyxFQUFPLFVBQVksUUFBYUEsRUFBTyxVQUFZLEtBQzdDLEtBQUssWUFBWUEsRUFBTyxPQUFPLEVBQy9CLE9BQ0h2YyxDQUNWLENBQ0wsRUFDQSxTQUFTLG1DQUFvQyxDQUN6QyxNQUFPLENBQUUsUUFBUyxHQUFJLFdBQVksTUFBUyxDQUMvQyxDQUNPLE1BQU0sd0JBQTBCLENBQ25DLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxVQUFZLElBQ3BCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxPQUFPLEVBRXhDQSxFQUFRLGFBQWUsUUFDdkIsWUFBWSxPQUFPQSxFQUFRLFdBQVkwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRXBFQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxvQ0FDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsUUFBVW9hLEVBQU8sU0FDekIsVUFDQyxHQUNEcGEsRUFBUSxXQUFhLFlBQVksT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQy9ELGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxRQUFTQyxRQUFNRCxFQUFPLE9BQU8sRUFBSSxPQUFPQSxFQUFPLE9BQU8sRUFBSSxHQUMxRCxXQUFZQyxRQUFNRCxFQUFPLFVBQVUsRUFDN0IsWUFBWSxTQUFTQSxFQUFPLFVBQVUsRUFDdEMsTUFDbEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFVBQVksU0FBYzdkLEVBQUksUUFBVTZkLEVBQVEsU0FDeERBLEVBQVEsYUFBZSxTQUNsQjdkLEVBQUksV0FBYTZkLEVBQVEsV0FDcEIsWUFBWSxPQUFPQSxFQUFRLFVBQVUsRUFDckMsUUFDSDdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsb0NBQ2hCLE9BQUFBLEVBQVEsUUFBVXVjLEVBQU8sU0FBVyxHQUNwQ3ZjLEVBQVEsV0FDSnVjLEVBQU8sYUFBZSxRQUFhQSxFQUFPLGFBQWUsS0FDbkQsWUFBWSxZQUFZQSxFQUFPLFVBQVUsRUFDekMsT0FDSHZjLENBQ1YsQ0FDTCxFQUNBLFNBQVMsb0NBQXFDLENBQzFDLE1BQU8sQ0FBRSxTQUFVLENBQUEsRUFBSSxXQUFZLE1BQVMsQ0FDaEQsQ0FDTyxNQUFNLHlCQUEyQixDQUNwQyxPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsVUFBV3R1QixLQUFLa1MsRUFBUSxTQUNwQixLQUFLLE9BQU9sUyxFQUFHNHFCLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSSxDQUFFLEVBQUUsU0FFN0MsT0FBSTFZLEVBQVEsYUFBZSxRQUN2QixhQUFhLE9BQU9BLEVBQVEsV0FBWTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFckVBLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLHFDQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxTQUFTLEtBQUssS0FBSyxPQUFPb2EsRUFBUUEsRUFBTyxPQUFRLENBQUEsQ0FBQyxFQUMxRCxVQUNDLEdBQ0RwYSxFQUFRLFdBQWEsYUFBYSxPQUFPb2EsRUFBUUEsRUFBTyxPQUFNLENBQUUsRUFDaEUsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILFNBQVUsTUFBTSxRQUFRQSxHQUFRLFFBQVEsRUFDbENBLEVBQU8sU0FBUyxJQUFLLEdBQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxFQUMzQyxDQUFFLEVBQ1IsV0FBWUMsUUFBTUQsRUFBTyxVQUFVLEVBQzdCLGFBQWEsU0FBU0EsRUFBTyxVQUFVLEVBQ3ZDLE1BQ2xCLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFJNmQsRUFBUSxTQUNSN2QsRUFBSSxTQUFXNmQsRUFBUSxTQUFTLElBQUtwYSxHQUFNQSxFQUFJLEtBQUssT0FBT0EsQ0FBQyxFQUFJLE1BQVMsRUFHekV6RCxFQUFJLFNBQVcsR0FFbkI2ZCxFQUFRLGFBQWUsU0FDbEI3ZCxFQUFJLFdBQWE2ZCxFQUFRLFdBQ3BCLGFBQWEsT0FBT0EsRUFBUSxVQUFVLEVBQ3RDLFFBQ0g3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLHFDQUNoQixPQUFBQSxFQUFRLFNBQVd1YyxFQUFPLFVBQVUsSUFBSzMyQixHQUFNLEtBQUssWUFBWUEsQ0FBQyxDQUFDLEdBQUssQ0FBQSxFQUN2RW9hLEVBQVEsV0FDSnVjLEVBQU8sYUFBZSxRQUFhQSxFQUFPLGFBQWUsS0FDbkQsYUFBYSxZQUFZQSxFQUFPLFVBQVUsRUFDMUMsT0FDSHZjLENBQ1YsQ0FDTCxFQUNBLFNBQVMsbUNBQW9DLENBQ3pDLE1BQU8sQ0FBRSxXQUFZLE9BQ3pCLENBQ08sTUFBTSx3QkFBMEIsQ0FDbkMsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLGFBQWUsUUFDdkIsWUFBWSxPQUFPQSxFQUFRLFdBQVkwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRXBFQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxvQ0FDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsV0FBYSxZQUFZLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUMvRCxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsV0FBWUMsUUFBTUQsRUFBTyxVQUFVLEVBQzdCLFlBQVksU0FBU0EsRUFBTyxVQUFVLEVBQ3RDLE1BQ2xCLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxhQUFlLFNBQ2xCN2QsRUFBSSxXQUFhNmQsRUFBUSxXQUNwQixZQUFZLE9BQU9BLEVBQVEsVUFBVSxFQUNyQyxRQUNIN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxvQ0FDaEIsT0FBQUEsRUFBUSxXQUNKdWMsRUFBTyxhQUFlLFFBQWFBLEVBQU8sYUFBZSxLQUNuRCxZQUFZLFlBQVlBLEVBQU8sVUFBVSxFQUN6QyxPQUNIdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyxvQ0FBcUMsQ0FDMUMsTUFBTyxDQUFFLE9BQVEsQ0FBQSxFQUFJLFdBQVksTUFBUyxDQUM5QyxDQUNPLE1BQU0seUJBQTJCLENBQ3BDLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxVQUFXdHVCLEtBQUtrUyxFQUFRLE9BQ3BCLEtBQUssT0FBT2xTLEVBQUc0cUIsRUFBTyxPQUFPLEVBQUUsRUFBRSxLQUFJLENBQUUsRUFBRSxTQUU3QyxPQUFJMVksRUFBUSxhQUFlLFFBQ3ZCLGFBQWEsT0FBT0EsRUFBUSxXQUFZMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUVyRUEsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUscUNBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLE9BQU8sS0FBSyxLQUFLLE9BQU9vYSxFQUFRQSxFQUFPLE9BQVEsQ0FBQSxDQUFDLEVBQ3hELFVBQ0MsR0FDRHBhLEVBQVEsV0FBYSxhQUFhLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUNoRSxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsT0FBUSxNQUFNLFFBQVFBLEdBQVEsTUFBTSxFQUM5QkEsRUFBTyxPQUFPLElBQUssR0FBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLEVBQ3pDLENBQUUsRUFDUixXQUFZQyxRQUFNRCxFQUFPLFVBQVUsRUFDN0IsYUFBYSxTQUFTQSxFQUFPLFVBQVUsRUFDdkMsTUFDbEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUk2ZCxFQUFRLE9BQ1I3ZCxFQUFJLE9BQVM2ZCxFQUFRLE9BQU8sSUFBS3BhLEdBQU9BLEVBQUksS0FBSyxPQUFPQSxDQUFDLEVBQUksTUFBVSxFQUd2RXpELEVBQUksT0FBUyxHQUVqQjZkLEVBQVEsYUFBZSxTQUNsQjdkLEVBQUksV0FBYTZkLEVBQVEsV0FDcEIsYUFBYSxPQUFPQSxFQUFRLFVBQVUsRUFDdEMsUUFDSDdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUscUNBQ2hCLE9BQUFBLEVBQVEsT0FBU3VjLEVBQU8sUUFBUSxJQUFLMzJCLEdBQU0sS0FBSyxZQUFZQSxDQUFDLENBQUMsR0FBSyxDQUFBLEVBQ25Fb2EsRUFBUSxXQUNKdWMsRUFBTyxhQUFlLFFBQWFBLEVBQU8sYUFBZSxLQUNuRCxhQUFhLFlBQVlBLEVBQU8sVUFBVSxFQUMxQyxPQUNIdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyxnQ0FBaUMsQ0FDdEMsTUFBTyxDQUFFLE1BQU8sR0FDcEIsQ0FDTyxNQUFNLHFCQUF1QixDQUNoQyxPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsUUFBVSxJQUNsQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsS0FBSyxFQUVuQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLGlDQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxNQUFRb2EsRUFBTyxTQUN2QixjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsTUFBT0MsUUFBTUQsRUFBTyxLQUFLLEVBQUksT0FBT0EsRUFBTyxLQUFLLEVBQUksRUFDaEUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFFBQVUsU0FBYzdkLEVBQUksTUFBUTZkLEVBQVEsT0FDN0M3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLGlDQUNoQixPQUFBQSxFQUFRLE1BQVF1YyxFQUFPLE9BQVMsR0FDekJ2YyxDQUNWLENBQ0wsRUFDQSxTQUFTLGlDQUFrQyxDQUN2QyxNQUFPLENBQUUsT0FBUSxPQUNyQixDQUNPLE1BQU0sc0JBQXdCLENBQ2pDLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxTQUFXLFFBQ25CLEtBQUssT0FBT0EsRUFBUSxPQUFRMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUV6REEsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsa0NBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLE9BQVMsS0FBSyxPQUFPb2EsRUFBUUEsRUFBTyxPQUFNLENBQUUsRUFDcEQsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILE9BQVFDLFFBQU1ELEVBQU8sTUFBTSxFQUFJLEtBQUssU0FBU0EsRUFBTyxNQUFNLEVBQUksTUFDMUUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFNBQVcsU0FDZDdkLEVBQUksT0FBUzZkLEVBQVEsT0FBUyxLQUFLLE9BQU9BLEVBQVEsTUFBTSxFQUFJLFFBQzFEN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxrQ0FDaEIsT0FBQUEsRUFBUSxPQUNKdWMsRUFBTyxTQUFXLFFBQWFBLEVBQU8sU0FBVyxLQUMzQyxLQUFLLFlBQVlBLEVBQU8sTUFBTSxFQUM5QixPQUNIdmMsQ0FDVixDQUNMLEVBQ0EsU0FBU21sQixnQ0FBK0IsQ0FDcEMsTUFBTyxFQUNYLENBQ08sTUFBTUMscUJBQXFCLENBQzlCLE9BQU9OLEVBQUdwTSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUNwQyxPQUFPMUQsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVVtbEIsaUNBQ2hCLEtBQU8vSyxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxXQUVSbEMsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVM4a0IsRUFBRyxDQUNSLE1BQU8sRUFDVixFQUNELE9BQU9BLEVBQUcsQ0FFTixNQURZLENBQUEsQ0FFZixFQUNELFlBQVlBLEVBQUcsQ0FFWCxPQURnQkssZ0NBRW5CLENBQ0wsRUFDQSxTQUFTRSxpQ0FBZ0MsQ0FDckMsTUFBTyxDQUFFLE9BQVEsT0FDckIsQ0FDTyxNQUFNQyxzQkFBc0IsQ0FDL0IsT0FBT3RsQixFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsU0FBVyxRQUNuQndpQixTQUFPLE9BQU94aUIsRUFBUSxPQUFRMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUUzREEsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVVxbEIsa0NBQ2hCLEtBQU9qTCxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLE9BQVN3aUIsU0FBTyxPQUFPcEksRUFBUUEsRUFBTyxPQUFNLENBQUUsRUFDdEQsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILE9BQVFDLFFBQU1ELEVBQU8sTUFBTSxFQUFJaUcsU0FBTyxTQUFTakcsRUFBTyxNQUFNLEVBQUksTUFDNUUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFNBQVcsU0FDZDdkLEVBQUksT0FBUzZkLEVBQVEsT0FBU3dpQixTQUFPLE9BQU94aUIsRUFBUSxNQUFNLEVBQUksUUFDNUQ3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVcWxCLGtDQUNoQixPQUFBcmxCLEVBQVEsT0FDSnVjLEVBQU8sU0FBVyxRQUFhQSxFQUFPLFNBQVcsS0FDM0NpRyxTQUFPLFlBQVlqRyxFQUFPLE1BQU0sRUFDaEMsT0FDSHZjLENBQ1YsQ0FDTCxFQUNBLFNBQVMsc0NBQXVDLENBQzVDLE1BQU8sQ0FBRSxXQUFZLE9BQ3pCLENBQ08sTUFBTSwyQkFBNkIsQ0FDdEMsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLGFBQWUsUUFDdkIsWUFBWSxPQUFPQSxFQUFRLFdBQVkwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRXBFQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSx1Q0FDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsV0FBYSxZQUFZLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUMvRCxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsV0FBWUMsUUFBTUQsRUFBTyxVQUFVLEVBQzdCLFlBQVksU0FBU0EsRUFBTyxVQUFVLEVBQ3RDLE1BQ2xCLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxhQUFlLFNBQ2xCN2QsRUFBSSxXQUFhNmQsRUFBUSxXQUNwQixZQUFZLE9BQU9BLEVBQVEsVUFBVSxFQUNyQyxRQUNIN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSx1Q0FDaEIsT0FBQUEsRUFBUSxXQUNKdWMsRUFBTyxhQUFlLFFBQWFBLEVBQU8sYUFBZSxLQUNuRCxZQUFZLFlBQVlBLEVBQU8sVUFBVSxFQUN6QyxPQUNIdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyx1Q0FBd0MsQ0FDN0MsTUFBTyxDQUFFLFVBQVcsQ0FBQSxFQUFJLFdBQVksTUFBUyxDQUNqRCxDQUNPLE1BQU0sNEJBQThCLENBQ3ZDLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxVQUFXdHVCLEtBQUtrUyxFQUFRLFVBQ3BCLFNBQVMsT0FBT2xTLEVBQUc0cUIsRUFBTyxPQUFPLEVBQUUsRUFBRSxLQUFJLENBQUUsRUFBRSxTQUVqRCxPQUFJMVksRUFBUSxhQUFlLFFBQ3ZCLGFBQWEsT0FBT0EsRUFBUSxXQUFZMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUVyRUEsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsd0NBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLFVBQVUsS0FBSyxTQUFTLE9BQU9vYSxFQUFRQSxFQUFPLE9BQVEsQ0FBQSxDQUFDLEVBQy9ELFVBQ0MsR0FDRHBhLEVBQVEsV0FBYSxhQUFhLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUNoRSxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsVUFBVyxNQUFNLFFBQVFBLEdBQVEsU0FBUyxFQUNwQ0EsRUFBTyxVQUFVLElBQUssR0FBTSxTQUFTLFNBQVMsQ0FBQyxDQUFDLEVBQ2hELENBQUUsRUFDUixXQUFZQyxRQUFNRCxFQUFPLFVBQVUsRUFDN0IsYUFBYSxTQUFTQSxFQUFPLFVBQVUsRUFDdkMsTUFDbEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUk2ZCxFQUFRLFVBQ1I3ZCxFQUFJLFVBQVk2ZCxFQUFRLFVBQVUsSUFBS3BhLEdBQU1BLEVBQUksU0FBUyxPQUFPQSxDQUFDLEVBQUksTUFBUyxFQUcvRXpELEVBQUksVUFBWSxHQUVwQjZkLEVBQVEsYUFBZSxTQUNsQjdkLEVBQUksV0FBYTZkLEVBQVEsV0FDcEIsYUFBYSxPQUFPQSxFQUFRLFVBQVUsRUFDdEMsUUFDSDdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsd0NBQ2hCLE9BQUFBLEVBQVEsVUFDSnVjLEVBQU8sV0FBVyxJQUFLMzJCLEdBQU0sU0FBUyxZQUFZQSxDQUFDLENBQUMsR0FBSyxHQUM3RG9hLEVBQVEsV0FDSnVjLEVBQU8sYUFBZSxRQUFhQSxFQUFPLGFBQWUsS0FDbkQsYUFBYSxZQUFZQSxFQUFPLFVBQVUsRUFDMUMsT0FDSHZjLENBQ1YsQ0FDTCxFQUNBLFNBQVMscUNBQXNDLENBQzNDLE1BQU8sQ0FBRSxNQUFPLEdBQ3BCLENBQ08sTUFBTSwwQkFBNEIsQ0FDckMsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLFFBQVUsSUFDbEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLEtBQUssRUFFbkMwWSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxzQ0FDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsTUFBUW9hLEVBQU8sU0FDdkIsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILE1BQU9DLFFBQU1ELEVBQU8sS0FBSyxFQUFJLE9BQU9BLEVBQU8sS0FBSyxFQUFJLEVBQ2hFLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxRQUFVLFNBQWM3ZCxFQUFJLE1BQVE2ZCxFQUFRLE9BQzdDN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxzQ0FDaEIsT0FBQUEsRUFBUSxNQUFRdWMsRUFBTyxPQUFTLEdBQ3pCdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyxzQ0FBdUMsQ0FDNUMsTUFBTyxDQUFFLFNBQVUsT0FDdkIsQ0FDTyxNQUFNLDJCQUE2QixDQUN0QyxPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsV0FBYSxRQUNyQixTQUFTLE9BQU9BLEVBQVEsU0FBVTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFL0RBLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLHVDQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxTQUFXLFNBQVMsT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQzFELGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxTQUFVQyxRQUFNRCxFQUFPLFFBQVEsRUFDekIsU0FBUyxTQUFTQSxFQUFPLFFBQVEsRUFDakMsTUFDbEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFdBQWEsU0FDaEI3ZCxFQUFJLFNBQVc2ZCxFQUFRLFNBQ2xCLFNBQVMsT0FBT0EsRUFBUSxRQUFRLEVBQ2hDLFFBQ0g3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLHVDQUNoQixPQUFBQSxFQUFRLFNBQ0p1YyxFQUFPLFdBQWEsUUFBYUEsRUFBTyxXQUFhLEtBQy9DLFNBQVMsWUFBWUEsRUFBTyxRQUFRLEVBQ3BDLE9BQ0h2YyxDQUNWLENBQ0wsRUFDTyxNQUFNdWxCLGlCQUFnQixDQUV6QixZQUFZdEosRUFBSyxDQURqQmhWLEdBQUEsWUFFSSxLQUFLLElBQU1nVixFQUNYLEtBQUssUUFBVSxLQUFLLFFBQVEsS0FBSyxJQUFJLEVBQ3JDLEtBQUssWUFBYyxLQUFLLFlBQVksS0FBSyxJQUFJLEVBQzdDLEtBQUssWUFBYyxLQUFLLFlBQVksS0FBSyxJQUFJLEVBQzdDLEtBQUssU0FBVyxLQUFLLFNBQVMsS0FBSyxJQUFJLEVBQ3ZDLEtBQUssT0FBUyxLQUFLLE9BQU8sS0FBSyxJQUFJLEVBQ25DLEtBQUssY0FBZ0IsS0FBSyxjQUFjLEtBQUssSUFBSSxFQUNqRCxLQUFLLGVBQWlCLEtBQUssZUFBZSxLQUFLLElBQUksQ0FDdEQsQ0FDRCxRQUFRSixFQUFTMkosRUFBVSxDQUN2QixPQUFPLEtBQUssSUFBSSxNQUFNLGlCQUFrQixvQkFBb0IsWUFBWTNKLENBQU8sRUFBRzJKLENBQVEsQ0FDN0YsQ0FDRCxZQUFZM0osRUFBUzJKLEVBQVUsQ0FDM0IsT0FBTyxLQUFLLElBQUksTUFBTSxxQkFBc0Isd0JBQXdCLFlBQVkzSixDQUFPLEVBQUcySixDQUFRLENBQ3JHLENBQ0QsWUFBWTNKLEVBQVMySixFQUFVLENBQzNCLE9BQU8sS0FBSyxJQUFJLE1BQU0scUJBQXNCLHdCQUF3QixZQUFZM0osQ0FBTyxFQUFHMkosQ0FBUSxDQUNyRyxDQUNELFNBQVMzSixFQUFTMkosRUFBVSxDQUN4QixPQUFPLEtBQUssSUFBSSxNQUFNLGtCQUFtQixxQkFBcUIsWUFBWTNKLENBQU8sRUFBRzJKLENBQVEsQ0FDL0YsQ0FDRCxPQUFPM0osRUFBUzJKLEVBQVUsQ0FDdEIsT0FBTyxLQUFLLElBQUksTUFBTUMsa0JBQWlCTCxxQkFBbUIsWUFBWXZKLENBQU8sRUFBRzJKLENBQVEsQ0FDM0YsQ0FDRCxjQUFjM0osRUFBUzJKLEVBQVUsQ0FDN0IsT0FBTyxLQUFLLElBQUksTUFBTSx1QkFBd0IsMEJBQTBCLFlBQVkzSixDQUFPLEVBQUcySixDQUFRLENBQ3pHLENBQ0QsZUFBZTNKLEVBQVMySixFQUFVLENBQzlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sd0JBQXlCLDJCQUEyQixZQUFZM0osQ0FBTyxFQUFHMkosQ0FBUSxDQUMzRyxDQUNMLENBQ08sTUFBTUUsWUFBWSxDQUNyQixZQUFhLDJCQUNqQixFQUNhLGlCQUFtQixDQUM1QixXQUFZLFVBQ1osUUFBU0EsWUFDVCxjQUFlLEdBQ2YsZUFBZ0IsR0FDaEIsWUFBYSxDQUNULGlCQUFrQixDQUNkLE9BQU8sb0JBQW9CLE9BQU8sSUFBSSxFQUFFLE9BQU0sQ0FDakQsQ0FDSixFQUNELGFBQWMsQ0FDVixrQkFBa0JsaEMsRUFBTSxDQUNwQixNQUFPLENBQ0gsR0FBRyxxQkFBcUIsT0FBT0EsQ0FBSSxFQUNuQyxVQUFXLENBQ1AsT0FBTyxJQUNWLENBQ2pCLENBQ1MsQ0FDSixDQUNMLEVBQ2EscUJBQXVCLENBQ2hDLFdBQVksY0FDWixRQUFTa2hDLFlBQ1QsY0FBZSxHQUNmLGVBQWdCLEdBQ2hCLFlBQWEsQ0FDVCxpQkFBa0IsQ0FDZCxPQUFPLHdCQUF3QixPQUFPLElBQUksRUFBRSxPQUFNLENBQ3JELENBQ0osRUFDRCxhQUFjLENBQ1Ysa0JBQWtCbGhDLEVBQU0sQ0FDcEIsTUFBTyxDQUNILEdBQUcseUJBQXlCLE9BQU9BLENBQUksRUFDdkMsVUFBVyxDQUNQLE9BQU8sSUFDVixDQUNqQixDQUNTLENBQ0osQ0FDTCxFQUNhLHFCQUF1QixDQUNoQyxXQUFZLGNBQ1osUUFBU2toQyxZQUNULGNBQWUsR0FDZixlQUFnQixHQUNoQixZQUFhLENBQ1QsaUJBQWtCLENBQ2QsT0FBTyx3QkFBd0IsT0FBTyxJQUFJLEVBQUUsT0FBTSxDQUNyRCxDQUNKLEVBQ0QsYUFBYyxDQUNWLGtCQUFrQmxoQyxFQUFNLENBQ3BCLE1BQU8sQ0FDSCxHQUFHLHlCQUF5QixPQUFPQSxDQUFJLEVBQ3ZDLFVBQVcsQ0FDUCxPQUFPLElBQ1YsQ0FDakIsQ0FDUyxDQUNKLENBQ0wsRUFDYSxrQkFBb0IsQ0FDN0IsV0FBWSxXQUNaLFFBQVNraEMsWUFDVCxjQUFlLEdBQ2YsZUFBZ0IsR0FDaEIsWUFBYSxDQUNULGlCQUFrQixDQUNkLE9BQU8scUJBQXFCLE9BQU8sSUFBSSxFQUFFLE9BQU0sQ0FDbEQsQ0FDSixFQUNELGFBQWMsQ0FDVixrQkFBa0JsaEMsRUFBTSxDQUNwQixNQUFPLENBQ0gsR0FBRyxzQkFBc0IsT0FBT0EsQ0FBSSxFQUNwQyxVQUFXLENBQ1AsT0FBTyxJQUNWLENBQ2pCLENBQ1MsQ0FDSixDQUNMLEVBQ2FpaEMsa0JBQWtCLENBQzNCLFdBQVksU0FDWixRQUFTQyxZQUNULGNBQWUsR0FDZixlQUFnQixHQUNoQixZQUFhLENBQ1QsaUJBQWtCLENBQ2QsT0FBT04scUJBQW1CLE9BQU8sSUFBSSxFQUFFLE9BQU0sQ0FDaEQsQ0FDSixFQUNELGFBQWMsQ0FDVixrQkFBa0I1Z0MsRUFBTSxDQUNwQixNQUFPLENBQ0gsR0FBRzhnQyxzQkFBb0IsT0FBTzlnQyxDQUFJLEVBQ2xDLFVBQVcsQ0FDUCxPQUFPLElBQ1YsQ0FDakIsQ0FDUyxDQUNKLENBQ0wsRUFDYSx1QkFBeUIsQ0FDbEMsV0FBWSxnQkFDWixRQUFTa2hDLFlBQ1QsY0FBZSxHQUNmLGVBQWdCLEdBQ2hCLFlBQWEsQ0FDVCxpQkFBa0IsQ0FDZCxPQUFPLDBCQUEwQixPQUFPLElBQUksRUFBRSxPQUFNLENBQ3ZELENBQ0osRUFDRCxhQUFjLENBQ1Ysa0JBQWtCbGhDLEVBQU0sQ0FDcEIsTUFBTyxDQUNILEdBQUcsMkJBQTJCLE9BQU9BLENBQUksRUFDekMsVUFBVyxDQUNQLE9BQU8sSUFDVixDQUNqQixDQUNTLENBQ0osQ0FDTCxFQUNhLHdCQUEwQixDQUNuQyxXQUFZLGlCQUNaLFFBQVNraEMsWUFDVCxjQUFlLEdBQ2YsZUFBZ0IsR0FDaEIsWUFBYSxDQUNULGlCQUFrQixDQUNkLE9BQU8sMkJBQTJCLE9BQU8sSUFBSSxFQUFFLE9BQU0sQ0FDeEQsQ0FDSixFQUNELGFBQWMsQ0FDVixrQkFBa0JsaEMsRUFBTSxDQUNwQixNQUFPLENBQ0gsR0FBRyw0QkFBNEIsT0FBT0EsQ0FBSSxFQUMxQyxVQUFXLENBQ1AsT0FBTyxJQUNWLENBQ2pCLENBQ1MsQ0FDSixDQUNMLEVBQ08sTUFBTSxXQUFZLENBR3JCLFlBQVltaEMsRUFBTWhoQyxFQUFTLENBRjNCc2lCLEdBQUEsYUFDQUEsR0FBQSxnQkFFSSxLQUFLLEtBQU8wZSxFQUNaLEtBQUssUUFBVWhoQyxDQUNsQixDQUNELE1BQU1paEMsRUFBWUMsRUFBVUwsRUFBVSxDQUNsQyxNQUFNM0osRUFBVSxDQUFFLEdBQUdnSyxFQUFVLEdBQUdELEVBQVcsV0FBVyxFQUNsREUsRUFBd0JOLEdBQVksS0FBSyxRQUFRLFNBQ2pELElBQUl0QywwQ0FBZSxDQUNqQixHQUFHLEtBQUssU0FBUyxTQUFTLFdBQzFCLEdBQUdzQyxHQUFVLFVBQzdCLENBQWEsRUFDQ0EsR0FBWSxLQUFLLFFBQVEsU0FDL0IsT0FBTyxJQUFJLFFBQVEsQ0FBQ2xTLEVBQVNDLElBQVcsQ0FDcEN3UyxrQkFBSSxRQUFBLEtBQUMsTUFBTUgsRUFBWSxDQUNuQixRQUFBL0osRUFDQSxLQUFNLEtBQUssS0FDWCxTQUFVaUssRUFDVixVQUFXLEtBQUssUUFBUSxVQUN4QixNQUFPLEtBQUssUUFBUSxNQUNwQixNQUFPLFNBQVUvSixFQUFVLENBQ3ZCLEdBQUlBLEVBQVMsU0FBV2dLLCtCQUFLLEtBQUssR0FDOUJ6UyxFQUFReUksRUFBUyxPQUFPLE1BRXZCLENBQ0QsTUFBTXZtQixFQUFNLElBQUksTUFBTXVtQixFQUFTLGFBQWEsRUFDNUN2bUIsRUFBSSxLQUFPdW1CLEVBQVMsT0FDcEJ2bUIsRUFBSSxTQUFXdW1CLEVBQVMsU0FDeEJ4SSxFQUFPL2QsQ0FBRyxDQUNiLENBQ0osQ0FDakIsQ0FBYSxDQUNiLENBQVMsQ0FDSixDQUNMLENBQ0EsU0FBU2duQixRQUFNNzZCLEVBQU8sQ0FDbEIsT0FBT0EsR0FBVSxJQUNyQixDQy83QkEsU0FBUyxlQUFnQixDQUNyQixNQUFPLENBQUUsUUFBUyxHQUFJLE1BQU8sSUFBSSxVQUFZLENBQ2pELENBQ08sTUFBTSxJQUFNLENBQ2YsT0FBT3FlLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxVQUFZLElBQ3BCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxPQUFPLEVBRXhDQSxFQUFRLE1BQU0sU0FBVyxHQUN6QjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTTFZLEVBQVEsS0FBSyxFQUVsQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLGdCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxRQUFVb2EsRUFBTyxTQUN6QixVQUNDLEdBQ0RwYSxFQUFRLE1BQVFvYSxFQUFPLFFBQ3ZCLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxRQUFTQyxRQUFNRCxFQUFPLE9BQU8sRUFBSSxPQUFPQSxFQUFPLE9BQU8sRUFBSSxHQUMxRCxNQUFPQyxRQUFNRCxFQUFPLEtBQUssRUFDbkJvRixrQkFBZ0JwRixFQUFPLEtBQUssRUFDNUIsSUFBSSxVQUN0QixDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsVUFBWSxTQUFjN2QsRUFBSSxRQUFVNmQsRUFBUSxTQUN4REEsRUFBUSxRQUFVLFNBQ2I3ZCxFQUFJLE1BQVF5L0Isa0JBQWdCNWhCLEVBQVEsUUFBVSxPQUFZQSxFQUFRLE1BQVEsSUFBSSxVQUFZLEdBQ3hGN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxnQkFDaEIsT0FBQUEsRUFBUSxRQUFVdWMsRUFBTyxTQUFXLEdBQ3BDdmMsRUFBUSxNQUFRdWMsRUFBTyxPQUFTLElBQUksV0FDN0J2YyxDQUNWLENBQ0wsRUFDQSxJQUFJNmhCLGNBQWMsSUFBTSxDQUNwQixHQUFJLE9BQU9BLGFBQWUsSUFDdEIsT0FBT0EsYUFDWCxHQUFJLE9BQU8sS0FBUyxJQUNoQixPQUFPLEtBQ1gsR0FBSSxPQUFPLE9BQVcsSUFDbEIsT0FBTyxPQUNYLEdBQUksT0FBTyxPQUFXLElBQ2xCLE9BQU8sT0FDWCxLQUFNLGdDQUNWLEtBQ0EsTUFBTUMsT0FBT0QsYUFBVyxPQUNsQmxPLEdBQVFrTyxhQUFXLE9BQU8sS0FBS2xPLEVBQUssUUFBUSxFQUFFLFNBQVMsUUFBUSxHQUNyRSxTQUFTZ08sa0JBQWdCaE8sRUFBSyxDQUMxQixNQUFNb08sRUFBTUQsT0FBS25PLENBQUcsRUFDZHFPLEVBQU0sSUFBSSxXQUFXRCxFQUFJLE1BQU0sRUFDckMsUUFBUyxFQUFJLEVBQUcsRUFBSUEsRUFBSSxPQUFRLEVBQUUsRUFDOUJDLEVBQUksR0FBS0QsRUFBSSxXQUFXLENBQUMsRUFFN0IsT0FBT0MsQ0FDWCxDQUNBLE1BQU1DLE9BQU9KLGFBQVcsT0FDbEJFLEdBQVFGLGFBQVcsT0FBTyxLQUFLRSxFQUFLLFFBQVEsRUFBRSxTQUFTLFFBQVEsR0FDckUsU0FBU0gsa0JBQWdCSSxFQUFLLENBQzFCLE1BQU1ELEVBQU0sQ0FBQSxFQUNaLE9BQUFDLEVBQUksUUFBU0UsR0FBUyxDQUNsQkgsRUFBSSxLQUFLLE9BQU8sYUFBYUcsQ0FBSSxDQUFDLENBQzFDLENBQUssRUFDTUQsT0FBS0YsRUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUM1QixDQUNBLFNBQVN2RixRQUFNNzZCLEVBQU8sQ0FDbEIsT0FBT0EsR0FBVSxJQUNyQixDQ3JGQSxTQUFTLHVCQUF3QixDQUM3QixNQUFPLENBQUUsUUFBUyxHQUFJLE9BQVEsT0FBVyxjQUFlLElBQUssU0FBVSxJQUMzRSxDQUNPLE1BQU0sWUFBYyxDQUN2QixPQUFPcWUsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLFVBQVksSUFDcEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLE9BQU8sRUFFeENBLEVBQVEsU0FBVyxRQUNuQixJQUFJLE9BQU9BLEVBQVEsT0FBUTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFM0QxWSxFQUFRLGdCQUFrQixLQUMxQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsYUFBYSxFQUU5Q0EsRUFBUSxXQUFhLEtBQ3JCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxRQUFRLEVBRXRDMFksQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsd0JBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLFFBQVVvYSxFQUFPLFNBQ3pCLFVBQ0MsR0FDRHBhLEVBQVEsT0FBUyxJQUFJLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUNuRCxVQUNDLEdBQ0RwYSxFQUFRLGNBQWdCMGhCLGVBQWF0SCxFQUFPLE9BQVEsQ0FBQSxFQUNwRCxVQUNDLEdBQ0RwYSxFQUFRLFNBQVcwaEIsZUFBYXRILEVBQU8sT0FBUSxDQUFBLEVBQy9DLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxRQUFTQyxRQUFNRCxFQUFPLE9BQU8sRUFBSSxPQUFPQSxFQUFPLE9BQU8sRUFBSSxHQUMxRCxPQUFRQyxRQUFNRCxFQUFPLE1BQU0sRUFBSSxJQUFJLFNBQVNBLEVBQU8sTUFBTSxFQUFJLE9BQzdELGNBQWVDLFFBQU1ELEVBQU8sYUFBYSxFQUNuQyxPQUFPQSxFQUFPLGFBQWEsRUFDM0IsSUFDTixTQUFVQyxRQUFNRCxFQUFPLFFBQVEsRUFBSSxPQUFPQSxFQUFPLFFBQVEsRUFBSSxHQUN6RSxDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsVUFBWSxTQUFjN2QsRUFBSSxRQUFVNmQsRUFBUSxTQUN4REEsRUFBUSxTQUFXLFNBQ2Q3ZCxFQUFJLE9BQVM2ZCxFQUFRLE9BQVMsSUFBSSxPQUFPQSxFQUFRLE1BQU0sRUFBSSxRQUNoRUEsRUFBUSxnQkFBa0IsU0FDckI3ZCxFQUFJLGNBQWdCNmQsRUFBUSxlQUNqQ0EsRUFBUSxXQUFhLFNBQWM3ZCxFQUFJLFNBQVc2ZCxFQUFRLFVBQ25EN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSx3QkFDaEIsT0FBQUEsRUFBUSxRQUFVdWMsRUFBTyxTQUFXLEdBQ3BDdmMsRUFBUSxPQUNKdWMsRUFBTyxTQUFXLFFBQWFBLEVBQU8sU0FBVyxLQUMzQyxJQUFJLFlBQVlBLEVBQU8sTUFBTSxFQUM3QixPQUNWdmMsRUFBUSxjQUFnQnVjLEVBQU8sZUFBaUIsSUFDaER2YyxFQUFRLFNBQVd1YyxFQUFPLFVBQVksSUFDL0J2YyxDQUNWLENBQ0wsRUE2RUEsU0FBUyxrQkFBbUIsQ0FDeEIsTUFBTyxDQUNILGtCQUFtQixJQUNuQixXQUFZLElBQ1osa0JBQW1CLElBQ25CLHFCQUFzQixJQUN0Qix1QkFBd0IsR0FDaEMsQ0FDQSxDQUNPLE1BQU0sT0FBUyxDQUNsQixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsb0JBQXNCLEtBQzlCMFksRUFBTyxPQUFPLENBQUMsRUFBRSxPQUFPMVksRUFBUSxpQkFBaUIsRUFFakRBLEVBQVEsYUFBZSxLQUN2QjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsVUFBVSxFQUUzQ0EsRUFBUSxvQkFBc0IsS0FDOUIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLGlCQUFpQixFQUVsREEsRUFBUSx1QkFBeUIsS0FDakMwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLG9CQUFvQixFQUVyREEsRUFBUSx5QkFBMkIsS0FDbkMwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLHNCQUFzQixFQUVwRDBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLG1CQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxrQkFBb0IwaEIsZUFBYXRILEVBQU8sT0FBUSxDQUFBLEVBQ3hELFVBQ0MsR0FDRHBhLEVBQVEsV0FBYTBoQixlQUFhdEgsRUFBTyxPQUFRLENBQUEsRUFDakQsVUFDQyxHQUNEcGEsRUFBUSxrQkFBb0IwaEIsZUFBYXRILEVBQU8sT0FBUSxDQUFBLEVBQ3hELFVBQ0MsR0FDRHBhLEVBQVEscUJBQXVCMGhCLGVBQWF0SCxFQUFPLE9BQVEsQ0FBQSxFQUMzRCxVQUNDLEdBQ0RwYSxFQUFRLHVCQUF5QjBoQixlQUFhdEgsRUFBTyxPQUFRLENBQUEsRUFDN0QsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILGtCQUFtQkMsUUFBTUQsRUFBTyxpQkFBaUIsRUFDM0MsT0FBT0EsRUFBTyxpQkFBaUIsRUFDL0IsSUFDTixXQUFZQyxRQUFNRCxFQUFPLFVBQVUsRUFBSSxPQUFPQSxFQUFPLFVBQVUsRUFBSSxJQUNuRSxrQkFBbUJDLFFBQU1ELEVBQU8saUJBQWlCLEVBQzNDLE9BQU9BLEVBQU8saUJBQWlCLEVBQy9CLElBQ04scUJBQXNCQyxRQUFNRCxFQUFPLG9CQUFvQixFQUNqRCxPQUFPQSxFQUFPLG9CQUFvQixFQUNsQyxJQUNOLHVCQUF3QkMsUUFBTUQsRUFBTyxzQkFBc0IsRUFDckQsT0FBT0EsRUFBTyxzQkFBc0IsRUFDcEMsR0FDbEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLG9CQUFzQixTQUN6QjdkLEVBQUksa0JBQW9CNmQsRUFBUSxtQkFDckNBLEVBQVEsYUFBZSxTQUFjN2QsRUFBSSxXQUFhNmQsRUFBUSxZQUM5REEsRUFBUSxvQkFBc0IsU0FDekI3ZCxFQUFJLGtCQUFvQjZkLEVBQVEsbUJBQ3JDQSxFQUFRLHVCQUF5QixTQUM1QjdkLEVBQUkscUJBQXVCNmQsRUFBUSxzQkFDeENBLEVBQVEseUJBQTJCLFNBQzlCN2QsRUFBSSx1QkFBeUI2ZCxFQUFRLHdCQUNuQzdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsbUJBQ2hCLE9BQUFBLEVBQVEsa0JBQW9CdWMsRUFBTyxtQkFBcUIsSUFDeER2YyxFQUFRLFdBQWF1YyxFQUFPLFlBQWMsSUFDMUN2YyxFQUFRLGtCQUFvQnVjLEVBQU8sbUJBQXFCLElBQ3hEdmMsRUFBUSxxQkFBdUJ1YyxFQUFPLHNCQUF3QixJQUM5RHZjLEVBQVEsdUJBQXlCdWMsRUFBTyx3QkFBMEIsSUFDM0R2YyxDQUNWLENBQ0wsRUFDQSxTQUFTMGhCLGVBQWFTLEVBQU0sQ0FDeEIsT0FBT0EsRUFBSyxVQUNoQixDQUNJQyxRQUFRLEtBQUMsT0FBU0MsT0FDbEJELFFBQVEsS0FBQyxLQUFPQyxLQUNoQkMsUUFBQUEsYUFFSixTQUFTOUYsUUFBTTc2QixFQUFPLENBQ2xCLE9BQU9BLEdBQVUsSUFDckIsQ0NoUUEsU0FBUyxnQ0FBaUMsQ0FDdEMsTUFBTyxDQUFFLFdBQVksT0FDekIsQ0FDTyxNQUFNLHFCQUF1QixDQUNoQyxPQUFPcWUsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLGFBQWUsUUFDdkIsWUFBWSxPQUFPQSxFQUFRLFdBQVkwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRXBFQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxpQ0FDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsV0FBYSxZQUFZLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUMvRCxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsV0FBWUMsUUFBTUQsRUFBTyxVQUFVLEVBQzdCLFlBQVksU0FBU0EsRUFBTyxVQUFVLEVBQ3RDLE1BQ2xCLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxhQUFlLFNBQ2xCN2QsRUFBSSxXQUFhNmQsRUFBUSxXQUNwQixZQUFZLE9BQU9BLEVBQVEsVUFBVSxFQUNyQyxRQUNIN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxpQ0FDaEIsT0FBQUEsRUFBUSxXQUNKdWMsRUFBTyxhQUFlLFFBQWFBLEVBQU8sYUFBZSxLQUNuRCxZQUFZLFlBQVlBLEVBQU8sVUFBVSxFQUN6QyxPQUNIdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyxpQ0FBa0MsQ0FDdkMsTUFBTyxDQUFFLFNBQVUsQ0FBQSxFQUFJLFdBQVksTUFBUyxDQUNoRCxDQUNPLE1BQU0sc0JBQXdCLENBQ2pDLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxVQUFXdHVCLEtBQUtrUyxFQUFRLFNBQ3BCLElBQUksT0FBT2xTLEVBQUc0cUIsRUFBTyxPQUFPLEVBQUUsRUFBRSxLQUFJLENBQUUsRUFBRSxTQUU1QyxPQUFJMVksRUFBUSxhQUFlLFFBQ3ZCLGFBQWEsT0FBT0EsRUFBUSxXQUFZMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUVyRUEsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsa0NBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLFNBQVMsS0FBSyxJQUFJLE9BQU9vYSxFQUFRQSxFQUFPLE9BQVEsQ0FBQSxDQUFDLEVBQ3pELFVBQ0MsR0FDRHBhLEVBQVEsV0FBYSxhQUFhLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUNoRSxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsU0FBVSxNQUFNLFFBQVFBLEdBQVEsUUFBUSxFQUNsQ0EsRUFBTyxTQUFTLElBQUssR0FBTSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQzFDLENBQUUsRUFDUixXQUFZQyxRQUFNRCxFQUFPLFVBQVUsRUFDN0IsYUFBYSxTQUFTQSxFQUFPLFVBQVUsRUFDdkMsTUFDbEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUk2ZCxFQUFRLFNBQ1I3ZCxFQUFJLFNBQVc2ZCxFQUFRLFNBQVMsSUFBS3BhLEdBQU1BLEVBQUksSUFBSSxPQUFPQSxDQUFDLEVBQUksTUFBUyxFQUd4RXpELEVBQUksU0FBVyxHQUVuQjZkLEVBQVEsYUFBZSxTQUNsQjdkLEVBQUksV0FBYTZkLEVBQVEsV0FDcEIsYUFBYSxPQUFPQSxFQUFRLFVBQVUsRUFDdEMsUUFDSDdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsa0NBQ2hCLE9BQUFBLEVBQVEsU0FBV3VjLEVBQU8sVUFBVSxJQUFLMzJCLEdBQU0sSUFBSSxZQUFZQSxDQUFDLENBQUMsR0FBSyxDQUFBLEVBQ3RFb2EsRUFBUSxXQUNKdWMsRUFBTyxhQUFlLFFBQWFBLEVBQU8sYUFBZSxLQUNuRCxhQUFhLFlBQVlBLEVBQU8sVUFBVSxFQUMxQyxPQUNIdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUywrQkFBZ0MsQ0FDckMsTUFBTyxDQUFFLFFBQVMsR0FDdEIsQ0FDTyxNQUFNLG9CQUFzQixDQUMvQixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsVUFBWSxJQUNwQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsT0FBTyxFQUVyQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLGdDQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxRQUFVb2EsRUFBTyxTQUN6QixjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsUUFBU0MsUUFBTUQsRUFBTyxPQUFPLEVBQUksT0FBT0EsRUFBTyxPQUFPLEVBQUksRUFDdEUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFVBQVksU0FBYzdkLEVBQUksUUFBVTZkLEVBQVEsU0FDakQ3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLGdDQUNoQixPQUFBQSxFQUFRLFFBQVV1YyxFQUFPLFNBQVcsR0FDN0J2YyxDQUNWLENBQ0wsRUFDQSxTQUFTLGdDQUFpQyxDQUN0QyxNQUFPLENBQUUsUUFBUyxPQUN0QixDQUNPLE1BQU0scUJBQXVCLENBQ2hDLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxVQUFZLFFBQ3BCLElBQUksT0FBT0EsRUFBUSxRQUFTMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUV6REEsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsaUNBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLFFBQVUsSUFBSSxPQUFPb2EsRUFBUUEsRUFBTyxPQUFNLENBQUUsRUFDcEQsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILFFBQVNDLFFBQU1ELEVBQU8sT0FBTyxFQUFJLElBQUksU0FBU0EsRUFBTyxPQUFPLEVBQUksTUFDNUUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFVBQVksU0FDZjdkLEVBQUksUUFBVTZkLEVBQVEsUUFBVSxJQUFJLE9BQU9BLEVBQVEsT0FBTyxFQUFJLFFBQzVEN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxpQ0FDaEIsT0FBQUEsRUFBUSxRQUNKdWMsRUFBTyxVQUFZLFFBQWFBLEVBQU8sVUFBWSxLQUM3QyxJQUFJLFlBQVlBLEVBQU8sT0FBTyxFQUM5QixPQUNIdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyw4QkFBK0IsQ0FDcEMsTUFBTyxFQUNYLENBQ08sTUFBTSxtQkFBcUIsQ0FDOUIsT0FBTzhrQixFQUFHcE0sRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDcEMsT0FBTzFELENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLCtCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsV0FFUmxDLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTOGtCLEVBQUcsQ0FDUixNQUFPLEVBQ1YsRUFDRCxPQUFPQSxFQUFHLENBRU4sTUFEWSxDQUFBLENBRWYsRUFDRCxZQUFZQSxFQUFHLENBRVgsT0FEZ0IsOEJBRW5CLENBQ0wsRUFDQSxTQUFTLCtCQUFnQyxDQUNyQyxNQUFPLENBQUUsT0FBUSxPQUNyQixDQUNPLE1BQU0sb0JBQXNCLENBQy9CLE9BQU85a0IsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLFNBQVcsUUFDbkIsT0FBTyxPQUFPQSxFQUFRLE9BQVEwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRTNEQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxnQ0FDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsT0FBUyxPQUFPLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUN0RCxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsT0FBUUMsUUFBTUQsRUFBTyxNQUFNLEVBQUksT0FBTyxTQUFTQSxFQUFPLE1BQU0sRUFBSSxNQUM1RSxDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsU0FBVyxTQUNkN2QsRUFBSSxPQUFTNmQsRUFBUSxPQUFTLE9BQU8sT0FBT0EsRUFBUSxNQUFNLEVBQUksUUFDNUQ3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLGdDQUNoQixPQUFBQSxFQUFRLE9BQ0p1YyxFQUFPLFNBQVcsUUFBYUEsRUFBTyxTQUFXLEtBQzNDLE9BQU8sWUFBWUEsRUFBTyxNQUFNLEVBQ2hDLE9BQ0h2YyxDQUNWLENBQ0wsRUFDTyxNQUFNLGVBQWdCLENBRXpCLFlBQVlpYyxFQUFLLENBRGpCaFYsR0FBQSxZQUVJLEtBQUssSUFBTWdWLEVBQ1gsS0FBSyxTQUFXLEtBQUssU0FBUyxLQUFLLElBQUksRUFDdkMsS0FBSyxRQUFVLEtBQUssUUFBUSxLQUFLLElBQUksRUFDckMsS0FBSyxPQUFTLEtBQUssT0FBTyxLQUFLLElBQUksQ0FDdEMsQ0FDRCxTQUFTSixFQUFTMkosRUFBVSxDQUN4QixPQUFPLEtBQUssSUFBSSxNQUFNLGtCQUFtQixxQkFBcUIsWUFBWTNKLENBQU8sRUFBRzJKLENBQVEsQ0FDL0YsQ0FDRCxRQUFRM0osRUFBUzJKLEVBQVUsQ0FDdkIsT0FBTyxLQUFLLElBQUksTUFBTSxpQkFBa0Isb0JBQW9CLFlBQVkzSixDQUFPLEVBQUcySixDQUFRLENBQzdGLENBQ0QsT0FBTzNKLEVBQVMySixFQUFVLENBQ3RCLE9BQU8sS0FBSyxJQUFJLE1BQU0sZ0JBQWlCLG1CQUFtQixZQUFZM0osQ0FBTyxFQUFHMkosQ0FBUSxDQUMzRixDQUNMLENBQ08sTUFBTSxVQUFZLENBQ3JCLFlBQWEsMkJBQ2pCLEVBQ2Esa0JBQW9CLENBQzdCLFdBQVksV0FDWixRQUFTLFVBQ1QsY0FBZSxHQUNmLGVBQWdCLEdBQ2hCLFlBQWEsQ0FDVCxpQkFBa0IsQ0FDZCxPQUFPLHFCQUFxQixPQUFPLElBQUksRUFBRSxPQUFNLENBQ2xELENBQ0osRUFDRCxhQUFjLENBQ1Ysa0JBQWtCaGhDLEVBQU0sQ0FDcEIsTUFBTyxDQUNILEdBQUcsc0JBQXNCLE9BQU9BLENBQUksRUFDcEMsVUFBVyxDQUNQLE9BQU8sSUFDVixDQUNqQixDQUNTLENBQ0osQ0FDTCxFQUNhLGlCQUFtQixDQUM1QixXQUFZLFVBQ1osUUFBUyxVQUNULGNBQWUsR0FDZixlQUFnQixHQUNoQixZQUFhLENBQ1QsaUJBQWtCLENBQ2QsT0FBTyxvQkFBb0IsT0FBTyxJQUFJLEVBQUUsT0FBTSxDQUNqRCxDQUNKLEVBQ0QsYUFBYyxDQUNWLGtCQUFrQkEsRUFBTSxDQUNwQixNQUFPLENBQ0gsR0FBRyxxQkFBcUIsT0FBT0EsQ0FBSSxFQUNuQyxVQUFXLENBQ1AsT0FBTyxJQUNWLENBQ2pCLENBQ1MsQ0FDSixDQUNMLEVBQ2EsZ0JBQWtCLENBQzNCLFdBQVksU0FDWixRQUFTLFVBQ1QsY0FBZSxHQUNmLGVBQWdCLEdBQ2hCLFlBQWEsQ0FDVCxpQkFBa0IsQ0FDZCxPQUFPLG1CQUFtQixPQUFPLElBQUksRUFBRSxPQUFNLENBQ2hELENBQ0osRUFDRCxhQUFjLENBQ1Ysa0JBQWtCQSxFQUFNLENBQ3BCLE1BQU8sQ0FDSCxHQUFHLG9CQUFvQixPQUFPQSxDQUFJLEVBQ2xDLFVBQVcsQ0FDUCxPQUFPLElBQ1YsQ0FDakIsQ0FDUyxDQUNKLENBQ0wsRUFzQ0EsU0FBU2c0QixRQUFNNzZCLEVBQU8sQ0FDbEIsT0FBT0EsR0FBVSxJQUNyQixDQ3hXSXlnQyxRQUFRLEtBQUMsT0FBU0MsT0FDbEJELFFBQVEsS0FBQyxLQUFPQyxLQUNoQkMsUUFBQUEsYUNnUUosSUFBSVQsY0FBYyxJQUFNLENBQ3BCLEdBQUksT0FBT0EsYUFBZSxJQUN0QixPQUFPQSxhQUNYLEdBQUksT0FBTyxLQUFTLElBQ2hCLE9BQU8sS0FDWCxHQUFJLE9BQU8sT0FBVyxJQUNsQixPQUFPLE9BQ1gsR0FBSSxPQUFPLE9BQVcsSUFDbEIsT0FBTyxPQUNYLEtBQU0sZ0NBQ1YsS0FDYUEsYUFBVyxLQVVYQSxhQUFXLEtBWXBCTyxRQUFRLEtBQUMsT0FBU0MsT0FDbEJELFFBQVEsS0FBQyxLQUFPQyxLQUNoQkMsUUFBQUEsYUNqUEFGLFFBQVEsS0FBQyxPQUFTQyxPQUNsQkQsUUFBUSxLQUFDLEtBQU9DLEtBQ2hCQyxRQUFBQSxhQzlDSixJQUFJVCxjQUFjLElBQU0sQ0FDcEIsR0FBSSxPQUFPQSxhQUFlLElBQ3RCLE9BQU9BLGFBQ1gsR0FBSSxPQUFPLEtBQVMsSUFDaEIsT0FBTyxLQUNYLEdBQUksT0FBTyxPQUFXLElBQ2xCLE9BQU8sT0FDWCxHQUFJLE9BQU8sT0FBVyxJQUNsQixPQUFPLE9BQ1gsS0FBTSxnQ0FDVixLQUNhQSxhQUFXLEtBVVhBLGFBQVcsS0NvSnhCLElBQUlBLGNBQWMsSUFBTSxDQUNwQixHQUFJLE9BQU9BLGFBQWUsSUFDdEIsT0FBT0EsYUFDWCxHQUFJLE9BQU8sS0FBUyxJQUNoQixPQUFPLEtBQ1gsR0FBSSxPQUFPLE9BQVcsSUFDbEIsT0FBTyxPQUNYLEdBQUksT0FBTyxPQUFXLElBQ2xCLE9BQU8sT0FDWCxLQUFNLGdDQUNWLEtBQ2FBLGFBQVcsS0FVWEEsYUFBVyxLQVlwQk8sUUFBUSxLQUFDLE9BQVNDLE9BQ2xCRCxRQUFRLEtBQUMsS0FBT0MsS0FDaEJDLFFBQUFBLGFDdFFHLElBQUksYUFDVixTQUFVMEQsRUFBYSxDQUNwQkEsRUFBWUEsRUFBWSxzQkFBMkIsR0FBSyx3QkFDeERBLEVBQVlBLEVBQVkscUJBQTBCLEdBQUssdUJBQ3ZEQSxFQUFZQSxFQUFZLHFCQUEwQixHQUFLLHVCQUN2REEsRUFBWUEsRUFBWSxrQkFBdUIsR0FBSyxvQkFDcERBLEVBQVlBLEVBQVksYUFBa0IsSUFBTSxjQUNwRCxHQUFHLGNBQWdCLFlBQWMsQ0FBRSxFQUFDLEVBcUM3QixJQUFJLGVBQ1YsU0FBVUMsRUFBZSxDQUN0QkEsRUFBY0EsRUFBYyx3QkFBNkIsR0FBSywwQkFFOURBLEVBQWNBLEVBQWMsd0JBQTZCLEdBQUssMEJBQzlEQSxFQUFjQSxFQUFjLDBCQUErQixHQUFLLDRCQUVoRUEsRUFBY0EsRUFBYyx5QkFBOEIsSUFBTSwyQkFDaEVBLEVBQWNBLEVBQWMsYUFBa0IsSUFBTSxjQUN4RCxHQUFHLGdCQUFrQixjQUFnQixDQUFFLEVBQUMsRUFvdEN4QyxJQUFJcEUsY0FBYyxJQUFNLENBQ3BCLEdBQUksT0FBT0EsYUFBZSxJQUN0QixPQUFPQSxhQUNYLEdBQUksT0FBTyxLQUFTLElBQ2hCLE9BQU8sS0FDWCxHQUFJLE9BQU8sT0FBVyxJQUNsQixPQUFPLE9BQ1gsR0FBSSxPQUFPLE9BQVcsSUFDbEIsT0FBTyxPQUNYLEtBQU0sZ0NBQ1YsS0FDYUEsYUFBVyxLQVVYQSxhQUFXLEtBaUNwQk8sUUFBUSxLQUFDLE9BQVNDLE9BQ2xCRCxRQUFRLEtBQUMsS0FBT0MsS0FDaEJDLFFBQUFBLGFDL3dDQUYsUUFBUSxLQUFDLE9BQVNDLE9BQ2xCRCxRQUFRLEtBQUMsS0FBT0MsS0FDaEJDLFFBQUFBLGFDZ1ZBRixRQUFRLEtBQUMsT0FBU0MsT0FDbEJELFFBQVEsS0FBQyxLQUFPQyxLQUNoQkMsUUFBQUEsYUNwWUcsSUFBSSxhQUNWLFNBQVU0RCxFQUFhLENBQ3BCQSxFQUFZQSxFQUFZLElBQVMsR0FBSyxNQUN0Q0EsRUFBWUEsRUFBWSxRQUFhLEdBQUssVUFDMUNBLEVBQVlBLEVBQVksYUFBa0IsSUFBTSxjQUNwRCxHQUFHLGNBQWdCLFlBQWMsQ0FBRSxFQUFDLEVBMEI3QixJQUFJLGNBQ1YsU0FBVUMsRUFBYyxDQUNyQkEsRUFBYUEsRUFBYSxRQUFhLEdBQUssVUFDNUNBLEVBQWFBLEVBQWEsZUFBb0IsR0FBSyxpQkFDbkRBLEVBQWFBLEVBQWEsb0JBQXlCLEdBQUssc0JBQ3hEQSxFQUFhQSxFQUFhLGFBQWtCLElBQU0sY0FDdEQsR0FBRyxlQUFpQixhQUFlLENBQUUsRUFBQyxFQStCL0IsSUFBSSw4QkFDVixTQUFVQyxFQUE4QixDQUVyQ0EsRUFBNkJBLEVBQTZCLFFBQWEsR0FBSyxVQUU1RUEsRUFBNkJBLEVBQTZCLE9BQVksR0FBSyxTQUUzRUEsRUFBNkJBLEVBQTZCLE1BQVcsR0FBSyxRQUUxRUEsRUFBNkJBLEVBQTZCLE9BQVksR0FBSyxTQUUzRUEsRUFBNkJBLEVBQTZCLGNBQW1CLEdBQUssZ0JBRWxGQSxFQUE2QkEsRUFBNkIsY0FBbUIsR0FBSyxnQkFDbEZBLEVBQTZCQSxFQUE2QixhQUFrQixJQUFNLGNBQ3RGLEdBQUcsK0JBQWlDLDZCQUErQixDQUFFLEVBQUMsRUE4Qy9ELElBQUksbUNBQ1YsU0FBVUMsRUFBbUMsQ0FFMUNBLEVBQWtDQSxFQUFrQyxRQUFhLEdBQUssVUFFdEZBLEVBQWtDQSxFQUFrQyxPQUFZLEdBQUssU0FFckZBLEVBQWtDQSxFQUFrQyxNQUFXLEdBQUssUUFFcEZBLEVBQWtDQSxFQUFrQyxNQUFXLEdBQUssUUFFcEZBLEVBQWtDQSxFQUFrQyxlQUFvQixHQUFLLGlCQUU3RkEsRUFBa0NBLEVBQWtDLGdCQUFxQixHQUFLLGtCQUM5RkEsRUFBa0NBLEVBQWtDLGFBQWtCLElBQU0sY0FDaEcsR0FBRyxvQ0FBc0Msa0NBQW9DLENBQUUsRUFBQyxFQWczRmhGLFNBQVMsaUJBQWtCLENBQ3ZCLE1BQU8sQ0FBRSxLQUFNLEdBQUksV0FBWSxDQUFFLENBQUEsQ0FDckMsQ0FDTyxNQUFNQyxRQUFRLENBQ2pCLE9BQU90bUIsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQ3RDcGMsRUFBUSxPQUFTLElBQ2pCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxJQUFJLEVBRXpDLFVBQVdsUyxLQUFLa1MsRUFBUSxXQUNwQixlQUFlLE9BQU9sUyxFQUFHNHFCLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSSxDQUFFLEVBQUUsU0FFdkQsT0FBT0EsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsa0JBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLEtBQU9vYSxFQUFPLFNBQ3RCLFVBQ0MsR0FDRHBhLEVBQVEsV0FBVyxLQUFLLGVBQWUsT0FBT29hLEVBQVFBLEVBQU8sT0FBUSxDQUFBLENBQUMsRUFDdEUsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILEtBQU1DLFFBQU1ELEVBQU8sSUFBSSxFQUFJLE9BQU9BLEVBQU8sSUFBSSxFQUFJLEdBQ2pELFdBQVksTUFBTSxRQUFRQSxHQUFRLFVBQVUsRUFDdENBLEVBQU8sV0FBVyxJQUFLLEdBQU0sZUFBZSxTQUFTLENBQUMsQ0FBQyxFQUN2RCxDQUFFLENBQ3BCLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxPQUFTLFNBQWM3ZCxFQUFJLEtBQU82ZCxFQUFRLE1BQzlDQSxFQUFRLFdBQ1I3ZCxFQUFJLFdBQWE2ZCxFQUFRLFdBQVcsSUFBS3BhLEdBQU1BLEVBQUksZUFBZSxPQUFPQSxDQUFDLEVBQUksTUFBUyxFQUd2RnpELEVBQUksV0FBYSxHQUVkQSxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLGtCQUNoQixPQUFBQSxFQUFRLEtBQU91YyxFQUFPLE1BQVEsR0FDOUJ2YyxFQUFRLFdBQ0p1YyxFQUFPLFlBQVksSUFBSzMyQixHQUFNLGVBQWUsWUFBWUEsQ0FBQyxDQUFDLEdBQUssR0FDN0RvYSxDQUNWLENBQ0wsRUFDQSxTQUFTLDBCQUEyQixDQUNoQyxNQUFPLENBQUUsSUFBSyxJQUFJLFdBQWMsTUFBTyxJQUFJLFdBQWMsTUFBTyxHQUNwRSxDQUNPLE1BQU0sZUFBaUIsQ0FDMUIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLElBQUksU0FBVyxHQUN2QjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTTFZLEVBQVEsR0FBRyxFQUVuQ0EsRUFBUSxNQUFNLFNBQVcsR0FDekIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0xWSxFQUFRLEtBQUssRUFFckNBLEVBQVEsUUFBVSxJQUNsQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSzFZLEVBQVEsS0FBSyxFQUVqQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLDJCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxJQUFNb2EsRUFBTyxRQUNyQixVQUNDLEdBQ0RwYSxFQUFRLE1BQVFvYSxFQUFPLFFBQ3ZCLFVBQ0MsR0FDRHBhLEVBQVEsTUFBUW9hLEVBQU8sT0FDdkIsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILElBQUtDLFFBQU1ELEVBQU8sR0FBRyxFQUFJb0Ysa0JBQWdCcEYsRUFBTyxHQUFHLEVBQUksSUFBSSxXQUMzRCxNQUFPQyxRQUFNRCxFQUFPLEtBQUssRUFDbkJvRixrQkFBZ0JwRixFQUFPLEtBQUssRUFDNUIsSUFBSSxXQUNWLE1BQU9DLFFBQU1ELEVBQU8sS0FBSyxFQUFJLFFBQVFBLEVBQU8sS0FBSyxFQUFJLEVBQ2pFLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxNQUFRLFNBQ1g3ZCxFQUFJLElBQU15L0Isa0JBQWdCNWhCLEVBQVEsTUFBUSxPQUFZQSxFQUFRLElBQU0sSUFBSSxVQUFZLEdBQ3pGQSxFQUFRLFFBQVUsU0FDYjdkLEVBQUksTUFBUXkvQixrQkFBZ0I1aEIsRUFBUSxRQUFVLE9BQVlBLEVBQVEsTUFBUSxJQUFJLFVBQVksR0FDL0ZBLEVBQVEsUUFBVSxTQUFjN2QsRUFBSSxNQUFRNmQsRUFBUSxPQUM3QzdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsMkJBQ2hCLE9BQUFBLEVBQVEsSUFBTXVjLEVBQU8sS0FBTyxJQUFJLFdBQ2hDdmMsRUFBUSxNQUFRdWMsRUFBTyxPQUFTLElBQUksV0FDcEN2YyxFQUFRLE1BQVF1YyxFQUFPLE9BQVMsR0FDekJ2YyxDQUNWLENBQ0wsRUFzMkJBLElBQUk2aEIsY0FBYyxJQUFNLENBQ3BCLEdBQUksT0FBT0EsYUFBZSxJQUN0QixPQUFPQSxhQUNYLEdBQUksT0FBTyxLQUFTLElBQ2hCLE9BQU8sS0FDWCxHQUFJLE9BQU8sT0FBVyxJQUNsQixPQUFPLE9BQ1gsR0FBSSxPQUFPLE9BQVcsSUFDbEIsT0FBTyxPQUNYLEtBQU0sZ0NBQ1YsS0FDQSxNQUFNQyxPQUFPRCxhQUFXLE9BQ2xCbE8sR0FBUWtPLGFBQVcsT0FBTyxLQUFLbE8sRUFBSyxRQUFRLEVBQUUsU0FBUyxRQUFRLEdBQ3JFLFNBQVNnTyxrQkFBZ0JoTyxFQUFLLENBQzFCLE1BQU1vTyxFQUFNRCxPQUFLbk8sQ0FBRyxFQUNkcU8sRUFBTSxJQUFJLFdBQVdELEVBQUksTUFBTSxFQUNyQyxRQUFTLEVBQUksRUFBRyxFQUFJQSxFQUFJLE9BQVEsRUFBRSxFQUM5QkMsRUFBSSxHQUFLRCxFQUFJLFdBQVcsQ0FBQyxFQUU3QixPQUFPQyxDQUNYLENBQ0EsTUFBTUMsT0FBT0osYUFBVyxPQUNsQkUsR0FBUUYsYUFBVyxPQUFPLEtBQUtFLEVBQUssUUFBUSxFQUFFLFNBQVMsUUFBUSxHQUNyRSxTQUFTSCxrQkFBZ0JJLEVBQUssQ0FDMUIsTUFBTUQsRUFBTSxDQUFBLEVBQ1osT0FBQUMsRUFBSSxRQUFTRSxHQUFTLENBQ2xCSCxFQUFJLEtBQUssT0FBTyxhQUFhRyxDQUFJLENBQUMsQ0FDMUMsQ0FBSyxFQUNNRCxPQUFLRixFQUFJLEtBQUssRUFBRSxDQUFDLENBQzVCLENBeUJJSyxRQUFRLEtBQUMsT0FBU0MsT0FDbEJELFFBQVEsS0FBQyxLQUFPQyxLQUNoQkMsUUFBQUEsYUFFSixTQUFTOUYsUUFBTTc2QixFQUFPLENBQ2xCLE9BQU9BLEdBQVUsSUFDckIsQ0NuaUlBLFNBQVMsc0JBQXVCLENBQzVCLE1BQU8sQ0FDSCxPQUFRLElBQ1IsT0FBUSxHQUNSLFVBQVcsR0FDWCxLQUFNLEVBQ04sS0FBTSxHQUNOLE9BQVEsR0FDUixLQUFNLENBQUUsRUFDUixLQUFNLEdBQ04sVUFBVyxJQUNYLFFBQVMsSUFDVCxHQUFJLE9BQ0osVUFBVyxHQUNYLE9BQVEsQ0FBRSxDQUNsQixDQUNBLENBQ08sTUFBTSxXQUFhLENBQ3RCLE9BQU9xZSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDdENwYyxFQUFRLFNBQVcsS0FDbkIwWSxFQUFPLE9BQU8sQ0FBQyxFQUFFLE1BQU0xWSxFQUFRLE1BQU0sRUFFckNBLEVBQVEsU0FBVyxJQUNuQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsTUFBTSxFQUV2Q0EsRUFBUSxZQUFjLElBQ3RCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxTQUFTLEVBRTFDQSxFQUFRLE9BQVMsR0FDakIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLElBQUksRUFFckNBLEVBQVEsT0FBUyxJQUNqQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsSUFBSSxFQUVyQ0EsRUFBUSxTQUFXLElBQ25CMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxNQUFNLEVBRTNDLFVBQVdsUyxLQUFLa1MsRUFBUSxLQUNwQixlQUFlLE9BQU9sUyxFQUFHNHFCLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSSxDQUFFLEVBQUUsU0FFbkQxWSxFQUFRLE9BQVMsSUFDakIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLElBQUksRUFFckNBLEVBQVEsWUFBYyxLQUN0QjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTTFZLEVBQVEsU0FBUyxFQUV6Q0EsRUFBUSxVQUFZLEtBQ3BCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNMVksRUFBUSxPQUFPLEVBRXZDQSxFQUFRLEtBQU8sUUFDZixJQUFJLE9BQU9BLEVBQVEsR0FBSTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFdkQxWSxFQUFRLFlBQWMsSUFDdEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLFNBQVMsRUFFOUMsVUFBV2xTLEtBQUtrUyxFQUFRLE9BQ3BCc21CLFFBQU0sT0FBT3g0QixFQUFHNHFCLEVBQU8sT0FBTyxHQUFHLEVBQUUsS0FBSSxDQUFFLEVBQUUsU0FFL0MsT0FBT0EsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsdUJBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLE9BQVMwaEIsZUFBYXRILEVBQU8sTUFBTyxDQUFBLEVBQzVDLFVBQ0MsR0FDRHBhLEVBQVEsT0FBU29hLEVBQU8sU0FDeEIsVUFDQyxHQUNEcGEsRUFBUSxVQUFZb2EsRUFBTyxTQUMzQixVQUNDLEdBQ0RwYSxFQUFRLEtBQU9vYSxFQUFPLFNBQ3RCLFVBQ0MsR0FDRHBhLEVBQVEsS0FBT29hLEVBQU8sU0FDdEIsVUFDQyxHQUNEcGEsRUFBUSxPQUFTb2EsRUFBTyxTQUN4QixVQUNDLEdBQ0RwYSxFQUFRLEtBQUssS0FBSyxlQUFlLE9BQU9vYSxFQUFRQSxFQUFPLE9BQVEsQ0FBQSxDQUFDLEVBQ2hFLFVBQ0MsR0FDRHBhLEVBQVEsS0FBT29hLEVBQU8sU0FDdEIsVUFDQyxHQUNEcGEsRUFBUSxVQUFZMGhCLGVBQWF0SCxFQUFPLE1BQU8sQ0FBQSxFQUMvQyxVQUNDLElBQ0RwYSxFQUFRLFFBQVUwaEIsZUFBYXRILEVBQU8sTUFBTyxDQUFBLEVBQzdDLFVBQ0MsSUFDRHBhLEVBQVEsR0FBSyxJQUFJLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUMvQyxVQUNDLElBQ0RwYSxFQUFRLFVBQVlvYSxFQUFPLFNBQzNCLFVBQ0MsSUFDRHBhLEVBQVEsT0FBTyxLQUFLc21CLFFBQU0sT0FBT2xNLEVBQVFBLEVBQU8sT0FBUSxDQUFBLENBQUMsRUFDekQsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILE9BQVFDLFFBQU1ELEVBQU8sTUFBTSxFQUFJLE9BQU9BLEVBQU8sTUFBTSxFQUFJLElBQ3ZELE9BQVFDLFFBQU1ELEVBQU8sTUFBTSxFQUFJLE9BQU9BLEVBQU8sTUFBTSxFQUFJLEdBQ3ZELFVBQVdDLFFBQU1ELEVBQU8sU0FBUyxFQUFJLE9BQU9BLEVBQU8sU0FBUyxFQUFJLEdBQ2hFLEtBQU1DLFFBQU1ELEVBQU8sSUFBSSxFQUFJLE9BQU9BLEVBQU8sSUFBSSxFQUFJLEVBQ2pELEtBQU1DLFFBQU1ELEVBQU8sSUFBSSxFQUFJLE9BQU9BLEVBQU8sSUFBSSxFQUFJLEdBQ2pELE9BQVFDLFFBQU1ELEVBQU8sTUFBTSxFQUFJLE9BQU9BLEVBQU8sTUFBTSxFQUFJLEdBQ3ZELEtBQU0sTUFBTSxRQUFRQSxHQUFRLElBQUksRUFDMUJBLEVBQU8sS0FBSyxJQUFLLEdBQU0sZUFBZSxTQUFTLENBQUMsQ0FBQyxFQUNqRCxDQUFFLEVBQ1IsS0FBTUMsUUFBTUQsRUFBTyxJQUFJLEVBQUksT0FBT0EsRUFBTyxJQUFJLEVBQUksR0FDakQsVUFBV0MsUUFBTUQsRUFBTyxTQUFTLEVBQUksT0FBT0EsRUFBTyxTQUFTLEVBQUksSUFDaEUsUUFBU0MsUUFBTUQsRUFBTyxPQUFPLEVBQUksT0FBT0EsRUFBTyxPQUFPLEVBQUksSUFDMUQsR0FBSUMsUUFBTUQsRUFBTyxFQUFFLEVBQUksSUFBSSxTQUFTQSxFQUFPLEVBQUUsRUFBSSxPQUNqRCxVQUFXQyxRQUFNRCxFQUFPLFNBQVMsRUFBSSxPQUFPQSxFQUFPLFNBQVMsRUFBSSxHQUNoRSxPQUFRLE1BQU0sUUFBUUEsR0FBUSxNQUFNLEVBQzlCQSxFQUFPLE9BQU8sSUFBSyxHQUFNK0osUUFBTSxTQUFTLENBQUMsQ0FBQyxFQUMxQyxDQUFFLENBQ3BCLENBQ0ssRUFDRCxPQUFPdG1CLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsU0FBVyxTQUFjN2QsRUFBSSxPQUFTNmQsRUFBUSxRQUN0REEsRUFBUSxTQUFXLFNBQWM3ZCxFQUFJLE9BQVM2ZCxFQUFRLFFBQ3REQSxFQUFRLFlBQWMsU0FBYzdkLEVBQUksVUFBWTZkLEVBQVEsV0FDNURBLEVBQVEsT0FBUyxTQUFjN2QsRUFBSSxLQUFPLEtBQUssTUFBTTZkLEVBQVEsSUFBSSxHQUNqRUEsRUFBUSxPQUFTLFNBQWM3ZCxFQUFJLEtBQU82ZCxFQUFRLE1BQ2xEQSxFQUFRLFNBQVcsU0FBYzdkLEVBQUksT0FBUzZkLEVBQVEsUUFDbERBLEVBQVEsS0FDUjdkLEVBQUksS0FBTzZkLEVBQVEsS0FBSyxJQUFLcGEsR0FBTUEsRUFBSSxlQUFlLE9BQU9BLENBQUMsRUFBSSxNQUFTLEVBRzNFekQsRUFBSSxLQUFPLEdBRWY2ZCxFQUFRLE9BQVMsU0FBYzdkLEVBQUksS0FBTzZkLEVBQVEsTUFDbERBLEVBQVEsWUFBYyxTQUFjN2QsRUFBSSxVQUFZNmQsRUFBUSxXQUM1REEsRUFBUSxVQUFZLFNBQWM3ZCxFQUFJLFFBQVU2ZCxFQUFRLFNBQ3hEQSxFQUFRLEtBQU8sU0FDVjdkLEVBQUksR0FBSzZkLEVBQVEsR0FBSyxJQUFJLE9BQU9BLEVBQVEsRUFBRSxFQUFJLFFBQ3BEQSxFQUFRLFlBQWMsU0FBYzdkLEVBQUksVUFBWTZkLEVBQVEsV0FDeERBLEVBQVEsT0FDUjdkLEVBQUksT0FBUzZkLEVBQVEsT0FBTyxJQUFLcGEsR0FBT0EsRUFBSTBnQyxRQUFNLE9BQU8xZ0MsQ0FBQyxFQUFJLE1BQVUsRUFHeEV6RCxFQUFJLE9BQVMsR0FFVkEsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSx1QkFDaEIsT0FBQUEsRUFBUSxPQUFTdWMsRUFBTyxRQUFVLElBQ2xDdmMsRUFBUSxPQUFTdWMsRUFBTyxRQUFVLEdBQ2xDdmMsRUFBUSxVQUFZdWMsRUFBTyxXQUFhLEdBQ3hDdmMsRUFBUSxLQUFPdWMsRUFBTyxNQUFRLEVBQzlCdmMsRUFBUSxLQUFPdWMsRUFBTyxNQUFRLEdBQzlCdmMsRUFBUSxPQUFTdWMsRUFBTyxRQUFVLEdBQ2xDdmMsRUFBUSxLQUFPdWMsRUFBTyxNQUFNLElBQUszMkIsR0FBTSxlQUFlLFlBQVlBLENBQUMsQ0FBQyxHQUFLLENBQUEsRUFDekVvYSxFQUFRLEtBQU91YyxFQUFPLE1BQVEsR0FDOUJ2YyxFQUFRLFVBQVl1YyxFQUFPLFdBQWEsSUFDeEN2YyxFQUFRLFFBQVV1YyxFQUFPLFNBQVcsSUFDcEN2YyxFQUFRLEdBQ0p1YyxFQUFPLEtBQU8sUUFBYUEsRUFBTyxLQUFPLEtBQ25DLElBQUksWUFBWUEsRUFBTyxFQUFFLEVBQ3pCLE9BQ1Z2YyxFQUFRLFVBQVl1YyxFQUFPLFdBQWEsR0FDeEN2YyxFQUFRLE9BQVN1YyxFQUFPLFFBQVEsSUFBSzMyQixHQUFNMGdDLFFBQU0sWUFBWTFnQyxDQUFDLENBQUMsR0FBSyxDQUFBLEVBQzdEb2EsQ0FDVixDQUNMLEVBQ0EsU0FBUywwQkFBMkIsQ0FDaEMsTUFBTyxDQUFFLFNBQVUsRUFBRyxJQUFLLEdBQUksT0FBUSxDQUFBLEVBQzNDLENBQ08sTUFBTSxlQUFpQixDQUMxQixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDdENwYyxFQUFRLFdBQWEsR0FDckIwWSxFQUFPLE9BQU8sQ0FBQyxFQUFFLE9BQU8xWSxFQUFRLFFBQVEsRUFFeENBLEVBQVEsTUFBUSxJQUNoQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsR0FBRyxFQUV4QyxVQUFXbFMsS0FBS2tTLEVBQVEsT0FDcEIsWUFBWSxPQUFPbFMsRUFBRzRxQixFQUFPLE9BQU8sRUFBRSxFQUFFLEtBQUksQ0FBRSxFQUFFLFNBRXBELE9BQU9BLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLDJCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxTQUFXb2EsRUFBTyxTQUMxQixVQUNDLEdBQ0RwYSxFQUFRLElBQU1vYSxFQUFPLFNBQ3JCLFVBQ0MsR0FDRHBhLEVBQVEsT0FBTyxLQUFLLFlBQVksT0FBT29hLEVBQVFBLEVBQU8sT0FBUSxDQUFBLENBQUMsRUFDL0QsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILFNBQVVDLFFBQU1ELEVBQU8sUUFBUSxFQUFJLE9BQU9BLEVBQU8sUUFBUSxFQUFJLEVBQzdELElBQUtDLFFBQU1ELEVBQU8sR0FBRyxFQUFJLE9BQU9BLEVBQU8sR0FBRyxFQUFJLEdBQzlDLE9BQVEsTUFBTSxRQUFRQSxHQUFRLE1BQU0sRUFDOUJBLEVBQU8sT0FBTyxJQUFLLEdBQU0sWUFBWSxTQUFTLENBQUMsQ0FBQyxFQUNoRCxDQUFFLENBQ3BCLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxXQUFhLFNBQ2hCN2QsRUFBSSxTQUFXLEtBQUssTUFBTTZkLEVBQVEsUUFBUSxHQUMvQ0EsRUFBUSxNQUFRLFNBQWM3ZCxFQUFJLElBQU02ZCxFQUFRLEtBQzVDQSxFQUFRLE9BQ1I3ZCxFQUFJLE9BQVM2ZCxFQUFRLE9BQU8sSUFBS3BhLEdBQU1BLEVBQUksWUFBWSxPQUFPQSxDQUFDLEVBQUksTUFBUyxFQUc1RXpELEVBQUksT0FBUyxHQUVWQSxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLDJCQUNoQixPQUFBQSxFQUFRLFNBQVd1YyxFQUFPLFVBQVksRUFDdEN2YyxFQUFRLElBQU11YyxFQUFPLEtBQU8sR0FDNUJ2YyxFQUFRLE9BQ0p1YyxFQUFPLFFBQVEsSUFBSzMyQixHQUFNLFlBQVksWUFBWUEsQ0FBQyxDQUFDLEdBQUssR0FDdERvYSxDQUNWLENBQ0wsRUFDQSxTQUFTLHVCQUF3QixDQUM3QixNQUFPLENBQUUsS0FBTSxHQUFJLFdBQVksQ0FBRSxDQUFBLENBQ3JDLENBQ08sTUFBTSxZQUFjLENBQ3ZCLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUN0Q3BjLEVBQVEsT0FBUyxJQUNqQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsSUFBSSxFQUV6QyxVQUFXbFMsS0FBS2tTLEVBQVEsV0FDcEIsVUFBVSxPQUFPbFMsRUFBRzRxQixFQUFPLE9BQU8sRUFBRSxFQUFFLEtBQUksQ0FBRSxFQUFFLFNBRWxELE9BQU9BLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLHdCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxLQUFPb2EsRUFBTyxTQUN0QixVQUNDLEdBQ0RwYSxFQUFRLFdBQVcsS0FBSyxVQUFVLE9BQU9vYSxFQUFRQSxFQUFPLE9BQVEsQ0FBQSxDQUFDLEVBQ2pFLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxLQUFNQyxRQUFNRCxFQUFPLElBQUksRUFBSSxPQUFPQSxFQUFPLElBQUksRUFBSSxHQUNqRCxXQUFZLE1BQU0sUUFBUUEsR0FBUSxVQUFVLEVBQ3RDQSxFQUFPLFdBQVcsSUFBSyxHQUFNLFVBQVUsU0FBUyxDQUFDLENBQUMsRUFDbEQsQ0FBRSxDQUNwQixDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsT0FBUyxTQUFjN2QsRUFBSSxLQUFPNmQsRUFBUSxNQUM5Q0EsRUFBUSxXQUNSN2QsRUFBSSxXQUFhNmQsRUFBUSxXQUFXLElBQUtwYSxHQUFNQSxFQUFJLFVBQVUsT0FBT0EsQ0FBQyxFQUFJLE1BQVMsRUFHbEZ6RCxFQUFJLFdBQWEsR0FFZEEsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSx3QkFDaEIsT0FBQUEsRUFBUSxLQUFPdWMsRUFBTyxNQUFRLEdBQzlCdmMsRUFBUSxXQUNKdWMsRUFBTyxZQUFZLElBQUszMkIsR0FBTSxVQUFVLFlBQVlBLENBQUMsQ0FBQyxHQUFLLEdBQ3hEb2EsQ0FDVixDQUNMLEVBQ0EsU0FBUyxxQkFBc0IsQ0FDM0IsTUFBTyxDQUFFLElBQUssR0FBSSxNQUFPLEVBQUUsQ0FDL0IsQ0FDTyxNQUFNLFVBQVksQ0FDckIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLE1BQVEsSUFDaEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLEdBQUcsRUFFcENBLEVBQVEsUUFBVSxJQUNsQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsS0FBSyxFQUVuQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLHNCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxJQUFNb2EsRUFBTyxTQUNyQixVQUNDLEdBQ0RwYSxFQUFRLE1BQVFvYSxFQUFPLFNBQ3ZCLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxJQUFLQyxRQUFNRCxFQUFPLEdBQUcsRUFBSSxPQUFPQSxFQUFPLEdBQUcsRUFBSSxHQUM5QyxNQUFPQyxRQUFNRCxFQUFPLEtBQUssRUFBSSxPQUFPQSxFQUFPLEtBQUssRUFBSSxFQUNoRSxDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsTUFBUSxTQUFjN2QsRUFBSSxJQUFNNmQsRUFBUSxLQUNoREEsRUFBUSxRQUFVLFNBQWM3ZCxFQUFJLE1BQVE2ZCxFQUFRLE9BQzdDN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxzQkFDaEIsT0FBQUEsRUFBUSxJQUFNdWMsRUFBTyxLQUFPLEdBQzVCdmMsRUFBUSxNQUFRdWMsRUFBTyxPQUFTLEdBQ3pCdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyxtQkFBb0IsQ0FDekIsTUFBTyxDQUFFLFVBQVcsSUFBSyxRQUFTLEdBQUcsQ0FDekMsQ0FDTyxNQUFNLFFBQVUsQ0FDbkIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLFlBQWMsS0FDdEIwWSxFQUFPLE9BQU8sQ0FBQyxFQUFFLE9BQU8xWSxFQUFRLFNBQVMsRUFFekNBLEVBQVEsVUFBWSxLQUNwQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsT0FBTyxFQUVyQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLG9CQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxVQUFZMGhCLGVBQWF0SCxFQUFPLE9BQVEsQ0FBQSxFQUNoRCxVQUNDLEdBQ0RwYSxFQUFRLFFBQVUwaEIsZUFBYXRILEVBQU8sT0FBUSxDQUFBLEVBQzlDLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxVQUFXQyxRQUFNRCxFQUFPLFNBQVMsRUFBSSxPQUFPQSxFQUFPLFNBQVMsRUFBSSxJQUNoRSxRQUFTQyxRQUFNRCxFQUFPLE9BQU8sRUFBSSxPQUFPQSxFQUFPLE9BQU8sRUFBSSxHQUN0RSxDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsWUFBYyxTQUFjN2QsRUFBSSxVQUFZNmQsRUFBUSxXQUM1REEsRUFBUSxVQUFZLFNBQWM3ZCxFQUFJLFFBQVU2ZCxFQUFRLFNBQ2pEN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxvQkFDaEIsT0FBQUEsRUFBUSxVQUFZdWMsRUFBTyxXQUFhLElBQ3hDdmMsRUFBUSxRQUFVdWMsRUFBTyxTQUFXLElBQzdCdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyxrQkFBbUIsQ0FDeEIsTUFBTyxDQUFFLEtBQU0sSUFBSSxXQUFjLElBQUssR0FBSSxPQUFRLENBQUEsRUFDdEQsQ0FDTyxNQUFNLE9BQVMsQ0FDbEIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQ3RDcGMsRUFBUSxLQUFLLFNBQVcsR0FDeEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0xWSxFQUFRLElBQUksRUFFcENBLEVBQVEsTUFBUSxJQUNoQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsR0FBRyxFQUV4QyxVQUFXbFMsS0FBS2tTLEVBQVEsT0FDcEJzbUIsUUFBTSxPQUFPeDRCLEVBQUc0cUIsRUFBTyxPQUFPLEVBQUUsRUFBRSxLQUFJLENBQUUsRUFBRSxTQUU5QyxPQUFPQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxtQkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsS0FBT29hLEVBQU8sUUFDdEIsVUFDQyxHQUNEcGEsRUFBUSxJQUFNb2EsRUFBTyxTQUNyQixVQUNDLEdBQ0RwYSxFQUFRLE9BQU8sS0FBS3NtQixRQUFNLE9BQU9sTSxFQUFRQSxFQUFPLE9BQVEsQ0FBQSxDQUFDLEVBQ3pELGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxLQUFNQyxRQUFNRCxFQUFPLElBQUksRUFDakJvRixrQkFBZ0JwRixFQUFPLElBQUksRUFDM0IsSUFBSSxXQUNWLElBQUtDLFFBQU1ELEVBQU8sR0FBRyxFQUFJLE9BQU9BLEVBQU8sR0FBRyxFQUFJLEdBQzlDLE9BQVEsTUFBTSxRQUFRQSxHQUFRLE1BQU0sRUFDOUJBLEVBQU8sT0FBTyxJQUFLLEdBQU0rSixRQUFNLFNBQVMsQ0FBQyxDQUFDLEVBQzFDLENBQUUsQ0FDcEIsQ0FDSyxFQUNELE9BQU90bUIsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxPQUFTLFNBQ1o3ZCxFQUFJLEtBQU95L0Isa0JBQWdCNWhCLEVBQVEsT0FBUyxPQUFZQSxFQUFRLEtBQU8sSUFBSSxVQUFZLEdBQzVGQSxFQUFRLE1BQVEsU0FBYzdkLEVBQUksSUFBTTZkLEVBQVEsS0FDNUNBLEVBQVEsT0FDUjdkLEVBQUksT0FBUzZkLEVBQVEsT0FBTyxJQUFLcGEsR0FBT0EsRUFBSTBnQyxRQUFNLE9BQU8xZ0MsQ0FBQyxFQUFJLE1BQVUsRUFHeEV6RCxFQUFJLE9BQVMsR0FFVkEsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxtQkFDaEIsT0FBQUEsRUFBUSxLQUFPdWMsRUFBTyxNQUFRLElBQUksV0FDbEN2YyxFQUFRLElBQU11YyxFQUFPLEtBQU8sR0FDNUJ2YyxFQUFRLE9BQVN1YyxFQUFPLFFBQVEsSUFBSzMyQixHQUFNMGdDLFFBQU0sWUFBWTFnQyxDQUFDLENBQUMsR0FBSyxDQUFBLEVBQzdEb2EsQ0FDVixDQUNMLEVBZ1JBLElBQUk2aEIsY0FBYyxJQUFNLENBQ3BCLEdBQUksT0FBT0EsYUFBZSxJQUN0QixPQUFPQSxhQUNYLEdBQUksT0FBTyxLQUFTLElBQ2hCLE9BQU8sS0FDWCxHQUFJLE9BQU8sT0FBVyxJQUNsQixPQUFPLE9BQ1gsR0FBSSxPQUFPLE9BQVcsSUFDbEIsT0FBTyxPQUNYLEtBQU0sZ0NBQ1YsS0FDQSxNQUFNQyxPQUFPRCxhQUFXLE9BQ2xCbE8sR0FBUWtPLGFBQVcsT0FBTyxLQUFLbE8sRUFBSyxRQUFRLEVBQUUsU0FBUyxRQUFRLEdBQ3JFLFNBQVNnTyxrQkFBZ0JoTyxFQUFLLENBQzFCLE1BQU1vTyxFQUFNRCxPQUFLbk8sQ0FBRyxFQUNkcU8sRUFBTSxJQUFJLFdBQVdELEVBQUksTUFBTSxFQUNyQyxRQUFTLEVBQUksRUFBRyxFQUFJQSxFQUFJLE9BQVEsRUFBRSxFQUM5QkMsRUFBSSxHQUFLRCxFQUFJLFdBQVcsQ0FBQyxFQUU3QixPQUFPQyxDQUNYLENBQ0EsTUFBTUMsT0FBT0osYUFBVyxPQUNsQkUsR0FBUUYsYUFBVyxPQUFPLEtBQUtFLEVBQUssUUFBUSxFQUFFLFNBQVMsUUFBUSxHQUNyRSxTQUFTSCxrQkFBZ0JJLEVBQUssQ0FDMUIsTUFBTUQsRUFBTSxDQUFBLEVBQ1osT0FBQUMsRUFBSSxRQUFTRSxHQUFTLENBQ2xCSCxFQUFJLEtBQUssT0FBTyxhQUFhRyxDQUFJLENBQUMsQ0FDMUMsQ0FBSyxFQUNNRCxPQUFLRixFQUFJLEtBQUssRUFBRSxDQUFDLENBQzVCLENBQ0EsU0FBU0wsZUFBYVMsRUFBTSxDQUN4QixPQUFPQSxFQUFLLFVBQ2hCLENBQ0lDLFFBQVEsS0FBQyxPQUFTQyxPQUNsQkQsUUFBUSxLQUFDLEtBQU9DLEtBQ2hCQyxRQUFBQSxhQUVKLFNBQVM5RixRQUFNNzZCLEVBQU8sQ0FDbEIsT0FBT0EsR0FBVSxJQUNyQixDQy91QkEsU0FBUywyQkFBNEIsQ0FDakMsTUFBTyxDQUFFLGdCQUFpQixFQUFHLE1BQU8sSUFBSSxVQUFZLENBQ3hELENBQ08sTUFBTSxnQkFBa0IsQ0FDM0IsT0FBT3FlLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxrQkFBb0IsR0FDNUIwWSxFQUFPLE9BQU8sQ0FBQyxFQUFFLE9BQU8xWSxFQUFRLGVBQWUsRUFFL0NBLEVBQVEsTUFBTSxTQUFXLEdBQ3pCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNMVksRUFBUSxLQUFLLEVBRWxDMFksQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsNEJBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLGdCQUFrQm9hLEVBQU8sU0FDakMsVUFDQyxHQUNEcGEsRUFBUSxNQUFRb2EsRUFBTyxRQUN2QixjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsZ0JBQWlCQyxRQUFNRCxFQUFPLGVBQWUsRUFDdkMsT0FBT0EsRUFBTyxlQUFlLEVBQzdCLEVBQ04sTUFBT0MsUUFBTUQsRUFBTyxLQUFLLEVBQ25Cb0Ysa0JBQWdCcEYsRUFBTyxLQUFLLEVBQzVCLElBQUksVUFDdEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLGtCQUFvQixTQUN2QjdkLEVBQUksZ0JBQWtCLEtBQUssTUFBTTZkLEVBQVEsZUFBZSxHQUM3REEsRUFBUSxRQUFVLFNBQ2I3ZCxFQUFJLE1BQVF5L0Isa0JBQWdCNWhCLEVBQVEsUUFBVSxPQUFZQSxFQUFRLE1BQVEsSUFBSSxVQUFZLEdBQ3hGN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSw0QkFDaEIsT0FBQUEsRUFBUSxnQkFBa0J1YyxFQUFPLGlCQUFtQixFQUNwRHZjLEVBQVEsTUFBUXVjLEVBQU8sT0FBUyxJQUFJLFdBQzdCdmMsQ0FDVixDQUNMLEVBQ0EsSUFBSTZoQixjQUFjLElBQU0sQ0FDcEIsR0FBSSxPQUFPQSxhQUFlLElBQ3RCLE9BQU9BLGFBQ1gsR0FBSSxPQUFPLEtBQVMsSUFDaEIsT0FBTyxLQUNYLEdBQUksT0FBTyxPQUFXLElBQ2xCLE9BQU8sT0FDWCxHQUFJLE9BQU8sT0FBVyxJQUNsQixPQUFPLE9BQ1gsS0FBTSxnQ0FDVixLQUNBLE1BQU1DLE9BQU9ELGFBQVcsT0FDbEJsTyxHQUFRa08sYUFBVyxPQUFPLEtBQUtsTyxFQUFLLFFBQVEsRUFBRSxTQUFTLFFBQVEsR0FDckUsU0FBU2dPLGtCQUFnQmhPLEVBQUssQ0FDMUIsTUFBTW9PLEVBQU1ELE9BQUtuTyxDQUFHLEVBQ2RxTyxFQUFNLElBQUksV0FBV0QsRUFBSSxNQUFNLEVBQ3JDLFFBQVMsRUFBSSxFQUFHLEVBQUlBLEVBQUksT0FBUSxFQUFFLEVBQzlCQyxFQUFJLEdBQUtELEVBQUksV0FBVyxDQUFDLEVBRTdCLE9BQU9DLENBQ1gsQ0FDQSxNQUFNQyxPQUFPSixhQUFXLE9BQ2xCRSxHQUFRRixhQUFXLE9BQU8sS0FBS0UsRUFBSyxRQUFRLEVBQUUsU0FBUyxRQUFRLEdBQ3JFLFNBQVNILGtCQUFnQkksRUFBSyxDQUMxQixNQUFNRCxFQUFNLENBQUEsRUFDWixPQUFBQyxFQUFJLFFBQVNFLEdBQVMsQ0FDbEJILEVBQUksS0FBSyxPQUFPLGFBQWFHLENBQUksQ0FBQyxDQUMxQyxDQUFLLEVBQ01ELE9BQUtGLEVBQUksS0FBSyxFQUFFLENBQUMsQ0FDNUIsQ0FDQSxTQUFTdkYsUUFBTTc2QixFQUFPLENBQ2xCLE9BQU9BLEdBQVUsSUFDckIsQ0N4SU8sSUFBSSxVQUNWLFNBQVU0a0MsRUFBVSxDQUtqQkEsRUFBU0EsRUFBUyxzQkFBMkIsR0FBSyx3QkFLbERBLEVBQVNBLEVBQVMsaUJBQXNCLEdBQUssbUJBTTdDQSxFQUFTQSxFQUFTLGtCQUF1QixHQUFLLG9CQUs5Q0EsRUFBU0EsRUFBUyw0QkFBaUMsS0FBTyw4QkFDMURBLEVBQVNBLEVBQVMsYUFBa0IsSUFBTSxjQUM5QyxHQUFHLFdBQWEsU0FBVyxDQUFFLEVBQUMsRUFDdkIsU0FBUyxpQkFBaUJoSyxFQUFRLENBQ3JDLE9BQVFBLE9BQ0MsT0FDQSx3QkFDRCxPQUFPLFNBQVMsMEJBQ2YsT0FDQSxtQkFDRCxPQUFPLFNBQVMscUJBQ2YsT0FDQSxvQkFDRCxPQUFPLFNBQVMsc0JBQ2YsU0FDQSw4QkFDRCxPQUFPLFNBQVMsZ0NBQ2YsT0FDQSx1QkFFRCxPQUFPLFNBQVMsYUFFNUIsQ0FDTyxTQUFTLGVBQWVBLEVBQVEsQ0FDbkMsT0FBUUEsUUFDQyxTQUFTLHNCQUNWLE1BQU8sNkJBQ04sU0FBUyxpQkFDVixNQUFPLHdCQUNOLFNBQVMsa0JBQ1YsTUFBTyx5QkFDTixTQUFTLDRCQUNWLE1BQU8sbUNBQ04sU0FBUyxxQkFFVixNQUFPLGVBRW5CLENBaVVBLElBQUlzRixjQUFjLElBQU0sQ0FDcEIsR0FBSSxPQUFPQSxhQUFlLElBQ3RCLE9BQU9BLGFBQ1gsR0FBSSxPQUFPLEtBQVMsSUFDaEIsT0FBTyxLQUNYLEdBQUksT0FBTyxPQUFXLElBQ2xCLE9BQU8sT0FDWCxHQUFJLE9BQU8sT0FBVyxJQUNsQixPQUFPLE9BQ1gsS0FBTSxnQ0FDVixLQUNhQSxhQUFXLEtBVVhBLGFBQVcsS0FZcEJPLFFBQVEsS0FBQyxPQUFTQyxPQUNsQkQsUUFBUSxLQUFDLEtBQU9DLEtBQ2hCQyxRQUFBQSxhQzlaSixTQUFTLGNBQWUsQ0FDcEIsTUFBTyxDQUFFLEtBQU0sT0FBVyxTQUFVLE9BQVcsV0FBWSxDQUFBLEVBQy9ELENBQ08sTUFBTSxHQUFLLENBQ2QsT0FBT3RpQixFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDdENwYyxFQUFRLE9BQVMsUUFDakIsT0FBTyxPQUFPQSxFQUFRLEtBQU0wWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRTVEMVksRUFBUSxXQUFhLFFBQ3JCLFNBQVMsT0FBT0EsRUFBUSxTQUFVMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUV0RSxVQUFXNXFCLEtBQUtrUyxFQUFRLFdBQ3BCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNNXFCLENBQUMsRUFFN0IsT0FBTzRxQixDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxlQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxLQUFPLE9BQU8sT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQ3BELFVBQ0MsR0FDRHBhLEVBQVEsU0FBVyxTQUFTLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUMxRCxVQUNDLEdBQ0RwYSxFQUFRLFdBQVcsS0FBS29hLEVBQU8sTUFBTyxDQUFBLEVBQ3RDLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxLQUFNQyxRQUFNRCxFQUFPLElBQUksRUFBSSxPQUFPLFNBQVNBLEVBQU8sSUFBSSxFQUFJLE9BQzFELFNBQVVDLFFBQU1ELEVBQU8sUUFBUSxFQUN6QixTQUFTLFNBQVNBLEVBQU8sUUFBUSxFQUNqQyxPQUNOLFdBQVksTUFBTSxRQUFRQSxHQUFRLFVBQVUsRUFDdENBLEVBQU8sV0FBVyxJQUFLLEdBQU1vRixrQkFBZ0IsQ0FBQyxDQUFDLEVBQy9DLENBQUUsQ0FDcEIsQ0FDSyxFQUNELE9BQU8zaEIsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxPQUFTLFNBQ1o3ZCxFQUFJLEtBQU82ZCxFQUFRLEtBQU8sT0FBTyxPQUFPQSxFQUFRLElBQUksRUFBSSxRQUM3REEsRUFBUSxXQUFhLFNBQ2hCN2QsRUFBSSxTQUFXNmQsRUFBUSxTQUNsQixTQUFTLE9BQU9BLEVBQVEsUUFBUSxFQUNoQyxRQUNOQSxFQUFRLFdBQ1I3ZCxFQUFJLFdBQWE2ZCxFQUFRLFdBQVcsSUFBS3BhLEdBQU1nOEIsa0JBQWdCaDhCLElBQU0sT0FBWUEsRUFBSSxJQUFJLFVBQVksQ0FBQyxFQUd0R3pELEVBQUksV0FBYSxHQUVkQSxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLGVBQ2hCLE9BQUFBLEVBQVEsS0FDSnVjLEVBQU8sT0FBUyxRQUFhQSxFQUFPLE9BQVMsS0FDdkMsT0FBTyxZQUFZQSxFQUFPLElBQUksRUFDOUIsT0FDVnZjLEVBQVEsU0FDSnVjLEVBQU8sV0FBYSxRQUFhQSxFQUFPLFdBQWEsS0FDL0MsU0FBUyxZQUFZQSxFQUFPLFFBQVEsRUFDcEMsT0FDVnZjLEVBQVEsV0FBYXVjLEVBQU8sWUFBWSxJQUFLMzJCLEdBQU1BLENBQUMsR0FBSyxHQUNsRG9hLENBQ1YsQ0FDTCxFQUNBLFNBQVMsaUJBQWtCLENBQ3ZCLE1BQU8sQ0FDSCxVQUFXLElBQUksV0FDZixjQUFlLElBQUksV0FDbkIsV0FBWSxDQUFFLENBQ3RCLENBQ0EsQ0FDTyxNQUFNLE1BQVEsQ0FDakIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQ3RDcGMsRUFBUSxVQUFVLFNBQVcsR0FDN0IwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0xWSxFQUFRLFNBQVMsRUFFekNBLEVBQVEsY0FBYyxTQUFXLEdBQ2pDMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNMVksRUFBUSxhQUFhLEVBRWpELFVBQVdsUyxLQUFLa1MsRUFBUSxXQUNwQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTTVxQixDQUFDLEVBRTdCLE9BQU80cUIsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsa0JBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLFVBQVlvYSxFQUFPLFFBQzNCLFVBQ0MsR0FDRHBhLEVBQVEsY0FBZ0JvYSxFQUFPLFFBQy9CLFVBQ0MsR0FDRHBhLEVBQVEsV0FBVyxLQUFLb2EsRUFBTyxNQUFPLENBQUEsRUFDdEMsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILFVBQVdDLFFBQU1ELEVBQU8sU0FBUyxFQUMzQm9GLGtCQUFnQnBGLEVBQU8sU0FBUyxFQUNoQyxJQUFJLFdBQ1YsY0FBZUMsUUFBTUQsRUFBTyxhQUFhLEVBQ25Db0Ysa0JBQWdCcEYsRUFBTyxhQUFhLEVBQ3BDLElBQUksV0FDVixXQUFZLE1BQU0sUUFBUUEsR0FBUSxVQUFVLEVBQ3RDQSxFQUFPLFdBQVcsSUFBSyxHQUFNb0Ysa0JBQWdCLENBQUMsQ0FBQyxFQUMvQyxDQUFFLENBQ3BCLENBQ0ssRUFDRCxPQUFPM2hCLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsWUFBYyxTQUNqQjdkLEVBQUksVUFBWXkvQixrQkFBZ0I1aEIsRUFBUSxZQUFjLE9BQVlBLEVBQVEsVUFBWSxJQUFJLFVBQVksR0FDM0dBLEVBQVEsZ0JBQWtCLFNBQ3JCN2QsRUFBSSxjQUFnQnkvQixrQkFBZ0I1aEIsRUFBUSxnQkFBa0IsT0FDekRBLEVBQVEsY0FDUixJQUFJLFVBQVksR0FDdEJBLEVBQVEsV0FDUjdkLEVBQUksV0FBYTZkLEVBQVEsV0FBVyxJQUFLcGEsR0FBTWc4QixrQkFBZ0JoOEIsSUFBTSxPQUFZQSxFQUFJLElBQUksVUFBWSxDQUFDLEVBR3RHekQsRUFBSSxXQUFhLEdBRWRBLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsa0JBQ2hCLE9BQUFBLEVBQVEsVUFBWXVjLEVBQU8sV0FBYSxJQUFJLFdBQzVDdmMsRUFBUSxjQUFnQnVjLEVBQU8sZUFBaUIsSUFBSSxXQUNwRHZjLEVBQVEsV0FBYXVjLEVBQU8sWUFBWSxJQUFLMzJCLEdBQU1BLENBQUMsR0FBSyxHQUNsRG9hLENBQ1YsQ0FDTCxFQUNBLFNBQVMsbUJBQW9CLENBQ3pCLE1BQU8sQ0FDSCxVQUFXLElBQUksV0FDZixjQUFlLElBQUksV0FDbkIsUUFBUyxHQUNULGNBQWUsR0FDdkIsQ0FDQSxDQUNPLE1BQU0sUUFBVSxDQUNuQixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsVUFBVSxTQUFXLEdBQzdCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNMVksRUFBUSxTQUFTLEVBRXpDQSxFQUFRLGNBQWMsU0FBVyxHQUNqQzBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTTFZLEVBQVEsYUFBYSxFQUU3Q0EsRUFBUSxVQUFZLElBQ3BCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxPQUFPLEVBRXhDQSxFQUFRLGdCQUFrQixLQUMxQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsYUFBYSxFQUUzQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLG9CQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxVQUFZb2EsRUFBTyxRQUMzQixVQUNDLEdBQ0RwYSxFQUFRLGNBQWdCb2EsRUFBTyxRQUMvQixVQUNDLEdBQ0RwYSxFQUFRLFFBQVVvYSxFQUFPLFNBQ3pCLFVBQ0MsR0FDRHBhLEVBQVEsY0FBZ0IsYUFBYW9hLEVBQU8sT0FBUSxDQUFBLEVBQ3BELGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxVQUFXQyxRQUFNRCxFQUFPLFNBQVMsRUFDM0JvRixrQkFBZ0JwRixFQUFPLFNBQVMsRUFDaEMsSUFBSSxXQUNWLGNBQWVDLFFBQU1ELEVBQU8sYUFBYSxFQUNuQ29GLGtCQUFnQnBGLEVBQU8sYUFBYSxFQUNwQyxJQUFJLFdBQ1YsUUFBU0MsUUFBTUQsRUFBTyxPQUFPLEVBQUksT0FBT0EsRUFBTyxPQUFPLEVBQUksR0FDMUQsY0FBZUMsUUFBTUQsRUFBTyxhQUFhLEVBQ25DLE9BQU9BLEVBQU8sYUFBYSxFQUMzQixHQUNsQixDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsWUFBYyxTQUNqQjdkLEVBQUksVUFBWXkvQixrQkFBZ0I1aEIsRUFBUSxZQUFjLE9BQVlBLEVBQVEsVUFBWSxJQUFJLFVBQVksR0FDM0dBLEVBQVEsZ0JBQWtCLFNBQ3JCN2QsRUFBSSxjQUFnQnkvQixrQkFBZ0I1aEIsRUFBUSxnQkFBa0IsT0FDekRBLEVBQVEsY0FDUixJQUFJLFVBQVksR0FDMUJBLEVBQVEsVUFBWSxTQUFjN2QsRUFBSSxRQUFVNmQsRUFBUSxTQUN4REEsRUFBUSxnQkFBa0IsU0FDckI3ZCxFQUFJLGNBQWdCNmQsRUFBUSxlQUMxQjdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsb0JBQ2hCLE9BQUFBLEVBQVEsVUFBWXVjLEVBQU8sV0FBYSxJQUFJLFdBQzVDdmMsRUFBUSxjQUFnQnVjLEVBQU8sZUFBaUIsSUFBSSxXQUNwRHZjLEVBQVEsUUFBVXVjLEVBQU8sU0FBVyxHQUNwQ3ZjLEVBQVEsY0FBZ0J1YyxFQUFPLGVBQWlCLElBQ3pDdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyxrQkFBbUIsQ0FDeEIsTUFBTyxDQUNILFNBQVUsQ0FBRSxFQUNaLEtBQU0sR0FDTixjQUFlLElBQ2YsaUJBQWtCLENBQUUsRUFDcEIsNEJBQTZCLENBQUUsQ0FDdkMsQ0FDQSxDQUNPLE1BQU0sT0FBUyxDQUNsQixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsVUFBV3R1QixLQUFLa1MsRUFBUSxTQUNwQixJQUFJLE9BQU9sUyxFQUFHNHFCLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSSxDQUFFLEVBQUUsU0FFeEMxWSxFQUFRLE9BQVMsSUFDakIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLElBQUksRUFFckNBLEVBQVEsZ0JBQWtCLEtBQzFCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxhQUFhLEVBRWxELFVBQVdsUyxLQUFLa1MsRUFBUSxpQkFDcEIsSUFBSSxPQUFPbFMsRUFBRzRxQixFQUFPLE9BQU8sSUFBSSxFQUFFLEtBQUksQ0FBRSxFQUFFLFNBRTlDLFVBQVc1cUIsS0FBS2tTLEVBQVEsNEJBQ3BCLElBQUksT0FBT2xTLEVBQUc0cUIsRUFBTyxPQUFPLEtBQUssRUFBRSxLQUFJLENBQUUsRUFBRSxTQUUvQyxPQUFPQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxtQkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsU0FBUyxLQUFLLElBQUksT0FBT29hLEVBQVFBLEVBQU8sT0FBUSxDQUFBLENBQUMsRUFDekQsVUFDQyxHQUNEcGEsRUFBUSxLQUFPb2EsRUFBTyxTQUN0QixVQUNDLEdBQ0RwYSxFQUFRLGNBQWdCLGFBQWFvYSxFQUFPLE9BQVEsQ0FBQSxFQUNwRCxVQUNDLE1BQ0RwYSxFQUFRLGlCQUFpQixLQUFLLElBQUksT0FBT29hLEVBQVFBLEVBQU8sT0FBUSxDQUFBLENBQUMsRUFDakUsVUFDQyxNQUNEcGEsRUFBUSw0QkFBNEIsS0FBSyxJQUFJLE9BQU9vYSxFQUFRQSxFQUFPLE9BQVEsQ0FBQSxDQUFDLEVBQzVFLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxTQUFVLE1BQU0sUUFBUUEsR0FBUSxRQUFRLEVBQ2xDQSxFQUFPLFNBQVMsSUFBSyxHQUFNLElBQUksU0FBUyxDQUFDLENBQUMsRUFDMUMsQ0FBRSxFQUNSLEtBQU1DLFFBQU1ELEVBQU8sSUFBSSxFQUFJLE9BQU9BLEVBQU8sSUFBSSxFQUFJLEdBQ2pELGNBQWVDLFFBQU1ELEVBQU8sYUFBYSxFQUNuQyxPQUFPQSxFQUFPLGFBQWEsRUFDM0IsSUFDTixpQkFBa0IsTUFBTSxRQUFRQSxHQUFRLGdCQUFnQixFQUNsREEsRUFBTyxpQkFBaUIsSUFBSyxHQUFNLElBQUksU0FBUyxDQUFDLENBQUMsRUFDbEQsQ0FBRSxFQUNSLDRCQUE2QixNQUFNLFFBQVFBLEdBQVEsMkJBQTJCLEVBQ3hFQSxFQUFPLDRCQUE0QixJQUFLLEdBQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxFQUM3RCxDQUFFLENBQ3BCLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFJNmQsRUFBUSxTQUNSN2QsRUFBSSxTQUFXNmQsRUFBUSxTQUFTLElBQUtwYSxHQUFNQSxFQUFJLElBQUksT0FBT0EsQ0FBQyxFQUFJLE1BQVMsRUFHeEV6RCxFQUFJLFNBQVcsR0FFbkI2ZCxFQUFRLE9BQVMsU0FBYzdkLEVBQUksS0FBTzZkLEVBQVEsTUFDbERBLEVBQVEsZ0JBQWtCLFNBQ3JCN2QsRUFBSSxjQUFnQjZkLEVBQVEsZUFDN0JBLEVBQVEsaUJBQ1I3ZCxFQUFJLGlCQUFtQjZkLEVBQVEsaUJBQWlCLElBQUtwYSxHQUFNQSxFQUFJLElBQUksT0FBT0EsQ0FBQyxFQUFJLE1BQVMsRUFHeEZ6RCxFQUFJLGlCQUFtQixHQUV2QjZkLEVBQVEsNEJBQ1I3ZCxFQUFJLDRCQUE4QjZkLEVBQVEsNEJBQTRCLElBQUtwYSxHQUFPQSxFQUFJLElBQUksT0FBT0EsQ0FBQyxFQUFJLE1BQVUsRUFHaEh6RCxFQUFJLDRCQUE4QixHQUUvQkEsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxtQkFDaEIsT0FBQUEsRUFBUSxTQUFXdWMsRUFBTyxVQUFVLElBQUszMkIsR0FBTSxJQUFJLFlBQVlBLENBQUMsQ0FBQyxHQUFLLENBQUEsRUFDdEVvYSxFQUFRLEtBQU91YyxFQUFPLE1BQVEsR0FDOUJ2YyxFQUFRLGNBQWdCdWMsRUFBTyxlQUFpQixJQUNoRHZjLEVBQVEsaUJBQ0p1YyxFQUFPLGtCQUFrQixJQUFLMzJCLEdBQU0sSUFBSSxZQUFZQSxDQUFDLENBQUMsR0FBSyxHQUMvRG9hLEVBQVEsNEJBQ0p1YyxFQUFPLDZCQUE2QixJQUFLMzJCLEdBQU0sSUFBSSxZQUFZQSxDQUFDLENBQUMsR0FBSyxHQUNuRW9hLENBQ1YsQ0FDTCxFQUNBLFNBQVMsb0JBQXFCLENBQzFCLE1BQU8sQ0FBRSxZQUFhLENBQUEsRUFBSSxJQUFLLE1BQVMsQ0FDNUMsQ0FDTyxNQUFNLFNBQVcsQ0FDcEIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLFVBQVd0dUIsS0FBS2tTLEVBQVEsWUFDcEIsV0FBVyxPQUFPbFMsRUFBRzRxQixFQUFPLE9BQU8sRUFBRSxFQUFFLEtBQUksQ0FBRSxFQUFFLFNBRW5ELE9BQUkxWSxFQUFRLE1BQVEsUUFDaEIsSUFBSSxPQUFPQSxFQUFRLElBQUswWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRXJEQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxxQkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsWUFBWSxLQUFLLFdBQVcsT0FBT29hLEVBQVFBLEVBQU8sT0FBUSxDQUFBLENBQUMsRUFDbkUsVUFDQyxHQUNEcGEsRUFBUSxJQUFNLElBQUksT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQ2hELGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxZQUFhLE1BQU0sUUFBUUEsR0FBUSxXQUFXLEVBQ3hDQSxFQUFPLFlBQVksSUFBSyxHQUFNLFdBQVcsU0FBUyxDQUFDLENBQUMsRUFDcEQsQ0FBRSxFQUNSLElBQUtDLFFBQU1ELEVBQU8sR0FBRyxFQUFJLElBQUksU0FBU0EsRUFBTyxHQUFHLEVBQUksTUFDaEUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUk2ZCxFQUFRLFlBQ1I3ZCxFQUFJLFlBQWM2ZCxFQUFRLFlBQVksSUFBS3BhLEdBQU1BLEVBQUksV0FBVyxPQUFPQSxDQUFDLEVBQUksTUFBUyxFQUdyRnpELEVBQUksWUFBYyxHQUV0QjZkLEVBQVEsTUFBUSxTQUNYN2QsRUFBSSxJQUFNNmQsRUFBUSxJQUFNLElBQUksT0FBT0EsRUFBUSxHQUFHLEVBQUksUUFDaEQ3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLHFCQUNoQixPQUFBQSxFQUFRLFlBQ0p1YyxFQUFPLGFBQWEsSUFBSzMyQixHQUFNLFdBQVcsWUFBWUEsQ0FBQyxDQUFDLEdBQUssR0FDakVvYSxFQUFRLElBQ0p1YyxFQUFPLE1BQVEsUUFBYUEsRUFBTyxNQUFRLEtBQ3JDLElBQUksWUFBWUEsRUFBTyxHQUFHLEVBQzFCLE9BQ0h2YyxDQUNWLENBQ0wsRUFDQSxTQUFTLHNCQUF1QixDQUM1QixNQUFPLENBQUUsVUFBVyxPQUFXLFNBQVUsT0FBVyxTQUFVLElBQ2xFLENBQ08sTUFBTSxXQUFhLENBQ3RCLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxZQUFjLFFBQ3RCLElBQUksT0FBT0EsRUFBUSxVQUFXMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUU5RDFZLEVBQVEsV0FBYSxRQUNyQixTQUFTLE9BQU9BLEVBQVEsU0FBVTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFbEUxWSxFQUFRLFdBQWEsS0FDckIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLFFBQVEsRUFFdEMwWSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSx1QkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsVUFBWSxJQUFJLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUN0RCxVQUNDLEdBQ0RwYSxFQUFRLFNBQVcsU0FBUyxPQUFPb2EsRUFBUUEsRUFBTyxPQUFNLENBQUUsRUFDMUQsVUFDQyxHQUNEcGEsRUFBUSxTQUFXLGFBQWFvYSxFQUFPLE9BQVEsQ0FBQSxFQUMvQyxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsVUFBV0MsUUFBTUQsRUFBTyxTQUFTLEVBQzNCLElBQUksU0FBU0EsRUFBTyxTQUFTLEVBQzdCLE9BQ04sU0FBVUMsUUFBTUQsRUFBTyxRQUFRLEVBQ3pCLFNBQVMsU0FBU0EsRUFBTyxRQUFRLEVBQ2pDLE9BQ04sU0FBVUMsUUFBTUQsRUFBTyxRQUFRLEVBQUksT0FBT0EsRUFBTyxRQUFRLEVBQUksR0FDekUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFlBQWMsU0FDakI3ZCxFQUFJLFVBQVk2ZCxFQUFRLFVBQ25CLElBQUksT0FBT0EsRUFBUSxTQUFTLEVBQzVCLFFBQ1ZBLEVBQVEsV0FBYSxTQUNoQjdkLEVBQUksU0FBVzZkLEVBQVEsU0FDbEIsU0FBUyxPQUFPQSxFQUFRLFFBQVEsRUFDaEMsUUFDVkEsRUFBUSxXQUFhLFNBQWM3ZCxFQUFJLFNBQVc2ZCxFQUFRLFVBQ25EN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSx1QkFDaEIsT0FBQUEsRUFBUSxVQUNKdWMsRUFBTyxZQUFjLFFBQWFBLEVBQU8sWUFBYyxLQUNqRCxJQUFJLFlBQVlBLEVBQU8sU0FBUyxFQUNoQyxPQUNWdmMsRUFBUSxTQUNKdWMsRUFBTyxXQUFhLFFBQWFBLEVBQU8sV0FBYSxLQUMvQyxTQUFTLFlBQVlBLEVBQU8sUUFBUSxFQUNwQyxPQUNWdmMsRUFBUSxTQUFXdWMsRUFBTyxVQUFZLElBQy9CdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyxvQkFBcUIsQ0FDMUIsTUFBTyxDQUFFLE9BQVEsT0FBVyxNQUFPLE1BQVMsQ0FDaEQsQ0FDTyxNQUFNLFNBQVcsQ0FDcEIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLFNBQVcsUUFDbkIsZ0JBQWdCLE9BQU9BLEVBQVEsT0FBUTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFdkUxWSxFQUFRLFFBQVUsUUFDbEIsZUFBZSxPQUFPQSxFQUFRLE1BQU8wWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRWxFQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxxQkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsT0FBUyxnQkFBZ0IsT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQy9ELFVBQ0MsR0FDRHBhLEVBQVEsTUFBUSxlQUFlLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUM3RCxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsT0FBUUMsUUFBTUQsRUFBTyxNQUFNLEVBQ3JCLGdCQUFnQixTQUFTQSxFQUFPLE1BQU0sRUFDdEMsT0FDTixNQUFPQyxRQUFNRCxFQUFPLEtBQUssRUFDbkIsZUFBZSxTQUFTQSxFQUFPLEtBQUssRUFDcEMsTUFDbEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFNBQVcsU0FDZDdkLEVBQUksT0FBUzZkLEVBQVEsT0FDaEIsZ0JBQWdCLE9BQU9BLEVBQVEsTUFBTSxFQUNyQyxRQUNWQSxFQUFRLFFBQVUsU0FDYjdkLEVBQUksTUFBUTZkLEVBQVEsTUFDZixlQUFlLE9BQU9BLEVBQVEsS0FBSyxFQUNuQyxRQUNIN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxxQkFDaEIsT0FBQUEsRUFBUSxPQUNKdWMsRUFBTyxTQUFXLFFBQWFBLEVBQU8sU0FBVyxLQUMzQyxnQkFBZ0IsWUFBWUEsRUFBTyxNQUFNLEVBQ3pDLE9BQ1Z2YyxFQUFRLE1BQ0p1YyxFQUFPLFFBQVUsUUFBYUEsRUFBTyxRQUFVLEtBQ3pDLGVBQWUsWUFBWUEsRUFBTyxLQUFLLEVBQ3ZDLE9BQ0h2YyxDQUNWLENBQ0wsRUFDQSxTQUFTLDJCQUE0QixDQUNqQyxNQUFPLENBQUUsS0FBTSxFQUNuQixDQUNPLE1BQU0sZ0JBQWtCLENBQzNCLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxPQUFTLEdBQ2pCMFksRUFBTyxPQUFPLENBQUMsRUFBRSxNQUFNMVksRUFBUSxJQUFJLEVBRWhDMFksQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsNEJBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLEtBQU9vYSxFQUFPLFFBQ3RCLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxLQUFNQyxRQUFNRCxFQUFPLElBQUksRUFBSSxpQkFBaUJBLEVBQU8sSUFBSSxFQUFJLENBQ3ZFLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxPQUFTLFNBQWM3ZCxFQUFJLEtBQU8sZUFBZTZkLEVBQVEsSUFBSSxHQUM5RDdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsNEJBQ2hCLE9BQUFBLEVBQVEsS0FBT3VjLEVBQU8sTUFBUSxFQUN2QnZjLENBQ1YsQ0FDTCxFQUNBLFNBQVMsMEJBQTJCLENBQ2hDLE1BQU8sQ0FBRSxTQUFVLE9BQVcsVUFBVyxDQUFFLENBQUEsQ0FDL0MsQ0FDTyxNQUFNLGVBQWlCLENBQzFCLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUN0Q3BjLEVBQVEsV0FBYSxRQUNyQixnQkFBZ0IsT0FBT0EsRUFBUSxTQUFVMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUU3RSxVQUFXNXFCLEtBQUtrUyxFQUFRLFVBQ3BCLFNBQVMsT0FBT2xTLEVBQUc0cUIsRUFBTyxPQUFPLEVBQUUsRUFBRSxLQUFJLENBQUUsRUFBRSxTQUVqRCxPQUFPQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSwyQkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsU0FBVyxnQkFBZ0IsT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQ2pFLFVBQ0MsR0FDRHBhLEVBQVEsVUFBVSxLQUFLLFNBQVMsT0FBT29hLEVBQVFBLEVBQU8sT0FBUSxDQUFBLENBQUMsRUFDL0QsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILFNBQVVDLFFBQU1ELEVBQU8sUUFBUSxFQUN6QixnQkFBZ0IsU0FBU0EsRUFBTyxRQUFRLEVBQ3hDLE9BQ04sVUFBVyxNQUFNLFFBQVFBLEdBQVEsU0FBUyxFQUNwQ0EsRUFBTyxVQUFVLElBQUssR0FBTSxTQUFTLFNBQVMsQ0FBQyxDQUFDLEVBQ2hELENBQUUsQ0FDcEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFdBQWEsU0FDaEI3ZCxFQUFJLFNBQVc2ZCxFQUFRLFNBQ2xCLGdCQUFnQixPQUFPQSxFQUFRLFFBQVEsRUFDdkMsUUFDTkEsRUFBUSxVQUNSN2QsRUFBSSxVQUFZNmQsRUFBUSxVQUFVLElBQUtwYSxHQUFNQSxFQUFJLFNBQVMsT0FBT0EsQ0FBQyxFQUFJLE1BQVMsRUFHL0V6RCxFQUFJLFVBQVksR0FFYkEsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSwyQkFDaEIsT0FBQUEsRUFBUSxTQUNKdWMsRUFBTyxXQUFhLFFBQWFBLEVBQU8sV0FBYSxLQUMvQyxnQkFBZ0IsWUFBWUEsRUFBTyxRQUFRLEVBQzNDLE9BQ1Z2YyxFQUFRLFVBQ0p1YyxFQUFPLFdBQVcsSUFBSzMyQixHQUFNLFNBQVMsWUFBWUEsQ0FBQyxDQUFDLEdBQUssR0FDdERvYSxDQUNWLENBQ0wsRUFDQSxTQUFTLGVBQWdCLENBQ3JCLE1BQU8sQ0FBRSxPQUFRLENBQUUsRUFBRSxTQUFVLElBQUssTUFBTyxHQUFJLFFBQVMsR0FDNUQsQ0FDTyxNQUFNLElBQU0sQ0FDZixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsVUFBV3R1QixLQUFLa1MsRUFBUSxPQUNwQixLQUFLLE9BQU9sUyxFQUFHNHFCLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSSxDQUFFLEVBQUUsU0FFN0MsT0FBSTFZLEVBQVEsV0FBYSxLQUNyQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsUUFBUSxFQUV6Q0EsRUFBUSxRQUFVLElBQ2xCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxLQUFLLEVBRXRDQSxFQUFRLFVBQVksSUFDcEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLE9BQU8sRUFFckMwWSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxnQkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsT0FBTyxLQUFLLEtBQUssT0FBT29hLEVBQVFBLEVBQU8sT0FBUSxDQUFBLENBQUMsRUFDeEQsVUFDQyxHQUNEcGEsRUFBUSxTQUFXLGFBQWFvYSxFQUFPLE9BQVEsQ0FBQSxFQUMvQyxVQUNDLEdBQ0RwYSxFQUFRLE1BQVFvYSxFQUFPLFNBQ3ZCLFVBQ0MsR0FDRHBhLEVBQVEsUUFBVW9hLEVBQU8sU0FDekIsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILE9BQVEsTUFBTSxRQUFRQSxHQUFRLE1BQU0sRUFDOUJBLEVBQU8sT0FBTyxJQUFLLEdBQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxFQUN6QyxDQUFFLEVBQ1IsU0FBVUMsUUFBTUQsRUFBTyxRQUFRLEVBQUksT0FBT0EsRUFBTyxRQUFRLEVBQUksSUFDN0QsTUFBT0MsUUFBTUQsRUFBTyxLQUFLLEVBQUksT0FBT0EsRUFBTyxLQUFLLEVBQUksR0FDcEQsUUFBU0MsUUFBTUQsRUFBTyxPQUFPLEVBQUksT0FBT0EsRUFBTyxPQUFPLEVBQUksRUFDdEUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUk2ZCxFQUFRLE9BQ1I3ZCxFQUFJLE9BQVM2ZCxFQUFRLE9BQU8sSUFBS3BhLEdBQU9BLEVBQUksS0FBSyxPQUFPQSxDQUFDLEVBQUksTUFBVSxFQUd2RXpELEVBQUksT0FBUyxHQUVqQjZkLEVBQVEsV0FBYSxTQUFjN2QsRUFBSSxTQUFXNmQsRUFBUSxVQUMxREEsRUFBUSxRQUFVLFNBQWM3ZCxFQUFJLE1BQVE2ZCxFQUFRLE9BQ3BEQSxFQUFRLFVBQVksU0FBYzdkLEVBQUksUUFBVTZkLEVBQVEsU0FDakQ3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLGdCQUNoQixPQUFBQSxFQUFRLE9BQVN1YyxFQUFPLFFBQVEsSUFBSzMyQixHQUFNLEtBQUssWUFBWUEsQ0FBQyxDQUFDLEdBQUssQ0FBQSxFQUNuRW9hLEVBQVEsU0FBV3VjLEVBQU8sVUFBWSxJQUN0Q3ZjLEVBQVEsTUFBUXVjLEVBQU8sT0FBUyxHQUNoQ3ZjLEVBQVEsUUFBVXVjLEVBQU8sU0FBVyxHQUM3QnZjLENBQ1YsQ0FDTCxFQUNBLElBQUk2aEIsY0FBYyxJQUFNLENBQ3BCLEdBQUksT0FBT0EsYUFBZSxJQUN0QixPQUFPQSxhQUNYLEdBQUksT0FBTyxLQUFTLElBQ2hCLE9BQU8sS0FDWCxHQUFJLE9BQU8sT0FBVyxJQUNsQixPQUFPLE9BQ1gsR0FBSSxPQUFPLE9BQVcsSUFDbEIsT0FBTyxPQUNYLEtBQU0sZ0NBQ1YsS0FDQSxNQUFNQyxPQUFPRCxhQUFXLE9BQ2xCbE8sR0FBUWtPLGFBQVcsT0FBTyxLQUFLbE8sRUFBSyxRQUFRLEVBQUUsU0FBUyxRQUFRLEdBQ3JFLFNBQVNnTyxrQkFBZ0JoTyxFQUFLLENBQzFCLE1BQU1vTyxFQUFNRCxPQUFLbk8sQ0FBRyxFQUNkcU8sRUFBTSxJQUFJLFdBQVdELEVBQUksTUFBTSxFQUNyQyxRQUFTLEVBQUksRUFBRyxFQUFJQSxFQUFJLE9BQVEsRUFBRSxFQUM5QkMsRUFBSSxHQUFLRCxFQUFJLFdBQVcsQ0FBQyxFQUU3QixPQUFPQyxDQUNYLENBQ0EsTUFBTUMsT0FBT0osYUFBVyxPQUNsQkUsR0FBUUYsYUFBVyxPQUFPLEtBQUtFLEVBQUssUUFBUSxFQUFFLFNBQVMsUUFBUSxHQUNyRSxTQUFTSCxrQkFBZ0JJLEVBQUssQ0FDMUIsTUFBTUQsRUFBTSxDQUFBLEVBQ1osT0FBQUMsRUFBSSxRQUFTRSxHQUFTLENBQ2xCSCxFQUFJLEtBQUssT0FBTyxhQUFhRyxDQUFJLENBQUMsQ0FDMUMsQ0FBSyxFQUNNRCxPQUFLRixFQUFJLEtBQUssRUFBRSxDQUFDLENBQzVCLENBQ0EsU0FBUyxhQUFhSSxFQUFNLENBQ3hCLE9BQU9BLEVBQUssVUFDaEIsQ0FDSUMsUUFBUSxLQUFDLE9BQVNDLE9BQ2xCRCxRQUFRLEtBQUMsS0FBT0MsS0FDaEJDLFFBQUFBLGFBRUosU0FBUzlGLFFBQU03NkIsRUFBTyxDQUNsQixPQUFPQSxHQUFVLElBQ3JCLENDeHhCTyxJQUFJLFNBQ1YsU0FBVTZrQyxFQUFTLENBRWhCQSxFQUFRQSxFQUFRLHFCQUEwQixHQUFLLHVCQUUvQ0EsRUFBUUEsRUFBUSxhQUFrQixHQUFLLGVBRXZDQSxFQUFRQSxFQUFRLGNBQW1CLEdBQUssZ0JBQ3hDQSxFQUFRQSxFQUFRLGFBQWtCLElBQU0sY0FDNUMsR0FBRyxVQUFZLFFBQVUsQ0FBRSxFQUFDLEVBQ3JCLFNBQVMsZ0JBQWdCakssRUFBUSxDQUNwQyxPQUFRQSxPQUNDLE9BQ0EsdUJBQ0QsT0FBTyxRQUFRLHlCQUNkLE9BQ0EsZUFDRCxPQUFPLFFBQVEsaUJBQ2QsT0FDQSxnQkFDRCxPQUFPLFFBQVEsa0JBQ2QsT0FDQSx1QkFFRCxPQUFPLFFBQVEsYUFFM0IsQ0FDTyxTQUFTLGNBQWNBLEVBQVEsQ0FDbEMsT0FBUUEsUUFDQyxRQUFRLHFCQUNULE1BQU8sNEJBQ04sUUFBUSxhQUNULE1BQU8sb0JBQ04sUUFBUSxjQUNULE1BQU8scUJBQ04sUUFBUSxxQkFFVCxNQUFPLGVBRW5CLENBRU8sSUFBSSxlQUNWLFNBQVVrSyxFQUFlLENBRXRCQSxFQUFjQSxFQUFjLDJCQUFnQyxHQUFLLDZCQUtqRUEsRUFBY0EsRUFBYyxxQkFBMEIsR0FBSyx1QkFLM0RBLEVBQWNBLEVBQWMsb0JBQXlCLEdBQUssc0JBSzFEQSxFQUFjQSxFQUFjLHFCQUEwQixHQUFLLHVCQUMzREEsRUFBY0EsRUFBYyxhQUFrQixJQUFNLGNBQ3hELEdBQUcsZ0JBQWtCLGNBQWdCLENBQUUsRUFBQyxFQUNqQyxTQUFTLHNCQUFzQmxLLEVBQVEsQ0FDMUMsT0FBUUEsT0FDQyxPQUNBLDZCQUNELE9BQU8sY0FBYywrQkFDcEIsT0FDQSx1QkFDRCxPQUFPLGNBQWMseUJBQ3BCLE9BQ0Esc0JBQ0QsT0FBTyxjQUFjLHdCQUNwQixPQUNBLHVCQUNELE9BQU8sY0FBYyx5QkFDcEIsT0FDQSx1QkFFRCxPQUFPLGNBQWMsYUFFakMsQ0FDTyxTQUFTLG9CQUFvQkEsRUFBUSxDQUN4QyxPQUFRQSxRQUNDLGNBQWMsMkJBQ2YsTUFBTyxrQ0FDTixjQUFjLHFCQUNmLE1BQU8sNEJBQ04sY0FBYyxvQkFDZixNQUFPLDJCQUNOLGNBQWMscUJBQ2YsTUFBTyw0QkFDTixjQUFjLHFCQUVmLE1BQU8sZUFFbkIsQ0FDQSxTQUFTLDhCQUErQixDQUNwQyxNQUFPLENBQUUsT0FBUSxHQUFJLFdBQVksT0FBVyxRQUFTLEVBQ3pELENBQ08sTUFBTSxtQkFBcUIsQ0FDOUIsT0FBT3ZjLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxVQUFXdHVCLEtBQUtrUyxFQUFRLE9BQ3BCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPNXFCLENBQUMsRUFFOUIsT0FBSWtTLEVBQVEsYUFBZSxRQUN2QixZQUFZLE9BQU9BLEVBQVEsV0FBWTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFdkUxWSxFQUFRLFVBQVksR0FDcEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0xWSxFQUFRLE9BQU8sRUFFcEMwWSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSwrQkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsT0FBTyxLQUFLb2EsRUFBTyxPQUFRLENBQUEsRUFDbkMsVUFDQyxHQUNEcGEsRUFBUSxXQUFhLFlBQVksT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQy9ELFVBQ0MsR0FDRHBhLEVBQVEsUUFBVW9hLEVBQU8sUUFDekIsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILE9BQVEsTUFBTSxRQUFRQSxHQUFRLE1BQU0sRUFDOUJBLEVBQU8sT0FBTyxJQUFLLEdBQU0sT0FBTyxDQUFDLENBQUMsRUFDbEMsQ0FBRSxFQUNSLFdBQVlDLFFBQU1ELEVBQU8sVUFBVSxFQUM3QixZQUFZLFNBQVNBLEVBQU8sVUFBVSxFQUN0QyxPQUNOLFFBQVNDLFFBQU1ELEVBQU8sT0FBTyxFQUFJLGdCQUFnQkEsRUFBTyxPQUFPLEVBQUksQ0FDL0UsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUk2ZCxFQUFRLE9BQ1I3ZCxFQUFJLE9BQVM2ZCxFQUFRLE9BQU8sSUFBS3BhLEdBQU1BLENBQUMsRUFHeEN6RCxFQUFJLE9BQVMsR0FFakI2ZCxFQUFRLGFBQWUsU0FDbEI3ZCxFQUFJLFdBQWE2ZCxFQUFRLFdBQ3BCLFlBQVksT0FBT0EsRUFBUSxVQUFVLEVBQ3JDLFFBQ1ZBLEVBQVEsVUFBWSxTQUNmN2QsRUFBSSxRQUFVLGNBQWM2ZCxFQUFRLE9BQU8sR0FDekM3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLCtCQUNoQixPQUFBQSxFQUFRLE9BQVN1YyxFQUFPLFFBQVEsSUFBSzMyQixHQUFNQSxDQUFDLEdBQUssR0FDakRvYSxFQUFRLFdBQ0p1YyxFQUFPLGFBQWUsUUFBYUEsRUFBTyxhQUFlLEtBQ25ELFlBQVksWUFBWUEsRUFBTyxVQUFVLEVBQ3pDLE9BQ1Z2YyxFQUFRLFFBQVV1YyxFQUFPLFNBQVcsRUFDN0J2YyxDQUNWLENBQ0wsRUFDQSxTQUFTLCtCQUFnQyxDQUNyQyxNQUFPLENBQUUsSUFBSyxHQUFJLFlBQWEsQ0FBQSxFQUFJLFdBQVksT0FDbkQsQ0FDTyxNQUFNLG9CQUFzQixDQUMvQixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsVUFBV3R1QixLQUFLa1MsRUFBUSxJQUNwQixHQUFHLE9BQU9sUyxFQUFHNHFCLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSSxDQUFFLEVBQUUsU0FFM0MsVUFBVzVxQixLQUFLa1MsRUFBUSxZQUNwQixXQUFXLE9BQU9sUyxFQUFHNHFCLEVBQU8sT0FBTyxFQUFFLEVBQUUsS0FBSSxDQUFFLEVBQUUsU0FFbkQsT0FBSTFZLEVBQVEsYUFBZSxRQUN2QixhQUFhLE9BQU9BLEVBQVEsV0FBWTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFckVBLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLGdDQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxJQUFJLEtBQUssR0FBRyxPQUFPb2EsRUFBUUEsRUFBTyxPQUFRLENBQUEsQ0FBQyxFQUNuRCxVQUNDLEdBQ0RwYSxFQUFRLFlBQVksS0FBSyxXQUFXLE9BQU9vYSxFQUFRQSxFQUFPLE9BQVEsQ0FBQSxDQUFDLEVBQ25FLFVBQ0MsR0FDRHBhLEVBQVEsV0FBYSxhQUFhLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUNoRSxjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsSUFBSyxNQUFNLFFBQVFBLEdBQVEsR0FBRyxFQUN4QkEsRUFBTyxJQUFJLElBQUssR0FBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDLEVBQ3BDLENBQUUsRUFDUixZQUFhLE1BQU0sUUFBUUEsR0FBUSxXQUFXLEVBQ3hDQSxFQUFPLFlBQVksSUFBSyxHQUFNLFdBQVcsU0FBUyxDQUFDLENBQUMsRUFDcEQsQ0FBRSxFQUNSLFdBQVlDLFFBQU1ELEVBQU8sVUFBVSxFQUM3QixhQUFhLFNBQVNBLEVBQU8sVUFBVSxFQUN2QyxNQUNsQixDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBSTZkLEVBQVEsSUFDUjdkLEVBQUksSUFBTTZkLEVBQVEsSUFBSSxJQUFLcGEsR0FBT0EsRUFBSSxHQUFHLE9BQU9BLENBQUMsRUFBSSxNQUFVLEVBRy9EekQsRUFBSSxJQUFNLEdBRVY2ZCxFQUFRLFlBQ1I3ZCxFQUFJLFlBQWM2ZCxFQUFRLFlBQVksSUFBS3BhLEdBQU1BLEVBQUksV0FBVyxPQUFPQSxDQUFDLEVBQUksTUFBUyxFQUdyRnpELEVBQUksWUFBYyxHQUV0QjZkLEVBQVEsYUFBZSxTQUNsQjdkLEVBQUksV0FBYTZkLEVBQVEsV0FDcEIsYUFBYSxPQUFPQSxFQUFRLFVBQVUsRUFDdEMsUUFDSDdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsZ0NBQ2hCLE9BQUFBLEVBQVEsSUFBTXVjLEVBQU8sS0FBSyxJQUFLMzJCLEdBQU0sR0FBRyxZQUFZQSxDQUFDLENBQUMsR0FBSyxDQUFBLEVBQzNEb2EsRUFBUSxZQUNKdWMsRUFBTyxhQUFhLElBQUszMkIsR0FBTSxXQUFXLFlBQVlBLENBQUMsQ0FBQyxHQUFLLEdBQ2pFb2EsRUFBUSxXQUNKdWMsRUFBTyxhQUFlLFFBQWFBLEVBQU8sYUFBZSxLQUNuRCxhQUFhLFlBQVlBLEVBQU8sVUFBVSxFQUMxQyxPQUNIdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUyw4QkFBK0IsQ0FDcEMsTUFBTyxDQUFFLFFBQVMsSUFBSSxXQUFjLEtBQU0sQ0FBQyxDQUMvQyxDQUNPLE1BQU0sbUJBQXFCLENBQzlCLE9BQU9BLEVBQVMwWSxFQUFTMEQsUUFBVSxPQUFDLE9BQU0sRUFBSSxDQUMxQyxPQUFJcGMsRUFBUSxRQUFRLFNBQVcsR0FDM0IwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0xWSxFQUFRLE9BQU8sRUFFdkNBLEVBQVEsT0FBUyxHQUNqQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTTFZLEVBQVEsSUFBSSxFQUVqQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLCtCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxRQUFVb2EsRUFBTyxRQUN6QixVQUNDLEdBQ0RwYSxFQUFRLEtBQU9vYSxFQUFPLFFBQ3RCLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxRQUFTQyxRQUFNRCxFQUFPLE9BQU8sRUFDdkJvRixrQkFBZ0JwRixFQUFPLE9BQU8sRUFDOUIsSUFBSSxXQUNWLEtBQU1DLFFBQU1ELEVBQU8sSUFBSSxFQUFJLHNCQUFzQkEsRUFBTyxJQUFJLEVBQUksQ0FDNUUsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLFVBQVksU0FDZjdkLEVBQUksUUFBVXkvQixrQkFBZ0I1aEIsRUFBUSxVQUFZLE9BQVlBLEVBQVEsUUFBVSxJQUFJLFVBQVksR0FDckdBLEVBQVEsT0FBUyxTQUNaN2QsRUFBSSxLQUFPLG9CQUFvQjZkLEVBQVEsSUFBSSxHQUN6QzdkLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsK0JBQ2hCLE9BQUFBLEVBQVEsUUFBVXVjLEVBQU8sU0FBVyxJQUFJLFdBQ3hDdmMsRUFBUSxLQUFPdWMsRUFBTyxNQUFRLEVBQ3ZCdmMsQ0FDVixDQUNMLEVBQ0EsU0FBUywrQkFBZ0MsQ0FDckMsTUFBTyxDQUFFLFdBQVksT0FDekIsQ0FDTyxNQUFNLG9CQUFzQixDQUMvQixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsYUFBZSxRQUN2QixXQUFXLE9BQU9BLEVBQVEsV0FBWTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFbkVBLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLGdDQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxXQUFhLFdBQVcsT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQzlELGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxXQUFZQyxRQUFNRCxFQUFPLFVBQVUsRUFDN0IsV0FBVyxTQUFTQSxFQUFPLFVBQVUsRUFDckMsTUFDbEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLGFBQWUsU0FDbEI3ZCxFQUFJLFdBQWE2ZCxFQUFRLFdBQ3BCLFdBQVcsT0FBT0EsRUFBUSxVQUFVLEVBQ3BDLFFBQ0g3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLGdDQUNoQixPQUFBQSxFQUFRLFdBQ0p1YyxFQUFPLGFBQWUsUUFBYUEsRUFBTyxhQUFlLEtBQ25ELFdBQVcsWUFBWUEsRUFBTyxVQUFVLEVBQ3hDLE9BQ0h2YyxDQUNWLENBQ0wsRUFDQSxTQUFTLDJCQUE0QixDQUNqQyxNQUFPLENBQUUsR0FBSSxPQUFXLFFBQVMsSUFBSSxVQUFZLENBQ3JELENBQ08sTUFBTSxnQkFBa0IsQ0FDM0IsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLEtBQU8sUUFDZixHQUFHLE9BQU9BLEVBQVEsR0FBSTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFdEQxWSxFQUFRLFFBQVEsU0FBVyxHQUMzQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTTFZLEVBQVEsT0FBTyxFQUVwQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLDRCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxHQUFLLEdBQUcsT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQzlDLFVBQ0MsR0FDRHBhLEVBQVEsUUFBVW9hLEVBQU8sUUFDekIsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILEdBQUlDLFFBQU1ELEVBQU8sRUFBRSxFQUFJLEdBQUcsU0FBU0EsRUFBTyxFQUFFLEVBQUksT0FDaEQsUUFBU0MsUUFBTUQsRUFBTyxPQUFPLEVBQ3ZCb0Ysa0JBQWdCcEYsRUFBTyxPQUFPLEVBQzlCLElBQUksVUFDdEIsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLEtBQU8sU0FDVjdkLEVBQUksR0FBSzZkLEVBQVEsR0FBSyxHQUFHLE9BQU9BLEVBQVEsRUFBRSxFQUFJLFFBQ25EQSxFQUFRLFVBQVksU0FDZjdkLEVBQUksUUFBVXkvQixrQkFBZ0I1aEIsRUFBUSxVQUFZLE9BQVlBLEVBQVEsUUFBVSxJQUFJLFVBQVksR0FDOUY3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLDRCQUNoQixPQUFBQSxFQUFRLEdBQ0p1YyxFQUFPLEtBQU8sUUFBYUEsRUFBTyxLQUFPLEtBQ25DLEdBQUcsWUFBWUEsRUFBTyxFQUFFLEVBQ3hCLE9BQ1Z2YyxFQUFRLFFBQVV1YyxFQUFPLFNBQVcsSUFBSSxXQUNqQ3ZjLENBQ1YsQ0FDTCxFQUNBLFNBQVMsNEJBQTZCLENBQ2xDLE1BQU8sQ0FBRSxRQUFTLE9BQVcsT0FBUSxNQUFTLENBQ2xELENBQ08sTUFBTSxpQkFBbUIsQ0FDNUIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLFVBQVksUUFDcEIsUUFBUSxPQUFPQSxFQUFRLFFBQVMwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRWhFMVksRUFBUSxTQUFXLFFBQ25CLE9BQU8sT0FBT0EsRUFBUSxPQUFRMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTSxFQUUzREEsQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsNkJBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLFFBQVUsUUFBUSxPQUFPb2EsRUFBUUEsRUFBTyxPQUFNLENBQUUsRUFDeEQsVUFDQyxHQUNEcGEsRUFBUSxPQUFTLE9BQU8sT0FBT29hLEVBQVFBLEVBQU8sT0FBTSxDQUFFLEVBQ3RELGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxRQUFTQyxRQUFNRCxFQUFPLE9BQU8sRUFDdkIsUUFBUSxTQUFTQSxFQUFPLE9BQU8sRUFDL0IsT0FDTixPQUFRQyxRQUFNRCxFQUFPLE1BQU0sRUFBSSxPQUFPLFNBQVNBLEVBQU8sTUFBTSxFQUFJLE1BQzVFLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxVQUFZLFNBQ2Y3ZCxFQUFJLFFBQVU2ZCxFQUFRLFFBQ2pCLFFBQVEsT0FBT0EsRUFBUSxPQUFPLEVBQzlCLFFBQ1ZBLEVBQVEsU0FBVyxTQUNkN2QsRUFBSSxPQUFTNmQsRUFBUSxPQUFTLE9BQU8sT0FBT0EsRUFBUSxNQUFNLEVBQUksUUFDNUQ3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLDZCQUNoQixPQUFBQSxFQUFRLFFBQ0p1YyxFQUFPLFVBQVksUUFBYUEsRUFBTyxVQUFZLEtBQzdDLFFBQVEsWUFBWUEsRUFBTyxPQUFPLEVBQ2xDLE9BQ1Z2YyxFQUFRLE9BQ0p1YyxFQUFPLFNBQVcsUUFBYUEsRUFBTyxTQUFXLEtBQzNDLE9BQU8sWUFBWUEsRUFBTyxNQUFNLEVBQ2hDLE9BQ0h2YyxDQUNWLENBQ0wsRUFDQSxTQUFTLHdCQUF5QixDQUM5QixNQUFPLENBQUUsS0FBTSxHQUNuQixDQUNPLE1BQU0sYUFBZSxDQUN4QixPQUFPQSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsT0FBUyxJQUNqQjBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsT0FBTzFZLEVBQVEsSUFBSSxFQUVsQzBZLENBQ1YsRUFDRCxPQUFPeHpCLEVBQU8zQixFQUFRLENBQ2xCLE1BQU02MkIsRUFBU2wxQixhQUFpQm0zQixRQUFVLE9BQUduM0IsRUFBUSxJQUFJbTNCLFFBQUFBLE9BQVduM0IsQ0FBSyxFQUN6RSxJQUFJMnVCLEVBQU10d0IsSUFBVyxPQUFZNjJCLEVBQU8sSUFBTUEsRUFBTyxJQUFNNzJCLEVBQzNELE1BQU15YyxFQUFVLHlCQUNoQixLQUFPb2EsRUFBTyxJQUFNdkcsR0FBSyxDQUNyQixNQUFNeUksRUFBTWxDLEVBQU8sU0FDbkIsT0FBUWtDLElBQVEsT0FDUCxHQUNEdGMsRUFBUSxLQUFPb2EsRUFBTyxTQUN0QixjQUVBQSxFQUFPLFNBQVNrQyxFQUFNLENBQUMsRUFDdkIsTUFFWCxDQUNELE9BQU90YyxDQUNWLEVBQ0QsU0FBU3VjLEVBQVEsQ0FDYixNQUFPLENBQ0gsS0FBTUMsUUFBTUQsRUFBTyxJQUFJLEVBQUksT0FBT0EsRUFBTyxJQUFJLEVBQUksRUFDN0QsQ0FDSyxFQUNELE9BQU92YyxFQUFTLENBQ1osTUFBTTdkLEVBQU0sQ0FBQSxFQUNaLE9BQUE2ZCxFQUFRLE9BQVMsU0FBYzdkLEVBQUksS0FBTzZkLEVBQVEsTUFDM0M3ZCxDQUNWLEVBQ0QsWUFBWW82QixFQUFRLENBQ2hCLE1BQU12YyxFQUFVLHlCQUNoQixPQUFBQSxFQUFRLEtBQU91YyxFQUFPLE1BQVEsR0FDdkJ2YyxDQUNWLENBQ0wsRUFDQSxTQUFTLHlCQUEwQixDQUMvQixNQUFPLENBQUUsR0FBSSxPQUFXLFdBQVksTUFBUyxDQUNqRCxDQUNPLE1BQU0sY0FBZ0IsQ0FDekIsT0FBT0EsRUFBUzBZLEVBQVMwRCxRQUFVLE9BQUMsT0FBTSxFQUFJLENBQzFDLE9BQUlwYyxFQUFRLEtBQU8sUUFDZixHQUFHLE9BQU9BLEVBQVEsR0FBSTBZLEVBQU8sT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU0sRUFFdEQxWSxFQUFRLGFBQWUsUUFDdkIsV0FBVyxPQUFPQSxFQUFRLFdBQVkwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFNLEVBRW5FQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSwwQkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsR0FBSyxHQUFHLE9BQU9vYSxFQUFRQSxFQUFPLE9BQU0sQ0FBRSxFQUM5QyxVQUNDLEdBQ0RwYSxFQUFRLFdBQWEsV0FBVyxPQUFPb2EsRUFBUUEsRUFBTyxPQUFNLENBQUUsRUFDOUQsY0FFQUEsRUFBTyxTQUFTa0MsRUFBTSxDQUFDLEVBQ3ZCLE1BRVgsQ0FDRCxPQUFPdGMsQ0FDVixFQUNELFNBQVN1YyxFQUFRLENBQ2IsTUFBTyxDQUNILEdBQUlDLFFBQU1ELEVBQU8sRUFBRSxFQUFJLEdBQUcsU0FBU0EsRUFBTyxFQUFFLEVBQUksT0FDaEQsV0FBWUMsUUFBTUQsRUFBTyxVQUFVLEVBQzdCLFdBQVcsU0FBU0EsRUFBTyxVQUFVLEVBQ3JDLE1BQ2xCLENBQ0ssRUFDRCxPQUFPdmMsRUFBUyxDQUNaLE1BQU03ZCxFQUFNLENBQUEsRUFDWixPQUFBNmQsRUFBUSxLQUFPLFNBQ1Y3ZCxFQUFJLEdBQUs2ZCxFQUFRLEdBQUssR0FBRyxPQUFPQSxFQUFRLEVBQUUsRUFBSSxRQUNuREEsRUFBUSxhQUFlLFNBQ2xCN2QsRUFBSSxXQUFhNmQsRUFBUSxXQUNwQixXQUFXLE9BQU9BLEVBQVEsVUFBVSxFQUNwQyxRQUNIN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSwwQkFDaEIsT0FBQUEsRUFBUSxHQUNKdWMsRUFBTyxLQUFPLFFBQWFBLEVBQU8sS0FBTyxLQUNuQyxHQUFHLFlBQVlBLEVBQU8sRUFBRSxFQUN4QixPQUNWdmMsRUFBUSxXQUNKdWMsRUFBTyxhQUFlLFFBQWFBLEVBQU8sYUFBZSxLQUNuRCxXQUFXLFlBQVlBLEVBQU8sVUFBVSxFQUN4QyxPQUNIdmMsQ0FDVixDQUNMLEVBQ08sTUFBTSxpQkFBa0IsQ0FFM0IsWUFBWWljLEVBQUssQ0FEakJoVixHQUFBLFlBRUksS0FBSyxJQUFNZ1YsRUFDWCxLQUFLLFNBQVcsS0FBSyxTQUFTLEtBQUssSUFBSSxFQUN2QyxLQUFLLE1BQVEsS0FBSyxNQUFNLEtBQUssSUFBSSxFQUNqQyxLQUFLLFlBQWMsS0FBSyxZQUFZLEtBQUssSUFBSSxFQUM3QyxLQUFLLFlBQWMsS0FBSyxZQUFZLEtBQUssSUFBSSxDQUNoRCxDQUNELFNBQVNKLEVBQVMySixFQUFVLENBQ3hCLE9BQU8sS0FBSyxJQUFJLE1BQU0sb0JBQXFCLGdCQUFnQixZQUFZM0osQ0FBTyxFQUFHMkosQ0FBUSxDQUM1RixDQUNELE1BQU0zSixFQUFTMkosRUFBVSxDQUNyQixPQUFPLEtBQUssSUFBSSxNQUFNLGlCQUFrQixhQUFhLFlBQVkzSixDQUFPLEVBQUcySixDQUFRLENBQ3RGLENBQ0QsWUFBWTNKLEVBQVMySixFQUFVLENBQzNCLE9BQU8sS0FBSyxJQUFJLE1BQU0sdUJBQXdCLG1CQUFtQixZQUFZM0osQ0FBTyxFQUFHMkosQ0FBUSxDQUNsRyxDQUNELFlBQVkzSixFQUFTMkosRUFBVSxDQUMzQixPQUFPLEtBQUssSUFBSSxNQUFNLHVCQUF3QixtQkFBbUIsWUFBWTNKLENBQU8sRUFBRzJKLENBQVEsQ0FDbEcsQ0FDTCxDQUNPLE1BQU0sWUFBYyxDQUN2QixZQUFhLDJCQUNqQixFQUNhLG9CQUFzQixDQUMvQixXQUFZLFdBQ1osUUFBUyxZQUNULGNBQWUsR0FDZixlQUFnQixHQUNoQixZQUFhLENBQ1QsaUJBQWtCLENBQ2QsT0FBTyxnQkFBZ0IsT0FBTyxJQUFJLEVBQUUsT0FBTSxDQUM3QyxDQUNKLEVBQ0QsYUFBYyxDQUNWLGtCQUFrQmhoQyxFQUFNLENBQ3BCLE1BQU8sQ0FDSCxHQUFHLGlCQUFpQixPQUFPQSxDQUFJLEVBQy9CLFVBQVcsQ0FDUCxPQUFPLElBQ1YsQ0FDakIsQ0FDUyxDQUNKLENBQ0wsRUFDYSxpQkFBbUIsQ0FDNUIsV0FBWSxRQUNaLFFBQVMsWUFDVCxjQUFlLEdBQ2YsZUFBZ0IsR0FDaEIsWUFBYSxDQUNULGlCQUFrQixDQUNkLE9BQU8sYUFBYSxPQUFPLElBQUksRUFBRSxPQUFNLENBQzFDLENBQ0osRUFDRCxhQUFjLENBQ1Ysa0JBQWtCQSxFQUFNLENBQ3BCLE1BQU8sQ0FDSCxHQUFHLGNBQWMsT0FBT0EsQ0FBSSxFQUM1QixVQUFXLENBQ1AsT0FBTyxJQUNWLENBQ2pCLENBQ1MsQ0FDSixDQUNMLEVBQ2EsdUJBQXlCLENBQ2xDLFdBQVksY0FDWixRQUFTLFlBQ1QsY0FBZSxHQUNmLGVBQWdCLEdBQ2hCLFlBQWEsQ0FDVCxpQkFBa0IsQ0FDZCxPQUFPLG1CQUFtQixPQUFPLElBQUksRUFBRSxPQUFNLENBQ2hELENBQ0osRUFDRCxhQUFjLENBQ1Ysa0JBQWtCQSxFQUFNLENBQ3BCLE1BQU8sQ0FDSCxHQUFHLG9CQUFvQixPQUFPQSxDQUFJLEVBQ2xDLFVBQVcsQ0FDUCxPQUFPLElBQ1YsQ0FDakIsQ0FDUyxDQUNKLENBQ0wsRUFDYSx1QkFBeUIsQ0FDbEMsV0FBWSxjQUNaLFFBQVMsWUFDVCxjQUFlLEdBQ2YsZUFBZ0IsR0FDaEIsWUFBYSxDQUNULGlCQUFrQixDQUNkLE9BQU8sbUJBQW1CLE9BQU8sSUFBSSxFQUFFLE9BQU0sQ0FDaEQsQ0FDSixFQUNELGFBQWMsQ0FDVixrQkFBa0JBLEVBQU0sQ0FDcEIsTUFBTyxDQUNILEdBQUcsb0JBQW9CLE9BQU9BLENBQUksRUFDbEMsVUFBVyxDQUNQLE9BQU8sSUFDVixDQUNqQixDQUNTLENBQ0osQ0FDTCxFQXNDQSxJQUFJcTlCLGNBQWMsSUFBTSxDQUNwQixHQUFJLE9BQU9BLGFBQWUsSUFDdEIsT0FBT0EsYUFDWCxHQUFJLE9BQU8sS0FBUyxJQUNoQixPQUFPLEtBQ1gsR0FBSSxPQUFPLE9BQVcsSUFDbEIsT0FBTyxPQUNYLEdBQUksT0FBTyxPQUFXLElBQ2xCLE9BQU8sT0FDWCxLQUFNLGdDQUNWLEtBQ0EsTUFBTUMsT0FBT0QsYUFBVyxPQUNsQmxPLEdBQVFrTyxhQUFXLE9BQU8sS0FBS2xPLEVBQUssUUFBUSxFQUFFLFNBQVMsUUFBUSxHQUNyRSxTQUFTZ08sa0JBQWdCaE8sRUFBSyxDQUMxQixNQUFNb08sRUFBTUQsT0FBS25PLENBQUcsRUFDZHFPLEVBQU0sSUFBSSxXQUFXRCxFQUFJLE1BQU0sRUFDckMsUUFBUyxFQUFJLEVBQUcsRUFBSUEsRUFBSSxPQUFRLEVBQUUsRUFDOUJDLEVBQUksR0FBS0QsRUFBSSxXQUFXLENBQUMsRUFFN0IsT0FBT0MsQ0FDWCxDQUNBLE1BQU1DLE9BQU9KLGFBQVcsT0FDbEJFLEdBQVFGLGFBQVcsT0FBTyxLQUFLRSxFQUFLLFFBQVEsRUFBRSxTQUFTLFFBQVEsR0FDckUsU0FBU0gsa0JBQWdCSSxFQUFLLENBQzFCLE1BQU1ELEVBQU0sQ0FBQSxFQUNaLE9BQUFDLEVBQUksUUFBU0UsR0FBUyxDQUNsQkgsRUFBSSxLQUFLLE9BQU8sYUFBYUcsQ0FBSSxDQUFDLENBQzFDLENBQUssRUFDTUQsT0FBS0YsRUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUM1QixDQUNBLFNBQVN2RixRQUFNNzZCLEVBQU8sQ0FDbEIsT0FBT0EsR0FBVSxJQUNyQixDQ3Z3QkEsU0FBUyxtQkFBb0IsQ0FDekIsTUFBTyxDQUFFLFlBQWEsR0FBSSxVQUFXLEdBQUksT0FBUSxDQUFBLEVBQ3JELENBQ08sTUFBTSxRQUFVLENBQ25CLE9BQU9xZSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDdENwYyxFQUFRLGNBQWdCLElBQ3hCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxPQUFPMVksRUFBUSxXQUFXLEVBRTVDQSxFQUFRLFlBQWMsSUFDdEIwWSxFQUFPLE9BQU8sRUFBRSxFQUFFLE9BQU8xWSxFQUFRLFNBQVMsRUFFOUMsVUFBV2xTLEtBQUtrUyxFQUFRLE9BQ3BCLEtBQUssT0FBT2xTLEVBQUc0cUIsRUFBTyxPQUFPLEVBQUUsRUFBRSxLQUFJLENBQUUsRUFBRSxTQUU3QyxPQUFPQSxDQUNWLEVBQ0QsT0FBT3h6QixFQUFPM0IsRUFBUSxDQUNsQixNQUFNNjJCLEVBQVNsMUIsYUFBaUJtM0IsUUFBVSxPQUFHbjNCLEVBQVEsSUFBSW0zQixRQUFBQSxPQUFXbjNCLENBQUssRUFDekUsSUFBSTJ1QixFQUFNdHdCLElBQVcsT0FBWTYyQixFQUFPLElBQU1BLEVBQU8sSUFBTTcyQixFQUMzRCxNQUFNeWMsRUFBVSxvQkFDaEIsS0FBT29hLEVBQU8sSUFBTXZHLEdBQUssQ0FDckIsTUFBTXlJLEVBQU1sQyxFQUFPLFNBQ25CLE9BQVFrQyxJQUFRLE9BQ1AsR0FDRHRjLEVBQVEsWUFBY29hLEVBQU8sU0FDN0IsVUFDQyxHQUNEcGEsRUFBUSxVQUFZb2EsRUFBTyxTQUMzQixVQUNDLEdBQ0RwYSxFQUFRLE9BQU8sS0FBSyxLQUFLLE9BQU9vYSxFQUFRQSxFQUFPLE9BQVEsQ0FBQSxDQUFDLEVBQ3hELGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxZQUFhQyxRQUFNRCxFQUFPLFdBQVcsRUFBSSxPQUFPQSxFQUFPLFdBQVcsRUFBSSxHQUN0RSxVQUFXQyxRQUFNRCxFQUFPLFNBQVMsRUFBSSxPQUFPQSxFQUFPLFNBQVMsRUFBSSxHQUNoRSxPQUFRLE1BQU0sUUFBUUEsR0FBUSxNQUFNLEVBQzlCQSxFQUFPLE9BQU8sSUFBSyxHQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsRUFDekMsQ0FBRSxDQUNwQixDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsY0FBZ0IsU0FDbkI3ZCxFQUFJLFlBQWM2ZCxFQUFRLGFBQy9CQSxFQUFRLFlBQWMsU0FBYzdkLEVBQUksVUFBWTZkLEVBQVEsV0FDeERBLEVBQVEsT0FDUjdkLEVBQUksT0FBUzZkLEVBQVEsT0FBTyxJQUFLcGEsR0FBT0EsRUFBSSxLQUFLLE9BQU9BLENBQUMsRUFBSSxNQUFVLEVBR3ZFekQsRUFBSSxPQUFTLEdBRVZBLENBQ1YsRUFDRCxZQUFZbzZCLEVBQVEsQ0FDaEIsTUFBTXZjLEVBQVUsb0JBQ2hCLE9BQUFBLEVBQVEsWUFBY3VjLEVBQU8sYUFBZSxHQUM1Q3ZjLEVBQVEsVUFBWXVjLEVBQU8sV0FBYSxHQUN4Q3ZjLEVBQVEsT0FBU3VjLEVBQU8sUUFBUSxJQUFLMzJCLEdBQU0sS0FBSyxZQUFZQSxDQUFDLENBQUMsR0FBSyxDQUFBLEVBQzVEb2EsQ0FDVixDQUNMLEVBcU9BLFNBQVN3YyxRQUFNNzZCLEVBQU8sQ0FDbEIsT0FBT0EsR0FBVSxJQUNyQixDQy9TQSxTQUFTLGtCQUFtQixDQUN4QixNQUFPLENBQUUsSUFBSyxJQUFJLFdBQ3RCLENBQ08sTUFBTSxPQUFTLENBQ2xCLE9BQU9xZSxFQUFTMFksRUFBUzBELFFBQVUsT0FBQyxPQUFNLEVBQUksQ0FDMUMsT0FBSXBjLEVBQVEsSUFBSSxTQUFXLEdBQ3ZCMFksRUFBTyxPQUFPLEVBQUUsRUFBRSxNQUFNMVksRUFBUSxHQUFHLEVBRWhDMFksQ0FDVixFQUNELE9BQU94ekIsRUFBTzNCLEVBQVEsQ0FDbEIsTUFBTTYyQixFQUFTbDFCLGFBQWlCbTNCLFFBQVUsT0FBR24zQixFQUFRLElBQUltM0IsUUFBQUEsT0FBV24zQixDQUFLLEVBQ3pFLElBQUkydUIsRUFBTXR3QixJQUFXLE9BQVk2MkIsRUFBTyxJQUFNQSxFQUFPLElBQU03MkIsRUFDM0QsTUFBTXljLEVBQVUsbUJBQ2hCLEtBQU9vYSxFQUFPLElBQU12RyxHQUFLLENBQ3JCLE1BQU15SSxFQUFNbEMsRUFBTyxTQUNuQixPQUFRa0MsSUFBUSxPQUNQLEdBQ0R0YyxFQUFRLElBQU1vYSxFQUFPLFFBQ3JCLGNBRUFBLEVBQU8sU0FBU2tDLEVBQU0sQ0FBQyxFQUN2QixNQUVYLENBQ0QsT0FBT3RjLENBQ1YsRUFDRCxTQUFTdWMsRUFBUSxDQUNiLE1BQU8sQ0FDSCxJQUFLLE1BQU1BLEVBQU8sR0FBRyxFQUFJLGdCQUFnQkEsRUFBTyxHQUFHLEVBQUksSUFBSSxVQUN2RSxDQUNLLEVBQ0QsT0FBT3ZjLEVBQVMsQ0FDWixNQUFNN2QsRUFBTSxDQUFBLEVBQ1osT0FBQTZkLEVBQVEsTUFBUSxTQUNYN2QsRUFBSSxJQUFNLGdCQUFnQjZkLEVBQVEsTUFBUSxPQUFZQSxFQUFRLElBQU0sSUFBSSxVQUFZLEdBQ2xGN2QsQ0FDVixFQUNELFlBQVlvNkIsRUFBUSxDQUNoQixNQUFNdmMsRUFBVSxtQkFDaEIsT0FBQUEsRUFBUSxJQUFNdWMsRUFBTyxLQUFPLElBQUksV0FDekJ2YyxDQUNWLENBQ0wsRUE2Q0EsSUFBSTZoQixjQUFjLElBQU0sQ0FDcEIsR0FBSSxPQUFPQSxhQUFlLElBQ3RCLE9BQU9BLGFBQ1gsR0FBSSxPQUFPLEtBQVMsSUFDaEIsT0FBTyxLQUNYLEdBQUksT0FBTyxPQUFXLElBQ2xCLE9BQU8sT0FDWCxHQUFJLE9BQU8sT0FBVyxJQUNsQixPQUFPLE9BQ1gsS0FBTSxnQ0FDVixLQUNBLE1BQU0sS0FBT0EsYUFBVyxPQUNsQmxPLEdBQVFrTyxhQUFXLE9BQU8sS0FBS2xPLEVBQUssUUFBUSxFQUFFLFNBQVMsUUFBUSxHQUNyRSxTQUFTLGdCQUFnQkEsRUFBSyxDQUMxQixNQUFNb08sRUFBTSxLQUFLcE8sQ0FBRyxFQUNkcU8sRUFBTSxJQUFJLFdBQVdELEVBQUksTUFBTSxFQUNyQyxRQUFTLEVBQUksRUFBRyxFQUFJQSxFQUFJLE9BQVEsRUFBRSxFQUM5QkMsRUFBSSxHQUFLRCxFQUFJLFdBQVcsQ0FBQyxFQUU3QixPQUFPQyxDQUNYLENBQ0EsTUFBTSxLQUFPSCxhQUFXLE9BQ2xCRSxHQUFRRixhQUFXLE9BQU8sS0FBS0UsRUFBSyxRQUFRLEVBQUUsU0FBUyxRQUFRLEdBQ3JFLFNBQVMsZ0JBQWdCQyxFQUFLLENBQzFCLE1BQU1ELEVBQU0sQ0FBQSxFQUNaLE9BQUFDLEVBQUksUUFBU0UsR0FBUyxDQUNsQkgsRUFBSSxLQUFLLE9BQU8sYUFBYUcsQ0FBSSxDQUFDLENBQzFDLENBQUssRUFDTSxLQUFLSCxFQUFJLEtBQUssRUFBRSxDQUFDLENBQzVCLENBQ0EsU0FBUyxNQUFNcGdDLEVBQU8sQ0FDbEIsT0FBT0EsR0FBVSxJQUNyQixDQ3hGQSxlQUFlLGNBQWNxckIsRUFBb0JILEVBQXVCNlosRUFBUSxJQUFLQyxFQUFVLElBQUksV0FBVyxDQUFDLEVBQXdCLENBQ3RJLE9BQU8sSUFBSSxXQUFXLE1BQU0sT0FBTyxPQUFPLFdBQVcsQ0FDcEQsS0FBTSxPQUNOLEtBQU0sVUFDTixLQUFNOVosRUFDTixLQUFNOFosQ0FBQSxFQUNKM1osRUFBUzBaLENBQU8sQ0FBQyxDQUNyQixDQW9DQSxlQUFlLGNBQWNFLEVBQW9CL1osRUFBdUI2WixFQUFRLElBQTJDLENBRTFILE1BQU1HLEVBQVcsT0FBTyxnQkFBZ0IsSUFBSSxXQUFXSCxHQUFXLENBQUMsQ0FBQyxFQUc5RDFaLEVBQVUsTUFBTSxPQUFPLE9BQU8sVUFBVSxNQUFPNlosRUFBVSxDQUM5RCxLQUFNLE9BQ04sS0FBTSxTQUFBLEVBQ0osR0FBTyxDQUFDLFlBQVksQ0FBQyxFQUd4QixTQUFTQSxDQUFRLEVBR1gsTUFBQUMsRUFBYSxJQUFJLGVBQWUsTUFBTSxjQUFjOVosRUFBU0gsRUFBVzZaLENBQU8sQ0FBQyxFQUdoRkssRUFBUSxJQUFJLGVBQWUsTUFBTUgsRUFBTyxDQUFBLEVBR3hDSSxFQUFTRCxFQUFNLElBQUlELENBQVUsRUFHbkMsT0FBQUMsRUFBTSxLQUFLLEVBR1hELEVBQVcsS0FBSyxFQUdULENBQUM5WixFQUFTZ2EsQ0FBTSxDQUN4QixDQVVBLE1BQU05YSxrQkFBa0IsSUFReEIsTUFBcUIsVUFBVyxDQUsvQixhQUFhLE9BQU8wYSxFQUFvQkYsRUFBUSxJQUEwQixDQUVuRSxNQUFBTyxFQUFRLElBQUksV0FHWkMsRUFBWWhiLGNBQVksSUFBSSthLENBQUssRUFHakMsQ0FBQ2phLEVBQVNnYSxDQUFNLEVBQUksTUFBTSxjQUFjSixFQUFPTSxFQUFVLFVBQVdSLENBQU8sRUFHakYsY0FBTyxPQUFPUSxFQUFXLENBQ3hCLFFBQUFsYSxFQUNBLE9BQUFnYSxDQUFBLENBQ0EsRUFHTUMsQ0FDUixDQU1BLGFBQWEsVUFBVUUsRUFBcUJULEVBQVEsSUFBMEIsQ0FDN0UsT0FBTyxXQUFXLE9BQU8sSUFBTVMsRUFBU1QsQ0FBTyxDQUNoRCxDQU1RLGFBQWMsQ0FFckIsTUFBTTdaLEVBQVksT0FBTyxnQkFBZ0IsSUFBSSxXQUFXLEVBQUUsQ0FBQyxFQUczRFgsY0FBWSxJQUFJLEtBQU0sQ0FDckIsVUFBQVcsRUFDQSxPQUFRLEtBQ1IsUUFBUyxJQUFBLENBQ1QsQ0FDRixDQU1BLE1BQU0sT0FBeUI0RCxFQUE4RCxDQUV0RixNQUFBbkIsRUFBYXBELGNBQVksSUFBSSxJQUFJLEVBQ2pDLENBQ0wsUUFBQWMsRUFDQSxVQUFBSCxFQUNBLE9BQUFtYSxDQUNHLEVBQUExWCxFQUdBLElBQUF3QixFQUNBekYsRUFHRSxLQUFBLENBQUMrYixFQUFhQyxDQUFVLEVBQUksTUFBTSxjQUFjLElBQU0sSUFBSSxRQUFRLE1BQU05NUIsR0FBZSxDQUV0RixNQUFBdTVCLEVBQWEsSUFBSSxlQUFlLE1BQU0sY0FBYzlaLEVBQVVILEVBQVcsR0FBRyxDQUFDLEVBRzdFa2EsRUFBUUMsRUFBUSxJQUFJRixDQUFVLEVBR3BDQSxFQUFXLEtBQUssRUFHWixHQUFBLENBRVFoVyxFQUFBTCxFQUFPc1csRUFBTSxJQUFJLFFBR3ZCTyxHQUNNamMsRUFBQWljLENBQ1osQ0FHQS81QixFQUFXdzVCLEVBQU0sSUFBSSxFQUdyQixlQUFlLElBQU0sQ0FDcEJBLEVBQU0sS0FBSyxDQUFBLENBQ1gsQ0FBQSxDQUNELEVBQUdsYSxDQUFTLEVBT2IsR0FKQXlDLEVBQVcsUUFBVThYLEVBQ3JCOVgsRUFBVyxPQUFTK1gsRUFHakJoYyxFQUNJLE1BQUFBLEVBSUMsT0FBQXlGLENBRVQsQ0FLQSxTQUFnQixDQUVULEtBQUEsQ0FDTCxVQUFBakUsRUFDQSxPQUFBbWEsQ0FBQSxFQUNHOWEsY0FBWSxJQUFJLElBQUksRUFHeEI4YSxHQUFRLEtBQUssRUFHYixTQUFTbmEsQ0FBUyxFQUdsQlgsY0FBWSxPQUFPLElBQUksQ0FDeEIsQ0FDRCxDQ3BOQSxNQUFxQix5QkFBeUIsY0FBZSxDQUk1RCxPQUFnQixPQUFPaEYsRUFBbUMsQ0FDbEQsT0FBQSxJQUFJLGlCQUFpQixPQUFPLGdCQUFnQixJQUFJLFdBQVdBLENBQU8sQ0FBQyxDQUFDLENBQzVFLENBTUEsT0FBZ0IsTUFBTUEsRUFBUSxFQUFxQixDQUNsRCxPQUFPLElBQUksaUJBQWlCLElBQUksV0FBV0EsQ0FBTyxDQUFDLENBQ3BELENBTUEsT0FBTyxJQUFJcWdCLEVBQXdCQyxFQUEwQyxDQUN6RSxPQUFBRCxFQUFLLElBQUlDLENBQUksRUFDUkQsRUFBSyxRQUdMQyxFQUFLLE9BRWQsQ0FNQSxPQUFPLElBQUlELEVBQXdCQyxFQUEwQyxDQUN6RSxPQUFBRCxFQUFLLElBQUlDLENBQUksRUFDUkQsRUFBSyxRQUdMQyxFQUFLLE9BRWQsQ0FNUyxPQUEwQixDQUNsQyxPQUFPLElBQUksaUJBQWlCLFdBQVcsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUN2RCxDQU1BLFFBQVF0ZixFQUFvQyxDQUUzQyxNQUFNQyxFQUFpQixLQUFLLEtBR3RCVCxFQUFpQlMsRUFBZSxXQUdoQ0MsRUFBa0JGLEVBQVMsS0FNakMsR0FId0JFLEVBQWdCLGFBR2pCVixFQUV0QixXQUFLLEtBQUssRUFDVlEsRUFBUyxLQUFLLEVBR1IsSUFBSSxNQUFNLHNEQUFzRCxFQUl2RSxRQUFRRCxFQUFRLEVBQUdBLEVBQVFQLEVBQWdCTyxJQUFXLENBRXJELE1BQU13ZixFQUFPdGYsRUFBZUYsR0FDdEJ5ZixFQUFPdGYsRUFBZ0JILEdBRzdCLEdBQUd3ZixJQUFTQyxFQUVYLE9BQUdELEVBQU9DLEVBQ0YsRUFJQSxFQUdWLENBR08sTUFBQSxFQUNSLENBTUEsR0FBR3hmLEVBQXFDLENBQ2hDLE9BQUEsS0FBSyxRQUFRQSxDQUFRLElBQU0sQ0FDbkMsQ0FNQSxHQUFHQSxFQUFxQyxDQUNoQyxPQUFBLEtBQUssUUFBUUEsQ0FBUSxFQUFJLENBQ2pDLENBTUEsSUFBSUEsRUFBcUMsQ0FDakMsT0FBQSxLQUFLLFFBQVFBLENBQVEsR0FBSyxDQUNsQyxDQU1BLEdBQUdBLEVBQXFDLENBQ2hDLE9BQUEsS0FBSyxRQUFRQSxDQUFRLEVBQUksQ0FDakMsQ0FNQSxJQUFJQSxFQUFxQyxDQUNqQyxPQUFBLEtBQUssUUFBUUEsQ0FBUSxHQUFLLENBQ2xDLENBTUEsS0FBS0EsRUFBOEMsQ0FFbEQsTUFBTUMsRUFBaUIsS0FBSyxLQUd0QndmLEVBQVl4ZixFQUFlLFdBRzNCeWYsRUFBYSxLQUFLLFFBQVExZixDQUFRLEVBR3hDLEdBQUcwZixFQUFhLEVBQ1IsT0FBQTFmLEVBQVMsS0FBSyxJQUFJLEVBQzFCLEdBRWMwZixJQUFOLEVBQ0EsT0FBQSxpQkFBaUIsTUFBTUQsQ0FBUyxFQUl4QyxNQUFNdmYsRUFBa0JGLEVBQVMsS0FHM0IyZixFQUFXLElBQUksV0FBV0YsQ0FBUyxFQUd6QyxJQUFJRyxFQUFZLEVBR2hCLFFBQVE3ZixFQUFRMGYsRUFBVSxFQUFHMWYsR0FBUyxFQUFHQSxJQUFXLENBRW5ELElBQUk4ZixFQUFVNWYsRUFBZUYsR0FBV0csRUFBZ0JILEdBQVc2ZixFQUdoRUMsRUFBVSxHQUNEQSxHQUFBLElBQ0NELEVBQUEsR0FJQUEsRUFBQSxFQUliRCxFQUFTNWYsR0FBVzhmLENBQ3JCLENBR08sT0FBQSxJQUFJLGlCQUFpQkYsQ0FBUSxDQUNyQyxDQU1BLElBQUlHLEVBQTZDLENBS2hELE1BQU10Z0IsRUFIaUIsS0FBSyxLQUdVLFdBR2xDLElBQUFrZ0IsRUFBYSxLQUFLLFFBQVFJLENBQU8sRUFHckMsR0FBR0osRUFBYSxFQUNmLE9BQU8sS0FBSyxRQUNiLEdBRWNBLElBQU4sRUFDQSxPQUFBLGlCQUFpQixNQUFNbGdCLENBQWMsRUFJckJzZ0IsRUFBUSxLQUdRLFdBT3BDLElBQUFDLEVBQVUsS0FBSyxRQUdYLE9BQUEsQ0FFRCxNQUFBQyxFQUFVRCxFQUFRLEtBQUtELENBQU8sRUFTcEMsR0FOQUMsRUFBUSxLQUFLLEVBR0FMLEVBQUFNLEVBQVEsUUFBUUYsQ0FBTyxFQUdqQ0osR0FBYyxFQUNULE9BQUFNLEVBSUVELEVBQUFDLENBQ1gsQ0FDRCxDQUVBLFFBQVFDLEVBQThCLENBS3JDLE1BQU16Z0IsRUFIaUIsS0FBSyxLQUdVLFdBR2xDLElBQUFrZ0IsRUFBYSxLQUFLLFFBQVFPLENBQVUsRUFHeEMsR0FBR1AsRUFBYSxFQUNmLE9BQU8sS0FBSyxRQUNiLEdBRWNBLElBQU4sRUFDQSxPQUFBLGlCQUFpQixNQUFNbGdCLENBQWMsRUFJckJ5Z0IsRUFBVyxLQUdLLFVBQ3pDLENBRUQsQ0NuVEEsTUFBTSxXQUFhLGlCQUFpQixNQUFNLEVBQUUsRUFLdEMscUJBQXVCLElBQUksaUJBQWlCLGNBQWMsa0VBQWtFLENBQUMsRUFHN0gsa0JBQW9CLEdBR3BCLGFBQWUsSUFBSSxpQkFDeEIsZ0JBQ0csR0FBTSxrQkFBb0IsR0FBSSxTQUFTLEVBQUUsRUFDMUMsS0FBSyxPQUFPLG9CQUFzQixDQUFDLEdBQUcsU0FBUyxHQUFJLEdBQUcsQ0FDeEQsQ0FBQyxFQUdtQixxQkFBcUIsS0FBSyxZQUFZLEVBSzNELElBQUksWUFHQSxpQkFBc0QsS0FHMUQsZUFBZSxnQkFBcUMsQ0FFaEQsR0FBQSxZQUFvQixPQUFBLFlBR3ZCLEdBQUcsaUJBRUssT0FBQSxJQUFJLFFBQVM1NkIsR0FBZSxDQUNsQyxpQkFBa0IsS0FBS0EsQ0FBVSxDQUFBLENBQ2pDLEVBSUYsaUJBQW1CLENBQUEsRUFHTCxZQUFBLE1BQU0scUJBQXFCLE9BQU8sZ0JBQWdCLElBQUksV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUc3RSxNQUFBNjZCLEVBQVUsaUJBQWlCLFFBR2QsaUJBQUEsS0FHbkIsVUFBVUMsS0FBZUQsRUFDeEJDLEVBQVksV0FBVyxFQUlqQixPQUFBLFdBQ1IsQ0FrQkEsTUFBTSxnQkFBa0IsSUFPakIsTUFBTSxZQUFhLENBd0VqQixZQUFzQkMsRUFBeUIsQ0FOdkRyaEIsR0FBQSxlQUFVLElBTW9CLEtBQUEsYUFBQXFoQixDQUEwQixDQXZFeEQsT0FBTyxZQUFZQyxFQUFrQyxDQUNwRCxPQUFPLFdBQVcsR0FBR0EsQ0FBSyxHQUFLLHFCQUFxQixHQUFHQSxDQUFLLENBQzdELENBS0EsYUFBYSxPQUFPNWQsRUFBNEI2ZCxFQUEwQkMsRUFBdUMsQ0FFNUcsYUFBYSxNQUFNLGVBQWUsRUFHaEMsTUFBQUMsRUFBYyxNQUFNL3NCLFNBQU82c0IsQ0FBWSxFQUc3QyxPQUFPLFlBQWEsMkJBQTJCN2QsRUFBZ0I4ZCxFQUFTQyxDQUFXLENBQ3BGLENBTUEsYUFBYSxtQkFBbUJDLEVBQWEsR0FBNEMsQ0FFcEYsYUFBYSxNQUFNLGVBQWUsRUFHdEMsTUFBTUMsRUFBUSxNQUFNLFdBQVcsT0FBTyxJQUFNLENBRXZDLElBQUF6QixFQUNFLEtBQUEsQ0FBQyxZQUFhLG1CQUFtQkEsRUFBUSxPQUFPLGdCQUFnQixJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUMsR0FBRSxDQUdwRixPQUFBQSxDQUFBLENBQ1AsRUFHRCxNQUFPLENBQUN5QixFQUFPLE1BQU0sYUFBYSxPQUFPQSxFQUFPRCxDQUFZLENBQUMsQ0FDOUQsQ0FNQSxPQUFPLG9CQUFvQkUsRUFBcUMsQ0FDeEQsT0FBQSxZQUFhLG9CQUFvQkEsQ0FBVyxDQUNwRCxDQVNBLGFBQWEsT0FBT0QsRUFBbUJELEVBQWEsR0FBOEIsQ0FFakYsT0FBSSxhQUFhLE1BQU0sZUFBZSxFQUcvQixNQUFNLElBQUksYUFBYSxXQUFZLEVBQUUsT0FBT0MsRUFBT0QsQ0FBWSxDQUN2RSxDQW1CQSxNQUFNLE9BQU9DLEVBQW1CRCxFQUFhLEdBQXNCLENBQ2xFLE1BQU1MLEVBQWUsS0FBSyxhQUdwQixNQUFBTSxFQUFNLE9BQVF6QixHQUFZLENBRS9CLEdBQUcsQ0FBQyxLQUFLLGFBQWEsbUJBQW1CQSxDQUFPLEVBQ3pDLE1BQUEsSUFBSSxNQUFNLDBDQUEwQyxFQUkzRCxZQUFZLElBQUksS0FBTSxDQUNyQixNQUFBeUIsRUFDQSxVQUFXTixFQUFhLDBCQUEwQm5CLENBQU8sRUFDekQsVUFBV21CLEVBQWEsNEJBQTRCbkIsQ0FBTyxFQUMzRCxhQUFBd0IsQ0FBQSxDQUNBLENBQUEsQ0FDRCxFQUdLLEtBQUEsQ0FDTCxVQUFBRyxFQUNBLFVBQUFDLENBQUEsRUFDRyxZQUFZLElBQUksSUFBSSxFQUd4QixHQUFHLENBQUNULEVBQWEsa0JBQWtCUSxDQUFTLEVBQ3JDLE1BQUEsSUFBSSxNQUFNLG9EQUFvRCxFQUlyRSxHQUFHLENBQUNSLEVBQWEsa0JBQWtCUyxDQUFTLEVBQ3JDLE1BQUEsSUFBSSxNQUFNLHNEQUFzRCxFQUl2RSxZQUFLLFFBQVUsR0FHUixJQUNSLENBUUEsZ0JBQWdCQyxFQUFlLEdBQW1CLENBQzNDLEtBQUEsQ0FDTCxVQUFBRixFQUNBLFVBQUFDLEVBQ0EsYUFBQUosQ0FBQSxFQUNHLFlBQVksSUFBSSxJQUFJLEVBR3hCLEdBQVlBLElBQVQsR0FFRixPQUFHSyxFQUNLRCxFQUlBRCxFQUtGLE1BQUEsSUFBSSxNQUFNLDhCQUE4QixDQUVoRCxDQU1BLE1BQU0sS0FBS04sRUFBMEJTLEVBQWdCLEdBQTRCLENBRTFFLE1BQUFQLEVBQWMsTUFBTS9zQixTQUFPNnNCLENBQVksRUFHdkMsQ0FDTCxNQUFBSSxDQUFBLEVBQ0csWUFBWSxJQUFJLElBQUksRUFHeEIsT0FBTyxNQUFNQSxFQUFNLE9BQVF6QixHQUN2QjhCLEVBQ0ssS0FBSyxhQUFhLHVCQUF1QjlCLEVBQVN1QixFQUFhLE9BQU8sZ0JBQWdCLElBQUksV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUd6RyxLQUFLLGFBQWEsdUJBQXVCdkIsRUFBU3VCLENBQVcsQ0FFckUsQ0FDRixDQU1BLE1BQU0sT0FBTy9kLEVBQTRCNmQsRUFBNEMsQ0FFOUUsTUFBQUUsRUFBYyxNQUFNL3NCLFNBQU82c0IsQ0FBWSxFQUd2QyxDQUNMLFVBQUFPLENBQUEsRUFDRyxZQUFZLElBQUksSUFBSSxFQUd4QixPQUFPLEtBQUssYUFBYSwyQkFBMkJwZSxFQUFnQm9lLEVBQVdMLENBQVcsQ0FDM0YsQ0FNQSxNQUFNLEtBQUtELEVBQTBDLENBRTlDLEtBQUEsQ0FDTCxNQUFBRyxDQUFBLEVBQ0csWUFBWSxJQUFJLElBQUksRUFHakIsT0FBQSxNQUFNQSxFQUFNLE9BQU96QixHQUFXLEtBQUssYUFBYSxLQUFLQSxFQUFTc0IsQ0FBTyxDQUFDLENBQzlFLENBR0EsSUFBSVMsRUFBNkMsQ0FFMUMsS0FBQSxDQUNMLE1BQUFOLENBQUEsRUFDRyxZQUFZLElBQUksSUFBSSxFQUdqQixPQUFBQSxFQUFNLE9BQWtCekIsR0FBQSxLQUFLLGFBQWEsbUJBQW1CQSxFQUFTK0IsQ0FBVSxDQUFDLENBQ3pGLENBb0JELENDblVPLE1BQU0sUUFBVSxtQkFBbUIsQ0FDekMsTUFBTyxpQkFDUCxVQUFXLE9BQ1gsTUFBTyxNQUFNQyxXQUFpQixpQkFBMkMsQ0FDeEUsT0FBTyxTQUFTQyxFQUEwRCxDQUNsRSxNQUFBLFdBQVdBLEVBQVMsYUFBYUEsRUFBUyxNQUNsRCxDQU1BLE1BQU0sSUFBSUEsRUFBbUUsQ0FFdEUsTUFBQS9ZLEVBQVE4WSxHQUFTLFNBQVNDLENBQVEsRUFHeEMsWUFBSyxTQUFTL1ksR0FBUytZLEVBR3ZCLE1BQU0sS0FBSyxPQUdKL1ksQ0FDUixDQUdELENBQ0QsQ0FBQyxFQ3BCWSxTQUFXLG1CQUFtQixDQUMxQyxNQUFPLGtCQUNQLFVBQVcsTUFDWCxNQUFPLE1BQU1nWixXQUFrQixnQkFBMkMsQ0FDekUsT0FBTyxRQUdMblksRUFBc0JHLEVBQWtELENBQ3pFLE1BQU8sV0FBV0gsYUFBcUJHLEVBQVMsUUFBUSxLQUFNLEdBQUcsR0FDbEUsQ0FFQSxPQUFPLFNBQVNpWSxFQUFvRSxDQUNuRixPQUFPRCxHQUFVLFFBQVFDLEVBQVUsT0FBUUEsRUFBVSxNQUFNLENBQzVELENBRUEsT0FBTyxJQUFJcFksRUFBc0JHLEVBQXdELENBQ3hGLE9BQU8sU0FBUyxLQUFLSyxHQUFNQSxFQUFHLElBQUlSLEVBQVdHLENBQVEsQ0FBQyxDQUN2RCxDQUVBLElBQUlILEVBQXNCRyxFQUErQyxDQUV4RSxNQUFNaEIsRUFBUWdaLEdBQVUsUUFBUW5ZLEVBQVdHLENBQVEsRUFHNUMsT0FBQSxLQUFLLFNBQVNoQixJQUFVLElBQ2hDLENBRUEsTUFBTSxJQUFJaVosRUFBNkUsQ0FFaEYsTUFBQWpaLEVBQVFnWixHQUFVLFNBQVNDLENBQVMsRUFHMUMsWUFBSyxTQUFTalosR0FBU2laLEVBR3ZCLE1BQU0sS0FBSyxPQUdKalosQ0FDUixDQUNELENBQ0QsQ0FBQyxFQ2RELElBQ0UsVUFBWSw2Q0FDWixTQUFXLEtBQUssS0FDaEIsVUFBWSxLQUFLLE1BRWpCLGVBQWlCLHFCQUNqQixjQUFnQixlQUFpQix5REFFakMsS0FBTyxLQUNQLFNBQVcsR0FDWCxpQkFBbUIsaUJBRW5CLFNBQVcsQ0FBQyxFQUFHLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQU0sS0FBTSxLQUFNLElBQUksRUFDakYsVUFBWSxJQUtaLElBQU0sSUFNUixTQUFTLE1BQU1rWixFQUFjLENBQzNCLElBQUlwTSxFQUFLcU0sRUFBYUMsRUFDcEJDLEVBQUlDLEVBQVUsVUFBWSxDQUFFLFlBQWFBLEVBQVcsU0FBVSxLQUFNLFFBQVMsSUFBTSxFQUNuRkMsRUFBTSxJQUFJRCxFQUFVLENBQUMsRUFVckJFLEVBQWlCLEdBYWpCQyxFQUFnQixFQU1oQkMsRUFBYSxHQUliQyxFQUFhLEdBTWJDLEVBQVUsS0FLVkMsRUFBVSxJQUdWQyxFQUFTLEdBa0JUQyxFQUFjLEVBSWRDLEVBQWdCLEVBR2hCQyxFQUFTLENBQ1AsT0FBUSxHQUNSLFVBQVcsRUFDWCxtQkFBb0IsRUFDcEIsZUFBZ0IsSUFDaEIsaUJBQWtCLElBQ2xCLGtCQUFtQixFQUNuQix1QkFBd0IsT0FDeEIsT0FBUSxFQUNULEVBS0RDLEVBQVcsdUNBQ1hDLEVBQWlDLEdBZ0JuQyxTQUFTYixFQUFVNzdCLEVBQUc5TCxFQUFHLENBQ3ZCLElBQUl5b0MsRUFBVTU4QixFQUFHNjhCLEVBQWE5a0MsRUFBRzNDLEVBQUcwbkMsRUFBTzNuQyxFQUFLK0MsRUFDOUN4RSxFQUFJLEtBR04sR0FBSSxFQUFFQSxhQUFhb29DLEdBQVksT0FBTyxJQUFJQSxFQUFVNzdCLEVBQUc5TCxDQUFDLEVBRXhELEdBQUlBLEdBQUssS0FBTSxDQUViLEdBQUk4TCxHQUFLQSxFQUFFLGVBQWlCLEdBQU0sQ0FDaEN2TSxFQUFFLEVBQUl1TSxFQUFFLEVBRUosQ0FBQ0EsRUFBRSxHQUFLQSxFQUFFLEVBQUlvOEIsRUFDaEIzb0MsRUFBRSxFQUFJQSxFQUFFLEVBQUksS0FDSHVNLEVBQUUsRUFBSW04QixFQUNmMW9DLEVBQUUsRUFBSSxDQUFDQSxFQUFFLEVBQUksQ0FBQyxHQUVkQSxFQUFFLEVBQUl1TSxFQUFFLEVBQ1J2TSxFQUFFLEVBQUl1TSxFQUFFLEVBQUUsTUFBSyxHQUdqQixNQUNELENBRUQsSUFBSzY4QixFQUFRLE9BQU83OEIsR0FBSyxXQUFhQSxFQUFJLEdBQUssRUFBRyxDQU1oRCxHQUhBdk0sRUFBRSxFQUFJLEVBQUl1TSxFQUFJLEdBQUtBLEVBQUksQ0FBQ0EsRUFBRyxJQUFNLEVBRzdCQSxJQUFNLENBQUMsQ0FBQ0EsRUFBRyxDQUNiLElBQUtsSSxFQUFJLEVBQUczQyxFQUFJNkssRUFBRzdLLEdBQUssR0FBSUEsR0FBSyxHQUFJMkMsSUFBSSxDQUVyQ0EsRUFBSXNrQyxFQUNOM29DLEVBQUUsRUFBSUEsRUFBRSxFQUFJLE1BRVpBLEVBQUUsRUFBSXFFLEVBQ05yRSxFQUFFLEVBQUksQ0FBQ3VNLENBQUMsR0FHVixNQUNELENBRUQvSCxFQUFNLE9BQU8rSCxDQUFDLENBQ3RCLEtBQWEsQ0FFTCxHQUFJLENBQUMsVUFBVSxLQUFLL0gsRUFBTSxPQUFPK0gsQ0FBQyxDQUFDLEVBQUcsT0FBTzI3QixFQUFhbG9DLEVBQUd3RSxFQUFLNGtDLENBQUssRUFFdkVwcEMsRUFBRSxFQUFJd0UsRUFBSSxXQUFXLENBQUMsR0FBSyxJQUFNQSxFQUFNQSxFQUFJLE1BQU0sQ0FBQyxFQUFHLElBQU0sQ0FDNUQsRUFHSUgsRUFBSUcsRUFBSSxRQUFRLEdBQUcsR0FBSyxLQUFJQSxFQUFNQSxFQUFJLFFBQVEsSUFBSyxFQUFFLElBR3JEOUMsRUFBSThDLEVBQUksT0FBTyxJQUFJLEdBQUssR0FHdkJILEVBQUksSUFBR0EsRUFBSTNDLEdBQ2YyQyxHQUFLLENBQUNHLEVBQUksTUFBTTlDLEVBQUksQ0FBQyxFQUNyQjhDLEVBQU1BLEVBQUksVUFBVSxFQUFHOUMsQ0FBQyxHQUNmMkMsRUFBSSxJQUdiQSxFQUFJRyxFQUFJLE9BR2hCLEtBQVcsQ0FPTCxHQUpBLFNBQVMvRCxFQUFHLEVBQUd1b0MsRUFBUyxPQUFRLE1BQU0sRUFJbEN2b0MsR0FBSyxJQUFNd29DLEVBQ2IsT0FBQWpwQyxFQUFJLElBQUlvb0MsRUFBVTc3QixDQUFDLEVBQ1o4OEIsRUFBTXJwQyxFQUFHc29DLEVBQWlCdG9DLEVBQUUsRUFBSSxFQUFHdW9DLENBQWEsRUFLekQsR0FGQS9qQyxFQUFNLE9BQU8rSCxDQUFDLEVBRVY2OEIsRUFBUSxPQUFPNzhCLEdBQUssU0FBVSxDQUdoQyxHQUFJQSxFQUFJLEdBQUssRUFBRyxPQUFPMjdCLEVBQWFsb0MsRUFBR3dFLEVBQUs0a0MsRUFBTzNvQyxDQUFDLEVBS3BELEdBSEFULEVBQUUsRUFBSSxFQUFJdU0sRUFBSSxHQUFLL0gsRUFBTUEsRUFBSSxNQUFNLENBQUMsRUFBRyxJQUFNLEVBR3pDNGpDLEVBQVUsT0FBUzVqQyxFQUFJLFFBQVEsWUFBYSxFQUFFLEVBQUUsT0FBUyxHQUMzRCxNQUFNLE1BQ0osY0FBZ0IrSCxDQUFDLENBRTdCLE1BQ1F2TSxFQUFFLEVBQUl3RSxFQUFJLFdBQVcsQ0FBQyxJQUFNLElBQU1BLEVBQU1BLEVBQUksTUFBTSxDQUFDLEVBQUcsSUFBTSxFQVE5RCxJQUxBMGtDLEVBQVdGLEVBQVMsTUFBTSxFQUFHdm9DLENBQUMsRUFDOUI0RCxFQUFJM0MsRUFBSSxFQUlIRCxFQUFNK0MsRUFBSSxPQUFROUMsRUFBSUQsRUFBS0MsSUFDOUIsR0FBSXduQyxFQUFTLFFBQVE1OEIsRUFBSTlILEVBQUksT0FBTzlDLENBQUMsQ0FBQyxFQUFJLEVBQUcsQ0FDM0MsR0FBSTRLLEdBQUssS0FHUCxHQUFJNUssRUFBSTJDLEVBQUcsQ0FDVEEsRUFBSTVDLEVBQ0osUUFDRCxVQUNRLENBQUMwbkMsSUFHTjNrQyxHQUFPQSxFQUFJLFlBQVcsSUFBT0EsRUFBTUEsRUFBSSxnQkFDdkNBLEdBQU9BLEVBQUksWUFBYSxJQUFLQSxFQUFNQSxFQUFJLFlBQVcsSUFBSyxDQUN6RDJrQyxFQUFjLEdBQ2R6bkMsRUFBSSxHQUNKMkMsRUFBSSxFQUNKLFFBQ0QsQ0FHSCxPQUFPNmpDLEVBQWFsb0MsRUFBRyxPQUFPdU0sQ0FBQyxFQUFHNjhCLEVBQU8zb0MsQ0FBQyxDQUMzQyxDQUlIMm9DLEVBQVEsR0FDUjVrQyxFQUFNeWpDLEVBQVl6akMsRUFBSy9ELEVBQUcsR0FBSVQsRUFBRSxDQUFDLEdBRzVCcUUsRUFBSUcsRUFBSSxRQUFRLEdBQUcsR0FBSyxHQUFJQSxFQUFNQSxFQUFJLFFBQVEsSUFBSyxFQUFFLEVBQ3JESCxFQUFJRyxFQUFJLE1BQ2QsQ0FHRCxJQUFLOUMsRUFBSSxFQUFHOEMsRUFBSSxXQUFXOUMsQ0FBQyxJQUFNLEdBQUlBLElBQUksQ0FHMUMsSUFBS0QsRUFBTStDLEVBQUksT0FBUUEsRUFBSSxXQUFXLEVBQUUvQyxDQUFHLElBQU0sSUFBSSxDQUVyRCxHQUFJK0MsRUFBTUEsRUFBSSxNQUFNOUMsRUFBRyxFQUFFRCxDQUFHLEVBQUcsQ0FJN0IsR0FIQUEsR0FBT0MsRUFHSDBuQyxHQUFTaEIsRUFBVSxPQUNyQjNtQyxFQUFNLEtBQU84SyxFQUFJLGtCQUFvQkEsSUFBTSxVQUFVQSxDQUFDLEdBQ3BELE1BQU0sTUFDSixjQUFpQnZNLEVBQUUsRUFBSXVNLENBQUUsRUFJL0IsSUFBS2xJLEVBQUlBLEVBQUkzQyxFQUFJLEdBQUtpbkMsRUFHcEIzb0MsRUFBRSxFQUFJQSxFQUFFLEVBQUksYUFHSHFFLEVBQUlxa0MsRUFHYjFvQyxFQUFFLEVBQUksQ0FBQ0EsRUFBRSxFQUFJLENBQUMsTUFDVCxDQVdMLEdBVkFBLEVBQUUsRUFBSXFFLEVBQ05yRSxFQUFFLEVBQUksR0FNTjBCLEdBQUsyQyxFQUFJLEdBQUssU0FDVkEsRUFBSSxJQUFHM0MsR0FBSyxVQUVaQSxFQUFJRCxFQUFLLENBR1gsSUFGSUMsR0FBRzFCLEVBQUUsRUFBRSxLQUFLLENBQUN3RSxFQUFJLE1BQU0sRUFBRzlDLENBQUMsQ0FBQyxFQUUzQkQsR0FBTyxTQUFVQyxFQUFJRCxHQUN4QnpCLEVBQUUsRUFBRSxLQUFLLENBQUN3RSxFQUFJLE1BQU05QyxFQUFHQSxHQUFLLFFBQVEsQ0FBQyxFQUd2Q0EsRUFBSSxVQUFZOEMsRUFBTUEsRUFBSSxNQUFNOUMsQ0FBQyxHQUFHLE1BQzlDLE1BQ1VBLEdBQUtELEVBR1AsS0FBT0MsSUFBSzhDLEdBQU8sSUFBSSxDQUN2QnhFLEVBQUUsRUFBRSxLQUFLLENBQUN3RSxDQUFHLENBQ2QsQ0FDUCxNQUdNeEUsRUFBRSxFQUFJLENBQUNBLEVBQUUsRUFBSSxDQUFDLENBRWpCLENBTURvb0MsRUFBVSxNQUFRLE1BRWxCQSxFQUFVLFNBQVcsRUFDckJBLEVBQVUsV0FBYSxFQUN2QkEsRUFBVSxXQUFhLEVBQ3ZCQSxFQUFVLFlBQWMsRUFDeEJBLEVBQVUsY0FBZ0IsRUFDMUJBLEVBQVUsZ0JBQWtCLEVBQzVCQSxFQUFVLGdCQUFrQixFQUM1QkEsRUFBVSxnQkFBa0IsRUFDNUJBLEVBQVUsaUJBQW1CLEVBQzdCQSxFQUFVLE9BQVMsRUFxQ25CQSxFQUFVLE9BQVNBLEVBQVUsSUFBTSxTQUFVeG5DLEVBQUssQ0FDaEQsSUFBSXNFLEVBQUdxSCxFQUVQLEdBQUkzTCxHQUFPLEtBRVQsR0FBSSxPQUFPQSxHQUFPLFNBQVUsQ0FzQzFCLEdBbENJQSxFQUFJLGVBQWVzRSxFQUFJLGdCQUFnQixJQUN6Q3FILEVBQUkzTCxFQUFJc0UsR0FDUixTQUFTcUgsRUFBRyxFQUFHLElBQUtySCxDQUFDLEVBQ3JCb2pDLEVBQWlCLzdCLEdBS2YzTCxFQUFJLGVBQWVzRSxFQUFJLGVBQWUsSUFDeENxSCxFQUFJM0wsRUFBSXNFLEdBQ1IsU0FBU3FILEVBQUcsRUFBRyxFQUFHckgsQ0FBQyxFQUNuQnFqQyxFQUFnQmg4QixHQU9kM0wsRUFBSSxlQUFlc0UsRUFBSSxnQkFBZ0IsSUFDekNxSCxFQUFJM0wsRUFBSXNFLEdBQ0pxSCxHQUFLQSxFQUFFLEtBQ1QsU0FBU0EsRUFBRSxHQUFJLENBQUMsSUFBSyxFQUFHckgsQ0FBQyxFQUN6QixTQUFTcUgsRUFBRSxHQUFJLEVBQUcsSUFBS3JILENBQUMsRUFDeEJzakMsRUFBYWo4QixFQUFFLEdBQ2ZrOEIsRUFBYWw4QixFQUFFLEtBRWYsU0FBU0EsRUFBRyxDQUFDLElBQUssSUFBS3JILENBQUMsRUFDeEJzakMsRUFBYSxFQUFFQyxFQUFhbDhCLEVBQUksRUFBSSxDQUFDQSxFQUFJQSxLQU96QzNMLEVBQUksZUFBZXNFLEVBQUksT0FBTyxFQUVoQyxHQURBcUgsRUFBSTNMLEVBQUlzRSxHQUNKcUgsR0FBS0EsRUFBRSxJQUNULFNBQVNBLEVBQUUsR0FBSSxDQUFDLElBQUssR0FBSXJILENBQUMsRUFDMUIsU0FBU3FILEVBQUUsR0FBSSxFQUFHLElBQUtySCxDQUFDLEVBQ3hCd2pDLEVBQVVuOEIsRUFBRSxHQUNabzhCLEVBQVVwOEIsRUFBRSxXQUVaLFNBQVNBLEVBQUcsQ0FBQyxJQUFLLElBQUtySCxDQUFDLEVBQ3BCcUgsRUFDRm04QixFQUFVLEVBQUVDLEVBQVVwOEIsRUFBSSxFQUFJLENBQUNBLEVBQUlBLE9BRW5DLE9BQU0sTUFDSixlQUFpQnJILEVBQUksb0JBQXNCcUgsQ0FBQyxFQVFwRCxHQUFJM0wsRUFBSSxlQUFlc0UsRUFBSSxRQUFRLEVBRWpDLEdBREFxSCxFQUFJM0wsRUFBSXNFLEdBQ0pxSCxJQUFNLENBQUMsQ0FBQ0EsRUFDVixHQUFJQSxFQUNGLEdBQUksT0FBTyxPQUFVLEtBQWUsU0FDbEMsT0FBTyxpQkFBbUIsT0FBTyxhQUNqQ3E4QixFQUFTcjhCLE1BRVQsT0FBQXE4QixFQUFTLENBQUNyOEIsRUFDSixNQUNKLGVBQWlCLG9CQUFvQixPQUd6Q3E4QixFQUFTcjhCLE1BR1gsT0FBTSxNQUNKLGVBQWlCckgsRUFBSSx1QkFBeUJxSCxDQUFDLEVBc0JyRCxHQWhCSTNMLEVBQUksZUFBZXNFLEVBQUksYUFBYSxJQUN0Q3FILEVBQUkzTCxFQUFJc0UsR0FDUixTQUFTcUgsRUFBRyxFQUFHLEVBQUdySCxDQUFDLEVBQ25CMmpDLEVBQWN0OEIsR0FLWjNMLEVBQUksZUFBZXNFLEVBQUksZUFBZSxJQUN4Q3FILEVBQUkzTCxFQUFJc0UsR0FDUixTQUFTcUgsRUFBRyxFQUFHLElBQUtySCxDQUFDLEVBQ3JCNGpDLEVBQWdCdjhCLEdBS2QzTCxFQUFJLGVBQWVzRSxFQUFJLFFBQVEsRUFFakMsR0FEQXFILEVBQUkzTCxFQUFJc0UsR0FDSixPQUFPcUgsR0FBSyxTQUFVdzhCLEVBQVN4OEIsTUFDOUIsT0FBTSxNQUNULGVBQWlCckgsRUFBSSxtQkFBcUJxSCxDQUFDLEVBSy9DLEdBQUkzTCxFQUFJLGVBQWVzRSxFQUFJLFVBQVUsRUFLbkMsR0FKQXFILEVBQUkzTCxFQUFJc0UsR0FJSixPQUFPcUgsR0FBSyxVQUFZLENBQUMsd0JBQXdCLEtBQUtBLENBQUMsRUFDekQwOEIsRUFBaUMxOEIsRUFBRSxNQUFNLEVBQUcsRUFBRSxHQUFLLGFBQ25EeThCLEVBQVd6OEIsTUFFWCxPQUFNLE1BQ0osZUFBaUJySCxFQUFJLGFBQWVxSCxDQUFDLENBSW5ELEtBR1EsT0FBTSxNQUNKLGVBQWlCLG9CQUFzQjNMLENBQUcsRUFJaEQsTUFBTyxDQUNMLGVBQWdCMG5DLEVBQ2hCLGNBQWVDLEVBQ2YsZUFBZ0IsQ0FBQ0MsRUFBWUMsQ0FBVSxFQUN2QyxNQUFPLENBQUNDLEVBQVNDLENBQU8sRUFDeEIsT0FBUUMsRUFDUixZQUFhQyxFQUNiLGNBQWVDLEVBQ2YsT0FBUUMsRUFDUixTQUFVQyxDQUNoQixDQUNBLEVBWUVaLEVBQVUsWUFBYyxTQUFVNzdCLEVBQUcsQ0FDbkMsR0FBSSxDQUFDQSxHQUFLQSxFQUFFLGVBQWlCLEdBQU0sTUFBTyxHQUMxQyxHQUFJLENBQUM2N0IsRUFBVSxNQUFPLE1BQU8sR0FFN0IsSUFBSTFtQyxFQUFHK0csRUFDTDZELEVBQUlDLEVBQUUsRUFDTmxJLEVBQUlrSSxFQUFFLEVBQ041QixFQUFJNEIsRUFBRSxFQUVSKzhCLEVBQUssR0FBSSxDQUFBLEVBQUcsU0FBUyxLQUFLaDlCLENBQUMsR0FBSyxrQkFFOUIsSUFBSzNCLElBQU0sR0FBS0EsSUFBTSxLQUFPdEcsR0FBSyxDQUFDLEtBQU9BLEdBQUssS0FBT0EsSUFBTSxVQUFVQSxDQUFDLEVBQUcsQ0FHeEUsR0FBSWlJLEVBQUUsS0FBTyxFQUFHLENBQ2QsR0FBSWpJLElBQU0sR0FBS2lJLEVBQUUsU0FBVyxFQUFHLE1BQU8sR0FDdEMsTUFBTWc5QixDQUNQLENBUUQsR0FMQTVuQyxHQUFLMkMsRUFBSSxHQUFLLFNBQ1YzQyxFQUFJLElBQUdBLEdBQUssVUFJWixPQUFPNEssRUFBRSxFQUFFLEVBQUUsUUFBVTVLLEVBQUcsQ0FFNUIsSUFBS0EsRUFBSSxFQUFHQSxFQUFJNEssRUFBRSxPQUFRNUssSUFFeEIsR0FEQStHLEVBQUk2RCxFQUFFNUssR0FDRitHLEVBQUksR0FBS0EsR0FBSyxNQUFRQSxJQUFNLFVBQVVBLENBQUMsRUFBRyxNQUFNNmdDLEVBSXRELEdBQUk3Z0MsSUFBTSxFQUFHLE1BQU8sRUFDckIsQ0FDRixVQUdRNkQsSUFBTSxNQUFRakksSUFBTSxPQUFTc0csSUFBTSxNQUFRQSxJQUFNLEdBQUtBLElBQU0sSUFDckUsTUFBTyxHQUdULE1BQU0sTUFDSCxlQUFpQixzQkFBd0I0QixDQUFDLENBQ2pELEVBUUU2N0IsRUFBVSxRQUFVQSxFQUFVLElBQU0sVUFBWSxDQUM5QyxPQUFPbUIsRUFBUyxVQUFXcEIsRUFBRSxFQUFFLENBQ25DLEVBUUVDLEVBQVUsUUFBVUEsRUFBVSxJQUFNLFVBQVksQ0FDOUMsT0FBT21CLEVBQVMsVUFBV3BCLEVBQUUsRUFBRSxDQUNuQyxFQWFFQyxFQUFVLE9BQVUsVUFBWSxDQUM5QixJQUFJb0IsRUFBVSxpQkFNVkMsRUFBa0IsS0FBSyxPQUFRLEVBQUdELEVBQVcsUUFDOUMsVUFBWSxDQUFFLE9BQU8sVUFBVSxLQUFLLE9BQVEsRUFBR0EsQ0FBTyxDQUFJLEVBQzFELFVBQVksQ0FBRSxPQUFTLEtBQUssT0FBTSxFQUFLLFdBQWEsR0FBSyxTQUN4RCxLQUFLLE9BQVEsRUFBRyxRQUFXLEVBQUcsRUFFbEMsT0FBTyxTQUFVRSxFQUFJLENBQ25CLElBQUlscEMsRUFBR0MsRUFBRzRELEVBQUdsRSxFQUFHb00sRUFDZDdLLEVBQUksRUFDSjRLLEVBQUksQ0FBRSxFQUNOcTlCLEVBQU8sSUFBSXZCLEVBQVVDLENBQUcsRUFPMUIsR0FMSXFCLEdBQU0sS0FBTUEsRUFBS3BCLEVBQ2hCLFNBQVNvQixFQUFJLEVBQUcsR0FBRyxFQUV4QnZwQyxFQUFJLFNBQVN1cEMsRUFBSyxRQUFRLEVBRXRCZCxFQUdGLEdBQUksT0FBTyxnQkFBaUIsQ0FJMUIsSUFGQXBvQyxFQUFJLE9BQU8sZ0JBQWdCLElBQUksWUFBWUwsR0FBSyxDQUFDLENBQUMsRUFFM0N1QixFQUFJdkIsR0FRVG9NLEVBQUkvTCxFQUFFa0IsR0FBSyxRQUFXbEIsRUFBRWtCLEVBQUksS0FBTyxJQU0vQjZLLEdBQUssTUFDUDlMLEVBQUksT0FBTyxnQkFBZ0IsSUFBSSxZQUFZLENBQUMsQ0FBQyxFQUM3Q0QsRUFBRWtCLEdBQUtqQixFQUFFLEdBQ1RELEVBQUVrQixFQUFJLEdBQUtqQixFQUFFLEtBS2I2TCxFQUFFLEtBQUtDLEVBQUksSUFBSSxFQUNmN0ssR0FBSyxHQUdUQSxFQUFJdkIsRUFBSSxDQUdsQixTQUFtQixPQUFPLFlBQWEsQ0FLN0IsSUFGQUssRUFBSSxPQUFPLFlBQVlMLEdBQUssQ0FBQyxFQUV0QnVCLEVBQUl2QixHQU1Ub00sR0FBTS9MLEVBQUVrQixHQUFLLElBQU0sZ0JBQW9CbEIsRUFBRWtCLEVBQUksR0FBSyxjQUM5Q2xCLEVBQUVrQixFQUFJLEdBQUssV0FBZ0JsQixFQUFFa0IsRUFBSSxHQUFLLFVBQ3RDbEIsRUFBRWtCLEVBQUksSUFBTSxLQUFPbEIsRUFBRWtCLEVBQUksSUFBTSxHQUFLbEIsRUFBRWtCLEVBQUksR0FFMUM2SyxHQUFLLEtBQ1AsT0FBTyxZQUFZLENBQUMsRUFBRSxLQUFLL0wsRUFBR2tCLENBQUMsR0FJL0I0SyxFQUFFLEtBQUtDLEVBQUksSUFBSSxFQUNmN0ssR0FBSyxHQUdUQSxFQUFJdkIsRUFBSSxDQUNsQixLQUNVLE9BQUF5b0MsRUFBUyxHQUNILE1BQ0osZUFBaUIsb0JBQW9CLEVBSzNDLEdBQUksQ0FBQ0EsRUFFSCxLQUFPbG5DLEVBQUl2QixHQUNUb00sRUFBSWs5QixFQUFjLEVBQ2RsOUIsRUFBSSxPQUFNRCxFQUFFNUssS0FBTzZLLEVBQUksTUFjL0IsSUFWQXBNLEVBQUltTSxFQUFFLEVBQUU1SyxHQUNSZ29DLEdBQU0sU0FHRnZwQyxHQUFLdXBDLElBQ1BuOUIsRUFBSSxTQUFTLFNBQVdtOUIsR0FDeEJwOUIsRUFBRTVLLEdBQUssVUFBVXZCLEVBQUlvTSxDQUFDLEVBQUlBLEdBSXJCRCxFQUFFNUssS0FBTyxFQUFHNEssRUFBRSxJQUFLLEVBQUU1SyxJQUFJLENBR2hDLEdBQUlBLEVBQUksRUFDTjRLLEVBQUksQ0FBQ2pJLEVBQUksQ0FBQyxNQUNMLENBR0wsSUFBS0EsRUFBSSxHQUFLaUksRUFBRSxLQUFPLEVBQUdBLEVBQUUsT0FBTyxFQUFHLENBQUMsRUFBR2pJLEdBQUssU0FBUyxDQUd4RCxJQUFLM0MsRUFBSSxFQUFHNkssRUFBSUQsRUFBRSxHQUFJQyxHQUFLLEdBQUlBLEdBQUssR0FBSTdLLElBQUksQ0FHeENBLEVBQUksV0FBVTJDLEdBQUssU0FBVzNDLEVBQ25DLENBRUQsT0FBQWlvQyxFQUFLLEVBQUl0bEMsRUFDVHNsQyxFQUFLLEVBQUlyOUIsRUFDRnE5QixDQUNiLENBQ0EsSUFRRXZCLEVBQVUsSUFBTSxVQUFZLENBSTFCLFFBSEkxbUMsRUFBSSxFQUNOa3hCLEVBQU8sVUFDUGdYLEVBQU0sSUFBSXhCLEVBQVV4VixFQUFLLEVBQUUsRUFDdEJseEIsRUFBSWt4QixFQUFLLFFBQVNnWCxFQUFNQSxFQUFJLEtBQUtoWCxFQUFLbHhCLElBQUksRUFDakQsT0FBT2tvQyxDQUNYLEVBT0UzQixFQUFlLFVBQVksQ0FDekIsSUFBSTRCLEVBQVUsYUFPZCxTQUFTQyxFQUFVdGxDLEVBQUt1bEMsRUFBUUMsRUFBU2QsRUFBVSxDQU9qRCxRQU5JcHNCLEVBQ0YyakIsRUFBTSxDQUFDLENBQUMsRUFDUndKLEVBQ0F2b0MsRUFBSSxFQUNKRCxFQUFNK0MsRUFBSSxPQUVMOUMsRUFBSUQsR0FBTSxDQUNmLElBQUt3b0MsRUFBT3hKLEVBQUksT0FBUXdKLElBQVF4SixFQUFJd0osSUFBU0YsRUFBTyxDQUlwRCxJQUZBdEosRUFBSSxJQUFNeUksRUFBUyxRQUFRMWtDLEVBQUksT0FBTzlDLEdBQUcsQ0FBQyxFQUVyQ29iLEVBQUksRUFBR0EsRUFBSTJqQixFQUFJLE9BQVEzakIsSUFFdEIyakIsRUFBSTNqQixHQUFLa3RCLEVBQVUsSUFDakJ2SixFQUFJM2pCLEVBQUksSUFBTSxPQUFNMmpCLEVBQUkzakIsRUFBSSxHQUFLLEdBQ3JDMmpCLEVBQUkzakIsRUFBSSxJQUFNMmpCLEVBQUkzakIsR0FBS2t0QixFQUFVLEVBQ2pDdkosRUFBSTNqQixJQUFNa3RCLEVBR2YsQ0FFRCxPQUFPdkosRUFBSSxTQUNaLENBS0QsT0FBTyxTQUFVajhCLEVBQUt1bEMsRUFBUUMsRUFBU3ZXLEVBQU15VyxFQUFrQixDQUM3RCxJQUFJaEIsRUFBVTVoQyxFQUFHakQsRUFBR2xFLEVBQUd3eEIsRUFBRzN4QixFQUFHbXFDLEVBQUlod0IsRUFDL0J6WSxFQUFJOEMsRUFBSSxRQUFRLEdBQUcsRUFDbkJrbEMsRUFBS3BCLEVBQ0w4QixFQUFLN0IsRUErQlAsSUE1Qkk3bUMsR0FBSyxJQUNQdkIsRUFBSTJvQyxFQUdKQSxFQUFnQixFQUNoQnRrQyxFQUFNQSxFQUFJLFFBQVEsSUFBSyxFQUFFLEVBQ3pCMlYsRUFBSSxJQUFJaXVCLEVBQVUyQixDQUFNLEVBQ3hCL3BDLEVBQUltYSxFQUFFLElBQUkzVixFQUFJLE9BQVM5QyxDQUFDLEVBQ3hCb25DLEVBQWdCM29DLEVBS2hCZ2EsRUFBRSxFQUFJMnZCLEVBQVUsYUFBYSxjQUFjOXBDLEVBQUUsQ0FBQyxFQUFHQSxFQUFFLEVBQUcsR0FBRyxFQUN4RCxHQUFJZ3FDLEVBQVNILENBQU8sRUFDckIxdkIsRUFBRSxFQUFJQSxFQUFFLEVBQUUsUUFLWmd3QixFQUFLTCxFQUFVdGxDLEVBQUt1bEMsRUFBUUMsRUFBU0UsR0FDakNoQixFQUFXRixFQUFVYSxJQUNyQlgsRUFBV1csRUFBU2IsRUFBUyxFQUdqQzNrQyxFQUFJbEUsRUFBSWdxQyxFQUFHLE9BR0pBLEVBQUcsRUFBRWhxQyxJQUFNLEVBQUdncUMsRUFBRyxJQUFHLEVBQUcsQ0FHOUIsR0FBSSxDQUFDQSxFQUFHLEdBQUksT0FBT2pCLEVBQVMsT0FBTyxDQUFDLEVBcUNwQyxHQWxDSXhuQyxFQUFJLEVBQ04sRUFBRTJDLEdBRUZyRSxFQUFFLEVBQUltcUMsRUFDTm5xQyxFQUFFLEVBQUlxRSxFQUdOckUsRUFBRSxFQUFJeXpCLEVBQ056ekIsRUFBSTQ3QixFQUFJNTdCLEVBQUdtYSxFQUFHdXZCLEVBQUlVLEVBQUlKLENBQU8sRUFDN0JHLEVBQUtucUMsRUFBRSxFQUNQMnhCLEVBQUkzeEIsRUFBRSxFQUNOcUUsRUFBSXJFLEVBQUUsR0FNUnNILEVBQUlqRCxFQUFJcWxDLEVBQUssRUFHYmhvQyxFQUFJeW9DLEVBQUc3aUMsR0FJUG5ILEVBQUk2cEMsRUFBVSxFQUNkclksRUFBSUEsR0FBS3JxQixFQUFJLEdBQUs2aUMsRUFBRzdpQyxFQUFJLElBQU0sS0FFL0JxcUIsRUFBSXlZLEVBQUssR0FBSzFvQyxHQUFLLE1BQVFpd0IsS0FBT3lZLEdBQU0sR0FBS0EsSUFBT3BxQyxFQUFFLEVBQUksRUFBSSxFQUFJLElBQzFEMEIsRUFBSXZCLEdBQUt1QixHQUFLdkIsSUFBS2lxQyxHQUFNLEdBQUt6WSxHQUFLeVksR0FBTSxHQUFLRCxFQUFHN2lDLEVBQUksR0FBSyxHQUMzRDhpQyxJQUFPcHFDLEVBQUUsRUFBSSxFQUFJLEVBQUksSUFLeEJzSCxFQUFJLEdBQUssQ0FBQzZpQyxFQUFHLEdBR2YzbEMsRUFBTW10QixFQUFJLGFBQWF1WCxFQUFTLE9BQU8sQ0FBQyxFQUFHLENBQUNRLEVBQUlSLEVBQVMsT0FBTyxDQUFDLENBQUMsRUFBSUEsRUFBUyxPQUFPLENBQUMsTUFDbEYsQ0FNTCxHQUhBaUIsRUFBRyxPQUFTN2lDLEVBR1JxcUIsRUFHRixJQUFLLEVBQUVxWSxFQUFTLEVBQUVHLEVBQUcsRUFBRTdpQyxHQUFLMGlDLEdBQzFCRyxFQUFHN2lDLEdBQUssRUFFSEEsSUFDSCxFQUFFakQsRUFDRjhsQyxFQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU9BLENBQUUsR0FNeEIsSUFBS2hxQyxFQUFJZ3FDLEVBQUcsT0FBUSxDQUFDQSxFQUFHLEVBQUVocUMsSUFBSSxDQUc5QixJQUFLdUIsRUFBSSxFQUFHOEMsRUFBTSxHQUFJOUMsR0FBS3ZCLEVBQUdxRSxHQUFPMGtDLEVBQVMsT0FBT2lCLEVBQUd6b0MsSUFBSSxFQUFFLENBRzlEOEMsRUFBTSxhQUFhQSxFQUFLSCxFQUFHNmtDLEVBQVMsT0FBTyxDQUFDLENBQUMsQ0FDOUMsQ0FHRCxPQUFPMWtDLENBQ2IsQ0FDQSxJQUlFbzNCLEVBQU8sVUFBWSxDQUdqQixTQUFTNEMsRUFBU3grQixFQUFHRyxFQUFHa3FDLEVBQU0sQ0FDNUIsSUFBSUMsRUFBR0MsRUFBTUMsRUFBS0MsRUFDaEJDLEVBQVEsRUFDUmhwQyxFQUFJMUIsRUFBRSxPQUNOMnFDLEVBQU14cUMsRUFBSSxVQUNWeXFDLEVBQU16cUMsRUFBSSxVQUFZLEVBRXhCLElBQUtILEVBQUlBLEVBQUUsTUFBTyxFQUFFMEIsS0FDbEI4b0MsRUFBTXhxQyxFQUFFMEIsR0FBSyxVQUNiK29DLEVBQU16cUMsRUFBRTBCLEdBQUssVUFBWSxFQUN6QjRvQyxFQUFJTSxFQUFNSixFQUFNQyxFQUFNRSxFQUN0QkosRUFBT0ksRUFBTUgsRUFBUUYsRUFBSSxVQUFhLFVBQWFJLEVBQ25EQSxHQUFTSCxFQUFPRixFQUFPLElBQU1DLEVBQUksVUFBWSxHQUFLTSxFQUFNSCxFQUN4RHpxQyxFQUFFMEIsR0FBSzZvQyxFQUFPRixFQUdoQixPQUFJSyxJQUFPMXFDLEVBQUksQ0FBQzBxQyxDQUFLLEVBQUUsT0FBTzFxQyxDQUFDLEdBRXhCQSxDQUNSLENBRUQsU0FBU285QixFQUFRNThCLEVBQUdDLEVBQUdvcUMsRUFBSUMsRUFBSSxDQUM3QixJQUFJcHBDLEVBQUdxcEMsRUFFUCxHQUFJRixHQUFNQyxFQUNSQyxFQUFNRixFQUFLQyxFQUFLLEVBQUksT0FHcEIsS0FBS3BwQyxFQUFJcXBDLEVBQU0sRUFBR3JwQyxFQUFJbXBDLEVBQUlucEMsSUFFeEIsR0FBSWxCLEVBQUVrQixJQUFNakIsRUFBRWlCLEdBQUksQ0FDaEJxcEMsRUFBTXZxQyxFQUFFa0IsR0FBS2pCLEVBQUVpQixHQUFLLEVBQUksR0FDeEIsS0FDRCxDQUlMLE9BQU9xcEMsQ0FDUixDQUVELFNBQVN6TSxFQUFTOTlCLEVBQUdDLEVBQUdvcUMsRUFBSVIsRUFBTSxDQUloQyxRQUhJM29DLEVBQUksRUFHRG1wQyxLQUNMcnFDLEVBQUVxcUMsSUFBT25wQyxFQUNUQSxFQUFJbEIsRUFBRXFxQyxHQUFNcHFDLEVBQUVvcUMsR0FBTSxFQUFJLEVBQ3hCcnFDLEVBQUVxcUMsR0FBTW5wQyxFQUFJMm9DLEVBQU83cEMsRUFBRXFxQyxHQUFNcHFDLEVBQUVvcUMsR0FJL0IsS0FBTyxDQUFDcnFDLEVBQUUsSUFBTUEsRUFBRSxPQUFTLEVBQUdBLEVBQUUsT0FBTyxFQUFHLENBQUMsRUFBRSxDQUM5QyxDQUdELE9BQU8sU0FBVVIsRUFBR21hLEVBQUd1dkIsRUFBSVUsRUFBSUMsRUFBTSxDQUNuQyxJQUFJVSxFQUFLMW1DLEVBQUczQyxFQUFHc3BDLEVBQU12aUMsRUFBR3dpQyxFQUFNQyxFQUFPLEVBQUdDLEVBQUlyUCxFQUFLc1AsRUFBTUMsR0FBTUMsRUFBSUMsRUFBSUMsR0FDbkVDLEdBQUlDLEdBQ0ovZ0MsR0FBSTNLLEVBQUUsR0FBS21hLEVBQUUsRUFBSSxFQUFJLEdBQ3JCZ3dCLEVBQUtucUMsRUFBRSxFQUNQMnJDLEdBQUt4eEIsRUFBRSxFQUdULEdBQUksQ0FBQ2d3QixHQUFNLENBQUNBLEVBQUcsSUFBTSxDQUFDd0IsSUFBTSxDQUFDQSxHQUFHLEdBRTlCLE9BQU8sSUFBSXZELEVBR1YsQ0FBQ3BvQyxFQUFFLEdBQUssQ0FBQ21hLEVBQUUsSUFBTWd3QixFQUFLd0IsSUFBTXhCLEVBQUcsSUFBTXdCLEdBQUcsR0FBSyxDQUFDQSxJQUFNLElBR25EeEIsR0FBTUEsRUFBRyxJQUFNLEdBQUssQ0FBQ3dCLEdBQUtoaEMsR0FBSSxFQUFJQSxHQUFJLENBQ2hELEVBZ0JNLElBYkEsRUFBSSxJQUFJeTlCLEVBQVV6OUIsRUFBQyxFQUNuQndnQyxFQUFLLEVBQUUsRUFBSSxHQUNYOW1DLEVBQUlyRSxFQUFFLEVBQUltYSxFQUFFLEVBQ1p4UCxHQUFJKytCLEVBQUtybEMsRUFBSSxFQUVSZ21DLElBQ0hBLEVBQU8sS0FDUGhtQyxFQUFJLFNBQVNyRSxFQUFFLEVBQUksUUFBUSxFQUFJLFNBQVNtYSxFQUFFLEVBQUksUUFBUSxFQUN0RHhQLEdBQUlBLEdBQUksU0FBVyxHQUtoQmpKLEVBQUksRUFBR2lxQyxHQUFHanFDLEtBQU95b0MsRUFBR3pvQyxJQUFNLEdBQUlBLElBQUksQ0FJdkMsR0FGSWlxQyxHQUFHanFDLElBQU15b0MsRUFBR3pvQyxJQUFNLElBQUkyQyxJQUV0QnNHLEdBQUksRUFDTndnQyxFQUFHLEtBQUssQ0FBQyxFQUNUSCxFQUFPLE9BQ0YsQ0F3QkwsSUF2QkFPLEVBQUtwQixFQUFHLE9BQ1JzQixHQUFLRSxHQUFHLE9BQ1JqcUMsRUFBSSxFQUNKaUosSUFBSyxFQUlMbEMsRUFBSSxVQUFVNGhDLEdBQVFzQixHQUFHLEdBQUssRUFBRSxFQUk1QmxqQyxFQUFJLElBQ05rakMsR0FBS25OLEVBQVNtTixHQUFJbGpDLEVBQUc0aEMsQ0FBSSxFQUN6QkYsRUFBSzNMLEVBQVMyTCxFQUFJMWhDLEVBQUc0aEMsQ0FBSSxFQUN6Qm9CLEdBQUtFLEdBQUcsT0FDUkosRUFBS3BCLEVBQUcsUUFHVm1CLEVBQUtHLEdBQ0wzUCxFQUFNcU8sRUFBRyxNQUFNLEVBQUdzQixFQUFFLEVBQ3BCTCxFQUFPdFAsRUFBSSxPQUdKc1AsRUFBT0ssR0FBSTNQLEVBQUlzUCxLQUFVLEVBQUUsQ0FDbENNLEdBQUtDLEdBQUcsUUFDUkQsR0FBSyxDQUFDLENBQUMsRUFBRSxPQUFPQSxFQUFFLEVBQ2xCRixHQUFNRyxHQUFHLEdBQ0xBLEdBQUcsSUFBTXRCLEVBQU8sR0FBR21CLEtBSXZCLEVBQUcsQ0FPRCxHQU5BL2lDLEVBQUksRUFHSnNpQyxFQUFNM04sRUFBUXVPLEdBQUk3UCxFQUFLMlAsR0FBSUwsQ0FBSSxFQUczQkwsRUFBTSxFQUFHLENBcUJYLEdBakJBTSxHQUFPdlAsRUFBSSxHQUNQMlAsSUFBTUwsSUFBTUMsR0FBT0EsR0FBT2hCLEdBQVF2TyxFQUFJLElBQU0sSUFHaERyekIsRUFBSSxVQUFVNGlDLEdBQU9HLEVBQUcsRUFhcEIvaUMsRUFBSSxFQWNOLElBWElBLEdBQUs0aEMsSUFBTTVoQyxFQUFJNGhDLEVBQU8sR0FHMUJZLEVBQU96TSxFQUFTbU4sR0FBSWxqQyxFQUFHNGhDLENBQUksRUFDM0JhLEVBQVFELEVBQUssT0FDYkcsRUFBT3RQLEVBQUksT0FNSnNCLEVBQVE2TixFQUFNblAsRUFBS29QLEVBQU9FLENBQUksR0FBSyxHQUN4QzNpQyxJQUdBNjFCLEVBQVMyTSxFQUFNUSxHQUFLUCxFQUFRUSxHQUFLQyxHQUFJVCxFQUFPYixDQUFJLEVBQ2hEYSxFQUFRRCxFQUFLLE9BQ2JGLEVBQU0sT0FRSnRpQyxHQUFLLElBR1BzaUMsRUFBTXRpQyxFQUFJLEdBSVp3aUMsRUFBT1UsR0FBRyxRQUNWVCxFQUFRRCxFQUFLLE9BVWYsR0FQSUMsRUFBUUUsSUFBTUgsRUFBTyxDQUFDLENBQUMsRUFBRSxPQUFPQSxDQUFJLEdBR3hDM00sRUFBU3hDLEVBQUttUCxFQUFNRyxFQUFNZixDQUFJLEVBQzlCZSxFQUFPdFAsRUFBSSxPQUdQaVAsR0FBTyxHQU1ULEtBQU8zTixFQUFRdU8sR0FBSTdQLEVBQUsyUCxHQUFJTCxDQUFJLEVBQUksR0FDbEMzaUMsSUFHQTYxQixFQUFTeEMsRUFBSzJQLEdBQUtMLEVBQU9NLEdBQUtDLEdBQUlQLEVBQU1mLENBQUksRUFDN0NlLEVBQU90UCxFQUFJLE1BRzNCLE1BQXFCaVAsSUFBUSxJQUNqQnRpQyxJQUNBcXpCLEVBQU0sQ0FBQyxDQUFDLEdBSVZxUCxFQUFHenBDLEtBQU8rRyxFQUdOcXpCLEVBQUksR0FDTkEsRUFBSXNQLEtBQVVqQixFQUFHbUIsSUFBTyxHQUV4QnhQLEVBQU0sQ0FBQ3FPLEVBQUdtQixFQUFHLEVBQ2JGLEVBQU8sRUFFbkIsUUFBa0JFLElBQU9DLEdBQU16UCxFQUFJLElBQU0sT0FBU254QixNQUUxQ3FnQyxFQUFPbFAsRUFBSSxJQUFNLEtBR1pxUCxFQUFHLElBQUlBLEVBQUcsT0FBTyxFQUFHLENBQUMsQ0FDM0IsQ0FFRCxHQUFJZCxHQUFRLEtBQU0sQ0FHaEIsSUFBSzNvQyxFQUFJLEVBQUdpSixHQUFJd2dDLEVBQUcsR0FBSXhnQyxJQUFLLEdBQUlBLElBQUssR0FBSWpKLElBQUksQ0FFN0MybkMsRUFBTSxFQUFHSyxHQUFNLEVBQUUsRUFBSWhvQyxFQUFJMkMsRUFBSSxTQUFXLEdBQUssRUFBRytsQyxFQUFJWSxDQUFJLENBR2hFLE1BQ1EsRUFBRSxFQUFJM21DLEVBQ04sRUFBRSxFQUFJLENBQUMybUMsRUFHVCxPQUFPLENBQ2IsQ0FDQSxJQVlFLFNBQVNZLEVBQU9uakMsRUFBRy9HLEVBQUcwb0MsRUFBSXlCLEVBQUksQ0FDNUIsSUFBSUMsRUFBSXpuQyxFQUFHMG5DLEVBQUl0cUMsRUFBSytDLEVBS3BCLEdBSEk0bEMsR0FBTSxLQUFNQSxFQUFLN0IsRUFDaEIsU0FBUzZCLEVBQUksRUFBRyxDQUFDLEVBRWxCLENBQUMzaEMsRUFBRSxFQUFHLE9BQU9BLEVBQUUsU0FBUSxFQUszQixHQUhBcWpDLEVBQUtyakMsRUFBRSxFQUFFLEdBQ1RzakMsRUFBS3RqQyxFQUFFLEVBRUgvRyxHQUFLLEtBQ1A4QyxFQUFNLGNBQWNpRSxFQUFFLENBQUMsRUFDdkJqRSxFQUFNcW5DLEdBQU0sR0FBS0EsR0FBTSxJQUFNRSxHQUFNdkQsR0FBY3VELEdBQU10RCxHQUNwRCxjQUFjamtDLEVBQUt1bkMsQ0FBRSxFQUNyQixhQUFhdm5DLEVBQUt1bkMsRUFBSSxHQUFHLFVBRTVCdGpDLEVBQUk0Z0MsRUFBTSxJQUFJakIsRUFBVTMvQixDQUFDLEVBQUcvRyxFQUFHMG9DLENBQUUsRUFHakMvbEMsRUFBSW9FLEVBQUUsRUFFTmpFLEVBQU0sY0FBY2lFLEVBQUUsQ0FBQyxFQUN2QmhILEVBQU0rQyxFQUFJLE9BT05xbkMsR0FBTSxHQUFLQSxHQUFNLElBQU1ucUMsR0FBSzJDLEdBQUtBLEdBQUtta0MsR0FBYSxDQUdyRCxLQUFPL21DLEVBQU1DLEVBQUc4QyxHQUFPLElBQUsvQyxJQUFNLENBQ2xDK0MsRUFBTSxjQUFjQSxFQUFLSCxDQUFDLENBR2xDLFNBQ1EzQyxHQUFLcXFDLEVBQ0x2bkMsRUFBTSxhQUFhQSxFQUFLSCxFQUFHLEdBQUcsRUFHMUJBLEVBQUksRUFBSTVDLEdBQ1YsR0FBSSxFQUFFQyxFQUFJLEVBQUcsSUFBSzhDLEdBQU8sSUFBSzlDLElBQUs4QyxHQUFPLElBQUksVUFFOUM5QyxHQUFLMkMsRUFBSTVDLEVBQ0xDLEVBQUksRUFFTixJQURJMkMsRUFBSSxHQUFLNUMsSUFBSytDLEdBQU8sS0FDbEI5QyxJQUFLOEMsR0FBTyxJQUFJLENBTS9CLE9BQU9pRSxFQUFFLEVBQUksR0FBS3FqQyxFQUFLLElBQU10bkMsRUFBTUEsQ0FDcEMsQ0FJRCxTQUFTK2tDLEVBQVMzVyxFQUFNdUgsRUFBUSxDQUs5QixRQUpJMXhCLEVBQ0YvRyxFQUFJLEVBQ0osRUFBSSxJQUFJMG1DLEVBQVV4VixFQUFLLEVBQUUsRUFFcEJseEIsRUFBSWt4QixFQUFLLE9BQVFseEIsSUFJdEIsR0FIQStHLEVBQUksSUFBSTIvQixFQUFVeFYsRUFBS2x4QixFQUFFLEVBR3BCK0csRUFBRSxFQUdJMHhCLEVBQU8sS0FBSyxFQUFHMXhCLENBQUMsSUFDekIsRUFBSUEsT0FKSSxDQUNSLEVBQUlBLEVBQ0osS0FDRCxDQUtILE9BQU8sQ0FDUixDQU9ELFNBQVN1akMsRUFBVXZqQyxFQUFHNkQsRUFBR2pJLEVBQUcsQ0FLMUIsUUFKSTNDLEVBQUksRUFDTm9iLEVBQUl4USxFQUFFLE9BR0QsQ0FBQ0EsRUFBRSxFQUFFd1EsR0FBSXhRLEVBQUUsSUFBRyxFQUFHLENBR3hCLElBQUt3USxFQUFJeFEsRUFBRSxHQUFJd1EsR0FBSyxHQUFJQSxHQUFLLEdBQUlwYixJQUFJLENBR3JDLE9BQUsyQyxFQUFJM0MsRUFBSTJDLEVBQUksU0FBVyxHQUFLc2tDLEVBRy9CbGdDLEVBQUUsRUFBSUEsRUFBRSxFQUFJLEtBR0hwRSxFQUFJcWtDLEVBR2JqZ0MsRUFBRSxFQUFJLENBQUNBLEVBQUUsRUFBSSxDQUFDLEdBRWRBLEVBQUUsRUFBSXBFLEVBQ05vRSxFQUFFLEVBQUk2RCxHQUdEN0QsQ0FDUixDQUlEeS9CLEVBQWdCLFVBQVksQ0FDMUIsSUFBSStELEVBQWEsOEJBQ2ZDLEVBQVcsY0FDWEMsRUFBWSxjQUNaQyxFQUFrQixxQkFDbEJDLEVBQW1CLDZCQUVyQixPQUFPLFNBQVVyc0MsRUFBR3dFLEVBQUs0a0MsRUFBTzNvQyxFQUFHLENBQ2pDLElBQUk0cEMsRUFDRjEvQixFQUFJeStCLEVBQVE1a0MsRUFBTUEsRUFBSSxRQUFRNm5DLEVBQWtCLEVBQUUsRUFHcEQsR0FBSUQsRUFBZ0IsS0FBS3poQyxDQUFDLEVBQ3hCM0ssRUFBRSxFQUFJLE1BQU0ySyxDQUFDLEVBQUksS0FBT0EsRUFBSSxFQUFJLEdBQUssTUFDaEMsQ0FDTCxHQUFJLENBQUN5K0IsSUFHSHorQixFQUFJQSxFQUFFLFFBQVFzaEMsRUFBWSxTQUFVM0IsRUFBR2dDLEVBQUlDLEVBQUksQ0FDN0MsT0FBQWxDLEdBQVFrQyxFQUFLQSxFQUFHLFlBQWEsSUFBSyxJQUFNLEdBQUtBLEdBQU0sSUFBTSxFQUFJLEVBQ3RELENBQUM5ckMsR0FBS0EsR0FBSzRwQyxFQUFPaUMsRUFBS2hDLENBQzFDLENBQVcsRUFFRzdwQyxJQUNGNHBDLEVBQU81cEMsRUFHUGtLLEVBQUlBLEVBQUUsUUFBUXVoQyxFQUFVLElBQUksRUFBRSxRQUFRQyxFQUFXLE1BQU0sR0FHckQzbkMsR0FBT21HLEdBQUcsT0FBTyxJQUFJeTlCLEVBQVV6OUIsRUFBRzAvQixDQUFJLEVBSzVDLEdBQUlqQyxFQUFVLE1BQ1osTUFBTSxNQUNILGVBQWlCLFNBQVczbkMsRUFBSSxTQUFXQSxFQUFJLElBQU0sWUFBYytELENBQUcsRUFJM0V4RSxFQUFFLEVBQUksSUFDUCxDQUVEQSxFQUFFLEVBQUlBLEVBQUUsRUFBSSxJQUNiLENBQ0wsSUFPRSxTQUFTcXBDLEVBQU1ycEMsRUFBR3dzQyxFQUFJcEMsRUFBSXpZLEVBQUcsQ0FDM0IsSUFBSXJxQixFQUFHNUYsRUFBR29iLEVBQUczYyxFQUFHc0ksRUFBR2drQyxFQUFJQyxFQUNyQnZDLEVBQUtucUMsRUFBRSxFQUNQMnNDLEVBQVMsU0FHWCxHQUFJeEMsRUFBSSxDQVFOYixFQUFLLENBR0gsSUFBS2hpQyxFQUFJLEVBQUduSCxFQUFJZ3FDLEVBQUcsR0FBSWhxQyxHQUFLLEdBQUlBLEdBQUssR0FBSW1ILElBQUksQ0FJN0MsR0FIQTVGLEVBQUk4cUMsRUFBS2xsQyxFQUdMNUYsRUFBSSxFQUNOQSxHQUFLLFNBQ0xvYixFQUFJMHZCLEVBQ0ovakMsRUFBSTBoQyxFQUFHc0MsRUFBSyxHQUdaQyxFQUFLamtDLEVBQUlra0MsRUFBT3JsQyxFQUFJd1YsRUFBSSxHQUFLLEdBQUssVUFFbEMydkIsRUFBSyxVQUFVL3FDLEVBQUksR0FBSyxRQUFRLEVBRTVCK3FDLEdBQU10QyxFQUFHLE9BRVgsR0FBSXhZLEVBQUcsQ0FHTCxLQUFPd1ksRUFBRyxRQUFVc0MsRUFBSXRDLEVBQUcsS0FBSyxDQUFDLEVBQUUsQ0FDbkMxaEMsRUFBSWlrQyxFQUFLLEVBQ1RwbEMsRUFBSSxFQUNKNUYsR0FBSyxTQUNMb2IsRUFBSXBiLEVBQUksU0FBVyxDQUNqQyxLQUNjLE9BQU00bkMsTUFFSCxDQUlMLElBSEE3Z0MsRUFBSXRJLEVBQUlncUMsRUFBR3NDLEdBR05ubEMsRUFBSSxFQUFHbkgsR0FBSyxHQUFJQSxHQUFLLEdBQUltSCxJQUFJLENBR2xDNUYsR0FBSyxTQUlMb2IsRUFBSXBiLEVBQUksU0FBVzRGLEVBR25Cb2xDLEVBQUs1dkIsRUFBSSxFQUFJLEVBQUlyVSxFQUFJa2tDLEVBQU9ybEMsRUFBSXdWLEVBQUksR0FBSyxHQUFLLENBQy9DLENBa0JILEdBZkE2VSxFQUFJQSxHQUFLNmEsRUFBSyxHQUtickMsRUFBR3NDLEVBQUssSUFBTSxPQUFTM3ZCLEVBQUksRUFBSXJVLEVBQUlBLEVBQUlra0MsRUFBT3JsQyxFQUFJd1YsRUFBSSxJQUV2RDZVLEVBQUl5WSxFQUFLLEdBQ0xzQyxHQUFNL2EsS0FBT3lZLEdBQU0sR0FBS0EsSUFBT3BxQyxFQUFFLEVBQUksRUFBSSxFQUFJLElBQzlDMHNDLEVBQUssR0FBS0EsR0FBTSxJQUFNdEMsR0FBTSxHQUFLelksR0FBS3lZLEdBQU0sSUFHM0Mxb0MsRUFBSSxFQUFJb2IsRUFBSSxFQUFJclUsRUFBSWtrQyxFQUFPcmxDLEVBQUl3VixHQUFLLEVBQUlxdEIsRUFBR3NDLEVBQUssSUFBTSxHQUFNLEdBQzdEckMsSUFBT3BxQyxFQUFFLEVBQUksRUFBSSxFQUFJLElBRXBCd3NDLEVBQUssR0FBSyxDQUFDckMsRUFBRyxHQUNoQixPQUFBQSxFQUFHLE9BQVMsRUFFUnhZLEdBR0Y2YSxHQUFNeHNDLEVBQUUsRUFBSSxFQUdabXFDLEVBQUcsR0FBS3dDLEdBQVEsU0FBV0gsRUFBSyxVQUFZLFVBQzVDeHNDLEVBQUUsRUFBSSxDQUFDd3NDLEdBQU0sR0FJYnJDLEVBQUcsR0FBS25xQyxFQUFFLEVBQUksRUFHVEEsRUFrQlQsR0FkSTBCLEdBQUssR0FDUHlvQyxFQUFHLE9BQVNzQyxFQUNadHNDLEVBQUksRUFDSnNzQyxNQUVBdEMsRUFBRyxPQUFTc0MsRUFBSyxFQUNqQnRzQyxFQUFJd3NDLEVBQU8sU0FBV2pyQyxHQUl0QnlvQyxFQUFHc0MsR0FBTTN2QixFQUFJLEVBQUksVUFBVXJVLEVBQUlra0MsRUFBT3JsQyxFQUFJd1YsR0FBSzZ2QixFQUFPN3ZCLEVBQUUsRUFBSTNjLEVBQUksR0FJOUR3eEIsRUFFRixPQUdFLEdBQUk4YSxHQUFNLEVBQUcsQ0FHWCxJQUFLL3FDLEVBQUksRUFBR29iLEVBQUlxdEIsRUFBRyxHQUFJcnRCLEdBQUssR0FBSUEsR0FBSyxHQUFJcGIsSUFBSSxDQUU3QyxJQURBb2IsRUFBSXF0QixFQUFHLElBQU1ocUMsRUFDUkEsRUFBSSxFQUFHMmMsR0FBSyxHQUFJQSxHQUFLLEdBQUkzYyxJQUFJLENBRzlCdUIsR0FBS3ZCLElBQ1BILEVBQUUsSUFDRW1xQyxFQUFHLElBQU0sT0FBTUEsRUFBRyxHQUFLLElBRzdCLEtBQ2QsS0FBbUIsQ0FFTCxHQURBQSxFQUFHc0MsSUFBT3RzQyxFQUNOZ3FDLEVBQUdzQyxJQUFPLEtBQU0sTUFDcEJ0QyxFQUFHc0MsS0FBUSxFQUNYdHNDLEVBQUksQ0FDTCxDQUtMLElBQUt1QixFQUFJeW9DLEVBQUcsT0FBUUEsRUFBRyxFQUFFem9DLEtBQU8sRUFBR3lvQyxFQUFHLElBQUcsRUFBRyxDQUM3QyxDQUdHbnFDLEVBQUUsRUFBSTJvQyxFQUNSM29DLEVBQUUsRUFBSUEsRUFBRSxFQUFJLEtBR0hBLEVBQUUsRUFBSTBvQyxJQUNmMW9DLEVBQUUsRUFBSSxDQUFDQSxFQUFFLEVBQUksQ0FBQyxFQUVqQixDQUVELE9BQU9BLENBQ1IsQ0FHRCxTQUFTNHNDLEVBQVFua0MsRUFBRyxDQUNsQixJQUFJakUsRUFDRkgsRUFBSW9FLEVBQUUsRUFFUixPQUFJcEUsSUFBTSxLQUFhb0UsRUFBRSxTQUFRLEdBRWpDakUsRUFBTSxjQUFjaUUsRUFBRSxDQUFDLEVBRXZCakUsRUFBTUgsR0FBS21rQyxHQUFjbmtDLEdBQUtva0MsRUFDMUIsY0FBY2prQyxFQUFLSCxDQUFDLEVBQ3BCLGFBQWFHLEVBQUtILEVBQUcsR0FBRyxFQUVyQm9FLEVBQUUsRUFBSSxFQUFJLElBQU1qRSxFQUFNQSxFQUM5QixDQVNELE9BQUEyakMsRUFBRSxjQUFnQkEsRUFBRSxJQUFNLFVBQVksQ0FDcEMsSUFBSW5vQyxFQUFJLElBQUlvb0MsRUFBVSxJQUFJLEVBQzFCLE9BQUlwb0MsRUFBRSxFQUFJLElBQUdBLEVBQUUsRUFBSSxHQUNaQSxDQUNYLEVBVUVtb0MsRUFBRSxXQUFhLFNBQVVodUIsRUFBRzFaLEVBQUcsQ0FDN0IsT0FBTyxRQUFRLEtBQU0sSUFBSTJuQyxFQUFVanVCLEVBQUcxWixDQUFDLENBQUMsQ0FDNUMsRUFnQkUwbkMsRUFBRSxjQUFnQkEsRUFBRSxHQUFLLFNBQVV1QixFQUFJVSxFQUFJLENBQ3pDLElBQUk5OUIsRUFBRzdELEVBQUc4RCxFQUNSdk0sRUFBSSxLQUVOLEdBQUkwcEMsR0FBTSxLQUNSLGdCQUFTQSxFQUFJLEVBQUcsR0FBRyxFQUNmVSxHQUFNLEtBQU1BLEVBQUs3QixFQUNoQixTQUFTNkIsRUFBSSxFQUFHLENBQUMsRUFFZmYsRUFBTSxJQUFJakIsRUFBVXBvQyxDQUFDLEVBQUcwcEMsRUFBSzFwQyxFQUFFLEVBQUksRUFBR29xQyxDQUFFLEVBR2pELEdBQUksRUFBRTk5QixFQUFJdE0sRUFBRSxHQUFJLE9BQU8sS0FJdkIsR0FIQXlJLElBQU04RCxFQUFJRCxFQUFFLE9BQVMsR0FBSyxTQUFTLEtBQUssRUFBSSxRQUFRLEdBQUssU0FHckRDLEVBQUlELEVBQUVDLEdBQUksS0FBT0EsRUFBSSxJQUFNLEVBQUdBLEdBQUssR0FBSTlELElBQUksQ0FDL0MsT0FBSUEsRUFBSSxJQUFHQSxFQUFJLEdBRVJBLENBQ1gsRUF1QkUwL0IsRUFBRSxVQUFZQSxFQUFFLElBQU0sU0FBVWh1QixFQUFHMVosRUFBRyxDQUNwQyxPQUFPbTdCLEVBQUksS0FBTSxJQUFJd00sRUFBVWp1QixFQUFHMVosQ0FBQyxFQUFHNm5DLEVBQWdCQyxDQUFhLENBQ3ZFLEVBT0VKLEVBQUUsbUJBQXFCQSxFQUFFLEtBQU8sU0FBVWh1QixFQUFHMVosRUFBRyxDQUM5QyxPQUFPbTdCLEVBQUksS0FBTSxJQUFJd00sRUFBVWp1QixFQUFHMVosQ0FBQyxFQUFHLEVBQUcsQ0FBQyxDQUM5QyxFQWtCRTBuQyxFQUFFLGdCQUFrQkEsRUFBRSxJQUFNLFNBQVUxL0IsRUFBRzZoQyxFQUFHLENBQzFDLElBQUl1QyxFQUFNQyxFQUFVcHJDLEVBQUd2QixFQUFHNnFDLEVBQU0rQixFQUFRQyxFQUFRQyxFQUFROXlCLEVBQ3REbmEsRUFBSSxLQUtOLEdBSEF5SSxFQUFJLElBQUkyL0IsRUFBVTMvQixDQUFDLEVBR2ZBLEVBQUUsR0FBSyxDQUFDQSxFQUFFLFVBQVMsRUFDckIsTUFBTSxNQUNILGVBQWlCLDRCQUE4Qm1rQyxFQUFRbmtDLENBQUMsQ0FBQyxFQVM5RCxHQU5JNmhDLEdBQUssT0FBTUEsRUFBSSxJQUFJbEMsRUFBVWtDLENBQUMsR0FHbEN5QyxFQUFTdGtDLEVBQUUsRUFBSSxHQUdYLENBQUN6SSxFQUFFLEdBQUssQ0FBQ0EsRUFBRSxFQUFFLElBQU1BLEVBQUUsRUFBRSxJQUFNLEdBQUssQ0FBQ0EsRUFBRSxHQUFLQSxFQUFFLEVBQUUsUUFBVSxHQUFLLENBQUN5SSxFQUFFLEdBQUssQ0FBQ0EsRUFBRSxFQUFFLEdBSTVFLE9BQUEwUixFQUFJLElBQUlpdUIsRUFBVSxLQUFLLElBQUksQ0FBQ3dFLEVBQVE1c0MsQ0FBQyxFQUFHK3NDLEVBQVMsRUFBSSxNQUFNdGtDLENBQUMsRUFBSSxDQUFDbWtDLEVBQVFua0MsQ0FBQyxDQUFDLENBQUMsRUFDckU2aEMsRUFBSW53QixFQUFFLElBQUltd0IsQ0FBQyxFQUFJbndCLEVBS3hCLEdBRkE2eUIsRUFBU3ZrQyxFQUFFLEVBQUksRUFFWDZoQyxFQUFHLENBR0wsR0FBSUEsRUFBRSxFQUFJLENBQUNBLEVBQUUsRUFBRSxHQUFLLENBQUNBLEVBQUUsRUFBRyxPQUFPLElBQUlsQyxFQUFVLEdBQUcsRUFFbEQwRSxFQUFXLENBQUNFLEdBQVVodEMsRUFBRSxVQUFTLEdBQU1zcUMsRUFBRSxZQUVyQ3dDLElBQVU5c0MsRUFBSUEsRUFBRSxJQUFJc3FDLENBQUMsRUFJMUIsS0FBTSxJQUFJN2hDLEVBQUUsRUFBSSxJQUFNekksRUFBRSxFQUFJLEdBQUtBLEVBQUUsRUFBSSxLQUFPQSxFQUFFLEdBQUssRUFFbERBLEVBQUUsRUFBRSxHQUFLLEdBQUsrc0MsR0FBVS9zQyxFQUFFLEVBQUUsSUFBTSxLQUVsQ0EsRUFBRSxFQUFFLEdBQUssTUFBUStzQyxHQUFVL3NDLEVBQUUsRUFBRSxJQUFNLFlBR3ZDLE9BQUFHLEVBQUlILEVBQUUsRUFBSSxHQUFLLE1BQU15SSxDQUFDLEVBQUksR0FBSyxFQUczQnpJLEVBQUUsRUFBSSxLQUFJRyxFQUFJLEVBQUlBLEdBR2YsSUFBSWlvQyxFQUFVNEUsRUFBUyxFQUFJN3NDLEVBQUlBLENBQUMsRUFFOUIyb0MsSUFLVDNvQyxFQUFJLFNBQVMyb0MsRUFBZ0IsU0FBVyxDQUFDLEdBZTNDLElBWklpRSxHQUNGRixFQUFPLElBQUl6RSxFQUFVLEVBQUcsRUFDcEI0RSxJQUFRdmtDLEVBQUUsRUFBSSxHQUNsQndrQyxFQUFTLE1BQU14a0MsQ0FBQyxJQUVoQi9HLEVBQUksS0FBSyxJQUFJLENBQUNrckMsRUFBUW5rQyxDQUFDLENBQUMsRUFDeEJ3a0MsRUFBU3ZyQyxFQUFJLEdBR2Z5WSxFQUFJLElBQUlpdUIsRUFBVUMsQ0FBRyxJQUdYLENBRVIsR0FBSTRFLEVBQVEsQ0FFVixHQURBOXlCLEVBQUlBLEVBQUUsTUFBTW5hLENBQUMsRUFDVCxDQUFDbWEsRUFBRSxFQUFHLE1BRU5oYSxFQUNFZ2EsRUFBRSxFQUFFLE9BQVNoYSxJQUFHZ2EsRUFBRSxFQUFFLE9BQVNoYSxHQUN4QjJzQyxJQUNUM3lCLEVBQUlBLEVBQUUsSUFBSW13QixDQUFDLEVBRWQsQ0FFRCxHQUFJNW9DLEVBQUcsQ0FFTCxHQURBQSxFQUFJLFVBQVVBLEVBQUksQ0FBQyxFQUNmQSxJQUFNLEVBQUcsTUFDYnVyQyxFQUFTdnJDLEVBQUksQ0FDckIsU0FDUStHLEVBQUlBLEVBQUUsTUFBTW9rQyxDQUFJLEVBQ2hCeEQsRUFBTTVnQyxFQUFHQSxFQUFFLEVBQUksRUFBRyxDQUFDLEVBRWZBLEVBQUUsRUFBSSxHQUNSd2tDLEVBQVMsTUFBTXhrQyxDQUFDLE1BQ1gsQ0FFTCxHQURBL0csRUFBSSxDQUFDa3JDLEVBQVFua0MsQ0FBQyxFQUNWL0csSUFBTSxFQUFHLE1BQ2J1ckMsRUFBU3ZyQyxFQUFJLENBQ2QsQ0FHSDFCLEVBQUlBLEVBQUUsTUFBTUEsQ0FBQyxFQUVURyxFQUNFSCxFQUFFLEdBQUtBLEVBQUUsRUFBRSxPQUFTRyxJQUFHSCxFQUFFLEVBQUUsT0FBU0csR0FDL0Iyc0MsSUFDVDlzQyxFQUFJQSxFQUFFLElBQUlzcUMsQ0FBQyxFQUVkLENBRUQsT0FBSXdDLEVBQWlCM3lCLEdBQ2pCNnlCLElBQVE3eUIsRUFBSWt1QixFQUFJLElBQUlsdUIsQ0FBQyxHQUVsQm13QixFQUFJbndCLEVBQUUsSUFBSW13QixDQUFDLEVBQUlucUMsRUFBSWtwQyxFQUFNbHZCLEVBQUcydUIsRUFBZVAsRUFBZXlDLENBQUksRUFBSTd3QixFQUM3RSxFQVdFZ3VCLEVBQUUsYUFBZSxTQUFVaUMsRUFBSSxDQUM3QixJQUFJM2hDLEVBQUksSUFBSTIvQixFQUFVLElBQUksRUFDMUIsT0FBSWdDLEdBQU0sS0FBTUEsRUFBSzdCLEVBQ2hCLFNBQVM2QixFQUFJLEVBQUcsQ0FBQyxFQUNmZixFQUFNNWdDLEVBQUdBLEVBQUUsRUFBSSxFQUFHMmhDLENBQUUsQ0FDL0IsRUFPRWpDLEVBQUUsVUFBWUEsRUFBRSxHQUFLLFNBQVVodUIsRUFBRzFaLEVBQUcsQ0FDbkMsT0FBTyxRQUFRLEtBQU0sSUFBSTJuQyxFQUFVanVCLEVBQUcxWixDQUFDLENBQUMsSUFBTSxDQUNsRCxFQU1FMG5DLEVBQUUsU0FBVyxVQUFZLENBQ3ZCLE1BQU8sQ0FBQyxDQUFDLEtBQUssQ0FDbEIsRUFPRUEsRUFBRSxjQUFnQkEsRUFBRSxHQUFLLFNBQVVodUIsRUFBRzFaLEVBQUcsQ0FDdkMsT0FBTyxRQUFRLEtBQU0sSUFBSTJuQyxFQUFVanVCLEVBQUcxWixDQUFDLENBQUMsRUFBSSxDQUNoRCxFQU9FMG5DLEVBQUUsdUJBQXlCQSxFQUFFLElBQU0sU0FBVWh1QixFQUFHMVosRUFBRyxDQUNqRCxPQUFRQSxFQUFJLFFBQVEsS0FBTSxJQUFJMm5DLEVBQVVqdUIsRUFBRzFaLENBQUMsQ0FBQyxLQUFPLEdBQUtBLElBQU0sQ0FFbkUsRUFNRTBuQyxFQUFFLFVBQVksVUFBWSxDQUN4QixNQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUssU0FBUyxLQUFLLEVBQUksUUFBUSxFQUFJLEtBQUssRUFBRSxPQUFTLENBQ3JFLEVBT0VBLEVBQUUsV0FBYUEsRUFBRSxHQUFLLFNBQVVodUIsRUFBRzFaLEVBQUcsQ0FDcEMsT0FBTyxRQUFRLEtBQU0sSUFBSTJuQyxFQUFVanVCLEVBQUcxWixDQUFDLENBQUMsRUFBSSxDQUNoRCxFQU9FMG5DLEVBQUUsb0JBQXNCQSxFQUFFLElBQU0sU0FBVWh1QixFQUFHMVosRUFBRyxDQUM5QyxPQUFRQSxFQUFJLFFBQVEsS0FBTSxJQUFJMm5DLEVBQVVqdUIsRUFBRzFaLENBQUMsQ0FBQyxLQUFPLElBQU1BLElBQU0sQ0FDcEUsRUFNRTBuQyxFQUFFLE1BQVEsVUFBWSxDQUNwQixNQUFPLENBQUMsS0FBSyxDQUNqQixFQU1FQSxFQUFFLFdBQWEsVUFBWSxDQUN6QixPQUFPLEtBQUssRUFBSSxDQUNwQixFQU1FQSxFQUFFLFdBQWEsVUFBWSxDQUN6QixPQUFPLEtBQUssRUFBSSxDQUNwQixFQU1FQSxFQUFFLE9BQVMsVUFBWSxDQUNyQixNQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUssS0FBSyxFQUFFLElBQU0sQ0FDcEMsRUF1QkVBLEVBQUUsTUFBUSxTQUFVaHVCLEVBQUcxWixFQUFHLENBQ3hCLElBQUlpQixFQUFHb2IsRUFBRzNYLEVBQUcrbkMsRUFDWGx0QyxFQUFJLEtBQ0pRLEVBQUlSLEVBQUUsRUFNUixHQUpBbWEsRUFBSSxJQUFJaXVCLEVBQVVqdUIsRUFBRzFaLENBQUMsRUFDdEJBLEVBQUkwWixFQUFFLEVBR0YsQ0FBQzNaLEdBQUssQ0FBQ0MsRUFBRyxPQUFPLElBQUkybkMsRUFBVSxHQUFHLEVBR3RDLEdBQUk1bkMsR0FBS0MsRUFDUCxPQUFBMFosRUFBRSxFQUFJLENBQUMxWixFQUNBVCxFQUFFLEtBQUttYSxDQUFDLEVBR2pCLElBQUlnekIsRUFBS250QyxFQUFFLEVBQUksU0FDYm90QyxFQUFLanpCLEVBQUUsRUFBSSxTQUNYZ3dCLEVBQUtucUMsRUFBRSxFQUNQMnJDLEVBQUt4eEIsRUFBRSxFQUVULEdBQUksQ0FBQ2d6QixHQUFNLENBQUNDLEVBQUksQ0FHZCxHQUFJLENBQUNqRCxHQUFNLENBQUN3QixFQUFJLE9BQU94QixHQUFNaHdCLEVBQUUsRUFBSSxDQUFDMVosRUFBRzBaLEdBQUssSUFBSWl1QixFQUFVdUQsRUFBSzNyQyxFQUFJLEdBQUcsRUFHdEUsR0FBSSxDQUFDbXFDLEVBQUcsSUFBTSxDQUFDd0IsRUFBRyxHQUdoQixPQUFPQSxFQUFHLElBQU14eEIsRUFBRSxFQUFJLENBQUMxWixFQUFHMFosR0FBSyxJQUFJaXVCLEVBQVUrQixFQUFHLEdBQUtucUMsRUFHcER1b0MsR0FBaUIsRUFBSSxHQUFLLENBQUMsQ0FFL0IsQ0FPRCxHQUxBNEUsRUFBSyxTQUFTQSxDQUFFLEVBQ2hCQyxFQUFLLFNBQVNBLENBQUUsRUFDaEJqRCxFQUFLQSxFQUFHLFFBR0ozcEMsRUFBSTJzQyxFQUFLQyxFQUFJLENBYWYsS0FYSUYsRUFBTzFzQyxFQUFJLElBQ2JBLEVBQUksQ0FBQ0EsRUFDTDJFLEVBQUlnbEMsSUFFSmlELEVBQUtELEVBQ0xob0MsRUFBSXdtQyxHQUdOeG1DLEVBQUUsUUFBTyxFQUdKMUUsRUFBSUQsRUFBR0MsSUFBSzBFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FDM0JBLEVBQUUsUUFBTyxDQUNmLEtBS00sS0FGQTJYLEdBQUtvd0IsR0FBUTFzQyxFQUFJMnBDLEVBQUcsU0FBVzFwQyxFQUFJa3JDLEVBQUcsU0FBV25yQyxFQUFJQyxFQUVoREQsRUFBSUMsRUFBSSxFQUFHQSxFQUFJcWMsRUFBR3JjLElBRXJCLEdBQUkwcEMsRUFBRzFwQyxJQUFNa3JDLEVBQUdsckMsR0FBSSxDQUNsQnlzQyxFQUFPL0MsRUFBRzFwQyxHQUFLa3JDLEVBQUdsckMsR0FDbEIsS0FDRCxDQVdMLEdBTkl5c0MsSUFBTS9uQyxFQUFJZ2xDLEVBQUlBLEVBQUt3QixFQUFJQSxFQUFLeG1DLEVBQUdnVixFQUFFLEVBQUksQ0FBQ0EsRUFBRSxHQUU1QzFaLEdBQUtxYyxFQUFJNnVCLEVBQUcsU0FBV2pxQyxFQUFJeW9DLEVBQUcsUUFJMUIxcEMsRUFBSSxFQUFHLEtBQU9BLElBQUswcEMsRUFBR3pvQyxLQUFPLEVBQUUsQ0FJbkMsSUFIQWpCLEVBQUksS0FBTyxFQUdKcWMsRUFBSXRjLEdBQUksQ0FFYixHQUFJMnBDLEVBQUcsRUFBRXJ0QixHQUFLNnVCLEVBQUc3dUIsR0FBSSxDQUNuQixJQUFLcGIsRUFBSW9iLEVBQUdwYixHQUFLLENBQUN5b0MsRUFBRyxFQUFFem9DLEdBQUl5b0MsRUFBR3pvQyxHQUFLakIsRUFBRSxDQUNyQyxFQUFFMHBDLEVBQUd6b0MsR0FDTHlvQyxFQUFHcnRCLElBQU0sSUFDVixDQUVEcXRCLEVBQUdydEIsSUFBTTZ1QixFQUFHN3VCLEVBQ2IsQ0FHRCxLQUFPcXRCLEVBQUcsSUFBTSxFQUFHQSxFQUFHLE9BQU8sRUFBRyxDQUFDLEVBQUcsRUFBRWlELEVBQUcsQ0FHekMsT0FBS2pELEVBQUcsR0FXRDZCLEVBQVU3eEIsRUFBR2d3QixFQUFJaUQsQ0FBRSxHQVB4Qmp6QixFQUFFLEVBQUlvdUIsR0FBaUIsRUFBSSxHQUFLLEVBQ2hDcHVCLEVBQUUsRUFBSSxDQUFDQSxFQUFFLEVBQUksQ0FBQyxFQUNQQSxFQU1iLEVBd0JFZ3VCLEVBQUUsT0FBU0EsRUFBRSxJQUFNLFNBQVVodUIsRUFBRzFaLEVBQUcsQ0FDakMsSUFBSTRzQyxFQUFHMWlDLEVBQ0wzSyxFQUFJLEtBS04sT0FIQW1hLEVBQUksSUFBSWl1QixFQUFVanVCLEVBQUcxWixDQUFDLEVBR2xCLENBQUNULEVBQUUsR0FBSyxDQUFDbWEsRUFBRSxHQUFLQSxFQUFFLEdBQUssQ0FBQ0EsRUFBRSxFQUFFLEdBQ3ZCLElBQUlpdUIsRUFBVSxHQUFHLEVBR2YsQ0FBQ2p1QixFQUFFLEdBQUtuYSxFQUFFLEdBQUssQ0FBQ0EsRUFBRSxFQUFFLEdBQ3RCLElBQUlvb0MsRUFBVXBvQyxDQUFDLEdBR3BCNm9DLEdBQWUsR0FJakJsK0IsRUFBSXdQLEVBQUUsRUFDTkEsRUFBRSxFQUFJLEVBQ05rekIsRUFBSXpSLEVBQUk1N0IsRUFBR21hLEVBQUcsRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLEVBQUl4UCxFQUNOMGlDLEVBQUUsR0FBSzFpQyxHQUVQMGlDLEVBQUl6UixFQUFJNTdCLEVBQUdtYSxFQUFHLEVBQUcwdUIsQ0FBVyxFQUc5QjF1QixFQUFJbmEsRUFBRSxNQUFNcXRDLEVBQUUsTUFBTWx6QixDQUFDLENBQUMsRUFHbEIsQ0FBQ0EsRUFBRSxFQUFFLElBQU0wdUIsR0FBZSxJQUFHMXVCLEVBQUUsRUFBSW5hLEVBQUUsR0FFbENtYSxFQUNYLEVBdUJFZ3VCLEVBQUUsYUFBZUEsRUFBRSxNQUFRLFNBQVVodUIsRUFBRzFaLEVBQUcsQ0FDekMsSUFBSTZMLEVBQUdqSSxFQUFHM0MsRUFBR29iLEVBQUczYyxFQUFHbXFDLEVBQUdnRCxFQUFLOUMsRUFBS0MsRUFBSzhDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQ2xEckQsRUFBTXNELEVBQ04zdEMsRUFBSSxLQUNKbXFDLEVBQUtucUMsRUFBRSxFQUNQMnJDLElBQU14eEIsRUFBSSxJQUFJaXVCLEVBQVVqdUIsRUFBRzFaLENBQUMsR0FBRyxFQUdqQyxHQUFJLENBQUMwcEMsR0FBTSxDQUFDd0IsSUFBTSxDQUFDeEIsRUFBRyxJQUFNLENBQUN3QixHQUFHLEdBRzlCLE1BQUksQ0FBQzNyQyxFQUFFLEdBQUssQ0FBQ21hLEVBQUUsR0FBS2d3QixHQUFNLENBQUNBLEVBQUcsSUFBTSxDQUFDd0IsSUFBTUEsSUFBTSxDQUFDQSxHQUFHLElBQU0sQ0FBQ3hCLEVBQzFEaHdCLEVBQUUsRUFBSUEsRUFBRSxFQUFJQSxFQUFFLEVBQUksTUFFbEJBLEVBQUUsR0FBS25hLEVBQUUsRUFHTCxDQUFDbXFDLEdBQU0sQ0FBQ3dCLEdBQ1Z4eEIsRUFBRSxFQUFJQSxFQUFFLEVBQUksTUFJWkEsRUFBRSxFQUFJLENBQUMsQ0FBQyxFQUNSQSxFQUFFLEVBQUksSUFJSEEsRUFZVCxJQVRBOVYsRUFBSSxTQUFTckUsRUFBRSxFQUFJLFFBQVEsRUFBSSxTQUFTbWEsRUFBRSxFQUFJLFFBQVEsRUFDdERBLEVBQUUsR0FBS25hLEVBQUUsRUFDVHN0QyxFQUFNbkQsRUFBRyxPQUNUb0QsRUFBTTVCLEdBQUcsT0FHTDJCLEVBQU1DLElBQUtHLEVBQUt2RCxFQUFJQSxFQUFLd0IsR0FBSUEsR0FBSytCLEVBQUloc0MsRUFBSTRyQyxFQUFLQSxFQUFNQyxFQUFLQSxFQUFNN3JDLEdBRy9EQSxFQUFJNHJDLEVBQU1DLEVBQUtHLEVBQUssQ0FBQSxFQUFJaHNDLElBQUtnc0MsRUFBRyxLQUFLLENBQUMsRUFBRSxDQUs3QyxJQUhBckQsRUFBTyxLQUNQc0QsRUFBVyxVQUVOanNDLEVBQUk2ckMsRUFBSyxFQUFFN3JDLEdBQUssR0FBSSxDQUt2QixJQUpBNEssRUFBSSxFQUNKa2hDLEVBQU03QixHQUFHanFDLEdBQUtpc0MsRUFDZEYsRUFBTTlCLEdBQUdqcUMsR0FBS2lzQyxFQUFXLEVBRXBCeHRDLEVBQUltdEMsRUFBS3h3QixFQUFJcGIsRUFBSXZCLEVBQUcyYyxFQUFJcGIsR0FDM0I4b0MsRUFBTUwsRUFBRyxFQUFFaHFDLEdBQUt3dEMsRUFDaEJsRCxFQUFNTixFQUFHaHFDLEdBQUt3dEMsRUFBVyxFQUN6QnJELEVBQUltRCxFQUFNakQsRUFBTUMsRUFBTStDLEVBQ3RCaEQsRUFBTWdELEVBQU1oRCxFQUFRRixFQUFJcUQsRUFBWUEsRUFBWUQsRUFBRzV3QixHQUFLeFEsRUFDeERBLEdBQUtrK0IsRUFBTUgsRUFBTyxJQUFNQyxFQUFJcUQsRUFBVyxHQUFLRixFQUFNaEQsRUFDbERpRCxFQUFHNXdCLEtBQU8wdEIsRUFBTUgsRUFHbEJxRCxFQUFHNXdCLEdBQUt4USxDQUNULENBRUQsT0FBSUEsRUFDRixFQUFFakksRUFFRnFwQyxFQUFHLE9BQU8sRUFBRyxDQUFDLEVBR1QxQixFQUFVN3hCLEVBQUd1ekIsRUFBSXJwQyxDQUFDLENBQzdCLEVBT0U4akMsRUFBRSxRQUFVLFVBQVksQ0FDdEIsSUFBSW5vQyxFQUFJLElBQUlvb0MsRUFBVSxJQUFJLEVBQzFCLE9BQUFwb0MsRUFBRSxFQUFJLENBQUNBLEVBQUUsR0FBSyxLQUNQQSxDQUNYLEVBdUJFbW9DLEVBQUUsS0FBTyxTQUFVaHVCLEVBQUcxWixFQUFHLENBQ3ZCLElBQUkwRSxFQUNGbkYsRUFBSSxLQUNKUSxFQUFJUixFQUFFLEVBTVIsR0FKQW1hLEVBQUksSUFBSWl1QixFQUFVanVCLEVBQUcxWixDQUFDLEVBQ3RCQSxFQUFJMFosRUFBRSxFQUdGLENBQUMzWixHQUFLLENBQUNDLEVBQUcsT0FBTyxJQUFJMm5DLEVBQVUsR0FBRyxFQUdyQyxHQUFJNW5DLEdBQUtDLEVBQ1IsT0FBQTBaLEVBQUUsRUFBSSxDQUFDMVosRUFDQVQsRUFBRSxNQUFNbWEsQ0FBQyxFQUdsQixJQUFJZ3pCLEVBQUtudEMsRUFBRSxFQUFJLFNBQ2JvdEMsRUFBS2p6QixFQUFFLEVBQUksU0FDWGd3QixFQUFLbnFDLEVBQUUsRUFDUDJyQyxFQUFLeHhCLEVBQUUsRUFFVCxHQUFJLENBQUNnekIsR0FBTSxDQUFDQyxFQUFJLENBR2QsR0FBSSxDQUFDakQsR0FBTSxDQUFDd0IsRUFBSSxPQUFPLElBQUl2RCxFQUFVNW5DLEVBQUksQ0FBQyxFQUkxQyxHQUFJLENBQUMycEMsRUFBRyxJQUFNLENBQUN3QixFQUFHLEdBQUksT0FBT0EsRUFBRyxHQUFLeHhCLEVBQUksSUFBSWl1QixFQUFVK0IsRUFBRyxHQUFLbnFDLEVBQUlRLEVBQUksQ0FBQyxDQUN6RSxDQU9ELEdBTEEyc0MsRUFBSyxTQUFTQSxDQUFFLEVBQ2hCQyxFQUFLLFNBQVNBLENBQUUsRUFDaEJqRCxFQUFLQSxFQUFHLFFBR0ozcEMsRUFBSTJzQyxFQUFLQyxFQUFJLENBVWYsSUFUSTVzQyxFQUFJLEdBQ040c0MsRUFBS0QsRUFDTGhvQyxFQUFJd21DLElBRUpuckMsRUFBSSxDQUFDQSxFQUNMMkUsRUFBSWdsQyxHQUdOaGxDLEVBQUUsUUFBTyxFQUNGM0UsSUFBSzJFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FDdEJBLEVBQUUsUUFBTyxDQUNWLENBU0QsSUFQQTNFLEVBQUkycEMsRUFBRyxPQUNQMXBDLEVBQUlrckMsRUFBRyxPQUdIbnJDLEVBQUlDLEVBQUksSUFBRzBFLEVBQUl3bUMsRUFBSUEsRUFBS3hCLEVBQUlBLEVBQUtobEMsRUFBRzFFLEVBQUlELEdBR3ZDQSxFQUFJLEVBQUdDLEdBQ1ZELEdBQUsycEMsRUFBRyxFQUFFMXBDLEdBQUswcEMsRUFBRzFwQyxHQUFLa3JDLEVBQUdsckMsR0FBS0QsR0FBSyxLQUFPLEVBQzNDMnBDLEVBQUcxcEMsR0FBSyxPQUFTMHBDLEVBQUcxcEMsR0FBSyxFQUFJMHBDLEVBQUcxcEMsR0FBSyxLQUd2QyxPQUFJRCxJQUNGMnBDLEVBQUssQ0FBQzNwQyxDQUFDLEVBQUUsT0FBTzJwQyxDQUFFLEVBQ2xCLEVBQUVpRCxHQUtHcEIsRUFBVTd4QixFQUFHZ3dCLEVBQUlpRCxDQUFFLENBQzlCLEVBa0JFakYsRUFBRSxVQUFZQSxFQUFFLEdBQUssU0FBVXFFLEVBQUlwQyxFQUFJLENBQ3JDLElBQUk5OUIsRUFBRzdELEVBQUc4RCxFQUNSdk0sRUFBSSxLQUVOLEdBQUl3c0MsR0FBTSxNQUFRQSxJQUFPLENBQUMsQ0FBQ0EsRUFDekIsZ0JBQVNBLEVBQUksRUFBRyxHQUFHLEVBQ2ZwQyxHQUFNLEtBQU1BLEVBQUs3QixFQUNoQixTQUFTNkIsRUFBSSxFQUFHLENBQUMsRUFFZmYsRUFBTSxJQUFJakIsRUFBVXBvQyxDQUFDLEVBQUd3c0MsRUFBSXBDLENBQUUsRUFHdkMsR0FBSSxFQUFFOTlCLEVBQUl0TSxFQUFFLEdBQUksT0FBTyxLQUl2QixHQUhBdU0sRUFBSUQsRUFBRSxPQUFTLEVBQ2Y3RCxFQUFJOEQsRUFBSSxTQUFXLEVBRWZBLEVBQUlELEVBQUVDLEdBQUksQ0FHWixLQUFPQSxFQUFJLElBQU0sRUFBR0EsR0FBSyxHQUFJOUQsSUFBSSxDQUdqQyxJQUFLOEQsRUFBSUQsRUFBRSxHQUFJQyxHQUFLLEdBQUlBLEdBQUssR0FBSTlELElBQUksQ0FDdEMsQ0FFRCxPQUFJK2pDLEdBQU14c0MsRUFBRSxFQUFJLEVBQUl5SSxJQUFHQSxFQUFJekksRUFBRSxFQUFJLEdBRTFCeUksQ0FDWCxFQVdFMC9CLEVBQUUsVUFBWSxTQUFVaG9DLEVBQUcsQ0FDekIsZ0JBQVNBLEVBQUcsQ0FBQyxpQkFBa0IsZ0JBQWdCLEVBQ3hDLEtBQUssTUFBTSxLQUFPQSxDQUFDLENBQzlCLEVBY0Vnb0MsRUFBRSxXQUFhQSxFQUFFLEtBQU8sVUFBWSxDQUNsQyxJQUFJbUMsRUFBRzdoQyxFQUFHa3BCLEVBQUdpYyxFQUFLem9DLEVBQ2hCbkYsRUFBSSxLQUNKc00sRUFBSXRNLEVBQUUsRUFDTjJLLEVBQUkzSyxFQUFFLEVBQ05xRSxFQUFJckUsRUFBRSxFQUNOMHBDLEVBQUtwQixFQUFpQixFQUN0QnVFLEVBQU8sSUFBSXpFLEVBQVUsS0FBSyxFQUc1QixHQUFJejlCLElBQU0sR0FBSyxDQUFDMkIsR0FBSyxDQUFDQSxFQUFFLEdBQ3RCLE9BQU8sSUFBSTg3QixFQUFVLENBQUN6OUIsR0FBS0EsRUFBSSxJQUFNLENBQUMyQixHQUFLQSxFQUFFLElBQU0sSUFBTUEsRUFBSXRNLEVBQUksRUFBSSxDQUFDLEVBOEJ4RSxHQTFCQTJLLEVBQUksS0FBSyxLQUFLLENBQUNpaUMsRUFBUTVzQyxDQUFDLENBQUMsRUFJckIySyxHQUFLLEdBQUtBLEdBQUssRUFBSSxHQUNyQmxDLEVBQUksY0FBYzZELENBQUMsR0FDZDdELEVBQUUsT0FBU3BFLEdBQUssR0FBSyxJQUFHb0UsR0FBSyxLQUNsQ2tDLEVBQUksS0FBSyxLQUFLLENBQUNsQyxDQUFDLEVBQ2hCcEUsRUFBSSxVQUFVQSxFQUFJLEdBQUssQ0FBQyxHQUFLQSxFQUFJLEdBQUtBLEVBQUksR0FFdENzRyxHQUFLLEVBQUksRUFDWGxDLEVBQUksS0FBT3BFLEdBRVhvRSxFQUFJa0MsRUFBRSxnQkFDTmxDLEVBQUlBLEVBQUUsTUFBTSxFQUFHQSxFQUFFLFFBQVEsR0FBRyxFQUFJLENBQUMsRUFBSXBFLEdBR3ZDc3RCLEVBQUksSUFBSXlXLEVBQVUzL0IsQ0FBQyxHQUVuQmtwQixFQUFJLElBQUl5VyxFQUFVejlCLEVBQUksRUFBRSxFQU90QmduQixFQUFFLEVBQUUsSUFNTixJQUxBdHRCLEVBQUlzdEIsRUFBRSxFQUNOaG5CLEVBQUl0RyxFQUFJcWxDLEVBQ0ovK0IsRUFBSSxJQUFHQSxFQUFJLEtBT2IsR0FIQXhGLEVBQUl3c0IsRUFDSkEsRUFBSWtiLEVBQUssTUFBTTFuQyxFQUFFLEtBQUt5MkIsRUFBSTU3QixFQUFHbUYsRUFBR3VrQyxFQUFJLENBQUMsQ0FBQyxDQUFDLEVBRW5DLGNBQWN2a0MsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFHd0YsQ0FBQyxLQUFPbEMsRUFBSSxjQUFja3BCLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBR2huQixDQUFDLEVBV3hFLEdBTklnbkIsRUFBRSxFQUFJdHRCLEdBQUcsRUFBRXNHLEVBQ2ZsQyxFQUFJQSxFQUFFLE1BQU1rQyxFQUFJLEVBQUdBLEVBQUksQ0FBQyxFQUtwQmxDLEdBQUssUUFBVSxDQUFDbWxDLEdBQU9ubEMsR0FBSyxPQUFRLENBSXRDLEdBQUksQ0FBQ21sQyxJQUNIdkUsRUFBTWxrQyxFQUFHQSxFQUFFLEVBQUltakMsRUFBaUIsRUFBRyxDQUFDLEVBRWhDbmpDLEVBQUUsTUFBTUEsQ0FBQyxFQUFFLEdBQUduRixDQUFDLEdBQUcsQ0FDcEIyeEIsRUFBSXhzQixFQUNKLEtBQ0QsQ0FHSHVrQyxHQUFNLEVBQ04vK0IsR0FBSyxFQUNMaWpDLEVBQU0sQ0FDbEIsS0FBaUIsRUFJRCxDQUFDLENBQUNubEMsR0FBSyxDQUFDLENBQUNBLEVBQUUsTUFBTSxDQUFDLEdBQUtBLEVBQUUsT0FBTyxDQUFDLEdBQUssT0FHeEM0Z0MsRUFBTTFYLEVBQUdBLEVBQUUsRUFBSTJXLEVBQWlCLEVBQUcsQ0FBQyxFQUNwQ2dDLEVBQUksQ0FBQzNZLEVBQUUsTUFBTUEsQ0FBQyxFQUFFLEdBQUczeEIsQ0FBQyxHQUd0QixLQUNELEVBS1AsT0FBT3FwQyxFQUFNMVgsRUFBR0EsRUFBRSxFQUFJMlcsRUFBaUIsRUFBR0MsRUFBZStCLENBQUMsQ0FDOUQsRUFZRW5DLEVBQUUsY0FBZ0IsU0FBVXVCLEVBQUlVLEVBQUksQ0FDbEMsT0FBSVYsR0FBTSxPQUNSLFNBQVNBLEVBQUksRUFBRyxHQUFHLEVBQ25CQSxLQUVLa0MsRUFBTyxLQUFNbEMsRUFBSVUsRUFBSSxDQUFDLENBQ2pDLEVBZUVqQyxFQUFFLFFBQVUsU0FBVXVCLEVBQUlVLEVBQUksQ0FDNUIsT0FBSVYsR0FBTSxPQUNSLFNBQVNBLEVBQUksRUFBRyxHQUFHLEVBQ25CQSxFQUFLQSxFQUFLLEtBQUssRUFBSSxHQUVka0MsRUFBTyxLQUFNbEMsRUFBSVUsQ0FBRSxDQUM5QixFQTRCRWpDLEVBQUUsU0FBVyxTQUFVdUIsRUFBSVUsRUFBSXdCLEVBQVEsQ0FDckMsSUFBSXBuQyxFQUNGeEUsRUFBSSxLQUVOLEdBQUk0ckMsR0FBVSxLQUNSbEMsR0FBTSxNQUFRVSxHQUFNLE9BQU9BLEdBQU0sVUFDbkN3QixFQUFTeEIsRUFDVEEsRUFBSyxNQUNJVixHQUFNLE9BQU9BLEdBQU0sVUFDNUJrQyxFQUFTbEMsRUFDVEEsRUFBS1UsRUFBSyxNQUVWd0IsRUFBUzdDLFVBRUYsT0FBTzZDLEdBQVUsU0FDMUIsTUFBTSxNQUNILGVBQWlCLDJCQUE2QkEsQ0FBTSxFQUt6RCxHQUZBcG5DLEVBQU14RSxFQUFFLFFBQVEwcEMsRUFBSVUsQ0FBRSxFQUVsQnBxQyxFQUFFLEVBQUcsQ0FDUCxJQUFJMEIsRUFDRisrQixFQUFNajhCLEVBQUksTUFBTSxHQUFHLEVBQ25CcXBDLEVBQUssQ0FBQ2pDLEVBQU8sVUFDYmtDLEVBQUssQ0FBQ2xDLEVBQU8sbUJBQ2JtQyxFQUFpQm5DLEVBQU8sZ0JBQWtCLEdBQzFDb0MsRUFBVXZOLEVBQUksR0FDZHdOLEVBQWV4TixFQUFJLEdBQ25CeU4sRUFBUWx1QyxFQUFFLEVBQUksRUFDZG11QyxFQUFZRCxFQUFRRixFQUFRLE1BQU0sQ0FBQyxFQUFJQSxFQUN2Q3ZzQyxFQUFNMHNDLEVBQVUsT0FJbEIsR0FGSUwsSUFBSXBzQyxFQUFJbXNDLEVBQUlBLEVBQUtDLEVBQUlBLEVBQUtwc0MsRUFBR0QsR0FBT0MsR0FFcENtc0MsRUFBSyxHQUFLcHNDLEVBQU0sRUFBRyxDQUdyQixJQUZBQyxFQUFJRCxFQUFNb3NDLEdBQU1BLEVBQ2hCRyxFQUFVRyxFQUFVLE9BQU8sRUFBR3pzQyxDQUFDLEVBQ3hCQSxFQUFJRCxFQUFLQyxHQUFLbXNDLEVBQUlHLEdBQVdELEVBQWlCSSxFQUFVLE9BQU96c0MsRUFBR21zQyxDQUFFLEVBQ3ZFQyxFQUFLLElBQUdFLEdBQVdELEVBQWlCSSxFQUFVLE1BQU16c0MsQ0FBQyxHQUNyRHdzQyxJQUFPRixFQUFVLElBQU1BLEVBQzVCLENBRUR4cEMsRUFBTXlwQyxFQUNIRCxHQUFXcEMsRUFBTyxrQkFBb0IsTUFBUWtDLEVBQUssQ0FBQ2xDLEVBQU8sbUJBQzFEcUMsRUFBYSxRQUFRLElBQUksT0FBTyxPQUFTSCxFQUFLLE9BQVEsR0FBRyxFQUMxRCxNQUFRbEMsRUFBTyx3QkFBMEIsR0FBRyxFQUMzQ3FDLEdBQ0RELENBQ0osQ0FFRCxPQUFRcEMsRUFBTyxRQUFVLElBQU1wbkMsR0FBT29uQyxFQUFPLFFBQVUsR0FDM0QsRUFjRXpELEVBQUUsV0FBYSxTQUFVaUcsRUFBSSxDQUMzQixJQUFJOW1DLEVBQUcrbUMsRUFBSUMsRUFBSUMsRUFBSWxxQyxFQUFHbXFDLEVBQUsvbEMsRUFBR2dtQyxFQUFJQyxFQUFJckIsRUFBRzFiLEVBQUdobkIsRUFDMUMzSyxFQUFJLEtBQ0ptcUMsRUFBS25xQyxFQUFFLEVBRVQsR0FBSW91QyxHQUFNLE9BQ1IzbEMsRUFBSSxJQUFJMi9CLEVBQVVnRyxDQUFFLEVBR2hCLENBQUMzbEMsRUFBRSxjQUFnQkEsRUFBRSxHQUFLQSxFQUFFLElBQU0sSUFBTUEsRUFBRSxHQUFHNC9CLENBQUcsR0FDbEQsTUFBTSxNQUNILGVBQWlCLGFBQ2Y1L0IsRUFBRSxVQUFTLEVBQUssaUJBQW1CLG9CQUFzQm1rQyxFQUFRbmtDLENBQUMsQ0FBQyxFQUk1RSxHQUFJLENBQUMwaEMsRUFBSSxPQUFPLElBQUkvQixFQUFVcG9DLENBQUMsRUFvQi9CLElBbEJBc0gsRUFBSSxJQUFJOGdDLEVBQVVDLENBQUcsRUFDckJxRyxFQUFLTCxFQUFLLElBQUlqRyxFQUFVQyxDQUFHLEVBQzNCaUcsRUFBS0csRUFBSyxJQUFJckcsRUFBVUMsQ0FBRyxFQUMzQjE5QixFQUFJLGNBQWN3L0IsQ0FBRSxFQUlwQjlsQyxFQUFJaUQsRUFBRSxFQUFJcUQsRUFBRSxPQUFTM0ssRUFBRSxFQUFJLEVBQzNCc0gsRUFBRSxFQUFFLEdBQUssVUFBVWtuQyxFQUFNbnFDLEVBQUksVUFBWSxFQUFJLFNBQVdtcUMsRUFBTUEsR0FDOURKLEVBQUssQ0FBQ0EsR0FBTTNsQyxFQUFFLFdBQVduQixDQUFDLEVBQUksRUFBS2pELEVBQUksRUFBSWlELEVBQUlvbkMsRUFBTWptQyxFQUVyRCtsQyxFQUFNN0YsRUFDTkEsRUFBVSxFQUFJLEVBQ2RsZ0MsRUFBSSxJQUFJMi9CLEVBQVV6OUIsQ0FBQyxFQUduQjhqQyxFQUFHLEVBQUUsR0FBSyxFQUdScEIsRUFBSXpSLEVBQUluekIsRUFBR25CLEVBQUcsRUFBRyxDQUFDLEVBQ2xCaW5DLEVBQUtGLEVBQUcsS0FBS2hCLEVBQUUsTUFBTWlCLENBQUUsQ0FBQyxFQUNwQkMsRUFBRyxXQUFXSCxDQUFFLEdBQUssR0FDekJDLEVBQUtDLEVBQ0xBLEVBQUtDLEVBQ0xHLEVBQUtELEVBQUcsS0FBS3BCLEVBQUUsTUFBTWtCLEVBQUtHLENBQUUsQ0FBQyxFQUM3QkQsRUFBS0YsRUFDTGpuQyxFQUFJbUIsRUFBRSxNQUFNNGtDLEVBQUUsTUFBTWtCLEVBQUtqbkMsQ0FBQyxDQUFDLEVBQzNCbUIsRUFBSThsQyxFQUdOLE9BQUFBLEVBQUszUyxFQUFJd1MsRUFBRyxNQUFNQyxDQUFFLEVBQUdDLEVBQUksRUFBRyxDQUFDLEVBQy9CRyxFQUFLQSxFQUFHLEtBQUtGLEVBQUcsTUFBTUcsQ0FBRSxDQUFDLEVBQ3pCTCxFQUFLQSxFQUFHLEtBQUtFLEVBQUcsTUFBTUQsQ0FBRSxDQUFDLEVBQ3pCRyxFQUFHLEVBQUlDLEVBQUcsRUFBSTF1QyxFQUFFLEVBQ2hCcUUsRUFBSUEsRUFBSSxFQUdSc3RCLEVBQUlpSyxFQUFJOFMsRUFBSUosRUFBSWpxQyxFQUFHa2tDLENBQWEsRUFBRSxNQUFNdm9DLENBQUMsRUFBRSxJQUFLLEVBQUMsV0FDN0M0N0IsRUFBSTZTLEVBQUlKLEVBQUlocUMsRUFBR2trQyxDQUFhLEVBQUUsTUFBTXZvQyxDQUFDLEVBQUUsSUFBRyxDQUFFLEVBQUksRUFBSSxDQUFDMHVDLEVBQUlKLENBQUUsRUFBSSxDQUFDRyxFQUFJSixDQUFFLEVBRTFFMUYsRUFBVTZGLEVBRUg3YyxDQUNYLEVBTUV3VyxFQUFFLFNBQVcsVUFBWSxDQUN2QixNQUFPLENBQUN5RSxFQUFRLElBQUksQ0FDeEIsRUFjRXpFLEVBQUUsWUFBYyxTQUFVcUUsRUFBSXBDLEVBQUksQ0FDaEMsT0FBSW9DLEdBQU0sTUFBTSxTQUFTQSxFQUFJLEVBQUcsR0FBRyxFQUM1QlosRUFBTyxLQUFNWSxFQUFJcEMsRUFBSSxDQUFDLENBQ2pDLEVBY0VqQyxFQUFFLFNBQVcsU0FBVTFuQyxFQUFHLENBQ3hCLElBQUkrRCxFQUNGaUUsRUFBSSxLQUNKa0MsRUFBSWxDLEVBQUUsRUFDTnBFLEVBQUlvRSxFQUFFLEVBR1IsT0FBSXBFLElBQU0sS0FDSnNHLEdBQ0ZuRyxFQUFNLFdBQ0ZtRyxFQUFJLElBQUduRyxFQUFNLElBQU1BLElBRXZCQSxFQUFNLE9BR0ovRCxHQUFLLEtBQ1ArRCxFQUFNSCxHQUFLbWtDLEdBQWNua0MsR0FBS29rQyxFQUMzQixjQUFjLGNBQWNoZ0MsRUFBRSxDQUFDLEVBQUdwRSxDQUFDLEVBQ25DLGFBQWEsY0FBY29FLEVBQUUsQ0FBQyxFQUFHcEUsRUFBRyxHQUFHLEVBQ2pDNUQsSUFBTSxJQUFNd29DLEdBQ3JCeGdDLEVBQUk0Z0MsRUFBTSxJQUFJakIsRUFBVTMvQixDQUFDLEVBQUc2L0IsRUFBaUJqa0MsRUFBSSxFQUFHa2tDLENBQWEsRUFDakUvakMsRUFBTSxhQUFhLGNBQWNpRSxFQUFFLENBQUMsRUFBR0EsRUFBRSxFQUFHLEdBQUcsSUFFL0MsU0FBU2hJLEVBQUcsRUFBR3VvQyxFQUFTLE9BQVEsTUFBTSxFQUN0Q3hrQyxFQUFNeWpDLEVBQVksYUFBYSxjQUFjeC9CLEVBQUUsQ0FBQyxFQUFHcEUsRUFBRyxHQUFHLEVBQUcsR0FBSTVELEVBQUdrSyxFQUFHLEVBQUksR0FHeEVBLEVBQUksR0FBS2xDLEVBQUUsRUFBRSxLQUFJakUsRUFBTSxJQUFNQSxJQUc1QkEsQ0FDWCxFQU9FMmpDLEVBQUUsUUFBVUEsRUFBRSxPQUFTLFVBQVksQ0FDakMsT0FBT3lFLEVBQVEsSUFBSSxDQUN2QixFQUdFekUsRUFBRSxhQUFlLEdBRWpCQSxFQUFFLE9BQU8sYUFBZSxZQUd4QkEsRUFBRSxPQUFPLElBQUksNEJBQTRCLEdBQUtBLEVBQUUsUUFFNUNILEdBQWdCLE1BQU1JLEVBQVUsSUFBSUosQ0FBWSxFQUU3Q0ksQ0FDVCxDQVNBLFNBQVMsU0FBUzMvQixFQUFHLENBQ25CLElBQUkvRyxFQUFJK0csRUFBSSxFQUNaLE9BQU9BLEVBQUksR0FBS0EsSUFBTS9HLEVBQUlBLEVBQUlBLEVBQUksQ0FDcEMsQ0FJQSxTQUFTLGNBQWNsQixFQUFHLENBTXhCLFFBTEltSyxFQUFHdUIsRUFDTCxFQUFJLEVBQ0o0USxFQUFJdGMsRUFBRSxPQUNObXhCLEVBQUlueEIsRUFBRSxHQUFLLEdBRU4sRUFBSXNjLEdBQUksQ0FHYixJQUZBblMsRUFBSW5LLEVBQUUsS0FBTyxHQUNiMEwsRUFBSSxTQUFXdkIsRUFBRSxPQUNWdUIsSUFBS3ZCLEVBQUksSUFBTUEsRUFBRSxDQUN4QmduQixHQUFLaG5CLENBQ04sQ0FHRCxJQUFLbVMsRUFBSTZVLEVBQUUsT0FBUUEsRUFBRSxXQUFXLEVBQUU3VSxDQUFDLElBQU0sSUFBSSxDQUU3QyxPQUFPNlUsRUFBRSxNQUFNLEVBQUc3VSxFQUFJLEdBQUssQ0FBQyxDQUM5QixDQUlBLFNBQVMsUUFBUTljLEVBQUdtYSxFQUFHLENBQ3JCLElBQUkzWixFQUFHQyxFQUNMMHBDLEVBQUtucUMsRUFBRSxFQUNQMnJDLEVBQUt4eEIsRUFBRSxFQUNQelksRUFBSTFCLEVBQUUsRUFDTjhjLEVBQUkzQyxFQUFFLEVBQ05oYSxFQUFJSCxFQUFFLEVBQ042eEIsRUFBSTFYLEVBQUUsRUFHUixHQUFJLENBQUN6WSxHQUFLLENBQUNvYixFQUFHLE9BQU8sS0FNckIsR0FKQXRjLEVBQUkycEMsR0FBTSxDQUFDQSxFQUFHLEdBQ2QxcEMsRUFBSWtyQyxHQUFNLENBQUNBLEVBQUcsR0FHVm5yQyxHQUFLQyxFQUFHLE9BQU9ELEVBQUlDLEVBQUksRUFBSSxDQUFDcWMsRUFBSXBiLEVBR3BDLEdBQUlBLEdBQUtvYixFQUFHLE9BQU9wYixFQU1uQixHQUpBbEIsRUFBSWtCLEVBQUksRUFDUmpCLEVBQUlOLEdBQUsweEIsRUFHTCxDQUFDc1ksR0FBTSxDQUFDd0IsRUFBSSxPQUFPbHJDLEVBQUksRUFBSSxDQUFDMHBDLEVBQUszcEMsRUFBSSxFQUFJLEdBRzdDLEdBQUksQ0FBQ0MsRUFBRyxPQUFPTixFQUFJMHhCLEVBQUlyeEIsRUFBSSxFQUFJLEdBSy9CLElBSEFzYyxHQUFLM2MsRUFBSWdxQyxFQUFHLFNBQVd0WSxFQUFJOFosRUFBRyxRQUFVeHJDLEVBQUkweEIsRUFHdkNud0IsRUFBSSxFQUFHQSxFQUFJb2IsRUFBR3BiLElBQUssR0FBSXlvQyxFQUFHem9DLElBQU1pcUMsRUFBR2pxQyxHQUFJLE9BQU95b0MsRUFBR3pvQyxHQUFLaXFDLEVBQUdqcUMsR0FBS2xCLEVBQUksRUFBSSxHQUczRSxPQUFPTCxHQUFLMHhCLEVBQUksRUFBSTF4QixFQUFJMHhCLEVBQUlyeEIsRUFBSSxFQUFJLEVBQ3RDLENBTUEsU0FBUyxTQUFTaUksRUFBR2ttQyxFQUFLQyxFQUFLNXJDLEVBQU0sQ0FDbkMsR0FBSXlGLEVBQUlrbUMsR0FBT2xtQyxFQUFJbW1DLEdBQU9ubUMsSUFBTSxVQUFVQSxDQUFDLEVBQ3pDLE1BQU0sTUFDSixnQkFBa0J6RixHQUFRLGFBQWUsT0FBT3lGLEdBQUssU0FDbERBLEVBQUlrbUMsR0FBT2xtQyxFQUFJbW1DLEVBQU0sa0JBQW9CLG9CQUN6Qyw2QkFBK0IsT0FBT25tQyxDQUFDLENBQUMsQ0FFakQsQ0FJQSxTQUFTLE1BQU1BLEVBQUcsQ0FDaEIsSUFBSXRJLEVBQUlzSSxFQUFFLEVBQUUsT0FBUyxFQUNyQixPQUFPLFNBQVNBLEVBQUUsRUFBSSxRQUFRLEdBQUt0SSxHQUFLc0ksRUFBRSxFQUFFdEksR0FBSyxHQUFLLENBQ3hELENBR0EsU0FBUyxjQUFjcUUsRUFBSyxFQUFHLENBQzdCLE9BQVFBLEVBQUksT0FBUyxFQUFJQSxFQUFJLE9BQU8sQ0FBQyxFQUFJLElBQU1BLEVBQUksTUFBTSxDQUFDLEVBQUlBLElBQzVELEVBQUksRUFBSSxJQUFNLE1BQVEsQ0FDMUIsQ0FHQSxTQUFTLGFBQWFBLEVBQUssRUFBRzBILEVBQUcsQ0FDL0IsSUFBSXpLLEVBQUtvdEMsRUFHVCxHQUFJLEVBQUksRUFBRyxDQUdULElBQUtBLEVBQUszaUMsRUFBSSxJQUFLLEVBQUUsRUFBRzJpQyxHQUFNM2lDLEVBQUUsQ0FDaEMxSCxFQUFNcXFDLEVBQUtycUMsQ0FHZixTQUNJL0MsRUFBTStDLEVBQUksT0FHTixFQUFFLEVBQUkvQyxFQUFLLENBQ2IsSUFBS290QyxFQUFLM2lDLEVBQUcsR0FBS3pLLEVBQUssRUFBRSxFQUFHb3RDLEdBQU0zaUMsRUFBRSxDQUNwQzFILEdBQU9xcUMsQ0FDYixNQUFlLEVBQUlwdEMsSUFDYitDLEVBQU1BLEVBQUksTUFBTSxFQUFHLENBQUMsRUFBSSxJQUFNQSxFQUFJLE1BQU0sQ0FBQyxHQUk3QyxPQUFPQSxDQUNULENBTVUsSUFBQyxVQUFZLE1BQUssRUNydkZyQixNQUFNLFdBQWNzcUMsR0FBOEIsS0FBS0EsRUFBUSxXQUF1QkMsSUFBQSxDQUM1RixDQUFDQSxFQUFPLEtBQU1BLEVBQU8sS0FDdEIsRUFBRSxFQUdGLGVBQWUsU0FBU0MsRUFBMkJDLEVBQXVCQyxFQUF1QnRmLEVBQXVDLENBQ2pJLE1BQUF1ZixFQUFRLFFBQVEsWUFBWSxDQUNqQyxjQUFlSCxFQUFrQixHQUNqQyxjQUFlQyxFQUNmLFVBQVdDLEVBQ1gsUUFBU3RmLENBQUEsQ0FDVCxFQUdLd2YsRUFBVyxRQUFRLE9BQU9ELENBQUssRUFBRSxPQUFPLEVBR3hDRSxFQUFXLFdBQVcsSUFBQSxFQUFNLE9BRzVCeEgsRUFBVyxNQUFNLFFBQVEsSUFBSXdILENBQVEsRUFFeEMsR0FBV3hILEdBQVUsU0FBUyxPQUE5QixPQUNJLE1BQUEsSUFBSSxNQUFNLDZCQUE2QixFQU85QyxPQUFPLE1BSE8sTUFBTSxhQUFhLE9BQU8sTUFBTSxXQUFXLFVBQVUsa0JBQWtCQSxFQUFTLElBQUksQ0FBQyxDQUFDLEdBR2pGLEtBQUt1SCxFQUFVLEVBQUksQ0FDdkMsQ0FnQ08sTUFBTSxhQUF1QyxDQUtuRCxZQUE2QkUsRUFBbURDLEVBQThCLENBSjdGN3BCLEdBQUEsaUJBQ0FBLEdBQUEsZ0JBQ1RBLEdBQUEsa0JBRXFCLEtBQUEsV0FBQTRwQixFQUFtRCxLQUFBLFNBQUFDLEVBQzFFLEtBQUEsU0FBVyxPQUFPLFNBQVNBLENBQVEsRUFFeEMsS0FBSyxRQUFVLElBQUksWUFBWUQsRUFBVyxXQUFZLENBQ3JELFVBQVc5SyxvQkFBQUEsUUFBQUEsS0FBSywwQkFBMEIsQ0FBQyxnQkFBZ0IsR0FBTSxDQUFBLENBQ2pFLEVBRUksS0FBSyxjQUNYLENBRUEsTUFBZ0IsYUFBYWdMLEVBQXdDLENBRXBFLE1BQU1DLEVBQWEsTUFBTSxJQUFJQyxnQkFBZ0IsS0FBSyxPQUFPLEVBQUUsUUFBUSxDQUNsRSxRQUFTRixDQUFBLENBQ1QsRUFHSyxDQUNMLFFBQVNwb0IsRUFDVCxNQUFPL00sQ0FBQSxFQUNKbzFCLEdBQVksU0FBVyxHQUczQixHQUFJcm9CLEdBRUosR0FDUUEsSUFBWSxtQ0FDYixNQUFBLElBQUksTUFBTSxxQ0FBcUNBLHFDQUEyQyxNQUgxRixPQUFBLElBQUksTUFBTSxlQUFlb29CLG9EQUE0RCxFQU90RixNQUFBekgsRUFBWSxZQUFZLE9BQU8xdEIsQ0FBVSxFQUV4QyxNQUFBLENBQ04sUUFBUyxLQUFLLFNBQVMsR0FDdkIsY0FBZSxPQUFPMHRCLEVBQVUsYUFBYSxFQUM3QyxTQUFVLE9BQU9BLEVBQVUsUUFBUSxDQUFBLENBRXJDLENBRUEsTUFBZ0IsZ0JBQWdCalgsRUFBa0JELEVBQWlCOGUsRUFBaUJDLEVBQThELENBQ2pKLE1BQU1DLEVBQVksU0FBUyxlQUFlL2UsRUFBVUQsRUFBUyxLQUFLLFFBQVEsRUFHcEVpZixFQUFXLEtBQUssVUFBVSxHQUFHRCxDQUFTLEVBR3RDLGFBQUEsV0FBVyxLQUFLLE1BQU0xZixHQUFPLENBRTVCLE1BQUFBLEVBQUcsSUFBSTBmLEVBQVcsQ0FDdkIsVUFBV0QsRUFDWCxLQUFNLEtBQUssTUFBTSxLQUFLLFVBQVVELENBQVMsQ0FBQyxDQUFBLENBQzFDLEVBR0QsS0FBSyxVQUFZeGYsQ0FBQSxDQUNqQixFQUdNLENBQUMwZixFQUFXQyxDQUFRLENBQzVCLENBRUEsTUFBTSxjQUE4QixDQUM5QixLQUFBLFVBQVksTUFBTSxXQUFXLEtBQUssQ0FDeEMsQ0FFQSxjQUFjaGYsRUFBa0JELEVBQXNDLENBQ3JFLE1BQU1nZixFQUFZLFNBQVMsZUFBZS9lLEVBQVVELEVBQVMsS0FBSyxRQUFRLEVBRW5FLE9BQUEsS0FBSyxVQUFVLEdBQUdnZixDQUFTLENBQ25DLENBRUEsTUFBTSxZQUFZL2UsRUFBeUJELEVBQWtCa2YsRUFBUyxFQUEyQixDQUMxRixNQUFBQyxFQUFTLEtBQUssTUFHcEJuZixFQUFVQSxHQUFXLE9BQU8sS0FBSyxLQUFLLFNBQVMsS0FBSyxFQUFFLEdBY3RELE1BQU00ZSxFQUFhLE1BQU0sSUFBSVEsa0JBQWdCLEtBQUssT0FBTyxFQUFFLFFBQVEsQ0FDbEUsUUFBU25mLEVBQ1QsTUFBTyxLQUFLLFNBQVMsTUFBTUQsR0FBUyxLQUFBLENBQ3BDLEVBRUssQ0FDTCxRQUFTOGUsQ0FDTixFQUFBRixFQUdKLEdBQUcsQ0FBQ0UsRUFDRyxNQUFBLElBQUksTUFBTSx5QkFBeUIsRUFJcEMsS0FBQSxDQUFDRSxFQUFXQyxDQUFRLEVBQUksTUFBTSxLQUFLLGdCQUFnQmhmLEVBQVVELEVBQVM4ZSxFQUFXSyxDQUFNLEVBQ3RGLE1BQUEsQ0FDTixRQUFTTCxFQUNULE9BQVFHLEVBQ1IsUUFBU0QsQ0FBQSxDQUVYLENBRUEsTUFBTSxhQUFhL2UsRUFBdUQsQ0FDbkUsTUFBQWtmLEVBQVMsS0FBSyxNQUVkUCxFQUFhLE1BQU0sSUFBSVEsa0JBQWdCLEtBQUssT0FBTyxFQUFFLFlBQVksQ0FDdEUsUUFBU25mLENBQUEsQ0FDVCxFQUVLLENBQ0wsU0FBVW9mLENBQ1AsRUFBQVQsRUFHRVUsRUFBVSxLQUFLLFNBQVMsTUFHeEJDLEVBQVcsT0FBT0QsRUFBUyxDQUFDdGYsRUFBU3dmLEtBQVksQ0FDdEQsQ0FBQ0EsRUFBTyxPQUFReGYsQ0FDZixFQUFBLEVBR0lRLEVBQThCLENBQUEsRUFHcEMsVUFBVXNlLEtBQWFPLEVBQVksQ0FFNUIsTUFBQXJmLEVBQVV1ZixFQUFTVCxFQUFVLE9BQ3BCUSxFQUFRdGYsR0FHakIsS0FBQSxDQUFDZ2YsRUFBV0MsQ0FBUSxFQUFJLE1BQU0sS0FBSyxnQkFBZ0JoZixFQUFVRCxFQUFTOGUsRUFBV0ssQ0FBTSxFQUM3RjNlLEVBQU9SLEdBQVcsQ0FDakIsUUFBUzhlLEVBQ1QsT0FBUUcsRUFDUixRQUFTRCxDQUFBLENBRVgsQ0FFTyxPQUFBeGUsQ0FDUixDQUVBLElBQUksUUFBa0IsQ0FDZCxNQUFBLENBQUMsQ0FBQyxLQUFLLFdBQVcsT0FDMUIsQ0FFQSxPQUFPaWYsRUFBb0JDLEVBQTJGLENBQy9HLE1BQUFDLEVBQVMsS0FBSyxXQUFXLFFBRS9CLEdBQUcsQ0FBQ0EsRUFBYyxNQUFBLElBQUksTUFBTSwrREFBK0QsRUFFM0YsTUFBTUMsRUFBTyxJQUFJLFVBQVUsU0FBU0QsYUFBa0IsRUFFakRDLEVBQUEsT0FBVXRwQixHQUFZLENBQ3JCc3BCLEVBQUEsS0FBSyxLQUFLLFVBQVUsQ0FDeEIsUUFBUyxNQUNULE9BQVEsWUFDUixHQUFJLElBQ0osT0FBUSxDQUNQLE1BQU9ILEVBQVMsS0FBSyxPQUFPLENBQzdCLENBQ0EsQ0FBQSxDQUFDLENBQUEsRUFHRUcsRUFBQSxVQUFhdHBCLEdBQWtDLENBSzdDLE1BQUF1cEIsRUFGUSxLQUFLLE1BQU12cEIsRUFBUSxNQUFRLElBQUksR0FFdEIsUUFBUSxNQUFNLE1BRWxDdXBCLEdBQ0dILEVBQVksS0FBTUcsQ0FBcUIsQ0FDN0MsRUFHRCxJQUFJQyxFQUFnQixHQUNmLE9BQUFGLEVBQUEsUUFBV3RwQixHQUFZLENBQ3ZCd3BCLEdBQ0VKLEVBQVlwcEIsQ0FBTyxDQUN6QixFQUdJc3BCLEVBQUEsUUFBV3RwQixHQUFZLENBQ3RCb3BCLEVBQVlwcEIsQ0FBTyxDQUFBLEVBR2xCLElBQU0sQ0FDSXdwQixFQUFBLEdBQ2hCRixFQUFLLE1BQU0sQ0FBQSxDQUViLENBR0EsVUFBVTNmLEVBQXlCeWYsRUFBd0YsQ0FDMUgsT0FBTyxLQUFLLE9BQU8sQ0FDbEIsZ0JBQ0EsdUJBQXVCemYsSUFBQSxFQUNyQixDQUFDOGYsRUFBUUYsSUFBWSxDQUNsQkgsRUFBWUssRUFBU0YsR0FBUyxVQUFZLE1BQWlDLENBQUEsQ0FDaEYsQ0FDRixDQUVBLE9BQU81ZixFQUF5QitmLEVBQXFGLENBQ3BILE9BQU8sS0FBSyxPQUFPLENBQ2xCLGdCQUNBLG9CQUFvQi9mLElBQUEsRUFDbEIsQ0FBQzhmLEVBQVFGLElBQVksQ0FDbEJHLEVBQVNELEVBQVNGLEdBQVMsVUFBWSxNQUFpQyxDQUFBLENBQzdFLENBQ0YsQ0FFQSxNQUFNLFdBQVdJLEVBQTJDLENBQzNELE1BQU1yQixFQUFhLE1BQU0sSUFBSXNCLGtCQUFnQixLQUFLLE9BQU8sRUFBRSxZQUFZLENBQ3RFLE9BQVEsQ0FDUCxtQkFBbUJELElBQ3BCLEVBQ0EsV0FBWSxDQUNYLE1BQU8sR0FDUixFQUNBLFFBQVMsUUFBUSxhQUFBLENBQ2pCLEVBRUUsR0FBQSxDQUFDckIsR0FBWSxLQUFLLE9BQ2QsTUFBQSxJQUFJLE1BQU0sZ0RBQWdELEVBR2pFLE1BQU11QixFQUFZdkIsRUFBVyxJQUFJLEdBQUcsU0FBVSxZQUMzQyxHQUFNdUIsRUFBVSxTQUFoQixFQUNJLE1BQUEsSUFBSSxNQUFNLGlCQUFpQixFQUc1QixLQUFBLENBQ0wsUUFBU0MsRUFDVCxNQUFPQyxDQUFBLEVBQ0pGLEVBQVUsR0FBRyxVQUVqQixHQUF5Q0MsSUFBdEMsa0NBQ0ksTUFBQSxJQUFJLE1BQU0sNEJBQTRCLEVBR3RDLE1BQUEsQ0FDTixTQUFVRCxFQUFVLEdBQUcsU0FDdkIsT0FBUXZCLEVBQVcsWUFBWSxHQUFHLE9BQ2xDLE9BQVEsYUFBYSxvQkFBb0J5QixDQUFjLENBQUEsQ0FFekQsQ0FFQSxNQUFNLFlBQVlDLEVBQStCQyxFQUF3QnhsQixFQUF3QmlFLEVBQVEsU0FBUyxNQUE0QixDQUV2SSxNQUFBd2YsRUFBVyxXQUFXLElBQUEsRUFBTSxPQUc1QnhILEVBQVcsTUFBTSxRQUFRLElBQUl3SCxDQUFRLEVBRXhDLEdBQVd4SCxHQUFVLFNBQVMsT0FBOUIsT0FDSSxNQUFBLElBQUksTUFBTSw2QkFBNkIsRUFPOUMsTUFBTXdKLEVBQWMsTUFITixNQUFNLGFBQWEsT0FBTyxNQUFNLFdBQVcsVUFBVSxrQkFBa0J4SixFQUFTLElBQUksQ0FBQyxDQUFDLEdBR3BFLEtBQUtzSixDQUFpQixFQUdoREcsRUFBVSxNQUFNLE9BQU8sT0FBTyxVQUFVLE1BQU9ELEVBQWEsT0FBUSxHQUFPLENBQUMsV0FBVyxDQUFDLEVBRzFFLE1BQU0sT0FBTyxPQUFPLFdBQVcsQ0FDbEQsS0FBTSxPQUNOLEtBQU0sVUFDTixLQUFNLHNCQUNOLEtBQU05MkIsY0FBWSxlQUFlc1YsRUFBUSxFQUFFLENBQUMsQ0FBQSxFQUMxQ3loQixFQUFTLEdBQUcsRUFHZixNQUFNQyxFQUFTLE1BQU0sT0FBTyxPQUFPLFVBQVUsQ0FDNUMsS0FBTSxPQUNOLEtBQU0sVUFDTixLQUFNaDNCLGNBQVksZUFBZXNWLEVBQVEsRUFBRSxDQUFDLEdBQzFDeWhCLEVBQVMsQ0FDWCxLQUFNLFVBQ04sT0FBUSxHQUNOLEVBQUEsR0FBTyxDQUFDLFVBQVcsU0FBUyxDQUFDLEVBS3pCLE9BRmdCLE1BQU0sUUFBUUYsRUFBWUcsRUFBUTNsQixDQUFVLENBR3BFLENBRUEsTUFBTSxXQUFXNGxCLEVBQXNDLENBVy9DLE9BVlksTUFBTSxJQUFJVCxrQkFBZ0IsS0FBSyxPQUFPLEVBQUUsWUFBWSxDQUN0RSxPQUFRLENBQ1AsNkJBQTZCUyxJQUM5QixFQUNBLFFBQVMsUUFBUSxhQUNqQixXQUFZLENBQ1gsTUFBTyxHQUNSLENBQUEsQ0FDQSxHQUVpQixZQUFZLE9BQVMsQ0FDeEMsQ0FFQSxNQUFNLFNBQVMxZ0IsRUFBa0IyZ0IsRUFBWSxFQUF3QixDQUNwRSxNQUFNaEMsRUFBYSxNQUFNLElBQUlzQixrQkFBZ0IsS0FBSyxPQUFPLEVBQUUsWUFBWSxDQUN0RSxPQUFRLENBQ1AsdUJBQXVCamdCLEtBQ3ZCLGNBQWMyZ0IsR0FDZixFQUNBLFdBQVksQ0FDWCxNQUFPLEtBQ1IsQ0FBQSxDQUNBLEVBR0tDLEVBQVdsTixvQkFBQUEsUUFBQUEsS0FBSyxPQUFPLHVCQUF3QixDQUNwRCxLQUFNLCtDQUNOLFVBQVdBLGlDQUFLLG1CQUFtQixFQUNuQyxNQUFPLEVBQUEsQ0FDUCxFQUVRa04sRUFBQSxVQUFXQyxHQUFjLENBQ2pDLFFBQVEsSUFBSUEsQ0FBUyxFQUNyQixRQUFBLENBQ0EsRUFFUUQsRUFBQSxVQUFXcmpDLEdBQVUsQ0FDN0IsUUFBUSxJQUFJQSxDQUFLLEVBQ2pCLFFBQUEsQ0FDQSxFQUVEcWpDLEVBQVMsTUFBTSxDQUFDRSxFQUFVQyxFQUFPQyxJQUFlLENBQy9DLFFBQVEsSUFBSSxDQUNYLFNBQUFGLEVBQ0EsTUFBQUMsRUFDQSxXQUFBQyxDQUFBLENBQ0EsRUFDRCxTQUNBLFFBQVEsSUFBSSxNQUFNLENBQUEsQ0FDbEIsRUFFREosRUFBUyxNQUFNLEVBRVQsTUFBQUssRUFBTyxtQkFBbUIsWUFBWSxDQUMzQyxPQUFRLENBQ1AsZUFDRCxDQUFBLENBQ0EsRUFDRCxTQWNBLEdBYkFMLEVBQVMsS0FBSyxDQUNiLEdBQUdLLEVBQ0gsR0FBRyx1QkFBdUIsV0FBQSxDQUMxQixFQUNETCxFQUFTLFdBQVcsRUFTakIsQ0FBQ2pDLEVBQ0csTUFBQSxJQUFJLE1BQU0sNkJBQTZCLEVBSzlDLEdBRGdCLEVBQUVBLEVBQVcsWUFBWSxPQUFTLEdBQ3JDLEVBQ04sTUFBQSxJQUFJLE1BQU0scUJBQXFCLEVBR3RDLE1BQU11QyxFQUFxQixDQUFBLEVBR2pCLFVBQUFDLEtBQVN4QyxFQUFXLFlBQWEsQ0FFMUMsTUFBTWEsRUFBVyxLQUFLLE1BQU0yQixFQUFNLE1BQU0sRUFBRSxHQUFHLE9BRzdDLFVBQVVuRCxLQUFXd0IsRUFFakIsR0FBZXhCLEVBQVEsT0FBdkIsV0FBNkIsQ0FFekIsTUFBQW9ELEVBQVUsV0FBV3BELENBQU8sRUFHbENrRCxFQUFPLEtBQUssQ0FDWCxHQUFHRSxFQUNILE9BQVFELEVBQU0sT0FDZCxVQUFXQSxFQUFNLFVBQ2pCLE9BQVFBLEVBQU0sTUFBQSxDQUNkLENBQ0YsQ0FFRixDQUVBLGVBQVEsSUFBSUQsQ0FBTSxFQUlYQSxDQUNSLENBRUEsTUFBTSxTQUFTeEMsRUFBMEIyQyxFQUE2QnRoQixFQUFpQnVoQixFQUFtQkMsRUFBTyxHQUFJeGlCLEVBQVEsU0FBUyxJQUFBLEVBQTZCLENBQzVKLE1BQUF3Z0IsRUFBU3hnQixFQUFRLE1BQU1nQixHQUV2QnloQixFQUFhLFFBQVEsWUFBWSxDQUN0QyxPQUFRLENBQUMsQ0FDUixNQUFPakMsRUFBTyxNQUNkLE9BQVErQixFQUFVLFNBQVMsQ0FBQSxDQUMzQixFQUNELFlBQWE1QyxFQUNiLFVBQVcyQyxDQUFBLENBQ1gsRUFFS0ksRUFBaUIsQ0FDdEIsUUFBUywrQkFDVCxNQUFPLFFBQVEsT0FBT0QsQ0FBVSxFQUFFLE9BQU8sQ0FBQSxFQUdwQyxDQUFDRSxFQUFRQyxDQUFRLEVBQUksTUFBTSxLQUFLLFVBQVUsQ0FDL0MsS0FBTSxDQUFDRixDQUFTLEVBQ2hCLEtBQU1GLEVBQ04sU0FBVSxPQUNWLE9BQVEsQ0FDUCxNQUFPLEdBQ1IsQ0FBQSxDQUNBLEVBRU0sTUFBQSxDQUNOLE1BQU8sYUFBYSxJQUFJLEVBQ3hCLE1BQU83QyxFQUNQLEtBQU1nRCxFQUNOLEtBQU0zaEIsRUFDTixJQUFLeWhCLEVBQ0wsSUFBSyxrQkFBa0JHLENBQVEsQ0FBQSxDQUVqQyxDQUVBLE1BQU0sVUFBVUMsRUFBOEQsQ0FDdkUsS0FBQSxDQUNMLEtBQU1DLEVBQ04sS0FBTU4sRUFDTixTQUFVTyxFQUNWLE9BQVFDLEVBQ1IsUUFBUzlLLEVBQVUsV0FBVyxJQUFJLENBQy9CLEVBQUEySyxFQUdBLEdBQUEsQ0FDSCxPQUFRSSxFQUNSLE1BQU9DLENBQ0osRUFBQUYsRUFHREEsRUFBTyxRQUVVQyxFQUFBLElBQUksVUFBVUQsRUFBTyxLQUFxQixFQUFFLE1BQU1ELEVBQWEsVUFBVSxFQUFFLFNBQVMsRUFHdkdHLEVBQVUsT0FBTyxPQUFPLFNBQVMsSUFBTSxFQUFBLEtBQUssRUFBRSxHQUFHLE9BSWxELE1BQU1qaUIsRUFBVyxPQUFPLFdBQVdpWCxFQUFVLE9BQVEsS0FBSyxRQUFRLEVBRzVEc0gsRUFBVyxXQUFXLElBQUEsRUFBTSxPQUc1QnhILEVBQVcsTUFBTSxRQUFRLElBQUl3SCxDQUFRLEVBRXhDLEdBQVd4SCxHQUFVLFNBQVMsT0FBOUIsT0FDSSxNQUFBLElBQUksTUFBTSw2QkFBNkIsRUFPeEMsTUFBQVgsR0FIUyxNQUFNLGFBQWEsT0FBTyxNQUFNLFdBQVcsT0FBTyxJQUFNLGtCQUFrQlcsRUFBUyxJQUFJLENBQUMsRUFBRyxFQUFJLEdBR3ZGLGtCQUdqQm1MLEVBQVksT0FBTyxZQUFZLENBQ3BDLFNBQVVMLEVBQ1YsS0FBTU4sQ0FBQSxDQUNOLEVBQ0tuRCxFQUFZLE9BQU8sT0FBTzhELENBQVMsRUFBRSxPQUFPLEVBRzVDQyxFQUFXLE1BQU0sS0FBSyxhQUFhbmlCLENBQVEsRUFHM0NvaUIsRUFBYyxTQUFTLFlBQVksQ0FDeEMsWUFBYSxDQUNaLENBQ0MsVUFBVyxDQUNWLFFBQVMsa0NBQ1QsTUFBTyxPQUFPLE9BQU8sT0FBTyxZQUFZLENBQ3ZDLElBQUtoTSxDQUFBLENBQ0wsQ0FBQyxFQUFFLE9BQU8sQ0FDWixFQUNBLFNBQVUsQ0FDVCxPQUFRLENBQ1AsS0FBTSxTQUFTLGdCQUNoQixDQUNELEVBQ0EsU0FBVStMLEVBQVMsU0FBUyxFQUM3QixDQUNELEVBQ0EsSUFBSyxDQUNKLE9BQVEsQ0FBQyxDQUNSLE9BQVFILEVBQ1IsTUFBT0MsQ0FBQSxDQUNQLEVBQ0QsU0FBVUgsRUFBYSxFQUN4QixDQUFBLENBQ0EsRUFFSzNELEVBQVksU0FBUyxPQUFPaUUsQ0FBVyxFQUFFLE9BQU8sRUFHaEQ5cEIsRUFBaUIsTUFBTSxTQUFTNnBCLEVBQVMsY0FBZWhFLEVBQVdDLEVBQVcsU0FBUyxJQUFJLEVBQUUsRUFBRSxFQUcvRnVELEVBQVcsTUFBTSxPQUFPLE1BQU0sWUFBWSxDQUMvQyxVQUFXdkQsRUFDWCxjQUFlRCxFQUNmLFdBQVksQ0FBQzdsQixDQUFjLENBQUEsQ0FDM0IsQ0FBQyxFQUFFLFNBUUVvcEIsR0FMYSxNQUFNLElBQUl6QixrQkFBZ0IsS0FBSyxPQUFPLEVBQUUsWUFBWSxDQUN0RSxRQUFTMEIsRUFDVCxLQUFNLGNBQWMsb0JBQUEsQ0FDcEIsR0FFeUIsWUFBWSxPQUV0QyxHQUFHLENBQUNELEVBQ0gsTUFBTSxPQUFPLENBQ1osS0FBTSx5QkFBQSxDQUNOLEVBR0ssTUFBQSxDQUFDQSxFQUFRQyxDQUFRLENBQ3pCLENBQ0QsQ0MzckJPLE1BQU0sT0FBUyxtQkFBbUIsQ0FDeEMsTUFBTyxlQUNQLFVBQVcsTUFDWCxNQUFPLGNBQXFCLGdCQUF3QyxDQXVDcEUsQ0FDRCxDQUFDLEVDdUNZLFNBQVcsbUJBQW1CLENBQzFDLE1BQU8sa0JBQ1AsVUFBVyxNQUNYLE1BQU8sTUFBTVUsV0FBa0IsZ0JBQTJDLENBQ3pFLE9BQU8sUUFBUUMsRUFBNkIsQ0FDM0MsTUFBTyxZQUFZLGlCQUFpQjc0QixjQUFZLGVBQWU2NEIsQ0FBTSxDQUFDLENBQUMsR0FDeEUsQ0FFQSxPQUFPLFNBQVNDLEVBQWlDLENBQ3pDLE9BQUFGLEdBQVUsUUFBUUUsRUFBVSxVQUFVLENBQzlDLENBRUEsT0FBTyxTQUFTQSxFQUFpQ3hqQixFQUE0QixTQUFTLE1BQXNCLENBQ3BHLE9BQUEsSUFBSSxjQUFjd2pCLEVBQVd4akIsQ0FBTyxDQUM1QyxDQUNELENBQ0QsQ0FBQyxFQ3BHWSxLQUFPLG1CQUFtQixDQUN0QyxNQUFPLGNBQ1AsTUFBTyxjQUFvQixhQUFvQyxDQUM5RCxPQUFPLFdBQVd5akIsRUFBa0MsQ0FDbkQsTUFBTyxRQUFRQSxFQUFNLE9BQ3RCLENBRUEsT0FBT0MsRUFBd0MsQ0FDdkMsT0FBQSxLQUFLLFNBQVMsU0FBU0EsSUFBVSxJQUN6QyxDQUVBLFVBQVVDLEVBQXFDLENBQzlDLE9BQU8sS0FBSyxTQUFTLElBQUlBLElBQWUsQ0FBQSxDQUN6QyxDQUVBLFdBQVdBLEVBQStDLENBQ3pELE9BQU8sS0FBSyxVQUFVQSxDQUFVLEVBQUUsSUFBYUQsR0FBQSxLQUFLLE9BQU9BLENBQUssQ0FBRSxFQUFFLE9BQVlqMEIsR0FBQSxDQUFDLENBQUNBLENBQUMsQ0FDcEYsQ0FFQSxVQUFVbTBCLEVBQTRCQyxFQUFnQyxDQUVoRSxZQUFBLFNBQVMsSUFBSUQsR0FBZUMsRUFHMUIsS0FBSyxNQUNiLENBRUEsV0FBV0YsRUFBMkJHLEVBQTJDLENBQ3pFLE9BQUEsS0FBSyxVQUFVSCxFQUFZRyxFQUFPLElBQVNyMEIsR0FBQUEsRUFBRSxLQUFLLENBQUMsQ0FDM0QsQ0FDRCxDQUNELENBQUMsRUN0Q0ssaUJBQW1CLENBQUEsRUFNekIsU0FBUyxTQUFTbGYsRUFBTytZLEVBQU8sQ0FDNUIsTUFBTyxDQUNILFVBQVcsU0FBUy9ZLEVBQU8rWSxDQUFLLEVBQUUsU0FDMUMsQ0FDQSxDQU1BLFNBQVMsU0FBUy9ZLEVBQU8rWSxFQUFRcFosT0FBTSxDQUNuQyxJQUFJNnpDLEVBQ0osTUFBTUMsRUFBYyxJQUFJLElBQ3hCLFNBQVNDLEVBQUlDLEVBQVcsQ0FDcEIsR0FBSSxlQUFlM3pDLEVBQU8yekMsQ0FBUyxJQUMvQjN6QyxFQUFRMnpDLEVBQ0pILEdBQU0sQ0FDTixNQUFNSSxFQUFZLENBQUMsaUJBQWlCLE9BQ3BDLFVBQVdDLEtBQWNKLEVBQ3JCSSxFQUFXLEtBQ1gsaUJBQWlCLEtBQUtBLEVBQVk3ekMsQ0FBSyxFQUUzQyxHQUFJNHpDLEVBQVcsQ0FDWCxRQUFTdHlDLEVBQUksRUFBR0EsRUFBSSxpQkFBaUIsT0FBUUEsR0FBSyxFQUM5QyxpQkFBaUJBLEdBQUcsR0FBRyxpQkFBaUJBLEVBQUksRUFBRSxFQUVsRCxpQkFBaUIsT0FBUyxDQUM3QixDQUNKLENBRVIsQ0FDRCxTQUFTK0YsRUFBT3BILEVBQUksQ0FDaEJ5ekMsRUFBSXp6QyxFQUFHRCxDQUFLLENBQUMsQ0FDaEIsQ0FDRCxTQUFTOHpDLEVBQVVDLEVBQUtDLEVBQWFyMEMsT0FBTSxDQUN2QyxNQUFNazBDLEVBQWEsQ0FBQ0UsRUFBS0MsQ0FBVSxFQUNuQyxPQUFBUCxFQUFZLElBQUlJLENBQVUsRUFDdEJKLEVBQVksT0FBUyxJQUNyQkQsRUFBT3o2QixFQUFNMjZCLENBQUcsR0FBSy96QyxRQUV6Qm8wQyxFQUFJL3pDLENBQUssRUFDRixJQUFNLENBQ1R5ekMsRUFBWSxPQUFPSSxDQUFVLEVBQ3pCSixFQUFZLE9BQVMsSUFDckJELElBQ0FBLEVBQU8sS0FFdkIsQ0FDSyxDQUNELE1BQU8sQ0FBRSxJQUFBRSxFQUFLLE9BQUFyc0MsRUFBUSxVQUFBeXNDLEVBQzFCLENBQ0EsU0FBUyxRQUFRRyxFQUFRaDBDLEVBQUlpMEMsRUFBZSxDQUN4QyxNQUFNQyxFQUFTLENBQUMsTUFBTSxRQUFRRixDQUFNLEVBQzlCRyxFQUFlRCxFQUNmLENBQUNGLENBQU0sRUFDUEEsRUFDQUksRUFBT3AwQyxFQUFHLE9BQVMsRUFDekIsT0FBTyxTQUFTaTBDLEVBQWdCUixHQUFRLENBQ3BDLElBQUlZLEVBQVMsR0FDYixNQUFNN1MsRUFBUyxDQUFBLEVBQ2YsSUFBSS9QLEVBQVUsRUFDVjZpQixFQUFVNTBDLE9BQ2QsTUFBTTYwQyxFQUFPLElBQU0sQ0FDZixHQUFJOWlCLEVBQ0EsT0FFSjZpQixJQUNBLE1BQU16eUMsRUFBUzdCLEVBQUdrMEMsRUFBUzFTLEVBQU8sR0FBS0EsRUFBUWlTLENBQUcsRUFDOUNXLEVBQ0FYLEVBQUk1eEMsQ0FBTSxFQUdWeXlDLEVBQVUsWUFBWXp5QyxDQUFNLEVBQUlBLEVBQVNuQyxNQUV6RCxFQUNjODBDLEVBQWdCTCxFQUFhLElBQUksQ0FBQzN6QyxFQUFPYSxJQUFNLFVBQVViLEVBQVFULEdBQVUsQ0FDN0V5aEMsRUFBT25nQyxHQUFLdEIsRUFDWjB4QixHQUFXLEVBQUUsR0FBS3B3QixHQUNkZ3pDLEdBQ0FFLEdBRWhCLEVBQVcsSUFBTSxDQUNMOWlCLEdBQVksR0FBS3B3QixDQUNwQixDQUFBLENBQUMsRUFDRixPQUFBZ3pDLEVBQVMsR0FDVEUsSUFDTyxVQUFnQixDQUNuQixRQUFRQyxDQUFhLEVBQ3JCRixHQUNaLENBQ0EsQ0FBSyxDQUNMLDRGQ3BHZSxjQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSwyRkNLUEcsRUFBQTN6QyxLQUFRLFVBQVMsMkZBQWpCRyxFQUFBLEdBQUF3ekMsS0FBQUEsRUFBQTN6QyxLQUFRLFVBQVMsS0FBQTR6QyxFQUFBLEVBQUFELENBQUEsb0VBRHBCRSxFQUFBN3pDLE1BQVMsV0FBUzh6QyxrQkFBQTl6QyxDQUFBLDRFQUFsQkEsTUFBUywyS0FIRixRQUFBc0MsQ0FBb0IsRUFBQWdILHlMQ3NFekIsTUFBTSxHQUFLLENBR2pCeXFDLEVBQ0FDLElBQ3FDRCxFQUFRLGNBQWNDLENBQVcsRUFTaEUsU0FBUyxHQUdmQyxFQUNBbEQsRUFBcUQsQ0FBQSxFQUNyRG1ELEVBQW1DLENBQUEsRUFDSCxDQUMxQixNQUFBSCxFQUFVLFNBQVMsY0FBY0UsQ0FBSyxFQUU1QyxVQUFVRSxLQUFXcEQsRUFDcEJnRCxFQUFRLGFBQWFJLEVBQVNwRCxFQUFRb0QsR0FBUyxFQUFFLEVBR2xELFVBQVVDLEtBQVdGLEVBQ3BCSCxFQUFRLE9BQU9LLENBQU8sRUFHaEIsT0FBQUwsQ0FDUixDQXdFTyxTQUFTLG1CQUFtQk0sRUFBZSxDQUNqRCxRQUFPLEtBQUssT0FBTyxDQUNsQixJQUFLQSxDQUFBLENBQ0wsQ0FDRixDQy9KQSxTQUFTLFFBQVFDLEVBQW1CQyxFQUF5QnhELEVBQWMsQ0FBQSxFQUF3QixDQUU1RixLQUFBLENBQ0wsUUFBU3lELEVBQ1QsR0FBSUMsRUFDSixHQUFJQyxFQUNKLEdBQUlDLEVBQ0osR0FBSUMsRUFDSixHQUFJQyxFQUNKLElBQUtDLEVBQ0wsSUFBS0MsQ0FDRixFQUFBVCxFQUdFVSxFQUFZVCxFQUFVLE9BSXRCVSxFQUFRUixFQUFNTyxFQUFVLEdBQUdQLENBQUksR0FBRyxLQUFPLEtBQ3pDUyxFQUFRUixFQUFNTSxFQUFVLEdBQUdOLENBQUksR0FBRyxLQUFPLEtBQ3pDUyxFQUFRUixFQUFNSyxFQUFVLEdBQUdMLENBQUksR0FBRyxLQUFPLEtBQ3pDUyxFQUFRUixFQUFNSSxFQUFVLEdBQUdKLENBQUksR0FBRyxLQUFPLEtBQ3pDUyxFQUFRUixFQUFNRyxFQUFVLEdBQUdILENBQUksR0FBRyxLQUFPLEtBQ3pDUyxFQUFTUixFQUFPRSxFQUFVLEdBQUdGLENBQUssR0FBRyxLQUFPLEtBQzVDUyxFQUFTUixFQUFPQyxFQUFVLEdBQUdELENBQUssR0FBRyxLQUFPLEtBQzVDUyxFQUFhUixFQUFVLEdBQUdSLENBQVMsRUFBRyxLQUd0Q2lCLEVBQVdSLEdBQVNDLEdBQVNDLEdBQVNDLEdBQVNDLEdBQVNDLEdBQVVDLEVBRWxFRyxFQUFXbkIsRUFBVSxJQUNyQm9CLEVBQVdELEVBQVcsRUFFNUIsSUFBSUUsRUFBdUIsS0FDdkJDLEVBQXVCLEtBRzNCLE9BQUdKLElBRUNDLEdBQVksR0FDWEEsR0FBWSxHQUNYQSxHQUFZLEdBQ05FLEVBQUFILEVBR1JHLEVBQVFWLEdBQVNDLEdBQVNDLEdBQVNDLEdBQVNDLEdBQVVDLEVBR2hERyxHQUFZLEdBQ1hFLEVBQUFULEdBQVNDLEdBQVNDLEdBQVNDLEdBQVVDLEVBR3JDSyxFQUFBUixHQUFTQyxHQUFTQyxHQUFVQyxFQUc5QkcsR0FBWSxJQUNoQkEsR0FBWSxHQUNkRSxFQUFRUCxHQUFTQyxHQUFVQyxFQUczQkssRUFBUU4sR0FBVUMsRUFHWkcsR0FBWSxNQUNYRSxFQUFBTCxHQUlOSSxHQUFZLEdBQ1hBLEdBQVksR0FDWEEsR0FBWSxHQUNORSxFQUFBSixFQUdSSSxFQUFRWCxHQUFTQyxHQUFTQyxHQUFTQyxHQUFTQyxHQUFVQyxFQUdoREksR0FBWSxHQUNYRSxFQUFBVixHQUFTQyxHQUFTQyxHQUFTQyxHQUFVQyxFQUdyQ00sRUFBQVQsR0FBU0MsR0FBU0MsR0FBVUMsRUFHOUJJLEdBQVksSUFDaEJBLEdBQVksR0FDZEUsRUFBUVIsR0FBU0MsR0FBVUMsRUFHM0JNLEVBQVFQLEdBQVVDLEVBR1pJLEdBQVksTUFDWEUsRUFBQU4sSUFLSCxHQUFHLFVBQVcsQ0FDcEIsR0FBR3hFLENBQUEsRUFDRCxDQUVGLEdBQUc4RSxFQUFPLENBQUMsR0FBRyxTQUFVLENBQ3ZCLE9BQVFBLEVBQ1IsTUFBTyx5QkFDUCxDQUFBLENBQUMsRUFBRyxDQUFDLEVBR04sR0FBRyxNQUFPLENBQ1QsSUFBS0QsR0FBU0osRUFDZCxJQUFLakIsRUFBVSxLQUFPLEVBQUEsQ0FDdEIsQ0FBQSxDQUNELENBQ0YsQ0FFTyxNQUFNLEtBQU8sbUJBQW1CLENBQ3RDLE1BQU8sY0FDUCxVQUFXLE1BQ1gsTUFBTyxjQUFtQixnQkFBdUMsQ0FDaEUsYUFBYSxLQUFLcHJCLEVBQTJCb3JCLEVBQXNELENBQ2xHLE1BQU10ckIsRUFBUSxNQUFNLEtBQUssR0FBR0UsQ0FBSyxFQUVqQyxPQUFJRixFQUVHLEtBQUssT0FBT0EsRUFBT3NyQixDQUFTLEVBRmpCLElBR25CLENBRUEsT0FBTyxPQUFPdHJCLEVBQXlCc3JCLEVBQXNDLENBRTVFLE1BQU11QixFQUFtQixTQUFTdkIsRUFBVSxpQkFBaUJBLEVBQVUsU0FHdkUsT0FBT3RyQixFQUFNLFVBRVAsUUFDRyxPQUFBLFFBQVFBLEVBQU0sTUFBT3NyQixFQUFXLENBQ3RDLE1BQU8sYUFDUCxNQUFPdUIsQ0FBQSxDQUNQLEVBb0JKLENBWUQsQ0FDRCxDQUFDLDZGQ2pERzkxQyxFQUFNLEdBQUMsSUFBTSxJQUFFLHlLQUVUQSxFQUFZLEdBQUEsRUFBQXdELENBQUEsMkhBSFV4RCxFQUFZLEVBQUEsVUFBMUMsT0FFTXNCLEVBQUF5MEMsRUFBQXIwQyxDQUFBLHlhQWpCRTFCLEVBQVEsR0FBQSxFQUFBd0QsQ0FBQSxpY0FrQmMsR0FBQyxnVkFmekJ4RCxFQUFNLElBQUEsa01BU0hBLEVBQVksR0FBQSxFQUFBd0QsQ0FBQSx1YkFMbkIsT0FFTWxDLEVBQUF5MEMsRUFBQXIwQyxDQUFBLDJIQUxRMUIsRUFBTSxHQUFBLENBQUEsQ0FBQSwyVUFRUyxHQUFDLGdMQVpkLGdCQUVsQixnTUFISUEsRUFBRyxHQUFBLGdHQUxxQkEsRUFBUyxHQUFBLGdCQUFBLGlCQUUvQkEsRUFBYSxFQUFBLHFCQUNUQSxFQUFHLEVBQUEsRUFGRCxhQUFBKzFDLEVBQUEsUUFBWS8xQyxFQUFXLEtBQXZCLE9BQXVCLFVBRHJDLE9BMEJNc0IsRUFBQXkwQyxFQUFBcjBDLENBQUEsZ1BBdkJNMUIsRUFBRyxFQUFBLG1MQWhIUixNQUFBZzJDLEVBQVcsd0JBS04sR0FBQSxDQUFBLFNBQUFDLEVBQXdDLElBQUksRUFBQTNzQyxFQUNqRCxNQUFBNHNDLEVBQWFELEVBS1IsR0FBQSxDQUFBLElBQUFFLEVBQTJCRCxHQUFZLEtBQU8sRUFBRSxFQUFBNXNDLEVBS2hELENBQUEsS0FBQXpILEVBQU9xMEMsR0FBWSxNQUFRLEVBQUUsRUFBQTVzQyxFQUNsQyxNQUFBOHNDLEVBQVN2MEMsTUFLSixJQUFBdzBDLENBQVcsRUFBQS9zQyxFQUNoQixNQUFBZ3RDLEVBQVFELEVBS0gsR0FBQSxDQUFBLFNBQUFFLEVBQVcsRUFBSyxFQUFBanRDLEVBQ3JCLE1BQUFrdEMsRUFBWUQsRUFBVSxHQUFJLFNBS3JCLEdBQUEsQ0FBQSxHQUFBRSxRQUFnQyxFQUFBbnRDLEVBQ3JDLE1BQUFvdEMsRUFBY0QsRUFFVCxHQUFBLENBQUEsU0FBQUUsRUFBVyxFQUFFLEVBQUFydEMsRUFDbEIsTUFBQXN0QyxXQUF3Qk4sZUFBbUJBLFNBQzlDSyxHQUFZLEtBQ1pSLEVBQWtCLGFBQUFHLE9BQVksS0FDOUJDLEVBQTJCLGlCQUFBRCxPQUFZLElBRS9CLEdBQUEsQ0FBQSxVQUFBTyxFQUFZLEVBQUUsRUFBQXZ0QyxFQUNuQixNQUFBd3RDLEVBQWdCRCxFQUVYLEdBQUEsQ0FBQSxPQUFBRSxRQUF5QyxFQUFBenRDLGlCQUVyQzB0QyxHQUFRLENBRWhCLE1BQUFoQyxFQUFZaUMsR0FBMEIsTUFBQSxPQUFPLEtBQUksRUFHakRDLEVBQWUsTUFBQSxLQUFLLEtBQUtmLEVBQWMsQ0FDNUMsSUFBS0MsRUFDTCxJQUFLRSxFQUNMLE9BQVF0QixJQUdULHNCQUFjLElBQUEsQ0FDYmdCLEVBQVMsUUFBUSxJQUdYa0IsV0FHQ0MsR0FBWSxRQUNqQkosR0FBUSxlQUFjLElBQU9BLEVBQU8sQ0FBQSxFQUM1QixJQUFBLFFBQVEsTUFBTSxzaEJDL0UzQixJQUFlLGNBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1MQ2tEeUIvMkMsRUFBUSxFQUFBLFVBQWhELE9BRUtzQixFQUFBbTVCLEVBQUEvNEIsQ0FBQSxjQURHLDBGQURnQzFCLEVBQVEsRUFBQSw2RUEvQ3BDLEdBQUEsQ0FBQSxTQUFBbzNDLEVBQVcsRUFBSyxFQUFBOXRDLEVBQ2hCLENBQUEsV0FBQSt0QyxFQUFhLEVBQUssRUFBQS90QyxxMEJDd1RSdEosRUFBSyxTQUFRQSxFQUFNLFFBQU9BLEVBQVMseXRCQVk5Q0EsRUFBVSx3REFEYixPQUVNc0IsRUFBQXkwQyxFQUFBcjBDLENBQUEsc05BeUJILE9BQUExQixFQUFVLElBQUFBLEVBQVUsSUFBQUEsTUFBUSxPQUFNLEVBTTdCQSxFQUFPLEdBQUEsdUhBakJsQixPQW9CS3NCLEVBQUFtNUIsRUFBQS80QixDQUFBLHFvQkFSSCxPQUlNSixFQUFBeTBDLEVBQUFyMEMsQ0FBQSx1WEFGSzQxQyxHQUFBdDNDLE1BQVVBLEVBQU0sSUFBQSx1QkFBeEJBLEVBQU0sRUFBQSw0RUFBTkEsRUFBTSxFQUFBLEVBQUVHLEVBQUEsR0FBQSxJQUFBbTNDLEtBQUFBLEdBQUF0M0MsTUFBVUEsRUFBTSxJQUFBLEtBQUEsU0FBQTZlLEVBQUF5NEIsQ0FBQSxrT0FnQm5CLGVBQUFseEMsRUFBQXBHLE1BQWNBLEVBQU0sRUFBQSxFQUFBd0QsQ0FBQSxRQVl6QnhELEVBQUksSUFBQXUzQyxvQkFBQXYzQyxDQUFBLCtLQWRULE9BWUtzQixFQUFBbTVCLEVBQUEvNEIsQ0FBQSxFQVhKLE9BVU0rNEIsRUFBQXNiLENBQUEscUhBVEc1MUMsRUFBQSxHQUFBLEdBQUFpRyxLQUFBQSxFQUFBcEcsTUFBY0EsRUFBTSxFQUFBLElBQUEsZUFBQW9HLEVBQUE1QyxDQUFBLG9DQVl6QnhELEVBQUksNHZCQU5KQSxFQUFNLEVBQUEsVUFEUixPQUVNc0IsRUFBQXkwQyxFQUFBcjBDLENBQUEseUNBREoxQixFQUFNLEVBQUEsd0dBSk5BLEVBQU0sRUFBQSwyREFEUixPQUVNc0IsRUFBQXkwQyxFQUFBcjBDLENBQUEsMkNBREoxQixFQUFNLEVBQUEsbU9BYUFBLEVBQUksR0FBQXdELENBQUEsbUdBRmQsT0FRS2xDLEVBQUFtNUIsRUFBQS80QixDQUFBLEVBUEosT0FNTSs0QixFQUFBc2IsQ0FBQSw0RkFMRy8xQyxFQUFJLEtBQUEsZUFBQW9HLEVBQUE1QyxDQUFBLDRNQUdWeEQsRUFBTSxJQUFBLHVFQUFOQSxFQUFNLElBQUEsS0FBQSxTQUFBLEVBQUF3M0MsQ0FBQSxrRkFISSxNQUVaLHloQ0FoRUl4M0MsRUFBVSxLQUFBeTNDLG9CQUFBejNDLENBQUEsSUFZWkEsRUFBUSxJQUFBMDNDLG9CQUFBLEtBSVQxM0MsRUFBTyxJQUFJQSxFQUFNLElBQUlBLEVBQU0sSUFBSUEsRUFBTSxJQUFDLFFBQVVBLEVBQU8sSUFBQyxTQUFNMjNDLG9CQUFBMzNDLENBQUEseUVBMEI5RCxPQUFBQSxNQUFRLE9BQU0sRUFFVEEsRUFBTSxHQUFBLGlDQTZCYixJQUFBNDNDLEVBQUE1M0MsTUFBUSxPQUFLNjNDLG9CQUFBNzNDLENBQUEsRUFNYjgzQyxHQUFBOTNDLEVBQU8sSUFBQSxRQUFVQSxNQUFRLE9BQUk4ekMsa0JBQUE5ekMsQ0FBQSx3UEFoRjVCQSxFQUFNLEdBQUEsbU1BYk9BLEVBQVMsR0FBQSxnQkFBQSxrVkFGYkEsRUFBUyxJQUFBLGdCQUFBLGlCQUFVQSxFQUFTLEVBQUEsVUFBN0MsT0F1R0tzQixFQUFBeTJDLEVBQUFyMkMsQ0FBQSxFQXRHSixPQTJGS3EyQyxFQUFBQyxDQUFBLEVBMUZKLE9BT01BLEVBQUFDLENBQUEsNkJBQ04sT0E4RU1ELEVBQUFFLENBQUEsRUE3RUwsT0E0Q01BLEVBQUFDLENBQUEsRUEzQ0wsT0FtQktBLEVBQUFDLENBQUEsRUFsQkosT0FTTUEsRUFBQUMsQ0FBQSxFQVJMLE9BT01BLEVBQUFDLENBQUEsMkdBb0NULE9BOEJNSixFQUFBSyxDQUFBLDREQU9SLE9BUUtSLEVBQUFTLENBQUEsK1VBcEdleDRDLEVBQVMsR0FBQSxzQ0FjbEJBLEVBQVUsS0FBQXk0QyxFQUFBLEVBQUF6NEMsRUFBQUcsQ0FBQSxFQVlaSCxFQUFRLHFFQUlUQSxFQUFPLElBQUlBLEVBQU0sSUFBSUEsRUFBTSxJQUFJQSxFQUFNLElBQUMsUUFBVUEsRUFBTyxJQUFDLGlZQXlEMURBLE1BQVEseUxBTVJBLEVBQU8sSUFBQSxRQUFVQSxNQUFRLHlYQS9GSUEsRUFBUyxFQUFBLDZlQTVSakMsR0FBQSxDQUFBLGFBQUEwNEMsRUFBZSxFQUFFLEVBQUFwdkMsRUFDdEIsTUFBQStvQyxFQUFhcUcsRUFLUixHQUFBLENBQUEsU0FBQXpDLEVBQWlDLElBQUssRUFBQTNzQyxFQUMzQyxNQUFBNHNDLEVBQWFELE1BS1IsS0FBQXAwQyxFQUFPcTBDLEdBQVksSUFBSSxFQUFBNXNDLEVBQzVCLE1BQUE4c0MsRUFBU3YwQyxFQUtKLEdBQUEsQ0FBQSxTQUFBODJDLEVBQVcsRUFBRSxFQUFBcnZDLEVBQ2xCLE1BQUFzdkMsRUFBYUQsTUFLUixJQUFBRSxFQUFlM0MsR0FBWSxHQUFHLEVBQUE1c0MsRUFDbkMsTUFBQTZmLEVBQVEwdkIsRUFLSCxHQUFBLENBQUEsT0FBQUMsRUFBUyxFQUFFLEVBQUF4dkMsRUFDaEIsTUFBQXl2QyxFQUFZRCxFQUdQLEdBQUEsQ0FBQSxPQUFBRSxFQUE2QixFQUFFLEVBQUExdkMsRUFDL0IsQ0FBQSxLQUFBMnZDLEVBQTJCLEVBQUUsRUFBQTN2QyxFQUM3QixDQUFBLE9BQUE0dkMsRUFBUyxFQUFFLEVBQUE1dkMsRUFDWCxDQUFBLFNBQUE2dkMsRUFBVyxFQUFLLEVBQUE3dkMsRUFDaEIsQ0FBQSxRQUFBOHZDLEVBQVUsRUFBRSxFQUFBOXZDLEVBQ1osQ0FBQSxPQUFBdkcsRUFBUyxFQUFFLEVBQUF1RyxFQUNYLENBQUEsT0FBQTJCLEVBQVMsRUFBRSxFQUFBM0IsRUFJWCxDQUFBLFVBQUF1dEMsRUFBWSxFQUFFLEVBQUF2dEMsRUFFZCxDQUFBLFlBQUErdkMsRUFBYyxFQUFFLEVBQUEvdkMsRUFDckIsTUFBQWt0QyxFQUFZNkMsRUFFUCxHQUFBLENBQUEsVUFBQUMsRUFBWSxFQUFFLEVBQUFod0MsRUFLbkIsTUFBQWtwQyxFQUFTK0csR0FBZ0IsV0FBV2xILENBQVUsR0FBQSxDQUFBLEVBRTlDbUgsTUFBbUIsSUFFekIsVUFBUyxJQUFBLENBQ0UsVUFBQUMsS0FBY0QsRUFDdkIsY0FBY0MsQ0FBVSxJQUl0QixJQUFBQyxFQUFTLEdBQ0UsZUFBQUMsRUFBdUJDLEVBQTZCLE9BQzVEQyxFQUFNLENBQUksZ0JBQU8sZ0JBQU8sZ0JBQU8sZ0JBQU8sZ0JBQU8sZUFBSyxFQUNwRCxJQUFBQyxFQUFTLEVBSVYsT0FISEosRUFBU0csRUFBTyxFQUFDLEVBR2RELGFBQW9CLFFBQU8sT0FFdkJILEVBQWEsT0FBTyxpQkFDekJLLEdBQVVBLEVBQVMsR0FBS0QsRUFBTyxXQUMvQkgsRUFBU0csRUFBT0MsRUFBTSxHQUNwQixLQUdITixFQUFhLElBQUlDLENBQVUsRUFHckIsTUFBQWh2QyxRQUFnQm12QyxFQUd0QixxQkFBY0gsQ0FBVSxFQUdqQmh2QyxTQUdEbXZDLGtwQ0NyRUg1NUMsRUFBUSxJQUFBLDBKQUZYLE9BSVFzQixFQUFBeTRDLEVBQUFyNEMsQ0FBQSxFQUhQLE9BRU1xNEMsRUFBQWhFLENBQUEsc0VBREovMUMsRUFBUSxJQUFBLEtBQUEsU0FBQWdFLEVBQUF3ekMsQ0FBQSw4UkFNWCxPQVFRbDJDLEVBQUF5NEMsRUFBQXI0QyxDQUFBLEVBUFAsT0FFTXE0QyxFQUFBOUIsQ0FBQSxjQURFK0IsMEJBR1IsT0FFTUQsRUFBQXpCLENBQUEsNFpBaEJEdDRDLEVBQU8sd0JBQVosT0FBSU8sR0FBQSw2REFRQVAsRUFBSSxJQUFBNjNDLG9CQUFBNzNDLENBQUEsSUFZTEEsRUFBUSxJQUFBOHpDLGtCQUFBOXpDLENBQUEsdURBeEJaQSxFQUFLLEVBQUEsb05BRlIsT0E4QktzQixFQUFBbTVCLEVBQUEvNEIsQ0FBQSxFQTdCSixPQUVNKzRCLEVBQUF3ZCxDQUFBLDBCQUVOLE9Bd0JNeGQsRUFBQTZkLENBQUEsMklBM0JKdDRDLEVBQUssRUFBQSxVQUlDQSxFQUFPLHFCQUFaLE9BQUlPLEdBQUEsRUFBQSxpSkFBSixPQVFJUCxFQUFJLDJFQVlMQSxFQUFRLElBQUFpNkMsRUFBQSxFQUFBajZDLEVBQUFHLENBQUEsME1BMURILE1BQUErNUMsQ0FBYSxFQUFBNXdDLEdBRWIsUUFBQTZ3QyxFQUFPLEVBQUEsRUFBQTd3QyxFQUVQLENBQUEsS0FBQTh3QyxFQUFPLEVBQUssRUFBQTl3QyxFQUVaLENBQUEsT0FBQSt3QyxFQUFTLEVBQUssRUFBQS93QyxFQUNuQixNQUFBZ3hDLEVBQVdELEVBRVhyRSxFQUFXLDZCQThCc0JBLEVBQVN1RSxFQUFTLGNBQWMsUUFBUSxNQUFPLEdBQUcsQ0FBQSxFQVFsREMsRUFBQSxJQUFBeEUsRUFBUyxTQUFTLEVBWWhDeUUsRUFBQSxJQUFBLGdCQUFBLFNBQUFDLEVBQVksS0FBSUEsQ0FBQSw2VENMMUMsU0FBUyxTQUFTMTJDLEVBQUcsQ0FDakIsTUFBTWthLEVBQUlsYSxFQUFJLEVBQ2QsT0FBT2thLEVBQUlBLEVBQUlBLEVBQUksQ0FDdkIsQ0E4REEsU0FBUyxTQUFTbGEsRUFBRyxDQUNqQixNQUFPLEVBQUVBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUksQ0FDakMsQ0MvREEsU0FBUyxNQUFNeEYsRUFBTSxDQUFFLE1BQUFrRixFQUFRLEVBQUcsU0FBQUQsRUFBVyxJQUFLLE9BQUE4QixFQUFTLFFBQVUsRUFBRyxHQUFJLENBQ3hFLE1BQU05RCxFQUFRLGlCQUFpQmpELENBQUksRUFDN0JtOEMsRUFBVSxDQUFDbDVDLEVBQU0sUUFDakJtNUMsRUFBUyxXQUFXbjVDLEVBQU0sTUFBTSxFQUNoQ281QyxFQUFjLFdBQVdwNUMsRUFBTSxVQUFVLEVBQ3pDcTVDLEVBQWlCLFdBQVdyNUMsRUFBTSxhQUFhLEVBQy9DczVDLEVBQWEsV0FBV3Q1QyxFQUFNLFNBQVMsRUFDdkN1NUMsRUFBZ0IsV0FBV3Y1QyxFQUFNLFlBQVksRUFDN0N3NUMsRUFBbUIsV0FBV3g1QyxFQUFNLGNBQWMsRUFDbER5NUMsRUFBc0IsV0FBV3o1QyxFQUFNLGlCQUFpQixFQUM5RCxNQUFPLENBQ0gsTUFBQWlDLEVBQ0EsU0FBQUQsRUFDQSxPQUFBOEIsRUFDQSxJQUFLdkIsR0FBSyw2QkFDTSxLQUFLLElBQUlBLEVBQUksR0FBSSxDQUFDLEVBQUkyMkMsYUFDdkIzMkMsRUFBSTQyQyxvQkFDQzUyQyxFQUFJNjJDLHVCQUNENzJDLEVBQUk4MkMsbUJBQ1I5MkMsRUFBSSsyQyxzQkFDRC8yQyxFQUFJZzNDLHlCQUNEaDNDLEVBQUlpM0MsNEJBQ0RqM0MsRUFBSWszQyxNQUN4QyxDQUNBLHlWQ2pCc0JsN0MsRUFBSSxFQUFBLHNFQUFYQSxFQUFHLEVBQUEsc0pBRmdDQSxFQUFHLEVBQUEseUJBQXJCQSxFQUFLLEVBQUEsMEJBQWlDQSxFQUFNLEVBQUEsVUFBNUUsT0FVS3NCLEVBQUFrM0MsRUFBQTkyQyxDQUFBLEVBVEosT0FFSzgyQyxFQUFBSixDQUFBLEVBREosT0FBZ0NBLEVBQUErQyxDQUFBLDBCQUdqQyxPQUVLM0MsRUFBQVIsQ0FBQSxxRkFMZ0JoNEMsRUFBSSxFQUFBLDBCQUFYQSxFQUFHLEVBQUEsNFNBRmdDQSxFQUFHLGlEQUFyQkEsRUFBSyxFQUFBLGdDQUFpQ0EsRUFBTSxFQUFBLHFDQUN6Qm83QyxJQUFBQSxFQUFBLGdDQUFBaEQsRUFBQWlELE1BQUEsQ0FBQSxTQUFTcjdDLEVBQVEsR0FBQSxJQUFLLENBQUMsRUFBQSxFQUFBLDBEQUl0QnM3QyxJQUFBQSxFQUFBLGdDQUFBdEQsRUFBQXFELE1BQUEsQ0FBQSxTQUFTcjdDLEVBQVEsR0FBQSxJQUFLLENBQUMsRUFBQSxFQUFBLDZDQUp4Qm83QyxJQUFBQSxFQUFBLGdDQUFBaEQsRUFBQWlELE1BQUEsQ0FBQSxTQUFTcjdDLEVBQVEsR0FBQSxJQUFLLENBQUMsRUFBQSxFQUFBLGdDQUl0QnM3QyxJQUFBQSxFQUFBLGdDQUFBdEQsRUFBQXFELE1BQUEsQ0FBQSxTQUFTcjdDLEVBQVEsR0FBQSxJQUFLLENBQUMsRUFBQSxFQUFBLG1LQXBFL0QsQ0FBQSxLQUFBNkIsRUFBTyxFQUFFLEVBQUF5SCxHQUNULElBQUF0SSxDQUFXLEVBQUFzSSxFQUtYLENBQUEsTUFBQWl5QyxFQUFRLEVBQUssRUFBQWp5QyxFQUViLENBQUEsT0FBQWt5QyxFQUFTLEVBQUssRUFBQWx5QyxFQUNkLENBQUEsT0FBQW15QyxFQUFTLEVBQUssRUFBQW55QywwZUM4SHRCdEosRUFBUSxHQUFFLFNBQVUsd0RBREorNUMsRUFBQSxTQUFBMkIsRUFBQTE3QyxNQUFZQSxFQUFNLDRDQUFwQyxPQUVRc0IsRUFBQXk0QyxFQUFBcjRDLENBQUEsMERBRlV2QixFQUFBLEdBQUF1N0MsS0FBQUEsRUFBQTE3QyxNQUFZQSxFQUFNLGtHQURoQzZ6QyxHQUFBN3pDLE1BQVlBLEVBQU0sS0FBQTh6QyxrQkFBQTl6QyxDQUFBLDRFQU9yQkEsRUFBZSxFQUFBLEVBREMrNUMsRUFBQSxTQUFBMkIsRUFBQTE3QyxFQUFjLElBQUFBLEVBQVksSUFBQUEsTUFBYUEsRUFBTSxrR0FQaEUsT0FVS3NCLEVBQUFtNUIsRUFBQS80QixDQUFBLDZCQUhKLE9BRVErNEIsRUFBQXNmLENBQUEsNkRBUkgvNUMsTUFBWUEsRUFBTSxLQUFBNnpDLEVBQUEsRUFBQTd6QyxFQUFBRyxDQUFBLG1CQU9yQkgsRUFBZSxFQUFBLEVBRENHLEVBQUEsSUFBQXU3QyxLQUFBQSxFQUFBMTdDLEVBQWMsSUFBQUEsRUFBWSxJQUFBQSxNQUFhQSxFQUFNLGdIQXZJcEQsQ0FBQSxPQUFBMjdDLEVBQXlDLEVBQUssRUFBQXJ5QyxFQUNuRCxNQUFBc3lDLElBQWFELEVBQ2JFLEVBQXFCLE9BQVlGLEdBQXRCLFdBQThCQSxFQUFRLE9BSzVDLEdBQUEsQ0FBQSxLQUFBRyxFQUFPLEVBQUssRUFBQXh5QyxFQUNqQixNQUFBeXlDLEVBQVNELEVBS0osR0FBQSxDQUFBLFFBQUFFLEVBQW1FLENBQUEsT0FBUSxPQUFRLEVBQUssQ0FBQSxFQUFBMXlDLFFBQzVGMnlDLEVBQVdDLENBQVMsRUFBSUYsRUFHM0IsSUFBQUcsRUFBbUIsR0FRWixDQUFBLEtBQUFDLEVBQXlCLENBQUMsRUFBQTl5QyxRQUMvQnNCLEVBQW1Cd3hDLElBQVQsR0FBZSxJQUFNQSxHQUFRLE1BR3pDQyxFQUFZenhDLEVBQVUsS0FHdkJ5eEMsRUFBUyxDQUVQLElBQUFDLEVBQVksS0FBSyxNQUFNMXhDLEVBQVUsR0FBSSxFQUN6Q3V4QyxPQUF3QkcsTUFHbEIsTUFBQTdDLEVBQWEsaUJBQ2xCNkMsR0FBYSxFQUNiQyxFQUFBLEdBQUFKLE9BQXdCRyxLQUFTLEdBQy9CLEtBR0gsZ0JBQ0NDLEVBQUEsRUFBQUYsRUFBWSxFQUFLLEVBQ2pCRSxFQUFBLEdBQUFKLEVBQW1CLEVBQUUsRUFDckIsY0FBYzFDLENBQVUsR0FDdEI3dUMsR0FPQSxJQUFBNHhDLEVBQVMsR0FHRixDQUFBLFNBQUFDLEVBQVcsRUFBSyxFQUFBbnpDLEVBS2hCLENBQUEsTUFBQW96QyxFQUEyQixJQUFJLEVBQUFwekMsUUFDcENxekMsRUFBYUQsRUFBYSxJQUFBRSxFQUFPLEtBQUtGLENBQU0sRUFBRyxLQUkvQ0UsRUFBUyxXQUFpQixNQUFNLFdBRzdCQyxHQUFhLENBRWxCakIsR0FBWUMsR0FDZEEsS0FJRUUsR0FBb0JKLElBQVYsUUFDWmlCLEVBQU8sSUFBRyxpQkFLR0UsR0FBYyxDQUV4QixJQUFBQyxFQUFhLEdBR2pCUixFQUFBLEVBQUFDLEVBQVMsRUFBSSxNQUlMLE1BQUFOLEdBQWEsZ0JBSXBCYSxFQUFhLEdBSWRSLEVBQUEsRUFBQUMsRUFBUyxFQUFLLEVBR1hHLEdBQWNJLEdBQ2hCSixnQkF5QnFERSxVQUswQ0MsK09Bbkg5RlAsRUFBQSxFQUFBUyxFQUFrQmYsRUFBVUUsQ0FBZ0IsdUJBZ0M1Q2MsRUFBYWpCLEVBQVEsSUFBTSxFQUFLLDBUQy9EckIsUUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVDQUEsUUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUNBQSxZQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxRQ0FBLGFBQUE7QUFBQTtBQUFBLFFDQUEsZUFBQTtBQUFBO0FBQUEsUUNBQSxlQUFBO0FBQUE7QUFBQSxRQ0FBLGFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVDQUEsZUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVDQUEsYUFBQTtBQUFBO0FBQUE7QUFBQSxRQ0FBLGdCQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQ0FBLGtCQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSw2TEMwRURoOEMsRUFBSSxFQUFBLFVBQWhCLE9BRU9zQixFQUFBNjVDLEVBQUF6NUMsQ0FBQSxzU0FQQzFCLEVBQU8sR0FBRSxnQkFBaUIsbUJBQWlCLGFBSS9DNnpDLEVBQUE3ekMsS0FBUSxTQUFPOHpDLGtCQUFBOXpDLENBQUEsbUlBTlJBLEVBQUksRUFBQSx3SUFGQ0EsRUFBYyxFQUFBLEVBQUEsaUJBQUEsVUFBaEMsT0FhVXNCLEVBQUE0N0MsRUFBQXg3QyxDQUFBLEVBWlQsT0FLTXc3QyxFQUFBNUUsQ0FBQSxFQUpMLE9BQThEQSxFQUFBOTFDLENBQUEsWUFBUnhDLEVBQU8sZUFDN0QsT0FFTXM0QyxFQUFBTCxDQUFBLGdHQUxxQ2o0QyxFQUFrQixFQUFBLG1DQUVQQSxFQUFPLHVCQUVyREEsRUFBTyxHQUFFLGdCQUFpQixtQkFBaUIsTUFBQWk0QyxFQUFBLFVBQUF0RSxHQUkvQzN6QyxLQUFRLGlOQVJJQSxFQUFjLEVBQUEsRUFBQSx5T0F4RHBCLEdBQUEwcUMsQ0FBVSxFQUFBcGhDLEVBQ2YsTUFBQTZ6QyxFQUFPelMsRUFLRixHQUFBLENBQUEsZUFBQTBTLEVBQWlCLEVBQUUsRUFBQTl6QyxFQUtuQixDQUFBLFFBQUErekMsRUFBVSxFQUFLLEVBQUEvekMsRUFFZixDQUFBLGVBQUFnMEMsRUFBaUIsRUFBSyxFQUFBaDBDLEVBU3hCLFNBQUFpMEMsRUFBbUJ2M0IsRUFBTyxDQUVuQkEsRUFBUSxPQUFPLFVBQTNCLFVBRUVzM0IsR0FDSGYsRUFBQSxFQUFBYyxHQUFXQSxDQUFPLEdBS3BCcjNCLEVBQVEseUJBQXdCLGVBMEJzQnEzQixFQUFPLEtBQUEsNHBCQ3FDakMsR0FBQSxRQUFBcjlDLE1BQU0sZ0NBQXNCQSxFQUFVLE1BQUEsbUJBQVZBLEVBQVUsNE1BQXRDRyxFQUFBLElBQUFxOUMsRUFBQSxHQUFBLFFBQUF4OUMsTUFBTSxnQ0FBc0JBLEVBQVUsdVZBTjFELEtBQUFBLE1BQU0sK0tBQU5HLEVBQUEsSUFBQXM5QyxFQUFBLEtBQUF6OUMsTUFBTSx5U0FKUEEsRUFBYSx3QkFBbEIsT0FBSU8sR0FBQSwySUFvQmlCLFFBQUEsQ0FBQSxRQUFTUCxFQUFVLEVBQUEsc1NBeEI1QyxPQWdDU3NCLEVBQUFvOEMsRUFBQWg4QyxDQUFBLHdDQTdCUixPQWtCS2c4QyxFQUFBdEYsQ0FBQSx5REFFTCxPQVFLc0YsRUFBQTFGLENBQUEscURBM0JHaDRDLEVBQWEscUJBQWxCLE9BQUlPLEdBQUEsRUFBQSwrS0FBSixPQUFJQSxFQUFBbzlDLEVBQUEsT0FBQXA5QyxHQUFBLG1GQUFKLE9BQUlBLEdBQUEsd2RBakZEOHhDLEVBQWN1TCxFQUVqQixTQU9HQyxFQUFXLENBQUlDLEVBQXVCQyxJQUEwQkQsRUFBSSxNQUFRQyxFQUFJLE1BR2hGQyxNQUFvQixJQUFJekUsRUFBZ0IsVUFBVWxILENBQVUsQ0FBQSxFQUM5RCxJQUFBNEwsRUFBNkIxRSxFQUFnQixJQUFJLFNBQVMsS0FBS3NFLENBQVcsRUFBRSxJQUFJMUwsSUFBSyxDQUN4RixJQUFLQSxFQUNMLFNBQVU2TCxFQUFjLElBQUk3TCxFQUFNLEtBQUssS0FpQi9CLFNBQUErTCxFQUFXOUwsRUFBYSxDQUUxQixNQUFBK0wsRUFBV0YsRUFBYyxLQUFLOS9CLEdBQUtpMEIsSUFBVWowQixFQUFFLElBQUksS0FBSyxFQUc5RGdnQyxFQUFTLFNBQVksQ0FBQUEsRUFBUywrQkFNaEJDLEdBQVUsQ0FFbEIsTUFBQTdFLEVBQWdCLFdBQVdsSCxFQUFZLE1BQU0sRUFHbkQsZ0JBQUEsU0FBQXFJLEVBQVksS0FBSUEsQ0FBQSwrREFzQ0V3RCxFQUFXL0wsRUFBTSxLQUFLLG1rQkNrS25CbnlDLEVBQVcsR0FBQSxnQkFBQSxVQUFoQyxPQUVNc0IsRUFBQXkwQyxFQUFBcjBDLENBQUEsNE5BRmUxQixFQUFXLEdBQUEsNktBVTNCdzNDLEVBQUF4M0MsTUFBTSxLQUFJLDBGQURaLE9BRU1zQixFQUFBeTBDLEVBQUFyMEMsQ0FBQSxzQkFESnZCLEVBQUEsSUFBQXEzQyxLQUFBQSxFQUFBeDNDLE1BQU0sS0FBSSxLQUFBLFNBQUFnRSxFQUFBd3pDLENBQUEsbUxBS1osT0FFTWwyQyxFQUFBeTBDLEVBQUFyMEMsQ0FBQSxjQURFLHVJQVJIMUIsRUFBVyxJQUFBcStDLG9CQUFBcitDLENBQUEsSUFNWkEsRUFBVSxJQUFBcytDLG9CQUFBdCtDLENBQUEseUdBUDJCLFVBQUErMUMsRUFBQSxtQkFBQS8xQyxNQUFNLEtBQUssNkJBQXFCQSxFQUFXLEVBQUEsVUFBdEYsT0FZTXNCLEVBQUF5MEMsRUFBQXIwQyxDQUFBLHlFQVhDMUIsRUFBVyxJQUFBeTRDLEVBQUEsRUFBQXo0QyxFQUFBRyxDQUFBLEVBTVpILEVBQVUsSUFBQWk2QyxFQUFBLEVBQUFqNkMsRUFBQUcsQ0FBQSxjQVAyQixVQUFBNDFDLEVBQUEsbUJBQUEvMUMsTUFBTSxLQUFLLHFFQUErQyxTQUFTQSxFQUFZLEdBQUEsSUFBSyxxR0FEekhBLEVBQU0sd0JBQVgsT0FBSU8sR0FBQSwyUEFBQ1AsRUFBTSxxQkFBWCxPQUFJTyxHQUFBLEVBQUEsdUxBQUosT0FBSUEsRUFBQW85QyxFQUFBLE9BQUFwOUMsR0FBQSxvREFBSixPQUFJQSxHQUFBLGdVQWtCTixPQUlNZSxFQUFBZzNDLEVBQUE1MkMsQ0FBQSxFQUhMLE9BRU00MkMsRUFBQUwsQ0FBQSxjQURFLHVRQU1ZajRDLEVBQVcsR0FBQSxnQkFBQSxVQUFoQyxPQUVNc0IsRUFBQXkwQyxFQUFBcjBDLENBQUEsNE5BRmUxQixFQUFXLEdBQUEsK0tBM0IzQkEsRUFBYSxTQU5keTRDLEVBQUF6NEMsTUFBUSxRQUFNdTNDLG9CQUFBdjNDLENBQUEsMEJBd0JkQSxFQUFVLElBQUE2M0Msb0JBQUE3M0MsQ0FBQSxFQVFWdStDLEVBQUF2K0MsTUFBUSxRQUFNOHpDLGtCQUFBOXpDLENBQUEscUpBakMwRkEsRUFBUyxFQUFBLDRCQUFqRkEsRUFBVSxFQUFBLDZCQUFtQkEsRUFBVyxFQUFBLFVBQTlFLE9Bc0NNc0IsRUFBQXkwQyxFQUFBcjBDLENBQUEsdUhBckNBMUIsTUFBUSwwTUFNUEEsRUFBYSxFQUFBLGdJQWtCZEEsRUFBVSxJQUFBaTZDLEVBQUEsRUFBQWo2QyxFQUFBRyxDQUFBLEVBUVZILE1BQVEsNk1BakNnR0EsRUFBUyxFQUFBLCtiQXZPM0csYUFBQTA0QyxDQUFvQixFQUFBcHZDLEVBQ3pCLE1BQUErb0MsRUFBYXFHLEVBS1IsR0FBQSxDQUFBLFNBQUE4RixFQUFXLEVBQUssRUFBQWwxQyxFQUNyQixNQUFBbTFDLEVBQWFELEVBS1IsR0FBQSxDQUFBLFVBQUFFLEVBQVksRUFBSyxFQUFBcDFDLEVBQ3RCLE1BQUFxMUMsRUFBY0QsRUFFVCxHQUFBLENBQUEsWUFBQUUsRUFBYyxFQUFFLEVBQUF0MUMsRUFDaEIsQ0FBQSxZQUFBdTFDLEVBQWMsRUFBRSxFQUFBdjFDLEVBRWhCLENBQUEsVUFBQXV0QyxFQUFZLEVBQUUsRUFBQXZ0QyxFQUdyQncxQyxFQUFnQixFQUNkLE1BQUFDLEVBQWdCLGNBQWMsa0JBQWdCRCxJQUFhQSxDQUFBLENBQUEsRUFDakUsVUFBUyxJQUFBLENBQ1JDLFVBSUdDLEVBcUJEUCxJQUNGLGlCQUFpQixVQUFXUSxHQUF1QixDQUMvQ0EsR0FBTyxVQUNUek0sRUFBU3lNLEVBQU0sSUFBSSxJQUlyQixVQUFTLElBQUEsQ0FDUixnQkFBQSxpQkFBQXJCLEVBQW1CLEtBQUlBLENBQUEsY0FJaEJzQixHQUFpQixrQ0FDekJ0QixFQUFpQixDQUNoQixTQUFVdkwsQ0FBVSxFQUFBdUwsQ0FBQSxFQUdyQixnQkFBQSxTQUFBbEQsRUFBWSxnQkFBZUEsQ0FBQSxNQUd4QnlFLEVBRVcsZUFBQUMsRUFBV2pOLEVBQXVCLENBRTFDLE1BQUFDLEVBQVFJLEVBQU8sVUFBVXIwQixHQUFLQSxFQUFFLFFBQVVnMEIsRUFBTSxLQUFLLEVBSzNESyxFQUFPLE9BQU9KLEVBQU8sQ0FBQyxFQUdoQixNQUFBNE0sRUFBUSxnQkFJTkssRUFBT3RMLEVBQ2YsQ0FBQSxNQUFPdUwsRUFBVyxFQUNsQixTQUFVQyxFQUFjLElBQ3hCLE9BQVFDLEVBQVcsUUFBUSxFQUFBLENBQUEsU0FFckJDLEVBQVUsaUJBQWlCMUwsQ0FBTyxFQUNsQzJMLEVBQVMsQ0FBSUQsRUFBUSxRQUNyQkUsRUFBVSxXQUFXRixFQUFRLEtBQUssRUFDbENHLEVBQWlCLFdBQVdILEVBQVEsV0FBVyxFQUMvQ0ksRUFBa0IsV0FBV0osRUFBUSxZQUFZLEVBQ2pESyxFQUFnQixXQUFXTCxFQUFRLFVBQVUsRUFDN0NNLEVBQWlCLFdBQVdOLEVBQVEsV0FBVyxFQUMvQ08sRUFBc0IsV0FBV1AsRUFBUSxlQUFlLEVBQ3hEUSxFQUF1QixXQUFXUixFQUFRLGdCQUFnQixTQUcvRCxNQUFPSCxFQUNQLFNBQVVDLEVBQ1YsT0FBUUMsRUFDUixJQUFLVSxHQUNKLG9EQUVZLEtBQUssSUFBSUEsRUFBSyxHQUFJLENBQUMsRUFBSVIsWUFDekJRLEVBQUtQLHFCQUNFTyxFQUFLTixzQkFDSk0sRUFBS0wsb0JBQ1BLLEVBQUtKLHFCQUNKSSxFQUFLSCwwQkFDQUcsRUFBS0YsMkJBQ0pFLEVBQUtELFFBc0llLE1BQUFFLEVBQUFoTyxHQUFBaU4sRUFBV2pOLENBQUssUUFTMUIrTSw2REExQnNEQyxFQUFVaUIsOFVBeE1qRzVOLEVBQVMrRyxFQUFnQixXQUFXbEgsQ0FBVSxDQUFBLDJuQkNnSjFDLE9BQUFyeUMsTUFBUSxJQUFHLDBHQURqQixPQVVLc0IsRUFBQW01QixFQUFBLzRCLENBQUEsd1hBRmMxQixFQUFHLFlBQVlBLEVBQVEsT0FBTyxZQUFjQSxFQUFVLDhHQUF0REEsRUFBRyxxQkFBWUEsRUFBUSwyVkFOeEMsT0FJTXNCLEVBQUF5MEMsRUFBQXIwQyxDQUFBLGtWQUhXLGdCQUVoQixnS0FZQTFCLEVBQU8sSUFBQSxvRUFBUEEsRUFBTyxJQUFBLEtBQUEsU0FBQSxFQUFBdzNDLENBQUEsa0ZBSEksS0FFYix1S0FLQSxPQUVNbDJDLEVBQUF5MEMsRUFBQXIwQyxDQUFBLGNBREUsd1RBS1QsT0FNS0osRUFBQW01QixFQUFBLzRCLENBQUEsRUFMSixPQUlNKzRCLEVBQUFzYixDQUFBLDRYQUZILzFDLEVBQVEsRUFBQSxnREFBUkEsRUFBUSxFQUFBLDJEQVVKcWdELEVBQUEsSUFBSXJnRCxFQUFTLEdBQUEsdUJBQWxCLE9BQUlPLEdBQUEsd0tBRFAsT0FXS2UsRUFBQW01QixFQUFBLzRCLENBQUEsZ0VBVkcyK0MsRUFBQSxJQUFJcmdELEVBQVMsR0FBQSxvQkFBbEIsT0FBSU8sR0FBQSxFQUFBLG9KQUFKLHVGQUdRb3pDLEVBQUEzekMsS0FBZUEsRUFBUyxLQUFBLE9BRzlCczNDLEVBQUF0M0MsTUFBVSxNQUFLLHlPQUxVQSxFQUFTLElBQUEsaUJBQUEsVUFBckMsT0FPTXNCLEVBQUErMkMsRUFBQTMyQyxDQUFBLEVBTkwsT0FFTTIyQyxFQUFBSixDQUFBLDRCQUNOLE9BRU1JLEVBQUFDLENBQUEsK0pBaERKdDRDLEVBQVEsSUFBQXErQyxvQkFBQXIrQyxDQUFBLDZKQWVKQSxFQUFLLEdBQUFzZ0QsQ0FBQSxRQU1UdGdELEVBQUksSUFBQXMrQyxvQkFBQSxLQU1MdCtDLEVBQVEsSUFBSUEsRUFBTyxJQUFDLFdBQVE2M0Msb0JBQUE3M0MsQ0FBQSx3Q0FVUEEsRUFBVSx5REFFL0JBLEVBQVMsS0FBQTh6QyxrQkFBQTl6QyxDQUFBLDRSQXhDT0EsRUFBUyxHQUFBLGlCQUFBLHFCQUFjQSxFQUFVLEVBQUEsVUFBdkQsT0F3REtzQixFQUFBMDJDLEVBQUF0MkMsQ0FBQSw2QkExQ0osT0FhS3MyQyxFQUFBSSxDQUFBLEVBWkosT0FNTUEsRUFBQXJDLENBQUEsbU1BcEJELzFDLEVBQVEsSUFBQXk0QyxFQUFBLEVBQUF6NEMsRUFBQUcsQ0FBQSxzQkFlSkgsRUFBSyxLQUFBLGVBQUFvRyxFQUFBazZDLENBQUEsb0NBTVR0Z0QsRUFBSSw2RUFNTEEsRUFBUSxJQUFJQSxFQUFPLElBQUMsb0xBWXBCQSxFQUFTLEtBQUF1Z0QsRUFBQSxFQUFBdmdELEVBQUFHLENBQUEsb1JBL09GLG1CQUFBcWdELEVBQVEsQ0FDbkJBLEVBQUEsS0FBQSxPQUNBQSxFQUFBLEtBQUEsT0FDQUEsRUFBQSxJQUFBLE1BQ0FBLEVBQUEsS0FBQSxPQUNBQSxFQUFBLEtBQUEsT0FDQUEsRUFBQSxPQUFBLFFBTlcsR0FBQSxXQUFBLFNBQVEsQ0FBQSxFQUFBLDRJQW9DZEMsRUFBYyxDQUNuQixLQUFNQyxRQUNOLEtBQU1DLFFBQ04sSUFBSyxZQUNMLEtBQU1DLGVBQ04sS0FBTSxhQUNOLE9BQVEsZUFDUixPQUFRLGdCQU1FLEdBQUEsQ0FBQSxTQUFBM0ssRUFBd0MsSUFBSSxFQUFBM3NDLEVBSzVDLENBQUEsSUFBQXV2QyxFQUFvQjVDLEdBQVUsS0FBTyxFQUFFLEVBQUEzc0MsRUFNdkMsQ0FBQSxTQUFBaXRDLEVBQVcsRUFBSyxFQUFBanRDLEVBQ3JCLE1BQUF1M0MsRUFBYXRLLEVBS1IsR0FBQSxDQUFBLE1BQUF1SyxFQUFRLEVBQUssRUFBQXgzQyxFQUNsQixNQUFBeTNDLEVBQVdELE1BS04sYUFBQXBJLENBQW9CLEVBQUFwdkMsRUFDekIsTUFBQStvQyxFQUFhcUcsRUFLUixHQUFBLENBQUEsWUFBQVcsRUFBYyxFQUFFLEVBQUEvdkMsRUFDckIsTUFBQWt0QyxFQUFZNkMsRUFFUCxHQUFBLENBQUEsTUFBQWEsRUFBNEJqRSxHQUFVLE1BQVEsRUFBRSxFQUFBM3NDLEVBRWhELENBQUEsU0FBQTAzQyxFQUFXLEVBQUUsRUFBQTEzQyxFQUtiLENBQUEsUUFBQTIzQyxFQUFtQyxJQUFJLEVBQUEzM0MsRUFDNUMsTUFBQTQzQyxFQUFZRCxFQUdQLEdBQUEsQ0FBQSxLQUFBejlDLEVBQU8sRUFBSyxFQUFBOEYsRUFzSm9DLE1BQUE2MkMsRUFBQWdCLEdBQUFBLEVBQVUsUUFBTyxrYUF0S2hFNUgsRUFBZ0IsV0FBV2xILENBQVUsbVJDN0VsRCxJQUFlLGlCQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQ0FBLFNBQUEsZ0JBQVUrTyxFQUFRQyxFQUFXLENBQ3hDLE1BQU1DLEVBQWlCRixFQUFPLHdCQUN4QkcsRUFBb0JGLEVBQVUsd0JBQzlCbFosRUFBTSxDQUFBLEVBRVosT0FBQUEsRUFBSSxJQUFNbVosRUFBZSxJQUFNLEVBQy9CblosRUFBSSxLQUFPbVosRUFBZSxLQUFPLEVBQ2pDblosRUFBSSxPQUNBbVosRUFBZSxPQUFTQyxFQUFrQixRQUN6QyxPQUFPLGFBQWUsU0FBUyxnQkFBZ0IsY0FFcERwWixFQUFJLE1BQ0FtWixFQUFlLE9BQ2QsT0FBTyxZQUFjLFNBQVMsZ0JBQWdCLGFBQ25EblosRUFBSSxJQUFNQSxFQUFJLEtBQU9BLEVBQUksTUFBUUEsRUFBSSxRQUFVQSxFQUFJLE1BRTVDQSxDQUNYLGlGQzhEV25vQyxFQUFjLEdBQUNBLEVBQUksR0FBRUEsRUFBVSxFQUFBLEVBQUEsMERBRHhCQSxFQUFXLEdBQUEsZ0JBQUEsVUFBN0IsT0FFS3NCLEVBQUFtNUIsRUFBQS80QixDQUFBLHNDQURNMUIsRUFBYyxHQUFDQSxFQUFJLEdBQUVBLEVBQVUsRUFBQSxFQUFBLE1BQUF5NkIsRUFBQSxVQUFBa1osdUJBRHhCM3pDLEVBQVcsR0FBQSx1R0E3RWQsR0FBQSxDQUFBLFNBQUF3aEQsRUFBVyxFQUFLLEVBQUFsNEMsRUFDaEIsQ0FBQSxRQUFBbTRDLEVBQVUsRUFBSyxFQUFBbjRDLEVBQ2YsQ0FBQSxRQUFBbzRDLEVBQVUsRUFBSyxFQUFBcDRDLEVBQ2YsQ0FBQSxhQUFBcTRDLEVBQWUsRUFBSyxFQUFBcjRDLEVBQ3BCLENBQUEsZUFBQXM0QyxFQUFpQixNQUFTLEVBQUF0NEMsRUFDMUIsQ0FBQSxLQUFBdTRDLEVBQU8sTUFBUyxFQUFBdjRDLEVBQ2hCLENBQUEsV0FBQXc0QyxFQUFhLEVBQUUsRUFBQXg0QyxFQUV0Qnk0QyxFQUFjLG9UQUVqQixPQUNTQyxFQUFPLENBQUEsRUFDVFIsR0FDQVEsRUFBUSxLQUFLLFFBQVEsRUFFckJQLEdBQ0FPLEVBQVEsS0FBSyxPQUFPLEVBRXBCTixHQUNBTSxFQUFRLEtBQUssT0FBTyxFQUVwQkgsRUFBSyxlQUNMRyxFQUFRLEtBQUssYUFBYSxFQUUxQkgsRUFBSyxhQUNMRyxFQUFRLEtBQUssV0FBVyxFQUV2QkwsR0FDREssRUFBUSxLQUFLLGVBQWUsRUFFaEN6RixFQUFBLEVBQUF3RixFQUFjQyxFQUFRLEtBQUssR0FBRyxDQUFBLG9ZQ3NSdkJoaUQsRUFBSyx3QkFBVixPQUFJTyxHQUFBLDhIQUFKLHlNQUFLUCxFQUFLLHFCQUFWLE9BQUlPLEdBQUEsRUFBQSx1TEFBSixPQUFJQSxFQUFBbzlDLEVBQUEsT0FBQXA5QyxHQUFBLHlCQUFKLFFBQUkwaEQsYUFBSiw2R0FBQSxPQUFJMWhELEdBQUEsMk1BdEJJUCxFQUFXLG1jQUFYQSxFQUFXLElBQUEsa2JBNENYQSxFQUFjLEtBQUFzK0Msb0JBQUF0K0MsQ0FBQSwwRUFBZEEsRUFBYyxpTUFDSUEsRUFBZ0IsR0FBQSxpREFBcEMsT0FBMENzQixFQUFBbTVCLEVBQUEvNEIsQ0FBQSw0Q0FBdEIxQixFQUFnQixHQUFBLDZFQVp0QkEsRUFBSSwrRUFJRCxRQUFBLFlBQVlBLEVBQUMsR0FBQSxFQUNaLFNBQUEsYUFBYUEsRUFBTSxJQUFBQSxLQUFPQSxFQUFnQixHQUFBLEVBQzNDLFFBQUEsWUFBWUEsRUFBYyxHQUFFQSxFQUFNLElBQUFBLE1BQUdBLEVBQUssRUFBQSxFQUNyQyxhQUFBLGlCQUFpQkEsRUFBSSxHQUFBLDZRQWQzQyxPQWVLc0IsRUFBQW01QixFQUFBLzRCLENBQUEsZ1BBSGF2QixFQUFBLEdBQUEsT0FBQStoRCxFQUFBLFNBQUEsYUFBYWxpRCxFQUFNLElBQUFBLEtBQU9BLEVBQWdCLEdBQUEsR0FDM0NHLEVBQUEsR0FBQSxJQUFBK2hELEVBQUEsUUFBQSxZQUFZbGlELEVBQWMsR0FBRUEsRUFBTSxJQUFBQSxNQUFHQSxFQUFLLEVBQUEsR0FDckNHLEVBQUEsR0FBQSxJQUFBK2hELEVBQUEsYUFBQSxpQkFBaUJsaUQsRUFBSSxHQUFBLFVBUDdCQSxFQUFJLElBQUEsa2JBVFd3M0MsRUFBQXgzQyxLQUFvQkEsRUFBSSxHQUFBLEVBQUEsbUdBQXJELE9BQTREc0IsRUFBQW01QixFQUFBLzRCLENBQUEsc0JBQS9CdkIsRUFBQSxHQUFBLEtBQUFxM0MsS0FBQUEsRUFBQXgzQyxLQUFvQkEsRUFBSSxHQUFBLEVBQUEsS0FBQSxTQUFBZ0UsRUFBQXd6QyxDQUFBLDRKQURwRCxPQUFBeDNDLEVBQUssSUFBQSxlQUFrQixDQUFBQSxNQUFLLGFBQVksa2JBWi9CQSxFQUFJLCtFQUlELFFBQUEsWUFBWUEsRUFBQyxHQUFBLEVBQ1osU0FBQSxhQUFhQSxFQUFNLElBQUFBLEtBQU9BLEVBQWdCLEdBQUEsRUFDM0MsUUFBQSxZQUFZQSxFQUFjLEdBQUVBLEVBQU0sSUFBQUEsTUFBR0EsRUFBSyxFQUFBLEVBQ3JDLGFBQUEsaUJBQWlCQSxFQUFJLEdBQUEsMk9BYjNDLE9BY0tzQixFQUFBbTVCLEVBQUEvNEIsQ0FBQSx1T0FKWXZCLEVBQUEsR0FBQSxPQUFBK2hELEVBQUEsUUFBQSxZQUFZbGlELEVBQUMsR0FBQSxHQUNaRyxFQUFBLEdBQUEsS0FBQUEsRUFBQSxHQUFBLE9BQUEraEQsRUFBQSxTQUFBLGFBQWFsaUQsRUFBTSxJQUFBQSxLQUFPQSxFQUFnQixHQUFBLEdBQzNDRyxFQUFBLEdBQUEsRUFBQUEsRUFBQSxHQUFBLE9BQUEraEQsRUFBQSxRQUFBLFlBQVlsaUQsRUFBYyxHQUFFQSxFQUFNLElBQUFBLE1BQUdBLEVBQUssRUFBQSxHQUNyQ0csRUFBQSxHQUFBLE9BQUEraEQsRUFBQSxhQUFBLGlCQUFpQmxpRCxFQUFJLEdBQUEsVUFQN0JBLEVBQUksSUFBQSx5Z0JBYnJCQSxFQUFhLEdBQUEsMkhBRFhBLEVBQVMsR0FBQSwrQkFGR0EsRUFBYSxFQUFBLFVBRnBDLE9Bd0RLc0IsRUFBQW01QixFQUFBLzRCLENBQUEsOERBMURzQjFCLEVBQWEsR0FBQSx5QkFBYUEsRUFBZ0IsR0FBQSxvT0FNMURBLEVBQVMsR0FBQSx3Q0FGR0EsRUFBYSxFQUFBLDBIQXRGdkIsU0FBQSxhQUFhNmhELEVBQU01aUQsRUFBT2tqRCxFQUFnQixDQUN4QyxPQUFBbGpELEdBQVNBLEVBQU1rakQsS0FBc0JOLEVBQUtNLEdBRzVDLFNBQUEsWUFBWUMsRUFBUyxDQUNuQixPQUFBQSxJQUFjLEVBR2hCLFNBQUEsWUFBWUMsRUFBZ0JSLEVBQU1PLEVBQVdFLEVBQUssUUFDaEQsaUJBQWlCVCxDQUFJLElBQU1RLElBQW1CRCxHQUFhRSxFQUFNLFNBQVcsR0FHOUUsU0FBQSxpQkFBaUJULEVBQUksQ0FDbEIsT0FBQUEsRUFBSyxlQUFpQkEsRUFBSyxjQUMvQkEsRUFBSyxZQUNKLENBQUFBLEVBQUssZUFBZSxZQUFZLDZCQTlNbkMsTUFBQTdMLEVBQVcsd0JBRU4sR0FBQSxDQUFBLFVBQUFxTCxFQUFZLE1BQVMsRUFBQS8zQyxFQUNyQixDQUFBLFlBQUFpNUMsRUFBYyxJQUFJLEVBQUFqNUMsRUFDbEIsTUFBQWs1QyxFQUFPQyxJQUFhLEVBQUFuNUMsRUFDcEIsQ0FBQSxjQUFBbzVDLEVBQWdCLEVBQUssRUFBQXA1QyxHQUNyQixNQUFBZzVDLEVBQUssRUFBQSxFQUFBaDVDLEVBQ0wsQ0FBQSxnQkFBQXE1QyxFQUFrQixPQUFPLEVBQUFyNUMsR0FDekIsZUFBQXM0QyxFQUFjLENBQUlnQixFQUFRZCxJQUFVLElBQ3ZDYyxFQUFNLE9BQ0NBLEVBQU8scUJBQ0lkLEtBQ1pjLEVBQU9ELE9BRVYsQ0FBQSxvQkFBQUUsRUFBc0IsSUFBSSxFQUFBdjVDLEVBQzFCLENBQUEsV0FBQXc1QyxFQUFhLEVBQUUsRUFBQXg1QyxFQUNmLENBQUEsZUFBQSs0QyxFQUFpQixDQUFDLEVBQUEvNEMsRUFDbEIsQ0FBQSxNQUFBckssRUFBUSxNQUFTLEVBQUFxSyxFQUNqQixDQUFBLGlCQUFBNjRDLEVBQW1CLE9BQU8sRUFBQTc0QyxFQUMxQixDQUFBLGVBQUF5NUMsRUFBaUIsRUFBSyxFQUFBejVDLEVBQ3RCLENBQUEsaUJBQUEwNUMsRUFBbUIsWUFBWSxFQUFBMTVDLEVBQy9CLENBQUEsUUFBQTI1QyxFQUFVLEVBQUssRUFBQTM1QyxFQUNmLENBQUEsZ0JBQUE0NUMsRUFBa0IsQ0FBQyxFQUFBNTVDLEVBQ25CLENBQUEsV0FBQXc0QyxFQUFhLEVBQUUsRUFBQXg0QyxFQUNmLENBQUEsT0FBQTgzQyxFQUFTLElBQUksRUFBQTkzQyxFQUNiLENBQUEsY0FBQTY1QyxFQUFnQixJQUFJLEVBQUE3NUMsRUFDcEIsQ0FBQSxjQUFBODVDLEVBQWdCLElBQUksRUFBQTk1QyxFQUNwQixDQUFBLFdBQUErNUMsRUFBYSxDQUFDLEVBQUEvNUMsRUFFckJnNkMsRUFBbUIsRUFDbkJDLEVBQWMsR0FDZEMsRUFFSixRQUFPLElBQUEsQ0FDQyxHQUFBbEIsRUFBTSxPQUFTLEdBQU0sQ0FBQVcsR0FBV2hrRCxFQUFLLENBQy9CLE1BQUF3a0QsRUFBa0JuQixFQUFNLFVBQ3pCVCxHQUFTQSxFQUFLTSxLQUFzQmxqRCxFQUFNa2pELEVBQWdCLEVBRzNEc0IsR0FDQWxILEVBQUEsRUFBQThGLEVBQWlCb0IsQ0FBZSxFQUl4Q0MsRUFBbUIsUUFBUSxFQUUzQnJDLEVBQVUsaUJBQ04sY0FFSSxhQUFhaUMsQ0FBZ0IsRUFFN0JBLEVBQW1CLGdCQUNmQyxFQUFjLElBQ2YsTUFFUCxNQUlSLGFBQVksSUFBQSxDQUNIakIsT0FBT0EsRUFBSyxDQUFBLENBQUEsRUFDYkEsSUFBVWtCLEdBQWNsQixFQUFNLE9BQVMsR0FDdkMvRixFQUFBLEVBQUE4RixFQUFpQixDQUFDLEVBR3RCbUIsRUFBYWxCLElBR1IsU0FBQXFCLEVBQWE5QixFQUFJLENBQ2xCQSxFQUFLLFdBQ1Q3TCxFQUFTLGVBQWdCNkwsQ0FBSSxFQUd4QixTQUFBK0IsRUFBWXJqRCxFQUFDLENBQ2RnakQsR0FDSmhILEVBQUEsRUFBQThGLEVBQWlCOWhELENBQUMsRUFHYixTQUFBc2pELEVBQVlweUIsRUFBSSxDQUNiLEtBQUEsQ0FBQSxLQUFBb3dCLEVBQU0sRUFBQXRoRCxHQUFHLE1BQUF3QixFQUFLLEVBQUswdkIsS0FDM0IxdkIsR0FBTSxnQkFBZSxFQUdqQjlDLEdBQUssQ0FDSmdrRCxHQUNEaGtELEVBQU1rakQsS0FBc0JOLEVBQUtNLEdBQWdCLE9BRTFDMkIsSUFFUGpDLEVBQUssVUFDTDdMLEVBQVMsY0FBZThMLENBQVUsRUFDM0IsaUJBQWlCRCxDQUFJLElBQzVCdEYsRUFBQSxHQUFBMkcsRUFBa0IzaUQsRUFBQyxFQUNuQmc4QyxFQUFBLEVBQUE4RixFQUFpQjloRCxFQUFDLEVBQ2xCb2pELEVBQWE5QixDQUFJLFlBSWhCaUMsR0FBUyxDQUNkOU4sRUFBUyxXQUFXLEVBR1QsZUFBQStOLEVBQWdCQyxFQUFTLElBQ2hDdEIsRUFBYSxPQUViLElBQUF1QixFQUFzQixRQUVuQkEsR0FDQ0QsRUFBWSxHQUFLM0IsSUFBbUJDLEVBQU0sT0FBUyxFQUNuRC9GLEVBQUEsRUFBQThGLEVBQWlCLENBQUMsRUFDWDJCLEVBQVksR0FBSzNCLElBQW1CLEVBQzNDOUYsRUFBQSxFQUFBOEYsRUFBaUJDLEVBQU0sT0FBUyxDQUFDLE1BRWpDRCxFQUFpQkEsRUFBaUIyQixDQUFTLEVBRy9DQyxFQUF1QixDQUFBLGlCQUFpQjNCLEVBQU1ELEVBQWMsUUFHMUQsS0FBSSxFQUVWcUIsRUFBbUIsT0FBTyxFQUdyQixTQUFBUSxFQUFjaGhELEVBQUMsQ0FDWixPQUFBQSxFQUFFLFNBQ0QsU0FDREEsRUFBRSxlQUFjLEVBQ2hCNGdELGNBRUMsWUFDRDVnRCxFQUFFLGVBQWMsRUFDaEJvL0MsRUFBTSxRQUFVeUIsRUFBZ0IsQ0FBQyxZQUVoQyxVQUNEN2dELEVBQUUsZUFBYyxFQUNoQm8vQyxFQUFNLFFBQVV5QixJQUFrQixZQUVqQyxXQUNEN2dELEVBQUUsZUFBYyxFQUNaby9DLEVBQU0sU0FBVyxFQUFDLFlBQ2hCNkIsRUFBWTdCLEVBQU1ELE1BRXBCcGpELEdBQUssQ0FDSmdrRCxHQUNEaGtELEVBQU1rakQsS0FBc0JnQyxFQUFVaEMsR0FBZ0IsQ0FFdEQyQixVQUdBSyxFQUFVLFVBQ1ZuTyxFQUFTLGNBQWU4TCxDQUFVLEdBRWxDdkYsRUFBQSxHQUFBMkcsRUFBa0JiLENBQWMsRUFDaENzQixFQUFhckIsRUFBTUQsRUFBYyxhQUdwQyxTQUNEbi9DLEVBQUUsZUFBYyxFQUNaby9DLEVBQU0sU0FBVyxHQUlqQnJqRCxHQUNBQSxFQUFNa2pELEtBQ0ZHLEVBQU1ELEdBQWdCRixHQUFnQixPQUVuQzJCLElBQ1h2SCxFQUFBLEdBQUEyRyxFQUFrQmIsQ0FBYyxFQUNoQ3NCLEVBQWFyQixFQUFNRCxFQUFjLFNBS3BDLFNBQUFxQixFQUFtQlUsRUFBUyxDQUM3QixHQUFBMUIsSUFBa0JyQixFQUFTLFdBRTNCZ0QsRUFDRSxNQUFBQyxHQUFzQmpELEVBQVUsNEJBQ3BCK0MsR0FBUyxFQUd2QkUsS0FDQUQsRUFDSWhELEVBQVUsc0JBQXFCLEVBQUcsT0FDbENpRCxHQUFvQixzQkFBcUIsRUFBRyxZQUdwRGpELEVBQVUsV0FBYWdELEVBQWNoRCxDQUFBLE1BcUJyQ2tELFdBQ0tDLEdBQWdCLENBQ2IsS0FBQSxDQUFBLE9BQUE1SixFQUFRLE1BQUE2SixDQUFVLEVBQUFyRCxFQUFPLHNCQUFxQixFQUV0RDdFLEVBQUEsR0FBQWdJLEVBQVksRUFBRSxFQUNkaEksRUFBQSxHQUFBZ0ksZ0JBQTBCRSxhQUN0QnJCLEVBQWdCLE9BQVMsU0FBSyxFQUk5QkQsSUFBa0IsT0FDakJBLElBQWtCLFFBQVUsZ0JBQWdCL0IsRUFBUUMsQ0FBUyxFQUFFLFlBRWhFa0QsR0FBUyxVQUFjM0osRUFBU3lJLE1BQVUsT0FFMUNrQixHQUFTLE9BQVczSixFQUFTeUksTUFBVSxFQWdFZixNQUFBcUIsRUFBQW5rRCxHQUFBcWpELEVBQVlyakQsQ0FBQyxFQUNqQm9rRCxFQUFBcGtELEdBQUFxakQsRUFBWXJqRCxDQUFDLEVBQ2xCNC9DLEVBQUEsQ0FBQTBCLEVBQUF0aEQsRUFBQXdCLEtBQVU4aEQsRUFBVyxDQUFHLEtBQUFoQyxFQUFNLEVBQUF0aEQsRUFBRyxNQUFBd0IsRUFBSyxDQUFBLEVBbUJ6QjZpRCxFQUFBcmtELEdBQUFxakQsRUFBWXJqRCxDQUFDLEVBQ2pCc2tELEVBQUF0a0QsR0FBQXFqRCxFQUFZcmpELENBQUMsRUFDbEJpNkMsRUFBQSxDQUFBcUgsRUFBQXRoRCxFQUFBd0IsS0FBVThoRCxFQUFXLENBQUcsS0FBQWhDLEVBQU0sRUFBQXRoRCxFQUFHLE1BQUF3QixFQUFLLENBQUEsNERBakN0RHMvQyxFQUFTakIsMDZCQWpEWmdCLEdBQVVDLEdBQVdtRCx5bEJDNU50QjdRLEVBQUEzekMsS0FBa0JBLEVBQUksRUFBQSxFQUFBLGlGQURqQyxPQUVLc0IsRUFBQW01QixFQUFBLzRCLENBQUEsMEJBRE12QixFQUFBLEdBQUF3ekMsS0FBQUEsRUFBQTN6QyxLQUFrQkEsRUFBSSxFQUFBLEVBQUEsTUFBQXk2QixFQUFBLFVBQUFrWixxRUFibEIsR0FBQSxDQUFBLGtCQUFBbVIsRUFBb0IsTUFBUyxFQUFBeDdDLEVBQzdCLENBQUEsS0FBQXU0QyxFQUFPLE1BQVMsRUFBQXY0QyxrNEJDcUZuQixPQWFLaEksRUFBQW01QixFQUFBLzRCLENBQUEsb0hBaEJFaXlDLEVBQUEzekMsS0FBa0JBLEVBQUksRUFBQSxFQUFBLGFBRTNCNnpDLEVBQUEsQ0FBQTd6QyxPQUFlQSxFQUFzQixJQUFBOHpDLGtCQUFBOXpDLENBQUEsZ05BUm5CQSxFQUFXLEtBQUtBLEVBQUMsSUFBRyxTQUFXLElBQUUsS0FBR0EsRUFBQSxHQUN0RCxXQUNBLElBQUUsZ0JBQUEsVUFIWixPQXlCS3NCLEVBQUEwMkMsRUFBQXQyQyxDQUFBLEVBbkJELE9BRUtzMkMsRUFBQUksQ0FBQSxtR0FETWo0QyxFQUFBLElBQUF3ekMsS0FBQUEsRUFBQTN6QyxLQUFrQkEsRUFBSSxFQUFBLEVBQUEsTUFBQW80QyxFQUFBLFVBQUF6RSxHQUUzQixDQUFBM3pDLE9BQWVBLEVBQXNCLHlHQVJuQkEsRUFBVyxLQUFLQSxFQUFDLElBQUcsU0FBVyxJQUFFLEtBQUdBLEVBQUEsR0FDdEQsV0FDQSxJQUFFLGtIQUpUQSxFQUFLLHdCQUFWLE9BQUlPLEdBQUEsbU1BQUNQLEVBQUsscUJBQVYsT0FBSU8sR0FBQSxFQUFBLDRKQUFKLDRGQXpFUSxNQUFBeTFDLEVBQVcsNEJBRU4sTUFBQS8yQyxFQUFLLEVBQUEsRUFBQXFLLEVBQ0wsQ0FBQSxZQUFBeTdDLEVBQWMsTUFBUyxFQUFBejdDLEVBQ3ZCLENBQUEsV0FBQTA3QyxFQUFhLEVBQUssRUFBQTE3QyxFQUNsQixDQUFBLHVCQUFBMjdDLEVBQXlCLEVBQUssRUFBQTM3QyxFQUM5QixDQUFBLGtCQUFBdzdDLEVBQW9CLE1BQVMsRUFBQXg3QyxXQUUvQjQ3QyxFQUFZM2tELEVBQUd3QixFQUFLLENBQ3pCQSxFQUFNLGdCQUFlLEVBQ3JCaTBDLEVBQVMsaUJBQWdCLENBQUksRUFBQXoxQyxDQUFDLENBQUEsRUE0RVgsTUFBQTQvQyxFQUFBLENBQUE1L0MsRUFBQXdCLElBQVVtakQsRUFBWTNrRCxFQUFHd0IsQ0FBSyxFQVJ0Q3k0QyxFQUFBLENBQUFqNkMsRUFBQXdCLElBQ1BrakQsRUFBeUJDLEVBQVkza0QsRUFBR3dCLENBQUssRUFBQSx1ckJDdUU3QixLQUFBL0IsTUFBSSxLQUFTLEVBQUFBLE1BQUksK0VBQXdCLGtCQUFnQixtVkFEekUsT0FFeUJzQixFQUFBNmpELEVBQUF6akQsQ0FBQSxtWEFIdEIxQixFQUFPLEdBQVMsTUFBQStHLEVBQUEvRyxHQUFBQSxNQUFJLHNCQUF6QixPQUFJTyxHQUFBLEVBQUEsNk9BRGVQLEVBQUcsR0FBQSxJQUFBLCtCQUFzQkEsRUFBTSxHQUFBLElBQUEsMEVBSHhDQSxFQUFNLEVBQUEsb0dBSjFCLE9BYzhCc0IsRUFBQThqRCxFQUFBMWpELENBQUEsRUFUMUIsT0FROEIwakQsRUFBQUMsQ0FBQSxtSUFWbkJybEQsRUFBYSxFQUFBLDhCQUtiQSxFQUFPLGlMQURPQSxFQUFHLEdBQUEsSUFBQSw0Q0FBc0JBLEVBQU0sR0FBQSxJQUFBLGtDQUh4Q0EsRUFBTSxFQUFBLCtCQUloQixPQUFJTyxHQUFBLGdQQXBKQyxDQUFBLE1BQUEraEQsRUFBUSxNQUFTLEVBQUFoNUMsRUFDakIsQ0FBQSxPQUFBc3hDLEVBQVMsTUFBTSxFQUFBdHhDLEVBQ2YsQ0FBQSxXQUFBdzVDLEVBQWEsRUFBRSxFQUFBeDVDLEVBQ2YsQ0FBQSxlQUFBKzRDLEVBQWlCLENBQUMsRUFBQS80QyxFQUNsQixDQUFBLE1BQUEwTyxFQUFRLENBQUMsRUFBQTFPLEVBQ1QsQ0FBQSxJQUFBNm5CLEVBQU0sQ0FBQyxFQUFBN25CLEVBRWRnOEMsRUFBVSxDQUFBLEVBQ1ZDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQWtCLEVBQ2xCQyxFQUNBQyxFQUVBQyxFQUFNLEVBQ05DLEVBQVMsRUFDVEMsRUFRVyxlQUFBQyxFQUFRMUQsRUFBT29ELEVBQWlCNUMsRUFBVSxDQUM3QyxLQUFBLENBQUEsVUFBQW1ELEdBQWNULFFBRWhCLEtBQUksTUFFTlUsRUFBaUJMLEVBQU1JLEVBQ3ZCMWxELEVBQUl5WCxFQUVELEtBQUFrdUMsRUFBaUJSLEdBQW1CbmxELEVBQUkraEQsRUFBTSxRQUFNLENBQ25ELElBQUE2RCxFQUFNWixFQUFLaGxELEVBQUl5WCxHQUVkbXVDLFNBQ0RoMUIsRUFBTTV3QixFQUFJLENBQUMsUUFDTCxLQUFJLEVBQ1Y0bEQsRUFBTVosRUFBS2hsRCxFQUFJeVgsSUFJbkJrdUMsR0FEb0JaLEVBQVcva0QsR0FBS3VpRCxHQUFjcUQsRUFBSSxhQUV0RDVsRCxHQUFLLEVBR1RnOEMsRUFBQSxHQUFBcHJCLEVBQU01d0IsQ0FBQyxFQUVELE1BQUE2bEQsRUFBWTlELEVBQU0sT0FBU254QixFQUNqQzQwQixHQUFrQkYsRUFBTUssR0FBa0IvMEIsTUFFMUMyMEIsRUFBU00sRUFBWUwsQ0FBYyxFQUNuQ1QsRUFBVyxPQUFTaEQsRUFBTSxPQUV0QmtELEdBQVVqSixFQUFBLEVBQUFpSixFQUFTLFVBQVksRUFBQ0EsQ0FBQSxpQkFHekJhLEdBQWEsQ0FDaEIsS0FBQSxDQUFBLFVBQUFKLEdBQWNULEVBRWhCYyxFQUFZdHVDLFVBRVQ1TSxFQUFJLEVBQUdBLEVBQUltNkMsRUFBSyxPQUFRbjZDLEdBQUssRUFDbENrNkMsRUFBV3R0QyxFQUFRNU0sR0FBSzAzQyxHQUFjeUMsRUFBS242QyxHQUFHLGFBRzlDLElBQUE3SyxFQUFJLEVBQ0p5WSxFQUFJLE9BRUR6WSxFQUFJK2hELEVBQU0sUUFBTSxDQUNiLE1BQUFpRSxFQUFhakIsRUFBVy9rRCxJQUFNd2xELEtBQ2hDL3NDLEVBQUl1dEMsRUFBYU4sRUFBUyxDQUMxQjFKLEVBQUEsRUFBQXZrQyxFQUFRelgsQ0FBQyxFQUNUZzhDLEVBQUEsRUFBQXNKLEVBQU03c0MsQ0FBQyxRQUtYQSxHQUFLdXRDLEVBQ0xobUQsR0FBSyxPQUdGQSxFQUFJK2hELEVBQU0sU0FDYnRwQyxHQUFLc3NDLEVBQVcva0QsSUFBTXdsRCxFQUN0QnhsRCxHQUFLLEVBRUQsRUFBQXlZLEVBQUlpdEMsRUFBWVAsTUFHeEJuSixFQUFBLEdBQUFwckIsRUFBTTV3QixDQUFDLEVBRUQsTUFBQTZsRCxFQUFZOUQsRUFBTSxPQUFTbnhCLE1BQ2pDNDBCLEVBQWlCL3NDLEVBQUltWSxFQUVkNXdCLEVBQUkraEQsRUFBTSxRQUFRZ0QsRUFBVy9rRCxLQUFPd2xELEVBR3ZDLE9BRkpELEVBQVNNLEVBQVlMLENBQWMsRUFFL0IvdEMsRUFBUXN1QyxFQUFTLE9BQ1gsS0FBSSxFQUVOLElBQUFFLEVBQWtCLEVBQ2xCQyxFQUFnQixVQUVYbG1ELEVBQUl5WCxFQUFPelgsRUFBSStsRCxFQUFXL2xELEdBQUssRUFDaENnbEQsRUFBS2hsRCxFQUFJeVgsS0FDVHd1QyxHQUFtQmxCLEVBQVcva0QsR0FDOUJrbUQsR0FBaUIzRCxHQUFjeUMsRUFBS2hsRCxFQUFJeVgsR0FBTyxvQkFJakQ3UixFQUFJc2dELEVBQWdCRCxFQUMxQmhCLEVBQVMsU0FBUyxFQUFHUyxFQUFZOS9DLENBQUMsR0FJMUMsUUFBTyxJQUFBLENBQ0hvL0MsRUFBT0UsRUFBUyxxQkFBcUIseUJBQXlCLEVBQzlEbEosRUFBQSxHQUFBcUosRUFBVSxFQUFJLDZEQTRCSEgsRUFBUXJGLG9FQUxab0YsRUFBUXBGLHdCQUNBc0YsRUFBZSxLQUFBLGdUQTNIL0JuSixFQUFBLEVBQUFvSixFQUFVckQsRUFBTSxNQUFNdHFDLEVBQU9tWixDQUFHLEVBQUUsSUFBSyxDQUFBcnZCLEVBQU12QixLQUNuQyxDQUFBLE1BQU9BLEVBQUl5WCxFQUFPLEtBQUFsVyxDQUFJLHVCQUc1QjhqRCxHQUFTSSxFQUFRMUQsRUFBT29ELEVBQWlCNUMsQ0FBVTsyT0MxQjlELE9BYUt4aEQsRUFBQW9sRCxFQUFBaGxELENBQUEsRUFMRCxPQUlDZ2xELEVBQUFDLENBQUEsd0tDWlUsU0FBUyxTQUFTQyxFQUFNeEssRUFBTXlLLEVBQVcsQ0FDcEQsSUFBSUMsRUFFSixPQUFPLFVBQTRCLENBQy9CLElBQUlyaUQsRUFBVSxLQUNWZ3RCLEVBQU8sVUFFUHMxQixFQUFRLFVBQVksQ0FDcEJELEVBQVUsS0FDTEQsR0FBV0QsRUFBSyxNQUFNbmlELEVBQVNndEIsQ0FBSSxDQUNwRCxFQUVZdTFCLEVBQVVILEdBQWEsQ0FBQ0MsRUFFNUIsYUFBYUEsQ0FBTyxFQUVwQkEsRUFBVSxXQUFXQyxFQUFPM0ssQ0FBSSxFQUU1QjRLLEdBQVNKLEVBQUssTUFBTW5pRCxFQUFTZ3RCLENBQUksQ0FDN0MsQ0FDQSx3TUN3MUJ1Q3p4QixFQUFhLEdBQUEscUNBRW5DQSxFQUFXLEdBQUEsb0VBRmhCLE9BQStDc0IsRUFBQTIyQyxFQUFBdjJDLENBQUEsNEJBQy9DLE9BRU1KLEVBQUFnM0MsRUFBQTUyQyxDQUFBLHlDQUhxQjFCLEVBQWEsR0FBQSxxQkFFbkNBLEVBQVcsR0FBQSxrR0FNY0EsRUFBUyxHQUFBLFFBQW5CQSxFQUFJLDJSQUFNQSxFQUFTLEdBQUEsQ0FBQSxDQUFBLGVBQW5CQSxFQUFJLEtBQUEsc2JBS2xCQSxFQUFjLG1MQU1EQSxFQUFvQixHQUFBLGdCQUM3QkEsRUFBVyxHQUFBLG9UQVBmQSxFQUFjLEtBQUEsc0pBTURBLEVBQW9CLEdBQUEsZ0JBQzdCQSxFQUFXLEdBQUEsOFRBZ0JYQSxFQUFTLHFDQUNUQSxFQUFLLHNLQUhuQixPQUtLc0IsRUFBQW01QixFQUFBLzRCLENBQUEsMkRBTCtCMUIsRUFBVyxHQUFBLDhDQUdqQ0EsRUFBSyxrREFETEEsRUFBUyxLQUFBLDBiQVdLQSxFQUFTLCtMQUpyQyxPQUtLc0IsRUFBQW01QixFQUFBLzRCLENBQUEsMkVBSHdCMUIsRUFBVyxHQUFBLENBQUEsMEJBRVpBLEVBQVMsS0FBQSxpYkFNNUJBLEVBQVksSUFBQSwwS0FEckIsT0FrQktzQixFQUFBbTVCLEVBQUEvNEIsQ0FBQTs7OzswT0FkRyxPQVlLSixFQUFBb2xELEVBQUFobEQsQ0FBQSxFQU5ELE9BS3VDZ2xELEVBQUFDLENBQUEsK0hBYnBDM21ELEVBQVksSUFBQXNCLEVBQUFJLENBQUEsMENBQVoxQixFQUFZLEdBQUEsMlhBb0IzQixPQVlLc0IsRUFBQW01QixFQUFBLzRCLENBQUEsNEVBTUcxQixFQUFTLEdBQUEsK0JBRFBBLEVBQUksdU9BR09BLEVBQVksR0FBQSxzQkFDYkEsRUFBVyxHQUFBLG9CQUNiQSxFQUFTLEdBQUEsd0tBSm5CQSxFQUFTLEdBQUEsQ0FBQSxDQUFBLDhGQURQQSxFQUFJLEtBQUEsMk1BR09BLEVBQVksR0FBQSxzQkFDYkEsRUFBVyxHQUFBLG9CQUNiQSxFQUFTLEdBQUEsb1ZBS2pCLEtBQUFpbkQsRUFBQSxPQUFBQyxFQUFBbG5ELE1BQWdCLElBQUksb0NBRW5CQSxFQUFLLEdBQUdBLE1BQWtCQSxFQUFLLEVBQUEsRUFBSSw4Q0FIOUMsT0FHcURzQixFQUFBMmxELEVBQUF2bEQsQ0FBQSxVQUYzQ3ZCLEVBQUEsR0FBQSxPQUFBK21ELEtBQUFBLEVBQUFsbkQsTUFBZ0IsMENBRWZBLEVBQUssR0FBR0EsTUFBa0JBLEVBQUssRUFBQSxFQUFJLDhFQUl2Q0EsRUFBSyx3QkFBVixPQUFJTyxHQUFBLHVNQUFDUCxFQUFLLHFCQUFWLE9BQUlPLEdBQUEsRUFBQSw0SkFBSix1SEFFWSxLQUFBMG1ELEVBQUEsT0FBQUMsRUFBQWxuRCxNQUFnQixJQUFJLG9DQUVuQkEsRUFBSSxLQUFHQSxNQUFrQkEsRUFBSSxJQUFBLEVBQUksOENBSDVDLE9BR21Ec0IsRUFBQTJsRCxFQUFBdmxELENBQUEsVUFGekN2QixFQUFBLEdBQUEsT0FBQSttRCxLQUFBQSxFQUFBbG5ELE1BQWdCLDBDQUVmQSxFQUFJLEtBQUdBLE1BQWtCQSxFQUFJLElBQUEsRUFBSSxnSEFoSDNDQSxFQUFTLElBQUEsbUJBQUFBLENBQUEsSUFRYkEsRUFBSSxLQUFBLGtCQUFBQSxDQUFBLElBSUpBLEVBQWUsS0FBQSxrQkFBQUEsQ0FBQSxrQkFhTEEsRUFBWSxLQUNuQkEsRUFBZ0IsaUJBSVBBLEVBQWUsR0FBQSxTQUNyQkEsRUFBVyxHQUFBLFlBQ1JBLEVBQVUsRUFBQSxxREFFbEIsSUFBQXVnRCxFQUFBLENBQUF2Z0QsTUFBV0EsRUFBZ0IsS0FBQSxrQkFBQUEsQ0FBQSxJQVM1QkEsRUFBYSxLQUFBLGtCQUFBQSxDQUFBLEVBU1o4M0MsRUFBQSxDQUFBOTNDLFFBQWtCQSxFQUFhLEtBQUtBLEVBQVcsS0FBQSxDQUFLQSxFQUFZLElBQUEsQ0FBQUEsRUFBaUIsS0FBQSxDQUFBQSxPQUFlQSxFQUFTLEtBQU1BLEVBQXFCLEtBQUEsQ0FBQUEsUUFBaUJBLEVBQWdCLE9BQUEsa0JBQUFBLENBQUEsSUFzQnRLQSxFQUFTLElBQUEsa0JBQUEsSUFnQlRBLEVBQVEsSUFBQXMrQyxvQkFBQXQrQyxDQUFBLE1BVVBBLEVBQU8sSUFBS0EsRUFBTyxJQUFBLENBQUtBLEVBQWUsTUFBQTYzQyxvQkFBQTczQyxDQUFBLEVBT3hDbW5ELEVBQUFubkQsTUFBV0EsRUFBZSxLQUFBOHpDLGtCQUFBOXpDLENBQUEsMmVBeEhQQSxFQUFnQixJQUFBLGlCQUFBLGlCQUtqQ0EsRUFBZSxHQUFBLGdFQUhIQSxFQUFPLEVBQUEsNEJBQ1ZBLEVBQVUsRUFBQSwyQkFDWEEsRUFBUyxFQUFBLFVBTDVCLE9BaUlLc0IsRUFBQW01QixFQUFBLzRCLENBQUEsRUF4SEQsT0FXTSs0QixFQUFBc2IsQ0FBQSxtRkFrQk4sT0FRMkJ0YixFQUFBd3NCLENBQUEsb0RBSFhqbkQsRUFBVSxFQUFBLDBPQS9DaEJBLEVBQWlCLEdBQUEsMEJBQ2ZBLEVBQWlCLEdBQUEsMEJBQ2pCQSxFQUFhLEdBQUEsbUJBNENYQSxFQUFXLEdBQUEsMkNBbkNmQSxFQUFXLEdBQUEsaUJBT1pBLEVBQVMsNkVBUWJBLEVBQUksa0xBSUpBLEVBQWUsOE9BYUxBLEVBQVksT0FBQSxDQUFBLFNBQUFvbkQsQ0FBQSxVQUNuQnBuRCxFQUFnQixnQ0FJUEEsRUFBZSxHQUFBLDJCQUNyQkEsRUFBVyxHQUFBLDRCQUNSQSxFQUFVLEVBQUEsdUJBSFJBLEVBQVUsc0JBQVZBLEVBQVUsRUFBQSxzQ0FLcEIsQ0FBQUEsTUFBV0EsRUFBZ0IscUxBUzVCQSxFQUFhLDhLQVNaLENBQUFBLFFBQWtCQSxFQUFhLEtBQUtBLEVBQVcsS0FBQSxDQUFLQSxFQUFZLElBQUEsQ0FBQUEsRUFBaUIsS0FBQSxDQUFBQSxPQUFlQSxFQUFTLEtBQU1BLEVBQXFCLEtBQUEsQ0FBQUEsUUFBaUJBLEVBQWdCLDRFQXNCdEtBLEVBQVMsZ0VBZ0JUQSxFQUFRLGdMQVVQQSxFQUFPLElBQUtBLEVBQU8sSUFBQSxDQUFLQSxFQUFlLDRFQU94Q0EsTUFBV0EsRUFBZSwwSEF4SFBBLEVBQWdCLElBQUEsdUVBS2pDQSxFQUFlLEdBQUEsNEZBSEhBLEVBQU8sRUFBQSwwQ0FDVkEsRUFBVSxFQUFBLHlDQUNYQSxFQUFTLEVBQUEsbVdBL21CZixTQUFBLDRCQUE0QnFuRCxFQUFNLENBQ2hDLE9BQUFBLEVBQU8sSUFBSyxDQUFBeEYsRUFBTXQ3QyxLQUVqQixDQUFBLE1BQUFBLEVBQ0EsTUFBT3M3QyxFQUNQLFNBQVVBLHNEQTdPaEIsTUFBQTdMLEVBQVcsd0JBRU4sR0FBQSxDQUFBLEdBQUF0TCxFQUFLLElBQUksRUFBQXBoQyxFQUNULENBQUEsVUFBQSszQyxFQUFZLE1BQVMsRUFBQS8zQyxFQUNyQixDQUFBLE1BQUE5RyxFQUFRLE1BQVMsRUFBQThHLEVBQ2pCLENBQUEsUUFBQTI1QyxFQUFVLEVBQUssRUFBQTM1QyxFQUNmLENBQUEsdUJBQUEyN0MsRUFBeUIsRUFBSyxFQUFBMzdDLEVBQzlCLENBQUEsV0FBQTA3QyxFQUFhLEVBQUssRUFBQTE3QyxFQUNsQixDQUFBLFlBQUFnK0MsRUFBYyxFQUFLLEVBQUFoK0MsRUFDbkIsQ0FBQSxVQUFBaStDLEVBQVksRUFBSyxFQUFBaitDLEVBQ2pCLENBQUEsTUFBQXJLLEVBQVEsSUFBSSxFQUFBcUssRUFDWixDQUFBLFdBQUF3NEMsRUFBYSxFQUFFLEVBQUF4NEMsRUFDZixDQUFBLFlBQUFrK0MsRUFBYyxXQUFXLEVBQUFsK0MsRUFDekIsQ0FBQSxzQkFBQW0rQyxFQUF3QixFQUFLLEVBQUFuK0MsRUFDN0IsQ0FBQSxNQUFBZzVDLEVBQVEsSUFBSSxFQUFBaDVDLEVBQ1osQ0FBQSxXQUFBbytDLEVBQWMsQ0FBQXZNLEVBQU8yRyxFQUFZYyxLQUFNLEdBQzNDekgsSUFBUSxZQUFXLEVBQUcsU0FBUzJHLEVBQVcsWUFBVyxDQUFBLENBQUEsRUFBQXg0QyxFQUNqRCxDQUFBLFFBQUFxK0MsRUFBVSxNQUFTLEVBQUFyK0MsR0FDbkIsWUFBQXMrQyxFQUFlQyxHQUFXQSxDQUFNLEVBQUF2K0MsRUFDaEMsQ0FBQSx3QkFBQXcrQyxFQUEwQixFQUFLLEVBQUF4K0MsRUFDL0IsQ0FBQSxvQkFBQXU1QyxFQUF1QkQsR0FDdkJBLEVBQU9ELElBQW9CQyxFQUFPLE1BRWxDLENBQUEsZ0JBQUFELEVBQWtCLE9BQU8sRUFBQXI1QyxHQUN6QixlQUFBczRDLEVBQWMsQ0FBSWdCLEVBQVFkLElBQzFCYyxFQUFPLHFCQUNJZCxLQUNaYyxFQUFPRCxNQUVOLENBQUEsaUJBQUFSLEVBQW1CLE9BQU8sRUFBQTc0QyxFQUMxQixDQUFBLFlBQUF5K0MsRUFBYyxNQUFTLEVBQUF6K0MsRUFDdkIsQ0FBQSxTQUFBMCtDLEVBQVcsRUFBSyxFQUFBMStDLEVBQ2hCLENBQUEsZ0JBQUEyK0MsRUFBa0IsRUFBRSxFQUFBMytDLEVBQ3BCLENBQUEsa0JBQUF3N0MsRUFBcUJsQyxHQUN4QkEsRUFBZUEsRUFBT0QsR0FDZCxRQUdMLENBQUEsc0JBQUF1RixFQUF5QkMsSUFFNUIsQ0FBQSxNQUFPQSxFQUNQLE1BQU9BLENBQVUsTUFJZCxDQUFBLFdBQUFDLEVBQWN0RyxJQUVqQixDQUFBLE1BQU9BLEVBQ1AsTUFBT0EsQ0FBVSxZQUladUcsRUFBZ0IsSUFDbEJDLEVBR0EsR0FBQSxDQUFBLGFBQUFDLEVBQWUsRUFBSSxFQUFBai9DLEVBQ25CLENBQUEsWUFBQWsvQyxFQUFjLEVBQUUsRUFBQWwvQyxFQUNoQixDQUFBLFlBQUFtL0MsRUFBYyxFQUFJLEVBQUFuL0MsRUFDbEIsQ0FBQSxVQUFBby9DLEdBQVksRUFBSyxFQUFBcC9DLEVBQ2pCLENBQUEsY0FBQTY1QyxFQUFnQixNQUFNLEVBQUE3NUMsRUFDdEIsQ0FBQSxTQUFBcS9DLEVBQVcsRUFBSyxFQUFBci9DLEVBQ2hCLENBQUEsY0FBQW81QyxHQUFnQixFQUFLLEVBQUFwNUMsRUFDckIsQ0FBQSxvQkFBQXMvQyxHQUFzQixHQUFHLEVBQUF0L0MsRUFDekIsQ0FBQSxpQkFBQTA1QyxHQUFtQixZQUFZLEVBQUExNUMsRUFDL0IsQ0FBQSxlQUFBeTVDLEdBQWlCLEVBQUssRUFBQXo1QyxHQUN0QixnQkFBQXUvQyxFQUFlLEVBQUEsRUFBQXYvQyxFQUNmLENBQUEsY0FBQTg1QyxHQUFnQixFQUFJLEVBQUE5NUMsRUFDcEIsQ0FBQSxXQUFBdzVDLEdBQWEsRUFBRSxFQUFBeDVDLEVBQ2YsQ0FBQSxLQUFBdy9DLEVBQU8sTUFBUyxFQUFBeC9DLEdBQ2hCLFVBQUF5L0MsRUFBUyxFQUFBLEVBQUF6L0MsRUFDVCxDQUFBLFlBQUEwL0MsR0FBYyxFQUFLLEVBQUExL0MsRUFDbkIsQ0FBQSxjQUFBMi9DLEdBQWdCLEVBQUssRUFBQTMvQyxFQUNyQixDQUFBLGlCQUFBNC9DLEdBQW1CLEVBQUUsRUFBQTUvQyxFQUNyQixDQUFBLGFBQUE2L0MsR0FBZSxNQUFTLEVBQUE3L0MsRUFDeEIsQ0FBQSxXQUFBKzVDLEdBQWEsQ0FBQyxFQUFBLzVDLEVBRWQsV0FBQTgvQyxHQUFZQyxTQUFVLEVBQUEvL0MsRUFDdEIsTUFBQWs1QyxHQUFPOEcsSUFBSyxFQUFBaGdELEVBQ1osTUFBQWlnRCxHQUFPQyxJQUFLLEVBQUFsZ0QsRUFDWixXQUFBbWdELEdBQVlDLFNBQVUsRUFBQXBnRCxFQUN0QixnQkFBQXFnRCxHQUFpQkMsY0FBZSxFQUFBdGdELEVBQ2hDLGFBQUFpNUMsR0FBY3NILFdBQVksRUFBQXZnRCxFQUU1QixTQUFBd2dELEdBQWFyNEIsRUFBSSxJQUNsQkEsRUFBSyxhQUFlQSxFQUFLLFdBQVcsT0FBUyxFQUFDLE9BQzdDLEdBQUEsQ0FBQUEsRUFBSyxNQUFLLE1BQUEsR0FHWEEsRUFBSyxPQUNMQSxFQUFLLE1BQU0sT0FBUyxVQUNiQSxFQUFLLE1BQU0sSUFBTyxXQUV6QkEsRUFBSyxNQUFRLDRCQUE0QkEsRUFBSyxLQUFLLEdBR25ELElBQUFzNEIsRUFBZ0J0NEIsRUFBSyxNQUFNLE9BQVFvd0IsSUFBSSxDQUNuQyxJQUFBbUksR0FBZ0J0QyxFQUNoQjlGLEVBQWVDLEdBQU1wd0IsRUFBSyxVQUFVLEVBQ3BDQSxFQUFLLFdBQ0xvd0IsRUFBQSxFQUlBLE9BQUFtSSxJQUNBdjRCLEVBQUssU0FDTEEsRUFBSyxPQUNMLE1BQU0sUUFBUUEsRUFBSyxLQUFLLElBRXhCdTRCLElBQWlCdjRCLEVBQUssTUFBTSxLQUFNNXlCLElBRTFCQSxHQUFFNHlCLEVBQUssb0JBQXNCb3dCLEdBQUtwd0IsRUFBSyxvQkFLNUN1NEIsS0FHUCxPQUFBdjRCLEVBQUssVUFDTHM0QixFQUFnQkUsR0FBbUJGLENBQWEsR0FHaER0NEIsRUFBSyxjQUNMczRCLEVBQWdCRyxHQUFpQkgsRUFBZXQ0QixFQUFLLFVBQVUsR0FHNURzNEIsV0FHRkcsR0FBaUI3QyxFQUFROEMsRUFBVyxDQUNyQyxHQUFBQSxFQUFZLFNBQVcsU0FBVTlDLFFBQy9CK0MsR0FBZWhDLEVBQVcrQixDQUFXLFNBQ3ZDOUMsRUFBTyxJQUFNOEMsSUFBZ0I5QyxFQUFPLEdBQUcxRSxHQUNoQzBFLEdBQ1grQyxHQUFhLFVBQVksR0FDZCxDQUFBLEdBQUEvQyxFQUFRK0MsRUFBWSxHQWN4QixHQUFBLENBQUEsY0FBQUMsR0FBZ0IsSUFBSSxFQUFBL2dELEVBUTNCeTdDLEdBQ0F1RixHQUNBQyxHQUNBQyxHQUNBQyxHQUNBcEksR0FFRSxNQUFBcUksR0FBVyxtQkFDYm5PLEVBQUEsRUFBQW1NLEdBQVksRUFBSSxFQUNaLElBQUE5OEMsUUFBWW04QyxFQUFZakcsQ0FBVSxFQUFFLE1BQU9odkMsR0FBRyxDQUM5QyxRQUFRLEtBQUssdUNBQXdDQSxDQUFHLEVBQ3hEa2pDLEVBQVMsUUFBVyxDQUFBLEtBQU0sY0FBZSxRQUFTbGpDLENBQUcsQ0FBQSxJQUdyRGxILEdBQUcsQ0FBS0EsRUFBSSxZQUNSQSxHQUNJQSxHQUFPQSxFQUFJLE9BQVMsR0FBQyxPQUFXQSxFQUFJLElBQU8sV0FDM0NBLEVBQU0sNEJBQTRCQSxDQUFHLEdBRXpDMndDLEVBQUEsR0FBQStMLE1BQW9CMThDLENBQUcsQ0FBQSxFQUN2Qm9xQyxFQUFTLFNBQVksQ0FBQSxNQUFPc1MsQ0FBYSxDQUFBLFFBRXpDQSxFQUFhLENBQUEsQ0FBQSxFQUdiaEIsR0FDQS9LLEVBQUEsR0FBQStMLEVBQWdCNEIsR0FBaUI1QixFQUFleEcsQ0FBVSxDQUFBLEVBRzlEdkYsRUFBQSxFQUFBbU0sR0FBWSxFQUFLLEVBQ2pCbk0sRUFBQSxFQUFBZ0wsRUFBWSxFQUFJLEVBQ2hCaEwsRUFBQSxFQUFBb00sRUFBVyxFQUFJLElBRXBCQyxhQUlNK0IsSUFBUSxDQUNGLE9BQUExckQsR0FBVSxTQUNqQnM5QyxFQUFBLEVBQUF0OUMsSUFDS2tqRCxHQUFtQmxqRCxFQUNwQixNQUFPQSxDQUFLLENBQUEsRUFFVGdrRCxHQUFXLE1BQU0sUUFBUWhrRCxDQUFLLEdBQUtBLEVBQU0sT0FBUyxPQUN6REEsRUFBUUEsRUFBTSxJQUFLNGlELEdBQUksT0FDWkEsR0FBUyxTQUFhLENBQUEsTUFBT0EsRUFBTSxNQUFPQSxDQUFJLEVBQUtBLENBQUEsQ0FBQSxNQUtsRStJLFlBQ0tDLElBQXFCLE1BQzFCRCxHQUFtQixPQUFPLFFBRWxCLGVBQWdCLE9BQ2hCLGFBQWMsTUFDZCxZQUFhLE1BQ2IsV0FBWSxHQUNaLFNBQVUsRUFDVixLQUFNLE9BQ04sb0JBQXFCLFFBRXpCL0IsSUFHQW5lLFFBQ0FrZ0IsR0FBaUIsR0FBS2xnQixFQUFFa2dCLEVBQUEsRUFHdkJyQyxRQUNEcUMsR0FBaUIsU0FBVyxHQUFJQSxFQUFBLEVBYy9CLFNBQUFYLEdBQW1CNUMsRUFBTSxPQUN4QnlELEVBQVcsQ0FBQSxFQUNYakQsR0FBTSxDQUFBLEVBRVpSLEVBQU8sUUFBU3hGLElBQUksT0FDVnNHLEdBQWFSLEVBQVE5RixFQUFJLEVBRTFCaUosRUFBWSxTQUFTM0MsRUFBVSxJQUNoQzJDLEVBQVksS0FBSzNDLEVBQVUsRUFDM0JOLEdBQU9NLElBQVUsR0FFYkEsSUFDQU4sR0FBT00sSUFBWSxLQUNmLE9BQU8sT0FBT0QsRUFBc0JDLEdBQVl0RyxFQUFJLEVBQUEsQ0FDaEQsR0FBSXNHLEdBQ0osY0FBZSxHQUNmLGFBQWNMLE1BTTlCRCxHQUFPTSxJQUFZLEtBQ2YsT0FBTyxPQUFTLENBQUEsWUFBZSxDQUFBLENBQUFBLElBQWN0RyxFQUFJLENBQUEsVUFJbkRrSixHQUFrQixDQUFBLEVBRXhCLE9BQUFuRCxFQUFZa0QsQ0FBVyxFQUFFLFFBQVMzQyxJQUFVLENBQ3hDNEMsR0FBbUIsS0FBUSxHQUFBbEQsR0FBT00sR0FBVSxJQUd6QzRDLFlBR0ZDLElBQW9CLElBQ3JCL0gsRUFBTyxDQUNILEtBQUssVUFBVWhrRCxDQUFLLElBQU0sS0FBSyxVQUFVcXJELEVBQVUsR0FDL0NXLEdBQXVCLEdBQ3ZCalYsRUFBUyxTQUFVLzJDLENBQUssVUFPL0IsQ0FBQXFyRCxJQUNELEtBQUssVUFBVXJyRCxFQUFNa2pELEVBQWdCLElBQ2pDLEtBQUssVUFBVW1JLEdBQVduSSxFQUFnQixJQUU5Q25NLEVBQVMsU0FBVS8yQyxDQUFLLFdBSXZCaXNELElBQVUsQ0FDWDNELEdBQWFvQixFQUNid0MsS0FFSTNvRCxHQUFPQSxFQUFNLGdCQUloQjRvRCxJQUFVLENBQ1huc0QsSUFDSSxNQUFNLFFBQVFBLENBQUssRUFDbkJzOUMsRUFBQSxFQUFBdDlDLE1BQVlBLENBQUssQ0FBQSxFQUVqQnM5QyxFQUFBLEVBQUF0OUMsR0FBU0EsQ0FBSyxDQUFBLFlBS2pCb3NELElBQVcsQ0FDWnBzRCxHQUFLczlDLEVBQUEsRUFBRXQ5QyxFQUFRLElBQUksV0FpRGxCcXNELElBQWUsQ0FDaEJ4SixFQUFXLFNBQVcsSUFFMUJ2RixFQUFBLEVBQUFnTCxFQUFZLEVBQUksRUFDaEJoTCxFQUFBLEVBQUFvTSxFQUFXLEVBQUksRUFFWFosRUFDQTJDLE1BRUFuTyxFQUFBLEVBQUFvTSxFQUFXLEVBQUksRUFFWDFGLEdBQ0ExRyxFQUFBLEdBQUF3SSxHQUFjLE1BQVMsSUFnQm5DLGFBQVksU0FBQSxDQUNSeEksRUFBQSxHQUFBK04sR0FBYXJyRCxDQUFLLEVBQ2xCczlDLEVBQUEsR0FBQWdPLEdBQWtCekksQ0FBVSxFQUM1QnZGLEVBQUEsR0FBQWlPLEdBQWlCakQsQ0FBUyxFQUMxQmhMLEVBQUEsR0FBQWtPLEdBQWV4SCxDQUFPLGFBR2pCZ0ksSUFBdUIsQ0FDeEIsSUFBQU0sRUFBZSxNQUNmdHNELEVBQUssT0FDQ3VzRCxFQUFHLENBQUEsRUFDSEMsR0FBWSxDQUFBLEVBRWxCeHNELEVBQU0sUUFBUzZ5QixJQUFHLENBQ1QwNUIsRUFBSSxTQUFTMTVCLEdBQUlxd0IsRUFBZ0IsRUFJbENvSixFQUFlLElBSGZDLEVBQUksS0FBSzE1QixHQUFJcXdCLEVBQWdCLEVBQzdCc0osR0FBYSxLQUFLMzVCLEVBQUcsS0FNeEJ5NUIsR0FBWWhQLEVBQUEsRUFBRXQ5QyxFQUFRd3NELEVBQVksU0FFcENGLEVBR0YsU0FBQUcsR0FBU0MsRUFBUyxDQUNuQixJQUFBQyxFQUFVRCxFQUNSQSxFQUFVeEosR0FDVmxqRCxFQUFNa2pELFVBQ0xHLEVBQU0sS0FBTVQsSUFBU0EsR0FBS00sS0FBc0J5SixDQUFPLEVBR3pELFNBQUFDLEdBQW1CdkosRUFBSyxDQUV4QixDQUFBQSxHQUNEQSxFQUFNLFNBQVcsR0FDakJBLEVBQU0sS0FBTVQsR0FBZ0IsT0FBQUEsR0FBUyxRQUFRLEdBSTVDLENBQUE1aUQsSUFDQWdrRCxFQUNLaGtELEVBQU0sS0FDRDBzRCxJQUFlQSxHQUFTLENBQUtBLEVBQVV4SixFQUFnQixFQUUzRCxDQUFBbGpELEVBQU1rakQsTUFJYixNQUFNLFFBQVFsakQsQ0FBSyxNQUNuQkEsRUFBUUEsRUFBTSxJQUFLMHNELEdBQWNELEdBQVNDLENBQVMsR0FBS0EsQ0FBUyxDQUFBLE1BRWpFMXNELEVBQVF5c0QsR0FBUSxHQUFNenNELENBQUssR0FJMUIsU0FBQTZzRCxHQUFxQi9wRCxFQUFLLENBQ3ZCLEtBQUEsQ0FBQSxPQUFBZ0IsR0FBV2hCLEVBQ2JncUQsR0FBZTlzRCxFQUFNOEQsRUFBU0EsRUFBTyxFQUFJOUQsRUFBTSxPQUFTLEdBRTFEQSxFQUFNLFNBQVcsRUFDakJzOUMsRUFBQSxFQUFBdDlDLEVBQVEsTUFBUyxFQUVqQnM5QyxFQUFBLEVBQUF0OUMsRUFBUUEsRUFBTSxPQUFRNGlELElBQ1hBLEtBQVNrSyxLQUl4Qi9WLEVBQVMsUUFBUytWLEVBQVksRUFHekIsU0FBQTdILEdBQWNoaEQsRUFBQyxNQUNmcWtELEVBRUcsT0FBQXJrRCxFQUFFLFNBQ0QsWUFDREEsRUFBRSxlQUFjLEVBQ2hCcTVDLEVBQUEsRUFBQW9NLEVBQVcsRUFBSSxFQUNmcE0sRUFBQSxHQUFBd0ksR0FBYyxNQUFTLFlBRXRCLFVBQ0Q3aEQsRUFBRSxlQUFjLEVBQ2hCcTVDLEVBQUEsRUFBQW9NLEVBQVcsRUFBSSxFQUNmcE0sRUFBQSxHQUFBd0ksR0FBYyxNQUFTLFlBRXRCLE1BQ0k0RCxHQUFRcE0sRUFBQSxFQUFFZ0wsRUFBWSxFQUFLLFlBRS9CLFlBQ0ksR0FBQSxDQUFBdEUsR0FBV25CLEVBQVcsT0FBUyxFQUFDLE9BQ2pDLEdBQUFtQixHQUFXaGtELEdBQVNBLEVBQU0sT0FBUyxFQUFDLENBTWhDLEdBTEo2c0QsR0FDSS9HLEtBQWdCLE9BQ1ZBLEdBQ0E5bEQsRUFBTSxPQUFTLENBQUEsRUFFckI4bEQsS0FBZ0IsR0FBS0EsS0FBZ0IsT0FBUyxXQUNsREEsR0FDSTlsRCxFQUFNLE9BQVM4bEQsR0FDVEEsR0FBYyxFQUNkLE1BQVMsWUFHdEIsWUFDSSxHQUFBLENBQUE5QixHQUFXbkIsRUFBVyxPQUFTLEVBQUMsT0FDakNpRCxLQUFnQixPQUNoQnhJLEVBQUEsR0FBQXdJLEdBQWM5bEQsRUFBTSxPQUFTLENBQUMsRUFDdkJBLEVBQU0sT0FBUzhsRCxJQUFlQSxLQUFnQixHQUNyRHhJLEVBQUEsR0FBQXdJLElBQWUsQ0FBQyxZQUduQixpQkFFSTlCLEdBQ0RuQixFQUFXLE9BQVMsR0FDcEJpRCxLQUFnQixPQUFBLE9BR2hCQSxLQUFnQjlsRCxFQUFNLE9BQVMsRUFDL0JzOUMsRUFBQSxHQUFBd0ksR0FBYyxNQUFTLEVBQ2hCQSxHQUFjOWxELEVBQU0sT0FBUyxHQUNwQ3M5QyxFQUFBLEdBQUF3SSxJQUFlLENBQUMsa0JBTXZCb0csSUFBVyxDQUNoQjVPLEVBQUEsRUFBQWdMLEVBQVksRUFBSSxFQUNaL2tELEdBQU9BLEVBQU0sUUFHWixTQUFBd3BELEdBQWtCanFELEVBQUssS0FDdkJzL0MsRUFBUyxhQUNSNEssRUFDRmxxRCxFQUFNLE1BQVFBLEVBQU0sS0FBSyxPQUFTLEVBQUlBLEVBQU0sS0FBSyxHQUFLQSxFQUFNLE9BQzVEcy9DLEVBQVUsU0FBUzRLLENBQVcsR0FBSzVLLEVBQVUsU0FBU3QvQyxFQUFNLGFBQWEsSUFHN0V3NkMsRUFBQSxFQUFBZ0wsRUFBWSxFQUFLLEVBQ2pCaEwsRUFBQSxFQUFBb00sRUFBVyxFQUFLLEVBQ2hCcE0sRUFBQSxHQUFBd0ksR0FBYyxNQUFTLEVBQ25CdmlELEdBQU9BLEVBQU0saUJBR1pxaEQsSUFBVyxDQUNabUIsSUFDSnpJLEVBQUEsRUFBQWdMLEVBQVksRUFBSSxFQUNoQmhMLEVBQUEsRUFBQW9NLEdBQVlBLENBQVEsWUFHUnpELElBQVcsQ0FDdkIzSSxFQUFBLEVBQUF0OUMsRUFBUSxNQUFTLEVBQ2pCczlDLEVBQUEsRUFBQW9NLEVBQVcsRUFBSyxFQUNoQjNTLEVBQVMsUUFBUy8yQyxDQUFLLEVBQ3ZCa3NELEtBR0osUUFBTyxJQUFBLENBQ0M1RCxHQUFhL2tELEdBQU9BLEVBQU0sTUFBSyxJQXVCOUIsU0FBQTBwRCxHQUFhbnFELEVBQUssQ0FDZixLQUFBLENBQUEsT0FBQWdCLEdBQVdoQixLQUVmZ0IsRUFBTSxDQUNOdzVDLEVBQUEsRUFBQXVGLEVBQWEsRUFBRSxFQUNULE1BQUFELEdBQU8sT0FBTyxVQUFXOStDLENBQU0sR0FFaEMsQ0FBQTgrQyxHQUFLLGVBQWlCQSxHQUFLLGdCQUN4Qm9CLE1BQ0Foa0QsRUFBUUEsRUFBUUEsRUFBTSxPQUFNLENBQUU0aUQsRUFBSSxDQUFBLEVBQUEsQ0FBTUEsRUFBSSxDQUFBLEVBRTVDdEYsRUFBQSxFQUFBdDlDLEVBQVE0aUQsRUFBSSxTQUtoQixXQUFVLElBQUEsQ0FDTnRGLEVBQUEsRUFBQW9NLEVBQVcsRUFBSyxFQUNoQnBNLEVBQUEsR0FBQXdJLEdBQWMsTUFBUyxNQU05QixTQUFBb0gsR0FBWXBxRCxFQUFLLENBQ2QsS0FBQSxDQUFBLE9BQUFnQixHQUFXaEIsRUFDZmtoRCxHQUNBMUcsRUFBQSxFQUFBdDlDLEVBQVFBLEdBQUssQ0FBQSxDQUFBLEVBQ2JzOUMsRUFBQSxFQUFBdDlDLEVBQVksQ0FBQSxHQUFBQSxFQUFPbXBELEVBQVdybEQsQ0FBTSxDQUFBLENBQUEsT0FFcEM5RCxFQUFRbXBELEVBQVdybEQsQ0FBTSxDQUFBLEVBRzdCaXpDLEVBQVMsY0FBZWp6QyxDQUFNLEVBQzlCdzVDLEVBQUEsRUFBQXVGLEVBQWEsRUFBRSxFQUNmdkYsRUFBQSxFQUFBb00sRUFBVyxFQUFLLEVBQ2hCcE0sRUFBQSxHQUFBd0ksR0FBYyxNQUFTLFdBR2xCakIsSUFBUyxDQUNkdkgsRUFBQSxFQUFBdUYsRUFBYSxFQUFFLEVBQ2Z2RixFQUFBLEVBQUFvTSxFQUFXLEVBQUssRUFHVCxHQUFBLENBQUEsV0FBQXlELEdBQWMxckIsYUFDSkEsbUJBR1YsYUFBQTJyQixHQUFZLENBQUlsUixFQUFPbVIsSUFDZ0IsdUNBQUFuUixnQkFBb0JtUiwyQkFHM0QsWUFBQUMsR0FBVyx1RkFJYkMsSUFBbUIsQ0FDcEIsSUFBQUMsRUFFQSxPQUFBeEosR0FBV2hrRCxFQUFNLE9BQVMsRUFDMUJ3dEQsRUFBV3h0RCxFQUFNLElBQUttTSxHQUFNMDVDLEVBQWtCMTVDLENBQUMsQ0FBRyxFQUFBLEtBQUssSUFBSSxFQUUzRHFoRCxFQUFXM0gsRUFBa0I3bEQsQ0FBSyxFQUcvQm10RCxHQUFXSyxDQUFRLFdBR3JCQyxJQUFpQixLQUNqQm5GLEdBQVMsQ0FBS2UsR0FBaUJBLEVBQWMsU0FBVyxFQUFDLE1BQ25ELE9BRVBxRSxFQUFRckUsRUFBY2pHLElBQ3RCLEdBQUFzRyxHQUFZZ0UsRUFBSyxLQUNieFIsRUFBUTJKLEVBQWtCNkgsQ0FBSyxFQUMvQkwsR0FBUWhFLEVBQWdCQSxFQUFjLE9BQVMsU0FFNUMrRCxHQUFhbFIsRUFBT21SLEVBQUssY0FFekJDLEdBQVcsNERBMk9YL3BELEVBQUs0OUMseUJBRUowQixFQUFVLEtBQUEsb0dBbkNmVCxFQUFTakIsMDhFQS9zQm5CN0QsRUFBQSxHQUFFK0wsRUFBZ0J3QixHQUFZLENBQzNCLFlBQUEvQixFQUNBLFdBQUFqRyxFQUNBLE1BQUFRLEVBQ0EsTUFBQXJqRCxFQUNBLFFBQUFna0QsRUFDQSxpQkFBQWQsRUFDQSxRQUFBd0YsRUFDQSxZQUFBTCx5QkFLSStDLElBQ0EsUUFBUSxLQUNKLDREQUEyRCx3QkF1Q3BFd0IsR0FBbUJ2SixDQUFLLG1CQStIbkJyakQsR0FBTzByRCwyQkFJUDlCLEdBQWUsQ0FBS04sSUFBY3NDLDhDQUlsQzVILEdBQ0FtSSxLQUdBWCxLQUFpQnhILEdBQ2pCb0kseUJBS0FwSSxHQUFXaGtELEdBQVNBLEVBQU0sT0FBUyxHQUNuQ2dzRCxzQkFLQWhzRCxHQUFPK3JELDZDQUlOL3JELEdBQVNna0QsR0FBV3FILElBQ3JCdFUsRUFBUyxTQUFVLzJDLENBQUssd0NBS3hCc29ELElBQWNpRCxJQUNkVSwwQ0FLQXBKLElBQWV5SSxJQUNmZSx1QkFxQlAvTyxFQUFBLEdBQUVxUSxFQUFtQjN0RCxHQUFTNmlELEVBQVcsU0FBVyxDQUFDLDJCQUNyRHZGLEVBQUEsR0FBRXNRLEVBQ0NELEdBQW9CbkUsR0FBVyxDQUFLekQsR0FBVSxDQUFLMEQsRUFBUywwQ0FDN0RuTSxFQUFBLEdBQUF1USxFQUNDckYsR0FBeUJ4RSxFQUNuQnVFLEVBQ0F2b0QsRUFDQSxHQUNBdW9ELENBQVcscUJBQ3BCakwsRUFBQSxHQUFFd1EsRUFBa0I5SixHQUFXaGtELEdBQVNBLEVBQU0sT0FBUyxDQUFDLHVFQXNLdEQrdEQsRUFBUyxNQUNSeEssR0FDQSxXQUFBVixFQUNBLGlCQUFBSyxFQUNBLGlCQUFBYSxHQUNBLGVBQUFELEdBQ0EsY0FBQUwsZUFDQUgsR0FDQSxNQUFBdGpELEVBQ0EsUUFBQWdrRCxFQUNBLG9CQUFBSixFQUNBLE1BQU95RixFQUNQLFdBQUF4RixHQUNBLGVBQUFsQixFQUNBLGNBQUF1QixFQUNBLE9BQVE5QixFQUNSLGNBQUErQixHQUNBLFdBQUFDLHdCQXNGSDlHLEVBQUEsR0FBRTBRLEVBQWdCaHVELEVBQVF1dEQsR0FBMkIsRUFBSSxFQUFFLGdEQUMzRGpRLEVBQUEsR0FBRTJRLEVBQWNSLEdBSWIsQ0FBQSx5K0NDdmhCTzFzRCxFQUFXLGNBQ1pBLEVBQVUsZUFDVEEsRUFBVyxpQkFDVEEsRUFBYSxnQkFDZCw4Q0FFUEEsRUFBSyxrQkFFSUEsRUFBWSxxQkFDVEEsRUFBWSxXQUZuQkEsRUFBSyxLQUFBLGlCQUFMQSxFQUFLLGlOQUdBQSxFQUFhLEVBQUEsa0NBWlBBLEVBQWdCLEdBQUEsZ0JBQUEsVUFBekMsT0FjS3NCLEVBQUFtNUIsRUFBQS80QixDQUFBLHFHQUZjMUIsRUFBYSxFQUFBLGlDQVZqQkEsRUFBVyx1QkFDWkEsRUFBVSx3QkFDVEEsRUFBVywyQkFDVEEsRUFBYSxtQkFHckJBLEVBQUssMkJBQ0FBLEVBQUssNEVBVE1BLEVBQWdCLEdBQUEsaU5Bbkg3QixHQUFBLENBQUEsR0FBQTBxQyxFQUFLLEVBQUUsRUFBQXBoQyxFQUNQLENBQUEsWUFBQWsrQyxFQUFjLEVBQUUsRUFBQWwrQyxFQUNoQixDQUFBLFdBQUErNUMsRUFBYSxDQUFDLEVBQUEvNUMsRUFDZCxDQUFBLFlBQUFtL0MsRUFBYyxFQUFLLEVBQUFuL0MsRUFDbkIsQ0FBQSxjQUFBMi9DLEVBQWdCLEVBQUksRUFBQTMvQyxHQUNwQixNQUFBZzVDLENBQWdCLEVBQUFoNUMsRUFDaEIsQ0FBQSxNQUFBckssUUFBdUIsRUFBQXFLLEVBRXZCLENBQUEsT0FBQTZqRCxFQUE4QyxJQUFJLEVBQUE3akQsRUFDdkQsTUFBQThqRCxFQUFTRCxFQUVKLEdBQUEsQ0FBQSxhQUFBRSxFQUFlLEVBQUUsRUFBQS9qRCxFQUNqQixDQUFBLGVBQUFna0QsRUFBaUIsRUFBRSxFQUFBaGtELEVBRW5CLENBQUEsaUJBQUE0L0MsRUFBbUIsRUFBRSxFQUFBNS9DLEVBRXZCLFNBQUFpa0QsRUFBYUMsRUFBb0IsQ0FDdEMsT0FBQUEsRUFBTyxRQUNGLEdBQUcsT0FDVCxDQUFBLE1BQU8sb0JBQW9CLEVBQUEsQ0FFM0JKLEdBQVFBLEVBQU9JLEVBQU8sT0FBUSxNQUFRLEdBQ3RDLEdBQUcsT0FBTSxDQUNSLE1BQU8sUUFBUUgsR0FBWSxDQUUzQkcsRUFBTyxPQUFPLENBQUEsRUFFZixHQUFHLE9BQ0YsQ0FBQSxNQUFPLGFBQWFGLENBRXBCLEVBQUEsQ0FBQUUsRUFBTyxXQUFhLEVBQUUsQ0FBQSxJQUVyQixVQUdHQSxFQUFPLFVBR1hDLEVBQ0FDLEVBQWdCLFFBQ3BCLFFBQU8sSUFBQSxDQUNOLG9CQUVRLE1BQUFDLEVBQVdGLEVBQWUsc0JBQXFCLEVBQUcsT0FDeERsUixFQUFBLEVBQUFtUixFQUFnQixLQUFLLElBQUksT0FBTyxZQUFjQyxFQUFXLEdBQUksR0FBRyxFQUFFLElBQUksV0FFckUscUJBOEVTMXVELEVBQUsydUQsa0VBVG9DSCxFQUFjck4sdXVCQ2xJckQsU0FBQSxtQkFBbUJ5TixFQUF5QkMsRUFBUyxHQUErRSxDQUM1SSxPQUFBLElBQUksUUFBU2pqRCxHQUFlLENBRWxDLElBQUlrakQsRUFBZ0IsR0FHcEIsTUFBTWhQLEVBQWdCOE8sRUFBUyxVQUFXcGpELEdBQVksQ0FFckQsR0FBRyxDQUFDc2pELEVBQWUsQ0FDRkEsRUFBQSxHQUNoQixNQUNELEVBR0csQ0FBQ0QsR0FBWXJqRCxLQUVEczBDLElBR2RsMEMsRUFBV0osQ0FBTyxFQUNuQixDQUNBLENBQUEsQ0FDRCxDQUNGLENBMkRzQixlQUFBLFVBR3BCdWpELEVBQW1DQyxFQUF3RSxDQUNyRyxPQUFBLElBQ04sTUFBTSxRQUFRLElBQ2IsSUFBSUQsQ0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDNXJCLEVBQUc4VCxDQUFVLElBQU0sSUFBSSxRQUM1Q3JyQyxHQUF3RCxDQUNsRCxNQUFBcWpELEVBQVcsR0FBRyxNQUFNLEVBQ3BCQyxFQUFTLElBQUksV0FBVyxDQUM3QixPQUFRRCxFQUNSLE1BQU8sQ0FDTixHQUFHRCxFQUNILFNBQVUvWCxFQUNWLFFBQVMsQ0FDUixNQUFNZ0IsRUFBU2dYLEVBQVMsWUFBWSxVQUFVLEVBQUksRUFDbERDLEVBQU8sU0FBUyxFQUNoQnRqRCxFQUFXLENBQUNxckMsRUFBVyxJQUFjZ0IsQ0FBTSxDQUFDLENBQzdDLENBQ0QsQ0FBQSxDQUNBLENBQ0YsQ0FBQSxDQUNBLENBQ0YsQ0FBQSxDQUNGLENDakhBLE1BQU0sV0FBYSxJQUFJLEtBQUssYUFBYSxRQUFTLENBQ2pELE1BQU8sV0FDUCxTQUFVLE1BQ1YsZ0JBQWlCLFFBQ2xCLENBQUMsRUFFSyxlQUFpQixJQUFJLEtBQUssYUFBYSxRQUFTLENBQ3JELE1BQU8sV0FDUCxTQUFVLE1BQ1YsZ0JBQWlCLFNBQ2pCLHNCQUF1QixFQUN2QixzQkFBdUIsQ0FDeEIsQ0FBQyxFQUVLLGNBQWdCLENBQ3JCLENBQ0MsTUFBTyxLQUNQLE9BQVEsT0FDUixPQUFRLFFBQ1IsRUFBRyxHQUNKLEVBQ0EsQ0FDQyxNQUFPLEtBQ1AsT0FBUSxPQUNSLE9BQVEsUUFDUixFQUFHLEdBQ0osRUFDQSxDQUNDLE1BQU8sS0FDUCxPQUFRLFFBQ1IsT0FBUSxNQUNSLEVBQUcsR0FDSixFQUNBLENBQ0MsTUFBTyxLQUNQLE9BQVEsT0FDUixPQUFRLE9BQ1IsRUFBRyxHQUNKLEVBQ0EsQ0FDQyxNQUFPLEtBQ1AsT0FBUSxPQUNSLE9BQVEsUUFDUixFQUFHLEdBQ0osRUFDQSxDQUNDLE1BQU8sSUFDUCxPQUFRLE1BQ1IsT0FBUSxPQUNSLEVBQUcsR0FDSixFQUNBLENBQ0MsTUFBTyxJQUNQLE9BQVEsTUFDUixPQUFRLE9BQ1IsRUFBRyxHQUNKLENBQ0QsRUFFTSxjQUFnQixDQUNyQixDQUNDLE1BQU8sTUFDUCxPQUFRLFFBQ1IsT0FBUSxRQUNSLEVBQUcsR0FDSixFQUNBLENBQ0MsTUFBTyxNQUNQLE9BQVEsUUFDUixPQUFRLFFBQ1IsRUFBRyxHQUNKLEVBQ0EsQ0FDQyxNQUFPLE1BQ1AsT0FBUSxTQUNSLE9BQVEsT0FDUixFQUFHLEdBQ0osRUFDQSxDQUNDLE1BQU8sTUFDUCxPQUFRLFNBQ1IsT0FBUSxRQUNSLEVBQUcsR0FDSixFQUNBLENBQ0MsTUFBTyxNQUNQLE9BQVEsU0FDUixPQUFRLE9BQ1IsRUFBRyxHQUNKLEVBQ0EsQ0FDQyxNQUFPLEtBQ1AsT0FBUSxRQUNSLE9BQVEsT0FDUixFQUFHLEdBQ0osRUFDQSxDQUNDLE1BQU8sS0FDUCxPQUFRLFFBQ1IsT0FBUSxRQUNSLEVBQUcsUUFDSixFQUNBLENBQ0MsTUFBTyxLQUNQLE9BQVEsUUFDUixPQUFRLFFBQ1IsRUFBRyxHQUNKLENBQ0QsRUFFTSxrQkFBb0IsSUFBSSxLQUFLLGFBQWEsUUFBUyxDQUN4RCxTQUFVLFdBQ1YseUJBQTBCLENBQzNCLENBQUMsRUFFSyxrQkFBb0IsSUFBSSxLQUFLLGFBQWEsUUFBUyxDQUN4RCxTQUFVLFdBQ1Ysc0JBQXVCLENBQ3hCLENBQUMsRUFFSyxvQkFBc0IsSUFBSSxLQUFLLGFBQWEsUUFBUyxDQUMxRCxTQUFVLFdBQ1YseUJBQTBCLENBQzNCLENBQUMsRUFFSyxtQkFBcUIsSUFBSSxLQUFLLGFBQWEsUUFBUyxDQUN6RCxTQUFVLFdBQ1YseUJBQTBCLENBQzNCLENBQUMsRUFFZSxTQUFBLGNBQWNrWCxFQUFrQkMsRUFBVSxHQUFlLENBSXhFLEdBQVNELElBQU4sRUFBdUIsTUFBQSxJQUcxQixHQUFHQSxHQUFZLEtBQ2QsVUFBVUUsS0FBVyxjQUNqQixHQUFBRixHQUFZRSxFQUFRLE1BQ3RCLE9BQVFGLEVBQVdFLEVBQVEsT0FBTyxZQUFZLENBQUMsRUFBRSxJQUFJQSxFQUFRLGVBS3hERixFQUFXLEVBQUcsQ0FDckIsVUFBVUUsS0FBVyxjQUNqQixHQUFBRixHQUFZRSxFQUFRLE1BQ3RCLE9BQVFGLEVBQVdFLEVBQVEsT0FBTyxZQUFZLENBQUMsRUFBRSxJQUFJQSxFQUFRLE9BS3hELE9BQUEsa0JBQWtCLE9BQU9GLENBQVEsQ0FDekMsQ0FHQSxPQUFHQSxHQUFZLElBRVhDLEVBQ0ssbUJBQW1CLE9BQU9ELEVBQVcsR0FBRyxFQUFFLEtBRzNDLG9CQUFvQixPQUFPQSxDQUFRLEVBSXBDLGtCQUFrQixPQUFPQSxDQUFRLENBQ3pDLENBRU8sU0FBUyxZQUFZQSxFQUFrQkcsRUFBdUIsTUFBT0MsRUFBWSxHQUFPQyxFQUFXLEVBQVcsQ0FDOUcsTUFBQUMsRUFBY04sRUFBVyxFQUFHLGVBQWUsT0FBT0EsQ0FBUSxFQUFHLFdBQVcsT0FBT0EsQ0FBUSxFQUU3RixPQUFPSSxFQUFhRSxFQUFZLFFBQVEsT0FBUSxFQUFFLEVBQUdBLENBQ3RELENBU08sU0FBUyxnQkFBZ0JDLEVBQWlCLENBQ3pDLE9BQUFBLEVBQVEsUUFBUSxxQkFBc0IsV0FBVyxDQUN6RCxDQzNHQSxNQUFNLGNBQWdCLENBQUNDLEVBQW1CQyxJQUE2QixpREFDckUsSUFBSSxnQkFBZ0IsSUFBSSxDQUN4QixJQUFLRCxFQUFRLEtBQUssR0FBRyxFQUNyQixjQUFlQyxFQUNmLHdCQUF5QixNQUMxQixDQUFDLENBQUMsRUFXVSxVQUFZLENBQ3hCLE1BQU0sWUFBWUQsRUFBbUJDLEVBQXlCLE1BQU9DLEVBQVcsRUFBRSxXQUFtQyxDQUVwSCxNQUFNQyxFQUFTSCxFQUFRLElBQUlJLEdBQU0sUUFBUSxRQUFRLE1BQU8sY0FBYyxDQUFDQSxDQUFFLEVBQUdILENBQVMsQ0FBQyxDQUFDLEVBR3ZGLE9BQU8sTUFBTSxRQUFRLEtBQUssTUFBTUksR0FBWSxDQUUzQyxNQUFNamxELEVBQXNCLENBQUEsRUFHNUIsR0FBRzhrRCxFQUFhLEVBQUcsQ0FFWixNQUFBSSxFQUFZLEtBQUssSUFBQSxFQUFRSixFQUcvQixJQUFJSyxFQUFnQixHQUdwQixRQUFRQyxFQUFPLEVBQUdBLEVBQU9SLEVBQVEsT0FBUVEsSUFBVSxDQUNsRCxNQUFNQyxFQUFRSixFQUFRLEdBQUdGLEVBQU9LLEVBQU8sRUFHcEMsR0FBQUMsR0FBU0EsRUFBTSxLQUFPSCxFQUFXLENBQ25DLE1BQU14L0IsRUFBVWsvQixFQUFRUSxHQUN4QnBsRCxFQUFNMGxCLEdBQVkyL0IsRUFBTSxTQUFTLE1BQStCMy9CLEdBQVNtL0IsRUFBQSxLQUdyRSxDQUNZTSxFQUFBLEdBQ2hCLEtBQ0QsQ0FDRCxDQUdBLEdBQUdBLEVBQ0ssT0FBQW5sRCxDQUVULENBTU0sTUFBQXNsRCxFQUFhLE1BSEwsTUFBTSxNQUFNLGNBQWNWLEVBQVNDLENBQVMsQ0FBQyxHQUc1QixPQUd6QjkrQixFQUFVay9CLEVBQVEsSUFHbEJNLEVBQVMsS0FBSyxNQUNwQixTQUFVLENBQUM3L0IsRUFBU3dmLENBQU0sSUFBSyxJQUFJb2dCLENBQVUsRUFBRyxDQUMvQyxNQUFNRSxFQUFVei9CLEVBQVFMLEdBQVdLLEVBQVFMLElBQVksR0FDdkQ4L0IsRUFBUSxTQUFXdGdCLEVBQ25Cc2dCLEVBQVEsS0FBT0QsRUFDZnZsRCxFQUFNMGxCLEdBQVd3ZixFQUFPMmYsRUFDekIsQ0FFTyxPQUFBN2tELENBQUEsQ0FDUCxDQUNGLENBQ0QsRUFFYSxRQUFVLG1CQUFtQixDQUN6QyxNQUFPLGtCQUNQLFVBQVcsTUFDWCxNQUFPLE1BQU15bEQsV0FBaUIsZ0JBQTJDLENBQ3hFLE9BQU8sUUFBUUMsRUFBMENDLEVBQTJCLENBS25GLE1BQU8seUJBSFEsaUJBQWlCdjJDLGNBQVksZUFBZXMyQyxFQUFVLElBQUlDLENBQUssQ0FBQyxDQUFDLEdBSWpGLENBRUEsT0FBTyxTQUFTTixFQUF3QyxDQUN2RCxPQUFPSSxHQUFTLFFBQVFKLEVBQU0sT0FBUUEsRUFBTSxJQUFJLENBQ2pELENBQ0QsQ0FDRCxDQUFDLG1EQ2xLTSxNQUFNLE9BQVMsbUJBQW1CLENBQ3hDLE1BQU8sZ0JBQ1AsVUFBVyxNQUNYLE1BQU8sTUFBTU8sV0FBZ0IsZ0JBQXlDLENBQ3JFLE9BQU8sYUFBYWpCLEVBQWlCbmdDLEVBQXFCLFVBQVUsTUFBa0IsQ0FDckYsTUFBTyxXQUFXQSxXQUFtQm1nQyxFQUFRLFFBQVEsUUFBUyxFQUFFLEdBQ2pFLENBRUEsT0FBTyxlQUFlQSxFQUFpQm5nQyxFQUFxQixVQUFVLE1BQW9CLENBQ3pGLE1BQU8sR0FBR29oQyxHQUFRLGFBQWFqQixFQUFTbmdDLENBQVMsY0FDbEQsQ0FFQSxPQUFPLGdCQUFnQmxGLEVBQThDLENBQ3BFLE9BQU9zbUMsR0FBUSxlQUFldG1DLEVBQVUsUUFBU0EsRUFBVSxNQUFNLENBQ2xFLENBS0EsYUFBYSxXQUFXdW1DLEVBQThELENBSzlFLE9BSFcsTUFBTSxPQUFPLFFBR2QsR0FBR0EsQ0FBUyxDQUM5QixDQUVBLENBQUUsU0FBU3JoQyxFQUFxQixVQUFVLE1BQThELENBRXZHLE1BQU11QixFQUFVLEtBQUssU0FHZisvQixFQUE0QixXQUFXdGhDLFdBRzdDLFVBQVV1aEMsS0FBV2hnQyxFQUVqQixDQUFDZ2dDLEVBQVEsV0FBV0QsQ0FBYyxHQUdsQyxDQUFDQyxFQUFRLFNBQVMsYUFBYSxJQUc1QixLQUFBLENBQUNBLEVBQXdCaGdDLEVBQVFnZ0MsRUFBUSxFQUVqRCxDQUVBLE1BQU0sV0FBV3pnQyxFQUFtRCxDQUU3RCxNQUFBM0IsRUFBUWlpQyxHQUFRLGdCQUFnQnRnQyxDQUFLLEVBRzNDLFlBQUssU0FBUzNCLEdBQVMyQixFQUd2QixNQUFNLEtBQUssT0FHSjNCLENBQ1IsQ0FDRCxDQUNELENBQUMsRUMxRUQsSUFBZSxhQUFBO0FBQUE7QUFBQTtBQUFBLHVIQytJWDN0QixFQUFNLEVBQUEsa0RBRFIsT0FFTXNCLEVBQUF5MEMsRUFBQXIwQyxDQUFBLHNDQURKMUIsRUFBTSxFQUFBLDZFQVdILE9BQVdBLEVBQVksS0FBdkIsT0FBdUI2M0MsMExBVVE3M0MsRUFBYyxFQUFBLGlDQUFsRCxPQUVNc0IsRUFBQXkwQyxFQUFBcjBDLENBQUEsMERBRjhCMUIsRUFBYyxFQUFBLDJMQUxqRCxPQUVNc0IsRUFBQXkwQyxFQUFBcjBDLENBQUEsc0pBTk4sT0FFTUosRUFBQXkwQyxFQUFBcjBDLENBQUEsY0FERSxtR0FmTDFCLEVBQU0sSUFBQXMrQyxvQkFBQXQrQyxDQUFBLElBWU5BLEVBQVUsSUFBQTh6QyxrQkFBQTl6QyxDQUFBLDJFQU5iQSxFQUFPLEVBQUEscUNBR1BBLEVBQU8sRUFBQSxnSUFEK0JBLEVBQWdCLEVBQUEscUVBVG5CQSxFQUFVLEVBQUEsVUFBaEQsT0E0Qk1zQixFQUFBKzJDLEVBQUEzMkMsQ0FBQSw2QkF0QkwsT0FFTTIyQyxFQUFBSixDQUFBLG1DQUNOLE9BRU1JLEVBQUFDLENBQUEsZ0VBWHFEdDRDLEVBQVUsZUFBc0Isa0JBQ3RGQSxFQUFNLDJGQU1UQSxFQUFPLEVBQUEsa0JBR1BBLEVBQU8sRUFBQSx1Q0FEK0JBLEVBQWdCLEVBQUEsRUFJbkRBLEVBQVUsSUFBQWk2QyxFQUFBLEVBQUFqNkMsRUFBQUcsQ0FBQSwyR0FoSkosR0FBQSxDQUFBLE9BQUE4SyxFQUFTLEVBQUUsRUFBQTNCLEdBS1gsUUFBQTh2QyxDQUFlLEVBQUE5dkMsRUFLZixDQUFBLFNBQUEwbUQsRUFBNkIsRUFBSyxFQUFBMW1ELEVBQ3ZDLE1BQUEybUQsSUFBZUQsRUFDZkUsRUFBd0JGLElBQVQsR0FBbUIsT0FBUUEsR0FBWSxPQUd4REcsRUFFQUMsRUFBaUIsa0JBQ05DLEdBQUksS0FHWCxNQUFBLFVBQVUsVUFBVSxVQUFValgsQ0FBTyxRQUd0Q2tYLEdBQ0wsT0FBTSxDQUNMLEtBQU0sNkNBQ04sTUFBT0EsV0FNVC9ULEVBQUEsRUFBQTZULEVBQWlCLEVBQUksRUFDckIsZ0JBQ0M3VCxFQUFBLEVBQUE2VCxFQUFpQixFQUFLLEdBTXBCLFNBSUFHLEVBR0FDLEVBQW1CLEdBRXZCLFFBQU8sSUFBQSxDQUNOalUsRUFBQSxFQUFBaVUsRUFBbUJELEVBQVEsWUFBY0EsRUFBUSxXQUFXLDZEQXNGL0JBLEVBQU9uUSxvRUFrQjJCK1AsRUFBUy9QLHVCQXhCSWlRLHVnQkN4SHZFLE1BQU0sT0FBUyxtQkFBbUIsQ0FDeEMsTUFBTyxnQkFDUCxVQUFXLFFBQ1gsTUFBTyxjQUFzQixrQkFBMkMsQ0FDdkUsYUFBYSxPQUFPSSxFQUFtRSxDQUcvRSxPQUZXLE1BQU0sT0FBTyxRQUVkLE9BQU9BLENBQVMsQ0FDbEMsQ0FFQSxhQUFhLE9BQU85aUIsRUFBb0MsQ0FDdkQsT0FBTyxNQUFNLE9BQU8sUUFBVzNlLEVBQUcsT0FBTzJlLENBQU8sQ0FBQyxDQUNsRCxDQUVBLENBQUUsT0FBTzhpQixFQUE2QixHQUFnQyxDQUMzRCxVQUFBOWlCLEtBQVcsS0FBSyxTQUN0QjhpQixFQUFVLE1BQVFBLEVBQVUsT0FBUzlpQixFQUFRLE1BQzdDOGlCLEVBQVUsU0FBV0EsRUFBVSxVQUFZOWlCLEVBQVEsS0FBSyxTQUN4RDhpQixFQUFVLE9BQVNBLEVBQVUsUUFBVTlpQixFQUFRLEtBQUssUUFFakQsTUFBQUEsRUFFUixDQUVBLE1BQU0sT0FBTytpQixFQUFxQyxDQUNqRCxNQUFNdmhCLEVBQVcsS0FBSyxTQUVoQndoQixFQUFZRCxFQUFTLEtBRXJCRSxFQUFZLEtBQUssVUFBVUYsQ0FBUSxFQUUvQkcsRUFBQSxDQUNULFFBQVFDLEVBQVEsRUFBR0MsRUFBVTVoQixFQUFTLE9BQVEyaEIsRUFBUUMsRUFBV0QsSUFBVyxDQUMzRSxNQUFNRSxFQUFTN2hCLEVBQVMyaEIsR0FFckIsR0FBQUgsSUFBY0ssRUFBTyxNQUVwQkosSUFBYyxLQUFLLFVBQVVJLENBQU0sRUFBRyxDQUMvQjdoQixFQUFBLE9BQU8yaEIsRUFBUyxDQUFDLEVBQ3BCLE1BQUFELENBQ1AsQ0FFRixDQUdBLE9BQU8xaEIsRUFBUyxNQUNqQixDQUVBLGFBQU0sS0FBSyxPQUVKQSxFQUFTLE1BQ2pCLENBRUEsTUFBTSxPQUFPeEIsRUFBb0MsQ0FDaEQsTUFBTXNqQixFQUFXdGpCLEVBQVEsS0FFbkJ3QixFQUFXLEtBQUssU0FFaEIraEIsRUFBVyxLQUFLLFVBQVV2akIsQ0FBTyxFQUU1QndqQixFQUFBLENBQ1YsUUFBUUwsRUFBUSxFQUFHQyxFQUFVNWhCLEVBQVMsT0FBUTJoQixFQUFRQyxFQUFXRCxJQUFXLENBQzNFLE1BQU1FLEVBQVM3aEIsRUFBUzJoQixHQUVyQixHQUFBRyxFQUFXRCxFQUFPLEtBQU0sQ0FDakI3aEIsRUFBQSxPQUFPMmhCLEVBQVMsRUFBR25qQixDQUFPLEVBQzdCLE1BQUF3akIsQ0FBQSxTQUdDRixJQUFhRCxFQUFPLE1BRXhCRSxJQUFhLEtBQUssVUFBVUYsQ0FBTSxFQUNwQyxPQUFPN2hCLEVBQVMsTUFHbkIsQ0FHQUEsRUFBUyxLQUFLeEIsQ0FBTyxDQUN0QixDQUdBLGFBQU0sS0FBSyxPQUdKd0IsRUFBUyxNQUNqQixDQUNELENBQ0QsQ0FBQyxrREN6Rk0sTUFBTSxTQUFXLG1CQUFtQixDQUMxQyxNQUFPLGtCQUNQLFVBQVcsT0FDWCxNQUFPLGNBQXdCLGlCQUE0QyxDQVczRSxDQUNELENBQUMsNkVDTEQsU0FBU2lpQixFQUFXdHZELEVBQU0sQ0FDeEIsS0FBSyxLQUFPdXZELEVBQU8sZUFDbkIsS0FBSyxLQUFPdnZELEVBQ1osS0FBSyxXQUFhLEdBR2xCLFFBQVN2QixFQUFJLEVBQUdtd0IsRUFBSSxLQUFLLEtBQUssT0FBUW53QixFQUFJbXdCLEVBQUdud0IsSUFBSyxDQUNoRCxJQUFJK3dELEVBQVksQ0FBQSxFQUNacDVDLEVBQU8sS0FBSyxLQUFLLFdBQVczWCxDQUFDLEVBRTdCMlgsRUFBTyxPQUNUbzVDLEVBQVUsR0FBSyxLQUFTcDVDLEVBQU8sV0FBYyxHQUM3Q281QyxFQUFVLEdBQUssS0FBU3A1QyxFQUFPLFVBQWEsR0FDNUNvNUMsRUFBVSxHQUFLLEtBQVNwNUMsRUFBTyxRQUFXLEVBQzFDbzVDLEVBQVUsR0FBSyxJQUFRcDVDLEVBQU8sSUFDckJBLEVBQU8sTUFDaEJvNUMsRUFBVSxHQUFLLEtBQVNwNUMsRUFBTyxTQUFZLEdBQzNDbzVDLEVBQVUsR0FBSyxLQUFTcDVDLEVBQU8sUUFBVyxFQUMxQ281QyxFQUFVLEdBQUssSUFBUXA1QyxFQUFPLElBQ3JCQSxFQUFPLEtBQ2hCbzVDLEVBQVUsR0FBSyxLQUFTcDVDLEVBQU8sUUFBVyxFQUMxQ281QyxFQUFVLEdBQUssSUFBUXA1QyxFQUFPLElBRTlCbzVDLEVBQVUsR0FBS3A1QyxFQUdqQixLQUFLLFdBQVcsS0FBS281QyxDQUFTLENBQy9CLENBRUQsS0FBSyxXQUFhLE1BQU0sVUFBVSxPQUFPLE1BQU0sQ0FBRSxFQUFFLEtBQUssVUFBVSxFQUU5RCxLQUFLLFdBQVcsUUFBVSxLQUFLLEtBQUssU0FDdEMsS0FBSyxXQUFXLFFBQVEsR0FBRyxFQUMzQixLQUFLLFdBQVcsUUFBUSxHQUFHLEVBQzNCLEtBQUssV0FBVyxRQUFRLEdBQUcsRUFFL0IsQ0FFQUYsRUFBVyxVQUFZLENBQ3JCLFVBQVcsU0FBVXpqRCxFQUFRLENBQzNCLE9BQU8sS0FBSyxXQUFXLE1BQ3hCLEVBQ0QsTUFBTyxTQUFVQSxFQUFRLENBQ3ZCLFFBQVNwTixFQUFJLEVBQUdtd0IsRUFBSSxLQUFLLFdBQVcsT0FBUW53QixFQUFJbXdCLEVBQUdud0IsSUFDakRvTixFQUFPLElBQUksS0FBSyxXQUFXcE4sR0FBSSxDQUFDLENBRW5DLENBQ0gsRUFFQSxTQUFTZ3hELEVBQVlDLEVBQVlDLEVBQW1CLENBQ2xELEtBQUssV0FBYUQsRUFDbEIsS0FBSyxrQkFBb0JDLEVBQ3pCLEtBQUssUUFBVSxLQUNmLEtBQUssWUFBYyxFQUNuQixLQUFLLFVBQVksS0FDakIsS0FBSyxTQUFXLEVBQ2xCLENBRUFGLEVBQVksVUFBVSxDQUFDLFFBQVEsU0FBU3p2RCxFQUFLLENBQUMsSUFBSTR2RCxFQUFRLElBQUlOLEVBQVd0dkQsQ0FBSSxFQUFFLEtBQUssU0FBUyxLQUFLNHZELENBQU8sRUFBRSxLQUFLLFVBQVUsSUFBSyxFQUFFLE9BQU8sU0FBU3ZMLEVBQUl3TCxFQUFJLENBQUMsR0FBR3hMLEVBQUksR0FBRyxLQUFLLGFBQWFBLEdBQUt3TCxFQUFJLEdBQUcsS0FBSyxhQUFhQSxFQUFLLE1BQU0sSUFBSSxNQUFNeEwsRUFBSSxJQUFJd0wsQ0FBRyxFQUNwUCxPQUFPLEtBQUssUUFBUXhMLEdBQUt3TCxFQUFLLEVBQUUsZUFBZSxVQUFVLENBQUMsT0FBTyxLQUFLLFdBQVksRUFBRSxLQUFLLFVBQVUsQ0FBQyxLQUFLLFNBQVMsR0FBTSxLQUFLLG1CQUFvQixDQUFBLENBQUUsRUFBRSxTQUFTLFNBQVNDLEVBQUtDLEVBQVksQ0FBQyxLQUFLLFlBQVksS0FBSyxXQUFXLEVBQUUsR0FBRyxLQUFLLFFBQVEsSUFBSSxNQUFNLEtBQUssV0FBVyxFQUFFLFFBQVExTCxFQUFJLEVBQUVBLEVBQUksS0FBSyxZQUFZQSxJQUFNLENBQUMsS0FBSyxRQUFRQSxHQUFLLElBQUksTUFBTSxLQUFLLFdBQVcsRUFBRSxRQUFRd0wsRUFBSSxFQUFFQSxFQUFJLEtBQUssWUFBWUEsSUFBTyxLQUFLLFFBQVF4TCxHQUFLd0wsR0FBSyxJQUFNLENBQ3ZhLEtBQUssMEJBQTBCLEVBQUUsQ0FBQyxFQUFFLEtBQUssMEJBQTBCLEtBQUssWUFBWSxFQUFFLENBQUMsRUFBRSxLQUFLLDBCQUEwQixFQUFFLEtBQUssWUFBWSxDQUFDLEVBQUUsS0FBSywyQkFBMEIsRUFBRyxLQUFLLG1CQUFrQixFQUFHLEtBQUssY0FBY0MsRUFBS0MsQ0FBVyxFQUFLLEtBQUssWUFBWSxHQUFHLEtBQUssZ0JBQWdCRCxDQUFJLEVBQzVSLEtBQUssV0FBVyxPQUFNLEtBQUssVUFBVUwsRUFBWSxXQUFXLEtBQUssV0FBVyxLQUFLLGtCQUFrQixLQUFLLFFBQVEsR0FDbkgsS0FBSyxRQUFRLEtBQUssVUFBVU0sQ0FBVyxDQUFFLEVBQUUsMEJBQTBCLFNBQVMxTCxFQUFJd0wsRUFBSSxDQUFDLFFBQVFuaEMsRUFBRSxHQUFHQSxHQUFHLEVBQUVBLElBQUssR0FBRyxFQUFBMjFCLEVBQUkzMUIsR0FBRyxJQUFJLEtBQUssYUFBYTIxQixFQUFJMzFCLEdBQVcsUUFBUXJsQixFQUFFLEdBQUdBLEdBQUcsRUFBRUEsSUFBUXdtRCxFQUFJeG1ELEdBQUcsSUFBSSxLQUFLLGFBQWF3bUQsRUFBSXhtRCxJQUFlLEdBQUdxbEIsR0FBR0EsR0FBRyxJQUFJcmxCLEdBQUcsR0FBR0EsR0FBRyxJQUFNLEdBQUdBLEdBQUdBLEdBQUcsSUFBSXFsQixHQUFHLEdBQUdBLEdBQUcsSUFBTSxHQUFHQSxHQUFHQSxHQUFHLEdBQUcsR0FBR3JsQixHQUFHQSxHQUFHLEVBQUksS0FBSyxRQUFRZzdDLEVBQUkzMUIsR0FBR21oQyxFQUFJeG1ELEdBQUcsR0FBVyxLQUFLLFFBQVFnN0MsRUFBSTMxQixHQUFHbWhDLEVBQUl4bUQsR0FBRyxHQUFTLEVBQUUsbUJBQW1CLFVBQVUsQ0FBa0MsUUFBN0IybUQsRUFBYSxFQUFNQyxFQUFRLEVBQVV4eEQsRUFBRSxFQUFFQSxFQUFFLEVBQUVBLElBQUksQ0FBQyxLQUFLLFNBQVMsR0FBS0EsQ0FBQyxFQUFFLElBQUl5eEQsRUFBVUMsRUFBTyxhQUFhLElBQUksR0FBSzF4RCxHQUFHLEdBQUd1eEQsRUFBYUUsS0FBV0YsRUFBYUUsRUFBVUQsRUFBUXh4RCxFQUFHLENBQ3psQixPQUFPd3hELENBQVEsRUFBRSxnQkFBZ0IsU0FBU0csRUFBVUMsRUFBY0MsRUFBTSxDQUFDLElBQUlDLEVBQU1ILEVBQVUscUJBQXFCQyxFQUFjQyxDQUFLLEVBQU1FLEVBQUcsRUFBRSxLQUFLLE9BQU8sUUFBUW5NLEVBQUksRUFBRUEsRUFBSSxLQUFLLFFBQVEsT0FBT0EsSUFBb0IsUUFBVG50QyxFQUFFbXRDLEVBQUltTSxFQUFXWCxFQUFJLEVBQUVBLEVBQUksS0FBSyxRQUFReEwsR0FBSyxPQUFPd0wsSUFBTSxDQUFDLElBQUk5eUQsRUFBRTh5RCxFQUFJVyxFQUFPQyxFQUFLLEtBQUssUUFBUXBNLEdBQUt3TCxHQUFRWSxJQUFNRixFQUFNLFVBQVUsRUFBRSxHQUFHLEVBQUVBLEVBQU0sT0FBT3h6RCxFQUFFbWEsQ0FBQyxFQUFFcTVDLEVBQU0sT0FBT3h6RCxFQUFFeXpELEVBQUd0NUMsQ0FBQyxFQUFFcTVDLEVBQU0sT0FBT3h6RCxFQUFFeXpELEVBQUd0NUMsRUFBRXM1QyxDQUFFLEVBQUVELEVBQU0sT0FBT3h6RCxFQUFFbWEsRUFBRXM1QyxDQUFFLEVBQUVELEVBQU0sVUFBVyxDQUMxYixPQUFPQSxDQUFNLEVBQUUsbUJBQW1CLFVBQVUsQ0FBQyxRQUFRN2hDLEVBQUUsRUFBRUEsRUFBRSxLQUFLLFlBQVksRUFBRUEsSUFBUSxLQUFLLFFBQVFBLEdBQUcsSUFBSSxPQUMxRyxLQUFLLFFBQVFBLEdBQUcsR0FBSUEsRUFBRSxHQUFHLEdBQ3pCLFFBQVFybEIsRUFBRSxFQUFFQSxFQUFFLEtBQUssWUFBWSxFQUFFQSxJQUFRLEtBQUssUUFBUSxHQUFHQSxJQUFJLE9BQzdELEtBQUssUUFBUSxHQUFHQSxHQUFJQSxFQUFFLEdBQUcsRUFBSSxFQUFFLDJCQUEyQixVQUFVLENBQW9ELFFBQS9DNm1CLEVBQUlpZ0MsRUFBTyxtQkFBbUIsS0FBSyxVQUFVLEVBQVUxeEQsRUFBRSxFQUFFQSxFQUFFeXhCLEVBQUksT0FBT3p4QixJQUFLLFFBQVFvYixFQUFFLEVBQUVBLEVBQUVxVyxFQUFJLE9BQU9yVyxJQUFJLENBQUMsSUFBSXdxQyxFQUFJbjBCLEVBQUl6eEIsR0FBT294RCxFQUFJMy9CLEVBQUlyVyxHQUFHLEdBQUcsS0FBSyxRQUFRd3FDLEdBQUt3TCxJQUFNLEtBQzdPLFFBQVFuaEMsRUFBRSxHQUFHQSxHQUFHLEVBQUVBLElBQUssUUFBUXJsQixFQUFFLEdBQUdBLEdBQUcsRUFBRUEsSUFBUXFsQixHQUFHLElBQUlBLEdBQUcsR0FBR3JsQixHQUFHLElBQUlBLEdBQUcsR0FBSXFsQixHQUFHLEdBQUdybEIsR0FBRyxFQUFJLEtBQUssUUFBUWc3QyxFQUFJMzFCLEdBQUdtaEMsRUFBSXhtRCxHQUFHLEdBQVcsS0FBSyxRQUFRZzdDLEVBQUkzMUIsR0FBR21oQyxFQUFJeG1ELEdBQUcsRUFBUyxDQUFFLEVBQUUsZ0JBQWdCLFNBQVN5bUQsRUFBSyxDQUFtRCxRQUE5Q3BtRCxFQUFLeW1ELEVBQU8saUJBQWlCLEtBQUssVUFBVSxFQUFVMXhELEVBQUUsRUFBRUEsRUFBRSxHQUFHQSxJQUFJLENBQUMsSUFBSWl5RCxFQUFLLENBQUNaLElBQVFwbUQsR0FBTWpMLEVBQUcsSUFBSSxFQUFHLEtBQUssUUFBUSxLQUFLLE1BQU1BLEVBQUUsQ0FBQyxHQUFHQSxFQUFFLEVBQUUsS0FBSyxZQUFZLEVBQUUsR0FBR2l5RCxDQUFJLENBQzVXLFFBQVFqeUQsRUFBRSxFQUFFQSxFQUFFLEdBQUdBLElBQUksQ0FBQyxJQUFJaXlELEVBQUssQ0FBQ1osSUFBUXBtRCxHQUFNakwsRUFBRyxJQUFJLEVBQUcsS0FBSyxRQUFRQSxFQUFFLEVBQUUsS0FBSyxZQUFZLEVBQUUsR0FBRyxLQUFLLE1BQU1BLEVBQUUsQ0FBQyxHQUFHaXlELENBQUksQ0FBQyxFQUFFLGNBQWMsU0FBU1osRUFBS0MsRUFBWSxDQUF1RixRQUFsRi92RCxFQUFNLEtBQUssbUJBQW1CLEVBQUcrdkQsRUFBZ0JybUQsRUFBS3ltRCxFQUFPLGVBQWVud0QsQ0FBSSxFQUFVdkIsRUFBRSxFQUFFQSxFQUFFLEdBQUdBLElBQUksQ0FBQyxJQUFJaXlELEVBQUssQ0FBQ1osSUFBUXBtRCxHQUFNakwsRUFBRyxJQUFJLEVBQU1BLEVBQUUsRUFBRyxLQUFLLFFBQVFBLEdBQUcsR0FBR2l5RCxFQUFhanlELEVBQUUsRUFBRyxLQUFLLFFBQVFBLEVBQUUsR0FBRyxHQUFHaXlELEVBQVUsS0FBSyxRQUFRLEtBQUssWUFBWSxHQUFHanlELEdBQUcsR0FBR2l5RCxDQUFLLENBQ3RhLFFBQVFqeUQsRUFBRSxFQUFFQSxFQUFFLEdBQUdBLElBQUksQ0FBQyxJQUFJaXlELEVBQUssQ0FBQ1osSUFBUXBtRCxHQUFNakwsRUFBRyxJQUFJLEVBQU1BLEVBQUUsRUFBRyxLQUFLLFFBQVEsR0FBRyxLQUFLLFlBQVlBLEVBQUUsR0FBR2l5RCxFQUFhanlELEVBQUUsRUFBRyxLQUFLLFFBQVEsR0FBRyxHQUFHQSxFQUFFLEVBQUUsR0FBR2l5RCxFQUFVLEtBQUssUUFBUSxHQUFHLEdBQUdqeUQsRUFBRSxHQUFHaXlELENBQUssQ0FDekwsS0FBSyxRQUFRLEtBQUssWUFBWSxHQUFHLEdBQUksQ0FBQ1osQ0FBTSxFQUFFLFFBQVEsU0FBUzl2RCxFQUFLK3ZELEVBQVksQ0FBc0UsUUFBakVZLEVBQUksR0FBT3RNLEVBQUksS0FBSyxZQUFZLEVBQU11TSxFQUFTLEVBQU1DLEVBQVUsRUFBVWhCLEVBQUksS0FBSyxZQUFZLEVBQUVBLEVBQUksRUFBRUEsR0FBSyxFQUFtQixJQUFiQSxHQUFLLEdBQUVBLE1BQWlCLENBQUMsUUFBUXhtRCxFQUFFLEVBQUVBLEVBQUUsRUFBRUEsSUFBSyxHQUFHLEtBQUssUUFBUWc3QyxHQUFLd0wsRUFBSXhtRCxJQUFJLEtBQUssQ0FBQyxJQUFJb25ELEVBQUssR0FBU0ksRUFBVTd3RCxFQUFLLFNBQVF5d0QsR0FBUXp3RCxFQUFLNndELEtBQWFELEVBQVUsSUFBSSxHQUN4VyxJQUFJaitCLEVBQUt3OUIsRUFBTyxRQUFRSixFQUFZMUwsRUFBSXdMLEVBQUl4bUQsQ0FBQyxFQUFLc3BCLElBQU04OUIsRUFBSyxDQUFDQSxHQUM5RCxLQUFLLFFBQVFwTSxHQUFLd0wsRUFBSXhtRCxHQUFHb25ELEVBQUtHLElBQWNBLEdBQVUsS0FBSUMsSUFBWUQsRUFBUyxFQUFHLENBQ3pFLEdBQVR2TSxHQUFLc00sRUFBT3RNLEVBQUksR0FBRyxLQUFLLGFBQWFBLEVBQUksQ0FBQ0EsR0FBS3NNLEVBQUlBLEVBQUksQ0FBQ0EsRUFBSSxLQUFNLENBQUMsQ0FBRSxDQUFDLEVBQUVsQixFQUFZLEtBQUssSUFBS0EsRUFBWSxLQUFLLEdBQUtBLEVBQVksV0FBVyxTQUFTQyxFQUFXQyxFQUFrQm1CLEVBQVMsQ0FBK0YsUUFBMUZDLEVBQVNDLEVBQVUsWUFBWXRCLEVBQVdDLENBQWlCLEVBQU05akQsRUFBTyxJQUFJb2xELEVBQXNCeHlELEVBQUUsRUFBRUEsRUFBRXF5RCxFQUFTLE9BQU9yeUQsSUFBSSxDQUFDLElBQUl1QixFQUFLOHdELEVBQVNyeUQsR0FBR29OLEVBQU8sSUFBSTdMLEVBQUssS0FBSyxDQUFDLEVBQUU2TCxFQUFPLElBQUk3TCxFQUFLLFVBQVcsRUFBQ213RCxFQUFPLGdCQUFnQm53RCxFQUFLLEtBQUswdkQsQ0FBVSxDQUFDLEVBQUUxdkQsRUFBSyxNQUFNNkwsQ0FBTSxDQUFFLENBQ2piLFFBQWpCcWxELEVBQWUsRUFBVXp5RCxFQUFFLEVBQUVBLEVBQUVzeUQsRUFBUyxPQUFPdHlELElBQUt5eUQsR0FBZ0JILEVBQVN0eUQsR0FBRyxVQUNwRixHQUFHb04sRUFBTyxnQkFBZSxFQUFHcWxELEVBQWUsRUFBRyxNQUFNLElBQUksTUFBTSwwQkFDN0RybEQsRUFBTyxnQkFBaUIsRUFDeEIsSUFDQXFsRCxFQUFlLEVBQ2YsR0FBRyxFQUVKLElBREdybEQsRUFBTyxnQkFBZSxFQUFHLEdBQUdxbEQsRUFBZSxHQUFHcmxELEVBQU8sSUFBSSxFQUFFLENBQUMsRUFDekRBLEVBQU8sZ0JBQWlCLEVBQUMsR0FBRyxHQUFHQSxFQUFPLE9BQU8sRUFBSyxFQUN4RCxLQUFlLEVBQUFBLEVBQU8sZ0JBQWlCLEdBQUVxbEQsRUFBZSxJQUN4RHJsRCxFQUFPLElBQUk0akQsRUFBWSxLQUFLLENBQUMsRUFBSzVqRCxFQUFPLG1CQUFtQnFsRCxFQUFlLEtBQzNFcmxELEVBQU8sSUFBSTRqRCxFQUFZLEtBQUssQ0FBQyxFQUM3QixPQUFPQSxFQUFZLFlBQVk1akQsRUFBT2tsRCxDQUFRLENBQUUsRUFBRXRCLEVBQVksWUFBWSxTQUFTNWpELEVBQU9rbEQsRUFBUyxDQUE0SCxRQUF2SGg3QyxFQUFPLEVBQU1vN0MsRUFBVyxFQUFNQyxFQUFXLEVBQU1DLEVBQU8sSUFBSSxNQUFNTixFQUFTLE1BQU0sRUFBTU8sRUFBTyxJQUFJLE1BQU1QLEVBQVMsTUFBTSxFQUFVcmlDLEVBQUUsRUFBRUEsRUFBRXFpQyxFQUFTLE9BQU9yaUMsSUFBSSxDQUFDLElBQUk2aUMsRUFBUVIsRUFBU3JpQyxHQUFHLFVBQWM4aUMsRUFBUVQsRUFBU3JpQyxHQUFHLFdBQVc2aUMsRUFBUUosRUFBVyxLQUFLLElBQUlBLEVBQVdJLENBQU8sRUFBRUgsRUFBVyxLQUFLLElBQUlBLEVBQVdJLENBQU8sRUFBRUgsRUFBTzNpQyxHQUFHLElBQUksTUFBTTZpQyxDQUFPLEVBQUUsUUFBUTl5RCxFQUFFLEVBQUVBLEVBQUU0eUQsRUFBTzNpQyxHQUFHLE9BQU9qd0IsSUFBSzR5RCxFQUFPM2lDLEdBQUdqd0IsR0FBRyxJQUFLb04sRUFBTyxPQUFPcE4sRUFBRXNYLEdBQ2xnQkEsR0FBUXc3QyxFQUFRLElBQUlFLEVBQU90QixFQUFPLDBCQUEwQnFCLENBQU8sRUFBTUUsRUFBUSxJQUFJQyxFQUFhTixFQUFPM2lDLEdBQUcraUMsRUFBTyxVQUFTLEVBQUcsQ0FBQyxFQUFNRyxFQUFRRixFQUFRLElBQUlELENBQU0sRUFBRUgsRUFBTzVpQyxHQUFHLElBQUksTUFBTStpQyxFQUFPLFVBQVMsRUFBRyxDQUFDLEVBQUUsUUFBUWh6RCxFQUFFLEVBQUVBLEVBQUU2eUQsRUFBTzVpQyxHQUFHLE9BQU9qd0IsSUFBSSxDQUFDLElBQUlvekQsRUFBU3B6RCxFQUFFbXpELEVBQVEsVUFBUyxFQUFHTixFQUFPNWlDLEdBQUcsT0FBTzRpQyxFQUFPNWlDLEdBQUdqd0IsR0FBSW96RCxHQUFVLEVBQUdELEVBQVEsSUFBSUMsQ0FBUSxFQUFFLENBQUUsQ0FBQyxDQUNuVSxRQUFqQkMsRUFBZSxFQUFVcnpELEVBQUUsRUFBRUEsRUFBRXN5RCxFQUFTLE9BQU90eUQsSUFBS3F6RCxHQUFnQmYsRUFBU3R5RCxHQUFHLFdBQ3JDLFFBQTNDdUIsRUFBSyxJQUFJLE1BQU04eEQsQ0FBYyxFQUFNcnRELEVBQU0sRUFBVWhHLEVBQUUsRUFBRUEsRUFBRTB5RCxFQUFXMXlELElBQUssUUFBUWl3QixFQUFFLEVBQUVBLEVBQUVxaUMsRUFBUyxPQUFPcmlDLElBQVFqd0IsRUFBRTR5RCxFQUFPM2lDLEdBQUcsU0FBUTF1QixFQUFLeUUsS0FBUzRzRCxFQUFPM2lDLEdBQUdqd0IsSUFDL0osUUFBUUEsRUFBRSxFQUFFQSxFQUFFMnlELEVBQVczeUQsSUFBSyxRQUFRaXdCLEVBQUUsRUFBRUEsRUFBRXFpQyxFQUFTLE9BQU9yaUMsSUFBUWp3QixFQUFFNnlELEVBQU81aUMsR0FBRyxTQUFRMXVCLEVBQUt5RSxLQUFTNnNELEVBQU81aUMsR0FBR2p3QixJQUNoSCxPQUFPdUIsQ0FBSyxFQWdCb0UsUUFoQjlEdXZELEVBQU8sQ0FBQyxZQUFZLEdBQUcsRUFBRSxlQUFlLEdBQUcsRUFBRSxlQUFlLEdBQUcsRUFBRSxXQUFXLEdBQUcsQ0FBQyxFQUFNd0MsRUFBb0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBTUMsRUFBYyxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsRUFBTTdCLEVBQU8sQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxH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QUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVB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SUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxDQUFDLEVBSTl3QixTQUFTQyxFQUFPN3lELEVBQVMsQ0FzQnZCLEdBbEJBLEtBQUssUUFBVSxDQUNiLFFBQVMsRUFDVCxNQUFPLElBQ1AsT0FBUSxJQUNSLFdBQVksRUFDWixNQUFPLFVBQ1AsV0FBWSxVQUNaLElBQUssR0FDVCxFQUdNLE9BQU9BLEdBQVksV0FDckJBLEVBQVUsQ0FD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LEVBQUksTUFBUVAsSUFBT08sR0FBUSxHQUFLQSxHQUFRLElBQU0sQ0FBQ1AsRUFBSyxNQUFRLE9BQzVHLENBQ0gsRUFDQSxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsSUFBTSxFQUFFLEdBQ1YsRUFBRSxHQUFLLEVBQUUsSUFDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsSUFBTSxFQUFFLEdBQ1YsRUFBRSxHQUFLLEVBQUUsSUFDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsSUFDVCxFQUFFLEdBQUssRUFBRSxJQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxJQUNULEVBQUUsSUFBTSxFQUFFLElBQ1YsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLElBQU0sRUFBRSxHQUNWLEVBQUUsR0FBSyxFQUFFLElBQ1QsRUFBRSxHQUFLLEVBQUUsSUFDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsSUFBTSxFQUFFLElBQ1YsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLElBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxJQUFNLEVBQUUsR0FDVixFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxJQUFNLEVBQUUsR0FDVixFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxJQUFNLEVBQUUsR0FDVixFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsSUFDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLElBQU0sRUFBRSxHQUNWLEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLElBQU0sRUFBRSxHQUNWLEVBQUUsR0FBSyxFQUFFLElBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsSUFDVCxFQUFFLEdBQUssRUFBRSxJQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUFFLElBQ1QsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsSUFBTSxFQUFFLEdBQ1YsRUFBRSxHQUFLLEVBQUUsR0FDVCxFQUFFLEdBQUssRUFBRSxJQUNULEVBQUUsR0FBSyxFQUFFLEdBQ1QsRUFBRSxJQUFN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
