var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
import { b as base64ToBin, c as create_store_class, S as SI_STORE_SECRETS, W as WritableStoreDict, z as zero_out, a as SensitiveBytes, h as hex_to_buffer, s as sha256, d as SvelteComponent, i as init, e as safe_not_equal, f as create_component, m as mount_component, t as transition_in, g as transition_out, j as destroy_component, k as component_subscribe, C as CheckboxField, l as binding_callbacks, n as bind, A as ActionsLine, o as space, p as element, q as insert, r as add_flush_callback, u as detach, y as yw_account_ref, v as buffer_to_string8, w as buffer_to_base64, x as set_store_value, B as Accounts, D as text, E as attr, F as noop, V as Vault, G as global_receive, H as initialize_caches, I as yw_navigator, J as ode, K as register, L as login, X as XT_SECONDS, M as qs } from "../../mem.6e57882d.js";
import { S as Screen, H as Header, A as AccountEdit, T as ThreadId, d as dm_log, a as System, b as domlog, B as Blank, P as PreRegister, c as Authenticate } from "../../PreRegister.fecb5bd8.js";
const SECP256K1_FLAGS_TYPE_CONTEXT = 1 << 0;
const SECP256K1_FLAGS_TYPE_COMPRESSION = 1 << 1;
const SECP256K1_FLAGS_BIT_CONTEXT_VERIFY = 1 << 8;
const SECP256K1_FLAGS_BIT_CONTEXT_SIGN = 1 << 9;
const SECP256K1_FLAGS_BIT_COMPRESSION = 1 << 8;
const SECP256K1_CONTEXT_VERIFY = SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_VERIFY;
const SECP256K1_CONTEXT_SIGN = SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_SIGN;
const SECP256K1_CONTEXT_NONE = SECP256K1_FLAGS_TYPE_CONTEXT;
const SECP256K1_EC_COMPRESSED = SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION;
const SECP256K1_EC_UNCOMPRESSED = SECP256K1_FLAGS_TYPE_COMPRESSION;
var ContextFlag;
(function(ContextFlag2) {
  ContextFlag2[ContextFlag2["NONE"] = SECP256K1_CONTEXT_NONE] = "NONE";
  ContextFlag2[ContextFlag2["VERIFY"] = SECP256K1_CONTEXT_VERIFY] = "VERIFY";
  ContextFlag2[ContextFlag2["SIGN"] = SECP256K1_CONTEXT_SIGN] = "SIGN";
  ContextFlag2[ContextFlag2["BOTH"] = SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY] = "BOTH";
})(ContextFlag || (ContextFlag = {}));
var CompressionFlag;
(function(CompressionFlag2) {
  CompressionFlag2[CompressionFlag2["COMPRESSED"] = SECP256K1_EC_COMPRESSED] = "COMPRESSED";
  CompressionFlag2[CompressionFlag2["UNCOMPRESSED"] = SECP256K1_EC_UNCOMPRESSED] = "UNCOMPRESSED";
})(CompressionFlag || (CompressionFlag = {}));
const secp256k1Base64Bytes = "";
const wrapSecp256k1Wasm$1 = (instance2, heapU8, heapU32) => ({
  contextCreate: (context) => instance2.exports._secp256k1_context_create(context),
  contextRandomize: (contextPtr, seedPtr) => instance2.exports._secp256k1_context_randomize(contextPtr, seedPtr),
  ecdh: (contextPtr, outputSharedSecretPtr, publicKeyPtr, secretKeyPtr) => instance2.exports._secp256k1_ecdh(contextPtr, outputSharedSecretPtr, publicKeyPtr, secretKeyPtr),
  free: (pointer) => instance2.exports._free(pointer),
  heapU32,
  heapU8,
  instance: instance2,
  malloc: (bytes) => instance2.exports._malloc(bytes),
  mallocSizeT: (num) => {
    const pointer = instance2.exports._malloc(4);
    const pointerView32 = pointer >> 2;
    heapU32.set([num], pointerView32);
    return pointer;
  },
  mallocUint8Array: (array) => {
    const pointer = instance2.exports._malloc(array.length);
    heapU8.set(array, pointer);
    return pointer;
  },
  privkeyTweakAdd: (contextPtr, secretKeyPtr, tweakNum256Ptr) => instance2.exports._secp256k1_ec_privkey_tweak_add(contextPtr, secretKeyPtr, tweakNum256Ptr),
  privkeyTweakMul: (contextPtr, secretKeyPtr, tweakNum256Ptr) => instance2.exports._secp256k1_ec_privkey_tweak_mul(contextPtr, secretKeyPtr, tweakNum256Ptr),
  pubkeyCreate: (contextPtr, publicKeyPtr, secretKeyPtr) => instance2.exports._secp256k1_ec_pubkey_create(contextPtr, publicKeyPtr, secretKeyPtr),
  pubkeyParse: (contextPtr, publicKeyOutPtr, publicKeyInPtr, publicKeyInLength) => instance2.exports._secp256k1_ec_pubkey_parse(contextPtr, publicKeyOutPtr, publicKeyInPtr, publicKeyInLength),
  pubkeySerialize: (contextPtr, outputPtr, outputLengthPtr, publicKeyPtr, compression) => instance2.exports._secp256k1_ec_pubkey_serialize(contextPtr, outputPtr, outputLengthPtr, publicKeyPtr, compression),
  pubkeyTweakAdd: (contextPtr, publicKeyPtr, tweakNum256Ptr) => instance2.exports._secp256k1_ec_pubkey_tweak_add(contextPtr, publicKeyPtr, tweakNum256Ptr),
  pubkeyTweakMul: (contextPtr, publicKeyPtr, tweakNum256Ptr) => instance2.exports._secp256k1_ec_pubkey_tweak_mul(contextPtr, publicKeyPtr, tweakNum256Ptr),
  readHeapU8: (pointer, bytes) => new Uint8Array(heapU8.buffer, pointer, bytes),
  readSizeT: (pointer) => {
    const pointerView32 = pointer >> 2;
    return heapU32[pointerView32];
  },
  recover: (contextPtr, outputPubkeyPointer, rSigPtr, msg32Ptr) => instance2.exports._secp256k1_ecdsa_recover(contextPtr, outputPubkeyPointer, rSigPtr, msg32Ptr),
  recoverableSignatureParse: (contextPtr, outputRSigPtr, inputSigPtr, rid) => instance2.exports._secp256k1_ecdsa_recoverable_signature_parse_compact(contextPtr, outputRSigPtr, inputSigPtr, rid),
  recoverableSignatureSerialize: (contextPtr, sigOutPtr, recIDOutPtr, rSigPtr) => instance2.exports._secp256k1_ecdsa_recoverable_signature_serialize_compact(contextPtr, sigOutPtr, recIDOutPtr, rSigPtr),
  schnorrSign: (contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr) => instance2.exports._secp256k1_schnorrsig_sign(contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr),
  schnorrVerify: (contextPtr, sigPtr, msg32Ptr, publicKeyPtr) => instance2.exports._secp256k1_schnorrsig_verify(contextPtr, sigPtr, msg32Ptr, publicKeyPtr),
  seckeyVerify: (contextPtr, secretKeyPtr) => instance2.exports._secp256k1_ec_seckey_verify(contextPtr, secretKeyPtr),
  sign: (contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr) => instance2.exports._secp256k1_ecdsa_sign(contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr),
  signRecoverable: (contextPtr, outputRSigPtr, msg32Ptr, secretKeyPtr) => instance2.exports._secp256k1_ecdsa_sign_recoverable(contextPtr, outputRSigPtr, msg32Ptr, secretKeyPtr),
  signatureNormalize: (contextPtr, outputSigPtr, inputSigPtr) => instance2.exports._secp256k1_ecdsa_signature_normalize(contextPtr, outputSigPtr, inputSigPtr),
  signatureParseCompact: (contextPtr, sigOutPtr, compactSigInPtr) => instance2.exports._secp256k1_ecdsa_signature_parse_compact(contextPtr, sigOutPtr, compactSigInPtr),
  signatureParseDER: (contextPtr, sigOutPtr, sigDERInPtr, sigDERInLength) => instance2.exports._secp256k1_ecdsa_signature_parse_der(contextPtr, sigOutPtr, sigDERInPtr, sigDERInLength),
  signatureSerializeCompact: (contextPtr, outputCompactSigPtr, inputSigPtr) => instance2.exports._secp256k1_ecdsa_signature_serialize_compact(contextPtr, outputCompactSigPtr, inputSigPtr),
  signatureSerializeDER: (contextPtr, outputDERSigPtr, outputDERSigLengthPtr, inputSigPtr) => instance2.exports._secp256k1_ecdsa_signature_serialize_der(contextPtr, outputDERSigPtr, outputDERSigLengthPtr, inputSigPtr),
  verify: (contextPtr, sigPtr, msg32Ptr, pubkeyPtr) => instance2.exports._secp256k1_ecdsa_verify(contextPtr, sigPtr, msg32Ptr, pubkeyPtr)
});
const isLittleEndian = (buffer) => {
  const littleEndian = true;
  const notLittleEndian = false;
  const heap16 = new Int16Array(buffer);
  const heap32 = new Int32Array(buffer);
  const heapU8 = new Uint8Array(buffer);
  heap32[0] = 1668509029;
  heap16[1] = 25459;
  return heapU8[2] !== 115 || heapU8[3] !== 99 ? notLittleEndian : littleEndian;
};
const alignMemory = (factor, size) => Math.ceil(size / factor) * factor;
const instantiateSecp256k1WasmBytes = async (webassemblyBytes) => {
  const STACK_ALIGN = 16;
  const GLOBAL_BASE = 1024;
  const WASM_PAGE_SIZE = 65536;
  const TOTAL_STACK = 5242880;
  const TOTAL_MEMORY = 16777216;
  const wasmMemory = new WebAssembly.Memory({
    initial: TOTAL_MEMORY / WASM_PAGE_SIZE,
    maximum: TOTAL_MEMORY / WASM_PAGE_SIZE
  });
  if (!isLittleEndian(wasmMemory.buffer)) {
    throw new Error("Runtime error: expected the system to be little-endian.");
  }
  const STATIC_BASE = GLOBAL_BASE;
  const STATICTOP_INITIAL = STATIC_BASE + 67696 + 16;
  const DYNAMICTOP_PTR = STATICTOP_INITIAL;
  const DYNAMICTOP_PTR_SIZE = 4;
  const STATICTOP = STATICTOP_INITIAL + DYNAMICTOP_PTR_SIZE + 15 & -16;
  const STACKTOP = alignMemory(STACK_ALIGN, STATICTOP);
  const STACK_BASE = STACKTOP;
  const STACK_MAX = STACK_BASE + TOTAL_STACK;
  const DYNAMIC_BASE = alignMemory(STACK_ALIGN, STACK_MAX);
  const heapU8 = new Uint8Array(wasmMemory.buffer);
  const heap32 = new Int32Array(wasmMemory.buffer);
  const heapU32 = new Uint32Array(wasmMemory.buffer);
  heap32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
  const TABLE_SIZE = 16;
  const MAX_TABLE_SIZE = 16;
  let getErrNoLocation;
  const env = {
    DYNAMICTOP_PTR,
    STACKTOP,
    ___setErrNo: (value) => {
      if (getErrNoLocation !== void 0) {
        heap32[getErrNoLocation() >> 2] = value;
      }
      return value;
    },
    ___syscall140: () => {
      throw new Error("___syscall140");
    },
    ___syscall146: () => {
      throw new Error("___syscall146");
    },
    ___syscall6: () => {
      throw new Error("___syscall6");
    },
    _abort: (err = "Secp256k1 Error") => {
      throw new Error(err);
    },
    _emscripten_memcpy_big: (dest, src, num) => {
      heapU8.set(heapU8.subarray(src, src + num), dest);
      return dest;
    },
    abort: (err = "Secp256k1 Error") => {
      throw new Error(err);
    },
    abortOnCannotGrowMemory: () => {
      throw new Error("Secp256k1 Error: abortOnCannotGrowMemory was called.");
    },
    enlargeMemory: () => {
      throw new Error("Secp256k1 Error: enlargeMemory was called.");
    },
    getTotalMemory: () => TOTAL_MEMORY
  };
  const info = {
    env: {
      ...env,
      memory: wasmMemory,
      memoryBase: STATIC_BASE,
      table: new WebAssembly.Table({
        element: "anyfunc",
        initial: TABLE_SIZE,
        maximum: MAX_TABLE_SIZE
      }),
      tableBase: 0
    },
    global: { Infinity: Infinity, NaN: NaN }
  };
  return WebAssembly.instantiate(webassemblyBytes, info).then((result) => {
    getErrNoLocation = result.instance.exports.___errno_location;
    return wrapSecp256k1Wasm$1(result.instance, heapU8, heapU32);
  });
};
const getEmbeddedSecp256k1Binary = () => base64ToBin(secp256k1Base64Bytes).buffer;
const instantiateSecp256k1Wasm = async () => instantiateSecp256k1WasmBytes(getEmbeddedSecp256k1Binary());
const wrapSecp256k1Wasm = (secp256k1Wasm, randomSeed) => {
  const contextPtr = secp256k1Wasm.contextCreate(ContextFlag.BOTH);
  const sigScratch = secp256k1Wasm.malloc(72);
  const publicKeyScratch = secp256k1Wasm.malloc(65);
  const messageHashScratch = secp256k1Wasm.malloc(32);
  const internalPublicKeyPtr = secp256k1Wasm.malloc(64);
  const ecdhSharedSecretPtr = secp256k1Wasm.malloc(32);
  const internalSigPtr = secp256k1Wasm.malloc(64);
  const schnorrSigPtr = secp256k1Wasm.malloc(64);
  const privateKeyPtr = secp256k1Wasm.malloc(32);
  const internalRSigPtr = secp256k1Wasm.malloc(65);
  const recoveryNumPtr = secp256k1Wasm.malloc(4);
  const recoveryNumPtrView32 = recoveryNumPtr >> 2;
  const getRecoveryNumPtr = () => secp256k1Wasm.heapU32[recoveryNumPtrView32];
  const lengthPtr = secp256k1Wasm.malloc(4);
  const lengthPtrView32 = lengthPtr >> 2;
  const cloneAndPad = (value, expectedLength) => {
    const zeroPaddedValue = new Uint8Array(expectedLength);
    zeroPaddedValue.set(value);
    return zeroPaddedValue;
  };
  const parsePublicKey = (publicKey) => {
    const paddedPublicKey = cloneAndPad(publicKey, 65);
    secp256k1Wasm.heapU8.set(paddedPublicKey, publicKeyScratch);
    return secp256k1Wasm.pubkeyParse(contextPtr, internalPublicKeyPtr, publicKeyScratch, publicKey.length) === 1;
  };
  const setLengthPtr = (value) => {
    secp256k1Wasm.heapU32.set([value], lengthPtrView32);
  };
  const getLengthPtr = () => secp256k1Wasm.heapU32[lengthPtrView32];
  const serializePublicKey = (length, flag) => {
    setLengthPtr(length);
    secp256k1Wasm.pubkeySerialize(contextPtr, publicKeyScratch, lengthPtr, internalPublicKeyPtr, flag);
    return secp256k1Wasm.readHeapU8(publicKeyScratch, getLengthPtr()).slice();
  };
  const getSerializedPublicKey = (compressed) => compressed ? serializePublicKey(33, CompressionFlag.COMPRESSED) : serializePublicKey(65, CompressionFlag.UNCOMPRESSED);
  const convertPublicKey = (compressed) => (publicKey) => {
    if (!parsePublicKey(publicKey)) {
      throw new Error("Failed to parse public key.");
    }
    return getSerializedPublicKey(compressed);
  };
  const parseSignature = (signature, isDer) => {
    const paddedSignature = cloneAndPad(signature, 72);
    secp256k1Wasm.heapU8.set(paddedSignature, sigScratch);
    return isDer ? secp256k1Wasm.signatureParseDER(contextPtr, internalSigPtr, sigScratch, signature.length) === 1 : secp256k1Wasm.signatureParseCompact(contextPtr, internalSigPtr, sigScratch) === 1;
  };
  const parseOrThrow = (signature, isDer) => {
    if (!parseSignature(signature, isDer)) {
      throw new Error("Failed to parse signature.");
    }
  };
  const getCompactSig = () => {
    secp256k1Wasm.signatureSerializeCompact(contextPtr, sigScratch, internalSigPtr);
    return secp256k1Wasm.readHeapU8(sigScratch, 64).slice();
  };
  const getDERSig = () => {
    setLengthPtr(72);
    secp256k1Wasm.signatureSerializeDER(contextPtr, sigScratch, lengthPtr, internalSigPtr);
    return secp256k1Wasm.readHeapU8(sigScratch, getLengthPtr()).slice();
  };
  const convertSignature = (wasDER) => (signature) => {
    parseOrThrow(signature, wasDER);
    return wasDER ? getCompactSig() : getDERSig();
  };
  const fillPrivateKeyPtr = (privateKey) => {
    const paddedPrivateKey = cloneAndPad(privateKey, 32);
    secp256k1Wasm.heapU8.set(paddedPrivateKey, privateKeyPtr);
  };
  const zeroOutPtr = (pointer, bytes) => {
    secp256k1Wasm.heapU8.fill(0, pointer, pointer + bytes);
  };
  const zeroOutPrivateKeyPtr = () => {
    zeroOutPtr(privateKeyPtr, 32);
  };
  const withPrivateKey = (privateKey, instructions) => {
    fillPrivateKeyPtr(privateKey);
    const ret = instructions();
    zeroOutPrivateKeyPtr();
    return ret;
  };
  const derivePublicKey = (compressed) => (privateKey) => {
    const invalid = withPrivateKey(privateKey, () => secp256k1Wasm.pubkeyCreate(contextPtr, internalPublicKeyPtr, privateKeyPtr) !== 1);
    if (invalid) {
      throw new Error("Cannot derive public key from invalid private key.");
    }
    return getSerializedPublicKey(compressed);
  };
  const fillMessageHashScratch = (messageHash) => {
    const paddedMessageHash = cloneAndPad(messageHash, 32);
    secp256k1Wasm.heapU8.set(paddedMessageHash, messageHashScratch);
  };
  const normalizeSignature = () => {
    secp256k1Wasm.signatureNormalize(contextPtr, internalSigPtr, internalSigPtr);
  };
  const modifySignature = (isDer, normalize) => (signature) => {
    parseOrThrow(signature, isDer);
    if (normalize) {
      normalizeSignature();
    }
    return isDer ? getDERSig() : getCompactSig();
  };
  const parseAndNormalizeSignature = (signature, isDer, normalize) => {
    const ret = parseSignature(signature, isDer);
    if (normalize) {
      normalizeSignature();
    }
    return ret;
  };
  const signMessageHash = (isDer) => (privateKey, messageHash) => {
    fillMessageHashScratch(messageHash);
    return withPrivateKey(privateKey, () => {
      const failed = secp256k1Wasm.sign(contextPtr, internalSigPtr, messageHashScratch, privateKeyPtr) !== 1;
      if (failed) {
        throw new Error("Failed to sign message hash. The private key is not valid.");
      }
      if (isDer) {
        setLengthPtr(72);
        secp256k1Wasm.signatureSerializeDER(contextPtr, sigScratch, lengthPtr, internalSigPtr);
        return secp256k1Wasm.readHeapU8(sigScratch, getLengthPtr()).slice();
      }
      secp256k1Wasm.signatureSerializeCompact(contextPtr, sigScratch, internalSigPtr);
      return secp256k1Wasm.readHeapU8(sigScratch, 64).slice();
    });
  };
  const signMessageHashSchnorr = () => (privateKey, messageHash) => {
    fillMessageHashScratch(messageHash);
    return withPrivateKey(privateKey, () => {
      const failed = secp256k1Wasm.schnorrSign(contextPtr, schnorrSigPtr, messageHashScratch, privateKeyPtr) !== 1;
      if (failed) {
        throw new Error("Failed to sign message hash. The private key is not valid.");
      }
      return secp256k1Wasm.readHeapU8(schnorrSigPtr, 64).slice();
    });
  };
  const ecdh = () => (privateKey, publicKey) => {
    if (!parsePublicKey(publicKey)) {
      throw new Error("ECDH Key Exchange failed. Failed to parse public key.");
    }
    return withPrivateKey(privateKey, () => {
      const failed = secp256k1Wasm.ecdh(contextPtr, ecdhSharedSecretPtr, internalPublicKeyPtr, privateKeyPtr) !== 1;
      if (failed) {
        throw new Error("ECDH Key Exchange failed. The private key is not valid.");
      }
      return secp256k1Wasm.readHeapU8(ecdhSharedSecretPtr, 32).slice();
    });
  };
  const verifyMessage = (messageHash) => {
    fillMessageHashScratch(messageHash);
    return secp256k1Wasm.verify(contextPtr, internalSigPtr, messageHashScratch, internalPublicKeyPtr) === 1;
  };
  const verifySignature = (isDer, normalize) => (signature, publicKey, messageHash) => parsePublicKey(publicKey) && parseAndNormalizeSignature(signature, isDer, normalize) && verifyMessage(messageHash);
  const verifyMessageSchnorr = (messageHash, signature) => {
    fillMessageHashScratch(messageHash);
    const paddedSignature = cloneAndPad(signature, 64);
    secp256k1Wasm.heapU8.set(paddedSignature, schnorrSigPtr);
    return secp256k1Wasm.schnorrVerify(contextPtr, schnorrSigPtr, messageHashScratch, internalPublicKeyPtr) === 1;
  };
  const verifySignatureSchnorr = () => (signature, publicKey, messageHash) => parsePublicKey(publicKey) ? verifyMessageSchnorr(messageHash, signature) : false;
  const signMessageHashRecoverable = (privateKey, messageHash) => {
    fillMessageHashScratch(messageHash);
    return withPrivateKey(privateKey, () => {
      if (secp256k1Wasm.signRecoverable(contextPtr, internalRSigPtr, messageHashScratch, privateKeyPtr) !== 1) {
        throw new Error("Failed to sign message hash. The private key is not valid.");
      }
      secp256k1Wasm.recoverableSignatureSerialize(contextPtr, sigScratch, recoveryNumPtr, internalRSigPtr);
      return {
        recoveryId: getRecoveryNumPtr(),
        signature: secp256k1Wasm.readHeapU8(sigScratch, 64).slice()
      };
    });
  };
  const recoverPublicKey = (compressed) => (signature, recoveryId, messageHash) => {
    fillMessageHashScratch(messageHash);
    const paddedSignature = cloneAndPad(signature, 72);
    secp256k1Wasm.heapU8.set(paddedSignature, sigScratch);
    if (secp256k1Wasm.recoverableSignatureParse(contextPtr, internalRSigPtr, sigScratch, recoveryId) !== 1) {
      throw new Error("Failed to recover public key. Could not parse signature.");
    }
    if (secp256k1Wasm.recover(contextPtr, internalPublicKeyPtr, internalRSigPtr, messageHashScratch) !== 1) {
      throw new Error("Failed to recover public key. The compact signature, recovery, or message hash is invalid.");
    }
    return getSerializedPublicKey(compressed);
  };
  const addTweakPrivateKey = (privateKey, tweakValue) => {
    fillMessageHashScratch(tweakValue);
    return withPrivateKey(privateKey, () => {
      if (secp256k1Wasm.privkeyTweakAdd(contextPtr, privateKeyPtr, messageHashScratch) !== 1) {
        throw new Error("Private key is invalid or adding failed.");
      }
      return secp256k1Wasm.readHeapU8(privateKeyPtr, 32).slice();
    });
  };
  const mulTweakPrivateKey = (privateKey, tweakValue) => {
    fillMessageHashScratch(tweakValue);
    return withPrivateKey(privateKey, () => {
      if (secp256k1Wasm.privkeyTweakMul(contextPtr, privateKeyPtr, messageHashScratch) !== 1) {
        throw new Error("Private key is invalid or multiplying failed.");
      }
      return secp256k1Wasm.readHeapU8(privateKeyPtr, 32).slice();
    });
  };
  const addTweakPublicKey = (compressed) => (publicKey, tweakValue) => {
    if (!parsePublicKey(publicKey)) {
      throw new Error("Failed to parse public key.");
    }
    fillMessageHashScratch(tweakValue);
    if (secp256k1Wasm.pubkeyTweakAdd(contextPtr, internalPublicKeyPtr, messageHashScratch) !== 1) {
      throw new Error("Adding failed");
    }
    return getSerializedPublicKey(compressed);
  };
  const mulTweakPublicKey = (compressed) => (publicKey, tweakValue) => {
    if (!parsePublicKey(publicKey)) {
      throw new Error("Failed to parse public key.");
    }
    fillMessageHashScratch(tweakValue);
    if (secp256k1Wasm.pubkeyTweakMul(contextPtr, internalPublicKeyPtr, messageHashScratch) !== 1) {
      throw new Error("Multiplying failed");
    }
    return getSerializedPublicKey(compressed);
  };
  if (randomSeed !== void 0) {
    const randomSeedPtr = messageHashScratch;
    const paddedRandomSeed = cloneAndPad(randomSeed, 32);
    secp256k1Wasm.heapU8.set(paddedRandomSeed, randomSeedPtr);
    secp256k1Wasm.contextRandomize(contextPtr, randomSeedPtr);
    zeroOutPtr(randomSeedPtr, 32);
  }
  return {
    addTweakPrivateKey,
    addTweakPublicKeyCompressed: addTweakPublicKey(true),
    addTweakPublicKeyUncompressed: addTweakPublicKey(false),
    compressPublicKey: convertPublicKey(true),
    derivePublicKeyCompressed: derivePublicKey(true),
    derivePublicKeyUncompressed: derivePublicKey(false),
    ecdh: ecdh(),
    malleateSignatureCompact: modifySignature(false, false),
    malleateSignatureDER: modifySignature(true, false),
    mulTweakPrivateKey,
    mulTweakPublicKeyCompressed: mulTweakPublicKey(true),
    mulTweakPublicKeyUncompressed: mulTweakPublicKey(false),
    normalizeSignatureCompact: modifySignature(false, true),
    normalizeSignatureDER: modifySignature(true, true),
    recoverPublicKeyCompressed: recoverPublicKey(true),
    recoverPublicKeyUncompressed: recoverPublicKey(false),
    signMessageHashCompact: signMessageHash(false),
    signMessageHashDER: signMessageHash(true),
    signMessageHashRecoverableCompact: signMessageHashRecoverable,
    signMessageHashSchnorr: signMessageHashSchnorr(),
    signatureCompactToDER: convertSignature(false),
    signatureDERToCompact: convertSignature(true),
    uncompressPublicKey: convertPublicKey(false),
    validatePrivateKey: (privateKey) => withPrivateKey(privateKey, () => secp256k1Wasm.seckeyVerify(contextPtr, privateKeyPtr) === 1),
    validatePublicKey: parsePublicKey,
    verifySignatureCompact: verifySignature(false, true),
    verifySignatureCompactLowS: verifySignature(false, false),
    verifySignatureDER: verifySignature(true, true),
    verifySignatureDERLowS: verifySignature(true, false),
    verifySignatureSchnorr: verifySignatureSchnorr()
  };
};
const cachedSecp256k1 = {};
const instantiateSecp256k1 = async (randomSeed) => {
  if (cachedSecp256k1.cache !== void 0) {
    return cachedSecp256k1.cache;
  }
  const result = Promise.resolve(wrapSecp256k1Wasm(await instantiateSecp256k1Wasm(), randomSeed));
  cachedSecp256k1.cache = result;
  return result;
};
const Secrets = create_store_class({
  store: SI_STORE_SECRETS,
  extension: "map",
  class: class SecretsI extends WritableStoreDict {
    static pathFrom(g_secret) {
      return `/secret.${g_secret.type}/uuid.${g_secret.uuid}`;
    }
    async put(g_secret) {
      const p_res = SecretsI.pathFrom(g_secret);
      this._w_cache[p_res] = g_secret;
      await this.save();
      return p_res;
    }
  }
});
async function fetch_derived(dk_base, atu8_salt, ni_bits = 256, atu8_info = new Uint8Array(0)) {
  return new Uint8Array(await crypto.subtle.deriveBits({
    name: "HKDF",
    hash: "SHA-256",
    salt: atu8_salt,
    info: atu8_info
  }, dk_base, ni_bits));
}
async function generate_pair(fk_sk, atu8_salt, ni_bits = 256) {
  const atu8_otp = crypto.getRandomValues(new Uint8Array(ni_bits << 3));
  const dk_base = await crypto.subtle.importKey("raw", atu8_otp, {
    name: "HKDF",
    hash: "SHA-256"
  }, false, ["deriveBits"]);
  zero_out(atu8_otp);
  const kn_derived = new SensitiveBytes(await fetch_derived(dk_base, atu8_salt, ni_bits));
  const kn_sk = new SensitiveBytes(await fk_sk());
  const kn_xor = kn_sk.xor(kn_derived);
  kn_sk.wipe();
  kn_derived.wipe();
  return [dk_base, kn_xor];
}
const hm_privates$1 = /* @__PURE__ */ new Map();
class RuntimeKey {
  static async create(fk_sk, ni_bits = 256) {
    const k_key = new RuntimeKey();
    const g_private = hm_privates$1.get(k_key);
    const [dk_base, kn_xor] = await generate_pair(fk_sk, g_private.atu8_salt, ni_bits);
    Object.assign(g_private, {
      dk_base,
      kn_xor
    });
    return k_key;
  }
  static async createRaw(atu8_sk, ni_bits = 256) {
    return RuntimeKey.create(() => atu8_sk, ni_bits);
  }
  constructor() {
    const atu8_salt = crypto.getRandomValues(new Uint8Array(32));
    hm_privates$1.set(this, {
      atu8_salt,
      kn_xor: null,
      dk_base: null
    });
  }
  async access(fk_use) {
    const g_privates = hm_privates$1.get(this);
    const {
      dk_base,
      atu8_salt,
      kn_xor
    } = g_privates;
    let w_return;
    let e_thrown;
    const [dk_base_new, kn_xor_new] = await generate_pair(() => new Promise(async (fk_resolve) => {
      const kn_derived = new SensitiveBytes(await fetch_derived(dk_base, atu8_salt));
      const kn_sk = kn_xor.xor(kn_derived);
      kn_derived.wipe();
      try {
        w_return = fk_use(kn_sk.data);
      } catch (_e_thrown) {
        e_thrown = _e_thrown;
      }
      fk_resolve(kn_sk.data);
      kn_sk.wipe();
    }), atu8_salt);
    g_privates.dk_base = dk_base_new;
    g_privates.kn_xor = kn_xor_new;
    if (e_thrown) {
      throw e_thrown;
    } else {
      return w_return;
    }
  }
  destroy() {
    const {
      atu8_salt,
      kn_xor
    } = hm_privates$1.get(this);
    kn_xor?.wipe();
    zero_out(atu8_salt);
    hm_privates$1.delete(this);
  }
}
class SensitiveBigUint extends SensitiveBytes {
  static random(nb_size) {
    return new SensitiveBigUint(crypto.getRandomValues(new Uint8Array(nb_size)));
  }
  static empty(nb_size = 0) {
    return new SensitiveBigUint(new Uint8Array(nb_size));
  }
  static max(kn_a, kn_b) {
    if (kn_a.gte(kn_b)) {
      return kn_a.clone();
    } else {
      return kn_b.clone();
    }
  }
  static min(kn_a, kn_b) {
    if (kn_a.lte(kn_b)) {
      return kn_a.clone();
    } else {
      return kn_b.clone();
    }
  }
  clone() {
    return new SensitiveBigUint(Uint8Array.from(this.data));
  }
  compare(kn_other) {
    const atu8_data_this = this.data;
    const nb_digits_this = atu8_data_this.byteLength;
    const atu8_data_other = kn_other.data;
    const nb_digits_other = atu8_data_other.byteLength;
    if (nb_digits_other !== nb_digits_this) {
      this.wipe();
      kn_other.wipe();
      throw new Error("Refusing to compare buffers of different byte length");
    }
    for (let ib_each = 0; ib_each < nb_digits_this; ib_each++) {
      const xb_a = atu8_data_this[ib_each];
      const xb_b = atu8_data_other[ib_each];
      if (xb_a !== xb_b) {
        if (xb_a > xb_b) {
          return 1;
        } else {
          return -1;
        }
      }
    }
    return 0;
  }
  eq(kn_other) {
    return this.compare(kn_other) === 0;
  }
  gt(kn_other) {
    return this.compare(kn_other) > 0;
  }
  gte(kn_other) {
    return this.compare(kn_other) >= 0;
  }
  lt(kn_other) {
    return this.compare(kn_other) < 0;
  }
  lte(kn_other) {
    return this.compare(kn_other) <= 0;
  }
  diff(kn_other) {
    const atu8_data_this = this.data;
    const nb_digits = atu8_data_this.byteLength;
    const xc_compare = this.compare(kn_other);
    if (xc_compare < 0) {
      return kn_other.diff(this);
    } else if (xc_compare === 0) {
      return SensitiveBigUint.empty(nb_digits);
    }
    const atu8_data_other = kn_other.data;
    const atu8_out = new Uint8Array(nb_digits);
    let xb_borrow = 0;
    for (let ib_each = nb_digits - 1; ib_each >= 0; ib_each--) {
      let xb_diff = atu8_data_this[ib_each] - atu8_data_other[ib_each] - xb_borrow;
      if (xb_diff < 0) {
        xb_diff += 256;
        xb_borrow = 1;
      } else {
        xb_borrow = 0;
      }
      atu8_out[ib_each] = xb_diff;
    }
    return new SensitiveBigUint(atu8_out);
  }
  mod(kn_base) {
    const atu8_data_this = this.data;
    const nb_digits_this = atu8_data_this.byteLength;
    let xc_compare = this.compare(kn_base);
    if (xc_compare < 0) {
      return this.clone();
    } else if (xc_compare === 0) {
      return SensitiveBigUint.empty(nb_digits_this);
    }
    const atu8_data_other = kn_base.data;
    atu8_data_other.byteLength;
    let kn_prev = this.clone();
    for (; ; ) {
      const kn_diff = kn_prev.diff(kn_base);
      kn_prev.wipe();
      xc_compare = kn_diff.compare(kn_base);
      if (xc_compare <= 0) {
        return kn_diff;
      }
      kn_prev = kn_diff;
    }
  }
  modulus(kn_divisor) {
    const atu8_data_this = this.data;
    const nb_digits_this = atu8_data_this.byteLength;
    let xc_compare = this.compare(kn_divisor);
    if (xc_compare < 0) {
      return this.clone();
    } else if (xc_compare === 0) {
      return SensitiveBigUint.empty(nb_digits_this);
    }
    const atu8_data_other = kn_divisor.data;
    atu8_data_other.byteLength;
  }
}
const KN_ZERO_32 = SensitiveBigUint.empty(32);
const KN_CURVE_N_SECP256K1 = new SensitiveBigUint(hex_to_buffer("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"));
const NI_MINIMUM_BORDER = 64;
const KN_DANGER_LO = new SensitiveBigUint(hex_to_buffer(((1 << NI_MINIMUM_BORDER % 8).toString(16) + "00".repeat(NI_MINIMUM_BORDER >>> 3)).padStart(64, "0")));
KN_CURVE_N_SECP256K1.diff(KN_DANGER_LO);
let y_secp256k1;
let a_wait_secp256k1 = null;
async function init_secp256k1() {
  if (y_secp256k1)
    return y_secp256k1;
  if (a_wait_secp256k1) {
    return new Promise((fk_resolve) => {
      a_wait_secp256k1.push(fk_resolve);
    });
  }
  a_wait_secp256k1 = [];
  y_secp256k1 = await instantiateSecp256k1(crypto.getRandomValues(new Uint8Array(32)));
  const a_execs = a_wait_secp256k1.slice();
  a_wait_secp256k1 = null;
  for (const fk_callback of a_execs) {
    fk_callback(y_secp256k1);
  }
  return y_secp256k1;
}
const hm_privates = /* @__PURE__ */ new Map();
class Secp256k1Key {
  constructor(_y_secp256k1) {
    __publicField(this, "_b_init", false);
    this._y_secp256k1 = _y_secp256k1;
  }
  static withinCurve(kg_sk) {
    return KN_ZERO_32.lt(kg_sk) && KN_CURVE_N_SECP256K1.gt(kg_sk);
  }
  static async verify(atu8_signature, atu8_message, atu8_pk) {
    if (!y_secp256k1)
      await init_secp256k1();
    const atu8_digest = await sha256(atu8_message);
    return y_secp256k1.verifySignatureCompactLowS(atu8_signature, atu8_pk, atu8_digest);
  }
  static async generatePrivateKey(b_exportable = false) {
    if (!y_secp256k1)
      await init_secp256k1();
    const kk_sk = await RuntimeKey.create(() => {
      let atu8_sk;
      while (!y_secp256k1.validatePrivateKey(atu8_sk = crypto.getRandomValues(new Uint8Array(32))))
        ;
      return atu8_sk;
    });
    return [kk_sk, await Secp256k1Key.import(kk_sk, b_exportable)];
  }
  static async import(kk_sk, b_exportable = false) {
    if (!y_secp256k1)
      await init_secp256k1();
    return await new Secp256k1Key(y_secp256k1).import(kk_sk, b_exportable);
  }
  async import(kk_sk, b_exportable = false) {
    const _y_secp256k1 = this._y_secp256k1;
    await kk_sk.access((atu8_sk) => {
      if (!this._y_secp256k1.validatePrivateKey(atu8_sk)) {
        throw new Error(`Failed to validate secp256k1 private key`);
      }
      hm_privates.set(this, {
        kk_sk,
        atu8_pk33: _y_secp256k1.derivePublicKeyCompressed(atu8_sk),
        atu8_pk65: _y_secp256k1.derivePublicKeyUncompressed(atu8_sk),
        b_exportable
      });
    });
    const {
      atu8_pk33,
      atu8_pk65
    } = hm_privates.get(this);
    if (!_y_secp256k1.validatePublicKey(atu8_pk33)) {
      throw new Error(`Failed to validate secp256k1 compressed public key`);
    }
    if (!_y_secp256k1.validatePublicKey(atu8_pk65)) {
      throw new Error(`Failed to validate secp256k1 uncompressed public key`);
    }
    this._b_init = true;
    return this;
  }
  exportPublicKey(b_uncompressed = false) {
    const {
      atu8_pk33,
      atu8_pk65,
      b_exportable
    } = hm_privates.get(this);
    if (b_exportable === true) {
      if (b_uncompressed) {
        return atu8_pk65;
      } else {
        return atu8_pk33;
      }
    } else {
      throw new Error("Public key is not exportable");
    }
  }
  async sign(atu8_message) {
    const atu8_digest = await sha256(atu8_message);
    const {
      kk_sk
    } = hm_privates.get(this);
    return await kk_sk.access((atu8_sk) => this._y_secp256k1.signMessageHashCompact(atu8_sk, atu8_digest));
  }
  async verify(atu8_signature, atu8_message) {
    const atu8_digest = await sha256(atu8_message);
    const {
      atu8_pk65
    } = hm_privates.get(this);
    return this._y_secp256k1.verifySignatureCompactLowS(atu8_signature, atu8_pk65, atu8_digest);
  }
  async ecdh(atu8_pk) {
    const {
      kk_sk
    } = hm_privates.get(this);
    return await kk_sk.access((atu8_sk) => this._y_secp256k1.ecdh(atu8_sk, atu8_pk));
  }
  add(atu8_tweak) {
    const {
      kk_sk
    } = hm_privates.get(this);
    return kk_sk.access((atu8_sk) => this._y_secp256k1.addTweakPrivateKey(atu8_sk, atu8_tweak));
  }
}
function create_default_slot_1(ctx) {
  let t0;
  let a;
  let t2;
  return {
    c() {
      t0 = text("By checking this box, you agree to the ");
      a = element("a");
      a.textContent = "Terms and Conditions";
      t2 = text(".");
      attr(a, "href", "https://starshell.net/tac.html");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, a, anchor);
      insert(target, t2, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(t0);
      if (detaching)
        detach(a);
      if (detaching)
        detach(t2);
    }
  };
}
function create_default_slot(ctx) {
  let header;
  let t0;
  let p0;
  let t2;
  let p1;
  let t4;
  let p2;
  let t6;
  let checkboxfield;
  let updating_checked;
  let t7;
  let actionsline;
  let current;
  header = new Header({ props: { title: "Create a new wallet" } });
  function checkboxfield_checked_binding(value) {
    ctx[4](value);
  }
  let checkboxfield_props = {
    id: "",
    $$slots: { default: [create_default_slot_1] },
    $$scope: { ctx }
  };
  if (ctx[0] !== void 0) {
    checkboxfield_props.checked = ctx[0];
  }
  checkboxfield = new CheckboxField({ props: checkboxfield_props });
  binding_callbacks.push(() => bind(checkboxfield, "checked", checkboxfield_checked_binding));
  actionsline = new ActionsLine({
    props: {
      confirm: [
        "Create new StarShell wallet",
        ctx[2],
        !ctx[0]
      ],
      contd: {
        creator: AccountEdit,
        props: { account: ctx[1] }
      }
    }
  });
  return {
    c() {
      create_component(header.$$.fragment);
      t0 = space();
      p0 = element("p");
      p0.textContent = "This software is currently in beta. Since it has not undergone security audits, importing and exporting of mnemonics and private keys is forbidden.";
      t2 = space();
      p1 = element("p");
      p1.textContent = "This means you will not be able to backup seed phrases, private keys, or use hardware wallets.";
      t4 = space();
      p2 = element("p");
      p2.textContent = "All transactions take place on a test network.";
      t6 = space();
      create_component(checkboxfield.$$.fragment);
      t7 = space();
      create_component(actionsline.$$.fragment);
    },
    m(target, anchor) {
      mount_component(header, target, anchor);
      insert(target, t0, anchor);
      insert(target, p0, anchor);
      insert(target, t2, anchor);
      insert(target, p1, anchor);
      insert(target, t4, anchor);
      insert(target, p2, anchor);
      insert(target, t6, anchor);
      mount_component(checkboxfield, target, anchor);
      insert(target, t7, anchor);
      mount_component(actionsline, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const checkboxfield_changes = {};
      if (dirty & 64) {
        checkboxfield_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_checked && dirty & 1) {
        updating_checked = true;
        checkboxfield_changes.checked = ctx2[0];
        add_flush_callback(() => updating_checked = false);
      }
      checkboxfield.$set(checkboxfield_changes);
      const actionsline_changes = {};
      if (dirty & 1)
        actionsline_changes.confirm = [
          "Create new StarShell wallet",
          ctx2[2],
          !ctx2[0]
        ];
      if (dirty & 2)
        actionsline_changes.contd = {
          creator: AccountEdit,
          props: { account: ctx2[1] }
        };
      actionsline.$set(actionsline_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(header.$$.fragment, local);
      transition_in(checkboxfield.$$.fragment, local);
      transition_in(actionsline.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(header.$$.fragment, local);
      transition_out(checkboxfield.$$.fragment, local);
      transition_out(actionsline.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(header, detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(p0);
      if (detaching)
        detach(t2);
      if (detaching)
        detach(p1);
      if (detaching)
        detach(t4);
      if (detaching)
        detach(p2);
      if (detaching)
        detach(t6);
      destroy_component(checkboxfield, detaching);
      if (detaching)
        detach(t7);
      destroy_component(actionsline, detaching);
    }
  };
}
function create_fragment(ctx) {
  let screen;
  let current;
  screen = new Screen({
    props: {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(screen.$$.fragment);
    },
    m(target, anchor) {
      mount_component(screen, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const screen_changes = {};
      if (dirty & 67) {
        screen_changes.$$scope = { dirty, ctx: ctx2 };
      }
      screen.$set(screen_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(screen.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(screen.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(screen, detaching);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let $yw_account_ref;
  component_subscribe($$self, yw_account_ref, ($$value) => $$invalidate(1, $yw_account_ref = $$value));
  let { reset = false } = $$props;
  let { b_agreed = false } = $$props;
  async function create_account(p_secret, sa_owner, p_pfp) {
    return await Accounts.open((ks_accounts) => ks_accounts.put({
      family: "cosmos",
      pubkey: sa_owner,
      secret: p_secret,
      name: "Citizen 1",
      pfp: p_pfp
    }));
  }
  async function create_private_key() {
    const [kk_sk, k_secp] = await Secp256k1Key.generatePrivateKey(true);
    const s_uuid = crypto.randomUUID();
    const p_secret = await kk_sk.access((atu8_sk) => Secrets.open((ks) => ks.put({
      type: "private_key",
      data: buffer_to_string8(atu8_sk),
      name: "Auto-generated private key for beta",
      uuid: s_uuid,
      security: { type: "none" }
    })));
    const atu8_pk = k_secp.exportPublicKey();
    const p_account = await create_account(p_secret, buffer_to_base64(atu8_pk), "");
    set_store_value(yw_account_ref, $yw_account_ref = p_account, $yw_account_ref);
  }
  function checkboxfield_checked_binding(value) {
    b_agreed = value;
    $$invalidate(0, b_agreed);
  }
  $$self.$$set = ($$props2) => {
    if ("reset" in $$props2)
      $$invalidate(3, reset = $$props2.reset);
    if ("b_agreed" in $$props2)
      $$invalidate(0, b_agreed = $$props2.b_agreed);
  };
  return [
    b_agreed,
    $yw_account_ref,
    create_private_key,
    reset,
    checkboxfield_checked_binding
  ];
}
class CreateWallet extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { reset: 3, b_agreed: 0 });
  }
}
document.getElementById("factory-reset")?.addEventListener("click", async () => {
  await chrome.storage.session.clear();
  await chrome.storage.local.clear();
  await reload();
});
let yc_system = null;
let i_health = 0;
async function reload() {
  if (yc_system) {
    try {
      yc_system.$destroy();
    } catch (e_destroy) {
    }
    try {
      qs(document.body, "main")?.remove();
    } catch (e_remove) {
    }
  }
  let b_launch = false;
  let gc_page_start;
  let h_context = {};
  const dk_root = await Vault.getRootKey();
  if (dk_root) {
    const f_unregister = global_receive({
      logout() {
        f_unregister();
        void reload();
      }
    });
    await initialize_caches();
    const ks_accounts = await Accounts.read();
    if (!Object.keys(ks_accounts.raw).length) {
      gc_page_start = {
        creator: CreateWallet
      };
      h_context = {
        completed: reload
      };
    } else {
      gc_page_start = {
        creator: Blank
      };
      b_launch = true;
    }
  } else {
    const f_unregister = global_receive({
      login() {
        f_unregister();
        void reload();
      }
    });
    const g_root = await Vault.getBase();
    if (!g_root) {
      gc_page_start = {
        creator: PreRegister
      };
    } else {
      gc_page_start = {
        creator: Authenticate
      };
    }
    h_context = {
      completed: reload
    };
  }
  let b_initialized = false;
  const f_unsubscribe = yw_navigator.subscribe((k_navigator) => {
    if (!b_initialized) {
      b_initialized = true;
      return;
    }
    if (k_navigator) {
      f_unsubscribe();
      if (b_launch) {
        k_navigator.activateThread(ThreadId.TOKENS);
      } else {
        k_navigator.activateThread(ThreadId.INIT);
      }
      try {
        dm_log.style.display = "none";
      } catch (e_hide) {
      }
    }
  });
  yc_system = new System({
    target: document.body,
    props: {
      mode: "app",
      page: gc_page_start
    },
    context: new Map(ode(h_context))
  });
  clearTimeout(i_health);
}
if (location.hostname === "localhost") {
  const h_params = Object.fromEntries(new URLSearchParams(location.search.slice(1)).entries());
  if (h_params["autoskip"]) {
    console.log("Autoskipping registration");
    (async () => {
      localStorage.clear();
      await register("     ");
      await login("     ");
      void reload();
    })();
  } else {
    void reload();
  }
} else {
  i_health = globalThis.setTimeout(() => {
    domlog("Fatal time out, likely caused by an uncaught error.");
  }, 15 * XT_SECONDS);
  try {
    void reload();
  } catch (e_load) {
    debugger;
    console.error(e_load);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
