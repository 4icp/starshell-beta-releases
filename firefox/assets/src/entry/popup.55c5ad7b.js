import{S as H,i as K,s as M,a as q,c as y,m as k,t as h,b as v,d as S,e as X,H as G,C as J,f as Q,g as Y,A as F,h as g,j as C,k as f,l as Z,n as u,y as O,o as ee,p as te,q as se,r as ae,u as ne,v as V,I as re,w as N,x as W,z as j,W as oe,P as ie,B as ce,D as le,E as fe,F as ue,V as z,G as I,J as _e,K as pe,L as me,M as de,N as $e,X as be,O as we}from"../../web-resource-cache.fb3e84c9.js";import{A as B,S as ge,H as ye,T as D,d as ke,a as he,b as ve,B as Se,P as Te,c as Ce}from"../../PreRegister.084f3eb8.js";import{s as E}from"../../index.5cb01ff5.js";function Ee(r){let e,s,t;return{c(){e=N("By checking this box, you agree to the "),s=C("a"),s.textContent="Terms and Conditions",t=N("."),W(s,"href","https://starshell.net/tac.html")},m(o,i){f(o,e,i),f(o,s,i),f(o,t,i)},p:j,d(o){o&&u(e),o&&u(s),o&&u(t)}}}function Re(r){let e,s,t,o,i,w,l,m,c,b,d,_,a;e=new G({props:{title:"Create a new wallet"}});function $(n){r[4](n)}let R={id:"",$$slots:{default:[Ee]},$$scope:{ctx:r}};return r[0]!==void 0&&(R.checked=r[0]),c=new J({props:R}),Q.push(()=>Y(c,"checked",$)),_=new F({props:{confirm:["Create new StarShell wallet",r[2],!r[0]],contd:{creator:B,props:{account:r[1]}}}}),{c(){y(e.$$.fragment),s=g(),t=C("p"),t.textContent="This software is currently in beta. Since it has not undergone security audits, importing and exporting of mnemonics and private keys is forbidden.",o=g(),i=C("p"),i.textContent="This means you will not be able to backup seed phrases, private keys, or use hardware wallets.",w=g(),l=C("p"),l.textContent="All transactions take place on a test network.",m=g(),y(c.$$.fragment),d=g(),y(_.$$.fragment)},m(n,p){k(e,n,p),f(n,s,p),f(n,t,p),f(n,o,p),f(n,i,p),f(n,w,p),f(n,l,p),f(n,m,p),k(c,n,p),f(n,d,p),k(_,n,p),a=!0},p(n,p){const x={};p&64&&(x.$$scope={dirty:p,ctx:n}),!b&&p&1&&(b=!0,x.checked=n[0],Z(()=>b=!1)),c.$set(x);const A={};p&1&&(A.confirm=["Create new StarShell wallet",n[2],!n[0]]),p&2&&(A.contd={creator:B,props:{account:n[1]}}),_.$set(A)},i(n){a||(h(e.$$.fragment,n),h(c.$$.fragment,n),h(_.$$.fragment,n),a=!0)},o(n){v(e.$$.fragment,n),v(c.$$.fragment,n),v(_.$$.fragment,n),a=!1},d(n){S(e,n),n&&u(s),n&&u(t),n&&u(o),n&&u(i),n&&u(w),n&&u(l),n&&u(m),S(c,n),n&&u(d),S(_,n)}}}function xe(r){let e,s;return e=new q({props:{$$slots:{default:[Re]},$$scope:{ctx:r}}}),{c(){y(e.$$.fragment)},m(t,o){k(e,t,o),s=!0},p(t,[o]){const i={};o&67&&(i.$$scope={dirty:o,ctx:t}),e.$set(i)},i(t){s||(h(e.$$.fragment,t),s=!0)},o(t){v(e.$$.fragment,t),s=!1},d(t){S(e,t)}}}function Ae(r,e,s){let t;X(r,O,c=>s(1,t=c));let{reset:o=!1}=e,{b_agreed:i=!1}=e;async function w(c,b,d){const _=await V.open(a=>a.put({family:"cosmos",pubkey:b,secret:c,name:"Citizen 1",pfp:d}));return await re.record(null,{type:"account_created",time:Date.now(),data:{account:_}}),_}async function l(){const[c,b]=await ee.generatePrivateKey(!0),d=crypto.randomUUID(),_=await te.open(async R=>R.put({type:"private_key",data:await c.access(n=>se(n)),name:"Auto-generated private key for beta",uuid:d,security:{type:"none"}})),a=b.exportPublicKey(),$=await w(_,ae(a),"");ne(O,t=$,t)}function m(c){i=c,s(0,i)}return r.$$set=c=>{"reset"in c&&s(3,o=c.reset),"b_agreed"in c&&s(0,i=c.b_agreed)},[i,t,l,o,m]}class Ie extends H{constructor(e){super(),K(this,e,Ae,xe,M,{reset:3,b_agreed:0})}}const Pe=/^([<>]=?)?(.+)$/;function Le(r,e){const[,s,t]=Pe.exec(e);return s==="<="?E.lte(r,t):s==="<"?E.lt(r,t):s===">"?E.gt(r,t):s===">="?E.gte(r,t):s==="="?E.equivalent(r,t):!1}async function Oe(){const r=[],e=await oe.get(ie);for(const s of e||[])if(Le(ce,s.affects))switch(s.action){case"restrict":{r.push(s);break}}return r}function Ne(r){let e,s,t,o,i,w,l,m,c,b,d,_;return e=new le({props:{dim:96}}),t=new ge({}),i=new ye({}),d=new F({props:{confirm:["See Instructions",r[0]]}}),{c(){y(e.$$.fragment),s=g(),y(t.$$.fragment),o=g(),y(i.$$.fragment),w=g(),l=C("div"),l.innerHTML=`<div>Please update to continue beta testing.</div> 
		<div>A new version has been released.</div>`,m=g(),c=C("p"),b=g(),y(d.$$.fragment),W(l,"class","large")},m(a,$){k(e,a,$),f(a,s,$),k(t,a,$),f(a,o,$),k(i,a,$),f(a,w,$),f(a,l,$),f(a,m,$),f(a,c,$),f(a,b,$),k(d,a,$),_=!0},p:j,i(a){_||(h(e.$$.fragment,a),h(t.$$.fragment,a),h(i.$$.fragment,a),h(d.$$.fragment,a),_=!0)},o(a){v(e.$$.fragment,a),v(t.$$.fragment,a),v(i.$$.fragment,a),v(d.$$.fragment,a),_=!1},d(a){S(e,a),a&&u(s),S(t,a),a&&u(o),S(i,a),a&&u(w),a&&u(l),a&&u(m),a&&u(c),a&&u(b),S(d,a)}}}function ze(r){let e,s;return e=new q({props:{root:!0,classNames:"restricted",$$slots:{default:[Ne]},$$scope:{ctx:r}}}),{c(){y(e.$$.fragment)},m(t,o){k(e,t,o),s=!0},p(t,[o]){const i={};o&2&&(i.$$scope={dirty:o,ctx:t}),e.$set(i)},i(t){s||(h(e.$$.fragment,t),s=!0)},o(t){v(e.$$.fragment,t),s=!1},d(t){S(e,t)}}}function Be(r){return[()=>fe("https://github.com/SolarRepublic/starshell-beta-releases/blob/main/README.md#updating")]}class De extends H{constructor(e){super(),K(this,e,Be,ze,M,{})}}document.getElementById("factory-reset")?.addEventListener("click",async()=>{await browser.storage.session.clear(),await browser.storage.local.clear(),await T()});let P=null,U=0,L=!1;async function T(){if(L)return;if(L=!0,P)try{P.$destroy()}catch{}try{ue(document.body,"main")?.remove()}catch{}let r=!1,e,s={};const t=await z.getRootKey();if((await Oe()).length)e={creator:De};else if(t){const l=I({logout(){l(),T()}});await _e();const m=await V.read();Object.keys(m.raw).length?(e={creator:Se},r=!0):(e={creator:Ie},s={completed:T})}else{const l=I({login(){l(),T()}});await z.getBase()?e={creator:Ce}:e={creator:Te},s={completed:we}}let i=!1;const w=pe.subscribe(l=>{if(!i){i=!0;return}if(l){let m=function(){clearTimeout(b),b=setTimeout(()=>{c.sendMessage({type:"wake"}),console.warn("Waking idle service worker")},2e3)};w(),r?l.activateThread(D.TOKENS):l.activateThread(D.INIT);try{ke.style.display="none"}catch{}const c=browser.runtime;let b=0;I({heartbeat(){m()}}),r&&m()}});P=new he({target:document.body,props:{mode:"app",page:e},context:new Map(me(s))}),clearTimeout(U),L=!1}if(location.hostname==="localhost")Object.fromEntries(new URLSearchParams(location.search.slice(1)).entries()).autoskip?(console.log("Autoskipping registration"),(async()=>(localStorage.clear(),await de("     "),await $e("     "),T()))()):T();else{U=globalThis.setTimeout(()=>{ve("Fatal time out, likely caused by an uncaught error.")},15*be);try{T()}catch(r){debugger;console.error(r)}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
