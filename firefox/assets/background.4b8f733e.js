import{bP as Le,bQ as qe,bR as Oe,bS as Ue,X as We,bO as ze,W as Me,V as _e,u as De,ar as we,bn as de,I as He,bT as Fe,aY as ve,F as Ke,aM as je,bU as Ge,bV as Xe,bW as Ve,aL as Je,aO as Qe,aT as me,bX as Ye,q as Ze,bY as et,aW as tt,E as be,bm as rt,bM as nt,a$ as ot}from"./web-resource-cache.b2a4c857.js";import"./index.5cb01ff5.js";function st({session:c}){const y=function(){var s=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},I={exports:{}};function x(Q){throw new Error('Could not dynamically require "'+Q+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var N={exports:{}},O;function F(){return O||(O=1,function(Q,ne){(function(j,m){Q.exports=m()})(s,function(){var j=j||function(m,E){var A;if(typeof window<"u"&&window.crypto&&(A=window.crypto),typeof self<"u"&&self.crypto&&(A=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(A=globalThis.crypto),!A&&typeof window<"u"&&window.msCrypto&&(A=window.msCrypto),!A&&typeof s<"u"&&s.crypto&&(A=s.crypto),!A&&typeof x=="function")try{A=require("crypto")}catch{}var Y=function(){if(A){if(typeof A.getRandomValues=="function")try{return A.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof A.randomBytes=="function")try{return A.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},z=Object.create||function(){function e(){}return function(r){var w;return e.prototype=r,w=new e,e.prototype=null,w}}(),M={},i=M.lib={},u=i.Base=function(){return{extend:function(e){var r=z(this);return e&&r.mixIn(e),(!r.hasOwnProperty("init")||this.init===r.init)&&(r.init=function(){r.$super.init.apply(this,arguments)}),r.init.prototype=r,r.$super=this,r},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var r in e)e.hasOwnProperty(r)&&(this[r]=e[r]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),C=i.WordArray=u.extend({init:function(e,r){e=this.words=e||[],r!=E?this.sigBytes=r:this.sigBytes=e.length*4},toString:function(e){return(e||n).stringify(this)},concat:function(e){var r=this.words,w=e.words,b=this.sigBytes,q=e.sigBytes;if(this.clamp(),b%4)for(var G=0;G<q;G++){var V=w[G>>>2]>>>24-G%4*8&255;r[b+G>>>2]|=V<<24-(b+G)%4*8}else for(var J=0;J<q;J+=4)r[b+J>>>2]=w[J>>>2];return this.sigBytes+=q,this},clamp:function(){var e=this.words,r=this.sigBytes;e[r>>>2]&=4294967295<<32-r%4*8,e.length=m.ceil(r/4)},clone:function(){var e=u.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var r=[],w=0;w<e;w+=4)r.push(Y());return new C.init(r,e)}}),t=M.enc={},n=t.Hex={stringify:function(e){for(var r=e.words,w=e.sigBytes,b=[],q=0;q<w;q++){var G=r[q>>>2]>>>24-q%4*8&255;b.push((G>>>4).toString(16)),b.push((G&15).toString(16))}return b.join("")},parse:function(e){for(var r=e.length,w=[],b=0;b<r;b+=2)w[b>>>3]|=parseInt(e.substr(b,2),16)<<24-b%8*4;return new C.init(w,r/2)}},a=t.Latin1={stringify:function(e){for(var r=e.words,w=e.sigBytes,b=[],q=0;q<w;q++){var G=r[q>>>2]>>>24-q%4*8&255;b.push(String.fromCharCode(G))}return b.join("")},parse:function(e){for(var r=e.length,w=[],b=0;b<r;b++)w[b>>>2]|=(e.charCodeAt(b)&255)<<24-b%4*8;return new C.init(w,r)}},o=t.Utf8={stringify:function(e){try{return decodeURIComponent(escape(a.stringify(e)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(e){return a.parse(unescape(encodeURIComponent(e)))}},d=i.BufferedBlockAlgorithm=u.extend({reset:function(){this._data=new C.init,this._nDataBytes=0},_append:function(e){typeof e=="string"&&(e=o.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(e){var r,w=this._data,b=w.words,q=w.sigBytes,G=this.blockSize,V=G*4,J=q/V;e?J=m.ceil(J):J=m.max((J|0)-this._minBufferSize,0);var ie=J*G,oe=m.min(ie*4,q);if(ie){for(var ae=0;ae<ie;ae+=G)this._doProcessBlock(b,ae);r=b.splice(0,ie),w.sigBytes-=oe}return new C.init(r,oe)},clone:function(){var e=u.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0});i.Hasher=d.extend({cfg:u.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){e&&this._append(e);var r=this._doFinalize();return r},blockSize:16,_createHelper:function(e){return function(r,w){return new e.init(w).finalize(r)}},_createHmacHelper:function(e){return function(r,w){return new B.HMAC.init(e,w).finalize(r)}}});var B=M.algo={};return M}(Math);return j})}(N)),N.exports}var re={exports:{}},X;function Z(){return X||(X=1,function(Q,ne){(function(j,m){Q.exports=m(F())})(s,function(j){return function(m){var E=j,A=E.lib,Y=A.WordArray,z=A.Hasher,M=E.algo,i=[],u=[];(function(){function n(B){for(var e=m.sqrt(B),r=2;r<=e;r++)if(!(B%r))return!1;return!0}function a(B){return(B-(B|0))*4294967296|0}for(var o=2,d=0;d<64;)n(o)&&(d<8&&(i[d]=a(m.pow(o,.5))),u[d]=a(m.pow(o,.3333333333333333)),d++),o++})();var C=[],t=M.SHA256=z.extend({_doReset:function(){this._hash=new Y.init(i.slice(0))},_doProcessBlock:function(n,a){for(var o=this._hash.words,d=o[0],B=o[1],e=o[2],r=o[3],w=o[4],b=o[5],q=o[6],G=o[7],V=0;V<64;V++){if(V<16)C[V]=n[a+V]|0;else{var J=C[V-15],ie=(J<<25|J>>>7)^(J<<14|J>>>18)^J>>>3,oe=C[V-2],ae=(oe<<15|oe>>>17)^(oe<<13|oe>>>19)^oe>>>10;C[V]=ie+C[V-7]+ae+C[V-16]}var Pe=w&b^~w&q,ke=d&B^d&e^B&e,Te=(d<<30|d>>>2)^(d<<19|d>>>13)^(d<<10|d>>>22),Ne=(w<<26|w>>>6)^(w<<21|w>>>11)^(w<<7|w>>>25),ge=G+Ne+Pe+u[V]+C[V],$e=Te+ke;G=q,q=b,b=w,w=r+ge|0,r=e,e=B,B=d,d=ge+$e|0}o[0]=o[0]+d|0,o[1]=o[1]+B|0,o[2]=o[2]+e|0,o[3]=o[3]+r|0,o[4]=o[4]+w|0,o[5]=o[5]+b|0,o[6]=o[6]+q|0,o[7]=o[7]+G|0},_doFinalize:function(){var n=this._data,a=n.words,o=this._nDataBytes*8,d=n.sigBytes*8;return a[d>>>5]|=128<<24-d%32,a[(d+64>>>9<<4)+14]=m.floor(o/4294967296),a[(d+64>>>9<<4)+15]=o,n.sigBytes=a.length*4,this._process(),this._hash},clone:function(){var n=z.clone.call(this);return n._hash=this._hash.clone(),n}});E.SHA256=z._createHelper(t),E.HmacSHA256=z._createHmacHelper(t)}(Math),j.SHA256})}(re)),re.exports}var g={exports:{}},k;function te(){return k||(k=1,function(Q,ne){(function(j,m){Q.exports=m(F())})(s,function(j){(function(){var m=j,E=m.lib,A=E.Base,Y=m.enc,z=Y.Utf8,M=m.algo;M.HMAC=A.extend({init:function(i,u){i=this._hasher=new i.init,typeof u=="string"&&(u=z.parse(u));var C=i.blockSize,t=C*4;u.sigBytes>t&&(u=i.finalize(u)),u.clamp();for(var n=this._oKey=u.clone(),a=this._iKey=u.clone(),o=n.words,d=a.words,B=0;B<C;B++)o[B]^=1549556828,d[B]^=909522486;n.sigBytes=a.sigBytes=t,this.reset()},reset:function(){var i=this._hasher;i.reset(),i.update(this._iKey)},update:function(i){return this._hasher.update(i),this},finalize:function(i){var u=this._hasher,C=u.finalize(i);u.reset();var t=u.finalize(this._oKey.clone().concat(C));return t}})})()})}(g)),g.exports}(function(Q,ne){(function(j,m,E){Q.exports=m(F(),Z(),te())})(s,function(j){return j.HmacSHA256})})(I);var K=I.exports;return K}(),{A_CHAIN_CATEGORIES:p,A_CHAIN_FAMILIES:h,R_CHAIN_ID:v,R_CHAIN_NAME:_}=function(s){const O=["cosmos"],F=["mainnet","testnet"],re=/^[a-z0-9][a-z0-9-]{2,64}$/,X=/^[\p{L}\p{S}](\p{Zs}?[\p{L}\p{N}\p{S}._:/-])+$/u;return s.A_CHAIN_CATEGORIES=F,s.A_CHAIN_FAMILIES=O,s.NB_MAX_MESSAGE=2097152,s.N_PX_HEIGHT_POPUP=600,s.N_PX_WIDTH_POPUP=360,s.R_CHAIN_ID=re,s.R_CHAIN_NAME=X,Object.defineProperty(s,"__esModule",{value:!0}),s}({}),{locate_script:f}=function(s){function I(x){const N=browser.runtime.getManifest();for(const O of N.content_scripts||[])for(const F of O.js??[])if(F.startsWith(x))return F;for(const O of N.web_accessible_resources||[])if(typeof O=="string"){if(O.startsWith(x))return O}else for(const F of O.resources)if(F.startsWith(x))return F;return null}return s.locate_script=I,Object.defineProperty(s,"__esModule",{value:!0}),s}({}),H=browser.runtime,P=(s,...I)=>console.debug(`StarShell.ics-host: ${s}`,...I);P(`Launched on <${location.href}>`);class R extends Error{}let S,T=!1,$=!1;function U(s){throw $=!0,H.sendMessage({type:"panic",value:""+s}),new R(`StarShell threw a security error: "${s}"`)}function l(){if($)throw new Error("StarShell withdrew wallet access from this website due to a security violation")}const L={async requestConnect(s){const{index:I,manifest:x}=s,N=Z=>{S.postMessage({type:"respondConnect",value:{index:I,answer:{error:Z}}})};if(typeof x!="object"||typeof x.schema!="string")return N("Invalid manifest structure");if(x.schema!=="1")return N("Unknown or unsupported manifest schema version");if(!Array.isArray(x.chains)||!x.chains.length)return N("No chains were specified in request");const{chains:O}=x,F=new Set,re=[];for(let Z=0;Z<O.length;Z++){const g=O[Z],k=Q=>N(`${Q} at .chains[${Z}]`);if(typeof g!="object"||typeof g.category!="string"||typeof g.family!="string"||typeof g.id!="string")return k("Invalid chain descriptor structure");if(!h.includes(g.family))continue;if(!p.includes(g.category))return k(`Invalid category value "${g.category}"; must be one of (${p.join(", ")})`);if(!v.test(g.id))return k(`Invalid chain id "${g.id}" for ${g.family} family; failed to match regular expression /${v.source}/`);if(g.name){if(!_.test(g.name))return k(`Invalid chain name "${g.name}"; failed to match regular expression /${_.source}/`);if(g.name.length>64)return k("Chain name too long")}const te=g.family+`
`+g.id;if(F.has(te))return k(`Duplicate chain IDs in '${g.family}' family: '${g.id}'`);const K=g.name||g.id;re.push({...g,label:K})}H.sendMessage({type:"requestConnection",value:{chains:re}});const X=[];X.push(null);for(const Z of O){const g=new MessageChannel;await HostConnection.create(Z,g.port1),X.push(g.port2)}S.postMessage({type:"respondConnect",value:{index:I,answer:{config:{features:a_features}}}},X)},reportWebsiteError(s){}};function W(s){const{type:I,value:x}=s.data,N=L[I];if(!N){console.error(`Received relay port message having an unregistered type "${I}"`);return}P("Received relay port message having registered type %o",s.data),N(x)}const D={establishChannel(s,I){if(l(),T)return U("Relay frame attempted to establish connection more than once");if(T=!0,!ee)return U("Reference to relay frame window not defined");if(!I||I.length!==1)return U("Expected exactly one MessagePort but none were transfered from relay frame");S=I[0],S.onmessage=W,S.postMessage({type:"acknowledgeChannel"}),window.postMessage({type:"ratifyGlobal"},window.origin)}};let ee,se;{const s={session:c,csurl:browser.runtime.getURL("assets/src/script/mcs-relay.js")},I=document.createElement("script");I.setAttribute("type","application/json"),I.setAttribute("id","starshell-mcs-relay-payload"),I.textContent=JSON.stringify(s);const x=document.createElement("script"),N=f("assets/src/script/mcs-relay");if(!N)throw new Error("Unable to locate relay script!");x.src=browser.runtime.getURL(N),x.type="module";const O=document.createElement("iframe"),F=document.createElement("div");F.style.display="none !important",F.attachShadow({mode:"closed"}).append(O);try{document.head.append(F)}catch{document.body.append(F)}ee=O.contentWindow,se=O.contentDocument,se.body.append(I),se.body.append(x),P("Injected relay iframe")}ee.addEventListener("message",s=>{if(P("Observed relay window message %o",s),!s.isTrusted){console.warn("Ignored untrusted event %o",s);return}if(s.source!==s.target){console.warn("Ignored cross-window message %o",s);return}const I=s.target;if(window.origin!==s.origin||window!==I.parent||I.location.href!=="about:blank"){console.warn("Ignored message from 3rd party %o",s);return}const x=s.data;if(typeof x!="object"||typeof x.type!="string"){P("Ignored invalid message data %o",x);return}const{type:N,auth:O}=x,F=D[N];if(!F){console.error(`Received message having an unregistered type "${N}"`);return}if(typeof O!="string"){P("Ignored message missing auth data %o",x);return}if(JSON.stringify(y(JSON.stringify({...x,auth:void 0}),c))!==x.auth)return U("Relay frame sent invalid auth signature");P("Received message having registered type %o",s.data),F(null,s.ports)})}function it({session:c}){const y=(l,...L)=>console.debug(`StarShell.mcs-ratifier: ${l}`,...L);y(`Launched on <${location.href}>`);const p=function(){var l=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},L={exports:{}};function W(X){throw new Error('Could not dynamically require "'+X+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var D={exports:{}},ee;function se(){return ee||(ee=1,function(X,Z){(function(g,k){X.exports=k()})(l,function(){var g=g||function(k,te){var K;if(typeof window<"u"&&window.crypto&&(K=window.crypto),typeof self<"u"&&self.crypto&&(K=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(K=globalThis.crypto),!K&&typeof window<"u"&&window.msCrypto&&(K=window.msCrypto),!K&&typeof l<"u"&&l.crypto&&(K=l.crypto),!K&&typeof W=="function")try{K=require("crypto")}catch{}var Q=function(){if(K){if(typeof K.getRandomValues=="function")try{return K.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof K.randomBytes=="function")try{return K.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},ne=Object.create||function(){function t(){}return function(n){var a;return t.prototype=n,a=new t,t.prototype=null,a}}(),j={},m=j.lib={},E=m.Base=function(){return{extend:function(t){var n=ne(this);return t&&n.mixIn(t),(!n.hasOwnProperty("init")||this.init===n.init)&&(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var n in t)t.hasOwnProperty(n)&&(this[n]=t[n]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),A=m.WordArray=E.extend({init:function(t,n){t=this.words=t||[],n!=te?this.sigBytes=n:this.sigBytes=t.length*4},toString:function(t){return(t||z).stringify(this)},concat:function(t){var n=this.words,a=t.words,o=this.sigBytes,d=t.sigBytes;if(this.clamp(),o%4)for(var B=0;B<d;B++){var e=a[B>>>2]>>>24-B%4*8&255;n[o+B>>>2]|=e<<24-(o+B)%4*8}else for(var r=0;r<d;r+=4)n[o+r>>>2]=a[r>>>2];return this.sigBytes+=d,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=k.ceil(n/4)},clone:function(){var t=E.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var n=[],a=0;a<t;a+=4)n.push(Q());return new A.init(n,t)}}),Y=j.enc={},z=Y.Hex={stringify:function(t){for(var n=t.words,a=t.sigBytes,o=[],d=0;d<a;d++){var B=n[d>>>2]>>>24-d%4*8&255;o.push((B>>>4).toString(16)),o.push((B&15).toString(16))}return o.join("")},parse:function(t){for(var n=t.length,a=[],o=0;o<n;o+=2)a[o>>>3]|=parseInt(t.substr(o,2),16)<<24-o%8*4;return new A.init(a,n/2)}},M=Y.Latin1={stringify:function(t){for(var n=t.words,a=t.sigBytes,o=[],d=0;d<a;d++){var B=n[d>>>2]>>>24-d%4*8&255;o.push(String.fromCharCode(B))}return o.join("")},parse:function(t){for(var n=t.length,a=[],o=0;o<n;o++)a[o>>>2]|=(t.charCodeAt(o)&255)<<24-o%4*8;return new A.init(a,n)}},i=Y.Utf8={stringify:function(t){try{return decodeURIComponent(escape(M.stringify(t)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(t){return M.parse(unescape(encodeURIComponent(t)))}},u=m.BufferedBlockAlgorithm=E.extend({reset:function(){this._data=new A.init,this._nDataBytes=0},_append:function(t){typeof t=="string"&&(t=i.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(t){var n,a=this._data,o=a.words,d=a.sigBytes,B=this.blockSize,e=B*4,r=d/e;t?r=k.ceil(r):r=k.max((r|0)-this._minBufferSize,0);var w=r*B,b=k.min(w*4,d);if(w){for(var q=0;q<w;q+=B)this._doProcessBlock(o,q);n=o.splice(0,w),a.sigBytes-=b}return new A.init(n,b)},clone:function(){var t=E.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});m.Hasher=u.extend({cfg:E.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){u.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){t&&this._append(t);var n=this._doFinalize();return n},blockSize:16,_createHelper:function(t){return function(n,a){return new t.init(a).finalize(n)}},_createHmacHelper:function(t){return function(n,a){return new C.HMAC.init(t,a).finalize(n)}}});var C=j.algo={};return j}(Math);return g})}(D)),D.exports}var s={exports:{}},I;function x(){return I||(I=1,function(X,Z){(function(g,k){X.exports=k(se())})(l,function(g){return function(k){var te=g,K=te.lib,Q=K.WordArray,ne=K.Hasher,j=te.algo,m=[],E=[];(function(){function z(C){for(var t=k.sqrt(C),n=2;n<=t;n++)if(!(C%n))return!1;return!0}function M(C){return(C-(C|0))*4294967296|0}for(var i=2,u=0;u<64;)z(i)&&(u<8&&(m[u]=M(k.pow(i,1/2))),E[u]=M(k.pow(i,1/3)),u++),i++})();var A=[],Y=j.SHA256=ne.extend({_doReset:function(){this._hash=new Q.init(m.slice(0))},_doProcessBlock:function(z,M){for(var i=this._hash.words,u=i[0],C=i[1],t=i[2],n=i[3],a=i[4],o=i[5],d=i[6],B=i[7],e=0;e<64;e++){if(e<16)A[e]=z[M+e]|0;else{var r=A[e-15],w=(r<<25|r>>>7)^(r<<14|r>>>18)^r>>>3,b=A[e-2],q=(b<<15|b>>>17)^(b<<13|b>>>19)^b>>>10;A[e]=w+A[e-7]+q+A[e-16]}var G=a&o^~a&d,V=u&C^u&t^C&t,J=(u<<30|u>>>2)^(u<<19|u>>>13)^(u<<10|u>>>22),ie=(a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25),oe=B+ie+G+E[e]+A[e],ae=J+V;B=d,d=o,o=a,a=n+oe|0,n=t,t=C,C=u,u=oe+ae|0}i[0]=i[0]+u|0,i[1]=i[1]+C|0,i[2]=i[2]+t|0,i[3]=i[3]+n|0,i[4]=i[4]+a|0,i[5]=i[5]+o|0,i[6]=i[6]+d|0,i[7]=i[7]+B|0},_doFinalize:function(){var z=this._data,M=z.words,i=this._nDataBytes*8,u=z.sigBytes*8;return M[u>>>5]|=128<<24-u%32,M[(u+64>>>9<<4)+14]=k.floor(i/4294967296),M[(u+64>>>9<<4)+15]=i,z.sigBytes=M.length*4,this._process(),this._hash},clone:function(){var z=ne.clone.call(this);return z._hash=this._hash.clone(),z}});te.SHA256=ne._createHelper(Y),te.HmacSHA256=ne._createHmacHelper(Y)}(Math),g.SHA256})}(s)),s.exports}var N={exports:{}},O;function F(){return O||(O=1,function(X,Z){(function(g,k){X.exports=k(se())})(l,function(g){(function(){var k=g,te=k.lib,K=te.Base,Q=k.enc,ne=Q.Utf8,j=k.algo;j.HMAC=K.extend({init:function(m,E){m=this._hasher=new m.init,typeof E=="string"&&(E=ne.parse(E));var A=m.blockSize,Y=A*4;E.sigBytes>Y&&(E=m.finalize(E)),E.clamp();for(var z=this._oKey=E.clone(),M=this._iKey=E.clone(),i=z.words,u=M.words,C=0;C<A;C++)i[C]^=1549556828,u[C]^=909522486;z.sigBytes=M.sigBytes=Y,this.reset()},reset:function(){var m=this._hasher;m.reset(),m.update(this._iKey)},update:function(m){return this._hasher.update(m),this},finalize:function(m){var E=this._hasher,A=E.finalize(m);E.reset();var Y=E.finalize(this._oKey.clone().concat(A));return Y}})})()})}(N)),N.exports}(function(X,Z){(function(g,k,te){X.exports=k(se(),x(),F())})(l,function(g){return g.HmacSHA256})})(L);var re=L.exports;return re}();class h extends Error{}let v=!1;function _(l){throw v=!0,window.postMessage({type:"s2r:abort",value:{reason:""+l,signature:p(""+l,c)}}),new h(`StarShell threw a security error: "${l}"`)}function f(l){console.error(l),v=!0}const{addEventListener:H,Reflect:P,Reflect:{getOwnPropertyDescriptor:R,getPrototypeOf:S}}=window;function T(l,L,W=[]){try{const D=R.call(P,l,L);if(!D){W.push(l);const ee=S.call(P,l);return!ee||W.includes(ee)?null:T(ee,L,W)}return D}catch{return null}}function $(l,L,W=!1){try{const D=T(l,L);return D?"value"in D?D.value:W?l[L]:null:null}catch{return null}}const U={ratifyGlobal(){if(c){if(!T(window,"starshell"))return f("StarShell failed to ratify global since it is not defined.")}else return f("StarShell is refusing to ratify global since it never received a signing key from the extension.");const l=window.starshell;l.verify(W=>{if(v)return;if(W!==JSON.stringify(p("starshell",c)))return _("Invalid auth signature passed to ratifier");const D=l.verifiableStack();return{proof:D,signature:JSON.stringify(p(JSON.stringify(D),c))}})(l)}};window.addEventListener("message",l=>{if(y("Observed window message %o",l),!v&&window===$(l,"source",!0)){const L=$(l,"data",!0);let W;if(L&&typeof L=="object"&&typeof(W=$(L,"type"))=="string"){const D=U[W];if(!D)return;y("Received relay port message having registered type %o",l.data),D(L)}}})}function at(c){const y=browser.runtime.getManifest();for(const p of y.content_scripts||[])for(const h of p.js??[])if(h.startsWith(c))return h;for(const p of y.web_accessible_resources||[])if(typeof p=="string"){if(p.startsWith(c))return p}else for(const h of p.resources)if(h.startsWith(c))return h;return null}const ct=["file://*/*","http://*/*","https://*/*"],ft={matches:ct,runAt:"document_start",persistAcrossSessions:!0,allFrames:!0,world:"MAIN"},lt={mcs_keplr(c){return{...ft,id:"keplr_polyfill",js:[at("assets/src/script/mcs-keplr")],persistAcrossSessions:!0,...c}}},Se={blocked:!0};function Ae(c,y){let p;try{p=new RegExp(c.matches)}catch{return console.error(`Failed to parse policy match pattern "${c.matches}"`),!1}if(p.test(y.host)&&c.except){let h;try{h=new RegExp(c.except)}catch{return console.error(`Failed to parse policy match pattern "${c.except}"`),!1}if(h.test(y.host))return!1}return!0}const Re=Le({store:qe,class:class extends Oe{static forApp(y){return Re.open(p=>p.forApp(y))}forApp(y){let p=!1;for(const h of this._w_cache.hq)if(Ae(h,y)){if(h.action==="block")return Se;console.error(`Unknown hq policy action "${h.action}"`);continue}for(const h of this._w_cache.user)if(Ae(h,y)){if(h.action==="block")return Se;if(h.action==="trust")p=!0;else{console.error(`Unknown policy action "${h.action}"`);continue}}return{blocked:!1,trusted:p}}}}),pe=360,he=600;async function ut(c){const y=browser.runtime.getURL("src/entry/flow.html"),p=y+"?"+new URLSearchParams(c).toString(),[h,v]=await Promise.all([browser.system.display.getInfo(),(async()=>{const S=(await browser.storage.session.get(["display_info"]))?.display_info;if(S)return S;browser.windows.create({type:"popup",url:y+"?"+new URLSearchParams({headless:"info"}).toString(),focused:!0,width:pe,height:he});try{return(await dt("session","display_info",5*We))?.newValue}catch{}})()]),_={};for(const S of h)S.isEnabled&&(_[S.bounds.width+":"+S.bounds.height]=S);let f={};if(v){const S=v.width+":"+v.height,T=_[S];T&&(f={left:T.bounds.left+Math.round(v.width/2-pe/2),top:T.bounds.top+Math.round(v.height*.45-he/2)})}const H=await browser.windows.create({type:"popup",url:p,focused:!0,width:pe,height:he,...f});if(typeof H.id!="number")throw new Error("Failed to create popup window");if(!await browser.windows.get(H.id,{windowTypes:["popup"]}))throw new Error("Failed to locate popup window");const R=await new Promise(S=>{browser.tabs.onUpdated.addListener(function T($,U,l){H.id===l.windowId&&typeof $=="number"&&U.status==="complete"&&(browser.tabs.onUpdated.removeListener(T),S(l))})});return{window:H,tab:R}}async function fe(c,y=""){const p=`flow_${crypto.randomUUID()}`;await Ue("flow");const{window:h,tab:v}=await ut({comm:"broadcast",name:p}),_=new BroadcastChannel(p);return new Promise(f=>{function H(S){browser.windows.onRemoved.removeListener(R),_.removeEventListener("message",P),ze("flow"),f(S)}function P(S){const T=S.data;T.type==="completeFlow"&&(browser.windows.remove(h.id),H(T.value.answer))}_.onmessage=P;function R(S){S===h.id&&H(!1)}browser.windows.onRemoved.addListener(R,{windowTypes:["popup"]}),_.postMessage(c.flow)})}const Ie={sync:{},local:{},session:{},managed:{}};function dt(c,y,p=0){return new Promise((h,v)=>{const _=Ie[c],f=_[y]=_[y]||[];let H=-1,P=0;p>0&&(P=globalThis.setTimeout(()=>{f.splice(H,1),v(new Error("Timed out"))},p)),H=f.push(R=>{globalThis.clearTimeout(P),h(R)})})}function pt(c,y,p){const h=Ie[c],v=h[y];if(v?.length){h[y]=[];for(const _ of v)_(p)}}browser.storage.onChanged.addListener((c,y)=>{const h={sync:{async keplr_polyfill(v){const _=browser.scripting,f=lt.mcs_keplr(),H=!!(await _.getRegisteredContentScripts({ids:[f.id]})).length;v.newValue===!0?H||await _.registerContentScripts([f]):H||await _.unregisterContentScripts({ids:[f.id]})}},local:{},session:{},managed:{}}[y];if(h)for(const v in c){const _=c[v];pt(y,v,_);const f=h[v];f&&f(_)}});function Be(c){const{protocol:y,host:p}=new URL(c);return[(y||"").replace(/:$/,""),p]}function le(c,y){return console.warn(`${y}; blocked request from <${c.url}>`),!0}async function Ce(c,y,p){if(c==="http"){if(!nt.test(y))return le(p,"Non-secure HTTP contexts are not allowed to connect to wallet except for localhost")}else if(c==="file"){if(!await ot.get("allow_file_urls"))return le(p,"File URLs are not allowed to connect to wallet, unless 'allow_file_urls' setting is enabled")}else if(c!=="https")return le(p,`Scheme not allowed "${c}"`);return!1}const ht=(c,y,p)=>{function h(_=64){const f=new Uint8Array(_);return crypto.getRandomValues(f),Array.from(f).map(H=>H.toString(16).padStart(2,"0")).join("")}const v={panic(_,f){},async requestAdvertisement(_,f,H){const P=f.tab.id;if(!f.url){console.debug("Silently ignoring advertisement request from unknown source");return}const[R,S]=Be(f.url),T={tabId:P,href:f.url+""};if(console.info("get root key"),!await _e.getRootKey()){console.info("no root key");const l=await fe({flow:{type:"authenticate",page:T}});return console.info("flow completed"),l?await v.requestAdvertisement(_,f,H):void 0}if(console.info("root key exists"),await Ce(R,S,f))return;console.info("app passed scheme check");{let l=await rt.get(S,R),L=!1;l?L=!0:l={scheme:R,host:S,connections:{}};const W=await Re.forApp(l);if(console.info("got policy for app %o",W),W.blocked)return le(f,"App connection blocked by policy");if(!L&&!W.trusted){if(await fe({flow:{type:"requestAdvertisement",value:{app:l},page:T}}))return await v.requestAdvertisement(_,f,H);console.debug("User cancelled request");return}}console.debug(`Allowing <${f.url}> to receive advertisement`);const U={session:h()};browser.scripting.executeScript({target:{tabId:P},func:st,args:[U],world:"ISOLATED"}),browser.scripting.executeScript({target:{tabId:P},func:it,args:[U],world:"MAIN"}),H(U)},async flowBroadcast(_,f,H){const{key:P,config:R}=_;if(!f.url){console.debug("Silently ignoring advertisement request from unknown source");return}const S=R.flow.page={tabId:f.tab.id,href:f.url||R.flow.page?.href||""};if(console.info("get root key"),!await _e.getRootKey()){console.info("no root key");const L=await fe({flow:{type:"authenticate",page:S}});return console.info("flow completed"),L?await v.flowBroadcast(_,f,H):void 0}const[$,U]=Be(f.url);if(await Ce($,U,f))return;console.info("app passed scheme check");const l={scheme:$,host:U,connections:{}};R.flow.value.app=l,fe(R,P)}};if(console.debug("Service received message %o",c),typeof c=="object"&&typeof c.type=="string"){if(!y.tab||typeof y.tab.id!="number"){console.error("Refusing request from unknown sender");return}const _=c.type,f=v[_];if(f){const H=f(c.value,y,p);if(H&&typeof H.then=="function")return!0}}};browser.runtime.onMessage.addListener(ht);browser.runtime.onInstalled.addListener(async()=>{});browser.alarms.clearAll(()=>{console.warn("clear all"),browser.alarms.create("periodicChainQueries",{periodInMinutes:2}),browser.alarms.onAlarm.addListener(c=>{switch(c.name){case"periodicChainQueries":{ue();break}}}),ue()});let ye=!1;const ce={},Ee=()=>setTimeout(()=>{ye=!1,ue()},3*je);let _t=Ee();function xe(c,y,p,h,v,_){const f=c+":Receive",H=we.pathFrom(p);return ce[f]=y[`on${_}`](v,async(P,R)=>{if(P)delete ce[f],console.error(P);else if(R){const S=JSON.parse(R.result?.log||"[]");if(S?.length){for(const T of S[0].events)if(T.type==="transfer"){const $=Ge(T);let U=$.amount,l="";const L=Xe.exec($.amount);if(!L)Ve({text:`Failed to parse transfer amount "${$.amount}"`});else{const[,s,I]=L;for(const[x,N]of He(p.coins))if(I===N.denom){const O=new Je(s).shiftedBy(-N.decimals).toNumber();U=`${Qe(O,!0)} ${x}`,l=x;break}}let W=$.sender;const D=me.pathForContact(W,p.family),ee=await me.getContact(D);ee?W=ee.name:W=Ye(W);const se=Ze(et(tt(R.tx)));_==="Receive"?(browser.notifications.create(se,{type:"basic",title:`Received ${U} on ${p.name}`,message:`${W} sent ${U} to your ${h.name} account`,priority:1,iconUrl:"/media/vendor/logo-192px.png"}),await be.open(async s=>{await s.insert({time:Date.now(),type:"receive",data:{height:R.height,sender:$.sender,recipient:$.recipient,amount:$.amount,chain:H,coin:l,hash:""}})})):_==="Send"&&(browser.notifications.create(se,{type:"basic",title:`Sent ${U} on ${p.name}`,message:`${U} sent to ${W} from ${h.name} account`,priority:1,iconUrl:"/media/vendor/logo-192px.png"}),await be.open(async s=>{const I=s.filter({type:"pending",chain:H}).next();if(I?.value){const x=I.value,{data:{raw:N}}=x;N===globalThis.atob(R.tx)&&(await s.delete(x),await s.insert({time:Date.now(),type:"send",data:{...x.data,height:R.height,gas_used:R.result.gas_used,gas_wanted:R.result.gas_wanted,sender:$.sender,recipient:$.recipient,amount:$.amount}}),console.log({events:s.raw}))}}))}}}})}async function ue(){if(await Me.updateAll(),!await _e.getRootKey()||ye)return;ye=!0,clearTimeout(_t);const[c,y,p]=await Promise.all([De.read(),we.read(),de.read()]),h={};for(const[v,_]of p.entries())h[_.chain]=h[_.chain]||_;for(const[v,_]of He(h)){if(ce[v])continue;const f=y.at(v),H=de.pathFrom(_),P=de.activate(_,f),R=[];try{ce[v]=P.listen(["tm.event='NewBlock'"],(S,T)=>{if(S)delete ce[v];else if(T){R.push(Date.now());const $=T.block;for(;R.length>16;)R.shift();Fe({type:"blockInfo",value:{header:$.header,chain:v,network:H,recents:R}})}}),console.info({h_sockets:ce})}catch(S){ve({error:S})}for(const[S,T]of c.entries()){const $=we.addressFor(T.pubkey,f);if(P.hasRpc){const U=v+`
`+_.rpcHost+`
`;if(!ce[U])try{xe(U,P,f,T,$,"Receive"),xe(U,P,f,T,$,"Send")}catch(L){ve({error:L})}}}}Ee()}Ke({login(){ue()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
