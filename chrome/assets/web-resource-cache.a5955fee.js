var de=Object.defineProperty;var fe=(A,e,t)=>e in A?de(A,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):A[e]=t;var cA=(A,e,t)=>(fe(A,typeof e!="symbol"?e+"":e,t),t);function noop$1(){}const identity=A=>A;function assign(A,e){for(const t in e)A[t]=e[t];return A}function is_promise(A){return A&&typeof A=="object"&&typeof A.then=="function"}function run(A){return A()}function blank_object(){return Object.create(null)}function run_all(A){A.forEach(run)}function is_function(A){return typeof A=="function"}function safe_not_equal(A,e){return A!=A?e==e:A!==e||A&&typeof A=="object"||typeof A=="function"}let src_url_equal_anchor;function src_url_equal(A,e){return src_url_equal_anchor||(src_url_equal_anchor=document.createElement("a")),src_url_equal_anchor.href=e,A===src_url_equal_anchor.href}function is_empty(A){return Object.keys(A).length===0}function subscribe(A,...e){if(A==null)return noop$1;const t=A.subscribe(...e);return t.unsubscribe?()=>t.unsubscribe():t}function component_subscribe(A,e,t){A.$$.on_destroy.push(subscribe(e,t))}function create_slot(A,e,t,n){if(A){const i=get_slot_context(A,e,t,n);return A[0](i)}}function get_slot_context(A,e,t,n){return A[1]&&n?assign(t.ctx.slice(),A[1](n(e))):t.ctx}function get_slot_changes(A,e,t,n){if(A[2]&&n){const i=A[2](n(t));if(e.dirty===void 0)return i;if(typeof i=="object"){const o=[],r=Math.max(e.dirty.length,i.length);for(let a=0;a<r;a+=1)o[a]=e.dirty[a]|i[a];return o}return e.dirty|i}return e.dirty}function update_slot_base(A,e,t,n,i,o){if(i){const r=get_slot_context(e,t,n,o);A.p(r,i)}}function get_all_dirty_from_scope(A){if(A.ctx.length>32){const e=[],t=A.ctx.length/32;for(let n=0;n<t;n++)e[n]=-1;return e}return-1}function exclude_internal_props(A){const e={};for(const t in A)t[0]!=="$"&&(e[t]=A[t]);return e}function compute_rest_props(A,e){const t={};e=new Set(e);for(const n in A)!e.has(n)&&n[0]!=="$"&&(t[n]=A[n]);return t}function compute_slots(A){const e={};for(const t in A)e[t]=!0;return e}function null_to_empty(A){return A??""}function set_store_value(A,e,t){return A.set(t),e}const is_client=typeof window<"u";let now=is_client?()=>window.performance.now():()=>Date.now(),raf=is_client?A=>requestAnimationFrame(A):noop$1;const tasks=new Set;function run_tasks(A){tasks.forEach(e=>{e.c(A)||(tasks.delete(e),e.f())}),tasks.size!==0&&raf(run_tasks)}function loop(A){let e;return tasks.size===0&&raf(run_tasks),{promise:new Promise(t=>{tasks.add(e={c:A,f:t})}),abort(){tasks.delete(e)}}}function append(A,e){A.appendChild(e)}function get_root_for_style(A){if(!A)return document;const e=A.getRootNode?A.getRootNode():A.ownerDocument;return e&&e.host?e:A.ownerDocument}function append_empty_stylesheet(A){const e=element("style");return append_stylesheet(get_root_for_style(A),e),e.sheet}function append_stylesheet(A,e){append(A.head||A,e)}function insert(A,e,t){A.insertBefore(e,t||null)}function detach(A){A.parentNode.removeChild(A)}function destroy_each(A,e){for(let t=0;t<A.length;t+=1)A[t]&&A[t].d(e)}function element(A){return document.createElement(A)}function svg_element(A){return document.createElementNS("http://www.w3.org/2000/svg",A)}function text(A){return document.createTextNode(A)}function space(){return text(" ")}function empty(){return text("")}function listen(A,e,t,n){return A.addEventListener(e,t,n),()=>A.removeEventListener(e,t,n)}function prevent_default(A){return function(e){return e.preventDefault(),A.call(this,e)}}function attr(A,e,t){t==null?A.removeAttribute(e):A.getAttribute(e)!==t&&A.setAttribute(e,t)}function set_attributes(A,e){const t=Object.getOwnPropertyDescriptors(A.__proto__);for(const n in e)e[n]==null?A.removeAttribute(n):n==="style"?A.style.cssText=e[n]:n==="__value"?A.value=A[n]=e[n]:t[n]&&t[n].set?A[n]=e[n]:attr(A,n,e[n])}function set_custom_element_data(A,e,t){e in A?A[e]=typeof A[e]=="boolean"&&t===""?!0:t:attr(A,e,t)}function children(A){return Array.from(A.childNodes)}function set_data(A,e){e=""+e,A.wholeText!==e&&(A.data=e)}function set_input_value(A,e){A.value=e??""}function set_style(A,e,t,n){t===null?A.style.removeProperty(e):A.style.setProperty(e,t,n?"important":"")}let crossorigin;function is_crossorigin(){if(crossorigin===void 0){crossorigin=!1;try{typeof window<"u"&&window.parent&&window.parent.document}catch{crossorigin=!0}}return crossorigin}function add_resize_listener(A,e){getComputedStyle(A).position==="static"&&(A.style.position="relative");const n=element("iframe");n.setAttribute("style","display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"),n.setAttribute("aria-hidden","true"),n.tabIndex=-1;const i=is_crossorigin();let o;return i?(n.src="data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>",o=listen(window,"message",r=>{r.source===n.contentWindow&&e()})):(n.src="about:blank",n.onload=()=>{o=listen(n.contentWindow,"resize",e)}),append(A,n),()=>{(i||o&&n.contentWindow)&&o(),detach(n)}}function toggle_class(A,e,t){A.classList[t?"add":"remove"](e)}function custom_event(A,e,{bubbles:t=!1,cancelable:n=!1}={}){const i=document.createEvent("CustomEvent");return i.initCustomEvent(A,t,n,e),i}class HtmlTag{constructor(e=!1){this.is_svg=!1,this.is_svg=e,this.e=this.n=null}c(e){this.h(e)}m(e,t,n=null){this.e||(this.is_svg?this.e=svg_element(t.nodeName):this.e=element(t.nodeName),this.t=t,this.c(e)),this.i(n)}h(e){this.e.innerHTML=e,this.n=Array.from(this.e.childNodes)}i(e){for(let t=0;t<this.n.length;t+=1)insert(this.t,this.n[t],e)}p(e){this.d(),this.h(e),this.i(this.a)}d(){this.n.forEach(detach)}}const managed_styles=new Map;let active=0;function hash(A){let e=5381,t=A.length;for(;t--;)e=(e<<5)-e^A.charCodeAt(t);return e>>>0}function create_style_information(A,e){const t={stylesheet:append_empty_stylesheet(e),rules:{}};return managed_styles.set(A,t),t}function create_rule(A,e,t,n,i,o,r,a=0){const g=16.666/n;let I=`{
`;for(let C=0;C<=1;C+=g){const f=e+(t-e)*o(C);I+=C*100+`%{${r(f,1-f)}}
`}const s=I+`100% {${r(t,1-t)}}
}`,c=`__svelte_${hash(s)}_${a}`,B=get_root_for_style(A),{stylesheet:d,rules:l}=managed_styles.get(B)||create_style_information(B,A);l[c]||(l[c]=!0,d.insertRule(`@keyframes ${c} ${s}`,d.cssRules.length));const E=A.style.animation||"";return A.style.animation=`${E?`${E}, `:""}${c} ${n}ms linear ${i}ms 1 both`,active+=1,c}function delete_rule(A,e){const t=(A.style.animation||"").split(", "),n=t.filter(e?o=>o.indexOf(e)<0:o=>o.indexOf("__svelte")===-1),i=t.length-n.length;i&&(A.style.animation=n.join(", "),active-=i,active||clear_rules())}function clear_rules(){raf(()=>{active||(managed_styles.forEach(A=>{const{stylesheet:e}=A;let t=e.cssRules.length;for(;t--;)e.deleteRule(t);A.rules={}}),managed_styles.clear())})}let current_component;function set_current_component(A){current_component=A}function get_current_component(){if(!current_component)throw new Error("Function called outside component initialization");return current_component}function beforeUpdate(A){get_current_component().$$.before_update.push(A)}function onMount(A){get_current_component().$$.on_mount.push(A)}function afterUpdate(A){get_current_component().$$.after_update.push(A)}function onDestroy(A){get_current_component().$$.on_destroy.push(A)}function createEventDispatcher(){const A=get_current_component();return(e,t,{cancelable:n=!1}={})=>{const i=A.$$.callbacks[e];if(i){const o=custom_event(e,t,{cancelable:n});return i.slice().forEach(r=>{r.call(A,o)}),!o.defaultPrevented}return!0}}function setContext(A,e){return get_current_component().$$.context.set(A,e),e}function getContext(A){return get_current_component().$$.context.get(A)}function getAllContexts(){return get_current_component().$$.context}function bubble(A,e){const t=A.$$.callbacks[e.type];t&&t.slice().forEach(n=>n.call(this,e))}const dirty_components=[],binding_callbacks=[],render_callbacks=[],flush_callbacks=[],resolved_promise=Promise.resolve();let update_scheduled=!1;function schedule_update(){update_scheduled||(update_scheduled=!0,resolved_promise.then(flush))}function tick(){return schedule_update(),resolved_promise}function add_render_callback(A){render_callbacks.push(A)}function add_flush_callback(A){flush_callbacks.push(A)}const seen_callbacks=new Set;let flushidx=0;function flush(){const A=current_component;do{for(;flushidx<dirty_components.length;){const e=dirty_components[flushidx];flushidx++,set_current_component(e),update(e.$$)}for(set_current_component(null),dirty_components.length=0,flushidx=0;binding_callbacks.length;)binding_callbacks.pop()();for(let e=0;e<render_callbacks.length;e+=1){const t=render_callbacks[e];seen_callbacks.has(t)||(seen_callbacks.add(t),t())}render_callbacks.length=0}while(dirty_components.length);for(;flush_callbacks.length;)flush_callbacks.pop()();update_scheduled=!1,seen_callbacks.clear(),set_current_component(A)}function update(A){if(A.fragment!==null){A.update(),run_all(A.before_update);const e=A.dirty;A.dirty=[-1],A.fragment&&A.fragment.p(A.ctx,e),A.after_update.forEach(add_render_callback)}}let promise;function wait(){return promise||(promise=Promise.resolve(),promise.then(()=>{promise=null})),promise}function dispatch(A,e,t){A.dispatchEvent(custom_event(`${e?"intro":"outro"}${t}`))}const outroing=new Set;let outros;function group_outros(){outros={r:0,c:[],p:outros}}function check_outros(){outros.r||run_all(outros.c),outros=outros.p}function transition_in(A,e){A&&A.i&&(outroing.delete(A),A.i(e))}function transition_out(A,e,t,n){if(A&&A.o){if(outroing.has(A))return;outroing.add(A),outros.c.push(()=>{outroing.delete(A),n&&(t&&A.d(1),n())}),A.o(e)}else n&&n()}const null_transition={duration:0};function create_in_transition(A,e,t){let n=e(A,t),i=!1,o,r,a=0;function g(){o&&delete_rule(A,o)}function I(){const{delay:c=0,duration:B=300,easing:d=identity,tick:l=noop$1,css:E}=n||null_transition;E&&(o=create_rule(A,0,1,B,c,d,E,a++)),l(0,1);const C=now()+c,f=C+B;r&&r.abort(),i=!0,add_render_callback(()=>dispatch(A,!0,"start")),r=loop(u=>{if(i){if(u>=f)return l(1,0),dispatch(A,!0,"end"),g(),i=!1;if(u>=C){const p=d((u-C)/B);l(p,1-p)}}return i})}let s=!1;return{start(){s||(s=!0,delete_rule(A),is_function(n)?(n=n(),wait().then(I)):I())},invalidate(){s=!1},end(){i&&(g(),i=!1)}}}function create_out_transition(A,e,t){let n=e(A,t),i=!0,o;const r=outros;r.r+=1;function a(){const{delay:g=0,duration:I=300,easing:s=identity,tick:c=noop$1,css:B}=n||null_transition;B&&(o=create_rule(A,1,0,I,g,s,B));const d=now()+g,l=d+I;add_render_callback(()=>dispatch(A,!1,"start")),loop(E=>{if(i){if(E>=l)return c(0,1),dispatch(A,!1,"end"),--r.r||run_all(r.c),!1;if(E>=d){const C=s((E-d)/I);c(1-C,C)}}return i})}return is_function(n)?wait().then(()=>{n=n(),a()}):a(),{end(g){g&&n.tick&&n.tick(1,0),i&&(o&&delete_rule(A,o),i=!1)}}}function create_bidirectional_transition(A,e,t,n){let i=e(A,t),o=n?0:1,r=null,a=null,g=null;function I(){g&&delete_rule(A,g)}function s(B,d){const l=B.b-o;return d*=Math.abs(l),{a:o,b:B.b,d:l,duration:d,start:B.start,end:B.start+d,group:B.group}}function c(B){const{delay:d=0,duration:l=300,easing:E=identity,tick:C=noop$1,css:f}=i||null_transition,u={start:now()+d,b:B};B||(u.group=outros,outros.r+=1),r||a?a=u:(f&&(I(),g=create_rule(A,o,B,l,d,E,f)),B&&C(0,1),r=s(u,l),add_render_callback(()=>dispatch(A,B,"start")),loop(p=>{if(a&&p>a.start&&(r=s(a,l),a=null,dispatch(A,r.b,"start"),f&&(I(),g=create_rule(A,o,r.b,r.duration,0,E,i.css))),r){if(p>=r.end)C(o=r.b,1-o),dispatch(A,r.b,"end"),a||(r.b?I():--r.group.r||run_all(r.group.c)),r=null;else if(p>=r.start){const y=p-r.start;o=r.a+r.d*E(y/r.duration),C(o,1-o)}}return!!(r||a)}))}return{run(B){is_function(i)?wait().then(()=>{i=i(),c(B)}):c(B)},end(){I(),r=a=null}}}function handle_promise(A,e){const t=e.token={};function n(i,o,r,a){if(e.token!==t)return;e.resolved=a;let g=e.ctx;r!==void 0&&(g=g.slice(),g[r]=a);const I=i&&(e.current=i)(g);let s=!1;e.block&&(e.blocks?e.blocks.forEach((c,B)=>{B!==o&&c&&(group_outros(),transition_out(c,1,1,()=>{e.blocks[B]===c&&(e.blocks[B]=null)}),check_outros())}):e.block.d(1),I.c(),transition_in(I,1),I.m(e.mount(),e.anchor),s=!0),e.block=I,e.blocks&&(e.blocks[o]=I),s&&flush()}if(is_promise(A)){const i=get_current_component();if(A.then(o=>{set_current_component(i),n(e.then,1,e.value,o),set_current_component(null)},o=>{if(set_current_component(i),n(e.catch,2,e.error,o),set_current_component(null),!e.hasCatch)throw o}),e.current!==e.pending)return n(e.pending,0),!0}else{if(e.current!==e.then)return n(e.then,1,e.value,A),!0;e.resolved=A}}function update_await_block_branch(A,e,t){const n=e.slice(),{resolved:i}=A;A.current===A.then&&(n[A.value]=i),A.current===A.catch&&(n[A.error]=i),A.block.p(n,t)}function outro_and_destroy_block(A,e){transition_out(A,1,1,()=>{e.delete(A.key)})}function update_keyed_each(A,e,t,n,i,o,r,a,g,I,s,c){let B=A.length,d=o.length,l=B;const E={};for(;l--;)E[A[l].key]=l;const C=[],f=new Map,u=new Map;for(l=d;l--;){const F=c(i,o,l),G=t(F);let Q=r.get(G);Q?n&&Q.p(F,e):(Q=I(G,F),Q.c()),f.set(G,C[l]=Q),G in E&&u.set(G,Math.abs(l-E[G]))}const p=new Set,y=new Set;function D(F){transition_in(F,1),F.m(a,s),r.set(F.key,F),s=F.first,d--}for(;B&&d;){const F=C[d-1],G=A[B-1],Q=F.key,h=G.key;F===G?(s=F.first,B--,d--):f.has(h)?!r.has(Q)||p.has(Q)?D(F):y.has(h)?B--:u.get(Q)>u.get(h)?(y.add(Q),D(F)):(p.add(h),B--):(g(G,r),B--)}for(;B--;){const F=A[B];f.has(F.key)||g(F,r)}for(;d;)D(C[d-1]);return C}function get_spread_update(A,e){const t={},n={},i={$$scope:1};let o=A.length;for(;o--;){const r=A[o],a=e[o];if(a){for(const g in r)g in a||(n[g]=1);for(const g in a)i[g]||(t[g]=a[g],i[g]=1);A[o]=a}else for(const g in r)i[g]=1}for(const r in n)r in t||(t[r]=void 0);return t}function get_spread_object(A){return typeof A=="object"&&A!==null?A:{}}function bind(A,e,t){const n=A.$$.props[e];n!==void 0&&(A.$$.bound[n]=t,t(A.$$.ctx[n]))}function create_component(A){A&&A.c()}function mount_component(A,e,t,n){const{fragment:i,on_mount:o,on_destroy:r,after_update:a}=A.$$;i&&i.m(e,t),n||add_render_callback(()=>{const g=o.map(run).filter(is_function);r?r.push(...g):run_all(g),A.$$.on_mount=[]}),a.forEach(add_render_callback)}function destroy_component(A,e){const t=A.$$;t.fragment!==null&&(run_all(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function make_dirty(A,e){A.$$.dirty[0]===-1&&(dirty_components.push(A),schedule_update(),A.$$.dirty.fill(0)),A.$$.dirty[e/31|0]|=1<<e%31}function init(A,e,t,n,i,o,r,a=[-1]){const g=current_component;set_current_component(A);const I=A.$$={fragment:null,ctx:null,props:o,update:noop$1,not_equal:i,bound:blank_object(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(g?g.$$.context:[])),callbacks:blank_object(),dirty:a,skip_bound:!1,root:e.target||g.$$.root};r&&r(I.root);let s=!1;if(I.ctx=t?t(A,e.props||{},(c,B,...d)=>{const l=d.length?d[0]:B;return I.ctx&&i(I.ctx[c],I.ctx[c]=l)&&(!I.skip_bound&&I.bound[c]&&I.bound[c](l),s&&make_dirty(A,c)),B}):[],I.update(),s=!0,run_all(I.before_update),I.fragment=n?n(I.ctx):!1,e.target){if(e.hydrate){const c=children(e.target);I.fragment&&I.fragment.l(c),c.forEach(detach)}else I.fragment&&I.fragment.c();e.intro&&transition_in(A.$$.fragment),mount_component(A,e.target,e.anchor,e.customElement),flush()}set_current_component(g)}class SvelteComponent{$destroy(){destroy_component(this,1),this.$destroy=noop$1}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const i=n.indexOf(t);i!==-1&&n.splice(i,1)}}$set(e){this.$$set&&!is_empty(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const F_NOOP=()=>{},F_IDENTITY=A=>A,proper=A=>A.split(/\s+/g).map(e=>e[0].toUpperCase()+e.slice(1)).join(" ");function objects_might_differ(A,e){const t=Object.keys(A),n=Object.keys(e);if(t.length!==n.length)return!0;for(const o in A)if(e[o]!==A[o])return!0;return!1}function fold(A,e){const t={};let n=0;for(const i of A)Object.assign(t,e(i,n++));return t}function ode(A){return Object.entries(A)}function ofe(A){return Object.fromEntries(A)}function oderac(A,e,t=!1){return ode(A).reduce((n,[i,o],r)=>[...n,e(i,o,r)],[])}function oderom(A,e){return ode(A).reduce((t,[n,i])=>({...t,...e(n,i)}),{})}function timeout(A){return new Promise(e=>{setTimeout(()=>{e()},A)})}function with_timeout(A){return new Promise((e,t)=>{let n=!1;setTimeout(()=>{n||(n=!0,t(A.trip()))},A.duration),A.run().then(i=>{n||(n=!0,e(i))}).catch(t)})}function forever(A){return new Promise(F_NOOP)}var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function commonjsRequire(A){throw new Error('Could not dynamically require "'+A+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var dist={};Object.defineProperty(dist,"__esModule",{value:!0});dist.bech32m=bech32=dist.bech32=void 0;const ALPHABET="qpzry9x8gf2tvdw0s3jn54khce6mua7l",ALPHABET_MAP={};for(let A=0;A<ALPHABET.length;A++){const e=ALPHABET.charAt(A);ALPHABET_MAP[e]=A}function polymodStep(A){const e=A>>25;return(A&33554431)<<5^-(e>>0&1)&996825010^-(e>>1&1)&642813549^-(e>>2&1)&513874426^-(e>>3&1)&1027748829^-(e>>4&1)&705979059}function prefixChk(A){let e=1;for(let t=0;t<A.length;++t){const n=A.charCodeAt(t);if(n<33||n>126)return"Invalid prefix ("+A+")";e=polymodStep(e)^n>>5}e=polymodStep(e);for(let t=0;t<A.length;++t){const n=A.charCodeAt(t);e=polymodStep(e)^n&31}return e}function convert(A,e,t,n){let i=0,o=0;const r=(1<<t)-1,a=[];for(let g=0;g<A.length;++g)for(i=i<<e|A[g],o+=e;o>=t;)o-=t,a.push(i>>o&r);if(n)o>0&&a.push(i<<t-o&r);else{if(o>=e)return"Excess padding";if(i<<t-o&r)return"Non-zero padding"}return a}function toWords(A){return convert(A,8,5,!0)}function fromWordsUnsafe(A){const e=convert(A,5,8,!1);if(Array.isArray(e))return e}function fromWords(A){const e=convert(A,5,8,!1);if(Array.isArray(e))return e;throw new Error(e)}function getLibraryFromEncoding(A){let e;A==="bech32"?e=1:e=734539939;function t(r,a,g){if(g=g||90,r.length+7+a.length>g)throw new TypeError("Exceeds length limit");r=r.toLowerCase();let I=prefixChk(r);if(typeof I=="string")throw new Error(I);let s=r+"1";for(let c=0;c<a.length;++c){const B=a[c];if(B>>5!==0)throw new Error("Non 5-bit word");I=polymodStep(I)^B,s+=ALPHABET.charAt(B)}for(let c=0;c<6;++c)I=polymodStep(I);I^=e;for(let c=0;c<6;++c){const B=I>>(5-c)*5&31;s+=ALPHABET.charAt(B)}return s}function n(r,a){if(a=a||90,r.length<8)return r+" too short";if(r.length>a)return"Exceeds length limit";const g=r.toLowerCase(),I=r.toUpperCase();if(r!==g&&r!==I)return"Mixed-case string "+r;r=g;const s=r.lastIndexOf("1");if(s===-1)return"No separator character for "+r;if(s===0)return"Missing prefix for "+r;const c=r.slice(0,s),B=r.slice(s+1);if(B.length<6)return"Data too short";let d=prefixChk(c);if(typeof d=="string")return d;const l=[];for(let E=0;E<B.length;++E){const C=B.charAt(E),f=ALPHABET_MAP[C];if(f===void 0)return"Unknown character "+C;d=polymodStep(d)^f,!(E+6>=B.length)&&l.push(f)}return d!==e?"Invalid checksum for "+r:{prefix:c,words:l}}function i(r,a){const g=n(r,a);if(typeof g=="object")return g}function o(r,a){const g=n(r,a);if(typeof g=="object")return g;throw new Error(g)}return{decodeUnsafe:i,decode:o,encode:t,toWords,fromWordsUnsafe,fromWords}}var bech32=dist.bech32=getLibraryFromEncoding("bech32");dist.bech32m=getLibraryFromEncoding("bech32m");if(typeof window<"u"&&window?.location?.hostname==="localhost"){const A=globalThis.chrome;if(!A.storage){let e=function(t){return{async get(n){const i=Array.isArray(n)?n:[n];return fold(i,o=>{const r=localStorage.getItem(`chrome.${t}:${o}`);return{[o]:typeof r=="string"?JSON.parse(r):void 0}})},async set(n){for(const[i,o]of ode(n))localStorage.setItem(`chrome.${t}:${i}`,JSON.stringify(o))},async clear(){const n=localStorage.length;for(let i=n;i>=0;i--){const o=localStorage.key(i);!o||o.startsWith(`chrome.${t}:`)&&localStorage.removeItem(o)}},async remove(n){const i=Array.isArray(n)?n:[n];for(const o of i)localStorage.removeItem(`chrome.${t}:${o}`)}}};A.storage={local:e("local"),sync:e("sync"),session:e("session")}}A.runtime||(A.runtime={getURL(e){debugger},getManifest(){debugger},sendMessage(e){debugger},onMessage:{addListener(e){debugger},removeListener(){debugger}},onInstalled:{addListener(e){debugger},removeListener(){debugger}}}),A.tabs||(A.tabs={create(e){window.open(e.url,"_blank")},get(e){debugger},reload(e){debugger},onUpdated:{addEventListener(){debugger},removeListener(){debugger}}}),A.windows||(A.windows={create(e){window.open(e.url,"_blank")},get(e){debugger},remove(e){debugger},onRemoved:{addEventListener(){debugger},removeListener(){debugger}}}),A.extension||(A.extension={getBackgroundPage(){debugger}}),A.scripting||(A.scripting={executeScript(){debugger}})}const chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",base64ToBin=A=>{const e=new Uint8Array(123);for(let g=0;g<chars.length;g++)e[chars.charCodeAt(g)]=g;const t=A.length*.75,n=A.length,i=A[A.length-1]==="="?A[A.length-2]==="="?t-2:t-1:t,o=new ArrayBuffer(i),r=new Uint8Array(o);let a=0;for(let g=0;g<n;g+=4){const I=e[A.charCodeAt(g)],s=e[A.charCodeAt(g+1)],c=e[A.charCodeAt(g+2)],B=e[A.charCodeAt(g+3)];r[a++]=I<<2|s>>4,r[a++]=(s&15)<<4|c>>2,r[a++]=(c&3)<<6|B&63}return r},instantiateRustWasm=async(A,e,t,n,i,o)=>{const r=(await WebAssembly.instantiate(A,{[e]:{__wbindgen_throw:(p,y)=>{throw new Error(Array.from(c().subarray(p,p+y)).map(D=>String.fromCharCode(D)).join(""))}}})).instance.exports;let a,g,I;const s=()=>(I===void 0&&(I=r.__wbindgen_global_argument_ptr()),I);function c(){return(a===void 0||a.buffer!==r.memory.buffer)&&(a=new Uint8Array(r.memory.buffer)),a}const B=()=>((g===void 0||g.buffer!==r.memory.buffer)&&(g=new Uint32Array(r.memory.buffer)),g),d=p=>{const y=r.__wbindgen_malloc(p.length);return c().set(p,y),[y,p.length]},l=(p,y)=>c().subarray(p,p+y);return{final:p=>{const[y,D]=d(p),F=s();try{r[o](F,y,D);const G=B(),Q=G[F/4],h=G[F/4+1],_=l(Q,h).slice();return r.__wbindgen_free(Q,h),_}finally{p.set(c().subarray(y/1,y/1+D)),r.__wbindgen_free(y,D)}},hash:p=>{const[y,D]=d(p),F=s();try{r[t](F,y,D);const G=B(),Q=G[F/4],h=G[F/4+1],_=l(Q,h).slice();return r.__wbindgen_free(Q,h),_}finally{r.__wbindgen_free(y,D)}},init:()=>{const p=s();r[n](p);const y=B(),D=y[p/4],F=y[p/4+1],G=l(D,F).slice();return r.__wbindgen_free(D,F),G},update:(p,y)=>{const[D,F]=d(p),[G,Q]=d(y),h=s();try{r[i](h,D,F,G,Q);const _=B(),b=_[h/4],w=_[h/4+1],S=l(b,w).slice();return r.__wbindgen_free(b,w),S}finally{p.set(c().subarray(D/1,D/1+F)),r.__wbindgen_free(D,F),r.__wbindgen_free(G,Q)}}}},ripemd160Base64Bytes="",SECP256K1_FLAGS_TYPE_CONTEXT=1<<0,SECP256K1_FLAGS_TYPE_COMPRESSION=1<<1,SECP256K1_FLAGS_BIT_CONTEXT_VERIFY=1<<8,SECP256K1_FLAGS_BIT_CONTEXT_SIGN=1<<9,SECP256K1_FLAGS_BIT_COMPRESSION=1<<8,SECP256K1_CONTEXT_VERIFY=SECP256K1_FLAGS_TYPE_CONTEXT|SECP256K1_FLAGS_BIT_CONTEXT_VERIFY,SECP256K1_CONTEXT_SIGN=SECP256K1_FLAGS_TYPE_CONTEXT|SECP256K1_FLAGS_BIT_CONTEXT_SIGN,SECP256K1_CONTEXT_NONE=SECP256K1_FLAGS_TYPE_CONTEXT,SECP256K1_EC_COMPRESSED=SECP256K1_FLAGS_TYPE_COMPRESSION|SECP256K1_FLAGS_BIT_COMPRESSION,SECP256K1_EC_UNCOMPRESSED=SECP256K1_FLAGS_TYPE_COMPRESSION;var ContextFlag;(function(A){A[A.NONE=SECP256K1_CONTEXT_NONE]="NONE",A[A.VERIFY=SECP256K1_CONTEXT_VERIFY]="VERIFY",A[A.SIGN=SECP256K1_CONTEXT_SIGN]="SIGN",A[A.BOTH=SECP256K1_CONTEXT_SIGN|SECP256K1_CONTEXT_VERIFY]="BOTH"})(ContextFlag||(ContextFlag={}));var CompressionFlag;(function(A){A[A.COMPRESSED=SECP256K1_EC_COMPRESSED]="COMPRESSED",A[A.UNCOMPRESSED=SECP256K1_EC_UNCOMPRESSED]="UNCOMPRESSED"})(CompressionFlag||(CompressionFlag={}));const secp256k1Base64Bytes="",wrapSecp256k1Wasm$1=(A,e,t)=>({contextCreate:n=>A.exports._secp256k1_context_create(n),contextRandomize:(n,i)=>A.exports._secp256k1_context_randomize(n,i),ecdh:(n,i,o,r)=>A.exports._secp256k1_ecdh(n,i,o,r),free:n=>A.exports._free(n),heapU32:t,heapU8:e,instance:A,malloc:n=>A.exports._malloc(n),mallocSizeT:n=>{const i=A.exports._malloc(4),o=i>>2;return t.set([n],o),i},mallocUint8Array:n=>{const i=A.exports._malloc(n.length);return e.set(n,i),i},privkeyTweakAdd:(n,i,o)=>A.exports._secp256k1_ec_privkey_tweak_add(n,i,o),privkeyTweakMul:(n,i,o)=>A.exports._secp256k1_ec_privkey_tweak_mul(n,i,o),pubkeyCreate:(n,i,o)=>A.exports._secp256k1_ec_pubkey_create(n,i,o),pubkeyParse:(n,i,o,r)=>A.exports._secp256k1_ec_pubkey_parse(n,i,o,r),pubkeySerialize:(n,i,o,r,a)=>A.exports._secp256k1_ec_pubkey_serialize(n,i,o,r,a),pubkeyTweakAdd:(n,i,o)=>A.exports._secp256k1_ec_pubkey_tweak_add(n,i,o),pubkeyTweakMul:(n,i,o)=>A.exports._secp256k1_ec_pubkey_tweak_mul(n,i,o),readHeapU8:(n,i)=>new Uint8Array(e.buffer,n,i),readSizeT:n=>{const i=n>>2;return t[i]},recover:(n,i,o,r)=>A.exports._secp256k1_ecdsa_recover(n,i,o,r),recoverableSignatureParse:(n,i,o,r)=>A.exports._secp256k1_ecdsa_recoverable_signature_parse_compact(n,i,o,r),recoverableSignatureSerialize:(n,i,o,r)=>A.exports._secp256k1_ecdsa_recoverable_signature_serialize_compact(n,i,o,r),schnorrSign:(n,i,o,r)=>A.exports._secp256k1_schnorrsig_sign(n,i,o,r),schnorrVerify:(n,i,o,r)=>A.exports._secp256k1_schnorrsig_verify(n,i,o,r),seckeyVerify:(n,i)=>A.exports._secp256k1_ec_seckey_verify(n,i),sign:(n,i,o,r,a)=>A.exports._secp256k1_ecdsa_sign(n,i,o,r,0,a),signRecoverable:(n,i,o,r)=>A.exports._secp256k1_ecdsa_sign_recoverable(n,i,o,r),signatureNormalize:(n,i,o)=>A.exports._secp256k1_ecdsa_signature_normalize(n,i,o),signatureParseCompact:(n,i,o)=>A.exports._secp256k1_ecdsa_signature_parse_compact(n,i,o),signatureParseDER:(n,i,o,r)=>A.exports._secp256k1_ecdsa_signature_parse_der(n,i,o,r),signatureSerializeCompact:(n,i,o)=>A.exports._secp256k1_ecdsa_signature_serialize_compact(n,i,o),signatureSerializeDER:(n,i,o,r)=>A.exports._secp256k1_ecdsa_signature_serialize_der(n,i,o,r),verify:(n,i,o,r)=>A.exports._secp256k1_ecdsa_verify(n,i,o,r)}),isLittleEndian=A=>{const n=new Int16Array(A),i=new Int32Array(A),o=new Uint8Array(A);return i[0]=1668509029,n[1]=25459,!(o[2]!==115||o[3]!==99)},alignMemory=(A,e)=>Math.ceil(e/A)*A,instantiateSecp256k1WasmBytes=async A=>{const r=new WebAssembly.Memory({initial:256,maximum:256});if(!isLittleEndian(r.buffer))throw new Error("Runtime error: expected the system to be little-endian.");const a=1024,g=a+67696+16,I=g,c=g+4+15&-16,B=alignMemory(16,c),l=B+5242880,E=alignMemory(16,l),C=new Uint8Array(r.buffer),f=new Int32Array(r.buffer),u=new Uint32Array(r.buffer);f[I>>2]=E;const p=16,y=16;let D;const G={env:{...{DYNAMICTOP_PTR:I,STACKTOP:B,___setErrNo:Q=>(D!==void 0&&(f[D()>>2]=Q),Q),___syscall140:()=>{throw new Error("___syscall140")},___syscall146:()=>{throw new Error("___syscall146")},___syscall6:()=>{throw new Error("___syscall6")},_abort:(Q="Secp256k1 Error")=>{throw new Error(Q)},_emscripten_memcpy_big:(Q,h,_)=>(C.set(C.subarray(h,h+_),Q),Q),abort:(Q="Secp256k1 Error")=>{throw new Error(Q)},abortOnCannotGrowMemory:()=>{throw new Error("Secp256k1 Error: abortOnCannotGrowMemory was called.")},enlargeMemory:()=>{throw new Error("Secp256k1 Error: enlargeMemory was called.")},getTotalMemory:()=>16777216},memory:r,memoryBase:a,table:new WebAssembly.Table({element:"anyfunc",initial:p,maximum:y}),tableBase:0},global:{Infinity:1/0,NaN:NaN}};return WebAssembly.instantiate(A,G).then(Q=>(D=Q.instance.exports.___errno_location,wrapSecp256k1Wasm$1(Q.instance,C,u)))},getEmbeddedSecp256k1Binary=()=>base64ToBin(secp256k1Base64Bytes).buffer,instantiateSecp256k1Wasm=async()=>instantiateSecp256k1WasmBytes(getEmbeddedSecp256k1Binary()),sha256Base64Bytes="",instantiateRipemd160Bytes=async A=>{const e=await instantiateRustWasm(A,"./ripemd160","ripemd160","ripemd160_init","ripemd160_update","ripemd160_final");return{final:e.final,hash:e.hash,init:e.init,update:e.update}},getEmbeddedRipemd160Binary=()=>base64ToBin(ripemd160Base64Bytes).buffer,cachedRipemd160={},instantiateRipemd160=async()=>{if(cachedRipemd160.cache!==void 0)return cachedRipemd160.cache;const A=instantiateRipemd160Bytes(getEmbeddedRipemd160Binary());return cachedRipemd160.cache=A,A},wrapSecp256k1Wasm=(A,e)=>{const t=A.contextCreate(ContextFlag.BOTH),n=A.malloc(72),i=A.malloc(65),o=A.malloc(32),r=A.malloc(32),a=A.malloc(64),g=A.malloc(32),I=A.malloc(64),s=A.malloc(64),c=A.malloc(32),B=A.malloc(65),d=A.malloc(4),l=d>>2,E=()=>A.heapU32[l],C=A.malloc(4),f=C>>2,u=(T,V)=>{const eA=new Uint8Array(V);return eA.set(T),eA},p=T=>{const V=u(T,65);return A.heapU8.set(V,i),A.pubkeyParse(t,a,i,T.length)===1},y=T=>{A.heapU32.set([T],f)},D=()=>A.heapU32[f],F=(T,V)=>(y(T),A.pubkeySerialize(t,i,C,a,V),A.readHeapU8(i,D()).slice()),G=T=>T?F(33,CompressionFlag.COMPRESSED):F(65,CompressionFlag.UNCOMPRESSED),Q=T=>V=>{if(!p(V))throw new Error("Failed to parse public key.");return G(T)},h=(T,V)=>{const eA=u(T,72);return A.heapU8.set(eA,n),V?A.signatureParseDER(t,I,n,T.length)===1:A.signatureParseCompact(t,I,n)===1},_=(T,V)=>{if(!h(T,V))throw new Error("Failed to parse signature.")},b=()=>(A.signatureSerializeCompact(t,n,I),A.readHeapU8(n,64).slice()),w=()=>(y(72),A.signatureSerializeDER(t,n,C,I),A.readHeapU8(n,D()).slice()),S=T=>V=>(_(V,T),T?b():w()),k=T=>{const V=u(T,32);A.heapU8.set(V,c)},m=(T,V)=>{A.heapU8.fill(0,T,T+V)},N=()=>{m(c,32)},H=(T,V)=>{k(T);const eA=V();return N(),eA},M=T=>V=>{if(H(V,()=>A.pubkeyCreate(t,a,c)!==1))throw new Error("Cannot derive public key from invalid private key.");return G(T)},U=T=>{const V=u(T,32);A.heapU8.set(V,o)},v=T=>{const V=u(T,32);A.heapU8.set(V,r)},L=()=>{A.signatureNormalize(t,I,I)},x=(T,V)=>eA=>(_(eA,T),V&&L(),T?w():b()),q=(T,V,eA)=>{const IA=h(T,V);return eA&&L(),IA},P=T=>(V,eA,IA)=>(U(eA),IA&&v(IA),H(V,()=>{if(A.sign(t,I,o,c,IA?r:0)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return T?(y(72),A.signatureSerializeDER(t,n,C,I),A.readHeapU8(n,D()).slice()):(A.signatureSerializeCompact(t,n,I),A.readHeapU8(n,64).slice())})),O=()=>(T,V)=>(U(V),H(T,()=>{if(A.schnorrSign(t,s,o,c)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return A.readHeapU8(s,64).slice()})),Z=()=>(T,V)=>{if(!p(V))throw new Error("ECDH Key Exchange failed. Failed to parse public key.");return H(T,()=>{if(A.ecdh(t,g,a,c)!==1)throw new Error("ECDH Key Exchange failed. The private key is not valid.");return A.readHeapU8(g,32).slice()})},AA=T=>(U(T),A.verify(t,I,o,a)===1),Y=(T,V)=>(eA,IA,gA)=>p(IA)&&q(eA,T,V)&&AA(gA),X=(T,V)=>{U(T);const eA=u(V,64);return A.heapU8.set(eA,s),A.schnorrVerify(t,s,o,a)===1},nA=()=>(T,V,eA)=>p(V)?X(eA,T):!1,rA=(T,V)=>(U(V),H(T,()=>{if(A.signRecoverable(t,B,o,c)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return A.recoverableSignatureSerialize(t,n,d,B),{recoveryId:E(),signature:A.readHeapU8(n,64).slice()}})),aA=T=>(V,eA,IA)=>{U(IA);const gA=u(V,72);if(A.heapU8.set(gA,n),A.recoverableSignatureParse(t,B,n,eA)!==1)throw new Error("Failed to recover public key. Could not parse signature.");if(A.recover(t,a,B,o)!==1)throw new Error("Failed to recover public key. The compact signature, recovery, or message hash is invalid.");return G(T)},tA=(T,V)=>(U(V),H(T,()=>{if(A.privkeyTweakAdd(t,c,o)!==1)throw new Error("Private key is invalid or adding failed.");return A.readHeapU8(c,32).slice()})),J=(T,V)=>(U(V),H(T,()=>{if(A.privkeyTweakMul(t,c,o)!==1)throw new Error("Private key is invalid or multiplying failed.");return A.readHeapU8(c,32).slice()})),j=T=>(V,eA)=>{if(!p(V))throw new Error("Failed to parse public key.");if(U(eA),A.pubkeyTweakAdd(t,a,o)!==1)throw new Error("Adding failed");return G(T)},CA=T=>(V,eA)=>{if(!p(V))throw new Error("Failed to parse public key.");if(U(eA),A.pubkeyTweakMul(t,a,o)!==1)throw new Error("Multiplying failed");return G(T)};if(e!==void 0){const T=o,V=u(e,32);A.heapU8.set(V,T),A.contextRandomize(t,T),m(T,32)}return{addTweakPrivateKey:tA,addTweakPublicKeyCompressed:j(!0),addTweakPublicKeyUncompressed:j(!1),compressPublicKey:Q(!0),derivePublicKeyCompressed:M(!0),derivePublicKeyUncompressed:M(!1),ecdh:Z(),malleateSignatureCompact:x(!1,!1),malleateSignatureDER:x(!0,!1),mulTweakPrivateKey:J,mulTweakPublicKeyCompressed:CA(!0),mulTweakPublicKeyUncompressed:CA(!1),normalizeSignatureCompact:x(!1,!0),normalizeSignatureDER:x(!0,!0),recoverPublicKeyCompressed:aA(!0),recoverPublicKeyUncompressed:aA(!1),signMessageHashCompact:P(!1),signMessageHashDER:P(!0),signMessageHashRecoverableCompact:rA,signMessageHashSchnorr:O(),signatureCompactToDER:S(!1),signatureDERToCompact:S(!0),uncompressPublicKey:Q(!1),validatePrivateKey:T=>H(T,()=>A.seckeyVerify(t,c)===1),validatePublicKey:p,verifySignatureCompact:Y(!1,!0),verifySignatureCompactLowS:Y(!1,!1),verifySignatureDER:Y(!0,!0),verifySignatureDERLowS:Y(!0,!1),verifySignatureSchnorr:nA()}},cachedSecp256k1={},instantiateSecp256k1=async A=>{if(cachedSecp256k1.cache!==void 0)return cachedSecp256k1.cache;const e=Promise.resolve(wrapSecp256k1Wasm(await instantiateSecp256k1Wasm(),A));return cachedSecp256k1.cache=e,e},instantiateSha256Bytes=async A=>{const e=await instantiateRustWasm(A,"./sha256","sha256","sha256_init","sha256_update","sha256_final");return{final:e.final,hash:e.hash,init:e.init,update:e.update}},getEmbeddedSha256Binary=()=>base64ToBin(sha256Base64Bytes).buffer,cachedSha256={},instantiateSha256=async()=>{if(cachedSha256.cache!==void 0)return cachedSha256.cache;const A=instantiateSha256Bytes(getEmbeddedSha256Binary());return cachedSha256.cache=A,A};var sha256Uint8array={};Object.defineProperty(sha256Uint8array,"__esModule",{value:!0});sha256Uint8array.Hash=createHash_1=sha256Uint8array.createHash=void 0;const K=[1116352408,1899447441,-1245643825,-373957723,961987163,1508970993,-1841331548,-1424204075,-670586216,310598401,607225278,1426881987,1925078388,-2132889090,-1680079193,-1046744716,-459576895,-272742522,264347078,604807628,770255983,1249150122,1555081692,1996064986,-1740746414,-1473132947,-1341970488,-1084653625,-958395405,-710438585,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,-2117940946,-1838011259,-1564481375,-1474664885,-1035236496,-949202525,-778901479,-694614492,-200395387,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,-2067236844,-1933114872,-1866530822,-1538233109,-1090935817,-965641998],algorithms={sha256:1};function createHash(A){if(A&&!algorithms[A]&&!algorithms[A.toLowerCase()])throw new Error("Digest method not supported");return new Hash}var createHash_1=sha256Uint8array.createHash=createHash;class Hash{constructor(){this.A=1779033703,this.B=-1150833019,this.C=1013904242,this.D=-1521486534,this.E=1359893119,this.F=-1694144372,this.G=528734635,this.H=1541459225,this._size=0,this._sp=0,(!sharedBuffer||sharedOffset>=8e3)&&(sharedBuffer=new ArrayBuffer(8e3),sharedOffset=0),this._byte=new Uint8Array(sharedBuffer,sharedOffset,80),this._word=new Int32Array(sharedBuffer,sharedOffset,20),sharedOffset+=80}update(e){if(typeof e=="string")return this._utf8(e);if(e==null)throw new TypeError("Invalid type: "+typeof e);const t=e.byteOffset,n=e.byteLength;let i=n/64|0,o=0;if(i&&!(t&3)&&!(this._size%64)){const a=new Int32Array(e.buffer,t,i*16);for(;i--;)this._int32(a,o>>2),o+=64;this._size+=o}if(e.BYTES_PER_ELEMENT!==1&&e.buffer){const a=new Uint8Array(e.buffer,t+o,n-o);return this._uint8(a)}return o===n?this:this._uint8(e,o)}_uint8(e,t){const{_byte:n,_word:i}=this,o=e.length;for(t=t|0;t<o;){const r=this._size%64;let a=r;for(;t<o&&a<64;)n[a++]=e[t++];a>=64&&this._int32(i),this._size+=a-r}return this}_utf8(e){const{_byte:t,_word:n}=this,i=e.length;let o=this._sp;for(let r=0;r<i;){const a=this._size%64;let g=a;for(;r<i&&g<64;){let I=e.charCodeAt(r++)|0;I<128?t[g++]=I:I<2048?(t[g++]=192|I>>>6,t[g++]=128|I&63):I<55296||I>57343?(t[g++]=224|I>>>12,t[g++]=128|I>>>6&63,t[g++]=128|I&63):o?(I=((o&1023)<<10)+(I&1023)+65536,t[g++]=240|I>>>18,t[g++]=128|I>>>12&63,t[g++]=128|I>>>6&63,t[g++]=128|I&63,o=0):o=I}g>=64&&(this._int32(n),n[0]=n[16]),this._size+=g-a}return this._sp=o,this}_int32(e,t){let{A:n,B:i,C:o,D:r,E:a,F:g,G:I,H:s}=this,c=0;for(t=t|0;c<16;)W[c++]=swap32(e[t++]);for(c=16;c<64;c++)W[c]=gamma1(W[c-2])+W[c-7]+gamma0(W[c-15])+W[c-16]|0;for(c=0;c<64;c++){const B=s+sigma1(a)+ch(a,g,I)+K[c]+W[c]|0,d=sigma0(n)+maj(n,i,o)|0;s=I,I=g,g=a,a=r+B|0,r=o,o=i,i=n,n=B+d|0}this.A=n+this.A|0,this.B=i+this.B|0,this.C=o+this.C|0,this.D=r+this.D|0,this.E=a+this.E|0,this.F=g+this.F|0,this.G=I+this.G|0,this.H=s+this.H|0}digest(e){const{_byte:t,_word:n}=this;let i=this._size%64|0;for(t[i++]=128;i&3;)t[i++]=0;if(i>>=2,i>14){for(;i<16;)n[i++]=0;i=0,this._int32(n)}for(;i<16;)n[i++]=0;const o=this._size*8,r=(o&4294967295)>>>0,a=(o-r)/4294967296;return a&&(n[14]=swap32(a)),r&&(n[15]=swap32(r)),this._int32(n),e==="hex"?this._hex():this._bin()}_hex(){const{A:e,B:t,C:n,D:i,E:o,F:r,G:a,H:g}=this;return hex32(e)+hex32(t)+hex32(n)+hex32(i)+hex32(o)+hex32(r)+hex32(a)+hex32(g)}_bin(){const{A:e,B:t,C:n,D:i,E:o,F:r,G:a,H:g,_byte:I,_word:s}=this;return s[0]=swap32(e),s[1]=swap32(t),s[2]=swap32(n),s[3]=swap32(i),s[4]=swap32(o),s[5]=swap32(r),s[6]=swap32(a),s[7]=swap32(g),I.slice(0,32)}}sha256Uint8array.Hash=Hash;const W=new Int32Array(64);let sharedBuffer,sharedOffset=0;const hex32=A=>(A+4294967296).toString(16).substr(-8),swapLE=A=>A<<24&4278190080|A<<8&16711680|A>>8&65280|A>>24&255,swapBE=A=>A,swap32=isBE()?swapBE:swapLE,ch=(A,e,t)=>t^A&(e^t),maj=(A,e,t)=>A&e|t&(A|e),sigma0=A=>(A>>>2|A<<30)^(A>>>13|A<<19)^(A>>>22|A<<10),sigma1=A=>(A>>>6|A<<26)^(A>>>11|A<<21)^(A>>>25|A<<7),gamma0=A=>(A>>>7|A<<25)^(A>>>18|A<<14)^A>>>3,gamma1=A=>(A>>>17|A<<15)^(A>>>19|A<<13)^A>>>10;function isBE(){return new Uint8Array(new Uint16Array([65279]).buffer)[0]===254}async function sha256$1(A){return new Uint8Array(await crypto.subtle.digest("SHA-256",A))}const sha256_sync_insecure=A=>createHash_1().update(A).digest();let y_sha256;instantiateSha256().then(A=>y_sha256=A);const sha256_sync$1=A=>y_sha256.final(y_sha256.update(y_sha256.init(),A));let y_ripemd;instantiateRipemd160().then(A=>y_ripemd=A);const ripemd160_sync=A=>y_ripemd.final(y_ripemd.update(y_ripemd.init(),A));function zero_out(A){if(A.fill(0),A.reduce((e,t)=>e+t,0)!==0)throw new Error("Failed to zero out sensitive memory region")}function text_to_buffer(A){return new TextEncoder().encode(A)}function buffer_to_text(A){return new TextDecoder().decode(A)}function concat(A){const e=A.reduce((i,o)=>i+o.byteLength,0),t=new Uint8Array(e);let n=0;for(const i of A)t.set(i,n),n+=i.byteLength;return t}const sfcc=String.fromCharCode;function buffer_to_hex(A){let e="";for(const t of A)e+=t.toString(16).padStart(2,"0");return e}function hex_to_buffer(A){const e=A.length;if(e%2!==0)throw new Error("Invalid hex string length is not a multiple of 2");const t=e/2,n=new Uint8Array(t);for(let i=0;i<t;i++)n[i]=parseInt(A.slice(i+i,i+i+2),16);return n}function buffer_to_base64(A){return globalThis.btoa(buffer_to_string8(A))}function base64_to_buffer(A){return string8_to_buffer(globalThis.atob(A))}function buffer_to_string8(A){let e="";for(const t of A)e+=sfcc(t);return e}function string8_to_buffer(A){const e=A.length,t=new Uint8Array(e);for(let n=0;n<e;n++)t[n]=A.charCodeAt(n);return t}const SX_CHARS_BASE93="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&'()*+,-./:;<=>?@[]^_`{|}~ ";function buffer_to_base93(A){let e="";const t=A.byteLength;let n=0,i=0;for(let o=0;o<t;o++)if(n|=A[o]<<i,i+=8,i>13){let a=n&8191;a>456?(n>>=13,i-=13):(a=n&16383,n>>=14,i-=14),e+=SX_CHARS_BASE93[a%93]+SX_CHARS_BASE93[a/93|0]}return i>0&&(e+=SX_CHARS_BASE93[n%93],(i>7||n>92)&&(e+=SX_CHARS_BASE93[n/93|0])),e}function base93_to_buffer(A){const e=A.length,t=[];let n=0,i=0,o=-1;for(let r=0;r<e;r++){const a=SX_CHARS_BASE93.indexOf(A[r]);if(a===-1)throw new Error("Invalid base93 string");if(o===-1){o=a;continue}o+=a*93,n|=o<<i,i+=(o&8191)>456?13:14;do t.push(n&255),n>>=8,i-=8;while(i>7);o=-1}return o!==-1&&t.push(n|o<<i),Uint8Array.from(t.slice(0,Math.ceil(A.length*7/8)))}var sha256={exports:{}},core={exports:{}};(function(A,e){(function(t,n){A.exports=n()})(commonjsGlobal,function(){var t=t||function(n,i){var o;if(typeof window<"u"&&window.crypto&&(o=window.crypto),typeof self<"u"&&self.crypto&&(o=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(o=globalThis.crypto),!o&&typeof window<"u"&&window.msCrypto&&(o=window.msCrypto),!o&&typeof commonjsGlobal<"u"&&commonjsGlobal.crypto&&(o=commonjsGlobal.crypto),!o&&typeof commonjsRequire=="function")try{o=require("crypto")}catch{}var r=function(){if(o){if(typeof o.getRandomValues=="function")try{return o.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof o.randomBytes=="function")try{return o.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},a=Object.create||function(){function u(){}return function(p){var y;return u.prototype=p,y=new u,u.prototype=null,y}}(),g={},I=g.lib={},s=I.Base=function(){return{extend:function(u){var p=a(this);return u&&p.mixIn(u),(!p.hasOwnProperty("init")||this.init===p.init)&&(p.init=function(){p.$super.init.apply(this,arguments)}),p.init.prototype=p,p.$super=this,p},create:function(){var u=this.extend();return u.init.apply(u,arguments),u},init:function(){},mixIn:function(u){for(var p in u)u.hasOwnProperty(p)&&(this[p]=u[p]);u.hasOwnProperty("toString")&&(this.toString=u.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),c=I.WordArray=s.extend({init:function(u,p){u=this.words=u||[],p!=i?this.sigBytes=p:this.sigBytes=u.length*4},toString:function(u){return(u||d).stringify(this)},concat:function(u){var p=this.words,y=u.words,D=this.sigBytes,F=u.sigBytes;if(this.clamp(),D%4)for(var G=0;G<F;G++){var Q=y[G>>>2]>>>24-G%4*8&255;p[D+G>>>2]|=Q<<24-(D+G)%4*8}else for(var h=0;h<F;h+=4)p[D+h>>>2]=y[h>>>2];return this.sigBytes+=F,this},clamp:function(){var u=this.words,p=this.sigBytes;u[p>>>2]&=4294967295<<32-p%4*8,u.length=n.ceil(p/4)},clone:function(){var u=s.clone.call(this);return u.words=this.words.slice(0),u},random:function(u){for(var p=[],y=0;y<u;y+=4)p.push(r());return new c.init(p,u)}}),B=g.enc={},d=B.Hex={stringify:function(u){for(var p=u.words,y=u.sigBytes,D=[],F=0;F<y;F++){var G=p[F>>>2]>>>24-F%4*8&255;D.push((G>>>4).toString(16)),D.push((G&15).toString(16))}return D.join("")},parse:function(u){for(var p=u.length,y=[],D=0;D<p;D+=2)y[D>>>3]|=parseInt(u.substr(D,2),16)<<24-D%8*4;return new c.init(y,p/2)}},l=B.Latin1={stringify:function(u){for(var p=u.words,y=u.sigBytes,D=[],F=0;F<y;F++){var G=p[F>>>2]>>>24-F%4*8&255;D.push(String.fromCharCode(G))}return D.join("")},parse:function(u){for(var p=u.length,y=[],D=0;D<p;D++)y[D>>>2]|=(u.charCodeAt(D)&255)<<24-D%4*8;return new c.init(y,p)}},E=B.Utf8={stringify:function(u){try{return decodeURIComponent(escape(l.stringify(u)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(u){return l.parse(unescape(encodeURIComponent(u)))}},C=I.BufferedBlockAlgorithm=s.extend({reset:function(){this._data=new c.init,this._nDataBytes=0},_append:function(u){typeof u=="string"&&(u=E.parse(u)),this._data.concat(u),this._nDataBytes+=u.sigBytes},_process:function(u){var p,y=this._data,D=y.words,F=y.sigBytes,G=this.blockSize,Q=G*4,h=F/Q;u?h=n.ceil(h):h=n.max((h|0)-this._minBufferSize,0);var _=h*G,b=n.min(_*4,F);if(_){for(var w=0;w<_;w+=G)this._doProcessBlock(D,w);p=D.splice(0,_),y.sigBytes-=b}return new c.init(p,b)},clone:function(){var u=s.clone.call(this);return u._data=this._data.clone(),u},_minBufferSize:0});I.Hasher=C.extend({cfg:s.extend(),init:function(u){this.cfg=this.cfg.extend(u),this.reset()},reset:function(){C.reset.call(this),this._doReset()},update:function(u){return this._append(u),this._process(),this},finalize:function(u){u&&this._append(u);var p=this._doFinalize();return p},blockSize:16,_createHelper:function(u){return function(p,y){return new u.init(y).finalize(p)}},_createHmacHelper:function(u){return function(p,y){return new f.HMAC.init(u,y).finalize(p)}}});var f=g.algo={};return g}(Math);return t})})(core);(function(A,e){(function(t,n){A.exports=n(core.exports)})(commonjsGlobal,function(t){return function(n){var i=t,o=i.lib,r=o.WordArray,a=o.Hasher,g=i.algo,I=[],s=[];(function(){function d(f){for(var u=n.sqrt(f),p=2;p<=u;p++)if(!(f%p))return!1;return!0}function l(f){return(f-(f|0))*4294967296|0}for(var E=2,C=0;C<64;)d(E)&&(C<8&&(I[C]=l(n.pow(E,1/2))),s[C]=l(n.pow(E,1/3)),C++),E++})();var c=[],B=g.SHA256=a.extend({_doReset:function(){this._hash=new r.init(I.slice(0))},_doProcessBlock:function(d,l){for(var E=this._hash.words,C=E[0],f=E[1],u=E[2],p=E[3],y=E[4],D=E[5],F=E[6],G=E[7],Q=0;Q<64;Q++){if(Q<16)c[Q]=d[l+Q]|0;else{var h=c[Q-15],_=(h<<25|h>>>7)^(h<<14|h>>>18)^h>>>3,b=c[Q-2],w=(b<<15|b>>>17)^(b<<13|b>>>19)^b>>>10;c[Q]=_+c[Q-7]+w+c[Q-16]}var S=y&D^~y&F,k=C&f^C&u^f&u,m=(C<<30|C>>>2)^(C<<19|C>>>13)^(C<<10|C>>>22),N=(y<<26|y>>>6)^(y<<21|y>>>11)^(y<<7|y>>>25),H=G+N+S+s[Q]+c[Q],M=m+k;G=F,F=D,D=y,y=p+H|0,p=u,u=f,f=C,C=H+M|0}E[0]=E[0]+C|0,E[1]=E[1]+f|0,E[2]=E[2]+u|0,E[3]=E[3]+p|0,E[4]=E[4]+y|0,E[5]=E[5]+D|0,E[6]=E[6]+F|0,E[7]=E[7]+G|0},_doFinalize:function(){var d=this._data,l=d.words,E=this._nDataBytes*8,C=d.sigBytes*8;return l[C>>>5]|=128<<24-C%32,l[(C+64>>>9<<4)+14]=n.floor(E/4294967296),l[(C+64>>>9<<4)+15]=E,d.sigBytes=l.length*4,this._process(),this._hash},clone:function(){var d=a.clone.call(this);return d._hash=this._hash.clone(),d}});i.SHA256=a._createHelper(B),i.HmacSHA256=a._createHmacHelper(B)}(Math),t.SHA256})})(sha256);var sha256_sync=sha256.exports,sha512={exports:{}},x64Core={exports:{}};(function(A,e){(function(t,n){A.exports=n(core.exports)})(commonjsGlobal,function(t){return function(n){var i=t,o=i.lib,r=o.Base,a=o.WordArray,g=i.x64={};g.Word=r.extend({init:function(I,s){this.high=I,this.low=s}}),g.WordArray=r.extend({init:function(I,s){I=this.words=I||[],s!=n?this.sigBytes=s:this.sigBytes=I.length*8},toX32:function(){for(var I=this.words,s=I.length,c=[],B=0;B<s;B++){var d=I[B];c.push(d.high),c.push(d.low)}return a.create(c,this.sigBytes)},clone:function(){for(var I=r.clone.call(this),s=I.words=this.words.slice(0),c=s.length,B=0;B<c;B++)s[B]=s[B].clone();return I}})}(),t})})(x64Core);(function(A,e){(function(t,n,i){A.exports=n(core.exports,x64Core.exports)})(commonjsGlobal,function(t){return function(){var n=t,i=n.lib,o=i.Hasher,r=n.x64,a=r.Word,g=r.WordArray,I=n.algo;function s(){return a.create.apply(a,arguments)}var c=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],B=[];(function(){for(var l=0;l<80;l++)B[l]=s()})();var d=I.SHA512=o.extend({_doReset:function(){this._hash=new g.init([new a.init(1779033703,4089235720),new a.init(3144134277,2227873595),new a.init(1013904242,4271175723),new a.init(2773480762,1595750129),new a.init(1359893119,2917565137),new a.init(2600822924,725511199),new a.init(528734635,4215389547),new a.init(1541459225,327033209)])},_doProcessBlock:function(l,E){for(var C=this._hash.words,f=C[0],u=C[1],p=C[2],y=C[3],D=C[4],F=C[5],G=C[6],Q=C[7],h=f.high,_=f.low,b=u.high,w=u.low,S=p.high,k=p.low,m=y.high,N=y.low,H=D.high,M=D.low,U=F.high,v=F.low,L=G.high,x=G.low,q=Q.high,P=Q.low,O=h,Z=_,AA=b,Y=w,X=S,nA=k,rA=m,aA=N,tA=H,J=M,j=U,CA=v,T=L,V=x,eA=q,IA=P,gA=0;gA<80;gA++){var BA,lA,mA=B[gA];if(gA<16)lA=mA.high=l[E+gA*2]|0,BA=mA.low=l[E+gA*2+1]|0;else{var DA=B[gA-15],fA=DA.high,yA=DA.low,UA=(fA>>>1|yA<<31)^(fA>>>8|yA<<24)^fA>>>7,kA=(yA>>>1|fA<<31)^(yA>>>8|fA<<24)^(yA>>>7|fA<<25),MA=B[gA-2],uA=MA.high,QA=MA.low,oA=(uA>>>19|QA<<13)^(uA<<3|QA>>>29)^uA>>>6,hA=(QA>>>19|uA<<13)^(QA<<3|uA>>>29)^(QA>>>6|uA<<26),NA=B[gA-7],RA=NA.high,HA=NA.low,wA=B[gA-16],xA=wA.high,vA=wA.low;BA=kA+HA,lA=UA+RA+(BA>>>0<kA>>>0?1:0),BA=BA+hA,lA=lA+oA+(BA>>>0<hA>>>0?1:0),BA=BA+vA,lA=lA+xA+(BA>>>0<vA>>>0?1:0),mA.high=lA,mA.low=BA}var _A=tA&j^~tA&T,KA=J&CA^~J&V,PA=O&AA^O&X^AA&X,VA=Z&Y^Z&nA^Y&nA,ZA=(O>>>28|Z<<4)^(O<<30|Z>>>2)^(O<<25|Z>>>7),YA=(Z>>>28|O<<4)^(Z<<30|O>>>2)^(Z<<25|O>>>7),XA=(tA>>>14|J<<18)^(tA>>>18|J<<14)^(tA<<23|J>>>9),zA=(J>>>14|tA<<18)^(J>>>18|tA<<14)^(J<<23|tA>>>9),GA=c[gA],JA=GA.high,qA=GA.low,sA=IA+zA,dA=eA+XA+(sA>>>0<IA>>>0?1:0),sA=sA+KA,dA=dA+_A+(sA>>>0<KA>>>0?1:0),sA=sA+qA,dA=dA+JA+(sA>>>0<qA>>>0?1:0),sA=sA+BA,dA=dA+lA+(sA>>>0<BA>>>0?1:0),bA=YA+VA,WA=ZA+PA+(bA>>>0<YA>>>0?1:0);eA=T,IA=V,T=j,V=CA,j=tA,CA=J,J=aA+sA|0,tA=rA+dA+(J>>>0<aA>>>0?1:0)|0,rA=X,aA=nA,X=AA,nA=Y,AA=O,Y=Z,Z=sA+bA|0,O=dA+WA+(Z>>>0<sA>>>0?1:0)|0}_=f.low=_+Z,f.high=h+O+(_>>>0<Z>>>0?1:0),w=u.low=w+Y,u.high=b+AA+(w>>>0<Y>>>0?1:0),k=p.low=k+nA,p.high=S+X+(k>>>0<nA>>>0?1:0),N=y.low=N+aA,y.high=m+rA+(N>>>0<aA>>>0?1:0),M=D.low=M+J,D.high=H+tA+(M>>>0<J>>>0?1:0),v=F.low=v+CA,F.high=U+j+(v>>>0<CA>>>0?1:0),x=G.low=x+V,G.high=L+T+(x>>>0<V>>>0?1:0),P=Q.low=P+IA,Q.high=q+eA+(P>>>0<IA>>>0?1:0)},_doFinalize:function(){var l=this._data,E=l.words,C=this._nDataBytes*8,f=l.sigBytes*8;E[f>>>5]|=128<<24-f%32,E[(f+128>>>10<<5)+30]=Math.floor(C/4294967296),E[(f+128>>>10<<5)+31]=C,l.sigBytes=E.length*4,this._process();var u=this._hash.toX32();return u},clone:function(){var l=o.clone.call(this);return l._hash=this._hash.clone(),l},blockSize:1024/32});n.SHA512=o._createHelper(d),n.HmacSHA512=o._createHmacHelper(d)}(),t.SHA512})})(sha512);var sha512_sync=sha512.exports;function destroyed(){throw new Error("Method called on destroyed SensitiveBytes instance")}class SensitiveBytesContext{constructor(){cA(this,"_a_biguints",[])}random(e){const t=SensitiveBytes.random(e);return this._a_biguints.push(t),t}empty(e){const t=SensitiveBytes.random(e);return this._a_biguints.push(t),t}new(e){const t=new SensitiveBytes(e,this);return this._a_biguints.push(t),t}wipe(){for(const e of this._a_biguints)e.wipe()}}class SensitiveBytes{constructor(e,t=null){this._atu8_data=e,this._kc_context=t}static context(){return new SensitiveBytesContext}static random(e){return new SensitiveBytes(crypto.getRandomValues(new Uint8Array(e)))}static empty(e=0){return new SensitiveBytes(new Uint8Array(e))}get data(){return this._atu8_data}clone(){return new SensitiveBytes(Uint8Array.from(this._atu8_data),this._kc_context)}wipe(){this._atu8_data.fill(0),this.clone=this.wipe=this.diff=this.compare=this.mod=destroyed,Object.defineProperties(this,{data:{get:destroyed},digits:{get:destroyed}})}leftShift(e){if(Number.isInteger(e)||e<0)throw this.wipe(),new Error("Refusing to left shift by argument that is not a non-negative integer");if(e===0)return this.clone();const t=this._atu8_data.byteLength,n=new Uint8Array(t),i=e>>>3,o=this._atu8_data.subarray(i),r=e%8;if(r===0)return n.set(o),new SensitiveBytes(n);const a=255>>>r,g=8-r;let I=0;for(;I<t-1-i;I++)n[I]=(o[I]&a)<<r|o[I+1]>>>g;return i===0&&(n[I]<<=e),new SensitiveBytes(n)}rightShift(e){if(Number.isInteger(e)||e<0)throw this.wipe(),new Error("Refusing to left shift by argument that is not a non-negative integer");if(e===0)return this.clone();const t=this._atu8_data,n=t.byteLength,i=new Uint8Array(n),o=e%8,r=e>>>3;if(o===0)return i.set(t,r),new SensitiveBytes(i);const a=t.subarray(0,n-(e>>>3)),g=8-o;r===0&&(i[0]>>=e);let I=1;for(;I<n-1;I++)i[I]=a[I-1]<<g&255|a[I]>>>o;return new SensitiveBytes(i)}xor(e){const t=this._atu8_data,n=e._atu8_data,i=t.byteLength;if(i!==n.byteLength)throw this.wipe(),e.wipe(),new Error("Refusing to XOR buffers of different byte length");const o=new Uint8Array(i);for(let r=0;r<i;r++)o[r]=t[r]^n[r];return new SensitiveBytes(o)}split(e){const t=this.data,n=t.byteLength,i=[];let o=0;for(let r=0;r<n;r++)e===t[r]&&(i.push(t.subarray(o,r)),o=r+1);return i}}const d_broadcast_global=new BroadcastChannel("global");function global_broadcast(A){d_broadcast_global.postMessage(A),d_broadcast_global.dispatchEvent(new MessageEvent("message",{data:A}))}function global_receive(A){const e=t=>{const n=t.data;if(!n||!n.type)throw new Error("Ignored invalid message received on global broadcast channel");const{type:i,value:o=null}=n,r=A[i];!r||r(o)};return d_broadcast_global.addEventListener("message",e),()=>{d_broadcast_global.removeEventListener("message",e)}}async function global_wait(A,e,t=0){const n=new Error().stack||"";return new Promise((i,o)=>{let r=0;const a=global_receive({[A]:g=>{e(g)&&(a(),clearTimeout(r),i())}});Number.isInteger(t)&&t>0&&(r=globalThis.setTimeout(()=>{a(),o(new Error(`A timeout was reached waiting for the '${A}' event
${n}`))},t))})}const SI_VERSION="0.1.0",XT_SECONDS=1e3,XT_MINUTES=60*XT_SECONDS,NB_MAX_MEMO=188,R_DOMAIN_LOCALHOST=/^(localhost|127.0.0.1)(:\d+)?$/,R_DOMAIN_IP=/^\d+(?:.\d+){3}(:\d+)?$/,R_BECH32=/^([a-z]+)([13])([a-zA-HJ-NP-Z0-9]{25,39})$/,P_PUBLIC_SUFFIX_LIST="https://raw.githubusercontent.com/publicsuffix/list/master/public_suffix_list.dat",P_STARSHELL_DECREES="https://raw.githubusercontent.com/SolarRepublic/wallet-decrees/main/global.json",R_TRANSFER_AMOUNT=/^(\d+)(.+)/,XG_SYNCHRONIZE_PAGINATION_LIMIT=16n,SI_STORE_SECRETS="secrets",SI_STORE_APPS="apps",SI_STORE_APP_POLICIES="app_policies",SI_STORE_AGENTS="agents",SI_STORE_SETTINGS="settings",SI_STORE_ACCOUNTS="accounts",SI_STORE_QUERY_CACHE="query_cache",SI_STORE_TAGS="tags",SI_STORE_MEDIA="media",SI_STORE_PFPS="pfps",SI_STORE_CHAINS="chains",SI_STORE_NETWORKS="networks",SI_STORE_ENTITIES="entities",SI_STORE_EVENTS="events",SI_STORE_INCIDENTS="incidents",SI_STORE_HISTORIES="histories",SI_STORE_WEB_RESOURCES="web_resources",SI_STORE_WEB_APIS="web_apis";function precedes(A,e){return new Version(A).precedes(new Version(e))}class Version{constructor(e){cA(this,"_a_parts");this._a_parts=e.split(/\./).map(t=>{const n=t.split("-");return{value:+n[0],tag:n.slice(1).join("-")}})}compare(e){const t=this._a_parts,n=e._a_parts;for(let i=0;i<Math.min(t.length,n.length);i++){const{value:o,tag:r}=t[i],{value:a,tag:g}=n[i];if(r!==g)return NaN;const I=o-a;if(I!==0)return I}return 0}precedes(e){return this.compare(e)===-1}follows(e){return this.compare(e)===1}}async function storage_get(A){return(await chrome.storage.local.get([A]))?.[A]||null}async function public_storage_get(A){return await storage_get(`@${A}`)}async function public_storage_put(A,e){const t=`@${A}`;await chrome.storage.local.set({[t]:e})}const PublicStorage={async lastSeen(){return await public_storage_get("last_seen")},async isUpgrading(){const A=await PublicStorage.lastSeen();return!A||precedes(A.version,SI_VERSION)},async markSeen(){await public_storage_put("last_seen",{time:Date.now(),version:SI_VERSION})}};class NotAuthenticatedError extends Error{}class AlreadyRegisteredError extends Error{}class InvalidPassphraseError extends Error{}class UnregisteredError extends Error{}class RecoverableVaultError extends Error{}class CorruptedVaultError extends Error{}const ATU8_DUMMY_PHRASE=text_to_buffer("32-character-long-dummy-password"),ATU8_DUMMY_VECTOR=new Uint8Array(crypto.getRandomValues(new Uint8Array(16))),NL_PASSPHRASE_MINIMUM=5,NL_PASSPHRASE_MAXIMUM=1024;function acceptable(A){return typeof A=="string"&&A.length>=NL_PASSPHRASE_MINIMUM&&A.length<=NL_PASSPHRASE_MAXIMUM}async function register(A,e=F_NOOP){e("Reading from storage");const t=await Vault.getBase();if(Vault.isValidBase(t))throw new AlreadyRegisteredError;if(!A||!acceptable(A))throw new InvalidPassphraseError;const n=text_to_buffer(A);e("Deriving root keys");const i=crypto.getRandomValues(new Uint8Array(8)),r=new DataView(crypto.getRandomValues(new Uint32Array(2)).buffer).getBigUint64(0,!1);await PublicStorage.markSeen();const{new:{key:a,nonce:g}}=await Vault.deriveRootKeys(n,i,r);e("Generating signature");const I=await Vault.generateRootKeySignature(a);e("Saving to storage"),await Vault.setParsedBase({entropy:i,nonce:g,signature:I})}async function login(A,e=!1,t=F_NOOP){t("Reading from storage");const n=await Vault.getBase();if(!n)throw new UnregisteredError;if(!Vault.isValidBase(n))throw new CorruptedVaultError("Storage is corrupt; root object is missing or partially damaged");const{entropy:i,nonce:o,signature:r,version:a}=Vault.parseBase(n);if(a<1)throw new CorruptedVaultError("Vault reports to be encrypted with an unknown version identifier");if(a>1)throw new CorruptedVaultError("Vault reports to be encrypted with a newer version identifier");if(!A)throw new InvalidPassphraseError;const g=text_to_buffer(A);t("Deriving root keys");const{old:{key:I,vector:s},new:{key:c,vector:B,nonce:d},export:l}=await Vault.deriveRootKeys(g,i,o,!0);try{if(!await Vault.verifyRootKey(I,r))if(await Vault.verifyRootKey(c,r)){if(!e)throw new RecoverableVaultError}else throw new InvalidPassphraseError;t("Rotating keys"),await Vault.recryptAll(I,s,c,B),t("Generating signature");const E=await Vault.generateRootKeySignature(c);t("Saving to storage"),await Vault.setParsedBase({entropy:i,nonce:d,signature:E}),session_storage_is_native?await session_storage_set_native({root:c,vector:B}):await session_storage_set_wrapped({root:Array.from(l.data),vector:Array.from(B)}),l?.wipe(),global_broadcast({type:"login"}),t("Done")}catch(E){throw l?.wipe(),E}}async function logout(){await Vault.clearRootKey()}const a_error_listeners=[];function on_error(A){return a_error_listeners.push(A),()=>{const t=a_error_listeners.indexOf(A);a_error_listeners.splice(t,1)}}function syserr(A){for(const e of a_error_listeners)e(A);return A.error||new Error(A.text)}function syswarn(A){console.warn(A)}var ContactAgentType=(A=>(A.PERSON="person",A.CONTRACT="contract",A))(ContactAgentType||{});const type_check=A=>A,H_MEDIA={"/media.image/sha256.8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156":{hash:"8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156",data:"/media/chain/akash.svg"},"/media.image/sha256.4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4":{hash:"4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4",data:"/media/chain/cosmos-hub.svg"},"/media.image/sha256.da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49":{hash:"da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49",data:"/media/chain/dvpn.png"},"/media.image/sha256.8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af":{hash:"8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af",data:"/media/chain/iris.svg"},"/media.image/sha256.e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb":{hash:"e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb",data:"/media/chain/juno.svg"},"/media.image/sha256.0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625":{hash:"0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625",data:"/media/chain/luna.svg"},"/media.image/sha256.668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27":{hash:"668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27",data:"/media/chain/monero.svg"},"/media.image/sha256.63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655":{hash:"63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655",data:"/media/chain/osmosis.svg"},"/media.image/sha256.9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056":{hash:"9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056",data:"/media/chain/regen.png"},"/media.image/sha256.b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5":{hash:"b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5",data:"/media/chain/secret-network.svg"},"/media.image/sha256.4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f":{hash:"4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f",data:"/media/token/secret-secret.svg"},"/media.image/sha256.af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc":{hash:"af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc",data:"/media/vendor/logo-128px.png"},"/media.image/sha256.a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b":{hash:"a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b",data:"/media/vendor/logo-192px.png"},"/media.image/sha256.adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e":{hash:"adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e",data:"/media/vendor/logo-256px.png"},"/media.image/sha256.345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1":{hash:"345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1",data:"/media/vendor/logo-32px.png"},"/media.image/sha256.9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13":{hash:"9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13",data:"/media/vendor/logo-48px.png"},"/media.image/sha256.4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7":{hash:"4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7",data:"/media/vendor/logo-64px.png"},"/media.image/sha256.ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196":{hash:"ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196",data:"/media/vendor/logo-96px.png"},"/media.image/sha256.602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412":{hash:"602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412",data:"/media/vendor/logo.svg"},"/media.image/sha256.861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15":{hash:"861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15",data:"/media/vendor/orb-1.png"},"/media.image/sha256.88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e":{hash:"88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e",data:"/media/vendor/orb-1.svg"},"/media.image/sha256.cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b":{hash:"cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b",data:"/media/vendor/title.svg"},"/media.image/sha256.6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622":{hash:"6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622",data:"/media/other/secret-saturn.png"},"/media.image/sha256.3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff":{hash:"3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff",data:"/media/other/supdoggie.png"}},H_MEDIA_LOOKUP={"/media/chain/akash.svg":"/media.image/sha256.8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156","/media/chain/cosmos-hub.svg":"/media.image/sha256.4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4","/media/chain/dvpn.png":"/media.image/sha256.da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49","/media/chain/iris.svg":"/media.image/sha256.8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af","/media/chain/juno.svg":"/media.image/sha256.e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb","/media/chain/luna.svg":"/media.image/sha256.0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625","/media/chain/monero.svg":"/media.image/sha256.668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27","/media/chain/osmosis.svg":"/media.image/sha256.63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655","/media/chain/regen.png":"/media.image/sha256.9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056","/media/chain/secret-network.svg":"/media.image/sha256.b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5","/media/token/secret-secret.svg":"/media.image/sha256.4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f","/media/vendor/logo-128px.png":"/media.image/sha256.af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc","/media/vendor/logo-192px.png":"/media.image/sha256.a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b","/media/vendor/logo-256px.png":"/media.image/sha256.adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e","/media/vendor/logo-32px.png":"/media.image/sha256.345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1","/media/vendor/logo-48px.png":"/media.image/sha256.9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13","/media/vendor/logo-64px.png":"/media.image/sha256.4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7","/media/vendor/logo-96px.png":"/media.image/sha256.ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196","/media/vendor/logo.svg":"/media.image/sha256.602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412","/media/vendor/orb-1.png":"/media.image/sha256.861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15","/media/vendor/orb-1.svg":"/media.image/sha256.88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e","/media/vendor/title.svg":"/media.image/sha256.cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b","/media/other/secret-saturn.png":"/media.image/sha256.6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622","/media/other/supdoggie.png":"/media.image/sha256.3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff"},H_STORE_INIT_MEDIA=type_check(H_MEDIA),cosmos_bech32s=A=>({acc:{hrp:A,separator:"1"},accpub:{hrp:`${A}pub`,separator:"1"},valoper:{hrp:`${A}valoper`,separator:"1"},valoperpub:{hrp:`${A}valoperpub`,separator:"1"},valcons:{hrp:`${A}valcons`,separator:"1"},valconspub:{hrp:`${A}valconspub`,separator:"1"}}),H_STORE_INIT_PFPS=type_check(fold([{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/vendor/logo.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/chain/cosmos-hub.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/chain/secret-network.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/token/secret-secret.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/other/secret-saturn.png"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/other/supdoggie.png"]}}],(A,e)=>({[`/template.pfp/id.${e}`]:A}))),H_LOOKUP_PFP={};for(const[A,e]of ode(H_STORE_INIT_PFPS))if(e.type==="plain"){const t=H_MEDIA[e.image.default];H_LOOKUP_PFP[t.data]=A}const H_STORE_INIT_CHAINS=type_check({"/family.cosmos/chain.pulsar-2":{name:"Secret Pulsar",pfp:H_LOOKUP_PFP["/media/chain/secret-network.svg"],family:"cosmos",id:"pulsar-2",bech32s:cosmos_bech32s("secret"),bip44:{coinType:529},coins:{SCRT:{decimals:6,denom:"uscrt",name:"Secret",pfp:H_LOOKUP_PFP["/media/chain/secret-network.svg"],extra:{coingecko_id:"secret"}}},tokenInterfaces:["snip-20","snip-21","snip-721","snip-722"],blockExplorer:{base:"https://secretnodes.com/{chain_prefix}",block:"/blocks/{height}",account:"/accounts/{address}",contract:"/contracts/{address}",validator:"/validators/{address}",transaction:"/transactions/{hash}#overview"},testnet:!0},"/family.cosmos/chain.theta-testnet-001":{name:"Cosmos Hub Theta",pfp:H_LOOKUP_PFP["/media/chain/cosmos-hub.svg"],family:"cosmos",id:"theta-testnet-001",bech32s:cosmos_bech32s("cosmos"),bip44:{coinType:118},coins:{ATOM:{decimals:6,denom:"uatom",name:"Cosmos",pfp:H_LOOKUP_PFP["/media/chain/cosmos-hub.svg"],extra:{coingecko_id:"cosmos-hub"}}},tokenInterfaces:["cw-20"],blockExplorer:{base:"https://testnet.cosmos.bigdipper.live",block:"/blocks/{height}",account:"/accounts/{address}",contract:"/contracts/{address}",validator:"/validators/{address}",transaction:"/transactions/{hash}"},testnet:!0}}),H_STORE_INIT_NETWORKS=type_check(fold([{name:"\u{1D54A}ecret \u{1D54A}aturn",pfp:H_LOOKUP_PFP["/media/other/secret-saturn.png"],chain:"/family.cosmos/chain.pulsar-2",grpcWebUrl:"https://grpc.testnet.secretsaturn.net",rpcHost:"rpc.testnet.secretsaturn.net"},{name:"StarShell",pfp:H_LOOKUP_PFP["/media/vendor/logo.svg"],chain:"/family.cosmos/chain.theta-testnet-001",grpcWebUrl:"https://grpc-web.cosmos-theta.starshell.net",rpcHost:"rpc.cosmos-theta.starshell.net"}],A=>({[`/network.${buffer_to_base64(sha256_sync_insecure(text_to_buffer(A.grpcWebUrl)))}`]:A}))),H_STORE_INIT_APPS=type_check(fold([{scheme:"https",host:"app.starshell.net",connections:{},pfp:H_LOOKUP_PFP["/media/vendor/logo.svg"]},{scheme:"https",host:"faucet.secrettestnet.io",connections:{},pfp:""},{scheme:"https",host:"faucet.pulsar.scrttestnet.com",connections:{},pfp:""}],A=>({[`/scheme.${A.scheme}/host.${A.host.replace(/:/g,"+")}`]:A}))),H_STORE_INIT_AGENTS=type_check(fold([{name:"supdoggie",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:H_LOOKUP_PFP["/media/other/supdoggie.png"],address:"lhr6lnhscpdlrpjuat7jstar8snhhkguaemesd",origin:"built-in"},{name:"faucet.secrettestnet.io",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:"",address:"3fqtu0lxsvn8gtlf3mz5kt75spxv93ssa6vecf",origin:"built-in"},{name:"faucet.pulsar.scrttestnet.com",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:"",address:"3fqtu0lxsvn8gtlf3mz5kt75spxv93ssa6vecf",origin:"built-in"}],A=>({[`/family.${A.family}/agent.${A.address}/as.contact`]:A}))),H_STORE_INITS={[SI_STORE_APPS]:H_STORE_INIT_APPS,[SI_STORE_APP_POLICIES]:{hq:[],user:[]},[SI_STORE_ACCOUNTS]:{},[SI_STORE_AGENTS]:H_STORE_INIT_AGENTS,[SI_STORE_CHAINS]:H_STORE_INIT_CHAINS,[SI_STORE_NETWORKS]:H_STORE_INIT_NETWORKS,[SI_STORE_SETTINGS]:{},[SI_STORE_MEDIA]:H_STORE_INIT_MEDIA,[SI_STORE_PFPS]:H_STORE_INIT_PFPS,[SI_STORE_ENTITIES]:{},[SI_STORE_EVENTS]:[],[SI_STORE_INCIDENTS]:{},[SI_STORE_HISTORIES]:{order:[],syncs:oderom(H_STORE_INIT_CHAINS,A=>({[A]:{}}))},[SI_STORE_SECRETS]:{},[SI_STORE_TAGS]:{registry:oderac({pink:"#D500F9",hot:"#C51162",orange:"#FF4D21",gold:"#FF8622",yellow:"#EEB521",autum:"#7E9E24",grass:"#3A6F16",teal:"#009688",sky:"#1976D2",violet:"#6200EA",gray:"#607D8B",brown:"#795548",bright:"#ffffff"},(A,e,t)=>({index:t,color:e,name:A,info:""})),map:{}},[SI_STORE_QUERY_CACHE]:{},[SI_STORE_WEB_RESOURCES]:{},[SI_STORE_WEB_APIS]:{}};class LockTimeoutError extends Error{constructor(){super("Timed out while waiting for lock")}}function AsyncLockPool$_release(A,e){return()=>{A._a_locks.splice(A._a_locks.indexOf(e),1),A._c_free+=1,queueMicrotask(()=>{if(A._a_awaits.length){const t=A._a_awaits.shift();t.confirm(t.free)}})}}class AsyncLockPool{constructor(e){cA(this,"_c_free");cA(this,"_a_awaits",[]);cA(this,"_a_locks",[]);this._c_free=e}acquire(e=null,t=0){if(0<this._c_free){this._c_free-=1;const n={data:e};return n.free=AsyncLockPool$_release(this,n),this._a_locks.push(n),Promise.resolve(n.free)}else return new Promise((n,i)=>{const o={confirm:n,data:e};if(this._a_awaits.push(o),t>0){const r=setTimeout(()=>{const a=this._a_awaits;a.splice(a.indexOf(o),1),i(new LockTimeoutError)},t);o.free=(...a)=>{clearTimeout(r),AsyncLockPool$_release(this,o)()}}else o.free=AsyncLockPool$_release(this,o)})}}const ATU8_SHA256_STARSHELL=hex_to_buffer(sha256_sync("starshell").toString());hex_to_buffer(sha512_sync("starshell").toString());const N_ITERATIONS=696969,NB_PADDING=512,NB_SALT=32,SI_PRF="SHA-512",NI_DERIVED_AES_KEY=256,NB_RECRYPTION_THRESHOLD=32*1024,GC_DERIVE_ROOT_SIGNING={name:"HMAC",hash:"SHA-256"},GC_DERIVE_ROOT_CIPHER={name:"AES-GCM",length:NI_DERIVED_AES_KEY},GC_HKDF_COMMON={name:"HKDF",hash:"SHA-256",salt:ATU8_SHA256_STARSHELL,info:Uint8Array.from([])},A_STORE_KEYS=["keys",...Object.keys(H_STORE_INITS)],SI_FRAME_LOCAL=crypto.randomUUID().slice(24),hm_privates$3=new WeakMap;async function restore_as_key(A,e,t,n){return Array.isArray(A)?await crypto.subtle.importKey("raw",Uint8Array.from(A),e,!1,n):A}function restore_as_buffer(A){return Array.isArray(A)?Uint8Array.from(A):A}const{session_storage_get,session_storage_set_native,session_storage_set_wrapped,session_storage_remove,session_storage_clear,session_storage_is_native}=(()=>{if(chrome.storage.session){const A=chrome.storage.session;return{async session_storage_get(e){return(await A.get([e]))[e]},session_storage_set_native(e){throw new Error("Implementation bug; cannot use native session storage")},async session_storage_set_wrapped(e){return await A.set(e)},async session_storage_remove(e){return await A.remove(e)},async session_storage_clear(){return await A.clear()},session_storage_is_native:!1}}else{const A=chrome.extension.getBackgroundPage();if(!A)throw new Error("Browser does not support any type of session storage");let e=A._g_session={};return{async session_storage_get(t){return e[t]??null},async session_storage_set_native(t){for(const[n,i]of ode(t))session_storage_remove(n),e[n]=i},async session_storage_set_wrapped(t){throw new Error("Implementation bug; cannot use wrapped session storage")},async session_storage_remove(t){const n=e[t];n&&typeof n=="object"&&(Array.isArray(n)||ArrayBuffer.isView(n))&&zero_out(n),delete e[t]},async session_storage_clear(){for(const[t,n]of ode(e))session_storage_remove(t);A._g_session=e={}},session_storage_is_native:!0}}})();async function session_storage_set_isomorphic(A){session_storage_is_native?await session_storage_set_native(A):await session_storage_set_wrapped(A)}async function hkdf_params(){const A=await Vault.getBase();let e;if(Vault.isValidBase(A)){if(e=await Vault.getSalt(),!e||NB_SALT!==e.byteLength)throw new Error("Vault is irreparably corrupted. No salt was found.")}else e=crypto.getRandomValues(new Uint8Array(NB_SALT)),await Vault.setSalt(e);return{...GC_HKDF_COMMON,salt:e}}function pbkdf2_derive2(A,e=0){return async function(t){return new SensitiveBytes(new Uint8Array(await crypto.subtle.deriveBits({name:"PBKDF2",salt:A,iterations:e?Math.ceil(N_ITERATIONS*e):N_ITERATIONS,hash:SI_PRF},t,256)))}}class DecryptionError extends Error{constructor(e){super("Failed to decrypt data: "+e),this.original=e}}async function decrypt(A,e,t,n=ATU8_SHA256_STARSHELL){try{return new Uint8Array(await crypto.subtle.decrypt({name:"AES-GCM",iv:t,additionalData:n},e,A))}catch(i){throw new DecryptionError(i)}}class EncryptionError extends Error{constructor(e){super("Failed to encrypt data: "+e),this.original=e}}async function encrypt(A,e,t,n=ATU8_SHA256_STARSHELL){try{return new Uint8Array(await crypto.subtle.encrypt({name:"AES-GCM",iv:t,additionalData:n},e,A))}catch(i){throw new EncryptionError(i)}}const h_release_waiters_local={},h_lock_pools={},Vault={async getBase(){return await storage_get("base")||void 0},isValidBase(A){return!!A&&typeof A=="object"&&typeof A.version=="number"&&typeof A.entropy=="string"&&typeof A.nonce=="string"&&typeof A.signature=="string"},parseBase(A){return{version:A.version,entropy:hex_to_buffer(A.entropy),nonce:BigInt(A.nonce),signature:hex_to_buffer(A.signature)}},async setParsedBase(A){return await chrome.storage.local.set({base:{version:1,entropy:buffer_to_hex(A.entropy),nonce:A.nonce+"",signature:buffer_to_hex(A.signature)}})},async eraseBase(){return await chrome.storage.local.remove(["base"])},async getSalt(){const A=await storage_get("salt");return A?hex_to_buffer(A):void 0},async setSalt(A){return await chrome.storage.local.set({salt:buffer_to_hex(A)})},async getRootKey(){const A=await session_storage_get("root");return A?await restore_as_key(A,"HKDF",!1,["deriveKey"]):null},async clearRootKey(){let A;chrome.extension.getBackgroundPage&&(A=chrome.extension.getBackgroundPage())&&delete A._dk_root,global_broadcast({type:"logout"}),await Promise.all([session_storage_clear()])},deriveRootBits(A,e,t=0){return crypto.subtle.importKey("raw",A,"PBKDF2",!1,["deriveBits"]).then(pbkdf2_derive2(e,t))},async deriveRootKeys(A,e,t,n=!1){const i=(t+1n)%2n**64n,o=new Uint8Array(16),r=new Uint8Array(16);o.set(e,0),r.set(e,0),new DataView(o.buffer).setBigUint64(8,t,!1),new DataView(r.buffer).setBigUint64(8,i,!1);let a=0;const g=await PublicStorage.lastSeen();g||(a=20/N_ITERATIONS),(!g||+g.version.replace(/^v?0\.0\./,"")<=6)&&(await chrome.storage.local.remove("chains"),await chrome.storage.local.remove("agents"),await chrome.storage.local.remove("networks"),await chrome.storage.local.remove("contacts"),await chrome.storage.local.remove("apps"));const[I,s]=await Promise.all([Vault.deriveRootBits(A,o,a),Vault.deriveRootBits(A,r)]);zero_out(A);const[c,B]=await Promise.all([crypto.subtle.importKey("raw",I.data,"HKDF",!1,["deriveKey"]),crypto.subtle.importKey("raw",s.data,"HKDF",!1,["deriveKey"])]);return I.wipe(),n||s.wipe(),await PublicStorage.markSeen(),{old:{key:c,vector:o,nonce:t},new:{key:B,vector:r,nonce:i},export:n?s:null}},async cipherKey(A,e=!1){return crypto.subtle.deriveKey(await hkdf_params(),A,GC_DERIVE_ROOT_CIPHER,!0,e?["encrypt","decrypt"]:["decrypt"])},async signatureKey(A,e=!1){return crypto.subtle.deriveKey(await hkdf_params(),A,GC_DERIVE_ROOT_SIGNING,!1,e?["sign"]:["verify"])},async generateRootKeySignature(A){const e=await Vault.signatureKey(A,!0);return new Uint8Array(await crypto.subtle.sign("HMAC",e,ATU8_SHA256_STARSHELL))},async verifyRootKey(A,e){const t=await Vault.signatureKey(A,!1);return await crypto.subtle.verify("HMAC",t,e,ATU8_SHA256_STARSHELL)},async recryptAll(A,e,t,n){const i=[];let o=0;const[r,a]=await Promise.all([Vault.cipherKey(A,!1),Vault.cipherKey(t,!0)]);for(const g of A_STORE_KEYS){const I=await storage_get(g);if(!I)continue;const s=string8_to_buffer(I);o+=s.byteLength,i.push((async()=>{let c;try{c=await decrypt(s,r,e)}catch{c=await decrypt(s,a,e)}const B=await encrypt(c,a,n);await chrome.storage.local.set({[g]:buffer_to_string8(B)}),o-=s.byteLength})()),o>NB_RECRYPTION_THRESHOLD&&(await Promise.all(i),i.length=0)}await Promise.all(i)},async peekJson(A,e){return(await Vault.readonly(A)).readJson(e)},async readonly(A){const e=await storage_get(A);return new VaultEntry(A,e??"")},async acquire(A,e=0){const t=`lock_${A}`,n=h_lock_pools[t]=h_lock_pools[t]||new AsyncLockPool(1);let i=F_NOOP;try{i=await n.acquire(null,1e4)}catch(I){throw I instanceof LockTimeoutError?new Error(`Timed out while waiting for ${t} on same thread`):I}const o=await session_storage_get(t);if(o){const[I,s]=o.split(":");if(SI_FRAME_LOCAL===I)await new Promise(c=>{let B=0;(h_release_waiters_local[A]=h_release_waiters_local[A]||[]).push(()=>{clearTimeout(B),c(void 0)}),B=globalThis.setTimeout(()=>{syserr({title:"I/O Error",text:`Local lock on '${A}' lasted more than 5 seconds; possible disk error or bug in implementation.`})},5e3)});else{console.warn(`'${A}' store is currently locked on a remote frame: ${o}; waiting for release`);try{await global_wait("releaseStore",c=>A===c.key,5e3)}catch{syswarn({text:"Recovered from previous interrupted shutdown."}),await session_storage_remove(`lock_${A}`)}console.warn(`'${A}' store was released`)}}const r=SI_FRAME_LOCAL+":"+crypto.randomUUID().slice(24);await session_storage_set_isomorphic({[t]:r});const a=await session_storage_get(t);if(r!==a){if(e>10)throw new Error(`Exceeded maximum retry count while trying to checkout "${A}" from the vault`);return await Vault.acquire(A,e+1)}global_broadcast({type:"acquireStore",value:{key:A}});const g=await storage_get(A);return new WritableVaultEntry(A,g??"",i)}};function VaultEntry$_fields(A){const e=hm_privates$3.get(A);if(!e)throw new Error(`Attempted to use '${A._si_key}' store after it was released or it was never opened for writing.`);return e}class VaultEntry{constructor(e,t){this._si_key=e,hm_privates$3.set(this,{atu8_ciphertext:string8_to_buffer(t)})}async read(e){const t=restore_as_buffer(await session_storage_get("vector"));if(!t)throw new NotAuthenticatedError;const n=VaultEntry$_fields(this);if(!n.atu8_ciphertext.byteLength)return new Uint8Array(0);const i=await decrypt(n.atu8_ciphertext,e,t);if(i[0]!==0)return i;const r=new DataView(i.buffer).getUint32(0);return i.subarray(4,r+4)}async readJson(e){let t={};try{const n=await this.read(e);if(!n.byteLength)return null;t=JSON.parse(buffer_to_text(n)),zero_out(n)}catch(n){try{this instanceof WritableVaultEntry&&this.release()}catch{}throw n}return t}}class WritableVaultEntry extends VaultEntry{constructor(e,t,n=F_NOOP){super(e,t),this._f_release=n}async release(){if(VaultEntry$_fields(this),hm_privates$3.delete(this),await session_storage_remove(`lock_${this._si_key}`),this._si_key in h_release_waiters_local)for(const e of h_release_waiters_local[this._si_key])e();this._f_release(),global_broadcast({type:"releaseStore",value:{key:this._si_key}})}async write(e,t,n=!1){const i=VaultEntry$_fields(this),o=restore_as_buffer(await session_storage_get("vector"));if(!o)throw new NotAuthenticatedError;const r=e.byteLength,a=Math.ceil((r+4)/NB_PADDING)*NB_PADDING-4,g=crypto.getRandomValues(new Uint8Array(a-r)),I=concat([new Uint8Array(4),e,g]);new DataView(I.buffer).setUint32(0,r);const c=await encrypt(I,t,o);await chrome.storage.local.set({[this._si_key]:buffer_to_string8(c)}),zero_out(i.atu8_ciphertext),i.atu8_ciphertext=c,queueMicrotask(()=>{global_broadcast({type:"updateStore",value:{key:this._si_key,init:n}})})}async writeJson(e,t,n=!1){const i=text_to_buffer(JSON.stringify(e));return await this.write(i,t,n)}}const hm_privates$2=new WeakMap;class WritableStore{constructor(e,t,n){this._kv_store=e,this._w_cache=t,hm_privates$2.set(this,{dk_cipher:n})}get raw(){return this._w_cache}release(){return this._kv_store.release()}save(e=!1){return this._kv_store.writeJson(this._w_cache,hm_privates$2.get(this).dk_cipher,e)}}class WritableStoreMap extends WritableStore{*[Symbol.iterator](){for(const e of ode(this._w_cache))yield e}at(e){return this._w_cache[e]??null}reduce(e){return oderac(this._w_cache,e)}entries(){return ode(this._w_cache)}}class WritableStoreDict extends WritableStore{get(e){return this._w_cache[e]??null}async set(e,t){this._w_cache[e]=t,await this.save()}}async function fetch_cipher(){const A=await Vault.getRootKey();if(!A)throw new NotAuthenticatedError;return await Vault.cipherKey(A,!0)}function create_store_class({store:A,class:e,extension:t}){return Object.assign(e,{async open(n){const i=await fetch_cipher(),o=await Vault.acquire(A);let r=await o.readJson(i),a=!1;r||(r=H_STORE_INITS[A],a=!0);const g=new e(o,r,i);a&&await g.save(!0);const I=await n(g);return await g.release(),I},async read(){const n=await fetch_cipher(),i=await Vault.readonly(A),o=await i.readJson(n);return o?new e(i,o,n):e.open(r=>r)},...t==="array"&&{async prepend(n){return await e.open(i=>i.prepend(n))},async append(n){return await e.open(i=>i.append(n))}},...t==="map"&&{async at(n){return await e.open(i=>i.at(n))}},...t==="dict"&&{async get(n){return await e.open(i=>i.get(n))},async set(n,i){return await e.open(o=>o.set(n,i))}}})}function subscribe_store(A,e){return global_receive({updateStore({key:t,init:n}){t===A&&e(n)}})}(async()=>await instantiateRipemd160())();const Chains=create_store_class({store:SI_STORE_CHAINS,class:class FA extends WritableStoreMap{static pathFor(e,t){return`/family.${e}/chain.${t}`}static pathFrom(e){return FA.pathFor(e.family,e.id)}static addressFor(e,t=yw_chain.get(),n=t.bech32s.acc){const i=sha256_sync$1(base64_to_buffer(e)),o=ripemd160_sync(i);return bech32.encode(n.hrp,bech32.toWords(o))}static bech32(e,t=yw_chain.get(),n=t.bech32s.acc){return`${n.hrp}${n.separator}${e}`}static get(e,t){return Chains.read().then(n=>n.get(e,t))}static at(e){return Chains.read().then(t=>t.at(e))}static blockExplorer(e,t,n=yw_chain.get()){let i=n.blockExplorer.base+n.blockExplorer[e];for(const o in t)i=i.replace(`{${o}}`,t[o]);return i}static isValidAddressFor(e,t,n="acc"){if(e.bech32s){const i=R_BECH32.exec(t);return i&&i[1]===e.bech32s[n].hrp&&i[2]===e.bech32s[n].separator}else return!1}static coinFromDenom(e,t=yw_chain.get()){for(const[n,i]of ode(t.coins))if(e===i.denom)return n;return""}*inFamily(e){const t=FA.pathFor(e,"");for(const[n,i]of ode(this._w_cache))n.startsWith(t)&&(yield[n,i])}get(e,t){const n=FA.pathFor(e,t);return this._w_cache[n]??null}async put(e){const t=FA.pathFrom(e);return this._w_cache[t]=e,await this.save(),t}}}),TokenRegistry={"cw-20":{attributes:{fungible:!1}},"snip-20":{attributes:{fungible:!0}},"snip-21":{extends:"snip-20",attributes:{fungible:!0}},"snip-721":{attributes:{fungible:!1}},"snip-722":{extends:"snip-721",attributes:{fungible:!1}}},Entities=create_store_class({store:SI_STORE_ENTITIES,class:class extends WritableStoreDict{static pathFrom(e,t=yw_chain.get()){return`${Chains.pathFrom(t)}/bech32.${e.bech32}`}static parseEntityPath(e){const t=e.slice(1).split("/");if(t.length<3||!t[0].startsWith("family.")||!t[1].startsWith("chain.")||!t[2].startsWith("bech32."))return null;let n,i="";if(t[3]==="as.contract")n="contract";else if(t[3]==="as.token")n="token";else if(t[3].startsWith("holding."))n="holding",i=t[3].slice(t[3].indexOf(".")+1);else return null;const o="/"+t.slice(0,2).join("/");return{chainRef:o,entityRef:`${o}/${t[3]}`,bech32:t[2].slice(t[2].indexOf(".")+1),type:n,...i&&{coin:i}}}static holdingPathFor(e,t,n=yw_chain_ref.get()){return`${n}/bech32.${e}/holding.${t}`}static async readTokens(e,t=null){return(await Entities.read()).tokens(Chains.pathFrom(e),t)}static async readFungibleTokens(e){const t=await Entities.read(),n=fold(e.tokenInterfaces,i=>TokenRegistry[i].attributes.fungible?{[i]:{}}:{});return t.tokens(Chains.pathFrom(e),n)}static fungibleInterfacesFor(e){return fold(e.tokenInterfaces,t=>TokenRegistry[t].attributes.fungible?{[t]:{}}:{})}static async infoForToken(e){}filteredMap(e){const t=this._w_cache,n={};for(const i in t){const o=e(i,t[i]);o&&(n[i]=o)}return n}every(e){const t=this._w_cache;for(const n in t)if(!e(n,t[n]))return!1;return!0}tokens(e,t=null){const n={};return this.every((i,o)=>{let r;if(i.startsWith(e)&&(r=o["as.contract"]))for(const a in r){if(!a.startsWith("token."))continue;const g=a.slice(6);(!t||g in t)&&(n[g][i]=r[a])}return!0}),n}}});class MemoAccountError extends Error{constructor(e,t,n){super(e),this._sa_owner=t,this._g_chain=n}get owner(){return this._sa_owner}get chain(){return this._g_chain}}class UnpublishedAccountError extends MemoAccountError{constructor(e,t){super(`Owner ${e} has not signed any messages yet on ${t.name}.`,e,t)}}class MultipleSignersError extends MemoAccountError{constructor(e,t){super(`Multiple accounts were discovered to be associated with ${e}.`,e,t)}}class WrongKeyTypeError extends MemoAccountError{constructor(e,t){super(`Encountered the wrong type of key for ${e} on ${t.name}.`,e,t)}}class NetworkTimeoutError extends Error{constructor(){super("Network request timed out.")}}const Networks=create_store_class({store:SI_STORE_NETWORKS,extension:"map",class:class ee extends WritableStoreMap{static pathFor(e){return`/network.${buffer_to_base64(sha256_sync$1(text_to_buffer(e)))}`}static pathFrom(e){return ee.pathFor(e.grpcWebUrl)}static activate(e,t=yw_chain.get()){return new CosmosNetwork(e,t)}static async activateDefaultFor(e=yw_chain.get()){const t=Chains.pathFrom(e),n=await Networks.read();for(const[i,o]of n.entries())if(t===o.chain)return ee.activate(o,e);throw new Error(`No network provider found for chain ${t}`)}}}),QueryCache=create_store_class({store:SI_STORE_QUERY_CACHE,extension:"map",class:class extends WritableStoreMap{async set(e,t){this._w_cache[e]=t,await this.save()}}});var grpcWebClient_umd$1={exports:{}};(function(A,e){(function(t,n){A.exports=n()})(commonjsGlobal,function(){return t={418:function(i,o){(function(r,a){for(var g in a)r[g]=a[g]})(o,function(r){var a={};function g(I){if(a[I])return a[I].exports;var s=a[I]={i:I,l:!1,exports:{}};return r[I].call(s.exports,s,s.exports,g),s.l=!0,s.exports}return g.m=r,g.c=a,g.i=function(I){return I},g.d=function(I,s,c){g.o(I,s)||Object.defineProperty(I,s,{configurable:!1,enumerable:!0,get:c})},g.n=function(I){var s=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(s,"a",s),s},g.o=function(I,s){return Object.prototype.hasOwnProperty.call(I,s)},g.p="",g(g.s=1)}([function(r,a,g){Object.defineProperty(a,"__esModule",{value:!0});var I=g(3),s=function(){function c(B,d){B===void 0&&(B={}),d===void 0&&(d={splitValues:!1});var l,E=this;this.headersMap={},B&&(typeof Headers<"u"&&B instanceof Headers?I.getHeaderKeys(B).forEach(function(C){I.getHeaderValues(B,C).forEach(function(f){d.splitValues?E.append(C,I.splitHeaderValue(f)):E.append(C,f)})}):typeof(l=B)=="object"&&typeof l.headersMap=="object"&&typeof l.forEach=="function"?B.forEach(function(C,f){E.append(C,f)}):typeof Map<"u"&&B instanceof Map?B.forEach(function(C,f){E.append(f,C)}):typeof B=="string"?this.appendFromString(B):typeof B=="object"&&Object.getOwnPropertyNames(B).forEach(function(C){var f=B[C];Array.isArray(f)?f.forEach(function(u){E.append(C,u)}):E.append(C,f)}))}return c.prototype.appendFromString=function(B){for(var d=B.split(`\r
`),l=0;l<d.length;l++){var E=d[l],C=E.indexOf(":");if(C>0){var f=E.substring(0,C).trim(),u=E.substring(C+1).trim();this.append(f,u)}}},c.prototype.delete=function(B,d){var l=I.normalizeName(B);if(d===void 0)delete this.headersMap[l];else{var E=this.headersMap[l];if(E){var C=E.indexOf(d);C>=0&&E.splice(C,1),E.length===0&&delete this.headersMap[l]}}},c.prototype.append=function(B,d){var l=this,E=I.normalizeName(B);Array.isArray(this.headersMap[E])||(this.headersMap[E]=[]),Array.isArray(d)?d.forEach(function(C){l.headersMap[E].push(I.normalizeValue(C))}):this.headersMap[E].push(I.normalizeValue(d))},c.prototype.set=function(B,d){var l=I.normalizeName(B);if(Array.isArray(d)){var E=[];d.forEach(function(C){E.push(I.normalizeValue(C))}),this.headersMap[l]=E}else this.headersMap[l]=[I.normalizeValue(d)]},c.prototype.has=function(B,d){var l=this.headersMap[I.normalizeName(B)];if(!Array.isArray(l))return!1;if(d!==void 0){var E=I.normalizeValue(d);return l.indexOf(E)>=0}return!0},c.prototype.get=function(B){var d=this.headersMap[I.normalizeName(B)];return d!==void 0?d.concat():[]},c.prototype.forEach=function(B){var d=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(l){B(l,d.headersMap[l])},this)},c.prototype.toHeaders=function(){if(typeof Headers<"u"){var B=new Headers;return this.forEach(function(d,l){l.forEach(function(E){B.append(d,E)})}),B}throw new Error("Headers class is not defined")},c}();a.BrowserHeaders=s},function(r,a,g){Object.defineProperty(a,"__esModule",{value:!0});var I=g(0);a.BrowserHeaders=I.BrowserHeaders},function(r,a,g){Object.defineProperty(a,"__esModule",{value:!0}),a.iterateHeaders=function(I,s){for(var c=I[Symbol.iterator](),B=c.next();!B.done;)s(B.value[0]),B=c.next()},a.iterateHeadersKeys=function(I,s){for(var c=I.keys(),B=c.next();!B.done;)s(B.value),B=c.next()}},function(r,a,g){Object.defineProperty(a,"__esModule",{value:!0});var I=g(2);a.normalizeName=function(s){if(typeof s!="string"&&(s=String(s)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(s))throw new TypeError("Invalid character in header field name");return s.toLowerCase()},a.normalizeValue=function(s){return typeof s!="string"&&(s=String(s)),s},a.getHeaderValues=function(s,c){var B=s;if(B instanceof Headers&&B.getAll)return B.getAll(c);var d=B.get(c);return d&&typeof d=="string"?[d]:d},a.getHeaderKeys=function(s){var c=s,B={},d=[];return c.keys?I.iterateHeadersKeys(c,function(l){B[l]||(B[l]=!0,d.push(l))}):c.forEach?c.forEach(function(l,E){B[E]||(B[E]=!0,d.push(E))}):I.iterateHeaders(c,function(l){var E=l[0];B[E]||(B[E]=!0,d.push(E))}),d},a.splitHeaderValue=function(s){var c=[];return s.split(", ").forEach(function(B){B.split(",").forEach(function(d){c.push(d)})}),c}}]))},617:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.ChunkParser=o.ChunkType=o.encodeASCII=o.decodeASCII=void 0;var a,g=r(65);function I(C){return(f=C)===9||f===10||f===13||C>=32&&C<=126;var f}function s(C){for(var f=0;f!==C.length;++f)if(!I(C[f]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(C))}function c(C){return(128&C.getUint8(0))==128}function B(C){return C.getUint32(1,!1)}function d(C,f,u){return C.byteLength-f>=u}function l(C,f,u){if(C.slice)return C.slice(f,u);var p=C.length;u!==void 0&&(p=u);for(var y=new Uint8Array(p-f),D=0,F=f;F<p;F++)y[D++]=C[F];return y}o.decodeASCII=s,o.encodeASCII=function(C){for(var f=new Uint8Array(C.length),u=0;u!==C.length;++u){var p=C.charCodeAt(u);if(!I(p))throw new Error("Metadata contains invalid ASCII");f[u]=p}return f},function(C){C[C.MESSAGE=1]="MESSAGE",C[C.TRAILERS=2]="TRAILERS"}(a=o.ChunkType||(o.ChunkType={}));var E=function(){function C(){this.buffer=null,this.position=0}return C.prototype.parse=function(f,u){if(f.length===0&&u)return[];var p,y=[];if(this.buffer==null)this.buffer=f,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=f,this.position=0;else{var D=this.buffer.byteLength-this.position,F=new Uint8Array(D+f.byteLength),G=l(this.buffer,this.position);F.set(G,0);var Q=new Uint8Array(f);F.set(Q,D),this.buffer=F,this.position=0}for(;;){if(!d(this.buffer,this.position,5))return y;var h=l(this.buffer,this.position,this.position+5),_=new DataView(h.buffer,h.byteOffset,h.byteLength),b=B(_);if(!d(this.buffer,this.position,5+b))return y;var w=l(this.buffer,this.position+5,this.position+5+b);if(this.position+=5+b,c(_))return y.push({chunkType:a.TRAILERS,trailers:(p=w,new g.Metadata(s(p)))}),y;y.push({chunkType:a.MESSAGE,data:w})}},C}();o.ChunkParser=E},8:function(i,o){var r;Object.defineProperty(o,"__esModule",{value:!0}),o.httpStatusToCode=o.Code=void 0,function(a){a[a.OK=0]="OK",a[a.Canceled=1]="Canceled",a[a.Unknown=2]="Unknown",a[a.InvalidArgument=3]="InvalidArgument",a[a.DeadlineExceeded=4]="DeadlineExceeded",a[a.NotFound=5]="NotFound",a[a.AlreadyExists=6]="AlreadyExists",a[a.PermissionDenied=7]="PermissionDenied",a[a.ResourceExhausted=8]="ResourceExhausted",a[a.FailedPrecondition=9]="FailedPrecondition",a[a.Aborted=10]="Aborted",a[a.OutOfRange=11]="OutOfRange",a[a.Unimplemented=12]="Unimplemented",a[a.Internal=13]="Internal",a[a.Unavailable=14]="Unavailable",a[a.DataLoss=15]="DataLoss",a[a.Unauthenticated=16]="Unauthenticated"}(r=o.Code||(o.Code={})),o.httpStatusToCode=function(a){switch(a){case 0:return r.Internal;case 200:return r.OK;case 400:return r.InvalidArgument;case 401:return r.Unauthenticated;case 403:return r.PermissionDenied;case 404:return r.NotFound;case 409:return r.Aborted;case 412:return r.FailedPrecondition;case 429:return r.ResourceExhausted;case 499:return r.Canceled;case 500:return r.Unknown;case 501:return r.Unimplemented;case 503:return r.Unavailable;case 504:return r.DeadlineExceeded;default:return r.Unknown}}},934:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.client=void 0;var a=r(65),g=r(617),I=r(8),s=r(346),c=r(57),B=r(882);o.client=function(E,C){return new d(E,C)};var d=function(){function E(C,f){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new g.ChunkParser,this.methodDefinition=C,this.props=f,this.createTransport()}return E.prototype.createTransport=function(){var C=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,f={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:C,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(f):this.transport=c.makeDefaultTransport(f)},E.prototype.onTransportHeaders=function(C,f){if(this.props.debug&&s.debug("onHeaders",C,f),this.closed)this.props.debug&&s.debug("grpc.onHeaders received after request was closed - ignoring");else if(f!==0){this.responseHeaders=C,this.props.debug&&s.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var u=l(C);this.props.debug&&s.debug("onHeaders.gRPCStatus",u);var p=u&&u>=0?u:I.httpStatusToCode(f);this.props.debug&&s.debug("onHeaders.code",p);var y=C.get("grpc-message")||[];if(this.props.debug&&s.debug("onHeaders.gRPCMessage",y),this.rawOnHeaders(C),p!==I.Code.OK){var D=this.decodeGRPCStatus(y[0]);this.rawOnError(p,D,C)}}},E.prototype.onTransportChunk=function(C){var f=this;if(this.closed)this.props.debug&&s.debug("grpc.onChunk received after request was closed - ignoring");else{var u=[];try{u=this.parser.parse(C)}catch(p){return this.props.debug&&s.debug("onChunk.parsing error",p,p.message),void this.rawOnError(I.Code.Internal,"parsing error: "+p.message)}u.forEach(function(p){if(p.chunkType===g.ChunkType.MESSAGE){var y=f.methodDefinition.responseType.deserializeBinary(p.data);f.rawOnMessage(y)}else p.chunkType===g.ChunkType.TRAILERS&&(f.responseHeaders?(f.responseTrailers=new a.Metadata(p.trailers),f.props.debug&&s.debug("onChunk.trailers",f.responseTrailers)):(f.responseHeaders=new a.Metadata(p.trailers),f.rawOnHeaders(f.responseHeaders)))})}},E.prototype.onTransportEnd=function(){if(this.props.debug&&s.debug("grpc.onEnd"),this.closed)this.props.debug&&s.debug("grpc.onEnd received after request was closed - ignoring");else if(this.responseTrailers!==void 0){var C=l(this.responseTrailers);if(C!==null){var f=this.responseTrailers.get("grpc-message"),u=this.decodeGRPCStatus(f[0]);this.rawOnEnd(C,u,this.responseTrailers)}else this.rawOnError(I.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(this.responseHeaders===void 0)return void this.rawOnError(I.Code.Unknown,"Response closed without headers");var p=l(this.responseHeaders),y=this.responseHeaders.get("grpc-message");if(this.props.debug&&s.debug("grpc.headers only response ",p,y),p===null)return void this.rawOnEnd(I.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var D=this.decodeGRPCStatus(y[0]);this.rawOnEnd(p,D,this.responseHeaders)}},E.prototype.decodeGRPCStatus=function(C){if(!C)return"";try{return decodeURIComponent(C)}catch{return C}},E.prototype.rawOnEnd=function(C,f,u){var p=this;this.props.debug&&s.debug("rawOnEnd",C,f,u),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(y){if(!p.closed)try{y(C,f,u)}catch(D){setTimeout(function(){throw D},0)}}))},E.prototype.rawOnHeaders=function(C){this.props.debug&&s.debug("rawOnHeaders",C),this.completed||this.onHeadersCallbacks.forEach(function(f){try{f(C)}catch(u){setTimeout(function(){throw u},0)}})},E.prototype.rawOnError=function(C,f,u){var p=this;u===void 0&&(u=new a.Metadata),this.props.debug&&s.debug("rawOnError",C,f),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(y){if(!p.closed)try{y(C,f,u)}catch(D){setTimeout(function(){throw D},0)}}))},E.prototype.rawOnMessage=function(C){var f=this;this.props.debug&&s.debug("rawOnMessage",C.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach(function(u){if(!f.closed)try{u(C)}catch(p){setTimeout(function(){throw p},0)}})},E.prototype.onHeaders=function(C){this.onHeadersCallbacks.push(C)},E.prototype.onMessage=function(C){this.onMessageCallbacks.push(C)},E.prototype.onEnd=function(C){this.onEndCallbacks.push(C)},E.prototype.start=function(C){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var f=new a.Metadata(C||{});f.set("content-type","application/grpc-web+proto"),f.set("x-grpc-web","1"),this.transport.start(f)},E.prototype.send=function(C){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var f=B.frameRequest(C);this.transport.sendMessage(f)},E.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},E.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&s.debug("request.abort aborting request"),this.transport.cancel()},E}();function l(E){var C=E.get("grpc-status")||[];if(C.length>0)try{var f=C[0];return parseInt(f,10)}catch{return null}return null}},346:function(i,o){Object.defineProperty(o,"__esModule",{value:!0}),o.debug=void 0,o.debug=function(){for(var r=[],a=0;a<arguments.length;a++)r[a]=arguments[a];console.debug?console.debug.apply(null,r):console.log.apply(null,r)}},607:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.grpc=void 0;var a,g=r(418),I=r(57),s=r(229),c=r(540),B=r(210),d=r(859),l=r(8),E=r(938),C=r(35),f=r(934);(a=o.grpc||(o.grpc={})).setDefaultTransport=I.setDefaultTransportFactory,a.CrossBrowserHttpTransport=d.CrossBrowserHttpTransport,a.FetchReadableStreamTransport=s.FetchReadableStreamTransport,a.XhrTransport=B.XhrTransport,a.WebsocketTransport=c.WebsocketTransport,a.Code=l.Code,a.Metadata=g.BrowserHeaders,a.client=function(u,p){return f.client(u,p)},a.invoke=E.invoke,a.unary=C.unary},938:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.invoke=void 0;var a=r(934);o.invoke=function(g,I){if(g.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var s=a.client(g,{host:I.host,transport:I.transport,debug:I.debug});return I.onHeaders&&s.onHeaders(I.onHeaders),I.onMessage&&s.onMessage(I.onMessage),I.onEnd&&s.onEnd(I.onEnd),s.start(I.metadata),s.send(I.request),s.finishSend(),{close:function(){s.close()}}}},65:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.Metadata=void 0;var a=r(418);Object.defineProperty(o,"Metadata",{enumerable:!0,get:function(){return a.BrowserHeaders}})},57:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.makeDefaultTransport=o.setDefaultTransportFactory=void 0;var a=r(859),g=function(I){return a.CrossBrowserHttpTransport({withCredentials:!1})(I)};o.setDefaultTransportFactory=function(I){g=I},o.makeDefaultTransport=function(I){return g(I)}},229:function(i,o,r){var a=this&&this.__assign||function(){return(a=Object.assign||function(c){for(var B,d=1,l=arguments.length;d<l;d++)for(var E in B=arguments[d])Object.prototype.hasOwnProperty.call(B,E)&&(c[E]=B[E]);return c}).apply(this,arguments)};Object.defineProperty(o,"__esModule",{value:!0}),o.detectFetchSupport=o.FetchReadableStreamTransport=void 0;var g=r(65),I=r(346);o.FetchReadableStreamTransport=function(c){return function(B){return function(d,l){return d.debug&&I.debug("fetchRequest",d),new s(d,l)}(B,c)}};var s=function(){function c(B,d){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=B,this.init=d}return c.prototype.pump=function(B,d){var l=this;if(this.reader=B,this.cancelled)return this.options.debug&&I.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch(function(E){l.options.debug&&I.debug("Fetch.pump.reader.cancel exception",E)});this.reader.read().then(function(E){if(E.done)return l.options.onEnd(),d;l.options.onChunk(E.value),l.pump(l.reader,d)}).catch(function(E){l.cancelled?l.options.debug&&I.debug("Fetch.catch - request cancelled"):(l.cancelled=!0,l.options.debug&&I.debug("Fetch.catch",E.message),l.options.onEnd(E))})},c.prototype.send=function(B){var d=this;fetch(this.options.url,a(a({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:B,signal:this.controller&&this.controller.signal})).then(function(l){if(d.options.debug&&I.debug("Fetch.response",l),d.options.onHeaders(new g.Metadata(l.headers),l.status),!l.body)return l;d.pump(l.body.getReader(),l)}).catch(function(l){d.cancelled?d.options.debug&&I.debug("Fetch.catch - request cancelled"):(d.cancelled=!0,d.options.debug&&I.debug("Fetch.catch",l.message),d.options.onEnd(l))})},c.prototype.sendMessage=function(B){this.send(B)},c.prototype.finishSend=function(){},c.prototype.start=function(B){this.metadata=B},c.prototype.cancel=function(){var B=this;this.cancelled?this.options.debug&&I.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&I.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&I.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&I.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch(function(d){B.options.debug&&I.debug("Fetch.cancel.reader.cancel exception",d)})):this.options.debug&&I.debug("Fetch.cancel before reader"))},c}();o.detectFetchSupport=function(){return typeof Response<"u"&&Response.prototype.hasOwnProperty("body")&&typeof Headers=="function"}},859:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.CrossBrowserHttpTransport=void 0;var a=r(229),g=r(210);o.CrossBrowserHttpTransport=function(I){if(a.detectFetchSupport()){var s={credentials:I.withCredentials?"include":"same-origin"};return a.FetchReadableStreamTransport(s)}return g.XhrTransport({withCredentials:I.withCredentials})}},210:function(i,o,r){var a,g=this&&this.__extends||(a=function(C,f){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(u,p){u.__proto__=p}||function(u,p){for(var y in p)Object.prototype.hasOwnProperty.call(p,y)&&(u[y]=p[y])})(C,f)},function(C,f){function u(){this.constructor=C}a(C,f),C.prototype=f===null?Object.create(f):(u.prototype=f.prototype,new u)});Object.defineProperty(o,"__esModule",{value:!0}),o.stringToArrayBuffer=o.MozChunkedArrayBufferXHR=o.XHR=o.XhrTransport=void 0;var I=r(65),s=r(346),c=r(849);o.XhrTransport=function(C){return function(f){if(c.detectMozXHRSupport())return new d(f,C);if(c.detectXHROverrideMimeTypeSupport())return new B(f,C);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var B=function(){function C(f,u){this.options=f,this.init=u}return C.prototype.onProgressEvent=function(){this.options.debug&&s.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var f=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var u=E(f);this.options.onChunk(u)},C.prototype.onLoadEvent=function(){this.options.debug&&s.debug("XHR.onLoadEvent"),this.options.onEnd()},C.prototype.onStateChange=function(){this.options.debug&&s.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new I.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},C.prototype.sendMessage=function(f){this.xhr.send(f)},C.prototype.finishSend=function(){},C.prototype.start=function(f){var u=this;this.metadata=f;var p=new XMLHttpRequest;this.xhr=p,p.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach(function(y,D){p.setRequestHeader(y,D.join(", "))}),p.withCredentials=Boolean(this.init.withCredentials),p.addEventListener("readystatechange",this.onStateChange.bind(this)),p.addEventListener("progress",this.onProgressEvent.bind(this)),p.addEventListener("loadend",this.onLoadEvent.bind(this)),p.addEventListener("error",function(y){u.options.debug&&s.debug("XHR.error",y),u.options.onEnd(y.error)})},C.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},C.prototype.cancel=function(){this.options.debug&&s.debug("XHR.abort"),this.xhr.abort()},C}();o.XHR=B;var d=function(C){function f(){return C!==null&&C.apply(this,arguments)||this}return g(f,C),f.prototype.configureXhr=function(){this.options.debug&&s.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},f.prototype.onProgressEvent=function(){var u=this.xhr.response;this.options.debug&&s.debug("MozXHR.onProgressEvent: ",new Uint8Array(u)),this.options.onChunk(new Uint8Array(u))},f}(B);function l(C,f){var u=C.charCodeAt(f);if(u>=55296&&u<=56319){var p=C.charCodeAt(f+1);p>=56320&&p<=57343&&(u=65536+(u-55296<<10)+(p-56320))}return u}function E(C){for(var f=new Uint8Array(C.length),u=0,p=0;p<C.length;p++){var y=String.prototype.codePointAt?C.codePointAt(p):l(C,p);f[u++]=255&y}return f}o.MozChunkedArrayBufferXHR=d,o.stringToArrayBuffer=E},849:function(i,o){var r;function a(){if(r!==void 0)return r;if(XMLHttpRequest){r=new XMLHttpRequest;try{r.open("GET","https://localhost")}catch{}}return r}function g(I){var s=a();if(!s)return!1;try{return s.responseType=I,s.responseType===I}catch{}return!1}Object.defineProperty(o,"__esModule",{value:!0}),o.detectXHROverrideMimeTypeSupport=o.detectMozXHRSupport=o.xhrSupportsResponseType=void 0,o.xhrSupportsResponseType=g,o.detectMozXHRSupport=function(){return typeof XMLHttpRequest<"u"&&g("moz-chunked-arraybuffer")},o.detectXHROverrideMimeTypeSupport=function(){return typeof XMLHttpRequest<"u"&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.WebsocketTransport=void 0;var a,g=r(346),I=r(617);(function(c){c[c.FINISH_SEND=1]="FINISH_SEND"})(a||(a={}));var s=new Uint8Array([1]);o.WebsocketTransport=function(){return function(c){return function(B){B.debug&&g.debug("websocketRequest",B);var d,l=function(f){if(f.substr(0,8)==="https://")return"wss://"+f.substr(8);if(f.substr(0,7)==="http://")return"ws://"+f.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(B.url),E=[];function C(f){if(f===a.FINISH_SEND)d.send(s);else{var u=f,p=new Int8Array(u.byteLength+1);p.set(new Uint8Array([0])),p.set(u,1),d.send(p)}}return{sendMessage:function(f){d&&d.readyState!==d.CONNECTING?C(f):E.push(f)},finishSend:function(){d&&d.readyState!==d.CONNECTING?C(a.FINISH_SEND):E.push(a.FINISH_SEND)},start:function(f){(d=new WebSocket(l,["grpc-websockets"])).binaryType="arraybuffer",d.onopen=function(){var u;B.debug&&g.debug("websocketRequest.onopen"),d.send((u="",f.forEach(function(p,y){u+=p+": "+y.join(", ")+`\r
`}),I.encodeASCII(u))),E.forEach(function(p){C(p)})},d.onclose=function(u){B.debug&&g.debug("websocketRequest.onclose",u),B.onEnd()},d.onerror=function(u){B.debug&&g.debug("websocketRequest.onerror",u)},d.onmessage=function(u){B.onChunk(new Uint8Array(u.data))}},cancel:function(){B.debug&&g.debug("websocket.abort"),d.close()}}}(c)}}},35:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.unary=void 0;var a=r(65),g=r(934);o.unary=function(I,s){if(I.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(I.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var c=null,B=null,d=g.client(I,{host:s.host,transport:s.transport,debug:s.debug});return d.onHeaders(function(l){c=l}),d.onMessage(function(l){B=l}),d.onEnd(function(l,E,C){s.onEnd({status:l,statusMessage:E,headers:c||new a.Metadata,message:B,trailers:C})}),d.start(s.metadata),d.send(s.request),d.finishSend(),{close:function(){d.close()}}}},882:function(i,o){Object.defineProperty(o,"__esModule",{value:!0}),o.frameRequest=void 0,o.frameRequest=function(r){var a=r.serializeBinary(),g=new ArrayBuffer(a.byteLength+5);return new DataView(g,1,4).setUint32(0,a.length,!1),new Uint8Array(g,5).set(a),new Uint8Array(g)}}},n={},function i(o){if(n[o])return n[o].exports;var r=n[o]={exports:{}};return t[o].call(r.exports,r,r.exports,i),r.exports}(607);var t,n})})(grpcWebClient_umd$1);var grpcWebClient_umd={exports:{}};(function(A,e){(function(t,n){A.exports=n()})(commonjsGlobal,function(){return t={418:function(i,o){(function(r,a){for(var g in a)r[g]=a[g]})(o,function(r){var a={};function g(I){if(a[I])return a[I].exports;var s=a[I]={i:I,l:!1,exports:{}};return r[I].call(s.exports,s,s.exports,g),s.l=!0,s.exports}return g.m=r,g.c=a,g.i=function(I){return I},g.d=function(I,s,c){g.o(I,s)||Object.defineProperty(I,s,{configurable:!1,enumerable:!0,get:c})},g.n=function(I){var s=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(s,"a",s),s},g.o=function(I,s){return Object.prototype.hasOwnProperty.call(I,s)},g.p="",g(g.s=1)}([function(r,a,g){Object.defineProperty(a,"__esModule",{value:!0});var I=g(3),s=function(){function c(B,d){B===void 0&&(B={}),d===void 0&&(d={splitValues:!1});var l,E=this;this.headersMap={},B&&(typeof Headers<"u"&&B instanceof Headers?I.getHeaderKeys(B).forEach(function(C){I.getHeaderValues(B,C).forEach(function(f){d.splitValues?E.append(C,I.splitHeaderValue(f)):E.append(C,f)})}):typeof(l=B)=="object"&&typeof l.headersMap=="object"&&typeof l.forEach=="function"?B.forEach(function(C,f){E.append(C,f)}):typeof Map<"u"&&B instanceof Map?B.forEach(function(C,f){E.append(f,C)}):typeof B=="string"?this.appendFromString(B):typeof B=="object"&&Object.getOwnPropertyNames(B).forEach(function(C){var f=B[C];Array.isArray(f)?f.forEach(function(u){E.append(C,u)}):E.append(C,f)}))}return c.prototype.appendFromString=function(B){for(var d=B.split(`\r
`),l=0;l<d.length;l++){var E=d[l],C=E.indexOf(":");if(C>0){var f=E.substring(0,C).trim(),u=E.substring(C+1).trim();this.append(f,u)}}},c.prototype.delete=function(B,d){var l=I.normalizeName(B);if(d===void 0)delete this.headersMap[l];else{var E=this.headersMap[l];if(E){var C=E.indexOf(d);C>=0&&E.splice(C,1),E.length===0&&delete this.headersMap[l]}}},c.prototype.append=function(B,d){var l=this,E=I.normalizeName(B);Array.isArray(this.headersMap[E])||(this.headersMap[E]=[]),Array.isArray(d)?d.forEach(function(C){l.headersMap[E].push(I.normalizeValue(C))}):this.headersMap[E].push(I.normalizeValue(d))},c.prototype.set=function(B,d){var l=I.normalizeName(B);if(Array.isArray(d)){var E=[];d.forEach(function(C){E.push(I.normalizeValue(C))}),this.headersMap[l]=E}else this.headersMap[l]=[I.normalizeValue(d)]},c.prototype.has=function(B,d){var l=this.headersMap[I.normalizeName(B)];if(!Array.isArray(l))return!1;if(d!==void 0){var E=I.normalizeValue(d);return l.indexOf(E)>=0}return!0},c.prototype.get=function(B){var d=this.headersMap[I.normalizeName(B)];return d!==void 0?d.concat():[]},c.prototype.forEach=function(B){var d=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(l){B(l,d.headersMap[l])},this)},c.prototype.toHeaders=function(){if(typeof Headers<"u"){var B=new Headers;return this.forEach(function(d,l){l.forEach(function(E){B.append(d,E)})}),B}throw new Error("Headers class is not defined")},c}();a.BrowserHeaders=s},function(r,a,g){Object.defineProperty(a,"__esModule",{value:!0});var I=g(0);a.BrowserHeaders=I.BrowserHeaders},function(r,a,g){Object.defineProperty(a,"__esModule",{value:!0}),a.iterateHeaders=function(I,s){for(var c=I[Symbol.iterator](),B=c.next();!B.done;)s(B.value[0]),B=c.next()},a.iterateHeadersKeys=function(I,s){for(var c=I.keys(),B=c.next();!B.done;)s(B.value),B=c.next()}},function(r,a,g){Object.defineProperty(a,"__esModule",{value:!0});var I=g(2);a.normalizeName=function(s){if(typeof s!="string"&&(s=String(s)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(s))throw new TypeError("Invalid character in header field name");return s.toLowerCase()},a.normalizeValue=function(s){return typeof s!="string"&&(s=String(s)),s},a.getHeaderValues=function(s,c){var B=s;if(B instanceof Headers&&B.getAll)return B.getAll(c);var d=B.get(c);return d&&typeof d=="string"?[d]:d},a.getHeaderKeys=function(s){var c=s,B={},d=[];return c.keys?I.iterateHeadersKeys(c,function(l){B[l]||(B[l]=!0,d.push(l))}):c.forEach?c.forEach(function(l,E){B[E]||(B[E]=!0,d.push(E))}):I.iterateHeaders(c,function(l){var E=l[0];B[E]||(B[E]=!0,d.push(E))}),d},a.splitHeaderValue=function(s){var c=[];return s.split(", ").forEach(function(B){B.split(",").forEach(function(d){c.push(d)})}),c}}]))},617:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.ChunkParser=o.ChunkType=o.encodeASCII=o.decodeASCII=void 0;var a,g=r(65);function I(C){return(f=C)===9||f===10||f===13||C>=32&&C<=126;var f}function s(C){for(var f=0;f!==C.length;++f)if(!I(C[f]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(C))}function c(C){return(128&C.getUint8(0))==128}function B(C){return C.getUint32(1,!1)}function d(C,f,u){return C.byteLength-f>=u}function l(C,f,u){if(C.slice)return C.slice(f,u);var p=C.length;u!==void 0&&(p=u);for(var y=new Uint8Array(p-f),D=0,F=f;F<p;F++)y[D++]=C[F];return y}o.decodeASCII=s,o.encodeASCII=function(C){for(var f=new Uint8Array(C.length),u=0;u!==C.length;++u){var p=C.charCodeAt(u);if(!I(p))throw new Error("Metadata contains invalid ASCII");f[u]=p}return f},function(C){C[C.MESSAGE=1]="MESSAGE",C[C.TRAILERS=2]="TRAILERS"}(a=o.ChunkType||(o.ChunkType={}));var E=function(){function C(){this.buffer=null,this.position=0}return C.prototype.parse=function(f,u){if(f.length===0&&u)return[];var p,y=[];if(this.buffer==null)this.buffer=f,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=f,this.position=0;else{var D=this.buffer.byteLength-this.position,F=new Uint8Array(D+f.byteLength),G=l(this.buffer,this.position);F.set(G,0);var Q=new Uint8Array(f);F.set(Q,D),this.buffer=F,this.position=0}for(;;){if(!d(this.buffer,this.position,5))return y;var h=l(this.buffer,this.position,this.position+5),_=new DataView(h.buffer,h.byteOffset,h.byteLength),b=B(_);if(!d(this.buffer,this.position,5+b))return y;var w=l(this.buffer,this.position+5,this.position+5+b);if(this.position+=5+b,c(_))return y.push({chunkType:a.TRAILERS,trailers:(p=w,new g.Metadata(s(p)))}),y;y.push({chunkType:a.MESSAGE,data:w})}},C}();o.ChunkParser=E},8:function(i,o){var r;Object.defineProperty(o,"__esModule",{value:!0}),o.httpStatusToCode=o.Code=void 0,function(a){a[a.OK=0]="OK",a[a.Canceled=1]="Canceled",a[a.Unknown=2]="Unknown",a[a.InvalidArgument=3]="InvalidArgument",a[a.DeadlineExceeded=4]="DeadlineExceeded",a[a.NotFound=5]="NotFound",a[a.AlreadyExists=6]="AlreadyExists",a[a.PermissionDenied=7]="PermissionDenied",a[a.ResourceExhausted=8]="ResourceExhausted",a[a.FailedPrecondition=9]="FailedPrecondition",a[a.Aborted=10]="Aborted",a[a.OutOfRange=11]="OutOfRange",a[a.Unimplemented=12]="Unimplemented",a[a.Internal=13]="Internal",a[a.Unavailable=14]="Unavailable",a[a.DataLoss=15]="DataLoss",a[a.Unauthenticated=16]="Unauthenticated"}(r=o.Code||(o.Code={})),o.httpStatusToCode=function(a){switch(a){case 0:return r.Internal;case 200:return r.OK;case 400:return r.InvalidArgument;case 401:return r.Unauthenticated;case 403:return r.PermissionDenied;case 404:return r.NotFound;case 409:return r.Aborted;case 412:return r.FailedPrecondition;case 429:return r.ResourceExhausted;case 499:return r.Canceled;case 500:return r.Unknown;case 501:return r.Unimplemented;case 503:return r.Unavailable;case 504:return r.DeadlineExceeded;default:return r.Unknown}}},934:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.client=void 0;var a=r(65),g=r(617),I=r(8),s=r(346),c=r(57),B=r(882);o.client=function(E,C){return new d(E,C)};var d=function(){function E(C,f){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new g.ChunkParser,this.methodDefinition=C,this.props=f,this.createTransport()}return E.prototype.createTransport=function(){var C=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,f={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:C,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(f):this.transport=c.makeDefaultTransport(f)},E.prototype.onTransportHeaders=function(C,f){if(this.props.debug&&s.debug("onHeaders",C,f),this.closed)this.props.debug&&s.debug("grpc.onHeaders received after request was closed - ignoring");else if(f!==0){this.responseHeaders=C,this.props.debug&&s.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var u=l(C);this.props.debug&&s.debug("onHeaders.gRPCStatus",u);var p=u&&u>=0?u:I.httpStatusToCode(f);this.props.debug&&s.debug("onHeaders.code",p);var y=C.get("grpc-message")||[];if(this.props.debug&&s.debug("onHeaders.gRPCMessage",y),this.rawOnHeaders(C),p!==I.Code.OK){var D=this.decodeGRPCStatus(y[0]);this.rawOnError(p,D,C)}}},E.prototype.onTransportChunk=function(C){var f=this;if(this.closed)this.props.debug&&s.debug("grpc.onChunk received after request was closed - ignoring");else{var u=[];try{u=this.parser.parse(C)}catch(p){return this.props.debug&&s.debug("onChunk.parsing error",p,p.message),void this.rawOnError(I.Code.Internal,"parsing error: "+p.message)}u.forEach(function(p){if(p.chunkType===g.ChunkType.MESSAGE){var y=f.methodDefinition.responseType.deserializeBinary(p.data);f.rawOnMessage(y)}else p.chunkType===g.ChunkType.TRAILERS&&(f.responseHeaders?(f.responseTrailers=new a.Metadata(p.trailers),f.props.debug&&s.debug("onChunk.trailers",f.responseTrailers)):(f.responseHeaders=new a.Metadata(p.trailers),f.rawOnHeaders(f.responseHeaders)))})}},E.prototype.onTransportEnd=function(){if(this.props.debug&&s.debug("grpc.onEnd"),this.closed)this.props.debug&&s.debug("grpc.onEnd received after request was closed - ignoring");else if(this.responseTrailers!==void 0){var C=l(this.responseTrailers);if(C!==null){var f=this.responseTrailers.get("grpc-message"),u=this.decodeGRPCStatus(f[0]);this.rawOnEnd(C,u,this.responseTrailers)}else this.rawOnError(I.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(this.responseHeaders===void 0)return void this.rawOnError(I.Code.Unknown,"Response closed without headers");var p=l(this.responseHeaders),y=this.responseHeaders.get("grpc-message");if(this.props.debug&&s.debug("grpc.headers only response ",p,y),p===null)return void this.rawOnEnd(I.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var D=this.decodeGRPCStatus(y[0]);this.rawOnEnd(p,D,this.responseHeaders)}},E.prototype.decodeGRPCStatus=function(C){if(!C)return"";try{return decodeURIComponent(C)}catch{return C}},E.prototype.rawOnEnd=function(C,f,u){var p=this;this.props.debug&&s.debug("rawOnEnd",C,f,u),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(y){if(!p.closed)try{y(C,f,u)}catch(D){setTimeout(function(){throw D},0)}}))},E.prototype.rawOnHeaders=function(C){this.props.debug&&s.debug("rawOnHeaders",C),this.completed||this.onHeadersCallbacks.forEach(function(f){try{f(C)}catch(u){setTimeout(function(){throw u},0)}})},E.prototype.rawOnError=function(C,f,u){var p=this;u===void 0&&(u=new a.Metadata),this.props.debug&&s.debug("rawOnError",C,f),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(y){if(!p.closed)try{y(C,f,u)}catch(D){setTimeout(function(){throw D},0)}}))},E.prototype.rawOnMessage=function(C){var f=this;this.props.debug&&s.debug("rawOnMessage",C.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach(function(u){if(!f.closed)try{u(C)}catch(p){setTimeout(function(){throw p},0)}})},E.prototype.onHeaders=function(C){this.onHeadersCallbacks.push(C)},E.prototype.onMessage=function(C){this.onMessageCallbacks.push(C)},E.prototype.onEnd=function(C){this.onEndCallbacks.push(C)},E.prototype.start=function(C){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var f=new a.Metadata(C||{});f.set("content-type","application/grpc-web+proto"),f.set("x-grpc-web","1"),this.transport.start(f)},E.prototype.send=function(C){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var f=B.frameRequest(C);this.transport.sendMessage(f)},E.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},E.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&s.debug("request.abort aborting request"),this.transport.cancel()},E}();function l(E){var C=E.get("grpc-status")||[];if(C.length>0)try{var f=C[0];return parseInt(f,10)}catch{return null}return null}},346:function(i,o){Object.defineProperty(o,"__esModule",{value:!0}),o.debug=void 0,o.debug=function(){for(var r=[],a=0;a<arguments.length;a++)r[a]=arguments[a];console.debug?console.debug.apply(null,r):console.log.apply(null,r)}},607:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.grpc=void 0;var a,g=r(418),I=r(57),s=r(229),c=r(540),B=r(210),d=r(859),l=r(8),E=r(938),C=r(35),f=r(934);(a=o.grpc||(o.grpc={})).setDefaultTransport=I.setDefaultTransportFactory,a.CrossBrowserHttpTransport=d.CrossBrowserHttpTransport,a.FetchReadableStreamTransport=s.FetchReadableStreamTransport,a.XhrTransport=B.XhrTransport,a.WebsocketTransport=c.WebsocketTransport,a.Code=l.Code,a.Metadata=g.BrowserHeaders,a.client=function(u,p){return f.client(u,p)},a.invoke=E.invoke,a.unary=C.unary},938:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.invoke=void 0;var a=r(934);o.invoke=function(g,I){if(g.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var s=a.client(g,{host:I.host,transport:I.transport,debug:I.debug});return I.onHeaders&&s.onHeaders(I.onHeaders),I.onMessage&&s.onMessage(I.onMessage),I.onEnd&&s.onEnd(I.onEnd),s.start(I.metadata),s.send(I.request),s.finishSend(),{close:function(){s.close()}}}},65:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.Metadata=void 0;var a=r(418);Object.defineProperty(o,"Metadata",{enumerable:!0,get:function(){return a.BrowserHeaders}})},57:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.makeDefaultTransport=o.setDefaultTransportFactory=void 0;var a=r(859),g=function(I){return a.CrossBrowserHttpTransport({withCredentials:!1})(I)};o.setDefaultTransportFactory=function(I){g=I},o.makeDefaultTransport=function(I){return g(I)}},229:function(i,o,r){var a=this&&this.__assign||function(){return(a=Object.assign||function(c){for(var B,d=1,l=arguments.length;d<l;d++)for(var E in B=arguments[d])Object.prototype.hasOwnProperty.call(B,E)&&(c[E]=B[E]);return c}).apply(this,arguments)};Object.defineProperty(o,"__esModule",{value:!0}),o.detectFetchSupport=o.FetchReadableStreamTransport=void 0;var g=r(65),I=r(346);o.FetchReadableStreamTransport=function(c){return function(B){return function(d,l){return d.debug&&I.debug("fetchRequest",d),new s(d,l)}(B,c)}};var s=function(){function c(B,d){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=B,this.init=d}return c.prototype.pump=function(B,d){var l=this;if(this.reader=B,this.cancelled)return this.options.debug&&I.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch(function(E){l.options.debug&&I.debug("Fetch.pump.reader.cancel exception",E)});this.reader.read().then(function(E){if(E.done)return l.options.onEnd(),d;l.options.onChunk(E.value),l.pump(l.reader,d)}).catch(function(E){l.cancelled?l.options.debug&&I.debug("Fetch.catch - request cancelled"):(l.cancelled=!0,l.options.debug&&I.debug("Fetch.catch",E.message),l.options.onEnd(E))})},c.prototype.send=function(B){var d=this;fetch(this.options.url,a(a({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:B,signal:this.controller&&this.controller.signal})).then(function(l){if(d.options.debug&&I.debug("Fetch.response",l),d.options.onHeaders(new g.Metadata(l.headers),l.status),!l.body)return l;d.pump(l.body.getReader(),l)}).catch(function(l){d.cancelled?d.options.debug&&I.debug("Fetch.catch - request cancelled"):(d.cancelled=!0,d.options.debug&&I.debug("Fetch.catch",l.message),d.options.onEnd(l))})},c.prototype.sendMessage=function(B){this.send(B)},c.prototype.finishSend=function(){},c.prototype.start=function(B){this.metadata=B},c.prototype.cancel=function(){var B=this;this.cancelled?this.options.debug&&I.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&I.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&I.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&I.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch(function(d){B.options.debug&&I.debug("Fetch.cancel.reader.cancel exception",d)})):this.options.debug&&I.debug("Fetch.cancel before reader"))},c}();o.detectFetchSupport=function(){return typeof Response<"u"&&Response.prototype.hasOwnProperty("body")&&typeof Headers=="function"}},859:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.CrossBrowserHttpTransport=void 0;var a=r(229),g=r(210);o.CrossBrowserHttpTransport=function(I){if(a.detectFetchSupport()){var s={credentials:I.withCredentials?"include":"same-origin"};return a.FetchReadableStreamTransport(s)}return g.XhrTransport({withCredentials:I.withCredentials})}},210:function(i,o,r){var a,g=this&&this.__extends||(a=function(C,f){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(u,p){u.__proto__=p}||function(u,p){for(var y in p)Object.prototype.hasOwnProperty.call(p,y)&&(u[y]=p[y])})(C,f)},function(C,f){function u(){this.constructor=C}a(C,f),C.prototype=f===null?Object.create(f):(u.prototype=f.prototype,new u)});Object.defineProperty(o,"__esModule",{value:!0}),o.stringToArrayBuffer=o.MozChunkedArrayBufferXHR=o.XHR=o.XhrTransport=void 0;var I=r(65),s=r(346),c=r(849);o.XhrTransport=function(C){return function(f){if(c.detectMozXHRSupport())return new d(f,C);if(c.detectXHROverrideMimeTypeSupport())return new B(f,C);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var B=function(){function C(f,u){this.options=f,this.init=u}return C.prototype.onProgressEvent=function(){this.options.debug&&s.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var f=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var u=E(f);this.options.onChunk(u)},C.prototype.onLoadEvent=function(){this.options.debug&&s.debug("XHR.onLoadEvent"),this.options.onEnd()},C.prototype.onStateChange=function(){this.options.debug&&s.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new I.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},C.prototype.sendMessage=function(f){this.xhr.send(f)},C.prototype.finishSend=function(){},C.prototype.start=function(f){var u=this;this.metadata=f;var p=new XMLHttpRequest;this.xhr=p,p.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach(function(y,D){p.setRequestHeader(y,D.join(", "))}),p.withCredentials=Boolean(this.init.withCredentials),p.addEventListener("readystatechange",this.onStateChange.bind(this)),p.addEventListener("progress",this.onProgressEvent.bind(this)),p.addEventListener("loadend",this.onLoadEvent.bind(this)),p.addEventListener("error",function(y){u.options.debug&&s.debug("XHR.error",y),u.options.onEnd(y.error)})},C.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},C.prototype.cancel=function(){this.options.debug&&s.debug("XHR.abort"),this.xhr.abort()},C}();o.XHR=B;var d=function(C){function f(){return C!==null&&C.apply(this,arguments)||this}return g(f,C),f.prototype.configureXhr=function(){this.options.debug&&s.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},f.prototype.onProgressEvent=function(){var u=this.xhr.response;this.options.debug&&s.debug("MozXHR.onProgressEvent: ",new Uint8Array(u)),this.options.onChunk(new Uint8Array(u))},f}(B);function l(C,f){var u=C.charCodeAt(f);if(u>=55296&&u<=56319){var p=C.charCodeAt(f+1);p>=56320&&p<=57343&&(u=65536+(u-55296<<10)+(p-56320))}return u}function E(C){for(var f=new Uint8Array(C.length),u=0,p=0;p<C.length;p++){var y=String.prototype.codePointAt?C.codePointAt(p):l(C,p);f[u++]=255&y}return f}o.MozChunkedArrayBufferXHR=d,o.stringToArrayBuffer=E},849:function(i,o){var r;function a(){if(r!==void 0)return r;if(XMLHttpRequest){r=new XMLHttpRequest;try{r.open("GET","https://localhost")}catch{}}return r}function g(I){var s=a();if(!s)return!1;try{return s.responseType=I,s.responseType===I}catch{}return!1}Object.defineProperty(o,"__esModule",{value:!0}),o.detectXHROverrideMimeTypeSupport=o.detectMozXHRSupport=o.xhrSupportsResponseType=void 0,o.xhrSupportsResponseType=g,o.detectMozXHRSupport=function(){return typeof XMLHttpRequest<"u"&&g("moz-chunked-arraybuffer")},o.detectXHROverrideMimeTypeSupport=function(){return typeof XMLHttpRequest<"u"&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.WebsocketTransport=void 0;var a,g=r(346),I=r(617);(function(c){c[c.FINISH_SEND=1]="FINISH_SEND"})(a||(a={}));var s=new Uint8Array([1]);o.WebsocketTransport=function(){return function(c){return function(B){B.debug&&g.debug("websocketRequest",B);var d,l=function(f){if(f.substr(0,8)==="https://")return"wss://"+f.substr(8);if(f.substr(0,7)==="http://")return"ws://"+f.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(B.url),E=[];function C(f){if(f===a.FINISH_SEND)d.send(s);else{var u=f,p=new Int8Array(u.byteLength+1);p.set(new Uint8Array([0])),p.set(u,1),d.send(p)}}return{sendMessage:function(f){d&&d.readyState!==d.CONNECTING?C(f):E.push(f)},finishSend:function(){d&&d.readyState!==d.CONNECTING?C(a.FINISH_SEND):E.push(a.FINISH_SEND)},start:function(f){(d=new WebSocket(l,["grpc-websockets"])).binaryType="arraybuffer",d.onopen=function(){var u;B.debug&&g.debug("websocketRequest.onopen"),d.send((u="",f.forEach(function(p,y){u+=p+": "+y.join(", ")+`\r
`}),I.encodeASCII(u))),E.forEach(function(p){C(p)})},d.onclose=function(u){B.debug&&g.debug("websocketRequest.onclose",u),B.onEnd()},d.onerror=function(u){B.debug&&g.debug("websocketRequest.onerror",u)},d.onmessage=function(u){B.onChunk(new Uint8Array(u.data))}},cancel:function(){B.debug&&g.debug("websocket.abort"),d.close()}}}(c)}}},35:function(i,o,r){Object.defineProperty(o,"__esModule",{value:!0}),o.unary=void 0;var a=r(65),g=r(934);o.unary=function(I,s){if(I.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(I.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var c=null,B=null,d=g.client(I,{host:s.host,transport:s.transport,debug:s.debug});return d.onHeaders(function(l){c=l}),d.onMessage(function(l){B=l}),d.onEnd(function(l,E,C){s.onEnd({status:l,statusMessage:E,headers:c||new a.Metadata,message:B,trailers:C})}),d.start(s.metadata),d.send(s.request),d.finishSend(),{close:function(){d.close()}}}},882:function(i,o){Object.defineProperty(o,"__esModule",{value:!0}),o.frameRequest=void 0,o.frameRequest=function(r){var a=r.serializeBinary(),g=new ArrayBuffer(a.byteLength+5);return new DataView(g,1,4).setUint32(0,a.length,!1),new Uint8Array(g,5).set(a),new Uint8Array(g)}}},n={},function i(o){if(n[o])return n[o].exports;var r=n[o]={exports:{}};return t[o].call(r.exports,r,r.exports,i),r.exports}(607);var t,n})})(grpcWebClient_umd);var indexMinimal={},minimal$1={},aspromise=asPromise;function asPromise(A,e){for(var t=new Array(arguments.length-1),n=0,i=2,o=!0;i<arguments.length;)t[n++]=arguments[i++];return new Promise(function(a,g){t[n]=function(s){if(o)if(o=!1,s)g(s);else{for(var c=new Array(arguments.length-1),B=0;B<c.length;)c[B++]=arguments[B];a.apply(null,c)}};try{A.apply(e||null,t)}catch(I){o&&(o=!1,g(I))}})}var base64$1={};(function(A){var e=A;e.length=function(a){var g=a.length;if(!g)return 0;for(var I=0;--g%4>1&&a.charAt(g)==="=";)++I;return Math.ceil(a.length*3)/4-I};for(var t=new Array(64),n=new Array(123),i=0;i<64;)n[t[i]=i<26?i+65:i<52?i+71:i<62?i-4:i-59|43]=i++;e.encode=function(a,g,I){for(var s=null,c=[],B=0,d=0,l;g<I;){var E=a[g++];switch(d){case 0:c[B++]=t[E>>2],l=(E&3)<<4,d=1;break;case 1:c[B++]=t[l|E>>4],l=(E&15)<<2,d=2;break;case 2:c[B++]=t[l|E>>6],c[B++]=t[E&63],d=0;break}B>8191&&((s||(s=[])).push(String.fromCharCode.apply(String,c)),B=0)}return d&&(c[B++]=t[l],c[B++]=61,d===1&&(c[B++]=61)),s?(B&&s.push(String.fromCharCode.apply(String,c.slice(0,B))),s.join("")):String.fromCharCode.apply(String,c.slice(0,B))};var o="invalid encoding";e.decode=function(a,g,I){for(var s=I,c=0,B,d=0;d<a.length;){var l=a.charCodeAt(d++);if(l===61&&c>1)break;if((l=n[l])===void 0)throw Error(o);switch(c){case 0:B=l,c=1;break;case 1:g[I++]=B<<2|(l&48)>>4,B=l,c=2;break;case 2:g[I++]=(B&15)<<4|(l&60)>>2,B=l,c=3;break;case 3:g[I++]=(B&3)<<6|l,c=0;break}}if(c===1)throw Error(o);return I-s},e.test=function(a){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(a)}})(base64$1);var eventemitter=EventEmitter;function EventEmitter(){this._listeners={}}EventEmitter.prototype.on=function(e,t,n){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:n||this}),this};EventEmitter.prototype.off=function(e,t){if(e===void 0)this._listeners={};else if(t===void 0)this._listeners[e]=[];else for(var n=this._listeners[e],i=0;i<n.length;)n[i].fn===t?n.splice(i,1):++i;return this};EventEmitter.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var n=[],i=1;i<arguments.length;)n.push(arguments[i++]);for(i=0;i<t.length;)t[i].fn.apply(t[i++].ctx,n)}return this};var float=factory(factory);function factory(A){return typeof Float32Array<"u"?function(){var e=new Float32Array([-0]),t=new Uint8Array(e.buffer),n=t[3]===128;function i(g,I,s){e[0]=g,I[s]=t[0],I[s+1]=t[1],I[s+2]=t[2],I[s+3]=t[3]}function o(g,I,s){e[0]=g,I[s]=t[3],I[s+1]=t[2],I[s+2]=t[1],I[s+3]=t[0]}A.writeFloatLE=n?i:o,A.writeFloatBE=n?o:i;function r(g,I){return t[0]=g[I],t[1]=g[I+1],t[2]=g[I+2],t[3]=g[I+3],e[0]}function a(g,I){return t[3]=g[I],t[2]=g[I+1],t[1]=g[I+2],t[0]=g[I+3],e[0]}A.readFloatLE=n?r:a,A.readFloatBE=n?a:r}():function(){function e(n,i,o,r){var a=i<0?1:0;if(a&&(i=-i),i===0)n(1/i>0?0:2147483648,o,r);else if(isNaN(i))n(2143289344,o,r);else if(i>34028234663852886e22)n((a<<31|2139095040)>>>0,o,r);else if(i<11754943508222875e-54)n((a<<31|Math.round(i/1401298464324817e-60))>>>0,o,r);else{var g=Math.floor(Math.log(i)/Math.LN2),I=Math.round(i*Math.pow(2,-g)*8388608)&8388607;n((a<<31|g+127<<23|I)>>>0,o,r)}}A.writeFloatLE=e.bind(null,writeUintLE),A.writeFloatBE=e.bind(null,writeUintBE);function t(n,i,o){var r=n(i,o),a=(r>>31)*2+1,g=r>>>23&255,I=r&8388607;return g===255?I?NaN:a*(1/0):g===0?a*1401298464324817e-60*I:a*Math.pow(2,g-150)*(I+8388608)}A.readFloatLE=t.bind(null,readUintLE),A.readFloatBE=t.bind(null,readUintBE)}(),typeof Float64Array<"u"?function(){var e=new Float64Array([-0]),t=new Uint8Array(e.buffer),n=t[7]===128;function i(g,I,s){e[0]=g,I[s]=t[0],I[s+1]=t[1],I[s+2]=t[2],I[s+3]=t[3],I[s+4]=t[4],I[s+5]=t[5],I[s+6]=t[6],I[s+7]=t[7]}function o(g,I,s){e[0]=g,I[s]=t[7],I[s+1]=t[6],I[s+2]=t[5],I[s+3]=t[4],I[s+4]=t[3],I[s+5]=t[2],I[s+6]=t[1],I[s+7]=t[0]}A.writeDoubleLE=n?i:o,A.writeDoubleBE=n?o:i;function r(g,I){return t[0]=g[I],t[1]=g[I+1],t[2]=g[I+2],t[3]=g[I+3],t[4]=g[I+4],t[5]=g[I+5],t[6]=g[I+6],t[7]=g[I+7],e[0]}function a(g,I){return t[7]=g[I],t[6]=g[I+1],t[5]=g[I+2],t[4]=g[I+3],t[3]=g[I+4],t[2]=g[I+5],t[1]=g[I+6],t[0]=g[I+7],e[0]}A.readDoubleLE=n?r:a,A.readDoubleBE=n?a:r}():function(){function e(n,i,o,r,a,g){var I=r<0?1:0;if(I&&(r=-r),r===0)n(0,a,g+i),n(1/r>0?0:2147483648,a,g+o);else if(isNaN(r))n(0,a,g+i),n(2146959360,a,g+o);else if(r>17976931348623157e292)n(0,a,g+i),n((I<<31|2146435072)>>>0,a,g+o);else{var s;if(r<22250738585072014e-324)s=r/5e-324,n(s>>>0,a,g+i),n((I<<31|s/4294967296)>>>0,a,g+o);else{var c=Math.floor(Math.log(r)/Math.LN2);c===1024&&(c=1023),s=r*Math.pow(2,-c),n(s*4503599627370496>>>0,a,g+i),n((I<<31|c+1023<<20|s*1048576&1048575)>>>0,a,g+o)}}}A.writeDoubleLE=e.bind(null,writeUintLE,0,4),A.writeDoubleBE=e.bind(null,writeUintBE,4,0);function t(n,i,o,r,a){var g=n(r,a+i),I=n(r,a+o),s=(I>>31)*2+1,c=I>>>20&2047,B=4294967296*(I&1048575)+g;return c===2047?B?NaN:s*(1/0):c===0?s*5e-324*B:s*Math.pow(2,c-1075)*(B+4503599627370496)}A.readDoubleLE=t.bind(null,readUintLE,0,4),A.readDoubleBE=t.bind(null,readUintBE,4,0)}(),A}function writeUintLE(A,e,t){e[t]=A&255,e[t+1]=A>>>8&255,e[t+2]=A>>>16&255,e[t+3]=A>>>24}function writeUintBE(A,e,t){e[t]=A>>>24,e[t+1]=A>>>16&255,e[t+2]=A>>>8&255,e[t+3]=A&255}function readUintLE(A,e){return(A[e]|A[e+1]<<8|A[e+2]<<16|A[e+3]<<24)>>>0}function readUintBE(A,e){return(A[e]<<24|A[e+1]<<16|A[e+2]<<8|A[e+3])>>>0}var inquire_1=inquire;function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(A){}return null}var utf8$2={};(function(A){var e=A;e.length=function(n){for(var i=0,o=0,r=0;r<n.length;++r)o=n.charCodeAt(r),o<128?i+=1:o<2048?i+=2:(o&64512)===55296&&(n.charCodeAt(r+1)&64512)===56320?(++r,i+=4):i+=3;return i},e.read=function(n,i,o){var r=o-i;if(r<1)return"";for(var a=null,g=[],I=0,s;i<o;)s=n[i++],s<128?g[I++]=s:s>191&&s<224?g[I++]=(s&31)<<6|n[i++]&63:s>239&&s<365?(s=((s&7)<<18|(n[i++]&63)<<12|(n[i++]&63)<<6|n[i++]&63)-65536,g[I++]=55296+(s>>10),g[I++]=56320+(s&1023)):g[I++]=(s&15)<<12|(n[i++]&63)<<6|n[i++]&63,I>8191&&((a||(a=[])).push(String.fromCharCode.apply(String,g)),I=0);return a?(I&&a.push(String.fromCharCode.apply(String,g.slice(0,I))),a.join("")):String.fromCharCode.apply(String,g.slice(0,I))},e.write=function(n,i,o){for(var r=o,a,g,I=0;I<n.length;++I)a=n.charCodeAt(I),a<128?i[o++]=a:a<2048?(i[o++]=a>>6|192,i[o++]=a&63|128):(a&64512)===55296&&((g=n.charCodeAt(I+1))&64512)===56320?(a=65536+((a&1023)<<10)+(g&1023),++I,i[o++]=a>>18|240,i[o++]=a>>12&63|128,i[o++]=a>>6&63|128,i[o++]=a&63|128):(i[o++]=a>>12|224,i[o++]=a>>6&63|128,i[o++]=a&63|128);return o-r}})(utf8$2);var pool_1=pool;function pool(A,e,t){var n=t||8192,i=n>>>1,o=null,r=n;return function(g){if(g<1||g>i)return A(g);r+g>n&&(o=A(n),r=0);var I=e.call(o,r,r+=g);return r&7&&(r=(r|7)+1),I}}var longbits=LongBits$2,util$5=minimal$1;function LongBits$2(A,e){this.lo=A>>>0,this.hi=e>>>0}var zero=LongBits$2.zero=new LongBits$2(0,0);zero.toNumber=function(){return 0};zero.zzEncode=zero.zzDecode=function(){return this};zero.length=function(){return 1};var zeroHash=LongBits$2.zeroHash="\0\0\0\0\0\0\0\0";LongBits$2.fromNumber=function A(e){if(e===0)return zero;var t=e<0;t&&(e=-e);var n=e>>>0,i=(e-n)/4294967296>>>0;return t&&(i=~i>>>0,n=~n>>>0,++n>4294967295&&(n=0,++i>4294967295&&(i=0))),new LongBits$2(n,i)};LongBits$2.from=function A(e){if(typeof e=="number")return LongBits$2.fromNumber(e);if(util$5.isString(e))if(util$5.Long)e=util$5.Long.fromString(e);else return LongBits$2.fromNumber(parseInt(e,10));return e.low||e.high?new LongBits$2(e.low>>>0,e.high>>>0):zero};LongBits$2.prototype.toNumber=function A(e){if(!e&&this.hi>>>31){var t=~this.lo+1>>>0,n=~this.hi>>>0;return t||(n=n+1>>>0),-(t+n*4294967296)}return this.lo+this.hi*4294967296};LongBits$2.prototype.toLong=function A(e){return util$5.Long?new util$5.Long(this.lo|0,this.hi|0,Boolean(e)):{low:this.lo|0,high:this.hi|0,unsigned:Boolean(e)}};var charCodeAt=String.prototype.charCodeAt;LongBits$2.fromHash=function A(e){return e===zeroHash?zero:new LongBits$2((charCodeAt.call(e,0)|charCodeAt.call(e,1)<<8|charCodeAt.call(e,2)<<16|charCodeAt.call(e,3)<<24)>>>0,(charCodeAt.call(e,4)|charCodeAt.call(e,5)<<8|charCodeAt.call(e,6)<<16|charCodeAt.call(e,7)<<24)>>>0)};LongBits$2.prototype.toHash=function A(){return String.fromCharCode(this.lo&255,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,this.hi&255,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)};LongBits$2.prototype.zzEncode=function A(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this};LongBits$2.prototype.zzDecode=function A(){var e=-(this.lo&1);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this};LongBits$2.prototype.length=function A(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return n===0?t===0?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:n<128?9:10};(function(A){var e=A;e.asPromise=aspromise,e.base64=base64$1,e.EventEmitter=eventemitter,e.float=float,e.inquire=inquire_1,e.utf8=utf8$2,e.pool=pool_1,e.LongBits=longbits,e.isNode=Boolean(typeof commonjsGlobal<"u"&&commonjsGlobal&&commonjsGlobal.process&&commonjsGlobal.process.versions&&commonjsGlobal.process.versions.node),e.global=e.isNode&&commonjsGlobal||typeof window<"u"&&window||typeof self<"u"&&self||commonjsGlobal,e.emptyArray=Object.freeze?Object.freeze([]):[],e.emptyObject=Object.freeze?Object.freeze({}):{},e.isInteger=Number.isInteger||function(o){return typeof o=="number"&&isFinite(o)&&Math.floor(o)===o},e.isString=function(o){return typeof o=="string"||o instanceof String},e.isObject=function(o){return o&&typeof o=="object"},e.isset=e.isSet=function(o,r){var a=o[r];return a!=null&&o.hasOwnProperty(r)?typeof a!="object"||(Array.isArray(a)?a.length:Object.keys(a).length)>0:!1},e.Buffer=function(){try{var i=e.inquire("buffer").Buffer;return i.prototype.utf8Write?i:null}catch{return null}}(),e._Buffer_from=null,e._Buffer_allocUnsafe=null,e.newBuffer=function(o){return typeof o=="number"?e.Buffer?e._Buffer_allocUnsafe(o):new e.Array(o):e.Buffer?e._Buffer_from(o):typeof Uint8Array>"u"?o:new Uint8Array(o)},e.Array=typeof Uint8Array<"u"?Uint8Array:Array,e.Long=e.global.dcodeIO&&e.global.dcodeIO.Long||e.global.Long||e.inquire("long"),e.key2Re=/^true|false|0|1$/,e.key32Re=/^-?(?:0|[1-9][0-9]*)$/,e.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,e.longToHash=function(o){return o?e.LongBits.from(o).toHash():e.LongBits.zeroHash},e.longFromHash=function(o,r){var a=e.LongBits.fromHash(o);return e.Long?e.Long.fromBits(a.lo,a.hi,r):a.toNumber(Boolean(r))};function t(i,o,r){for(var a=Object.keys(o),g=0;g<a.length;++g)(i[a[g]]===void 0||!r)&&(i[a[g]]=o[a[g]]);return i}e.merge=t,e.lcFirst=function(o){return o.charAt(0).toLowerCase()+o.substring(1)};function n(i){function o(r,a){if(!(this instanceof o))return new o(r,a);Object.defineProperty(this,"message",{get:function(){return r}}),Error.captureStackTrace?Error.captureStackTrace(this,o):Object.defineProperty(this,"stack",{value:new Error().stack||""}),a&&t(this,a)}return o.prototype=Object.create(Error.prototype,{constructor:{value:o,writable:!0,enumerable:!1,configurable:!0},name:{get(){return i},set:void 0,enumerable:!1,configurable:!0},toString:{value(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),o}e.newError=n,e.ProtocolError=n("ProtocolError"),e.oneOfGetter=function(o){for(var r={},a=0;a<o.length;++a)r[o[a]]=1;return function(){for(var g=Object.keys(this),I=g.length-1;I>-1;--I)if(r[g[I]]===1&&this[g[I]]!==void 0&&this[g[I]]!==null)return g[I]}},e.oneOfSetter=function(o){return function(r){for(var a=0;a<o.length;++a)o[a]!==r&&delete this[o[a]]}},e.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},e._configure=function(){var i=e.Buffer;if(!i){e._Buffer_from=e._Buffer_allocUnsafe=null;return}e._Buffer_from=i.from!==Uint8Array.from&&i.from||function(r,a){return new i(r,a)},e._Buffer_allocUnsafe=i.allocUnsafe||function(r){return new i(r)}}})(minimal$1);var writer=Writer$1,util$4=minimal$1,BufferWriter$1,LongBits$1=util$4.LongBits,base64=util$4.base64,utf8$1=util$4.utf8;function Op(A,e,t){this.fn=A,this.len=e,this.next=void 0,this.val=t}function noop(){}function State(A){this.head=A.head,this.tail=A.tail,this.len=A.len,this.next=A.states}function Writer$1(){this.len=0,this.head=new Op(noop,0,0),this.tail=this.head,this.states=null}var create$1=function A(){return util$4.Buffer?function(){return(Writer$1.create=function(){return new BufferWriter$1})()}:function(){return new Writer$1}};Writer$1.create=create$1();Writer$1.alloc=function A(e){return new util$4.Array(e)};util$4.Array!==Array&&(Writer$1.alloc=util$4.pool(Writer$1.alloc,util$4.Array.prototype.subarray));Writer$1.prototype._push=function A(e,t,n){return this.tail=this.tail.next=new Op(e,t,n),this.len+=t,this};function writeByte(A,e,t){e[t]=A&255}function writeVarint32(A,e,t){for(;A>127;)e[t++]=A&127|128,A>>>=7;e[t]=A}function VarintOp(A,e){this.len=A,this.next=void 0,this.val=e}VarintOp.prototype=Object.create(Op.prototype);VarintOp.prototype.fn=writeVarint32;Writer$1.prototype.uint32=function A(e){return this.len+=(this.tail=this.tail.next=new VarintOp((e=e>>>0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this};Writer$1.prototype.int32=function A(e){return e<0?this._push(writeVarint64,10,LongBits$1.fromNumber(e)):this.uint32(e)};Writer$1.prototype.sint32=function A(e){return this.uint32((e<<1^e>>31)>>>0)};function writeVarint64(A,e,t){for(;A.hi;)e[t++]=A.lo&127|128,A.lo=(A.lo>>>7|A.hi<<25)>>>0,A.hi>>>=7;for(;A.lo>127;)e[t++]=A.lo&127|128,A.lo=A.lo>>>7;e[t++]=A.lo}Writer$1.prototype.uint64=function A(e){var t=LongBits$1.from(e);return this._push(writeVarint64,t.length(),t)};Writer$1.prototype.int64=Writer$1.prototype.uint64;Writer$1.prototype.sint64=function A(e){var t=LongBits$1.from(e).zzEncode();return this._push(writeVarint64,t.length(),t)};Writer$1.prototype.bool=function A(e){return this._push(writeByte,1,e?1:0)};function writeFixed32(A,e,t){e[t]=A&255,e[t+1]=A>>>8&255,e[t+2]=A>>>16&255,e[t+3]=A>>>24}Writer$1.prototype.fixed32=function A(e){return this._push(writeFixed32,4,e>>>0)};Writer$1.prototype.sfixed32=Writer$1.prototype.fixed32;Writer$1.prototype.fixed64=function A(e){var t=LongBits$1.from(e);return this._push(writeFixed32,4,t.lo)._push(writeFixed32,4,t.hi)};Writer$1.prototype.sfixed64=Writer$1.prototype.fixed64;Writer$1.prototype.float=function A(e){return this._push(util$4.float.writeFloatLE,4,e)};Writer$1.prototype.double=function A(e){return this._push(util$4.float.writeDoubleLE,8,e)};var writeBytes=util$4.Array.prototype.set?function A(e,t,n){t.set(e,n)}:function A(e,t,n){for(var i=0;i<e.length;++i)t[n+i]=e[i]};Writer$1.prototype.bytes=function A(e){var t=e.length>>>0;if(!t)return this._push(writeByte,1,0);if(util$4.isString(e)){var n=Writer$1.alloc(t=base64.length(e));base64.decode(e,n,0),e=n}return this.uint32(t)._push(writeBytes,t,e)};Writer$1.prototype.string=function A(e){var t=utf8$1.length(e);return t?this.uint32(t)._push(utf8$1.write,t,e):this._push(writeByte,1,0)};Writer$1.prototype.fork=function A(){return this.states=new State(this),this.head=this.tail=new Op(noop,0,0),this.len=0,this};Writer$1.prototype.reset=function A(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Op(noop,0,0),this.len=0),this};Writer$1.prototype.ldelim=function A(){var e=this.head,t=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=e.next,this.tail=t,this.len+=n),this};Writer$1.prototype.finish=function A(){for(var e=this.head.next,t=this.constructor.alloc(this.len),n=0;e;)e.fn(e.val,t,n),n+=e.len,e=e.next;return t};Writer$1._configure=function(A){BufferWriter$1=A,Writer$1.create=create$1(),BufferWriter$1._configure()};var writer_buffer=BufferWriter,Writer=writer;(BufferWriter.prototype=Object.create(Writer.prototype)).constructor=BufferWriter;var util$3=minimal$1;function BufferWriter(){Writer.call(this)}BufferWriter._configure=function(){BufferWriter.alloc=util$3._Buffer_allocUnsafe,BufferWriter.writeBytesBuffer=util$3.Buffer&&util$3.Buffer.prototype instanceof Uint8Array&&util$3.Buffer.prototype.set.name==="set"?function(e,t,n){t.set(e,n)}:function(e,t,n){if(e.copy)e.copy(t,n,0,e.length);else for(var i=0;i<e.length;)t[n++]=e[i++]}};BufferWriter.prototype.bytes=function A(e){util$3.isString(e)&&(e=util$3._Buffer_from(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this._push(BufferWriter.writeBytesBuffer,t,e),this};function writeStringBuffer(A,e,t){A.length<40?util$3.utf8.write(A,e,t):e.utf8Write?e.utf8Write(A,t):e.write(A,t)}BufferWriter.prototype.string=function A(e){var t=util$3.Buffer.byteLength(e);return this.uint32(t),t&&this._push(writeStringBuffer,t,e),this};BufferWriter._configure();var reader=Reader$1,util$2=minimal$1,BufferReader$1,LongBits=util$2.LongBits,utf8=util$2.utf8;function indexOutOfRange(A,e){return RangeError("index out of range: "+A.pos+" + "+(e||1)+" > "+A.len)}function Reader$1(A){this.buf=A,this.pos=0,this.len=A.length}var create_array=typeof Uint8Array<"u"?function A(e){if(e instanceof Uint8Array||Array.isArray(e))return new Reader$1(e);throw Error("illegal buffer")}:function A(e){if(Array.isArray(e))return new Reader$1(e);throw Error("illegal buffer")},create=function A(){return util$2.Buffer?function(t){return(Reader$1.create=function(i){return util$2.Buffer.isBuffer(i)?new BufferReader$1(i):create_array(i)})(t)}:create_array};Reader$1.create=create();Reader$1.prototype._slice=util$2.Array.prototype.subarray||util$2.Array.prototype.slice;Reader$1.prototype.uint32=function A(){var e=4294967295;return function(){if(e=(this.buf[this.pos]&127)>>>0,this.buf[this.pos++]<128||(e=(e|(this.buf[this.pos]&127)<<7)>>>0,this.buf[this.pos++]<128)||(e=(e|(this.buf[this.pos]&127)<<14)>>>0,this.buf[this.pos++]<128)||(e=(e|(this.buf[this.pos]&127)<<21)>>>0,this.buf[this.pos++]<128)||(e=(e|(this.buf[this.pos]&15)<<28)>>>0,this.buf[this.pos++]<128))return e;if((this.pos+=5)>this.len)throw this.pos=this.len,indexOutOfRange(this,10);return e}}();Reader$1.prototype.int32=function A(){return this.uint32()|0};Reader$1.prototype.sint32=function A(){var e=this.uint32();return e>>>1^-(e&1)|0};function readLongVarint(){var A=new LongBits(0,0),e=0;if(this.len-this.pos>4){for(;e<4;++e)if(A.lo=(A.lo|(this.buf[this.pos]&127)<<e*7)>>>0,this.buf[this.pos++]<128)return A;if(A.lo=(A.lo|(this.buf[this.pos]&127)<<28)>>>0,A.hi=(A.hi|(this.buf[this.pos]&127)>>4)>>>0,this.buf[this.pos++]<128)return A;e=0}else{for(;e<3;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(A.lo=(A.lo|(this.buf[this.pos]&127)<<e*7)>>>0,this.buf[this.pos++]<128)return A}return A.lo=(A.lo|(this.buf[this.pos++]&127)<<e*7)>>>0,A}if(this.len-this.pos>4){for(;e<5;++e)if(A.hi=(A.hi|(this.buf[this.pos]&127)<<e*7+3)>>>0,this.buf[this.pos++]<128)return A}else for(;e<5;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(A.hi=(A.hi|(this.buf[this.pos]&127)<<e*7+3)>>>0,this.buf[this.pos++]<128)return A}throw Error("invalid varint encoding")}Reader$1.prototype.bool=function A(){return this.uint32()!==0};function readFixed32_end(A,e){return(A[e-4]|A[e-3]<<8|A[e-2]<<16|A[e-1]<<24)>>>0}Reader$1.prototype.fixed32=function A(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)};Reader$1.prototype.sfixed32=function A(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)|0};function readFixed64(){if(this.pos+8>this.len)throw indexOutOfRange(this,8);return new LongBits(readFixed32_end(this.buf,this.pos+=4),readFixed32_end(this.buf,this.pos+=4))}Reader$1.prototype.float=function A(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);var e=util$2.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e};Reader$1.prototype.double=function A(){if(this.pos+8>this.len)throw indexOutOfRange(this,4);var e=util$2.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e};Reader$1.prototype.bytes=function A(){var e=this.uint32(),t=this.pos,n=this.pos+e;if(n>this.len)throw indexOutOfRange(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,n):t===n?new this.buf.constructor(0):this._slice.call(this.buf,t,n)};Reader$1.prototype.string=function A(){var e=this.bytes();return utf8.read(e,0,e.length)};Reader$1.prototype.skip=function A(e){if(typeof e=="number"){if(this.pos+e>this.len)throw indexOutOfRange(this,e);this.pos+=e}else do if(this.pos>=this.len)throw indexOutOfRange(this);while(this.buf[this.pos++]&128);return this};Reader$1.prototype.skipType=function(A){switch(A){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;(A=this.uint32()&7)!==4;)this.skipType(A);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+A+" at offset "+this.pos)}return this};Reader$1._configure=function(A){BufferReader$1=A,Reader$1.create=create(),BufferReader$1._configure();var e=util$2.Long?"toLong":"toNumber";util$2.merge(Reader$1.prototype,{int64:function(){return readLongVarint.call(this)[e](!1)},uint64:function(){return readLongVarint.call(this)[e](!0)},sint64:function(){return readLongVarint.call(this).zzDecode()[e](!1)},fixed64:function(){return readFixed64.call(this)[e](!0)},sfixed64:function(){return readFixed64.call(this)[e](!1)}})};var reader_buffer=BufferReader,Reader=reader;(BufferReader.prototype=Object.create(Reader.prototype)).constructor=BufferReader;var util$1=minimal$1;function BufferReader(A){Reader.call(this,A)}BufferReader._configure=function(){util$1.Buffer&&(BufferReader.prototype._slice=util$1.Buffer.prototype.slice)};BufferReader.prototype.string=function A(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+e,this.len))};BufferReader._configure();var rpc={},service=Service,util=minimal$1;(Service.prototype=Object.create(util.EventEmitter.prototype)).constructor=Service;function Service(A,e,t){if(typeof A!="function")throw TypeError("rpcImpl must be a function");util.EventEmitter.call(this),this.rpcImpl=A,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(t)}Service.prototype.rpcCall=function A(e,t,n,i,o){if(!i)throw TypeError("request must be specified");var r=this;if(!o)return util.asPromise(A,r,e,t,n,i);if(!r.rpcImpl){setTimeout(function(){o(Error("already ended"))},0);return}try{return r.rpcImpl(e,t[r.requestDelimited?"encodeDelimited":"encode"](i).finish(),function(g,I){if(g)return r.emit("error",g,e),o(g);if(I===null){r.end(!0);return}if(!(I instanceof n))try{I=n[r.responseDelimited?"decodeDelimited":"decode"](I)}catch(s){return r.emit("error",s,e),o(s)}return r.emit("data",I,e),o(null,I)})}catch(a){r.emit("error",a,e),setTimeout(function(){o(a)},0);return}};Service.prototype.end=function A(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this};(function(A){var e=A;e.Service=service})(rpc);var roots={};(function(A){var e=A;e.build="minimal",e.Writer=writer,e.BufferWriter=writer_buffer,e.Reader=reader,e.BufferReader=reader_buffer,e.util=minimal$1,e.rpc=rpc,e.roots=roots,e.configure=t;function t(){e.util._configure(),e.Writer._configure(e.BufferWriter),e.Reader._configure(e.BufferReader)}t()})(indexMinimal);var minimal=indexMinimal;function createBaseCoin(){return{denom:"",amount:""}}const Coin={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),A.amount!==""&&e.uint32(18).string(A.amount),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseCoin();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.denom=t.string();break;case 2:i.amount=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{denom:isSet$m(A.denom)?String(A.denom):"",amount:isSet$m(A.amount)?String(A.amount):""}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),A.amount!==void 0&&(e.amount=A.amount),e},fromPartial(A){const e=createBaseCoin();return e.denom=A.denom??"",e.amount=A.amount??"",e}};function isSet$m(A){return A!=null}var long=Long,wasm=null;try{wasm=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(A){}function Long(A,e,t){this.low=A|0,this.high=e|0,this.unsigned=!!t}Long.prototype.__isLong__;Object.defineProperty(Long.prototype,"__isLong__",{value:!0});function isLong(A){return(A&&A.__isLong__)===!0}Long.isLong=isLong;var INT_CACHE={},UINT_CACHE={};function fromInt(A,e){var t,n,i;return e?(A>>>=0,(i=0<=A&&A<256)&&(n=UINT_CACHE[A],n)?n:(t=fromBits(A,(A|0)<0?-1:0,!0),i&&(UINT_CACHE[A]=t),t)):(A|=0,(i=-128<=A&&A<128)&&(n=INT_CACHE[A],n)?n:(t=fromBits(A,A<0?-1:0,!1),i&&(INT_CACHE[A]=t),t))}Long.fromInt=fromInt;function fromNumber(A,e){if(isNaN(A))return e?UZERO:ZERO;if(e){if(A<0)return UZERO;if(A>=TWO_PWR_64_DBL)return MAX_UNSIGNED_VALUE}else{if(A<=-TWO_PWR_63_DBL)return MIN_VALUE;if(A+1>=TWO_PWR_63_DBL)return MAX_VALUE}return A<0?fromNumber(-A,e).neg():fromBits(A%TWO_PWR_32_DBL|0,A/TWO_PWR_32_DBL|0,e)}Long.fromNumber=fromNumber;function fromBits(A,e,t){return new Long(A,e,t)}Long.fromBits=fromBits;var pow_dbl=Math.pow;function fromString(A,e,t){if(A.length===0)throw Error("empty string");if(A==="NaN"||A==="Infinity"||A==="+Infinity"||A==="-Infinity")return ZERO;if(typeof e=="number"?(t=e,e=!1):e=!!e,t=t||10,t<2||36<t)throw RangeError("radix");var n;if((n=A.indexOf("-"))>0)throw Error("interior hyphen");if(n===0)return fromString(A.substring(1),e,t).neg();for(var i=fromNumber(pow_dbl(t,8)),o=ZERO,r=0;r<A.length;r+=8){var a=Math.min(8,A.length-r),g=parseInt(A.substring(r,r+a),t);if(a<8){var I=fromNumber(pow_dbl(t,a));o=o.mul(I).add(fromNumber(g))}else o=o.mul(i),o=o.add(fromNumber(g))}return o.unsigned=e,o}Long.fromString=fromString;function fromValue(A,e){return typeof A=="number"?fromNumber(A,e):typeof A=="string"?fromString(A,e):fromBits(A.low,A.high,typeof e=="boolean"?e:A.unsigned)}Long.fromValue=fromValue;var TWO_PWR_16_DBL=1<<16,TWO_PWR_24_DBL=1<<24,TWO_PWR_32_DBL=TWO_PWR_16_DBL*TWO_PWR_16_DBL,TWO_PWR_64_DBL=TWO_PWR_32_DBL*TWO_PWR_32_DBL,TWO_PWR_63_DBL=TWO_PWR_64_DBL/2,TWO_PWR_24=fromInt(TWO_PWR_24_DBL),ZERO=fromInt(0);Long.ZERO=ZERO;var UZERO=fromInt(0,!0);Long.UZERO=UZERO;var ONE=fromInt(1);Long.ONE=ONE;var UONE=fromInt(1,!0);Long.UONE=UONE;var NEG_ONE=fromInt(-1);Long.NEG_ONE=NEG_ONE;var MAX_VALUE=fromBits(-1,2147483647,!1);Long.MAX_VALUE=MAX_VALUE;var MAX_UNSIGNED_VALUE=fromBits(-1,-1,!0);Long.MAX_UNSIGNED_VALUE=MAX_UNSIGNED_VALUE;var MIN_VALUE=fromBits(0,-2147483648,!1);Long.MIN_VALUE=MIN_VALUE;var LongPrototype=Long.prototype;LongPrototype.toInt=function A(){return this.unsigned?this.low>>>0:this.low};LongPrototype.toNumber=function A(){return this.unsigned?(this.high>>>0)*TWO_PWR_32_DBL+(this.low>>>0):this.high*TWO_PWR_32_DBL+(this.low>>>0)};LongPrototype.toString=function A(e){if(e=e||10,e<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(MIN_VALUE)){var t=fromNumber(e),n=this.div(t),i=n.mul(t).sub(this);return n.toString(e)+i.toInt().toString(e)}else return"-"+this.neg().toString(e);for(var o=fromNumber(pow_dbl(e,6),this.unsigned),r=this,a="";;){var g=r.div(o),I=r.sub(g.mul(o)).toInt()>>>0,s=I.toString(e);if(r=g,r.isZero())return s+a;for(;s.length<6;)s="0"+s;a=""+s+a}};LongPrototype.getHighBits=function A(){return this.high};LongPrototype.getHighBitsUnsigned=function A(){return this.high>>>0};LongPrototype.getLowBits=function A(){return this.low};LongPrototype.getLowBitsUnsigned=function A(){return this.low>>>0};LongPrototype.getNumBitsAbs=function A(){if(this.isNegative())return this.eq(MIN_VALUE)?64:this.neg().getNumBitsAbs();for(var e=this.high!=0?this.high:this.low,t=31;t>0&&(e&1<<t)==0;t--);return this.high!=0?t+33:t+1};LongPrototype.isZero=function A(){return this.high===0&&this.low===0};LongPrototype.eqz=LongPrototype.isZero;LongPrototype.isNegative=function A(){return!this.unsigned&&this.high<0};LongPrototype.isPositive=function A(){return this.unsigned||this.high>=0};LongPrototype.isOdd=function A(){return(this.low&1)===1};LongPrototype.isEven=function A(){return(this.low&1)===0};LongPrototype.equals=function A(e){return isLong(e)||(e=fromValue(e)),this.unsigned!==e.unsigned&&this.high>>>31===1&&e.high>>>31===1?!1:this.high===e.high&&this.low===e.low};LongPrototype.eq=LongPrototype.equals;LongPrototype.notEquals=function A(e){return!this.eq(e)};LongPrototype.neq=LongPrototype.notEquals;LongPrototype.ne=LongPrototype.notEquals;LongPrototype.lessThan=function A(e){return this.comp(e)<0};LongPrototype.lt=LongPrototype.lessThan;LongPrototype.lessThanOrEqual=function A(e){return this.comp(e)<=0};LongPrototype.lte=LongPrototype.lessThanOrEqual;LongPrototype.le=LongPrototype.lessThanOrEqual;LongPrototype.greaterThan=function A(e){return this.comp(e)>0};LongPrototype.gt=LongPrototype.greaterThan;LongPrototype.greaterThanOrEqual=function A(e){return this.comp(e)>=0};LongPrototype.gte=LongPrototype.greaterThanOrEqual;LongPrototype.ge=LongPrototype.greaterThanOrEqual;LongPrototype.compare=function A(e){if(isLong(e)||(e=fromValue(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1};LongPrototype.comp=LongPrototype.compare;LongPrototype.negate=function A(){return!this.unsigned&&this.eq(MIN_VALUE)?MIN_VALUE:this.not().add(ONE)};LongPrototype.neg=LongPrototype.negate;LongPrototype.add=function A(e){isLong(e)||(e=fromValue(e));var t=this.high>>>16,n=this.high&65535,i=this.low>>>16,o=this.low&65535,r=e.high>>>16,a=e.high&65535,g=e.low>>>16,I=e.low&65535,s=0,c=0,B=0,d=0;return d+=o+I,B+=d>>>16,d&=65535,B+=i+g,c+=B>>>16,B&=65535,c+=n+a,s+=c>>>16,c&=65535,s+=t+r,s&=65535,fromBits(B<<16|d,s<<16|c,this.unsigned)};LongPrototype.subtract=function A(e){return isLong(e)||(e=fromValue(e)),this.add(e.neg())};LongPrototype.sub=LongPrototype.subtract;LongPrototype.multiply=function A(e){if(this.isZero())return ZERO;if(isLong(e)||(e=fromValue(e)),wasm){var t=wasm.mul(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}if(e.isZero())return ZERO;if(this.eq(MIN_VALUE))return e.isOdd()?MIN_VALUE:ZERO;if(e.eq(MIN_VALUE))return this.isOdd()?MIN_VALUE:ZERO;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(TWO_PWR_24)&&e.lt(TWO_PWR_24))return fromNumber(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,i=this.high&65535,o=this.low>>>16,r=this.low&65535,a=e.high>>>16,g=e.high&65535,I=e.low>>>16,s=e.low&65535,c=0,B=0,d=0,l=0;return l+=r*s,d+=l>>>16,l&=65535,d+=o*s,B+=d>>>16,d&=65535,d+=r*I,B+=d>>>16,d&=65535,B+=i*s,c+=B>>>16,B&=65535,B+=o*I,c+=B>>>16,B&=65535,B+=r*g,c+=B>>>16,B&=65535,c+=n*s+i*I+o*g+r*a,c&=65535,fromBits(d<<16|l,c<<16|B,this.unsigned)};LongPrototype.mul=LongPrototype.multiply;LongPrototype.divide=function A(e){if(isLong(e)||(e=fromValue(e)),e.isZero())throw Error("division by zero");if(wasm){if(!this.unsigned&&this.high===-2147483648&&e.low===-1&&e.high===-1)return this;var t=(this.unsigned?wasm.div_u:wasm.div_s)(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?UZERO:ZERO;var n,i,o;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return UZERO;if(e.gt(this.shru(1)))return UONE;o=UZERO}else{if(this.eq(MIN_VALUE)){if(e.eq(ONE)||e.eq(NEG_ONE))return MIN_VALUE;if(e.eq(MIN_VALUE))return ONE;var r=this.shr(1);return n=r.div(e).shl(1),n.eq(ZERO)?e.isNegative()?ONE:NEG_ONE:(i=this.sub(e.mul(n)),o=n.add(i.div(e)),o)}else if(e.eq(MIN_VALUE))return this.unsigned?UZERO:ZERO;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();o=ZERO}for(i=this;i.gte(e);){n=Math.max(1,Math.floor(i.toNumber()/e.toNumber()));for(var a=Math.ceil(Math.log(n)/Math.LN2),g=a<=48?1:pow_dbl(2,a-48),I=fromNumber(n),s=I.mul(e);s.isNegative()||s.gt(i);)n-=g,I=fromNumber(n,this.unsigned),s=I.mul(e);I.isZero()&&(I=ONE),o=o.add(I),i=i.sub(s)}return o};LongPrototype.div=LongPrototype.divide;LongPrototype.modulo=function A(e){if(isLong(e)||(e=fromValue(e)),wasm){var t=(this.unsigned?wasm.rem_u:wasm.rem_s)(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}return this.sub(this.div(e).mul(e))};LongPrototype.mod=LongPrototype.modulo;LongPrototype.rem=LongPrototype.modulo;LongPrototype.not=function A(){return fromBits(~this.low,~this.high,this.unsigned)};LongPrototype.and=function A(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low&e.low,this.high&e.high,this.unsigned)};LongPrototype.or=function A(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low|e.low,this.high|e.high,this.unsigned)};LongPrototype.xor=function A(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low^e.low,this.high^e.high,this.unsigned)};LongPrototype.shiftLeft=function A(e){return isLong(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?fromBits(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):fromBits(0,this.low<<e-32,this.unsigned)};LongPrototype.shl=LongPrototype.shiftLeft;LongPrototype.shiftRight=function A(e){return isLong(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?fromBits(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):fromBits(this.high>>e-32,this.high>=0?0:-1,this.unsigned)};LongPrototype.shr=LongPrototype.shiftRight;LongPrototype.shiftRightUnsigned=function A(e){if(isLong(e)&&(e=e.toInt()),e&=63,e===0)return this;var t=this.high;if(e<32){var n=this.low;return fromBits(n>>>e|t<<32-e,t>>>e,this.unsigned)}else return e===32?fromBits(t,0,this.unsigned):fromBits(t>>>e-32,0,this.unsigned)};LongPrototype.shru=LongPrototype.shiftRightUnsigned;LongPrototype.shr_u=LongPrototype.shiftRightUnsigned;LongPrototype.toSigned=function A(){return this.unsigned?fromBits(this.low,this.high,!1):this};LongPrototype.toUnsigned=function A(){return this.unsigned?this:fromBits(this.low,this.high,!0)};LongPrototype.toBytes=function A(e){return e?this.toBytesLE():this.toBytesBE()};LongPrototype.toBytesLE=function A(){var e=this.high,t=this.low;return[t&255,t>>>8&255,t>>>16&255,t>>>24,e&255,e>>>8&255,e>>>16&255,e>>>24]};LongPrototype.toBytesBE=function A(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,e&255,t>>>24,t>>>16&255,t>>>8&255,t&255]};Long.fromBytes=function A(e,t,n){return n?Long.fromBytesLE(e,t):Long.fromBytesBE(e,t)};Long.fromBytesLE=function A(e,t){return new Long(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)};Long.fromBytesBE=function A(e,t){return new Long(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};function createBasePageRequest(){return{key:new Uint8Array,offset:"0",limit:"0",countTotal:!1,reverse:!1}}const PageRequest={encode(A,e=minimal.Writer.create()){return A.key.length!==0&&e.uint32(10).bytes(A.key),A.offset!=="0"&&e.uint32(16).uint64(A.offset),A.limit!=="0"&&e.uint32(24).uint64(A.limit),A.countTotal===!0&&e.uint32(32).bool(A.countTotal),A.reverse===!0&&e.uint32(40).bool(A.reverse),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBasePageRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.key=t.bytes();break;case 2:i.offset=longToString$a(t.uint64());break;case 3:i.limit=longToString$a(t.uint64());break;case 4:i.countTotal=t.bool();break;case 5:i.reverse=t.bool();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{key:isSet$l(A.key)?bytesFromBase64$b(A.key):new Uint8Array,offset:isSet$l(A.offset)?String(A.offset):"0",limit:isSet$l(A.limit)?String(A.limit):"0",countTotal:isSet$l(A.countTotal)?Boolean(A.countTotal):!1,reverse:isSet$l(A.reverse)?Boolean(A.reverse):!1}},toJSON(A){const e={};return A.key!==void 0&&(e.key=base64FromBytes$b(A.key!==void 0?A.key:new Uint8Array)),A.offset!==void 0&&(e.offset=A.offset),A.limit!==void 0&&(e.limit=A.limit),A.countTotal!==void 0&&(e.countTotal=A.countTotal),A.reverse!==void 0&&(e.reverse=A.reverse),e},fromPartial(A){const e=createBasePageRequest();return e.key=A.key??new Uint8Array,e.offset=A.offset??"0",e.limit=A.limit??"0",e.countTotal=A.countTotal??!1,e.reverse=A.reverse??!1,e}};function createBasePageResponse(){return{nextKey:new Uint8Array,total:"0"}}const PageResponse={encode(A,e=minimal.Writer.create()){return A.nextKey.length!==0&&e.uint32(10).bytes(A.nextKey),A.total!=="0"&&e.uint32(16).uint64(A.total),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBasePageResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.nextKey=t.bytes();break;case 2:i.total=longToString$a(t.uint64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{nextKey:isSet$l(A.nextKey)?bytesFromBase64$b(A.nextKey):new Uint8Array,total:isSet$l(A.total)?String(A.total):"0"}},toJSON(A){const e={};return A.nextKey!==void 0&&(e.nextKey=base64FromBytes$b(A.nextKey!==void 0?A.nextKey:new Uint8Array)),A.total!==void 0&&(e.total=A.total),e},fromPartial(A){const e=createBasePageResponse();return e.nextKey=A.nextKey??new Uint8Array,e.total=A.total??"0",e}};var globalThis$e=(()=>{if(typeof globalThis$e<"u")return globalThis$e;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$b=globalThis$e.atob||(A=>globalThis$e.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$b(A){const e=atob$b(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$b=globalThis$e.btoa||(A=>globalThis$e.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$b(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$b(e.join(""))}function longToString$a(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$l(A){return A!=null}function createBaseParams$1(){return{sendEnabled:[],defaultSendEnabled:!1}}const Params$1={encode(A,e=minimal.Writer.create()){for(const t of A.sendEnabled)SendEnabled.encode(t,e.uint32(10).fork()).ldelim();return A.defaultSendEnabled===!0&&e.uint32(16).bool(A.defaultSendEnabled),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseParams$1();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.sendEnabled.push(SendEnabled.decode(t,t.uint32()));break;case 2:i.defaultSendEnabled=t.bool();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{sendEnabled:Array.isArray(A?.sendEnabled)?A.sendEnabled.map(e=>SendEnabled.fromJSON(e)):[],defaultSendEnabled:isSet$k(A.defaultSendEnabled)?Boolean(A.defaultSendEnabled):!1}},toJSON(A){const e={};return A.sendEnabled?e.sendEnabled=A.sendEnabled.map(t=>t?SendEnabled.toJSON(t):void 0):e.sendEnabled=[],A.defaultSendEnabled!==void 0&&(e.defaultSendEnabled=A.defaultSendEnabled),e},fromPartial(A){const e=createBaseParams$1();return e.sendEnabled=A.sendEnabled?.map(t=>SendEnabled.fromPartial(t))||[],e.defaultSendEnabled=A.defaultSendEnabled??!1,e}};function createBaseSendEnabled(){return{denom:"",enabled:!1}}const SendEnabled={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),A.enabled===!0&&e.uint32(16).bool(A.enabled),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseSendEnabled();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.denom=t.string();break;case 2:i.enabled=t.bool();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{denom:isSet$k(A.denom)?String(A.denom):"",enabled:isSet$k(A.enabled)?Boolean(A.enabled):!1}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),A.enabled!==void 0&&(e.enabled=A.enabled),e},fromPartial(A){const e=createBaseSendEnabled();return e.denom=A.denom??"",e.enabled=A.enabled??!1,e}};function createBaseDenomUnit(){return{denom:"",exponent:0,aliases:[]}}const DenomUnit={encode(A,e=minimal.Writer.create()){A.denom!==""&&e.uint32(10).string(A.denom),A.exponent!==0&&e.uint32(16).uint32(A.exponent);for(const t of A.aliases)e.uint32(26).string(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseDenomUnit();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.denom=t.string();break;case 2:i.exponent=t.uint32();break;case 3:i.aliases.push(t.string());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{denom:isSet$k(A.denom)?String(A.denom):"",exponent:isSet$k(A.exponent)?Number(A.exponent):0,aliases:Array.isArray(A?.aliases)?A.aliases.map(e=>String(e)):[]}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),A.exponent!==void 0&&(e.exponent=Math.round(A.exponent)),A.aliases?e.aliases=A.aliases.map(t=>t):e.aliases=[],e},fromPartial(A){const e=createBaseDenomUnit();return e.denom=A.denom??"",e.exponent=A.exponent??0,e.aliases=A.aliases?.map(t=>t)||[],e}};function createBaseMetadata(){return{description:"",denomUnits:[],base:"",display:"",name:"",symbol:""}}const Metadata={encode(A,e=minimal.Writer.create()){A.description!==""&&e.uint32(10).string(A.description);for(const t of A.denomUnits)DenomUnit.encode(t,e.uint32(18).fork()).ldelim();return A.base!==""&&e.uint32(26).string(A.base),A.display!==""&&e.uint32(34).string(A.display),A.name!==""&&e.uint32(42).string(A.name),A.symbol!==""&&e.uint32(50).string(A.symbol),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseMetadata();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.description=t.string();break;case 2:i.denomUnits.push(DenomUnit.decode(t,t.uint32()));break;case 3:i.base=t.string();break;case 4:i.display=t.string();break;case 5:i.name=t.string();break;case 6:i.symbol=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{description:isSet$k(A.description)?String(A.description):"",denomUnits:Array.isArray(A?.denomUnits)?A.denomUnits.map(e=>DenomUnit.fromJSON(e)):[],base:isSet$k(A.base)?String(A.base):"",display:isSet$k(A.display)?String(A.display):"",name:isSet$k(A.name)?String(A.name):"",symbol:isSet$k(A.symbol)?String(A.symbol):""}},toJSON(A){const e={};return A.description!==void 0&&(e.description=A.description),A.denomUnits?e.denomUnits=A.denomUnits.map(t=>t?DenomUnit.toJSON(t):void 0):e.denomUnits=[],A.base!==void 0&&(e.base=A.base),A.display!==void 0&&(e.display=A.display),A.name!==void 0&&(e.name=A.name),A.symbol!==void 0&&(e.symbol=A.symbol),e},fromPartial(A){const e=createBaseMetadata();return e.description=A.description??"",e.denomUnits=A.denomUnits?.map(t=>DenomUnit.fromPartial(t))||[],e.base=A.base??"",e.display=A.display??"",e.name=A.name??"",e.symbol=A.symbol??"",e}};function isSet$k(A){return A!=null}var browserHeaders_umd={exports:{}};(function(A,e){(function(n,i){A.exports=i()})(commonjsGlobal,function(){return function(t){var n={};function i(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=n,i.i=function(o){return o},i.d=function(o,r,a){i.o(o,r)||Object.defineProperty(o,r,{configurable:!1,enumerable:!0,get:a})},i.n=function(o){var r=o&&o.__esModule?function(){return o.default}:function(){return o};return i.d(r,"a",r),r},i.o=function(o,r){return Object.prototype.hasOwnProperty.call(o,r)},i.p="",i(i.s=1)}([function(t,n,i){Object.defineProperty(n,"__esModule",{value:!0});var o=i(3);function r(g){return typeof g=="object"&&typeof g.headersMap=="object"&&typeof g.forEach=="function"}var a=function(){function g(I,s){I===void 0&&(I={}),s===void 0&&(s={splitValues:!1});var c=this;if(this.headersMap={},I)if(typeof Headers<"u"&&I instanceof Headers){var B=o.getHeaderKeys(I);B.forEach(function(l){var E=o.getHeaderValues(I,l);E.forEach(function(C){s.splitValues?c.append(l,o.splitHeaderValue(C)):c.append(l,C)})})}else if(r(I))I.forEach(function(l,E){c.append(l,E)});else if(typeof Map<"u"&&I instanceof Map){var d=I;d.forEach(function(l,E){c.append(E,l)})}else typeof I=="string"?this.appendFromString(I):typeof I=="object"&&Object.getOwnPropertyNames(I).forEach(function(l){var E=I,C=E[l];Array.isArray(C)?C.forEach(function(f){c.append(l,f)}):c.append(l,C)})}return g.prototype.appendFromString=function(I){for(var s=I.split(`\r
`),c=0;c<s.length;c++){var B=s[c],d=B.indexOf(":");if(d>0){var l=B.substring(0,d).trim(),E=B.substring(d+1).trim();this.append(l,E)}}},g.prototype.delete=function(I,s){var c=o.normalizeName(I);if(s===void 0)delete this.headersMap[c];else{var B=this.headersMap[c];if(B){var d=B.indexOf(s);d>=0&&B.splice(d,1),B.length===0&&delete this.headersMap[c]}}},g.prototype.append=function(I,s){var c=this,B=o.normalizeName(I);Array.isArray(this.headersMap[B])||(this.headersMap[B]=[]),Array.isArray(s)?s.forEach(function(d){c.headersMap[B].push(o.normalizeValue(d))}):this.headersMap[B].push(o.normalizeValue(s))},g.prototype.set=function(I,s){var c=o.normalizeName(I);if(Array.isArray(s)){var B=[];s.forEach(function(d){B.push(o.normalizeValue(d))}),this.headersMap[c]=B}else this.headersMap[c]=[o.normalizeValue(s)]},g.prototype.has=function(I,s){var c=this.headersMap[o.normalizeName(I)],B=Array.isArray(c);if(!B)return!1;if(s!==void 0){var d=o.normalizeValue(s);return c.indexOf(d)>=0}else return!0},g.prototype.get=function(I){var s=this.headersMap[o.normalizeName(I)];return s!==void 0?s.concat():[]},g.prototype.forEach=function(I){var s=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(c){I(c,s.headersMap[c])},this)},g.prototype.toHeaders=function(){if(typeof Headers<"u"){var I=new Headers;return this.forEach(function(s,c){c.forEach(function(B){I.append(s,B)})}),I}else throw new Error("Headers class is not defined")},g}();n.BrowserHeaders=a},function(t,n,i){Object.defineProperty(n,"__esModule",{value:!0});var o=i(0);n.BrowserHeaders=o.BrowserHeaders},function(t,n,i){Object.defineProperty(n,"__esModule",{value:!0});function o(a,g){for(var I=a[Symbol.iterator](),s=I.next();!s.done;)g(s.value[0]),s=I.next()}n.iterateHeaders=o;function r(a,g){for(var I=a.keys(),s=I.next();!s.done;)g(s.value),s=I.next()}n.iterateHeadersKeys=r},function(t,n,i){Object.defineProperty(n,"__esModule",{value:!0});var o=i(2);function r(B){if(typeof B!="string"&&(B=String(B)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(B))throw new TypeError("Invalid character in header field name");return B.toLowerCase()}n.normalizeName=r;function a(B){return typeof B!="string"&&(B=String(B)),B}n.normalizeValue=a;function g(B,d){var l=B;if(l instanceof Headers&&l.getAll)return l.getAll(d);var E=l.get(d);return E&&typeof E=="string"?[E]:E}n.getHeaderValues=g;function I(B){return B}function s(B){var d=B,l={},E=[];return d.keys?o.iterateHeadersKeys(d,function(C){l[C]||(l[C]=!0,E.push(C))}):d.forEach?d.forEach(function(C,f){l[f]||(l[f]=!0,E.push(f))}):o.iterateHeaders(d,function(C){var f=C[0];l[f]||(l[f]=!0,E.push(f))}),E}n.getHeaderKeys=s;function c(B){var d=[],l=B.split(", ");return l.forEach(function(E){E.split(",").forEach(function(C){d.push(C)})}),d}n.splitHeaderValue=c}])})})(browserHeaders_umd);function createBaseQueryBalanceRequest(){return{address:"",denom:""}}const QueryBalanceRequest={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.denom!==""&&e.uint32(18).string(A.denom),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryBalanceRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.address=t.string();break;case 2:i.denom=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{address:isSet$j(A.address)?String(A.address):"",denom:isSet$j(A.denom)?String(A.denom):""}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.denom!==void 0&&(e.denom=A.denom),e},fromPartial(A){const e=createBaseQueryBalanceRequest();return e.address=A.address??"",e.denom=A.denom??"",e}};function createBaseQueryBalanceResponse(){return{balance:void 0}}const QueryBalanceResponse={encode(A,e=minimal.Writer.create()){return A.balance!==void 0&&Coin.encode(A.balance,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryBalanceResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.balance=Coin.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{balance:isSet$j(A.balance)?Coin.fromJSON(A.balance):void 0}},toJSON(A){const e={};return A.balance!==void 0&&(e.balance=A.balance?Coin.toJSON(A.balance):void 0),e},fromPartial(A){const e=createBaseQueryBalanceResponse();return e.balance=A.balance!==void 0&&A.balance!==null?Coin.fromPartial(A.balance):void 0,e}};function createBaseQueryAllBalancesRequest(){return{address:"",pagination:void 0}}const QueryAllBalancesRequest={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryAllBalancesRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.address=t.string();break;case 2:i.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{address:isSet$j(A.address)?String(A.address):"",pagination:isSet$j(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAllBalancesRequest();return e.address=A.address??"",e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryAllBalancesResponse(){return{balances:[],pagination:void 0}}const QueryAllBalancesResponse={encode(A,e=minimal.Writer.create()){for(const t of A.balances)Coin.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryAllBalancesResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.balances.push(Coin.decode(t,t.uint32()));break;case 2:i.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{balances:Array.isArray(A?.balances)?A.balances.map(e=>Coin.fromJSON(e)):[],pagination:isSet$j(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.balances?e.balances=A.balances.map(t=>t?Coin.toJSON(t):void 0):e.balances=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAllBalancesResponse();return e.balances=A.balances?.map(t=>Coin.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQueryTotalSupplyRequest(){return{pagination:void 0}}const QueryTotalSupplyRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryTotalSupplyRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{pagination:isSet$j(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryTotalSupplyRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryTotalSupplyResponse(){return{supply:[],pagination:void 0}}const QueryTotalSupplyResponse={encode(A,e=minimal.Writer.create()){for(const t of A.supply)Coin.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryTotalSupplyResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.supply.push(Coin.decode(t,t.uint32()));break;case 2:i.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{supply:Array.isArray(A?.supply)?A.supply.map(e=>Coin.fromJSON(e)):[],pagination:isSet$j(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.supply?e.supply=A.supply.map(t=>t?Coin.toJSON(t):void 0):e.supply=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryTotalSupplyResponse();return e.supply=A.supply?.map(t=>Coin.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQuerySupplyOfRequest(){return{denom:""}}const QuerySupplyOfRequest={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQuerySupplyOfRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.denom=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{denom:isSet$j(A.denom)?String(A.denom):""}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),e},fromPartial(A){const e=createBaseQuerySupplyOfRequest();return e.denom=A.denom??"",e}};function createBaseQuerySupplyOfResponse(){return{amount:void 0}}const QuerySupplyOfResponse={encode(A,e=minimal.Writer.create()){return A.amount!==void 0&&Coin.encode(A.amount,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQuerySupplyOfResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.amount=Coin.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{amount:isSet$j(A.amount)?Coin.fromJSON(A.amount):void 0}},toJSON(A){const e={};return A.amount!==void 0&&(e.amount=A.amount?Coin.toJSON(A.amount):void 0),e},fromPartial(A){const e=createBaseQuerySupplyOfResponse();return e.amount=A.amount!==void 0&&A.amount!==null?Coin.fromPartial(A.amount):void 0,e}};function createBaseQueryParamsRequest$1(){return{}}const QueryParamsRequest$1={encode(A,e=minimal.Writer.create()){return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryParamsRequest$1();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){default:t.skipType(o&7);break}}return i},fromJSON(A){return{}},toJSON(A){return{}},fromPartial(A){return createBaseQueryParamsRequest$1()}};function createBaseQueryParamsResponse$1(){return{params:void 0}}const QueryParamsResponse$1={encode(A,e=minimal.Writer.create()){return A.params!==void 0&&Params$1.encode(A.params,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryParamsResponse$1();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.params=Params$1.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{params:isSet$j(A.params)?Params$1.fromJSON(A.params):void 0}},toJSON(A){const e={};return A.params!==void 0&&(e.params=A.params?Params$1.toJSON(A.params):void 0),e},fromPartial(A){const e=createBaseQueryParamsResponse$1();return e.params=A.params!==void 0&&A.params!==null?Params$1.fromPartial(A.params):void 0,e}};function createBaseQueryDenomsMetadataRequest(){return{pagination:void 0}}const QueryDenomsMetadataRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryDenomsMetadataRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{pagination:isSet$j(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryDenomsMetadataRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryDenomsMetadataResponse(){return{metadatas:[],pagination:void 0}}const QueryDenomsMetadataResponse={encode(A,e=minimal.Writer.create()){for(const t of A.metadatas)Metadata.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryDenomsMetadataResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.metadatas.push(Metadata.decode(t,t.uint32()));break;case 2:i.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{metadatas:Array.isArray(A?.metadatas)?A.metadatas.map(e=>Metadata.fromJSON(e)):[],pagination:isSet$j(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.metadatas?e.metadatas=A.metadatas.map(t=>t?Metadata.toJSON(t):void 0):e.metadatas=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryDenomsMetadataResponse();return e.metadatas=A.metadatas?.map(t=>Metadata.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQueryDenomMetadataRequest(){return{denom:""}}const QueryDenomMetadataRequest={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryDenomMetadataRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.denom=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{denom:isSet$j(A.denom)?String(A.denom):""}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),e},fromPartial(A){const e=createBaseQueryDenomMetadataRequest();return e.denom=A.denom??"",e}};function createBaseQueryDenomMetadataResponse(){return{metadata:void 0}}const QueryDenomMetadataResponse={encode(A,e=minimal.Writer.create()){return A.metadata!==void 0&&Metadata.encode(A.metadata,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryDenomMetadataResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.metadata=Metadata.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{metadata:isSet$j(A.metadata)?Metadata.fromJSON(A.metadata):void 0}},toJSON(A){const e={};return A.metadata!==void 0&&(e.metadata=A.metadata?Metadata.toJSON(A.metadata):void 0),e},fromPartial(A){const e=createBaseQueryDenomMetadataResponse();return e.metadata=A.metadata!==void 0&&A.metadata!==null?Metadata.fromPartial(A.metadata):void 0,e}};class QueryClientImpl$1{constructor(e){cA(this,"rpc");this.rpc=e,this.balance=this.balance.bind(this),this.allBalances=this.allBalances.bind(this),this.totalSupply=this.totalSupply.bind(this),this.supplyOf=this.supplyOf.bind(this),this.params=this.params.bind(this),this.denomMetadata=this.denomMetadata.bind(this),this.denomsMetadata=this.denomsMetadata.bind(this)}balance(e,t){return this.rpc.unary(QueryBalanceDesc,QueryBalanceRequest.fromPartial(e),t)}allBalances(e,t){return this.rpc.unary(QueryAllBalancesDesc,QueryAllBalancesRequest.fromPartial(e),t)}totalSupply(e,t){return this.rpc.unary(QueryTotalSupplyDesc,QueryTotalSupplyRequest.fromPartial(e),t)}supplyOf(e,t){return this.rpc.unary(QuerySupplyOfDesc,QuerySupplyOfRequest.fromPartial(e),t)}params(e,t){return this.rpc.unary(QueryParamsDesc$1,QueryParamsRequest$1.fromPartial(e),t)}denomMetadata(e,t){return this.rpc.unary(QueryDenomMetadataDesc,QueryDenomMetadataRequest.fromPartial(e),t)}denomsMetadata(e,t){return this.rpc.unary(QueryDenomsMetadataDesc,QueryDenomsMetadataRequest.fromPartial(e),t)}}const QueryDesc$1={serviceName:"cosmos.bank.v1beta1.Query"},QueryBalanceDesc={methodName:"Balance",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryBalanceRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryBalanceResponse.decode(A),toObject(){return this}}}}},QueryAllBalancesDesc={methodName:"AllBalances",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAllBalancesRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryAllBalancesResponse.decode(A),toObject(){return this}}}}},QueryTotalSupplyDesc={methodName:"TotalSupply",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryTotalSupplyRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryTotalSupplyResponse.decode(A),toObject(){return this}}}}},QuerySupplyOfDesc={methodName:"SupplyOf",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QuerySupplyOfRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QuerySupplyOfResponse.decode(A),toObject(){return this}}}}},QueryParamsDesc$1={methodName:"Params",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryParamsRequest$1.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryParamsResponse$1.decode(A),toObject(){return this}}}}},QueryDenomMetadataDesc={methodName:"DenomMetadata",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryDenomMetadataRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryDenomMetadataResponse.decode(A),toObject(){return this}}}}},QueryDenomsMetadataDesc={methodName:"DenomsMetadata",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryDenomsMetadataRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryDenomsMetadataResponse.decode(A),toObject(){return this}}}}};class GrpcWebImpl{constructor(e,t){cA(this,"host");cA(this,"options");this.host=e,this.options=t}unary(e,t,n){const i={...t,...e.requestType},o=n&&this.options.metadata?new browserHeaders_umd.exports.BrowserHeaders({...this.options?.metadata.headersMap,...n?.headersMap}):n||this.options.metadata;return new Promise((r,a)=>{grpcWebClient_umd.exports.grpc.unary(e,{request:i,host:this.host,metadata:o,transport:this.options.transport,debug:this.options.debug,onEnd:function(g){if(g.status===grpcWebClient_umd.exports.grpc.Code.OK)r(g.message);else{const I=new Error(g.statusMessage);I.code=g.status,I.metadata=g.trailers,a(I)}}})})}}function isSet$j(A){return A!=null}function createBaseAny(){return{typeUrl:"",value:new Uint8Array}}const Any={encode(A,e=minimal.Writer.create()){return A.typeUrl!==""&&e.uint32(10).string(A.typeUrl),A.value.length!==0&&e.uint32(18).bytes(A.value),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseAny();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.typeUrl=t.string();break;case 2:i.value=t.bytes();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{typeUrl:isSet$i(A.typeUrl)?String(A.typeUrl):"",value:isSet$i(A.value)?bytesFromBase64$a(A.value):new Uint8Array}},toJSON(A){const e={};return A.typeUrl!==void 0&&(e.typeUrl=A.typeUrl),A.value!==void 0&&(e.value=base64FromBytes$a(A.value!==void 0?A.value:new Uint8Array)),e},fromPartial(A){const e=createBaseAny();return e.typeUrl=A.typeUrl??"",e.value=A.value??new Uint8Array,e}};var globalThis$d=(()=>{if(typeof globalThis$d<"u")return globalThis$d;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$a=globalThis$d.atob||(A=>globalThis$d.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$a(A){const e=atob$a(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$a=globalThis$d.btoa||(A=>globalThis$d.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$a(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$a(e.join(""))}function isSet$i(A){return A!=null}function createBaseBaseAccount(){return{address:"",pubKey:void 0,accountNumber:"0",sequence:"0"}}const BaseAccount={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.pubKey!==void 0&&Any.encode(A.pubKey,e.uint32(18).fork()).ldelim(),A.accountNumber!=="0"&&e.uint32(24).uint64(A.accountNumber),A.sequence!=="0"&&e.uint32(32).uint64(A.sequence),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseBaseAccount();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.address=t.string();break;case 2:i.pubKey=Any.decode(t,t.uint32());break;case 3:i.accountNumber=longToString$9(t.uint64());break;case 4:i.sequence=longToString$9(t.uint64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{address:isSet$h(A.address)?String(A.address):"",pubKey:isSet$h(A.pubKey)?Any.fromJSON(A.pubKey):void 0,accountNumber:isSet$h(A.accountNumber)?String(A.accountNumber):"0",sequence:isSet$h(A.sequence)?String(A.sequence):"0"}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.pubKey!==void 0&&(e.pubKey=A.pubKey?Any.toJSON(A.pubKey):void 0),A.accountNumber!==void 0&&(e.accountNumber=A.accountNumber),A.sequence!==void 0&&(e.sequence=A.sequence),e},fromPartial(A){const e=createBaseBaseAccount();return e.address=A.address??"",e.pubKey=A.pubKey!==void 0&&A.pubKey!==null?Any.fromPartial(A.pubKey):void 0,e.accountNumber=A.accountNumber??"0",e.sequence=A.sequence??"0",e}};function createBaseParams(){return{maxMemoCharacters:"0",txSigLimit:"0",txSizeCostPerByte:"0",sigVerifyCostEd25519:"0",sigVerifyCostSecp256k1:"0"}}const Params={encode(A,e=minimal.Writer.create()){return A.maxMemoCharacters!=="0"&&e.uint32(8).uint64(A.maxMemoCharacters),A.txSigLimit!=="0"&&e.uint32(16).uint64(A.txSigLimit),A.txSizeCostPerByte!=="0"&&e.uint32(24).uint64(A.txSizeCostPerByte),A.sigVerifyCostEd25519!=="0"&&e.uint32(32).uint64(A.sigVerifyCostEd25519),A.sigVerifyCostSecp256k1!=="0"&&e.uint32(40).uint64(A.sigVerifyCostSecp256k1),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseParams();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.maxMemoCharacters=longToString$9(t.uint64());break;case 2:i.txSigLimit=longToString$9(t.uint64());break;case 3:i.txSizeCostPerByte=longToString$9(t.uint64());break;case 4:i.sigVerifyCostEd25519=longToString$9(t.uint64());break;case 5:i.sigVerifyCostSecp256k1=longToString$9(t.uint64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{maxMemoCharacters:isSet$h(A.maxMemoCharacters)?String(A.maxMemoCharacters):"0",txSigLimit:isSet$h(A.txSigLimit)?String(A.txSigLimit):"0",txSizeCostPerByte:isSet$h(A.txSizeCostPerByte)?String(A.txSizeCostPerByte):"0",sigVerifyCostEd25519:isSet$h(A.sigVerifyCostEd25519)?String(A.sigVerifyCostEd25519):"0",sigVerifyCostSecp256k1:isSet$h(A.sigVerifyCostSecp256k1)?String(A.sigVerifyCostSecp256k1):"0"}},toJSON(A){const e={};return A.maxMemoCharacters!==void 0&&(e.maxMemoCharacters=A.maxMemoCharacters),A.txSigLimit!==void 0&&(e.txSigLimit=A.txSigLimit),A.txSizeCostPerByte!==void 0&&(e.txSizeCostPerByte=A.txSizeCostPerByte),A.sigVerifyCostEd25519!==void 0&&(e.sigVerifyCostEd25519=A.sigVerifyCostEd25519),A.sigVerifyCostSecp256k1!==void 0&&(e.sigVerifyCostSecp256k1=A.sigVerifyCostSecp256k1),e},fromPartial(A){const e=createBaseParams();return e.maxMemoCharacters=A.maxMemoCharacters??"0",e.txSigLimit=A.txSigLimit??"0",e.txSizeCostPerByte=A.txSizeCostPerByte??"0",e.sigVerifyCostEd25519=A.sigVerifyCostEd25519??"0",e.sigVerifyCostSecp256k1=A.sigVerifyCostSecp256k1??"0",e}};function longToString$9(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$h(A){return A!=null}function createBaseQueryAccountsRequest(){return{pagination:void 0}}const QueryAccountsRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryAccountsRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{pagination:isSet$g(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAccountsRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryAccountsResponse(){return{accounts:[],pagination:void 0}}const QueryAccountsResponse={encode(A,e=minimal.Writer.create()){for(const t of A.accounts)Any.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryAccountsResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.accounts.push(Any.decode(t,t.uint32()));break;case 2:i.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{accounts:Array.isArray(A?.accounts)?A.accounts.map(e=>Any.fromJSON(e)):[],pagination:isSet$g(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.accounts?e.accounts=A.accounts.map(t=>t?Any.toJSON(t):void 0):e.accounts=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAccountsResponse();return e.accounts=A.accounts?.map(t=>Any.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQueryAccountRequest(){return{address:""}}const QueryAccountRequest={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryAccountRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.address=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{address:isSet$g(A.address)?String(A.address):""}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),e},fromPartial(A){const e=createBaseQueryAccountRequest();return e.address=A.address??"",e}};function createBaseQueryAccountResponse(){return{account:void 0}}const QueryAccountResponse={encode(A,e=minimal.Writer.create()){return A.account!==void 0&&Any.encode(A.account,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryAccountResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.account=Any.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{account:isSet$g(A.account)?Any.fromJSON(A.account):void 0}},toJSON(A){const e={};return A.account!==void 0&&(e.account=A.account?Any.toJSON(A.account):void 0),e},fromPartial(A){const e=createBaseQueryAccountResponse();return e.account=A.account!==void 0&&A.account!==null?Any.fromPartial(A.account):void 0,e}};function createBaseQueryParamsRequest(){return{}}const QueryParamsRequest={encode(A,e=minimal.Writer.create()){return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryParamsRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){default:t.skipType(o&7);break}}return i},fromJSON(A){return{}},toJSON(A){return{}},fromPartial(A){return createBaseQueryParamsRequest()}};function createBaseQueryParamsResponse(){return{params:void 0}}const QueryParamsResponse={encode(A,e=minimal.Writer.create()){return A.params!==void 0&&Params.encode(A.params,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseQueryParamsResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.params=Params.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{params:isSet$g(A.params)?Params.fromJSON(A.params):void 0}},toJSON(A){const e={};return A.params!==void 0&&(e.params=A.params?Params.toJSON(A.params):void 0),e},fromPartial(A){const e=createBaseQueryParamsResponse();return e.params=A.params!==void 0&&A.params!==null?Params.fromPartial(A.params):void 0,e}};class QueryClientImpl{constructor(e){cA(this,"rpc");this.rpc=e,this.accounts=this.accounts.bind(this),this.account=this.account.bind(this),this.params=this.params.bind(this)}accounts(e,t){return this.rpc.unary(QueryAccountsDesc,QueryAccountsRequest.fromPartial(e),t)}account(e,t){return this.rpc.unary(QueryAccountDesc,QueryAccountRequest.fromPartial(e),t)}params(e,t){return this.rpc.unary(QueryParamsDesc,QueryParamsRequest.fromPartial(e),t)}}const QueryDesc={serviceName:"cosmos.auth.v1beta1.Query"},QueryAccountsDesc={methodName:"Accounts",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAccountsRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryAccountsResponse.decode(A),toObject(){return this}}}}},QueryAccountDesc={methodName:"Account",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAccountRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryAccountResponse.decode(A),toObject(){return this}}}}},QueryParamsDesc={methodName:"Params",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryParamsRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryParamsResponse.decode(A),toObject(){return this}}}}};function isSet$g(A){return A!=null}function createBaseTimestamp(){return{seconds:"0",nanos:0}}const Timestamp={encode(A,e=minimal.Writer.create()){return A.seconds!=="0"&&e.uint32(8).int64(A.seconds),A.nanos!==0&&e.uint32(16).int32(A.nanos),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseTimestamp();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.seconds=longToString$8(t.int64());break;case 2:i.nanos=t.int32();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{seconds:isSet$f(A.seconds)?String(A.seconds):"0",nanos:isSet$f(A.nanos)?Number(A.nanos):0}},toJSON(A){const e={};return A.seconds!==void 0&&(e.seconds=A.seconds),A.nanos!==void 0&&(e.nanos=Math.round(A.nanos)),e},fromPartial(A){const e=createBaseTimestamp();return e.seconds=A.seconds??"0",e.nanos=A.nanos??0,e}};function longToString$8(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$f(A){return A!=null}var globalThis$c=(()=>{if(typeof globalThis$c<"u")return globalThis$c;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$c.atob;globalThis$c.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function createBaseConsensus(){return{block:"0",app:"0"}}const Consensus={encode(A,e=minimal.Writer.create()){return A.block!=="0"&&e.uint32(8).uint64(A.block),A.app!=="0"&&e.uint32(16).uint64(A.app),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseConsensus();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.block=longToString$7(t.uint64());break;case 2:i.app=longToString$7(t.uint64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{block:isSet$e(A.block)?String(A.block):"0",app:isSet$e(A.app)?String(A.app):"0"}},toJSON(A){const e={};return A.block!==void 0&&(e.block=A.block),A.app!==void 0&&(e.app=A.app),e},fromPartial(A){const e=createBaseConsensus();return e.block=A.block??"0",e.app=A.app??"0",e}};function longToString$7(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$e(A){return A!=null}function createBasePublicKey(){return{ed25519:void 0,secp256k1:void 0}}const PublicKey={encode(A,e=minimal.Writer.create()){return A.ed25519!==void 0&&e.uint32(10).bytes(A.ed25519),A.secp256k1!==void 0&&e.uint32(18).bytes(A.secp256k1),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBasePublicKey();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.ed25519=t.bytes();break;case 2:i.secp256k1=t.bytes();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{ed25519:isSet$d(A.ed25519)?bytesFromBase64$9(A.ed25519):void 0,secp256k1:isSet$d(A.secp256k1)?bytesFromBase64$9(A.secp256k1):void 0}},toJSON(A){const e={};return A.ed25519!==void 0&&(e.ed25519=A.ed25519!==void 0?base64FromBytes$9(A.ed25519):void 0),A.secp256k1!==void 0&&(e.secp256k1=A.secp256k1!==void 0?base64FromBytes$9(A.secp256k1):void 0),e},fromPartial(A){const e=createBasePublicKey();return e.ed25519=A.ed25519??void 0,e.secp256k1=A.secp256k1??void 0,e}};var globalThis$b=(()=>{if(typeof globalThis$b<"u")return globalThis$b;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$9=globalThis$b.atob||(A=>globalThis$b.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$9(A){const e=atob$9(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$9=globalThis$b.btoa||(A=>globalThis$b.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$9(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$9(e.join(""))}function isSet$d(A){return A!=null}function createBaseValidatorSet(){return{validators:[],proposer:void 0,totalVotingPower:"0"}}const ValidatorSet={encode(A,e=minimal.Writer.create()){for(const t of A.validators)Validator$1.encode(t,e.uint32(10).fork()).ldelim();return A.proposer!==void 0&&Validator$1.encode(A.proposer,e.uint32(18).fork()).ldelim(),A.totalVotingPower!=="0"&&e.uint32(24).int64(A.totalVotingPower),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseValidatorSet();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.validators.push(Validator$1.decode(t,t.uint32()));break;case 2:i.proposer=Validator$1.decode(t,t.uint32());break;case 3:i.totalVotingPower=longToString$6(t.int64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{validators:Array.isArray(A?.validators)?A.validators.map(e=>Validator$1.fromJSON(e)):[],proposer:isSet$c(A.proposer)?Validator$1.fromJSON(A.proposer):void 0,totalVotingPower:isSet$c(A.totalVotingPower)?String(A.totalVotingPower):"0"}},toJSON(A){const e={};return A.validators?e.validators=A.validators.map(t=>t?Validator$1.toJSON(t):void 0):e.validators=[],A.proposer!==void 0&&(e.proposer=A.proposer?Validator$1.toJSON(A.proposer):void 0),A.totalVotingPower!==void 0&&(e.totalVotingPower=A.totalVotingPower),e},fromPartial(A){const e=createBaseValidatorSet();return e.validators=A.validators?.map(t=>Validator$1.fromPartial(t))||[],e.proposer=A.proposer!==void 0&&A.proposer!==null?Validator$1.fromPartial(A.proposer):void 0,e.totalVotingPower=A.totalVotingPower??"0",e}};function createBaseValidator$1(){return{address:new Uint8Array,pubKey:void 0,votingPower:"0",proposerPriority:"0"}}const Validator$1={encode(A,e=minimal.Writer.create()){return A.address.length!==0&&e.uint32(10).bytes(A.address),A.pubKey!==void 0&&PublicKey.encode(A.pubKey,e.uint32(18).fork()).ldelim(),A.votingPower!=="0"&&e.uint32(24).int64(A.votingPower),A.proposerPriority!=="0"&&e.uint32(32).int64(A.proposerPriority),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseValidator$1();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.address=t.bytes();break;case 2:i.pubKey=PublicKey.decode(t,t.uint32());break;case 3:i.votingPower=longToString$6(t.int64());break;case 4:i.proposerPriority=longToString$6(t.int64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{address:isSet$c(A.address)?bytesFromBase64$8(A.address):new Uint8Array,pubKey:isSet$c(A.pubKey)?PublicKey.fromJSON(A.pubKey):void 0,votingPower:isSet$c(A.votingPower)?String(A.votingPower):"0",proposerPriority:isSet$c(A.proposerPriority)?String(A.proposerPriority):"0"}},toJSON(A){const e={};return A.address!==void 0&&(e.address=base64FromBytes$8(A.address!==void 0?A.address:new Uint8Array)),A.pubKey!==void 0&&(e.pubKey=A.pubKey?PublicKey.toJSON(A.pubKey):void 0),A.votingPower!==void 0&&(e.votingPower=A.votingPower),A.proposerPriority!==void 0&&(e.proposerPriority=A.proposerPriority),e},fromPartial(A){const e=createBaseValidator$1();return e.address=A.address??new Uint8Array,e.pubKey=A.pubKey!==void 0&&A.pubKey!==null?PublicKey.fromPartial(A.pubKey):void 0,e.votingPower=A.votingPower??"0",e.proposerPriority=A.proposerPriority??"0",e}};var globalThis$a=(()=>{if(typeof globalThis$a<"u")return globalThis$a;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$8=globalThis$a.atob||(A=>globalThis$a.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$8(A){const e=atob$8(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$8=globalThis$a.btoa||(A=>globalThis$a.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$8(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$8(e.join(""))}function longToString$6(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$c(A){return A!=null}var BlockIDFlag;(function(A){A[A.BLOCK_ID_FLAG_UNKNOWN=0]="BLOCK_ID_FLAG_UNKNOWN",A[A.BLOCK_ID_FLAG_ABSENT=1]="BLOCK_ID_FLAG_ABSENT",A[A.BLOCK_ID_FLAG_COMMIT=2]="BLOCK_ID_FLAG_COMMIT",A[A.BLOCK_ID_FLAG_NIL=3]="BLOCK_ID_FLAG_NIL",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(BlockIDFlag||(BlockIDFlag={}));function blockIDFlagFromJSON(A){switch(A){case 0:case"BLOCK_ID_FLAG_UNKNOWN":return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;case 1:case"BLOCK_ID_FLAG_ABSENT":return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;case 2:case"BLOCK_ID_FLAG_COMMIT":return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;case 3:case"BLOCK_ID_FLAG_NIL":return BlockIDFlag.BLOCK_ID_FLAG_NIL;case-1:case"UNRECOGNIZED":default:return BlockIDFlag.UNRECOGNIZED}}function blockIDFlagToJSON(A){switch(A){case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:return"BLOCK_ID_FLAG_UNKNOWN";case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:return"BLOCK_ID_FLAG_ABSENT";case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:return"BLOCK_ID_FLAG_COMMIT";case BlockIDFlag.BLOCK_ID_FLAG_NIL:return"BLOCK_ID_FLAG_NIL";case BlockIDFlag.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var SignedMsgType;(function(A){A[A.SIGNED_MSG_TYPE_UNKNOWN=0]="SIGNED_MSG_TYPE_UNKNOWN",A[A.SIGNED_MSG_TYPE_PREVOTE=1]="SIGNED_MSG_TYPE_PREVOTE",A[A.SIGNED_MSG_TYPE_PRECOMMIT=2]="SIGNED_MSG_TYPE_PRECOMMIT",A[A.SIGNED_MSG_TYPE_PROPOSAL=32]="SIGNED_MSG_TYPE_PROPOSAL",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(SignedMsgType||(SignedMsgType={}));function signedMsgTypeFromJSON(A){switch(A){case 0:case"SIGNED_MSG_TYPE_UNKNOWN":return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;case 1:case"SIGNED_MSG_TYPE_PREVOTE":return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;case 2:case"SIGNED_MSG_TYPE_PRECOMMIT":return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;case 32:case"SIGNED_MSG_TYPE_PROPOSAL":return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;case-1:case"UNRECOGNIZED":default:return SignedMsgType.UNRECOGNIZED}}function signedMsgTypeToJSON(A){switch(A){case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:return"SIGNED_MSG_TYPE_UNKNOWN";case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:return"SIGNED_MSG_TYPE_PREVOTE";case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:return"SIGNED_MSG_TYPE_PRECOMMIT";case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:return"SIGNED_MSG_TYPE_PROPOSAL";case SignedMsgType.UNRECOGNIZED:default:return"UNRECOGNIZED"}}function createBasePartSetHeader(){return{total:0,hash:new Uint8Array}}const PartSetHeader={encode(A,e=minimal.Writer.create()){return A.total!==0&&e.uint32(8).uint32(A.total),A.hash.length!==0&&e.uint32(18).bytes(A.hash),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBasePartSetHeader();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.total=t.uint32();break;case 2:i.hash=t.bytes();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{total:isSet$b(A.total)?Number(A.total):0,hash:isSet$b(A.hash)?bytesFromBase64$7(A.hash):new Uint8Array}},toJSON(A){const e={};return A.total!==void 0&&(e.total=Math.round(A.total)),A.hash!==void 0&&(e.hash=base64FromBytes$7(A.hash!==void 0?A.hash:new Uint8Array)),e},fromPartial(A){const e=createBasePartSetHeader();return e.total=A.total??0,e.hash=A.hash??new Uint8Array,e}};function createBaseBlockID(){return{hash:new Uint8Array,partSetHeader:void 0}}const BlockID={encode(A,e=minimal.Writer.create()){return A.hash.length!==0&&e.uint32(10).bytes(A.hash),A.partSetHeader!==void 0&&PartSetHeader.encode(A.partSetHeader,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseBlockID();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.hash=t.bytes();break;case 2:i.partSetHeader=PartSetHeader.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{hash:isSet$b(A.hash)?bytesFromBase64$7(A.hash):new Uint8Array,partSetHeader:isSet$b(A.partSetHeader)?PartSetHeader.fromJSON(A.partSetHeader):void 0}},toJSON(A){const e={};return A.hash!==void 0&&(e.hash=base64FromBytes$7(A.hash!==void 0?A.hash:new Uint8Array)),A.partSetHeader!==void 0&&(e.partSetHeader=A.partSetHeader?PartSetHeader.toJSON(A.partSetHeader):void 0),e},fromPartial(A){const e=createBaseBlockID();return e.hash=A.hash??new Uint8Array,e.partSetHeader=A.partSetHeader!==void 0&&A.partSetHeader!==null?PartSetHeader.fromPartial(A.partSetHeader):void 0,e}};function createBaseHeader(){return{version:void 0,chainId:"",height:"0",time:void 0,lastBlockId:void 0,lastCommitHash:new Uint8Array,dataHash:new Uint8Array,validatorsHash:new Uint8Array,nextValidatorsHash:new Uint8Array,consensusHash:new Uint8Array,appHash:new Uint8Array,lastResultsHash:new Uint8Array,evidenceHash:new Uint8Array,proposerAddress:new Uint8Array}}const Header$1={encode(A,e=minimal.Writer.create()){return A.version!==void 0&&Consensus.encode(A.version,e.uint32(10).fork()).ldelim(),A.chainId!==""&&e.uint32(18).string(A.chainId),A.height!=="0"&&e.uint32(24).int64(A.height),A.time!==void 0&&Timestamp.encode(A.time,e.uint32(34).fork()).ldelim(),A.lastBlockId!==void 0&&BlockID.encode(A.lastBlockId,e.uint32(42).fork()).ldelim(),A.lastCommitHash.length!==0&&e.uint32(50).bytes(A.lastCommitHash),A.dataHash.length!==0&&e.uint32(58).bytes(A.dataHash),A.validatorsHash.length!==0&&e.uint32(66).bytes(A.validatorsHash),A.nextValidatorsHash.length!==0&&e.uint32(74).bytes(A.nextValidatorsHash),A.consensusHash.length!==0&&e.uint32(82).bytes(A.consensusHash),A.appHash.length!==0&&e.uint32(90).bytes(A.appHash),A.lastResultsHash.length!==0&&e.uint32(98).bytes(A.lastResultsHash),A.evidenceHash.length!==0&&e.uint32(106).bytes(A.evidenceHash),A.proposerAddress.length!==0&&e.uint32(114).bytes(A.proposerAddress),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseHeader();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.version=Consensus.decode(t,t.uint32());break;case 2:i.chainId=t.string();break;case 3:i.height=longToString$5(t.int64());break;case 4:i.time=Timestamp.decode(t,t.uint32());break;case 5:i.lastBlockId=BlockID.decode(t,t.uint32());break;case 6:i.lastCommitHash=t.bytes();break;case 7:i.dataHash=t.bytes();break;case 8:i.validatorsHash=t.bytes();break;case 9:i.nextValidatorsHash=t.bytes();break;case 10:i.consensusHash=t.bytes();break;case 11:i.appHash=t.bytes();break;case 12:i.lastResultsHash=t.bytes();break;case 13:i.evidenceHash=t.bytes();break;case 14:i.proposerAddress=t.bytes();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{version:isSet$b(A.version)?Consensus.fromJSON(A.version):void 0,chainId:isSet$b(A.chainId)?String(A.chainId):"",height:isSet$b(A.height)?String(A.height):"0",time:isSet$b(A.time)?fromJsonTimestamp$1(A.time):void 0,lastBlockId:isSet$b(A.lastBlockId)?BlockID.fromJSON(A.lastBlockId):void 0,lastCommitHash:isSet$b(A.lastCommitHash)?bytesFromBase64$7(A.lastCommitHash):new Uint8Array,dataHash:isSet$b(A.dataHash)?bytesFromBase64$7(A.dataHash):new Uint8Array,validatorsHash:isSet$b(A.validatorsHash)?bytesFromBase64$7(A.validatorsHash):new Uint8Array,nextValidatorsHash:isSet$b(A.nextValidatorsHash)?bytesFromBase64$7(A.nextValidatorsHash):new Uint8Array,consensusHash:isSet$b(A.consensusHash)?bytesFromBase64$7(A.consensusHash):new Uint8Array,appHash:isSet$b(A.appHash)?bytesFromBase64$7(A.appHash):new Uint8Array,lastResultsHash:isSet$b(A.lastResultsHash)?bytesFromBase64$7(A.lastResultsHash):new Uint8Array,evidenceHash:isSet$b(A.evidenceHash)?bytesFromBase64$7(A.evidenceHash):new Uint8Array,proposerAddress:isSet$b(A.proposerAddress)?bytesFromBase64$7(A.proposerAddress):new Uint8Array}},toJSON(A){const e={};return A.version!==void 0&&(e.version=A.version?Consensus.toJSON(A.version):void 0),A.chainId!==void 0&&(e.chainId=A.chainId),A.height!==void 0&&(e.height=A.height),A.time!==void 0&&(e.time=fromTimestamp$1(A.time).toISOString()),A.lastBlockId!==void 0&&(e.lastBlockId=A.lastBlockId?BlockID.toJSON(A.lastBlockId):void 0),A.lastCommitHash!==void 0&&(e.lastCommitHash=base64FromBytes$7(A.lastCommitHash!==void 0?A.lastCommitHash:new Uint8Array)),A.dataHash!==void 0&&(e.dataHash=base64FromBytes$7(A.dataHash!==void 0?A.dataHash:new Uint8Array)),A.validatorsHash!==void 0&&(e.validatorsHash=base64FromBytes$7(A.validatorsHash!==void 0?A.validatorsHash:new Uint8Array)),A.nextValidatorsHash!==void 0&&(e.nextValidatorsHash=base64FromBytes$7(A.nextValidatorsHash!==void 0?A.nextValidatorsHash:new Uint8Array)),A.consensusHash!==void 0&&(e.consensusHash=base64FromBytes$7(A.consensusHash!==void 0?A.consensusHash:new Uint8Array)),A.appHash!==void 0&&(e.appHash=base64FromBytes$7(A.appHash!==void 0?A.appHash:new Uint8Array)),A.lastResultsHash!==void 0&&(e.lastResultsHash=base64FromBytes$7(A.lastResultsHash!==void 0?A.lastResultsHash:new Uint8Array)),A.evidenceHash!==void 0&&(e.evidenceHash=base64FromBytes$7(A.evidenceHash!==void 0?A.evidenceHash:new Uint8Array)),A.proposerAddress!==void 0&&(e.proposerAddress=base64FromBytes$7(A.proposerAddress!==void 0?A.proposerAddress:new Uint8Array)),e},fromPartial(A){const e=createBaseHeader();return e.version=A.version!==void 0&&A.version!==null?Consensus.fromPartial(A.version):void 0,e.chainId=A.chainId??"",e.height=A.height??"0",e.time=A.time!==void 0&&A.time!==null?Timestamp.fromPartial(A.time):void 0,e.lastBlockId=A.lastBlockId!==void 0&&A.lastBlockId!==null?BlockID.fromPartial(A.lastBlockId):void 0,e.lastCommitHash=A.lastCommitHash??new Uint8Array,e.dataHash=A.dataHash??new Uint8Array,e.validatorsHash=A.validatorsHash??new Uint8Array,e.nextValidatorsHash=A.nextValidatorsHash??new Uint8Array,e.consensusHash=A.consensusHash??new Uint8Array,e.appHash=A.appHash??new Uint8Array,e.lastResultsHash=A.lastResultsHash??new Uint8Array,e.evidenceHash=A.evidenceHash??new Uint8Array,e.proposerAddress=A.proposerAddress??new Uint8Array,e}};function createBaseData(){return{txs:[]}}const Data={encode(A,e=minimal.Writer.create()){for(const t of A.txs)e.uint32(10).bytes(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseData();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.txs.push(t.bytes());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{txs:Array.isArray(A?.txs)?A.txs.map(e=>bytesFromBase64$7(e)):[]}},toJSON(A){const e={};return A.txs?e.txs=A.txs.map(t=>base64FromBytes$7(t!==void 0?t:new Uint8Array)):e.txs=[],e},fromPartial(A){const e=createBaseData();return e.txs=A.txs?.map(t=>t)||[],e}};function createBaseVote(){return{type:0,height:"0",round:0,blockId:void 0,timestamp:void 0,validatorAddress:new Uint8Array,validatorIndex:0,signature:new Uint8Array}}const Vote={encode(A,e=minimal.Writer.create()){return A.type!==0&&e.uint32(8).int32(A.type),A.height!=="0"&&e.uint32(16).int64(A.height),A.round!==0&&e.uint32(24).int32(A.round),A.blockId!==void 0&&BlockID.encode(A.blockId,e.uint32(34).fork()).ldelim(),A.timestamp!==void 0&&Timestamp.encode(A.timestamp,e.uint32(42).fork()).ldelim(),A.validatorAddress.length!==0&&e.uint32(50).bytes(A.validatorAddress),A.validatorIndex!==0&&e.uint32(56).int32(A.validatorIndex),A.signature.length!==0&&e.uint32(66).bytes(A.signature),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseVote();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.type=t.int32();break;case 2:i.height=longToString$5(t.int64());break;case 3:i.round=t.int32();break;case 4:i.blockId=BlockID.decode(t,t.uint32());break;case 5:i.timestamp=Timestamp.decode(t,t.uint32());break;case 6:i.validatorAddress=t.bytes();break;case 7:i.validatorIndex=t.int32();break;case 8:i.signature=t.bytes();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{type:isSet$b(A.type)?signedMsgTypeFromJSON(A.type):0,height:isSet$b(A.height)?String(A.height):"0",round:isSet$b(A.round)?Number(A.round):0,blockId:isSet$b(A.blockId)?BlockID.fromJSON(A.blockId):void 0,timestamp:isSet$b(A.timestamp)?fromJsonTimestamp$1(A.timestamp):void 0,validatorAddress:isSet$b(A.validatorAddress)?bytesFromBase64$7(A.validatorAddress):new Uint8Array,validatorIndex:isSet$b(A.validatorIndex)?Number(A.validatorIndex):0,signature:isSet$b(A.signature)?bytesFromBase64$7(A.signature):new Uint8Array}},toJSON(A){const e={};return A.type!==void 0&&(e.type=signedMsgTypeToJSON(A.type)),A.height!==void 0&&(e.height=A.height),A.round!==void 0&&(e.round=Math.round(A.round)),A.blockId!==void 0&&(e.blockId=A.blockId?BlockID.toJSON(A.blockId):void 0),A.timestamp!==void 0&&(e.timestamp=fromTimestamp$1(A.timestamp).toISOString()),A.validatorAddress!==void 0&&(e.validatorAddress=base64FromBytes$7(A.validatorAddress!==void 0?A.validatorAddress:new Uint8Array)),A.validatorIndex!==void 0&&(e.validatorIndex=Math.round(A.validatorIndex)),A.signature!==void 0&&(e.signature=base64FromBytes$7(A.signature!==void 0?A.signature:new Uint8Array)),e},fromPartial(A){const e=createBaseVote();return e.type=A.type??0,e.height=A.height??"0",e.round=A.round??0,e.blockId=A.blockId!==void 0&&A.blockId!==null?BlockID.fromPartial(A.blockId):void 0,e.timestamp=A.timestamp!==void 0&&A.timestamp!==null?Timestamp.fromPartial(A.timestamp):void 0,e.validatorAddress=A.validatorAddress??new Uint8Array,e.validatorIndex=A.validatorIndex??0,e.signature=A.signature??new Uint8Array,e}};function createBaseCommit(){return{height:"0",round:0,blockId:void 0,signatures:[]}}const Commit={encode(A,e=minimal.Writer.create()){A.height!=="0"&&e.uint32(8).int64(A.height),A.round!==0&&e.uint32(16).int32(A.round),A.blockId!==void 0&&BlockID.encode(A.blockId,e.uint32(26).fork()).ldelim();for(const t of A.signatures)CommitSig.encode(t,e.uint32(34).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseCommit();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.height=longToString$5(t.int64());break;case 2:i.round=t.int32();break;case 3:i.blockId=BlockID.decode(t,t.uint32());break;case 4:i.signatures.push(CommitSig.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{height:isSet$b(A.height)?String(A.height):"0",round:isSet$b(A.round)?Number(A.round):0,blockId:isSet$b(A.blockId)?BlockID.fromJSON(A.blockId):void 0,signatures:Array.isArray(A?.signatures)?A.signatures.map(e=>CommitSig.fromJSON(e)):[]}},toJSON(A){const e={};return A.height!==void 0&&(e.height=A.height),A.round!==void 0&&(e.round=Math.round(A.round)),A.blockId!==void 0&&(e.blockId=A.blockId?BlockID.toJSON(A.blockId):void 0),A.signatures?e.signatures=A.signatures.map(t=>t?CommitSig.toJSON(t):void 0):e.signatures=[],e},fromPartial(A){const e=createBaseCommit();return e.height=A.height??"0",e.round=A.round??0,e.blockId=A.blockId!==void 0&&A.blockId!==null?BlockID.fromPartial(A.blockId):void 0,e.signatures=A.signatures?.map(t=>CommitSig.fromPartial(t))||[],e}};function createBaseCommitSig(){return{blockIdFlag:0,validatorAddress:new Uint8Array,timestamp:void 0,signature:new Uint8Array}}const CommitSig={encode(A,e=minimal.Writer.create()){return A.blockIdFlag!==0&&e.uint32(8).int32(A.blockIdFlag),A.validatorAddress.length!==0&&e.uint32(18).bytes(A.validatorAddress),A.timestamp!==void 0&&Timestamp.encode(A.timestamp,e.uint32(26).fork()).ldelim(),A.signature.length!==0&&e.uint32(34).bytes(A.signature),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseCommitSig();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.blockIdFlag=t.int32();break;case 2:i.validatorAddress=t.bytes();break;case 3:i.timestamp=Timestamp.decode(t,t.uint32());break;case 4:i.signature=t.bytes();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{blockIdFlag:isSet$b(A.blockIdFlag)?blockIDFlagFromJSON(A.blockIdFlag):0,validatorAddress:isSet$b(A.validatorAddress)?bytesFromBase64$7(A.validatorAddress):new Uint8Array,timestamp:isSet$b(A.timestamp)?fromJsonTimestamp$1(A.timestamp):void 0,signature:isSet$b(A.signature)?bytesFromBase64$7(A.signature):new Uint8Array}},toJSON(A){const e={};return A.blockIdFlag!==void 0&&(e.blockIdFlag=blockIDFlagToJSON(A.blockIdFlag)),A.validatorAddress!==void 0&&(e.validatorAddress=base64FromBytes$7(A.validatorAddress!==void 0?A.validatorAddress:new Uint8Array)),A.timestamp!==void 0&&(e.timestamp=fromTimestamp$1(A.timestamp).toISOString()),A.signature!==void 0&&(e.signature=base64FromBytes$7(A.signature!==void 0?A.signature:new Uint8Array)),e},fromPartial(A){const e=createBaseCommitSig();return e.blockIdFlag=A.blockIdFlag??0,e.validatorAddress=A.validatorAddress??new Uint8Array,e.timestamp=A.timestamp!==void 0&&A.timestamp!==null?Timestamp.fromPartial(A.timestamp):void 0,e.signature=A.signature??new Uint8Array,e}};function createBaseSignedHeader(){return{header:void 0,commit:void 0}}const SignedHeader={encode(A,e=minimal.Writer.create()){return A.header!==void 0&&Header$1.encode(A.header,e.uint32(10).fork()).ldelim(),A.commit!==void 0&&Commit.encode(A.commit,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseSignedHeader();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.header=Header$1.decode(t,t.uint32());break;case 2:i.commit=Commit.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{header:isSet$b(A.header)?Header$1.fromJSON(A.header):void 0,commit:isSet$b(A.commit)?Commit.fromJSON(A.commit):void 0}},toJSON(A){const e={};return A.header!==void 0&&(e.header=A.header?Header$1.toJSON(A.header):void 0),A.commit!==void 0&&(e.commit=A.commit?Commit.toJSON(A.commit):void 0),e},fromPartial(A){const e=createBaseSignedHeader();return e.header=A.header!==void 0&&A.header!==null?Header$1.fromPartial(A.header):void 0,e.commit=A.commit!==void 0&&A.commit!==null?Commit.fromPartial(A.commit):void 0,e}};function createBaseLightBlock(){return{signedHeader:void 0,validatorSet:void 0}}const LightBlock={encode(A,e=minimal.Writer.create()){return A.signedHeader!==void 0&&SignedHeader.encode(A.signedHeader,e.uint32(10).fork()).ldelim(),A.validatorSet!==void 0&&ValidatorSet.encode(A.validatorSet,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseLightBlock();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.signedHeader=SignedHeader.decode(t,t.uint32());break;case 2:i.validatorSet=ValidatorSet.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{signedHeader:isSet$b(A.signedHeader)?SignedHeader.fromJSON(A.signedHeader):void 0,validatorSet:isSet$b(A.validatorSet)?ValidatorSet.fromJSON(A.validatorSet):void 0}},toJSON(A){const e={};return A.signedHeader!==void 0&&(e.signedHeader=A.signedHeader?SignedHeader.toJSON(A.signedHeader):void 0),A.validatorSet!==void 0&&(e.validatorSet=A.validatorSet?ValidatorSet.toJSON(A.validatorSet):void 0),e},fromPartial(A){const e=createBaseLightBlock();return e.signedHeader=A.signedHeader!==void 0&&A.signedHeader!==null?SignedHeader.fromPartial(A.signedHeader):void 0,e.validatorSet=A.validatorSet!==void 0&&A.validatorSet!==null?ValidatorSet.fromPartial(A.validatorSet):void 0,e}};var globalThis$9=(()=>{if(typeof globalThis$9<"u")return globalThis$9;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$7=globalThis$9.atob||(A=>globalThis$9.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$7(A){const e=atob$7(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$7=globalThis$9.btoa||(A=>globalThis$9.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$7(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$7(e.join(""))}function toTimestamp$1(A){const e=Math.trunc(A.getTime()/1e3).toString(),t=A.getTime()%1e3*1e6;return{seconds:e,nanos:t}}function fromTimestamp$1(A){let e=Number(A.seconds)*1e3;return e+=A.nanos/1e6,new Date(e)}function fromJsonTimestamp$1(A){return A instanceof Date?toTimestamp$1(A):typeof A=="string"?toTimestamp$1(new Date(A)):Timestamp.fromJSON(A)}function longToString$5(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$b(A){return A!=null}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var CheckTxType;(function(A){A[A.NEW=0]="NEW",A[A.RECHECK=1]="RECHECK",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(CheckTxType||(CheckTxType={}));var EvidenceType;(function(A){A[A.UNKNOWN=0]="UNKNOWN",A[A.DUPLICATE_VOTE=1]="DUPLICATE_VOTE",A[A.LIGHT_CLIENT_ATTACK=2]="LIGHT_CLIENT_ATTACK",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(EvidenceType||(EvidenceType={}));var ResponseOfferSnapshot_Result;(function(A){A[A.UNKNOWN=0]="UNKNOWN",A[A.ACCEPT=1]="ACCEPT",A[A.ABORT=2]="ABORT",A[A.REJECT=3]="REJECT",A[A.REJECT_FORMAT=4]="REJECT_FORMAT",A[A.REJECT_SENDER=5]="REJECT_SENDER",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(ResponseOfferSnapshot_Result||(ResponseOfferSnapshot_Result={}));var ResponseApplySnapshotChunk_Result;(function(A){A[A.UNKNOWN=0]="UNKNOWN",A[A.ACCEPT=1]="ACCEPT",A[A.ABORT=2]="ABORT",A[A.RETRY=3]="RETRY",A[A.RETRY_SNAPSHOT=4]="RETRY_SNAPSHOT",A[A.REJECT_SNAPSHOT=5]="REJECT_SNAPSHOT",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(ResponseApplySnapshotChunk_Result||(ResponseApplySnapshotChunk_Result={}));function createBaseEvent(){return{type:"",attributes:[]}}const Event$1={encode(A,e=minimal.Writer.create()){A.type!==""&&e.uint32(10).string(A.type);for(const t of A.attributes)EventAttribute.encode(t,e.uint32(18).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseEvent();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.type=t.string();break;case 2:i.attributes.push(EventAttribute.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{type:isSet$a(A.type)?String(A.type):"",attributes:Array.isArray(A?.attributes)?A.attributes.map(e=>EventAttribute.fromJSON(e)):[]}},toJSON(A){const e={};return A.type!==void 0&&(e.type=A.type),A.attributes?e.attributes=A.attributes.map(t=>t?EventAttribute.toJSON(t):void 0):e.attributes=[],e},fromPartial(A){const e=createBaseEvent();return e.type=A.type??"",e.attributes=A.attributes?.map(t=>EventAttribute.fromPartial(t))||[],e}};function createBaseEventAttribute(){return{key:new Uint8Array,value:new Uint8Array,index:!1}}const EventAttribute={encode(A,e=minimal.Writer.create()){return A.key.length!==0&&e.uint32(10).bytes(A.key),A.value.length!==0&&e.uint32(18).bytes(A.value),A.index===!0&&e.uint32(24).bool(A.index),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseEventAttribute();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.key=t.bytes();break;case 2:i.value=t.bytes();break;case 3:i.index=t.bool();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{key:isSet$a(A.key)?bytesFromBase64$6(A.key):new Uint8Array,value:isSet$a(A.value)?bytesFromBase64$6(A.value):new Uint8Array,index:isSet$a(A.index)?Boolean(A.index):!1}},toJSON(A){const e={};return A.key!==void 0&&(e.key=base64FromBytes$6(A.key!==void 0?A.key:new Uint8Array)),A.value!==void 0&&(e.value=base64FromBytes$6(A.value!==void 0?A.value:new Uint8Array)),A.index!==void 0&&(e.index=A.index),e},fromPartial(A){const e=createBaseEventAttribute();return e.key=A.key??new Uint8Array,e.value=A.value??new Uint8Array,e.index=A.index??!1,e}};var globalThis$8=(()=>{if(typeof globalThis$8<"u")return globalThis$8;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$6=globalThis$8.atob||(A=>globalThis$8.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$6(A){const e=atob$6(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$6=globalThis$8.btoa||(A=>globalThis$8.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$6(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$6(e.join(""))}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$a(A){return A!=null}function createBaseTxResponse(){return{height:"0",txhash:"",codespace:"",code:0,data:"",rawLog:"",logs:[],info:"",gasWanted:"0",gasUsed:"0",tx:void 0,timestamp:"",events:[]}}const TxResponse={encode(A,e=minimal.Writer.create()){A.height!=="0"&&e.uint32(8).int64(A.height),A.txhash!==""&&e.uint32(18).string(A.txhash),A.codespace!==""&&e.uint32(26).string(A.codespace),A.code!==0&&e.uint32(32).uint32(A.code),A.data!==""&&e.uint32(42).string(A.data),A.rawLog!==""&&e.uint32(50).string(A.rawLog);for(const t of A.logs)ABCIMessageLog.encode(t,e.uint32(58).fork()).ldelim();A.info!==""&&e.uint32(66).string(A.info),A.gasWanted!=="0"&&e.uint32(72).int64(A.gasWanted),A.gasUsed!=="0"&&e.uint32(80).int64(A.gasUsed),A.tx!==void 0&&Any.encode(A.tx,e.uint32(90).fork()).ldelim(),A.timestamp!==""&&e.uint32(98).string(A.timestamp);for(const t of A.events)Event$1.encode(t,e.uint32(106).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseTxResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.height=longToString$4(t.int64());break;case 2:i.txhash=t.string();break;case 3:i.codespace=t.string();break;case 4:i.code=t.uint32();break;case 5:i.data=t.string();break;case 6:i.rawLog=t.string();break;case 7:i.logs.push(ABCIMessageLog.decode(t,t.uint32()));break;case 8:i.info=t.string();break;case 9:i.gasWanted=longToString$4(t.int64());break;case 10:i.gasUsed=longToString$4(t.int64());break;case 11:i.tx=Any.decode(t,t.uint32());break;case 12:i.timestamp=t.string();break;case 13:i.events.push(Event$1.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{height:isSet$9(A.height)?String(A.height):"0",txhash:isSet$9(A.txhash)?String(A.txhash):"",codespace:isSet$9(A.codespace)?String(A.codespace):"",code:isSet$9(A.code)?Number(A.code):0,data:isSet$9(A.data)?String(A.data):"",rawLog:isSet$9(A.rawLog)?String(A.rawLog):"",logs:Array.isArray(A?.logs)?A.logs.map(e=>ABCIMessageLog.fromJSON(e)):[],info:isSet$9(A.info)?String(A.info):"",gasWanted:isSet$9(A.gasWanted)?String(A.gasWanted):"0",gasUsed:isSet$9(A.gasUsed)?String(A.gasUsed):"0",tx:isSet$9(A.tx)?Any.fromJSON(A.tx):void 0,timestamp:isSet$9(A.timestamp)?String(A.timestamp):"",events:Array.isArray(A?.events)?A.events.map(e=>Event$1.fromJSON(e)):[]}},toJSON(A){const e={};return A.height!==void 0&&(e.height=A.height),A.txhash!==void 0&&(e.txhash=A.txhash),A.codespace!==void 0&&(e.codespace=A.codespace),A.code!==void 0&&(e.code=Math.round(A.code)),A.data!==void 0&&(e.data=A.data),A.rawLog!==void 0&&(e.rawLog=A.rawLog),A.logs?e.logs=A.logs.map(t=>t?ABCIMessageLog.toJSON(t):void 0):e.logs=[],A.info!==void 0&&(e.info=A.info),A.gasWanted!==void 0&&(e.gasWanted=A.gasWanted),A.gasUsed!==void 0&&(e.gasUsed=A.gasUsed),A.tx!==void 0&&(e.tx=A.tx?Any.toJSON(A.tx):void 0),A.timestamp!==void 0&&(e.timestamp=A.timestamp),A.events?e.events=A.events.map(t=>t?Event$1.toJSON(t):void 0):e.events=[],e},fromPartial(A){const e=createBaseTxResponse();return e.height=A.height??"0",e.txhash=A.txhash??"",e.codespace=A.codespace??"",e.code=A.code??0,e.data=A.data??"",e.rawLog=A.rawLog??"",e.logs=A.logs?.map(t=>ABCIMessageLog.fromPartial(t))||[],e.info=A.info??"",e.gasWanted=A.gasWanted??"0",e.gasUsed=A.gasUsed??"0",e.tx=A.tx!==void 0&&A.tx!==null?Any.fromPartial(A.tx):void 0,e.timestamp=A.timestamp??"",e.events=A.events?.map(t=>Event$1.fromPartial(t))||[],e}};function createBaseABCIMessageLog(){return{msgIndex:0,log:"",events:[]}}const ABCIMessageLog={encode(A,e=minimal.Writer.create()){A.msgIndex!==0&&e.uint32(8).uint32(A.msgIndex),A.log!==""&&e.uint32(18).string(A.log);for(const t of A.events)StringEvent.encode(t,e.uint32(26).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseABCIMessageLog();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.msgIndex=t.uint32();break;case 2:i.log=t.string();break;case 3:i.events.push(StringEvent.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{msgIndex:isSet$9(A.msgIndex)?Number(A.msgIndex):0,log:isSet$9(A.log)?String(A.log):"",events:Array.isArray(A?.events)?A.events.map(e=>StringEvent.fromJSON(e)):[]}},toJSON(A){const e={};return A.msgIndex!==void 0&&(e.msgIndex=Math.round(A.msgIndex)),A.log!==void 0&&(e.log=A.log),A.events?e.events=A.events.map(t=>t?StringEvent.toJSON(t):void 0):e.events=[],e},fromPartial(A){const e=createBaseABCIMessageLog();return e.msgIndex=A.msgIndex??0,e.log=A.log??"",e.events=A.events?.map(t=>StringEvent.fromPartial(t))||[],e}};function createBaseStringEvent(){return{type:"",attributes:[]}}const StringEvent={encode(A,e=minimal.Writer.create()){A.type!==""&&e.uint32(10).string(A.type);for(const t of A.attributes)Attribute.encode(t,e.uint32(18).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseStringEvent();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.type=t.string();break;case 2:i.attributes.push(Attribute.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{type:isSet$9(A.type)?String(A.type):"",attributes:Array.isArray(A?.attributes)?A.attributes.map(e=>Attribute.fromJSON(e)):[]}},toJSON(A){const e={};return A.type!==void 0&&(e.type=A.type),A.attributes?e.attributes=A.attributes.map(t=>t?Attribute.toJSON(t):void 0):e.attributes=[],e},fromPartial(A){const e=createBaseStringEvent();return e.type=A.type??"",e.attributes=A.attributes?.map(t=>Attribute.fromPartial(t))||[],e}};function createBaseAttribute(){return{key:"",value:""}}const Attribute={encode(A,e=minimal.Writer.create()){return A.key!==""&&e.uint32(10).string(A.key),A.value!==""&&e.uint32(18).string(A.value),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseAttribute();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.key=t.string();break;case 2:i.value=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{key:isSet$9(A.key)?String(A.key):"",value:isSet$9(A.value)?String(A.value):""}},toJSON(A){const e={};return A.key!==void 0&&(e.key=A.key),A.value!==void 0&&(e.value=A.value),e},fromPartial(A){const e=createBaseAttribute();return e.key=A.key??"",e.value=A.value??"",e}};function createBaseGasInfo(){return{gasWanted:"0",gasUsed:"0"}}const GasInfo={encode(A,e=minimal.Writer.create()){return A.gasWanted!=="0"&&e.uint32(8).uint64(A.gasWanted),A.gasUsed!=="0"&&e.uint32(16).uint64(A.gasUsed),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGasInfo();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.gasWanted=longToString$4(t.uint64());break;case 2:i.gasUsed=longToString$4(t.uint64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{gasWanted:isSet$9(A.gasWanted)?String(A.gasWanted):"0",gasUsed:isSet$9(A.gasUsed)?String(A.gasUsed):"0"}},toJSON(A){const e={};return A.gasWanted!==void 0&&(e.gasWanted=A.gasWanted),A.gasUsed!==void 0&&(e.gasUsed=A.gasUsed),e},fromPartial(A){const e=createBaseGasInfo();return e.gasWanted=A.gasWanted??"0",e.gasUsed=A.gasUsed??"0",e}};function createBaseResult(){return{data:new Uint8Array,log:"",events:[]}}const Result={encode(A,e=minimal.Writer.create()){A.data.length!==0&&e.uint32(10).bytes(A.data),A.log!==""&&e.uint32(18).string(A.log);for(const t of A.events)Event$1.encode(t,e.uint32(26).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseResult();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.data=t.bytes();break;case 2:i.log=t.string();break;case 3:i.events.push(Event$1.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{data:isSet$9(A.data)?bytesFromBase64$5(A.data):new Uint8Array,log:isSet$9(A.log)?String(A.log):"",events:Array.isArray(A?.events)?A.events.map(e=>Event$1.fromJSON(e)):[]}},toJSON(A){const e={};return A.data!==void 0&&(e.data=base64FromBytes$5(A.data!==void 0?A.data:new Uint8Array)),A.log!==void 0&&(e.log=A.log),A.events?e.events=A.events.map(t=>t?Event$1.toJSON(t):void 0):e.events=[],e},fromPartial(A){const e=createBaseResult();return e.data=A.data??new Uint8Array,e.log=A.log??"",e.events=A.events?.map(t=>Event$1.fromPartial(t))||[],e}};var globalThis$7=(()=>{if(typeof globalThis$7<"u")return globalThis$7;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$5=globalThis$7.atob||(A=>globalThis$7.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$5(A){const e=atob$5(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$5=globalThis$7.btoa||(A=>globalThis$7.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$5(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$5(e.join(""))}function longToString$4(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$9(A){return A!=null}function createBaseCompactBitArray(){return{extraBitsStored:0,elems:new Uint8Array}}const CompactBitArray={encode(A,e=minimal.Writer.create()){return A.extraBitsStored!==0&&e.uint32(8).uint32(A.extraBitsStored),A.elems.length!==0&&e.uint32(18).bytes(A.elems),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseCompactBitArray();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.extraBitsStored=t.uint32();break;case 2:i.elems=t.bytes();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{extraBitsStored:isSet$8(A.extraBitsStored)?Number(A.extraBitsStored):0,elems:isSet$8(A.elems)?bytesFromBase64$4(A.elems):new Uint8Array}},toJSON(A){const e={};return A.extraBitsStored!==void 0&&(e.extraBitsStored=Math.round(A.extraBitsStored)),A.elems!==void 0&&(e.elems=base64FromBytes$4(A.elems!==void 0?A.elems:new Uint8Array)),e},fromPartial(A){const e=createBaseCompactBitArray();return e.extraBitsStored=A.extraBitsStored??0,e.elems=A.elems??new Uint8Array,e}};var globalThis$6=(()=>{if(typeof globalThis$6<"u")return globalThis$6;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$4=globalThis$6.atob||(A=>globalThis$6.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$4(A){const e=atob$4(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$4=globalThis$6.btoa||(A=>globalThis$6.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$4(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$4(e.join(""))}function isSet$8(A){return A!=null}var SignMode;(function(A){A[A.SIGN_MODE_UNSPECIFIED=0]="SIGN_MODE_UNSPECIFIED",A[A.SIGN_MODE_DIRECT=1]="SIGN_MODE_DIRECT",A[A.SIGN_MODE_TEXTUAL=2]="SIGN_MODE_TEXTUAL",A[A.SIGN_MODE_LEGACY_AMINO_JSON=127]="SIGN_MODE_LEGACY_AMINO_JSON",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(SignMode||(SignMode={}));function signModeFromJSON(A){switch(A){case 0:case"SIGN_MODE_UNSPECIFIED":return SignMode.SIGN_MODE_UNSPECIFIED;case 1:case"SIGN_MODE_DIRECT":return SignMode.SIGN_MODE_DIRECT;case 2:case"SIGN_MODE_TEXTUAL":return SignMode.SIGN_MODE_TEXTUAL;case 127:case"SIGN_MODE_LEGACY_AMINO_JSON":return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;case-1:case"UNRECOGNIZED":default:return SignMode.UNRECOGNIZED}}function signModeToJSON(A){switch(A){case SignMode.SIGN_MODE_UNSPECIFIED:return"SIGN_MODE_UNSPECIFIED";case SignMode.SIGN_MODE_DIRECT:return"SIGN_MODE_DIRECT";case SignMode.SIGN_MODE_TEXTUAL:return"SIGN_MODE_TEXTUAL";case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:return"SIGN_MODE_LEGACY_AMINO_JSON";case SignMode.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var globalThis$5=(()=>{if(typeof globalThis$5<"u")return globalThis$5;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$5.atob;globalThis$5.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function createBaseTx(){return{body:void 0,authInfo:void 0,signatures:[]}}const Tx={encode(A,e=minimal.Writer.create()){A.body!==void 0&&TxBody.encode(A.body,e.uint32(10).fork()).ldelim(),A.authInfo!==void 0&&AuthInfo.encode(A.authInfo,e.uint32(18).fork()).ldelim();for(const t of A.signatures)e.uint32(26).bytes(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseTx();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.body=TxBody.decode(t,t.uint32());break;case 2:i.authInfo=AuthInfo.decode(t,t.uint32());break;case 3:i.signatures.push(t.bytes());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{body:isSet$7(A.body)?TxBody.fromJSON(A.body):void 0,authInfo:isSet$7(A.authInfo)?AuthInfo.fromJSON(A.authInfo):void 0,signatures:Array.isArray(A?.signatures)?A.signatures.map(e=>bytesFromBase64$3(e)):[]}},toJSON(A){const e={};return A.body!==void 0&&(e.body=A.body?TxBody.toJSON(A.body):void 0),A.authInfo!==void 0&&(e.authInfo=A.authInfo?AuthInfo.toJSON(A.authInfo):void 0),A.signatures?e.signatures=A.signatures.map(t=>base64FromBytes$3(t!==void 0?t:new Uint8Array)):e.signatures=[],e},fromPartial(A){const e=createBaseTx();return e.body=A.body!==void 0&&A.body!==null?TxBody.fromPartial(A.body):void 0,e.authInfo=A.authInfo!==void 0&&A.authInfo!==null?AuthInfo.fromPartial(A.authInfo):void 0,e.signatures=A.signatures?.map(t=>t)||[],e}};function createBaseTxRaw(){return{bodyBytes:new Uint8Array,authInfoBytes:new Uint8Array,signatures:[]}}const TxRaw={encode(A,e=minimal.Writer.create()){A.bodyBytes.length!==0&&e.uint32(10).bytes(A.bodyBytes),A.authInfoBytes.length!==0&&e.uint32(18).bytes(A.authInfoBytes);for(const t of A.signatures)e.uint32(26).bytes(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseTxRaw();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.bodyBytes=t.bytes();break;case 2:i.authInfoBytes=t.bytes();break;case 3:i.signatures.push(t.bytes());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{bodyBytes:isSet$7(A.bodyBytes)?bytesFromBase64$3(A.bodyBytes):new Uint8Array,authInfoBytes:isSet$7(A.authInfoBytes)?bytesFromBase64$3(A.authInfoBytes):new Uint8Array,signatures:Array.isArray(A?.signatures)?A.signatures.map(e=>bytesFromBase64$3(e)):[]}},toJSON(A){const e={};return A.bodyBytes!==void 0&&(e.bodyBytes=base64FromBytes$3(A.bodyBytes!==void 0?A.bodyBytes:new Uint8Array)),A.authInfoBytes!==void 0&&(e.authInfoBytes=base64FromBytes$3(A.authInfoBytes!==void 0?A.authInfoBytes:new Uint8Array)),A.signatures?e.signatures=A.signatures.map(t=>base64FromBytes$3(t!==void 0?t:new Uint8Array)):e.signatures=[],e},fromPartial(A){const e=createBaseTxRaw();return e.bodyBytes=A.bodyBytes??new Uint8Array,e.authInfoBytes=A.authInfoBytes??new Uint8Array,e.signatures=A.signatures?.map(t=>t)||[],e}};function createBaseSignDoc(){return{bodyBytes:new Uint8Array,authInfoBytes:new Uint8Array,chainId:"",accountNumber:"0"}}const SignDoc={encode(A,e=minimal.Writer.create()){return A.bodyBytes.length!==0&&e.uint32(10).bytes(A.bodyBytes),A.authInfoBytes.length!==0&&e.uint32(18).bytes(A.authInfoBytes),A.chainId!==""&&e.uint32(26).string(A.chainId),A.accountNumber!=="0"&&e.uint32(32).uint64(A.accountNumber),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseSignDoc();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.bodyBytes=t.bytes();break;case 2:i.authInfoBytes=t.bytes();break;case 3:i.chainId=t.string();break;case 4:i.accountNumber=longToString$3(t.uint64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{bodyBytes:isSet$7(A.bodyBytes)?bytesFromBase64$3(A.bodyBytes):new Uint8Array,authInfoBytes:isSet$7(A.authInfoBytes)?bytesFromBase64$3(A.authInfoBytes):new Uint8Array,chainId:isSet$7(A.chainId)?String(A.chainId):"",accountNumber:isSet$7(A.accountNumber)?String(A.accountNumber):"0"}},toJSON(A){const e={};return A.bodyBytes!==void 0&&(e.bodyBytes=base64FromBytes$3(A.bodyBytes!==void 0?A.bodyBytes:new Uint8Array)),A.authInfoBytes!==void 0&&(e.authInfoBytes=base64FromBytes$3(A.authInfoBytes!==void 0?A.authInfoBytes:new Uint8Array)),A.chainId!==void 0&&(e.chainId=A.chainId),A.accountNumber!==void 0&&(e.accountNumber=A.accountNumber),e},fromPartial(A){const e=createBaseSignDoc();return e.bodyBytes=A.bodyBytes??new Uint8Array,e.authInfoBytes=A.authInfoBytes??new Uint8Array,e.chainId=A.chainId??"",e.accountNumber=A.accountNumber??"0",e}};function createBaseTxBody(){return{messages:[],memo:"",timeoutHeight:"0",extensionOptions:[],nonCriticalExtensionOptions:[]}}const TxBody={encode(A,e=minimal.Writer.create()){for(const t of A.messages)Any.encode(t,e.uint32(10).fork()).ldelim();A.memo!==""&&e.uint32(18).string(A.memo),A.timeoutHeight!=="0"&&e.uint32(24).uint64(A.timeoutHeight);for(const t of A.extensionOptions)Any.encode(t,e.uint32(8186).fork()).ldelim();for(const t of A.nonCriticalExtensionOptions)Any.encode(t,e.uint32(16378).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseTxBody();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.messages.push(Any.decode(t,t.uint32()));break;case 2:i.memo=t.string();break;case 3:i.timeoutHeight=longToString$3(t.uint64());break;case 1023:i.extensionOptions.push(Any.decode(t,t.uint32()));break;case 2047:i.nonCriticalExtensionOptions.push(Any.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{messages:Array.isArray(A?.messages)?A.messages.map(e=>Any.fromJSON(e)):[],memo:isSet$7(A.memo)?String(A.memo):"",timeoutHeight:isSet$7(A.timeoutHeight)?String(A.timeoutHeight):"0",extensionOptions:Array.isArray(A?.extensionOptions)?A.extensionOptions.map(e=>Any.fromJSON(e)):[],nonCriticalExtensionOptions:Array.isArray(A?.nonCriticalExtensionOptions)?A.nonCriticalExtensionOptions.map(e=>Any.fromJSON(e)):[]}},toJSON(A){const e={};return A.messages?e.messages=A.messages.map(t=>t?Any.toJSON(t):void 0):e.messages=[],A.memo!==void 0&&(e.memo=A.memo),A.timeoutHeight!==void 0&&(e.timeoutHeight=A.timeoutHeight),A.extensionOptions?e.extensionOptions=A.extensionOptions.map(t=>t?Any.toJSON(t):void 0):e.extensionOptions=[],A.nonCriticalExtensionOptions?e.nonCriticalExtensionOptions=A.nonCriticalExtensionOptions.map(t=>t?Any.toJSON(t):void 0):e.nonCriticalExtensionOptions=[],e},fromPartial(A){const e=createBaseTxBody();return e.messages=A.messages?.map(t=>Any.fromPartial(t))||[],e.memo=A.memo??"",e.timeoutHeight=A.timeoutHeight??"0",e.extensionOptions=A.extensionOptions?.map(t=>Any.fromPartial(t))||[],e.nonCriticalExtensionOptions=A.nonCriticalExtensionOptions?.map(t=>Any.fromPartial(t))||[],e}};function createBaseAuthInfo(){return{signerInfos:[],fee:void 0}}const AuthInfo={encode(A,e=minimal.Writer.create()){for(const t of A.signerInfos)SignerInfo.encode(t,e.uint32(10).fork()).ldelim();return A.fee!==void 0&&Fee.encode(A.fee,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseAuthInfo();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.signerInfos.push(SignerInfo.decode(t,t.uint32()));break;case 2:i.fee=Fee.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{signerInfos:Array.isArray(A?.signerInfos)?A.signerInfos.map(e=>SignerInfo.fromJSON(e)):[],fee:isSet$7(A.fee)?Fee.fromJSON(A.fee):void 0}},toJSON(A){const e={};return A.signerInfos?e.signerInfos=A.signerInfos.map(t=>t?SignerInfo.toJSON(t):void 0):e.signerInfos=[],A.fee!==void 0&&(e.fee=A.fee?Fee.toJSON(A.fee):void 0),e},fromPartial(A){const e=createBaseAuthInfo();return e.signerInfos=A.signerInfos?.map(t=>SignerInfo.fromPartial(t))||[],e.fee=A.fee!==void 0&&A.fee!==null?Fee.fromPartial(A.fee):void 0,e}};function createBaseSignerInfo(){return{publicKey:void 0,modeInfo:void 0,sequence:"0"}}const SignerInfo={encode(A,e=minimal.Writer.create()){return A.publicKey!==void 0&&Any.encode(A.publicKey,e.uint32(10).fork()).ldelim(),A.modeInfo!==void 0&&ModeInfo.encode(A.modeInfo,e.uint32(18).fork()).ldelim(),A.sequence!=="0"&&e.uint32(24).uint64(A.sequence),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseSignerInfo();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.publicKey=Any.decode(t,t.uint32());break;case 2:i.modeInfo=ModeInfo.decode(t,t.uint32());break;case 3:i.sequence=longToString$3(t.uint64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{publicKey:isSet$7(A.publicKey)?Any.fromJSON(A.publicKey):void 0,modeInfo:isSet$7(A.modeInfo)?ModeInfo.fromJSON(A.modeInfo):void 0,sequence:isSet$7(A.sequence)?String(A.sequence):"0"}},toJSON(A){const e={};return A.publicKey!==void 0&&(e.publicKey=A.publicKey?Any.toJSON(A.publicKey):void 0),A.modeInfo!==void 0&&(e.modeInfo=A.modeInfo?ModeInfo.toJSON(A.modeInfo):void 0),A.sequence!==void 0&&(e.sequence=A.sequence),e},fromPartial(A){const e=createBaseSignerInfo();return e.publicKey=A.publicKey!==void 0&&A.publicKey!==null?Any.fromPartial(A.publicKey):void 0,e.modeInfo=A.modeInfo!==void 0&&A.modeInfo!==null?ModeInfo.fromPartial(A.modeInfo):void 0,e.sequence=A.sequence??"0",e}};function createBaseModeInfo(){return{single:void 0,multi:void 0}}const ModeInfo={encode(A,e=minimal.Writer.create()){return A.single!==void 0&&ModeInfo_Single.encode(A.single,e.uint32(10).fork()).ldelim(),A.multi!==void 0&&ModeInfo_Multi.encode(A.multi,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseModeInfo();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.single=ModeInfo_Single.decode(t,t.uint32());break;case 2:i.multi=ModeInfo_Multi.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{single:isSet$7(A.single)?ModeInfo_Single.fromJSON(A.single):void 0,multi:isSet$7(A.multi)?ModeInfo_Multi.fromJSON(A.multi):void 0}},toJSON(A){const e={};return A.single!==void 0&&(e.single=A.single?ModeInfo_Single.toJSON(A.single):void 0),A.multi!==void 0&&(e.multi=A.multi?ModeInfo_Multi.toJSON(A.multi):void 0),e},fromPartial(A){const e=createBaseModeInfo();return e.single=A.single!==void 0&&A.single!==null?ModeInfo_Single.fromPartial(A.single):void 0,e.multi=A.multi!==void 0&&A.multi!==null?ModeInfo_Multi.fromPartial(A.multi):void 0,e}};function createBaseModeInfo_Single(){return{mode:0}}const ModeInfo_Single={encode(A,e=minimal.Writer.create()){return A.mode!==0&&e.uint32(8).int32(A.mode),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseModeInfo_Single();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.mode=t.int32();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{mode:isSet$7(A.mode)?signModeFromJSON(A.mode):0}},toJSON(A){const e={};return A.mode!==void 0&&(e.mode=signModeToJSON(A.mode)),e},fromPartial(A){const e=createBaseModeInfo_Single();return e.mode=A.mode??0,e}};function createBaseModeInfo_Multi(){return{bitarray:void 0,modeInfos:[]}}const ModeInfo_Multi={encode(A,e=minimal.Writer.create()){A.bitarray!==void 0&&CompactBitArray.encode(A.bitarray,e.uint32(10).fork()).ldelim();for(const t of A.modeInfos)ModeInfo.encode(t,e.uint32(18).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseModeInfo_Multi();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.bitarray=CompactBitArray.decode(t,t.uint32());break;case 2:i.modeInfos.push(ModeInfo.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{bitarray:isSet$7(A.bitarray)?CompactBitArray.fromJSON(A.bitarray):void 0,modeInfos:Array.isArray(A?.modeInfos)?A.modeInfos.map(e=>ModeInfo.fromJSON(e)):[]}},toJSON(A){const e={};return A.bitarray!==void 0&&(e.bitarray=A.bitarray?CompactBitArray.toJSON(A.bitarray):void 0),A.modeInfos?e.modeInfos=A.modeInfos.map(t=>t?ModeInfo.toJSON(t):void 0):e.modeInfos=[],e},fromPartial(A){const e=createBaseModeInfo_Multi();return e.bitarray=A.bitarray!==void 0&&A.bitarray!==null?CompactBitArray.fromPartial(A.bitarray):void 0,e.modeInfos=A.modeInfos?.map(t=>ModeInfo.fromPartial(t))||[],e}};function createBaseFee(){return{amount:[],gasLimit:"0",payer:"",granter:""}}const Fee={encode(A,e=minimal.Writer.create()){for(const t of A.amount)Coin.encode(t,e.uint32(10).fork()).ldelim();return A.gasLimit!=="0"&&e.uint32(16).uint64(A.gasLimit),A.payer!==""&&e.uint32(26).string(A.payer),A.granter!==""&&e.uint32(34).string(A.granter),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseFee();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.amount.push(Coin.decode(t,t.uint32()));break;case 2:i.gasLimit=longToString$3(t.uint64());break;case 3:i.payer=t.string();break;case 4:i.granter=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{amount:Array.isArray(A?.amount)?A.amount.map(e=>Coin.fromJSON(e)):[],gasLimit:isSet$7(A.gasLimit)?String(A.gasLimit):"0",payer:isSet$7(A.payer)?String(A.payer):"",granter:isSet$7(A.granter)?String(A.granter):""}},toJSON(A){const e={};return A.amount?e.amount=A.amount.map(t=>t?Coin.toJSON(t):void 0):e.amount=[],A.gasLimit!==void 0&&(e.gasLimit=A.gasLimit),A.payer!==void 0&&(e.payer=A.payer),A.granter!==void 0&&(e.granter=A.granter),e},fromPartial(A){const e=createBaseFee();return e.amount=A.amount?.map(t=>Coin.fromPartial(t))||[],e.gasLimit=A.gasLimit??"0",e.payer=A.payer??"",e.granter=A.granter??"",e}};var globalThis$4=(()=>{if(typeof globalThis$4<"u")return globalThis$4;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$3=globalThis$4.atob||(A=>globalThis$4.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$3(A){const e=atob$3(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$3=globalThis$4.btoa||(A=>globalThis$4.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$3(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$3(e.join(""))}function longToString$3(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$7(A){return A!=null}var OrderBy;(function(A){A[A.ORDER_BY_UNSPECIFIED=0]="ORDER_BY_UNSPECIFIED",A[A.ORDER_BY_ASC=1]="ORDER_BY_ASC",A[A.ORDER_BY_DESC=2]="ORDER_BY_DESC",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(OrderBy||(OrderBy={}));function orderByFromJSON(A){switch(A){case 0:case"ORDER_BY_UNSPECIFIED":return OrderBy.ORDER_BY_UNSPECIFIED;case 1:case"ORDER_BY_ASC":return OrderBy.ORDER_BY_ASC;case 2:case"ORDER_BY_DESC":return OrderBy.ORDER_BY_DESC;case-1:case"UNRECOGNIZED":default:return OrderBy.UNRECOGNIZED}}function orderByToJSON(A){switch(A){case OrderBy.ORDER_BY_UNSPECIFIED:return"ORDER_BY_UNSPECIFIED";case OrderBy.ORDER_BY_ASC:return"ORDER_BY_ASC";case OrderBy.ORDER_BY_DESC:return"ORDER_BY_DESC";case OrderBy.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var BroadcastMode;(function(A){A[A.BROADCAST_MODE_UNSPECIFIED=0]="BROADCAST_MODE_UNSPECIFIED",A[A.BROADCAST_MODE_BLOCK=1]="BROADCAST_MODE_BLOCK",A[A.BROADCAST_MODE_SYNC=2]="BROADCAST_MODE_SYNC",A[A.BROADCAST_MODE_ASYNC=3]="BROADCAST_MODE_ASYNC",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(BroadcastMode||(BroadcastMode={}));function broadcastModeFromJSON(A){switch(A){case 0:case"BROADCAST_MODE_UNSPECIFIED":return BroadcastMode.BROADCAST_MODE_UNSPECIFIED;case 1:case"BROADCAST_MODE_BLOCK":return BroadcastMode.BROADCAST_MODE_BLOCK;case 2:case"BROADCAST_MODE_SYNC":return BroadcastMode.BROADCAST_MODE_SYNC;case 3:case"BROADCAST_MODE_ASYNC":return BroadcastMode.BROADCAST_MODE_ASYNC;case-1:case"UNRECOGNIZED":default:return BroadcastMode.UNRECOGNIZED}}function broadcastModeToJSON(A){switch(A){case BroadcastMode.BROADCAST_MODE_UNSPECIFIED:return"BROADCAST_MODE_UNSPECIFIED";case BroadcastMode.BROADCAST_MODE_BLOCK:return"BROADCAST_MODE_BLOCK";case BroadcastMode.BROADCAST_MODE_SYNC:return"BROADCAST_MODE_SYNC";case BroadcastMode.BROADCAST_MODE_ASYNC:return"BROADCAST_MODE_ASYNC";case BroadcastMode.UNRECOGNIZED:default:return"UNRECOGNIZED"}}function createBaseGetTxsEventRequest(){return{events:[],pagination:void 0,orderBy:0}}const GetTxsEventRequest={encode(A,e=minimal.Writer.create()){for(const t of A.events)e.uint32(10).string(t);return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(18).fork()).ldelim(),A.orderBy!==0&&e.uint32(24).int32(A.orderBy),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetTxsEventRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.events.push(t.string());break;case 2:i.pagination=PageRequest.decode(t,t.uint32());break;case 3:i.orderBy=t.int32();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{events:Array.isArray(A?.events)?A.events.map(e=>String(e)):[],pagination:isSet$6(A.pagination)?PageRequest.fromJSON(A.pagination):void 0,orderBy:isSet$6(A.orderBy)?orderByFromJSON(A.orderBy):0}},toJSON(A){const e={};return A.events?e.events=A.events.map(t=>t):e.events=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),A.orderBy!==void 0&&(e.orderBy=orderByToJSON(A.orderBy)),e},fromPartial(A){const e=createBaseGetTxsEventRequest();return e.events=A.events?.map(t=>t)||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e.orderBy=A.orderBy??0,e}};function createBaseGetTxsEventResponse(){return{txs:[],txResponses:[],pagination:void 0}}const GetTxsEventResponse={encode(A,e=minimal.Writer.create()){for(const t of A.txs)Tx.encode(t,e.uint32(10).fork()).ldelim();for(const t of A.txResponses)TxResponse.encode(t,e.uint32(18).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(26).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetTxsEventResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.txs.push(Tx.decode(t,t.uint32()));break;case 2:i.txResponses.push(TxResponse.decode(t,t.uint32()));break;case 3:i.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{txs:Array.isArray(A?.txs)?A.txs.map(e=>Tx.fromJSON(e)):[],txResponses:Array.isArray(A?.txResponses)?A.txResponses.map(e=>TxResponse.fromJSON(e)):[],pagination:isSet$6(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.txs?e.txs=A.txs.map(t=>t?Tx.toJSON(t):void 0):e.txs=[],A.txResponses?e.txResponses=A.txResponses.map(t=>t?TxResponse.toJSON(t):void 0):e.txResponses=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseGetTxsEventResponse();return e.txs=A.txs?.map(t=>Tx.fromPartial(t))||[],e.txResponses=A.txResponses?.map(t=>TxResponse.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseBroadcastTxRequest(){return{txBytes:new Uint8Array,mode:0}}const BroadcastTxRequest={encode(A,e=minimal.Writer.create()){return A.txBytes.length!==0&&e.uint32(10).bytes(A.txBytes),A.mode!==0&&e.uint32(16).int32(A.mode),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseBroadcastTxRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.txBytes=t.bytes();break;case 2:i.mode=t.int32();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{txBytes:isSet$6(A.txBytes)?bytesFromBase64$2(A.txBytes):new Uint8Array,mode:isSet$6(A.mode)?broadcastModeFromJSON(A.mode):0}},toJSON(A){const e={};return A.txBytes!==void 0&&(e.txBytes=base64FromBytes$2(A.txBytes!==void 0?A.txBytes:new Uint8Array)),A.mode!==void 0&&(e.mode=broadcastModeToJSON(A.mode)),e},fromPartial(A){const e=createBaseBroadcastTxRequest();return e.txBytes=A.txBytes??new Uint8Array,e.mode=A.mode??0,e}};function createBaseBroadcastTxResponse(){return{txResponse:void 0}}const BroadcastTxResponse={encode(A,e=minimal.Writer.create()){return A.txResponse!==void 0&&TxResponse.encode(A.txResponse,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseBroadcastTxResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.txResponse=TxResponse.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{txResponse:isSet$6(A.txResponse)?TxResponse.fromJSON(A.txResponse):void 0}},toJSON(A){const e={};return A.txResponse!==void 0&&(e.txResponse=A.txResponse?TxResponse.toJSON(A.txResponse):void 0),e},fromPartial(A){const e=createBaseBroadcastTxResponse();return e.txResponse=A.txResponse!==void 0&&A.txResponse!==null?TxResponse.fromPartial(A.txResponse):void 0,e}};function createBaseSimulateRequest(){return{tx:void 0,txBytes:new Uint8Array}}const SimulateRequest={encode(A,e=minimal.Writer.create()){return A.tx!==void 0&&Tx.encode(A.tx,e.uint32(10).fork()).ldelim(),A.txBytes.length!==0&&e.uint32(18).bytes(A.txBytes),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseSimulateRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.tx=Tx.decode(t,t.uint32());break;case 2:i.txBytes=t.bytes();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{tx:isSet$6(A.tx)?Tx.fromJSON(A.tx):void 0,txBytes:isSet$6(A.txBytes)?bytesFromBase64$2(A.txBytes):new Uint8Array}},toJSON(A){const e={};return A.tx!==void 0&&(e.tx=A.tx?Tx.toJSON(A.tx):void 0),A.txBytes!==void 0&&(e.txBytes=base64FromBytes$2(A.txBytes!==void 0?A.txBytes:new Uint8Array)),e},fromPartial(A){const e=createBaseSimulateRequest();return e.tx=A.tx!==void 0&&A.tx!==null?Tx.fromPartial(A.tx):void 0,e.txBytes=A.txBytes??new Uint8Array,e}};function createBaseSimulateResponse(){return{gasInfo:void 0,result:void 0}}const SimulateResponse={encode(A,e=minimal.Writer.create()){return A.gasInfo!==void 0&&GasInfo.encode(A.gasInfo,e.uint32(10).fork()).ldelim(),A.result!==void 0&&Result.encode(A.result,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseSimulateResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.gasInfo=GasInfo.decode(t,t.uint32());break;case 2:i.result=Result.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{gasInfo:isSet$6(A.gasInfo)?GasInfo.fromJSON(A.gasInfo):void 0,result:isSet$6(A.result)?Result.fromJSON(A.result):void 0}},toJSON(A){const e={};return A.gasInfo!==void 0&&(e.gasInfo=A.gasInfo?GasInfo.toJSON(A.gasInfo):void 0),A.result!==void 0&&(e.result=A.result?Result.toJSON(A.result):void 0),e},fromPartial(A){const e=createBaseSimulateResponse();return e.gasInfo=A.gasInfo!==void 0&&A.gasInfo!==null?GasInfo.fromPartial(A.gasInfo):void 0,e.result=A.result!==void 0&&A.result!==null?Result.fromPartial(A.result):void 0,e}};function createBaseGetTxRequest(){return{hash:""}}const GetTxRequest={encode(A,e=minimal.Writer.create()){return A.hash!==""&&e.uint32(10).string(A.hash),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetTxRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.hash=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{hash:isSet$6(A.hash)?String(A.hash):""}},toJSON(A){const e={};return A.hash!==void 0&&(e.hash=A.hash),e},fromPartial(A){const e=createBaseGetTxRequest();return e.hash=A.hash??"",e}};function createBaseGetTxResponse(){return{tx:void 0,txResponse:void 0}}const GetTxResponse={encode(A,e=minimal.Writer.create()){return A.tx!==void 0&&Tx.encode(A.tx,e.uint32(10).fork()).ldelim(),A.txResponse!==void 0&&TxResponse.encode(A.txResponse,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetTxResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.tx=Tx.decode(t,t.uint32());break;case 2:i.txResponse=TxResponse.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{tx:isSet$6(A.tx)?Tx.fromJSON(A.tx):void 0,txResponse:isSet$6(A.txResponse)?TxResponse.fromJSON(A.txResponse):void 0}},toJSON(A){const e={};return A.tx!==void 0&&(e.tx=A.tx?Tx.toJSON(A.tx):void 0),A.txResponse!==void 0&&(e.txResponse=A.txResponse?TxResponse.toJSON(A.txResponse):void 0),e},fromPartial(A){const e=createBaseGetTxResponse();return e.tx=A.tx!==void 0&&A.tx!==null?Tx.fromPartial(A.tx):void 0,e.txResponse=A.txResponse!==void 0&&A.txResponse!==null?TxResponse.fromPartial(A.txResponse):void 0,e}};class ServiceClientImpl$1{constructor(e){cA(this,"rpc");this.rpc=e,this.simulate=this.simulate.bind(this),this.getTx=this.getTx.bind(this),this.broadcastTx=this.broadcastTx.bind(this),this.getTxsEvent=this.getTxsEvent.bind(this)}simulate(e,t){return this.rpc.unary(ServiceSimulateDesc,SimulateRequest.fromPartial(e),t)}getTx(e,t){return this.rpc.unary(ServiceGetTxDesc,GetTxRequest.fromPartial(e),t)}broadcastTx(e,t){return this.rpc.unary(ServiceBroadcastTxDesc,BroadcastTxRequest.fromPartial(e),t)}getTxsEvent(e,t){return this.rpc.unary(ServiceGetTxsEventDesc,GetTxsEventRequest.fromPartial(e),t)}}const ServiceDesc$1={serviceName:"cosmos.tx.v1beta1.Service"},ServiceSimulateDesc={methodName:"Simulate",service:ServiceDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return SimulateRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...SimulateResponse.decode(A),toObject(){return this}}}}},ServiceGetTxDesc={methodName:"GetTx",service:ServiceDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetTxRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetTxResponse.decode(A),toObject(){return this}}}}},ServiceBroadcastTxDesc={methodName:"BroadcastTx",service:ServiceDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return BroadcastTxRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...BroadcastTxResponse.decode(A),toObject(){return this}}}}},ServiceGetTxsEventDesc={methodName:"GetTxsEvent",service:ServiceDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetTxsEventRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetTxsEventResponse.decode(A),toObject(){return this}}}}};var globalThis$3=(()=>{if(typeof globalThis$3<"u")return globalThis$3;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$2=globalThis$3.atob||(A=>globalThis$3.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$2(A){const e=atob$2(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$2=globalThis$3.btoa||(A=>globalThis$3.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$2(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$2(e.join(""))}function isSet$6(A){return A!=null}function createBaseEvidence(){return{duplicateVoteEvidence:void 0,lightClientAttackEvidence:void 0}}const Evidence={encode(A,e=minimal.Writer.create()){return A.duplicateVoteEvidence!==void 0&&DuplicateVoteEvidence.encode(A.duplicateVoteEvidence,e.uint32(10).fork()).ldelim(),A.lightClientAttackEvidence!==void 0&&LightClientAttackEvidence.encode(A.lightClientAttackEvidence,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseEvidence();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.duplicateVoteEvidence=DuplicateVoteEvidence.decode(t,t.uint32());break;case 2:i.lightClientAttackEvidence=LightClientAttackEvidence.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{duplicateVoteEvidence:isSet$5(A.duplicateVoteEvidence)?DuplicateVoteEvidence.fromJSON(A.duplicateVoteEvidence):void 0,lightClientAttackEvidence:isSet$5(A.lightClientAttackEvidence)?LightClientAttackEvidence.fromJSON(A.lightClientAttackEvidence):void 0}},toJSON(A){const e={};return A.duplicateVoteEvidence!==void 0&&(e.duplicateVoteEvidence=A.duplicateVoteEvidence?DuplicateVoteEvidence.toJSON(A.duplicateVoteEvidence):void 0),A.lightClientAttackEvidence!==void 0&&(e.lightClientAttackEvidence=A.lightClientAttackEvidence?LightClientAttackEvidence.toJSON(A.lightClientAttackEvidence):void 0),e},fromPartial(A){const e=createBaseEvidence();return e.duplicateVoteEvidence=A.duplicateVoteEvidence!==void 0&&A.duplicateVoteEvidence!==null?DuplicateVoteEvidence.fromPartial(A.duplicateVoteEvidence):void 0,e.lightClientAttackEvidence=A.lightClientAttackEvidence!==void 0&&A.lightClientAttackEvidence!==null?LightClientAttackEvidence.fromPartial(A.lightClientAttackEvidence):void 0,e}};function createBaseDuplicateVoteEvidence(){return{voteA:void 0,voteB:void 0,totalVotingPower:"0",validatorPower:"0",timestamp:void 0}}const DuplicateVoteEvidence={encode(A,e=minimal.Writer.create()){return A.voteA!==void 0&&Vote.encode(A.voteA,e.uint32(10).fork()).ldelim(),A.voteB!==void 0&&Vote.encode(A.voteB,e.uint32(18).fork()).ldelim(),A.totalVotingPower!=="0"&&e.uint32(24).int64(A.totalVotingPower),A.validatorPower!=="0"&&e.uint32(32).int64(A.validatorPower),A.timestamp!==void 0&&Timestamp.encode(A.timestamp,e.uint32(42).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseDuplicateVoteEvidence();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.voteA=Vote.decode(t,t.uint32());break;case 2:i.voteB=Vote.decode(t,t.uint32());break;case 3:i.totalVotingPower=longToString$2(t.int64());break;case 4:i.validatorPower=longToString$2(t.int64());break;case 5:i.timestamp=Timestamp.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{voteA:isSet$5(A.voteA)?Vote.fromJSON(A.voteA):void 0,voteB:isSet$5(A.voteB)?Vote.fromJSON(A.voteB):void 0,totalVotingPower:isSet$5(A.totalVotingPower)?String(A.totalVotingPower):"0",validatorPower:isSet$5(A.validatorPower)?String(A.validatorPower):"0",timestamp:isSet$5(A.timestamp)?fromJsonTimestamp(A.timestamp):void 0}},toJSON(A){const e={};return A.voteA!==void 0&&(e.voteA=A.voteA?Vote.toJSON(A.voteA):void 0),A.voteB!==void 0&&(e.voteB=A.voteB?Vote.toJSON(A.voteB):void 0),A.totalVotingPower!==void 0&&(e.totalVotingPower=A.totalVotingPower),A.validatorPower!==void 0&&(e.validatorPower=A.validatorPower),A.timestamp!==void 0&&(e.timestamp=fromTimestamp(A.timestamp).toISOString()),e},fromPartial(A){const e=createBaseDuplicateVoteEvidence();return e.voteA=A.voteA!==void 0&&A.voteA!==null?Vote.fromPartial(A.voteA):void 0,e.voteB=A.voteB!==void 0&&A.voteB!==null?Vote.fromPartial(A.voteB):void 0,e.totalVotingPower=A.totalVotingPower??"0",e.validatorPower=A.validatorPower??"0",e.timestamp=A.timestamp!==void 0&&A.timestamp!==null?Timestamp.fromPartial(A.timestamp):void 0,e}};function createBaseLightClientAttackEvidence(){return{conflictingBlock:void 0,commonHeight:"0",byzantineValidators:[],totalVotingPower:"0",timestamp:void 0}}const LightClientAttackEvidence={encode(A,e=minimal.Writer.create()){A.conflictingBlock!==void 0&&LightBlock.encode(A.conflictingBlock,e.uint32(10).fork()).ldelim(),A.commonHeight!=="0"&&e.uint32(16).int64(A.commonHeight);for(const t of A.byzantineValidators)Validator$1.encode(t,e.uint32(26).fork()).ldelim();return A.totalVotingPower!=="0"&&e.uint32(32).int64(A.totalVotingPower),A.timestamp!==void 0&&Timestamp.encode(A.timestamp,e.uint32(42).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseLightClientAttackEvidence();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.conflictingBlock=LightBlock.decode(t,t.uint32());break;case 2:i.commonHeight=longToString$2(t.int64());break;case 3:i.byzantineValidators.push(Validator$1.decode(t,t.uint32()));break;case 4:i.totalVotingPower=longToString$2(t.int64());break;case 5:i.timestamp=Timestamp.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{conflictingBlock:isSet$5(A.conflictingBlock)?LightBlock.fromJSON(A.conflictingBlock):void 0,commonHeight:isSet$5(A.commonHeight)?String(A.commonHeight):"0",byzantineValidators:Array.isArray(A?.byzantineValidators)?A.byzantineValidators.map(e=>Validator$1.fromJSON(e)):[],totalVotingPower:isSet$5(A.totalVotingPower)?String(A.totalVotingPower):"0",timestamp:isSet$5(A.timestamp)?fromJsonTimestamp(A.timestamp):void 0}},toJSON(A){const e={};return A.conflictingBlock!==void 0&&(e.conflictingBlock=A.conflictingBlock?LightBlock.toJSON(A.conflictingBlock):void 0),A.commonHeight!==void 0&&(e.commonHeight=A.commonHeight),A.byzantineValidators?e.byzantineValidators=A.byzantineValidators.map(t=>t?Validator$1.toJSON(t):void 0):e.byzantineValidators=[],A.totalVotingPower!==void 0&&(e.totalVotingPower=A.totalVotingPower),A.timestamp!==void 0&&(e.timestamp=fromTimestamp(A.timestamp).toISOString()),e},fromPartial(A){const e=createBaseLightClientAttackEvidence();return e.conflictingBlock=A.conflictingBlock!==void 0&&A.conflictingBlock!==null?LightBlock.fromPartial(A.conflictingBlock):void 0,e.commonHeight=A.commonHeight??"0",e.byzantineValidators=A.byzantineValidators?.map(t=>Validator$1.fromPartial(t))||[],e.totalVotingPower=A.totalVotingPower??"0",e.timestamp=A.timestamp!==void 0&&A.timestamp!==null?Timestamp.fromPartial(A.timestamp):void 0,e}};function createBaseEvidenceList(){return{evidence:[]}}const EvidenceList={encode(A,e=minimal.Writer.create()){for(const t of A.evidence)Evidence.encode(t,e.uint32(10).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseEvidenceList();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.evidence.push(Evidence.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{evidence:Array.isArray(A?.evidence)?A.evidence.map(e=>Evidence.fromJSON(e)):[]}},toJSON(A){const e={};return A.evidence?e.evidence=A.evidence.map(t=>t?Evidence.toJSON(t):void 0):e.evidence=[],e},fromPartial(A){const e=createBaseEvidenceList();return e.evidence=A.evidence?.map(t=>Evidence.fromPartial(t))||[],e}};function toTimestamp(A){const e=Math.trunc(A.getTime()/1e3).toString(),t=A.getTime()%1e3*1e6;return{seconds:e,nanos:t}}function fromTimestamp(A){let e=Number(A.seconds)*1e3;return e+=A.nanos/1e6,new Date(e)}function fromJsonTimestamp(A){return A instanceof Date?toTimestamp(A):typeof A=="string"?toTimestamp(new Date(A)):Timestamp.fromJSON(A)}function longToString$2(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$5(A){return A!=null}function createBaseBlock(){return{header:void 0,data:void 0,evidence:void 0,lastCommit:void 0}}const Block={encode(A,e=minimal.Writer.create()){return A.header!==void 0&&Header$1.encode(A.header,e.uint32(10).fork()).ldelim(),A.data!==void 0&&Data.encode(A.data,e.uint32(18).fork()).ldelim(),A.evidence!==void 0&&EvidenceList.encode(A.evidence,e.uint32(26).fork()).ldelim(),A.lastCommit!==void 0&&Commit.encode(A.lastCommit,e.uint32(34).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseBlock();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.header=Header$1.decode(t,t.uint32());break;case 2:i.data=Data.decode(t,t.uint32());break;case 3:i.evidence=EvidenceList.decode(t,t.uint32());break;case 4:i.lastCommit=Commit.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{header:isSet$4(A.header)?Header$1.fromJSON(A.header):void 0,data:isSet$4(A.data)?Data.fromJSON(A.data):void 0,evidence:isSet$4(A.evidence)?EvidenceList.fromJSON(A.evidence):void 0,lastCommit:isSet$4(A.lastCommit)?Commit.fromJSON(A.lastCommit):void 0}},toJSON(A){const e={};return A.header!==void 0&&(e.header=A.header?Header$1.toJSON(A.header):void 0),A.data!==void 0&&(e.data=A.data?Data.toJSON(A.data):void 0),A.evidence!==void 0&&(e.evidence=A.evidence?EvidenceList.toJSON(A.evidence):void 0),A.lastCommit!==void 0&&(e.lastCommit=A.lastCommit?Commit.toJSON(A.lastCommit):void 0),e},fromPartial(A){const e=createBaseBlock();return e.header=A.header!==void 0&&A.header!==null?Header$1.fromPartial(A.header):void 0,e.data=A.data!==void 0&&A.data!==null?Data.fromPartial(A.data):void 0,e.evidence=A.evidence!==void 0&&A.evidence!==null?EvidenceList.fromPartial(A.evidence):void 0,e.lastCommit=A.lastCommit!==void 0&&A.lastCommit!==null?Commit.fromPartial(A.lastCommit):void 0,e}};function isSet$4(A){return A!=null}function createBaseProtocolVersion(){return{p2p:"0",block:"0",app:"0"}}const ProtocolVersion={encode(A,e=minimal.Writer.create()){return A.p2p!=="0"&&e.uint32(8).uint64(A.p2p),A.block!=="0"&&e.uint32(16).uint64(A.block),A.app!=="0"&&e.uint32(24).uint64(A.app),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseProtocolVersion();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.p2p=longToString$1(t.uint64());break;case 2:i.block=longToString$1(t.uint64());break;case 3:i.app=longToString$1(t.uint64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{p2p:isSet$3(A.p2p)?String(A.p2p):"0",block:isSet$3(A.block)?String(A.block):"0",app:isSet$3(A.app)?String(A.app):"0"}},toJSON(A){const e={};return A.p2p!==void 0&&(e.p2p=A.p2p),A.block!==void 0&&(e.block=A.block),A.app!==void 0&&(e.app=A.app),e},fromPartial(A){const e=createBaseProtocolVersion();return e.p2p=A.p2p??"0",e.block=A.block??"0",e.app=A.app??"0",e}};function createBaseDefaultNodeInfo(){return{protocolVersion:void 0,defaultNodeId:"",listenAddr:"",network:"",version:"",channels:new Uint8Array,moniker:"",other:void 0}}const DefaultNodeInfo={encode(A,e=minimal.Writer.create()){return A.protocolVersion!==void 0&&ProtocolVersion.encode(A.protocolVersion,e.uint32(10).fork()).ldelim(),A.defaultNodeId!==""&&e.uint32(18).string(A.defaultNodeId),A.listenAddr!==""&&e.uint32(26).string(A.listenAddr),A.network!==""&&e.uint32(34).string(A.network),A.version!==""&&e.uint32(42).string(A.version),A.channels.length!==0&&e.uint32(50).bytes(A.channels),A.moniker!==""&&e.uint32(58).string(A.moniker),A.other!==void 0&&DefaultNodeInfoOther.encode(A.other,e.uint32(66).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseDefaultNodeInfo();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.protocolVersion=ProtocolVersion.decode(t,t.uint32());break;case 2:i.defaultNodeId=t.string();break;case 3:i.listenAddr=t.string();break;case 4:i.network=t.string();break;case 5:i.version=t.string();break;case 6:i.channels=t.bytes();break;case 7:i.moniker=t.string();break;case 8:i.other=DefaultNodeInfoOther.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{protocolVersion:isSet$3(A.protocolVersion)?ProtocolVersion.fromJSON(A.protocolVersion):void 0,defaultNodeId:isSet$3(A.defaultNodeId)?String(A.defaultNodeId):"",listenAddr:isSet$3(A.listenAddr)?String(A.listenAddr):"",network:isSet$3(A.network)?String(A.network):"",version:isSet$3(A.version)?String(A.version):"",channels:isSet$3(A.channels)?bytesFromBase64$1(A.channels):new Uint8Array,moniker:isSet$3(A.moniker)?String(A.moniker):"",other:isSet$3(A.other)?DefaultNodeInfoOther.fromJSON(A.other):void 0}},toJSON(A){const e={};return A.protocolVersion!==void 0&&(e.protocolVersion=A.protocolVersion?ProtocolVersion.toJSON(A.protocolVersion):void 0),A.defaultNodeId!==void 0&&(e.defaultNodeId=A.defaultNodeId),A.listenAddr!==void 0&&(e.listenAddr=A.listenAddr),A.network!==void 0&&(e.network=A.network),A.version!==void 0&&(e.version=A.version),A.channels!==void 0&&(e.channels=base64FromBytes$1(A.channels!==void 0?A.channels:new Uint8Array)),A.moniker!==void 0&&(e.moniker=A.moniker),A.other!==void 0&&(e.other=A.other?DefaultNodeInfoOther.toJSON(A.other):void 0),e},fromPartial(A){const e=createBaseDefaultNodeInfo();return e.protocolVersion=A.protocolVersion!==void 0&&A.protocolVersion!==null?ProtocolVersion.fromPartial(A.protocolVersion):void 0,e.defaultNodeId=A.defaultNodeId??"",e.listenAddr=A.listenAddr??"",e.network=A.network??"",e.version=A.version??"",e.channels=A.channels??new Uint8Array,e.moniker=A.moniker??"",e.other=A.other!==void 0&&A.other!==null?DefaultNodeInfoOther.fromPartial(A.other):void 0,e}};function createBaseDefaultNodeInfoOther(){return{txIndex:"",rpcAddress:""}}const DefaultNodeInfoOther={encode(A,e=minimal.Writer.create()){return A.txIndex!==""&&e.uint32(10).string(A.txIndex),A.rpcAddress!==""&&e.uint32(18).string(A.rpcAddress),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseDefaultNodeInfoOther();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.txIndex=t.string();break;case 2:i.rpcAddress=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{txIndex:isSet$3(A.txIndex)?String(A.txIndex):"",rpcAddress:isSet$3(A.rpcAddress)?String(A.rpcAddress):""}},toJSON(A){const e={};return A.txIndex!==void 0&&(e.txIndex=A.txIndex),A.rpcAddress!==void 0&&(e.rpcAddress=A.rpcAddress),e},fromPartial(A){const e=createBaseDefaultNodeInfoOther();return e.txIndex=A.txIndex??"",e.rpcAddress=A.rpcAddress??"",e}};var globalThis$2=(()=>{if(typeof globalThis$2<"u")return globalThis$2;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$1=globalThis$2.atob||(A=>globalThis$2.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$1(A){const e=atob$1(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa$1=globalThis$2.btoa||(A=>globalThis$2.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$1(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$1(e.join(""))}function longToString$1(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$3(A){return A!=null}function createBaseGetValidatorSetByHeightRequest(){return{height:"0",pagination:void 0}}const GetValidatorSetByHeightRequest={encode(A,e=minimal.Writer.create()){return A.height!=="0"&&e.uint32(8).int64(A.height),A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetValidatorSetByHeightRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.height=longToString(t.int64());break;case 2:i.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{height:isSet$2(A.height)?String(A.height):"0",pagination:isSet$2(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.height!==void 0&&(e.height=A.height),A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseGetValidatorSetByHeightRequest();return e.height=A.height??"0",e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseGetValidatorSetByHeightResponse(){return{blockHeight:"0",validators:[],pagination:void 0}}const GetValidatorSetByHeightResponse={encode(A,e=minimal.Writer.create()){A.blockHeight!=="0"&&e.uint32(8).int64(A.blockHeight);for(const t of A.validators)Validator.encode(t,e.uint32(18).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(26).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetValidatorSetByHeightResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.blockHeight=longToString(t.int64());break;case 2:i.validators.push(Validator.decode(t,t.uint32()));break;case 3:i.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{blockHeight:isSet$2(A.blockHeight)?String(A.blockHeight):"0",validators:Array.isArray(A?.validators)?A.validators.map(e=>Validator.fromJSON(e)):[],pagination:isSet$2(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.blockHeight!==void 0&&(e.blockHeight=A.blockHeight),A.validators?e.validators=A.validators.map(t=>t?Validator.toJSON(t):void 0):e.validators=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseGetValidatorSetByHeightResponse();return e.blockHeight=A.blockHeight??"0",e.validators=A.validators?.map(t=>Validator.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseGetLatestValidatorSetRequest(){return{pagination:void 0}}const GetLatestValidatorSetRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetLatestValidatorSetRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{pagination:isSet$2(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseGetLatestValidatorSetRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseGetLatestValidatorSetResponse(){return{blockHeight:"0",validators:[],pagination:void 0}}const GetLatestValidatorSetResponse={encode(A,e=minimal.Writer.create()){A.blockHeight!=="0"&&e.uint32(8).int64(A.blockHeight);for(const t of A.validators)Validator.encode(t,e.uint32(18).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(26).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetLatestValidatorSetResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.blockHeight=longToString(t.int64());break;case 2:i.validators.push(Validator.decode(t,t.uint32()));break;case 3:i.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{blockHeight:isSet$2(A.blockHeight)?String(A.blockHeight):"0",validators:Array.isArray(A?.validators)?A.validators.map(e=>Validator.fromJSON(e)):[],pagination:isSet$2(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.blockHeight!==void 0&&(e.blockHeight=A.blockHeight),A.validators?e.validators=A.validators.map(t=>t?Validator.toJSON(t):void 0):e.validators=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseGetLatestValidatorSetResponse();return e.blockHeight=A.blockHeight??"0",e.validators=A.validators?.map(t=>Validator.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseValidator(){return{address:"",pubKey:void 0,votingPower:"0",proposerPriority:"0"}}const Validator={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.pubKey!==void 0&&Any.encode(A.pubKey,e.uint32(18).fork()).ldelim(),A.votingPower!=="0"&&e.uint32(24).int64(A.votingPower),A.proposerPriority!=="0"&&e.uint32(32).int64(A.proposerPriority),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseValidator();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.address=t.string();break;case 2:i.pubKey=Any.decode(t,t.uint32());break;case 3:i.votingPower=longToString(t.int64());break;case 4:i.proposerPriority=longToString(t.int64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{address:isSet$2(A.address)?String(A.address):"",pubKey:isSet$2(A.pubKey)?Any.fromJSON(A.pubKey):void 0,votingPower:isSet$2(A.votingPower)?String(A.votingPower):"0",proposerPriority:isSet$2(A.proposerPriority)?String(A.proposerPriority):"0"}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.pubKey!==void 0&&(e.pubKey=A.pubKey?Any.toJSON(A.pubKey):void 0),A.votingPower!==void 0&&(e.votingPower=A.votingPower),A.proposerPriority!==void 0&&(e.proposerPriority=A.proposerPriority),e},fromPartial(A){const e=createBaseValidator();return e.address=A.address??"",e.pubKey=A.pubKey!==void 0&&A.pubKey!==null?Any.fromPartial(A.pubKey):void 0,e.votingPower=A.votingPower??"0",e.proposerPriority=A.proposerPriority??"0",e}};function createBaseGetBlockByHeightRequest(){return{height:"0"}}const GetBlockByHeightRequest={encode(A,e=minimal.Writer.create()){return A.height!=="0"&&e.uint32(8).int64(A.height),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetBlockByHeightRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.height=longToString(t.int64());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{height:isSet$2(A.height)?String(A.height):"0"}},toJSON(A){const e={};return A.height!==void 0&&(e.height=A.height),e},fromPartial(A){const e=createBaseGetBlockByHeightRequest();return e.height=A.height??"0",e}};function createBaseGetBlockByHeightResponse(){return{blockId:void 0,block:void 0}}const GetBlockByHeightResponse={encode(A,e=minimal.Writer.create()){return A.blockId!==void 0&&BlockID.encode(A.blockId,e.uint32(10).fork()).ldelim(),A.block!==void 0&&Block.encode(A.block,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetBlockByHeightResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.blockId=BlockID.decode(t,t.uint32());break;case 2:i.block=Block.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{blockId:isSet$2(A.blockId)?BlockID.fromJSON(A.blockId):void 0,block:isSet$2(A.block)?Block.fromJSON(A.block):void 0}},toJSON(A){const e={};return A.blockId!==void 0&&(e.blockId=A.blockId?BlockID.toJSON(A.blockId):void 0),A.block!==void 0&&(e.block=A.block?Block.toJSON(A.block):void 0),e},fromPartial(A){const e=createBaseGetBlockByHeightResponse();return e.blockId=A.blockId!==void 0&&A.blockId!==null?BlockID.fromPartial(A.blockId):void 0,e.block=A.block!==void 0&&A.block!==null?Block.fromPartial(A.block):void 0,e}};function createBaseGetLatestBlockRequest(){return{}}const GetLatestBlockRequest={encode(A,e=minimal.Writer.create()){return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetLatestBlockRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){default:t.skipType(o&7);break}}return i},fromJSON(A){return{}},toJSON(A){return{}},fromPartial(A){return createBaseGetLatestBlockRequest()}};function createBaseGetLatestBlockResponse(){return{blockId:void 0,block:void 0}}const GetLatestBlockResponse={encode(A,e=minimal.Writer.create()){return A.blockId!==void 0&&BlockID.encode(A.blockId,e.uint32(10).fork()).ldelim(),A.block!==void 0&&Block.encode(A.block,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetLatestBlockResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.blockId=BlockID.decode(t,t.uint32());break;case 2:i.block=Block.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{blockId:isSet$2(A.blockId)?BlockID.fromJSON(A.blockId):void 0,block:isSet$2(A.block)?Block.fromJSON(A.block):void 0}},toJSON(A){const e={};return A.blockId!==void 0&&(e.blockId=A.blockId?BlockID.toJSON(A.blockId):void 0),A.block!==void 0&&(e.block=A.block?Block.toJSON(A.block):void 0),e},fromPartial(A){const e=createBaseGetLatestBlockResponse();return e.blockId=A.blockId!==void 0&&A.blockId!==null?BlockID.fromPartial(A.blockId):void 0,e.block=A.block!==void 0&&A.block!==null?Block.fromPartial(A.block):void 0,e}};function createBaseGetSyncingRequest(){return{}}const GetSyncingRequest={encode(A,e=minimal.Writer.create()){return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetSyncingRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){default:t.skipType(o&7);break}}return i},fromJSON(A){return{}},toJSON(A){return{}},fromPartial(A){return createBaseGetSyncingRequest()}};function createBaseGetSyncingResponse(){return{syncing:!1}}const GetSyncingResponse={encode(A,e=minimal.Writer.create()){return A.syncing===!0&&e.uint32(8).bool(A.syncing),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetSyncingResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.syncing=t.bool();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{syncing:isSet$2(A.syncing)?Boolean(A.syncing):!1}},toJSON(A){const e={};return A.syncing!==void 0&&(e.syncing=A.syncing),e},fromPartial(A){const e=createBaseGetSyncingResponse();return e.syncing=A.syncing??!1,e}};function createBaseGetNodeInfoRequest(){return{}}const GetNodeInfoRequest={encode(A,e=minimal.Writer.create()){return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetNodeInfoRequest();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){default:t.skipType(o&7);break}}return i},fromJSON(A){return{}},toJSON(A){return{}},fromPartial(A){return createBaseGetNodeInfoRequest()}};function createBaseGetNodeInfoResponse(){return{defaultNodeInfo:void 0,applicationVersion:void 0}}const GetNodeInfoResponse={encode(A,e=minimal.Writer.create()){return A.defaultNodeInfo!==void 0&&DefaultNodeInfo.encode(A.defaultNodeInfo,e.uint32(10).fork()).ldelim(),A.applicationVersion!==void 0&&VersionInfo.encode(A.applicationVersion,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseGetNodeInfoResponse();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.defaultNodeInfo=DefaultNodeInfo.decode(t,t.uint32());break;case 2:i.applicationVersion=VersionInfo.decode(t,t.uint32());break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{defaultNodeInfo:isSet$2(A.defaultNodeInfo)?DefaultNodeInfo.fromJSON(A.defaultNodeInfo):void 0,applicationVersion:isSet$2(A.applicationVersion)?VersionInfo.fromJSON(A.applicationVersion):void 0}},toJSON(A){const e={};return A.defaultNodeInfo!==void 0&&(e.defaultNodeInfo=A.defaultNodeInfo?DefaultNodeInfo.toJSON(A.defaultNodeInfo):void 0),A.applicationVersion!==void 0&&(e.applicationVersion=A.applicationVersion?VersionInfo.toJSON(A.applicationVersion):void 0),e},fromPartial(A){const e=createBaseGetNodeInfoResponse();return e.defaultNodeInfo=A.defaultNodeInfo!==void 0&&A.defaultNodeInfo!==null?DefaultNodeInfo.fromPartial(A.defaultNodeInfo):void 0,e.applicationVersion=A.applicationVersion!==void 0&&A.applicationVersion!==null?VersionInfo.fromPartial(A.applicationVersion):void 0,e}};function createBaseVersionInfo(){return{name:"",appName:"",version:"",gitCommit:"",buildTags:"",goVersion:"",buildDeps:[],cosmosSdkVersion:""}}const VersionInfo={encode(A,e=minimal.Writer.create()){A.name!==""&&e.uint32(10).string(A.name),A.appName!==""&&e.uint32(18).string(A.appName),A.version!==""&&e.uint32(26).string(A.version),A.gitCommit!==""&&e.uint32(34).string(A.gitCommit),A.buildTags!==""&&e.uint32(42).string(A.buildTags),A.goVersion!==""&&e.uint32(50).string(A.goVersion);for(const t of A.buildDeps)Module.encode(t,e.uint32(58).fork()).ldelim();return A.cosmosSdkVersion!==""&&e.uint32(66).string(A.cosmosSdkVersion),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseVersionInfo();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.name=t.string();break;case 2:i.appName=t.string();break;case 3:i.version=t.string();break;case 4:i.gitCommit=t.string();break;case 5:i.buildTags=t.string();break;case 6:i.goVersion=t.string();break;case 7:i.buildDeps.push(Module.decode(t,t.uint32()));break;case 8:i.cosmosSdkVersion=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{name:isSet$2(A.name)?String(A.name):"",appName:isSet$2(A.appName)?String(A.appName):"",version:isSet$2(A.version)?String(A.version):"",gitCommit:isSet$2(A.gitCommit)?String(A.gitCommit):"",buildTags:isSet$2(A.buildTags)?String(A.buildTags):"",goVersion:isSet$2(A.goVersion)?String(A.goVersion):"",buildDeps:Array.isArray(A?.buildDeps)?A.buildDeps.map(e=>Module.fromJSON(e)):[],cosmosSdkVersion:isSet$2(A.cosmosSdkVersion)?String(A.cosmosSdkVersion):""}},toJSON(A){const e={};return A.name!==void 0&&(e.name=A.name),A.appName!==void 0&&(e.appName=A.appName),A.version!==void 0&&(e.version=A.version),A.gitCommit!==void 0&&(e.gitCommit=A.gitCommit),A.buildTags!==void 0&&(e.buildTags=A.buildTags),A.goVersion!==void 0&&(e.goVersion=A.goVersion),A.buildDeps?e.buildDeps=A.buildDeps.map(t=>t?Module.toJSON(t):void 0):e.buildDeps=[],A.cosmosSdkVersion!==void 0&&(e.cosmosSdkVersion=A.cosmosSdkVersion),e},fromPartial(A){const e=createBaseVersionInfo();return e.name=A.name??"",e.appName=A.appName??"",e.version=A.version??"",e.gitCommit=A.gitCommit??"",e.buildTags=A.buildTags??"",e.goVersion=A.goVersion??"",e.buildDeps=A.buildDeps?.map(t=>Module.fromPartial(t))||[],e.cosmosSdkVersion=A.cosmosSdkVersion??"",e}};function createBaseModule(){return{path:"",version:"",sum:""}}const Module={encode(A,e=minimal.Writer.create()){return A.path!==""&&e.uint32(10).string(A.path),A.version!==""&&e.uint32(18).string(A.version),A.sum!==""&&e.uint32(26).string(A.sum),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseModule();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.path=t.string();break;case 2:i.version=t.string();break;case 3:i.sum=t.string();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{path:isSet$2(A.path)?String(A.path):"",version:isSet$2(A.version)?String(A.version):"",sum:isSet$2(A.sum)?String(A.sum):""}},toJSON(A){const e={};return A.path!==void 0&&(e.path=A.path),A.version!==void 0&&(e.version=A.version),A.sum!==void 0&&(e.sum=A.sum),e},fromPartial(A){const e=createBaseModule();return e.path=A.path??"",e.version=A.version??"",e.sum=A.sum??"",e}};class ServiceClientImpl{constructor(e){cA(this,"rpc");this.rpc=e,this.getNodeInfo=this.getNodeInfo.bind(this),this.getSyncing=this.getSyncing.bind(this),this.getLatestBlock=this.getLatestBlock.bind(this),this.getBlockByHeight=this.getBlockByHeight.bind(this),this.getLatestValidatorSet=this.getLatestValidatorSet.bind(this),this.getValidatorSetByHeight=this.getValidatorSetByHeight.bind(this)}getNodeInfo(e,t){return this.rpc.unary(ServiceGetNodeInfoDesc,GetNodeInfoRequest.fromPartial(e),t)}getSyncing(e,t){return this.rpc.unary(ServiceGetSyncingDesc,GetSyncingRequest.fromPartial(e),t)}getLatestBlock(e,t){return this.rpc.unary(ServiceGetLatestBlockDesc,GetLatestBlockRequest.fromPartial(e),t)}getBlockByHeight(e,t){return this.rpc.unary(ServiceGetBlockByHeightDesc,GetBlockByHeightRequest.fromPartial(e),t)}getLatestValidatorSet(e,t){return this.rpc.unary(ServiceGetLatestValidatorSetDesc,GetLatestValidatorSetRequest.fromPartial(e),t)}getValidatorSetByHeight(e,t){return this.rpc.unary(ServiceGetValidatorSetByHeightDesc,GetValidatorSetByHeightRequest.fromPartial(e),t)}}const ServiceDesc={serviceName:"cosmos.base.tendermint.v1beta1.Service"},ServiceGetNodeInfoDesc={methodName:"GetNodeInfo",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetNodeInfoRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetNodeInfoResponse.decode(A),toObject(){return this}}}}},ServiceGetSyncingDesc={methodName:"GetSyncing",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetSyncingRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetSyncingResponse.decode(A),toObject(){return this}}}}},ServiceGetLatestBlockDesc={methodName:"GetLatestBlock",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetLatestBlockRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetLatestBlockResponse.decode(A),toObject(){return this}}}}},ServiceGetBlockByHeightDesc={methodName:"GetBlockByHeight",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetBlockByHeightRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetBlockByHeightResponse.decode(A),toObject(){return this}}}}},ServiceGetLatestValidatorSetDesc={methodName:"GetLatestValidatorSet",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetLatestValidatorSetRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetLatestValidatorSetResponse.decode(A),toObject(){return this}}}}},ServiceGetValidatorSetByHeightDesc={methodName:"GetValidatorSetByHeight",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetValidatorSetByHeightRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetValidatorSetByHeightResponse.decode(A),toObject(){return this}}}}};function longToString(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$2(A){return A!=null}function createBaseMsgSend(){return{fromAddress:"",toAddress:"",amount:[]}}const MsgSend={encode(A,e=minimal.Writer.create()){A.fromAddress!==""&&e.uint32(10).string(A.fromAddress),A.toAddress!==""&&e.uint32(18).string(A.toAddress);for(const t of A.amount)Coin.encode(t,e.uint32(26).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBaseMsgSend();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.fromAddress=t.string();break;case 2:i.toAddress=t.string();break;case 3:i.amount.push(Coin.decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{fromAddress:isSet$1(A.fromAddress)?String(A.fromAddress):"",toAddress:isSet$1(A.toAddress)?String(A.toAddress):"",amount:Array.isArray(A?.amount)?A.amount.map(e=>Coin.fromJSON(e)):[]}},toJSON(A){const e={};return A.fromAddress!==void 0&&(e.fromAddress=A.fromAddress),A.toAddress!==void 0&&(e.toAddress=A.toAddress),A.amount?e.amount=A.amount.map(t=>t?Coin.toJSON(t):void 0):e.amount=[],e},fromPartial(A){const e=createBaseMsgSend();return e.fromAddress=A.fromAddress??"",e.toAddress=A.toAddress??"",e.amount=A.amount?.map(t=>Coin.fromPartial(t))||[],e}};function isSet$1(A){return A!=null}function createBasePubKey(){return{key:new Uint8Array}}const PubKey={encode(A,e=minimal.Writer.create()){return A.key.length!==0&&e.uint32(10).bytes(A.key),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let n=e===void 0?t.len:t.pos+e;const i=createBasePubKey();for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.key=t.bytes();break;default:t.skipType(o&7);break}}return i},fromJSON(A){return{key:isSet(A.key)?bytesFromBase64(A.key):new Uint8Array}},toJSON(A){const e={};return A.key!==void 0&&(e.key=base64FromBytes(A.key!==void 0?A.key:new Uint8Array)),e},fromPartial(A){const e=createBasePubKey();return e.key=A.key??new Uint8Array,e}};var globalThis$1=(()=>{if(typeof globalThis$1<"u")return globalThis$1;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob=globalThis$1.atob||(A=>globalThis$1.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64(A){const e=atob(A),t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}const btoa=globalThis$1.btoa||(A=>globalThis$1.Buffer.from(A,"binary").toString("base64"));function base64FromBytes(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa(e.join(""))}function isSet(A){return A!=null}async function fetch_derived(A,e,t=256,n=new Uint8Array(0)){return new Uint8Array(await crypto.subtle.deriveBits({name:"HKDF",hash:"SHA-256",salt:e,info:n},A,t))}async function generate_pair(A,e,t=256){const n=crypto.getRandomValues(new Uint8Array(t>>3)),i=await crypto.subtle.importKey("raw",n,{name:"HKDF",hash:"SHA-256"},!1,["deriveBits"]);zero_out(n);const o=new SensitiveBytes(await fetch_derived(i,e,t)),r=new SensitiveBytes(await A()),a=r.xor(o);return r.wipe(),o.wipe(),[i,a]}const hm_privates$1=new Map;class RuntimeKey{static async create(e,t=256){const n=new RuntimeKey,i=hm_privates$1.get(n),[o,r]=await generate_pair(e,i.atu8_salt,t);return Object.assign(i,{dk_base:o,kn_xor:r}),n}static async createRaw(e,t=256){return RuntimeKey.create(()=>e,t)}constructor(){const e=crypto.getRandomValues(new Uint8Array(32));hm_privates$1.set(this,{atu8_salt:e,kn_xor:null,dk_base:null})}async access(e){const t=hm_privates$1.get(this),{dk_base:n,atu8_salt:i,kn_xor:o}=t;let r,a;const[g,I]=await generate_pair(()=>new Promise(async s=>{const c=new SensitiveBytes(await fetch_derived(n,i,256)),B=o.xor(c);c.wipe();try{r=e(B.data)}catch(d){a=d}s(B.data),queueMicrotask(()=>{B.wipe()})}),i);if(t.dk_base=g,t.kn_xor=I,a)throw a;return r}destroy(){const{atu8_salt:e,kn_xor:t}=hm_privates$1.get(this);t?.wipe(),zero_out(e),hm_privates$1.delete(this)}}class SensitiveBigUint extends SensitiveBytes{static random(e){return new SensitiveBigUint(crypto.getRandomValues(new Uint8Array(e)))}static empty(e=0){return new SensitiveBigUint(new Uint8Array(e))}static max(e,t){return e.gte(t)?e.clone():t.clone()}static min(e,t){return e.lte(t)?e.clone():t.clone()}clone(){return new SensitiveBigUint(Uint8Array.from(this.data))}compare(e){const t=this.data,n=t.byteLength,i=e.data;if(i.byteLength!==n)throw this.wipe(),e.wipe(),new Error("Refusing to compare buffers of different byte length");for(let r=0;r<n;r++){const a=t[r],g=i[r];if(a!==g)return a>g?1:-1}return 0}eq(e){return this.compare(e)===0}gt(e){return this.compare(e)>0}gte(e){return this.compare(e)>=0}lt(e){return this.compare(e)<0}lte(e){return this.compare(e)<=0}diff(e){const t=this.data,n=t.byteLength,i=this.compare(e);if(i<0)return e.diff(this);if(i===0)return SensitiveBigUint.empty(n);const o=e.data,r=new Uint8Array(n);let a=0;for(let g=n-1;g>=0;g--){let I=t[g]-o[g]-a;I<0?(I+=256,a=1):a=0,r[g]=I}return new SensitiveBigUint(r)}mod(e){const n=this.data.byteLength;let i=this.compare(e);if(i<0)return this.clone();if(i===0)return SensitiveBigUint.empty(n);e.data.byteLength;let r=this.clone();for(;;){const a=r.diff(e);if(r.wipe(),i=a.compare(e),i<=0)return a;r=a}}modulus(e){const n=this.data.byteLength;let i=this.compare(e);if(i<0)return this.clone();if(i===0)return SensitiveBigUint.empty(n);e.data.byteLength}}const KN_ZERO_32=SensitiveBigUint.empty(32),KN_CURVE_N_SECP256K1=new SensitiveBigUint(hex_to_buffer("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")),NI_MINIMUM_BORDER=64,KN_DANGER_LO=new SensitiveBigUint(hex_to_buffer(((1<<NI_MINIMUM_BORDER%8).toString(16)+"00".repeat(NI_MINIMUM_BORDER>>>3)).padStart(64,"0")));KN_CURVE_N_SECP256K1.diff(KN_DANGER_LO);let y_secp256k1,a_wait_secp256k1=null;async function init_secp256k1(){if(y_secp256k1)return y_secp256k1;if(a_wait_secp256k1)return new Promise(e=>{a_wait_secp256k1.push(e)});a_wait_secp256k1=[],y_secp256k1=await instantiateSecp256k1(crypto.getRandomValues(new Uint8Array(32)));const A=a_wait_secp256k1.slice();a_wait_secp256k1=null;for(const e of A)e(y_secp256k1);return y_secp256k1}const hm_privates=new Map;class Secp256k1Key{constructor(e){cA(this,"_b_init",!1);this._y_secp256k1=e}static withinCurve(e){return KN_ZERO_32.lt(e)&&KN_CURVE_N_SECP256K1.gt(e)}static async init(){y_secp256k1||await init_secp256k1()}static async verify(e,t,n){y_secp256k1||await init_secp256k1();const i=await sha256$1(t);return y_secp256k1.verifySignatureCompactLowS(e,n,i)}static async generatePrivateKey(e=!1){y_secp256k1||await init_secp256k1();const t=await RuntimeKey.create(()=>{let n;for(;!y_secp256k1.validatePrivateKey(n=crypto.getRandomValues(new Uint8Array(32))););return n});return[t,await Secp256k1Key.import(t,e)]}static uncompressPublicKey(e){return y_secp256k1.uncompressPublicKey(e)}static async import(e,t=!1){return y_secp256k1||await init_secp256k1(),await new Secp256k1Key(y_secp256k1).import(e,t)}async import(e,t=!1){const n=this._y_secp256k1;await e.access(r=>{if(!this._y_secp256k1.validatePrivateKey(r))throw new Error("Failed to validate secp256k1 private key");hm_privates.set(this,{kk_sk:e,atu8_pk33:n.derivePublicKeyCompressed(r),atu8_pk65:n.derivePublicKeyUncompressed(r),b_exportable:t})});const{atu8_pk33:i,atu8_pk65:o}=hm_privates.get(this);if(!n.validatePublicKey(i))throw new Error("Failed to validate secp256k1 compressed public key");if(!n.validatePublicKey(o))throw new Error("Failed to validate secp256k1 uncompressed public key");return this._b_init=!0,this}exportPublicKey(e=!1){const{atu8_pk33:t,atu8_pk65:n,b_exportable:i}=hm_privates.get(this);if(i===!0)return e?n:t;throw new Error("Public key is not exportable")}async sign(e,t=!1){const n=await sha256$1(e),{kk_sk:i}=hm_privates.get(this);return await i.access(o=>t?this._y_secp256k1.signMessageHashCompact(o,n,crypto.getRandomValues(new Uint8Array(32))):this._y_secp256k1.signMessageHashCompact(o,n))}async verify(e,t){const n=await sha256$1(t),{atu8_pk65:i}=hm_privates.get(this);return this._y_secp256k1.verifySignatureCompactLowS(e,i,n)}async ecdh(e){const{kk_sk:t}=hm_privates.get(this);return await t.access(n=>this._y_secp256k1.ecdh(n,e))}add(e){const{kk_sk:t}=hm_privates.get(this);return t.access(n=>this._y_secp256k1.addTweakPrivateKey(n,e))}}const Secrets=create_store_class({store:SI_STORE_SECRETS,extension:"dict",class:class te extends WritableStoreDict{static pathFrom(e){return`/secret.${e.type}/uuid.${e.uuid}`}async put(e){const t=te.pathFrom(e);return this._w_cache[t]=e,await this.save(),t}}}),Accounts=create_store_class({store:SI_STORE_ACCOUNTS,extension:"map",class:class LA extends WritableStoreMap{static pathFor(e,t){return`/family.${e}/account.${t.replace(/:/g,"+")}`}static pathFrom(e){return LA.pathFor(e.family,e.pubkey)}static get(e,t){return Accounts.open(n=>n.get(e,t))}get(e,t){const n=LA.pathFor(e,t);return this._w_cache[n]??null}async put(e){const t=LA.pathFrom(e);return this._w_cache[t]=e,await this.save(),t}}});var isNumeric=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,mathceil=Math.ceil,mathfloor=Math.floor,bignumberError="[BigNumber Error] ",tooManyDigits=bignumberError+"Number primitive has more than 15 significant digits: ",BASE=1e14,LOG_BASE=14,MAX_SAFE_INTEGER=9007199254740991,POWS_TEN=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],SQRT_BASE=1e7,MAX=1e9;function clone(A){var e,t,n,i=u.prototype={constructor:u,toString:null,valueOf:null},o=new u(1),r=20,a=4,g=-7,I=21,s=-1e7,c=1e7,B=!1,d=1,l=0,E={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"\xA0",suffix:""},C="0123456789abcdefghijklmnopqrstuvwxyz",f=!0;function u(Q,h){var _,b,w,S,k,m,N,H,M=this;if(!(M instanceof u))return new u(Q,h);if(h==null){if(Q&&Q._isBigNumber===!0){M.s=Q.s,!Q.c||Q.e>c?M.c=M.e=null:Q.e<s?M.c=[M.e=0]:(M.e=Q.e,M.c=Q.c.slice());return}if((m=typeof Q=="number")&&Q*0==0){if(M.s=1/Q<0?(Q=-Q,-1):1,Q===~~Q){for(S=0,k=Q;k>=10;k/=10,S++);S>c?M.c=M.e=null:(M.e=S,M.c=[Q]);return}H=String(Q)}else{if(!isNumeric.test(H=String(Q)))return n(M,H,m);M.s=H.charCodeAt(0)==45?(H=H.slice(1),-1):1}(S=H.indexOf("."))>-1&&(H=H.replace(".","")),(k=H.search(/e/i))>0?(S<0&&(S=k),S+=+H.slice(k+1),H=H.substring(0,k)):S<0&&(S=H.length)}else{if(intCheck(h,2,C.length,"Base"),h==10&&f)return M=new u(Q),F(M,r+M.e+1,a);if(H=String(Q),m=typeof Q=="number"){if(Q*0!=0)return n(M,H,m,h);if(M.s=1/Q<0?(H=H.slice(1),-1):1,u.DEBUG&&H.replace(/^0\.0*|\./,"").length>15)throw Error(tooManyDigits+Q)}else M.s=H.charCodeAt(0)===45?(H=H.slice(1),-1):1;for(_=C.slice(0,h),S=k=0,N=H.length;k<N;k++)if(_.indexOf(b=H.charAt(k))<0){if(b=="."){if(k>S){S=N;continue}}else if(!w&&(H==H.toUpperCase()&&(H=H.toLowerCase())||H==H.toLowerCase()&&(H=H.toUpperCase()))){w=!0,k=-1,S=0;continue}return n(M,String(Q),m,h)}m=!1,H=t(H,h,10,M.s),(S=H.indexOf("."))>-1?H=H.replace(".",""):S=H.length}for(k=0;H.charCodeAt(k)===48;k++);for(N=H.length;H.charCodeAt(--N)===48;);if(H=H.slice(k,++N)){if(N-=k,m&&u.DEBUG&&N>15&&(Q>MAX_SAFE_INTEGER||Q!==mathfloor(Q)))throw Error(tooManyDigits+M.s*Q);if((S=S-k-1)>c)M.c=M.e=null;else if(S<s)M.c=[M.e=0];else{if(M.e=S,M.c=[],k=(S+1)%LOG_BASE,S<0&&(k+=LOG_BASE),k<N){for(k&&M.c.push(+H.slice(0,k)),N-=LOG_BASE;k<N;)M.c.push(+H.slice(k,k+=LOG_BASE));k=LOG_BASE-(H=H.slice(k)).length}else k-=N;for(;k--;H+="0");M.c.push(+H)}}else M.c=[M.e=0]}u.clone=clone,u.ROUND_UP=0,u.ROUND_DOWN=1,u.ROUND_CEIL=2,u.ROUND_FLOOR=3,u.ROUND_HALF_UP=4,u.ROUND_HALF_DOWN=5,u.ROUND_HALF_EVEN=6,u.ROUND_HALF_CEIL=7,u.ROUND_HALF_FLOOR=8,u.EUCLID=9,u.config=u.set=function(Q){var h,_;if(Q!=null)if(typeof Q=="object"){if(Q.hasOwnProperty(h="DECIMAL_PLACES")&&(_=Q[h],intCheck(_,0,MAX,h),r=_),Q.hasOwnProperty(h="ROUNDING_MODE")&&(_=Q[h],intCheck(_,0,8,h),a=_),Q.hasOwnProperty(h="EXPONENTIAL_AT")&&(_=Q[h],_&&_.pop?(intCheck(_[0],-MAX,0,h),intCheck(_[1],0,MAX,h),g=_[0],I=_[1]):(intCheck(_,-MAX,MAX,h),g=-(I=_<0?-_:_))),Q.hasOwnProperty(h="RANGE"))if(_=Q[h],_&&_.pop)intCheck(_[0],-MAX,-1,h),intCheck(_[1],1,MAX,h),s=_[0],c=_[1];else if(intCheck(_,-MAX,MAX,h),_)s=-(c=_<0?-_:_);else throw Error(bignumberError+h+" cannot be zero: "+_);if(Q.hasOwnProperty(h="CRYPTO"))if(_=Q[h],_===!!_)if(_)if(typeof crypto<"u"&&crypto&&(crypto.getRandomValues||crypto.randomBytes))B=_;else throw B=!_,Error(bignumberError+"crypto unavailable");else B=_;else throw Error(bignumberError+h+" not true or false: "+_);if(Q.hasOwnProperty(h="MODULO_MODE")&&(_=Q[h],intCheck(_,0,9,h),d=_),Q.hasOwnProperty(h="POW_PRECISION")&&(_=Q[h],intCheck(_,0,MAX,h),l=_),Q.hasOwnProperty(h="FORMAT"))if(_=Q[h],typeof _=="object")E=_;else throw Error(bignumberError+h+" not an object: "+_);if(Q.hasOwnProperty(h="ALPHABET"))if(_=Q[h],typeof _=="string"&&!/^.?$|[+\-.\s]|(.).*\1/.test(_))f=_.slice(0,10)=="0123456789",C=_;else throw Error(bignumberError+h+" invalid: "+_)}else throw Error(bignumberError+"Object expected: "+Q);return{DECIMAL_PLACES:r,ROUNDING_MODE:a,EXPONENTIAL_AT:[g,I],RANGE:[s,c],CRYPTO:B,MODULO_MODE:d,POW_PRECISION:l,FORMAT:E,ALPHABET:C}},u.isBigNumber=function(Q){if(!Q||Q._isBigNumber!==!0)return!1;if(!u.DEBUG)return!0;var h,_,b=Q.c,w=Q.e,S=Q.s;A:if({}.toString.call(b)=="[object Array]"){if((S===1||S===-1)&&w>=-MAX&&w<=MAX&&w===mathfloor(w)){if(b[0]===0){if(w===0&&b.length===1)return!0;break A}if(h=(w+1)%LOG_BASE,h<1&&(h+=LOG_BASE),String(b[0]).length==h){for(h=0;h<b.length;h++)if(_=b[h],_<0||_>=BASE||_!==mathfloor(_))break A;if(_!==0)return!0}}}else if(b===null&&w===null&&(S===null||S===1||S===-1))return!0;throw Error(bignumberError+"Invalid BigNumber: "+Q)},u.maximum=u.max=function(){return y(arguments,i.lt)},u.minimum=u.min=function(){return y(arguments,i.gt)},u.random=function(){var Q=9007199254740992,h=Math.random()*Q&2097151?function(){return mathfloor(Math.random()*Q)}:function(){return(Math.random()*1073741824|0)*8388608+(Math.random()*8388608|0)};return function(_){var b,w,S,k,m,N=0,H=[],M=new u(o);if(_==null?_=r:intCheck(_,0,MAX),k=mathceil(_/LOG_BASE),B)if(crypto.getRandomValues){for(b=crypto.getRandomValues(new Uint32Array(k*=2));N<k;)m=b[N]*131072+(b[N+1]>>>11),m>=9e15?(w=crypto.getRandomValues(new Uint32Array(2)),b[N]=w[0],b[N+1]=w[1]):(H.push(m%1e14),N+=2);N=k/2}else if(crypto.randomBytes){for(b=crypto.randomBytes(k*=7);N<k;)m=(b[N]&31)*281474976710656+b[N+1]*1099511627776+b[N+2]*4294967296+b[N+3]*16777216+(b[N+4]<<16)+(b[N+5]<<8)+b[N+6],m>=9e15?crypto.randomBytes(7).copy(b,N):(H.push(m%1e14),N+=7);N=k/7}else throw B=!1,Error(bignumberError+"crypto unavailable");if(!B)for(;N<k;)m=h(),m<9e15&&(H[N++]=m%1e14);for(k=H[--N],_%=LOG_BASE,k&&_&&(m=POWS_TEN[LOG_BASE-_],H[N]=mathfloor(k/m)*m);H[N]===0;H.pop(),N--);if(N<0)H=[S=0];else{for(S=-1;H[0]===0;H.splice(0,1),S-=LOG_BASE);for(N=1,m=H[0];m>=10;m/=10,N++);N<LOG_BASE&&(S-=LOG_BASE-N)}return M.e=S,M.c=H,M}}(),u.sum=function(){for(var Q=1,h=arguments,_=new u(h[0]);Q<h.length;)_=_.plus(h[Q++]);return _},t=function(){var Q="0123456789";function h(_,b,w,S){for(var k,m=[0],N,H=0,M=_.length;H<M;){for(N=m.length;N--;m[N]*=b);for(m[0]+=S.indexOf(_.charAt(H++)),k=0;k<m.length;k++)m[k]>w-1&&(m[k+1]==null&&(m[k+1]=0),m[k+1]+=m[k]/w|0,m[k]%=w)}return m.reverse()}return function(_,b,w,S,k){var m,N,H,M,U,v,L,x,q=_.indexOf("."),P=r,O=a;for(q>=0&&(M=l,l=0,_=_.replace(".",""),x=new u(b),v=x.pow(_.length-q),l=M,x.c=h(toFixedPoint(coeffToString(v.c),v.e,"0"),10,w,Q),x.e=x.c.length),L=h(_,b,w,k?(m=C,Q):(m=Q,C)),H=M=L.length;L[--M]==0;L.pop());if(!L[0])return m.charAt(0);if(q<0?--H:(v.c=L,v.e=H,v.s=S,v=e(v,x,P,O,w),L=v.c,U=v.r,H=v.e),N=H+P+1,q=L[N],M=w/2,U=U||N<0||L[N+1]!=null,U=O<4?(q!=null||U)&&(O==0||O==(v.s<0?3:2)):q>M||q==M&&(O==4||U||O==6&&L[N-1]&1||O==(v.s<0?8:7)),N<1||!L[0])_=U?toFixedPoint(m.charAt(1),-P,m.charAt(0)):m.charAt(0);else{if(L.length=N,U)for(--w;++L[--N]>w;)L[N]=0,N||(++H,L=[1].concat(L));for(M=L.length;!L[--M];);for(q=0,_="";q<=M;_+=m.charAt(L[q++]));_=toFixedPoint(_,H,m.charAt(0))}return _}}(),e=function(){function Q(b,w,S){var k,m,N,H,M=0,U=b.length,v=w%SQRT_BASE,L=w/SQRT_BASE|0;for(b=b.slice();U--;)N=b[U]%SQRT_BASE,H=b[U]/SQRT_BASE|0,k=L*N+H*v,m=v*N+k%SQRT_BASE*SQRT_BASE+M,M=(m/S|0)+(k/SQRT_BASE|0)+L*H,b[U]=m%S;return M&&(b=[M].concat(b)),b}function h(b,w,S,k){var m,N;if(S!=k)N=S>k?1:-1;else for(m=N=0;m<S;m++)if(b[m]!=w[m]){N=b[m]>w[m]?1:-1;break}return N}function _(b,w,S,k){for(var m=0;S--;)b[S]-=m,m=b[S]<w[S]?1:0,b[S]=m*k+b[S]-w[S];for(;!b[0]&&b.length>1;b.splice(0,1));}return function(b,w,S,k,m){var N,H,M,U,v,L,x,q,P,O,Z,AA,Y,X,nA,rA,aA,tA=b.s==w.s?1:-1,J=b.c,j=w.c;if(!J||!J[0]||!j||!j[0])return new u(!b.s||!w.s||(J?j&&J[0]==j[0]:!j)?NaN:J&&J[0]==0||!j?tA*0:tA/0);for(q=new u(tA),P=q.c=[],H=b.e-w.e,tA=S+H+1,m||(m=BASE,H=bitFloor(b.e/LOG_BASE)-bitFloor(w.e/LOG_BASE),tA=tA/LOG_BASE|0),M=0;j[M]==(J[M]||0);M++);if(j[M]>(J[M]||0)&&H--,tA<0)P.push(1),U=!0;else{for(X=J.length,rA=j.length,M=0,tA+=2,v=mathfloor(m/(j[0]+1)),v>1&&(j=Q(j,v,m),J=Q(J,v,m),rA=j.length,X=J.length),Y=rA,O=J.slice(0,rA),Z=O.length;Z<rA;O[Z++]=0);aA=j.slice(),aA=[0].concat(aA),nA=j[0],j[1]>=m/2&&nA++;do{if(v=0,N=h(j,O,rA,Z),N<0){if(AA=O[0],rA!=Z&&(AA=AA*m+(O[1]||0)),v=mathfloor(AA/nA),v>1)for(v>=m&&(v=m-1),L=Q(j,v,m),x=L.length,Z=O.length;h(L,O,x,Z)==1;)v--,_(L,rA<x?aA:j,x,m),x=L.length,N=1;else v==0&&(N=v=1),L=j.slice(),x=L.length;if(x<Z&&(L=[0].concat(L)),_(O,L,Z,m),Z=O.length,N==-1)for(;h(j,O,rA,Z)<1;)v++,_(O,rA<Z?aA:j,Z,m),Z=O.length}else N===0&&(v++,O=[0]);P[M++]=v,O[0]?O[Z++]=J[Y]||0:(O=[J[Y]],Z=1)}while((Y++<X||O[0]!=null)&&tA--);U=O[0]!=null,P[0]||P.splice(0,1)}if(m==BASE){for(M=1,tA=P[0];tA>=10;tA/=10,M++);F(q,S+(q.e=M+H*LOG_BASE-1)+1,k,U)}else q.e=H,q.r=+U;return q}}();function p(Q,h,_,b){var w,S,k,m,N;if(_==null?_=a:intCheck(_,0,8),!Q.c)return Q.toString();if(w=Q.c[0],k=Q.e,h==null)N=coeffToString(Q.c),N=b==1||b==2&&(k<=g||k>=I)?toExponential(N,k):toFixedPoint(N,k,"0");else if(Q=F(new u(Q),h,_),S=Q.e,N=coeffToString(Q.c),m=N.length,b==1||b==2&&(h<=S||S<=g)){for(;m<h;N+="0",m++);N=toExponential(N,S)}else if(h-=k,N=toFixedPoint(N,S,"0"),S+1>m){if(--h>0)for(N+=".";h--;N+="0");}else if(h+=S-m,h>0)for(S+1==m&&(N+=".");h--;N+="0");return Q.s<0&&w?"-"+N:N}function y(Q,h){for(var _,b=1,w=new u(Q[0]);b<Q.length;b++)if(_=new u(Q[b]),_.s)h.call(w,_)&&(w=_);else{w=_;break}return w}function D(Q,h,_){for(var b=1,w=h.length;!h[--w];h.pop());for(w=h[0];w>=10;w/=10,b++);return(_=b+_*LOG_BASE-1)>c?Q.c=Q.e=null:_<s?Q.c=[Q.e=0]:(Q.e=_,Q.c=h),Q}n=function(){var Q=/^(-?)0([xbo])(?=\w[\w.]*$)/i,h=/^([^.]+)\.$/,_=/^\.([^.]+)$/,b=/^-?(Infinity|NaN)$/,w=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(S,k,m,N){var H,M=m?k:k.replace(w,"");if(b.test(M))S.s=isNaN(M)?null:M<0?-1:1;else{if(!m&&(M=M.replace(Q,function(U,v,L){return H=(L=L.toLowerCase())=="x"?16:L=="b"?2:8,!N||N==H?v:U}),N&&(H=N,M=M.replace(h,"$1").replace(_,"0.$1")),k!=M))return new u(M,H);if(u.DEBUG)throw Error(bignumberError+"Not a"+(N?" base "+N:"")+" number: "+k);S.s=null}S.c=S.e=null}}();function F(Q,h,_,b){var w,S,k,m,N,H,M,U=Q.c,v=POWS_TEN;if(U){A:{for(w=1,m=U[0];m>=10;m/=10,w++);if(S=h-w,S<0)S+=LOG_BASE,k=h,N=U[H=0],M=N/v[w-k-1]%10|0;else if(H=mathceil((S+1)/LOG_BASE),H>=U.length)if(b){for(;U.length<=H;U.push(0));N=M=0,w=1,S%=LOG_BASE,k=S-LOG_BASE+1}else break A;else{for(N=m=U[H],w=1;m>=10;m/=10,w++);S%=LOG_BASE,k=S-LOG_BASE+w,M=k<0?0:N/v[w-k-1]%10|0}if(b=b||h<0||U[H+1]!=null||(k<0?N:N%v[w-k-1]),b=_<4?(M||b)&&(_==0||_==(Q.s<0?3:2)):M>5||M==5&&(_==4||b||_==6&&(S>0?k>0?N/v[w-k]:0:U[H-1])%10&1||_==(Q.s<0?8:7)),h<1||!U[0])return U.length=0,b?(h-=Q.e+1,U[0]=v[(LOG_BASE-h%LOG_BASE)%LOG_BASE],Q.e=-h||0):U[0]=Q.e=0,Q;if(S==0?(U.length=H,m=1,H--):(U.length=H+1,m=v[LOG_BASE-S],U[H]=k>0?mathfloor(N/v[w-k]%v[k])*m:0),b)for(;;)if(H==0){for(S=1,k=U[0];k>=10;k/=10,S++);for(k=U[0]+=m,m=1;k>=10;k/=10,m++);S!=m&&(Q.e++,U[0]==BASE&&(U[0]=1));break}else{if(U[H]+=m,U[H]!=BASE)break;U[H--]=0,m=1}for(S=U.length;U[--S]===0;U.pop());}Q.e>c?Q.c=Q.e=null:Q.e<s&&(Q.c=[Q.e=0])}return Q}function G(Q){var h,_=Q.e;return _===null?Q.toString():(h=coeffToString(Q.c),h=_<=g||_>=I?toExponential(h,_):toFixedPoint(h,_,"0"),Q.s<0?"-"+h:h)}return i.absoluteValue=i.abs=function(){var Q=new u(this);return Q.s<0&&(Q.s=1),Q},i.comparedTo=function(Q,h){return compare(this,new u(Q,h))},i.decimalPlaces=i.dp=function(Q,h){var _,b,w,S=this;if(Q!=null)return intCheck(Q,0,MAX),h==null?h=a:intCheck(h,0,8),F(new u(S),Q+S.e+1,h);if(!(_=S.c))return null;if(b=((w=_.length-1)-bitFloor(this.e/LOG_BASE))*LOG_BASE,w=_[w])for(;w%10==0;w/=10,b--);return b<0&&(b=0),b},i.dividedBy=i.div=function(Q,h){return e(this,new u(Q,h),r,a)},i.dividedToIntegerBy=i.idiv=function(Q,h){return e(this,new u(Q,h),0,1)},i.exponentiatedBy=i.pow=function(Q,h){var _,b,w,S,k,m,N,H,M,U=this;if(Q=new u(Q),Q.c&&!Q.isInteger())throw Error(bignumberError+"Exponent not an integer: "+G(Q));if(h!=null&&(h=new u(h)),m=Q.e>14,!U.c||!U.c[0]||U.c[0]==1&&!U.e&&U.c.length==1||!Q.c||!Q.c[0])return M=new u(Math.pow(+G(U),m?2-isOdd(Q):+G(Q))),h?M.mod(h):M;if(N=Q.s<0,h){if(h.c?!h.c[0]:!h.s)return new u(NaN);b=!N&&U.isInteger()&&h.isInteger(),b&&(U=U.mod(h))}else{if(Q.e>9&&(U.e>0||U.e<-1||(U.e==0?U.c[0]>1||m&&U.c[1]>=24e7:U.c[0]<8e13||m&&U.c[0]<=9999975e7)))return S=U.s<0&&isOdd(Q)?-0:0,U.e>-1&&(S=1/S),new u(N?1/S:S);l&&(S=mathceil(l/LOG_BASE+2))}for(m?(_=new u(.5),N&&(Q.s=1),H=isOdd(Q)):(w=Math.abs(+G(Q)),H=w%2),M=new u(o);;){if(H){if(M=M.times(U),!M.c)break;S?M.c.length>S&&(M.c.length=S):b&&(M=M.mod(h))}if(w){if(w=mathfloor(w/2),w===0)break;H=w%2}else if(Q=Q.times(_),F(Q,Q.e+1,1),Q.e>14)H=isOdd(Q);else{if(w=+G(Q),w===0)break;H=w%2}U=U.times(U),S?U.c&&U.c.length>S&&(U.c.length=S):b&&(U=U.mod(h))}return b?M:(N&&(M=o.div(M)),h?M.mod(h):S?F(M,l,a,k):M)},i.integerValue=function(Q){var h=new u(this);return Q==null?Q=a:intCheck(Q,0,8),F(h,h.e+1,Q)},i.isEqualTo=i.eq=function(Q,h){return compare(this,new u(Q,h))===0},i.isFinite=function(){return!!this.c},i.isGreaterThan=i.gt=function(Q,h){return compare(this,new u(Q,h))>0},i.isGreaterThanOrEqualTo=i.gte=function(Q,h){return(h=compare(this,new u(Q,h)))===1||h===0},i.isInteger=function(){return!!this.c&&bitFloor(this.e/LOG_BASE)>this.c.length-2},i.isLessThan=i.lt=function(Q,h){return compare(this,new u(Q,h))<0},i.isLessThanOrEqualTo=i.lte=function(Q,h){return(h=compare(this,new u(Q,h)))===-1||h===0},i.isNaN=function(){return!this.s},i.isNegative=function(){return this.s<0},i.isPositive=function(){return this.s>0},i.isZero=function(){return!!this.c&&this.c[0]==0},i.minus=function(Q,h){var _,b,w,S,k=this,m=k.s;if(Q=new u(Q,h),h=Q.s,!m||!h)return new u(NaN);if(m!=h)return Q.s=-h,k.plus(Q);var N=k.e/LOG_BASE,H=Q.e/LOG_BASE,M=k.c,U=Q.c;if(!N||!H){if(!M||!U)return M?(Q.s=-h,Q):new u(U?k:NaN);if(!M[0]||!U[0])return U[0]?(Q.s=-h,Q):new u(M[0]?k:a==3?-0:0)}if(N=bitFloor(N),H=bitFloor(H),M=M.slice(),m=N-H){for((S=m<0)?(m=-m,w=M):(H=N,w=U),w.reverse(),h=m;h--;w.push(0));w.reverse()}else for(b=(S=(m=M.length)<(h=U.length))?m:h,m=h=0;h<b;h++)if(M[h]!=U[h]){S=M[h]<U[h];break}if(S&&(w=M,M=U,U=w,Q.s=-Q.s),h=(b=U.length)-(_=M.length),h>0)for(;h--;M[_++]=0);for(h=BASE-1;b>m;){if(M[--b]<U[b]){for(_=b;_&&!M[--_];M[_]=h);--M[_],M[b]+=BASE}M[b]-=U[b]}for(;M[0]==0;M.splice(0,1),--H);return M[0]?D(Q,M,H):(Q.s=a==3?-1:1,Q.c=[Q.e=0],Q)},i.modulo=i.mod=function(Q,h){var _,b,w=this;return Q=new u(Q,h),!w.c||!Q.s||Q.c&&!Q.c[0]?new u(NaN):!Q.c||w.c&&!w.c[0]?new u(w):(d==9?(b=Q.s,Q.s=1,_=e(w,Q,0,3),Q.s=b,_.s*=b):_=e(w,Q,0,d),Q=w.minus(_.times(Q)),!Q.c[0]&&d==1&&(Q.s=w.s),Q)},i.multipliedBy=i.times=function(Q,h){var _,b,w,S,k,m,N,H,M,U,v,L,x,q,P,O=this,Z=O.c,AA=(Q=new u(Q,h)).c;if(!Z||!AA||!Z[0]||!AA[0])return!O.s||!Q.s||Z&&!Z[0]&&!AA||AA&&!AA[0]&&!Z?Q.c=Q.e=Q.s=null:(Q.s*=O.s,!Z||!AA?Q.c=Q.e=null:(Q.c=[0],Q.e=0)),Q;for(b=bitFloor(O.e/LOG_BASE)+bitFloor(Q.e/LOG_BASE),Q.s*=O.s,N=Z.length,U=AA.length,N<U&&(x=Z,Z=AA,AA=x,w=N,N=U,U=w),w=N+U,x=[];w--;x.push(0));for(q=BASE,P=SQRT_BASE,w=U;--w>=0;){for(_=0,v=AA[w]%P,L=AA[w]/P|0,k=N,S=w+k;S>w;)H=Z[--k]%P,M=Z[k]/P|0,m=L*H+M*v,H=v*H+m%P*P+x[S]+_,_=(H/q|0)+(m/P|0)+L*M,x[S--]=H%q;x[S]=_}return _?++b:x.splice(0,1),D(Q,x,b)},i.negated=function(){var Q=new u(this);return Q.s=-Q.s||null,Q},i.plus=function(Q,h){var _,b=this,w=b.s;if(Q=new u(Q,h),h=Q.s,!w||!h)return new u(NaN);if(w!=h)return Q.s=-h,b.minus(Q);var S=b.e/LOG_BASE,k=Q.e/LOG_BASE,m=b.c,N=Q.c;if(!S||!k){if(!m||!N)return new u(w/0);if(!m[0]||!N[0])return N[0]?Q:new u(m[0]?b:w*0)}if(S=bitFloor(S),k=bitFloor(k),m=m.slice(),w=S-k){for(w>0?(k=S,_=N):(w=-w,_=m),_.reverse();w--;_.push(0));_.reverse()}for(w=m.length,h=N.length,w-h<0&&(_=N,N=m,m=_,h=w),w=0;h;)w=(m[--h]=m[h]+N[h]+w)/BASE|0,m[h]=BASE===m[h]?0:m[h]%BASE;return w&&(m=[w].concat(m),++k),D(Q,m,k)},i.precision=i.sd=function(Q,h){var _,b,w,S=this;if(Q!=null&&Q!==!!Q)return intCheck(Q,1,MAX),h==null?h=a:intCheck(h,0,8),F(new u(S),Q,h);if(!(_=S.c))return null;if(w=_.length-1,b=w*LOG_BASE+1,w=_[w]){for(;w%10==0;w/=10,b--);for(w=_[0];w>=10;w/=10,b++);}return Q&&S.e+1>b&&(b=S.e+1),b},i.shiftedBy=function(Q){return intCheck(Q,-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER),this.times("1e"+Q)},i.squareRoot=i.sqrt=function(){var Q,h,_,b,w,S=this,k=S.c,m=S.s,N=S.e,H=r+4,M=new u("0.5");if(m!==1||!k||!k[0])return new u(!m||m<0&&(!k||k[0])?NaN:k?S:1/0);if(m=Math.sqrt(+G(S)),m==0||m==1/0?(h=coeffToString(k),(h.length+N)%2==0&&(h+="0"),m=Math.sqrt(+h),N=bitFloor((N+1)/2)-(N<0||N%2),m==1/0?h="5e"+N:(h=m.toExponential(),h=h.slice(0,h.indexOf("e")+1)+N),_=new u(h)):_=new u(m+""),_.c[0]){for(N=_.e,m=N+H,m<3&&(m=0);;)if(w=_,_=M.times(w.plus(e(S,w,H,1))),coeffToString(w.c).slice(0,m)===(h=coeffToString(_.c)).slice(0,m))if(_.e<N&&--m,h=h.slice(m-3,m+1),h=="9999"||!b&&h=="4999"){if(!b&&(F(w,w.e+r+2,0),w.times(w).eq(S))){_=w;break}H+=4,m+=4,b=1}else{(!+h||!+h.slice(1)&&h.charAt(0)=="5")&&(F(_,_.e+r+2,1),Q=!_.times(_).eq(S));break}}return F(_,_.e+r+1,a,Q)},i.toExponential=function(Q,h){return Q!=null&&(intCheck(Q,0,MAX),Q++),p(this,Q,h,1)},i.toFixed=function(Q,h){return Q!=null&&(intCheck(Q,0,MAX),Q=Q+this.e+1),p(this,Q,h)},i.toFormat=function(Q,h,_){var b,w=this;if(_==null)Q!=null&&h&&typeof h=="object"?(_=h,h=null):Q&&typeof Q=="object"?(_=Q,Q=h=null):_=E;else if(typeof _!="object")throw Error(bignumberError+"Argument not an object: "+_);if(b=w.toFixed(Q,h),w.c){var S,k=b.split("."),m=+_.groupSize,N=+_.secondaryGroupSize,H=_.groupSeparator||"",M=k[0],U=k[1],v=w.s<0,L=v?M.slice(1):M,x=L.length;if(N&&(S=m,m=N,N=S,x-=S),m>0&&x>0){for(S=x%m||m,M=L.substr(0,S);S<x;S+=m)M+=H+L.substr(S,m);N>0&&(M+=H+L.slice(S)),v&&(M="-"+M)}b=U?M+(_.decimalSeparator||"")+((N=+_.fractionGroupSize)?U.replace(new RegExp("\\d{"+N+"}\\B","g"),"$&"+(_.fractionGroupSeparator||"")):U):M}return(_.prefix||"")+b+(_.suffix||"")},i.toFraction=function(Q){var h,_,b,w,S,k,m,N,H,M,U,v,L=this,x=L.c;if(Q!=null&&(m=new u(Q),!m.isInteger()&&(m.c||m.s!==1)||m.lt(o)))throw Error(bignumberError+"Argument "+(m.isInteger()?"out of range: ":"not an integer: ")+G(m));if(!x)return new u(L);for(h=new u(o),H=_=new u(o),b=N=new u(o),v=coeffToString(x),S=h.e=v.length-L.e-1,h.c[0]=POWS_TEN[(k=S%LOG_BASE)<0?LOG_BASE+k:k],Q=!Q||m.comparedTo(h)>0?S>0?h:H:m,k=c,c=1/0,m=new u(v),N.c[0]=0;M=e(m,h,0,1),w=_.plus(M.times(b)),w.comparedTo(Q)!=1;)_=b,b=w,H=N.plus(M.times(w=H)),N=w,h=m.minus(M.times(w=h)),m=w;return w=e(Q.minus(_),b,0,1),N=N.plus(w.times(H)),_=_.plus(w.times(b)),N.s=H.s=L.s,S=S*2,U=e(H,b,S,a).minus(L).abs().comparedTo(e(N,_,S,a).minus(L).abs())<1?[H,b]:[N,_],c=k,U},i.toNumber=function(){return+G(this)},i.toPrecision=function(Q,h){return Q!=null&&intCheck(Q,1,MAX),p(this,Q,h,2)},i.toString=function(Q){var h,_=this,b=_.s,w=_.e;return w===null?b?(h="Infinity",b<0&&(h="-"+h)):h="NaN":(Q==null?h=w<=g||w>=I?toExponential(coeffToString(_.c),w):toFixedPoint(coeffToString(_.c),w,"0"):Q===10&&f?(_=F(new u(_),r+w+1,a),h=toFixedPoint(coeffToString(_.c),_.e,"0")):(intCheck(Q,2,C.length,"Base"),h=t(toFixedPoint(coeffToString(_.c),w,"0"),10,Q,b,!0)),b<0&&_.c[0]&&(h="-"+h)),h},i.valueOf=i.toJSON=function(){return G(this)},i._isBigNumber=!0,i[Symbol.toStringTag]="BigNumber",i[Symbol.for("nodejs.util.inspect.custom")]=i.valueOf,A!=null&&u.set(A),u}function bitFloor(A){var e=A|0;return A>0||A===e?e:e-1}function coeffToString(A){for(var e,t,n=1,i=A.length,o=A[0]+"";n<i;){for(e=A[n++]+"",t=LOG_BASE-e.length;t--;e="0"+e);o+=e}for(i=o.length;o.charCodeAt(--i)===48;);return o.slice(0,i+1||1)}function compare(A,e){var t,n,i=A.c,o=e.c,r=A.s,a=e.s,g=A.e,I=e.e;if(!r||!a)return null;if(t=i&&!i[0],n=o&&!o[0],t||n)return t?n?0:-a:r;if(r!=a)return r;if(t=r<0,n=g==I,!i||!o)return n?0:!i^t?1:-1;if(!n)return g>I^t?1:-1;for(a=(g=i.length)<(I=o.length)?g:I,r=0;r<a;r++)if(i[r]!=o[r])return i[r]>o[r]^t?1:-1;return g==I?0:g>I^t?1:-1}function intCheck(A,e,t,n){if(A<e||A>t||A!==mathfloor(A))throw Error(bignumberError+(n||"Argument")+(typeof A=="number"?A<e||A>t?" out of range: ":" not an integer: ":" not a primitive number: ")+String(A))}function isOdd(A){var e=A.c.length-1;return bitFloor(A.e/LOG_BASE)==e&&A.c[e]%2!=0}function toExponential(A,e){return(A.length>1?A.charAt(0)+"."+A.slice(1):A)+(e<0?"e":"e+")+e}function toFixedPoint(A,e,t){var n,i;if(e<0){for(i=t+".";++e;i+=t);A=i+A}else if(n=A.length,++e>n){for(i=t,e-=n;--e;i+=t);A+=i}else e<n&&(A=A.slice(0,e)+"."+A.slice(e));return A}var BigNumber=clone();class HistoriesI extends WritableStore{static insertIncident(e,t,n){return Histories.open(i=>i.insertIncident(e,t,n))}static async incidents(){return(await Histories.read()).incidents()}static updateSyncInfo(e,t,n){return Histories.open(i=>i.updateSyncInfo(e,t,n))}static syncHeight(e,t){return Histories.open(n=>n.syncHeight(e,t))}async updateSyncInfo(e,t,n){const i=this._w_cache.syncs;(i[e]=i[e]||{[t]:{}})[t]={height:n},await this.save()}syncHeight(e,t){const i=this._w_cache.syncs[e]?.[t]?.height;return i?BigInt(i):0n}async insertIncident(e,t,n){const i=this._w_cache.order;let o=!1,r=!1,a=i.length;for(let g=0;g<a;g++){const I=i[g],c=n[I].time;if(I===e){i.splice(g,1),a=i.length,r=!0,g-=1;continue}if(!o&&t>=c&&(i.splice(g,0,e),a=i.length,o=!0,g+=1),o&&r)break}o||i.push(e),console.log(`** History updated: [${i.join(", ")}]`),await this.save()}incidents(){return this._w_cache.order}}const Histories=create_store_class({store:SI_STORE_HISTORIES,class:HistoriesI}),Incidents=create_store_class({store:SI_STORE_INCIDENTS,extension:"map",class:class ne extends WritableStoreMap{static pathFor(e,t){return`/incident.${e}/id.${t}`}static async filter(e={}){const[t,n]=await Promise.all([Histories.incidents(),Incidents.read()]);return n.filter(t,e)}static record(e,t){if(!e){const n=sha256_sync$1(text_to_buffer(JSON.stringify(t)));e=`${t.type}:${buffer_to_text(n)}`}return Incidents.open(n=>n.record(e,t))}async record(e,t,n){const i=this._w_cache,o=ne.pathFor(t.type,e);i[o]=t,console.log(`+Recording ${o} incident`),await this.save(),console.log(`:Saved ${o} incident`),n?await n.insertIncident(o,t.time,this._w_cache):await Histories.insertIncident(o,t.time,this._w_cache),console.log(`~Inserted ${o} incident`)}*filter(e,t={}){const n=this._w_cache;for(const i of e){const o=n[i];t.type&&t.type!==o.type||t.account&&t.account!==o.data.account||t.owner&&t.owner!==o.data.owner||(yield o)}}}}),fold_attrs=A=>fold(A.attributes,e=>({[e.key]:e.value}));async function sign_doc(A,e,t,n,i){const o=SignDoc.fromPartial({accountNumber:e+"",authInfoBytes:t,bodyBytes:n,chainId:i}),r=SignDoc.encode(o).finish(),a=A.secret,g=await Secrets.get(a);if(g?.security.type!=="none")throw new Error("Keyring not yet implemented");return await(await Secp256k1Key.import(await RuntimeKey.createRaw(string8_to_buffer(g.data)))).sign(r,!0)}function convert_mode_info(A){return A.multi?{multi:{bitarray:Array.from(A.multi.bitarray.elems).reduce((e,t)=>e+t.toString(2).padStart(8,"0"),"").slice(0,-A.multi.bitarray.extraBitsStored),modeInfos:A.multi.modeInfos.map(convert_mode_info)}}:A}function tx_to_synced(A,e,t,n){return{stage:"synced",chain:A,hash:e,code:n.code,height:n.height,timestamp:n.timestamp,gas_used:n.gasUsed,gas_wanted:n.gasWanted,msgs:n.logs.map(i=>({events:fold(i.events,o=>({[o.type]:fold_attrs(o)}))})),...t.authInfo?(i=>({...i.fee?(o=>({fee_amounts:o.amount,gas_limit:o.gasLimit,payer:o.payer,granter:o.granter}))(i.fee):{gas_limit:""},signers:i.signerInfos.map(o=>({pubkey:buffer_to_base64(o.publicKey?.value||new Uint8Array(0)),sequence:o.sequence,mode_info:convert_mode_info(o.modeInfo)}))}))(t.authInfo):{gas_limit:""},memo:t.body?.memo||""}}class CosmosNetwork{constructor(e,t){cA(this,"_p_chain");cA(this,"_y_grpc");cA(this,"_ks_cache");this._g_network=e,this._g_chain=t,this._p_chain=Chains.pathFrom(t),this._y_grpc=new GrpcWebImpl(e.grpcWebUrl,{transport:grpcWebClient_umd$1.exports.grpc.CrossBrowserHttpTransport({withCredentials:!1})}),this.reloadCached()}async _signer_data(e){const t=await new QueryClientImpl(this._y_grpc).account({address:e}),{typeUrl:n,value:i}=t?.account||{};if(n){if(n!=="/cosmos.auth.v1beta1.BaseAccount")throw new Error(`Cannot sign with account of type "${n}", can only sign with BaseAccount.`)}else throw new Error(`Account for ${e} was not found on chain. Likely has zero balance.`);const o=BaseAccount.decode(i);return{chainId:this._g_chain.id,accountNumber:BigInt(o.accountNumber),sequence:BigInt(o.sequence)}}async _update_balance(e,t,n,i){const o=Entities.holdingPathFor(e,t,this._p_chain),r=this._ks_cache.at(o);return await QueryCache.open(async a=>{await a.set(o,{timestamp:i,data:JSON.parse(JSON.stringify(n))}),this._ks_cache=a}),[o,r]}async reloadCached(){this._ks_cache=await QueryCache.read()}async latestBlock(){return await new ServiceClientImpl(this._y_grpc).getLatestBlock({})}cachedBalance(e,t){const n=Entities.holdingPathFor(e,t,this._p_chain);return this._ks_cache.at(n)}async bankBalance(e,t,n=0){const i=Date.now();t=t||Object.keys(this._g_chain.coins)[0];const o=await new QueryClientImpl$1(this._y_grpc).balance({address:e,denom:this._g_chain.coins[t].denom}),{balance:r}=o;if(!r)throw new Error("Failed to fetch balance");const[a,g]=await this._update_balance(e,t,r,i);return{balance:r,cached:g,holding:a}}async bankBalances(e){const t=Date.now(),n=await new QueryClientImpl$1(this._y_grpc).allBalances({address:e}),{balances:i}=n,o=this._g_chain.coins,r=oderom(o,(g,I)=>({[I.denom]:g})),a={};for(const g of i){const I=r[g.denom];o[I];const[s,c]=await this._update_balance(e,I,g,t);a[I]={balance:g,cached:c,holding:s}}return a}get hasRpc(){return!!this._g_network.rpcHost}listen(e,t){const n=this._g_network.rpcHost;if(!n)throw new Error("Cannot subscribe to events; no RPC host configured on network");const i=new WebSocket(`wss://${n}/websocket`);i.onopen=r=>{i.send(JSON.stringify({jsonrpc:"2.0",method:"subscribe",id:"0",params:{query:e.join(" AND ")}}))},i.onmessage=r=>{const a=JSON.parse(r.data||"{}"),g=a?.result?.data?.value,I=a?.result?.events?.["tx.hash"]?.[0]||"";g&&t(null,g,I)};let o=!1;return i.onclose=r=>{o||t(r)},i.onerror=r=>{t(r)},()=>{o=!0,i.close()}}onReceive(e,t){return this.listen(["tm.event='Tx'",`transfer.recipient='${e}'`],(n,i,o)=>{const r=i?.TxResult;t(n,r?{...r,hash:o}:void 0)})}onSend(e,t){return this.listen(["tm.event='Tx'",`transfer.sender='${e}'`],(n,i,o)=>{const r=i?.TxResult;t(n,r?{...r,hash:o}:void 0)})}async e2eInfoFor(e,t=""){return await with_timeout({duration:1e4,trip:()=>new NetworkTimeoutError,run:async()=>{const n=await new ServiceClientImpl$1(this._y_grpc).getTxsEvent({events:[`message.sender='${e}'`,...t?[`block.height<${t}`]:[]],pagination:{limit:"1"},orderBy:OrderBy.ORDER_BY_DESC});if(!n?.txs?.length)throw new UnpublishedAccountError(e,this._g_chain);const i=n.txs[0].authInfo.signerInfos;if(i.length!==1)throw new MultipleSignersError(e,this._g_chain);const{typeUrl:o,value:r}=i[0].publicKey;if(o!=="/cosmos.crypto.secp256k1.PubKey")throw new WrongKeyTypeError(e,this._g_chain);return await Secp256k1Key.init(),{sequence:i[0].sequence,height:n.txResponses[0].height,hash:n.txResponses[0].txhash,pubkey:Secp256k1Key.uncompressPublicKey(r.subarray(2))}}})}async ecdh(e,t=yw_chain.get()){const n=yw_account.get().secret,i=await Secrets.get(n);if(i?.security.type!=="none")throw new Error("Keyring not yet implemented");const r=await(await Secp256k1Key.import(await RuntimeKey.createRaw(string8_to_buffer(i.data)))).ecdh(e),a=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveBits","deriveKey"]);return zero_out(r),await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:ATU8_SHA256_STARSHELL,info:sha256_sync$1(text_to_buffer(t.id))},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}async ecdhEncrypt(e,t,n,i=yw_chain.get()){const o=await this.ecdh(e,i);return await encrypt(t,o,n)}async ecdhDecrypt(e,t,n,i=yw_chain.get()){const o=await this.ecdh(e,i);return await decrypt(t,o,n)}async isContract(e){return(await new ServiceClientImpl$1(this._y_grpc).getTxsEvent({events:[`message.contract_address='${e}'`],orderBy:OrderBy.ORDER_BY_ASC,pagination:{limit:"1"}})).txResponses.length>0}async received(e,t=0){const n=await new ServiceClientImpl$1(this._y_grpc).getTxsEvent({events:[`transfer.recipient='${e}'`,`tx.height>=${t}`],pagination:{limit:"100"}}),i=grpcWebClient_umd$1.exports.grpc.client(ServiceGetTxsEventDesc,{host:"wss://rpc.testnet.secretsaturn.net/websocket",transport:grpcWebClient_umd$1.exports.grpc.WebsocketTransport(),debug:!0});i.onHeaders(g=>{console.log(g);debugger}),i.onMessage(g=>{console.log(g);debugger}),i.onEnd((g,I,s)=>{console.log({w_status:g,s_msg:I,g_trailers:s});debugger;console.log("#end")}),i.start();const o=GetTxsEventRequest.fromPartial({events:["tm.event='Tx'"]});debugger;if(i.send({...o,...ServiceGetTxsEventDesc.requestType}),i.finishSend(),!n)throw new Error("Failed to fetch transaction");if(+(n.pagination?.total||1)>1)throw new Error("Not yet implemented");const a=[];for(const g of n.txResponses){const I=JSON.parse(g.rawLog)[0].events;for(const s of I)if(s.type==="transfer"){const c=fold_attrs(s);a.push({...c,height:g.height,timestamp:g.timestamp,txhash:g.txhash})}}return console.log(a),a}async bankSend(e,t,n,i,o,r,a="",g=BroadcastMode.BROADCAST_MODE_SYNC,I=yw_chain.get()){const s=I.coins[n],c=MsgSend.fromPartial({amount:[{denom:s.denom,amount:i.toString()}],fromAddress:e,toAddress:t}),B={typeUrl:"/cosmos.bank.v1beta1.MsgSend",value:MsgSend.encode(c).finish()};let d;const l=await Accounts.read();for(const[,C]of l.entries())if(e===Chains.addressFor(C.pubkey,I)){d=C;break}if(!d)throw syserr({title:"Critical Error",text:`Failed to locate account associated with ${e}`});const[E]=await this.broadcast({chain:I,account:d,msgs:[B],memo:a,gasLimit:o,gasFee:{price:r},mode:g});return{stage:"pending",chain:Chains.pathFrom(I),hash:E,gas_limit:`${o}`,msgs:[{events:{transfer:{sender:c.fromAddress,recipient:c.toAddress,amount:`${c.amount[0].amount}${c.amount[0].denom}`}}}]}}async broadcast(e){const{chain:t,msgs:n,memo:i,gasLimit:o,gasFee:r,account:a,mode:g}=e;let{amount:I,denom:s}=r;r.price&&(I=new BigNumber(r.price).times(o.toString()).toString(),s=Object.values(t.coins)[0].denom);const c=Chains.addressFor(a.pubkey,this._g_chain),B=a.secret,d=await Secrets.get(B);if(d?.security.type!=="none")throw new Error("Keyring not yet implemented");const E=(await Secp256k1Key.import(await RuntimeKey.create(()=>string8_to_buffer(d.data)),!0)).exportPublicKey(),C=TxBody.fromPartial({messages:n,memo:i}),f=TxBody.encode(C).finish(),u=await this._signer_data(c),p=AuthInfo.fromPartial({signerInfos:[{publicKey:{typeUrl:"/cosmos.crypto.secp256k1.PubKey",value:PubKey.encode(PubKey.fromPartial({key:E})).finish()},modeInfo:{single:{mode:SignMode.SIGN_MODE_DIRECT}},sequence:u.sequence+""}],fee:{amount:[{amount:I,denom:s}],gasLimit:o+""}}),y=AuthInfo.encode(p).finish(),D=await sign_doc(a,u.accountNumber,y,f,t.id),F=TxRaw.encode(TxRaw.fromPartial({bodyBytes:f,authInfoBytes:y,signatures:[D]})).finish();let G;switch(g){case BroadcastMode.BROADCAST_MODE_SYNC:{G=await new ServiceClientImpl$1(this._y_grpc).broadcastTx({txBytes:F,mode:BroadcastMode.BROADCAST_MODE_SYNC});break}case BroadcastMode.BROADCAST_MODE_ASYNC:{G=await new ServiceClientImpl$1(this._y_grpc).broadcastTx({txBytes:F,mode:BroadcastMode.BROADCAST_MODE_ASYNC});break}default:throw new Error(`Invalid broadcast mode: ${g}`)}const Q=G.txResponse?.txhash;if(!Q)throw syserr({title:"Provider Error",text:`The ${this._g_network.name} provider node failed to broadcast your transaction.`});return[Q,F]}async fetchParams(){(await new QueryClientImpl(this._y_grpc).params({})).params}async downloadTxn(e){const t=await new ServiceClientImpl$1(this._y_grpc).getTx({hash:e});if(!t?.tx||!t?.txResponse)throw syserr({title:"Transaction not fonud",text:`Transaction ${e} was not found`});const{tx:n,txResponse:i}=t;return tx_to_synced(this._p_chain,e,n,i)}async synchronize(e,t){const n=new ServiceClientImpl$1(this._y_grpc);let i=0n,o=0n,r=null;const a=await Histories.syncHeight(this._p_chain,[e,...t].join(`
`)),I=(await this.latestBlock()).block?.header?.height;if(!I)throw syserr({title:"Sync failed",text:`${this._g_network.name} returned an invalid block`});for(;;){const s=await n.getTxsEvent({events:t,orderBy:OrderBy.ORDER_BY_DESC,pagination:r?{limit:""+XG_SYNCHRONIZE_PAGINATION_LIMIT,key:r}:{limit:""+XG_SYNCHRONIZE_PAGINATION_LIMIT,offset:""+i}}),{txs:c,txResponses:B}=s;if(await Incidents.open(E=>Histories.open(async C=>{const f=c.length;o+=BigInt(f);for(let u=0;u<f;u++){const p=c[u],y=B[u],D=y.txhash,F=Incidents.pathFor(e,D);if(E.at(F)?.data?.stage!=="synced"){const h=tx_to_synced(this._p_chain,D,p,y);await E.record(D,{type:e,time:new Date(h.timestamp).getTime(),data:h},C)}const Q=BigInt(y.height);if(a<Q)return!0}return!1})))break;const l=s.pagination?.total||"0";if(l&&BigInt(l)-o>0n){r=s.pagination.nextKey,i+=XG_SYNCHRONIZE_PAGINATION_LIMIT;continue}break}await Histories.updateSyncInfo(this._p_chain,[e,...t].join(`
`),I)}async synchronizeAll(e){await this.synchronize("tx_in",[`transfer.recipient='${e}'`]),await this.synchronize("tx_out",[`message.sender='${e}'`])}}const Medias=create_store_class({store:SI_STORE_MEDIA,extension:"map",class:class extends WritableStoreMap{}}),Tags=create_store_class({store:SI_STORE_TAGS,class:class extends WritableStore{static tagPathFor(e){return`/tag.${e.index}`}getTag(e){return this._w_cache.registry[e]??null}getIdsFor(e){return this._w_cache.map[e]??[]}getTagsFor(e){return this.getIdsFor(e).map(t=>this.getTag(t)).filter(t=>!!t)}setIdsFor(e,t){return this._w_cache.map[e]=t,this.save()}setTagsFor(e,t){return this.setIdsFor(e,t.map(n=>n.index))}}}),subscriber_queue=[];function readable(A,e){return{subscribe:writable(A,e).subscribe}}function writable(A,e=noop$1){let t;const n=new Set;function i(a){if(safe_not_equal(A,a)&&(A=a,t)){const g=!subscriber_queue.length;for(const I of n)I[1](),subscriber_queue.push(I,A);if(g){for(let I=0;I<subscriber_queue.length;I+=2)subscriber_queue[I][0](subscriber_queue[I+1]);subscriber_queue.length=0}}}function o(a){i(a(A))}function r(a,g=noop$1){const I=[a,g];return n.add(I),n.size===1&&(t=e(i)||noop$1),a(A),()=>{n.delete(I),n.size===0&&(t(),t=null)}}return{set:i,update:o,subscribe:r}}function derived(A,e,t){const n=!Array.isArray(A),i=n?[A]:A,o=e.length<2;return readable(t,r=>{let a=!1;const g=[];let I=0,s=noop$1;const c=()=>{if(I)return;s();const d=e(n?g[0]:g,r);o?r(d):s=is_function(d)?d:noop$1},B=i.map((d,l)=>subscribe(d,E=>{g[l]=E,I&=~(1<<l),a&&c()},()=>{I|=1<<l}));return a=!0,c(),function(){run_all(B),s()}})}var Screen_svelte_svelte_type_style_lang="";const get_help_slot_changes=A=>({}),get_help_slot_context=A=>({});function create_if_block$j(A){let e,t;const n=A[21].help,i=create_slot(n,A,A[20],get_help_slot_context);return{c(){e=element("div"),i&&i.c(),attr(e,"class","display_none")},m(o,r){insert(o,e,r),i&&i.m(e,null),A[23](e),t=!0},p(o,r){i&&i.p&&(!t||r&1048576)&&update_slot_base(i,n,o,o[20],t?get_slot_changes(n,o[20],r,get_help_slot_changes):get_all_dirty_from_scope(o[20]),get_help_slot_context)},i(o){t||(transition_in(i,o),t=!0)},o(o){transition_out(i,o),t=!1},d(o){o&&detach(e),i&&i.d(o),A[23](null)}}}function create_fragment$w(A){let e,t,n,i,o,r,a;const g=A[21].default,I=create_slot(g,A,A[20],null);let s="help"in A[10]&&create_if_block$j(A);return{c(){e=element("div"),t=element("form"),I&&I.c(),n=space(),s&&s.c(),attr(t,"class",i="screen "+A[1]+" svelte-a0naqi"),attr(t,"data-s2-exit",A[9]),attr(t,"style",A[3]),attr(t,"autocomplete","off"),toggle_class(t,"flex",!0),toggle_class(t,"scroll",!0),toggle_class(t,"nav",A[7]),toggle_class(t,"progress",A[0]),toggle_class(t,"transparent",A[2]),toggle_class(t,"sublimate",!1),toggle_class(t,"blur",A[6]),attr(e,"class","bounds svelte-a0naqi"),toggle_class(e,"slides",A[8])},m(c,B){insert(c,e,B),append(e,t),I&&I.m(t,null),append(t,n),s&&s.m(t,null),A[24](t),o=!0,r||(a=[listen(t,"submit",submit_handler_1),listen(t,"submit",A[22])],r=!0)},p(c,[B]){I&&I.p&&(!o||B&1048576)&&update_slot_base(I,g,c,c[20],o?get_slot_changes(g,c[20],B,null):get_all_dirty_from_scope(c[20]),null),"help"in c[10]?s?(s.p(c,B),B&1024&&transition_in(s,1)):(s=create_if_block$j(c),s.c(),transition_in(s,1),s.m(t,null)):s&&(group_outros(),transition_out(s,1,1,()=>{s=null}),check_outros()),(!o||B&2&&i!==(i="screen "+c[1]+" svelte-a0naqi"))&&attr(t,"class",i),(!o||B&8)&&attr(t,"style",c[3]),B&2&&toggle_class(t,"flex",!0),B&2&&toggle_class(t,"scroll",!0),B&130&&toggle_class(t,"nav",c[7]),B&3&&toggle_class(t,"progress",c[0]),B&6&&toggle_class(t,"transparent",c[2]),B&2&&toggle_class(t,"sublimate",!1),B&66&&toggle_class(t,"blur",c[6])},i(c){o||(transition_in(I,c),transition_in(s),o=!0)},o(c){transition_out(I,c),transition_out(s),o=!1},d(c){c&&detach(e),I&&I.d(c),s&&s.d(),A[24](null),r=!1,run_all(a)}}}const submit_handler_1=A=>{A.preventDefault()};function instance$v(A,e,t){let n,i;component_subscribe(A,yw_nav_visible,k=>t(25,n=k)),component_subscribe(A,yw_blur,k=>t(6,i=k));let{$$slots:o={},$$scope:r}=e;const a=compute_slots(o);let{nav:g=!1}=e;const I=g;let{debug:s=""}=e,{progress:c=null}=e,{full:B=!1}=e,{keyed:d=!1}=e,{classNames:l=""}=e;const E=getContext("page");let{leaves:C=!1}=e,{swipes:f=!1}=e,{root:u=E.index===0}=e,{slides:p=!C&&!f&&!u}=e;const y=p;let{form:D=!1}=e,{transparent:F=!1}=e,G,Q=null;const h=C?"leaves":f?"swipes":"";createEventDispatcher(),onMount(()=>{if(E?E.on({focus(){set_store_value(yw_nav_visible,n=I,n)}}):console.warn(`${s||"unknown"} Screen missing page context`),d){let k=0;new MutationObserver(async m=>{if(m[0]?.addedNodes.length)try{k=G.scrollTop}catch{}else m[0]?.removedNodes.length&&G&&t(4,G.scrollTop=k,G)}).observe(G,{childList:!0})}});let{style:_=""}=e;function b(k){bubble.call(this,A,k)}function w(k){binding_callbacks[k?"unshift":"push"](()=>{Q=k,t(5,Q)})}function S(k){binding_callbacks[k?"unshift":"push"](()=>{G=k,t(4,G)})}return A.$$set=k=>{"nav"in k&&t(11,g=k.nav),"debug"in k&&t(12,s=k.debug),"progress"in k&&t(0,c=k.progress),"full"in k&&t(13,B=k.full),"keyed"in k&&t(14,d=k.keyed),"classNames"in k&&t(1,l=k.classNames),"leaves"in k&&t(15,C=k.leaves),"swipes"in k&&t(16,f=k.swipes),"root"in k&&t(17,u=k.root),"slides"in k&&t(18,p=k.slides),"form"in k&&t(19,D=k.form),"transparent"in k&&t(2,F=k.transparent),"style"in k&&t(3,_=k.style),"$$scope"in k&&t(20,r=k.$$scope)},[c,l,F,_,G,Q,i,I,y,h,a,g,s,B,d,C,f,u,p,D,r,o,b,w,S]}class Screen extends SvelteComponent{constructor(e){super(),init(this,e,instance$v,create_fragment$w,safe_not_equal,{nav:11,debug:12,progress:0,full:13,keyed:14,classNames:1,leaves:15,swipes:16,root:17,slides:18,form:19,transparent:2,style:3})}}var StarShellLogo_svelte_svelte_type_style_lang="";function create_fragment$v(A){let e,t,n,i,o,r,a;return{c(){e=element("picture"),t=element("source"),n=space(),i=element("img"),attr(t,"srcset",A[3]),attr(t,"media","(min-resolution: 2dppx)"),attr(i,"alt",A[1]),src_url_equal(i.src,o=A[2])||attr(i,"src",o),attr(i,"class","svelte-5d3u97"),attr(e,"class","no-margin logo svelte-5d3u97"),set_style(e,"width",A[0]+"px"),set_style(e,"height",A[0]+"px")},m(g,I){insert(g,e,I),append(e,t),append(e,n),append(e,i),r||(a=listen(e,"click",A[6]),r=!0)},p:noop$1,i:noop$1,o:noop$1,d(g){g&&detach(e),r=!1,a()}}}function instance$u(A,e,t){let{dim:n}=e;const i=n;let{alt:o="StarShell logo"}=e;const r=o,a=c=>`/media/vendor/logo-${c}px.png`,g=a(i),I=a(i*2);function s(c){bubble.call(this,A,c)}return A.$$set=c=>{"dim"in c&&t(4,n=c.dim),"alt"in c&&t(5,o=c.alt)},[i,r,g,I,n,o,s]}class StarShellLogo extends SvelteComponent{constructor(e){super(),init(this,e,instance$u,create_fragment$v,safe_not_equal,{dim:4,alt:5})}}var SX_ICON_ADD$1=`<svg xmlns="http://www.w3.org/2000/svg" width="8" height="8">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="3" width="2" height="8" />
		<rect y="5" width="2" height="8" transform="rotate(-90 0 5)" />
	</g>
</svg>`,OverlaySelect_svelte_svelte_type_style_lang="";const get_rows_slot_changes=A=>({}),get_rows_slot_context=A=>({});function create_fragment$u(A){let e,t,n,i,o,r,a,g,I,s,c;const B=A[4].rows,d=create_slot(B,A,A[3],get_rows_slot_context);return{c(){e=element("div"),t=element("div"),n=element("div"),i=element("h3"),o=text(A[1]),r=space(),a=element("div"),d&&d.c(),attr(i,"class","svelte-1f5uzt4"),attr(n,"class","top svelte-1f5uzt4"),attr(a,"class","rows svelte-1f5uzt4"),attr(t,"class","overlay select svelte-1f5uzt4"),attr(e,"class","cancel svelte-1f5uzt4"),toggle_class(e,"showing",A[2])},m(l,E){insert(l,e,E),append(e,t),append(t,n),append(n,i),append(i,o),append(t,r),append(t,a),d&&d.m(a,null),I=!0,s||(c=listen(e,"click",A[5]),s=!0)},p(l,[E]){(!I||E&2)&&set_data(o,l[1]),d&&d.p&&(!I||E&8)&&update_slot_base(d,B,l,l[3],I?get_slot_changes(B,l[3],E,get_rows_slot_changes):get_all_dirty_from_scope(l[3]),get_rows_slot_context),E&4&&toggle_class(e,"showing",l[2])},i(l){I||(transition_in(d,l),g&&g.end(1),I=!0)},o(l){transition_out(d,l),g=create_out_transition(t,pause,{}),I=!1},d(l){l&&detach(e),d&&d.d(l),l&&g&&g.end(),s=!1,c()}}}function pause(A,e){return{duration:200}}function instance$t(A,e,t){let n;component_subscribe(A,yw_blur,s=>t(6,n=s));let{$$slots:i={},$$scope:o}=e,{title:r}=e,{open:a=!0}=e,g=!1;setTimeout(()=>{t(2,g=!0)},10);const I=()=>{t(2,g=!1),t(0,a=!1)};return A.$$set=s=>{"title"in s&&t(1,r=s.title),"open"in s&&t(0,a=s.open),"$$scope"in s&&t(3,o=s.$$scope)},A.$$.update=()=>{A.$$.dirty&1&&set_store_value(yw_blur,n=a,n)},[a,r,g,o,i,I]}class OverlaySelect extends SvelteComponent{constructor(e){super(),init(this,e,instance$t,create_fragment$u,safe_not_equal,{title:1,open:0})}}function create_if_block$i(A){let e,t=A[0].outerHTML+"",n;return{c(){e=new HtmlTag(!1),n=empty(),e.a=n},m(i,o){e.m(t,i,o),insert(i,n,o)},p(i,o){o&1&&t!==(t=i[0].outerHTML+"")&&e.p(t)},d(i){i&&detach(n),i&&e.d()}}}function create_fragment$t(A){let e,t=A[0]?.outerHTML&&create_if_block$i(A);return{c(){t&&t.c(),e=empty()},m(n,i){t&&t.m(n,i),insert(n,e,i)},p(n,[i]){n[0]?.outerHTML?t?t.p(n,i):(t=create_if_block$i(n),t.c(),t.m(e.parentNode,e)):t&&(t.d(1),t=null)},i:noop$1,o:noop$1,d(n){t&&t.d(n),n&&detach(e)}}}function instance$s(A,e,t){let{element:n}=e;return A.$$set=i=>{"element"in i&&t(0,n=i.element)},[n]}class Put extends SvelteComponent{constructor(e){super(),init(this,e,instance$s,create_fragment$t,safe_not_equal,{element:0})}}const qs=(A,e)=>A.querySelector(e);function dd(A,e={},t=[]){const n=document.createElement(A);for(const i in e)n.setAttribute(i,e[i]+"");for(const i of t)n.append(i);return n}function open_external_link(A){chrome.tabs.create({url:A})}function picture(A,e,t={}){const{default:n,16:i,32:o,48:r,64:a,96:g,128:I,256:s}=A,c=e.medias,B=i?c.at(i)?.data:null,d=o?c.at(o)?.data:null,l=r?c.at(r)?.data:null,E=a?c.at(a)?.data:null,C=g?c.at(g)?.data:null,f=I?c.at(I)?.data:null,u=s?c.at(s)?.data:null,p=c.at(n).data,y=B||d||l||E||C||f||u,D=e.dim,F=D*2;let G=null,Q=null;return y&&(D<=64?D<=32?D<=16?G=y:G=d||l||E||C||f||u:D<=48?G=l||E||C||f||u:G=E||C||f||u:D<=128?D<=96?G=C||f||u:G=f||u:D<=256&&(G=u),F<=64?F<=32?F<=16?Q=y:Q=d||l||E||C||f||u:F<=48?Q=l||E||C||f||u:Q=E||C||f||u:F<=128?F<=96?Q=C||f||u:Q=f||u:F<=256&&(Q=u)),dd("picture",{...t},[...Q?[dd("source",{srcset:Q,media:"(min-resolution: 2dppx)"})]:[],dd("img",{src:G||p,alt:e.alt||""})])}const Pfps=create_store_class({store:SI_STORE_PFPS,extension:"map",class:class extends WritableStoreMap{static async load(e,t){const n=await Pfps.at(e);return n?Pfps.render(n,t):null}static render(e,t){const n=`width:${t.dim}px; height:${t.dim}px;`;switch(e.type){case"plain":return picture(e.image,t,{class:"global_pfp",style:n})}}}});var PfpDisplay_svelte_svelte_type_style_lang="";function create_else_block_1$3(A){let e,t=(A[1][0]||"")+"",n,i,o,r={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_2$1,then:create_then_block_2$1,catch:create_catch_block_2$1,value:21};return handle_promise(A[7](),r),{c(){e=element("span"),n=text(t),i=space(),o=empty(),r.block.c(),attr(e,"class","icon-dom svelte-mmgef2"),attr(e,"style",A[4])},m(a,g){insert(a,e,g),append(e,n),insert(a,i,g),insert(a,o,g),r.block.m(a,r.anchor=g),r.mount=()=>o.parentNode,r.anchor=o},p(a,g){A=a},i:noop$1,o:noop$1,d(a){a&&detach(e),a&&detach(i),a&&detach(o),r.block.d(a),r.token=null,r=null}}}function create_if_block$h(A){let e,t,n={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$6,then:create_then_block$6,catch:create_catch_block_1$4,value:20,blocks:[,,,]};return handle_promise(A[6](),n),{c(){e=empty(),n.block.c()},m(i,o){insert(i,e,o),n.block.m(i,n.anchor=o),n.mount=()=>e.parentNode,n.anchor=e,t=!0},p(i,o){A=i,update_await_block_branch(n,A,o)},i(i){t||(transition_in(n.block),t=!0)},o(i){for(let o=0;o<3;o+=1){const r=n.blocks[o];transition_out(r)}t=!1},d(i){i&&detach(e),n.block.d(i),n.token=null,n=null}}}function create_catch_block_2$1(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_then_block_2$1(A){let e;return{c(){e=text("_")},m(t,n){insert(t,e,n)},d(t){t&&detach(e)}}}function create_pending_block_2$1(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_catch_block_1$4(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$6(A){let e,t,n,i,o;const r=[create_if_block_1$b,create_else_block$6],a=[];function g(s,c){return s[20]?0:1}e=g(A),t=a[e]=r[e](A);let I={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$4,then:create_then_block_1$4,catch:create_catch_block$6,value:21};return handle_promise(A[7](),I),{c(){t.c(),n=space(),i=empty(),I.block.c()},m(s,c){a[e].m(s,c),insert(s,n,c),insert(s,i,c),I.block.m(s,I.anchor=c),I.mount=()=>i.parentNode,I.anchor=i,o=!0},p(s,c){A=s,t.p(A,c)},i(s){o||(transition_in(t),o=!0)},o(s){transition_out(t),o=!1},d(s){a[e].d(s),s&&detach(n),s&&detach(i),I.block.d(s),I.token=null,I=null}}}function create_else_block$6(A){let e;return{c(){e=element("span"),e.textContent="Error",attr(e,"class","error")},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$b(A){let e,t;return e=new Put({props:{element:A[20]}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p:noop$1,i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_catch_block$6(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_then_block_1$4(A){let e;return{c(){e=text("_")},m(t,n){insert(t,e,n)},d(t){t&&detach(e)}}}function create_pending_block_1$4(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_pending_block$6(A){let e;return{c(){e=text("Loading pfp...")},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_fragment$s(A){let e,t,n,i;const o=[create_if_block$h,create_else_block_1$3],r=[];function a(g,I){return g[0]?0:1}return t=a(A),n=r[t]=o[t](A),{c(){e=element("span"),n.c(),attr(e,"class","global_pfp tile "+A[2]+" svelte-mmgef2"),attr(e,"style",A[5]),attr(e,"data-path",A[0]),toggle_class(e,"satin",A[3]==="satin")},m(g,I){insert(g,e,I),r[t].m(e,null),i=!0},p(g,[I]){let s=t;t=a(g),t===s?r[t].p(g,I):(group_outros(),transition_out(r[s],1,1,()=>{r[s]=null}),check_outros(),n=r[t],n?n.p(g,I):(n=r[t]=o[t](g),n.c()),transition_in(n,1),n.m(e,null)),(!i||I&1)&&attr(e,"data-path",g[0])},i(g){i||(transition_in(n),i=!0)},o(g){transition_out(n),i=!1},d(g){g&&detach(e),r[t].d()}}}function instance$r(A,e,t){let n;component_subscribe(A,yw_store_medias,G=>t(16,n=G));const i=createEventDispatcher();let{resource:o=null}=e;const r=o;let{ref:a=r?.pfp||""}=e,{name:g=r?.name||""}=e;const I=g;let{dim:s}=e;const c=s;let{circular:B=!1}=e;const d=B?"":"square";let{bg:l=void 0}=e;const E=l;let{genStyle:C=""}=e;const f=`width:${c}px; height:${c}px; `+(C||"")+(a?`font-size:${c}px;`:"")+(B?`border-radius:${c}px;`:"");let{rootStyle:u=""}=e;const p=u;let{settle:y=void 0}=e;async function D(){const G=n||await Medias.read(),Q=await Pfps.load(a,{alt:I,dim:c,medias:G});return queueMicrotask(()=>{i("loaded")}),Q}function F(){return y&&queueMicrotask(()=>y()),new Promise(F_NOOP)}return A.$$set=G=>{"resource"in G&&t(8,o=G.resource),"ref"in G&&t(0,a=G.ref),"name"in G&&t(9,g=G.name),"dim"in G&&t(10,s=G.dim),"circular"in G&&t(11,B=G.circular),"bg"in G&&t(12,l=G.bg),"genStyle"in G&&t(13,C=G.genStyle),"rootStyle"in G&&t(14,u=G.rootStyle),"settle"in G&&t(15,y=G.settle)},[a,I,d,E,f,p,D,F,o,g,s,B,l,C,u,y]}class PfpDisplay extends SvelteComponent{constructor(e){super(),init(this,e,instance$r,create_fragment$s,safe_not_equal,{resource:8,ref:0,name:9,dim:10,circular:11,bg:12,genStyle:13,rootStyle:14,settle:15})}}var SX_ICON_CLOSE=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-close-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-close-fg" d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
</svg>
`,Close_svelte_svelte_type_style_lang="";function create_fragment$r(A){let e,t,n,i;return{c(){e=element("div"),attr(e,"class","close icon svelte-1qi9cbu"),attr(e,"style",t=A[1]?`--bg-color:${A[1]};`:""),toggle_class(e,"absolute",A[0])},m(o,r){insert(o,e,r),e.innerHTML=SX_ICON_CLOSE,n||(i=listen(e,"click",A[3]),n=!0)},p(o,[r]){r&2&&t!==(t=o[1]?`--bg-color:${o[1]};`:"")&&attr(e,"style",t),r&1&&toggle_class(e,"absolute",o[0])},i:noop$1,o:noop$1,d(o){o&&detach(e),n=!1,i()}}}function instance$q(A,e,t){let{absolute:n=!1}=e,{heightless:i=!1}=e,{bgColor:o=""}=e;function r(a){bubble.call(this,A,a)}return A.$$set=a=>{"absolute"in a&&t(0,n=a.absolute),"heightless"in a&&t(2,i=a.heightless),"bgColor"in a&&t(1,o=a.bgColor)},[n,o,i,r]}class Close extends SvelteComponent{constructor(e){super(),init(this,e,instance$q,create_fragment$r,safe_not_equal,{absolute:0,heightless:2,bgColor:1})}}var Row_svelte_svelte_type_style_lang="";const get_below_slot_changes=A=>({}),get_below_slot_context=A=>({}),get_tags_slot_changes=A=>({}),get_tags_slot_context=A=>({}),get_right_slot_changes=A=>({}),get_right_slot_context=A=>({}),get_status_slot_changes=A=>({}),get_status_slot_context=A=>({}),get_detail_slot_changes=A=>({}),get_detail_slot_context=A=>({}),get_icon_slot_changes_1=A=>({}),get_icon_slot_context_1=A=>({}),get_icon_slot_changes=A=>({}),get_icon_slot_context=A=>({});function fallback_block_3(A){let e,t;return e=new PfpDisplay({props:{ref:A[12],name:A[10],dim:A[13]}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p:noop$1,i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function fallback_block_2(A){let e;const t=A[26].icon,n=create_slot(t,A,A[25],get_icon_slot_context_1),i=n||fallback_block_3(A);return{c(){i&&i.c()},m(o,r){i&&i.m(o,r),e=!0},p(o,r){n&&n.p&&(!e||r[0]&33554432)&&update_slot_base(n,t,o,o[25],e?get_slot_changes(t,o[25],r,get_icon_slot_changes_1):get_all_dirty_from_scope(o[25]),get_icon_slot_context_1)},i(o){e||(transition_in(i,o),e=!0)},o(o){transition_out(i,o),e=!1},d(o){i&&i.d(o)}}}function create_if_block_9$2(A){let e;return{c(){e=element("span"),e.textContent=`(${A[11]})`,attr(e,"class","postname svelte-o4urkb")},m(t,n){insert(t,e,n)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_8$2(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_if_block_5$2(A){let e,t,n,i;const o=[create_if_block_6$2,create_if_block_7$2],r=[];function a(g,I){return g[5]||g[2]||g[17].detail?0:g[4]?1:-1}return~(t=a(A))&&(n=r[t]=o[t](A)),{c(){e=element("div"),n&&n.c(),attr(e,"class","subtitle svelte-o4urkb")},m(g,I){insert(g,e,I),~t&&r[t].m(e,null),i=!0},p(g,I){let s=t;t=a(g),t===s?~t&&r[t].p(g,I):(n&&(group_outros(),transition_out(r[s],1,1,()=>{r[s]=null}),check_outros()),~t?(n=r[t],n?n.p(g,I):(n=r[t]=o[t](g),n.c()),transition_in(n,1),n.m(e,null)):n=null)},i(g){i||(transition_in(n),i=!0)},o(g){transition_out(n),i=!1},d(g){g&&detach(e),~t&&r[t].d()}}}function create_if_block_7$2(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_if_block_6$2(A){let e,t;const n=A[26].detail,i=create_slot(n,A,A[25],get_detail_slot_context),o=i||fallback_block_1$1(A);return{c(){e=element("span"),o&&o.c(),attr(e,"class","detail svelte-o4urkb")},m(r,a){insert(r,e,a),o&&o.m(e,null),t=!0},p(r,a){i?i.p&&(!t||a[0]&33554432)&&update_slot_base(i,n,r,r[25],t?get_slot_changes(n,r[25],a,get_detail_slot_changes):get_all_dirty_from_scope(r[25]),get_detail_slot_context):o&&o.p&&(!t||a[0]&100)&&o.p(r,t?a:[-1,-1])},i(r){t||(transition_in(o,r),t=!0)},o(r){transition_out(o,r),t=!1},d(r){r&&detach(e),o&&o.d(r)}}}function fallback_block_1$1(A){let e,t=(A[5]||A[2])+"",n;return{c(){e=text(A[6]),n=text(t)},m(i,o){insert(i,e,o),insert(i,n,o)},p(i,o){o[0]&64&&set_data(e,i[6]),o[0]&36&&t!==(t=(i[5]||i[2])+"")&&set_data(n,t)},d(i){i&&detach(e),i&&detach(n)}}}function create_if_block_3$6(A){let e,t,n,i,o,r={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$3,then:create_then_block_1$3,catch:create_catch_block_1$3,value:33};handle_promise(n=A[16](A[0]),r);let a=A[1]&&create_if_block_4$5(A);return{c(){e=element("div"),t=element("span"),r.block.c(),i=space(),a&&a.c(),o=empty(),attr(t,"class","number svelte-o4urkb"),attr(e,"class","amount svelte-o4urkb")},m(g,I){insert(g,e,I),append(e,t),r.block.m(t,r.anchor=null),r.mount=()=>t,r.anchor=null,insert(g,i,I),a&&a.m(g,I),insert(g,o,I)},p(g,I){A=g,r.ctx=A,I[0]&1&&n!==(n=A[16](A[0]))&&handle_promise(n,r)||update_await_block_branch(r,A,I),A[1]?a?a.p(A,I):(a=create_if_block_4$5(A),a.c(),a.m(o.parentNode,o)):a&&(a.d(1),a=null)},i:noop$1,o:noop$1,d(g){g&&detach(e),r.block.d(),r.token=null,r=null,g&&detach(i),a&&a.d(g),g&&detach(o)}}}function create_if_block_2$9(A){let e;const t=A[26].status,n=create_slot(t,A,A[25],get_status_slot_context);return{c(){n&&n.c()},m(i,o){n&&n.m(i,o),e=!0},p(i,o){n&&n.p&&(!e||o[0]&33554432)&&update_slot_base(n,t,i,i[25],e?get_slot_changes(t,i[25],o,get_status_slot_changes):get_all_dirty_from_scope(i[25]),get_status_slot_context)},i(i){e||(transition_in(n,i),e=!0)},o(i){transition_out(n,i),e=!1},d(i){n&&n.d(i)}}}function create_catch_block_1$3(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block_1$3(A){let e,t;return{c(){e=element("span"),t=text(A[0])},m(n,i){insert(n,e,i),append(e,t)},p(n,i){i[0]&1&&set_data(t,n[0])},d(n){n&&detach(e)}}}function create_pending_block_1$3(A){let e,t;return{c(){e=element("span"),t=text(A[9]),attr(e,"class","font-family_mono svelte-o4urkb")},m(n,i){insert(n,e,i),append(e,t)},p(n,i){i[0]&512&&set_data(t,n[9])},d(n){n&&detach(e)}}}function create_if_block_4$5(A){let e,t,n,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$5,then:create_then_block$5,catch:create_catch_block$5,value:32};return handle_promise(n=A[1],i),{c(){e=element("div"),t=element("span"),i.block.c(),attr(t,"class","fiat svelte-o4urkb")},m(o,r){insert(o,e,r),append(e,t),i.block.m(t,i.anchor=null),i.mount=()=>t,i.anchor=null},p(o,r){A=o,i.ctx=A,r[0]&2&&n!==(n=A[1])&&handle_promise(n,i)||update_await_block_branch(i,A,r)},d(o){o&&detach(e),i.block.d(),i.token=null,i=null}}}function create_catch_block$5(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block$5(A){let e=A[32]+"",t;return{c(){t=text(e)},m(n,i){insert(n,t,i)},p(n,i){i[0]&2&&e!==(e=n[32]+"")&&set_data(t,e)},d(n){n&&detach(t)}}}function create_pending_block$5(A){let e;return{c(){e=text("$...")},m(t,n){insert(t,e,n)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$a(A){let e;const t=A[26].right,n=create_slot(t,A,A[25],get_right_slot_context);return{c(){n&&n.c()},m(i,o){n&&n.m(i,o),e=!0},p(i,o){n&&n.p&&(!e||o[0]&33554432)&&update_slot_base(n,t,i,i[25],e?get_slot_changes(t,i[25],o,get_right_slot_changes):get_all_dirty_from_scope(i[25]),get_right_slot_context)},i(i){e||(transition_in(n,i),e=!0)},o(i){transition_out(n,i),e=!1},d(i){n&&n.d(i)}}}function create_if_block$g(A){let e;const t=A[26].tags,n=create_slot(t,A,A[25],get_tags_slot_context);return{c(){n&&n.c()},m(i,o){n&&n.m(i,o),e=!0},p(i,o){n&&n.p&&(!e||o[0]&33554432)&&update_slot_base(n,t,i,i[25],e?get_slot_changes(t,i[25],o,get_tags_slot_changes):get_all_dirty_from_scope(i[25]),get_tags_slot_context)},i(i){e||(transition_in(n,i),e=!0)},o(i){transition_out(n,i),e=!1},d(i){n&&n.d(i)}}}function create_fragment$q(A){let e,t,n,i,o,r,a,g,I,s,c,B,d,l,E,C,f,u,p,y,D,F,G,Q,h;const _=A[26].icon,b=create_slot(_,A,A[25],get_icon_slot_context),w=b||fallback_block_2(A);let S=A[11]&&create_if_block_9$2(A),k=A[3]&&create_if_block_8$2(),m=(A[4]||A[2]||A[5]||A[15].length||A[17].detail)&&create_if_block_5$2(A);const N=[create_if_block_2$9,create_if_block_3$6],H=[];function M(q,P){return q[17].status?0:q[0]?1:-1}~(f=M(A))&&(u=H[f]=N[f](A));let U=A[17].right&&create_if_block_1$a(A),v=(A[15].length||A[17].tags)&&create_if_block$g(A);const L=A[26].below,x=create_slot(L,A,A[25],get_below_slot_context);return{c(){e=element("div"),t=element("div"),n=element("span"),w&&w.c(),o=space(),r=element("span"),a=element("span"),g=element("div"),I=element("span"),s=element("span"),c=text(A[10]),B=space(),S&&S.c(),d=space(),k&&k.c(),l=space(),m&&m.c(),E=space(),C=element("span"),u&&u.c(),p=space(),U&&U.c(),y=space(),D=element("div"),v&&v.c(),F=space(),x&&x.c(),attr(n,"class",i="icon "+A[8]+" svelte-o4urkb"),attr(s,"class","text svelte-o4urkb"),attr(I,"class","name svelte-o4urkb"),attr(g,"class","title svelte-o4urkb"),attr(a,"class","main part svelte-o4urkb"),attr(C,"class","status part svelte-o4urkb"),attr(r,"class","content svelte-o4urkb"),attr(t,"class","banner svelte-o4urkb"),attr(D,"class","rest svelte-o4urkb"),attr(e,"class","row "+A[14]+" svelte-o4urkb"),attr(e,"style",A[7])},m(q,P){insert(q,e,P),append(e,t),append(t,n),w&&w.m(n,null),append(t,o),append(t,r),append(r,a),append(a,g),append(g,I),append(I,s),append(s,c),append(s,B),S&&S.m(s,null),append(g,d),k&&k.m(g,null),append(a,l),m&&m.m(a,null),append(r,E),append(r,C),~f&&H[f].m(C,null),append(t,p),U&&U.m(t,null),append(e,y),append(e,D),v&&v.m(D,null),append(D,F),x&&x.m(D,null),G=!0,Q||(h=listen(e,"click",A[27]),Q=!0)},p(q,P){b?b.p&&(!G||P[0]&33554432)&&update_slot_base(b,_,q,q[25],G?get_slot_changes(_,q[25],P,get_icon_slot_changes):get_all_dirty_from_scope(q[25]),get_icon_slot_context):w&&w.p&&(!G||P[0]&33554432)&&w.p(q,G?P:[-1,-1]),(!G||P[0]&256&&i!==(i="icon "+q[8]+" svelte-o4urkb"))&&attr(n,"class",i),q[11]&&S.p(q,P),q[3]?k||(k=create_if_block_8$2(),k.c(),k.m(g,null)):k&&(k.d(1),k=null),q[4]||q[2]||q[5]||q[15].length||q[17].detail?m?(m.p(q,P),P[0]&131124&&transition_in(m,1)):(m=create_if_block_5$2(q),m.c(),transition_in(m,1),m.m(a,null)):m&&(group_outros(),transition_out(m,1,1,()=>{m=null}),check_outros());let O=f;f=M(q),f===O?~f&&H[f].p(q,P):(u&&(group_outros(),transition_out(H[O],1,1,()=>{H[O]=null}),check_outros()),~f?(u=H[f],u?u.p(q,P):(u=H[f]=N[f](q),u.c()),transition_in(u,1),u.m(C,null)):u=null),q[17].right?U?(U.p(q,P),P[0]&131072&&transition_in(U,1)):(U=create_if_block_1$a(q),U.c(),transition_in(U,1),U.m(t,null)):U&&(group_outros(),transition_out(U,1,1,()=>{U=null}),check_outros()),q[15].length||q[17].tags?v?(v.p(q,P),P[0]&131072&&transition_in(v,1)):(v=create_if_block$g(q),v.c(),transition_in(v,1),v.m(D,F)):v&&(group_outros(),transition_out(v,1,1,()=>{v=null}),check_outros()),x&&x.p&&(!G||P[0]&33554432)&&update_slot_base(x,L,q,q[25],G?get_slot_changes(L,q[25],P,get_below_slot_changes):get_all_dirty_from_scope(q[25]),get_below_slot_context),(!G||P[0]&128)&&attr(e,"style",q[7])},i(q){G||(transition_in(w,q),transition_in(m),transition_in(u),transition_in(U),transition_in(v),transition_in(x,q),G=!0)},o(q){transition_out(w,q),transition_out(m),transition_out(u),transition_out(U),transition_out(v),transition_out(x,q),G=!1},d(q){q&&detach(e),w&&w.d(q),S&&S.d(),k&&k.d(),m&&m.d(),~f&&H[f].d(),U&&U.d(),v&&v.d(),x&&x.d(q),Q=!1,h()}}}function instance$p(A,e,t){let n;component_subscribe(A,yw_store_tags,U=>t(28,n=U));let{$$slots:i={},$$scope:o}=e;const r=compute_slots(i);let{resourcePath:a=""}=e;const g=a;let{resource:I=null}=e;const s=I;let{name:c=s?.name}=e;const B=c;let{postname:d=""}=e;const l=d;let{pfp:E=s?.pfp}=e;const C=E;let{pfpDim:f=36}=e;const u=f;let{amount:p=""}=e,{fiat:y=""}=e,{symbol:D=""}=e,{lockIcon:F=!1}=e,{address:G=""}=e,{detail:Q=""}=e,{prefix:h=""}=e,{rootStyle:_=""}=e,{rootClasses:b=""}=e;const w=b;let{iconClass:S=""}=e;const k=n?.getTagsFor(g)||[],m=new Set;onDestroy(()=>{for(const U of m)clearInterval(U)});let N="";async function H(U){const v=["\u25DC \u25DD"," \u02C9\u25DE"," \u02CD\u25DD","\u25DF \u25DE","\u25DC\u02CD ","\u25DF\u02C9 "];let L=0;if(t(9,N=v[0]),U instanceof Promise){const x=window.setInterval(()=>{L=(L+1)%v.length,t(9,N=v[L])},125);m.add(x);const q=await U;return clearInterval(x),q}return U}function M(U){bubble.call(this,A,U)}return A.$$set=U=>{"resourcePath"in U&&t(18,a=U.resourcePath),"resource"in U&&t(19,I=U.resource),"name"in U&&t(20,c=U.name),"postname"in U&&t(21,d=U.postname),"pfp"in U&&t(22,E=U.pfp),"pfpDim"in U&&t(23,f=U.pfpDim),"amount"in U&&t(0,p=U.amount),"fiat"in U&&t(1,y=U.fiat),"symbol"in U&&t(2,D=U.symbol),"lockIcon"in U&&t(3,F=U.lockIcon),"address"in U&&t(4,G=U.address),"detail"in U&&t(5,Q=U.detail),"prefix"in U&&t(6,h=U.prefix),"rootStyle"in U&&t(7,_=U.rootStyle),"rootClasses"in U&&t(24,b=U.rootClasses),"iconClass"in U&&t(8,S=U.iconClass),"$$scope"in U&&t(25,o=U.$$scope)},[p,y,D,F,G,Q,h,_,S,N,B,l,C,u,w,k,H,r,a,I,c,d,E,f,b,o,i,M]}class Row extends SvelteComponent{constructor(e){super(),init(this,e,instance$p,create_fragment$q,safe_not_equal,{resourcePath:18,resource:19,name:20,postname:21,pfp:22,pfpDim:23,amount:0,fiat:1,symbol:2,lockIcon:3,address:4,detail:5,prefix:6,rootStyle:7,rootClasses:24,iconClass:8},null,[-1,-1])}}var SX_ICON_ARROW_LEFT=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-arrow-left-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-arrow-left-fg" d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z"/>
</svg>
`,SX_ICON_SEARCH=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-search-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-search-fg" d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
</svg>
`,SX_CHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20">
	<style type="text/css">
		.s2r-checked-circle-fg {
			fill: var(--svg-color-fg, currentColor);
		}
		.s2r-checked-circle-bg {
			fill: var(--svg-color-bg, black);
		}
	</style>
	<circle class="s2r-checked-circle-bg" cx="10" cy="10" r="8" />
	<path class="s2r-checked-circle-fg" d="M10.0003 1.6665C5.40033 1.6665 1.66699 5.39984 1.66699 9.99984C1.66699 14.5998 5.40033 18.3332 10.0003 18.3332C14.6003 18.3332 18.3337 14.5998 18.3337 9.99984C18.3337 5.39984 14.6003 1.6665 10.0003 1.6665ZM8.33366 14.1665L4.16699 9.99984L5.34199 8.82484L8.33366 11.8082L14.6587 5.48317L15.8337 6.6665L8.33366 14.1665Z" />
</svg>
`,Header_svelte_svelte_type_style_lang="";function get_each_context$a(A,e,t){const n=A.slice();return n[48]=e[t][0],n[49]=e[t][1],n}function get_each_context_1$1(A,e,t){const n=A.slice();return n[53]=e[t][0],n[54]=e[t][1],n}function create_if_block_11(A){let e,t;return e=new StarShellLogo({props:{dim:48,alt:"Click to view general status"}}),e.$on("click",A[33]),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p:noop$1,i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_if_block_10$1(A){let e,t,n;return{c(){e=element("span"),attr(e,"class","back svelte-1fcz7ql")},m(i,o){insert(i,e,o),e.innerHTML=SX_ICON_ARROW_LEFT,t||(n=listen(e,"click",A[32]),t=!0)},p:noop$1,i:noop$1,o:noop$1,d(i){i&&detach(e),t=!1,n()}}}function create_if_block_8$1(A){let e,t,n,i,o=A[1]&&create_if_block_9$1(A);return{c(){e=element("span"),t=text(A[0]),n=space(),o&&o.c(),i=empty(),attr(e,"class","name svelte-1fcz7ql")},m(r,a){insert(r,e,a),append(e,t),insert(r,n,a),o&&o.m(r,a),insert(r,i,a)},p(r,a){a[0]&1&&set_data(t,r[0]),r[1]?o?o.p(r,a):(o=create_if_block_9$1(r),o.c(),o.m(i.parentNode,i)):o&&(o.d(1),o=null)},d(r){r&&detach(e),r&&detach(n),o&&o.d(r),r&&detach(i)}}}function create_if_block_9$1(A){let e,t,n;return{c(){e=element("span"),t=text("- "),n=text(A[1]),attr(e,"class","symbol svelte-1fcz7ql")},m(i,o){insert(i,e,o),append(e,t),append(e,n)},p(i,o){o[0]&2&&set_data(n,i[1])},d(i){i&&detach(e)}}}function create_if_block_5$1(A){let e,t=A[8],n,i,o,r,a,g=create_key_block_1(A),I=A[7]&&create_if_block_6$1(A);return{c(){e=element("span"),g.c(),n=space(),I&&I.c(),i=empty(),attr(e,"class","network svelte-1fcz7ql")},m(s,c){insert(s,e,c),g.m(e,null),insert(s,n,c),I&&I.m(s,c),insert(s,i,c),o=!0,r||(a=listen(e,"click",A[34]),r=!0)},p(s,c){c[0]&256&&safe_not_equal(t,t=s[8])?(group_outros(),transition_out(g,1,1,noop$1),check_outros(),g=create_key_block_1(s),g.c(),transition_in(g,1),g.m(e,null)):g.p(s,c),s[7]?I?(I.p(s,c),c[0]&128&&transition_in(I,1)):(I=create_if_block_6$1(s),I.c(),transition_in(I,1),I.m(i.parentNode,i)):I&&(group_outros(),transition_out(I,1,1,()=>{I=null}),check_outros())},i(s){o||(transition_in(g),transition_in(I),o=!0)},o(s){transition_out(g),transition_out(I),o=!1},d(s){s&&detach(e),g.d(s),s&&detach(n),I&&I.d(s),s&&detach(i),r=!1,a()}}}function create_key_block_1(A){let e,t;const n=[{resource:A[8]},A[21](!1)];let i={};for(let o=0;o<n.length;o+=1)i=assign(i,n[o]);return e=new PfpDisplay({props:i}),{c(){create_component(e.$$.fragment)},m(o,r){mount_component(e,o,r),t=!0},p(o,r){const a=r[0]&2097408?get_spread_update(n,[r[0]&256&&{resource:o[8]},r[0]&2097152&&get_spread_object(o[21](!1))]):{};e.$set(a)},i(o){t||(transition_in(e.$$.fragment,o),t=!0)},o(o){transition_out(e.$$.fragment,o),t=!1},d(o){destroy_component(e,o)}}}function create_if_block_6$1(A){let e,t,n;function i(r){A[36](r)}let o={title:"Switch Network",$$slots:{rows:[create_rows_slot_1]},$$scope:{ctx:A}};return A[7]!==void 0&&(o.open=A[7]),e=new OverlaySelect({props:o}),binding_callbacks.push(()=>bind(e,"open",i)),{c(){create_component(e.$$.fragment)},m(r,a){mount_component(e,r,a),n=!0},p(r,a){const g={};a[0]&640|a[1]&67108864&&(g.$$scope={dirty:a,ctx:r}),!t&&a[0]&128&&(t=!0,g.open=r[7],add_flush_callback(()=>t=!1)),e.$set(g)},i(r){n||(transition_in(e.$$.fragment,r),n=!0)},o(r){transition_out(e.$$.fragment,r),n=!1},d(r){destroy_component(e,r)}}}function create_catch_block_1$2(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block_1$2(A){let e,t,n=A[52].entries(),i=[];for(let r=0;r<n.length;r+=1)i[r]=create_each_block_1$1(get_each_context_1$1(A,n,r));const o=r=>transition_out(i[r],1,1,()=>{i[r]=null});return{c(){for(let r=0;r<i.length;r+=1)i[r].c();e=empty()},m(r,a){for(let g=0;g<i.length;g+=1)i[g].m(r,a);insert(r,e,a),t=!0},p(r,a){if(a[0]&640){n=r[52].entries();let g;for(g=0;g<n.length;g+=1){const I=get_each_context_1$1(r,n,g);i[g]?(i[g].p(I,a),transition_in(i[g],1)):(i[g]=create_each_block_1$1(I),i[g].c(),transition_in(i[g],1),i[g].m(e.parentNode,e))}for(group_outros(),g=n.length;g<i.length;g+=1)o(g);check_outros()}},i(r){if(!t){for(let a=0;a<n.length;a+=1)transition_in(i[a]);t=!0}},o(r){i=i.filter(Boolean);for(let a=0;a<i.length;a+=1)transition_out(i[a]);t=!1},d(r){destroy_each(i,r),r&&detach(e)}}}function create_if_block_7$1(A){let e;return{c(){e=element("span"),attr(e,"class","overlay-select icon svelte-1fcz7ql"),set_style(e,"--icon-color","var(--theme-color-primary)")},m(t,n){insert(t,e,n),e.innerHTML=SX_CHECKED},p:noop$1,d(t){t&&detach(e)}}}function create_right_slot_1(A){let e,t=A[9]===A[53]&&create_if_block_7$1();return{c(){t&&t.c(),e=space()},m(n,i){t&&t.m(n,i),insert(n,e,i)},p(n,i){n[9]===n[53]?t?t.p(n,i):(t=create_if_block_7$1(),t.c(),t.m(e.parentNode,e)):t&&(t.d(1),t=null)},d(n){t&&t.d(n),n&&detach(e)}}}function create_each_block_1$1(A){let e,t;function n(){return A[35](A[53])}return e=new Row({props:{resource:A[54],detail:"Default Provider",$$slots:{right:[create_right_slot_1]},$$scope:{ctx:A}}}),e.$on("click",n),{c(){create_component(e.$$.fragment)},m(i,o){mount_component(e,i,o),t=!0},p(i,o){A=i;const r={};o[0]&512|o[1]&67108864&&(r.$$scope={dirty:o,ctx:A}),e.$set(r)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_pending_block_1$2(A){let e;return{c(){e=text("...")},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_rows_slot_1(A){let e,t,n={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$2,then:create_then_block_1$2,catch:create_catch_block_1$2,value:52,blocks:[,,,]};return handle_promise(Chains.read(),n),{c(){e=empty(),n.block.c()},m(i,o){insert(i,e,o),n.block.m(i,n.anchor=o),n.mount=()=>e.parentNode,n.anchor=e,t=!0},p(i,o){A=i,update_await_block_branch(n,A,o)},i(i){t||(transition_in(n.block),t=!0)},o(i){for(let o=0;o<3;o+=1){const r=n.blocks[o];transition_out(r)}t=!1},d(i){i&&detach(e),n.block.d(i),n.token=null,n=null}}}function create_if_block_2$8(A){let e,t=A[11],n,i,o,r,a,g=create_key_block$1(A),I=A[10]&&create_if_block_3$5(A);return{c(){e=element("span"),g.c(),n=space(),I&&I.c(),i=empty(),attr(e,"class","account svelte-1fcz7ql")},m(s,c){insert(s,e,c),g.m(e,null),insert(s,n,c),I&&I.m(s,c),insert(s,i,c),o=!0,r||(a=listen(e,"click",A[37]),r=!0)},p(s,c){c[0]&2048&&safe_not_equal(t,t=s[11])?(group_outros(),transition_out(g,1,1,noop$1),check_outros(),g=create_key_block$1(s),g.c(),transition_in(g,1),g.m(e,null)):g.p(s,c),s[10]?I?(I.p(s,c),c[0]&1024&&transition_in(I,1)):(I=create_if_block_3$5(s),I.c(),transition_in(I,1),I.m(i.parentNode,i)):I&&(group_outros(),transition_out(I,1,1,()=>{I=null}),check_outros())},i(s){o||(transition_in(g),transition_in(I),o=!0)},o(s){transition_out(g),transition_out(I),o=!1},d(s){s&&detach(e),g.d(s),s&&detach(n),I&&I.d(s),s&&detach(i),r=!1,a()}}}function create_key_block$1(A){let e,t;const n=[{resource:A[11]},A[21](!0)];let i={};for(let o=0;o<n.length;o+=1)i=assign(i,n[o]);return e=new PfpDisplay({props:i}),{c(){create_component(e.$$.fragment)},m(o,r){mount_component(e,o,r),t=!0},p(o,r){const a=r[0]&2099200?get_spread_update(n,[r[0]&2048&&{resource:o[11]},r[0]&2097152&&get_spread_object(o[21](!0))]):{};e.$set(a)},i(o){t||(transition_in(e.$$.fragment,o),t=!0)},o(o){transition_out(e.$$.fragment,o),t=!1},d(o){destroy_component(e,o)}}}function create_if_block_3$5(A){let e,t,n;function i(r){A[39](r)}let o={title:"Switch Account",$$slots:{rows:[create_rows_slot]},$$scope:{ctx:A}};return A[10]!==void 0&&(o.open=A[10]),e=new OverlaySelect({props:o}),binding_callbacks.push(()=>bind(e,"open",i)),{c(){create_component(e.$$.fragment)},m(r,a){mount_component(e,r,a),n=!0},p(r,a){const g={};a[0]&5120|a[1]&67108864&&(g.$$scope={dirty:a,ctx:r}),!t&&a[0]&1024&&(t=!0,g.open=r[10],add_flush_callback(()=>t=!1)),e.$set(g)},i(r){n||(transition_in(e.$$.fragment,r),n=!0)},o(r){transition_out(e.$$.fragment,r),n=!1},d(r){destroy_component(e,r)}}}function create_catch_block$4(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$4(A){let e,t,n=A[47].entries(),i=[];for(let r=0;r<n.length;r+=1)i[r]=create_each_block$a(get_each_context$a(A,n,r));const o=r=>transition_out(i[r],1,1,()=>{i[r]=null});return{c(){for(let r=0;r<i.length;r+=1)i[r].c();e=empty()},m(r,a){for(let g=0;g<i.length;g+=1)i[g].m(r,a);insert(r,e,a),t=!0},p(r,a){if(a[0]&5120){n=r[47].entries();let g;for(g=0;g<n.length;g+=1){const I=get_each_context$a(r,n,g);i[g]?(i[g].p(I,a),transition_in(i[g],1)):(i[g]=create_each_block$a(I),i[g].c(),transition_in(i[g],1),i[g].m(e.parentNode,e))}for(group_outros(),g=n.length;g<i.length;g+=1)o(g);check_outros()}},i(r){if(!t){for(let a=0;a<n.length;a+=1)transition_in(i[a]);t=!0}},o(r){i=i.filter(Boolean);for(let a=0;a<i.length;a+=1)transition_out(i[a]);t=!1},d(r){destroy_each(i,r),r&&detach(e)}}}function create_if_block_4$4(A){let e;return{c(){e=element("span"),attr(e,"class","overlay-select icon svelte-1fcz7ql"),set_style(e,"--icon-color","var(--theme-color-primary)")},m(t,n){insert(t,e,n),e.innerHTML=SX_CHECKED},p:noop$1,d(t){t&&detach(e)}}}function create_right_slot$2(A){let e,t=A[12]===A[48]&&create_if_block_4$4();return{c(){t&&t.c(),e=space()},m(n,i){t&&t.m(n,i),insert(n,e,i)},p(n,i){n[12]===n[48]?t?t.p(n,i):(t=create_if_block_4$4(),t.c(),t.m(e.parentNode,e)):t&&(t.d(1),t=null)},d(n){t&&t.d(n),n&&detach(e)}}}function create_icon_slot$1(A){let e,t,n;return e=new PfpDisplay({props:{dim:32,resource:A[49]}}),{c(){create_component(e.$$.fragment),t=space()},m(i,o){mount_component(e,i,o),insert(i,t,o),n=!0},p:noop$1,i(i){n||(transition_in(e.$$.fragment,i),n=!0)},o(i){transition_out(e.$$.fragment,i),n=!1},d(i){destroy_component(e,i),i&&detach(t)}}}function create_each_block$a(A){let e,t;function n(){return A[38](A[48])}return e=new Row({props:{resource:A[49],resourcePath:A[48],detail:A[49].extra?.total_fiat_cache??"(?)",$$slots:{icon:[create_icon_slot$1],right:[create_right_slot$2]},$$scope:{ctx:A}}}),e.$on("click",n),{c(){create_component(e.$$.fragment)},m(i,o){mount_component(e,i,o),t=!0},p(i,o){A=i;const r={};o[0]&4096|o[1]&67108864&&(r.$$scope={dirty:o,ctx:A}),e.$set(r)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_pending_block$4(A){let e;return{c(){e=text("...")},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_rows_slot(A){let e,t,n={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$4,then:create_then_block$4,catch:create_catch_block$4,value:47,blocks:[,,,]};return handle_promise(Accounts.read(),n),{c(){e=empty(),n.block.c()},m(i,o){insert(i,e,o),n.block.m(i,n.anchor=o),n.mount=()=>e.parentNode,n.anchor=e,t=!0},p(i,o){A=i,update_await_block_branch(n,A,o)},i(i){t||(transition_in(n.block),t=!0)},o(i){for(let o=0;o<3;o+=1){const r=n.blocks[o];transition_out(r)}t=!1},d(i){i&&detach(e),n.block.d(i),n.token=null,n=null}}}function create_if_block_1$9(A){let e,t;return e=new Close({}),e.$on("click",A[40]),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p:noop$1,i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_if_block$f(A){let e,t,n,i,o,r;return{c(){e=element("div"),t=element("input"),n=space(),i=element("span"),attr(t,"type","text"),t.autofocus=A[2],attr(t,"placeholder","Search anything: token, account, contact, txn..."),attr(i,"class","action svelte-1fcz7ql"),attr(e,"class","search svelte-1fcz7ql")},m(a,g){insert(a,e,g),append(e,t),set_input_value(t,A[5]),A[42](t),append(e,n),append(e,i),i.innerHTML=SX_ICON_SEARCH,A[2]&&t.focus(),o||(r=[listen(t,"input",A[41]),listen(t,"input",A[23])],o=!0)},p(a,g){g[0]&4&&(t.autofocus=a[2]),g[0]&32&&t.value!==a[5]&&set_input_value(t,a[5])},d(a){a&&detach(e),A[42](null),o=!1,run_all(r)}}}function create_fragment$p(A){let e,t,n,i,o,r,a,g,I,s,c,B,d,l,E,C;const f=[create_if_block_10$1,create_if_block_11],u=[];function p(h,_){return h[13]?0:!h[14]&&!h[15]?1:-1}~(n=p(A))&&(i=u[n]=f[n](A));let y=A[0]&&create_if_block_8$1(A),D=A[17]&&create_if_block_5$1(A),F=A[16]&&create_if_block_2$8(A),G=A[14]&&create_if_block_1$9(A),Q=A[18]&&create_if_block$f(A);return{c(){e=element("div"),t=element("div"),i&&i.c(),o=space(),r=element("span"),a=element("div"),y&&y.c(),g=space(),I=element("div"),I.textContent=`${A[19]}`,s=space(),c=element("span"),B=element("span"),D&&D.c(),d=space(),F&&F.c(),l=space(),G&&G.c(),E=space(),Q&&Q.c(),attr(a,"class","title svelte-1fcz7ql"),attr(I,"class","subtitle svelte-1fcz7ql"),attr(r,"class","main svelte-1fcz7ql"),attr(B,"class","cluster svelte-1fcz7ql"),attr(c,"class","right svelte-1fcz7ql"),toggle_class(c,"heightless",!A[17]&&A[14]),attr(t,"class","top svelte-1fcz7ql"),attr(e,"class","header svelte-1fcz7ql")},m(h,_){insert(h,e,_),append(e,t),~n&&u[n].m(t,null),append(t,o),append(t,r),append(r,a),y&&y.m(a,null),append(r,g),append(r,I),append(t,s),append(t,c),append(c,B),D&&D.m(B,null),append(B,d),F&&F.m(B,null),append(c,l),G&&G.m(c,null),append(e,E),Q&&Q.m(e,null),A[43](e),C=!0},p(h,_){i&&i.p(h,_),h[0]?y?y.p(h,_):(y=create_if_block_8$1(h),y.c(),y.m(a,null)):y&&(y.d(1),y=null),h[17]&&D.p(h,_),h[16]&&F.p(h,_),h[14]&&G.p(h,_),h[18]&&Q.p(h,_)},i(h){C||(transition_in(i),transition_in(D),transition_in(F),transition_in(G),C=!0)},o(h){transition_out(i),transition_out(D),transition_out(F),transition_out(G),C=!1},d(h){h&&detach(e),~n&&u[n].d(),y&&y.d(),D&&D.d(),F&&F.d(),G&&G.d(),Q&&Q.d(),A[43](null)}}}function instance$o(A,e,t){let n,i,o,r,a,g,I,s,c,B;component_subscribe(A,yw_search,J=>t(44,n=J)),component_subscribe(A,yw_cancel_search,J=>t(45,i=J)),component_subscribe(A,yw_thread,J=>t(46,o=J)),component_subscribe(A,yw_menu_vendor,J=>t(6,r=J)),component_subscribe(A,yw_overlay_network,J=>t(7,a=J)),component_subscribe(A,yw_chain,J=>t(8,g=J)),component_subscribe(A,yw_chain_ref,J=>t(9,I=J)),component_subscribe(A,yw_overlay_account,J=>t(10,s=J)),component_subscribe(A,yw_account,J=>t(11,c=J)),component_subscribe(A,yw_account_ref,J=>t(12,B=J));let{pops:d=!1}=e;const l=d;let{exits:E=!1}=e;const C=E;let{plain:f=!1}=e;const u=f;let{account:p=!1}=e;const y=p;let{network:D=!1}=e;const F=D;let{search:G=!1}=e;const Q=G;let{title:h=""}=e,{symbol:_=""}=e,{subtitle:b=""}=e;const w=b,S=createEventDispatcher(),k=(J=!1)=>({dim:21,bg:"satin",genStyle:"font-size:21px; outline:none;",rootStyle:`
			padding: 5px 6px;
			border: 2px solid var(--theme-color-border);
			border-radius: ${J?"0 4px 4px 0":"4px 0 0 4px"};
		`.replace(/\s+/g," ")}),m=getContext("page");let N,H,{isSearchScreen:M=!1}=e,{search_input:U=""}=e,v=n;yw_search.subscribe(J=>{M&&J?(console.log("search screen and search text"),t(5,v=J),H&&setTimeout(()=>{H.focus()},0)):J||t(5,v="")});function L(J){if(M)v?S("search",v):(set_store_value(yw_search,n="",n),i());else if(v){o.id;const j=qs(N,":focus");j&&j.blur(),set_store_value(yw_cancel_search,i=()=>{t(5,v=""),console.log("stealing focus for cancel search"),H.focus()},i),set_store_value(yw_search,n=v,n)}}const x=()=>m.pop(),q=()=>set_store_value(yw_menu_vendor,r=!0,r),P=J=>{J.stopPropagation(),set_store_value(yw_overlay_network,a=!a,a)},O=J=>{set_store_value(yw_chain_ref,I=J,I),set_store_value(yw_overlay_network,a=!1,a)};function Z(J){a=J,yw_overlay_network.set(a)}const AA=J=>{J.stopPropagation(),set_store_value(yw_overlay_account,s=!s,s)},Y=J=>{set_store_value(yw_account_ref,B=J,B),set_store_value(yw_overlay_account,s=!1,s)};function X(J){s=J,yw_overlay_account.set(s)}const nA=()=>S("close");function rA(){v=this.value,t(5,v)}function aA(J){binding_callbacks[J?"unshift":"push"](()=>{H=J,t(4,H)})}function tA(J){binding_callbacks[J?"unshift":"push"](()=>{N=J,t(3,N)})}return A.$$set=J=>{"pops"in J&&t(24,d=J.pops),"exits"in J&&t(25,E=J.exits),"plain"in J&&t(26,f=J.plain),"account"in J&&t(27,p=J.account),"network"in J&&t(28,D=J.network),"search"in J&&t(29,G=J.search),"title"in J&&t(0,h=J.title),"symbol"in J&&t(1,_=J.symbol),"subtitle"in J&&t(30,b=J.subtitle),"isSearchScreen"in J&&t(2,M=J.isSearchScreen),"search_input"in J&&t(31,U=J.search_input)},[h,_,M,N,H,v,r,a,g,I,s,c,B,l,C,u,y,F,Q,w,S,k,m,L,d,E,f,p,D,G,b,U,x,q,P,O,Z,AA,Y,X,nA,rA,aA,tA]}class Header extends SvelteComponent{constructor(e){super(),init(this,e,instance$o,create_fragment$p,safe_not_equal,{pops:24,exits:25,plain:26,account:27,network:28,search:29,title:0,symbol:1,subtitle:30,isSearchScreen:2,search_input:31},null,[-1,-1])}}var SubHeader_svelte_svelte_type_style_lang="";function get_each_context$9(A,e,t){const n=A.slice();return n[10]=e[t],n}function create_each_block$9(A){let e,t,n=A[10]+"",i,o,r;function a(){return A[7](A[10])}return{c(){e=element("button"),t=element("span"),i=text(n),attr(t,"class","text"),attr(e,"class","pill")},m(g,I){insert(g,e,I),append(e,t),append(t,i),o||(r=listen(e,"click",a),o=!0)},p(g,I){A=g,I&2&&n!==(n=A[10]+"")&&set_data(i,n)},d(g){g&&detach(e),o=!1,r()}}}function create_if_block_1$8(A){let e,t,n,i,o,r;return{c(){e=element("button"),t=element("span"),n=space(),i=element("span"),i.textContent="Add New",attr(t,"class","icon svelte-44hl34"),attr(i,"class","text"),attr(e,"class","pill svelte-44hl34")},m(a,g){insert(a,e,g),append(e,t),t.innerHTML=SX_ICON_ADD$1,append(e,n),append(e,i),o||(r=listen(e,"click",A[8]),o=!0)},p:noop$1,d(a){a&&detach(e),o=!1,r()}}}function create_if_block$e(A){let e,t;return e=new Close({}),e.$on("click",A[9]),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p:noop$1,i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_fragment$o(A){let e,t,n,i,o,r,a,g,I=A[1],s=[];for(let d=0;d<I.length;d+=1)s[d]=create_each_block$9(get_each_context$9(A,I,d));let c=!A[2]&&create_if_block_1$8(A),B=A[4]&&create_if_block$e(A);return{c(){e=element("div"),t=element("span"),n=text(A[0]),i=space(),o=element("span");for(let d=0;d<s.length;d+=1)s[d].c();r=space(),c&&c.c(),a=space(),B&&B.c(),attr(t,"class","text"),attr(o,"class","right svelte-44hl34"),attr(e,"class","title svelte-44hl34")},m(d,l){insert(d,e,l),append(e,t),append(t,n),append(e,i),append(e,o);for(let E=0;E<s.length;E+=1)s[E].m(o,null);append(o,r),c&&c.m(o,null),append(o,a),B&&B.m(o,null),g=!0},p(d,[l]){if((!g||l&1)&&set_data(n,d[0]),l&34){I=d[1];let E;for(E=0;E<I.length;E+=1){const C=get_each_context$9(d,I,E);s[E]?s[E].p(C,l):(s[E]=create_each_block$9(C),s[E].c(),s[E].m(o,r))}for(;E<s.length;E+=1)s[E].d(1);s.length=I.length}d[2]?c&&(c.d(1),c=null):c?c.p(d,l):(c=create_if_block_1$8(d),c.c(),c.m(o,a)),d[4]&&B.p(d,l)},i(d){g||(transition_in(B),g=!0)},o(d){transition_out(B),g=!1},d(d){d&&detach(e),destroy_each(s,d),c&&c.d(),B&&B.d()}}}function instance$n(A,e,t){let n;component_subscribe(A,yw_popup,d=>t(3,n=d));let{title:i}=e,{buttons:o=[]}=e,{bare:r=!1}=e,{closes:a=!1}=e;const g=a,I=createEventDispatcher(),s=d=>I(d.toLowerCase().replace(/\s/g,"_")),c=()=>I("add_new"),B=()=>set_store_value(yw_popup,n=null,n);return A.$$set=d=>{"title"in d&&t(0,i=d.title),"buttons"in d&&t(1,o=d.buttons),"bare"in d&&t(2,r=d.bare),"closes"in d&&t(6,a=d.closes)},[i,o,r,n,g,I,a,s,c,B]}class SubHeader extends SvelteComponent{constructor(e){super(),init(this,e,instance$n,create_fragment$o,safe_not_equal,{title:0,buttons:1,bare:2,closes:6})}}function cubicOut(A){const e=A-1;return e*e*e+1}function quintOut(A){return--A*A*A*A*A+1}function slide(A,{delay:e=0,duration:t=400,easing:n=cubicOut}={}){const i=getComputedStyle(A),o=+i.opacity,r=parseFloat(i.height),a=parseFloat(i.paddingTop),g=parseFloat(i.paddingBottom),I=parseFloat(i.marginTop),s=parseFloat(i.marginBottom),c=parseFloat(i.borderTopWidth),B=parseFloat(i.borderBottomWidth);return{delay:e,duration:t,easing:n,css:d=>`overflow: hidden;opacity: ${Math.min(d*20,1)*o};height: ${d*r}px;padding-top: ${d*a}px;padding-bottom: ${d*g}px;margin-top: ${d*I}px;margin-bottom: ${d*s}px;border-top-width: ${d*c}px;border-bottom-width: ${d*B}px;`}}var Field_svelte_svelte_type_style_lang="";const get_post_slot_changes=A=>({}),get_post_slot_context=A=>({});function create_fragment$n(A){let e,t,n,i,o,r,a,g,I,s,c;const B=A[6].default,d=create_slot(B,A,A[5],null),l=A[6].post,E=create_slot(l,A,A[5],get_post_slot_context);return{c(){e=element("div"),t=element("div"),n=element("label"),i=text(A[0]),r=space(),a=element("div"),d&&d.c(),I=space(),E&&E.c(),attr(n,"for",A[1]),attr(t,"class","field-name svelte-yry0w8"),attr(a,"class","field-value svelte-yry0w8"),attr(e,"class","field svelte-yry0w8"),attr(e,"id",s="field-"+A[1]),toggle_class(e,"short",A[2]),toggle_class(e,"double",A[4])},m(C,f){insert(C,e,f),append(e,t),append(t,n),append(n,i),append(e,r),append(e,a),d&&d.m(a,null),append(e,I),E&&E.m(e,null),c=!0},p(C,[f]){A=C,(!c||f&1)&&set_data(i,A[0]),(!c||f&2)&&attr(n,"for",A[1]),d&&d.p&&(!c||f&32)&&update_slot_base(d,B,A,A[5],c?get_slot_changes(B,A[5],f,null):get_all_dirty_from_scope(A[5]),null),E&&E.p&&(!c||f&32)&&update_slot_base(E,l,A,A[5],c?get_slot_changes(l,A[5],f,get_post_slot_changes):get_all_dirty_from_scope(A[5]),get_post_slot_context),(!c||f&2&&s!==(s="field-"+A[1]))&&attr(e,"id",s),f&4&&toggle_class(e,"short",A[2]),f&16&&toggle_class(e,"double",A[4])},i(C){c||(add_render_callback(()=>{o||(o=create_bidirectional_transition(t,slide,{duration:A[3]?350:0},!0)),o.run(1)}),transition_in(d,C),add_render_callback(()=>{g||(g=create_bidirectional_transition(a,slide,{duration:A[3]?350:0},!0)),g.run(1)}),transition_in(E,C),c=!0)},o(C){o||(o=create_bidirectional_transition(t,slide,{duration:A[3]?350:0},!1)),o.run(0),transition_out(d,C),g||(g=create_bidirectional_transition(a,slide,{duration:A[3]?350:0},!1)),g.run(0),transition_out(E,C),c=!1},d(C){C&&detach(e),C&&o&&o.end(),d&&d.d(C),C&&g&&g.end(),E&&E.d(C)}}}function instance$m(A,e,t){let{$$slots:n={},$$scope:i}=e,{name:o=""}=e,{key:r}=e,{short:a=!1}=e,{slides:g=!1}=e,{double:I=!1}=e;return A.$$set=s=>{"name"in s&&t(0,o=s.name),"key"in s&&t(1,r=s.key),"short"in s&&t(2,a=s.short),"slides"in s&&t(3,g=s.slides),"double"in s&&t(4,I=s.double),"$$scope"in s&&t(5,i=s.$$scope)},[o,r,a,g,I,i,n]}class Field extends SvelteComponent{constructor(e){super(),init(this,e,instance$m,create_fragment$n,safe_not_equal,{name:0,key:1,short:2,slides:3,double:4})}}var Log_svelte_svelte_type_style_lang="",ActionsLine_svelte_svelte_type_style_lang="";function create_if_block$d(A){let e,t=A[5]?"Cancel":"Back",n,i,o,r;return{c(){e=element("button"),n=text(t),e.disabled=i=A[0]||A[2],attr(e,"class","svelte-1iwdvsv")},m(a,g){insert(a,e,g),append(e,n),o||(r=listen(e,"click",A[15]),o=!0)},p(a,g){g&5&&i!==(i=a[0]||a[2])&&(e.disabled=i)},d(a){a&&detach(e),o=!1,r()}}}function create_fragment$m(A){let e,t,n,i,o,r,a,g=(A[5]||A[6])&&create_if_block$d(A);return{c(){e=element("div"),g&&g.c(),t=space(),n=element("button"),i=text(A[4]),n.disabled=o=A[3]||A[0]||A[1]||A[2],attr(n,"class","primary svelte-1iwdvsv"),attr(e,"class","actions-line svelte-1iwdvsv")},m(I,s){insert(I,e,s),g&&g.m(e,null),append(e,t),append(e,n),append(n,i),r||(a=listen(n,"click",A[16]),r=!0)},p(I,[s]){(I[5]||I[6])&&g.p(I,s),s&16&&set_data(i,I[4]),s&15&&o!==(o=I[3]||I[0]||I[1]||I[2])&&(n.disabled=o)},i:noop$1,o:noop$1,d(I){I&&detach(e),g&&g.d(),r=!1,a()}}}function instance$l(A,e,t){let n,i,{cancel:o=!1}=e;const r=!!o,a=typeof o=="function"?o:F_NOOP;let{back:g=!1}=e;const I=g;let{confirm:s=["Done",F_NOOP,!1]}=e;const[c,B]=s;let d="",{wait:l=0}=e;const E=l===!0?5e3:l||0;let C=E>0;if(C){let _=Math.round(E/1e3);d=` (${_}s)`;const b=setInterval(()=>{_-=1,t(14,d=` (${_}s)`)},1e3);setTimeout(()=>{t(1,C=!1),t(14,d=""),clearInterval(b)},E)}let f=!1,{disabled:u=!1}=e,{contd:p=null}=e;const y=p?()=>D.push(p):null,D=getContext("page");function F(){r&&a&&a(),(I||o==="pop")&&D.pop()}async function G(){let _=!0;t(2,f=!0);try{await(B||F_NOOP)()}catch(b){_=!1,console.error(b)}t(2,f=!1),y&&_&&y()}const Q=()=>F(),h=()=>G();return A.$$set=_=>{"cancel"in _&&t(9,o=_.cancel),"back"in _&&t(10,g=_.back),"confirm"in _&&t(11,s=_.confirm),"wait"in _&&t(12,l=_.wait),"disabled"in _&&t(0,u=_.disabled),"contd"in _&&t(13,p=_.contd)},A.$$.update=()=>{A.$$.dirty&16384&&t(4,n=c+d),A.$$.dirty&2048&&t(3,i=s[2]||!1)},[u,C,f,i,n,r,I,F,G,o,g,s,l,p,d,Q,h]}class ActionsLine extends SvelteComponent{constructor(e){super(),init(this,e,instance$l,create_fragment$m,safe_not_equal,{cancel:9,back:10,confirm:11,wait:12,disabled:0,contd:13})}}var StarShellTitle_svelte_svelte_type_style_lang="",Register_svelte_svelte_type_style_lang="",SX_SEND=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="12" y="4" width="2" height="9" />
		<rect x="5" y="6" width="2" height="9" transform="rotate(-90 5 6)" />
		<path d="M14 5.5V4H12.5L3 13.5L4.5 15L14 5.5Z" />
	</g>
</svg>
`,SX_RECV=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none">
	<style>
		.s2r-action-recv-fg-stroke {
			stroke: var(--svg-color-fg, currentColor);
		}
	</style>
	<path style="fill:var(--svg-color-fg, currentColor)" d="M3 14h12v2H3z"/>
	<path class="s2r-action-recv-fg-stroke" d="M9 12V1M4.5 7.5 9 12l4.5-4.5" stroke-width="2"/>
</svg>`,SX_ICON_ADD=`<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="10" y="4" width="2" height="14" rx="1" />
		<rect x="4" y="10" width="14" height="2" ry="1" />
	</g>
</svg>`,SX_ICON_INFO=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
</svg>`,SX_ICON_EDIT$1=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a.996.996 0 0 0 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
</svg>`,SX_ICON_DELETE=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"/>
</svg>`,SX_ICON_WRAP=`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
	<style>
		.star-action-wrap-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="star-action-wrap-fg" d="M11,3.6L7.8,6.7L4.6,3.6c-0.3-0.3-0.8-0.3-1.1,0s-0.3,0.8,0,1.1l3.7,3.7c0.3,0.3,0.8,0.3,1.1,0L12,4.7 c0.3-0.3,0.3-0.8,0-1.1C11.8,3.3,11.3,3.3,11,3.6z M12.6,12.3c0,0.4-0.3,0.8-0.7,0.8H3.7c-0.4,0-0.8-0.4-0.8-0.8l0,0l0,0v-1.6 c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8v0.8H11v-0.8c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8V12.3C12.7,12.3,12.7,12.3,12.6,12.3 L12.6,12.3z" />
</svg>
`,SX_ICON_UNWRAP=`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
	<style>
		.star-action-unwrap-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="star-action-unwrap-fg" d="M12,7.8c0.3-0.3,0.3-0.8,0-1.1L8.3,3C8,2.7,7.5,2.7,7.2,3L3.5,6.8C3.2,7,3.2,7.5,3.5,7.8c0.3,0.3,0.8,0.3,1.1,0
	l3.2-3.1L11,7.8C11.3,8.1,11.8,8.1,12,7.8z M12.6,12.4c0,0.4-0.3,0.8-0.7,0.8H3.7c-0.4,0-0.8-0.4-0.8-0.8l0,0l0,0v-1.6
	c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8v0.8H11v-0.8c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8V12.4L12.6,12.4L12.6,12.4z" />
</svg>
`,SX_ICON_EDIT=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<circle cx="11" cy="11" r="10" fill="none" style="stroke:var(--svg-color-bg, currentColor)"/>
	<path style="fill:var(--svg-color-fg, currentColor)" d="m8.364 11.631 5.656-5.657L16 7.954l-5.657 5.657zM7.6 12.4 7 13v2h2l.6-.6z"/>
</svg>`,SX_ICON_CHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
	<style type="text/css">
		.s2r-checked-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-checked-fg" d="M16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0ZM7.71 13.29C7.32 13.68 6.69 13.68 6.3 13.29L2.71 9.7C2.32 9.31 2.32 8.68 2.71 8.29C3.1 7.9 3.73 7.9 4.12 8.29L7 11.17L13.88 4.29C14.27 3.9 14.9 3.9 15.29 4.29C15.68 4.68 15.68 5.31 15.29 5.7L7.71 13.29Z" />
</svg>
`,SX_ICON_UNCHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
	<style type="text/css">
		.s2r-unchecked-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-unchecked-fg" d="M15 16H3C2.45 16 2 15.55 2 15V3C2 2.45 2.45 2 3 2H15C15.55 2 16 2.45 16 3V15C16 15.55 15.55 16 15 16ZM16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0Z" />
</svg>
`,CheckboxField_svelte_svelte_type_style_lang="";function create_if_block$c(A){let e,t;const n=A[8].default,i=create_slot(n,A,A[7],null);return{c(){e=element("label"),i&&i.c(),attr(e,"for",A[2])},m(o,r){insert(o,e,r),i&&i.m(e,null),t=!0},p(o,r){i&&i.p&&(!t||r&128)&&update_slot_base(i,n,o,o[7],t?get_slot_changes(n,o[7],r,null):get_all_dirty_from_scope(o[7]),null)},i(o){t||(transition_in(i,o),t=!0)},o(o){transition_out(i,o),t=!1},d(o){o&&detach(e),i&&i.d(o)}}}function create_fragment$l(A){let e,t,n,i,o,r=(A[0]?SX_ICON_CHECKED:SX_ICON_UNCHECKED)+"",a,g,I,s,c,B=A[4].default&&create_if_block$c(A);return{c(){e=element("fieldset"),t=element("span"),n=element("input"),i=space(),o=element("span"),a=space(),B&&B.c(),attr(n,"id",A[2]),attr(n,"type","checkbox"),n.hidden=!0,attr(o,"class","icon svelte-f0r965"),attr(t,"class","checkbox"),attr(e,"class",g=null_to_empty(A[1])+" svelte-f0r965")},m(d,l){insert(d,e,l),append(e,t),append(t,n),n.checked=A[0],append(t,i),append(t,o),o.innerHTML=r,append(e,a),B&&B.m(e,null),I=!0,s||(c=[listen(n,"change",A[9]),listen(e,"click",A[3])],s=!0)},p(d,[l]){l&1&&(n.checked=d[0]),(!I||l&1)&&r!==(r=(d[0]?SX_ICON_CHECKED:SX_ICON_UNCHECKED)+"")&&(o.innerHTML=r),d[4].default?B?(B.p(d,l),l&16&&transition_in(B,1)):(B=create_if_block$c(d),B.c(),transition_in(B,1),B.m(e,null)):B&&(group_outros(),transition_out(B,1,1,()=>{B=null}),check_outros()),(!I||l&2&&g!==(g=null_to_empty(d[1])+" svelte-f0r965"))&&attr(e,"class",g)},i(d){I||(transition_in(B),I=!0)},o(d){transition_out(B),I=!1},d(d){d&&detach(e),B&&B.d(),s=!1,run_all(c)}}}function instance$k(A,e,t){let{$$slots:n={},$$scope:i}=e;const o=compute_slots(n);let{id:r}=e;const a=r;let{containerClass:g=""}=e,{checked:I=!1}=e,{disableHandler:s=!1}=e;function c(d){d.target.tagName!=="LABEL"&&(s||t(0,I=!I)),d.stopImmediatePropagation()}function B(){I=this.checked,t(0,I)}return A.$$set=d=>{"id"in d&&t(5,r=d.id),"containerClass"in d&&t(1,g=d.containerClass),"checked"in d&&t(0,I=d.checked),"disableHandler"in d&&t(6,s=d.disableHandler),"$$scope"in d&&t(7,i=d.$$scope)},[I,g,a,c,o,r,s,i,n,B]}class CheckboxField extends SvelteComponent{constructor(e){super(),init(this,e,instance$k,create_fragment$l,safe_not_equal,{id:5,containerClass:1,checked:0,disableHandler:6})}}var PopupTagsSelect_svelte_svelte_type_style_lang="";function get_each_context$8(A,e,t){const n=A.slice();return n[11]=e[t].tag,n[12]=e[t].selected,n[13]=e,n[14]=t,n}function create_right_slot$1(A){let e,t,n,i;function o(a){A[3](a,A[12],A[13],A[14])}let r={id:"tag-$"+A[11].index,disableHandler:!0};return A[12]!==void 0&&(r.checked=A[12]),e=new CheckboxField({props:r}),binding_callbacks.push(()=>bind(e,"checked",o)),{c(){create_component(e.$$.fragment),n=space()},m(a,g){mount_component(e,a,g),insert(a,n,g),i=!0},p(a,g){A=a;const I={};g&1&&(I.id="tag-$"+A[11].index),!t&&g&1&&(t=!0,I.checked=A[12],add_flush_callback(()=>t=!1)),e.$set(I)},i(a){i||(transition_in(e.$$.fragment,a),i=!0)},o(a){transition_out(e.$$.fragment,a),i=!1},d(a){destroy_component(e,a),a&&detach(n)}}}function create_each_block$8(A){let e,t;function n(){return A[4](A[11])}return e=new Row({props:{rootStyle:"--app-icon-diameter:12px;",iconClass:"align-self_center",name:A[11].name,$$slots:{right:[create_right_slot$1]},$$scope:{ctx:A}}}),e.$on("click",n),{c(){create_component(e.$$.fragment)},m(i,o){mount_component(e,i,o),t=!0},p(i,o){A=i;const r={};o&1&&(r.name=A[11].name),o&32769&&(r.$$scope={dirty:o,ctx:A}),e.$set(r)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_fragment$k(A){let e,t,n,i,o,r,a,g;t=new SubHeader({props:{title:"Select Tag(s)",bare:!0,closes:!0}});let I=A[0],s=[];for(let B=0;B<I.length;B+=1)s[B]=create_each_block$8(get_each_context$8(A,I,B));const c=B=>transition_out(s[B],1,1,()=>{s[B]=null});return a=new ActionsLine({props:{confirm:["Apply",A[2]]}}),{c(){e=element("section"),create_component(t.$$.fragment),n=space(),i=element("div");for(let B=0;B<s.length;B+=1)s[B].c();o=space(),r=element("div"),create_component(a.$$.fragment),attr(i,"class","rows svelte-vooes4"),attr(r,"class","float svelte-vooes4"),attr(e,"class","screen")},m(B,d){insert(B,e,d),mount_component(t,e,null),append(e,n),append(e,i);for(let l=0;l<s.length;l+=1)s[l].m(i,null);append(e,o),append(e,r),mount_component(a,r,null),g=!0},p(B,[d]){if(d&3){I=B[0];let l;for(l=0;l<I.length;l+=1){const E=get_each_context$8(B,I,l);s[l]?(s[l].p(E,d),transition_in(s[l],1)):(s[l]=create_each_block$8(E),s[l].c(),transition_in(s[l],1),s[l].m(i,null))}for(group_outros(),l=I.length;l<s.length;l+=1)c(l);check_outros()}},i(B){if(!g){transition_in(t.$$.fragment,B);for(let d=0;d<I.length;d+=1)transition_in(s[d]);transition_in(a.$$.fragment,B),g=!0}},o(B){transition_out(t.$$.fragment,B),s=s.filter(Boolean);for(let d=0;d<s.length;d+=1)transition_out(s[d]);transition_out(a.$$.fragment,B),g=!1},d(B){B&&detach(e),destroy_component(t),destroy_each(s,B),destroy_component(a)}}}function instance$j(A,e,t){let n,i,o;component_subscribe(A,yw_popup,l=>t(5,n=l)),component_subscribe(A,yw_store_tags,l=>t(6,i=l)),component_subscribe(A,yw_context_popup,l=>t(7,o=l));const r=o.resource,a=(l,E)=>l.index-E.index,g=new Set(i.getIdsFor(r));let I=i.raw.registry.sort(a).map(l=>({tag:l,selected:g.has(l.index)}));function s(l){const E=I.find(C=>l===C.tag.index);E.selected=!E.selected,t(0,I)}async function c(){await i.setTagsFor(r,a_tags),set_store_value(yw_popup,n=null,n)}function B(l,E,C,f){C[f].selected=l,t(0,I)}return[I,s,c,B,l=>s(l.index)]}class PopupTagsSelect extends SvelteComponent{constructor(e){super(),init(this,e,instance$j,create_fragment$k,safe_not_equal,{})}}var InlineTags_svelte_svelte_type_style_lang="";const get_suffix_slot_changes=A=>({}),get_suffix_slot_context=A=>({});function get_each_context$7(A,e,t){const n=A.slice();return n[26]=e[t],n[28]=t,n}const get_prefix_slot_changes=A=>({}),get_prefix_slot_context=A=>({});function create_if_block_4$3(A){let e,t,n;const i=A[17].prefix,o=create_slot(i,A,A[16],get_prefix_slot_context);return{c(){e=element("span"),o&&o.c(),attr(e,"class",t="prefix "+A[0]+" svelte-r4i5a9")},m(r,a){insert(r,e,a),o&&o.m(e,null),n=!0},p(r,a){o&&o.p&&(!n||a&65536)&&update_slot_base(o,i,r,r[16],n?get_slot_changes(i,r[16],a,get_prefix_slot_changes):get_all_dirty_from_scope(r[16]),get_prefix_slot_context),(!n||a&1&&t!==(t="prefix "+r[0]+" svelte-r4i5a9"))&&attr(e,"class",t)},i(r){n||(transition_in(o,r),n=!0)},o(r){transition_out(o,r),n=!1},d(r){r&&detach(e),o&&o.d(r)}}}function create_if_block_3$4(A){let e,t=A[26].name+"",n;return{c(){e=element("span"),n=text(t),attr(e,"class","label svelte-r4i5a9")},m(i,o){insert(i,e,o),append(e,n)},p(i,o){o&32&&t!==(t=i[26].name+"")&&set_data(n,t)},d(i){i&&detach(e)}}}function create_if_block_2$7(A){let e,t,n;function i(){return A[18](A[26])}return{c(){e=element("span"),attr(e,"class","delete icon svelte-r4i5a9")},m(o,r){insert(o,e,r),e.innerHTML=SX_ICON_ADD,t||(n=listen(e,"click",i),t=!0)},p(o,r){A=o},d(o){o&&detach(e),t=!1,n()}}}function create_each_block$7(A){let e,t,n,i,o,r=!A[7]&&create_if_block_3$4(A),a=A[6]&&create_if_block_2$7(A);return{c(){e=element("span"),r&&r.c(),t=space(),a&&a.c(),n=space(),attr(e,"class","tag svelte-r4i5a9"),set_style(e,"background-color",A[26].color),toggle_class(e,"collapsed",A[7])},m(g,I){insert(g,e,I),r&&r.m(e,null),append(e,t),a&&a.m(e,null),append(e,n),o=!0},p(g,I){A=g,A[7]||r.p(A,I),A[6]&&a.p(A,I),(!o||I&32)&&set_style(e,"background-color",A[26].color)},i(g){o||(i&&i.end(1),o=!0)},o(g){i=create_out_transition(e,A[10],{duration:A[6]?300:0}),o=!1},d(g){g&&detach(e),r&&r.d(),a&&a.d(),g&&i&&i.end()}}}function create_key_block(A){let e,t,n=A[5],i=[];for(let r=0;r<n.length;r+=1)i[r]=create_each_block$7(get_each_context$7(A,n,r));const o=r=>transition_out(i[r],1,1,()=>{i[r]=null});return{c(){for(let r=0;r<i.length;r+=1)i[r].c();e=empty()},m(r,a){for(let g=0;g<i.length;g+=1)i[g].m(r,a);insert(r,e,a),t=!0},p(r,a){if(a&736){n=r[5];let g;for(g=0;g<n.length;g+=1){const I=get_each_context$7(r,n,g);i[g]?(i[g].p(I,a),transition_in(i[g],1)):(i[g]=create_each_block$7(I),i[g].c(),transition_in(i[g],1),i[g].m(e.parentNode,e))}for(group_outros(),g=n.length;g<i.length;g+=1)o(g);check_outros()}},i(r){if(!t){for(let a=0;a<n.length;a+=1)transition_in(i[a]);t=!0}},o(r){i=i.filter(Boolean);for(let a=0;a<i.length;a+=1)transition_out(i[a]);t=!1},d(r){destroy_each(i,r),r&&detach(e)}}}function create_if_block_1$7(A){let e,t,n,i;return{c(){e=element("span"),t=element("span"),attr(t,"class","icon svelte-r4i5a9"),attr(e,"class","edit svelte-r4i5a9")},m(o,r){insert(o,e,r),append(e,t),t.innerHTML=SX_ICON_EDIT,n||(i=listen(e,"click",A[19]),n=!0)},p:noop$1,d(o){o&&detach(e),n=!1,i()}}}function create_if_block$b(A){let e,t,n;const i=A[17].suffix,o=create_slot(i,A,A[16],get_suffix_slot_context);return{c(){e=element("span"),o&&o.c(),attr(e,"class",t="suffix "+A[1]+" svelte-r4i5a9")},m(r,a){insert(r,e,a),o&&o.m(e,null),n=!0},p(r,a){o&&o.p&&(!n||a&65536)&&update_slot_base(o,i,r,r[16],n?get_slot_changes(i,r[16],a,get_suffix_slot_changes):get_all_dirty_from_scope(r[16]),get_suffix_slot_context),(!n||a&2&&t!==(t="suffix "+r[1]+" svelte-r4i5a9"))&&attr(e,"class",t)},i(r){n||(transition_in(o,r),n=!0)},o(r){transition_out(o,r),n=!1},d(r){r&&detach(e),o&&o.d(r)}}}function create_fragment$j(A){let e,t,n=A[3],i,o,r,a=A[11].prefix&&create_if_block_4$3(A),g=create_key_block(A),I=A[6]&&create_if_block_1$7(A),s=A[11].suffix&&create_if_block$b(A);return{c(){e=element("span"),a&&a.c(),t=space(),g.c(),i=space(),I&&I.c(),o=space(),s&&s.c(),attr(e,"class","cluster svelte-r4i5a9"),attr(e,"style",A[2]),toggle_class(e,"editable",A[6]),toggle_class(e,"collapsed",A[7])},m(c,B){insert(c,e,B),a&&a.m(e,null),append(e,t),g.m(e,null),append(e,i),I&&I.m(e,null),append(e,o),s&&s.m(e,null),A[20](e),r=!0},p(c,[B]){c[11].prefix?a?(a.p(c,B),B&2048&&transition_in(a,1)):(a=create_if_block_4$3(c),a.c(),transition_in(a,1),a.m(e,t)):a&&(group_outros(),transition_out(a,1,1,()=>{a=null}),check_outros()),B&8&&safe_not_equal(n,n=c[3])?(group_outros(),transition_out(g,1,1,noop$1),check_outros(),g=create_key_block(c),g.c(),transition_in(g,1),g.m(e,i)):g.p(c,B),c[6]&&I.p(c,B),c[11].suffix?s?(s.p(c,B),B&2048&&transition_in(s,1)):(s=create_if_block$b(c),s.c(),transition_in(s,1),s.m(e,null)):s&&(group_outros(),transition_out(s,1,1,()=>{s=null}),check_outros()),(!r||B&4)&&attr(e,"style",c[2])},i(c){r||(transition_in(a),transition_in(g),transition_in(s),r=!0)},o(c){transition_out(a),transition_out(g),transition_out(s),r=!1},d(c){c&&detach(e),a&&a.d(),g.d(c),I&&I.d(),s&&s.d(),A[20](null)}}}function instance$i(A,e,t){let n,i,o,r;component_subscribe(A,yw_popup,S=>t(21,i=S)),component_subscribe(A,yw_context_popup,S=>t(22,o=S)),component_subscribe(A,yw_store_tags,S=>t(15,r=S));let{$$slots:a={},$$scope:g}=e;const I=compute_slots(a);let{resourcePath:s}=e;const c=s;let{editable:B=!1}=e;const d=B;let{collapsed:l=!1}=e;const E=l;let{prefixClass:C=""}=e,{suffixClass:f=""}=e,{rootStyle:u=""}=e,p=0;const y=yw_store_tags.subscribe(()=>t(3,p++,p));onDestroy(()=>{y()});let D;d&&(yw_context_popup.subscribe(S=>{S?.tags&&t(5,n=S.tags)}),onDestroy(()=>{set_store_value(yw_context_popup,o=null,o)}));function F(){set_store_value(yw_context_popup,o={resource:c},o),set_store_value(yw_popup,i=PopupTagsSelect,i)}let G;async function Q(S){const k=n.findIndex(m=>m.index===S.index);n.splice(k,1),await D.save()}function h(S,{delay:k=0,duration:m=400,easing:N=cubicOut}={}){const H=getComputedStyle(S),M=+H.opacity,U=parseFloat(H.width),v=parseFloat(H.paddingLeft),L=parseFloat(H.paddingRight),x=parseFloat(H.marginLeft),q=parseFloat(H.marginRight),P=parseFloat(H.borderLeftWidth),O=parseFloat(H.borderRightWidth);return{delay:k,duration:m,easing:N,css:Z=>`--delete-display: none;overflow: hidden;opacity: ${Math.min(Z*20,1)*M};width: ${Z*U}px;padding-left: ${Z*v}px;padding-right: ${Z*L}px;margin-left: ${Z*x}px;margin-right: ${Z*q}px;border-left-width: ${Z*P}px;border-right-width: ${Z*O}px;`}}const _=S=>Q(S),b=()=>F();function w(S){binding_callbacks[S?"unshift":"push"](()=>{G=S,t(4,G)})}return A.$$set=S=>{"resourcePath"in S&&t(12,s=S.resourcePath),"editable"in S&&t(13,B=S.editable),"collapsed"in S&&t(14,l=S.collapsed),"prefixClass"in S&&t(0,C=S.prefixClass),"suffixClass"in S&&t(1,f=S.suffixClass),"rootStyle"in S&&t(2,u=S.rootStyle),"$$scope"in S&&t(16,g=S.$$scope)},A.$$.update=()=>{A.$$.dirty&32768&&t(5,n=r.getTagsFor(c))},[C,f,u,p,G,n,d,E,F,Q,h,I,s,B,l,r,g,a,_,b,w]}class InlineTags extends SvelteComponent{constructor(e){super(),init(this,e,instance$i,create_fragment$j,safe_not_equal,{resourcePath:12,editable:13,collapsed:14,prefixClass:0,suffixClass:1,rootStyle:2})}}var Portrait_svelte_svelte_type_style_lang="";function get_each_context$6(A,e,t){const n=A.slice();return n[22]=e[t][0],n[23]=e[t][1],n}const get_subtitle_slot_changes=A=>({}),get_subtitle_slot_context=A=>({}),get_pfp_slot_changes=A=>({}),get_pfp_slot_context=A=>({});function create_if_block_3$3(A){let e,t,n,i;const o=[create_if_block_4$2,create_else_block$5],r=[];function a(g,I){return g[11].pfp?0:1}return t=a(A),n=r[t]=o[t](A),{c(){e=element("div"),n.c(),attr(e,"class","pfp svelte-1ilena7")},m(g,I){insert(g,e,I),r[t].m(e,null),i=!0},p(g,I){let s=t;t=a(g),t===s?r[t].p(g,I):(group_outros(),transition_out(r[s],1,1,()=>{r[s]=null}),check_outros(),n=r[t],n?n.p(g,I):(n=r[t]=o[t](g),n.c()),transition_in(n,1),n.m(e,null))},i(g){i||(transition_in(n),i=!0)},o(g){transition_out(n),i=!1},d(g){g&&detach(e),r[t].d()}}}function create_else_block$5(A){let e,t;return e=new PfpDisplay({props:{ref:A[1],resource:A[0],dim:64,circular:A[6]}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,i){const o={};i&2&&(o.ref=n[1]),i&1&&(o.resource=n[0]),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_if_block_4$2(A){let e,t;const n=A[19].pfp,i=create_slot(n,A,A[18],get_pfp_slot_context),o=i||fallback_block_1();return{c(){e=element("span"),o&&o.c(),attr(e,"class","icon svelte-1ilena7")},m(r,a){insert(r,e,a),o&&o.m(e,null),t=!0},p(r,a){i&&i.p&&(!t||a&262144)&&update_slot_base(i,n,r,r[18],t?get_slot_changes(n,r[18],a,get_pfp_slot_changes):get_all_dirty_from_scope(r[18]),get_pfp_slot_context)},i(r){t||(transition_in(o,r),t=!0)},o(r){transition_out(o,r),t=!1},d(r){r&&detach(e),o&&o.d(r)}}}function fallback_block_1(A){let e;return{c(){e=text("Empty pfp slot")},m(t,n){insert(t,e,n)},d(t){t&&detach(e)}}}function create_catch_block$3(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block$3(A){let e=A[26]+"",t;return{c(){t=text(e)},m(n,i){insert(n,t,i)},p(n,i){i&4&&e!==(e=n[26]+"")&&set_data(t,e)},d(n){n&&detach(t)}}}function create_pending_block$3(A){let e;return{c(){e=text("...")},m(t,n){insert(t,e,n)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_2$6(A){let e;return{c(){e=element("span"),attr(e,"class","info svelte-1ilena7")},m(t,n){insert(t,e,n),e.innerHTML=SX_ICON_INFO},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$6(A){let e,t,n;const i=A[19].subtitle,o=create_slot(i,A,A[18],get_subtitle_slot_context),r=o||fallback_block$1(A);return{c(){e=element("div"),t=element("span"),r&&r.c(),attr(t,"class","text"),attr(e,"class","subtitle svelte-1ilena7")},m(a,g){insert(a,e,g),append(e,t),r&&r.m(t,null),n=!0},p(a,g){o?o.p&&(!n||g&262144)&&update_slot_base(o,i,a,a[18],n?get_slot_changes(i,a[18],g,get_subtitle_slot_changes):get_all_dirty_from_scope(a[18]),get_subtitle_slot_context):r&&r.p&&(!n||g&8)&&r.p(a,n?g:-1)},i(a){n||(transition_in(r,a),n=!0)},o(a){transition_out(r,a),n=!1},d(a){a&&detach(e),r&&r.d(a)}}}function fallback_block$1(A){let e;return{c(){e=text(A[3])},m(t,n){insert(t,e,n)},p(t,n){n&8&&set_data(e,t[3])},d(t){t&&detach(e)}}}function create_if_block$a(A){let e,t=ode(A[10]),n=[];for(let i=0;i<t.length;i+=1)n[i]=create_each_block$6(get_each_context$6(A,t,i));return{c(){e=element("div");for(let i=0;i<n.length;i+=1)n[i].c();attr(e,"class","actions svelte-1ilena7")},m(i,o){insert(i,e,o);for(let r=0;r<n.length;r+=1)n[r].m(e,null)},p(i,o){if(o&1056){t=ode(i[10]);let r;for(r=0;r<t.length;r+=1){const a=get_each_context$6(i,t,r);n[r]?n[r].p(a,o):(n[r]=create_each_block$6(a),n[r].c(),n[r].m(e,null))}for(;r<n.length;r+=1)n[r].d(1);n.length=t.length}},d(i){i&&detach(e),destroy_each(n,i)}}}function create_each_block$6(A){let e,t,n=A[5][A[22]]+"",i,o,r=A[23].label+"",a,g,I,s;function c(){return A[20](A[23])}return{c(){e=element("span"),t=element("span"),i=space(),o=element("span"),a=text(r),g=space(),attr(t,"class","icon svelte-1ilena7"),attr(o,"class","label"),attr(e,"class","action action-"+A[22]+" svelte-1ilena7")},m(B,d){insert(B,e,d),append(e,t),t.innerHTML=n,append(e,i),append(e,o),append(o,a),append(e,g),I||(s=listen(e,"click",c),I=!0)},p(B,d){A=B},d(B){B&&detach(e),I=!1,s()}}}function create_fragment$i(A){let e,t,n,i,o,r,a,g,I,s,c,B=!A[7]&&create_if_block_3$3(A),d={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$3,then:create_then_block$3,catch:create_catch_block$3,value:26};handle_promise(o=A[2],d);let l=A[4]&&create_if_block_2$6(),E=(A[3]||A[11].subtitle)&&create_if_block_1$6(A);I=new InlineTags({props:{resourcePath:A[8],rootStyle:"margin: var(--ui-padding) 0 0 0;"}});let C=A[10]&&create_if_block$a(A);return{c(){e=element("div"),B&&B.c(),t=space(),n=element("div"),i=element("span"),d.block.c(),r=space(),l&&l.c(),a=space(),E&&E.c(),g=space(),create_component(I.$$.fragment),s=space(),C&&C.c(),attr(i,"class","text"),attr(n,"class","title svelte-1ilena7"),attr(e,"class","portrait "+A[9]+" svelte-1ilena7"),attr(e,"data-path",A[8])},m(f,u){insert(f,e,u),B&&B.m(e,null),append(e,t),append(e,n),append(n,i),d.block.m(i,d.anchor=null),d.mount=()=>i,d.anchor=null,append(n,r),l&&l.m(n,null),append(e,a),E&&E.m(e,null),append(e,g),mount_component(I,e,null),append(e,s),C&&C.m(e,null),c=!0},p(f,[u]){A=f,A[7]||B.p(A,u),d.ctx=A,u&4&&o!==(o=A[2])&&handle_promise(o,d)||update_await_block_branch(d,A,u),A[4]?l?l.p(A,u):(l=create_if_block_2$6(),l.c(),l.m(n,null)):l&&(l.d(1),l=null),A[3]||A[11].subtitle?E?(E.p(A,u),u&2056&&transition_in(E,1)):(E=create_if_block_1$6(A),E.c(),transition_in(E,1),E.m(e,g)):E&&(group_outros(),transition_out(E,1,1,()=>{E=null}),check_outros()),A[10]&&C.p(A,u)},i(f){c||(transition_in(B),transition_in(E),transition_in(I.$$.fragment,f),c=!0)},o(f){transition_out(B),transition_out(E),transition_out(I.$$.fragment,f),c=!1},d(f){f&&detach(e),B&&B.d(),d.block.d(),d.token=null,d=null,l&&l.d(),E&&E.d(),destroy_component(I),C&&C.d()}}}var ActionId;(function(A){A.SEND="send",A.RECV="recv",A.ADD="add",A.EDIT="edit",A.WRAP="wrap",A.UNWRAP="unwrap"})(ActionId||(ActionId={}));function instance$h(A,e,t){let n;component_subscribe(A,yw_store_tags,Q=>t(17,n=Q));let{$$slots:i={},$$scope:o}=e;const r=compute_slots(i),a={send:SX_SEND,recv:SX_RECV,add:SX_ICON_ADD,edit:SX_ICON_EDIT$1,wrap:SX_ICON_WRAP,unwrap:SX_ICON_UNWRAP,delete:SX_ICON_DELETE};let{resource:g=null}=e,{pfp:I=g?.pfp||""}=e,{circular:s=!1}=e;const c=s;let{noPfp:B=!1}=e;const d=B;let{resourcePath:l}=e;const E=l;let{rootClasses:C=""}=e;const f=C;let{title:u=g?.name||""}=e,{subtitle:p=""}=e,{actions:y=null}=e;const D=y;let{info:F=!1}=e;const G=Q=>Q.trigger();return A.$$set=Q=>{"resource"in Q&&t(0,g=Q.resource),"pfp"in Q&&t(1,I=Q.pfp),"circular"in Q&&t(12,s=Q.circular),"noPfp"in Q&&t(13,B=Q.noPfp),"resourcePath"in Q&&t(14,l=Q.resourcePath),"rootClasses"in Q&&t(15,C=Q.rootClasses),"title"in Q&&t(2,u=Q.title),"subtitle"in Q&&t(3,p=Q.subtitle),"actions"in Q&&t(16,y=Q.actions),"info"in Q&&t(4,F=Q.info),"$$scope"in Q&&t(18,o=Q.$$scope)},A.$$.update=()=>{A.$$.dirty&131072&&n.getTagsFor(E)},[g,I,u,p,F,a,c,d,E,f,D,r,s,B,l,C,y,n,o,i,G]}class Portrait extends SvelteComponent{constructor(e){super(),init(this,e,instance$h,create_fragment$i,safe_not_equal,{resource:0,pfp:1,circular:12,noPfp:13,resourcePath:14,rootClasses:15,title:2,subtitle:3,actions:16,info:4})}}var SX_ICON_DROPDOWN=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M8.70956 11.71L11.2996 14.3C11.6896 14.69 12.3196 14.69 12.7096 14.3L15.2996 11.71C15.9296 11.08 15.4796 10 14.5896 10H9.40956C8.51956 10 8.07956 11.08 8.70956 11.71Z" />
</svg>
`;function isOutOfViewport(A,e){const t=A.getBoundingClientRect(),n=e.getBoundingClientRect(),i={};return i.top=t.top<0,i.left=t.left<0,i.bottom=t.bottom+n.height>(window.innerHeight||document.documentElement.clientHeight),i.right=t.right>(window.innerWidth||document.documentElement.clientWidth),i.any=i.top||i.left||i.bottom||i.right,i}var Item_svelte_svelte_type_style_lang="";function create_fragment$h(A){let e,t=A[0](A[1],A[2])+"",n;return{c(){e=element("div"),attr(e,"class",n="item "+A[3]+" svelte-3e0qet")},m(i,o){insert(i,e,o),e.innerHTML=t},p(i,[o]){o&7&&t!==(t=i[0](i[1],i[2])+"")&&(e.innerHTML=t),o&8&&n!==(n="item "+i[3]+" svelte-3e0qet")&&attr(e,"class",n)},i:noop$1,o:noop$1,d(i){i&&detach(e)}}}function instance$g(A,e,t){let{isActive:n=!1}=e,{isFirst:i=!1}=e,{isHover:o=!1}=e,{isSelectable:r=!1}=e,{getOptionLabel:a=void 0}=e,{item:g=void 0}=e,{filterText:I=""}=e,s="";return A.$$set=c=>{"isActive"in c&&t(4,n=c.isActive),"isFirst"in c&&t(5,i=c.isFirst),"isHover"in c&&t(6,o=c.isHover),"isSelectable"in c&&t(7,r=c.isSelectable),"getOptionLabel"in c&&t(0,a=c.getOptionLabel),"item"in c&&t(1,g=c.item),"filterText"in c&&t(2,I=c.filterText)},A.$$.update=()=>{if(A.$$.dirty&242){const c=[];n&&c.push("active"),i&&c.push("first"),o&&c.push("hover"),g.isGroupHeader&&c.push("groupHeader"),g.isGroupItem&&c.push("groupItem"),r||c.push("notSelectable"),t(3,s=c.join(" "))}},[a,g,I,s,n,i,o,r]}class Item extends SvelteComponent{constructor(e){super(),init(this,e,instance$g,create_fragment$h,safe_not_equal,{isActive:4,isFirst:5,isHover:6,isSelectable:7,getOptionLabel:0,item:1,filterText:2})}}var List_svelte_svelte_type_style_lang="";function get_each_context$5(A,e,t){const n=A.slice();return n[41]=e[t],n[42]=t,n}function create_else_block$4(A){let e,t,n=A[1],i=[];for(let a=0;a<n.length;a+=1)i[a]=create_each_block$5(get_each_context$5(A,n,a));const o=a=>transition_out(i[a],1,1,()=>{i[a]=null});let r=null;return n.length||(r=create_else_block_2(A)),{c(){for(let a=0;a<i.length;a+=1)i[a].c();e=empty(),r&&r.c()},m(a,g){for(let I=0;I<i.length;I+=1)i[I].m(a,g);insert(a,e,g),r&&r.m(a,g),t=!0},p(a,g){if(g[0]&114390){n=a[1];let I;for(I=0;I<n.length;I+=1){const s=get_each_context$5(a,n,I);i[I]?(i[I].p(s,g),transition_in(i[I],1)):(i[I]=create_each_block$5(s),i[I].c(),transition_in(i[I],1),i[I].m(e.parentNode,e))}for(group_outros(),I=n.length;I<i.length;I+=1)o(I);check_outros(),!n.length&&r?r.p(a,g):n.length?r&&(r.d(1),r=null):(r=create_else_block_2(a),r.c(),r.m(e.parentNode,e))}},i(a){if(!t){for(let g=0;g<n.length;g+=1)transition_in(i[g]);t=!0}},o(a){i=i.filter(Boolean);for(let g=0;g<i.length;g+=1)transition_out(i[g]);t=!1},d(a){destroy_each(i,a),a&&detach(e),r&&r.d(a)}}}function create_if_block$9(A){let e,t,n;var i=A[3];function o(r){return{props:{items:r[1],itemHeight:r[8],$$slots:{default:[create_default_slot$3,({item:a,i:g})=>({41:a,42:g}),({item:a,i:g})=>[0,(a?1024:0)|(g?2048:0)]]},$$scope:{ctx:r}}}}return i&&(e=new i(o(A))),{c(){e&&create_component(e.$$.fragment),t=empty()},m(r,a){e&&mount_component(e,r,a),insert(r,t,a),n=!0},p(r,a){const g={};if(a[0]&2&&(g.items=r[1]),a[0]&256&&(g.itemHeight=r[8]),a[0]&9814|a[1]&11264&&(g.$$scope={dirty:a,ctx:r}),i!==(i=r[3])){if(e){group_outros();const I=e;transition_out(I.$$.fragment,1,0,()=>{destroy_component(I,1)}),check_outros()}i?(e=new i(o(r)),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,t.parentNode,t)):e=null}else i&&e.$set(g)},i(r){n||(e&&transition_in(e.$$.fragment,r),n=!0)},o(r){e&&transition_out(e.$$.fragment,r),n=!1},d(r){r&&detach(t),e&&destroy_component(e,r)}}}function create_else_block_2(A){let e,t=!A[11]&&create_if_block_2$5(A);return{c(){t&&t.c(),e=empty()},m(n,i){t&&t.m(n,i),insert(n,e,i)},p(n,i){n[11]?t&&(t.d(1),t=null):t?t.p(n,i):(t=create_if_block_2$5(n),t.c(),t.m(e.parentNode,e))},d(n){t&&t.d(n),n&&detach(e)}}}function create_if_block_2$5(A){let e,t;return{c(){e=element("div"),t=text(A[12]),attr(e,"class","empty svelte-1uyqfml")},m(n,i){insert(n,e,i),append(e,t)},p(n,i){i[0]&4096&&set_data(t,n[12])},d(n){n&&detach(e)}}}function create_else_block_1$2(A){let e,t,n,i,o,r;var a=A[4];function g(B){return{props:{item:B[41],filterText:B[13],getOptionLabel:B[6],isFirst:isItemFirst(B[42]),isActive:isItemActive(B[41],B[9],B[10]),isHover:isItemHover(B[2],B[41],B[42],B[1]),isSelectable:isItemSelectable(B[41])}}}a&&(t=new a(g(A)));function I(){return A[29](A[42])}function s(){return A[30](A[42])}function c(...B){return A[31](A[41],A[42],...B)}return{c(){e=element("div"),t&&create_component(t.$$.fragment),n=space(),attr(e,"class","listItem"),attr(e,"tabindex","-1")},m(B,d){insert(B,e,d),t&&mount_component(t,e,null),append(e,n),i=!0,o||(r=[listen(e,"mouseover",I),listen(e,"focus",s),listen(e,"click",c)],o=!0)},p(B,d){A=B;const l={};if(d[0]&2&&(l.item=A[41]),d[0]&8192&&(l.filterText=A[13]),d[0]&64&&(l.getOptionLabel=A[6]),d[0]&1538&&(l.isActive=isItemActive(A[41],A[9],A[10])),d[0]&6&&(l.isHover=isItemHover(A[2],A[41],A[42],A[1])),d[0]&2&&(l.isSelectable=isItemSelectable(A[41])),a!==(a=A[4])){if(t){group_outros();const E=t;transition_out(E.$$.fragment,1,0,()=>{destroy_component(E,1)}),check_outros()}a?(t=new a(g(A)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,n)):t=null}else a&&t.$set(l)},i(B){i||(t&&transition_in(t.$$.fragment,B),i=!0)},o(B){t&&transition_out(t.$$.fragment,B),i=!1},d(B){B&&detach(e),t&&destroy_component(t),o=!1,run_all(r)}}}function create_if_block_1$5(A){let e,t=A[7](A[41])+"",n;return{c(){e=element("div"),n=text(t),attr(e,"class","listGroupTitle svelte-1uyqfml")},m(i,o){insert(i,e,o),append(e,n)},p(i,o){o[0]&130&&t!==(t=i[7](i[41])+"")&&set_data(n,t)},i:noop$1,o:noop$1,d(i){i&&detach(e)}}}function create_each_block$5(A){let e,t,n,i;const o=[create_if_block_1$5,create_else_block_1$2],r=[];function a(g,I){return g[41].isGroupHeader&&!g[41].isSelectable?0:1}return e=a(A),t=r[e]=o[e](A),{c(){t.c(),n=empty()},m(g,I){r[e].m(g,I),insert(g,n,I),i=!0},p(g,I){let s=e;e=a(g),e===s?r[e].p(g,I):(group_outros(),transition_out(r[s],1,1,()=>{r[s]=null}),check_outros(),t=r[e],t?t.p(g,I):(t=r[e]=o[e](g),t.c()),transition_in(t,1),t.m(n.parentNode,n))},i(g){i||(transition_in(t),i=!0)},o(g){transition_out(t),i=!1},d(g){r[e].d(g),g&&detach(n)}}}function create_default_slot$3(A){let e,t,n,i,o;var r=A[4];function a(c){return{props:{item:c[41],filterText:c[13],getOptionLabel:c[6],isFirst:isItemFirst(c[42]),isActive:isItemActive(c[41],c[9],c[10]),isHover:isItemHover(c[2],c[41],c[42],c[1]),isSelectable:isItemSelectable(c[41])}}}r&&(t=new r(a(A)));function g(){return A[26](A[42])}function I(){return A[27](A[42])}function s(...c){return A[28](A[41],A[42],...c)}return{c(){e=element("div"),t&&create_component(t.$$.fragment),attr(e,"class","listItem")},m(c,B){insert(c,e,B),t&&mount_component(t,e,null),n=!0,i||(o=[listen(e,"mouseover",g),listen(e,"focus",I),listen(e,"click",s)],i=!0)},p(c,B){A=c;const d={};if(B[1]&1024&&(d.item=A[41]),B[0]&8192&&(d.filterText=A[13]),B[0]&64&&(d.getOptionLabel=A[6]),B[1]&2048&&(d.isFirst=isItemFirst(A[42])),B[0]&1536|B[1]&1024&&(d.isActive=isItemActive(A[41],A[9],A[10])),B[0]&6|B[1]&3072&&(d.isHover=isItemHover(A[2],A[41],A[42],A[1])),B[1]&1024&&(d.isSelectable=isItemSelectable(A[41])),r!==(r=A[4])){if(t){group_outros();const l=t;transition_out(l.$$.fragment,1,0,()=>{destroy_component(l,1)}),check_outros()}r?(t=new r(a(A)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,null)):t=null}else r&&t.$set(d)},i(c){n||(t&&transition_in(t.$$.fragment,c),n=!0)},o(c){t&&transition_out(t.$$.fragment,c),n=!1},d(c){c&&detach(e),t&&destroy_component(t),i=!1,run_all(o)}}}function create_fragment$g(A){let e,t,n,i,o,r;const a=[create_if_block$9,create_else_block$4],g=[];function I(s,c){return s[5]?0:1}return t=I(A),n=g[t]=a[t](A),{c(){e=element("div"),n.c(),attr(e,"class","listContainer svelte-1uyqfml"),attr(e,"style",A[14]),toggle_class(e,"virtualList",A[5])},m(s,c){insert(s,e,c),g[t].m(e,null),A[32](e),i=!0,o||(r=[listen(window,"keydown",A[17]),listen(window,"resize",A[18])],o=!0)},p(s,c){let B=t;t=I(s),t===B?g[t].p(s,c):(group_outros(),transition_out(g[B],1,1,()=>{g[B]=null}),check_outros(),n=g[t],n?n.p(s,c):(n=g[t]=a[t](s),n.c()),transition_in(n,1),n.m(e,null)),(!i||c[0]&16384)&&attr(e,"style",s[14]),c[0]&32&&toggle_class(e,"virtualList",s[5])},i(s){i||(transition_in(n),i=!0)},o(s){transition_out(n),i=!1},d(s){s&&detach(e),g[t].d(),A[32](null),o=!1,run_all(r)}}}function isItemActive(A,e,t){return e&&e[t]===A[t]}function isItemFirst(A){return A===0}function isItemHover(A,e,t,n){return isItemSelectable(e)&&(A===t||n.length===1)}function isItemSelectable(A){return A.isGroupHeader&&A.isSelectable||A.selectable||!A.hasOwnProperty("selectable")}function instance$f(A,e,t){const n=createEventDispatcher();let{container:i=void 0}=e,{VirtualList:o=null}=e,{Item:r=Item}=e,{isVirtualList:a=!1}=e,{items:g=[]}=e,{labelIdentifier:I="label"}=e,{getOptionLabel:s=(Y,X)=>{if(Y)return Y.isCreator?`Create "${X}"`:Y[I]}}=e,{getGroupHeaderLabel:c=null}=e,{itemHeight:B=40}=e,{hoverItemIndex:d=0}=e,{value:l=void 0}=e,{optionIdentifier:E="value"}=e,{hideEmptyState:C=!1}=e,{noOptionsMessage:f="No options"}=e,{isMulti:u=!1}=e,{activeItemIndex:p=0}=e,{filterText:y=""}=e,{parent:D=null}=e,{listPlacement:F=null}=e,{listAutoWidth:G=null}=e,{listOffset:Q=5}=e,h=0,_=!1,b;onMount(()=>{if(g.length>0&&!u&&l){const Y=g.findIndex(X=>X[E]===l[E]);Y&&t(2,d=Y)}M("active"),i.addEventListener("scroll",()=>{clearTimeout(h),h=setTimeout(()=>{_=!1},100)},!1)}),beforeUpdate(()=>{g||t(1,g=[]),g!==b&&g.length>0&&t(2,d=0),b=g});function w(Y){Y.isCreator||n("itemSelected",Y)}function S(Y){_||t(2,d=Y)}function k(Y){const{item:X,i:nA,event:rA}=Y;if(rA.stopPropagation(),l&&!u&&l[E]===X[E])return m();X.isCreator?n("itemCreated",y):isItemSelectable(X)&&(t(19,p=nA),t(2,d=nA),w(X))}function m(){n("closeList")}async function N(Y){if(a)return;let X=!0;for(;X;)Y>0&&d===g.length-1?t(2,d=0):Y<0&&d===0?t(2,d=g.length-1):t(2,d=d+Y),X=!isItemSelectable(g[d]);await tick(),M("hover")}function H(Y){switch(Y.key){case"Escape":Y.preventDefault(),m();break;case"ArrowDown":Y.preventDefault(),g.length&&N(1);break;case"ArrowUp":Y.preventDefault(),g.length&&N(-1);break;case"Enter":if(Y.preventDefault(),g.length===0)break;const X=g[d];if(l&&!u&&l[E]===X[E]){m();break}X.isCreator?n("itemCreated",y):(t(19,p=d),w(g[d]));break;case"Tab":if(Y.preventDefault(),g.length===0||l&&l[E]===g[d][E])return m();t(19,p=d),w(g[d]);break}}function M(Y){if(a||!i)return;let X;const nA=i.querySelector(`.listItem .${Y}`);nA&&(X=i.getBoundingClientRect().bottom-nA.getBoundingClientRect().bottom),t(0,i.scrollTop-=X,i)}let U;function v(){const{height:Y,width:X}=D.getBoundingClientRect();t(14,U=""),t(14,U+=`min-width:${X}px;width:${G?"auto":"100%"};`),F==="top"||F==="auto"&&isOutOfViewport(D,i).bottom?t(14,U+=`bottom:${Y+Q}px;`):t(14,U+=`top:${Y+Q}px;`)}const L=Y=>S(Y),x=Y=>S(Y),q=(Y,X,nA)=>k({item:Y,i:X,event:nA}),P=Y=>S(Y),O=Y=>S(Y),Z=(Y,X,nA)=>k({item:Y,i:X,event:nA});function AA(Y){binding_callbacks[Y?"unshift":"push"](()=>{i=Y,t(0,i)})}return A.$$set=Y=>{"container"in Y&&t(0,i=Y.container),"VirtualList"in Y&&t(3,o=Y.VirtualList),"Item"in Y&&t(4,r=Y.Item),"isVirtualList"in Y&&t(5,a=Y.isVirtualList),"items"in Y&&t(1,g=Y.items),"labelIdentifier"in Y&&t(20,I=Y.labelIdentifier),"getOptionLabel"in Y&&t(6,s=Y.getOptionLabel),"getGroupHeaderLabel"in Y&&t(7,c=Y.getGroupHeaderLabel),"itemHeight"in Y&&t(8,B=Y.itemHeight),"hoverItemIndex"in Y&&t(2,d=Y.hoverItemIndex),"value"in Y&&t(9,l=Y.value),"optionIdentifier"in Y&&t(10,E=Y.optionIdentifier),"hideEmptyState"in Y&&t(11,C=Y.hideEmptyState),"noOptionsMessage"in Y&&t(12,f=Y.noOptionsMessage),"isMulti"in Y&&t(21,u=Y.isMulti),"activeItemIndex"in Y&&t(19,p=Y.activeItemIndex),"filterText"in Y&&t(13,y=Y.filterText),"parent"in Y&&t(22,D=Y.parent),"listPlacement"in Y&&t(23,F=Y.listPlacement),"listAutoWidth"in Y&&t(24,G=Y.listAutoWidth),"listOffset"in Y&&t(25,Q=Y.listOffset)},A.$$.update=()=>{A.$$.dirty[0]&4194305&&D&&i&&v()},[i,g,d,o,r,a,s,c,B,l,E,C,f,y,U,S,k,H,v,p,I,u,D,F,G,Q,L,x,q,P,O,Z,AA]}class List extends SvelteComponent{constructor(e){super(),init(this,e,instance$f,create_fragment$g,safe_not_equal,{container:0,VirtualList:3,Item:4,isVirtualList:5,items:1,labelIdentifier:20,getOptionLabel:6,getGroupHeaderLabel:7,itemHeight:8,hoverItemIndex:2,value:9,optionIdentifier:10,hideEmptyState:11,noOptionsMessage:12,isMulti:21,activeItemIndex:19,filterText:13,parent:22,listPlacement:23,listAutoWidth:24,listOffset:25},null,[-1,-1])}}var Selection_svelte_svelte_type_style_lang="";function create_fragment$f(A){let e,t=A[0](A[1])+"";return{c(){e=element("div"),attr(e,"class","selection svelte-pu1q1n")},m(n,i){insert(n,e,i),e.innerHTML=t},p(n,[i]){i&3&&t!==(t=n[0](n[1])+"")&&(e.innerHTML=t)},i:noop$1,o:noop$1,d(n){n&&detach(e)}}}function instance$e(A,e,t){let{getSelectionLabel:n=void 0}=e,{item:i=void 0}=e;return A.$$set=o=>{"getSelectionLabel"in o&&t(0,n=o.getSelectionLabel),"item"in o&&t(1,i=o.item)},[n,i]}class Selection extends SvelteComponent{constructor(e){super(),init(this,e,instance$e,create_fragment$f,safe_not_equal,{getSelectionLabel:0,item:1})}}var MultiSelection_svelte_svelte_type_style_lang="";function get_each_context$4(A,e,t){const n=A.slice();return n[9]=e[t],n[11]=t,n}function create_if_block$8(A){let e,t,n;function i(...o){return A[6](A[11],...o)}return{c(){e=element("div"),e.innerHTML='<svg width="100%" height="100%" viewBox="-2 -2 50 50" focusable="false" aria-hidden="true" role="presentation" class="svelte-liu9pa"><path d="M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z"></path></svg>',attr(e,"class","multiSelectItem_clear svelte-liu9pa")},m(o,r){insert(o,e,r),t||(n=listen(e,"click",i),t=!0)},p(o,r){A=o},d(o){o&&detach(e),t=!1,n()}}}function create_each_block$4(A){let e,t,n=A[4](A[9])+"",i,o,r,a,g,I=!A[2]&&!A[3]&&create_if_block$8(A);function s(...c){return A[7](A[11],...c)}return{c(){e=element("div"),t=element("div"),i=space(),I&&I.c(),o=space(),attr(t,"class","multiSelectItem_label svelte-liu9pa"),attr(e,"class",r="multiSelectItem "+(A[1]===A[11]?"active":"")+" "+(A[2]?"disabled":"")+" svelte-liu9pa")},m(c,B){insert(c,e,B),append(e,t),t.innerHTML=n,append(e,i),I&&I.m(e,null),append(e,o),a||(g=listen(e,"click",s),a=!0)},p(c,B){A=c,B&17&&n!==(n=A[4](A[9])+"")&&(t.innerHTML=n),!A[2]&&!A[3]?I?I.p(A,B):(I=create_if_block$8(A),I.c(),I.m(e,o)):I&&(I.d(1),I=null),B&6&&r!==(r="multiSelectItem "+(A[1]===A[11]?"active":"")+" "+(A[2]?"disabled":"")+" svelte-liu9pa")&&attr(e,"class",r)},d(c){c&&detach(e),I&&I.d(),a=!1,g()}}}function create_fragment$e(A){let e,t=A[0],n=[];for(let i=0;i<t.length;i+=1)n[i]=create_each_block$4(get_each_context$4(A,t,i));return{c(){for(let i=0;i<n.length;i+=1)n[i].c();e=empty()},m(i,o){for(let r=0;r<n.length;r+=1)n[r].m(i,o);insert(i,e,o)},p(i,[o]){if(o&63){t=i[0];let r;for(r=0;r<t.length;r+=1){const a=get_each_context$4(i,t,r);n[r]?n[r].p(a,o):(n[r]=create_each_block$4(a),n[r].c(),n[r].m(e.parentNode,e))}for(;r<n.length;r+=1)n[r].d(1);n.length=t.length}},i:noop$1,o:noop$1,d(i){destroy_each(n,i),i&&detach(e)}}}function instance$d(A,e,t){const n=createEventDispatcher();let{value:i=[]}=e,{activeValue:o=void 0}=e,{isDisabled:r=!1}=e,{multiFullItemClearable:a=!1}=e,{getSelectionLabel:g=void 0}=e;function I(B,d){d.stopPropagation(),n("multiItemClear",{i:B})}const s=(B,d)=>I(B,d),c=(B,d)=>a?I(B,d):{};return A.$$set=B=>{"value"in B&&t(0,i=B.value),"activeValue"in B&&t(1,o=B.activeValue),"isDisabled"in B&&t(2,r=B.isDisabled),"multiFullItemClearable"in B&&t(3,a=B.multiFullItemClearable),"getSelectionLabel"in B&&t(4,g=B.getSelectionLabel)},[i,o,r,a,g,I,s,c]}class MultiSelection extends SvelteComponent{constructor(e){super(),init(this,e,instance$d,create_fragment$e,safe_not_equal,{value:0,activeValue:1,isDisabled:2,multiFullItemClearable:3,getSelectionLabel:4})}}var VirtualList_svelte_svelte_type_style_lang="";function get_each_context$3(A,e,t){const n=A.slice();return n[23]=e[t],n}const get_default_slot_changes=A=>({item:A&32,i:A&32,hoverItemIndex:A&2}),get_default_slot_context=A=>({item:A[23].data,i:A[23].index,hoverItemIndex:A[1]});function fallback_block(A){let e;return{c(){e=text("Missing template")},m(t,n){insert(t,e,n)},d(t){t&&detach(e)}}}function create_each_block$3(A,e){let t,n,i;const o=e[15].default,r=create_slot(o,e,e[14],get_default_slot_context),a=r||fallback_block();return{key:A,first:null,c(){t=element("svelte-virtual-list-row"),a&&a.c(),n=space(),set_custom_element_data(t,"class","svelte-g2cagw"),this.first=t},m(g,I){insert(g,t,I),a&&a.m(t,null),append(t,n),i=!0},p(g,I){e=g,r&&r.p&&(!i||I&16418)&&update_slot_base(r,o,e,e[14],i?get_slot_changes(o,e[14],I,get_default_slot_changes):get_all_dirty_from_scope(e[14]),get_default_slot_context)},i(g){i||(transition_in(a,g),i=!0)},o(g){transition_out(a,g),i=!1},d(g){g&&detach(t),a&&a.d(g)}}}function create_fragment$d(A){let e,t,n=[],i=new Map,o,r,a,g,I=A[5];const s=c=>c[23].index;for(let c=0;c<I.length;c+=1){let B=get_each_context$3(A,I,c),d=s(B);i.set(d,n[c]=create_each_block$3(d,B))}return{c(){e=element("svelte-virtual-list-viewport"),t=element("svelte-virtual-list-contents");for(let c=0;c<n.length;c+=1)n[c].c();set_style(t,"padding-top",A[6]+"px"),set_style(t,"padding-bottom",A[7]+"px"),set_custom_element_data(t,"class","svelte-g2cagw"),set_style(e,"height",A[0]),set_custom_element_data(e,"class","svelte-g2cagw"),add_render_callback(()=>A[18].call(e))},m(c,B){insert(c,e,B),append(e,t);for(let d=0;d<n.length;d+=1)n[d].m(t,null);A[16](t),A[17](e),o=add_resize_listener(e,A[18].bind(e)),r=!0,a||(g=listen(e,"scroll",A[8]),a=!0)},p(c,[B]){B&16418&&(I=c[5],group_outros(),n=update_keyed_each(n,B,s,1,c,I,i,t,outro_and_destroy_block,create_each_block$3,null,get_each_context$3),check_outros()),(!r||B&64)&&set_style(t,"padding-top",c[6]+"px"),(!r||B&128)&&set_style(t,"padding-bottom",c[7]+"px"),(!r||B&1)&&set_style(e,"height",c[0])},i(c){if(!r){for(let B=0;B<I.length;B+=1)transition_in(n[B]);r=!0}},o(c){for(let B=0;B<n.length;B+=1)transition_out(n[B]);r=!1},d(c){c&&detach(e);for(let B=0;B<n.length;B+=1)n[B].d();A[16](null),A[17](null),o(),a=!1,g()}}}function instance$c(A,e,t){let{$$slots:n={},$$scope:i}=e,{items:o=void 0}=e,{height:r="100%"}=e,{itemHeight:a=40}=e,{hoverItemIndex:g=0}=e,{start:I=0}=e,{end:s=0}=e,c=[],B,d,l,E=0,C,f,u=0,p=0,y;async function D(_,b,w){const{scrollTop:S}=d;await tick();let k=u-S,m=I;for(;k<b&&m<_.length;){let H=B[m-I];H||(t(10,s=m+1),await tick(),H=B[m-I]),k+=c[m]=w||H.offsetHeight,m+=1}t(10,s=m);const N=_.length-s;y=(u+k)/s,t(7,p=N*y),c.length=_.length,d&&t(3,d.scrollTop=0,d)}async function F(){const{scrollTop:_}=d,b=I;for(let m=0;m<B.length;m+=1)c[I+m]=a||B[m].offsetHeight;let w=0,S=0;for(;w<o.length;){const m=c[w]||y;if(S+m>_){t(9,I=w),t(6,u=S);break}S+=m,w+=1}for(;w<o.length&&(S+=c[w]||y,w+=1,!(S>_+E)););t(10,s=w);const k=o.length-s;for(y=S/s;w<o.length;)c[w++]=y;if(t(7,p=k*y),I<b){await tick();let m=0,N=0;for(let M=I;M<b;M+=1)B[M-I]&&(m+=c[M],N+=a||B[M-I].offsetHeight);const H=N-m;d.scrollTo(0,_+H)}}onMount(()=>{B=l.getElementsByTagName("svelte-virtual-list-row"),t(13,f=!0)});function G(_){binding_callbacks[_?"unshift":"push"](()=>{l=_,t(4,l)})}function Q(_){binding_callbacks[_?"unshift":"push"](()=>{d=_,t(3,d)})}function h(){E=this.offsetHeight,t(2,E)}return A.$$set=_=>{"items"in _&&t(11,o=_.items),"height"in _&&t(0,r=_.height),"itemHeight"in _&&t(12,a=_.itemHeight),"hoverItemIndex"in _&&t(1,g=_.hoverItemIndex),"start"in _&&t(9,I=_.start),"end"in _&&t(10,s=_.end),"$$scope"in _&&t(14,i=_.$$scope)},A.$$.update=()=>{A.$$.dirty&3584&&t(5,C=o.slice(I,s).map((_,b)=>({index:b+I,data:_}))),A.$$.dirty&14340&&f&&D(o,E,a)},[r,g,E,d,l,C,u,p,F,I,s,o,a,f,i,n,G,Q,h]}class VirtualList extends SvelteComponent{constructor(e){super(),init(this,e,instance$c,create_fragment$d,safe_not_equal,{items:11,height:0,itemHeight:12,hoverItemIndex:1,start:9,end:10})}}function create_fragment$c(A){let e,t;return{c(){e=svg_element("svg"),t=svg_element("path"),attr(t,"fill","currentColor"),attr(t,"d",`M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124
    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z`),attr(e,"width","100%"),attr(e,"height","100%"),attr(e,"viewBox","-2 -2 50 50"),attr(e,"focusable","false"),attr(e,"aria-hidden","true"),attr(e,"role","presentation")},m(n,i){insert(n,e,i),append(e,t)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(e)}}}class ClearIcon extends SvelteComponent{constructor(e){super(),init(this,e,null,create_fragment$c,safe_not_equal,{})}}function debounce(A,e,t){let n;return function(){let o=this,r=arguments,a=function(){n=null,t||A.apply(o,r)},g=t&&!n;clearTimeout(n),n=setTimeout(a,e),g&&A.apply(o,r)}}var Select_svelte_svelte_type_style_lang="";function get_each_context$2(A,e,t){const n=A.slice();return n[103]=e[t],n}function create_if_block_10(A){let e,t,n,i,o;return{c(){e=element("span"),t=text(A[33]),n=space(),i=element("span"),o=text(A[32]),attr(e,"id","aria-selection"),attr(i,"id","aria-context")},m(r,a){insert(r,e,a),append(e,t),insert(r,n,a),insert(r,i,a),append(i,o)},p(r,a){a[1]&4&&set_data(t,r[33]),a[1]&2&&set_data(o,r[32])},d(r){r&&detach(e),r&&detach(n),r&&detach(i)}}}function create_if_block_9(A){let e,t,n;const i=[A[18]];var o=A[17];function r(a){let g={};for(let I=0;I<i.length;I+=1)g=assign(g,i[I]);return{props:g}}return o&&(e=new o(r())),{c(){e&&create_component(e.$$.fragment),t=empty()},m(a,g){e&&mount_component(e,a,g),insert(a,t,g),n=!0},p(a,g){const I=g[0]&262144?get_spread_update(i,[get_spread_object(a[18])]):{};if(o!==(o=a[17])){if(e){group_outros();const s=e;transition_out(s.$$.fragment,1,0,()=>{destroy_component(s,1)}),check_outros()}o?(e=new o(r()),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,t.parentNode,t)):e=null}else o&&e.$set(I)},i(a){n||(e&&transition_in(e.$$.fragment,a),n=!0)},o(a){e&&transition_out(e.$$.fragment,a),n=!1},d(a){a&&detach(t),e&&destroy_component(e,a)}}}function create_if_block_8(A){let e,t,n;var i=A[26];function o(r){return{props:{value:r[2],getSelectionLabel:r[12],activeValue:r[30],isDisabled:r[9],multiFullItemClearable:r[8]}}}return i&&(e=new i(o(A)),e.$on("multiItemClear",A[38]),e.$on("focus",A[40])),{c(){e&&create_component(e.$$.fragment),t=empty()},m(r,a){e&&mount_component(e,r,a),insert(r,t,a),n=!0},p(r,a){const g={};if(a[0]&4&&(g.value=r[2]),a[0]&4096&&(g.getSelectionLabel=r[12]),a[0]&1073741824&&(g.activeValue=r[30]),a[0]&512&&(g.isDisabled=r[9]),a[0]&256&&(g.multiFullItemClearable=r[8]),i!==(i=r[26])){if(e){group_outros();const I=e;transition_out(I.$$.fragment,1,0,()=>{destroy_component(I,1)}),check_outros()}i?(e=new i(o(r)),e.$on("multiItemClear",r[38]),e.$on("focus",r[40]),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,t.parentNode,t)):e=null}else i&&e.$set(g)},i(r){n||(e&&transition_in(e.$$.fragment,r),n=!0)},o(r){e&&transition_out(e.$$.fragment,r),n=!1},d(r){r&&detach(t),e&&destroy_component(e,r)}}}function create_if_block_7(A){let e,t,n,i,o;var r=A[25];function a(g){return{props:{item:g[2],getSelectionLabel:g[12]}}}return r&&(t=new r(a(A))),{c(){e=element("div"),t&&create_component(t.$$.fragment),attr(e,"class","selectedItem svelte-17l1npl")},m(g,I){insert(g,e,I),t&&mount_component(t,e,null),n=!0,i||(o=listen(e,"focus",A[40]),i=!0)},p(g,I){const s={};if(I[0]&4&&(s.item=g[2]),I[0]&4096&&(s.getSelectionLabel=g[12]),r!==(r=g[25])){if(t){group_outros();const c=t;transition_out(c.$$.fragment,1,0,()=>{destroy_component(c,1)}),check_outros()}r?(t=new r(a(g)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,null)):t=null}else r&&t.$set(s)},i(g){n||(t&&transition_in(t.$$.fragment,g),n=!0)},o(g){t&&transition_out(t.$$.fragment,g),n=!1},d(g){g&&detach(e),t&&destroy_component(t),i=!1,o()}}}function create_if_block_6(A){let e,t,n,i,o;var r=A[23];function a(g){return{}}return r&&(t=new r(a())),{c(){e=element("div"),t&&create_component(t.$$.fragment),attr(e,"class","clearSelect svelte-17l1npl"),attr(e,"aria-hidden","true")},m(g,I){insert(g,e,I),t&&mount_component(t,e,null),n=!0,i||(o=listen(e,"click",prevent_default(A[27])),i=!0)},p(g,I){if(r!==(r=g[23])){if(t){group_outros();const s=t;transition_out(s.$$.fragment,1,0,()=>{destroy_component(s,1)}),check_outros()}r?(t=new r(a()),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,null)):t=null}},i(g){n||(t&&transition_in(t.$$.fragment,g),n=!0)},o(g){t&&transition_out(t.$$.fragment,g),n=!1},d(g){g&&detach(e),t&&destroy_component(t),i=!1,o()}}}function create_if_block_4$1(A){let e;function t(o,r){return o[22]?create_if_block_5:create_else_block$3}let n=t(A),i=n(A);return{c(){e=element("div"),i.c(),attr(e,"class","indicator svelte-17l1npl"),attr(e,"aria-hidden","true")},m(o,r){insert(o,e,r),i.m(e,null)},p(o,r){n===(n=t(o))&&i?i.p(o,r):(i.d(1),i=n(o),i&&(i.c(),i.m(e,null)))},d(o){o&&detach(e),i.d()}}}function create_else_block$3(A){let e,t;return{c(){e=svg_element("svg"),t=svg_element("path"),attr(t,"d",`M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747
          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0
          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502
          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0
          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z`),attr(e,"width","100%"),attr(e,"height","100%"),attr(e,"viewBox","0 0 20 20"),attr(e,"focusable","false"),attr(e,"aria-hidden","true"),attr(e,"class","svelte-17l1npl")},m(n,i){insert(n,e,i),append(e,t)},p:noop$1,d(n){n&&detach(e)}}}function create_if_block_5(A){let e,t;return{c(){e=new HtmlTag(!1),t=empty(),e.a=t},m(n,i){e.m(A[22],n,i),insert(n,t,i)},p(n,i){i[0]&4194304&&e.p(n[22])},d(n){n&&detach(t),n&&e.d()}}}function create_if_block_3$2(A){let e;return{c(){e=element("div"),e.innerHTML='<svg class="spinner_icon svelte-17l1npl" viewBox="25 25 50 50"><circle class="spinner_path svelte-17l1npl" cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="5" stroke-miterlimit="10"></circle></svg>',attr(e,"class","spinner svelte-17l1npl")},m(t,n){insert(t,e,n)},d(t){t&&detach(e)}}}function create_if_block_2$4(A){let e,t,n,i;const o=[A[34]];function r(I){A[84](I)}var a=A[24];function g(I){let s={};for(let c=0;c<o.length;c+=1)s=assign(s,o[c]);return I[28]!==void 0&&(s.hoverItemIndex=I[28]),{props:s}}return a&&(e=new a(g(A)),binding_callbacks.push(()=>bind(e,"hoverItemIndex",r)),e.$on("itemSelected",A[43]),e.$on("itemCreated",A[44]),e.$on("closeList",A[45])),{c(){e&&create_component(e.$$.fragment),n=empty()},m(I,s){e&&mount_component(e,I,s),insert(I,n,s),i=!0},p(I,s){const c=s[1]&8?get_spread_update(o,[get_spread_object(I[34])]):{};if(!t&&s[0]&268435456&&(t=!0,c.hoverItemIndex=I[28],add_flush_callback(()=>t=!1)),a!==(a=I[24])){if(e){group_outros();const B=e;transition_out(B.$$.fragment,1,0,()=>{destroy_component(B,1)}),check_outros()}a?(e=new a(g(I)),binding_callbacks.push(()=>bind(e,"hoverItemIndex",r)),e.$on("itemSelected",I[43]),e.$on("itemCreated",I[44]),e.$on("closeList",I[45]),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,n.parentNode,n)):e=null}else a&&e.$set(c)},i(I){i||(e&&transition_in(e.$$.fragment,I),i=!0)},o(I){e&&transition_out(e.$$.fragment,I),i=!1},d(I){I&&detach(n),e&&destroy_component(e,I)}}}function create_if_block_1$4(A){let e,t,n;return{c(){e=element("input"),attr(e,"name",t=A[16].name),attr(e,"type","hidden"),e.value=n=A[2]?A[12](A[2]):null,attr(e,"class","svelte-17l1npl")},m(i,o){insert(i,e,o)},p(i,o){o[0]&65536&&t!==(t=i[16].name)&&attr(e,"name",t),o[0]&4100&&n!==(n=i[2]?i[12](i[2]):null)&&(e.value=n)},d(i){i&&detach(e)}}}function create_if_block$7(A){let e,t=A[2],n=[];for(let i=0;i<t.length;i+=1)n[i]=create_each_block$2(get_each_context$2(A,t,i));return{c(){for(let i=0;i<n.length;i+=1)n[i].c();e=empty()},m(i,o){for(let r=0;r<n.length;r+=1)n[r].m(i,o);insert(i,e,o)},p(i,o){if(o[0]&69636){t=i[2];let r;for(r=0;r<t.length;r+=1){const a=get_each_context$2(i,t,r);n[r]?n[r].p(a,o):(n[r]=create_each_block$2(a),n[r].c(),n[r].m(e.parentNode,e))}for(;r<n.length;r+=1)n[r].d(1);n.length=t.length}},d(i){destroy_each(n,i),i&&detach(e)}}}function create_each_block$2(A){let e,t,n;return{c(){e=element("input"),attr(e,"name",t=A[16].name),attr(e,"type","hidden"),e.value=n=A[103]?A[12](A[103]):null,attr(e,"class","svelte-17l1npl")},m(i,o){insert(i,e,o)},p(i,o){o[0]&65536&&t!==(t=i[16].name)&&attr(e,"name",t),o[0]&4100&&n!==(n=i[103]?i[12](i[103]):null)&&(e.value=n)},d(i){i&&detach(e)}}}function create_fragment$b(A){let e,t,n,i,o,r,a,g,I,s,c,B,d,l,E,C,f,u,p=A[1]&&create_if_block_10(A),y=A[17]&&create_if_block_9(A),D=A[35]&&create_if_block_8(A),F=[{readOnly:a=!A[13]},A[31],{placeholder:A[36]},{style:A[14]},{disabled:A[9]}],G={};for(let m=0;m<F.length;m+=1)G=assign(G,F[m]);let Q=!A[7]&&A[29]&&create_if_block_7(A),h=A[37]&&create_if_block_6(A),_=!A[37]&&(A[20]||A[19]&&!A[2]||!A[13]&&!A[9]&&!A[4]&&(A[29]&&!A[15]||!A[29]))&&create_if_block_4$1(A),b=A[4]&&create_if_block_3$2(),w=A[5]&&create_if_block_2$4(A),S=(!A[7]||A[7]&&!A[35])&&create_if_block_1$4(A),k=A[7]&&A[35]&&create_if_block$7(A);return{c(){e=element("div"),t=element("span"),p&&p.c(),n=space(),y&&y.c(),i=space(),D&&D.c(),o=space(),r=element("input"),g=space(),Q&&Q.c(),I=space(),h&&h.c(),s=space(),_&&_.c(),c=space(),b&&b.c(),B=space(),w&&w.c(),d=space(),S&&S.c(),l=space(),k&&k.c(),attr(t,"aria-live","polite"),attr(t,"aria-atomic","false"),attr(t,"aria-relevant","additions text"),attr(t,"class","a11yText svelte-17l1npl"),set_attributes(r,G),toggle_class(r,"svelte-17l1npl",!0),attr(e,"class",E="selectContainer "+A[21]+" svelte-17l1npl"),attr(e,"style",A[11]),toggle_class(e,"hasError",A[10]),toggle_class(e,"multiSelect",A[7]),toggle_class(e,"disabled",A[9]),toggle_class(e,"focused",A[1])},m(m,N){insert(m,e,N),append(e,t),p&&p.m(t,null),append(e,n),y&&y.m(e,null),append(e,i),D&&D.m(e,null),append(e,o),append(e,r),r.autofocus&&r.focus(),A[82](r),set_input_value(r,A[3]),append(e,g),Q&&Q.m(e,null),append(e,I),h&&h.m(e,null),append(e,s),_&&_.m(e,null),append(e,c),b&&b.m(e,null),append(e,B),w&&w.m(e,null),append(e,d),S&&S.m(e,null),append(e,l),k&&k.m(e,null),A[85](e),C=!0,f||(u=[listen(window,"click",A[41]),listen(window,"focusin",A[41]),listen(window,"keydown",A[39]),listen(r,"focus",A[40]),listen(r,"input",A[83]),listen(e,"click",A[42])],f=!0)},p(m,N){m[1]?p?p.p(m,N):(p=create_if_block_10(m),p.c(),p.m(t,null)):p&&(p.d(1),p=null),m[17]?y?(y.p(m,N),N[0]&131072&&transition_in(y,1)):(y=create_if_block_9(m),y.c(),transition_in(y,1),y.m(e,i)):y&&(group_outros(),transition_out(y,1,1,()=>{y=null}),check_outros()),m[35]?D?(D.p(m,N),N[1]&16&&transition_in(D,1)):(D=create_if_block_8(m),D.c(),transition_in(D,1),D.m(e,o)):D&&(group_outros(),transition_out(D,1,1,()=>{D=null}),check_outros()),set_attributes(r,G=get_spread_update(F,[(!C||N[0]&8192&&a!==(a=!m[13]))&&{readOnly:a},N[1]&1&&m[31],(!C||N[1]&32)&&{placeholder:m[36]},(!C||N[0]&16384)&&{style:m[14]},(!C||N[0]&512)&&{disabled:m[9]}])),N[0]&8&&r.value!==m[3]&&set_input_value(r,m[3]),toggle_class(r,"svelte-17l1npl",!0),!m[7]&&m[29]?Q?(Q.p(m,N),N[0]&536871040&&transition_in(Q,1)):(Q=create_if_block_7(m),Q.c(),transition_in(Q,1),Q.m(e,I)):Q&&(group_outros(),transition_out(Q,1,1,()=>{Q=null}),check_outros()),m[37]?h?(h.p(m,N),N[1]&64&&transition_in(h,1)):(h=create_if_block_6(m),h.c(),transition_in(h,1),h.m(e,s)):h&&(group_outros(),transition_out(h,1,1,()=>{h=null}),check_outros()),!m[37]&&(m[20]||m[19]&&!m[2]||!m[13]&&!m[9]&&!m[4]&&(m[29]&&!m[15]||!m[29]))?_?_.p(m,N):(_=create_if_block_4$1(m),_.c(),_.m(e,c)):_&&(_.d(1),_=null),m[4]?b||(b=create_if_block_3$2(),b.c(),b.m(e,B)):b&&(b.d(1),b=null),m[5]?w?(w.p(m,N),N[0]&32&&transition_in(w,1)):(w=create_if_block_2$4(m),w.c(),transition_in(w,1),w.m(e,d)):w&&(group_outros(),transition_out(w,1,1,()=>{w=null}),check_outros()),!m[7]||m[7]&&!m[35]?S?S.p(m,N):(S=create_if_block_1$4(m),S.c(),S.m(e,l)):S&&(S.d(1),S=null),m[7]&&m[35]?k?k.p(m,N):(k=create_if_block$7(m),k.c(),k.m(e,null)):k&&(k.d(1),k=null),(!C||N[0]&2097152&&E!==(E="selectContainer "+m[21]+" svelte-17l1npl"))&&attr(e,"class",E),(!C||N[0]&2048)&&attr(e,"style",m[11]),N[0]&2098176&&toggle_class(e,"hasError",m[10]),N[0]&2097280&&toggle_class(e,"multiSelect",m[7]),N[0]&2097664&&toggle_class(e,"disabled",m[9]),N[0]&2097154&&toggle_class(e,"focused",m[1])},i(m){C||(transition_in(y),transition_in(D),transition_in(Q),transition_in(h),transition_in(w),C=!0)},o(m){transition_out(y),transition_out(D),transition_out(Q),transition_out(h),transition_out(w),C=!1},d(m){m&&detach(e),p&&p.d(),y&&y.d(),D&&D.d(),A[82](null),Q&&Q.d(),h&&h.d(),_&&_.d(),b&&b.d(),w&&w.d(),S&&S.d(),k&&k.d(),A[85](null),f=!1,run_all(u)}}}function convertStringItemsToObjects(A){return A.map((e,t)=>({index:t,value:e,label:`${e}`}))}function instance$b(A,e,t){let n,i,o,r,a,g,I,s;const c=createEventDispatcher();let{id:B=null}=e,{container:d=void 0}=e,{input:l=void 0}=e,{isMulti:E=!1}=e,{multiFullItemClearable:C=!1}=e,{isDisabled:f=!1}=e,{isCreatable:u=!1}=e,{isFocused:p=!1}=e,{value:y=null}=e,{filterText:D=""}=e,{placeholder:F="Select..."}=e,{placeholderAlwaysShow:G=!1}=e,{items:Q=null}=e,{itemFilter:h=(R,z,iA)=>`${R}`.toLowerCase().includes(z.toLowerCase())}=e,{groupBy:_=void 0}=e,{groupFilter:b=R=>R}=e,{isGroupHeaderSelectable:w=!1}=e,{getGroupHeaderLabel:S=R=>R[k]||R.id}=e,{labelIdentifier:k="label"}=e,{getOptionLabel:m=(R,z)=>R.isCreator?`Create "${z}"`:R[k]}=e,{optionIdentifier:N="value"}=e,{loadOptions:H=void 0}=e,{hasError:M=!1}=e,{containerStyles:U=""}=e,{getSelectionLabel:v=R=>R?R[k]:null}=e,{createGroupHeaderItem:L=R=>({value:R,label:R})}=e,{createItem:x=R=>({value:R,label:R})}=e;const q=()=>n;let{isSearchable:P=!0}=e,{inputStyles:O=""}=e,{isClearable:Z=!0}=e,{isWaiting:AA=!1}=e,{listPlacement:Y="auto"}=e,{listOpen:X=!1}=e,{isVirtualList:nA=!1}=e,{loadOptionsInterval:rA=300}=e,{noOptionsMessage:aA="No options"}=e,{hideEmptyState:tA=!1}=e,{inputAttributes:J={}}=e,{listAutoWidth:j=!0}=e,{itemHeight:CA=40}=e,{Icon:T=void 0}=e,{iconProps:V={}}=e,{showChevron:eA=!1}=e,{showIndicator:IA=!1}=e,{containerClasses:gA=""}=e,{indicatorSvg:BA=void 0}=e,{listOffset:lA=5}=e,{ClearIcon:mA=ClearIcon}=e,{Item:DA=Item}=e,{List:fA=List}=e,{Selection:yA=Selection}=e,{MultiSelection:UA=MultiSelection}=e,{VirtualList:kA=VirtualList}=e;function MA(R){if(R.loadOptions&&R.filterText.length>0)return;if(!R.items)return[];R.items&&R.items.length>0&&typeof R.items[0]!="object"&&(R.items=convertStringItemsToObjects(R.items));let z=R.items.filter(iA=>{let EA=h(m(iA,R.filterText),R.filterText,iA);return EA&&R.isMulti&&R.value&&Array.isArray(R.value)&&(EA=!R.value.some(SA=>SA[R.optionIdentifier]===iA[R.optionIdentifier])),EA});return R.groupBy&&(z=PA(z)),R.isCreatable&&(z=uA(z,R.filterText)),z}function uA(R,z){if(z.length===0)return R;const iA=x(z);return R[0]&&z===R[0][k]?R:(iA.isCreator=!0,[...R,iA])}let{selectedValue:QA=null}=e,oA,hA,NA,RA,HA,wA;const xA=debounce(async()=>{t(4,AA=!0);let R=await H(D).catch(z=>{console.warn("svelte-select loadOptions error :>> ",z),c("error",{type:"loadOptions",details:z})});R&&!R.cancelled&&(R?(R&&R.length>0&&typeof R[0]!="object"&&(R=convertStringItemsToObjects(R)),t(81,n=[...R]),c("loaded",{items:n})):t(81,n=[]),u&&t(81,n=uA(n,D)),t(4,AA=!1),t(1,p=!0),t(5,X=!0))},rA);function vA(){typeof y=="string"?t(2,y={[N]:y,label:y}):E&&Array.isArray(y)&&y.length>0&&t(2,y=y.map(R=>typeof R=="string"?{value:R,label:R}:R))}let _A;function KA(){t(31,_A=Object.assign({autocapitalize:"none",autocomplete:"off",autocorrect:"off",spellcheck:!1,tabindex:0,type:"text","aria-autocomplete":"list"},J)),B&&t(31,_A.id=B,_A),P||t(31,_A.readonly=!0,_A)}function PA(R){const z=[],iA={};R.forEach(SA=>{const pA=_(SA);z.includes(pA)||(z.push(pA),iA[pA]=[],pA&&iA[pA].push(Object.assign(L(pA,SA),{id:pA,isGroupHeader:!0,isSelectable:w}))),iA[pA].push(Object.assign({isGroupItem:!!pA},SA))});const EA=[];return b(z).forEach(SA=>{EA.push(...iA[SA])}),EA}function VA(){if(E){JSON.stringify(y)!==JSON.stringify(hA)&&GA()&&c("select",y);return}(!hA||JSON.stringify(y[N])!==JSON.stringify(hA[N]))&&c("select",y)}function ZA(){p||X?bA():l&&l.blur()}function YA(){y&&(Array.isArray(y)?t(2,y=[...y]):t(2,y=[y]))}function XA(){y&&t(2,y=null)}function zA(){D.length!==0&&(t(1,p=!0),t(5,X=!0),H?xA():(t(5,X=!0),E&&t(30,oA=void 0)))}beforeUpdate(async()=>{t(77,hA=y),t(78,NA=D),t(79,RA=p),t(80,HA=E)});function GA(){let R=!0;if(y){const z=[],iA=[];y.forEach(EA=>{z.includes(EA[N])?R=!1:(z.push(EA[N]),iA.push(EA))}),R||t(2,y=iA)}return R}function JA(R){let z=R?R[N]:y[N];return Q.find(iA=>iA[N]===z)}function qA(R){!R||R.length===0||R.some(z=>typeof z!="object")||!y||(E?y.some(z=>!z||!z[N]):!y[N])||(Array.isArray(y)?t(2,y=y.map(z=>JA(z)||z)):t(2,y=JA()||y))}function sA(R){const{detail:z}=R,iA=y[z?z.i:y.length-1];y.length===1?t(2,y=void 0):t(2,y=y.filter(EA=>EA!==iA)),c("clear",iA)}function dA(R){if(!!p)switch(R.key){case"ArrowDown":R.preventDefault(),t(5,X=!0),t(30,oA=void 0);break;case"ArrowUp":R.preventDefault(),t(5,X=!0),t(30,oA=void 0);break;case"Tab":X||t(1,p=!1);break;case"Backspace":if(!E||D.length>0)return;if(E&&y&&y.length>0){if(sA(oA!==void 0?oA:y.length-1),oA===0||oA===void 0)break;t(30,oA=y.length>oA?oA-1:void 0)}break;case"ArrowLeft":if(!E||D.length>0)return;oA===void 0?t(30,oA=y.length-1):y.length>oA&&oA!==0&&t(30,oA-=1);break;case"ArrowRight":if(!E||D.length>0||oA===void 0)return;oA===y.length-1?t(30,oA=void 0):oA<y.length-1&&t(30,oA+=1);break}}function bA(){t(1,p=!0),l&&l.focus()}function WA(R){if(!d)return;const z=R.path&&R.path.length>0?R.path[0]:R.target;d.contains(z)||d.contains(R.relatedTarget)||(t(1,p=!1),t(5,X=!1),t(30,oA=void 0),l&&l.blur())}function oe(){f||(t(1,p=!0),t(5,X=!X))}function re(){t(2,y=void 0),t(5,X=!1),c("clear",y),bA()}onMount(()=>{p&&l&&l.focus()});function ae(R){const{detail:z}=R;if(z){t(3,D="");const iA=Object.assign({},z);(!iA.isGroupHeader||iA.isSelectable)&&(E?t(2,y=y?y.concat([iA]):[iA]):t(2,y=iA),t(2,y),setTimeout(()=>{t(5,X=!1),t(30,oA=void 0)}))}}function ge(R){const{detail:z}=R;E?(t(2,y=y||[]),t(2,y=[...y,x(z)])):t(2,y=x(z)),c("itemCreated",z),t(3,D=""),t(5,X=!1),t(30,oA=void 0)}function Ie(){t(3,D=""),t(5,X=!1)}let{ariaValues:jA=R=>`Option ${R}, selected.`}=e,{ariaListOpen:$A=(R,z)=>`You are currently focused on option ${R}. There are ${z} results available.`}=e,{ariaFocused:Ae=()=>"Select is focused, type to refine list, press down to open the menu."}=e;function se(){let R;return E&&y.length>0?R=y.map(z=>v(z)).join(", "):R=v(y),jA(R)}function ce(){if(!p||!n||n.length===0)return"";let R=n[wA];if(X&&R){let z=v(R),iA=n?n.length:0;return $A(z,iA)}else return Ae()}function Be(R){binding_callbacks[R?"unshift":"push"](()=>{l=R,t(6,l)})}function Ce(){D=this.value,t(3,D)}function le(R){wA=R,t(28,wA)}function Ee(R){binding_callbacks[R?"unshift":"push"](()=>{d=R,t(0,d)})}return A.$$set=R=>{"id"in R&&t(46,B=R.id),"container"in R&&t(0,d=R.container),"input"in R&&t(6,l=R.input),"isMulti"in R&&t(7,E=R.isMulti),"multiFullItemClearable"in R&&t(8,C=R.multiFullItemClearable),"isDisabled"in R&&t(9,f=R.isDisabled),"isCreatable"in R&&t(47,u=R.isCreatable),"isFocused"in R&&t(1,p=R.isFocused),"value"in R&&t(2,y=R.value),"filterText"in R&&t(3,D=R.filterText),"placeholder"in R&&t(48,F=R.placeholder),"placeholderAlwaysShow"in R&&t(49,G=R.placeholderAlwaysShow),"items"in R&&t(50,Q=R.items),"itemFilter"in R&&t(51,h=R.itemFilter),"groupBy"in R&&t(52,_=R.groupBy),"groupFilter"in R&&t(53,b=R.groupFilter),"isGroupHeaderSelectable"in R&&t(54,w=R.isGroupHeaderSelectable),"getGroupHeaderLabel"in R&&t(55,S=R.getGroupHeaderLabel),"labelIdentifier"in R&&t(56,k=R.labelIdentifier),"getOptionLabel"in R&&t(57,m=R.getOptionLabel),"optionIdentifier"in R&&t(58,N=R.optionIdentifier),"loadOptions"in R&&t(59,H=R.loadOptions),"hasError"in R&&t(10,M=R.hasError),"containerStyles"in R&&t(11,U=R.containerStyles),"getSelectionLabel"in R&&t(12,v=R.getSelectionLabel),"createGroupHeaderItem"in R&&t(60,L=R.createGroupHeaderItem),"createItem"in R&&t(61,x=R.createItem),"isSearchable"in R&&t(13,P=R.isSearchable),"inputStyles"in R&&t(14,O=R.inputStyles),"isClearable"in R&&t(15,Z=R.isClearable),"isWaiting"in R&&t(4,AA=R.isWaiting),"listPlacement"in R&&t(63,Y=R.listPlacement),"listOpen"in R&&t(5,X=R.listOpen),"isVirtualList"in R&&t(64,nA=R.isVirtualList),"loadOptionsInterval"in R&&t(65,rA=R.loadOptionsInterval),"noOptionsMessage"in R&&t(66,aA=R.noOptionsMessage),"hideEmptyState"in R&&t(67,tA=R.hideEmptyState),"inputAttributes"in R&&t(16,J=R.inputAttributes),"listAutoWidth"in R&&t(68,j=R.listAutoWidth),"itemHeight"in R&&t(69,CA=R.itemHeight),"Icon"in R&&t(17,T=R.Icon),"iconProps"in R&&t(18,V=R.iconProps),"showChevron"in R&&t(19,eA=R.showChevron),"showIndicator"in R&&t(20,IA=R.showIndicator),"containerClasses"in R&&t(21,gA=R.containerClasses),"indicatorSvg"in R&&t(22,BA=R.indicatorSvg),"listOffset"in R&&t(70,lA=R.listOffset),"ClearIcon"in R&&t(23,mA=R.ClearIcon),"Item"in R&&t(71,DA=R.Item),"List"in R&&t(24,fA=R.List),"Selection"in R&&t(25,yA=R.Selection),"MultiSelection"in R&&t(26,UA=R.MultiSelection),"VirtualList"in R&&t(72,kA=R.VirtualList),"selectedValue"in R&&t(73,QA=R.selectedValue),"ariaValues"in R&&t(74,jA=R.ariaValues),"ariaListOpen"in R&&t(75,$A=R.ariaListOpen),"ariaFocused"in R&&t(76,Ae=R.ariaFocused)},A.$$.update=()=>{A.$$.dirty[0]&140|A.$$.dirty[1]&405340160&&t(81,n=MA({loadOptions:H,filterText:D,items:Q,value:y,isMulti:E,optionIdentifier:N,groupBy:_,isCreatable:u})),A.$$.dirty[2]&2048&&QA&&console.warn("selectedValue is no longer used. Please use value instead."),A.$$.dirty[1]&524288&&qA(Q),A.$$.dirty[0]&4&&y&&vA(),A.$$.dirty[0]&73728&&(J||!P)&&KA(),A.$$.dirty[0]&128|A.$$.dirty[2]&262144&&(E&&YA(),HA&&!E&&XA()),A.$$.dirty[0]&132&&E&&y&&y.length>1&&GA(),A.$$.dirty[0]&4&&y&&VA(),A.$$.dirty[0]&132|A.$$.dirty[2]&32768&&!y&&E&&hA&&c("select",y),A.$$.dirty[0]&2|A.$$.dirty[2]&131072&&p!==RA&&ZA(),A.$$.dirty[0]&8|A.$$.dirty[2]&65536&&D!==NA&&zA(),A.$$.dirty[0]&12&&t(29,i=y&&D.length===0),A.$$.dirty[0]&536904208&&t(37,o=i&&Z&&!f&&!AA),A.$$.dirty[0]&132|A.$$.dirty[1]&393216&&t(36,r=G&&E?F:y?"":F),A.$$.dirty[0]&132&&t(35,a=E&&y&&y.length>0),A.$$.dirty[0]&141|A.$$.dirty[1]&218103808|A.$$.dirty[2]&526326&&t(34,g={Item:DA,filterText:D,optionIdentifier:N,noOptionsMessage:aA,hideEmptyState:tA,isVirtualList:nA,VirtualList:kA,value:y,isMulti:E,getGroupHeaderLabel:S,items:n,itemHeight:CA,getOptionLabel:m,listPlacement:Y,parent:d,listAutoWidth:j,listOffset:lA}),A.$$.dirty[0]&132&&t(33,I=y?se():""),A.$$.dirty[0]&268435490|A.$$.dirty[2]&524288&&t(32,s=ce())},[d,p,y,D,AA,X,l,E,C,f,M,U,v,P,O,Z,J,T,V,eA,IA,gA,BA,mA,fA,yA,UA,re,wA,i,oA,_A,s,I,g,a,r,o,sA,dA,bA,WA,oe,ae,ge,Ie,B,u,F,G,Q,h,_,b,w,S,k,m,N,H,L,x,q,Y,nA,rA,aA,tA,j,CA,lA,DA,kA,QA,jA,$A,Ae,hA,NA,RA,HA,n,Be,Ce,le,Ee]}class Select extends SvelteComponent{constructor(e){super(),init(this,e,instance$b,create_fragment$b,safe_not_equal,{id:46,container:0,input:6,isMulti:7,multiFullItemClearable:8,isDisabled:9,isCreatable:47,isFocused:1,value:2,filterText:3,placeholder:48,placeholderAlwaysShow:49,items:50,itemFilter:51,groupBy:52,groupFilter:53,isGroupHeaderSelectable:54,getGroupHeaderLabel:55,labelIdentifier:56,getOptionLabel:57,optionIdentifier:58,loadOptions:59,hasError:10,containerStyles:11,getSelectionLabel:12,createGroupHeaderItem:60,createItem:61,getFilteredItems:62,isSearchable:13,inputStyles:14,isClearable:15,isWaiting:4,listPlacement:63,listOpen:5,isVirtualList:64,loadOptionsInterval:65,noOptionsMessage:66,hideEmptyState:67,inputAttributes:16,listAutoWidth:68,itemHeight:69,Icon:17,iconProps:18,showChevron:19,showIndicator:20,containerClasses:21,indicatorSvg:22,listOffset:70,ClearIcon:23,Item:71,List:24,Selection:25,MultiSelection:26,VirtualList:72,selectedValue:73,handleClear:27,ariaValues:74,ariaListOpen:75,ariaFocused:76},null,[-1,-1,-1,-1])}get getFilteredItems(){return this.$$.ctx[62]}get handleClear(){return this.$$.ctx[27]}}var StarSelect_svelte_svelte_type_style_lang="";function create_fragment$a(A){let e,t,n,i,o,r;function a(I){A[14](I)}let g={id:"sender-select",placeholder:A[1],listOffset:A[2],isClearable:A[3],showIndicator:A[4],indicatorSvg:SX_ICON_DROPDOWN,listPlacement:"bottom",items:A[5],getOptionLabel:A[9],getSelectionLabel:A[9]};return A[0]!==void 0&&(g.value=A[0]),t=new Select({props:g}),binding_callbacks.push(()=>bind(t,"value",a)),{c(){e=element("div"),n=element("div"),create_component(t.$$.fragment),set_style(n,"display","contents"),set_style(n,"--listMaxHeight",A[8]),attr(e,"class",o="star-select "+A[6]+" svelte-dvjau7")},m(I,s){insert(I,e,s),append(e,n),mount_component(t,n,null),A[15](e),r=!0},p(I,[s]){s&256&&set_style(n,"--listMaxHeight",I[8]);const c={};s&2&&(c.placeholder=I[1]),s&4&&(c.listOffset=I[2]),s&8&&(c.isClearable=I[3]),s&16&&(c.showIndicator=I[4]),s&32&&(c.items=I[5]),!i&&s&1&&(i=!0,c.value=I[0],add_flush_callback(()=>i=!1)),t.$set(c),(!r||s&64&&o!==(o="star-select "+I[6]+" svelte-dvjau7"))&&attr(e,"class",o)},i(I){r||(transition_in(t.$$.fragment,I),r=!0)},o(I){transition_out(t.$$.fragment,I),r=!1},d(I){I&&detach(e),destroy_component(t),A[15](null)}}}function instance$a(A,e,t){let{id:n=""}=e,{placeholder:i=""}=e,{listOffset:o=1}=e,{isClearable:r=!1}=e,{showIndicator:a=!0}=e,{items:g}=e,{value:I=void 0}=e,{pfpMap:s=null}=e;const c=s;let{primaryClass:B=""}=e,{secondaryClass:d=""}=e,{containerClasses:l=""}=e;function E(y){return y.primary?dd("span",{class:"global_select-item"},[c&&c[y.object.pfp]||"",dd("span",{class:"name "+B},[y.primary]),dd("span",{class:"secondary "+d},[y.secondary||""])]).outerHTML:y.value}let C,f="500px";onMount(()=>{setTimeout(()=>{try{const y=C.getBoundingClientRect().bottom;t(8,f=Math.min(window.innerHeight-y-20,500)+"px")}catch{}},1e3)});function u(y){I=y,t(0,I)}function p(y){binding_callbacks[y?"unshift":"push"](()=>{C=y,t(7,C)})}return A.$$set=y=>{"id"in y&&t(10,n=y.id),"placeholder"in y&&t(1,i=y.placeholder),"listOffset"in y&&t(2,o=y.listOffset),"isClearable"in y&&t(3,r=y.isClearable),"showIndicator"in y&&t(4,a=y.showIndicator),"items"in y&&t(5,g=y.items),"value"in y&&t(0,I=y.value),"pfpMap"in y&&t(11,s=y.pfpMap),"primaryClass"in y&&t(12,B=y.primaryClass),"secondaryClass"in y&&t(13,d=y.secondaryClass),"containerClasses"in y&&t(6,l=y.containerClasses)},[I,i,o,r,a,g,l,C,f,E,n,s,B,d,u,p]}class StarSelect extends SvelteComponent{constructor(e){super(),init(this,e,instance$a,create_fragment$a,safe_not_equal,{id:10,placeholder:1,listOffset:2,isClearable:3,showIndicator:4,items:5,value:0,pfpMap:11,primaryClass:12,secondaryClass:13,containerClasses:6})}}function once_store_updates(A,e=!1){return new Promise(t=>{let n=!1;const i=A.subscribe(o=>{if(!n){n=!0;return}(!e||o)&&(i(),t(o))})})}async function load_pfps(A,e){return ofe(await Promise.all(ode(A).map(([t,n])=>new Promise(i=>{const o=dd("span"),r=new PfpDisplay({target:o,props:{...e,resource:n,settle(){const a=o.firstChild?.cloneNode(!0);r.$destroy(),i([n.pfp,a])}}})}))))}const D_INTL_USD=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",currencyDisplay:"symbol"}),D_INTL_USD_LT1=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",currencyDisplay:"symbol",minimumFractionDigits:2,maximumFractionDigits:5}),A_NUMERIC_GT1=[{order:1e21,suffix:"sept",metric:"yotta",m:"Y"},{order:1e21,suffix:"sext",metric:"zetta",m:"Z"},{order:1e18,suffix:"quint",metric:"exa",m:"E"},{order:1e15,suffix:"quad",metric:"peta",m:"P"},{order:1e12,suffix:"tril",metric:"terra",m:"T"},{order:1e9,suffix:"bil",metric:"giga",m:"G"},{order:1e6,suffix:"mil",metric:"mega",m:"M"}],A_NUMERIC_LT1=[{order:1e-24,suffix:"septh",metric:"yocto",m:"y"},{order:1e-21,suffix:"sexth",metric:"zepto",m:"z"},{order:1e-18,suffix:"quinth",metric:"atto",m:"a"},{order:1e-15,suffix:"quadth",metric:"femto",m:"f"},{order:1e-12,suffix:"trilth",metric:"pico",m:"p"},{order:1e-9,suffix:"bilth",metric:"nano",m:"n"},{order:1e-6,suffix:"milth",metric:"mirco",m:"\u03BC"},{order:.001,suffix:"thsth",metric:"milli",m:"m"}],D_INTL_AMOUNT_LT1=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:6}),D_INTL_AMOUNT_GT1=new Intl.NumberFormat("en-US",{notation:"standard",maximumFractionDigits:3}),D_INTL_AMOUNT_GT1E3=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:6}),D_INTL_AMOUNT_I1E3=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:4});function format_amount(A,e=!1){const t=e?n=>n.replace(/(\.\d+?)0+(\s+.*)?$/,"$1$2"):F_IDENTITY;if(A===0)return"0";if(A>=1e6){for(const n of A_NUMERIC_GT1)if(A>=n.order)return t((A/n.order).toPrecision(3))+" "+n.suffix}else if(A<1){for(const n of A_NUMERIC_LT1)if(A<=n.order)return t((A/n.order).toPrecision(3))+" "+n.metric;return t(D_INTL_AMOUNT_LT1.format(A))}return A>=1e3?e?t(D_INTL_AMOUNT_I1E3.format(A/1e3))+" k":t(D_INTL_AMOUNT_GT1E3.format(A)):t(D_INTL_AMOUNT_GT1.format(A))}function format_fiat(A,e="usd",t=!1,n=2){const i=A<1?D_INTL_USD_LT1.format(A):D_INTL_USD.format(A);return t?i.replace(/^[$]/,""):i}function abbreviate_addr(A){return A.replace(/^(\w+1...).+(.{7})/,"$1[...]$2")}const D_INTL_DATE=new Intl.DateTimeFormat("en-US",{month:"short",day:"numeric",year:"numeric",hour:"numeric",minute:"numeric"}),timestamp_to_parts=(A=Date.now())=>fold(D_INTL_DATE.formatToParts(),e=>({[e.type]:e.value}));function format_time(A){const e=timestamp_to_parts(),t=timestamp_to_parts(A);let n=`${t.month} ${t.day}`;return e.year!==t.year&&(n+=`, ${t.year}`),`${n} at ${t.hour}:${t.minute} ${t.dayPeriod}`}const coingecko_url=(A,e)=>"https://api.coingecko.com/api/v3/simple/price?"+new URLSearchParams(ode({ids:A.join(","),vs_currencies:e,include_last_updated_at:"true"})),CoinGecko={async coinsVersus(A,e="usd",t=5*XT_MINUTES){const n=A.map(i=>WebApis.pathFor("GET",coingecko_url([i],e)));return await WebApis.open(async i=>{const o={};if(t>0){const s=Date.now()-t;let c=!0;for(let B=0;B<A.length;B++){const d=i.at(n[B]);if(d&&d.time>s){const l=A[B];o[l]=d.response.cache[l][e]}else{c=!1;break}}if(c)return o}const a=await(await fetch(coingecko_url(A,e))).json(),g=i.raw,I=Date.now();for(const[s,c]of ode(a)){const B=g[s]=g[s]||{};B.response=c,B.time=I,o[s]=c[e]}return o})}},WebApis=create_store_class({store:SI_STORE_WEB_APIS,extension:"map",class:class ie extends WritableStoreMap{static pathFor(e,t){return`/cache.web-api/sha256.${buffer_to_base64(sha256_sync$1(text_to_buffer(e+" "+t)))}`}static pathFrom(e){return ie.pathFor(e.method,e.path)}}});var AmountInput_svelte_svelte_type_style_lang="";const Agents=create_store_class({store:SI_STORE_AGENTS,extension:"map",class:class TA extends WritableStoreMap{static pathForAgent(e,t=yw_family.get()){return`/family.${t}/agent.${e.replace(/^\w+1/,"")}`}static pathForContact(e,t=yw_family.get()){return`${TA.pathForAgent(e,t)}/as.contact`}static pathFromContact(e){return TA.pathForContact(e.address,e.family)}static async getContact(e){return(await Agents.read()).at(e)}*contacts(e=yw_family.get()){const t=this._w_cache,n=`/family.${e}/agent.`;for(const i in t)!i.startsWith(n)||!i.endsWith("/as.contact")||(yield[i,t[i]])}async putContact(e){const t=TA.pathFromContact(e);return this._w_cache[t]=e,await this.save(),t}}});var SX_ICON_COPY=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M3 13H5V11H3V13ZM3 17H5V15H3V17ZM5 21V19H3C3 20.1 3.89 21 5 21ZM3 9H5V7H3V9ZM15 21H17V19H15V21ZM19 3H9C7.89 3 7 3.9 7 5V15C7 16.1 7.89 17 9 17H19C20.1 17 21 16.1 21 15V5C21 3.9 20.1 3 19 3ZM19 15H9V5H19V15ZM11 21H13V19H11V21ZM7 21H9V19H7V21Z" />
</svg>
`,Address_svelte_svelte_type_style_lang="";function create_if_block_2$3(A){let e,t;return{c(){e=element("span"),t=text(A[0]),attr(e,"class","prefix svelte-1f41ddv")},m(n,i){insert(n,e,i),append(e,t)},p(n,i){i&1&&set_data(t,n[0])},d(n){n&&detach(e)}}}function create_if_block$6(A){let e,t;function n(r,a){return r[7]==="icon"?create_if_block_1$3:create_else_block$2}let o=n(A)(A);return{c(){o.c(),e=space(),t=element("span"),t.textContent="Copied!",attr(t,"class","copied svelte-1f41ddv"),toggle_class(t,"confirm",A[3])},m(r,a){o.m(r,a),insert(r,e,a),insert(r,t,a),A[11](t)},p(r,a){o.p(r,a),a&8&&toggle_class(t,"confirm",r[3])},d(r){o.d(r),r&&detach(e),r&&detach(t),A[11](null)}}}function create_else_block$2(A){let e;return{c(){e=element("span"),e.textContent="Copy",attr(e,"class","copy svelte-1f41ddv")},m(t,n){insert(t,e,n)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$3(A){let e;return{c(){e=element("span"),attr(e,"class","copy icon svelte-1f41ddv")},m(t,n){insert(t,e,n),e.innerHTML=SX_ICON_COPY},p:noop$1,d(t){t&&detach(e)}}}function create_fragment$9(A){let e,t,n,i,o,r,a,g,I,s,c=A[0]&&create_if_block_2$3(A),B=A[6]&&create_if_block$6(A);return{c(){e=element("span"),c&&c.c(),t=space(),n=element("span"),i=text(A[1]),o=space(),r=element("span"),a=text(A[1]),g=space(),B&&B.c(),attr(n,"class","head svelte-1f41ddv"),attr(r,"class","tail svelte-1f41ddv"),toggle_class(r,"display_none",!A[5]),attr(e,"class","address svelte-1f41ddv"),toggle_class(e,"copyable",A[6])},m(d,l){insert(d,e,l),c&&c.m(e,null),append(e,t),append(e,n),append(n,i),A[10](n),append(e,o),append(e,r),append(r,a),append(e,g),B&&B.m(e,null),I||(s=listen(e,"click",A[6]?A[12]:void 0),I=!0)},p(d,[l]){d[0]?c?c.p(d,l):(c=create_if_block_2$3(d),c.c(),c.m(e,t)):c&&(c.d(1),c=null),l&2&&set_data(i,d[1]),l&2&&set_data(a,d[1]),l&32&&toggle_class(r,"display_none",!d[5]),d[6]&&B.p(d,l)},i:noop$1,o:noop$1,d(d){d&&detach(e),c&&c.d(),A[10](null),B&&B.d(),I=!1,s()}}}function instance$9(A,e,t){let{prefix:n=""}=e,{address:i}=e,{copyable:o=!1}=e;const r=!!o,a=o===!0?"icon":o||"";let g,I=!1;async function s(){try{await navigator.clipboard.writeText(i)}catch(C){syserr({title:"Browser API Failure",text:"Failed to write to the navigator clipboard.",error:C});return}t(3,I=!0),setTimeout(()=>{t(3,I=!1)},800)}let c,B=!1;onMount(()=>{t(5,B=c.scrollWidth>c.offsetWidth)});function d(C){binding_callbacks[C?"unshift":"push"](()=>{c=C,t(4,c)})}function l(C){binding_callbacks[C?"unshift":"push"](()=>{g=C,t(2,g)})}const E=()=>s();return A.$$set=C=>{"prefix"in C&&t(0,n=C.prefix),"address"in C&&t(1,i=C.address),"copyable"in C&&t(9,o=C.copyable)},[n,i,g,I,c,B,r,a,s,o,d,l,E]}class Address extends SvelteComponent{constructor(e){super(),init(this,e,instance$9,create_fragment$9,safe_not_equal,{prefix:0,address:1,copyable:9})}}var InlineContactSelection_svelte_svelte_type_style_lang="",RecipientSelectItem_svelte_svelte_type_style_lang="",RecipientSelectSelection_svelte_svelte_type_style_lang="",RecipientSelect_svelte_svelte_type_style_lang="";let id=1;function getId(){return`svelte-tabs-${id++}`}function create_fragment$8(A){let e,t,n,i;const o=A[4].default,r=create_slot(o,A,A[3],null);return{c(){e=element("div"),r&&r.c(),attr(e,"class","svelte-tabs")},m(a,g){insert(a,e,g),r&&r.m(e,null),t=!0,n||(i=listen(e,"keydown",A[1]),n=!0)},p(a,[g]){r&&r.p&&(!t||g&8)&&update_slot_base(r,o,a,a[3],t?get_slot_changes(o,a[3],g,null):get_all_dirty_from_scope(a[3]),null)},i(a){t||(transition_in(r,a),t=!0)},o(a){transition_out(r,a),t=!1},d(a){a&&detach(e),r&&r.d(a),n=!1,i()}}}const TABS={};function removeAndUpdateSelected(A,e,t){const n=A.indexOf(e);A.splice(n,1),t.update(i=>i===e?A[n]||A[A.length-1]:i)}function instance$8(A,e,t){let n,{$$slots:i={},$$scope:o}=e,{initialSelectedIndex:r=0}=e;const a=[],g=[],I=[],s=writable({}),c=writable({}),B=writable(null);component_subscribe(A,B,f=>t(5,n=f));const d=writable(null);function l(f,u,p){f.push(u),p.update(y=>y||u),onDestroy(()=>removeAndUpdateSelected(f,u,p))}function E(f){const u=g.indexOf(f);B.set(f),d.set(I[u])}setContext(TABS,{registerTab(f){l(g,f,B)},registerTabElement(f){a.push(f)},registerPanel(f){l(I,f,d)},selectTab:E,selectedTab:B,selectedPanel:d,controls:s,labeledBy:c}),onMount(()=>{E(g[r])}),afterUpdate(()=>{for(let f=0;f<g.length;f++)s.update(u=>({...u,[g[f].id]:I[f].id})),c.update(u=>({...u,[I[f].id]:g[f].id}))});async function C(f){if(f.target.classList.contains("svelte-tabs__tab")){let u=g.indexOf(n);switch(f.key){case"ArrowRight":u+=1,u>g.length-1&&(u=0),E(g[u]),a[u].focus();break;case"ArrowLeft":u-=1,u<0&&(u=g.length-1),E(g[u]),a[u].focus()}}}return A.$$set=f=>{"initialSelectedIndex"in f&&t(2,r=f.initialSelectedIndex),"$$scope"in f&&t(3,o=f.$$scope)},[B,C,r,o,i]}class Tabs extends SvelteComponent{constructor(e){super(),init(this,e,instance$8,create_fragment$8,safe_not_equal,{initialSelectedIndex:2})}}var Tab_svelte_svelte_type_style_lang="";function create_fragment$7(A){let e,t,n,i,o,r;const a=A[9].default,g=create_slot(a,A,A[8],null);return{c(){e=element("li"),g&&g.c(),attr(e,"role","tab"),attr(e,"id",A[3].id),attr(e,"aria-controls",t=A[2][A[3].id]),attr(e,"aria-selected",A[1]),attr(e,"tabindex",n=A[1]?0:-1),attr(e,"class","svelte-tabs__tab svelte-1fbofsd"),toggle_class(e,"svelte-tabs__selected",A[1])},m(I,s){insert(I,e,s),g&&g.m(e,null),A[10](e),i=!0,o||(r=listen(e,"click",A[11]),o=!0)},p(I,[s]){g&&g.p&&(!i||s&256)&&update_slot_base(g,a,I,I[8],i?get_slot_changes(a,I[8],s,null):get_all_dirty_from_scope(I[8]),null),(!i||s&4&&t!==(t=I[2][I[3].id]))&&attr(e,"aria-controls",t),(!i||s&2)&&attr(e,"aria-selected",I[1]),(!i||s&2&&n!==(n=I[1]?0:-1))&&attr(e,"tabindex",n),s&2&&toggle_class(e,"svelte-tabs__selected",I[1])},i(I){i||(transition_in(g,I),i=!0)},o(I){transition_out(g,I),i=!1},d(I){I&&detach(e),g&&g.d(I),A[10](null),o=!1,r()}}}function instance$7(A,e,t){let n,i,{$$slots:o={},$$scope:r}=e,a;const g={id:getId()},{registerTab:I,registerTabElement:s,selectTab:c,selectedTab:B,controls:d}=getContext(TABS);component_subscribe(A,B,f=>t(7,n=f)),component_subscribe(A,d,f=>t(2,i=f));let l;I(g),onMount(async()=>{await tick(),s(a)});function E(f){binding_callbacks[f?"unshift":"push"](()=>{a=f,t(0,a)})}const C=()=>c(g);return A.$$set=f=>{"$$scope"in f&&t(8,r=f.$$scope)},A.$$.update=()=>{A.$$.dirty&128&&t(1,l=n===g)},[a,l,i,g,c,B,d,n,r,o,E,C]}class Tab extends SvelteComponent{constructor(e){super(),init(this,e,instance$7,create_fragment$7,safe_not_equal,{})}}var TabList_svelte_svelte_type_style_lang="";function create_fragment$6(A){let e,t;const n=A[1].default,i=create_slot(n,A,A[0],null);return{c(){e=element("ul"),i&&i.c(),attr(e,"role","tablist"),attr(e,"class","svelte-tabs__tab-list svelte-12yby2a")},m(o,r){insert(o,e,r),i&&i.m(e,null),t=!0},p(o,[r]){i&&i.p&&(!t||r&1)&&update_slot_base(i,n,o,o[0],t?get_slot_changes(n,o[0],r,null):get_all_dirty_from_scope(o[0]),null)},i(o){t||(transition_in(i,o),t=!0)},o(o){transition_out(i,o),t=!1},d(o){o&&detach(e),i&&i.d(o)}}}function instance$6(A,e,t){let{$$slots:n={},$$scope:i}=e;return A.$$set=o=>{"$$scope"in o&&t(0,i=o.$$scope)},[i,n]}class TabList extends SvelteComponent{constructor(e){super(),init(this,e,instance$6,create_fragment$6,safe_not_equal,{})}}var TabPanel_svelte_svelte_type_style_lang="";function create_if_block$5(A){let e;const t=A[6].default,n=create_slot(t,A,A[5],null);return{c(){n&&n.c()},m(i,o){n&&n.m(i,o),e=!0},p(i,o){n&&n.p&&(!e||o&32)&&update_slot_base(n,t,i,i[5],e?get_slot_changes(t,i[5],o,null):get_all_dirty_from_scope(i[5]),null)},i(i){e||(transition_in(n,i),e=!0)},o(i){transition_out(n,i),e=!1},d(i){n&&n.d(i)}}}function create_fragment$5(A){let e,t,n,i=A[1]===A[2]&&create_if_block$5(A);return{c(){e=element("div"),i&&i.c(),attr(e,"id",A[2].id),attr(e,"aria-labelledby",t=A[0][A[2].id]),attr(e,"class","svelte-tabs__tab-panel svelte-epfyet"),attr(e,"role","tabpanel")},m(o,r){insert(o,e,r),i&&i.m(e,null),n=!0},p(o,[r]){o[1]===o[2]?i?(i.p(o,r),r&2&&transition_in(i,1)):(i=create_if_block$5(o),i.c(),transition_in(i,1),i.m(e,null)):i&&(group_outros(),transition_out(i,1,1,()=>{i=null}),check_outros()),(!n||r&1&&t!==(t=o[0][o[2].id]))&&attr(e,"aria-labelledby",t)},i(o){n||(transition_in(i),n=!0)},o(o){transition_out(i),n=!1},d(o){o&&detach(e),i&&i.d()}}}function instance$5(A,e,t){let n,i,{$$slots:o={},$$scope:r}=e;const a={id:getId()},{registerPanel:g,selectedPanel:I,labeledBy:s}=getContext(TABS);return component_subscribe(A,I,c=>t(1,i=c)),component_subscribe(A,s,c=>t(0,n=c)),g(a),A.$$set=c=>{"$$scope"in c&&t(5,r=c.$$scope)},[n,i,a,I,s,r,o]}class TabPanel extends SvelteComponent{constructor(e){super(),init(this,e,instance$5,create_fragment$5,safe_not_equal,{})}}function create_else_block_1$1(A){let e;return{c(){e=element("span"),e.textContent="(empty)",attr(e,"class","empty-memo")},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_if_block_3$1(A){let e;return{c(){e=element("textarea"),e.disabled=!0,e.value=A[0]},m(t,n){insert(t,e,n)},p(t,n){n&1&&(e.value=t[0])},i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_if_block$4(A){let e,t;return e=new Tabs({props:{$$slots:{default:[create_default_slot_1$2]},$$scope:{ctx:A}}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,i){const o={};i&7&&(o.$$scope={dirty:i,ctx:n}),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_default_slot_6(A){let e;return{c(){e=text("Plaintext")},m(t,n){insert(t,e,n)},d(t){t&&detach(e)}}}function create_default_slot_5(A){let e;return{c(){e=text("Encrypted")},m(t,n){insert(t,e,n)},d(t){t&&detach(e)}}}function create_default_slot_4(A){let e,t,n,i;return e=new Tab({props:{$$slots:{default:[create_default_slot_6]},$$scope:{ctx:A}}}),n=new Tab({props:{$$slots:{default:[create_default_slot_5]},$$scope:{ctx:A}}}),{c(){create_component(e.$$.fragment),t=space(),create_component(n.$$.fragment)},m(o,r){mount_component(e,o,r),insert(o,t,r),mount_component(n,o,r),i=!0},p(o,r){const a={};r&4&&(a.$$scope={dirty:r,ctx:o}),e.$set(a);const g={};r&4&&(g.$$scope={dirty:r,ctx:o}),n.$set(g)},i(o){i||(transition_in(e.$$.fragment,o),transition_in(n.$$.fragment,o),i=!0)},o(o){transition_out(e.$$.fragment,o),transition_out(n.$$.fragment,o),i=!1},d(o){destroy_component(e,o),o&&detach(t),destroy_component(n,o)}}}function create_else_block$1(A){let e;return{c(){e=element("i"),e.textContent="Corrupted memo, unable to decrypt"},m(t,n){insert(t,e,n)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_2$2(A){let e;return{c(){e=element("i"),e.textContent="Empty memo"},m(t,n){insert(t,e,n)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$2(A){let e;return{c(){e=element("textarea"),e.disabled=!0,e.value=A[0]},m(t,n){insert(t,e,n)},p(t,n){n&1&&(e.value=t[0])},d(t){t&&detach(e)}}}function create_default_slot_3(A){let e;function t(o,r){return o[0]?create_if_block_1$2:o[0]===""?create_if_block_2$2:create_else_block$1}let n=t(A),i=n(A);return{c(){i.c(),e=empty()},m(o,r){i.m(o,r),insert(o,e,r)},p(o,r){n===(n=t(o))&&i?i.p(o,r):(i.d(1),i=n(o),i&&(i.c(),i.m(e.parentNode,e)))},d(o){i.d(o),o&&detach(e)}}}function create_default_slot_2$1(A){let e;return{c(){e=element("textarea"),attr(e,"class","ciphertext"),e.disabled=!0,e.value=A[1]},m(t,n){insert(t,e,n)},p(t,n){n&2&&(e.value=t[1])},d(t){t&&detach(e)}}}function create_default_slot_1$2(A){let e,t,n,i,o,r;return e=new TabList({props:{$$slots:{default:[create_default_slot_4]},$$scope:{ctx:A}}}),n=new TabPanel({props:{$$slots:{default:[create_default_slot_3]},$$scope:{ctx:A}}}),o=new TabPanel({props:{$$slots:{default:[create_default_slot_2$1]},$$scope:{ctx:A}}}),{c(){create_component(e.$$.fragment),t=space(),create_component(n.$$.fragment),i=space(),create_component(o.$$.fragment)},m(a,g){mount_component(e,a,g),insert(a,t,g),mount_component(n,a,g),insert(a,i,g),mount_component(o,a,g),r=!0},p(a,g){const I={};g&4&&(I.$$scope={dirty:g,ctx:a}),e.$set(I);const s={};g&5&&(s.$$scope={dirty:g,ctx:a}),n.$set(s);const c={};g&6&&(c.$$scope={dirty:g,ctx:a}),o.$set(c)},i(a){r||(transition_in(e.$$.fragment,a),transition_in(n.$$.fragment,a),transition_in(o.$$.fragment,a),r=!0)},o(a){transition_out(e.$$.fragment,a),transition_out(n.$$.fragment,a),transition_out(o.$$.fragment,a),r=!1},d(a){destroy_component(e,a),a&&detach(t),destroy_component(n,a),a&&detach(i),destroy_component(o,a)}}}function create_default_slot$2(A){let e,t,n,i;const o=[create_if_block$4,create_if_block_3$1,create_else_block_1$1],r=[];function a(g,I){return g[1]?0:g[0]?1:2}return e=a(A),t=r[e]=o[e](A),{c(){t.c(),n=empty()},m(g,I){r[e].m(g,I),insert(g,n,I),i=!0},p(g,I){let s=e;e=a(g),e===s?r[e].p(g,I):(group_outros(),transition_out(r[s],1,1,()=>{r[s]=null}),check_outros(),t=r[e],t?t.p(g,I):(t=r[e]=o[e](g),t.c()),transition_in(t,1),t.m(n.parentNode,n))},i(g){i||(transition_in(t),i=!0)},o(g){transition_out(t),i=!1},d(g){r[e].d(g),g&&detach(n)}}}function create_fragment$4(A){let e,t;return e=new Field({props:{key:"memo",name:"Memo",$$slots:{default:[create_default_slot$2]},$$scope:{ctx:A}}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,[i]){const o={};i&7&&(o.$$scope={dirty:i,ctx:n}),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function instance$4(A,e,t){let{memoPlaintext:n}=e,{memoCiphertext:i=""}=e;return A.$$set=o=>{"memoPlaintext"in o&&t(0,n=o.memoPlaintext),"memoCiphertext"in o&&t(1,i=o.memoCiphertext)},[n,i]}class MemoReview extends SvelteComponent{constructor(e){super(),init(this,e,instance$4,create_fragment$4,safe_not_equal,{memoPlaintext:0,memoCiphertext:1})}}function ecdhNonce(A,e){return console.log({nonce:{s_sequence:A,s_gas_wanted:e}}),sha256$1(text_to_buffer(["StarShell",A,e].join("\0")))}function compileMemoPlaintext(A){return"\u{1F512}1"+buffer_to_base93(A)}function extractMemoCiphertext(A){if(!A.startsWith("\u{1F512}1"))throw syserr({title:"Memo Invalid",text:"Attempted to decrypt invalid memo"});return base93_to_buffer(A.slice(3))}var SendNative_svelte_svelte_type_style_lang="";const Settings=create_store_class({store:SI_STORE_SETTINGS,extension:"dict",class:class extends WritableStoreDict{}});var Notice_svelte_svelte_type_style_lang="",Toggle_svelte_svelte_type_style_lang="",Send_svelte_svelte_type_style_lang="",qrcode={exports:{}};(function(A){function e(l){this.mode=n.MODE_8BIT_BYTE,this.data=l,this.parsedData=[];for(var E=0,C=this.data.length;E<C;E++){var f=[],u=this.data.charCodeAt(E);u>65536?(f[0]=240|(u&1835008)>>>18,f[1]=128|(u&258048)>>>12,f[2]=128|(u&4032)>>>6,f[3]=128|u&63):u>2048?(f[0]=224|(u&61440)>>>12,f[1]=128|(u&4032)>>>6,f[2]=128|u&63):u>128?(f[0]=192|(u&1984)>>>6,f[1]=128|u&63):f[0]=u,this.parsedData.push(f)}this.parsedData=Array.prototype.concat.apply([],this.parsedData),this.parsedData.length!=this.data.length&&(this.parsedData.unshift(191),this.parsedData.unshift(187),this.parsedData.unshift(239))}e.prototype={getLength:function(l){return this.parsedData.length},write:function(l){for(var E=0,C=this.parsedData.length;E<C;E++)l.put(this.parsedData[E],8)}};function t(l,E){this.typeNumber=l,this.errorCorrectLevel=E,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}t.prototype={addData:function(l){var E=new e(l);this.dataList.push(E),this.dataCache=null},isDark:function(l,E){if(l<0||this.moduleCount<=l||E<0||this.moduleCount<=E)throw new Error(l+","+E);return this.modules[l][E]},getModuleCount:function(){return this.moduleCount},make:function(){this.makeImpl(!1,this.getBestMaskPattern())},makeImpl:function(l,E){this.moduleCount=this.typeNumber*4+17,this.modules=new Array(this.moduleCount);for(var C=0;C<this.moduleCount;C++){this.modules[C]=new Array(this.moduleCount);for(var f=0;f<this.moduleCount;f++)this.modules[C][f]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(l,E),this.typeNumber>=7&&this.setupTypeNumber(l),this.dataCache==null&&(this.dataCache=t.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,E)},setupPositionProbePattern:function(l,E){for(var C=-1;C<=7;C++)if(!(l+C<=-1||this.moduleCount<=l+C))for(var f=-1;f<=7;f++)E+f<=-1||this.moduleCount<=E+f||(0<=C&&C<=6&&(f==0||f==6)||0<=f&&f<=6&&(C==0||C==6)||2<=C&&C<=4&&2<=f&&f<=4?this.modules[l+C][E+f]=!0:this.modules[l+C][E+f]=!1)},getBestMaskPattern:function(){for(var l=0,E=0,C=0;C<8;C++){this.makeImpl(!0,C);var f=r.getLostPoint(this);(C==0||l>f)&&(l=f,E=C)}return E},createMovieClip:function(l,E,C){var f=l.createEmptyMovieClip(E,C),u=1;this.make();for(var p=0;p<this.modules.length;p++)for(var y=p*u,D=0;D<this.modules[p].length;D++){var F=D*u,G=this.modules[p][D];G&&(f.beginFill(0,100),f.moveTo(F,y),f.lineTo(F+u,y),f.lineTo(F+u,y+u),f.lineTo(F,y+u),f.endFill())}return f},setupTimingPattern:function(){for(var l=8;l<this.moduleCount-8;l++)this.modules[l][6]==null&&(this.modules[l][6]=l%2==0);for(var E=8;E<this.moduleCount-8;E++)this.modules[6][E]==null&&(this.modules[6][E]=E%2==0)},setupPositionAdjustPattern:function(){for(var l=r.getPatternPosition(this.typeNumber),E=0;E<l.length;E++)for(var C=0;C<l.length;C++){var f=l[E],u=l[C];if(this.modules[f][u]==null)for(var p=-2;p<=2;p++)for(var y=-2;y<=2;y++)p==-2||p==2||y==-2||y==2||p==0&&y==0?this.modules[f+p][u+y]=!0:this.modules[f+p][u+y]=!1}},setupTypeNumber:function(l){for(var E=r.getBCHTypeNumber(this.typeNumber),C=0;C<18;C++){var f=!l&&(E>>C&1)==1;this.modules[Math.floor(C/3)][C%3+this.moduleCount-8-3]=f}for(var C=0;C<18;C++){var f=!l&&(E>>C&1)==1;this.modules[C%3+this.moduleCount-8-3][Math.floor(C/3)]=f}},setupTypeInfo:function(l,E){for(var C=this.errorCorrectLevel<<3|E,f=r.getBCHTypeInfo(C),u=0;u<15;u++){var p=!l&&(f>>u&1)==1;u<6?this.modules[u][8]=p:u<8?this.modules[u+1][8]=p:this.modules[this.moduleCount-15+u][8]=p}for(var u=0;u<15;u++){var p=!l&&(f>>u&1)==1;u<8?this.modules[8][this.moduleCount-u-1]=p:u<9?this.modules[8][15-u-1+1]=p:this.modules[8][15-u-1]=p}this.modules[this.moduleCount-8][8]=!l},mapData:function(l,E){for(var C=-1,f=this.moduleCount-1,u=7,p=0,y=this.moduleCount-1;y>0;y-=2)for(y==6&&y--;;){for(var D=0;D<2;D++)if(this.modules[f][y-D]==null){var F=!1;p<l.length&&(F=(l[p]>>>u&1)==1);var G=r.getMask(E,f,y-D);G&&(F=!F),this.modules[f][y-D]=F,u--,u==-1&&(p++,u=7)}if(f+=C,f<0||this.moduleCount<=f){f-=C,C=-C;break}}}},t.PAD0=236,t.PAD1=17,t.createData=function(l,E,C){for(var f=s.getRSBlocks(l,E),u=new c,p=0;p<C.length;p++){var y=C[p];u.put(y.mode,4),u.put(y.getLength(),r.getLengthInBits(y.mode,l)),y.write(u)}for(var D=0,p=0;p<f.length;p++)D+=f[p].dataCount;if(u.getLengthInBits()>D*8)throw new Error("code length overflow. ("+u.getLengthInBits()+">"+D*8+")");for(u.getLengthInBits()+4<=D*8&&u.put(0,4);u.getLengthInBits()%8!=0;)u.putBit(!1);for(;!(u.getLengthInBits()>=D*8||(u.put(t.PAD0,8),u.getLengthInBits()>=D*8));)u.put(t.PAD1,8);return t.createBytes(u,f)},t.createBytes=function(l,E){for(var C=0,f=0,u=0,p=new Array(E.length),y=new Array(E.length),D=0;D<E.length;D++){var F=E[D].dataCount,G=E[D].totalCount-F;f=Math.max(f,F),u=Math.max(u,G),p[D]=new Array(F);for(var Q=0;Q<p[D].length;Q++)p[D][Q]=255&l.buffer[Q+C];C+=F;var h=r.getErrorCorrectPolynomial(G),_=new I(p[D],h.getLength()-1),b=_.mod(h);y[D]=new Array(h.getLength()-1);for(var Q=0;Q<y[D].length;Q++){var w=Q+b.getLength()-y[D].length;y[D][Q]=w>=0?b.get(w):0}}for(var S=0,Q=0;Q<E.length;Q++)S+=E[Q].totalCount;for(var k=new Array(S),m=0,Q=0;Q<f;Q++)for(var D=0;D<E.length;D++)Q<p[D].length&&(k[m++]=p[D][Q]);for(var Q=0;Q<u;Q++)for(var D=0;D<E.length;D++)Q<y[D].length&&(k[m++]=y[D][Q]);return k};for(var n={MODE_NUMBER:1<<0,MODE_ALPHA_NUM:1<<1,MODE_8BIT_BYTE:1<<2,MODE_KANJI:1<<3},i={L:1,M:0,Q:3,H:2},o={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7},r={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1<<10|1<<8|1<<5|1<<4|1<<2|1<<1|1<<0,G18:1<<12|1<<11|1<<10|1<<9|1<<8|1<<5|1<<2|1<<0,G15_MASK:1<<14|1<<12|1<<10|1<<4|1<<1,getBCHTypeInfo:function(l){for(var E=l<<10;r.getBCHDigit(E)-r.getBCHDigit(r.G15)>=0;)E^=r.G15<<r.getBCHDigit(E)-r.getBCHDigit(r.G15);return(l<<10|E)^r.G15_MASK},getBCHTypeNumber:function(l){for(var E=l<<12;r.getBCHDigit(E)-r.getBCHDigit(r.G18)>=0;)E^=r.G18<<r.getBCHDigit(E)-r.getBCHDigit(r.G18);return l<<12|E},getBCHDigit:function(l){for(var E=0;l!=0;)E++,l>>>=1;return E},getPatternPosition:function(l){return r.PATTERN_POSITION_TABLE[l-1]},getMask:function(l,E,C){switch(l){case o.PATTERN000:return(E+C)%2==0;case o.PATTERN001:return E%2==0;case o.PATTERN010:return C%3==0;case o.PATTERN011:return(E+C)%3==0;case o.PATTERN100:return(Math.floor(E/2)+Math.floor(C/3))%2==0;case o.PATTERN101:return E*C%2+E*C%3==0;case o.PATTERN110:return(E*C%2+E*C%3)%2==0;case o.PATTERN111:return(E*C%3+(E+C)%2)%2==0;default:throw new Error("bad maskPattern:"+l)}},getErrorCorrectPolynomial:function(l){for(var E=new I([1],0),C=0;C<l;C++)E=E.multiply(new I([1,a.gexp(C)],0));return E},getLengthInBits:function(l,E){if(1<=E&&E<10)switch(l){case n.MODE_NUMBER:return 10;case n.MODE_ALPHA_NUM:return 9;case n.MODE_8BIT_BYTE:return 8;case n.MODE_KANJI:return 8;default:throw new Error("mode:"+l)}else if(E<27)switch(l){case n.MODE_NUMBER:return 12;case n.MODE_ALPHA_NUM:return 11;case n.MODE_8BIT_BYTE:return 16;case n.MODE_KANJI:return 10;default:throw new Error("mode:"+l)}else if(E<41)switch(l){case n.MODE_NUMBER:return 14;case n.MODE_ALPHA_NUM:return 13;case n.MODE_8BIT_BYTE:return 16;case n.MODE_KANJI:return 12;default:throw new Error("mode:"+l)}else throw new Error("type:"+E)},getLostPoint:function(l){for(var E=l.getModuleCount(),C=0,f=0;f<E;f++)for(var u=0;u<E;u++){for(var p=0,y=l.isDark(f,u),D=-1;D<=1;D++)if(!(f+D<0||E<=f+D))for(var F=-1;F<=1;F++)u+F<0||E<=u+F||D==0&&F==0||y==l.isDark(f+D,u+F)&&p++;p>5&&(C+=3+p-5)}for(var f=0;f<E-1;f++)for(var u=0;u<E-1;u++){var G=0;l.isDark(f,u)&&G++,l.isDark(f+1,u)&&G++,l.isDark(f,u+1)&&G++,l.isDark(f+1,u+1)&&G++,(G==0||G==4)&&(C+=3)}for(var f=0;f<E;f++)for(var u=0;u<E-6;u++)l.isDark(f,u)&&!l.isDark(f,u+1)&&l.isDark(f,u+2)&&l.isDark(f,u+3)&&l.isDark(f,u+4)&&!l.isDark(f,u+5)&&l.isDark(f,u+6)&&(C+=40);for(var u=0;u<E;u++)for(var f=0;f<E-6;f++)l.isDark(f,u)&&!l.isDark(f+1,u)&&l.isDark(f+2,u)&&l.isDark(f+3,u)&&l.isDark(f+4,u)&&!l.isDark(f+5,u)&&l.isDark(f+6,u)&&(C+=40);for(var Q=0,u=0;u<E;u++)for(var f=0;f<E;f++)l.isDark(f,u)&&Q++;var h=Math.abs(100*Q/E/E-50)/5;return C+=h*10,C}},a={glog:function(l){if(l<1)throw new Error("glog("+l+")");return a.LOG_TABLE[l]},gexp:function(l){for(;l<0;)l+=255;for(;l>=256;)l-=255;return a.EXP_TABLE[l]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},g=0;g<8;g++)a.EXP_TABLE[g]=1<<g;for(var g=8;g<256;g++)a.EXP_TABLE[g]=a.EXP_TABLE[g-4]^a.EXP_TABLE[g-5]^a.EXP_TABLE[g-6]^a.EXP_TABLE[g-8];for(var g=0;g<255;g++)a.LOG_TABLE[a.EXP_TABLE[g]]=g;function I(l,E){if(l.length==null)throw new Error(l.length+"/"+E);for(var C=0;C<l.length&&l[C]==0;)C++;this.num=new Array(l.length-C+E);for(var f=0;f<l.length-C;f++)this.num[f]=l[f+C]}I.prototype={get:function(l){return this.num[l]},getLength:function(){return this.num.length},multiply:function(l){for(var E=new Array(this.getLength()+l.getLength()-1),C=0;C<this.getLength();C++)for(var f=0;f<l.getLength();f++)E[C+f]^=a.gexp(a.glog(this.get(C))+a.glog(l.get(f)));return new I(E,0)},mod:function(l){if(this.getLength()-l.getLength()<0)return this;for(var E=a.glog(this.get(0))-a.glog(l.get(0)),C=new Array(this.getLength()),f=0;f<this.getLength();f++)C[f]=this.get(f);for(var f=0;f<l.getLength();f++)C[f]^=a.gexp(a.glog(l.get(f))+E);return new I(C,0).mod(l)}};function s(l,E){this.totalCount=l,this.dataCount=E}s.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],s.getRSBlocks=function(l,E){var C=s.getRsBlockTable(l,E);if(C==null)throw new Error("bad rs block @ typeNumber:"+l+"/errorCorrectLevel:"+E);for(var f=C.length/3,u=[],p=0;p<f;p++)for(var y=C[p*3+0],D=C[p*3+1],F=C[p*3+2],G=0;G<y;G++)u.push(new s(D,F));return u},s.getRsBlockTable=function(l,E){switch(E){case i.L:return s.RS_BLOCK_TABLE[(l-1)*4+0];case i.M:return s.RS_BLOCK_TABLE[(l-1)*4+1];case i.Q:return s.RS_BLOCK_TABLE[(l-1)*4+2];case i.H:return s.RS_BLOCK_TABLE[(l-1)*4+3];default:return}};function c(){this.buffer=[],this.length=0}c.prototype={get:function(l){var E=Math.floor(l/8);return(this.buffer[E]>>>7-l%8&1)==1},put:function(l,E){for(var C=0;C<E;C++)this.putBit((l>>>E-C-1&1)==1)},getLengthInBits:function(){return this.length},putBit:function(l){var E=Math.floor(this.length/8);this.buffer.length<=E&&this.buffer.push(0),l&&(this.buffer[E]|=128>>>this.length%8),this.length++}};var B=[[17,14,11,7],[32,26,20,14],[53,42,32,24],[78,62,46,34],[106,84,60,44],[134,106,74,58],[154,122,86,64],[192,152,108,84],[230,180,130,98],[271,213,151,119],[321,251,177,137],[367,287,203,155],[425,331,241,177],[458,362,258,194],[520,412,292,220],[586,450,322,250],[644,504,364,280],[718,560,394,310],[792,624,442,338],[858,666,482,382],[929,711,509,403],[1003,779,565,439],[1091,857,611,461],[1171,911,661,511],[1273,997,715,535],[1367,1059,751,593],[1465,1125,805,625],[1528,1190,868,658],[1628,1264,908,698],[1732,1370,982,742],[1840,1452,1030,790],[1952,1538,1112,842],[2068,1628,1168,898],[2188,1722,1228,958],[2303,1809,1283,983],[2431,1911,1351,1051],[2563,1989,1423,1093],[2699,2099,1499,1139],[2809,2213,1579,1219],[2953,2331,1663,1273]];function d(l){if(this.options={padding:4,width:256,height:256,typeNumber:4,color:"#000000",background:"#ffffff",ecl:"M"},typeof l=="string"&&(l={content:l}),l)for(var E in l)this.options[E]=l[E];if(typeof this.options.content!="string")throw new Error("Expected 'content' as string!");if(this.options.content.length===0)throw new Error("Expected 'content' to be non-empty!");if(!(this.options.padding>=0))throw new Error("Expected 'padding' value to be non-negative!");if(!(this.options.width>0)||!(this.options.height>0))throw new Error("Expected 'width' or 'height' value to be higher than zero!");function C(F){switch(F){case"L":return i.L;case"M":return i.M;case"Q":return i.Q;case"H":return i.H;default:throw new Error("Unknwon error correction level: "+F)}}function f(F,G){for(var Q=u(F),h=1,_=0,b=0,w=B.length;b<=w;b++){var S=B[b];if(!S)throw new Error("Content too long: expected "+_+" but got "+Q);switch(G){case"L":_=S[0];break;case"M":_=S[1];break;case"Q":_=S[2];break;case"H":_=S[3];break;default:throw new Error("Unknwon error correction level: "+G)}if(Q<=_)break;h++}if(h>B.length)throw new Error("Content too long");return h}function u(F){var G=encodeURI(F).toString().replace(/\%[0-9a-fA-F]{2}/g,"a");return G.length+(G.length!=F?3:0)}var p=this.options.content,y=f(p,this.options.ecl),D=C(this.options.ecl);this.qrcode=new t(y,D),this.qrcode.addData(p),this.qrcode.make()}d.prototype.svg=function(l){var E=this.options||{},C=this.qrcode.modules;typeof l>"u"&&(l={container:E.container||"svg"});for(var f=typeof E.pretty<"u"?!!E.pretty:!0,u=f?"  ":"",p=f?`\r
`:"",y=E.width,D=E.height,F=C.length,G=y/(F+2*E.padding),Q=D/(F+2*E.padding),h=typeof E.join<"u"?!!E.join:!1,_=typeof E.swap<"u"?!!E.swap:!1,b=typeof E.xmlDeclaration<"u"?!!E.xmlDeclaration:!0,w=typeof E.predefined<"u"?!!E.predefined:!1,S=w?u+'<defs><path id="qrmodule" d="M0 0 h'+Q+" v"+G+' H0 z" style="fill:'+E.color+';shape-rendering:crispEdges;" /></defs>'+p:"",k=u+'<rect x="0" y="0" width="'+y+'" height="'+D+'" style="fill:'+E.background+';shape-rendering:crispEdges;"/>'+p,m="",N="",H=0;H<F;H++)for(var M=0;M<F;M++){var U=C[M][H];if(U){var v=M*G+E.padding*G,L=H*Q+E.padding*Q;if(_){var x=v;v=L,L=x}if(h){var q=G+v,P=Q+L;v=Number.isInteger(v)?Number(v):v.toFixed(2),L=Number.isInteger(L)?Number(L):L.toFixed(2),q=Number.isInteger(q)?Number(q):q.toFixed(2),P=Number.isInteger(P)?Number(P):P.toFixed(2),N+="M"+v+","+L+" V"+P+" H"+q+" V"+L+" H"+v+" Z "}else w?m+=u+'<use x="'+v.toString()+'" y="'+L.toString()+'" href="#qrmodule" />'+p:m+=u+'<rect x="'+v.toString()+'" y="'+L.toString()+'" width="'+G+'" height="'+Q+'" style="fill:'+E.color+';shape-rendering:crispEdges;"/>'+p}}h&&(m=u+'<path x="0" y="0" style="fill:'+E.color+';shape-rendering:crispEdges;" d="'+N+'" />');var O="";switch(l.container){case"svg":b&&(O+='<?xml version="1.0" standalone="yes"?>'+p),O+='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="'+y+'" height="'+D+'">'+p,O+=S+k+m,O+="</svg>";break;case"svg-viewbox":b&&(O+='<?xml version="1.0" standalone="yes"?>'+p),O+='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 '+y+" "+D+'">'+p,O+=S+k+m,O+="</svg>";break;case"g":O+='<g width="'+y+'" height="'+D+'">'+p,O+=S+k+m,O+="</g>";break;default:O+=(S+k+m).replace(/^\s+/,"");break}return O},d.prototype.save=function(l,E){var C=this.svg();typeof E!="function"&&(E=function(u,p){});try{var f=require("fs");f.writeFile(l,C,E)}catch(u){E(u)}},A.exports=d})(qrcode);var QRCode=qrcode.exports,Info_svelte_svelte_type_style_lang="";function create_if_block$3(A){let e;return{c(){e=element("span"),attr(e,"class","icon svelte-1ytw09y")},m(t,n){insert(t,e,n),e.innerHTML=SX_ICON_COPY},p:noop$1,d(t){t&&detach(e)}}}function create_fragment$3(A){let e,t,n,i;const o=A[8].default,r=create_slot(o,A,A[7],null);let a=A[2]&&create_if_block$3();return{c(){e=element("div"),t=element("span"),r&&r.c(),n=space(),a&&a.c(),attr(t,"id",A[0]),attr(t,"class","info-value svelte-1ytw09y"),attr(e,"class","info svelte-1ytw09y"),toggle_class(e,"copyable",A[2]),toggle_class(e,"center",A[1])},m(g,I){insert(g,e,I),append(e,t),r&&r.m(t,null),append(e,n),a&&a.m(e,null),i=!0},p(g,[I]){r&&r.p&&(!i||I&128)&&update_slot_base(r,o,g,g[7],i?get_slot_changes(o,g[7],I,null):get_all_dirty_from_scope(g[7]),null),g[2]&&a.p(g,I)},i(g){i||(transition_in(r,g),i=!0)},o(g){transition_out(r,g),i=!1},d(g){g&&detach(e),r&&r.d(g),a&&a.d()}}}function instance$3(A,e,t){let{$$slots:n={},$$scope:i}=e,{key:o}=e;const r=o;let{address:a=!1}=e;const g=a;let{center:I=g}=e;const s=I;let{copyable:c=!1}=e;const B=c;return A.$$set=d=>{"key"in d&&t(3,o=d.key),"address"in d&&t(4,a=d.address),"center"in d&&t(5,I=d.center),"copyable"in d&&t(6,c=d.copyable),"$$scope"in d&&t(7,i=d.$$scope)},[r,s,B,o,a,I,c,i,n]}class Info extends SvelteComponent{constructor(e){super(),init(this,e,instance$3,create_fragment$3,safe_not_equal,{key:3,address:4,center:5,copyable:6})}}var PopupReceive_svelte_svelte_type_style_lang="";function create_catch_block_1$1(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block_1$1(A){let e,t,n;function i(r){A[13](r)}let o={id:"chain-select",pfpMap:A[6],placeholder:"Select chain",items:A[23]};return A[2]!==void 0&&(o.value=A[2]),e=new StarSelect({props:o}),binding_callbacks.push(()=>bind(e,"value",i)),{c(){create_component(e.$$.fragment)},m(r,a){mount_component(e,r,a),n=!0},p(r,a){const g={};a&64&&(g.pfpMap=r[6]),!t&&a&4&&(t=!0,g.value=r[2],add_flush_callback(()=>t=!1)),e.$set(g)},i(r){n||(transition_in(e.$$.fragment,r),n=!0)},o(r){transition_out(e.$$.fragment,r),n=!1},d(r){destroy_component(e,r)}}}function create_pending_block_1$1(A){let e;return{c(){e=text("Loading chains...")},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_default_slot_2(A){let e,t,n={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$1,then:create_then_block_1$1,catch:create_catch_block_1$1,value:23,blocks:[,,,]};return handle_promise(A[9](),n),{c(){e=empty(),n.block.c()},m(i,o){insert(i,e,o),n.block.m(i,n.anchor=o),n.mount=()=>e.parentNode,n.anchor=e,t=!0},p(i,o){A=i,update_await_block_branch(n,A,o)},i(i){t||(transition_in(n.block),t=!0)},o(i){for(let o=0;o<3;o+=1){const r=n.blocks[o];transition_out(r)}t=!1},d(i){i&&detach(e),n.block.d(i),n.token=null,n=null}}}function create_catch_block$2(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$2(A){let e,t,n;function i(r){A[14](r)}let o={id:"account-select",pfpMap:A[5],placeholder:"Select account",secondaryClass:"balance",items:A[22]};return A[0]!==void 0&&(o.value=A[0]),e=new StarSelect({props:o}),binding_callbacks.push(()=>bind(e,"value",i)),{c(){create_component(e.$$.fragment)},m(r,a){mount_component(e,r,a),n=!0},p(r,a){const g={};a&32&&(g.pfpMap=r[5]),!t&&a&1&&(t=!0,g.value=r[0],add_flush_callback(()=>t=!1)),e.$set(g)},i(r){n||(transition_in(e.$$.fragment,r),n=!0)},o(r){transition_out(e.$$.fragment,r),n=!1},d(r){destroy_component(e,r)}}}function create_pending_block$2(A){let e;return{c(){e=text("Loading Accounts...")},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_default_slot_1$1(A){let e,t,n={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$2,then:create_then_block$2,catch:create_catch_block$2,value:22,blocks:[,,,]};return handle_promise(A[8](),n),{c(){e=empty(),n.block.c()},m(i,o){insert(i,e,o),n.block.m(i,n.anchor=o),n.mount=()=>e.parentNode,n.anchor=e,t=!0},p(i,o){A=i,update_await_block_branch(n,A,o)},i(i){t||(transition_in(n.block),t=!0)},o(i){for(let o=0;o<3;o+=1){const r=n.blocks[o];transition_out(r)}t=!1},d(i){i&&detach(e),n.block.d(i),n.token=null,n=null}}}function create_if_block$2(A){let e,t;return e=new Address({props:{copyable:!0,address:Chains.addressFor(A[1]?.pubkey,A[3])||""}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,i){const o={};i&10&&(o.address=Chains.addressFor(n[1]?.pubkey,n[3])||""),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_default_slot$1(A){let e,t,n=A[1]&&A[3]&&create_if_block$2(A);return{c(){n&&n.c(),e=empty()},m(i,o){n&&n.m(i,o),insert(i,e,o),t=!0},p(i,o){i[1]&&i[3]?n?(n.p(i,o),o&10&&transition_in(n,1)):(n=create_if_block$2(i),n.c(),transition_in(n,1),n.m(e.parentNode,e)):n&&(group_outros(),transition_out(n,1,1,()=>{n=null}),check_outros())},i(i){t||(transition_in(n),t=!0)},o(i){transition_out(n),t=!1},d(i){n&&n.d(i),i&&detach(e)}}}function create_fragment$2(A){let e,t,n,i,o,r,a,g,I,s,c,B,d,l,E;return n=new Close({props:{absolute:!0}}),n.$on("click",A[12]),r=new Field({props:{short:!0,key:"chain-select",name:"Chain",$$slots:{default:[create_default_slot_2]},$$scope:{ctx:A}}}),g=new Field({props:{short:!0,key:"account-select",name:"Account",$$slots:{default:[create_default_slot_1$1]},$$scope:{ctx:A}}}),s=new Info({props:{address:!0,key:"receive-address",$$slots:{default:[create_default_slot$1]},$$scope:{ctx:A}}}),{c(){e=element("h3"),e.textContent="Receive",t=space(),i=element("div"),create_component(n.$$.fragment),o=space(),create_component(r.$$.fragment),a=space(),create_component(g.$$.fragment),I=space(),create_component(s.$$.fragment),c=space(),B=element("div"),d=space(),l=element("div"),l.textContent="Scan QR code to receive to this address",set_style(i,"display","contents"),set_style(i,"--margin","5px"),attr(B,"class","qr-code svelte-2npbym"),attr(l,"class","info svelte-2npbym")},m(C,f){insert(C,e,f),insert(C,t,f),insert(C,i,f),mount_component(n,i,null),insert(C,o,f),mount_component(r,C,f),insert(C,a,f),mount_component(g,C,f),insert(C,I,f),mount_component(s,C,f),insert(C,c,f),insert(C,B,f),A[15](B),insert(C,d,f),insert(C,l,f),E=!0},p(C,[f]){const u={};f&16777284&&(u.$$scope={dirty:f,ctx:C}),r.$set(u);const p={};f&16777249&&(p.$$scope={dirty:f,ctx:C}),g.$set(p);const y={};f&16777226&&(y.$$scope={dirty:f,ctx:C}),s.$set(y)},i(C){E||(transition_in(n.$$.fragment,C),transition_in(r.$$.fragment,C),transition_in(g.$$.fragment,C),transition_in(s.$$.fragment,C),E=!0)},o(C){transition_out(n.$$.fragment,C),transition_out(r.$$.fragment,C),transition_out(g.$$.fragment,C),transition_out(s.$$.fragment,C),E=!1},d(C){C&&detach(e),C&&detach(t),C&&detach(i),destroy_component(n,C),C&&detach(o),destroy_component(r,C),C&&detach(a),destroy_component(g,C),C&&detach(I),destroy_component(s,C),C&&detach(c),C&&detach(B),A[15](null),C&&detach(d),C&&detach(l)}}}function instance$2(A,e,t){let n,i,o,r,a,g;component_subscribe(A,yw_account_ref,h=>t(16,o=h)),component_subscribe(A,yw_context_popup,h=>t(17,r=h)),component_subscribe(A,yw_chain_ref,h=>t(18,a=h)),component_subscribe(A,yw_popup,h=>t(7,g=h));let I={value:o},s;const c=(h,_)=>({object:_,value:h,primary:_.name,secondary:_.extra?.total_fiat_cache||"(?)"});let B={};async function d(){const h=await Accounts.read();return t(5,B=ofe(await Promise.all(ode(h.raw).map(([_,b])=>new Promise(w=>{const S=dd("span"),k=new PfpDisplay({target:S,props:{dim:28,genStyle:"font-size: 18px;",resource:b,settle(){const m=S.firstChild?.cloneNode(!0);k.$destroy(),w([b.pfp,m])}}})}))))),oderac(h.raw,c)}let l={value:a},E;const C=(h,_)=>({object:_,value:h,primary:_.name,secondary:_.id,pfp:_.pfp});let f={};async function u(){const h=await Chains.read();return t(6,f=await y(h.raw)),oderac(h.raw,C)}r?.account||set_store_value(yw_context_popup,r={account:o},r);let p;async function y(h){return ofe(await Promise.all(ode(h).map(([_,b])=>new Promise(w=>{const S=dd("span"),k=new PfpDisplay({target:S,props:{dim:28,genStyle:"font-size: 18px;",resource:b,settle(){const m=S.firstChild?.cloneNode(!0);k.$destroy(),w([b.pfp,m])}}})}))))}const D=()=>set_store_value(yw_popup,g=null,g);function F(h){l=h,t(2,l)}function G(h){I=h,t(0,I)}function Q(h){binding_callbacks[h?"unshift":"push"](()=>{p=h,t(4,p),t(1,s),t(3,E),t(11,n),t(10,i),t(0,I),t(2,l)})}return A.$$.update=()=>{if(A.$$.dirty&1&&t(11,n=I.value),A.$$.dirty&2048&&n&&Accounts.read().then(h=>{t(1,s=h.at(n))}),A.$$.dirty&4&&t(10,i=l.value),A.$$.dirty&1024&&i&&Chains.read().then(h=>{t(3,E=h.at(i))}),A.$$.dirty&26&&p&&s&&E){const h=new QRCode({content:`starshell:${Chains.addressFor(s.pubkey,E)||""}`,width:220,height:220,padding:3,ecl:"H",join:!0}).svg();t(4,p.innerHTML=h,p)}},[I,s,l,E,p,B,f,g,d,u,i,n,D,F,G,Q]}class PopupReceive extends SvelteComponent{constructor(e){super(),init(this,e,instance$2,create_fragment$2,safe_not_equal,{})}}var Gap_svelte_svelte_type_style_lang="",InlinePills_svelte_svelte_type_style_lang="",TokensAdd_svelte_svelte_type_style_lang="";function as_amount(A,e){const t=A.amount.padStart(e.decimals+2,"0");return t.slice(0,-e.decimals).replace(/^0+/,"0")+"."+t.slice(-e.decimals)}async function to_fiat(A,e,t="usd"){if(A.amount==="0")return new BigNumber(0);const n=e.extra.coingecko_id,i=await CoinGecko.coinsVersus([n],t);return new BigNumber(A.amount).shiftedBy(-e.decimals).times(i[n])}async function coin_formats(A,e,t="usd"){const n=e.extra.coingecko_id,o=(await CoinGecko.coinsVersus([n],t))[n],r=new BigNumber(A.amount).shiftedBy(-e.decimals).times(o);return{versus:t,balance:r,fiat:r.times(o).toNumber(),worth:o}}class CoinParseError extends Error{}class DenomNotFoundError extends Error{}function parse_coin_amount(A,e){const t=R_TRANSFER_AMOUNT.exec(A);if(t){const[,n,i]=t;for(const[o,r]of ode(e.coins))if(i===r.denom)return[BigInt(n),o,r];throw new DenomNotFoundError(`Did not find "${i}" denomination in ${e.name}`)}else throw new CoinParseError(`Failed to parse transfer amount "${A}"`)}var HoldingView_svelte_svelte_type_style_lang="",HoldingsHome_svelte_svelte_type_style_lang="",AccountCreate_svelte_svelte_type_style_lang="",AccountsHome_svelte_svelte_type_style_lang="",DeadEnd_svelte_svelte_type_style_lang="",IconEditor_svelte_svelte_type_style_lang="",ContactEdit_svelte_svelte_type_style_lang="",ContactList_svelte_svelte_type_style_lang="",ContactsHome_svelte_svelte_type_style_lang="";const Apps=create_store_class({store:SI_STORE_APPS,class:class OA extends WritableStoreMap{static pathFor(e,t){return`/scheme.${t}/host.${e.replace(/:/g,"+")}`}static pathFrom(e){return OA.pathFor(e.host,e.scheme)}static get(e,t){return Apps.open(n=>n.get(e,t))}get(e,t){const n=OA.pathFor(e,t);return this._w_cache[n]??null}async put(e){const t=OA.pathFor(e.host,e.scheme);this._w_cache[t]=e,await this.save()}}});var NetworkView_svelte_svelte_type_style_lang="",defaultLocale$1="en",localesData$1={},lowercaseLocaleLookup={};function getDefaultLocale(){return defaultLocale$1}function setDefaultLocale(A){defaultLocale$1=A}function getLocaleData$1(A){return localesData$1[A]}function addLocaleData$1(A){if(!A)throw new Error("No locale data passed");localesData$1[A.locale]=A,lowercaseLocaleLookup[A.locale.toLowerCase()]=A.locale}function resolveLocale$1(A){if(localesData$1[A])return A;if(lowercaseLocaleLookup[A.toLowerCase()])return lowercaseLocaleLookup[A.toLowerCase()]}function resolveLocale(A){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},t=e.localeMatcher||"lookup";switch(t){case"lookup":return resolveLocaleLookup(A);case"best fit":return resolveLocaleLookup(A);default:throw new RangeError('Invalid "localeMatcher" option: '.concat(t))}}function resolveLocaleLookup(A){var e=resolveLocale$1(A);if(e)return e;for(var t=A.split("-");A.length>1;){t.pop(),A=t.join("-");var n=resolveLocale$1(A);if(n)return n}}var $={af:function A(e){return e==1?"one":"other"},am:function A(e){return e>=0&&e<=1?"one":"other"},ar:function A(e){var t=String(e).split("."),n=Number(t[0])==e,i=n&&t[0].slice(-2);return e==0?"zero":e==1?"one":e==2?"two":i>=3&&i<=10?"few":i>=11&&i<=99?"many":"other"},ast:function A(e){var t=String(e).split("."),n=!t[1];return e==1&&n?"one":"other"},be:function A(e){var t=String(e).split("."),n=Number(t[0])==e,i=n&&t[0].slice(-1),o=n&&t[0].slice(-2);return i==1&&o!=11?"one":i>=2&&i<=4&&(o<12||o>14)?"few":n&&i==0||i>=5&&i<=9||o>=11&&o<=14?"many":"other"},br:function A(e){var t=String(e).split("."),n=Number(t[0])==e,i=n&&t[0].slice(-1),o=n&&t[0].slice(-2),r=n&&t[0].slice(-6);return i==1&&o!=11&&o!=71&&o!=91?"one":i==2&&o!=12&&o!=72&&o!=92?"two":(i==3||i==4||i==9)&&(o<10||o>19)&&(o<70||o>79)&&(o<90||o>99)?"few":e!=0&&n&&r==0?"many":"other"},bs:function A(e){var t=String(e).split("."),n=t[0],i=t[1]||"",o=!t[1],r=n.slice(-1),a=n.slice(-2),g=i.slice(-1),I=i.slice(-2);return o&&r==1&&a!=11||g==1&&I!=11?"one":o&&r>=2&&r<=4&&(a<12||a>14)||g>=2&&g<=4&&(I<12||I>14)?"few":"other"},ceb:function A(e){var t=String(e).split("."),n=t[0],i=t[1]||"",o=!t[1],r=n.slice(-1),a=i.slice(-1);return o&&(n==1||n==2||n==3)||o&&r!=4&&r!=6&&r!=9||!o&&a!=4&&a!=6&&a!=9?"one":"other"},cs:function A(e){var t=String(e).split("."),n=t[0],i=!t[1];return e==1&&i?"one":n>=2&&n<=4&&i?"few":i?"other":"many"},cy:function A(e){return e==0?"zero":e==1?"one":e==2?"two":e==3?"few":e==6?"many":"other"},da:function A(e){var t=String(e).split("."),n=t[0],i=Number(t[0])==e;return e==1||!i&&(n==0||n==1)?"one":"other"},dsb:function A(e){var t=String(e).split("."),n=t[0],i=t[1]||"",o=!t[1],r=n.slice(-2),a=i.slice(-2);return o&&r==1||a==1?"one":o&&r==2||a==2?"two":o&&(r==3||r==4)||a==3||a==4?"few":"other"},dz:function A(e){return"other"},es:function A(e){var t=String(e).split("."),n=t[0],i=!t[1],o=n.slice(-6);return e==1?"one":n!=0&&o==0&&i?"many":"other"},ff:function A(e){return e>=0&&e<2?"one":"other"},fr:function A(e){var t=String(e).split("."),n=t[0],i=!t[1],o=n.slice(-6);return e>=0&&e<2?"one":n!=0&&o==0&&i?"many":"other"},ga:function A(e){var t=String(e).split("."),n=Number(t[0])==e;return e==1?"one":e==2?"two":n&&e>=3&&e<=6?"few":n&&e>=7&&e<=10?"many":"other"},gd:function A(e){var t=String(e).split("."),n=Number(t[0])==e;return e==1||e==11?"one":e==2||e==12?"two":n&&e>=3&&e<=10||n&&e>=13&&e<=19?"few":"other"},he:function A(e){var t=String(e).split("."),n=t[0],i=!t[1],o=Number(t[0])==e,r=o&&t[0].slice(-1);return e==1&&i?"one":n==2&&i?"two":i&&(e<0||e>10)&&o&&r==0?"many":"other"},is:function A(e){var t=String(e).split("."),n=t[0],i=Number(t[0])==e,o=n.slice(-1),r=n.slice(-2);return i&&o==1&&r!=11||!i?"one":"other"},it:function A(e){var t=String(e).split("."),n=t[0],i=!t[1],o=n.slice(-6);return e==1&&i?"one":n!=0&&o==0&&i?"many":"other"},ksh:function A(e){return e==0?"zero":e==1?"one":"other"},lt:function A(e){var t=String(e).split("."),n=t[1]||"",i=Number(t[0])==e,o=i&&t[0].slice(-1),r=i&&t[0].slice(-2);return o==1&&(r<11||r>19)?"one":o>=2&&o<=9&&(r<11||r>19)?"few":n!=0?"many":"other"},lv:function A(e){var t=String(e).split("."),n=t[1]||"",i=n.length,o=Number(t[0])==e,r=o&&t[0].slice(-1),a=o&&t[0].slice(-2),g=n.slice(-2),I=n.slice(-1);return o&&r==0||a>=11&&a<=19||i==2&&g>=11&&g<=19?"zero":r==1&&a!=11||i==2&&I==1&&g!=11||i!=2&&I==1?"one":"other"},mk:function A(e){var t=String(e).split("."),n=t[0],i=t[1]||"",o=!t[1],r=n.slice(-1),a=n.slice(-2),g=i.slice(-1),I=i.slice(-2);return o&&r==1&&a!=11||g==1&&I!=11?"one":"other"},mt:function A(e){var t=String(e).split("."),n=Number(t[0])==e,i=n&&t[0].slice(-2);return e==1?"one":e==0||i>=2&&i<=10?"few":i>=11&&i<=19?"many":"other"},pa:function A(e){return e==0||e==1?"one":"other"},pl:function A(e){var t=String(e).split("."),n=t[0],i=!t[1],o=n.slice(-1),r=n.slice(-2);return e==1&&i?"one":i&&o>=2&&o<=4&&(r<12||r>14)?"few":i&&n!=1&&(o==0||o==1)||i&&o>=5&&o<=9||i&&r>=12&&r<=14?"many":"other"},pt:function A(e){var t=String(e).split("."),n=t[0],i=!t[1],o=n.slice(-6);return n==0||n==1?"one":n!=0&&o==0&&i?"many":"other"},ro:function A(e){var t=String(e).split("."),n=!t[1],i=Number(t[0])==e,o=i&&t[0].slice(-2);return e==1&&n?"one":!n||e==0||o>=2&&o<=19?"few":"other"},ru:function A(e){var t=String(e).split("."),n=t[0],i=!t[1],o=n.slice(-1),r=n.slice(-2);return i&&o==1&&r!=11?"one":i&&o>=2&&o<=4&&(r<12||r>14)?"few":i&&o==0||i&&o>=5&&o<=9||i&&r>=11&&r<=14?"many":"other"},se:function A(e){return e==1?"one":e==2?"two":"other"},si:function A(e){var t=String(e).split("."),n=t[0],i=t[1]||"";return e==0||e==1||n==0&&i==1?"one":"other"},sl:function A(e){var t=String(e).split("."),n=t[0],i=!t[1],o=n.slice(-2);return i&&o==1?"one":i&&o==2?"two":i&&(o==3||o==4)||!i?"few":"other"}};$.as=$.am;$.az=$.af;$.bg=$.af;$.bn=$.am;$.brx=$.af;$.ca=$.ast;$.ce=$.af;$.chr=$.af;$.de=$.ast;$.ee=$.af;$.el=$.af;$.en=$.ast;$.et=$.ast;$.eu=$.af;$.fa=$.am;$.fi=$.ast;$.fil=$.ceb;$.fo=$.af;$.fur=$.af;$.fy=$.ast;$.gl=$.ast;$.gu=$.am;$.ha=$.af;$.hi=$.am;$.hr=$.bs;$.hsb=$.dsb;$.hu=$.af;$.hy=$.ff;$.ia=$.ast;$.id=$.dz;$.ig=$.dz;$.ja=$.dz;$.jgo=$.af;$.jv=$.dz;$.ka=$.af;$.kea=$.dz;$.kk=$.af;$.kl=$.af;$.km=$.dz;$.kn=$.am;$.ko=$.dz;$.ku=$.af;$.ky=$.af;$.lb=$.af;$.lkt=$.dz;$.lo=$.dz;$.ml=$.af;$.mn=$.af;$.mr=$.af;$.ms=$.dz;$.my=$.dz;$.nb=$.af;$.ne=$.af;$.nl=$.ast;$.nn=$.af;$.no=$.af;$.or=$.af;$.pcm=$.am;$.ps=$.af;$.rm=$.af;$.sah=$.dz;$.sc=$.ast;$.sd=$.af;$.sk=$.cs;$.so=$.af;$.sq=$.af;$.sr=$.bs;$.su=$.dz;$.sv=$.ast;$.sw=$.ast;$.ta=$.af;$.te=$.af;$.th=$.dz;$.ti=$.pa;$.tk=$.af;$.to=$.dz;$.tr=$.af;$.ug=$.af;$.uk=$.ru;$.ur=$.ast;$.uz=$.af;$.vi=$.dz;$.wae=$.af;$.wo=$.dz;$.yi=$.ast;$.yo=$.dz;$.yue=$.dz;$.zh=$.dz;$.zu=$.am;var PluralRuleFunctions=$;function getPluralRulesLocale(A){return A==="pt-PT"?A:getLanguageFromLanguageTag(A)}var LANGUAGE_REG_EXP=/^([a-z0-9]+)/i;function getLanguageFromLanguageTag(A){var e=A.match(LANGUAGE_REG_EXP);if(!e)throw new TypeError("Invalid locale: ".concat(A));return e[1]}function _classCallCheck$3(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(A,e){for(var t=0;t<e.length;t++){var n=e[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(A,n.key,n)}}function _createClass$3(A,e,t){return e&&_defineProperties$3(A.prototype,e),t&&_defineProperties$3(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var PluralRules=function(){function A(e,t){_classCallCheck$3(this,A);var n=A.supportedLocalesOf(e);if(n.length===0)throw new RangeError("Unsupported locale: "+e);if(t&&t.type!=="cardinal")throw new RangeError('Only "cardinal" "type" is supported');this.$=PluralRuleFunctions[getPluralRulesLocale(n[0])]}return _createClass$3(A,[{key:"select",value:function(t){return this.$(t)}}],[{key:"supportedLocalesOf",value:function(t){return typeof t=="string"&&(t=[t]),t.filter(function(n){return PluralRuleFunctions[getPluralRulesLocale(n)]})}}]),A}();function _typeof$5(A){return _typeof$5=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$5(A)}function ownKeys$9(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread$9(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$9(Object(t),!0).forEach(function(n){_defineProperty$9(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$9(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty$9(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}function _slicedToArray$1(A,e){return _arrayWithHoles$1(A)||_iterableToArrayLimit$1(A,e)||_unsupportedIterableToArray$2(A,e)||_nonIterableRest$1()}function _nonIterableRest$1(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray$2(A,e){if(!!A){if(typeof A=="string")return _arrayLikeToArray$2(A,e);var t=Object.prototype.toString.call(A).slice(8,-1);if(t==="Object"&&A.constructor&&(t=A.constructor.name),t==="Map"||t==="Set")return Array.from(A);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray$2(A,e)}}function _arrayLikeToArray$2(A,e){(e==null||e>A.length)&&(e=A.length);for(var t=0,n=new Array(e);t<e;t++)n[t]=A[t];return n}function _iterableToArrayLimit$1(A,e){var t=A==null?null:typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t!=null){var n=[],i=!0,o=!1,r,a;try{for(t=t.call(A);!(i=(r=t.next()).done)&&(n.push(r.value),!(e&&n.length===e));i=!0);}catch(g){o=!0,a=g}finally{try{!i&&t.return!=null&&t.return()}finally{if(o)throw a}}return n}}function _arrayWithHoles$1(A){if(Array.isArray(A))return A}function _classCallCheck$2(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(A,e){for(var t=0;t<e.length;t++){var n=e[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(A,n.key,n)}}function _createClass$2(A,e,t){return e&&_defineProperties$2(A.prototype,e),t&&_defineProperties$2(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var UNITS=["second","minute","hour","day","week","month","quarter","year"],NUMERIC_VALUES=["auto","always"],STYLE_VALUES=["long","short","narrow"],LOCALE_MATCHER_VALUES=["lookup","best fit"],RelativeTimeFormat=function(){function A(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};_classCallCheck$2(this,A);var n=t.numeric,i=t.style,o=t.localeMatcher;if(this.numeric="always",this.style="long",this.localeMatcher="lookup",n!==void 0){if(NUMERIC_VALUES.indexOf(n)<0)throw new RangeError('Invalid "numeric" option: '.concat(n));this.numeric=n}if(i!==void 0){if(STYLE_VALUES.indexOf(i)<0)throw new RangeError('Invalid "style" option: '.concat(i));this.style=i}if(o!==void 0){if(LOCALE_MATCHER_VALUES.indexOf(o)<0)throw new RangeError('Invalid "localeMatcher" option: '.concat(o));this.localeMatcher=o}if(typeof e=="string"&&(e=[e]),e.push(getDefaultLocale()),this.locale=A.supportedLocalesOf(e,{localeMatcher:this.localeMatcher})[0],!this.locale)throw new Error("No supported locale was found");PluralRules.supportedLocalesOf(this.locale).length>0?this.pluralRules=new PluralRules(this.locale):console.warn('"'.concat(this.locale,'" locale is not supported')),typeof Intl<"u"&&Intl.NumberFormat?(this.numberFormat=new Intl.NumberFormat(this.locale),this.numberingSystem=this.numberFormat.resolvedOptions().numberingSystem):this.numberingSystem="latn",this.locale=resolveLocale(this.locale,{localeMatcher:this.localeMatcher})}return _createClass$2(A,[{key:"format",value:function(){var t=parseFormatArgs(arguments),n=_slicedToArray$1(t,2),i=n[0],o=n[1];return this.getRule(i,o).replace("{0}",this.formatNumber(Math.abs(i)))}},{key:"formatToParts",value:function(){var t=parseFormatArgs(arguments),n=_slicedToArray$1(t,2),i=n[0],o=n[1],r=this.getRule(i,o),a=r.indexOf("{0}");if(a<0)return[{type:"literal",value:r}];var g=[];return a>0&&g.push({type:"literal",value:r.slice(0,a)}),g=g.concat(this.formatNumberToParts(Math.abs(i)).map(function(I){return _objectSpread$9(_objectSpread$9({},I),{},{unit:o})})),a+3<r.length-1&&g.push({type:"literal",value:r.slice(a+3)}),g}},{key:"getRule",value:function(t,n){var i=getLocaleData$1(this.locale)[this.style][n];if(typeof i=="string")return i;if(this.numeric==="auto"){if(t===-2||t===-1){var o=i["previous".concat(t===-1?"":"-"+Math.abs(t))];if(o)return o}else if(t===1||t===2){var r=i["next".concat(t===1?"":"-"+Math.abs(t))];if(r)return r}else if(t===0&&i.current)return i.current}var a=i[isNegative(t)?"past":"future"];if(typeof a=="string")return a;var g=this.pluralRules&&this.pluralRules.select(Math.abs(t))||"other";return a[g]||a.other}},{key:"formatNumber",value:function(t){return this.numberFormat?this.numberFormat.format(t):String(t)}},{key:"formatNumberToParts",value:function(t){return this.numberFormat&&this.numberFormat.formatToParts?this.numberFormat.formatToParts(t):[{type:"integer",value:this.formatNumber(t)}]}},{key:"resolvedOptions",value:function(){return{locale:this.locale,style:this.style,numeric:this.numeric,numberingSystem:this.numberingSystem}}}]),A}();RelativeTimeFormat.supportedLocalesOf=function(A){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(typeof A=="string")A=[A];else if(!Array.isArray(A))throw new TypeError('Invalid "locales" argument');return A.filter(function(t){return resolveLocale(t,e)})};RelativeTimeFormat.addLocale=addLocaleData$1;RelativeTimeFormat.setDefaultLocale=setDefaultLocale;RelativeTimeFormat.getDefaultLocale=getDefaultLocale;RelativeTimeFormat.PluralRules=PluralRules;var UNIT_ERROR='Invalid "unit" argument';function parseUnit(A){if(_typeof$5(A)==="symbol")throw new TypeError(UNIT_ERROR);if(typeof A!="string")throw new RangeError("".concat(UNIT_ERROR,": ").concat(A));if(A[A.length-1]==="s"&&(A=A.slice(0,A.length-1)),UNITS.indexOf(A)<0)throw new RangeError("".concat(UNIT_ERROR,": ").concat(A));return A}var NUMBER_ERROR='Invalid "number" argument';function parseNumber(A){if(A=Number(A),Number.isFinite&&!Number.isFinite(A))throw new RangeError("".concat(NUMBER_ERROR,": ").concat(A));return A}function isNegativeZero(A){return 1/A===-1/0}function isNegative(A){return A<0||A===0&&isNegativeZero(A)}function parseFormatArgs(A){if(A.length<2)throw new TypeError('"unit" argument is required');return[parseNumber(A[0]),parseUnit(A[1])]}function _typeof$4(A){return _typeof$4=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$4(A)}function _classCallCheck$1(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(A,e){for(var t=0;t<e.length;t++){var n=e[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(A,n.key,n)}}function _createClass$1(A,e,t){return e&&_defineProperties$1(A.prototype,e),t&&_defineProperties$1(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var Cache=function(){function A(){_classCallCheck$1(this,A),this.cache={}}return _createClass$1(A,[{key:"get",value:function(){for(var t=this.cache,n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];for(var r=0,a=i;r<a.length;r++){var g=a[r];if(_typeof$4(t)!=="object")return;t=t[g]}return t}},{key:"put",value:function(){for(var t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];for(var o=n.pop(),r=n.pop(),a=this.cache,g=0,I=n;g<I.length;g++){var s=I[g];_typeof$4(a[s])!=="object"&&(a[s]={}),a=a[s]}return a[r]=o}}]),A}();function _typeof$3(A){return _typeof$3=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$3(A)}function _createForOfIteratorHelperLoose$1(A,e){var t=typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t)return(t=t.call(A)).next.bind(t);if(Array.isArray(A)||(t=_unsupportedIterableToArray$1(A))||e&&A&&typeof A.length=="number"){t&&(A=t);var n=0;return function(){return n>=A.length?{done:!0}:{done:!1,value:A[n++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray$1(A,e){if(!!A){if(typeof A=="string")return _arrayLikeToArray$1(A,e);var t=Object.prototype.toString.call(A).slice(8,-1);if(t==="Object"&&A.constructor&&(t=A.constructor.name),t==="Map"||t==="Set")return Array.from(A);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray$1(A,e)}}function _arrayLikeToArray$1(A,e){(e==null||e>A.length)&&(e=A.length);for(var t=0,n=new Array(e);t<e;t++)n[t]=A[t];return n}function chooseLocale(A,e){for(var t=_createForOfIteratorHelperLoose$1(A),n;!(n=t()).done;){var i=n.value;if(e(i))return i;for(var o=i.split("-");o.length>1;)if(o.pop(),i=o.join("-"),e(i))return i}throw new Error("No locale data has been registered for any of the locales: ".concat(A.join(", ")))}function intlDateTimeFormatSupported(){var A=(typeof Intl>"u"?"undefined":_typeof$3(Intl))==="object";return A&&typeof Intl.DateTimeFormat=="function"}function _typeof$2(A){return _typeof$2=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$2(A)}function isStyleObject(A){return isObject(A)&&(Array.isArray(A.steps)||Array.isArray(A.gradation)||Array.isArray(A.flavour)||typeof A.flavour=="string"||Array.isArray(A.labels)||typeof A.labels=="string"||Array.isArray(A.units)||typeof A.custom=="function")}var OBJECT_CONSTRUCTOR={}.constructor;function isObject(A){return _typeof$2(A)!==void 0&&A!==null&&A.constructor===OBJECT_CONSTRUCTOR}var minute=60,hour=60*minute,day=24*hour,week=7*day,month=30.44*day,year=146097/400*day;function getSecondsInUnit(A){switch(A){case"second":return 1;case"minute":return minute;case"hour":return hour;case"day":return day;case"week":return week;case"month":return month;case"year":return year}}function getStepDenominator(A){return A.factor!==void 0?A.factor:getSecondsInUnit(A.unit||A.formatAs)||1}function getRoundFunction(A){switch(A){case"floor":return Math.floor;default:return Math.round}}function getDiffRatioToNextRoundedNumber(A){switch(A){case"floor":return 1;default:return .5}}function _typeof$1(A){return _typeof$1=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$1(A)}function getStepMinTime(A,e){var t=e.prevStep,n=e.timestamp,i=e.now,o=e.future,r=e.round,a;return t&&(t.id||t.unit)&&(a=A["threshold_for_".concat(t.id||t.unit)]),a===void 0&&A.threshold!==void 0&&(a=A.threshold,typeof a=="function"&&(a=a(i,o))),a===void 0&&(a=A.minTime),_typeof$1(a)==="object"&&(t&&t.id&&a[t.id]!==void 0?a=a[t.id]:a=a.default),typeof a=="function"&&(a=a(n,{future:o,getMinTimeForUnit:function(I,s){return _getMinTimeForUnit(I,s||t&&t.formatAs,{round:r})}})),a===void 0&&A.test&&(A.test(n,{now:i,future:o})?a=0:a=9007199254740991),a===void 0&&(t?A.formatAs&&t.formatAs&&(a=_getMinTimeForUnit(A.formatAs,t.formatAs,{round:r})):a=0),a===void 0&&console.warn("[javascript-time-ago] A step should specify `minTime`:\n"+JSON.stringify(A,null,2)),a}function _getMinTimeForUnit(A,e,t){var n=t.round,i=getSecondsInUnit(A),o;if(e==="now"?o=getSecondsInUnit(A):o=getSecondsInUnit(e),i!==void 0&&o!==void 0)return i-o*(1-getDiffRatioToNextRoundedNumber(n))}function ownKeys$8(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread$8(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$8(Object(t),!0).forEach(function(n){_defineProperty$8(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$8(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty$8(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}function getStep(A,e,t){var n=t.now,i=t.future,o=t.round,r=t.units,a=t.getNextStep;A=filterStepsByUnits(A,r);var g=_getStep(A,e,{now:n,future:i,round:o});if(a){if(g){var I=A[A.indexOf(g)-1],s=A[A.indexOf(g)+1];return[I,g,s]}return[void 0,void 0,A[0]]}return g}function _getStep(A,e,t){var n=t.now,i=t.future,o=t.round;if(A.length!==0){var r=getStepIndex(A,e,{now:n,future:i||e<0,round:o});if(r!==-1){var a=A[r];if(a.granularity){var g=getRoundFunction(o)(Math.abs(e)/getStepDenominator(a)/a.granularity)*a.granularity;if(g===0&&r>0)return A[r-1]}return a}}}function getStepIndex(A,e,t){var n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,i=getStepMinTime(A[n],_objectSpread$8({prevStep:A[n-1],timestamp:t.now-e*1e3},t));return i===void 0||Math.abs(e)<i?n-1:n===A.length-1?n:getStepIndex(A,e,t,n+1)}function filterStepsByUnits(A,e){return A.filter(function(t){var n=t.unit,i=t.formatAs;return n=n||i,n?e.indexOf(n)>=0:!0})}function getTimeToNextUpdateForUnit(A,e,t){var n=t.now,i=t.round;if(!!getSecondsInUnit(A)){var o=getSecondsInUnit(A)*1e3,r=e>n,a=Math.abs(e-n),g=getRoundFunction(i)(a/o)*o;return r?g>0?a-g+getDiffToPreviousRoundedNumber(i,o):a-g+1:-(a-g)+getDiffToNextRoundedNumber(i,o)}}function getDiffToNextRoundedNumber(A,e){return getDiffRatioToNextRoundedNumber(A)*e}function getDiffToPreviousRoundedNumber(A,e){return(1-getDiffRatioToNextRoundedNumber(A))*e+1}var YEAR=365*24*60*60*1e3,INFINITY=1e3*YEAR;function getTimeToNextUpdate(A,e,t){var n=t.prevStep,i=t.nextStep,o=t.now,r=t.future,a=t.round,g=A.getTime?A.getTime():A,I=function(l){return getTimeToNextUpdateForUnit(l,g,{now:o,round:a})},s=getTimeToStepChange(r?e:i,g,{future:r,now:o,round:a,prevStep:r?n:e});if(s!==void 0){var c;if(e&&(e.getTimeToNextUpdate&&(c=e.getTimeToNextUpdate(g,{getTimeToNextUpdateForUnit:I,getRoundFunction,now:o,future:r,round:a})),c===void 0)){var B=e.unit||e.formatAs;B&&(c=I(B))}return c===void 0?s:Math.min(c,s)}}function getStepChangesAt(A,e,t){var n=t.now,i=t.future,o=t.round,r=t.prevStep,a=getStepMinTime(A,{timestamp:e,now:n,future:i,round:o,prevStep:r});if(a!==void 0)return i?e-a*1e3+1:a===0&&e===n?INFINITY:e+a*1e3}function getTimeToStepChange(A,e,t){var n=t.now,i=t.future,o=t.round,r=t.prevStep;if(A){var a=getStepChangesAt(A,e,{now:n,future:i,round:o,prevStep:r});return a===void 0?void 0:a-n}else return i?e-n+1:INFINITY}var localesData={};function getLocaleData(A){return localesData[A]}function addLocaleData(A){if(!A)throw new Error("[javascript-time-ago] No locale data passed.");localesData[A.locale]=A}var round$1=[{formatAs:"now"},{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"}],round={steps:round$1,labels:"long"};function ownKeys$7(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread$7(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$7(Object(t),!0).forEach(function(n){_defineProperty$7(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$7(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty$7(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var defaultStyle=_objectSpread$7(_objectSpread$7({},round),{},{steps:round.steps.filter(function(A){return A.formatAs!=="second"})}),approximate$1=[{factor:1,unit:"now"},{threshold:1,threshold_for_now:45.5,factor:1,unit:"second"},{threshold:45.5,factor:minute,unit:"minute"},{threshold:2.5*minute,granularity:5,factor:minute,unit:"minute"},{threshold:22.5*minute,factor:.5*hour,unit:"half-hour"},{threshold:42.5*minute,threshold_for_minute:52.5*minute,factor:hour,unit:"hour"},{threshold:20.5/24*day,factor:day,unit:"day"},{threshold:5.5*day,factor:week,unit:"week"},{threshold:3.5*week,factor:month,unit:"month"},{threshold:10.5*month,factor:year,unit:"year"}],approximate={gradation:approximate$1,flavour:"long",units:["now","minute","hour","day","week","month","year"]},approximateTime={gradation:approximate$1,flavour:"long-time",units:["now","minute","hour","day","week","month","year"]};function getDate(A){return A instanceof Date?A:new Date(A)}var steps=[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"}],formatters={},monthAndDay={minTime:function A(e,t){t.future;var n=t.getMinTimeForUnit;return n("day")},format:function A(e,t){return formatters[t]||(formatters[t]={}),formatters[t].dayMonth||(formatters[t].dayMonth=new Intl.DateTimeFormat(t,{month:"short",day:"numeric"})),formatters[t].dayMonth.format(getDate(e))}},yearMonthAndDay={minTime:function A(e,t){var n=t.future;if(n){var i=new Date(new Date(e).getFullYear(),0).getTime()-1;return(e-i)/1e3}else{var o=new Date(new Date(e).getFullYear()+1,0).getTime();return(o-e)/1e3}},format:function A(e,t){return formatters[t]||(formatters[t]={}),formatters[t].dayMonthYear||(formatters[t].dayMonthYear=new Intl.DateTimeFormat(t,{year:"numeric",month:"short",day:"numeric"})),formatters[t].dayMonthYear.format(getDate(e))}};intlDateTimeFormatSupported()?steps.push(monthAndDay,yearMonthAndDay):steps.push({formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"});var twitter={steps,labels:["mini","short-time","narrow","short"]};function ownKeys$6(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread$6(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$6(Object(t),!0).forEach(function(n){_defineProperty$6(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$6(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty$6(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterNow=_objectSpread$6(_objectSpread$6({},twitter),{},{steps:[{formatAs:"now"}].concat(twitter.steps)});function ownKeys$5(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread$5(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$5(Object(t),!0).forEach(function(n){_defineProperty$5(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$5(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty$5(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterMinute=_objectSpread$5(_objectSpread$5({},twitter),{},{steps:twitter.steps.filter(function(A){return A.formatAs!=="second"})});function ownKeys$4(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread$4(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$4(Object(t),!0).forEach(function(n){_defineProperty$4(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$4(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty$4(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterMinuteNow=_objectSpread$4(_objectSpread$4({},twitterMinute),{},{steps:[{formatAs:"now"}].concat(twitterMinute.steps)});function ownKeys$3(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread$3(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$3(Object(t),!0).forEach(function(n){_defineProperty$3(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$3(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty$3(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterFirstMinute=_objectSpread$3(_objectSpread$3({},twitter),{},{steps:twitter.steps.filter(function(A){return A.formatAs!=="second"}).map(function(A){return A.formatAs==="minute"?_objectSpread$3(_objectSpread$3({},A),{},{minTime:minute}):A})}),mini={steps:[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"month"},{formatAs:"year"}],labels:["mini","short-time","narrow","short"]};function ownKeys$2(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread$2(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$2(Object(t),!0).forEach(function(n){_defineProperty$2(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$2(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty$2(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var miniNow=_objectSpread$2(_objectSpread$2({},mini),{},{steps:[{formatAs:"now"}].concat(mini.steps)});function ownKeys$1(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread$1(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$1(Object(t),!0).forEach(function(n){_defineProperty$1(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$1(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty$1(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var miniMinute=_objectSpread$1(_objectSpread$1({},mini),{},{steps:mini.steps.filter(function(A){return A.formatAs!=="second"})});function ownKeys(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(A);e&&(n=n.filter(function(i){return Object.getOwnPropertyDescriptor(A,i).enumerable})),t.push.apply(t,n)}return t}function _objectSpread(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys(Object(t),!0).forEach(function(n){_defineProperty(A,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(n){Object.defineProperty(A,n,Object.getOwnPropertyDescriptor(t,n))})}return A}function _defineProperty(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var miniMinuteNow=_objectSpread(_objectSpread({},miniMinute),{},{steps:[{formatAs:"now"}].concat(miniMinute.steps)});function getStyleByName(A){switch(A){case"default":case"round":return round;case"round-minute":return defaultStyle;case"approximate":return approximate;case"time":case"approximate-time":return approximateTime;case"mini":return mini;case"mini-now":return miniNow;case"mini-minute":return miniMinute;case"mini-minute-now":return miniMinuteNow;case"twitter":return twitter;case"twitter-now":return twitterNow;case"twitter-minute":return twitterMinute;case"twitter-minute-now":return twitterMinuteNow;case"twitter-first-minute":return twitterFirstMinute;default:return approximate}}function _typeof(A){return _typeof=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(A)}function _createForOfIteratorHelperLoose(A,e){var t=typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t)return(t=t.call(A)).next.bind(t);if(Array.isArray(A)||(t=_unsupportedIterableToArray(A))||e&&A&&typeof A.length=="number"){t&&(A=t);var n=0;return function(){return n>=A.length?{done:!0}:{done:!1,value:A[n++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _slicedToArray(A,e){return _arrayWithHoles(A)||_iterableToArrayLimit(A,e)||_unsupportedIterableToArray(A,e)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray(A,e){if(!!A){if(typeof A=="string")return _arrayLikeToArray(A,e);var t=Object.prototype.toString.call(A).slice(8,-1);if(t==="Object"&&A.constructor&&(t=A.constructor.name),t==="Map"||t==="Set")return Array.from(A);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(A,e)}}function _arrayLikeToArray(A,e){(e==null||e>A.length)&&(e=A.length);for(var t=0,n=new Array(e);t<e;t++)n[t]=A[t];return n}function _iterableToArrayLimit(A,e){var t=A==null?null:typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t!=null){var n=[],i=!0,o=!1,r,a;try{for(t=t.call(A);!(i=(r=t.next()).done)&&(n.push(r.value),!(e&&n.length===e));i=!0);}catch(g){o=!0,a=g}finally{try{!i&&t.return!=null&&t.return()}finally{if(o)throw a}}return n}}function _arrayWithHoles(A){if(Array.isArray(A))return A}function _classCallCheck(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(A,e){for(var t=0;t<e.length;t++){var n=e[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(A,n.key,n)}}function _createClass(A,e,t){return e&&_defineProperties(A.prototype,e),t&&_defineProperties(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var TimeAgo=function(){function A(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=t.polyfill;_classCallCheck(this,A),typeof e=="string"&&(e=[e]),this.locale=chooseLocale(e.concat(A.getDefaultLocale()),getLocaleData),typeof Intl<"u"&&Intl.NumberFormat&&(this.numberFormat=new Intl.NumberFormat(this.locale)),n===!1?(this.IntlRelativeTimeFormat=Intl.RelativeTimeFormat,this.IntlPluralRules=Intl.PluralRules):(this.IntlRelativeTimeFormat=RelativeTimeFormat,this.IntlPluralRules=RelativeTimeFormat.PluralRules),this.relativeTimeFormatCache=new Cache,this.pluralRulesCache=new Cache}return _createClass(A,[{key:"format",value:function(t,n,i){i||(n&&!isStyle(n)?(i=n,n=void 0):i={}),n||(n=defaultStyle),typeof n=="string"&&(n=getStyleByName(n));var o=getTimestamp(t),r=this.getLabels(n.flavour||n.labels),a=r.labels,g=r.labelsType,I;n.now!==void 0&&(I=n.now),I===void 0&&i.now!==void 0&&(I=i.now),I===void 0&&(I=Date.now());var s=(I-o)/1e3,c=i.future||s<0,B=getNowLabel(a,getLocaleData(this.locale).now,getLocaleData(this.locale).long,c);if(n.custom){var d=n.custom({now:I,date:new Date(o),time:o,elapsed:s,locale:this.locale});if(d!==void 0)return d}var l=getTimeIntervalMeasurementUnits(n.units,a,B),E=i.round||n.round,C=getStep(n.gradation||n.steps||defaultStyle.steps,s,{now:I,units:l,round:E,future:c,getNextStep:!0}),f=_slicedToArray(C,3),u=f[0],p=f[1],y=f[2],D=this.formatDateForStep(o,p,s,{labels:a,labelsType:g,nowLabel:B,now:I,future:c,round:E})||"";if(i.getTimeToNextUpdate){var F=getTimeToNextUpdate(o,p,{nextStep:y,prevStep:u,now:I,future:c,round:E});return[D,F]}return D}},{key:"formatDateForStep",value:function(t,n,i,o){var r=this,a=o.labels,g=o.labelsType,I=o.nowLabel,s=o.now,c=o.future,B=o.round;if(!!n){if(n.format)return n.format(t,this.locale,{formatAs:function(f,u){return r.formatValue(u,f,{labels:a,future:c})},now:s,future:c});var d=n.unit||n.formatAs;if(!d)throw new Error("[javascript-time-ago] Each step must define either `formatAs` or `format()`. Step: ".concat(JSON.stringify(n)));if(d==="now")return I;var l=Math.abs(i)/getStepDenominator(n);n.granularity&&(l=getRoundFunction(B)(l/n.granularity)*n.granularity);var E=-1*Math.sign(i)*getRoundFunction(B)(l);switch(E===0&&(c?E=0:E=-0),g){case"long":case"short":case"narrow":return this.getFormatter(g).format(E,d);default:return this.formatValue(E,d,{labels:a,future:c})}}}},{key:"formatValue",value:function(t,n,i){var o=i.labels,r=i.future;return this.getFormattingRule(o,n,t,{future:r}).replace("{0}",this.formatNumber(Math.abs(t)))}},{key:"getFormattingRule",value:function(t,n,i,o){var r=o.future;if(this.locale,t=t[n],typeof t=="string")return t;var a=i===0?r?"future":"past":i<0?"past":"future",g=t[a]||t;if(typeof g=="string")return g;var I=this.getPluralRules().select(Math.abs(i));return g[I]||g.other}},{key:"formatNumber",value:function(t){return this.numberFormat?this.numberFormat.format(t):String(t)}},{key:"getFormatter",value:function(t){return this.relativeTimeFormatCache.get(this.locale,t)||this.relativeTimeFormatCache.put(this.locale,t,new this.IntlRelativeTimeFormat(this.locale,{style:t}))}},{key:"getPluralRules",value:function(){return this.pluralRulesCache.get(this.locale)||this.pluralRulesCache.put(this.locale,new this.IntlPluralRules(this.locale))}},{key:"getLabels",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];typeof t=="string"&&(t=[t]),t=t.map(function(a){switch(a){case"tiny":case"mini-time":return"mini";default:return a}}),t=t.concat("long");for(var n=getLocaleData(this.locale),i=_createForOfIteratorHelperLoose(t),o;!(o=i()).done;){var r=o.value;if(n[r])return{labelsType:r,labels:n[r]}}}}]),A}(),defaultLocale="en";TimeAgo.getDefaultLocale=function(){return defaultLocale};TimeAgo.setDefaultLocale=function(A){return defaultLocale=A};TimeAgo.addDefaultLocale=function(A){if(defaultLocaleHasBeenSpecified)return console.error("[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.");defaultLocaleHasBeenSpecified=!0,TimeAgo.setDefaultLocale(A.locale),TimeAgo.addLocale(A)};var defaultLocaleHasBeenSpecified;TimeAgo.addLocale=function(A){addLocaleData(A),RelativeTimeFormat.addLocale(A)};TimeAgo.locale=TimeAgo.addLocale;TimeAgo.addLabels=function(A,e,t){var n=getLocaleData(A);n||(addLocaleData({locale:A}),n=getLocaleData(A)),n[e]=t};function getTimestamp(A){if(A.constructor===Date||isMockedDate(A))return A.getTime();if(typeof A=="number")return A;throw new Error("Unsupported relative time formatter input: ".concat(_typeof(A),", ").concat(A))}function isMockedDate(A){return _typeof(A)==="object"&&typeof A.getTime=="function"}function getTimeIntervalMeasurementUnits(A,e,t){var n=Object.keys(e);return t&&n.push("now"),A&&(n=A.filter(function(i){return i==="now"||n.indexOf(i)>=0})),n}function getNowLabel(A,e,t,n){var i=A.now||e&&e.now;if(i)return typeof i=="string"?i:n?i.future:i.past;if(t&&t.second&&t.second.current)return t.second.current}function isStyle(A){return typeof A=="string"||isStyleObject(A)}var english_locale={locale:"en",long:{year:{previous:"last year",current:"this year",next:"next year",past:{one:"{0} year ago",other:"{0} years ago"},future:{one:"in {0} year",other:"in {0} years"}},quarter:{previous:"last quarter",current:"this quarter",next:"next quarter",past:{one:"{0} quarter ago",other:"{0} quarters ago"},future:{one:"in {0} quarter",other:"in {0} quarters"}},month:{previous:"last month",current:"this month",next:"next month",past:{one:"{0} month ago",other:"{0} months ago"},future:{one:"in {0} month",other:"in {0} months"}},week:{previous:"last week",current:"this week",next:"next week",past:{one:"{0} week ago",other:"{0} weeks ago"},future:{one:"in {0} week",other:"in {0} weeks"}},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:{one:"{0} hour ago",other:"{0} hours ago"},future:{one:"in {0} hour",other:"in {0} hours"}},minute:{current:"this minute",past:{one:"{0} minute ago",other:"{0} minutes ago"},future:{one:"in {0} minute",other:"in {0} minutes"}},second:{current:"now",past:{one:"{0} second ago",other:"{0} seconds ago"},future:{one:"in {0} second",other:"in {0} seconds"}}},short:{year:{previous:"last yr.",current:"this yr.",next:"next yr.",past:"{0} yr. ago",future:"in {0} yr."},quarter:{previous:"last qtr.",current:"this qtr.",next:"next qtr.",past:{one:"{0} qtr. ago",other:"{0} qtrs. ago"},future:{one:"in {0} qtr.",other:"in {0} qtrs."}},month:{previous:"last mo.",current:"this mo.",next:"next mo.",past:"{0} mo. ago",future:"in {0} mo."},week:{previous:"last wk.",current:"this wk.",next:"next wk.",past:"{0} wk. ago",future:"in {0} wk."},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:"{0} hr. ago",future:"in {0} hr."},minute:{current:"this minute",past:"{0} min. ago",future:"in {0} min."},second:{current:"now",past:"{0} sec. ago",future:"in {0} sec."}},narrow:{year:{previous:"last yr.",current:"this yr.",next:"next yr.",past:"{0} yr. ago",future:"in {0} yr."},quarter:{previous:"last qtr.",current:"this qtr.",next:"next qtr.",past:{one:"{0} qtr. ago",other:"{0} qtrs. ago"},future:{one:"in {0} qtr.",other:"in {0} qtrs."}},month:{previous:"last mo.",current:"this mo.",next:"next mo.",past:"{0} mo. ago",future:"in {0} mo."},week:{previous:"last wk.",current:"this wk.",next:"next wk.",past:"{0} wk. ago",future:"in {0} wk."},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:"{0} hr. ago",future:"in {0} hr."},minute:{current:"this minute",past:"{0} min. ago",future:"in {0} min."},second:{current:"now",past:"{0} sec. ago",future:"in {0} sec."}},now:{now:{current:"now",future:"in a moment",past:"just now"}},mini:{year:"{0}yr",month:"{0}mo",week:"{0}wk",day:"{0}d",hour:"{0}h",minute:"{0}m",second:"{0}s",now:"now"},"short-time":{year:"{0} yr.",month:"{0} mo.",week:"{0} wk.",day:{one:"{0} day",other:"{0} days"},hour:"{0} hr.",minute:"{0} min.",second:"{0} sec."},"long-time":{year:{one:"{0} year",other:"{0} years"},month:{one:"{0} month",other:"{0} months"},week:{one:"{0} week",other:"{0} weeks"},day:{one:"{0} day",other:"{0} days"},hour:{one:"{0} hour",other:"{0} hours"},minute:{one:"{0} minute",other:"{0} minutes"},second:{one:"{0} second",other:"{0} seconds"}}},SX_ACC_CREATED=`<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12 6H18V8H12V6Z" fill="#F7F7F7"/>
<path d="M14 10L14 4L16 4L16 10L14 10Z" fill="#F7F7F7"/>
<circle cx="7" cy="5" r="2" stroke="#F7F7F7" stroke-width="2"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M1 15C1.47608 12.1623 3.94405 10 6.91704 10C9.89004 10 12.358 12.1623 12.8341 15H10.791C10.347 13.2748 8.78088 12 6.91704 12C5.0532 12 3.4871 13.2748 3.04306 15H1Z" fill="#F7F7F7"/>
</svg>
`;function get_each_context$1(A,e,t){const n=A.slice();return n[9]=e[t],n}function get_each_context_1(A,e,t){const n=A.slice();return n[15]=e[t],n}function create_if_block_4(A){let e,t,n,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_2,then:create_then_block_2,catch:create_catch_block_2,value:14};return handle_promise(t=A[9].value,i),{c(){e=element("div"),i.block.c(),n=space(),attr(e,"class","links")},m(o,r){insert(o,e,r),i.block.m(e,i.anchor=null),i.mount=()=>e,i.anchor=n,append(e,n)},p(o,r){A=o,i.ctx=A,r&2&&t!==(t=A[9].value)&&handle_promise(t,i)||update_await_block_branch(i,A,r)},i:noop$1,o:noop$1,d(o){o&&detach(e),i.block.d(),i.token=null,i=null}}}function create_if_block_2$1(A){let e,t,n,i,o;const r=[create_if_block_3,create_else_block_1],a=[];function g(I,s){return s&2&&(e=null),e==null&&(e=!!I[9].value?.startsWith("\u{1F512}1")),e?0:1}return t=g(A,-1),n=a[t]=r[t](A),{c(){n.c(),i=empty()},m(I,s){a[t].m(I,s),insert(I,i,s),o=!0},p(I,s){let c=t;t=g(I,s),t===c?a[t].p(I,s):(group_outros(),transition_out(a[c],1,1,()=>{a[c]=null}),check_outros(),n=a[t],n?n.p(I,s):(n=a[t]=r[t](I),n.c()),transition_in(n,1),n.m(i.parentNode,i))},i(I){o||(transition_in(n),o=!0)},o(I){transition_out(n),o=!1},d(I){a[t].d(I),I&&detach(i)}}}function create_if_block$1(A){let e,t;return e=new Field({props:{short:!0,key:A[9].key.toLowerCase(),name:A[9].key,$$slots:{default:[create_default_slot_1]},$$scope:{ctx:A}}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,i){const o={};i&2&&(o.key=n[9].key.toLowerCase()),i&2&&(o.name=n[9].key),i&262146&&(o.$$scope={dirty:i,ctx:n}),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_catch_block_2(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block_2(A){let e,t=A[14],n=[];for(let i=0;i<t.length;i+=1)n[i]=create_each_block_1(get_each_context_1(A,t,i));return{c(){for(let i=0;i<n.length;i+=1)n[i].c();e=empty()},m(i,o){for(let r=0;r<n.length;r+=1)n[r].m(i,o);insert(i,e,o)},p(i,o){if(o&2){t=i[14];let r;for(r=0;r<t.length;r+=1){const a=get_each_context_1(i,t,r);n[r]?n[r].p(a,o):(n[r]=create_each_block_1(a),n[r].c(),n[r].m(e.parentNode,e))}for(;r<n.length;r+=1)n[r].d(1);n.length=t.length}},d(i){destroy_each(n,i),i&&detach(e)}}}function create_each_block_1(A){let e,t=A[15].text+"",n,i,o,r;function a(){return A[5](A[15])}return{c(){e=element("span"),n=text(t),i=space(),attr(e,"class","link")},m(g,I){insert(g,e,I),append(e,n),append(e,i),o||(r=listen(e,"click",a),o=!0)},p(g,I){A=g,I&2&&t!==(t=A[15].text+"")&&set_data(n,t)},d(g){g&&detach(e),o=!1,r()}}}function create_pending_block_2(A){let e;return{c(){e=text("Loading...")},m(t,n){insert(t,e,n)},p:noop$1,d(t){t&&detach(e)}}}function create_else_block_1(A){let e,t;return e=new MemoReview({props:{memoPlaintext:A[9].value||""}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,i){const o={};i&2&&(o.memoPlaintext=n[9].value||""),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_if_block_3(A){let e,t,n,i={ctx:A,current:null,token:null,hasCatch:!0,pending:create_pending_block_1,then:create_then_block_1,catch:create_catch_block_1,value:13,blocks:[,,,]};return handle_promise(t=A[3](A[9].value),i),{c(){e=empty(),i.block.c()},m(o,r){insert(o,e,r),i.block.m(o,i.anchor=r),i.mount=()=>e.parentNode,i.anchor=e,n=!0},p(o,r){A=o,i.ctx=A,r&2&&t!==(t=A[3](A[9].value))&&handle_promise(t,i)||update_await_block_branch(i,A,r)},i(o){n||(transition_in(i.block),n=!0)},o(o){for(let r=0;r<3;r+=1){const a=i.blocks[r];transition_out(a)}n=!1},d(o){o&&detach(e),i.block.d(o),i.token=null,i=null}}}function create_catch_block_1(A){let e,t,n;return e=new MemoReview({props:{memoPlaintext:null,memoCiphertext:A[9].value}}),{c(){create_component(e.$$.fragment),t=space()},m(i,o){mount_component(e,i,o),insert(i,t,o),n=!0},p(i,o){const r={};o&2&&(r.memoCiphertext=i[9].value),e.$set(r)},i(i){n||(transition_in(e.$$.fragment,i),n=!0)},o(i){transition_out(e.$$.fragment,i),n=!1},d(i){destroy_component(e,i),i&&detach(t)}}}function create_then_block_1(A){let e,t,n;return e=new MemoReview({props:{memoPlaintext:A[13],memoCiphertext:A[9].value}}),{c(){create_component(e.$$.fragment),t=space()},m(i,o){mount_component(e,i,o),insert(i,t,o),n=!0},p(i,o){const r={};o&2&&(r.memoPlaintext=i[13]),o&2&&(r.memoCiphertext=i[9].value),e.$set(r)},i(i){n||(transition_in(e.$$.fragment,i),n=!0)},o(i){transition_out(e.$$.fragment,i),n=!1},d(i){destroy_component(e,i),i&&detach(t)}}}function create_pending_block_1(A){let e;return{c(){e=text(`Decrypting memo....
				`)},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_catch_block$1(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$1(A){let e,t,n,i;const o=[create_if_block_1$1,create_else_block],r=[];function a(g,I){return g[9].render==="address"?0:1}return e=a(A),t=r[e]=o[e](A),{c(){t.c(),n=empty()},m(g,I){r[e].m(g,I),insert(g,n,I),i=!0},p(g,I){let s=e;e=a(g),e===s?r[e].p(g,I):(group_outros(),transition_out(r[s],1,1,()=>{r[s]=null}),check_outros(),t=r[e],t?t.p(g,I):(t=r[e]=o[e](g),t.c()),transition_in(t,1),t.m(n.parentNode,n))},i(g){i||(transition_in(t),i=!0)},o(g){transition_out(t),i=!1},d(g){r[e].d(g),g&&detach(n)}}}function create_else_block(A){let e=A[12]+"",t;return{c(){t=text(e)},m(n,i){insert(n,t,i)},p(n,i){i&2&&e!==(e=n[12]+"")&&set_data(t,e)},i:noop$1,o:noop$1,d(n){n&&detach(t)}}}function create_if_block_1$1(A){let e,t;return e=new Address({props:{address:A[12],copyable:!0}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,i){const o={};i&2&&(o.address=n[12]),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_pending_block$1(A){let e;return{c(){e=text("Loading...")},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_default_slot_1(A){let e,t,n,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$1,then:create_then_block$1,catch:create_catch_block$1,value:12,blocks:[,,,]};return handle_promise(e=A[9].value,i),{c(){i.block.c(),t=space()},m(o,r){i.block.m(o,i.anchor=r),i.mount=()=>t.parentNode,i.anchor=t,insert(o,t,r),n=!0},p(o,r){A=o,i.ctx=A,r&2&&e!==(e=A[9].value)&&handle_promise(e,i)||update_await_block_branch(i,A,r)},i(o){n||(transition_in(i.block),n=!0)},o(o){for(let r=0;r<3;r+=1){const a=i.blocks[r];transition_out(a)}n=!1},d(o){i.block.d(o),i.token=null,i=null,o&&detach(t)}}}function create_each_block$1(A){let e,t,n,i,o,r;const a=[create_if_block$1,create_if_block_2$1,create_if_block_4],g=[];function I(s,c){return s[9].type==="key_value"?0:s[9].type==="memo"?1:s[9].type==="links"?2:-1}return~(n=I(A))&&(i=g[n]=a[n](A)),{c(){e=element("hr"),t=space(),i&&i.c(),o=empty()},m(s,c){insert(s,e,c),insert(s,t,c),~n&&g[n].m(s,c),insert(s,o,c),r=!0},p(s,c){let B=n;n=I(s),n===B?~n&&g[n].p(s,c):(i&&(group_outros(),transition_out(g[B],1,1,()=>{g[B]=null}),check_outros()),~n?(i=g[n],i?i.p(s,c):(i=g[n]=a[n](s),i.c()),transition_in(i,1),i.m(o.parentNode,o)):i=null)},i(s){r||(transition_in(i),r=!0)},o(s){transition_out(i),r=!1},d(s){s&&detach(e),s&&detach(t),~n&&g[n].d(s),s&&detach(o)}}}function create_default_slot(A){let e,t,n,i;e=new Header({props:{pops:!0,title:A[0],subtitle:A[2]}});let o=A[1],r=[];for(let g=0;g<o.length;g+=1)r[g]=create_each_block$1(get_each_context$1(A,o,g));const a=g=>transition_out(r[g],1,1,()=>{r[g]=null});return{c(){create_component(e.$$.fragment),t=space();for(let g=0;g<r.length;g+=1)r[g].c();n=empty()},m(g,I){mount_component(e,g,I),insert(g,t,I);for(let s=0;s<r.length;s+=1)r[s].m(g,I);insert(g,n,I),i=!0},p(g,I){const s={};if(I&1&&(s.title=g[0]),e.$set(s),I&10){o=g[1];let c;for(c=0;c<o.length;c+=1){const B=get_each_context$1(g,o,c);r[c]?(r[c].p(B,I),transition_in(r[c],1)):(r[c]=create_each_block$1(B),r[c].c(),transition_in(r[c],1),r[c].m(n.parentNode,n))}for(group_outros(),c=o.length;c<r.length;c+=1)a(c);check_outros()}},i(g){if(!i){transition_in(e.$$.fragment,g);for(let I=0;I<o.length;I+=1)transition_in(r[I]);i=!0}},o(g){transition_out(e.$$.fragment,g),r=r.filter(Boolean);for(let I=0;I<r.length;I+=1)transition_out(r[I]);i=!1},d(g){destroy_component(e,g),g&&detach(t),destroy_each(r,g),g&&detach(n)}}}function create_fragment$1(A){let e,t;return e=new Screen({props:{$$slots:{default:[create_default_slot]},$$scope:{ctx:A}}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,[i]){const o={};i&262147&&(o.$$scope={dirty:i,ctx:n}),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function instance$1(A,e,t){let{incident:n}=e;async function i(B,d){const l=R_TRANSFER_AMOUNT.exec(B);if(!l)syswarn({text:`Failed to parse transfer amount "${B}"`});else{const[,E,C]=l,f=await Chains.at(d);for(const[u,p]of ode(f.coins))if(C===p.denom){const y=new BigNumber(E).shiftedBy(-p.decimals).toNumber();return`${format_amount(y,!0)} ${u}`}}return B}const o=B=>[...typeof B.memo=="string"?[{type:"memo",value:B.memo}]:[],{type:"links",value:(async()=>{const d=await Chains.at(B.chain);return[{href:Chains.blockExplorer("transaction",{...B,chain_prefix:d.id.replace(/-.+$/,"")},d),text:"View on block explorer"}]})()}],r={tx_out:(B,d)=>{if(B.stage==="confirmed"||B.stage==="synced"){const E=B.msgs[0].events;if(E.transfer){const C=E.transfer,[f,u]=parse_coin_amount(C.amount,d);return{s_title:`Sent ${u}`,a_fields:[{type:"key_value",key:"Status",value:"Confirmed"},{type:"key_value",key:"Sender",value:C.sender,render:"address"},{type:"key_value",key:"Recipient",value:C.recipient,render:"address"},{type:"key_value",key:"Amount",value:i(C.amount,B.chain)},{type:"key_value",key:"Fee",value:`${format_amount(+B.gas_wanted)} GAS`},...o(B)]}}}return{s_title:"Pending",a_fields:[]}},tx_in:(B,d)=>{const E=B.msgs[0].events;if(E.transfer){const C=E.transfer,[f,u]=parse_coin_amount(C.amount,d);return{s_title:`Received ${u}`,a_fields:[{type:"key_value",key:"Status",value:"Confirmed"},{type:"key_value",key:"Sender",value:C.sender,render:"address"},{type:"key_value",key:"Recipient",value:C.recipient,render:"address"},{type:"key_value",key:"Amount",value:`${f}`},...o(B)]}}return{s_title:"pending",a_fields:[]}},account_created:B=>({s_title:"Created Account",a_fields:[]})};let a="",g=[];(async()=>{const B=n.data,d=B.chain?await Chains.at(B.chain):null;t(0,{s_title:a,a_fields:g}=r[n.type](B,d),a,t(1,g))})();const I=format_time(n.time);async function s(B){const{chain:d,height:l,msgs:[{events:{transfer:E}}],gas_wanted:C,signers:f}=n.data,u=f[0].sequence,{recipient:p,sender:y}=E,D=n.type==="tx_out",F=await Chains.at(d),G=await Accounts.read(),Q=D?y:p,h=D?p:y;let _;for(const[N,H]of G.entries())if(Chains.addressFor(H.pubkey,F)===Q){_=N;break}if(!_)throw new Error("Transaction is not associated with any accounts in this wallet");const b=await Networks.activateDefaultFor(F);let w;try{({pubkey:w}=await b.e2eInfoFor(h))}catch(N){throw syserr({title:"Other Account Unpublished",error:N})}const S=await ecdhNonce(u,C),k=extractMemoCiphertext(B),m=await b.ecdhDecrypt(w,k,S);return buffer_to_text(m).replace(/\0+$/,"")}const c=B=>open_external_link(B.href);return A.$$set=B=>{"incident"in B&&t(4,n=B.incident)},[a,g,I,s,n,c]}class IncidentView extends SvelteComponent{constructor(e){super(),init(this,e,instance$1,create_fragment$1,safe_not_equal,{incident:4})}}var TxnList_svelte_svelte_type_style_lang="";function get_each_context(A,e,t){const n=A.slice();return n[17]=e[t],n}const get_first_slot_changes=A=>({}),get_first_slot_context=A=>({});function create_catch_block(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block(A){let e,t;function n(){return A[6](A[17])}return e=new Row({props:{name:A[20].title,detail:A[20].subtitle,amount:A[20].amount||"",fiat:A[20].fiat||"",$$slots:{below:[create_below_slot],right:[create_right_slot],icon:[create_icon_slot]},$$scope:{ctx:A}}}),e.$on("click",n),{c(){create_component(e.$$.fragment)},m(i,o){mount_component(e,i,o),t=!0},p(i,o){A=i;const r={};o&1&&(r.name=A[20].title),o&1&&(r.detail=A[20].subtitle),o&1&&(r.amount=A[20].amount||""),o&1&&(r.fiat=A[20].fiat||""),o&129&&(r.$$scope={dirty:o,ctx:A}),e.$set(r)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_icon_slot(A){let e,t;return e=new Put({props:{element:A[20].icon}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,i){const o={};i&1&&(o.element=n[20].icon),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_if_block_2(A){let e,t;return e=new PfpDisplay({props:{dim:36,name:A[20].name,ref:A[20].pfp,circular:A[17].type==="pending",rootStyle:"margin-left: 1em;"}}),{c(){create_component(e.$$.fragment)},m(n,i){mount_component(e,n,i),t=!0},p(n,i){const o={};i&1&&(o.name=n[20].name),i&1&&(o.ref=n[20].pfp),i&1&&(o.circular=n[17].type==="pending"),e.$set(o)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_right_slot(A){let e,t,n=typeof A[20].pfp=="string"&&create_if_block_2(A);return{c(){n&&n.c(),e=empty()},m(i,o){n&&n.m(i,o),insert(i,e,o),t=!0},p(i,o){typeof i[20].pfp=="string"?n?(n.p(i,o),o&1&&transition_in(n,1)):(n=create_if_block_2(i),n.c(),transition_in(n,1),n.m(e.parentNode,e)):n&&(group_outros(),transition_out(n,1,1,()=>{n=null}),check_outros())},i(i){t||(transition_in(n),t=!0)},o(i){transition_out(n),t=!1},d(i){n&&n.d(i),i&&detach(e)}}}function create_if_block_1(A){let e;return{c(){e=element("span"),e.textContent="Pending",attr(e,"class","pill svelte-krovk1"),toggle_class(e,"display_none",!A[20].pending)},m(t,n){insert(t,e,n)},p(t,n){n&5&&toggle_class(e,"display_none",!t[20].pending)},d(t){t&&detach(e)}}}function create_if_block(A){let e,t,n=A[20].link.text+"",i,o,r,a;function g(){return A[5](A[20])}return{c(){e=element("span"),t=element("a"),i=text(n),attr(t,"href",o=A[20].link.href),attr(e,"class","link")},m(I,s){insert(I,e,s),append(e,t),append(t,i),r||(a=listen(t,"click",g),r=!0)},p(I,s){A=I,s&1&&n!==(n=A[20].link.text+"")&&set_data(i,n),s&1&&o!==(o=A[20].link.href)&&attr(t,"href",o)},d(I){I&&detach(e),r=!1,a()}}}function create_below_slot(A){let e,t,n=A[20].pending&&create_if_block_1(A),i=A[20].link&&create_if_block(A);return{c(){n&&n.c(),e=space(),i&&i.c(),t=empty()},m(o,r){n&&n.m(o,r),insert(o,e,r),i&&i.m(o,r),insert(o,t,r)},p(o,r){o[20].pending?n?n.p(o,r):(n=create_if_block_1(o),n.c(),n.m(e.parentNode,e)):n&&(n.d(1),n=null),o[20].link?i?i.p(o,r):(i=create_if_block(o),i.c(),i.m(t.parentNode,t)):i&&(i.d(1),i=null)},d(o){n&&n.d(o),o&&detach(e),i&&i.d(o),o&&detach(t)}}}function create_pending_block(A){let e;return{c(){e=text("Loading event...")},m(t,n){insert(t,e,n)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_each_block(A){let e,t,n,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block,then:create_then_block,catch:create_catch_block,value:20,blocks:[,,,]};return handle_promise(e=A[2](A[17]),i),{c(){i.block.c(),t=space()},m(o,r){i.block.m(o,i.anchor=r),i.mount=()=>t.parentNode,i.anchor=t,insert(o,t,r),n=!0},p(o,r){A=o,i.ctx=A,r&1&&e!==(e=A[2](A[17]))&&handle_promise(e,i)||update_await_block_branch(i,A,r)},i(o){n||(transition_in(i.block),n=!0)},o(o){for(let r=0;r<3;r+=1){const a=i.blocks[r];transition_out(a)}n=!1},d(o){i.block.d(o),i.token=null,i=null,o&&detach(t)}}}function create_fragment(A){let e,t,n;const i=A[4].first,o=create_slot(i,A,A[7],get_first_slot_context);let r=A[0],a=[];for(let I=0;I<r.length;I+=1)a[I]=create_each_block(get_each_context(A,r,I));const g=I=>transition_out(a[I],1,1,()=>{a[I]=null});return{c(){e=element("div"),o&&o.c(),t=space();for(let I=0;I<a.length;I+=1)a[I].c();attr(e,"class","txns no-margin")},m(I,s){insert(I,e,s),o&&o.m(e,null),append(e,t);for(let c=0;c<a.length;c+=1)a[c].m(e,null);n=!0},p(I,[s]){if(o&&o.p&&(!n||s&128)&&update_slot_base(o,i,I,I[7],n?get_slot_changes(i,I[7],s,get_first_slot_changes):get_all_dirty_from_scope(I[7]),get_first_slot_context),s&7){r=I[0];let c;for(c=0;c<r.length;c+=1){const B=get_each_context(I,r,c);a[c]?(a[c].p(B,s),transition_in(a[c],1)):(a[c]=create_each_block(B),a[c].c(),transition_in(a[c],1),a[c].m(e,null))}for(group_outros(),c=r.length;c<a.length;c+=1)g(c);check_outros()}},i(I){if(!n){transition_in(o,I);for(let s=0;s<r.length;s+=1)transition_in(a[s]);n=!0}},o(I){transition_out(o,I),a=a.filter(Boolean);for(let s=0;s<a.length;s+=1)transition_out(a[s]);n=!1},d(I){I&&detach(e),o&&o.d(I),destroy_each(a,I)}}}var TxnContext;(function(A){A.NONE="none",A.TOKEN="token",A.CONTACT="contact"})(TxnContext||(TxnContext={}));function instance(A,e,t){let{$$slots:n={},$$scope:i}=e,{incidents:o}=e,{context:r=TxnContext.NONE}=e;TxnContext.CONTACT,TxnContext.TOKEN;const a=getContext("page"),g=E=>{const C=dd("span",{class:"event-icon"});return C.innerHTML=E,C};g(SX_SEND),g(SX_RECV),g(SX_ACC_CREATED),TimeAgo.addDefaultLocale(english_locale);const I=new TimeAgo("en-US");function s(E){return I.format(E,"twitter")}const c={async tx_out(E){const{time:C,data:f,data:{chain:u,stage:p,hash:y}}=E,D=await Chains.at(u);if(p==="confirmed"||p==="synced"){const{msgs:Q,code:h}=f;if(Q.length===1){const{events:_}=Q[0];if(_.transfer){const b=_.transfer,[w,S,k]=parse_coin_amount(b.amount,D),m=new BigNumber(w+"").shiftedBy(-k.decimals).toNumber(),N=b.recipient,H=Agents.pathForContact(N),M=await Agents.getContact(H);return{title:`Sent ${k.name}`,name:S,icon:g(SX_SEND),subtitle:`${s(C)} / ${M?M.name:abbreviate_addr(N)}`,amount:`${format_amount(m,!0)} ${S}`,pfp:k.pfp}}}}return{title:"Outgoing Transaction",name:"",icon:g(SX_SEND)}},async tx_in(E){const{time:C,data:f,data:{chain:u,stage:p,hash:y,msgs:D,code:F}}=E,G=await Chains.at(u);if(D.length===1){const{events:Q}=D[0];if(Q.transfer){const h=Q.transfer,[_,b,w]=parse_coin_amount(h.amount,G),S=new BigNumber(_+"").shiftedBy(-w.decimals).toNumber(),k=h.recipient,m=Agents.pathForContact(k),N=await Agents.getContact(m);return{title:`Received ${w.name}`,name:b,icon:g(SX_RECV),subtitle:`${s(C)} / ${N?N.name:abbreviate_addr(h.sender)}`,amount:`${format_amount(S,!0)} ${b}`,pfp:w.pfp}}}return{title:"Incoming Transaction",name:"",icon:g(SX_RECV)}},async account_created(E){const{time:C,data:{account:f}}=E,u=await Accounts.at(f);return{title:"Account created",subtitle:`${s(C)} / ${u.name}`,name:u.name,icon:g(SX_ACC_CREATED),pfp:u.pfp||""}}};async function B(E){return await c[E.type](E)}const d=E=>open_external_link(E.link.href),l=E=>{a.push({creator:IncidentView,props:{incident:E}})};return A.$$set=E=>{"incidents"in E&&t(0,o=E.incidents),"context"in E&&t(3,r=E.context),"$$scope"in E&&t(7,i=E.$$scope)},[o,a,B,r,n,d,l,i]}class TxnList extends SvelteComponent{constructor(e){super(),init(this,e,instance,create_fragment,safe_not_equal,{incidents:0,context:3})}}function writableSync(A){const e=writable(A);return Object.assign(Object.create(e),{set(t){return A=t,e.set(t)},get(){return A}})}function derivedSync(A,e){if(Array.isArray(A))return Object.assign(Object.create(derived(A,e)),{get(){return e(...A)}});{let t;const n=derived(A,(i,o)=>{e(i,r=>{t=r,o(r)})});return Object.assign(Object.create(n),{get(){return t}})}}const yw_navigator=writableSync(null),yw_chain_ref=writableSync(""),yw_chain=derivedSync(yw_chain_ref,(A,e)=>{Chains.read().then(t=>e(t.at(A))).catch(t=>{e(null)}),Networks.read().then(t=>t.entries().some(([n,i])=>A===i.chain?(yw_network_ref.set(n),!0):!1)).catch(t=>{yw_network_ref.set("")})}),yw_network_ref=writableSync(""),yw_network=writableSync(null),yw_network_active=derivedSync(yw_network_ref,(A,e)=>{A?(async()=>{const n=(await Networks.read()).at(A);yw_network.set(n),n.chain!==yw_chain_ref.get()&&yw_chain_ref.set(n.chain);const o=(await Chains.read()).at(n.chain);e(Networks.activate(n,o))})():(yw_network.set(null),e(null))}),yw_family=writableSync("");yw_chain.subscribe(A=>yw_family.set(A?.family||""));const yw_account_ref=writableSync(""),yw_account=derivedSync(yw_account_ref,(A,e)=>{Accounts.read().then(t=>e(t.at(A))).catch(t=>{e(null)})}),yw_owner=derived([yw_account,yw_chain],([A,e],t)=>{t(Chains.addressFor(A.pubkey,e))}),yw_menu_vendor=writableSync(!1),yw_overlay_account=writableSync(!1),yw_overlay_network=writableSync(!1),store_cache=A=>writableSync(null);async function reload(A){switch(A){case SI_STORE_MEDIA:{const e=await Medias.read();yw_store_medias.update(()=>e);break}case SI_STORE_TAGS:{const e=await Tags.read();yw_store_tags.update(()=>e)}}}const yw_store_medias=store_cache(),yw_store_tags=store_cache();global_receive({updateStore({key:A}){reload(A)}});async function initialize_caches(){await Promise.all([reload(SI_STORE_MEDIA),reload(SI_STORE_TAGS)])}const yw_page=writableSync(null),yw_thread=writableSync(null),yw_path=writableSync("");derivedSync(yw_path,A=>`s2r://root/${A}`);writableSync("");const yw_notifications=writableSync([]),yw_nav_collapsed=writable(!1),yw_nav_visible=writableSync(!1),yw_progress=writableSync([0,0]),yw_search=writable(""),yw_cancel_search=writableSync(F_NOOP);writableSync(null);writableSync(0);writableSync([]);const yw_header_props=writableSync({});writableSync(null);const yw_menu_expanded=writableSync(!1),yw_overscroll_pct=writableSync(0),yw_context_popup=writableSync(null),yw_popup=writableSync(null);function popup_receive(A){yw_context_popup.set({account:A}),yw_popup.set(PopupReceive)}const yw_blur=writableSync(!1);once_store_updates(yw_navigator).then(()=>{const A=document.documentElement.style;window.addEventListener("resize",()=>{A.setProperty("--app-window-width",`${window.innerWidth}px`),A.setProperty("--app-window-height",`${window.innerHeight}px`)}),window.dispatchEvent(new Event("resize")),window.addEventListener("keydown",e=>{e.key==="Escape"&&yw_popup.get()&&yw_popup.set(null)})});const $_EXISTING=Symbol("use-existing-cache"),H_REGISTRY={[P_PUBLIC_SUFFIX_LIST]:{format:"text",parse(A){if(!A)return $_EXISTING;const e=[];for(let t of A.split(/\n/g))t=t.replace(/\s+|\/\/.*$/,""),t&&e.push(t);return e}},[P_STARSHELL_DECREES]:{format:"json",filter(A){return A.filter(e=>!0)}}};async function cache_put(A,e){return await chrome.storage.local.set({[`@cache:${A}`]:e})}async function cache_get(A){return await storage_get(`@cache:${A}`)}class WebResourceCache{static async updateAll(){for(const e in H_REGISTRY){const t=H_REGISTRY[e],n=await fetch(e);switch(t.format){case"text":{const i=await n.text(),o=t.parse(i);if($_EXISTING===o)continue;await cache_put(e,{etag:n.headers.get("etag")??"",data:i});break}case"json":{let i=await n.json();"filter"in t&&(i=t.filter(i)),await cache_put(e,{etag:n.headers.get("etag")??"",data:i});break}}}}static async get(e){return(await cache_get(e))?.data||null}}export{acceptable as $,ActionsLine as A,SI_VERSION as B,CheckboxField as C,StarShellLogo as D,open_external_link as E,qs as F,global_receive as G,Header as H,Incidents as I,initialize_caches as J,yw_navigator as K,ode as L,register as M,login as N,F_NOOP as O,P_STARSHELL_DECREES as P,set_style as Q,toggle_class as R,SvelteComponent as S,append as T,destroy_each as U,Vault as V,WebResourceCache as W,XT_SECONDS as X,set_data as Y,src_url_equal as Z,getContext as _,Screen as a,UnpublishedAccountError as a$,Field as a0,NL_PASSPHRASE_MINIMUM as a1,NL_PASSPHRASE_MAXIMUM as a2,ATU8_DUMMY_PHRASE as a3,ATU8_DUMMY_VECTOR as a4,AlreadyRegisteredError as a5,InvalidPassphraseError as a6,empty as a7,set_input_value as a8,listen as a9,Select as aA,yw_network_ref as aB,text_to_buffer as aC,NB_MAX_MEMO as aD,syserr as aE,ecdhNonce as aF,compileMemoPlaintext as aG,base93_to_buffer as aH,buffer_to_text as aI,MemoReview as aJ,format_fiat as aK,createEventDispatcher as aL,Settings as aM,create_slot as aN,update_slot_base as aO,get_all_dirty_from_scope as aP,get_slot_changes as aQ,Close as aR,Row as aS,compute_rest_props as aT,assign as aU,exclude_internal_props as aV,bubble as aW,set_attributes as aX,get_spread_update as aY,yw_account as aZ,Networks as a_,group_outros as aa,check_outros as ab,run_all as ac,add_render_callback as ad,create_bidirectional_transition as ae,slide as af,handle_promise as ag,update_await_block_branch as ah,yw_owner as ai,yw_chain as aj,load_pfps as ak,Entities as al,StarSelect as am,yw_network_active as an,BigNumber as ao,XT_MINUTES as ap,CoinGecko as aq,format_amount as ar,oderac as as,yw_family as at,subscribe_store as au,onDestroy as av,Agents as aw,Chains as ax,Address as ay,PfpDisplay as az,transition_out as b,R_DOMAIN_LOCALHOST as b$,yw_chain_ref as b0,SX_ICON_DROPDOWN as b1,fold as b2,string8_to_buffer as b3,create_in_transition as b4,create_out_transition as b5,Portrait as b6,coin_formats as b7,oderom as b8,popup_receive as b9,yw_overlay_account as bA,yw_overlay_network as bB,yw_blur as bC,yw_notifications as bD,yw_nav_collapsed as bE,yw_nav_visible as bF,HtmlTag as bG,yw_search as bH,yw_header_props as bI,get_spread_object as bJ,yw_progress as bK,SX_ICON_CLOSE as bL,logout as bM,yw_network as bN,yw_menu_vendor as bO,on_error as bP,dd as bQ,objects_might_differ as bR,getAllContexts as bS,onMount as bT,tick as bU,once_store_updates as bV,timeout as bW,UnregisteredError as bX,RecoverableVaultError as bY,CorruptedVaultError as bZ,P_PUBLIC_SUFFIX_LIST as b_,as_amount as ba,forever as bb,to_fiat as bc,Info as bd,SubHeader as be,Pfps as bf,ofe as bg,ContactAgentType as bh,R_BECH32 as bi,InlineTags as bj,proper as bk,SX_ICON_EDIT$1 as bl,SX_ICON_DELETE as bm,quintOut as bn,Tabs as bo,TabList as bp,TabPanel as bq,Tab as br,Apps as bs,TxnList as bt,svg_element as bu,yw_overscroll_pct as bv,yw_popup as bw,yw_thread as bx,yw_page as by,yw_menu_expanded as bz,create_component as c,R_DOMAIN_IP as c0,session_storage_remove as c1,create_store_class as c2,SI_STORE_APP_POLICIES as c3,WritableStore as c4,session_storage_get as c5,global_broadcast as c6,fold_attrs as c7,R_TRANSFER_AMOUNT as c8,syswarn as c9,abbreviate_addr as ca,sha256_sync$1 as cb,BroadcastMode as cc,destroy_component as d,component_subscribe as e,binding_callbacks as f,bind as g,space as h,init as i,element as j,insert as k,add_flush_callback as l,mount_component as m,detach as n,Secp256k1Key as o,Secrets as p,buffer_to_string8 as q,buffer_to_base64 as r,safe_not_equal as s,transition_in as t,set_store_value as u,Accounts as v,text as w,attr as x,yw_account_ref as y,noop$1 as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
