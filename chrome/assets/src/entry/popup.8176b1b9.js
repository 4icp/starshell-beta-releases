import{A as L,S as U,H as X,T as O,d as G,a as J,b as Q,B as Y,P as Z,c as ee}from"../../PreRegister.a35181ca.js";import{S as D,i as H,s as K,a as M,c as g,m as k,t as h,b as v,d as S,e as te,H as se,C as ae,f as ne,g as re,A as F,h as y,j as C,k as f,l as oe,n as u,y as N,o as ie,p as ce,q as le,r as fe,u as ue,v as V,I as _e,w as z,x as W,z as j,W as pe,P as me,B as de,D as $e,E as be,F as we,V as B,G as A,J as ye,K as ge,L as ke,M as he,N as ve,X as Se,O as Te}from"../../web-resource-cache.df128f7e.js";import{s as Ce}from"../../index.5cb01ff5.js";function Ee(r){let e,n,t;return{c(){e=z("By checking this box, you agree to the "),n=C("a"),n.textContent="Terms and Conditions",t=z("."),W(n,"href","https://starshell.net/tac.html")},m(o,i){f(o,e,i),f(o,n,i),f(o,t,i)},p:j,d(o){o&&u(e),o&&u(n),o&&u(t)}}}function Re(r){let e,n,t,o,i,w,l,m,c,b,d,_,s;e=new se({props:{title:"Create a new wallet"}});function $(a){r[4](a)}let E={id:"",$$slots:{default:[Ee]},$$scope:{ctx:r}};return r[0]!==void 0&&(E.checked=r[0]),c=new ae({props:E}),ne.push(()=>re(c,"checked",$)),_=new F({props:{confirm:["Create new StarShell wallet",r[2],!r[0]],contd:{creator:L,props:{account:r[1]}}}}),{c(){g(e.$$.fragment),n=y(),t=C("p"),t.textContent="This software is currently in beta. Since it has not undergone security audits, importing and exporting of mnemonics and private keys is forbidden.",o=y(),i=C("p"),i.textContent="This means you will not be able to backup seed phrases, private keys, or use hardware wallets.",w=y(),l=C("p"),l.textContent="All transactions take place on a test network.",m=y(),g(c.$$.fragment),d=y(),g(_.$$.fragment)},m(a,p){k(e,a,p),f(a,n,p),f(a,t,p),f(a,o,p),f(a,i,p),f(a,w,p),f(a,l,p),f(a,m,p),k(c,a,p),f(a,d,p),k(_,a,p),s=!0},p(a,p){const R={};p&64&&(R.$$scope={dirty:p,ctx:a}),!b&&p&1&&(b=!0,R.checked=a[0],oe(()=>b=!1)),c.$set(R);const x={};p&1&&(x.confirm=["Create new StarShell wallet",a[2],!a[0]]),p&2&&(x.contd={creator:L,props:{account:a[1]}}),_.$set(x)},i(a){s||(h(e.$$.fragment,a),h(c.$$.fragment,a),h(_.$$.fragment,a),s=!0)},o(a){v(e.$$.fragment,a),v(c.$$.fragment,a),v(_.$$.fragment,a),s=!1},d(a){S(e,a),a&&u(n),a&&u(t),a&&u(o),a&&u(i),a&&u(w),a&&u(l),a&&u(m),S(c,a),a&&u(d),S(_,a)}}}function xe(r){let e,n;return e=new M({props:{$$slots:{default:[Re]},$$scope:{ctx:r}}}),{c(){g(e.$$.fragment)},m(t,o){k(e,t,o),n=!0},p(t,[o]){const i={};o&67&&(i.$$scope={dirty:o,ctx:t}),e.$set(i)},i(t){n||(h(e.$$.fragment,t),n=!0)},o(t){v(e.$$.fragment,t),n=!1},d(t){S(e,t)}}}function Ae(r,e,n){let t;te(r,N,c=>n(1,t=c));let{reset:o=!1}=e,{b_agreed:i=!1}=e;async function w(c,b,d){const _=await V.open(s=>s.put({family:"cosmos",pubkey:b,secret:c,name:"Citizen 1",pfp:d}));return await _e.record(null,{type:"account_created",time:Date.now(),data:{account:_}}),_}async function l(){const[c,b]=await ie.generatePrivateKey(!0),d=crypto.randomUUID(),_=await ce.open(async E=>E.put({type:"private_key",data:await c.access(a=>le(a)),name:"Auto-generated private key for beta",uuid:d,security:{type:"none"}})),s=b.exportPublicKey(),$=await w(_,fe(s),"");ue(N,t=$,t)}function m(c){i=c,n(0,i)}return r.$$set=c=>{"reset"in c&&n(3,o=c.reset),"b_agreed"in c&&n(0,i=c.b_agreed)},[i,t,l,o,m]}class Ie extends D{constructor(e){super(),H(this,e,Ae,xe,K,{reset:3,b_agreed:0})}}const Pe=/^([<>]=?)?(.+)$/;function Le(r,e){const[,n,t]=Pe.exec(e);return n==="<="?Ce.lte(r,t):!1}async function Oe(){const r=[],e=await pe.get(me);for(const n of e||[])if(Le(de,n.affects))switch(n.action){case"restrict":{r.push(n);break}}return r}function Ne(r){let e,n,t,o,i,w,l,m,c,b,d,_;return e=new $e({props:{dim:96}}),t=new U({}),i=new X({}),d=new F({props:{confirm:["See Instructions",r[0]]}}),{c(){g(e.$$.fragment),n=y(),g(t.$$.fragment),o=y(),g(i.$$.fragment),w=y(),l=C("div"),l.innerHTML=`<div>Please update to continue beta testing.</div> 
		<div>A new version has been released.</div>`,m=y(),c=C("p"),b=y(),g(d.$$.fragment),W(l,"class","large")},m(s,$){k(e,s,$),f(s,n,$),k(t,s,$),f(s,o,$),k(i,s,$),f(s,w,$),f(s,l,$),f(s,m,$),f(s,c,$),f(s,b,$),k(d,s,$),_=!0},p:j,i(s){_||(h(e.$$.fragment,s),h(t.$$.fragment,s),h(i.$$.fragment,s),h(d.$$.fragment,s),_=!0)},o(s){v(e.$$.fragment,s),v(t.$$.fragment,s),v(i.$$.fragment,s),v(d.$$.fragment,s),_=!1},d(s){S(e,s),s&&u(n),S(t,s),s&&u(o),S(i,s),s&&u(w),s&&u(l),s&&u(m),s&&u(c),s&&u(b),S(d,s)}}}function ze(r){let e,n;return e=new M({props:{root:!0,classNames:"restricted",$$slots:{default:[Ne]},$$scope:{ctx:r}}}),{c(){g(e.$$.fragment)},m(t,o){k(e,t,o),n=!0},p(t,[o]){const i={};o&2&&(i.$$scope={dirty:o,ctx:t}),e.$set(i)},i(t){n||(h(e.$$.fragment,t),n=!0)},o(t){v(e.$$.fragment,t),n=!1},d(t){S(e,t)}}}function Be(r){return[()=>be("https://github.com/SolarRepublic/starshell-beta-releases/blob/main/README.md#updating")]}class De extends D{constructor(e){super(),H(this,e,Be,ze,K,{})}}document.getElementById("factory-reset")?.addEventListener("click",async()=>{await chrome.storage.session.clear(),await chrome.storage.local.clear(),await T()});let I=null,q=0,P=!1;async function T(){if(P)return;if(P=!0,I)try{I.$destroy()}catch{}try{we(document.body,"main")?.remove()}catch{}let r=!1,e,n={};const t=await B.getRootKey();if((await Oe()).length)e={creator:De};else if(t){const l=A({logout(){l(),T()}});await ye();const m=await V.read();Object.keys(m.raw).length?(e={creator:Y},r=!0):(e={creator:Ie},n={completed:T})}else{const l=A({login(){l(),T()}});await B.getBase()?e={creator:ee}:e={creator:Z},n={completed:Te}}let i=!1;const w=ge.subscribe(l=>{if(!i){i=!0;return}if(l){let m=function(){clearTimeout(b),b=setTimeout(()=>{c.sendMessage({type:"wake"}),console.warn("Waking idle service worker")},2e3)};w(),r?l.activateThread(O.TOKENS):l.activateThread(O.INIT);try{G.style.display="none"}catch{}const c=chrome.runtime;let b=0;A({heartbeat(){m()}}),r&&m()}});I=new J({target:document.body,props:{mode:"app",page:e},context:new Map(ke(n))}),clearTimeout(q),P=!1}if(location.hostname==="localhost")Object.fromEntries(new URLSearchParams(location.search.slice(1)).entries()).autoskip?(console.log("Autoskipping registration"),(async()=>(localStorage.clear(),await he("     "),await ve("     "),T()))()):T();else{q=globalThis.setTimeout(()=>{Q("Fatal time out, likely caused by an uncaught error.")},15*Se);try{T()}catch(r){debugger;console.error(r)}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
