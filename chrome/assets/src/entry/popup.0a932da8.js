import{S as H,H as W,A as P,a as X,b as G,c as J,T as L,d as Q,e as Y,f as Z,B as ee,P as te,g as se}from"../../PreRegister.f232630b.js";import{S as K,i as N,s as F,c as g,m as k,t as h,a as v,d as S,b as ae,C as ne,e as re,f as oe,A as M,g as y,h as C,j as f,k as ie,l as u,y as O,n as ce,o as le,p as fe,q as ue,r as _e,u as V,E as pe,v as z,w as j,x as q,W as me,P as de,z as $e,B as be,D as we,V as B,F as D,G as ye,H as ge,I as ke,J as he,K as ve,X as Se,L as Ee}from"../../web-resource-cache.30415cb3.js";import{s as Ce}from"../../index.5cb01ff5.js";function Te(r){let e,n,t;return{c(){e=z("By checking this box, you agree to the "),n=C("a"),n.textContent="Terms and Conditions",t=z("."),j(n,"href","https://starshell.net/tac.html")},m(o,i){f(o,e,i),f(o,n,i),f(o,t,i)},p:q,d(o){o&&u(e),o&&u(n),o&&u(t)}}}function Re(r){let e,n,t,o,i,b,l,$,c,w,d,_,s;e=new W({props:{title:"Create a new wallet"}});function m(a){r[4](a)}let T={id:"",$$slots:{default:[Te]},$$scope:{ctx:r}};return r[0]!==void 0&&(T.checked=r[0]),c=new ne({props:T}),re.push(()=>oe(c,"checked",m)),_=new M({props:{confirm:["Create new StarShell wallet",r[2],!r[0]],contd:{creator:P,props:{account:r[1]}}}}),{c(){g(e.$$.fragment),n=y(),t=C("p"),t.textContent="This software is currently in beta. Since it has not undergone security audits, importing and exporting of mnemonics and private keys is forbidden.",o=y(),i=C("p"),i.textContent="This means you will not be able to backup seed phrases, private keys, or use hardware wallets.",b=y(),l=C("p"),l.textContent="All transactions take place on a test network.",$=y(),g(c.$$.fragment),d=y(),g(_.$$.fragment)},m(a,p){k(e,a,p),f(a,n,p),f(a,t,p),f(a,o,p),f(a,i,p),f(a,b,p),f(a,l,p),f(a,$,p),k(c,a,p),f(a,d,p),k(_,a,p),s=!0},p(a,p){const R={};p&64&&(R.$$scope={dirty:p,ctx:a}),!w&&p&1&&(w=!0,R.checked=a[0],ie(()=>w=!1)),c.$set(R);const x={};p&1&&(x.confirm=["Create new StarShell wallet",a[2],!a[0]]),p&2&&(x.contd={creator:P,props:{account:a[1]}}),_.$set(x)},i(a){s||(h(e.$$.fragment,a),h(c.$$.fragment,a),h(_.$$.fragment,a),s=!0)},o(a){v(e.$$.fragment,a),v(c.$$.fragment,a),v(_.$$.fragment,a),s=!1},d(a){S(e,a),a&&u(n),a&&u(t),a&&u(o),a&&u(i),a&&u(b),a&&u(l),a&&u($),S(c,a),a&&u(d),S(_,a)}}}function xe(r){let e,n;return e=new H({props:{$$slots:{default:[Re]},$$scope:{ctx:r}}}),{c(){g(e.$$.fragment)},m(t,o){k(e,t,o),n=!0},p(t,[o]){const i={};o&67&&(i.$$scope={dirty:o,ctx:t}),e.$set(i)},i(t){n||(h(e.$$.fragment,t),n=!0)},o(t){v(e.$$.fragment,t),n=!1},d(t){S(e,t)}}}function Ae(r,e,n){let t;ae(r,O,c=>n(1,t=c));let{reset:o=!1}=e,{b_agreed:i=!1}=e;async function b(c,w,d){const _=await V.open(s=>s.put({family:"cosmos",pubkey:w,secret:c,name:"Citizen 1",pfp:d}));return await pe.insert({type:"account_created",time:Date.now(),data:{account:_}}),_}async function l(){const[c,w]=await ce.generatePrivateKey(!0),d=crypto.randomUUID(),_=await le.open(async T=>T.put({type:"private_key",data:await c.access(a=>fe(a)),name:"Auto-generated private key for beta",uuid:d,security:{type:"none"}})),s=w.exportPublicKey(),m=await b(_,ue(s),"");_e(O,t=m,t)}function $(c){i=c,n(0,i)}return r.$$set=c=>{"reset"in c&&n(3,o=c.reset),"b_agreed"in c&&n(0,i=c.b_agreed)},[i,t,l,o,$]}class Ie extends K{constructor(e){super(),N(this,e,Ae,xe,F,{reset:3,b_agreed:0})}}const Pe=/^([<>]=?)?(.+)$/;function Le(r,e){const[,n,t]=Pe.exec(e);return n==="<="?Ce.lte(r,t):!1}async function Oe(){const r=[],e=await me.get(de);for(const n of e||[])if(Le($e,n.affects))switch(n.action){case"restrict":{r.push(n);break}}return r}function ze(r){let e,n,t,o,i,b,l,$,c,w,d,_;return e=new X({props:{dim:96}}),t=new G({}),i=new J({}),d=new M({props:{confirm:["See Instructions",r[0]]}}),{c(){g(e.$$.fragment),n=y(),g(t.$$.fragment),o=y(),g(i.$$.fragment),b=y(),l=C("div"),l.innerHTML=`<div>Please update to continue beta testing.</div> 
		<div>A new version has been released.</div>`,$=y(),c=C("p"),w=y(),g(d.$$.fragment),j(l,"class","large")},m(s,m){k(e,s,m),f(s,n,m),k(t,s,m),f(s,o,m),k(i,s,m),f(s,b,m),f(s,l,m),f(s,$,m),f(s,c,m),f(s,w,m),k(d,s,m),_=!0},p:q,i(s){_||(h(e.$$.fragment,s),h(t.$$.fragment,s),h(i.$$.fragment,s),h(d.$$.fragment,s),_=!0)},o(s){v(e.$$.fragment,s),v(t.$$.fragment,s),v(i.$$.fragment,s),v(d.$$.fragment,s),_=!1},d(s){S(e,s),s&&u(n),S(t,s),s&&u(o),S(i,s),s&&u(b),s&&u(l),s&&u($),s&&u(c),s&&u(w),S(d,s)}}}function Be(r){let e,n;return e=new H({props:{root:!0,classNames:"restricted",$$slots:{default:[ze]},$$scope:{ctx:r}}}),{c(){g(e.$$.fragment)},m(t,o){k(e,t,o),n=!0},p(t,[o]){const i={};o&2&&(i.$$scope={dirty:o,ctx:t}),e.$set(i)},i(t){n||(h(e.$$.fragment,t),n=!0)},o(t){v(e.$$.fragment,t),n=!1},d(t){S(e,t)}}}function De(r){return[()=>be("https://github.com/SolarRepublic/starshell-beta-releases/blob/main/README.md#updating")]}class He extends K{constructor(e){super(),N(this,e,De,Be,F,{})}}document.getElementById("factory-reset")?.addEventListener("click",async()=>{await chrome.storage.session.clear(),await chrome.storage.local.clear(),await E()});let A=null,U=0,I=!1;async function E(){if(I)return;if(I=!0,A)try{A.$destroy()}catch{}try{we(document.body,"main")?.remove()}catch{}let r=!1,e,n={};const t=await B.getRootKey();if((await Oe()).length)e={creator:He};else if(t){const l=D({logout(){l(),E()}});await ye();const $=await V.read();Object.keys($.raw).length?(e={creator:ee},r=!0):(e={creator:Ie},n={completed:E})}else{const l=D({login(){l(),E()}});await B.getBase()?e={creator:se}:e={creator:te},n={completed:Ee}}let i=!1;const b=ge.subscribe(l=>{if(!i){i=!0;return}if(l){b(),r?l.activateThread(L.TOKENS):l.activateThread(L.INIT);try{Q.style.display="none"}catch{}}});A=new Y({target:document.body,props:{mode:"app",page:e},context:new Map(ke(n))}),clearTimeout(U),I=!1}if(location.hostname==="localhost")Object.fromEntries(new URLSearchParams(location.search.slice(1)).entries()).autoskip?(console.log("Autoskipping registration"),(async()=>(localStorage.clear(),await he("     "),await ve("     "),E()))()):E();else{U=globalThis.setTimeout(()=>{Z("Fatal time out, likely caused by an uncaught error.")},15*Se);try{E()}catch(r){debugger;console.error(r)}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
