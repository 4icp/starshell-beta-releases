import"../../index.5cb01ff5.js";import{c2 as ze,c3 as We,c4 as Me,c5 as De,X as Fe,c1 as Ke,W as je,V as we,v as Ge,ax as he,a_ as fe,L as He,c6 as Xe,aE as be,G as Ve,ap as Je,c7 as Qe,c8 as Ye,c9 as Ze,ao as et,ar as tt,aw as Se,ca as rt,r as Re,cb as Ee,aC as ke,I as ge,bs as nt,cc as ot,b$ as st,aM as it}from"../../web-resource-cache.a5955fee.js";function at({session:s}){const o=function(){var f=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},k={exports:{}};function H(J){throw new Error('Could not dynamically require "'+J+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var T={exports:{}},O;function z(){return O||(O=1,function(J,oe){(function(D,v){J.exports=v()})(f,function(){var D=D||function(v,R){var S;if(typeof window<"u"&&window.crypto&&(S=window.crypto),typeof self<"u"&&self.crypto&&(S=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(S=globalThis.crypto),!S&&typeof window<"u"&&window.msCrypto&&(S=window.msCrypto),!S&&typeof f<"u"&&f.crypto&&(S=f.crypto),!S&&typeof H=="function")try{S=require("crypto")}catch{}var Q=function(){if(S){if(typeof S.getRandomValues=="function")try{return S.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof S.randomBytes=="function")try{return S.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},q=Object.create||function(){function e(){}return function(r){var w;return e.prototype=r,w=new e,e.prototype=null,w}}(),U={},c=U.lib={},h=c.Base=function(){return{extend:function(e){var r=q(this);return e&&r.mixIn(e),(!r.hasOwnProperty("init")||this.init===r.init)&&(r.init=function(){r.$super.init.apply(this,arguments)}),r.init.prototype=r,r.$super=this,r},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var r in e)e.hasOwnProperty(r)&&(this[r]=e[r]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),A=c.WordArray=h.extend({init:function(e,r){e=this.words=e||[],r!=R?this.sigBytes=r:this.sigBytes=e.length*4},toString:function(e){return(e||n).stringify(this)},concat:function(e){var r=this.words,w=e.words,m=this.sigBytes,N=e.sigBytes;if(this.clamp(),m%4)for(var K=0;K<N;K++){var G=w[K>>>2]>>>24-K%4*8&255;r[m+K>>>2]|=G<<24-(m+K)%4*8}else for(var X=0;X<N;X+=4)r[m+X>>>2]=w[X>>>2];return this.sigBytes+=N,this},clamp:function(){var e=this.words,r=this.sigBytes;e[r>>>2]&=4294967295<<32-r%4*8,e.length=v.ceil(r/4)},clone:function(){var e=h.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var r=[],w=0;w<e;w+=4)r.push(Q());return new A.init(r,e)}}),t=U.enc={},n=t.Hex={stringify:function(e){for(var r=e.words,w=e.sigBytes,m=[],N=0;N<w;N++){var K=r[N>>>2]>>>24-N%4*8&255;m.push((K>>>4).toString(16)),m.push((K&15).toString(16))}return m.join("")},parse:function(e){for(var r=e.length,w=[],m=0;m<r;m+=2)w[m>>>3]|=parseInt(e.substr(m,2),16)<<24-m%8*4;return new A.init(w,r/2)}},u=t.Latin1={stringify:function(e){for(var r=e.words,w=e.sigBytes,m=[],N=0;N<w;N++){var K=r[N>>>2]>>>24-N%4*8&255;m.push(String.fromCharCode(K))}return m.join("")},parse:function(e){for(var r=e.length,w=[],m=0;m<r;m++)w[m>>>2]|=(e.charCodeAt(m)&255)<<24-m%4*8;return new A.init(w,r)}},i=t.Utf8={stringify:function(e){try{return decodeURIComponent(escape(u.stringify(e)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(e){return u.parse(unescape(encodeURIComponent(e)))}},p=c.BufferedBlockAlgorithm=h.extend({reset:function(){this._data=new A.init,this._nDataBytes=0},_append:function(e){typeof e=="string"&&(e=i.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(e){var r,w=this._data,m=w.words,N=w.sigBytes,K=this.blockSize,G=K*4,X=N/G;e?X=v.ceil(X):X=v.max((X|0)-this._minBufferSize,0);var ie=X*K,se=v.min(ie*4,N);if(ie){for(var ae=0;ae<ie;ae+=K)this._doProcessBlock(m,ae);r=m.splice(0,ie),w.sigBytes-=se}return new A.init(r,se)},clone:function(){var e=h.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0});c.Hasher=p.extend({cfg:h.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){p.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){e&&this._append(e);var r=this._doFinalize();return r},blockSize:16,_createHelper:function(e){return function(r,w){return new e.init(w).finalize(r)}},_createHmacHelper:function(e){return function(r,w){return new B.HMAC.init(e,w).finalize(r)}}});var B=U.algo={};return U}(Math);return D})}(T)),T.exports}var ne={exports:{}},j;function ee(){return j||(j=1,function(J,oe){(function(D,v){J.exports=v(z())})(f,function(D){return function(v){var R=D,S=R.lib,Q=S.WordArray,q=S.Hasher,U=R.algo,c=[],h=[];(function(){function n(B){for(var e=v.sqrt(B),r=2;r<=e;r++)if(!(B%r))return!1;return!0}function u(B){return(B-(B|0))*4294967296|0}for(var i=2,p=0;p<64;)n(i)&&(p<8&&(c[p]=u(v.pow(i,.5))),h[p]=u(v.pow(i,.3333333333333333)),p++),i++})();var A=[],t=U.SHA256=q.extend({_doReset:function(){this._hash=new Q.init(c.slice(0))},_doProcessBlock:function(n,u){for(var i=this._hash.words,p=i[0],B=i[1],e=i[2],r=i[3],w=i[4],m=i[5],N=i[6],K=i[7],G=0;G<64;G++){if(G<16)A[G]=n[u+G]|0;else{var X=A[G-15],ie=(X<<25|X>>>7)^(X<<14|X>>>18)^X>>>3,se=A[G-2],ae=(se<<15|se>>>17)^(se<<13|se>>>19)^se>>>10;A[G]=ie+A[G-7]+ae+A[G-16]}var $e=w&m^~w&N,Le=p&B^p&e^B&e,Oe=(p<<30|p>>>2)^(p<<19|p>>>13)^(p<<10|p>>>22),qe=(w<<26|w>>>6)^(w<<21|w>>>11)^(w<<7|w>>>25),me=K+qe+$e+h[G]+A[G],Ue=Oe+Le;K=N,N=m,m=w,w=r+me|0,r=e,e=B,B=p,p=me+Ue|0}i[0]=i[0]+p|0,i[1]=i[1]+B|0,i[2]=i[2]+e|0,i[3]=i[3]+r|0,i[4]=i[4]+w|0,i[5]=i[5]+m|0,i[6]=i[6]+N|0,i[7]=i[7]+K|0},_doFinalize:function(){var n=this._data,u=n.words,i=this._nDataBytes*8,p=n.sigBytes*8;return u[p>>>5]|=128<<24-p%32,u[(p+64>>>9<<4)+14]=v.floor(i/4294967296),u[(p+64>>>9<<4)+15]=i,n.sigBytes=u.length*4,this._process(),this._hash},clone:function(){var n=q.clone.call(this);return n._hash=this._hash.clone(),n}});R.SHA256=q._createHelper(t),R.HmacSHA256=q._createHmacHelper(t)}(Math),D.SHA256})}(ne)),ne.exports}var g={exports:{}},E;function re(){return E||(E=1,function(J,oe){(function(D,v){J.exports=v(z())})(f,function(D){(function(){var v=D,R=v.lib,S=R.Base,Q=v.enc,q=Q.Utf8,U=v.algo;U.HMAC=S.extend({init:function(c,h){c=this._hasher=new c.init,typeof h=="string"&&(h=q.parse(h));var A=c.blockSize,t=A*4;h.sigBytes>t&&(h=c.finalize(h)),h.clamp();for(var n=this._oKey=h.clone(),u=this._iKey=h.clone(),i=n.words,p=u.words,B=0;B<A;B++)i[B]^=1549556828,p[B]^=909522486;n.sigBytes=u.sigBytes=t,this.reset()},reset:function(){var c=this._hasher;c.reset(),c.update(this._iKey)},update:function(c){return this._hasher.update(c),this},finalize:function(c){var h=this._hasher,A=h.finalize(c);h.reset();var t=h.finalize(this._oKey.clone().concat(A));return t}})})()})}(g)),g.exports}(function(J,oe){(function(D,v,R){J.exports=v(z(),ee(),re())})(f,function(D){return D.HmacSHA256})})(k);var W=k.exports;return W}(),{A_CHAIN_CATEGORIES:a,A_CHAIN_FAMILIES:l,R_CHAIN_ID:d,R_CHAIN_NAME:_}=function(f){const O=["cosmos"],z=["mainnet","testnet"],ne=/^[a-z0-9][a-z0-9-]{2,64}$/,j=/^[\p{L}\p{S}](\p{Zs}?[\p{L}\p{N}\p{S}._:/-])+$/u;return f.A_CHAIN_CATEGORIES=z,f.A_CHAIN_FAMILIES=O,f.NB_MAX_MESSAGE=2097152,f.N_PX_HEIGHT_POPUP=600,f.N_PX_WIDTH_POPUP=360,f.R_CHAIN_ID=ne,f.R_CHAIN_NAME=j,Object.defineProperty(f,"__esModule",{value:!0}),f}({}),{locate_script:x}=function(f){function k(H){const T=chrome.runtime.getManifest();for(const O of T.content_scripts||[])for(const z of O.js??[])if(z.startsWith(H))return z;for(const O of T.web_accessible_resources||[])if(typeof O=="string"){if(O.startsWith(H))return O}else for(const z of O.resources)if(z.startsWith(H))return z;return null}return f.locate_script=k,Object.defineProperty(f,"__esModule",{value:!0}),f}({}),$=chrome.runtime,C=(f,...k)=>console.debug(`StarShell.ics-host: ${f}`,...k);C(`Launched on <${location.href}>`);class P extends Error{}let b,I=!1,F=!1;function Y(f){throw F=!0,$.sendMessage({type:"panic",value:""+f}),new P(`StarShell threw a security error: "${f}"`)}function y(){if(F)throw new Error("StarShell withdrew wallet access from this website due to a security violation")}const M={async requestConnect(f){const{index:k,manifest:H}=f,T=ee=>{b.postMessage({type:"respondConnect",value:{index:k,answer:{error:ee}}})};if(typeof H!="object"||typeof H.schema!="string")return T("Invalid manifest structure");if(H.schema!=="1")return T("Unknown or unsupported manifest schema version");if(!Array.isArray(H.chains)||!H.chains.length)return T("No chains were specified in request");const{chains:O}=H,z=new Set,ne=[];for(let ee=0;ee<O.length;ee++){const g=O[ee],E=J=>T(`${J} at .chains[${ee}]`);if(typeof g!="object"||typeof g.category!="string"||typeof g.family!="string"||typeof g.id!="string")return E("Invalid chain descriptor structure");if(!l.includes(g.family))continue;if(!a.includes(g.category))return E(`Invalid category value "${g.category}"; must be one of (${a.join(", ")})`);if(!d.test(g.id))return E(`Invalid chain id "${g.id}" for ${g.family} family; failed to match regular expression /${d.source}/`);if(g.name){if(!_.test(g.name))return E(`Invalid chain name "${g.name}"; failed to match regular expression /${_.source}/`);if(g.name.length>64)return E("Chain name too long")}const re=g.family+`
`+g.id;if(z.has(re))return E(`Duplicate chain IDs in '${g.family}' family: '${g.id}'`);const W=g.name||g.id;ne.push({...g,label:W})}$.sendMessage({type:"requestConnection",value:{chains:ne}});const j=[];j.push(null);for(const ee of O){const g=new MessageChannel;await HostConnection.create(ee,g.port1),j.push(g.port2)}b.postMessage({type:"respondConnect",value:{index:k,answer:{config:{features:a_features}}}},j)},reportWebsiteError(f){}};function V(f){const{type:k,value:H}=f.data,T=M[k];if(!T){console.error(`Received relay port message having an unregistered type "${k}"`);return}C("Received relay port message having registered type %o",f.data),T(H)}const L={establishChannel(f,k){if(y(),I)return Y("Relay frame attempted to establish connection more than once");if(I=!0,!te)return Y("Reference to relay frame window not defined");if(!k||k.length!==1)return Y("Expected exactly one MessagePort but none were transfered from relay frame");b=k[0],b.onmessage=V,b.postMessage({type:"acknowledgeChannel"}),window.postMessage({type:"ratifyGlobal"},window.origin)}};let te,Z;{const f={session:s,csurl:chrome.runtime.getURL("assets/src/script/mcs-relay.js")},k=document.createElement("script");k.setAttribute("type","application/json"),k.setAttribute("id","starshell-mcs-relay-payload"),k.textContent=JSON.stringify(f);const H=document.createElement("script"),T=x("assets/src/script/mcs-relay");if(!T)throw new Error("Unable to locate relay script!");H.src=chrome.runtime.getURL(T),H.type="module";const O=document.createElement("iframe"),z=document.createElement("div");z.style.display="none !important",z.attachShadow({mode:"closed"}).append(O);try{document.head.append(z)}catch{document.body.append(z)}te=O.contentWindow,Z=O.contentDocument,Z.body.append(k),Z.body.append(H),C("Injected relay iframe")}te.addEventListener("message",f=>{if(C("Observed relay window message %o",f),!f.isTrusted){console.warn("Ignored untrusted event %o",f);return}if(f.source!==f.target){console.warn("Ignored cross-window message %o",f);return}const k=f.target;if(window.origin!==f.origin||window!==k.parent||k.location.href!=="about:blank"){console.warn("Ignored message from 3rd party %o",f);return}const H=f.data;if(typeof H!="object"||typeof H.type!="string"){C("Ignored invalid message data %o",H);return}const{type:T,auth:O}=H,z=L[T];if(!z){console.error(`Received message having an unregistered type "${T}"`);return}if(typeof O!="string"){C("Ignored message missing auth data %o",H);return}if(JSON.stringify(o(JSON.stringify({...H,auth:void 0}),s))!==H.auth)return Y("Relay frame sent invalid auth signature");C("Received message having registered type %o",f.data),z(null,f.ports)})}function ct({session:s}){const o=(y,...M)=>console.debug(`StarShell.mcs-ratifier: ${y}`,...M);o(`Launched on <${location.href}>`);const a=function(){var y=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},M={exports:{}};function V(j){throw new Error('Could not dynamically require "'+j+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var L={exports:{}},te;function Z(){return te||(te=1,function(j,ee){(function(g,E){j.exports=E()})(y,function(){var g=g||function(E,re){var W;if(typeof window<"u"&&window.crypto&&(W=window.crypto),typeof self<"u"&&self.crypto&&(W=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(W=globalThis.crypto),!W&&typeof window<"u"&&window.msCrypto&&(W=window.msCrypto),!W&&typeof y<"u"&&y.crypto&&(W=y.crypto),!W&&typeof V=="function")try{W=require("crypto")}catch{}var J=function(){if(W){if(typeof W.getRandomValues=="function")try{return W.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof W.randomBytes=="function")try{return W.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},oe=Object.create||function(){function t(){}return function(n){var u;return t.prototype=n,u=new t,t.prototype=null,u}}(),D={},v=D.lib={},R=v.Base=function(){return{extend:function(t){var n=oe(this);return t&&n.mixIn(t),(!n.hasOwnProperty("init")||this.init===n.init)&&(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var n in t)t.hasOwnProperty(n)&&(this[n]=t[n]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),S=v.WordArray=R.extend({init:function(t,n){t=this.words=t||[],n!=re?this.sigBytes=n:this.sigBytes=t.length*4},toString:function(t){return(t||q).stringify(this)},concat:function(t){var n=this.words,u=t.words,i=this.sigBytes,p=t.sigBytes;if(this.clamp(),i%4)for(var B=0;B<p;B++){var e=u[B>>>2]>>>24-B%4*8&255;n[i+B>>>2]|=e<<24-(i+B)%4*8}else for(var r=0;r<p;r+=4)n[i+r>>>2]=u[r>>>2];return this.sigBytes+=p,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=E.ceil(n/4)},clone:function(){var t=R.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var n=[],u=0;u<t;u+=4)n.push(J());return new S.init(n,t)}}),Q=D.enc={},q=Q.Hex={stringify:function(t){for(var n=t.words,u=t.sigBytes,i=[],p=0;p<u;p++){var B=n[p>>>2]>>>24-p%4*8&255;i.push((B>>>4).toString(16)),i.push((B&15).toString(16))}return i.join("")},parse:function(t){for(var n=t.length,u=[],i=0;i<n;i+=2)u[i>>>3]|=parseInt(t.substr(i,2),16)<<24-i%8*4;return new S.init(u,n/2)}},U=Q.Latin1={stringify:function(t){for(var n=t.words,u=t.sigBytes,i=[],p=0;p<u;p++){var B=n[p>>>2]>>>24-p%4*8&255;i.push(String.fromCharCode(B))}return i.join("")},parse:function(t){for(var n=t.length,u=[],i=0;i<n;i++)u[i>>>2]|=(t.charCodeAt(i)&255)<<24-i%4*8;return new S.init(u,n)}},c=Q.Utf8={stringify:function(t){try{return decodeURIComponent(escape(U.stringify(t)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(t){return U.parse(unescape(encodeURIComponent(t)))}},h=v.BufferedBlockAlgorithm=R.extend({reset:function(){this._data=new S.init,this._nDataBytes=0},_append:function(t){typeof t=="string"&&(t=c.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(t){var n,u=this._data,i=u.words,p=u.sigBytes,B=this.blockSize,e=B*4,r=p/e;t?r=E.ceil(r):r=E.max((r|0)-this._minBufferSize,0);var w=r*B,m=E.min(w*4,p);if(w){for(var N=0;N<w;N+=B)this._doProcessBlock(i,N);n=i.splice(0,w),u.sigBytes-=m}return new S.init(n,m)},clone:function(){var t=R.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});v.Hasher=h.extend({cfg:R.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){h.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){t&&this._append(t);var n=this._doFinalize();return n},blockSize:16,_createHelper:function(t){return function(n,u){return new t.init(u).finalize(n)}},_createHmacHelper:function(t){return function(n,u){return new A.HMAC.init(t,u).finalize(n)}}});var A=D.algo={};return D}(Math);return g})}(L)),L.exports}var f={exports:{}},k;function H(){return k||(k=1,function(j,ee){(function(g,E){j.exports=E(Z())})(y,function(g){return function(E){var re=g,W=re.lib,J=W.WordArray,oe=W.Hasher,D=re.algo,v=[],R=[];(function(){function q(A){for(var t=E.sqrt(A),n=2;n<=t;n++)if(!(A%n))return!1;return!0}function U(A){return(A-(A|0))*4294967296|0}for(var c=2,h=0;h<64;)q(c)&&(h<8&&(v[h]=U(E.pow(c,1/2))),R[h]=U(E.pow(c,1/3)),h++),c++})();var S=[],Q=D.SHA256=oe.extend({_doReset:function(){this._hash=new J.init(v.slice(0))},_doProcessBlock:function(q,U){for(var c=this._hash.words,h=c[0],A=c[1],t=c[2],n=c[3],u=c[4],i=c[5],p=c[6],B=c[7],e=0;e<64;e++){if(e<16)S[e]=q[U+e]|0;else{var r=S[e-15],w=(r<<25|r>>>7)^(r<<14|r>>>18)^r>>>3,m=S[e-2],N=(m<<15|m>>>17)^(m<<13|m>>>19)^m>>>10;S[e]=w+S[e-7]+N+S[e-16]}var K=u&i^~u&p,G=h&A^h&t^A&t,X=(h<<30|h>>>2)^(h<<19|h>>>13)^(h<<10|h>>>22),ie=(u<<26|u>>>6)^(u<<21|u>>>11)^(u<<7|u>>>25),se=B+ie+K+R[e]+S[e],ae=X+G;B=p,p=i,i=u,u=n+se|0,n=t,t=A,A=h,h=se+ae|0}c[0]=c[0]+h|0,c[1]=c[1]+A|0,c[2]=c[2]+t|0,c[3]=c[3]+n|0,c[4]=c[4]+u|0,c[5]=c[5]+i|0,c[6]=c[6]+p|0,c[7]=c[7]+B|0},_doFinalize:function(){var q=this._data,U=q.words,c=this._nDataBytes*8,h=q.sigBytes*8;return U[h>>>5]|=128<<24-h%32,U[(h+64>>>9<<4)+14]=E.floor(c/4294967296),U[(h+64>>>9<<4)+15]=c,q.sigBytes=U.length*4,this._process(),this._hash},clone:function(){var q=oe.clone.call(this);return q._hash=this._hash.clone(),q}});re.SHA256=oe._createHelper(Q),re.HmacSHA256=oe._createHmacHelper(Q)}(Math),g.SHA256})}(f)),f.exports}var T={exports:{}},O;function z(){return O||(O=1,function(j,ee){(function(g,E){j.exports=E(Z())})(y,function(g){(function(){var E=g,re=E.lib,W=re.Base,J=E.enc,oe=J.Utf8,D=E.algo;D.HMAC=W.extend({init:function(v,R){v=this._hasher=new v.init,typeof R=="string"&&(R=oe.parse(R));var S=v.blockSize,Q=S*4;R.sigBytes>Q&&(R=v.finalize(R)),R.clamp();for(var q=this._oKey=R.clone(),U=this._iKey=R.clone(),c=q.words,h=U.words,A=0;A<S;A++)c[A]^=1549556828,h[A]^=909522486;q.sigBytes=U.sigBytes=Q,this.reset()},reset:function(){var v=this._hasher;v.reset(),v.update(this._iKey)},update:function(v){return this._hasher.update(v),this},finalize:function(v){var R=this._hasher,S=R.finalize(v);R.reset();var Q=R.finalize(this._oKey.clone().concat(S));return Q}})})()})}(T)),T.exports}(function(j,ee){(function(g,E,re){j.exports=E(Z(),H(),z())})(y,function(g){return g.HmacSHA256})})(M);var ne=M.exports;return ne}();class l extends Error{}let d=!1;function _(y){throw d=!0,window.postMessage({type:"s2r:abort",value:{reason:""+y,signature:a(""+y,s)}}),new l(`StarShell threw a security error: "${y}"`)}function x(y){console.error(y),d=!0}const{addEventListener:$,Reflect:C,Reflect:{getOwnPropertyDescriptor:P,getPrototypeOf:b}}=window;function I(y,M,V=[]){try{const L=P.call(C,y,M);if(!L){V.push(y);const te=b.call(C,y);return!te||V.includes(te)?null:I(te,M,V)}return L}catch{return null}}function F(y,M,V=!1){try{const L=I(y,M);return L?"value"in L?L.value:V?y[M]:null:null}catch{return null}}const Y={ratifyGlobal(){if(s){if(!I(window,"starshell"))return x("StarShell failed to ratify global since it is not defined.")}else return x("StarShell is refusing to ratify global since it never received a signing key from the extension.");const y=window.starshell;y.verify(V=>{if(d)return;if(V!==JSON.stringify(a("starshell",s)))return _("Invalid auth signature passed to ratifier");const L=y.verifiableStack();return{proof:L,signature:JSON.stringify(a(JSON.stringify(L),s))}})(y)}};window.addEventListener("message",y=>{if(o("Observed window message %o",y),!d&&window===F(y,"source",!0)){const M=F(y,"data",!0);let V;if(M&&typeof M=="object"&&typeof(V=F(M,"type"))=="string"){const L=Y[V];if(!L)return;o("Received relay port message having registered type %o",y.data),L(M)}}})}function ft(s){const o=chrome.runtime.getManifest();for(const a of o.content_scripts||[])for(const l of a.js??[])if(l.startsWith(s))return l;for(const a of o.web_accessible_resources||[])if(typeof a=="string"){if(a.startsWith(s))return a}else for(const l of a.resources)if(l.startsWith(s))return l;return null}const lt=["file://*/*","http://*/*","https://*/*"],ut={matches:lt,runAt:"document_start",persistAcrossSessions:!0,allFrames:!0,world:"MAIN"},dt={mcs_keplr(s){return{...ut,id:"keplr_polyfill",js:[ft("assets/src/script/mcs-keplr")],persistAcrossSessions:!0,...s}}},Be={blocked:!0};function Ae(s,o){let a;try{a=new RegExp(s.matches)}catch{return console.error(`Failed to parse policy match pattern "${s.matches}"`),!1}if(a.test(o.host)&&s.except){let l;try{l=new RegExp(s.except)}catch{return console.error(`Failed to parse policy match pattern "${s.except}"`),!1}if(l.test(o.host))return!1}return!0}const Pe=ze({store:We,class:class extends Me{static forApp(o){return Pe.open(a=>a.forApp(o))}forApp(o){let a=!1;for(const l of this._w_cache.hq)if(Ae(l,o)){if(l.action==="block")return Be;console.error(`Unknown hq policy action "${l.action}"`);continue}for(const l of this._w_cache.user)if(Ae(l,o)){if(l.action==="block")return Be;if(l.action==="trust")a=!0;else{console.error(`Unknown policy action "${l.action}"`);continue}}return{blocked:!1,trusted:a}}}}),_e=360,ye=600;async function ht(s){const o=chrome.runtime.getURL("src/entry/flow.html"),a=o+"?"+new URLSearchParams(s).toString(),[l,d]=await Promise.all([chrome.system.display.getInfo(),(async()=>{const b=(await chrome.storage.session.get(["display_info"]))?.display_info;if(b)return b;chrome.windows.create({type:"popup",url:o+"?"+new URLSearchParams({headless:"info"}).toString(),focused:!0,width:_e,height:ye});try{return(await pt("session","display_info",5*Fe))?.newValue}catch{}})()]),_={};for(const b of l)b.isEnabled&&(_[b.bounds.width+":"+b.bounds.height]=b);let x={};if(d){const b=d.width+":"+d.height,I=_[b];I&&(x={left:I.bounds.left+Math.round(d.width/2-_e/2),top:I.bounds.top+Math.round(d.height*.45-ye/2)})}const $=await chrome.windows.create({type:"popup",url:a,focused:!0,width:_e,height:ye,...x});if(typeof $.id!="number")throw new Error("Failed to create popup window");if(!await chrome.windows.get($.id,{windowTypes:["popup"]}))throw new Error("Failed to locate popup window");const P=await new Promise(b=>{chrome.tabs.onUpdated.addListener(function I(F,Y,y){$.id===y.windowId&&typeof F=="number"&&Y.status==="complete"&&(chrome.tabs.onUpdated.removeListener(I),b(y))})});return{window:$,tab:P}}async function le(s,o=""){const a=`flow_${crypto.randomUUID()}`;await De("flow");const{window:l,tab:d}=await ht({comm:"broadcast",name:a}),_=new BroadcastChannel(a);return new Promise(x=>{function $(b){chrome.windows.onRemoved.removeListener(P),_.removeEventListener("message",C),Ke("flow"),x(b)}function C(b){const I=b.data;I.type==="completeFlow"&&(chrome.windows.remove(l.id),$(I.value.answer))}_.onmessage=C;function P(b){b===l.id&&$(!1)}chrome.windows.onRemoved.addListener(P,{windowTypes:["popup"]}),_.postMessage(s.flow)})}const Te={sync:{},local:{},session:{},managed:{}};function pt(s,o,a=0){return new Promise((l,d)=>{const _=Te[s],x=_[o]=_[o]||[];let $=-1,C=0;a>0&&(C=globalThis.setTimeout(()=>{x.splice($,1),d(new Error("Timed out"))},a)),$=x.push(P=>{globalThis.clearTimeout(C),l(P)})})}function _t(s,o,a){const l=Te[s],d=l[o];if(d?.length){l[o]=[];for(const _ of d)_(a)}}chrome.storage.onChanged.addListener((s,o)=>{const l={sync:{async keplr_polyfill(d){const _=chrome.scripting,x=dt.mcs_keplr(),$=!!(await _.getRegisteredContentScripts({ids:[x.id]})).length;d.newValue===!0?$||await _.registerContentScripts([x]):$||await _.unregisterContentScripts({ids:[x.id]})}},local:{},session:{},managed:{}}[o];if(l)for(const d in s){const _=s[d];_t(o,d,_);const x=l[d];x&&x(_)}});function xe(s){const{protocol:o,host:a}=new URL(s);return[(o||"").replace(/:$/,""),a]}function ue(s,o){return console.warn(`${o}; blocked request from <${s.url}>`),!0}async function Ce(s,o,a){if(s==="http"){if(!st.test(o))return ue(a,"Non-secure HTTP contexts are not allowed to connect to wallet except for localhost")}else if(s==="file"){if(!await it.get("allow_file_urls"))return ue(a,"File URLs are not allowed to connect to wallet, unless 'allow_file_urls' setting is enabled")}else if(s!=="https")return ue(a,`Scheme not allowed "${s}"`);return!1}function yt(s=64){const o=new Uint8Array(s);return crypto.getRandomValues(o),Array.from(o).map(a=>a.toString(16).padStart(2,"0")).join("")}const de={panic(s,o){},async requestAdvertisement(s,o,a){const l=o.tab.id;if(!o.url){console.debug("Silently ignoring advertisement request from unknown source");return}const[d,_]=xe(o.url),x={tabId:l,href:o.url+""};if(console.info("get root key"),!await we.getRootKey()){console.info("no root key");const P=await le({flow:{type:"authenticate",page:x}});return console.info("flow completed"),P?await de.requestAdvertisement(s,o,a):void 0}if(console.info("root key exists"),await Ce(d,_,o))return;console.info("app passed scheme check");{let P=await nt.get(_,d),b=!1;P?b=!0:P={scheme:d,host:_,connections:{}};const I=await Pe.forApp(P);if(console.info("got policy for app %o",I),I.blocked)return ue(o,"App connection blocked by policy");if(!b&&!I.trusted){if(await le({flow:{type:"requestAdvertisement",value:{app:P},page:x}}))return await de.requestAdvertisement(s,o,a);console.debug("User cancelled request");return}}console.debug(`Allowing <${o.url}> to receive advertisement`);const C={session:yt()};chrome.scripting.executeScript({target:{tabId:l},func:at,args:[C],world:"ISOLATED"}),chrome.scripting.executeScript({target:{tabId:l},func:ct,args:[C],world:"MAIN"}),a(C)},async flowBroadcast(s,o,a){const{key:l,config:d}=s;if(!o.url){console.debug("Silently ignoring advertisement request from unknown source");return}const _=d.flow.page={tabId:o.tab.id,href:o.url||d.flow.page?.href||""};if(console.info("get root key"),!await we.getRootKey()){console.info("no root key");const b=await le({flow:{type:"authenticate",page:_}});return console.info("flow completed"),b?await de.flowBroadcast(s,o,a):void 0}const[$,C]=xe(o.url);if(await Ce($,C,o))return;console.info("app passed scheme check");const P={scheme:$,host:C,connections:{}};d.flow.value.app=P,le(d,l)}},wt={async bankSend(s){const o=await fe.at(s.network),a=await he.at(o.chain),d=await fe.activate(o,a).bankSend(s.sender,s.recipient,s.coin,BigInt(s.amount),BigInt(s.limit),s.price,s.memo,ot.BROADCAST_MODE_SYNC,a),_=Re(Ee(ke(d.hash)));chrome.notifications.create(_,{type:"basic",title:"Transaction sent to network",message:`Waiting for confirmation on ${a.name}...`,priority:1,iconUrl:"/media/vendor/logo-192px.png"}),await ge.record(d.hash,{type:"tx_out",time:Date.now(),data:d})}},gt=(s,o,a)=>{if(console.debug("Service received message %o",s),typeof s=="object"&&typeof s.type=="string"){let l=de;if(!o.tab||typeof o.tab.id!="number")if(o.origin&&chrome.runtime.id===o.id)l=wt;else{console.error("Refusing request from unknown sender");return}const d=s.type,_=l[d];if(_){const x=_(s.value,o,a);if(x&&typeof x.then=="function")return!0}}};chrome.runtime.onMessage.addListener(gt);chrome.runtime.onInstalled.addListener(async()=>{});chrome.alarms.clearAll(()=>{console.warn("clear all"),chrome.alarms.create("periodicChainQueries",{periodInMinutes:2}),chrome.alarms.onAlarm.addListener(s=>{switch(s.name){case"periodicChainQueries":{pe();break}}}),pe()});let ve=!1;const ce={},Ne=()=>setTimeout(()=>{ve=!1,pe()},3*Je);let vt=Ne();function Ie(s,o,a,l,d,_){const x=s+":Receive";return he.pathFrom(a),ce[x]=o[`on${_}`](d,async($,C)=>{if($)delete ce[x],console.error($);else if(C){const P=JSON.parse(C.result?.log||"[]");if(P?.length){for(const b of P[0].events)if(b.type==="transfer"){const I=Qe(b);let F=I.amount;const Y=Ye.exec(I.amount);if(!Y)Ze({text:`Failed to parse transfer amount "${I.amount}"`});else{const[,Z,f]=Y;for(const[k,H]of He(a.coins))if(f===H.denom){const T=new et(Z).shiftedBy(-H.decimals).toNumber();F=`${tt(T,!0)} ${k}`;break}}let y=I.sender;const M=Se.pathForContact(y,a.family),V=await Se.getContact(M);V?y=V.name:y=rt(y);const L=C.hash,te=Re(Ee(ke(L)));if(_==="Receive"){chrome.notifications.create(te,{type:"basic",title:`Received ${F} on ${a.name}`,message:`${y} sent ${F} to your ${l.name} account`,priority:1,iconUrl:"/media/vendor/logo-192px.png"});const Z=await o.downloadTxn(L);await ge.record(L,{type:"tx_in",time:new Date(Z.timestamp).getTime(),data:Z})}else if(_==="Send"){chrome.notifications.create(te,{type:"basic",title:`Sent ${F} on ${a.name}`,message:`${F} sent to ${y} from ${l.name} account`,priority:1,iconUrl:"/media/vendor/logo-192px.png"});const Z=await o.downloadTxn(L);await ge.record(L,{type:"tx_out",time:new Date(Z.timestamp).getTime(),data:Z})}}}}})}async function pe(){if(await je.updateAll(),!await we.getRootKey()||ve)return;ve=!0,clearTimeout(vt);const[s,o,a]=await Promise.all([Ge.read(),he.read(),fe.read()]),l={};for(const[d,_]of a.entries())l[_.chain]=l[_.chain]||_;for(const[d,_]of He(l)){if(d==="/family.cosmos/chain.theta-testnet-001"||ce[d])continue;const x=o.at(d),$=fe.pathFrom(_),C=fe.activate(_,x),P=[];try{ce[d]=C.listen(["tm.event='NewBlock'"],(b,I)=>{if(b)delete ce[d];else if(I){P.push(Date.now());const F=I.block;for(;P.length>16;)P.shift();Xe({type:"blockInfo",value:{header:F.header,chain:d,network:$,recents:P}})}}),console.info({h_sockets:ce})}catch(b){be({title:"Websocket Error",error:b})}for(const[b,I]of s.entries()){const F=he.addressFor(I.pubkey,x);if(C.hasRpc){const Y=d+`
`+_.rpcHost+`
`;if(!ce[Y])try{Ie(Y,C,x,I,F,"Receive"),Ie(Y,C,x,I,F,"Send")}catch(M){be({title:"Provider Error",error:M})}await C.synchronizeAll(F)}}}Ne()}Ve({login(){pe()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
