import"../../index.5cb01ff5.js";import{c2 as Me,c3 as Fe,c4 as je,c5 as Ke,X as Ge,c1 as Xe,W as Ve,V as ge,v as Pe,ax as _e,a_ as fe,L as Te,c6 as $e,aE as Ae,G as Je,ap as Qe,c7 as Ye,c8 as Ze,c9 as et,ao as tt,ar as rt,aw as Be,ca as nt,I as ve,bs as ot,cb as st,b$ as it,aM as at}from"../../web-resource-cache.df128f7e.js";function ct({session:r}){const s=function(){var a=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},$={exports:{}};function R(Z){throw new Error('Could not dynamically require "'+Z+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var N={exports:{}},U;function W(){return U||(U=1,function(Z,oe){(function(M,b){Z.exports=b()})(a,function(){var M=M||function(b,E){var B;if(typeof window<"u"&&window.crypto&&(B=window.crypto),typeof self<"u"&&self.crypto&&(B=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(B=globalThis.crypto),!B&&typeof window<"u"&&window.msCrypto&&(B=window.msCrypto),!B&&typeof a<"u"&&a.crypto&&(B=a.crypto),!B&&typeof R=="function")try{B=require("crypto")}catch{}var ee=function(){if(B){if(typeof B.getRandomValues=="function")try{return B.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof B.randomBytes=="function")try{return B.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},O=Object.create||function(){function e(){}return function(n){var w;return e.prototype=n,w=new e,e.prototype=null,w}}(),q={},l=q.lib={},h=l.Base=function(){return{extend:function(e){var n=O(this);return e&&n.mixIn(e),(!n.hasOwnProperty("init")||this.init===n.init)&&(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var n in e)e.hasOwnProperty(n)&&(this[n]=e[n]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),C=l.WordArray=h.extend({init:function(e,n){e=this.words=e||[],n!=E?this.sigBytes=n:this.sigBytes=e.length*4},toString:function(e){return(e||o).stringify(this)},concat:function(e){var n=this.words,w=e.words,S=this.sigBytes,L=e.sigBytes;if(this.clamp(),S%4)for(var K=0;K<L;K++){var J=w[K>>>2]>>>24-K%4*8&255;n[S+K>>>2]|=J<<24-(S+K)%4*8}else for(var Q=0;Q<L;Q+=4)n[S+Q>>>2]=w[Q>>>2];return this.sigBytes+=L,this},clamp:function(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=b.ceil(n/4)},clone:function(){var e=h.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var n=[],w=0;w<e;w+=4)n.push(ee());return new C.init(n,e)}}),t=q.enc={},o=t.Hex={stringify:function(e){for(var n=e.words,w=e.sigBytes,S=[],L=0;L<w;L++){var K=n[L>>>2]>>>24-L%4*8&255;S.push((K>>>4).toString(16)),S.push((K&15).toString(16))}return S.join("")},parse:function(e){for(var n=e.length,w=[],S=0;S<n;S+=2)w[S>>>3]|=parseInt(e.substr(S,2),16)<<24-S%8*4;return new C.init(w,n/2)}},u=t.Latin1={stringify:function(e){for(var n=e.words,w=e.sigBytes,S=[],L=0;L<w;L++){var K=n[L>>>2]>>>24-L%4*8&255;S.push(String.fromCharCode(K))}return S.join("")},parse:function(e){for(var n=e.length,w=[],S=0;S<n;S++)w[S>>>2]|=(e.charCodeAt(S)&255)<<24-S%4*8;return new C.init(w,n)}},i=t.Utf8={stringify:function(e){try{return decodeURIComponent(escape(u.stringify(e)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(e){return u.parse(unescape(encodeURIComponent(e)))}},_=l.BufferedBlockAlgorithm=h.extend({reset:function(){this._data=new C.init,this._nDataBytes=0},_append:function(e){typeof e=="string"&&(e=i.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(e){var n,w=this._data,S=w.words,L=w.sigBytes,K=this.blockSize,J=K*4,Q=L/J;e?Q=b.ceil(Q):Q=b.max((Q|0)-this._minBufferSize,0);var ae=Q*K,se=b.min(ae*4,L);if(ae){for(var ce=0;ce<ae;ce+=K)this._doProcessBlock(S,ce);n=S.splice(0,ae),w.sigBytes-=se}return new C.init(n,se)},clone:function(){var e=h.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0});l.Hasher=_.extend({cfg:h.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){_.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){e&&this._append(e);var n=this._doFinalize();return n},blockSize:16,_createHelper:function(e){return function(n,w){return new e.init(w).finalize(n)}},_createHmacHelper:function(e){return function(n,w){return new x.HMAC.init(e,w).finalize(n)}}});var x=q.algo={};return q}(Math);return M})}(N)),N.exports}var ne={exports:{}},X;function te(){return X||(X=1,function(Z,oe){(function(M,b){Z.exports=b(W())})(a,function(M){return function(b){var E=M,B=E.lib,ee=B.WordArray,O=B.Hasher,q=E.algo,l=[],h=[];(function(){function o(x){for(var e=b.sqrt(x),n=2;n<=e;n++)if(!(x%n))return!1;return!0}function u(x){return(x-(x|0))*4294967296|0}for(var i=2,_=0;_<64;)o(i)&&(_<8&&(l[_]=u(b.pow(i,.5))),h[_]=u(b.pow(i,.3333333333333333)),_++),i++})();var C=[],t=q.SHA256=O.extend({_doReset:function(){this._hash=new ee.init(l.slice(0))},_doProcessBlock:function(o,u){for(var i=this._hash.words,_=i[0],x=i[1],e=i[2],n=i[3],w=i[4],S=i[5],L=i[6],K=i[7],J=0;J<64;J++){if(J<16)C[J]=o[u+J]|0;else{var Q=C[J-15],ae=(Q<<25|Q>>>7)^(Q<<14|Q>>>18)^Q>>>3,se=C[J-2],ce=(se<<15|se>>>17)^(se<<13|se>>>19)^se>>>10;C[J]=ae+C[J-7]+ce+C[J-16]}var Oe=w&S^~w&L,qe=_&x^_&e^x&e,We=(_<<30|_>>>2)^(_<<19|_>>>13)^(_<<10|_>>>22),ze=(w<<26|w>>>6)^(w<<21|w>>>11)^(w<<7|w>>>25),Se=K+ze+Oe+h[J]+C[J],De=We+qe;K=L,L=S,S=w,w=n+Se|0,n=e,e=x,x=_,_=Se+De|0}i[0]=i[0]+_|0,i[1]=i[1]+x|0,i[2]=i[2]+e|0,i[3]=i[3]+n|0,i[4]=i[4]+w|0,i[5]=i[5]+S|0,i[6]=i[6]+L|0,i[7]=i[7]+K|0},_doFinalize:function(){var o=this._data,u=o.words,i=this._nDataBytes*8,_=o.sigBytes*8;return u[_>>>5]|=128<<24-_%32,u[(_+64>>>9<<4)+14]=b.floor(i/4294967296),u[(_+64>>>9<<4)+15]=i,o.sigBytes=u.length*4,this._process(),this._hash},clone:function(){var o=O.clone.call(this);return o._hash=this._hash.clone(),o}});E.SHA256=O._createHelper(t),E.HmacSHA256=O._createHmacHelper(t)}(Math),M.SHA256})}(ne)),ne.exports}var v={exports:{}},P;function re(){return P||(P=1,function(Z,oe){(function(M,b){Z.exports=b(W())})(a,function(M){(function(){var b=M,E=b.lib,B=E.Base,ee=b.enc,O=ee.Utf8,q=b.algo;q.HMAC=B.extend({init:function(l,h){l=this._hasher=new l.init,typeof h=="string"&&(h=O.parse(h));var C=l.blockSize,t=C*4;h.sigBytes>t&&(h=l.finalize(h)),h.clamp();for(var o=this._oKey=h.clone(),u=this._iKey=h.clone(),i=o.words,_=u.words,x=0;x<C;x++)i[x]^=1549556828,_[x]^=909522486;o.sigBytes=u.sigBytes=t,this.reset()},reset:function(){var l=this._hasher;l.reset(),l.update(this._iKey)},update:function(l){return this._hasher.update(l),this},finalize:function(l){var h=this._hasher,C=h.finalize(l);h.reset();var t=h.finalize(this._oKey.clone().concat(C));return t}})})()})}(v)),v.exports}(function(Z,oe){(function(M,b,E){Z.exports=b(W(),te(),re())})(a,function(M){return M.HmacSHA256})})($);var z=$.exports;return z}(),{A_CHAIN_CATEGORIES:c,A_CHAIN_FAMILIES:f,R_CHAIN_ID:p,R_CHAIN_NAME:d}=function(a){const U=["cosmos"],W=["mainnet","testnet"],ne=/^[a-z0-9][a-z0-9-]{2,64}$/,X=/^[\p{L}\p{S}](\p{Zs}?[\p{L}\p{N}\p{S}._:/-])+$/u;return a.A_CHAIN_CATEGORIES=W,a.A_CHAIN_FAMILIES=U,a.NB_MAX_MESSAGE=2097152,a.N_PX_HEIGHT_POPUP=600,a.N_PX_WIDTH_POPUP=360,a.R_CHAIN_ID=ne,a.R_CHAIN_NAME=X,Object.defineProperty(a,"__esModule",{value:!0}),a}({}),{locate_script:m}=function(a){function $(R){const N=chrome.runtime.getManifest();for(const U of N.content_scripts||[])for(const W of U.js??[])if(W.startsWith(R))return W;for(const U of N.web_accessible_resources||[])if(typeof U=="string"){if(U.startsWith(R))return U}else for(const W of U.resources)if(W.startsWith(R))return W;return null}return a.locate_script=$,Object.defineProperty(a,"__esModule",{value:!0}),a}({}),A=chrome.runtime,H=(a,...$)=>console.debug(`StarShell.ics-host: ${a}`,...$);H(`Launched on <${location.href}>`);class I extends Error{}let g,T=!1,D=!1;function V(a){throw D=!0,A.sendMessage({type:"panic",value:""+a}),new I(`StarShell threw a security error: "${a}"`)}function y(){if(D)throw new Error("StarShell withdrew wallet access from this website due to a security violation")}const F={async requestConnect(a){const{index:$,manifest:R}=a,N=te=>{g.postMessage({type:"respondConnect",value:{index:$,answer:{error:te}}})};if(typeof R!="object"||typeof R.schema!="string")return N("Invalid manifest structure");if(R.schema!=="1")return N("Unknown or unsupported manifest schema version");if(!Array.isArray(R.chains)||!R.chains.length)return N("No chains were specified in request");const{chains:U}=R,W=new Set,ne=[];for(let te=0;te<U.length;te++){const v=U[te],P=Z=>N(`${Z} at .chains[${te}]`);if(typeof v!="object"||typeof v.category!="string"||typeof v.family!="string"||typeof v.id!="string")return P("Invalid chain descriptor structure");if(!f.includes(v.family))continue;if(!c.includes(v.category))return P(`Invalid category value "${v.category}"; must be one of (${c.join(", ")})`);if(!p.test(v.id))return P(`Invalid chain id "${v.id}" for ${v.family} family; failed to match regular expression /${p.source}/`);if(v.name){if(!d.test(v.name))return P(`Invalid chain name "${v.name}"; failed to match regular expression /${d.source}/`);if(v.name.length>64)return P("Chain name too long")}const re=v.family+`
`+v.id;if(W.has(re))return P(`Duplicate chain IDs in '${v.family}' family: '${v.id}'`);const z=v.name||v.id;ne.push({...v,label:z})}A.sendMessage({type:"requestConnection",value:{chains:ne}});const X=[];X.push(null);for(const te of U){const v=new MessageChannel;await HostConnection.create(te,v.port1),X.push(v.port2)}g.postMessage({type:"respondConnect",value:{index:$,answer:{config:{features:a_features}}}},X)},reportWebsiteError(a){}};function G(a){const{type:$,value:R}=a.data,N=F[$];if(!N){console.error(`Received relay port message having an unregistered type "${$}"`);return}H("Received relay port message having registered type %o",a.data),N(R)}const k={establishChannel(a,$){if(y(),T)return V("Relay frame attempted to establish connection more than once");if(T=!0,!Y)return V("Reference to relay frame window not defined");if(!$||$.length!==1)return V("Expected exactly one MessagePort but none were transfered from relay frame");g=$[0],g.onmessage=G,g.postMessage({type:"acknowledgeChannel"}),window.postMessage({type:"ratifyGlobal"},window.origin)}};let Y,j;{const a={session:r,csurl:chrome.runtime.getURL("assets/src/script/mcs-relay.js")},$=document.createElement("script");$.setAttribute("type","application/json"),$.setAttribute("id","starshell-mcs-relay-payload"),$.textContent=JSON.stringify(a);const R=document.createElement("script"),N=m("assets/src/script/mcs-relay");if(!N)throw new Error("Unable to locate relay script!");R.src=chrome.runtime.getURL(N),R.type="module";const U=document.createElement("iframe"),W=document.createElement("div");W.style.display="none !important",W.attachShadow({mode:"closed"}).append(U);try{document.head.append(W)}catch{document.body.append(W)}Y=U.contentWindow,j=U.contentDocument,j.body.append($),j.body.append(R),H("Injected relay iframe")}Y.addEventListener("message",a=>{if(H("Observed relay window message %o",a),!a.isTrusted){console.warn("Ignored untrusted event %o",a);return}if(a.source!==a.target){console.warn("Ignored cross-window message %o",a);return}const $=a.target;if(window.origin!==a.origin||window!==$.parent||$.location.href!=="about:blank"){console.warn("Ignored message from 3rd party %o",a);return}const R=a.data;if(typeof R!="object"||typeof R.type!="string"){H("Ignored invalid message data %o",R);return}const{type:N,auth:U}=R,W=k[N];if(!W){console.error(`Received message having an unregistered type "${N}"`);return}if(typeof U!="string"){H("Ignored message missing auth data %o",R);return}if(JSON.stringify(s(JSON.stringify({...R,auth:void 0}),r))!==R.auth)return V("Relay frame sent invalid auth signature");H("Received message having registered type %o",a.data),W(null,a.ports)})}function ft({session:r}){const s=(y,...F)=>console.debug(`StarShell.mcs-ratifier: ${y}`,...F);s(`Launched on <${location.href}>`);const c=function(){var y=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},F={exports:{}};function G(X){throw new Error('Could not dynamically require "'+X+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var k={exports:{}},Y;function j(){return Y||(Y=1,function(X,te){(function(v,P){X.exports=P()})(y,function(){var v=v||function(P,re){var z;if(typeof window<"u"&&window.crypto&&(z=window.crypto),typeof self<"u"&&self.crypto&&(z=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(z=globalThis.crypto),!z&&typeof window<"u"&&window.msCrypto&&(z=window.msCrypto),!z&&typeof y<"u"&&y.crypto&&(z=y.crypto),!z&&typeof G=="function")try{z=require("crypto")}catch{}var Z=function(){if(z){if(typeof z.getRandomValues=="function")try{return z.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof z.randomBytes=="function")try{return z.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},oe=Object.create||function(){function t(){}return function(o){var u;return t.prototype=o,u=new t,t.prototype=null,u}}(),M={},b=M.lib={},E=b.Base=function(){return{extend:function(t){var o=oe(this);return t&&o.mixIn(t),(!o.hasOwnProperty("init")||this.init===o.init)&&(o.init=function(){o.$super.init.apply(this,arguments)}),o.init.prototype=o,o.$super=this,o},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var o in t)t.hasOwnProperty(o)&&(this[o]=t[o]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),B=b.WordArray=E.extend({init:function(t,o){t=this.words=t||[],o!=re?this.sigBytes=o:this.sigBytes=t.length*4},toString:function(t){return(t||O).stringify(this)},concat:function(t){var o=this.words,u=t.words,i=this.sigBytes,_=t.sigBytes;if(this.clamp(),i%4)for(var x=0;x<_;x++){var e=u[x>>>2]>>>24-x%4*8&255;o[i+x>>>2]|=e<<24-(i+x)%4*8}else for(var n=0;n<_;n+=4)o[i+n>>>2]=u[n>>>2];return this.sigBytes+=_,this},clamp:function(){var t=this.words,o=this.sigBytes;t[o>>>2]&=4294967295<<32-o%4*8,t.length=P.ceil(o/4)},clone:function(){var t=E.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var o=[],u=0;u<t;u+=4)o.push(Z());return new B.init(o,t)}}),ee=M.enc={},O=ee.Hex={stringify:function(t){for(var o=t.words,u=t.sigBytes,i=[],_=0;_<u;_++){var x=o[_>>>2]>>>24-_%4*8&255;i.push((x>>>4).toString(16)),i.push((x&15).toString(16))}return i.join("")},parse:function(t){for(var o=t.length,u=[],i=0;i<o;i+=2)u[i>>>3]|=parseInt(t.substr(i,2),16)<<24-i%8*4;return new B.init(u,o/2)}},q=ee.Latin1={stringify:function(t){for(var o=t.words,u=t.sigBytes,i=[],_=0;_<u;_++){var x=o[_>>>2]>>>24-_%4*8&255;i.push(String.fromCharCode(x))}return i.join("")},parse:function(t){for(var o=t.length,u=[],i=0;i<o;i++)u[i>>>2]|=(t.charCodeAt(i)&255)<<24-i%4*8;return new B.init(u,o)}},l=ee.Utf8={stringify:function(t){try{return decodeURIComponent(escape(q.stringify(t)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(t){return q.parse(unescape(encodeURIComponent(t)))}},h=b.BufferedBlockAlgorithm=E.extend({reset:function(){this._data=new B.init,this._nDataBytes=0},_append:function(t){typeof t=="string"&&(t=l.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(t){var o,u=this._data,i=u.words,_=u.sigBytes,x=this.blockSize,e=x*4,n=_/e;t?n=P.ceil(n):n=P.max((n|0)-this._minBufferSize,0);var w=n*x,S=P.min(w*4,_);if(w){for(var L=0;L<w;L+=x)this._doProcessBlock(i,L);o=i.splice(0,w),u.sigBytes-=S}return new B.init(o,S)},clone:function(){var t=E.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});b.Hasher=h.extend({cfg:E.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){h.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){t&&this._append(t);var o=this._doFinalize();return o},blockSize:16,_createHelper:function(t){return function(o,u){return new t.init(u).finalize(o)}},_createHmacHelper:function(t){return function(o,u){return new C.HMAC.init(t,u).finalize(o)}}});var C=M.algo={};return M}(Math);return v})}(k)),k.exports}var a={exports:{}},$;function R(){return $||($=1,function(X,te){(function(v,P){X.exports=P(j())})(y,function(v){return function(P){var re=v,z=re.lib,Z=z.WordArray,oe=z.Hasher,M=re.algo,b=[],E=[];(function(){function O(C){for(var t=P.sqrt(C),o=2;o<=t;o++)if(!(C%o))return!1;return!0}function q(C){return(C-(C|0))*4294967296|0}for(var l=2,h=0;h<64;)O(l)&&(h<8&&(b[h]=q(P.pow(l,1/2))),E[h]=q(P.pow(l,1/3)),h++),l++})();var B=[],ee=M.SHA256=oe.extend({_doReset:function(){this._hash=new Z.init(b.slice(0))},_doProcessBlock:function(O,q){for(var l=this._hash.words,h=l[0],C=l[1],t=l[2],o=l[3],u=l[4],i=l[5],_=l[6],x=l[7],e=0;e<64;e++){if(e<16)B[e]=O[q+e]|0;else{var n=B[e-15],w=(n<<25|n>>>7)^(n<<14|n>>>18)^n>>>3,S=B[e-2],L=(S<<15|S>>>17)^(S<<13|S>>>19)^S>>>10;B[e]=w+B[e-7]+L+B[e-16]}var K=u&i^~u&_,J=h&C^h&t^C&t,Q=(h<<30|h>>>2)^(h<<19|h>>>13)^(h<<10|h>>>22),ae=(u<<26|u>>>6)^(u<<21|u>>>11)^(u<<7|u>>>25),se=x+ae+K+E[e]+B[e],ce=Q+J;x=_,_=i,i=u,u=o+se|0,o=t,t=C,C=h,h=se+ce|0}l[0]=l[0]+h|0,l[1]=l[1]+C|0,l[2]=l[2]+t|0,l[3]=l[3]+o|0,l[4]=l[4]+u|0,l[5]=l[5]+i|0,l[6]=l[6]+_|0,l[7]=l[7]+x|0},_doFinalize:function(){var O=this._data,q=O.words,l=this._nDataBytes*8,h=O.sigBytes*8;return q[h>>>5]|=128<<24-h%32,q[(h+64>>>9<<4)+14]=P.floor(l/4294967296),q[(h+64>>>9<<4)+15]=l,O.sigBytes=q.length*4,this._process(),this._hash},clone:function(){var O=oe.clone.call(this);return O._hash=this._hash.clone(),O}});re.SHA256=oe._createHelper(ee),re.HmacSHA256=oe._createHmacHelper(ee)}(Math),v.SHA256})}(a)),a.exports}var N={exports:{}},U;function W(){return U||(U=1,function(X,te){(function(v,P){X.exports=P(j())})(y,function(v){(function(){var P=v,re=P.lib,z=re.Base,Z=P.enc,oe=Z.Utf8,M=P.algo;M.HMAC=z.extend({init:function(b,E){b=this._hasher=new b.init,typeof E=="string"&&(E=oe.parse(E));var B=b.blockSize,ee=B*4;E.sigBytes>ee&&(E=b.finalize(E)),E.clamp();for(var O=this._oKey=E.clone(),q=this._iKey=E.clone(),l=O.words,h=q.words,C=0;C<B;C++)l[C]^=1549556828,h[C]^=909522486;O.sigBytes=q.sigBytes=ee,this.reset()},reset:function(){var b=this._hasher;b.reset(),b.update(this._iKey)},update:function(b){return this._hasher.update(b),this},finalize:function(b){var E=this._hasher,B=E.finalize(b);E.reset();var ee=E.finalize(this._oKey.clone().concat(B));return ee}})})()})}(N)),N.exports}(function(X,te){(function(v,P,re){X.exports=P(j(),R(),W())})(y,function(v){return v.HmacSHA256})})(F);var ne=F.exports;return ne}();class f extends Error{}let p=!1;function d(y){throw p=!0,window.postMessage({type:"s2r:abort",value:{reason:""+y,signature:c(""+y,r)}}),new f(`StarShell threw a security error: "${y}"`)}function m(y){console.error(y),p=!0}const{addEventListener:A,Reflect:H,Reflect:{getOwnPropertyDescriptor:I,getPrototypeOf:g}}=window;function T(y,F,G=[]){try{const k=I.call(H,y,F);if(!k){G.push(y);const Y=g.call(H,y);return!Y||G.includes(Y)?null:T(Y,F,G)}return k}catch{return null}}function D(y,F,G=!1){try{const k=T(y,F);return k?"value"in k?k.value:G?y[F]:null:null}catch{return null}}const V={ratifyGlobal(){if(r){if(!T(window,"starshell"))return m("StarShell failed to ratify global since it is not defined.")}else return m("StarShell is refusing to ratify global since it never received a signing key from the extension.");const y=window.starshell;y.verify(G=>{if(p)return;if(G!==JSON.stringify(c("starshell",r)))return d("Invalid auth signature passed to ratifier");const k=y.verifiableStack();return{proof:k,signature:JSON.stringify(c(JSON.stringify(k),r))}})(y)}};window.addEventListener("message",y=>{if(s("Observed window message %o",y),!p&&window===D(y,"source",!0)){const F=D(y,"data",!0);let G;if(F&&typeof F=="object"&&typeof(G=D(F,"type"))=="string"){const k=V[G];if(!k)return;s("Received relay port message having registered type %o",y.data),k(F)}}})}function lt(r){const s=chrome.runtime.getManifest();for(const c of s.content_scripts||[])for(const f of c.js??[])if(f.startsWith(r))return f;for(const c of s.web_accessible_resources||[])if(typeof c=="string"){if(c.startsWith(r))return c}else for(const f of c.resources)if(f.startsWith(r))return f;return null}const ut=["file://*/*","http://*/*","https://*/*"],dt={matches:ut,runAt:"document_start",persistAcrossSessions:!0,allFrames:!0,world:"MAIN"},ht={mcs_keplr(r){return{...dt,id:"keplr_polyfill",js:[lt("assets/src/script/mcs-keplr")],persistAcrossSessions:!0,...r}}},xe={blocked:!0};function Ce(r,s){let c;try{c=new RegExp(r.matches)}catch{return console.error(`Failed to parse policy match pattern "${r.matches}"`),!1}if(c.test(s.host)&&r.except){let f;try{f=new RegExp(r.except)}catch{return console.error(`Failed to parse policy match pattern "${r.except}"`),!1}if(f.test(s.host))return!1}return!0}const Ne=Me({store:Fe,class:class extends je{static forApp(s){return Ne.open(c=>c.forApp(s))}forApp(s){let c=!1;for(const f of this._w_cache.hq)if(Ce(f,s)){if(f.action==="block")return xe;console.error(`Unknown hq policy action "${f.action}"`);continue}for(const f of this._w_cache.user)if(Ce(f,s)){if(f.action==="block")return xe;if(f.action==="trust")c=!0;else{console.error(`Unknown policy action "${f.action}"`);continue}}return{blocked:!1,trusted:c}}}}),ye=360,we=600;async function pt(r){const s=chrome.runtime.getURL("src/entry/flow.html"),c=s+"?"+new URLSearchParams(r).toString(),[f,p]=await Promise.all([chrome.system.display.getInfo(),(async()=>{const g=(await chrome.storage.session.get(["display_info"]))?.display_info;if(g)return g;chrome.windows.create({type:"popup",url:s+"?"+new URLSearchParams({headless:"info"}).toString(),focused:!0,width:ye,height:we});try{return(await _t("session","display_info",5*Ge))?.newValue}catch{}})()]),d={};for(const g of f)g.isEnabled&&(d[g.bounds.width+":"+g.bounds.height]=g);let m={};if(p){const g=p.width+":"+p.height,T=d[g];T&&(m={left:T.bounds.left+Math.round(p.width/2-ye/2),top:T.bounds.top+Math.round(p.height*.45-we/2)})}const A=await chrome.windows.create({type:"popup",url:c,focused:!0,width:ye,height:we,...m});if(typeof A.id!="number")throw new Error("Failed to create popup window");if(!await chrome.windows.get(A.id,{windowTypes:["popup"]}))throw new Error("Failed to locate popup window");const I=await new Promise(g=>{chrome.tabs.onUpdated.addListener(function T(D,V,y){A.id===y.windowId&&typeof D=="number"&&V.status==="complete"&&(chrome.tabs.onUpdated.removeListener(T),g(y))})});return{window:A,tab:I}}async function de(r,s=""){const c=`flow_${crypto.randomUUID()}`;await Ke("flow");const{window:f,tab:p}=await pt({comm:"broadcast",name:c}),d=new BroadcastChannel(c);return new Promise(m=>{function A(g){chrome.windows.onRemoved.removeListener(I),d.removeEventListener("message",H),Xe("flow"),m(g)}function H(g){const T=g.data;T.type==="completeFlow"&&(chrome.windows.remove(f.id),A(T.value.answer))}d.onmessage=H;function I(g){g===f.id&&A(!1)}chrome.windows.onRemoved.addListener(I,{windowTypes:["popup"]}),d.postMessage(r.flow)})}const Le={sync:{},local:{},session:{},managed:{}};function _t(r,s,c=0){return new Promise((f,p)=>{const d=Le[r],m=d[s]=d[s]||[];let A=-1,H=0;c>0&&(H=globalThis.setTimeout(()=>{m.splice(A,1),p(new Error("Timed out"))},c)),A=m.push(I=>{globalThis.clearTimeout(H),f(I)})})}function yt(r,s,c){const f=Le[r],p=f[s];if(p?.length){f[s]=[];for(const d of p)d(c)}}chrome.storage.onChanged.addListener((r,s)=>{const f={sync:{async keplr_polyfill(p){const d=chrome.scripting,m=ht.mcs_keplr(),A=!!(await d.getRegisteredContentScripts({ids:[m.id]})).length;p.newValue===!0?A||await d.registerContentScripts([m]):A||await d.unregisterContentScripts({ids:[m.id]})}},local:{},session:{},managed:{}}[s];if(f)for(const p in r){const d=r[p];yt(s,p,d);const m=f[p];m&&m(d)}});function Ie(r){const{protocol:s,host:c}=new URL(r);return[(s||"").replace(/:$/,""),c]}function he(r,s){return console.warn(`${s}; blocked request from <${r.url}>`),!0}async function He(r,s,c){if(r==="http"){if(!it.test(s))return he(c,"Non-secure HTTP contexts are not allowed to connect to wallet except for localhost")}else if(r==="file"){if(!await at.get("allow_file_urls"))return he(c,"File URLs are not allowed to connect to wallet, unless 'allow_file_urls' setting is enabled")}else if(r!=="https")return he(c,`Scheme not allowed "${r}"`);return!1}function wt(r=64){const s=new Uint8Array(r);return crypto.getRandomValues(s),Array.from(s).map(c=>c.toString(16).padStart(2,"0")).join("")}const pe={panic(r,s){},async requestAdvertisement(r,s,c){const f=s.tab.id;if(!s.url){console.debug("Silently ignoring advertisement request from unknown source");return}const[p,d]=Ie(s.url),m={tabId:f,href:s.url+""};if(console.info("get root key"),!await ge.getRootKey()){console.info("no root key");const I=await de({flow:{type:"authenticate",page:m}});return console.info("flow completed"),I?await pe.requestAdvertisement(r,s,c):void 0}if(console.info("root key exists"),await He(p,d,s))return;console.info("app passed scheme check");{let I=await ot.get(d,p),g=!1;I?g=!0:I={scheme:p,host:d,connections:{}};const T=await Ne.forApp(I);if(console.info("got policy for app %o",T),T.blocked)return he(s,"App connection blocked by policy");if(!g&&!T.trusted){if(await de({flow:{type:"requestAdvertisement",value:{app:I},page:m}}))return await pe.requestAdvertisement(r,s,c);console.debug("User cancelled request");return}}console.debug(`Allowing <${s.url}> to receive advertisement`);const H={session:wt()};chrome.scripting.executeScript({target:{tabId:f},func:ct,args:[H],world:"ISOLATED"}),chrome.scripting.executeScript({target:{tabId:f},func:ft,args:[H],world:"MAIN"}),c(H)},async flowBroadcast(r,s,c){const{key:f,config:p}=r;if(!s.url){console.debug("Silently ignoring advertisement request from unknown source");return}const d=p.flow.page={tabId:s.tab.id,href:s.url||p.flow.page?.href||""};if(console.info("get root key"),!await ge.getRootKey()){console.info("no root key");const g=await de({flow:{type:"authenticate",page:d}});return console.info("flow completed"),g?await pe.flowBroadcast(r,s,c):void 0}const[A,H]=Ie(s.url);if(await He(A,H,s))return;console.info("app passed scheme check");const I={scheme:A,host:H,connections:{}};p.flow.value.app=I,de(p,f)}},gt={wake(){ue()},async bankSend(r,s,c){c(!0);const f=await fe.at(r.network),p=await _e.at(f.chain),d=fe.activate(f,p),[,m]=await Pe.find(r.sender,p);await be(`${f.chain}
${f.rpcHost}
`,d,p,m,r.sender,"Send");const A=await d.bankSend(r.sender,r.recipient,r.coin,BigInt(r.amount),BigInt(r.limit),r.price,r.memo,st.BROADCAST_MODE_SYNC,p),H=`outgoing:${A.hash||crypto.randomUUID()}`;let I="",g="";A.code!==0?(I="\u274C Network rejected transaction",g=`Error #${A.code}:: ${A.raw_log}`):A.hash?(I="Transaction sent to network",g=`Waiting for confirmation on ${p.name}...`):(I="\u26A0\uFE0F Network issues",g="Transaction was accepted but might have gotten lost"),le(H,{title:I,message:g}),await ve.record(A.hash,{type:"tx_out",time:Date.now(),data:A})}},vt=(r,s,c)=>{if(console.debug("Service received message %o",r),typeof r=="object"&&typeof r.type=="string"){let f=pe;if(!s.tab||typeof s.tab.id!="number")if(s.origin&&chrome.runtime.id===s.id)f=gt;else{console.error("Refusing request from unknown sender");return}const p=r.type,d=f[p];if(d){const m=d(r.value,s,c);if(m&&typeof m.then=="function")return!0}}};chrome.runtime.onMessage.addListener(vt);chrome.runtime.onInstalled.addListener(async()=>{});chrome.alarms.clearAll(()=>{console.warn("clear all"),chrome.alarms.create("periodicChainQueries",{periodInMinutes:2}),chrome.alarms.onAlarm.addListener(r=>{switch(r.name){case"periodicChainQueries":{ue();break}}}),ue()});let me=!1;const ie={},Ue=()=>setTimeout(()=>{me=!1,ue()},30*Qe);let mt=Ue();function le(r,s){chrome.notifications.create(r,{type:"basic",priority:1,iconUrl:"/media/vendor/logo-192px.png",...s})}async function be(r,s,c,f,p,d){const m=r+":"+d;if(_e.pathFrom(c),ie[m])try{ie[m]()}catch{}return ie[m]=await s[`on${d}`](p,async(A,H)=>{if(A)delete ie[m],console.error(A);else if(H){const I=JSON.parse(H.result?.log||"[]");if(I?.length){for(const g of I[0].events)if(g.type==="transfer"){const T=Ye(g);let D=T.amount;const V=Ze.exec(T.amount);if(!V)et({text:`Failed to parse transfer amount "${T.amount}"`});else{const[,j,a]=V;for(const[$,R]of Te(c.coins))if(a===R.denom){const N=new tt(j).shiftedBy(-R.decimals).toNumber();D=`${rt(N,!0)} ${$}`;break}}let y=T.sender;const F=Be.pathForContact(y,c.family),G=await Be.getContact(F);G?y=G.name:y=nt(y);const k=H.hash,Y=(d==="Send"?"outgoing":"incoming")+":"+k;if(d==="Receive"){le(Y,{title:`\u{1F4B8} Received ${D} on ${c.name}`,message:`${y} sent ${D} to your ${f.name} account`});const j=await s.downloadTxn(k);await ve.record(k,{type:"tx_in",time:new Date(j.timestamp).getTime(),data:j})}else if(d==="Send"){le(Y,{title:`\u2705 Sent ${D} on ${c.name}`,message:`${D} sent to ${y} from ${f.name} account`});const j=await s.downloadTxn(k);await ve.record(k,{type:"tx_out",time:new Date(j.timestamp).getTime(),data:j})}}}}})}const Re=1e3;let Ee=0,ke=0;function bt(){Date.now()-ke>Re*1.5&&(globalThis.clearInterval(Ee),Ee=globalThis.setInterval(()=>{$e({type:"heartbeat"}),ke=Date.now()},Re))}async function ue(r=!1){if(bt(),await Ve.updateAll(),!await ge.getRootKey()||me)return;me=!0,clearTimeout(mt);const[s,c,f]=await Promise.all([Pe.read(),_e.read(),fe.read()]),p={};for(const[d,m]of f.entries())p[m.chain]=p[m.chain]||m;for(const[d,m]of Te(p)){if(d==="/family.cosmos/chain.theta-testnet-001"||ie[d])continue;const A=c.at(d),H=fe.pathFrom(m),I=fe.activate(m,A),g=[];try{ie[d]=await I.listen(["tm.event='NewBlock'"],(T,D)=>{if(T)delete ie[d];else if(D){g.push(Date.now());const V=D.block;for(;g.length>16;)g.shift();$e({type:"blockInfo",value:{header:V.header,chain:d,network:H,recents:g,txCount:V.data.txs.length}})}}),console.info({h_sockets:ie})}catch(T){Ae({title:"Websocket Error",error:T})}for(const[T,D]of s.entries()){const V=_e.addressFor(D.pubkey,A);if(I.hasRpc){const y=d+`
`+m.rpcHost+`
`;if(!ie[y])try{await Promise.all([be(y,I,A,D,V,"Receive"),be(y,I,A,D,V,"Send")])}catch(a){Ae({title:"Provider Error",error:a})}const G=[],k=[];for await(const a of I.synchronizeAll(V))a.type==="tx_in"?G.push(a):a.type==="tx_out"&&k.push(a);const Y=k.length,j=G.length;if(Y>=1)if(Y<=0)for(const a of k);else le(crypto.randomUUID(),{title:`\u2705 Sent ${Y===1?"a transfer":`${j} transfers`}`,message:"While you were away..."});if(j>=1)if(j<=0)for(const a of k);else le(crypto.randomUUID(),{title:`\u{1F4B8} Received ${j===1?"a transfer":`${j} transfers`}`,message:"While you were away..."})}}}Ue()}Je({login(){ue(!0)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
