var Qe=Object.defineProperty;var le=(A,e,t)=>e in A?Qe(A,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):A[e]=t;var QA=(A,e,t)=>(le(A,typeof e!="symbol"?e+"":e,t),t);function noop$1(){}const identity=A=>A;function assign(A,e){for(const t in e)A[t]=e[t];return A}function is_promise(A){return A&&typeof A=="object"&&typeof A.then=="function"}function run(A){return A()}function blank_object(){return Object.create(null)}function run_all(A){A.forEach(run)}function is_function(A){return typeof A=="function"}function safe_not_equal(A,e){return A!=A?e==e:A!==e||A&&typeof A=="object"||typeof A=="function"}let src_url_equal_anchor;function src_url_equal(A,e){return src_url_equal_anchor||(src_url_equal_anchor=document.createElement("a")),src_url_equal_anchor.href=e,A===src_url_equal_anchor.href}function is_empty(A){return Object.keys(A).length===0}function subscribe(A,...e){if(A==null)return noop$1;const t=A.subscribe(...e);return t.unsubscribe?()=>t.unsubscribe():t}function component_subscribe(A,e,t){A.$$.on_destroy.push(subscribe(e,t))}function create_slot(A,e,t,i){if(A){const n=get_slot_context(A,e,t,i);return A[0](n)}}function get_slot_context(A,e,t,i){return A[1]&&i?assign(t.ctx.slice(),A[1](i(e))):t.ctx}function get_slot_changes(A,e,t,i){if(A[2]&&i){const n=A[2](i(t));if(e.dirty===void 0)return n;if(typeof n=="object"){const g=[],I=Math.max(e.dirty.length,n.length);for(let o=0;o<I;o+=1)g[o]=e.dirty[o]|n[o];return g}return e.dirty|n}return e.dirty}function update_slot_base(A,e,t,i,n,g){if(n){const I=get_slot_context(e,t,i,g);A.p(I,n)}}function get_all_dirty_from_scope(A){if(A.ctx.length>32){const e=[],t=A.ctx.length/32;for(let i=0;i<t;i++)e[i]=-1;return e}return-1}function compute_slots(A){const e={};for(const t in A)e[t]=!0;return e}function null_to_empty(A){return A??""}function set_store_value(A,e,t){return A.set(t),e}const is_client=typeof window<"u";let now=is_client?()=>window.performance.now():()=>Date.now(),raf=is_client?A=>requestAnimationFrame(A):noop$1;const tasks=new Set;function run_tasks(A){tasks.forEach(e=>{e.c(A)||(tasks.delete(e),e.f())}),tasks.size!==0&&raf(run_tasks)}function loop(A){let e;return tasks.size===0&&raf(run_tasks),{promise:new Promise(t=>{tasks.add(e={c:A,f:t})}),abort(){tasks.delete(e)}}}function append(A,e){A.appendChild(e)}function get_root_for_style(A){if(!A)return document;const e=A.getRootNode?A.getRootNode():A.ownerDocument;return e&&e.host?e:A.ownerDocument}function append_empty_stylesheet(A){const e=element("style");return append_stylesheet(get_root_for_style(A),e),e.sheet}function append_stylesheet(A,e){append(A.head||A,e)}function insert(A,e,t){A.insertBefore(e,t||null)}function detach(A){A.parentNode.removeChild(A)}function destroy_each(A,e){for(let t=0;t<A.length;t+=1)A[t]&&A[t].d(e)}function element(A){return document.createElement(A)}function svg_element(A){return document.createElementNS("http://www.w3.org/2000/svg",A)}function text(A){return document.createTextNode(A)}function space(){return text(" ")}function empty(){return text("")}function listen(A,e,t,i){return A.addEventListener(e,t,i),()=>A.removeEventListener(e,t,i)}function prevent_default(A){return function(e){return e.preventDefault(),A.call(this,e)}}function attr(A,e,t){t==null?A.removeAttribute(e):A.getAttribute(e)!==t&&A.setAttribute(e,t)}function set_attributes(A,e){const t=Object.getOwnPropertyDescriptors(A.__proto__);for(const i in e)e[i]==null?A.removeAttribute(i):i==="style"?A.style.cssText=e[i]:i==="__value"?A.value=A[i]=e[i]:t[i]&&t[i].set?A[i]=e[i]:attr(A,i,e[i])}function set_custom_element_data(A,e,t){e in A?A[e]=typeof A[e]=="boolean"&&t===""?!0:t:attr(A,e,t)}function children(A){return Array.from(A.childNodes)}function set_data(A,e){e=""+e,A.wholeText!==e&&(A.data=e)}function set_input_value(A,e){A.value=e??""}function set_style(A,e,t,i){t===null?A.style.removeProperty(e):A.style.setProperty(e,t,i?"important":"")}let crossorigin;function is_crossorigin(){if(crossorigin===void 0){crossorigin=!1;try{typeof window<"u"&&window.parent&&window.parent.document}catch{crossorigin=!0}}return crossorigin}function add_resize_listener(A,e){getComputedStyle(A).position==="static"&&(A.style.position="relative");const i=element("iframe");i.setAttribute("style","display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"),i.setAttribute("aria-hidden","true"),i.tabIndex=-1;const n=is_crossorigin();let g;return n?(i.src="data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>",g=listen(window,"message",I=>{I.source===i.contentWindow&&e()})):(i.src="about:blank",i.onload=()=>{g=listen(i.contentWindow,"resize",e)}),append(A,i),()=>{(n||g&&i.contentWindow)&&g(),detach(i)}}function toggle_class(A,e,t){A.classList[t?"add":"remove"](e)}function custom_event(A,e,{bubbles:t=!1,cancelable:i=!1}={}){const n=document.createEvent("CustomEvent");return n.initCustomEvent(A,t,i,e),n}class HtmlTag{constructor(e=!1){this.is_svg=!1,this.is_svg=e,this.e=this.n=null}c(e){this.h(e)}m(e,t,i=null){this.e||(this.is_svg?this.e=svg_element(t.nodeName):this.e=element(t.nodeName),this.t=t,this.c(e)),this.i(i)}h(e){this.e.innerHTML=e,this.n=Array.from(this.e.childNodes)}i(e){for(let t=0;t<this.n.length;t+=1)insert(this.t,this.n[t],e)}p(e){this.d(),this.h(e),this.i(this.a)}d(){this.n.forEach(detach)}}const managed_styles=new Map;let active=0;function hash(A){let e=5381,t=A.length;for(;t--;)e=(e<<5)-e^A.charCodeAt(t);return e>>>0}function create_style_information(A,e){const t={stylesheet:append_empty_stylesheet(e),rules:{}};return managed_styles.set(A,t),t}function create_rule(A,e,t,i,n,g,I,o=0){const a=16.666/i;let r=`{
`;for(let E=0;E<=1;E+=a){const f=e+(t-e)*g(E);r+=E*100+`%{${I(f,1-f)}}
`}const s=r+`100% {${I(t,1-t)}}
}`,B=`__svelte_${hash(s)}_${o}`,C=get_root_for_style(A),{stylesheet:l,rules:c}=managed_styles.get(C)||create_style_information(C,A);c[B]||(c[B]=!0,l.insertRule(`@keyframes ${B} ${s}`,l.cssRules.length));const Q=A.style.animation||"";return A.style.animation=`${Q?`${Q}, `:""}${B} ${i}ms linear ${n}ms 1 both`,active+=1,B}function delete_rule(A,e){const t=(A.style.animation||"").split(", "),i=t.filter(e?g=>g.indexOf(e)<0:g=>g.indexOf("__svelte")===-1),n=t.length-i.length;n&&(A.style.animation=i.join(", "),active-=n,active||clear_rules())}function clear_rules(){raf(()=>{active||(managed_styles.forEach(A=>{const{stylesheet:e}=A;let t=e.cssRules.length;for(;t--;)e.deleteRule(t);A.rules={}}),managed_styles.clear())})}let current_component;function set_current_component(A){current_component=A}function get_current_component(){if(!current_component)throw new Error("Function called outside component initialization");return current_component}function beforeUpdate(A){get_current_component().$$.before_update.push(A)}function onMount(A){get_current_component().$$.on_mount.push(A)}function afterUpdate(A){get_current_component().$$.after_update.push(A)}function onDestroy(A){get_current_component().$$.on_destroy.push(A)}function createEventDispatcher(){const A=get_current_component();return(e,t,{cancelable:i=!1}={})=>{const n=A.$$.callbacks[e];if(n){const g=custom_event(e,t,{cancelable:i});return n.slice().forEach(I=>{I.call(A,g)}),!g.defaultPrevented}return!0}}function setContext(A,e){return get_current_component().$$.context.set(A,e),e}function getContext(A){return get_current_component().$$.context.get(A)}function getAllContexts(){return get_current_component().$$.context}function bubble(A,e){const t=A.$$.callbacks[e.type];t&&t.slice().forEach(i=>i.call(this,e))}const dirty_components=[],binding_callbacks=[],render_callbacks=[],flush_callbacks=[],resolved_promise=Promise.resolve();let update_scheduled=!1;function schedule_update(){update_scheduled||(update_scheduled=!0,resolved_promise.then(flush))}function tick(){return schedule_update(),resolved_promise}function add_render_callback(A){render_callbacks.push(A)}function add_flush_callback(A){flush_callbacks.push(A)}const seen_callbacks=new Set;let flushidx=0;function flush(){const A=current_component;do{for(;flushidx<dirty_components.length;){const e=dirty_components[flushidx];flushidx++,set_current_component(e),update(e.$$)}for(set_current_component(null),dirty_components.length=0,flushidx=0;binding_callbacks.length;)binding_callbacks.pop()();for(let e=0;e<render_callbacks.length;e+=1){const t=render_callbacks[e];seen_callbacks.has(t)||(seen_callbacks.add(t),t())}render_callbacks.length=0}while(dirty_components.length);for(;flush_callbacks.length;)flush_callbacks.pop()();update_scheduled=!1,seen_callbacks.clear(),set_current_component(A)}function update(A){if(A.fragment!==null){A.update(),run_all(A.before_update);const e=A.dirty;A.dirty=[-1],A.fragment&&A.fragment.p(A.ctx,e),A.after_update.forEach(add_render_callback)}}let promise;function wait(){return promise||(promise=Promise.resolve(),promise.then(()=>{promise=null})),promise}function dispatch(A,e,t){A.dispatchEvent(custom_event(`${e?"intro":"outro"}${t}`))}const outroing=new Set;let outros;function group_outros(){outros={r:0,c:[],p:outros}}function check_outros(){outros.r||run_all(outros.c),outros=outros.p}function transition_in(A,e){A&&A.i&&(outroing.delete(A),A.i(e))}function transition_out(A,e,t,i){if(A&&A.o){if(outroing.has(A))return;outroing.add(A),outros.c.push(()=>{outroing.delete(A),i&&(t&&A.d(1),i())}),A.o(e)}else i&&i()}const null_transition={duration:0};function create_out_transition(A,e,t){let i=e(A,t),n=!0,g;const I=outros;I.r+=1;function o(){const{delay:a=0,duration:r=300,easing:s=identity,tick:B=noop$1,css:C}=i||null_transition;C&&(g=create_rule(A,1,0,r,a,s,C));const l=now()+a,c=l+r;add_render_callback(()=>dispatch(A,!1,"start")),loop(Q=>{if(n){if(Q>=c)return B(0,1),dispatch(A,!1,"end"),--I.r||run_all(I.c),!1;if(Q>=l){const E=s((Q-l)/r);B(1-E,E)}}return n})}return is_function(i)?wait().then(()=>{i=i(),o()}):o(),{end(a){a&&i.tick&&i.tick(1,0),n&&(g&&delete_rule(A,g),n=!1)}}}function create_bidirectional_transition(A,e,t,i){let n=e(A,t),g=i?0:1,I=null,o=null,a=null;function r(){a&&delete_rule(A,a)}function s(C,l){const c=C.b-g;return l*=Math.abs(c),{a:g,b:C.b,d:c,duration:l,start:C.start,end:C.start+l,group:C.group}}function B(C){const{delay:l=0,duration:c=300,easing:Q=identity,tick:E=noop$1,css:f}=n||null_transition,u={start:now()+l,b:C};C||(u.group=outros,outros.r+=1),I||o?o=u:(f&&(r(),a=create_rule(A,g,C,c,l,Q,f)),C&&E(0,1),I=s(u,c),add_render_callback(()=>dispatch(A,C,"start")),loop(h=>{if(o&&h>o.start&&(I=s(o,c),o=null,dispatch(A,I.b,"start"),f&&(r(),a=create_rule(A,g,I.b,I.duration,0,Q,n.css))),I){if(h>=I.end)E(g=I.b,1-g),dispatch(A,I.b,"end"),o||(I.b?r():--I.group.r||run_all(I.group.c)),I=null;else if(h>=I.start){const p=h-I.start;g=I.a+I.d*Q(p/I.duration),E(g,1-g)}}return!!(I||o)}))}return{run(C){is_function(n)?wait().then(()=>{n=n(),B(C)}):B(C)},end(){r(),I=o=null}}}function handle_promise(A,e){const t=e.token={};function i(n,g,I,o){if(e.token!==t)return;e.resolved=o;let a=e.ctx;I!==void 0&&(a=a.slice(),a[I]=o);const r=n&&(e.current=n)(a);let s=!1;e.block&&(e.blocks?e.blocks.forEach((B,C)=>{C!==g&&B&&(group_outros(),transition_out(B,1,1,()=>{e.blocks[C]===B&&(e.blocks[C]=null)}),check_outros())}):e.block.d(1),r.c(),transition_in(r,1),r.m(e.mount(),e.anchor),s=!0),e.block=r,e.blocks&&(e.blocks[g]=r),s&&flush()}if(is_promise(A)){const n=get_current_component();if(A.then(g=>{set_current_component(n),i(e.then,1,e.value,g),set_current_component(null)},g=>{if(set_current_component(n),i(e.catch,2,e.error,g),set_current_component(null),!e.hasCatch)throw g}),e.current!==e.pending)return i(e.pending,0),!0}else{if(e.current!==e.then)return i(e.then,1,e.value,A),!0;e.resolved=A}}function update_await_block_branch(A,e,t){const i=e.slice(),{resolved:n}=A;A.current===A.then&&(i[A.value]=n),A.current===A.catch&&(i[A.error]=n),A.block.p(i,t)}function outro_and_destroy_block(A,e){transition_out(A,1,1,()=>{e.delete(A.key)})}function update_keyed_each(A,e,t,i,n,g,I,o,a,r,s,B){let C=A.length,l=g.length,c=C;const Q={};for(;c--;)Q[A[c].key]=c;const E=[],f=new Map,u=new Map;for(c=l;c--;){const H=B(n,g,c),M=t(H);let d=I.get(M);d?i&&d.p(H,e):(d=r(M,H),d.c()),f.set(M,E[c]=d),M in Q&&u.set(M,Math.abs(c-Q[M]))}const h=new Set,p=new Set;function S(H){transition_in(H,1),H.m(o,s),I.set(H.key,H),s=H.first,l--}for(;C&&l;){const H=E[l-1],M=A[C-1],d=H.key,y=M.key;H===M?(s=H.first,C--,l--):f.has(y)?!I.has(d)||h.has(d)?S(H):p.has(y)?C--:u.get(d)>u.get(y)?(p.add(d),S(H)):(h.add(y),C--):(a(M,I),C--)}for(;C--;){const H=A[C];f.has(H.key)||a(H,I)}for(;l;)S(E[l-1]);return E}function get_spread_update(A,e){const t={},i={},n={$$scope:1};let g=A.length;for(;g--;){const I=A[g],o=e[g];if(o){for(const a in I)a in o||(i[a]=1);for(const a in o)n[a]||(t[a]=o[a],n[a]=1);A[g]=o}else for(const a in I)n[a]=1}for(const I in i)I in t||(t[I]=void 0);return t}function get_spread_object(A){return typeof A=="object"&&A!==null?A:{}}function bind(A,e,t){const i=A.$$.props[e];i!==void 0&&(A.$$.bound[i]=t,t(A.$$.ctx[i]))}function create_component(A){A&&A.c()}function mount_component(A,e,t,i){const{fragment:n,on_mount:g,on_destroy:I,after_update:o}=A.$$;n&&n.m(e,t),i||add_render_callback(()=>{const a=g.map(run).filter(is_function);I?I.push(...a):run_all(a),A.$$.on_mount=[]}),o.forEach(add_render_callback)}function destroy_component(A,e){const t=A.$$;t.fragment!==null&&(run_all(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function make_dirty(A,e){A.$$.dirty[0]===-1&&(dirty_components.push(A),schedule_update(),A.$$.dirty.fill(0)),A.$$.dirty[e/31|0]|=1<<e%31}function init(A,e,t,i,n,g,I,o=[-1]){const a=current_component;set_current_component(A);const r=A.$$={fragment:null,ctx:null,props:g,update:noop$1,not_equal:n,bound:blank_object(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(a?a.$$.context:[])),callbacks:blank_object(),dirty:o,skip_bound:!1,root:e.target||a.$$.root};I&&I(r.root);let s=!1;if(r.ctx=t?t(A,e.props||{},(B,C,...l)=>{const c=l.length?l[0]:C;return r.ctx&&n(r.ctx[B],r.ctx[B]=c)&&(!r.skip_bound&&r.bound[B]&&r.bound[B](c),s&&make_dirty(A,B)),C}):[],r.update(),s=!0,run_all(r.before_update),r.fragment=i?i(r.ctx):!1,e.target){if(e.hydrate){const B=children(e.target);r.fragment&&r.fragment.l(B),B.forEach(detach)}else r.fragment&&r.fragment.c();e.intro&&transition_in(A.$$.fragment),mount_component(A,e.target,e.anchor,e.customElement),flush()}set_current_component(a)}class SvelteComponent{$destroy(){destroy_component(this,1),this.$destroy=noop$1}$on(e,t){const i=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return i.push(t),()=>{const n=i.indexOf(t);n!==-1&&i.splice(n,1)}}$set(e){this.$$set&&!is_empty(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const F_NOOP=()=>{},proper=A=>A.split(/\s+/g).map(e=>e[0].toUpperCase()+e.slice(1)).join(" ");function objects_might_differ(A,e){const t=Object.keys(A),i=Object.keys(e);if(t.length!==i.length)return!0;for(const g in A)if(e[g]!==A[g])return!0;return!1}function fold(A,e){const t={};let i=0;for(const n of A)Object.assign(t,e(n,i++));return t}function ode(A){return Object.entries(A)}function ofe(A){return Object.fromEntries(A)}function oderac(A,e,t=!1){return ode(A).reduce((i,[n,g],I)=>[...i,e(n,g,I)],[])}function oderom(A,e){return ode(A).reduce((t,[i,n])=>({...t,...e(i,n)}),{})}function timeout(A){return new Promise(e=>{setTimeout(()=>{e()},A)})}function forever(A){return new Promise(F_NOOP)}var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function commonjsRequire(A){throw new Error('Could not dynamically require "'+A+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var dist={};Object.defineProperty(dist,"__esModule",{value:!0});dist.bech32m=bech32=dist.bech32=void 0;const ALPHABET="qpzry9x8gf2tvdw0s3jn54khce6mua7l",ALPHABET_MAP={};for(let A=0;A<ALPHABET.length;A++){const e=ALPHABET.charAt(A);ALPHABET_MAP[e]=A}function polymodStep(A){const e=A>>25;return(A&33554431)<<5^-(e>>0&1)&996825010^-(e>>1&1)&642813549^-(e>>2&1)&513874426^-(e>>3&1)&1027748829^-(e>>4&1)&705979059}function prefixChk(A){let e=1;for(let t=0;t<A.length;++t){const i=A.charCodeAt(t);if(i<33||i>126)return"Invalid prefix ("+A+")";e=polymodStep(e)^i>>5}e=polymodStep(e);for(let t=0;t<A.length;++t){const i=A.charCodeAt(t);e=polymodStep(e)^i&31}return e}function convert(A,e,t,i){let n=0,g=0;const I=(1<<t)-1,o=[];for(let a=0;a<A.length;++a)for(n=n<<e|A[a],g+=e;g>=t;)g-=t,o.push(n>>g&I);if(i)g>0&&o.push(n<<t-g&I);else{if(g>=e)return"Excess padding";if(n<<t-g&I)return"Non-zero padding"}return o}function toWords(A){return convert(A,8,5,!0)}function fromWordsUnsafe(A){const e=convert(A,5,8,!1);if(Array.isArray(e))return e}function fromWords(A){const e=convert(A,5,8,!1);if(Array.isArray(e))return e;throw new Error(e)}function getLibraryFromEncoding(A){let e;A==="bech32"?e=1:e=734539939;function t(I,o,a){if(a=a||90,I.length+7+o.length>a)throw new TypeError("Exceeds length limit");I=I.toLowerCase();let r=prefixChk(I);if(typeof r=="string")throw new Error(r);let s=I+"1";for(let B=0;B<o.length;++B){const C=o[B];if(C>>5!==0)throw new Error("Non 5-bit word");r=polymodStep(r)^C,s+=ALPHABET.charAt(C)}for(let B=0;B<6;++B)r=polymodStep(r);r^=e;for(let B=0;B<6;++B){const C=r>>(5-B)*5&31;s+=ALPHABET.charAt(C)}return s}function i(I,o){if(o=o||90,I.length<8)return I+" too short";if(I.length>o)return"Exceeds length limit";const a=I.toLowerCase(),r=I.toUpperCase();if(I!==a&&I!==r)return"Mixed-case string "+I;I=a;const s=I.lastIndexOf("1");if(s===-1)return"No separator character for "+I;if(s===0)return"Missing prefix for "+I;const B=I.slice(0,s),C=I.slice(s+1);if(C.length<6)return"Data too short";let l=prefixChk(B);if(typeof l=="string")return l;const c=[];for(let Q=0;Q<C.length;++Q){const E=C.charAt(Q),f=ALPHABET_MAP[E];if(f===void 0)return"Unknown character "+E;l=polymodStep(l)^f,!(Q+6>=C.length)&&c.push(f)}return l!==e?"Invalid checksum for "+I:{prefix:B,words:c}}function n(I,o){const a=i(I,o);if(typeof a=="object")return a}function g(I,o){const a=i(I,o);if(typeof a=="object")return a;throw new Error(a)}return{decodeUnsafe:n,decode:g,encode:t,toWords,fromWordsUnsafe,fromWords}}var bech32=dist.bech32=getLibraryFromEncoding("bech32");dist.bech32m=getLibraryFromEncoding("bech32m");if(typeof window<"u"&&window?.location?.hostname==="localhost"){const A=globalThis.chrome;if(!A.storage){let e=function(t){return{async get(i){const n=Array.isArray(i)?i:[i];return fold(n,g=>{const I=localStorage.getItem(`chrome.${t}:${g}`);return{[g]:typeof I=="string"?JSON.parse(I):void 0}})},async set(i){for(const[n,g]of ode(i))localStorage.setItem(`chrome.${t}:${n}`,JSON.stringify(g))},async clear(){const i=localStorage.length;for(let n=i;n>=0;n--){const g=localStorage.key(n);!g||g.startsWith(`chrome.${t}:`)&&localStorage.removeItem(g)}},async remove(i){const n=Array.isArray(i)?i:[i];for(const g of n)localStorage.removeItem(`chrome.${t}:${g}`)}}};A.storage={local:e("local"),sync:e("sync"),session:e("session")}}A.runtime||(A.runtime={getURL(e){debugger},getManifest(){debugger},sendMessage(e){debugger},onMessage:{addListener(e){debugger},removeListener(){debugger}},onInstalled:{addListener(e){debugger},removeListener(){debugger}}}),A.tabs||(A.tabs={create(e){window.open(e.url,"_blank")},get(e){debugger},reload(e){debugger},onUpdated:{addEventListener(){debugger},removeListener(){debugger}}}),A.windows||(A.windows={create(e){window.open(e.url,"_blank")},get(e){debugger},remove(e){debugger},onRemoved:{addEventListener(){debugger},removeListener(){debugger}}}),A.extension||(A.extension={getBackgroundPage(){debugger}}),A.scripting||(A.scripting={executeScript(){debugger}})}const chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",base64ToBin=A=>{const e=new Uint8Array(123);for(let a=0;a<chars.length;a++)e[chars.charCodeAt(a)]=a;const t=A.length*.75,i=A.length,n=A[A.length-1]==="="?A[A.length-2]==="="?t-2:t-1:t,g=new ArrayBuffer(n),I=new Uint8Array(g);let o=0;for(let a=0;a<i;a+=4){const r=e[A.charCodeAt(a)],s=e[A.charCodeAt(a+1)],B=e[A.charCodeAt(a+2)],C=e[A.charCodeAt(a+3)];I[o++]=r<<2|s>>4,I[o++]=(s&15)<<4|B>>2,I[o++]=(B&3)<<6|C&63}return I},instantiateRustWasm=async(A,e,t,i,n,g)=>{const I=(await WebAssembly.instantiate(A,{[e]:{__wbindgen_throw:(h,p)=>{throw new Error(Array.from(B().subarray(h,h+p)).map(S=>String.fromCharCode(S)).join(""))}}})).instance.exports;let o,a,r;const s=()=>(r===void 0&&(r=I.__wbindgen_global_argument_ptr()),r);function B(){return(o===void 0||o.buffer!==I.memory.buffer)&&(o=new Uint8Array(I.memory.buffer)),o}const C=()=>((a===void 0||a.buffer!==I.memory.buffer)&&(a=new Uint32Array(I.memory.buffer)),a),l=h=>{const p=I.__wbindgen_malloc(h.length);return B().set(h,p),[p,h.length]},c=(h,p)=>B().subarray(h,h+p);return{final:h=>{const[p,S]=l(h),H=s();try{I[g](H,p,S);const M=C(),d=M[H/4],y=M[H/4+1],w=c(d,y).slice();return I.__wbindgen_free(d,y),w}finally{h.set(B().subarray(p/1,p/1+S)),I.__wbindgen_free(p,S)}},hash:h=>{const[p,S]=l(h),H=s();try{I[t](H,p,S);const M=C(),d=M[H/4],y=M[H/4+1],w=c(d,y).slice();return I.__wbindgen_free(d,y),w}finally{I.__wbindgen_free(p,S)}},init:()=>{const h=s();I[i](h);const p=C(),S=p[h/4],H=p[h/4+1],M=c(S,H).slice();return I.__wbindgen_free(S,H),M},update:(h,p)=>{const[S,H]=l(h),[M,d]=l(p),y=s();try{I[n](y,S,H,M,d);const w=C(),k=w[y/4],D=w[y/4+1],m=c(k,D).slice();return I.__wbindgen_free(k,D),m}finally{h.set(B().subarray(S/1,S/1+H)),I.__wbindgen_free(S,H),I.__wbindgen_free(M,d)}}}},ripemd160Base64Bytes="",SECP256K1_FLAGS_TYPE_CONTEXT=1<<0,SECP256K1_FLAGS_TYPE_COMPRESSION=1<<1,SECP256K1_FLAGS_BIT_CONTEXT_VERIFY=1<<8,SECP256K1_FLAGS_BIT_CONTEXT_SIGN=1<<9,SECP256K1_FLAGS_BIT_COMPRESSION=1<<8,SECP256K1_CONTEXT_VERIFY=SECP256K1_FLAGS_TYPE_CONTEXT|SECP256K1_FLAGS_BIT_CONTEXT_VERIFY,SECP256K1_CONTEXT_SIGN=SECP256K1_FLAGS_TYPE_CONTEXT|SECP256K1_FLAGS_BIT_CONTEXT_SIGN,SECP256K1_CONTEXT_NONE=SECP256K1_FLAGS_TYPE_CONTEXT,SECP256K1_EC_COMPRESSED=SECP256K1_FLAGS_TYPE_COMPRESSION|SECP256K1_FLAGS_BIT_COMPRESSION,SECP256K1_EC_UNCOMPRESSED=SECP256K1_FLAGS_TYPE_COMPRESSION;var ContextFlag;(function(A){A[A.NONE=SECP256K1_CONTEXT_NONE]="NONE",A[A.VERIFY=SECP256K1_CONTEXT_VERIFY]="VERIFY",A[A.SIGN=SECP256K1_CONTEXT_SIGN]="SIGN",A[A.BOTH=SECP256K1_CONTEXT_SIGN|SECP256K1_CONTEXT_VERIFY]="BOTH"})(ContextFlag||(ContextFlag={}));var CompressionFlag;(function(A){A[A.COMPRESSED=SECP256K1_EC_COMPRESSED]="COMPRESSED",A[A.UNCOMPRESSED=SECP256K1_EC_UNCOMPRESSED]="UNCOMPRESSED"})(CompressionFlag||(CompressionFlag={}));const secp256k1Base64Bytes="",wrapSecp256k1Wasm$1=(A,e,t)=>({contextCreate:i=>A.exports._secp256k1_context_create(i),contextRandomize:(i,n)=>A.exports._secp256k1_context_randomize(i,n),ecdh:(i,n,g,I)=>A.exports._secp256k1_ecdh(i,n,g,I),free:i=>A.exports._free(i),heapU32:t,heapU8:e,instance:A,malloc:i=>A.exports._malloc(i),mallocSizeT:i=>{const n=A.exports._malloc(4),g=n>>2;return t.set([i],g),n},mallocUint8Array:i=>{const n=A.exports._malloc(i.length);return e.set(i,n),n},privkeyTweakAdd:(i,n,g)=>A.exports._secp256k1_ec_privkey_tweak_add(i,n,g),privkeyTweakMul:(i,n,g)=>A.exports._secp256k1_ec_privkey_tweak_mul(i,n,g),pubkeyCreate:(i,n,g)=>A.exports._secp256k1_ec_pubkey_create(i,n,g),pubkeyParse:(i,n,g,I)=>A.exports._secp256k1_ec_pubkey_parse(i,n,g,I),pubkeySerialize:(i,n,g,I,o)=>A.exports._secp256k1_ec_pubkey_serialize(i,n,g,I,o),pubkeyTweakAdd:(i,n,g)=>A.exports._secp256k1_ec_pubkey_tweak_add(i,n,g),pubkeyTweakMul:(i,n,g)=>A.exports._secp256k1_ec_pubkey_tweak_mul(i,n,g),readHeapU8:(i,n)=>new Uint8Array(e.buffer,i,n),readSizeT:i=>{const n=i>>2;return t[n]},recover:(i,n,g,I)=>A.exports._secp256k1_ecdsa_recover(i,n,g,I),recoverableSignatureParse:(i,n,g,I)=>A.exports._secp256k1_ecdsa_recoverable_signature_parse_compact(i,n,g,I),recoverableSignatureSerialize:(i,n,g,I)=>A.exports._secp256k1_ecdsa_recoverable_signature_serialize_compact(i,n,g,I),schnorrSign:(i,n,g,I)=>A.exports._secp256k1_schnorrsig_sign(i,n,g,I),schnorrVerify:(i,n,g,I)=>A.exports._secp256k1_schnorrsig_verify(i,n,g,I),seckeyVerify:(i,n)=>A.exports._secp256k1_ec_seckey_verify(i,n),sign:(i,n,g,I,o)=>A.exports._secp256k1_ecdsa_sign(i,n,g,I,0,o),signRecoverable:(i,n,g,I)=>A.exports._secp256k1_ecdsa_sign_recoverable(i,n,g,I),signatureNormalize:(i,n,g)=>A.exports._secp256k1_ecdsa_signature_normalize(i,n,g),signatureParseCompact:(i,n,g)=>A.exports._secp256k1_ecdsa_signature_parse_compact(i,n,g),signatureParseDER:(i,n,g,I)=>A.exports._secp256k1_ecdsa_signature_parse_der(i,n,g,I),signatureSerializeCompact:(i,n,g)=>A.exports._secp256k1_ecdsa_signature_serialize_compact(i,n,g),signatureSerializeDER:(i,n,g,I)=>A.exports._secp256k1_ecdsa_signature_serialize_der(i,n,g,I),verify:(i,n,g,I)=>A.exports._secp256k1_ecdsa_verify(i,n,g,I)}),isLittleEndian=A=>{const i=new Int16Array(A),n=new Int32Array(A),g=new Uint8Array(A);return n[0]=1668509029,i[1]=25459,!(g[2]!==115||g[3]!==99)},alignMemory=(A,e)=>Math.ceil(e/A)*A,instantiateSecp256k1WasmBytes=async A=>{const I=new WebAssembly.Memory({initial:256,maximum:256});if(!isLittleEndian(I.buffer))throw new Error("Runtime error: expected the system to be little-endian.");const o=1024,a=o+67696+16,r=a,B=a+4+15&-16,C=alignMemory(16,B),c=C+5242880,Q=alignMemory(16,c),E=new Uint8Array(I.buffer),f=new Int32Array(I.buffer),u=new Uint32Array(I.buffer);f[r>>2]=Q;const h=16,p=16;let S;const M={env:{...{DYNAMICTOP_PTR:r,STACKTOP:C,___setErrNo:d=>(S!==void 0&&(f[S()>>2]=d),d),___syscall140:()=>{throw new Error("___syscall140")},___syscall146:()=>{throw new Error("___syscall146")},___syscall6:()=>{throw new Error("___syscall6")},_abort:(d="Secp256k1 Error")=>{throw new Error(d)},_emscripten_memcpy_big:(d,y,w)=>(E.set(E.subarray(y,y+w),d),d),abort:(d="Secp256k1 Error")=>{throw new Error(d)},abortOnCannotGrowMemory:()=>{throw new Error("Secp256k1 Error: abortOnCannotGrowMemory was called.")},enlargeMemory:()=>{throw new Error("Secp256k1 Error: enlargeMemory was called.")},getTotalMemory:()=>16777216},memory:I,memoryBase:o,table:new WebAssembly.Table({element:"anyfunc",initial:h,maximum:p}),tableBase:0},global:{Infinity:1/0,NaN:NaN}};return WebAssembly.instantiate(A,M).then(d=>(S=d.instance.exports.___errno_location,wrapSecp256k1Wasm$1(d.instance,E,u)))},getEmbeddedSecp256k1Binary=()=>base64ToBin(secp256k1Base64Bytes).buffer,instantiateSecp256k1Wasm=async()=>instantiateSecp256k1WasmBytes(getEmbeddedSecp256k1Binary()),sha256Base64Bytes="",instantiateRipemd160Bytes=async A=>{const e=await instantiateRustWasm(A,"./ripemd160","ripemd160","ripemd160_init","ripemd160_update","ripemd160_final");return{final:e.final,hash:e.hash,init:e.init,update:e.update}},getEmbeddedRipemd160Binary=()=>base64ToBin(ripemd160Base64Bytes).buffer,cachedRipemd160={},instantiateRipemd160=async()=>{if(cachedRipemd160.cache!==void 0)return cachedRipemd160.cache;const A=instantiateRipemd160Bytes(getEmbeddedRipemd160Binary());return cachedRipemd160.cache=A,A},wrapSecp256k1Wasm=(A,e)=>{const t=A.contextCreate(ContextFlag.BOTH),i=A.malloc(72),n=A.malloc(65),g=A.malloc(32),I=A.malloc(32),o=A.malloc(64),a=A.malloc(32),r=A.malloc(64),s=A.malloc(64),B=A.malloc(32),C=A.malloc(65),l=A.malloc(4),c=l>>2,Q=()=>A.heapU32[c],E=A.malloc(4),f=E>>2,u=(L,O)=>{const AA=new Uint8Array(O);return AA.set(L),AA},h=L=>{const O=u(L,65);return A.heapU8.set(O,n),A.pubkeyParse(t,o,n,L.length)===1},p=L=>{A.heapU32.set([L],f)},S=()=>A.heapU32[f],H=(L,O)=>(p(L),A.pubkeySerialize(t,n,E,o,O),A.readHeapU8(n,S()).slice()),M=L=>L?H(33,CompressionFlag.COMPRESSED):H(65,CompressionFlag.UNCOMPRESSED),d=L=>O=>{if(!h(O))throw new Error("Failed to parse public key.");return M(L)},y=(L,O)=>{const AA=u(L,72);return A.heapU8.set(AA,i),O?A.signatureParseDER(t,r,i,L.length)===1:A.signatureParseCompact(t,r,i)===1},w=(L,O)=>{if(!y(L,O))throw new Error("Failed to parse signature.")},k=()=>(A.signatureSerializeCompact(t,i,r),A.readHeapU8(i,64).slice()),D=()=>(p(72),A.signatureSerializeDER(t,i,E,r),A.readHeapU8(i,S()).slice()),m=L=>O=>(w(O,L),L?k():D()),F=L=>{const O=u(L,32);A.heapU8.set(O,B)},_=(L,O)=>{A.heapU8.fill(0,L,L+O)},N=()=>{_(B,32)},b=(L,O)=>{F(L);const AA=O();return N(),AA},U=L=>O=>{if(b(O,()=>A.pubkeyCreate(t,o,B)!==1))throw new Error("Cannot derive public key from invalid private key.");return M(L)},G=L=>{const O=u(L,32);A.heapU8.set(O,g)},Y=L=>{const O=u(L,32);A.heapU8.set(O,I)},q=()=>{A.signatureNormalize(t,r,r)},T=(L,O)=>AA=>(w(AA,L),O&&q(),L?D():k()),v=(L,O,AA)=>{const aA=y(L,O);return AA&&q(),aA},P=L=>(O,AA,aA)=>(G(AA),aA&&Y(aA),b(O,()=>{if(A.sign(t,r,g,B,aA?I:0)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return L?(p(72),A.signatureSerializeDER(t,i,E,r),A.readHeapU8(i,S()).slice()):(A.signatureSerializeCompact(t,i,r),A.readHeapU8(i,64).slice())})),x=()=>(L,O)=>(G(O),b(L,()=>{if(A.schnorrSign(t,s,g,B)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return A.readHeapU8(s,64).slice()})),Z=()=>(L,O)=>{if(!h(O))throw new Error("ECDH Key Exchange failed. Failed to parse public key.");return b(L,()=>{if(A.ecdh(t,a,o,B)!==1)throw new Error("ECDH Key Exchange failed. The private key is not valid.");return A.readHeapU8(a,32).slice()})},eA=L=>(G(L),A.verify(t,r,g,o)===1),J=(L,O)=>(AA,aA,oA)=>h(aA)&&v(AA,L,O)&&eA(oA),X=(L,O)=>{G(L);const AA=u(O,64);return A.heapU8.set(AA,s),A.schnorrVerify(t,s,g,o)===1},nA=()=>(L,O,AA)=>h(O)?X(AA,L):!1,IA=(L,O)=>(G(O),b(L,()=>{if(A.signRecoverable(t,C,g,B)!==1)throw new Error("Failed to sign message hash. The private key is not valid.");return A.recoverableSignatureSerialize(t,i,l,C),{recoveryId:Q(),signature:A.readHeapU8(i,64).slice()}})),rA=L=>(O,AA,aA)=>{G(aA);const oA=u(O,72);if(A.heapU8.set(oA,i),A.recoverableSignatureParse(t,C,i,AA)!==1)throw new Error("Failed to recover public key. Could not parse signature.");if(A.recover(t,o,C,g)!==1)throw new Error("Failed to recover public key. The compact signature, recovery, or message hash is invalid.");return M(L)},tA=(L,O)=>(G(O),b(L,()=>{if(A.privkeyTweakAdd(t,B,g)!==1)throw new Error("Private key is invalid or adding failed.");return A.readHeapU8(B,32).slice()})),V=(L,O)=>(G(O),b(L,()=>{if(A.privkeyTweakMul(t,B,g)!==1)throw new Error("Private key is invalid or multiplying failed.");return A.readHeapU8(B,32).slice()})),j=L=>(O,AA)=>{if(!h(O))throw new Error("Failed to parse public key.");if(G(AA),A.pubkeyTweakAdd(t,o,g)!==1)throw new Error("Adding failed");return M(L)},BA=L=>(O,AA)=>{if(!h(O))throw new Error("Failed to parse public key.");if(G(AA),A.pubkeyTweakMul(t,o,g)!==1)throw new Error("Multiplying failed");return M(L)};if(e!==void 0){const L=g,O=u(e,32);A.heapU8.set(O,L),A.contextRandomize(t,L),_(L,32)}return{addTweakPrivateKey:tA,addTweakPublicKeyCompressed:j(!0),addTweakPublicKeyUncompressed:j(!1),compressPublicKey:d(!0),derivePublicKeyCompressed:U(!0),derivePublicKeyUncompressed:U(!1),ecdh:Z(),malleateSignatureCompact:T(!1,!1),malleateSignatureDER:T(!0,!1),mulTweakPrivateKey:V,mulTweakPublicKeyCompressed:BA(!0),mulTweakPublicKeyUncompressed:BA(!1),normalizeSignatureCompact:T(!1,!0),normalizeSignatureDER:T(!0,!0),recoverPublicKeyCompressed:rA(!0),recoverPublicKeyUncompressed:rA(!1),signMessageHashCompact:P(!1),signMessageHashDER:P(!0),signMessageHashRecoverableCompact:IA,signMessageHashSchnorr:x(),signatureCompactToDER:m(!1),signatureDERToCompact:m(!0),uncompressPublicKey:d(!1),validatePrivateKey:L=>b(L,()=>A.seckeyVerify(t,B)===1),validatePublicKey:h,verifySignatureCompact:J(!1,!0),verifySignatureCompactLowS:J(!1,!1),verifySignatureDER:J(!0,!0),verifySignatureDERLowS:J(!0,!1),verifySignatureSchnorr:nA()}},cachedSecp256k1={},instantiateSecp256k1=async A=>{if(cachedSecp256k1.cache!==void 0)return cachedSecp256k1.cache;const e=Promise.resolve(wrapSecp256k1Wasm(await instantiateSecp256k1Wasm(),A));return cachedSecp256k1.cache=e,e},instantiateSha256Bytes=async A=>{const e=await instantiateRustWasm(A,"./sha256","sha256","sha256_init","sha256_update","sha256_final");return{final:e.final,hash:e.hash,init:e.init,update:e.update}},getEmbeddedSha256Binary=()=>base64ToBin(sha256Base64Bytes).buffer,cachedSha256={},instantiateSha256=async()=>{if(cachedSha256.cache!==void 0)return cachedSha256.cache;const A=instantiateSha256Bytes(getEmbeddedSha256Binary());return cachedSha256.cache=A,A};var sha256Uint8array={};Object.defineProperty(sha256Uint8array,"__esModule",{value:!0});sha256Uint8array.Hash=createHash_1=sha256Uint8array.createHash=void 0;const K=[1116352408,1899447441,-1245643825,-373957723,961987163,1508970993,-1841331548,-1424204075,-670586216,310598401,607225278,1426881987,1925078388,-2132889090,-1680079193,-1046744716,-459576895,-272742522,264347078,604807628,770255983,1249150122,1555081692,1996064986,-1740746414,-1473132947,-1341970488,-1084653625,-958395405,-710438585,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,-2117940946,-1838011259,-1564481375,-1474664885,-1035236496,-949202525,-778901479,-694614492,-200395387,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,-2067236844,-1933114872,-1866530822,-1538233109,-1090935817,-965641998],algorithms={sha256:1};function createHash(A){if(A&&!algorithms[A]&&!algorithms[A.toLowerCase()])throw new Error("Digest method not supported");return new Hash}var createHash_1=sha256Uint8array.createHash=createHash;class Hash{constructor(){this.A=1779033703,this.B=-1150833019,this.C=1013904242,this.D=-1521486534,this.E=1359893119,this.F=-1694144372,this.G=528734635,this.H=1541459225,this._size=0,this._sp=0,(!sharedBuffer||sharedOffset>=8e3)&&(sharedBuffer=new ArrayBuffer(8e3),sharedOffset=0),this._byte=new Uint8Array(sharedBuffer,sharedOffset,80),this._word=new Int32Array(sharedBuffer,sharedOffset,20),sharedOffset+=80}update(e){if(typeof e=="string")return this._utf8(e);if(e==null)throw new TypeError("Invalid type: "+typeof e);const t=e.byteOffset,i=e.byteLength;let n=i/64|0,g=0;if(n&&!(t&3)&&!(this._size%64)){const o=new Int32Array(e.buffer,t,n*16);for(;n--;)this._int32(o,g>>2),g+=64;this._size+=g}if(e.BYTES_PER_ELEMENT!==1&&e.buffer){const o=new Uint8Array(e.buffer,t+g,i-g);return this._uint8(o)}return g===i?this:this._uint8(e,g)}_uint8(e,t){const{_byte:i,_word:n}=this,g=e.length;for(t=t|0;t<g;){const I=this._size%64;let o=I;for(;t<g&&o<64;)i[o++]=e[t++];o>=64&&this._int32(n),this._size+=o-I}return this}_utf8(e){const{_byte:t,_word:i}=this,n=e.length;let g=this._sp;for(let I=0;I<n;){const o=this._size%64;let a=o;for(;I<n&&a<64;){let r=e.charCodeAt(I++)|0;r<128?t[a++]=r:r<2048?(t[a++]=192|r>>>6,t[a++]=128|r&63):r<55296||r>57343?(t[a++]=224|r>>>12,t[a++]=128|r>>>6&63,t[a++]=128|r&63):g?(r=((g&1023)<<10)+(r&1023)+65536,t[a++]=240|r>>>18,t[a++]=128|r>>>12&63,t[a++]=128|r>>>6&63,t[a++]=128|r&63,g=0):g=r}a>=64&&(this._int32(i),i[0]=i[16]),this._size+=a-o}return this._sp=g,this}_int32(e,t){let{A:i,B:n,C:g,D:I,E:o,F:a,G:r,H:s}=this,B=0;for(t=t|0;B<16;)W[B++]=swap32(e[t++]);for(B=16;B<64;B++)W[B]=gamma1(W[B-2])+W[B-7]+gamma0(W[B-15])+W[B-16]|0;for(B=0;B<64;B++){const C=s+sigma1(o)+ch(o,a,r)+K[B]+W[B]|0,l=sigma0(i)+maj(i,n,g)|0;s=r,r=a,a=o,o=I+C|0,I=g,g=n,n=i,i=C+l|0}this.A=i+this.A|0,this.B=n+this.B|0,this.C=g+this.C|0,this.D=I+this.D|0,this.E=o+this.E|0,this.F=a+this.F|0,this.G=r+this.G|0,this.H=s+this.H|0}digest(e){const{_byte:t,_word:i}=this;let n=this._size%64|0;for(t[n++]=128;n&3;)t[n++]=0;if(n>>=2,n>14){for(;n<16;)i[n++]=0;n=0,this._int32(i)}for(;n<16;)i[n++]=0;const g=this._size*8,I=(g&4294967295)>>>0,o=(g-I)/4294967296;return o&&(i[14]=swap32(o)),I&&(i[15]=swap32(I)),this._int32(i),e==="hex"?this._hex():this._bin()}_hex(){const{A:e,B:t,C:i,D:n,E:g,F:I,G:o,H:a}=this;return hex32(e)+hex32(t)+hex32(i)+hex32(n)+hex32(g)+hex32(I)+hex32(o)+hex32(a)}_bin(){const{A:e,B:t,C:i,D:n,E:g,F:I,G:o,H:a,_byte:r,_word:s}=this;return s[0]=swap32(e),s[1]=swap32(t),s[2]=swap32(i),s[3]=swap32(n),s[4]=swap32(g),s[5]=swap32(I),s[6]=swap32(o),s[7]=swap32(a),r.slice(0,32)}}sha256Uint8array.Hash=Hash;const W=new Int32Array(64);let sharedBuffer,sharedOffset=0;const hex32=A=>(A+4294967296).toString(16).substr(-8),swapLE=A=>A<<24&4278190080|A<<8&16711680|A>>8&65280|A>>24&255,swapBE=A=>A,swap32=isBE()?swapBE:swapLE,ch=(A,e,t)=>t^A&(e^t),maj=(A,e,t)=>A&e|t&(A|e),sigma0=A=>(A>>>2|A<<30)^(A>>>13|A<<19)^(A>>>22|A<<10),sigma1=A=>(A>>>6|A<<26)^(A>>>11|A<<21)^(A>>>25|A<<7),gamma0=A=>(A>>>7|A<<25)^(A>>>18|A<<14)^A>>>3,gamma1=A=>(A>>>17|A<<15)^(A>>>19|A<<13)^A>>>10;function isBE(){return new Uint8Array(new Uint16Array([65279]).buffer)[0]===254}async function sha256$1(A){return new Uint8Array(await crypto.subtle.digest("SHA-256",A))}const sha256_sync_insecure=A=>createHash_1().update(A).digest();let y_sha256;instantiateSha256().then(A=>y_sha256=A);const sha256_sync$1=A=>y_sha256.final(y_sha256.update(y_sha256.init(),A));let y_ripemd;instantiateRipemd160().then(A=>y_ripemd=A);const ripemd160_sync=A=>y_ripemd.final(y_ripemd.update(y_ripemd.init(),A));function zero_out(A){if(A.fill(0),A.reduce((e,t)=>e+t,0)!==0)throw new Error("Failed to zero out sensitive memory region")}function text_to_buffer(A){return new TextEncoder().encode(A)}function buffer_to_text(A){return new TextDecoder().decode(A)}const sfcc=String.fromCharCode;function buffer_to_hex(A){let e="";for(const t of A)e+=t.toString(16).padStart(2,"0");return e}function hex_to_buffer(A){const e=A.length;if(e%2!==0)throw new Error("Invalid hex string length is not a multiple of 2");const t=e/2,i=new Uint8Array(t);for(let n=0;n<t;n++)i[n]=parseInt(A.slice(n+n,n+n+2),16);return i}function buffer_to_base64(A){return globalThis.btoa(buffer_to_string8(A))}function base64_to_buffer(A){return string8_to_buffer(globalThis.atob(A))}function buffer_to_string8(A){let e="";for(const t of A)e+=sfcc(t);return e}function string8_to_buffer(A){const e=A.length,t=new Uint8Array(e);for(let i=0;i<e;i++)t[i]=A.charCodeAt(i);return t}var sha256={exports:{}},core={exports:{}};(function(A,e){(function(t,i){A.exports=i()})(commonjsGlobal,function(){var t=t||function(i,n){var g;if(typeof window<"u"&&window.crypto&&(g=window.crypto),typeof self<"u"&&self.crypto&&(g=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(g=globalThis.crypto),!g&&typeof window<"u"&&window.msCrypto&&(g=window.msCrypto),!g&&typeof commonjsGlobal<"u"&&commonjsGlobal.crypto&&(g=commonjsGlobal.crypto),!g&&typeof commonjsRequire=="function")try{g=require("crypto")}catch{}var I=function(){if(g){if(typeof g.getRandomValues=="function")try{return g.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof g.randomBytes=="function")try{return g.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},o=Object.create||function(){function u(){}return function(h){var p;return u.prototype=h,p=new u,u.prototype=null,p}}(),a={},r=a.lib={},s=r.Base=function(){return{extend:function(u){var h=o(this);return u&&h.mixIn(u),(!h.hasOwnProperty("init")||this.init===h.init)&&(h.init=function(){h.$super.init.apply(this,arguments)}),h.init.prototype=h,h.$super=this,h},create:function(){var u=this.extend();return u.init.apply(u,arguments),u},init:function(){},mixIn:function(u){for(var h in u)u.hasOwnProperty(h)&&(this[h]=u[h]);u.hasOwnProperty("toString")&&(this.toString=u.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),B=r.WordArray=s.extend({init:function(u,h){u=this.words=u||[],h!=n?this.sigBytes=h:this.sigBytes=u.length*4},toString:function(u){return(u||l).stringify(this)},concat:function(u){var h=this.words,p=u.words,S=this.sigBytes,H=u.sigBytes;if(this.clamp(),S%4)for(var M=0;M<H;M++){var d=p[M>>>2]>>>24-M%4*8&255;h[S+M>>>2]|=d<<24-(S+M)%4*8}else for(var y=0;y<H;y+=4)h[S+y>>>2]=p[y>>>2];return this.sigBytes+=H,this},clamp:function(){var u=this.words,h=this.sigBytes;u[h>>>2]&=4294967295<<32-h%4*8,u.length=i.ceil(h/4)},clone:function(){var u=s.clone.call(this);return u.words=this.words.slice(0),u},random:function(u){for(var h=[],p=0;p<u;p+=4)h.push(I());return new B.init(h,u)}}),C=a.enc={},l=C.Hex={stringify:function(u){for(var h=u.words,p=u.sigBytes,S=[],H=0;H<p;H++){var M=h[H>>>2]>>>24-H%4*8&255;S.push((M>>>4).toString(16)),S.push((M&15).toString(16))}return S.join("")},parse:function(u){for(var h=u.length,p=[],S=0;S<h;S+=2)p[S>>>3]|=parseInt(u.substr(S,2),16)<<24-S%8*4;return new B.init(p,h/2)}},c=C.Latin1={stringify:function(u){for(var h=u.words,p=u.sigBytes,S=[],H=0;H<p;H++){var M=h[H>>>2]>>>24-H%4*8&255;S.push(String.fromCharCode(M))}return S.join("")},parse:function(u){for(var h=u.length,p=[],S=0;S<h;S++)p[S>>>2]|=(u.charCodeAt(S)&255)<<24-S%4*8;return new B.init(p,h)}},Q=C.Utf8={stringify:function(u){try{return decodeURIComponent(escape(c.stringify(u)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(u){return c.parse(unescape(encodeURIComponent(u)))}},E=r.BufferedBlockAlgorithm=s.extend({reset:function(){this._data=new B.init,this._nDataBytes=0},_append:function(u){typeof u=="string"&&(u=Q.parse(u)),this._data.concat(u),this._nDataBytes+=u.sigBytes},_process:function(u){var h,p=this._data,S=p.words,H=p.sigBytes,M=this.blockSize,d=M*4,y=H/d;u?y=i.ceil(y):y=i.max((y|0)-this._minBufferSize,0);var w=y*M,k=i.min(w*4,H);if(w){for(var D=0;D<w;D+=M)this._doProcessBlock(S,D);h=S.splice(0,w),p.sigBytes-=k}return new B.init(h,k)},clone:function(){var u=s.clone.call(this);return u._data=this._data.clone(),u},_minBufferSize:0});r.Hasher=E.extend({cfg:s.extend(),init:function(u){this.cfg=this.cfg.extend(u),this.reset()},reset:function(){E.reset.call(this),this._doReset()},update:function(u){return this._append(u),this._process(),this},finalize:function(u){u&&this._append(u);var h=this._doFinalize();return h},blockSize:16,_createHelper:function(u){return function(h,p){return new u.init(p).finalize(h)}},_createHmacHelper:function(u){return function(h,p){return new f.HMAC.init(u,p).finalize(h)}}});var f=a.algo={};return a}(Math);return t})})(core);(function(A,e){(function(t,i){A.exports=i(core.exports)})(commonjsGlobal,function(t){return function(i){var n=t,g=n.lib,I=g.WordArray,o=g.Hasher,a=n.algo,r=[],s=[];(function(){function l(f){for(var u=i.sqrt(f),h=2;h<=u;h++)if(!(f%h))return!1;return!0}function c(f){return(f-(f|0))*4294967296|0}for(var Q=2,E=0;E<64;)l(Q)&&(E<8&&(r[E]=c(i.pow(Q,1/2))),s[E]=c(i.pow(Q,1/3)),E++),Q++})();var B=[],C=a.SHA256=o.extend({_doReset:function(){this._hash=new I.init(r.slice(0))},_doProcessBlock:function(l,c){for(var Q=this._hash.words,E=Q[0],f=Q[1],u=Q[2],h=Q[3],p=Q[4],S=Q[5],H=Q[6],M=Q[7],d=0;d<64;d++){if(d<16)B[d]=l[c+d]|0;else{var y=B[d-15],w=(y<<25|y>>>7)^(y<<14|y>>>18)^y>>>3,k=B[d-2],D=(k<<15|k>>>17)^(k<<13|k>>>19)^k>>>10;B[d]=w+B[d-7]+D+B[d-16]}var m=p&S^~p&H,F=E&f^E&u^f&u,_=(E<<30|E>>>2)^(E<<19|E>>>13)^(E<<10|E>>>22),N=(p<<26|p>>>6)^(p<<21|p>>>11)^(p<<7|p>>>25),b=M+N+m+s[d]+B[d],U=_+F;M=H,H=S,S=p,p=h+b|0,h=u,u=f,f=E,E=b+U|0}Q[0]=Q[0]+E|0,Q[1]=Q[1]+f|0,Q[2]=Q[2]+u|0,Q[3]=Q[3]+h|0,Q[4]=Q[4]+p|0,Q[5]=Q[5]+S|0,Q[6]=Q[6]+H|0,Q[7]=Q[7]+M|0},_doFinalize:function(){var l=this._data,c=l.words,Q=this._nDataBytes*8,E=l.sigBytes*8;return c[E>>>5]|=128<<24-E%32,c[(E+64>>>9<<4)+14]=i.floor(Q/4294967296),c[(E+64>>>9<<4)+15]=Q,l.sigBytes=c.length*4,this._process(),this._hash},clone:function(){var l=o.clone.call(this);return l._hash=this._hash.clone(),l}});n.SHA256=o._createHelper(C),n.HmacSHA256=o._createHmacHelper(C)}(Math),t.SHA256})})(sha256);var sha256_sync=sha256.exports,sha512={exports:{}},x64Core={exports:{}};(function(A,e){(function(t,i){A.exports=i(core.exports)})(commonjsGlobal,function(t){return function(i){var n=t,g=n.lib,I=g.Base,o=g.WordArray,a=n.x64={};a.Word=I.extend({init:function(r,s){this.high=r,this.low=s}}),a.WordArray=I.extend({init:function(r,s){r=this.words=r||[],s!=i?this.sigBytes=s:this.sigBytes=r.length*8},toX32:function(){for(var r=this.words,s=r.length,B=[],C=0;C<s;C++){var l=r[C];B.push(l.high),B.push(l.low)}return o.create(B,this.sigBytes)},clone:function(){for(var r=I.clone.call(this),s=r.words=this.words.slice(0),B=s.length,C=0;C<B;C++)s[C]=s[C].clone();return r}})}(),t})})(x64Core);(function(A,e){(function(t,i,n){A.exports=i(core.exports,x64Core.exports)})(commonjsGlobal,function(t){return function(){var i=t,n=i.lib,g=n.Hasher,I=i.x64,o=I.Word,a=I.WordArray,r=i.algo;function s(){return o.create.apply(o,arguments)}var B=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],C=[];(function(){for(var c=0;c<80;c++)C[c]=s()})();var l=r.SHA512=g.extend({_doReset:function(){this._hash=new a.init([new o.init(1779033703,4089235720),new o.init(3144134277,2227873595),new o.init(1013904242,4271175723),new o.init(2773480762,1595750129),new o.init(1359893119,2917565137),new o.init(2600822924,725511199),new o.init(528734635,4215389547),new o.init(1541459225,327033209)])},_doProcessBlock:function(c,Q){for(var E=this._hash.words,f=E[0],u=E[1],h=E[2],p=E[3],S=E[4],H=E[5],M=E[6],d=E[7],y=f.high,w=f.low,k=u.high,D=u.low,m=h.high,F=h.low,_=p.high,N=p.low,b=S.high,U=S.low,G=H.high,Y=H.low,q=M.high,T=M.low,v=d.high,P=d.low,x=y,Z=w,eA=k,J=D,X=m,nA=F,IA=_,rA=N,tA=b,V=U,j=G,BA=Y,L=q,O=T,AA=v,aA=P,oA=0;oA<80;oA++){var CA,cA,_A=C[oA];if(oA<16)cA=_A.high=c[Q+oA*2]|0,CA=_A.low=c[Q+oA*2+1]|0;else{var SA=C[oA-15],fA=SA.high,pA=SA.low,UA=(fA>>>1|pA<<31)^(fA>>>8|pA<<24)^fA>>>7,NA=(pA>>>1|fA<<31)^(pA>>>8|fA<<24)^(pA>>>7|fA<<25),MA=C[oA-2],uA=MA.high,dA=MA.low,gA=(uA>>>19|dA<<13)^(uA<<3|dA>>>29)^uA>>>6,hA=(dA>>>19|uA<<13)^(dA<<3|uA>>>29)^(dA>>>6|uA<<26),kA=C[oA-7],FA=kA.high,bA=kA.low,DA=C[oA-16],OA=DA.high,KA=DA.low;CA=NA+bA,cA=UA+FA+(CA>>>0<NA>>>0?1:0),CA=CA+hA,cA=cA+gA+(CA>>>0<hA>>>0?1:0),CA=CA+KA,cA=cA+OA+(CA>>>0<KA>>>0?1:0),_A.high=cA,_A.low=CA}var wA=tA&j^~tA&L,YA=V&BA^~V&O,PA=x&eA^x&X^eA&X,ZA=Z&J^Z&nA^J&nA,XA=(x>>>28|Z<<4)^(x<<30|Z>>>2)^(x<<25|Z>>>7),JA=(Z>>>28|x<<4)^(Z<<30|x>>>2)^(Z<<25|x>>>7),zA=(tA>>>14|V<<18)^(tA>>>18|V<<14)^(tA<<23|V>>>9),VA=(V>>>14|tA<<18)^(V>>>18|tA<<14)^(V<<23|tA>>>9),GA=B[oA],vA=GA.high,qA=GA.low,sA=aA+VA,lA=AA+zA+(sA>>>0<aA>>>0?1:0),sA=sA+YA,lA=lA+wA+(sA>>>0<YA>>>0?1:0),sA=sA+qA,lA=lA+vA+(sA>>>0<qA>>>0?1:0),sA=sA+CA,lA=lA+cA+(sA>>>0<CA>>>0?1:0),RA=JA+ZA,WA=XA+PA+(RA>>>0<JA>>>0?1:0);AA=L,aA=O,L=j,O=BA,j=tA,BA=V,V=rA+sA|0,tA=IA+lA+(V>>>0<rA>>>0?1:0)|0,IA=X,rA=nA,X=eA,nA=J,eA=x,J=Z,Z=sA+RA|0,x=lA+WA+(Z>>>0<sA>>>0?1:0)|0}w=f.low=w+Z,f.high=y+x+(w>>>0<Z>>>0?1:0),D=u.low=D+J,u.high=k+eA+(D>>>0<J>>>0?1:0),F=h.low=F+nA,h.high=m+X+(F>>>0<nA>>>0?1:0),N=p.low=N+rA,p.high=_+IA+(N>>>0<rA>>>0?1:0),U=S.low=U+V,S.high=b+tA+(U>>>0<V>>>0?1:0),Y=H.low=Y+BA,H.high=G+j+(Y>>>0<BA>>>0?1:0),T=M.low=T+O,M.high=q+L+(T>>>0<O>>>0?1:0),P=d.low=P+aA,d.high=v+AA+(P>>>0<aA>>>0?1:0)},_doFinalize:function(){var c=this._data,Q=c.words,E=this._nDataBytes*8,f=c.sigBytes*8;Q[f>>>5]|=128<<24-f%32,Q[(f+128>>>10<<5)+30]=Math.floor(E/4294967296),Q[(f+128>>>10<<5)+31]=E,c.sigBytes=Q.length*4,this._process();var u=this._hash.toX32();return u},clone:function(){var c=g.clone.call(this);return c._hash=this._hash.clone(),c},blockSize:1024/32});i.SHA512=g._createHelper(l),i.HmacSHA512=g._createHmacHelper(l)}(),t.SHA512})})(sha512);var sha512_sync=sha512.exports;function destroyed(){throw new Error("Method called on destroyed SensitiveBytes instance")}class SensitiveBytesContext{constructor(){QA(this,"_a_biguints",[])}random(e){const t=SensitiveBytes.random(e);return this._a_biguints.push(t),t}empty(e){const t=SensitiveBytes.random(e);return this._a_biguints.push(t),t}new(e){const t=new SensitiveBytes(e,this);return this._a_biguints.push(t),t}wipe(){for(const e of this._a_biguints)e.wipe()}}class SensitiveBytes{constructor(e,t=null){this._atu8_data=e,this._kc_context=t}static context(){return new SensitiveBytesContext}static random(e){return new SensitiveBytes(crypto.getRandomValues(new Uint8Array(e)))}static empty(e=0){return new SensitiveBytes(new Uint8Array(e))}get data(){return this._atu8_data}clone(){return new SensitiveBytes(Uint8Array.from(this._atu8_data),this._kc_context)}wipe(){this._atu8_data.fill(0),this.clone=this.wipe=this.diff=this.compare=this.mod=destroyed,Object.defineProperties(this,{data:{get:destroyed},digits:{get:destroyed}})}leftShift(e){if(Number.isInteger(e)||e<0)throw this.wipe(),new Error("Refusing to left shift by argument that is not a non-negative integer");if(e===0)return this.clone();const t=this._atu8_data.byteLength,i=new Uint8Array(t),n=e>>>3,g=this._atu8_data.subarray(n),I=e%8;if(I===0)return i.set(g),new SensitiveBytes(i);const o=255>>>I,a=8-I;let r=0;for(;r<t-1-n;r++)i[r]=(g[r]&o)<<I|g[r+1]>>>a;return n===0&&(i[r]<<=e),new SensitiveBytes(i)}rightShift(e){if(Number.isInteger(e)||e<0)throw this.wipe(),new Error("Refusing to left shift by argument that is not a non-negative integer");if(e===0)return this.clone();const t=this._atu8_data,i=t.byteLength,n=new Uint8Array(i),g=e%8,I=e>>>3;if(g===0)return n.set(t,I),new SensitiveBytes(n);const o=t.subarray(0,i-(e>>>3)),a=8-g;I===0&&(n[0]>>=e);let r=1;for(;r<i-1;r++)n[r]=o[r-1]<<a&255|o[r]>>>g;return new SensitiveBytes(n)}xor(e){const t=this._atu8_data,i=e._atu8_data,n=t.byteLength;if(n!==i.byteLength)throw this.wipe(),e.wipe(),new Error("Refusing to XOR buffers of different byte length");const g=new Uint8Array(n);for(let I=0;I<n;I++)g[I]=t[I]^i[I];return new SensitiveBytes(g)}split(e){const t=this.data,i=t.byteLength,n=[];let g=0;for(let I=0;I<i;I++)e===t[I]&&(n.push(t.subarray(g,I)),g=I+1);return n}}const d_broadcast_global=new BroadcastChannel("global");function global_broadcast(A){d_broadcast_global.postMessage(A),d_broadcast_global.dispatchEvent(new MessageEvent("message",{data:A}))}function global_receive(A){const e=t=>{const i=t.data;if(!i||!i.type)throw new Error("Ignored invalid message received on global broadcast channel");const{type:n,value:g=null}=i,I=A[n];!I||I(g)};return d_broadcast_global.addEventListener("message",e),()=>{d_broadcast_global.removeEventListener("message",e)}}async function global_wait(A,e,t=0){const i=new Error().stack||"";return new Promise((n,g)=>{let I=0;const o=global_receive({[A]:a=>{e(a)&&(o(),clearTimeout(I),n())}});Number.isInteger(t)&&t>0&&(I=globalThis.setTimeout(()=>{o(),g(new Error(`A timeout was reached waiting for the '${A}' event
${i}`))},t))})}const SI_VERSION="0.0.5",XT_SECONDS=1e3,XT_MINUTES=60*XT_SECONDS,NB_MAX_MEMO=280,R_DOMAIN_LOCALHOST=/^(localhost|127.0.0.1)(:\d+)?$/,R_DOMAIN_IP=/^\d+(?:.\d+){3}(:\d+)?$/,R_BECH32=/^(\w+)([13])([a-zA-HJ-NP-Z0-9]{25,39})$/,P_PUBLIC_SUFFIX_LIST="https://raw.githubusercontent.com/publicsuffix/list/master/public_suffix_list.dat",P_STARSHELL_DECREES="https://raw.githubusercontent.com/SolarRepublic/wallet-decrees/main/global.json",R_TRANSFER_AMOUNT=/^(\d+)(.+)/,SI_STORE_SECRETS="secrets",SI_STORE_APPS="apps",SI_STORE_APP_POLICIES="app_policies",SI_STORE_AGENTS="agents",SI_STORE_SETTINGS="settings",SI_STORE_ACCOUNTS="accounts",SI_STORE_QUERY_CACHE="query_cache",SI_STORE_TAGS="tags",SI_STORE_MEDIA="media",SI_STORE_PFPS="pfps",SI_STORE_CHAINS="chains",SI_STORE_NETWORKS="networks",SI_STORE_ENTITIES="entities",SI_STORE_EVENTS="events",SI_STORE_WEB_RESOURCES="web_resources",SI_STORE_WEB_APIS="web_apis";function precedes(A,e){return new Version(A).precedes(new Version(e))}class Version{constructor(e){QA(this,"_a_parts");this._a_parts=e.split(/\./).map(t=>{const i=t.split("-");return{value:+i[0],tag:i.slice(1).join("-")}})}compare(e){const t=this._a_parts,i=e._a_parts;for(let n=0;n<Math.min(t.length,i.length);n++){const{value:g,tag:I}=t[n],{value:o,tag:a}=i[n];if(I!==a)return NaN;const r=g-o;if(r!==0)return r}return 0}precedes(e){return this.compare(e)===-1}follows(e){return this.compare(e)===1}}async function storage_get(A){return(await chrome.storage.local.get([A]))?.[A]||null}async function public_storage_get(A){return await storage_get(`@${A}`)}async function public_storage_put(A,e){const t=`@${A}`;await chrome.storage.local.set({[t]:e})}const PublicStorage={async lastSeen(){return await public_storage_get("last_seen")},async isUpgrading(){const A=await PublicStorage.lastSeen();return!A||precedes(A.version,SI_VERSION)},async markSeen(){await public_storage_put("last_seen",{time:Date.now(),version:SI_VERSION})}};class NotAuthenticatedError extends Error{}class AlreadyRegisteredError extends Error{}class InvalidPassphraseError extends Error{}class UnregisteredError extends Error{}class RecoverableVaultError extends Error{}class CorruptedVaultError extends Error{}const ATU8_DUMMY_PHRASE=text_to_buffer("32-character-long-dummy-password"),ATU8_DUMMY_VECTOR=new Uint8Array(crypto.getRandomValues(new Uint8Array(16))),NL_PASSPHRASE_MINIMUM=5,NL_PASSPHRASE_MAXIMUM=1024;function acceptable(A){return typeof A=="string"&&A.length>=NL_PASSPHRASE_MINIMUM&&A.length<=NL_PASSPHRASE_MAXIMUM}async function register(A,e=F_NOOP){e("Reading from storage");const t=await Vault.getBase();if(Vault.isValidBase(t))throw new AlreadyRegisteredError;if(!A||!acceptable(A))throw new InvalidPassphraseError;const i=text_to_buffer(A);e("Deriving root keys");const n=crypto.getRandomValues(new Uint8Array(8)),I=new DataView(crypto.getRandomValues(new Uint32Array(2)).buffer).getBigUint64(0,!1);await PublicStorage.markSeen();const{new:{key:o,nonce:a}}=await Vault.deriveRootKeys(i,n,I);e("Generating signature");const r=await Vault.generateRootKeySignature(o);e("Saving to storage"),await Vault.setParsedBase({entropy:n,nonce:a,signature:r})}async function login(A,e=!1,t=F_NOOP){t("Reading from storage");const i=await Vault.getBase();if(!i)throw new UnregisteredError;if(!Vault.isValidBase(i))throw new CorruptedVaultError("Storage is corrupt; root object is missing or partially damaged");const{entropy:n,nonce:g,signature:I,version:o}=Vault.parseBase(i);if(o<1)throw new CorruptedVaultError("Vault reports to be encrypted with an unknown version identifier");if(o>1)throw new CorruptedVaultError("Vault reports to be encrypted with a newer version identifier");if(!A)throw new InvalidPassphraseError;const a=text_to_buffer(A);t("Deriving root keys");const{old:{key:r,vector:s},new:{key:B,vector:C,nonce:l},export:c}=await Vault.deriveRootKeys(a,n,g,!0);try{if(!await Vault.verifyRootKey(r,I))if(await Vault.verifyRootKey(B,I)){if(!e)throw new RecoverableVaultError}else throw new InvalidPassphraseError;t("Rotating keys"),await Vault.recryptAll(r,s,B,C),t("Generating signature");const Q=await Vault.generateRootKeySignature(B);t("Saving to storage"),await Vault.setParsedBase({entropy:n,nonce:l,signature:Q}),session_storage_is_native?await session_storage_set_native({root:B,vector:C}):await session_storage_set_wrapped({root:Array.from(c.data),vector:Array.from(C)}),c?.wipe(),global_broadcast({type:"login"}),t("Done")}catch(Q){throw c?.wipe(),Q}}async function logout(){await Vault.clearRootKey()}function syserr(A){return console.error(A),A.error||new Error(A.text)}function syswarn(A){console.warn(A)}var ContactAgentType=(A=>(A.PERSON="person",A.CONTRACT="contract",A))(ContactAgentType||{});const type_check=A=>A,H_MEDIA={"/media.image/sha256.8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156":{hash:"8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156",data:"/media/chain/akash.svg"},"/media.image/sha256.4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4":{hash:"4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4",data:"/media/chain/cosmos-hub.svg"},"/media.image/sha256.da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49":{hash:"da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49",data:"/media/chain/dvpn.png"},"/media.image/sha256.8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af":{hash:"8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af",data:"/media/chain/iris.svg"},"/media.image/sha256.e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb":{hash:"e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb",data:"/media/chain/juno.svg"},"/media.image/sha256.0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625":{hash:"0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625",data:"/media/chain/luna.svg"},"/media.image/sha256.668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27":{hash:"668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27",data:"/media/chain/monero.svg"},"/media.image/sha256.63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655":{hash:"63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655",data:"/media/chain/osmosis.svg"},"/media.image/sha256.9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056":{hash:"9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056",data:"/media/chain/regen.png"},"/media.image/sha256.b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5":{hash:"b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5",data:"/media/chain/secret-network.svg"},"/media.image/sha256.4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f":{hash:"4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f",data:"/media/token/secret-secret.svg"},"/media.image/sha256.af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc":{hash:"af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc",data:"/media/vendor/logo-128px.png"},"/media.image/sha256.a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b":{hash:"a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b",data:"/media/vendor/logo-192px.png"},"/media.image/sha256.adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e":{hash:"adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e",data:"/media/vendor/logo-256px.png"},"/media.image/sha256.345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1":{hash:"345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1",data:"/media/vendor/logo-32px.png"},"/media.image/sha256.9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13":{hash:"9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13",data:"/media/vendor/logo-48px.png"},"/media.image/sha256.4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7":{hash:"4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7",data:"/media/vendor/logo-64px.png"},"/media.image/sha256.ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196":{hash:"ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196",data:"/media/vendor/logo-96px.png"},"/media.image/sha256.602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412":{hash:"602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412",data:"/media/vendor/logo.svg"},"/media.image/sha256.861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15":{hash:"861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15",data:"/media/vendor/orb-1.png"},"/media.image/sha256.88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e":{hash:"88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e",data:"/media/vendor/orb-1.svg"},"/media.image/sha256.cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b":{hash:"cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b",data:"/media/vendor/title.svg"},"/media.image/sha256.6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622":{hash:"6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622",data:"/media/other/secret-saturn.png"},"/media.image/sha256.3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff":{hash:"3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff",data:"/media/other/supdoggie.png"}},H_MEDIA_LOOKUP={"/media/chain/akash.svg":"/media.image/sha256.8df5056ed6b806c2e36cd5b4e59f7ada3d832d339a4528417e12d44de9f02156","/media/chain/cosmos-hub.svg":"/media.image/sha256.4010e79c2131a2cceee1027940138e866c0c95fa961059ce6958cf5a3ea460c4","/media/chain/dvpn.png":"/media.image/sha256.da6c5b6b3348288b3ea67d4dd9eaf3fc57f7f0bda1ddaf11bd64624f358eec49","/media/chain/iris.svg":"/media.image/sha256.8f7927283c16106a4d7e0adf84d087b195d9c2f011d10ddd5d219c8502d6f2af","/media/chain/juno.svg":"/media.image/sha256.e6012eddd6d5ff8339fdbc8db0671e70921e6407d51ff14126620a06e5898eeb","/media/chain/luna.svg":"/media.image/sha256.0439126779b99998d706fd6515935595644b31118814d7cb4749144ea3e9f625","/media/chain/monero.svg":"/media.image/sha256.668c28e1a5e0ce6839c6b3a8a35c5dfba3e284a442f7ae4049398472f72ace27","/media/chain/osmosis.svg":"/media.image/sha256.63b08c298e1dd7f81d61e20bf7fcc8d2e9f9b6a424769b34c7c5a9439c1a1655","/media/chain/regen.png":"/media.image/sha256.9dedfbec129c61f372221053f27deaf4205e827e487db702a0fc0b83b717e056","/media/chain/secret-network.svg":"/media.image/sha256.b04e9464a3d26cea0815da3fd5bf454af9d3317be96732ecda9ea830bdeaeec5","/media/token/secret-secret.svg":"/media.image/sha256.4436f974426723faa4948135da5c96842c7c9ced4dfe6ae1556281428fcada3f","/media/vendor/logo-128px.png":"/media.image/sha256.af836bf7edee07cefd268465180256b79115a796c2b8e33a440ef987bee95dcc","/media/vendor/logo-192px.png":"/media.image/sha256.a5d0053596c7044eb2ffdc43b035e1ffc095dbe667fbdc3d6667e56b7e4b019b","/media/vendor/logo-256px.png":"/media.image/sha256.adf28c4af60418bcbff19498d7fcbc938def15322951677cf3838c162ac26c0e","/media/vendor/logo-32px.png":"/media.image/sha256.345ede2f04cdf5c837e9a363dbb27a40c1383d86b371e1445ab4145727ee64c1","/media/vendor/logo-48px.png":"/media.image/sha256.9457704318786e08034fdcd7ba1917249f91a1e49a3ee0aa5d73339021f4dc13","/media/vendor/logo-64px.png":"/media.image/sha256.4873801c4ffd5294ca110258d39c26f9dd4af896b7c34cda591d5a6a317c8ff7","/media/vendor/logo-96px.png":"/media.image/sha256.ab8cba62b0a72801f542bd88580af91fa60a31ff724ef6e732559b706b706196","/media/vendor/logo.svg":"/media.image/sha256.602124abca18b5e30da54addb50ca5fb0ca044cd8590c5fd4edc75a98b0f3412","/media/vendor/orb-1.png":"/media.image/sha256.861e55f23f97723dd9e5ff9b4ab708c6b6aef4986d59f66a56ba2e329f7efd15","/media/vendor/orb-1.svg":"/media.image/sha256.88286cacda5af5ae34fb924513e0d5f0158ad535eaf1e452a8013b20acdf8e9e","/media/vendor/title.svg":"/media.image/sha256.cf644a4e8f825a6df083b5399e51749dd97af568abdf4146b27374476bf7977b","/media/other/secret-saturn.png":"/media.image/sha256.6fee1420b6bf2f7c0cad4c59a457abcef727be430705233e141a90cea5bb5622","/media/other/supdoggie.png":"/media.image/sha256.3f62d381cd0f496c946093344fdb27180f12e28241a60ee99a34efc185ae08ff"},H_STORE_INIT_MEDIA=type_check(H_MEDIA),cosmos_bech32s=A=>({acc:{hrp:A,separator:"1"},accpub:{hrp:`${A}pub`,separator:"1"},valoper:{hrp:`${A}valoper`,separator:"1"},valoperpub:{hrp:`${A}valoperpub`,separator:"1"},valcons:{hrp:`${A}valcons`,separator:"1"},valconspub:{hrp:`${A}valconspub`,separator:"1"}}),H_STORE_INIT_PFPS=type_check(fold([{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/vendor/logo.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/chain/cosmos-hub.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/chain/secret-network.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/token/secret-secret.svg"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/other/secret-saturn.png"]}},{type:"plain",image:{default:H_MEDIA_LOOKUP["/media/other/supdoggie.png"]}}],(A,e)=>({[`/template.pfp/id.${e}`]:A}))),H_LOOKUP_PFP={};for(const[A,e]of ode(H_STORE_INIT_PFPS))if(e.type==="plain"){const t=H_MEDIA[e.image.default];H_LOOKUP_PFP[t.data]=A}const H_STORE_INIT_CHAINS=type_check({"/family.cosmos/chain.pulsar-2":{name:"Secret Pulsar",pfp:H_LOOKUP_PFP["/media/chain/secret-network.svg"],family:"cosmos",id:"pulsar-2",bech32s:cosmos_bech32s("secret"),bip44:{coinType:529},coins:{SCRT:{decimals:6,denom:"uscrt",name:"Secret",pfp:H_LOOKUP_PFP["/media/chain/secret-network.svg"],extra:{coingecko_id:"secret"}}},tokenInterfaces:["snip-20","snip-21","snip-721","snip-722"],testnet:!0},"/family.cosmos/chain.theta-testnet-001":{name:"Cosmos Hub Theta",pfp:H_LOOKUP_PFP["/media/chain/cosmos-hub.svg"],family:"cosmos",id:"theta-testnet-001",bech32s:cosmos_bech32s("cosmos"),bip44:{coinType:118},coins:{ATOM:{decimals:6,denom:"uatom",name:"Cosmos",pfp:H_LOOKUP_PFP["/media/chain/cosmos-hub.svg"],extra:{coingecko_id:"cosmos-hub"}}},tokenInterfaces:["cw-20"],testnet:!0}}),H_STORE_INIT_NETWORKS=type_check(fold([{name:"\u{1D54A}ecret \u{1D54A}aturn",pfp:H_LOOKUP_PFP["/media/other/secret-saturn.png"],chain:"/family.cosmos/chain.pulsar-2",grpcWebUrl:"https://grpc.testnet.secretsaturn.net",rpcHost:"rpc.testnet.secretsaturn.net"},{name:"StarShell",pfp:H_LOOKUP_PFP["/media/vendor/logo.svg"],chain:"/family.cosmos/chain.theta-testnet-001",grpcWebUrl:"https://grpc-web.cosmos-theta.starshell.net",rpcHost:"rpc.cosmos-theta.starshell.net"}],A=>({[`/network.${buffer_to_base64(sha256_sync_insecure(text_to_buffer(A.grpcWebUrl)))}`]:A}))),H_STORE_INIT_APPS=type_check(fold([{scheme:"https",host:"app.starshell.net",connections:{},pfp:H_LOOKUP_PFP["/media/vendor/logo.svg"]},{scheme:"https",host:"faucet.secrettestnet.io",connections:{},pfp:""}],A=>({[`/scheme.${A.scheme}/host.${A.host.replace(/:/g,"+")}`]:A}))),H_STORE_INIT_AGENTS=type_check(fold([{name:"supdoggie",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:H_LOOKUP_PFP["/media/other/supdoggie.png"],address:"0mtm48ul5mcgjj4hm0a4j3td4l5pt590erl3k9",origin:"built-in"},{name:"faucet.secrettestnet.io",notes:"",agentType:ContactAgentType.PERSON,space:"acc",family:"cosmos",chains:{},pfp:"",address:"3fqtu0lxsvn8gtlf3mz5kt75spxv93ssa6vecf",origin:"built-in"}],A=>({[`/family.${A.family}/agent.${A.address}/as.contact`]:A}))),H_STORE_INITS={[SI_STORE_APPS]:H_STORE_INIT_APPS,[SI_STORE_APP_POLICIES]:{hq:[],user:[]},[SI_STORE_ACCOUNTS]:{},[SI_STORE_AGENTS]:H_STORE_INIT_AGENTS,[SI_STORE_CHAINS]:H_STORE_INIT_CHAINS,[SI_STORE_NETWORKS]:H_STORE_INIT_NETWORKS,[SI_STORE_SETTINGS]:{},[SI_STORE_MEDIA]:H_STORE_INIT_MEDIA,[SI_STORE_PFPS]:H_STORE_INIT_PFPS,[SI_STORE_ENTITIES]:{},[SI_STORE_EVENTS]:[],[SI_STORE_SECRETS]:{},[SI_STORE_TAGS]:{registry:oderac({pink:"#D500F9",hot:"#C51162",orange:"#FF4D21",gold:"#FF8622",yellow:"#EEB521",autum:"#7E9E24",grass:"#3A6F16",teal:"#009688",sky:"#1976D2",violet:"#6200EA",gray:"#607D8B",brown:"#795548",bright:"#ffffff"},(A,e,t)=>({index:t,color:e,name:A,info:""})),map:{}},[SI_STORE_QUERY_CACHE]:{},[SI_STORE_WEB_RESOURCES]:{},[SI_STORE_WEB_APIS]:{}},ATU8_SHA256_STARSHELL=hex_to_buffer(sha256_sync("starshell").toString());hex_to_buffer(sha512_sync("starshell").toString());const N_ITERATIONS=20,NB_SALT=32,SI_PRF="SHA-512",NI_DERIVED_AES_KEY=256,NB_RECRYPTION_THRESHOLD=32*1024,GC_DERIVE_ROOT_SIGNING={name:"HMAC",hash:"SHA-256"},GC_DERIVE_ROOT_CIPHER={name:"AES-GCM",length:NI_DERIVED_AES_KEY},GC_HKDF_COMMON={name:"HKDF",hash:"SHA-256",salt:ATU8_SHA256_STARSHELL,info:Uint8Array.from([])},A_STORE_KEYS=["keys",...Object.keys(H_STORE_INITS)],SI_FRAME_LOCAL=crypto.randomUUID().slice(24),hm_privates$3=new WeakMap;async function restore_as_key(A,e,t,i){return Array.isArray(A)?await crypto.subtle.importKey("raw",Uint8Array.from(A),e,!1,i):A}function restore_as_buffer(A){return Array.isArray(A)?Uint8Array.from(A):A}const{session_storage_get,session_storage_set_native,session_storage_set_wrapped,session_storage_remove,session_storage_clear,session_storage_is_native}=(()=>{if(chrome.storage.session){const A=chrome.storage.session;return{async session_storage_get(e){return(await A.get([e]))[e]},session_storage_set_native(e){throw new Error("Implementation bug; cannot use native session storage")},async session_storage_set_wrapped(e){return await A.set(e)},async session_storage_remove(e){return await A.remove(e)},async session_storage_clear(){return await A.clear()},session_storage_is_native:!1}}else{const A=chrome.extension.getBackgroundPage();if(!A)throw new Error("Browser does not support any type of session storage");let e=A._g_session={};return{async session_storage_get(t){return e[t]??null},async session_storage_set_native(t){for(const[i,n]of ode(t))session_storage_remove(i),e[i]=n},async session_storage_set_wrapped(t){throw new Error("Implementation bug; cannot use wrapped session storage")},async session_storage_remove(t){const i=e[t];i&&typeof i=="object"&&(Array.isArray(i)||ArrayBuffer.isView(i))&&zero_out(i),delete e[t]},async session_storage_clear(){for(const[t,i]of ode(e))session_storage_remove(t);A._g_session=e={}},session_storage_is_native:!0}}})();async function session_storage_set_isomorphic(A){session_storage_is_native?await session_storage_set_native(A):await session_storage_set_wrapped(A)}async function hkdf_params(){const A=await Vault.getBase();let e;if(Vault.isValidBase(A)){if(e=await Vault.getSalt(),!e||NB_SALT!==e.byteLength)throw new Error("Vault is irreparably corrupted. No salt was found.")}else e=crypto.getRandomValues(new Uint8Array(NB_SALT)),await Vault.setSalt(e);return{...GC_HKDF_COMMON,salt:e}}function pbkdf2_derive2(A,e=0){return async function(t){return new SensitiveBytes(new Uint8Array(await crypto.subtle.deriveBits({name:"PBKDF2",salt:A,iterations:e?Math.ceil(N_ITERATIONS*e):N_ITERATIONS,hash:SI_PRF},t,256)))}}class DecryptionError extends Error{constructor(e){super("Failed to decrypt data: "+e),this.original=e}}async function decrypt(A,e,t,i=ATU8_SHA256_STARSHELL){try{return new Uint8Array(await crypto.subtle.decrypt({name:"AES-GCM",iv:t,additionalData:i},e,A))}catch(n){throw new DecryptionError(n)}}class EncryptionError extends Error{constructor(e){super("Failed to encrypt data: "+e),this.original=e}}async function encrypt(A,e,t,i=ATU8_SHA256_STARSHELL){try{return new Uint8Array(await crypto.subtle.encrypt({name:"AES-GCM",iv:t,additionalData:i},e,A))}catch(n){throw new EncryptionError(n)}}const h_release_waiters_local={},Vault={async getBase(){return await storage_get("base")||void 0},isValidBase(A){return!!A&&typeof A=="object"&&typeof A.version=="number"&&typeof A.entropy=="string"&&typeof A.nonce=="string"&&typeof A.signature=="string"},parseBase(A){return{version:A.version,entropy:hex_to_buffer(A.entropy),nonce:BigInt(A.nonce),signature:hex_to_buffer(A.signature)}},async setParsedBase(A){return await chrome.storage.local.set({base:{version:1,entropy:buffer_to_hex(A.entropy),nonce:A.nonce+"",signature:buffer_to_hex(A.signature)}})},async eraseBase(){return await chrome.storage.local.remove(["base"])},async getSalt(){const A=await storage_get("salt");return A?hex_to_buffer(A):void 0},async setSalt(A){return await chrome.storage.local.set({salt:buffer_to_hex(A)})},async getRootKey(){const A=await session_storage_get("root");return A?await restore_as_key(A,"HKDF",!1,["deriveKey"]):null},async clearRootKey(){let A;chrome.extension.getBackgroundPage&&(A=chrome.extension.getBackgroundPage())&&delete A._dk_root,global_broadcast({type:"logout"}),await Promise.all([session_storage_clear()])},deriveRootBits(A,e,t=0){return crypto.subtle.importKey("raw",A,"PBKDF2",!1,["deriveBits"]).then(pbkdf2_derive2(e,t))},async deriveRootKeys(A,e,t,i=!1){const n=(t+1n)%2n**64n,g=new Uint8Array(16),I=new Uint8Array(16);g.set(e,0),I.set(e,0),new DataView(g.buffer).setBigUint64(8,t,!1),new DataView(I.buffer).setBigUint64(8,n,!1);let o=0;await PublicStorage.lastSeen()||(o=20/N_ITERATIONS);const[a,r]=await Promise.all([Vault.deriveRootBits(A,g,o),Vault.deriveRootBits(A,I)]);zero_out(A);const[s,B]=await Promise.all([crypto.subtle.importKey("raw",a.data,"HKDF",!1,["deriveKey"]),crypto.subtle.importKey("raw",r.data,"HKDF",!1,["deriveKey"])]);return a.wipe(),i||r.wipe(),await PublicStorage.markSeen(),{old:{key:s,vector:g,nonce:t},new:{key:B,vector:I,nonce:n},export:i?r:null}},async cipherKey(A,e=!1){return crypto.subtle.deriveKey(await hkdf_params(),A,GC_DERIVE_ROOT_CIPHER,!0,e?["encrypt","decrypt"]:["decrypt"])},async signatureKey(A,e=!1){return crypto.subtle.deriveKey(await hkdf_params(),A,GC_DERIVE_ROOT_SIGNING,!1,e?["sign"]:["verify"])},async generateRootKeySignature(A){const e=await Vault.signatureKey(A,!0);return new Uint8Array(await crypto.subtle.sign("HMAC",e,ATU8_SHA256_STARSHELL))},async verifyRootKey(A,e){const t=await Vault.signatureKey(A,!1);return await crypto.subtle.verify("HMAC",t,e,ATU8_SHA256_STARSHELL)},async recryptAll(A,e,t,i){const n=[];let g=0;const[I,o]=await Promise.all([Vault.cipherKey(A,!1),Vault.cipherKey(t,!0)]);for(const a of A_STORE_KEYS){const r=await storage_get(a);if(!r)continue;const s=string8_to_buffer(r);g+=s.byteLength,n.push((async()=>{let B;try{B=await decrypt(s,I,e)}catch{B=await decrypt(s,o,e)}const C=await encrypt(B,o,i);await chrome.storage.local.set({[a]:buffer_to_string8(C)}),g-=s.byteLength})()),g>NB_RECRYPTION_THRESHOLD&&(await Promise.all(n),n.length=0)}await Promise.all(n)},async peekJson(A,e){const t=await Vault.acquire(A),i=t.readJson(e);return await t.release(),i},async readonly(A){const e=await storage_get(A);return new VaultEntry(A,e??"")},async acquire(A,e=0){const t=`lock_${A}`,i=await session_storage_get(t);if(i){const[I,o]=i.split(":");if(SI_FRAME_LOCAL===I)await new Promise(a=>{let r=0;(h_release_waiters_local[A]=h_release_waiters_local[A]||[]).push(()=>{clearTimeout(r),a(void 0)}),r=globalThis.setTimeout(()=>{syserr({text:`Local lock on '${A}' lasted more than 5 seconds; possible bug in implementation.`})},5e3)});else{console.warn(`'${A}' store is currently locked on a remote frame: ${i}; waiting for release`);try{await global_wait("releaseStore",a=>A===a.key,5e3)}catch{syswarn({text:"Recovered from previous interrupted shutdown."}),await session_storage_remove(`lock_${A}`)}}}const n=SI_FRAME_LOCAL+":"+crypto.randomUUID().slice(24);if(await session_storage_set_isomorphic({[t]:n}),n!==await session_storage_get(t)){if(e>10)throw new Error(`Exceeded maximum retry count while trying to checkout "${A}" from the vault`);return await Vault.acquire(A,e+1)}global_broadcast({type:"acquireStore",value:{key:A}});const g=await storage_get(A);return new WritableVaultEntry(A,g??"")}};function VaultEntry$_fields(A){const e=hm_privates$3.get(A);if(!e)throw new Error(`Attempted to use '${A._si_key}' store after it was released or it was never opened for writing.`);return e}class VaultEntry{constructor(e,t){this._si_key=e,hm_privates$3.set(this,{atu8_ciphertext:string8_to_buffer(t)})}async read(e){const t=restore_as_buffer(await session_storage_get("vector"));if(!t)throw new NotAuthenticatedError;const i=VaultEntry$_fields(this);return i.atu8_ciphertext.byteLength?await decrypt(i.atu8_ciphertext,e,t):new Uint8Array(0)}async readJson(e){let t={};try{const i=await this.read(e);if(!i.byteLength)return null;t=JSON.parse(buffer_to_text(i)),zero_out(i)}catch(i){try{this instanceof WritableVaultEntry&&this.release()}catch{}throw i}return t}}class WritableVaultEntry extends VaultEntry{async release(){if(VaultEntry$_fields(this),hm_privates$3.delete(this),await session_storage_remove(`lock_${this._si_key}`),this._si_key in h_release_waiters_local)for(const e of h_release_waiters_local[this._si_key])e();global_broadcast({type:"releaseStore",value:{key:this._si_key}})}async write(e,t,i=!1){const n=VaultEntry$_fields(this),g=restore_as_buffer(await session_storage_get("vector"));if(!g)throw new NotAuthenticatedError;const I=await encrypt(e,t,g);await chrome.storage.local.set({[this._si_key]:buffer_to_string8(I)}),zero_out(n.atu8_ciphertext),n.atu8_ciphertext=I,queueMicrotask(()=>{global_broadcast({type:"updateStore",value:{key:this._si_key,init:i}})})}async writeJson(e,t,i=!1){const n=text_to_buffer(JSON.stringify(e));return await this.write(n,t,i)}}const hm_privates$2=new WeakMap;class WritableStore{constructor(e,t,i){this._kv_store=e,this._w_cache=t,hm_privates$2.set(this,{dk_cipher:i})}get raw(){return this._w_cache}release(){return this._kv_store.release()}save(e=!1){return this._kv_store.writeJson(this._w_cache,hm_privates$2.get(this).dk_cipher,e)}}class WritableStoreArray extends WritableStore{get size(){return this._w_cache.length}at(e){return this._w_cache[e]??null}map(e){return this._w_cache.map(e)}async prepend(e){this._w_cache.unshift(e),await this.save()}async append(e){this._w_cache.unshift(e),await this.save()}}class WritableStoreMap extends WritableStore{*[Symbol.iterator](){for(const e of ode(this._w_cache))yield e}at(e){return this._w_cache[e]??null}reduce(e){return oderac(this._w_cache,e)}entries(){return ode(this._w_cache)}}class WritableStoreDict extends WritableStore{get(e){return this._w_cache[e]??null}async set(e,t){this._w_cache[e]=t,await this.save()}}async function fetch_cipher(){const A=await Vault.getRootKey();if(!A)throw new NotAuthenticatedError;return await Vault.cipherKey(A,!0)}function create_store_class({store:A,class:e,extension:t}){return Object.assign(e,{async open(i){const n=await fetch_cipher(),g=await Vault.acquire(A);let I=await g.readJson(n),o=!1;I||(I=H_STORE_INITS[A],o=!0);const a=new e(g,I,n);o&&await a.save(!0);const r=await i(a);return await a.release(),r},read(){return e.open(i=>i)},...t==="array"&&{async prepend(i){return await e.open(n=>n.prepend(i))},async append(i){return await e.open(n=>n.append(i))}},...t==="map"&&{async at(i){return await e.open(n=>n.at(i))}},...t==="dict"&&{async get(i){return await e.open(n=>n.get(i))},async set(i,n){return await e.open(g=>g.put(i,n))}}})}function subscribe_store(A,e){return global_receive({updateStore({key:t,init:i}){t===A&&e(i)}})}(async()=>await instantiateRipemd160())();const Chains=create_store_class({store:SI_STORE_CHAINS,class:class HA extends WritableStoreMap{static pathFor(e,t){return`/family.${e}/chain.${t}`}static pathFrom(e){return HA.pathFor(e.family,e.id)}static addressFor(e,t=yw_chain.get(),i=t.bech32s.acc){const n=sha256_sync$1(base64_to_buffer(e)),g=ripemd160_sync(n);return bech32.encode(i.hrp,bech32.toWords(g))}static bech32(e,t=yw_chain.get(),i=t.bech32s.acc){return`${i.hrp}${i.separator}${e}`}static get(e,t){return Chains.read().then(i=>i.get(e,t))}static at(e){return Chains.read().then(t=>t.at(e))}static isValidAddressFor(e,t,i="acc"){if(e.bech32s){const n=R_BECH32.exec(t);return n&&n[1]===e.bech32s[i].hrp&&n[2]===e.bech32s[i].separator}else return!1}*inFamily(e){const t=HA.pathFor(e,"");for(const[i,n]of ode(this._w_cache))i.startsWith(t)&&(yield[i,n])}get(e,t){const i=HA.pathFor(e,t);return this._w_cache[i]??null}async put(e){const t=HA.pathFrom(e);return this._w_cache[t]=e,await this.save(),t}}}),TokenRegistry={"cw-20":{attributes:{fungible:!1}},"snip-20":{attributes:{fungible:!0}},"snip-21":{extends:"snip-20",attributes:{fungible:!0}},"snip-721":{attributes:{fungible:!1}},"snip-722":{extends:"snip-721",attributes:{fungible:!1}}},Entities=create_store_class({store:SI_STORE_ENTITIES,class:class extends WritableStoreDict{static pathFrom(e,t=yw_chain.get()){return`${Chains.pathFrom(t)}/bech32.${e.bech32}`}static parseEntityPath(e){const t=e.slice(1).split("/");if(t.length<3||!t[0].startsWith("family.")||!t[1].startsWith("chain.")||!t[2].startsWith("bech32."))return null;let i,n="";if(t[3]==="as.contract")i="contract";else if(t[3]==="as.token")i="token";else if(t[3].startsWith("holding."))i="holding",n=t[3].slice(t[3].indexOf(".")+1);else return null;const g="/"+t.slice(0,2).join("/");return{chainRef:g,entityRef:`${g}/${t[3]}`,bech32:t[2].slice(t[2].indexOf(".")+1),type:i,...n&&{coin:n}}}static holdingPathFor(e,t,i=yw_chain_ref.get()){return`${i}/bech32.${e}/holding.${t}`}static async readTokens(e,t=null){return(await Entities.read()).tokens(Chains.pathFrom(e),t)}static async readFungibleTokens(e){const t=await Entities.read(),i=fold(e.tokenInterfaces,n=>TokenRegistry[n].attributes.fungible?{[n]:{}}:{});return t.tokens(Chains.pathFrom(e),i)}static fungibleInterfacesFor(e){return fold(e.tokenInterfaces,t=>TokenRegistry[t].attributes.fungible?{[t]:{}}:{})}static async infoForToken(e){}filteredMap(e){const t=this._w_cache,i={};for(const n in t){const g=e(n,t[n]);g&&(i[n]=g)}return i}every(e){const t=this._w_cache;for(const i in t)if(!e(i,t[i]))return!1;return!0}tokens(e,t=null){const i={};return this.every((n,g)=>{let I;if(n.startsWith(e)&&(I=g["as.contract"]))for(const o in I){if(!o.startsWith("token."))continue;const a=o.slice(6);(!t||a in t)&&(i[a][n]=I[o])}return!0}),i}}}),QueryCache=create_store_class({store:SI_STORE_QUERY_CACHE,extension:"map",class:class extends WritableStoreMap{async set(e,t){this._w_cache[e]=t,await this.save()}}});var grpcWebClient_umd$1={exports:{}};(function(A,e){(function(t,i){A.exports=i()})(commonjsGlobal,function(){return t={418:function(n,g){(function(I,o){for(var a in o)I[a]=o[a]})(g,function(I){var o={};function a(r){if(o[r])return o[r].exports;var s=o[r]={i:r,l:!1,exports:{}};return I[r].call(s.exports,s,s.exports,a),s.l=!0,s.exports}return a.m=I,a.c=o,a.i=function(r){return r},a.d=function(r,s,B){a.o(r,s)||Object.defineProperty(r,s,{configurable:!1,enumerable:!0,get:B})},a.n=function(r){var s=r&&r.__esModule?function(){return r.default}:function(){return r};return a.d(s,"a",s),s},a.o=function(r,s){return Object.prototype.hasOwnProperty.call(r,s)},a.p="",a(a.s=1)}([function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(3),s=function(){function B(C,l){C===void 0&&(C={}),l===void 0&&(l={splitValues:!1});var c,Q=this;this.headersMap={},C&&(typeof Headers<"u"&&C instanceof Headers?r.getHeaderKeys(C).forEach(function(E){r.getHeaderValues(C,E).forEach(function(f){l.splitValues?Q.append(E,r.splitHeaderValue(f)):Q.append(E,f)})}):typeof(c=C)=="object"&&typeof c.headersMap=="object"&&typeof c.forEach=="function"?C.forEach(function(E,f){Q.append(E,f)}):typeof Map<"u"&&C instanceof Map?C.forEach(function(E,f){Q.append(f,E)}):typeof C=="string"?this.appendFromString(C):typeof C=="object"&&Object.getOwnPropertyNames(C).forEach(function(E){var f=C[E];Array.isArray(f)?f.forEach(function(u){Q.append(E,u)}):Q.append(E,f)}))}return B.prototype.appendFromString=function(C){for(var l=C.split(`\r
`),c=0;c<l.length;c++){var Q=l[c],E=Q.indexOf(":");if(E>0){var f=Q.substring(0,E).trim(),u=Q.substring(E+1).trim();this.append(f,u)}}},B.prototype.delete=function(C,l){var c=r.normalizeName(C);if(l===void 0)delete this.headersMap[c];else{var Q=this.headersMap[c];if(Q){var E=Q.indexOf(l);E>=0&&Q.splice(E,1),Q.length===0&&delete this.headersMap[c]}}},B.prototype.append=function(C,l){var c=this,Q=r.normalizeName(C);Array.isArray(this.headersMap[Q])||(this.headersMap[Q]=[]),Array.isArray(l)?l.forEach(function(E){c.headersMap[Q].push(r.normalizeValue(E))}):this.headersMap[Q].push(r.normalizeValue(l))},B.prototype.set=function(C,l){var c=r.normalizeName(C);if(Array.isArray(l)){var Q=[];l.forEach(function(E){Q.push(r.normalizeValue(E))}),this.headersMap[c]=Q}else this.headersMap[c]=[r.normalizeValue(l)]},B.prototype.has=function(C,l){var c=this.headersMap[r.normalizeName(C)];if(!Array.isArray(c))return!1;if(l!==void 0){var Q=r.normalizeValue(l);return c.indexOf(Q)>=0}return!0},B.prototype.get=function(C){var l=this.headersMap[r.normalizeName(C)];return l!==void 0?l.concat():[]},B.prototype.forEach=function(C){var l=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(c){C(c,l.headersMap[c])},this)},B.prototype.toHeaders=function(){if(typeof Headers<"u"){var C=new Headers;return this.forEach(function(l,c){c.forEach(function(Q){C.append(l,Q)})}),C}throw new Error("Headers class is not defined")},B}();o.BrowserHeaders=s},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(0);o.BrowserHeaders=r.BrowserHeaders},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.iterateHeaders=function(r,s){for(var B=r[Symbol.iterator](),C=B.next();!C.done;)s(C.value[0]),C=B.next()},o.iterateHeadersKeys=function(r,s){for(var B=r.keys(),C=B.next();!C.done;)s(C.value),C=B.next()}},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(2);o.normalizeName=function(s){if(typeof s!="string"&&(s=String(s)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(s))throw new TypeError("Invalid character in header field name");return s.toLowerCase()},o.normalizeValue=function(s){return typeof s!="string"&&(s=String(s)),s},o.getHeaderValues=function(s,B){var C=s;if(C instanceof Headers&&C.getAll)return C.getAll(B);var l=C.get(B);return l&&typeof l=="string"?[l]:l},o.getHeaderKeys=function(s){var B=s,C={},l=[];return B.keys?r.iterateHeadersKeys(B,function(c){C[c]||(C[c]=!0,l.push(c))}):B.forEach?B.forEach(function(c,Q){C[Q]||(C[Q]=!0,l.push(Q))}):r.iterateHeaders(B,function(c){var Q=c[0];C[Q]||(C[Q]=!0,l.push(Q))}),l},o.splitHeaderValue=function(s){var B=[];return s.split(", ").forEach(function(C){C.split(",").forEach(function(l){B.push(l)})}),B}}]))},617:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.ChunkParser=g.ChunkType=g.encodeASCII=g.decodeASCII=void 0;var o,a=I(65);function r(E){return(f=E)===9||f===10||f===13||E>=32&&E<=126;var f}function s(E){for(var f=0;f!==E.length;++f)if(!r(E[f]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(E))}function B(E){return(128&E.getUint8(0))==128}function C(E){return E.getUint32(1,!1)}function l(E,f,u){return E.byteLength-f>=u}function c(E,f,u){if(E.slice)return E.slice(f,u);var h=E.length;u!==void 0&&(h=u);for(var p=new Uint8Array(h-f),S=0,H=f;H<h;H++)p[S++]=E[H];return p}g.decodeASCII=s,g.encodeASCII=function(E){for(var f=new Uint8Array(E.length),u=0;u!==E.length;++u){var h=E.charCodeAt(u);if(!r(h))throw new Error("Metadata contains invalid ASCII");f[u]=h}return f},function(E){E[E.MESSAGE=1]="MESSAGE",E[E.TRAILERS=2]="TRAILERS"}(o=g.ChunkType||(g.ChunkType={}));var Q=function(){function E(){this.buffer=null,this.position=0}return E.prototype.parse=function(f,u){if(f.length===0&&u)return[];var h,p=[];if(this.buffer==null)this.buffer=f,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=f,this.position=0;else{var S=this.buffer.byteLength-this.position,H=new Uint8Array(S+f.byteLength),M=c(this.buffer,this.position);H.set(M,0);var d=new Uint8Array(f);H.set(d,S),this.buffer=H,this.position=0}for(;;){if(!l(this.buffer,this.position,5))return p;var y=c(this.buffer,this.position,this.position+5),w=new DataView(y.buffer,y.byteOffset,y.byteLength),k=C(w);if(!l(this.buffer,this.position,5+k))return p;var D=c(this.buffer,this.position+5,this.position+5+k);if(this.position+=5+k,B(w))return p.push({chunkType:o.TRAILERS,trailers:(h=D,new a.Metadata(s(h)))}),p;p.push({chunkType:o.MESSAGE,data:D})}},E}();g.ChunkParser=Q},8:function(n,g){var I;Object.defineProperty(g,"__esModule",{value:!0}),g.httpStatusToCode=g.Code=void 0,function(o){o[o.OK=0]="OK",o[o.Canceled=1]="Canceled",o[o.Unknown=2]="Unknown",o[o.InvalidArgument=3]="InvalidArgument",o[o.DeadlineExceeded=4]="DeadlineExceeded",o[o.NotFound=5]="NotFound",o[o.AlreadyExists=6]="AlreadyExists",o[o.PermissionDenied=7]="PermissionDenied",o[o.ResourceExhausted=8]="ResourceExhausted",o[o.FailedPrecondition=9]="FailedPrecondition",o[o.Aborted=10]="Aborted",o[o.OutOfRange=11]="OutOfRange",o[o.Unimplemented=12]="Unimplemented",o[o.Internal=13]="Internal",o[o.Unavailable=14]="Unavailable",o[o.DataLoss=15]="DataLoss",o[o.Unauthenticated=16]="Unauthenticated"}(I=g.Code||(g.Code={})),g.httpStatusToCode=function(o){switch(o){case 0:return I.Internal;case 200:return I.OK;case 400:return I.InvalidArgument;case 401:return I.Unauthenticated;case 403:return I.PermissionDenied;case 404:return I.NotFound;case 409:return I.Aborted;case 412:return I.FailedPrecondition;case 429:return I.ResourceExhausted;case 499:return I.Canceled;case 500:return I.Unknown;case 501:return I.Unimplemented;case 503:return I.Unavailable;case 504:return I.DeadlineExceeded;default:return I.Unknown}}},934:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.client=void 0;var o=I(65),a=I(617),r=I(8),s=I(346),B=I(57),C=I(882);g.client=function(Q,E){return new l(Q,E)};var l=function(){function Q(E,f){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new a.ChunkParser,this.methodDefinition=E,this.props=f,this.createTransport()}return Q.prototype.createTransport=function(){var E=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,f={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:E,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(f):this.transport=B.makeDefaultTransport(f)},Q.prototype.onTransportHeaders=function(E,f){if(this.props.debug&&s.debug("onHeaders",E,f),this.closed)this.props.debug&&s.debug("grpc.onHeaders received after request was closed - ignoring");else if(f!==0){this.responseHeaders=E,this.props.debug&&s.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var u=c(E);this.props.debug&&s.debug("onHeaders.gRPCStatus",u);var h=u&&u>=0?u:r.httpStatusToCode(f);this.props.debug&&s.debug("onHeaders.code",h);var p=E.get("grpc-message")||[];if(this.props.debug&&s.debug("onHeaders.gRPCMessage",p),this.rawOnHeaders(E),h!==r.Code.OK){var S=this.decodeGRPCStatus(p[0]);this.rawOnError(h,S,E)}}},Q.prototype.onTransportChunk=function(E){var f=this;if(this.closed)this.props.debug&&s.debug("grpc.onChunk received after request was closed - ignoring");else{var u=[];try{u=this.parser.parse(E)}catch(h){return this.props.debug&&s.debug("onChunk.parsing error",h,h.message),void this.rawOnError(r.Code.Internal,"parsing error: "+h.message)}u.forEach(function(h){if(h.chunkType===a.ChunkType.MESSAGE){var p=f.methodDefinition.responseType.deserializeBinary(h.data);f.rawOnMessage(p)}else h.chunkType===a.ChunkType.TRAILERS&&(f.responseHeaders?(f.responseTrailers=new o.Metadata(h.trailers),f.props.debug&&s.debug("onChunk.trailers",f.responseTrailers)):(f.responseHeaders=new o.Metadata(h.trailers),f.rawOnHeaders(f.responseHeaders)))})}},Q.prototype.onTransportEnd=function(){if(this.props.debug&&s.debug("grpc.onEnd"),this.closed)this.props.debug&&s.debug("grpc.onEnd received after request was closed - ignoring");else if(this.responseTrailers!==void 0){var E=c(this.responseTrailers);if(E!==null){var f=this.responseTrailers.get("grpc-message"),u=this.decodeGRPCStatus(f[0]);this.rawOnEnd(E,u,this.responseTrailers)}else this.rawOnError(r.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(this.responseHeaders===void 0)return void this.rawOnError(r.Code.Unknown,"Response closed without headers");var h=c(this.responseHeaders),p=this.responseHeaders.get("grpc-message");if(this.props.debug&&s.debug("grpc.headers only response ",h,p),h===null)return void this.rawOnEnd(r.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var S=this.decodeGRPCStatus(p[0]);this.rawOnEnd(h,S,this.responseHeaders)}},Q.prototype.decodeGRPCStatus=function(E){if(!E)return"";try{return decodeURIComponent(E)}catch{return E}},Q.prototype.rawOnEnd=function(E,f,u){var h=this;this.props.debug&&s.debug("rawOnEnd",E,f,u),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(p){if(!h.closed)try{p(E,f,u)}catch(S){setTimeout(function(){throw S},0)}}))},Q.prototype.rawOnHeaders=function(E){this.props.debug&&s.debug("rawOnHeaders",E),this.completed||this.onHeadersCallbacks.forEach(function(f){try{f(E)}catch(u){setTimeout(function(){throw u},0)}})},Q.prototype.rawOnError=function(E,f,u){var h=this;u===void 0&&(u=new o.Metadata),this.props.debug&&s.debug("rawOnError",E,f),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(p){if(!h.closed)try{p(E,f,u)}catch(S){setTimeout(function(){throw S},0)}}))},Q.prototype.rawOnMessage=function(E){var f=this;this.props.debug&&s.debug("rawOnMessage",E.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach(function(u){if(!f.closed)try{u(E)}catch(h){setTimeout(function(){throw h},0)}})},Q.prototype.onHeaders=function(E){this.onHeadersCallbacks.push(E)},Q.prototype.onMessage=function(E){this.onMessageCallbacks.push(E)},Q.prototype.onEnd=function(E){this.onEndCallbacks.push(E)},Q.prototype.start=function(E){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var f=new o.Metadata(E||{});f.set("content-type","application/grpc-web+proto"),f.set("x-grpc-web","1"),this.transport.start(f)},Q.prototype.send=function(E){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var f=C.frameRequest(E);this.transport.sendMessage(f)},Q.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},Q.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&s.debug("request.abort aborting request"),this.transport.cancel()},Q}();function c(Q){var E=Q.get("grpc-status")||[];if(E.length>0)try{var f=E[0];return parseInt(f,10)}catch{return null}return null}},346:function(n,g){Object.defineProperty(g,"__esModule",{value:!0}),g.debug=void 0,g.debug=function(){for(var I=[],o=0;o<arguments.length;o++)I[o]=arguments[o];console.debug?console.debug.apply(null,I):console.log.apply(null,I)}},607:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.grpc=void 0;var o,a=I(418),r=I(57),s=I(229),B=I(540),C=I(210),l=I(859),c=I(8),Q=I(938),E=I(35),f=I(934);(o=g.grpc||(g.grpc={})).setDefaultTransport=r.setDefaultTransportFactory,o.CrossBrowserHttpTransport=l.CrossBrowserHttpTransport,o.FetchReadableStreamTransport=s.FetchReadableStreamTransport,o.XhrTransport=C.XhrTransport,o.WebsocketTransport=B.WebsocketTransport,o.Code=c.Code,o.Metadata=a.BrowserHeaders,o.client=function(u,h){return f.client(u,h)},o.invoke=Q.invoke,o.unary=E.unary},938:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.invoke=void 0;var o=I(934);g.invoke=function(a,r){if(a.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var s=o.client(a,{host:r.host,transport:r.transport,debug:r.debug});return r.onHeaders&&s.onHeaders(r.onHeaders),r.onMessage&&s.onMessage(r.onMessage),r.onEnd&&s.onEnd(r.onEnd),s.start(r.metadata),s.send(r.request),s.finishSend(),{close:function(){s.close()}}}},65:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.Metadata=void 0;var o=I(418);Object.defineProperty(g,"Metadata",{enumerable:!0,get:function(){return o.BrowserHeaders}})},57:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.makeDefaultTransport=g.setDefaultTransportFactory=void 0;var o=I(859),a=function(r){return o.CrossBrowserHttpTransport({withCredentials:!1})(r)};g.setDefaultTransportFactory=function(r){a=r},g.makeDefaultTransport=function(r){return a(r)}},229:function(n,g,I){var o=this&&this.__assign||function(){return(o=Object.assign||function(B){for(var C,l=1,c=arguments.length;l<c;l++)for(var Q in C=arguments[l])Object.prototype.hasOwnProperty.call(C,Q)&&(B[Q]=C[Q]);return B}).apply(this,arguments)};Object.defineProperty(g,"__esModule",{value:!0}),g.detectFetchSupport=g.FetchReadableStreamTransport=void 0;var a=I(65),r=I(346);g.FetchReadableStreamTransport=function(B){return function(C){return function(l,c){return l.debug&&r.debug("fetchRequest",l),new s(l,c)}(C,B)}};var s=function(){function B(C,l){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=C,this.init=l}return B.prototype.pump=function(C,l){var c=this;if(this.reader=C,this.cancelled)return this.options.debug&&r.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch(function(Q){c.options.debug&&r.debug("Fetch.pump.reader.cancel exception",Q)});this.reader.read().then(function(Q){if(Q.done)return c.options.onEnd(),l;c.options.onChunk(Q.value),c.pump(c.reader,l)}).catch(function(Q){c.cancelled?c.options.debug&&r.debug("Fetch.catch - request cancelled"):(c.cancelled=!0,c.options.debug&&r.debug("Fetch.catch",Q.message),c.options.onEnd(Q))})},B.prototype.send=function(C){var l=this;fetch(this.options.url,o(o({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:C,signal:this.controller&&this.controller.signal})).then(function(c){if(l.options.debug&&r.debug("Fetch.response",c),l.options.onHeaders(new a.Metadata(c.headers),c.status),!c.body)return c;l.pump(c.body.getReader(),c)}).catch(function(c){l.cancelled?l.options.debug&&r.debug("Fetch.catch - request cancelled"):(l.cancelled=!0,l.options.debug&&r.debug("Fetch.catch",c.message),l.options.onEnd(c))})},B.prototype.sendMessage=function(C){this.send(C)},B.prototype.finishSend=function(){},B.prototype.start=function(C){this.metadata=C},B.prototype.cancel=function(){var C=this;this.cancelled?this.options.debug&&r.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&r.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&r.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&r.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch(function(l){C.options.debug&&r.debug("Fetch.cancel.reader.cancel exception",l)})):this.options.debug&&r.debug("Fetch.cancel before reader"))},B}();g.detectFetchSupport=function(){return typeof Response<"u"&&Response.prototype.hasOwnProperty("body")&&typeof Headers=="function"}},859:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.CrossBrowserHttpTransport=void 0;var o=I(229),a=I(210);g.CrossBrowserHttpTransport=function(r){if(o.detectFetchSupport()){var s={credentials:r.withCredentials?"include":"same-origin"};return o.FetchReadableStreamTransport(s)}return a.XhrTransport({withCredentials:r.withCredentials})}},210:function(n,g,I){var o,a=this&&this.__extends||(o=function(E,f){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(u,h){u.__proto__=h}||function(u,h){for(var p in h)Object.prototype.hasOwnProperty.call(h,p)&&(u[p]=h[p])})(E,f)},function(E,f){function u(){this.constructor=E}o(E,f),E.prototype=f===null?Object.create(f):(u.prototype=f.prototype,new u)});Object.defineProperty(g,"__esModule",{value:!0}),g.stringToArrayBuffer=g.MozChunkedArrayBufferXHR=g.XHR=g.XhrTransport=void 0;var r=I(65),s=I(346),B=I(849);g.XhrTransport=function(E){return function(f){if(B.detectMozXHRSupport())return new l(f,E);if(B.detectXHROverrideMimeTypeSupport())return new C(f,E);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var C=function(){function E(f,u){this.options=f,this.init=u}return E.prototype.onProgressEvent=function(){this.options.debug&&s.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var f=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var u=Q(f);this.options.onChunk(u)},E.prototype.onLoadEvent=function(){this.options.debug&&s.debug("XHR.onLoadEvent"),this.options.onEnd()},E.prototype.onStateChange=function(){this.options.debug&&s.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new r.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},E.prototype.sendMessage=function(f){this.xhr.send(f)},E.prototype.finishSend=function(){},E.prototype.start=function(f){var u=this;this.metadata=f;var h=new XMLHttpRequest;this.xhr=h,h.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach(function(p,S){h.setRequestHeader(p,S.join(", "))}),h.withCredentials=Boolean(this.init.withCredentials),h.addEventListener("readystatechange",this.onStateChange.bind(this)),h.addEventListener("progress",this.onProgressEvent.bind(this)),h.addEventListener("loadend",this.onLoadEvent.bind(this)),h.addEventListener("error",function(p){u.options.debug&&s.debug("XHR.error",p),u.options.onEnd(p.error)})},E.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},E.prototype.cancel=function(){this.options.debug&&s.debug("XHR.abort"),this.xhr.abort()},E}();g.XHR=C;var l=function(E){function f(){return E!==null&&E.apply(this,arguments)||this}return a(f,E),f.prototype.configureXhr=function(){this.options.debug&&s.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},f.prototype.onProgressEvent=function(){var u=this.xhr.response;this.options.debug&&s.debug("MozXHR.onProgressEvent: ",new Uint8Array(u)),this.options.onChunk(new Uint8Array(u))},f}(C);function c(E,f){var u=E.charCodeAt(f);if(u>=55296&&u<=56319){var h=E.charCodeAt(f+1);h>=56320&&h<=57343&&(u=65536+(u-55296<<10)+(h-56320))}return u}function Q(E){for(var f=new Uint8Array(E.length),u=0,h=0;h<E.length;h++){var p=String.prototype.codePointAt?E.codePointAt(h):c(E,h);f[u++]=255&p}return f}g.MozChunkedArrayBufferXHR=l,g.stringToArrayBuffer=Q},849:function(n,g){var I;function o(){if(I!==void 0)return I;if(XMLHttpRequest){I=new XMLHttpRequest;try{I.open("GET","https://localhost")}catch{}}return I}function a(r){var s=o();if(!s)return!1;try{return s.responseType=r,s.responseType===r}catch{}return!1}Object.defineProperty(g,"__esModule",{value:!0}),g.detectXHROverrideMimeTypeSupport=g.detectMozXHRSupport=g.xhrSupportsResponseType=void 0,g.xhrSupportsResponseType=a,g.detectMozXHRSupport=function(){return typeof XMLHttpRequest<"u"&&a("moz-chunked-arraybuffer")},g.detectXHROverrideMimeTypeSupport=function(){return typeof XMLHttpRequest<"u"&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.WebsocketTransport=void 0;var o,a=I(346),r=I(617);(function(B){B[B.FINISH_SEND=1]="FINISH_SEND"})(o||(o={}));var s=new Uint8Array([1]);g.WebsocketTransport=function(){return function(B){return function(C){C.debug&&a.debug("websocketRequest",C);var l,c=function(f){if(f.substr(0,8)==="https://")return"wss://"+f.substr(8);if(f.substr(0,7)==="http://")return"ws://"+f.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(C.url),Q=[];function E(f){if(f===o.FINISH_SEND)l.send(s);else{var u=f,h=new Int8Array(u.byteLength+1);h.set(new Uint8Array([0])),h.set(u,1),l.send(h)}}return{sendMessage:function(f){l&&l.readyState!==l.CONNECTING?E(f):Q.push(f)},finishSend:function(){l&&l.readyState!==l.CONNECTING?E(o.FINISH_SEND):Q.push(o.FINISH_SEND)},start:function(f){(l=new WebSocket(c,["grpc-websockets"])).binaryType="arraybuffer",l.onopen=function(){var u;C.debug&&a.debug("websocketRequest.onopen"),l.send((u="",f.forEach(function(h,p){u+=h+": "+p.join(", ")+`\r
`}),r.encodeASCII(u))),Q.forEach(function(h){E(h)})},l.onclose=function(u){C.debug&&a.debug("websocketRequest.onclose",u),C.onEnd()},l.onerror=function(u){C.debug&&a.debug("websocketRequest.onerror",u)},l.onmessage=function(u){C.onChunk(new Uint8Array(u.data))}},cancel:function(){C.debug&&a.debug("websocket.abort"),l.close()}}}(B)}}},35:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.unary=void 0;var o=I(65),a=I(934);g.unary=function(r,s){if(r.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(r.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var B=null,C=null,l=a.client(r,{host:s.host,transport:s.transport,debug:s.debug});return l.onHeaders(function(c){B=c}),l.onMessage(function(c){C=c}),l.onEnd(function(c,Q,E){s.onEnd({status:c,statusMessage:Q,headers:B||new o.Metadata,message:C,trailers:E})}),l.start(s.metadata),l.send(s.request),l.finishSend(),{close:function(){l.close()}}}},882:function(n,g){Object.defineProperty(g,"__esModule",{value:!0}),g.frameRequest=void 0,g.frameRequest=function(I){var o=I.serializeBinary(),a=new ArrayBuffer(o.byteLength+5);return new DataView(a,1,4).setUint32(0,o.length,!1),new Uint8Array(a,5).set(o),new Uint8Array(a)}}},i={},function n(g){if(i[g])return i[g].exports;var I=i[g]={exports:{}};return t[g].call(I.exports,I,I.exports,n),I.exports}(607);var t,i})})(grpcWebClient_umd$1);var grpcWebClient_umd={exports:{}};(function(A,e){(function(t,i){A.exports=i()})(commonjsGlobal,function(){return t={418:function(n,g){(function(I,o){for(var a in o)I[a]=o[a]})(g,function(I){var o={};function a(r){if(o[r])return o[r].exports;var s=o[r]={i:r,l:!1,exports:{}};return I[r].call(s.exports,s,s.exports,a),s.l=!0,s.exports}return a.m=I,a.c=o,a.i=function(r){return r},a.d=function(r,s,B){a.o(r,s)||Object.defineProperty(r,s,{configurable:!1,enumerable:!0,get:B})},a.n=function(r){var s=r&&r.__esModule?function(){return r.default}:function(){return r};return a.d(s,"a",s),s},a.o=function(r,s){return Object.prototype.hasOwnProperty.call(r,s)},a.p="",a(a.s=1)}([function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(3),s=function(){function B(C,l){C===void 0&&(C={}),l===void 0&&(l={splitValues:!1});var c,Q=this;this.headersMap={},C&&(typeof Headers<"u"&&C instanceof Headers?r.getHeaderKeys(C).forEach(function(E){r.getHeaderValues(C,E).forEach(function(f){l.splitValues?Q.append(E,r.splitHeaderValue(f)):Q.append(E,f)})}):typeof(c=C)=="object"&&typeof c.headersMap=="object"&&typeof c.forEach=="function"?C.forEach(function(E,f){Q.append(E,f)}):typeof Map<"u"&&C instanceof Map?C.forEach(function(E,f){Q.append(f,E)}):typeof C=="string"?this.appendFromString(C):typeof C=="object"&&Object.getOwnPropertyNames(C).forEach(function(E){var f=C[E];Array.isArray(f)?f.forEach(function(u){Q.append(E,u)}):Q.append(E,f)}))}return B.prototype.appendFromString=function(C){for(var l=C.split(`\r
`),c=0;c<l.length;c++){var Q=l[c],E=Q.indexOf(":");if(E>0){var f=Q.substring(0,E).trim(),u=Q.substring(E+1).trim();this.append(f,u)}}},B.prototype.delete=function(C,l){var c=r.normalizeName(C);if(l===void 0)delete this.headersMap[c];else{var Q=this.headersMap[c];if(Q){var E=Q.indexOf(l);E>=0&&Q.splice(E,1),Q.length===0&&delete this.headersMap[c]}}},B.prototype.append=function(C,l){var c=this,Q=r.normalizeName(C);Array.isArray(this.headersMap[Q])||(this.headersMap[Q]=[]),Array.isArray(l)?l.forEach(function(E){c.headersMap[Q].push(r.normalizeValue(E))}):this.headersMap[Q].push(r.normalizeValue(l))},B.prototype.set=function(C,l){var c=r.normalizeName(C);if(Array.isArray(l)){var Q=[];l.forEach(function(E){Q.push(r.normalizeValue(E))}),this.headersMap[c]=Q}else this.headersMap[c]=[r.normalizeValue(l)]},B.prototype.has=function(C,l){var c=this.headersMap[r.normalizeName(C)];if(!Array.isArray(c))return!1;if(l!==void 0){var Q=r.normalizeValue(l);return c.indexOf(Q)>=0}return!0},B.prototype.get=function(C){var l=this.headersMap[r.normalizeName(C)];return l!==void 0?l.concat():[]},B.prototype.forEach=function(C){var l=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(c){C(c,l.headersMap[c])},this)},B.prototype.toHeaders=function(){if(typeof Headers<"u"){var C=new Headers;return this.forEach(function(l,c){c.forEach(function(Q){C.append(l,Q)})}),C}throw new Error("Headers class is not defined")},B}();o.BrowserHeaders=s},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(0);o.BrowserHeaders=r.BrowserHeaders},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0}),o.iterateHeaders=function(r,s){for(var B=r[Symbol.iterator](),C=B.next();!C.done;)s(C.value[0]),C=B.next()},o.iterateHeadersKeys=function(r,s){for(var B=r.keys(),C=B.next();!C.done;)s(C.value),C=B.next()}},function(I,o,a){Object.defineProperty(o,"__esModule",{value:!0});var r=a(2);o.normalizeName=function(s){if(typeof s!="string"&&(s=String(s)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(s))throw new TypeError("Invalid character in header field name");return s.toLowerCase()},o.normalizeValue=function(s){return typeof s!="string"&&(s=String(s)),s},o.getHeaderValues=function(s,B){var C=s;if(C instanceof Headers&&C.getAll)return C.getAll(B);var l=C.get(B);return l&&typeof l=="string"?[l]:l},o.getHeaderKeys=function(s){var B=s,C={},l=[];return B.keys?r.iterateHeadersKeys(B,function(c){C[c]||(C[c]=!0,l.push(c))}):B.forEach?B.forEach(function(c,Q){C[Q]||(C[Q]=!0,l.push(Q))}):r.iterateHeaders(B,function(c){var Q=c[0];C[Q]||(C[Q]=!0,l.push(Q))}),l},o.splitHeaderValue=function(s){var B=[];return s.split(", ").forEach(function(C){C.split(",").forEach(function(l){B.push(l)})}),B}}]))},617:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.ChunkParser=g.ChunkType=g.encodeASCII=g.decodeASCII=void 0;var o,a=I(65);function r(E){return(f=E)===9||f===10||f===13||E>=32&&E<=126;var f}function s(E){for(var f=0;f!==E.length;++f)if(!r(E[f]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(E))}function B(E){return(128&E.getUint8(0))==128}function C(E){return E.getUint32(1,!1)}function l(E,f,u){return E.byteLength-f>=u}function c(E,f,u){if(E.slice)return E.slice(f,u);var h=E.length;u!==void 0&&(h=u);for(var p=new Uint8Array(h-f),S=0,H=f;H<h;H++)p[S++]=E[H];return p}g.decodeASCII=s,g.encodeASCII=function(E){for(var f=new Uint8Array(E.length),u=0;u!==E.length;++u){var h=E.charCodeAt(u);if(!r(h))throw new Error("Metadata contains invalid ASCII");f[u]=h}return f},function(E){E[E.MESSAGE=1]="MESSAGE",E[E.TRAILERS=2]="TRAILERS"}(o=g.ChunkType||(g.ChunkType={}));var Q=function(){function E(){this.buffer=null,this.position=0}return E.prototype.parse=function(f,u){if(f.length===0&&u)return[];var h,p=[];if(this.buffer==null)this.buffer=f,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=f,this.position=0;else{var S=this.buffer.byteLength-this.position,H=new Uint8Array(S+f.byteLength),M=c(this.buffer,this.position);H.set(M,0);var d=new Uint8Array(f);H.set(d,S),this.buffer=H,this.position=0}for(;;){if(!l(this.buffer,this.position,5))return p;var y=c(this.buffer,this.position,this.position+5),w=new DataView(y.buffer,y.byteOffset,y.byteLength),k=C(w);if(!l(this.buffer,this.position,5+k))return p;var D=c(this.buffer,this.position+5,this.position+5+k);if(this.position+=5+k,B(w))return p.push({chunkType:o.TRAILERS,trailers:(h=D,new a.Metadata(s(h)))}),p;p.push({chunkType:o.MESSAGE,data:D})}},E}();g.ChunkParser=Q},8:function(n,g){var I;Object.defineProperty(g,"__esModule",{value:!0}),g.httpStatusToCode=g.Code=void 0,function(o){o[o.OK=0]="OK",o[o.Canceled=1]="Canceled",o[o.Unknown=2]="Unknown",o[o.InvalidArgument=3]="InvalidArgument",o[o.DeadlineExceeded=4]="DeadlineExceeded",o[o.NotFound=5]="NotFound",o[o.AlreadyExists=6]="AlreadyExists",o[o.PermissionDenied=7]="PermissionDenied",o[o.ResourceExhausted=8]="ResourceExhausted",o[o.FailedPrecondition=9]="FailedPrecondition",o[o.Aborted=10]="Aborted",o[o.OutOfRange=11]="OutOfRange",o[o.Unimplemented=12]="Unimplemented",o[o.Internal=13]="Internal",o[o.Unavailable=14]="Unavailable",o[o.DataLoss=15]="DataLoss",o[o.Unauthenticated=16]="Unauthenticated"}(I=g.Code||(g.Code={})),g.httpStatusToCode=function(o){switch(o){case 0:return I.Internal;case 200:return I.OK;case 400:return I.InvalidArgument;case 401:return I.Unauthenticated;case 403:return I.PermissionDenied;case 404:return I.NotFound;case 409:return I.Aborted;case 412:return I.FailedPrecondition;case 429:return I.ResourceExhausted;case 499:return I.Canceled;case 500:return I.Unknown;case 501:return I.Unimplemented;case 503:return I.Unavailable;case 504:return I.DeadlineExceeded;default:return I.Unknown}}},934:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.client=void 0;var o=I(65),a=I(617),r=I(8),s=I(346),B=I(57),C=I(882);g.client=function(Q,E){return new l(Q,E)};var l=function(){function Q(E,f){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new a.ChunkParser,this.methodDefinition=E,this.props=f,this.createTransport()}return Q.prototype.createTransport=function(){var E=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,f={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:E,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(f):this.transport=B.makeDefaultTransport(f)},Q.prototype.onTransportHeaders=function(E,f){if(this.props.debug&&s.debug("onHeaders",E,f),this.closed)this.props.debug&&s.debug("grpc.onHeaders received after request was closed - ignoring");else if(f!==0){this.responseHeaders=E,this.props.debug&&s.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var u=c(E);this.props.debug&&s.debug("onHeaders.gRPCStatus",u);var h=u&&u>=0?u:r.httpStatusToCode(f);this.props.debug&&s.debug("onHeaders.code",h);var p=E.get("grpc-message")||[];if(this.props.debug&&s.debug("onHeaders.gRPCMessage",p),this.rawOnHeaders(E),h!==r.Code.OK){var S=this.decodeGRPCStatus(p[0]);this.rawOnError(h,S,E)}}},Q.prototype.onTransportChunk=function(E){var f=this;if(this.closed)this.props.debug&&s.debug("grpc.onChunk received after request was closed - ignoring");else{var u=[];try{u=this.parser.parse(E)}catch(h){return this.props.debug&&s.debug("onChunk.parsing error",h,h.message),void this.rawOnError(r.Code.Internal,"parsing error: "+h.message)}u.forEach(function(h){if(h.chunkType===a.ChunkType.MESSAGE){var p=f.methodDefinition.responseType.deserializeBinary(h.data);f.rawOnMessage(p)}else h.chunkType===a.ChunkType.TRAILERS&&(f.responseHeaders?(f.responseTrailers=new o.Metadata(h.trailers),f.props.debug&&s.debug("onChunk.trailers",f.responseTrailers)):(f.responseHeaders=new o.Metadata(h.trailers),f.rawOnHeaders(f.responseHeaders)))})}},Q.prototype.onTransportEnd=function(){if(this.props.debug&&s.debug("grpc.onEnd"),this.closed)this.props.debug&&s.debug("grpc.onEnd received after request was closed - ignoring");else if(this.responseTrailers!==void 0){var E=c(this.responseTrailers);if(E!==null){var f=this.responseTrailers.get("grpc-message"),u=this.decodeGRPCStatus(f[0]);this.rawOnEnd(E,u,this.responseTrailers)}else this.rawOnError(r.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(this.responseHeaders===void 0)return void this.rawOnError(r.Code.Unknown,"Response closed without headers");var h=c(this.responseHeaders),p=this.responseHeaders.get("grpc-message");if(this.props.debug&&s.debug("grpc.headers only response ",h,p),h===null)return void this.rawOnEnd(r.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var S=this.decodeGRPCStatus(p[0]);this.rawOnEnd(h,S,this.responseHeaders)}},Q.prototype.decodeGRPCStatus=function(E){if(!E)return"";try{return decodeURIComponent(E)}catch{return E}},Q.prototype.rawOnEnd=function(E,f,u){var h=this;this.props.debug&&s.debug("rawOnEnd",E,f,u),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(p){if(!h.closed)try{p(E,f,u)}catch(S){setTimeout(function(){throw S},0)}}))},Q.prototype.rawOnHeaders=function(E){this.props.debug&&s.debug("rawOnHeaders",E),this.completed||this.onHeadersCallbacks.forEach(function(f){try{f(E)}catch(u){setTimeout(function(){throw u},0)}})},Q.prototype.rawOnError=function(E,f,u){var h=this;u===void 0&&(u=new o.Metadata),this.props.debug&&s.debug("rawOnError",E,f),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(p){if(!h.closed)try{p(E,f,u)}catch(S){setTimeout(function(){throw S},0)}}))},Q.prototype.rawOnMessage=function(E){var f=this;this.props.debug&&s.debug("rawOnMessage",E.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach(function(u){if(!f.closed)try{u(E)}catch(h){setTimeout(function(){throw h},0)}})},Q.prototype.onHeaders=function(E){this.onHeadersCallbacks.push(E)},Q.prototype.onMessage=function(E){this.onMessageCallbacks.push(E)},Q.prototype.onEnd=function(E){this.onEndCallbacks.push(E)},Q.prototype.start=function(E){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var f=new o.Metadata(E||{});f.set("content-type","application/grpc-web+proto"),f.set("x-grpc-web","1"),this.transport.start(f)},Q.prototype.send=function(E){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var f=C.frameRequest(E);this.transport.sendMessage(f)},Q.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},Q.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&s.debug("request.abort aborting request"),this.transport.cancel()},Q}();function c(Q){var E=Q.get("grpc-status")||[];if(E.length>0)try{var f=E[0];return parseInt(f,10)}catch{return null}return null}},346:function(n,g){Object.defineProperty(g,"__esModule",{value:!0}),g.debug=void 0,g.debug=function(){for(var I=[],o=0;o<arguments.length;o++)I[o]=arguments[o];console.debug?console.debug.apply(null,I):console.log.apply(null,I)}},607:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.grpc=void 0;var o,a=I(418),r=I(57),s=I(229),B=I(540),C=I(210),l=I(859),c=I(8),Q=I(938),E=I(35),f=I(934);(o=g.grpc||(g.grpc={})).setDefaultTransport=r.setDefaultTransportFactory,o.CrossBrowserHttpTransport=l.CrossBrowserHttpTransport,o.FetchReadableStreamTransport=s.FetchReadableStreamTransport,o.XhrTransport=C.XhrTransport,o.WebsocketTransport=B.WebsocketTransport,o.Code=c.Code,o.Metadata=a.BrowserHeaders,o.client=function(u,h){return f.client(u,h)},o.invoke=Q.invoke,o.unary=E.unary},938:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.invoke=void 0;var o=I(934);g.invoke=function(a,r){if(a.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var s=o.client(a,{host:r.host,transport:r.transport,debug:r.debug});return r.onHeaders&&s.onHeaders(r.onHeaders),r.onMessage&&s.onMessage(r.onMessage),r.onEnd&&s.onEnd(r.onEnd),s.start(r.metadata),s.send(r.request),s.finishSend(),{close:function(){s.close()}}}},65:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.Metadata=void 0;var o=I(418);Object.defineProperty(g,"Metadata",{enumerable:!0,get:function(){return o.BrowserHeaders}})},57:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.makeDefaultTransport=g.setDefaultTransportFactory=void 0;var o=I(859),a=function(r){return o.CrossBrowserHttpTransport({withCredentials:!1})(r)};g.setDefaultTransportFactory=function(r){a=r},g.makeDefaultTransport=function(r){return a(r)}},229:function(n,g,I){var o=this&&this.__assign||function(){return(o=Object.assign||function(B){for(var C,l=1,c=arguments.length;l<c;l++)for(var Q in C=arguments[l])Object.prototype.hasOwnProperty.call(C,Q)&&(B[Q]=C[Q]);return B}).apply(this,arguments)};Object.defineProperty(g,"__esModule",{value:!0}),g.detectFetchSupport=g.FetchReadableStreamTransport=void 0;var a=I(65),r=I(346);g.FetchReadableStreamTransport=function(B){return function(C){return function(l,c){return l.debug&&r.debug("fetchRequest",l),new s(l,c)}(C,B)}};var s=function(){function B(C,l){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=C,this.init=l}return B.prototype.pump=function(C,l){var c=this;if(this.reader=C,this.cancelled)return this.options.debug&&r.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch(function(Q){c.options.debug&&r.debug("Fetch.pump.reader.cancel exception",Q)});this.reader.read().then(function(Q){if(Q.done)return c.options.onEnd(),l;c.options.onChunk(Q.value),c.pump(c.reader,l)}).catch(function(Q){c.cancelled?c.options.debug&&r.debug("Fetch.catch - request cancelled"):(c.cancelled=!0,c.options.debug&&r.debug("Fetch.catch",Q.message),c.options.onEnd(Q))})},B.prototype.send=function(C){var l=this;fetch(this.options.url,o(o({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:C,signal:this.controller&&this.controller.signal})).then(function(c){if(l.options.debug&&r.debug("Fetch.response",c),l.options.onHeaders(new a.Metadata(c.headers),c.status),!c.body)return c;l.pump(c.body.getReader(),c)}).catch(function(c){l.cancelled?l.options.debug&&r.debug("Fetch.catch - request cancelled"):(l.cancelled=!0,l.options.debug&&r.debug("Fetch.catch",c.message),l.options.onEnd(c))})},B.prototype.sendMessage=function(C){this.send(C)},B.prototype.finishSend=function(){},B.prototype.start=function(C){this.metadata=C},B.prototype.cancel=function(){var C=this;this.cancelled?this.options.debug&&r.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&r.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&r.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&r.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch(function(l){C.options.debug&&r.debug("Fetch.cancel.reader.cancel exception",l)})):this.options.debug&&r.debug("Fetch.cancel before reader"))},B}();g.detectFetchSupport=function(){return typeof Response<"u"&&Response.prototype.hasOwnProperty("body")&&typeof Headers=="function"}},859:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.CrossBrowserHttpTransport=void 0;var o=I(229),a=I(210);g.CrossBrowserHttpTransport=function(r){if(o.detectFetchSupport()){var s={credentials:r.withCredentials?"include":"same-origin"};return o.FetchReadableStreamTransport(s)}return a.XhrTransport({withCredentials:r.withCredentials})}},210:function(n,g,I){var o,a=this&&this.__extends||(o=function(E,f){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(u,h){u.__proto__=h}||function(u,h){for(var p in h)Object.prototype.hasOwnProperty.call(h,p)&&(u[p]=h[p])})(E,f)},function(E,f){function u(){this.constructor=E}o(E,f),E.prototype=f===null?Object.create(f):(u.prototype=f.prototype,new u)});Object.defineProperty(g,"__esModule",{value:!0}),g.stringToArrayBuffer=g.MozChunkedArrayBufferXHR=g.XHR=g.XhrTransport=void 0;var r=I(65),s=I(346),B=I(849);g.XhrTransport=function(E){return function(f){if(B.detectMozXHRSupport())return new l(f,E);if(B.detectXHROverrideMimeTypeSupport())return new C(f,E);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var C=function(){function E(f,u){this.options=f,this.init=u}return E.prototype.onProgressEvent=function(){this.options.debug&&s.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var f=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var u=Q(f);this.options.onChunk(u)},E.prototype.onLoadEvent=function(){this.options.debug&&s.debug("XHR.onLoadEvent"),this.options.onEnd()},E.prototype.onStateChange=function(){this.options.debug&&s.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new r.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},E.prototype.sendMessage=function(f){this.xhr.send(f)},E.prototype.finishSend=function(){},E.prototype.start=function(f){var u=this;this.metadata=f;var h=new XMLHttpRequest;this.xhr=h,h.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach(function(p,S){h.setRequestHeader(p,S.join(", "))}),h.withCredentials=Boolean(this.init.withCredentials),h.addEventListener("readystatechange",this.onStateChange.bind(this)),h.addEventListener("progress",this.onProgressEvent.bind(this)),h.addEventListener("loadend",this.onLoadEvent.bind(this)),h.addEventListener("error",function(p){u.options.debug&&s.debug("XHR.error",p),u.options.onEnd(p.error)})},E.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},E.prototype.cancel=function(){this.options.debug&&s.debug("XHR.abort"),this.xhr.abort()},E}();g.XHR=C;var l=function(E){function f(){return E!==null&&E.apply(this,arguments)||this}return a(f,E),f.prototype.configureXhr=function(){this.options.debug&&s.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},f.prototype.onProgressEvent=function(){var u=this.xhr.response;this.options.debug&&s.debug("MozXHR.onProgressEvent: ",new Uint8Array(u)),this.options.onChunk(new Uint8Array(u))},f}(C);function c(E,f){var u=E.charCodeAt(f);if(u>=55296&&u<=56319){var h=E.charCodeAt(f+1);h>=56320&&h<=57343&&(u=65536+(u-55296<<10)+(h-56320))}return u}function Q(E){for(var f=new Uint8Array(E.length),u=0,h=0;h<E.length;h++){var p=String.prototype.codePointAt?E.codePointAt(h):c(E,h);f[u++]=255&p}return f}g.MozChunkedArrayBufferXHR=l,g.stringToArrayBuffer=Q},849:function(n,g){var I;function o(){if(I!==void 0)return I;if(XMLHttpRequest){I=new XMLHttpRequest;try{I.open("GET","https://localhost")}catch{}}return I}function a(r){var s=o();if(!s)return!1;try{return s.responseType=r,s.responseType===r}catch{}return!1}Object.defineProperty(g,"__esModule",{value:!0}),g.detectXHROverrideMimeTypeSupport=g.detectMozXHRSupport=g.xhrSupportsResponseType=void 0,g.xhrSupportsResponseType=a,g.detectMozXHRSupport=function(){return typeof XMLHttpRequest<"u"&&a("moz-chunked-arraybuffer")},g.detectXHROverrideMimeTypeSupport=function(){return typeof XMLHttpRequest<"u"&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.WebsocketTransport=void 0;var o,a=I(346),r=I(617);(function(B){B[B.FINISH_SEND=1]="FINISH_SEND"})(o||(o={}));var s=new Uint8Array([1]);g.WebsocketTransport=function(){return function(B){return function(C){C.debug&&a.debug("websocketRequest",C);var l,c=function(f){if(f.substr(0,8)==="https://")return"wss://"+f.substr(8);if(f.substr(0,7)==="http://")return"ws://"+f.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(C.url),Q=[];function E(f){if(f===o.FINISH_SEND)l.send(s);else{var u=f,h=new Int8Array(u.byteLength+1);h.set(new Uint8Array([0])),h.set(u,1),l.send(h)}}return{sendMessage:function(f){l&&l.readyState!==l.CONNECTING?E(f):Q.push(f)},finishSend:function(){l&&l.readyState!==l.CONNECTING?E(o.FINISH_SEND):Q.push(o.FINISH_SEND)},start:function(f){(l=new WebSocket(c,["grpc-websockets"])).binaryType="arraybuffer",l.onopen=function(){var u;C.debug&&a.debug("websocketRequest.onopen"),l.send((u="",f.forEach(function(h,p){u+=h+": "+p.join(", ")+`\r
`}),r.encodeASCII(u))),Q.forEach(function(h){E(h)})},l.onclose=function(u){C.debug&&a.debug("websocketRequest.onclose",u),C.onEnd()},l.onerror=function(u){C.debug&&a.debug("websocketRequest.onerror",u)},l.onmessage=function(u){C.onChunk(new Uint8Array(u.data))}},cancel:function(){C.debug&&a.debug("websocket.abort"),l.close()}}}(B)}}},35:function(n,g,I){Object.defineProperty(g,"__esModule",{value:!0}),g.unary=void 0;var o=I(65),a=I(934);g.unary=function(r,s){if(r.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(r.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var B=null,C=null,l=a.client(r,{host:s.host,transport:s.transport,debug:s.debug});return l.onHeaders(function(c){B=c}),l.onMessage(function(c){C=c}),l.onEnd(function(c,Q,E){s.onEnd({status:c,statusMessage:Q,headers:B||new o.Metadata,message:C,trailers:E})}),l.start(s.metadata),l.send(s.request),l.finishSend(),{close:function(){l.close()}}}},882:function(n,g){Object.defineProperty(g,"__esModule",{value:!0}),g.frameRequest=void 0,g.frameRequest=function(I){var o=I.serializeBinary(),a=new ArrayBuffer(o.byteLength+5);return new DataView(a,1,4).setUint32(0,o.length,!1),new Uint8Array(a,5).set(o),new Uint8Array(a)}}},i={},function n(g){if(i[g])return i[g].exports;var I=i[g]={exports:{}};return t[g].call(I.exports,I,I.exports,n),I.exports}(607);var t,i})})(grpcWebClient_umd);var indexMinimal={},minimal$1={},aspromise=asPromise;function asPromise(A,e){for(var t=new Array(arguments.length-1),i=0,n=2,g=!0;n<arguments.length;)t[i++]=arguments[n++];return new Promise(function(o,a){t[i]=function(s){if(g)if(g=!1,s)a(s);else{for(var B=new Array(arguments.length-1),C=0;C<B.length;)B[C++]=arguments[C];o.apply(null,B)}};try{A.apply(e||null,t)}catch(r){g&&(g=!1,a(r))}})}var base64$1={};(function(A){var e=A;e.length=function(o){var a=o.length;if(!a)return 0;for(var r=0;--a%4>1&&o.charAt(a)==="=";)++r;return Math.ceil(o.length*3)/4-r};for(var t=new Array(64),i=new Array(123),n=0;n<64;)i[t[n]=n<26?n+65:n<52?n+71:n<62?n-4:n-59|43]=n++;e.encode=function(o,a,r){for(var s=null,B=[],C=0,l=0,c;a<r;){var Q=o[a++];switch(l){case 0:B[C++]=t[Q>>2],c=(Q&3)<<4,l=1;break;case 1:B[C++]=t[c|Q>>4],c=(Q&15)<<2,l=2;break;case 2:B[C++]=t[c|Q>>6],B[C++]=t[Q&63],l=0;break}C>8191&&((s||(s=[])).push(String.fromCharCode.apply(String,B)),C=0)}return l&&(B[C++]=t[c],B[C++]=61,l===1&&(B[C++]=61)),s?(C&&s.push(String.fromCharCode.apply(String,B.slice(0,C))),s.join("")):String.fromCharCode.apply(String,B.slice(0,C))};var g="invalid encoding";e.decode=function(o,a,r){for(var s=r,B=0,C,l=0;l<o.length;){var c=o.charCodeAt(l++);if(c===61&&B>1)break;if((c=i[c])===void 0)throw Error(g);switch(B){case 0:C=c,B=1;break;case 1:a[r++]=C<<2|(c&48)>>4,C=c,B=2;break;case 2:a[r++]=(C&15)<<4|(c&60)>>2,C=c,B=3;break;case 3:a[r++]=(C&3)<<6|c,B=0;break}}if(B===1)throw Error(g);return r-s},e.test=function(o){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(o)}})(base64$1);var eventemitter=EventEmitter;function EventEmitter(){this._listeners={}}EventEmitter.prototype.on=function(e,t,i){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:i||this}),this};EventEmitter.prototype.off=function(e,t){if(e===void 0)this._listeners={};else if(t===void 0)this._listeners[e]=[];else for(var i=this._listeners[e],n=0;n<i.length;)i[n].fn===t?i.splice(n,1):++n;return this};EventEmitter.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var i=[],n=1;n<arguments.length;)i.push(arguments[n++]);for(n=0;n<t.length;)t[n].fn.apply(t[n++].ctx,i)}return this};var float=factory(factory);function factory(A){return typeof Float32Array<"u"?function(){var e=new Float32Array([-0]),t=new Uint8Array(e.buffer),i=t[3]===128;function n(a,r,s){e[0]=a,r[s]=t[0],r[s+1]=t[1],r[s+2]=t[2],r[s+3]=t[3]}function g(a,r,s){e[0]=a,r[s]=t[3],r[s+1]=t[2],r[s+2]=t[1],r[s+3]=t[0]}A.writeFloatLE=i?n:g,A.writeFloatBE=i?g:n;function I(a,r){return t[0]=a[r],t[1]=a[r+1],t[2]=a[r+2],t[3]=a[r+3],e[0]}function o(a,r){return t[3]=a[r],t[2]=a[r+1],t[1]=a[r+2],t[0]=a[r+3],e[0]}A.readFloatLE=i?I:o,A.readFloatBE=i?o:I}():function(){function e(i,n,g,I){var o=n<0?1:0;if(o&&(n=-n),n===0)i(1/n>0?0:2147483648,g,I);else if(isNaN(n))i(2143289344,g,I);else if(n>34028234663852886e22)i((o<<31|2139095040)>>>0,g,I);else if(n<11754943508222875e-54)i((o<<31|Math.round(n/1401298464324817e-60))>>>0,g,I);else{var a=Math.floor(Math.log(n)/Math.LN2),r=Math.round(n*Math.pow(2,-a)*8388608)&8388607;i((o<<31|a+127<<23|r)>>>0,g,I)}}A.writeFloatLE=e.bind(null,writeUintLE),A.writeFloatBE=e.bind(null,writeUintBE);function t(i,n,g){var I=i(n,g),o=(I>>31)*2+1,a=I>>>23&255,r=I&8388607;return a===255?r?NaN:o*(1/0):a===0?o*1401298464324817e-60*r:o*Math.pow(2,a-150)*(r+8388608)}A.readFloatLE=t.bind(null,readUintLE),A.readFloatBE=t.bind(null,readUintBE)}(),typeof Float64Array<"u"?function(){var e=new Float64Array([-0]),t=new Uint8Array(e.buffer),i=t[7]===128;function n(a,r,s){e[0]=a,r[s]=t[0],r[s+1]=t[1],r[s+2]=t[2],r[s+3]=t[3],r[s+4]=t[4],r[s+5]=t[5],r[s+6]=t[6],r[s+7]=t[7]}function g(a,r,s){e[0]=a,r[s]=t[7],r[s+1]=t[6],r[s+2]=t[5],r[s+3]=t[4],r[s+4]=t[3],r[s+5]=t[2],r[s+6]=t[1],r[s+7]=t[0]}A.writeDoubleLE=i?n:g,A.writeDoubleBE=i?g:n;function I(a,r){return t[0]=a[r],t[1]=a[r+1],t[2]=a[r+2],t[3]=a[r+3],t[4]=a[r+4],t[5]=a[r+5],t[6]=a[r+6],t[7]=a[r+7],e[0]}function o(a,r){return t[7]=a[r],t[6]=a[r+1],t[5]=a[r+2],t[4]=a[r+3],t[3]=a[r+4],t[2]=a[r+5],t[1]=a[r+6],t[0]=a[r+7],e[0]}A.readDoubleLE=i?I:o,A.readDoubleBE=i?o:I}():function(){function e(i,n,g,I,o,a){var r=I<0?1:0;if(r&&(I=-I),I===0)i(0,o,a+n),i(1/I>0?0:2147483648,o,a+g);else if(isNaN(I))i(0,o,a+n),i(2146959360,o,a+g);else if(I>17976931348623157e292)i(0,o,a+n),i((r<<31|2146435072)>>>0,o,a+g);else{var s;if(I<22250738585072014e-324)s=I/5e-324,i(s>>>0,o,a+n),i((r<<31|s/4294967296)>>>0,o,a+g);else{var B=Math.floor(Math.log(I)/Math.LN2);B===1024&&(B=1023),s=I*Math.pow(2,-B),i(s*4503599627370496>>>0,o,a+n),i((r<<31|B+1023<<20|s*1048576&1048575)>>>0,o,a+g)}}}A.writeDoubleLE=e.bind(null,writeUintLE,0,4),A.writeDoubleBE=e.bind(null,writeUintBE,4,0);function t(i,n,g,I,o){var a=i(I,o+n),r=i(I,o+g),s=(r>>31)*2+1,B=r>>>20&2047,C=4294967296*(r&1048575)+a;return B===2047?C?NaN:s*(1/0):B===0?s*5e-324*C:s*Math.pow(2,B-1075)*(C+4503599627370496)}A.readDoubleLE=t.bind(null,readUintLE,0,4),A.readDoubleBE=t.bind(null,readUintBE,4,0)}(),A}function writeUintLE(A,e,t){e[t]=A&255,e[t+1]=A>>>8&255,e[t+2]=A>>>16&255,e[t+3]=A>>>24}function writeUintBE(A,e,t){e[t]=A>>>24,e[t+1]=A>>>16&255,e[t+2]=A>>>8&255,e[t+3]=A&255}function readUintLE(A,e){return(A[e]|A[e+1]<<8|A[e+2]<<16|A[e+3]<<24)>>>0}function readUintBE(A,e){return(A[e]<<24|A[e+1]<<16|A[e+2]<<8|A[e+3])>>>0}var inquire_1=inquire;function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(A){}return null}var utf8$2={};(function(A){var e=A;e.length=function(i){for(var n=0,g=0,I=0;I<i.length;++I)g=i.charCodeAt(I),g<128?n+=1:g<2048?n+=2:(g&64512)===55296&&(i.charCodeAt(I+1)&64512)===56320?(++I,n+=4):n+=3;return n},e.read=function(i,n,g){var I=g-n;if(I<1)return"";for(var o=null,a=[],r=0,s;n<g;)s=i[n++],s<128?a[r++]=s:s>191&&s<224?a[r++]=(s&31)<<6|i[n++]&63:s>239&&s<365?(s=((s&7)<<18|(i[n++]&63)<<12|(i[n++]&63)<<6|i[n++]&63)-65536,a[r++]=55296+(s>>10),a[r++]=56320+(s&1023)):a[r++]=(s&15)<<12|(i[n++]&63)<<6|i[n++]&63,r>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,a)),r=0);return o?(r&&o.push(String.fromCharCode.apply(String,a.slice(0,r))),o.join("")):String.fromCharCode.apply(String,a.slice(0,r))},e.write=function(i,n,g){for(var I=g,o,a,r=0;r<i.length;++r)o=i.charCodeAt(r),o<128?n[g++]=o:o<2048?(n[g++]=o>>6|192,n[g++]=o&63|128):(o&64512)===55296&&((a=i.charCodeAt(r+1))&64512)===56320?(o=65536+((o&1023)<<10)+(a&1023),++r,n[g++]=o>>18|240,n[g++]=o>>12&63|128,n[g++]=o>>6&63|128,n[g++]=o&63|128):(n[g++]=o>>12|224,n[g++]=o>>6&63|128,n[g++]=o&63|128);return g-I}})(utf8$2);var pool_1=pool;function pool(A,e,t){var i=t||8192,n=i>>>1,g=null,I=i;return function(a){if(a<1||a>n)return A(a);I+a>i&&(g=A(i),I=0);var r=e.call(g,I,I+=a);return I&7&&(I=(I|7)+1),r}}var longbits=LongBits$2,util$5=minimal$1;function LongBits$2(A,e){this.lo=A>>>0,this.hi=e>>>0}var zero=LongBits$2.zero=new LongBits$2(0,0);zero.toNumber=function(){return 0};zero.zzEncode=zero.zzDecode=function(){return this};zero.length=function(){return 1};var zeroHash=LongBits$2.zeroHash="\0\0\0\0\0\0\0\0";LongBits$2.fromNumber=function A(e){if(e===0)return zero;var t=e<0;t&&(e=-e);var i=e>>>0,n=(e-i)/4294967296>>>0;return t&&(n=~n>>>0,i=~i>>>0,++i>4294967295&&(i=0,++n>4294967295&&(n=0))),new LongBits$2(i,n)};LongBits$2.from=function A(e){if(typeof e=="number")return LongBits$2.fromNumber(e);if(util$5.isString(e))if(util$5.Long)e=util$5.Long.fromString(e);else return LongBits$2.fromNumber(parseInt(e,10));return e.low||e.high?new LongBits$2(e.low>>>0,e.high>>>0):zero};LongBits$2.prototype.toNumber=function A(e){if(!e&&this.hi>>>31){var t=~this.lo+1>>>0,i=~this.hi>>>0;return t||(i=i+1>>>0),-(t+i*4294967296)}return this.lo+this.hi*4294967296};LongBits$2.prototype.toLong=function A(e){return util$5.Long?new util$5.Long(this.lo|0,this.hi|0,Boolean(e)):{low:this.lo|0,high:this.hi|0,unsigned:Boolean(e)}};var charCodeAt=String.prototype.charCodeAt;LongBits$2.fromHash=function A(e){return e===zeroHash?zero:new LongBits$2((charCodeAt.call(e,0)|charCodeAt.call(e,1)<<8|charCodeAt.call(e,2)<<16|charCodeAt.call(e,3)<<24)>>>0,(charCodeAt.call(e,4)|charCodeAt.call(e,5)<<8|charCodeAt.call(e,6)<<16|charCodeAt.call(e,7)<<24)>>>0)};LongBits$2.prototype.toHash=function A(){return String.fromCharCode(this.lo&255,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,this.hi&255,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)};LongBits$2.prototype.zzEncode=function A(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this};LongBits$2.prototype.zzDecode=function A(){var e=-(this.lo&1);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this};LongBits$2.prototype.length=function A(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,i=this.hi>>>24;return i===0?t===0?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:i<128?9:10};(function(A){var e=A;e.asPromise=aspromise,e.base64=base64$1,e.EventEmitter=eventemitter,e.float=float,e.inquire=inquire_1,e.utf8=utf8$2,e.pool=pool_1,e.LongBits=longbits,e.isNode=Boolean(typeof commonjsGlobal<"u"&&commonjsGlobal&&commonjsGlobal.process&&commonjsGlobal.process.versions&&commonjsGlobal.process.versions.node),e.global=e.isNode&&commonjsGlobal||typeof window<"u"&&window||typeof self<"u"&&self||commonjsGlobal,e.emptyArray=Object.freeze?Object.freeze([]):[],e.emptyObject=Object.freeze?Object.freeze({}):{},e.isInteger=Number.isInteger||function(g){return typeof g=="number"&&isFinite(g)&&Math.floor(g)===g},e.isString=function(g){return typeof g=="string"||g instanceof String},e.isObject=function(g){return g&&typeof g=="object"},e.isset=e.isSet=function(g,I){var o=g[I];return o!=null&&g.hasOwnProperty(I)?typeof o!="object"||(Array.isArray(o)?o.length:Object.keys(o).length)>0:!1},e.Buffer=function(){try{var n=e.inquire("buffer").Buffer;return n.prototype.utf8Write?n:null}catch{return null}}(),e._Buffer_from=null,e._Buffer_allocUnsafe=null,e.newBuffer=function(g){return typeof g=="number"?e.Buffer?e._Buffer_allocUnsafe(g):new e.Array(g):e.Buffer?e._Buffer_from(g):typeof Uint8Array>"u"?g:new Uint8Array(g)},e.Array=typeof Uint8Array<"u"?Uint8Array:Array,e.Long=e.global.dcodeIO&&e.global.dcodeIO.Long||e.global.Long||e.inquire("long"),e.key2Re=/^true|false|0|1$/,e.key32Re=/^-?(?:0|[1-9][0-9]*)$/,e.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,e.longToHash=function(g){return g?e.LongBits.from(g).toHash():e.LongBits.zeroHash},e.longFromHash=function(g,I){var o=e.LongBits.fromHash(g);return e.Long?e.Long.fromBits(o.lo,o.hi,I):o.toNumber(Boolean(I))};function t(n,g,I){for(var o=Object.keys(g),a=0;a<o.length;++a)(n[o[a]]===void 0||!I)&&(n[o[a]]=g[o[a]]);return n}e.merge=t,e.lcFirst=function(g){return g.charAt(0).toLowerCase()+g.substring(1)};function i(n){function g(I,o){if(!(this instanceof g))return new g(I,o);Object.defineProperty(this,"message",{get:function(){return I}}),Error.captureStackTrace?Error.captureStackTrace(this,g):Object.defineProperty(this,"stack",{value:new Error().stack||""}),o&&t(this,o)}return g.prototype=Object.create(Error.prototype,{constructor:{value:g,writable:!0,enumerable:!1,configurable:!0},name:{get(){return n},set:void 0,enumerable:!1,configurable:!0},toString:{value(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),g}e.newError=i,e.ProtocolError=i("ProtocolError"),e.oneOfGetter=function(g){for(var I={},o=0;o<g.length;++o)I[g[o]]=1;return function(){for(var a=Object.keys(this),r=a.length-1;r>-1;--r)if(I[a[r]]===1&&this[a[r]]!==void 0&&this[a[r]]!==null)return a[r]}},e.oneOfSetter=function(g){return function(I){for(var o=0;o<g.length;++o)g[o]!==I&&delete this[g[o]]}},e.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},e._configure=function(){var n=e.Buffer;if(!n){e._Buffer_from=e._Buffer_allocUnsafe=null;return}e._Buffer_from=n.from!==Uint8Array.from&&n.from||function(I,o){return new n(I,o)},e._Buffer_allocUnsafe=n.allocUnsafe||function(I){return new n(I)}}})(minimal$1);var writer=Writer$1,util$4=minimal$1,BufferWriter$1,LongBits$1=util$4.LongBits,base64=util$4.base64,utf8$1=util$4.utf8;function Op(A,e,t){this.fn=A,this.len=e,this.next=void 0,this.val=t}function noop(){}function State(A){this.head=A.head,this.tail=A.tail,this.len=A.len,this.next=A.states}function Writer$1(){this.len=0,this.head=new Op(noop,0,0),this.tail=this.head,this.states=null}var create$1=function A(){return util$4.Buffer?function(){return(Writer$1.create=function(){return new BufferWriter$1})()}:function(){return new Writer$1}};Writer$1.create=create$1();Writer$1.alloc=function A(e){return new util$4.Array(e)};util$4.Array!==Array&&(Writer$1.alloc=util$4.pool(Writer$1.alloc,util$4.Array.prototype.subarray));Writer$1.prototype._push=function A(e,t,i){return this.tail=this.tail.next=new Op(e,t,i),this.len+=t,this};function writeByte(A,e,t){e[t]=A&255}function writeVarint32(A,e,t){for(;A>127;)e[t++]=A&127|128,A>>>=7;e[t]=A}function VarintOp(A,e){this.len=A,this.next=void 0,this.val=e}VarintOp.prototype=Object.create(Op.prototype);VarintOp.prototype.fn=writeVarint32;Writer$1.prototype.uint32=function A(e){return this.len+=(this.tail=this.tail.next=new VarintOp((e=e>>>0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this};Writer$1.prototype.int32=function A(e){return e<0?this._push(writeVarint64,10,LongBits$1.fromNumber(e)):this.uint32(e)};Writer$1.prototype.sint32=function A(e){return this.uint32((e<<1^e>>31)>>>0)};function writeVarint64(A,e,t){for(;A.hi;)e[t++]=A.lo&127|128,A.lo=(A.lo>>>7|A.hi<<25)>>>0,A.hi>>>=7;for(;A.lo>127;)e[t++]=A.lo&127|128,A.lo=A.lo>>>7;e[t++]=A.lo}Writer$1.prototype.uint64=function A(e){var t=LongBits$1.from(e);return this._push(writeVarint64,t.length(),t)};Writer$1.prototype.int64=Writer$1.prototype.uint64;Writer$1.prototype.sint64=function A(e){var t=LongBits$1.from(e).zzEncode();return this._push(writeVarint64,t.length(),t)};Writer$1.prototype.bool=function A(e){return this._push(writeByte,1,e?1:0)};function writeFixed32(A,e,t){e[t]=A&255,e[t+1]=A>>>8&255,e[t+2]=A>>>16&255,e[t+3]=A>>>24}Writer$1.prototype.fixed32=function A(e){return this._push(writeFixed32,4,e>>>0)};Writer$1.prototype.sfixed32=Writer$1.prototype.fixed32;Writer$1.prototype.fixed64=function A(e){var t=LongBits$1.from(e);return this._push(writeFixed32,4,t.lo)._push(writeFixed32,4,t.hi)};Writer$1.prototype.sfixed64=Writer$1.prototype.fixed64;Writer$1.prototype.float=function A(e){return this._push(util$4.float.writeFloatLE,4,e)};Writer$1.prototype.double=function A(e){return this._push(util$4.float.writeDoubleLE,8,e)};var writeBytes=util$4.Array.prototype.set?function A(e,t,i){t.set(e,i)}:function A(e,t,i){for(var n=0;n<e.length;++n)t[i+n]=e[n]};Writer$1.prototype.bytes=function A(e){var t=e.length>>>0;if(!t)return this._push(writeByte,1,0);if(util$4.isString(e)){var i=Writer$1.alloc(t=base64.length(e));base64.decode(e,i,0),e=i}return this.uint32(t)._push(writeBytes,t,e)};Writer$1.prototype.string=function A(e){var t=utf8$1.length(e);return t?this.uint32(t)._push(utf8$1.write,t,e):this._push(writeByte,1,0)};Writer$1.prototype.fork=function A(){return this.states=new State(this),this.head=this.tail=new Op(noop,0,0),this.len=0,this};Writer$1.prototype.reset=function A(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Op(noop,0,0),this.len=0),this};Writer$1.prototype.ldelim=function A(){var e=this.head,t=this.tail,i=this.len;return this.reset().uint32(i),i&&(this.tail.next=e.next,this.tail=t,this.len+=i),this};Writer$1.prototype.finish=function A(){for(var e=this.head.next,t=this.constructor.alloc(this.len),i=0;e;)e.fn(e.val,t,i),i+=e.len,e=e.next;return t};Writer$1._configure=function(A){BufferWriter$1=A,Writer$1.create=create$1(),BufferWriter$1._configure()};var writer_buffer=BufferWriter,Writer=writer;(BufferWriter.prototype=Object.create(Writer.prototype)).constructor=BufferWriter;var util$3=minimal$1;function BufferWriter(){Writer.call(this)}BufferWriter._configure=function(){BufferWriter.alloc=util$3._Buffer_allocUnsafe,BufferWriter.writeBytesBuffer=util$3.Buffer&&util$3.Buffer.prototype instanceof Uint8Array&&util$3.Buffer.prototype.set.name==="set"?function(e,t,i){t.set(e,i)}:function(e,t,i){if(e.copy)e.copy(t,i,0,e.length);else for(var n=0;n<e.length;)t[i++]=e[n++]}};BufferWriter.prototype.bytes=function A(e){util$3.isString(e)&&(e=util$3._Buffer_from(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this._push(BufferWriter.writeBytesBuffer,t,e),this};function writeStringBuffer(A,e,t){A.length<40?util$3.utf8.write(A,e,t):e.utf8Write?e.utf8Write(A,t):e.write(A,t)}BufferWriter.prototype.string=function A(e){var t=util$3.Buffer.byteLength(e);return this.uint32(t),t&&this._push(writeStringBuffer,t,e),this};BufferWriter._configure();var reader=Reader$1,util$2=minimal$1,BufferReader$1,LongBits=util$2.LongBits,utf8=util$2.utf8;function indexOutOfRange(A,e){return RangeError("index out of range: "+A.pos+" + "+(e||1)+" > "+A.len)}function Reader$1(A){this.buf=A,this.pos=0,this.len=A.length}var create_array=typeof Uint8Array<"u"?function A(e){if(e instanceof Uint8Array||Array.isArray(e))return new Reader$1(e);throw Error("illegal buffer")}:function A(e){if(Array.isArray(e))return new Reader$1(e);throw Error("illegal buffer")},create=function A(){return util$2.Buffer?function(t){return(Reader$1.create=function(n){return util$2.Buffer.isBuffer(n)?new BufferReader$1(n):create_array(n)})(t)}:create_array};Reader$1.create=create();Reader$1.prototype._slice=util$2.Array.prototype.subarray||util$2.Array.prototype.slice;Reader$1.prototype.uint32=function A(){var e=4294967295;return function(){if(e=(this.buf[this.pos]&127)>>>0,this.buf[this.pos++]<128||(e=(e|(this.buf[this.pos]&127)<<7)>>>0,this.buf[this.pos++]<128)||(e=(e|(this.buf[this.pos]&127)<<14)>>>0,this.buf[this.pos++]<128)||(e=(e|(this.buf[this.pos]&127)<<21)>>>0,this.buf[this.pos++]<128)||(e=(e|(this.buf[this.pos]&15)<<28)>>>0,this.buf[this.pos++]<128))return e;if((this.pos+=5)>this.len)throw this.pos=this.len,indexOutOfRange(this,10);return e}}();Reader$1.prototype.int32=function A(){return this.uint32()|0};Reader$1.prototype.sint32=function A(){var e=this.uint32();return e>>>1^-(e&1)|0};function readLongVarint(){var A=new LongBits(0,0),e=0;if(this.len-this.pos>4){for(;e<4;++e)if(A.lo=(A.lo|(this.buf[this.pos]&127)<<e*7)>>>0,this.buf[this.pos++]<128)return A;if(A.lo=(A.lo|(this.buf[this.pos]&127)<<28)>>>0,A.hi=(A.hi|(this.buf[this.pos]&127)>>4)>>>0,this.buf[this.pos++]<128)return A;e=0}else{for(;e<3;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(A.lo=(A.lo|(this.buf[this.pos]&127)<<e*7)>>>0,this.buf[this.pos++]<128)return A}return A.lo=(A.lo|(this.buf[this.pos++]&127)<<e*7)>>>0,A}if(this.len-this.pos>4){for(;e<5;++e)if(A.hi=(A.hi|(this.buf[this.pos]&127)<<e*7+3)>>>0,this.buf[this.pos++]<128)return A}else for(;e<5;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(A.hi=(A.hi|(this.buf[this.pos]&127)<<e*7+3)>>>0,this.buf[this.pos++]<128)return A}throw Error("invalid varint encoding")}Reader$1.prototype.bool=function A(){return this.uint32()!==0};function readFixed32_end(A,e){return(A[e-4]|A[e-3]<<8|A[e-2]<<16|A[e-1]<<24)>>>0}Reader$1.prototype.fixed32=function A(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)};Reader$1.prototype.sfixed32=function A(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)|0};function readFixed64(){if(this.pos+8>this.len)throw indexOutOfRange(this,8);return new LongBits(readFixed32_end(this.buf,this.pos+=4),readFixed32_end(this.buf,this.pos+=4))}Reader$1.prototype.float=function A(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);var e=util$2.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e};Reader$1.prototype.double=function A(){if(this.pos+8>this.len)throw indexOutOfRange(this,4);var e=util$2.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e};Reader$1.prototype.bytes=function A(){var e=this.uint32(),t=this.pos,i=this.pos+e;if(i>this.len)throw indexOutOfRange(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,i):t===i?new this.buf.constructor(0):this._slice.call(this.buf,t,i)};Reader$1.prototype.string=function A(){var e=this.bytes();return utf8.read(e,0,e.length)};Reader$1.prototype.skip=function A(e){if(typeof e=="number"){if(this.pos+e>this.len)throw indexOutOfRange(this,e);this.pos+=e}else do if(this.pos>=this.len)throw indexOutOfRange(this);while(this.buf[this.pos++]&128);return this};Reader$1.prototype.skipType=function(A){switch(A){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;(A=this.uint32()&7)!==4;)this.skipType(A);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+A+" at offset "+this.pos)}return this};Reader$1._configure=function(A){BufferReader$1=A,Reader$1.create=create(),BufferReader$1._configure();var e=util$2.Long?"toLong":"toNumber";util$2.merge(Reader$1.prototype,{int64:function(){return readLongVarint.call(this)[e](!1)},uint64:function(){return readLongVarint.call(this)[e](!0)},sint64:function(){return readLongVarint.call(this).zzDecode()[e](!1)},fixed64:function(){return readFixed64.call(this)[e](!0)},sfixed64:function(){return readFixed64.call(this)[e](!1)}})};var reader_buffer=BufferReader,Reader=reader;(BufferReader.prototype=Object.create(Reader.prototype)).constructor=BufferReader;var util$1=minimal$1;function BufferReader(A){Reader.call(this,A)}BufferReader._configure=function(){util$1.Buffer&&(BufferReader.prototype._slice=util$1.Buffer.prototype.slice)};BufferReader.prototype.string=function A(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+e,this.len))};BufferReader._configure();var rpc={},service=Service,util=minimal$1;(Service.prototype=Object.create(util.EventEmitter.prototype)).constructor=Service;function Service(A,e,t){if(typeof A!="function")throw TypeError("rpcImpl must be a function");util.EventEmitter.call(this),this.rpcImpl=A,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(t)}Service.prototype.rpcCall=function A(e,t,i,n,g){if(!n)throw TypeError("request must be specified");var I=this;if(!g)return util.asPromise(A,I,e,t,i,n);if(!I.rpcImpl){setTimeout(function(){g(Error("already ended"))},0);return}try{return I.rpcImpl(e,t[I.requestDelimited?"encodeDelimited":"encode"](n).finish(),function(a,r){if(a)return I.emit("error",a,e),g(a);if(r===null){I.end(!0);return}if(!(r instanceof i))try{r=i[I.responseDelimited?"decodeDelimited":"decode"](r)}catch(s){return I.emit("error",s,e),g(s)}return I.emit("data",r,e),g(null,r)})}catch(o){I.emit("error",o,e),setTimeout(function(){g(o)},0);return}};Service.prototype.end=function A(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this};(function(A){var e=A;e.Service=service})(rpc);var roots={};(function(A){var e=A;e.build="minimal",e.Writer=writer,e.BufferWriter=writer_buffer,e.Reader=reader,e.BufferReader=reader_buffer,e.util=minimal$1,e.rpc=rpc,e.roots=roots,e.configure=t;function t(){e.util._configure(),e.Writer._configure(e.BufferWriter),e.Reader._configure(e.BufferReader)}t()})(indexMinimal);var minimal=indexMinimal;function createBaseCoin(){return{denom:"",amount:""}}const Coin={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),A.amount!==""&&e.uint32(18).string(A.amount),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseCoin();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;case 2:n.amount=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$d(A.denom)?String(A.denom):"",amount:isSet$d(A.amount)?String(A.amount):""}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),A.amount!==void 0&&(e.amount=A.amount),e},fromPartial(A){const e=createBaseCoin();return e.denom=A.denom??"",e.amount=A.amount??"",e}};function isSet$d(A){return A!=null}var long=Long,wasm=null;try{wasm=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(A){}function Long(A,e,t){this.low=A|0,this.high=e|0,this.unsigned=!!t}Long.prototype.__isLong__;Object.defineProperty(Long.prototype,"__isLong__",{value:!0});function isLong(A){return(A&&A.__isLong__)===!0}Long.isLong=isLong;var INT_CACHE={},UINT_CACHE={};function fromInt(A,e){var t,i,n;return e?(A>>>=0,(n=0<=A&&A<256)&&(i=UINT_CACHE[A],i)?i:(t=fromBits(A,(A|0)<0?-1:0,!0),n&&(UINT_CACHE[A]=t),t)):(A|=0,(n=-128<=A&&A<128)&&(i=INT_CACHE[A],i)?i:(t=fromBits(A,A<0?-1:0,!1),n&&(INT_CACHE[A]=t),t))}Long.fromInt=fromInt;function fromNumber(A,e){if(isNaN(A))return e?UZERO:ZERO;if(e){if(A<0)return UZERO;if(A>=TWO_PWR_64_DBL)return MAX_UNSIGNED_VALUE}else{if(A<=-TWO_PWR_63_DBL)return MIN_VALUE;if(A+1>=TWO_PWR_63_DBL)return MAX_VALUE}return A<0?fromNumber(-A,e).neg():fromBits(A%TWO_PWR_32_DBL|0,A/TWO_PWR_32_DBL|0,e)}Long.fromNumber=fromNumber;function fromBits(A,e,t){return new Long(A,e,t)}Long.fromBits=fromBits;var pow_dbl=Math.pow;function fromString(A,e,t){if(A.length===0)throw Error("empty string");if(A==="NaN"||A==="Infinity"||A==="+Infinity"||A==="-Infinity")return ZERO;if(typeof e=="number"?(t=e,e=!1):e=!!e,t=t||10,t<2||36<t)throw RangeError("radix");var i;if((i=A.indexOf("-"))>0)throw Error("interior hyphen");if(i===0)return fromString(A.substring(1),e,t).neg();for(var n=fromNumber(pow_dbl(t,8)),g=ZERO,I=0;I<A.length;I+=8){var o=Math.min(8,A.length-I),a=parseInt(A.substring(I,I+o),t);if(o<8){var r=fromNumber(pow_dbl(t,o));g=g.mul(r).add(fromNumber(a))}else g=g.mul(n),g=g.add(fromNumber(a))}return g.unsigned=e,g}Long.fromString=fromString;function fromValue(A,e){return typeof A=="number"?fromNumber(A,e):typeof A=="string"?fromString(A,e):fromBits(A.low,A.high,typeof e=="boolean"?e:A.unsigned)}Long.fromValue=fromValue;var TWO_PWR_16_DBL=1<<16,TWO_PWR_24_DBL=1<<24,TWO_PWR_32_DBL=TWO_PWR_16_DBL*TWO_PWR_16_DBL,TWO_PWR_64_DBL=TWO_PWR_32_DBL*TWO_PWR_32_DBL,TWO_PWR_63_DBL=TWO_PWR_64_DBL/2,TWO_PWR_24=fromInt(TWO_PWR_24_DBL),ZERO=fromInt(0);Long.ZERO=ZERO;var UZERO=fromInt(0,!0);Long.UZERO=UZERO;var ONE=fromInt(1);Long.ONE=ONE;var UONE=fromInt(1,!0);Long.UONE=UONE;var NEG_ONE=fromInt(-1);Long.NEG_ONE=NEG_ONE;var MAX_VALUE=fromBits(-1,2147483647,!1);Long.MAX_VALUE=MAX_VALUE;var MAX_UNSIGNED_VALUE=fromBits(-1,-1,!0);Long.MAX_UNSIGNED_VALUE=MAX_UNSIGNED_VALUE;var MIN_VALUE=fromBits(0,-2147483648,!1);Long.MIN_VALUE=MIN_VALUE;var LongPrototype=Long.prototype;LongPrototype.toInt=function A(){return this.unsigned?this.low>>>0:this.low};LongPrototype.toNumber=function A(){return this.unsigned?(this.high>>>0)*TWO_PWR_32_DBL+(this.low>>>0):this.high*TWO_PWR_32_DBL+(this.low>>>0)};LongPrototype.toString=function A(e){if(e=e||10,e<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(MIN_VALUE)){var t=fromNumber(e),i=this.div(t),n=i.mul(t).sub(this);return i.toString(e)+n.toInt().toString(e)}else return"-"+this.neg().toString(e);for(var g=fromNumber(pow_dbl(e,6),this.unsigned),I=this,o="";;){var a=I.div(g),r=I.sub(a.mul(g)).toInt()>>>0,s=r.toString(e);if(I=a,I.isZero())return s+o;for(;s.length<6;)s="0"+s;o=""+s+o}};LongPrototype.getHighBits=function A(){return this.high};LongPrototype.getHighBitsUnsigned=function A(){return this.high>>>0};LongPrototype.getLowBits=function A(){return this.low};LongPrototype.getLowBitsUnsigned=function A(){return this.low>>>0};LongPrototype.getNumBitsAbs=function A(){if(this.isNegative())return this.eq(MIN_VALUE)?64:this.neg().getNumBitsAbs();for(var e=this.high!=0?this.high:this.low,t=31;t>0&&(e&1<<t)==0;t--);return this.high!=0?t+33:t+1};LongPrototype.isZero=function A(){return this.high===0&&this.low===0};LongPrototype.eqz=LongPrototype.isZero;LongPrototype.isNegative=function A(){return!this.unsigned&&this.high<0};LongPrototype.isPositive=function A(){return this.unsigned||this.high>=0};LongPrototype.isOdd=function A(){return(this.low&1)===1};LongPrototype.isEven=function A(){return(this.low&1)===0};LongPrototype.equals=function A(e){return isLong(e)||(e=fromValue(e)),this.unsigned!==e.unsigned&&this.high>>>31===1&&e.high>>>31===1?!1:this.high===e.high&&this.low===e.low};LongPrototype.eq=LongPrototype.equals;LongPrototype.notEquals=function A(e){return!this.eq(e)};LongPrototype.neq=LongPrototype.notEquals;LongPrototype.ne=LongPrototype.notEquals;LongPrototype.lessThan=function A(e){return this.comp(e)<0};LongPrototype.lt=LongPrototype.lessThan;LongPrototype.lessThanOrEqual=function A(e){return this.comp(e)<=0};LongPrototype.lte=LongPrototype.lessThanOrEqual;LongPrototype.le=LongPrototype.lessThanOrEqual;LongPrototype.greaterThan=function A(e){return this.comp(e)>0};LongPrototype.gt=LongPrototype.greaterThan;LongPrototype.greaterThanOrEqual=function A(e){return this.comp(e)>=0};LongPrototype.gte=LongPrototype.greaterThanOrEqual;LongPrototype.ge=LongPrototype.greaterThanOrEqual;LongPrototype.compare=function A(e){if(isLong(e)||(e=fromValue(e)),this.eq(e))return 0;var t=this.isNegative(),i=e.isNegative();return t&&!i?-1:!t&&i?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1};LongPrototype.comp=LongPrototype.compare;LongPrototype.negate=function A(){return!this.unsigned&&this.eq(MIN_VALUE)?MIN_VALUE:this.not().add(ONE)};LongPrototype.neg=LongPrototype.negate;LongPrototype.add=function A(e){isLong(e)||(e=fromValue(e));var t=this.high>>>16,i=this.high&65535,n=this.low>>>16,g=this.low&65535,I=e.high>>>16,o=e.high&65535,a=e.low>>>16,r=e.low&65535,s=0,B=0,C=0,l=0;return l+=g+r,C+=l>>>16,l&=65535,C+=n+a,B+=C>>>16,C&=65535,B+=i+o,s+=B>>>16,B&=65535,s+=t+I,s&=65535,fromBits(C<<16|l,s<<16|B,this.unsigned)};LongPrototype.subtract=function A(e){return isLong(e)||(e=fromValue(e)),this.add(e.neg())};LongPrototype.sub=LongPrototype.subtract;LongPrototype.multiply=function A(e){if(this.isZero())return ZERO;if(isLong(e)||(e=fromValue(e)),wasm){var t=wasm.mul(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}if(e.isZero())return ZERO;if(this.eq(MIN_VALUE))return e.isOdd()?MIN_VALUE:ZERO;if(e.eq(MIN_VALUE))return this.isOdd()?MIN_VALUE:ZERO;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(TWO_PWR_24)&&e.lt(TWO_PWR_24))return fromNumber(this.toNumber()*e.toNumber(),this.unsigned);var i=this.high>>>16,n=this.high&65535,g=this.low>>>16,I=this.low&65535,o=e.high>>>16,a=e.high&65535,r=e.low>>>16,s=e.low&65535,B=0,C=0,l=0,c=0;return c+=I*s,l+=c>>>16,c&=65535,l+=g*s,C+=l>>>16,l&=65535,l+=I*r,C+=l>>>16,l&=65535,C+=n*s,B+=C>>>16,C&=65535,C+=g*r,B+=C>>>16,C&=65535,C+=I*a,B+=C>>>16,C&=65535,B+=i*s+n*r+g*a+I*o,B&=65535,fromBits(l<<16|c,B<<16|C,this.unsigned)};LongPrototype.mul=LongPrototype.multiply;LongPrototype.divide=function A(e){if(isLong(e)||(e=fromValue(e)),e.isZero())throw Error("division by zero");if(wasm){if(!this.unsigned&&this.high===-2147483648&&e.low===-1&&e.high===-1)return this;var t=(this.unsigned?wasm.div_u:wasm.div_s)(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?UZERO:ZERO;var i,n,g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return UZERO;if(e.gt(this.shru(1)))return UONE;g=UZERO}else{if(this.eq(MIN_VALUE)){if(e.eq(ONE)||e.eq(NEG_ONE))return MIN_VALUE;if(e.eq(MIN_VALUE))return ONE;var I=this.shr(1);return i=I.div(e).shl(1),i.eq(ZERO)?e.isNegative()?ONE:NEG_ONE:(n=this.sub(e.mul(i)),g=i.add(n.div(e)),g)}else if(e.eq(MIN_VALUE))return this.unsigned?UZERO:ZERO;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();g=ZERO}for(n=this;n.gte(e);){i=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(i)/Math.LN2),a=o<=48?1:pow_dbl(2,o-48),r=fromNumber(i),s=r.mul(e);s.isNegative()||s.gt(n);)i-=a,r=fromNumber(i,this.unsigned),s=r.mul(e);r.isZero()&&(r=ONE),g=g.add(r),n=n.sub(s)}return g};LongPrototype.div=LongPrototype.divide;LongPrototype.modulo=function A(e){if(isLong(e)||(e=fromValue(e)),wasm){var t=(this.unsigned?wasm.rem_u:wasm.rem_s)(this.low,this.high,e.low,e.high);return fromBits(t,wasm.get_high(),this.unsigned)}return this.sub(this.div(e).mul(e))};LongPrototype.mod=LongPrototype.modulo;LongPrototype.rem=LongPrototype.modulo;LongPrototype.not=function A(){return fromBits(~this.low,~this.high,this.unsigned)};LongPrototype.and=function A(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low&e.low,this.high&e.high,this.unsigned)};LongPrototype.or=function A(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low|e.low,this.high|e.high,this.unsigned)};LongPrototype.xor=function A(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low^e.low,this.high^e.high,this.unsigned)};LongPrototype.shiftLeft=function A(e){return isLong(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?fromBits(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):fromBits(0,this.low<<e-32,this.unsigned)};LongPrototype.shl=LongPrototype.shiftLeft;LongPrototype.shiftRight=function A(e){return isLong(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?fromBits(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):fromBits(this.high>>e-32,this.high>=0?0:-1,this.unsigned)};LongPrototype.shr=LongPrototype.shiftRight;LongPrototype.shiftRightUnsigned=function A(e){if(isLong(e)&&(e=e.toInt()),e&=63,e===0)return this;var t=this.high;if(e<32){var i=this.low;return fromBits(i>>>e|t<<32-e,t>>>e,this.unsigned)}else return e===32?fromBits(t,0,this.unsigned):fromBits(t>>>e-32,0,this.unsigned)};LongPrototype.shru=LongPrototype.shiftRightUnsigned;LongPrototype.shr_u=LongPrototype.shiftRightUnsigned;LongPrototype.toSigned=function A(){return this.unsigned?fromBits(this.low,this.high,!1):this};LongPrototype.toUnsigned=function A(){return this.unsigned?this:fromBits(this.low,this.high,!0)};LongPrototype.toBytes=function A(e){return e?this.toBytesLE():this.toBytesBE()};LongPrototype.toBytesLE=function A(){var e=this.high,t=this.low;return[t&255,t>>>8&255,t>>>16&255,t>>>24,e&255,e>>>8&255,e>>>16&255,e>>>24]};LongPrototype.toBytesBE=function A(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,e&255,t>>>24,t>>>16&255,t>>>8&255,t&255]};Long.fromBytes=function A(e,t,i){return i?Long.fromBytesLE(e,t):Long.fromBytesBE(e,t)};Long.fromBytesLE=function A(e,t){return new Long(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)};Long.fromBytesBE=function A(e,t){return new Long(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};function createBasePageRequest(){return{key:new Uint8Array,offset:"0",limit:"0",countTotal:!1,reverse:!1}}const PageRequest={encode(A,e=minimal.Writer.create()){return A.key.length!==0&&e.uint32(10).bytes(A.key),A.offset!=="0"&&e.uint32(16).uint64(A.offset),A.limit!=="0"&&e.uint32(24).uint64(A.limit),A.countTotal===!0&&e.uint32(32).bool(A.countTotal),A.reverse===!0&&e.uint32(40).bool(A.reverse),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBasePageRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.key=t.bytes();break;case 2:n.offset=longToString$3(t.uint64());break;case 3:n.limit=longToString$3(t.uint64());break;case 4:n.countTotal=t.bool();break;case 5:n.reverse=t.bool();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{key:isSet$c(A.key)?bytesFromBase64$7(A.key):new Uint8Array,offset:isSet$c(A.offset)?String(A.offset):"0",limit:isSet$c(A.limit)?String(A.limit):"0",countTotal:isSet$c(A.countTotal)?Boolean(A.countTotal):!1,reverse:isSet$c(A.reverse)?Boolean(A.reverse):!1}},toJSON(A){const e={};return A.key!==void 0&&(e.key=base64FromBytes$7(A.key!==void 0?A.key:new Uint8Array)),A.offset!==void 0&&(e.offset=A.offset),A.limit!==void 0&&(e.limit=A.limit),A.countTotal!==void 0&&(e.countTotal=A.countTotal),A.reverse!==void 0&&(e.reverse=A.reverse),e},fromPartial(A){const e=createBasePageRequest();return e.key=A.key??new Uint8Array,e.offset=A.offset??"0",e.limit=A.limit??"0",e.countTotal=A.countTotal??!1,e.reverse=A.reverse??!1,e}};function createBasePageResponse(){return{nextKey:new Uint8Array,total:"0"}}const PageResponse={encode(A,e=minimal.Writer.create()){return A.nextKey.length!==0&&e.uint32(10).bytes(A.nextKey),A.total!=="0"&&e.uint32(16).uint64(A.total),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBasePageResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.nextKey=t.bytes();break;case 2:n.total=longToString$3(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{nextKey:isSet$c(A.nextKey)?bytesFromBase64$7(A.nextKey):new Uint8Array,total:isSet$c(A.total)?String(A.total):"0"}},toJSON(A){const e={};return A.nextKey!==void 0&&(e.nextKey=base64FromBytes$7(A.nextKey!==void 0?A.nextKey:new Uint8Array)),A.total!==void 0&&(e.total=A.total),e},fromPartial(A){const e=createBasePageResponse();return e.nextKey=A.nextKey??new Uint8Array,e.total=A.total??"0",e}};var globalThis$d=(()=>{if(typeof globalThis$d<"u")return globalThis$d;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$7=globalThis$d.atob||(A=>globalThis$d.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$7(A){const e=atob$7(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$7=globalThis$d.btoa||(A=>globalThis$d.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$7(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$7(e.join(""))}function longToString$3(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$c(A){return A!=null}function createBaseParams$1(){return{sendEnabled:[],defaultSendEnabled:!1}}const Params$1={encode(A,e=minimal.Writer.create()){for(const t of A.sendEnabled)SendEnabled.encode(t,e.uint32(10).fork()).ldelim();return A.defaultSendEnabled===!0&&e.uint32(16).bool(A.defaultSendEnabled),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseParams$1();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.sendEnabled.push(SendEnabled.decode(t,t.uint32()));break;case 2:n.defaultSendEnabled=t.bool();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{sendEnabled:Array.isArray(A?.sendEnabled)?A.sendEnabled.map(e=>SendEnabled.fromJSON(e)):[],defaultSendEnabled:isSet$b(A.defaultSendEnabled)?Boolean(A.defaultSendEnabled):!1}},toJSON(A){const e={};return A.sendEnabled?e.sendEnabled=A.sendEnabled.map(t=>t?SendEnabled.toJSON(t):void 0):e.sendEnabled=[],A.defaultSendEnabled!==void 0&&(e.defaultSendEnabled=A.defaultSendEnabled),e},fromPartial(A){const e=createBaseParams$1();return e.sendEnabled=A.sendEnabled?.map(t=>SendEnabled.fromPartial(t))||[],e.defaultSendEnabled=A.defaultSendEnabled??!1,e}};function createBaseSendEnabled(){return{denom:"",enabled:!1}}const SendEnabled={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),A.enabled===!0&&e.uint32(16).bool(A.enabled),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSendEnabled();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;case 2:n.enabled=t.bool();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$b(A.denom)?String(A.denom):"",enabled:isSet$b(A.enabled)?Boolean(A.enabled):!1}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),A.enabled!==void 0&&(e.enabled=A.enabled),e},fromPartial(A){const e=createBaseSendEnabled();return e.denom=A.denom??"",e.enabled=A.enabled??!1,e}};function createBaseDenomUnit(){return{denom:"",exponent:0,aliases:[]}}const DenomUnit={encode(A,e=minimal.Writer.create()){A.denom!==""&&e.uint32(10).string(A.denom),A.exponent!==0&&e.uint32(16).uint32(A.exponent);for(const t of A.aliases)e.uint32(26).string(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseDenomUnit();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;case 2:n.exponent=t.uint32();break;case 3:n.aliases.push(t.string());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$b(A.denom)?String(A.denom):"",exponent:isSet$b(A.exponent)?Number(A.exponent):0,aliases:Array.isArray(A?.aliases)?A.aliases.map(e=>String(e)):[]}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),A.exponent!==void 0&&(e.exponent=Math.round(A.exponent)),A.aliases?e.aliases=A.aliases.map(t=>t):e.aliases=[],e},fromPartial(A){const e=createBaseDenomUnit();return e.denom=A.denom??"",e.exponent=A.exponent??0,e.aliases=A.aliases?.map(t=>t)||[],e}};function createBaseMetadata(){return{description:"",denomUnits:[],base:"",display:"",name:"",symbol:""}}const Metadata={encode(A,e=minimal.Writer.create()){A.description!==""&&e.uint32(10).string(A.description);for(const t of A.denomUnits)DenomUnit.encode(t,e.uint32(18).fork()).ldelim();return A.base!==""&&e.uint32(26).string(A.base),A.display!==""&&e.uint32(34).string(A.display),A.name!==""&&e.uint32(42).string(A.name),A.symbol!==""&&e.uint32(50).string(A.symbol),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseMetadata();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.description=t.string();break;case 2:n.denomUnits.push(DenomUnit.decode(t,t.uint32()));break;case 3:n.base=t.string();break;case 4:n.display=t.string();break;case 5:n.name=t.string();break;case 6:n.symbol=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{description:isSet$b(A.description)?String(A.description):"",denomUnits:Array.isArray(A?.denomUnits)?A.denomUnits.map(e=>DenomUnit.fromJSON(e)):[],base:isSet$b(A.base)?String(A.base):"",display:isSet$b(A.display)?String(A.display):"",name:isSet$b(A.name)?String(A.name):"",symbol:isSet$b(A.symbol)?String(A.symbol):""}},toJSON(A){const e={};return A.description!==void 0&&(e.description=A.description),A.denomUnits?e.denomUnits=A.denomUnits.map(t=>t?DenomUnit.toJSON(t):void 0):e.denomUnits=[],A.base!==void 0&&(e.base=A.base),A.display!==void 0&&(e.display=A.display),A.name!==void 0&&(e.name=A.name),A.symbol!==void 0&&(e.symbol=A.symbol),e},fromPartial(A){const e=createBaseMetadata();return e.description=A.description??"",e.denomUnits=A.denomUnits?.map(t=>DenomUnit.fromPartial(t))||[],e.base=A.base??"",e.display=A.display??"",e.name=A.name??"",e.symbol=A.symbol??"",e}};function isSet$b(A){return A!=null}var browserHeaders_umd={exports:{}};(function(A,e){(function(i,n){A.exports=n()})(commonjsGlobal,function(){return function(t){var i={};function n(g){if(i[g])return i[g].exports;var I=i[g]={i:g,l:!1,exports:{}};return t[g].call(I.exports,I,I.exports,n),I.l=!0,I.exports}return n.m=t,n.c=i,n.i=function(g){return g},n.d=function(g,I,o){n.o(g,I)||Object.defineProperty(g,I,{configurable:!1,enumerable:!0,get:o})},n.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return n.d(I,"a",I),I},n.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},n.p="",n(n.s=1)}([function(t,i,n){Object.defineProperty(i,"__esModule",{value:!0});var g=n(3);function I(a){return typeof a=="object"&&typeof a.headersMap=="object"&&typeof a.forEach=="function"}var o=function(){function a(r,s){r===void 0&&(r={}),s===void 0&&(s={splitValues:!1});var B=this;if(this.headersMap={},r)if(typeof Headers<"u"&&r instanceof Headers){var C=g.getHeaderKeys(r);C.forEach(function(c){var Q=g.getHeaderValues(r,c);Q.forEach(function(E){s.splitValues?B.append(c,g.splitHeaderValue(E)):B.append(c,E)})})}else if(I(r))r.forEach(function(c,Q){B.append(c,Q)});else if(typeof Map<"u"&&r instanceof Map){var l=r;l.forEach(function(c,Q){B.append(Q,c)})}else typeof r=="string"?this.appendFromString(r):typeof r=="object"&&Object.getOwnPropertyNames(r).forEach(function(c){var Q=r,E=Q[c];Array.isArray(E)?E.forEach(function(f){B.append(c,f)}):B.append(c,E)})}return a.prototype.appendFromString=function(r){for(var s=r.split(`\r
`),B=0;B<s.length;B++){var C=s[B],l=C.indexOf(":");if(l>0){var c=C.substring(0,l).trim(),Q=C.substring(l+1).trim();this.append(c,Q)}}},a.prototype.delete=function(r,s){var B=g.normalizeName(r);if(s===void 0)delete this.headersMap[B];else{var C=this.headersMap[B];if(C){var l=C.indexOf(s);l>=0&&C.splice(l,1),C.length===0&&delete this.headersMap[B]}}},a.prototype.append=function(r,s){var B=this,C=g.normalizeName(r);Array.isArray(this.headersMap[C])||(this.headersMap[C]=[]),Array.isArray(s)?s.forEach(function(l){B.headersMap[C].push(g.normalizeValue(l))}):this.headersMap[C].push(g.normalizeValue(s))},a.prototype.set=function(r,s){var B=g.normalizeName(r);if(Array.isArray(s)){var C=[];s.forEach(function(l){C.push(g.normalizeValue(l))}),this.headersMap[B]=C}else this.headersMap[B]=[g.normalizeValue(s)]},a.prototype.has=function(r,s){var B=this.headersMap[g.normalizeName(r)],C=Array.isArray(B);if(!C)return!1;if(s!==void 0){var l=g.normalizeValue(s);return B.indexOf(l)>=0}else return!0},a.prototype.get=function(r){var s=this.headersMap[g.normalizeName(r)];return s!==void 0?s.concat():[]},a.prototype.forEach=function(r){var s=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(B){r(B,s.headersMap[B])},this)},a.prototype.toHeaders=function(){if(typeof Headers<"u"){var r=new Headers;return this.forEach(function(s,B){B.forEach(function(C){r.append(s,C)})}),r}else throw new Error("Headers class is not defined")},a}();i.BrowserHeaders=o},function(t,i,n){Object.defineProperty(i,"__esModule",{value:!0});var g=n(0);i.BrowserHeaders=g.BrowserHeaders},function(t,i,n){Object.defineProperty(i,"__esModule",{value:!0});function g(o,a){for(var r=o[Symbol.iterator](),s=r.next();!s.done;)a(s.value[0]),s=r.next()}i.iterateHeaders=g;function I(o,a){for(var r=o.keys(),s=r.next();!s.done;)a(s.value),s=r.next()}i.iterateHeadersKeys=I},function(t,i,n){Object.defineProperty(i,"__esModule",{value:!0});var g=n(2);function I(C){if(typeof C!="string"&&(C=String(C)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(C))throw new TypeError("Invalid character in header field name");return C.toLowerCase()}i.normalizeName=I;function o(C){return typeof C!="string"&&(C=String(C)),C}i.normalizeValue=o;function a(C,l){var c=C;if(c instanceof Headers&&c.getAll)return c.getAll(l);var Q=c.get(l);return Q&&typeof Q=="string"?[Q]:Q}i.getHeaderValues=a;function r(C){return C}function s(C){var l=C,c={},Q=[];return l.keys?g.iterateHeadersKeys(l,function(E){c[E]||(c[E]=!0,Q.push(E))}):l.forEach?l.forEach(function(E,f){c[f]||(c[f]=!0,Q.push(f))}):g.iterateHeaders(l,function(E){var f=E[0];c[f]||(c[f]=!0,Q.push(f))}),Q}i.getHeaderKeys=s;function B(C){var l=[],c=C.split(", ");return c.forEach(function(Q){Q.split(",").forEach(function(E){l.push(E)})}),l}i.splitHeaderValue=B}])})})(browserHeaders_umd);function createBaseQueryBalanceRequest(){return{address:"",denom:""}}const QueryBalanceRequest={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.denom!==""&&e.uint32(18).string(A.denom),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryBalanceRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.address=t.string();break;case 2:n.denom=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{address:isSet$a(A.address)?String(A.address):"",denom:isSet$a(A.denom)?String(A.denom):""}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.denom!==void 0&&(e.denom=A.denom),e},fromPartial(A){const e=createBaseQueryBalanceRequest();return e.address=A.address??"",e.denom=A.denom??"",e}};function createBaseQueryBalanceResponse(){return{balance:void 0}}const QueryBalanceResponse={encode(A,e=minimal.Writer.create()){return A.balance!==void 0&&Coin.encode(A.balance,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryBalanceResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.balance=Coin.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{balance:isSet$a(A.balance)?Coin.fromJSON(A.balance):void 0}},toJSON(A){const e={};return A.balance!==void 0&&(e.balance=A.balance?Coin.toJSON(A.balance):void 0),e},fromPartial(A){const e=createBaseQueryBalanceResponse();return e.balance=A.balance!==void 0&&A.balance!==null?Coin.fromPartial(A.balance):void 0,e}};function createBaseQueryAllBalancesRequest(){return{address:"",pagination:void 0}}const QueryAllBalancesRequest={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAllBalancesRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.address=t.string();break;case 2:n.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{address:isSet$a(A.address)?String(A.address):"",pagination:isSet$a(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAllBalancesRequest();return e.address=A.address??"",e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryAllBalancesResponse(){return{balances:[],pagination:void 0}}const QueryAllBalancesResponse={encode(A,e=minimal.Writer.create()){for(const t of A.balances)Coin.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAllBalancesResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.balances.push(Coin.decode(t,t.uint32()));break;case 2:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{balances:Array.isArray(A?.balances)?A.balances.map(e=>Coin.fromJSON(e)):[],pagination:isSet$a(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.balances?e.balances=A.balances.map(t=>t?Coin.toJSON(t):void 0):e.balances=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAllBalancesResponse();return e.balances=A.balances?.map(t=>Coin.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQueryTotalSupplyRequest(){return{pagination:void 0}}const QueryTotalSupplyRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryTotalSupplyRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{pagination:isSet$a(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryTotalSupplyRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryTotalSupplyResponse(){return{supply:[],pagination:void 0}}const QueryTotalSupplyResponse={encode(A,e=minimal.Writer.create()){for(const t of A.supply)Coin.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryTotalSupplyResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.supply.push(Coin.decode(t,t.uint32()));break;case 2:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{supply:Array.isArray(A?.supply)?A.supply.map(e=>Coin.fromJSON(e)):[],pagination:isSet$a(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.supply?e.supply=A.supply.map(t=>t?Coin.toJSON(t):void 0):e.supply=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryTotalSupplyResponse();return e.supply=A.supply?.map(t=>Coin.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQuerySupplyOfRequest(){return{denom:""}}const QuerySupplyOfRequest={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQuerySupplyOfRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$a(A.denom)?String(A.denom):""}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),e},fromPartial(A){const e=createBaseQuerySupplyOfRequest();return e.denom=A.denom??"",e}};function createBaseQuerySupplyOfResponse(){return{amount:void 0}}const QuerySupplyOfResponse={encode(A,e=minimal.Writer.create()){return A.amount!==void 0&&Coin.encode(A.amount,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQuerySupplyOfResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.amount=Coin.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{amount:isSet$a(A.amount)?Coin.fromJSON(A.amount):void 0}},toJSON(A){const e={};return A.amount!==void 0&&(e.amount=A.amount?Coin.toJSON(A.amount):void 0),e},fromPartial(A){const e=createBaseQuerySupplyOfResponse();return e.amount=A.amount!==void 0&&A.amount!==null?Coin.fromPartial(A.amount):void 0,e}};function createBaseQueryParamsRequest$1(){return{}}const QueryParamsRequest$1={encode(A,e=minimal.Writer.create()){return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryParamsRequest$1();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){default:t.skipType(g&7);break}}return n},fromJSON(A){return{}},toJSON(A){return{}},fromPartial(A){return createBaseQueryParamsRequest$1()}};function createBaseQueryParamsResponse$1(){return{params:void 0}}const QueryParamsResponse$1={encode(A,e=minimal.Writer.create()){return A.params!==void 0&&Params$1.encode(A.params,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryParamsResponse$1();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.params=Params$1.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{params:isSet$a(A.params)?Params$1.fromJSON(A.params):void 0}},toJSON(A){const e={};return A.params!==void 0&&(e.params=A.params?Params$1.toJSON(A.params):void 0),e},fromPartial(A){const e=createBaseQueryParamsResponse$1();return e.params=A.params!==void 0&&A.params!==null?Params$1.fromPartial(A.params):void 0,e}};function createBaseQueryDenomsMetadataRequest(){return{pagination:void 0}}const QueryDenomsMetadataRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryDenomsMetadataRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{pagination:isSet$a(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryDenomsMetadataRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryDenomsMetadataResponse(){return{metadatas:[],pagination:void 0}}const QueryDenomsMetadataResponse={encode(A,e=minimal.Writer.create()){for(const t of A.metadatas)Metadata.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryDenomsMetadataResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.metadatas.push(Metadata.decode(t,t.uint32()));break;case 2:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{metadatas:Array.isArray(A?.metadatas)?A.metadatas.map(e=>Metadata.fromJSON(e)):[],pagination:isSet$a(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.metadatas?e.metadatas=A.metadatas.map(t=>t?Metadata.toJSON(t):void 0):e.metadatas=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryDenomsMetadataResponse();return e.metadatas=A.metadatas?.map(t=>Metadata.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQueryDenomMetadataRequest(){return{denom:""}}const QueryDenomMetadataRequest={encode(A,e=minimal.Writer.create()){return A.denom!==""&&e.uint32(10).string(A.denom),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryDenomMetadataRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.denom=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{denom:isSet$a(A.denom)?String(A.denom):""}},toJSON(A){const e={};return A.denom!==void 0&&(e.denom=A.denom),e},fromPartial(A){const e=createBaseQueryDenomMetadataRequest();return e.denom=A.denom??"",e}};function createBaseQueryDenomMetadataResponse(){return{metadata:void 0}}const QueryDenomMetadataResponse={encode(A,e=minimal.Writer.create()){return A.metadata!==void 0&&Metadata.encode(A.metadata,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryDenomMetadataResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.metadata=Metadata.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{metadata:isSet$a(A.metadata)?Metadata.fromJSON(A.metadata):void 0}},toJSON(A){const e={};return A.metadata!==void 0&&(e.metadata=A.metadata?Metadata.toJSON(A.metadata):void 0),e},fromPartial(A){const e=createBaseQueryDenomMetadataResponse();return e.metadata=A.metadata!==void 0&&A.metadata!==null?Metadata.fromPartial(A.metadata):void 0,e}};class QueryClientImpl$1{constructor(e){QA(this,"rpc");this.rpc=e,this.balance=this.balance.bind(this),this.allBalances=this.allBalances.bind(this),this.totalSupply=this.totalSupply.bind(this),this.supplyOf=this.supplyOf.bind(this),this.params=this.params.bind(this),this.denomMetadata=this.denomMetadata.bind(this),this.denomsMetadata=this.denomsMetadata.bind(this)}balance(e,t){return this.rpc.unary(QueryBalanceDesc,QueryBalanceRequest.fromPartial(e),t)}allBalances(e,t){return this.rpc.unary(QueryAllBalancesDesc,QueryAllBalancesRequest.fromPartial(e),t)}totalSupply(e,t){return this.rpc.unary(QueryTotalSupplyDesc,QueryTotalSupplyRequest.fromPartial(e),t)}supplyOf(e,t){return this.rpc.unary(QuerySupplyOfDesc,QuerySupplyOfRequest.fromPartial(e),t)}params(e,t){return this.rpc.unary(QueryParamsDesc$1,QueryParamsRequest$1.fromPartial(e),t)}denomMetadata(e,t){return this.rpc.unary(QueryDenomMetadataDesc,QueryDenomMetadataRequest.fromPartial(e),t)}denomsMetadata(e,t){return this.rpc.unary(QueryDenomsMetadataDesc,QueryDenomsMetadataRequest.fromPartial(e),t)}}const QueryDesc$1={serviceName:"cosmos.bank.v1beta1.Query"},QueryBalanceDesc={methodName:"Balance",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryBalanceRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryBalanceResponse.decode(A),toObject(){return this}}}}},QueryAllBalancesDesc={methodName:"AllBalances",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAllBalancesRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryAllBalancesResponse.decode(A),toObject(){return this}}}}},QueryTotalSupplyDesc={methodName:"TotalSupply",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryTotalSupplyRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryTotalSupplyResponse.decode(A),toObject(){return this}}}}},QuerySupplyOfDesc={methodName:"SupplyOf",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QuerySupplyOfRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QuerySupplyOfResponse.decode(A),toObject(){return this}}}}},QueryParamsDesc$1={methodName:"Params",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryParamsRequest$1.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryParamsResponse$1.decode(A),toObject(){return this}}}}},QueryDenomMetadataDesc={methodName:"DenomMetadata",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryDenomMetadataRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryDenomMetadataResponse.decode(A),toObject(){return this}}}}},QueryDenomsMetadataDesc={methodName:"DenomsMetadata",service:QueryDesc$1,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryDenomsMetadataRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryDenomsMetadataResponse.decode(A),toObject(){return this}}}}};class GrpcWebImpl{constructor(e,t){QA(this,"host");QA(this,"options");this.host=e,this.options=t}unary(e,t,i){const n={...t,...e.requestType},g=i&&this.options.metadata?new browserHeaders_umd.exports.BrowserHeaders({...this.options?.metadata.headersMap,...i?.headersMap}):i||this.options.metadata;return new Promise((I,o)=>{grpcWebClient_umd.exports.grpc.unary(e,{request:n,host:this.host,metadata:g,transport:this.options.transport,debug:this.options.debug,onEnd:function(a){if(a.status===grpcWebClient_umd.exports.grpc.Code.OK)I(a.message);else{const r=new Error(a.statusMessage);r.code=a.status,r.metadata=a.trailers,o(r)}}})})}}function isSet$a(A){return A!=null}function createBaseAny(){return{typeUrl:"",value:new Uint8Array}}const Any={encode(A,e=minimal.Writer.create()){return A.typeUrl!==""&&e.uint32(10).string(A.typeUrl),A.value.length!==0&&e.uint32(18).bytes(A.value),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseAny();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.typeUrl=t.string();break;case 2:n.value=t.bytes();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{typeUrl:isSet$9(A.typeUrl)?String(A.typeUrl):"",value:isSet$9(A.value)?bytesFromBase64$6(A.value):new Uint8Array}},toJSON(A){const e={};return A.typeUrl!==void 0&&(e.typeUrl=A.typeUrl),A.value!==void 0&&(e.value=base64FromBytes$6(A.value!==void 0?A.value:new Uint8Array)),e},fromPartial(A){const e=createBaseAny();return e.typeUrl=A.typeUrl??"",e.value=A.value??new Uint8Array,e}};var globalThis$c=(()=>{if(typeof globalThis$c<"u")return globalThis$c;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$6=globalThis$c.atob||(A=>globalThis$c.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$6(A){const e=atob$6(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$6=globalThis$c.btoa||(A=>globalThis$c.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$6(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$6(e.join(""))}function isSet$9(A){return A!=null}function createBaseBaseAccount(){return{address:"",pubKey:void 0,accountNumber:"0",sequence:"0"}}const BaseAccount={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),A.pubKey!==void 0&&Any.encode(A.pubKey,e.uint32(18).fork()).ldelim(),A.accountNumber!=="0"&&e.uint32(24).uint64(A.accountNumber),A.sequence!=="0"&&e.uint32(32).uint64(A.sequence),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseBaseAccount();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.address=t.string();break;case 2:n.pubKey=Any.decode(t,t.uint32());break;case 3:n.accountNumber=longToString$2(t.uint64());break;case 4:n.sequence=longToString$2(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{address:isSet$8(A.address)?String(A.address):"",pubKey:isSet$8(A.pubKey)?Any.fromJSON(A.pubKey):void 0,accountNumber:isSet$8(A.accountNumber)?String(A.accountNumber):"0",sequence:isSet$8(A.sequence)?String(A.sequence):"0"}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),A.pubKey!==void 0&&(e.pubKey=A.pubKey?Any.toJSON(A.pubKey):void 0),A.accountNumber!==void 0&&(e.accountNumber=A.accountNumber),A.sequence!==void 0&&(e.sequence=A.sequence),e},fromPartial(A){const e=createBaseBaseAccount();return e.address=A.address??"",e.pubKey=A.pubKey!==void 0&&A.pubKey!==null?Any.fromPartial(A.pubKey):void 0,e.accountNumber=A.accountNumber??"0",e.sequence=A.sequence??"0",e}};function createBaseParams(){return{maxMemoCharacters:"0",txSigLimit:"0",txSizeCostPerByte:"0",sigVerifyCostEd25519:"0",sigVerifyCostSecp256k1:"0"}}const Params={encode(A,e=minimal.Writer.create()){return A.maxMemoCharacters!=="0"&&e.uint32(8).uint64(A.maxMemoCharacters),A.txSigLimit!=="0"&&e.uint32(16).uint64(A.txSigLimit),A.txSizeCostPerByte!=="0"&&e.uint32(24).uint64(A.txSizeCostPerByte),A.sigVerifyCostEd25519!=="0"&&e.uint32(32).uint64(A.sigVerifyCostEd25519),A.sigVerifyCostSecp256k1!=="0"&&e.uint32(40).uint64(A.sigVerifyCostSecp256k1),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseParams();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.maxMemoCharacters=longToString$2(t.uint64());break;case 2:n.txSigLimit=longToString$2(t.uint64());break;case 3:n.txSizeCostPerByte=longToString$2(t.uint64());break;case 4:n.sigVerifyCostEd25519=longToString$2(t.uint64());break;case 5:n.sigVerifyCostSecp256k1=longToString$2(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{maxMemoCharacters:isSet$8(A.maxMemoCharacters)?String(A.maxMemoCharacters):"0",txSigLimit:isSet$8(A.txSigLimit)?String(A.txSigLimit):"0",txSizeCostPerByte:isSet$8(A.txSizeCostPerByte)?String(A.txSizeCostPerByte):"0",sigVerifyCostEd25519:isSet$8(A.sigVerifyCostEd25519)?String(A.sigVerifyCostEd25519):"0",sigVerifyCostSecp256k1:isSet$8(A.sigVerifyCostSecp256k1)?String(A.sigVerifyCostSecp256k1):"0"}},toJSON(A){const e={};return A.maxMemoCharacters!==void 0&&(e.maxMemoCharacters=A.maxMemoCharacters),A.txSigLimit!==void 0&&(e.txSigLimit=A.txSigLimit),A.txSizeCostPerByte!==void 0&&(e.txSizeCostPerByte=A.txSizeCostPerByte),A.sigVerifyCostEd25519!==void 0&&(e.sigVerifyCostEd25519=A.sigVerifyCostEd25519),A.sigVerifyCostSecp256k1!==void 0&&(e.sigVerifyCostSecp256k1=A.sigVerifyCostSecp256k1),e},fromPartial(A){const e=createBaseParams();return e.maxMemoCharacters=A.maxMemoCharacters??"0",e.txSigLimit=A.txSigLimit??"0",e.txSizeCostPerByte=A.txSizeCostPerByte??"0",e.sigVerifyCostEd25519=A.sigVerifyCostEd25519??"0",e.sigVerifyCostSecp256k1=A.sigVerifyCostSecp256k1??"0",e}};function longToString$2(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$8(A){return A!=null}function createBaseQueryAccountsRequest(){return{pagination:void 0}}const QueryAccountsRequest={encode(A,e=minimal.Writer.create()){return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAccountsRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.pagination=PageRequest.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{pagination:isSet$7(A.pagination)?PageRequest.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAccountsRequest();return e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e}};function createBaseQueryAccountsResponse(){return{accounts:[],pagination:void 0}}const QueryAccountsResponse={encode(A,e=minimal.Writer.create()){for(const t of A.accounts)Any.encode(t,e.uint32(10).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAccountsResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.accounts.push(Any.decode(t,t.uint32()));break;case 2:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{accounts:Array.isArray(A?.accounts)?A.accounts.map(e=>Any.fromJSON(e)):[],pagination:isSet$7(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.accounts?e.accounts=A.accounts.map(t=>t?Any.toJSON(t):void 0):e.accounts=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseQueryAccountsResponse();return e.accounts=A.accounts?.map(t=>Any.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseQueryAccountRequest(){return{address:""}}const QueryAccountRequest={encode(A,e=minimal.Writer.create()){return A.address!==""&&e.uint32(10).string(A.address),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAccountRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.address=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{address:isSet$7(A.address)?String(A.address):""}},toJSON(A){const e={};return A.address!==void 0&&(e.address=A.address),e},fromPartial(A){const e=createBaseQueryAccountRequest();return e.address=A.address??"",e}};function createBaseQueryAccountResponse(){return{account:void 0}}const QueryAccountResponse={encode(A,e=minimal.Writer.create()){return A.account!==void 0&&Any.encode(A.account,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryAccountResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.account=Any.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{account:isSet$7(A.account)?Any.fromJSON(A.account):void 0}},toJSON(A){const e={};return A.account!==void 0&&(e.account=A.account?Any.toJSON(A.account):void 0),e},fromPartial(A){const e=createBaseQueryAccountResponse();return e.account=A.account!==void 0&&A.account!==null?Any.fromPartial(A.account):void 0,e}};function createBaseQueryParamsRequest(){return{}}const QueryParamsRequest={encode(A,e=minimal.Writer.create()){return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryParamsRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){default:t.skipType(g&7);break}}return n},fromJSON(A){return{}},toJSON(A){return{}},fromPartial(A){return createBaseQueryParamsRequest()}};function createBaseQueryParamsResponse(){return{params:void 0}}const QueryParamsResponse={encode(A,e=minimal.Writer.create()){return A.params!==void 0&&Params.encode(A.params,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseQueryParamsResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.params=Params.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{params:isSet$7(A.params)?Params.fromJSON(A.params):void 0}},toJSON(A){const e={};return A.params!==void 0&&(e.params=A.params?Params.toJSON(A.params):void 0),e},fromPartial(A){const e=createBaseQueryParamsResponse();return e.params=A.params!==void 0&&A.params!==null?Params.fromPartial(A.params):void 0,e}};class QueryClientImpl{constructor(e){QA(this,"rpc");this.rpc=e,this.accounts=this.accounts.bind(this),this.account=this.account.bind(this),this.params=this.params.bind(this)}accounts(e,t){return this.rpc.unary(QueryAccountsDesc,QueryAccountsRequest.fromPartial(e),t)}account(e,t){return this.rpc.unary(QueryAccountDesc,QueryAccountRequest.fromPartial(e),t)}params(e,t){return this.rpc.unary(QueryParamsDesc,QueryParamsRequest.fromPartial(e),t)}}const QueryDesc={serviceName:"cosmos.auth.v1beta1.Query"},QueryAccountsDesc={methodName:"Accounts",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAccountsRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryAccountsResponse.decode(A),toObject(){return this}}}}},QueryAccountDesc={methodName:"Account",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryAccountRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryAccountResponse.decode(A),toObject(){return this}}}}},QueryParamsDesc={methodName:"Params",service:QueryDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return QueryParamsRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...QueryParamsResponse.decode(A),toObject(){return this}}}}};function isSet$7(A){return A!=null}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var globalThis$b=(()=>{if(typeof globalThis$b<"u")return globalThis$b;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$b.atob;globalThis$b.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var globalThis$a=(()=>{if(typeof globalThis$a<"u")return globalThis$a;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$a.atob;globalThis$a.btoa;var globalThis$9=(()=>{if(typeof globalThis$9<"u")return globalThis$9;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$9.atob;globalThis$9.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var BlockIDFlag;(function(A){A[A.BLOCK_ID_FLAG_UNKNOWN=0]="BLOCK_ID_FLAG_UNKNOWN",A[A.BLOCK_ID_FLAG_ABSENT=1]="BLOCK_ID_FLAG_ABSENT",A[A.BLOCK_ID_FLAG_COMMIT=2]="BLOCK_ID_FLAG_COMMIT",A[A.BLOCK_ID_FLAG_NIL=3]="BLOCK_ID_FLAG_NIL",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(BlockIDFlag||(BlockIDFlag={}));var SignedMsgType;(function(A){A[A.SIGNED_MSG_TYPE_UNKNOWN=0]="SIGNED_MSG_TYPE_UNKNOWN",A[A.SIGNED_MSG_TYPE_PREVOTE=1]="SIGNED_MSG_TYPE_PREVOTE",A[A.SIGNED_MSG_TYPE_PRECOMMIT=2]="SIGNED_MSG_TYPE_PRECOMMIT",A[A.SIGNED_MSG_TYPE_PROPOSAL=32]="SIGNED_MSG_TYPE_PROPOSAL",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(SignedMsgType||(SignedMsgType={}));var globalThis$8=(()=>{if(typeof globalThis$8<"u")return globalThis$8;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$8.atob;globalThis$8.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());var CheckTxType;(function(A){A[A.NEW=0]="NEW",A[A.RECHECK=1]="RECHECK",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(CheckTxType||(CheckTxType={}));var EvidenceType;(function(A){A[A.UNKNOWN=0]="UNKNOWN",A[A.DUPLICATE_VOTE=1]="DUPLICATE_VOTE",A[A.LIGHT_CLIENT_ATTACK=2]="LIGHT_CLIENT_ATTACK",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(EvidenceType||(EvidenceType={}));var ResponseOfferSnapshot_Result;(function(A){A[A.UNKNOWN=0]="UNKNOWN",A[A.ACCEPT=1]="ACCEPT",A[A.ABORT=2]="ABORT",A[A.REJECT=3]="REJECT",A[A.REJECT_FORMAT=4]="REJECT_FORMAT",A[A.REJECT_SENDER=5]="REJECT_SENDER",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(ResponseOfferSnapshot_Result||(ResponseOfferSnapshot_Result={}));var ResponseApplySnapshotChunk_Result;(function(A){A[A.UNKNOWN=0]="UNKNOWN",A[A.ACCEPT=1]="ACCEPT",A[A.ABORT=2]="ABORT",A[A.RETRY=3]="RETRY",A[A.RETRY_SNAPSHOT=4]="RETRY_SNAPSHOT",A[A.REJECT_SNAPSHOT=5]="REJECT_SNAPSHOT",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(ResponseApplySnapshotChunk_Result||(ResponseApplySnapshotChunk_Result={}));function createBaseEvent(){return{type:"",attributes:[]}}const Event$1={encode(A,e=minimal.Writer.create()){A.type!==""&&e.uint32(10).string(A.type);for(const t of A.attributes)EventAttribute.encode(t,e.uint32(18).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseEvent();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.type=t.string();break;case 2:n.attributes.push(EventAttribute.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{type:isSet$6(A.type)?String(A.type):"",attributes:Array.isArray(A?.attributes)?A.attributes.map(e=>EventAttribute.fromJSON(e)):[]}},toJSON(A){const e={};return A.type!==void 0&&(e.type=A.type),A.attributes?e.attributes=A.attributes.map(t=>t?EventAttribute.toJSON(t):void 0):e.attributes=[],e},fromPartial(A){const e=createBaseEvent();return e.type=A.type??"",e.attributes=A.attributes?.map(t=>EventAttribute.fromPartial(t))||[],e}};function createBaseEventAttribute(){return{key:new Uint8Array,value:new Uint8Array,index:!1}}const EventAttribute={encode(A,e=minimal.Writer.create()){return A.key.length!==0&&e.uint32(10).bytes(A.key),A.value.length!==0&&e.uint32(18).bytes(A.value),A.index===!0&&e.uint32(24).bool(A.index),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseEventAttribute();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.key=t.bytes();break;case 2:n.value=t.bytes();break;case 3:n.index=t.bool();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{key:isSet$6(A.key)?bytesFromBase64$5(A.key):new Uint8Array,value:isSet$6(A.value)?bytesFromBase64$5(A.value):new Uint8Array,index:isSet$6(A.index)?Boolean(A.index):!1}},toJSON(A){const e={};return A.key!==void 0&&(e.key=base64FromBytes$5(A.key!==void 0?A.key:new Uint8Array)),A.value!==void 0&&(e.value=base64FromBytes$5(A.value!==void 0?A.value:new Uint8Array)),A.index!==void 0&&(e.index=A.index),e},fromPartial(A){const e=createBaseEventAttribute();return e.key=A.key??new Uint8Array,e.value=A.value??new Uint8Array,e.index=A.index??!1,e}};var globalThis$7=(()=>{if(typeof globalThis$7<"u")return globalThis$7;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$5=globalThis$7.atob||(A=>globalThis$7.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$5(A){const e=atob$5(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$5=globalThis$7.btoa||(A=>globalThis$7.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$5(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$5(e.join(""))}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$6(A){return A!=null}function createBaseTxResponse(){return{height:"0",txhash:"",codespace:"",code:0,data:"",rawLog:"",logs:[],info:"",gasWanted:"0",gasUsed:"0",tx:void 0,timestamp:"",events:[]}}const TxResponse={encode(A,e=minimal.Writer.create()){A.height!=="0"&&e.uint32(8).int64(A.height),A.txhash!==""&&e.uint32(18).string(A.txhash),A.codespace!==""&&e.uint32(26).string(A.codespace),A.code!==0&&e.uint32(32).uint32(A.code),A.data!==""&&e.uint32(42).string(A.data),A.rawLog!==""&&e.uint32(50).string(A.rawLog);for(const t of A.logs)ABCIMessageLog.encode(t,e.uint32(58).fork()).ldelim();A.info!==""&&e.uint32(66).string(A.info),A.gasWanted!=="0"&&e.uint32(72).int64(A.gasWanted),A.gasUsed!=="0"&&e.uint32(80).int64(A.gasUsed),A.tx!==void 0&&Any.encode(A.tx,e.uint32(90).fork()).ldelim(),A.timestamp!==""&&e.uint32(98).string(A.timestamp);for(const t of A.events)Event$1.encode(t,e.uint32(106).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseTxResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.height=longToString$1(t.int64());break;case 2:n.txhash=t.string();break;case 3:n.codespace=t.string();break;case 4:n.code=t.uint32();break;case 5:n.data=t.string();break;case 6:n.rawLog=t.string();break;case 7:n.logs.push(ABCIMessageLog.decode(t,t.uint32()));break;case 8:n.info=t.string();break;case 9:n.gasWanted=longToString$1(t.int64());break;case 10:n.gasUsed=longToString$1(t.int64());break;case 11:n.tx=Any.decode(t,t.uint32());break;case 12:n.timestamp=t.string();break;case 13:n.events.push(Event$1.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{height:isSet$5(A.height)?String(A.height):"0",txhash:isSet$5(A.txhash)?String(A.txhash):"",codespace:isSet$5(A.codespace)?String(A.codespace):"",code:isSet$5(A.code)?Number(A.code):0,data:isSet$5(A.data)?String(A.data):"",rawLog:isSet$5(A.rawLog)?String(A.rawLog):"",logs:Array.isArray(A?.logs)?A.logs.map(e=>ABCIMessageLog.fromJSON(e)):[],info:isSet$5(A.info)?String(A.info):"",gasWanted:isSet$5(A.gasWanted)?String(A.gasWanted):"0",gasUsed:isSet$5(A.gasUsed)?String(A.gasUsed):"0",tx:isSet$5(A.tx)?Any.fromJSON(A.tx):void 0,timestamp:isSet$5(A.timestamp)?String(A.timestamp):"",events:Array.isArray(A?.events)?A.events.map(e=>Event$1.fromJSON(e)):[]}},toJSON(A){const e={};return A.height!==void 0&&(e.height=A.height),A.txhash!==void 0&&(e.txhash=A.txhash),A.codespace!==void 0&&(e.codespace=A.codespace),A.code!==void 0&&(e.code=Math.round(A.code)),A.data!==void 0&&(e.data=A.data),A.rawLog!==void 0&&(e.rawLog=A.rawLog),A.logs?e.logs=A.logs.map(t=>t?ABCIMessageLog.toJSON(t):void 0):e.logs=[],A.info!==void 0&&(e.info=A.info),A.gasWanted!==void 0&&(e.gasWanted=A.gasWanted),A.gasUsed!==void 0&&(e.gasUsed=A.gasUsed),A.tx!==void 0&&(e.tx=A.tx?Any.toJSON(A.tx):void 0),A.timestamp!==void 0&&(e.timestamp=A.timestamp),A.events?e.events=A.events.map(t=>t?Event$1.toJSON(t):void 0):e.events=[],e},fromPartial(A){const e=createBaseTxResponse();return e.height=A.height??"0",e.txhash=A.txhash??"",e.codespace=A.codespace??"",e.code=A.code??0,e.data=A.data??"",e.rawLog=A.rawLog??"",e.logs=A.logs?.map(t=>ABCIMessageLog.fromPartial(t))||[],e.info=A.info??"",e.gasWanted=A.gasWanted??"0",e.gasUsed=A.gasUsed??"0",e.tx=A.tx!==void 0&&A.tx!==null?Any.fromPartial(A.tx):void 0,e.timestamp=A.timestamp??"",e.events=A.events?.map(t=>Event$1.fromPartial(t))||[],e}};function createBaseABCIMessageLog(){return{msgIndex:0,log:"",events:[]}}const ABCIMessageLog={encode(A,e=minimal.Writer.create()){A.msgIndex!==0&&e.uint32(8).uint32(A.msgIndex),A.log!==""&&e.uint32(18).string(A.log);for(const t of A.events)StringEvent.encode(t,e.uint32(26).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseABCIMessageLog();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.msgIndex=t.uint32();break;case 2:n.log=t.string();break;case 3:n.events.push(StringEvent.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{msgIndex:isSet$5(A.msgIndex)?Number(A.msgIndex):0,log:isSet$5(A.log)?String(A.log):"",events:Array.isArray(A?.events)?A.events.map(e=>StringEvent.fromJSON(e)):[]}},toJSON(A){const e={};return A.msgIndex!==void 0&&(e.msgIndex=Math.round(A.msgIndex)),A.log!==void 0&&(e.log=A.log),A.events?e.events=A.events.map(t=>t?StringEvent.toJSON(t):void 0):e.events=[],e},fromPartial(A){const e=createBaseABCIMessageLog();return e.msgIndex=A.msgIndex??0,e.log=A.log??"",e.events=A.events?.map(t=>StringEvent.fromPartial(t))||[],e}};function createBaseStringEvent(){return{type:"",attributes:[]}}const StringEvent={encode(A,e=minimal.Writer.create()){A.type!==""&&e.uint32(10).string(A.type);for(const t of A.attributes)Attribute.encode(t,e.uint32(18).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseStringEvent();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.type=t.string();break;case 2:n.attributes.push(Attribute.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{type:isSet$5(A.type)?String(A.type):"",attributes:Array.isArray(A?.attributes)?A.attributes.map(e=>Attribute.fromJSON(e)):[]}},toJSON(A){const e={};return A.type!==void 0&&(e.type=A.type),A.attributes?e.attributes=A.attributes.map(t=>t?Attribute.toJSON(t):void 0):e.attributes=[],e},fromPartial(A){const e=createBaseStringEvent();return e.type=A.type??"",e.attributes=A.attributes?.map(t=>Attribute.fromPartial(t))||[],e}};function createBaseAttribute(){return{key:"",value:""}}const Attribute={encode(A,e=minimal.Writer.create()){return A.key!==""&&e.uint32(10).string(A.key),A.value!==""&&e.uint32(18).string(A.value),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseAttribute();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.key=t.string();break;case 2:n.value=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{key:isSet$5(A.key)?String(A.key):"",value:isSet$5(A.value)?String(A.value):""}},toJSON(A){const e={};return A.key!==void 0&&(e.key=A.key),A.value!==void 0&&(e.value=A.value),e},fromPartial(A){const e=createBaseAttribute();return e.key=A.key??"",e.value=A.value??"",e}};function createBaseGasInfo(){return{gasWanted:"0",gasUsed:"0"}}const GasInfo={encode(A,e=minimal.Writer.create()){return A.gasWanted!=="0"&&e.uint32(8).uint64(A.gasWanted),A.gasUsed!=="0"&&e.uint32(16).uint64(A.gasUsed),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGasInfo();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.gasWanted=longToString$1(t.uint64());break;case 2:n.gasUsed=longToString$1(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{gasWanted:isSet$5(A.gasWanted)?String(A.gasWanted):"0",gasUsed:isSet$5(A.gasUsed)?String(A.gasUsed):"0"}},toJSON(A){const e={};return A.gasWanted!==void 0&&(e.gasWanted=A.gasWanted),A.gasUsed!==void 0&&(e.gasUsed=A.gasUsed),e},fromPartial(A){const e=createBaseGasInfo();return e.gasWanted=A.gasWanted??"0",e.gasUsed=A.gasUsed??"0",e}};function createBaseResult(){return{data:new Uint8Array,log:"",events:[]}}const Result={encode(A,e=minimal.Writer.create()){A.data.length!==0&&e.uint32(10).bytes(A.data),A.log!==""&&e.uint32(18).string(A.log);for(const t of A.events)Event$1.encode(t,e.uint32(26).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseResult();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.data=t.bytes();break;case 2:n.log=t.string();break;case 3:n.events.push(Event$1.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{data:isSet$5(A.data)?bytesFromBase64$4(A.data):new Uint8Array,log:isSet$5(A.log)?String(A.log):"",events:Array.isArray(A?.events)?A.events.map(e=>Event$1.fromJSON(e)):[]}},toJSON(A){const e={};return A.data!==void 0&&(e.data=base64FromBytes$4(A.data!==void 0?A.data:new Uint8Array)),A.log!==void 0&&(e.log=A.log),A.events?e.events=A.events.map(t=>t?Event$1.toJSON(t):void 0):e.events=[],e},fromPartial(A){const e=createBaseResult();return e.data=A.data??new Uint8Array,e.log=A.log??"",e.events=A.events?.map(t=>Event$1.fromPartial(t))||[],e}};var globalThis$6=(()=>{if(typeof globalThis$6<"u")return globalThis$6;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$4=globalThis$6.atob||(A=>globalThis$6.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$4(A){const e=atob$4(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$4=globalThis$6.btoa||(A=>globalThis$6.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$4(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$4(e.join(""))}function longToString$1(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$5(A){return A!=null}function createBaseCompactBitArray(){return{extraBitsStored:0,elems:new Uint8Array}}const CompactBitArray={encode(A,e=minimal.Writer.create()){return A.extraBitsStored!==0&&e.uint32(8).uint32(A.extraBitsStored),A.elems.length!==0&&e.uint32(18).bytes(A.elems),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseCompactBitArray();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.extraBitsStored=t.uint32();break;case 2:n.elems=t.bytes();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{extraBitsStored:isSet$4(A.extraBitsStored)?Number(A.extraBitsStored):0,elems:isSet$4(A.elems)?bytesFromBase64$3(A.elems):new Uint8Array}},toJSON(A){const e={};return A.extraBitsStored!==void 0&&(e.extraBitsStored=Math.round(A.extraBitsStored)),A.elems!==void 0&&(e.elems=base64FromBytes$3(A.elems!==void 0?A.elems:new Uint8Array)),e},fromPartial(A){const e=createBaseCompactBitArray();return e.extraBitsStored=A.extraBitsStored??0,e.elems=A.elems??new Uint8Array,e}};var globalThis$5=(()=>{if(typeof globalThis$5<"u")return globalThis$5;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$3=globalThis$5.atob||(A=>globalThis$5.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$3(A){const e=atob$3(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$3=globalThis$5.btoa||(A=>globalThis$5.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$3(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$3(e.join(""))}function isSet$4(A){return A!=null}var SignMode;(function(A){A[A.SIGN_MODE_UNSPECIFIED=0]="SIGN_MODE_UNSPECIFIED",A[A.SIGN_MODE_DIRECT=1]="SIGN_MODE_DIRECT",A[A.SIGN_MODE_TEXTUAL=2]="SIGN_MODE_TEXTUAL",A[A.SIGN_MODE_LEGACY_AMINO_JSON=127]="SIGN_MODE_LEGACY_AMINO_JSON",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(SignMode||(SignMode={}));function signModeFromJSON(A){switch(A){case 0:case"SIGN_MODE_UNSPECIFIED":return SignMode.SIGN_MODE_UNSPECIFIED;case 1:case"SIGN_MODE_DIRECT":return SignMode.SIGN_MODE_DIRECT;case 2:case"SIGN_MODE_TEXTUAL":return SignMode.SIGN_MODE_TEXTUAL;case 127:case"SIGN_MODE_LEGACY_AMINO_JSON":return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;case-1:case"UNRECOGNIZED":default:return SignMode.UNRECOGNIZED}}function signModeToJSON(A){switch(A){case SignMode.SIGN_MODE_UNSPECIFIED:return"SIGN_MODE_UNSPECIFIED";case SignMode.SIGN_MODE_DIRECT:return"SIGN_MODE_DIRECT";case SignMode.SIGN_MODE_TEXTUAL:return"SIGN_MODE_TEXTUAL";case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:return"SIGN_MODE_LEGACY_AMINO_JSON";case SignMode.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var globalThis$4=(()=>{if(typeof globalThis$4<"u")return globalThis$4;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();globalThis$4.atob;globalThis$4.btoa;minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function createBaseTx(){return{body:void 0,authInfo:void 0,signatures:[]}}const Tx={encode(A,e=minimal.Writer.create()){A.body!==void 0&&TxBody.encode(A.body,e.uint32(10).fork()).ldelim(),A.authInfo!==void 0&&AuthInfo.encode(A.authInfo,e.uint32(18).fork()).ldelim();for(const t of A.signatures)e.uint32(26).bytes(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseTx();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.body=TxBody.decode(t,t.uint32());break;case 2:n.authInfo=AuthInfo.decode(t,t.uint32());break;case 3:n.signatures.push(t.bytes());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{body:isSet$3(A.body)?TxBody.fromJSON(A.body):void 0,authInfo:isSet$3(A.authInfo)?AuthInfo.fromJSON(A.authInfo):void 0,signatures:Array.isArray(A?.signatures)?A.signatures.map(e=>bytesFromBase64$2(e)):[]}},toJSON(A){const e={};return A.body!==void 0&&(e.body=A.body?TxBody.toJSON(A.body):void 0),A.authInfo!==void 0&&(e.authInfo=A.authInfo?AuthInfo.toJSON(A.authInfo):void 0),A.signatures?e.signatures=A.signatures.map(t=>base64FromBytes$2(t!==void 0?t:new Uint8Array)):e.signatures=[],e},fromPartial(A){const e=createBaseTx();return e.body=A.body!==void 0&&A.body!==null?TxBody.fromPartial(A.body):void 0,e.authInfo=A.authInfo!==void 0&&A.authInfo!==null?AuthInfo.fromPartial(A.authInfo):void 0,e.signatures=A.signatures?.map(t=>t)||[],e}};function createBaseTxRaw(){return{bodyBytes:new Uint8Array,authInfoBytes:new Uint8Array,signatures:[]}}const TxRaw={encode(A,e=minimal.Writer.create()){A.bodyBytes.length!==0&&e.uint32(10).bytes(A.bodyBytes),A.authInfoBytes.length!==0&&e.uint32(18).bytes(A.authInfoBytes);for(const t of A.signatures)e.uint32(26).bytes(t);return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseTxRaw();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.bodyBytes=t.bytes();break;case 2:n.authInfoBytes=t.bytes();break;case 3:n.signatures.push(t.bytes());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{bodyBytes:isSet$3(A.bodyBytes)?bytesFromBase64$2(A.bodyBytes):new Uint8Array,authInfoBytes:isSet$3(A.authInfoBytes)?bytesFromBase64$2(A.authInfoBytes):new Uint8Array,signatures:Array.isArray(A?.signatures)?A.signatures.map(e=>bytesFromBase64$2(e)):[]}},toJSON(A){const e={};return A.bodyBytes!==void 0&&(e.bodyBytes=base64FromBytes$2(A.bodyBytes!==void 0?A.bodyBytes:new Uint8Array)),A.authInfoBytes!==void 0&&(e.authInfoBytes=base64FromBytes$2(A.authInfoBytes!==void 0?A.authInfoBytes:new Uint8Array)),A.signatures?e.signatures=A.signatures.map(t=>base64FromBytes$2(t!==void 0?t:new Uint8Array)):e.signatures=[],e},fromPartial(A){const e=createBaseTxRaw();return e.bodyBytes=A.bodyBytes??new Uint8Array,e.authInfoBytes=A.authInfoBytes??new Uint8Array,e.signatures=A.signatures?.map(t=>t)||[],e}};function createBaseSignDoc(){return{bodyBytes:new Uint8Array,authInfoBytes:new Uint8Array,chainId:"",accountNumber:"0"}}const SignDoc={encode(A,e=minimal.Writer.create()){return A.bodyBytes.length!==0&&e.uint32(10).bytes(A.bodyBytes),A.authInfoBytes.length!==0&&e.uint32(18).bytes(A.authInfoBytes),A.chainId!==""&&e.uint32(26).string(A.chainId),A.accountNumber!=="0"&&e.uint32(32).uint64(A.accountNumber),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSignDoc();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.bodyBytes=t.bytes();break;case 2:n.authInfoBytes=t.bytes();break;case 3:n.chainId=t.string();break;case 4:n.accountNumber=longToString(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{bodyBytes:isSet$3(A.bodyBytes)?bytesFromBase64$2(A.bodyBytes):new Uint8Array,authInfoBytes:isSet$3(A.authInfoBytes)?bytesFromBase64$2(A.authInfoBytes):new Uint8Array,chainId:isSet$3(A.chainId)?String(A.chainId):"",accountNumber:isSet$3(A.accountNumber)?String(A.accountNumber):"0"}},toJSON(A){const e={};return A.bodyBytes!==void 0&&(e.bodyBytes=base64FromBytes$2(A.bodyBytes!==void 0?A.bodyBytes:new Uint8Array)),A.authInfoBytes!==void 0&&(e.authInfoBytes=base64FromBytes$2(A.authInfoBytes!==void 0?A.authInfoBytes:new Uint8Array)),A.chainId!==void 0&&(e.chainId=A.chainId),A.accountNumber!==void 0&&(e.accountNumber=A.accountNumber),e},fromPartial(A){const e=createBaseSignDoc();return e.bodyBytes=A.bodyBytes??new Uint8Array,e.authInfoBytes=A.authInfoBytes??new Uint8Array,e.chainId=A.chainId??"",e.accountNumber=A.accountNumber??"0",e}};function createBaseTxBody(){return{messages:[],memo:"",timeoutHeight:"0",extensionOptions:[],nonCriticalExtensionOptions:[]}}const TxBody={encode(A,e=minimal.Writer.create()){for(const t of A.messages)Any.encode(t,e.uint32(10).fork()).ldelim();A.memo!==""&&e.uint32(18).string(A.memo),A.timeoutHeight!=="0"&&e.uint32(24).uint64(A.timeoutHeight);for(const t of A.extensionOptions)Any.encode(t,e.uint32(8186).fork()).ldelim();for(const t of A.nonCriticalExtensionOptions)Any.encode(t,e.uint32(16378).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseTxBody();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.messages.push(Any.decode(t,t.uint32()));break;case 2:n.memo=t.string();break;case 3:n.timeoutHeight=longToString(t.uint64());break;case 1023:n.extensionOptions.push(Any.decode(t,t.uint32()));break;case 2047:n.nonCriticalExtensionOptions.push(Any.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{messages:Array.isArray(A?.messages)?A.messages.map(e=>Any.fromJSON(e)):[],memo:isSet$3(A.memo)?String(A.memo):"",timeoutHeight:isSet$3(A.timeoutHeight)?String(A.timeoutHeight):"0",extensionOptions:Array.isArray(A?.extensionOptions)?A.extensionOptions.map(e=>Any.fromJSON(e)):[],nonCriticalExtensionOptions:Array.isArray(A?.nonCriticalExtensionOptions)?A.nonCriticalExtensionOptions.map(e=>Any.fromJSON(e)):[]}},toJSON(A){const e={};return A.messages?e.messages=A.messages.map(t=>t?Any.toJSON(t):void 0):e.messages=[],A.memo!==void 0&&(e.memo=A.memo),A.timeoutHeight!==void 0&&(e.timeoutHeight=A.timeoutHeight),A.extensionOptions?e.extensionOptions=A.extensionOptions.map(t=>t?Any.toJSON(t):void 0):e.extensionOptions=[],A.nonCriticalExtensionOptions?e.nonCriticalExtensionOptions=A.nonCriticalExtensionOptions.map(t=>t?Any.toJSON(t):void 0):e.nonCriticalExtensionOptions=[],e},fromPartial(A){const e=createBaseTxBody();return e.messages=A.messages?.map(t=>Any.fromPartial(t))||[],e.memo=A.memo??"",e.timeoutHeight=A.timeoutHeight??"0",e.extensionOptions=A.extensionOptions?.map(t=>Any.fromPartial(t))||[],e.nonCriticalExtensionOptions=A.nonCriticalExtensionOptions?.map(t=>Any.fromPartial(t))||[],e}};function createBaseAuthInfo(){return{signerInfos:[],fee:void 0}}const AuthInfo={encode(A,e=minimal.Writer.create()){for(const t of A.signerInfos)SignerInfo.encode(t,e.uint32(10).fork()).ldelim();return A.fee!==void 0&&Fee.encode(A.fee,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseAuthInfo();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.signerInfos.push(SignerInfo.decode(t,t.uint32()));break;case 2:n.fee=Fee.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{signerInfos:Array.isArray(A?.signerInfos)?A.signerInfos.map(e=>SignerInfo.fromJSON(e)):[],fee:isSet$3(A.fee)?Fee.fromJSON(A.fee):void 0}},toJSON(A){const e={};return A.signerInfos?e.signerInfos=A.signerInfos.map(t=>t?SignerInfo.toJSON(t):void 0):e.signerInfos=[],A.fee!==void 0&&(e.fee=A.fee?Fee.toJSON(A.fee):void 0),e},fromPartial(A){const e=createBaseAuthInfo();return e.signerInfos=A.signerInfos?.map(t=>SignerInfo.fromPartial(t))||[],e.fee=A.fee!==void 0&&A.fee!==null?Fee.fromPartial(A.fee):void 0,e}};function createBaseSignerInfo(){return{publicKey:void 0,modeInfo:void 0,sequence:"0"}}const SignerInfo={encode(A,e=minimal.Writer.create()){return A.publicKey!==void 0&&Any.encode(A.publicKey,e.uint32(10).fork()).ldelim(),A.modeInfo!==void 0&&ModeInfo.encode(A.modeInfo,e.uint32(18).fork()).ldelim(),A.sequence!=="0"&&e.uint32(24).uint64(A.sequence),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSignerInfo();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.publicKey=Any.decode(t,t.uint32());break;case 2:n.modeInfo=ModeInfo.decode(t,t.uint32());break;case 3:n.sequence=longToString(t.uint64());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{publicKey:isSet$3(A.publicKey)?Any.fromJSON(A.publicKey):void 0,modeInfo:isSet$3(A.modeInfo)?ModeInfo.fromJSON(A.modeInfo):void 0,sequence:isSet$3(A.sequence)?String(A.sequence):"0"}},toJSON(A){const e={};return A.publicKey!==void 0&&(e.publicKey=A.publicKey?Any.toJSON(A.publicKey):void 0),A.modeInfo!==void 0&&(e.modeInfo=A.modeInfo?ModeInfo.toJSON(A.modeInfo):void 0),A.sequence!==void 0&&(e.sequence=A.sequence),e},fromPartial(A){const e=createBaseSignerInfo();return e.publicKey=A.publicKey!==void 0&&A.publicKey!==null?Any.fromPartial(A.publicKey):void 0,e.modeInfo=A.modeInfo!==void 0&&A.modeInfo!==null?ModeInfo.fromPartial(A.modeInfo):void 0,e.sequence=A.sequence??"0",e}};function createBaseModeInfo(){return{single:void 0,multi:void 0}}const ModeInfo={encode(A,e=minimal.Writer.create()){return A.single!==void 0&&ModeInfo_Single.encode(A.single,e.uint32(10).fork()).ldelim(),A.multi!==void 0&&ModeInfo_Multi.encode(A.multi,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseModeInfo();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.single=ModeInfo_Single.decode(t,t.uint32());break;case 2:n.multi=ModeInfo_Multi.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{single:isSet$3(A.single)?ModeInfo_Single.fromJSON(A.single):void 0,multi:isSet$3(A.multi)?ModeInfo_Multi.fromJSON(A.multi):void 0}},toJSON(A){const e={};return A.single!==void 0&&(e.single=A.single?ModeInfo_Single.toJSON(A.single):void 0),A.multi!==void 0&&(e.multi=A.multi?ModeInfo_Multi.toJSON(A.multi):void 0),e},fromPartial(A){const e=createBaseModeInfo();return e.single=A.single!==void 0&&A.single!==null?ModeInfo_Single.fromPartial(A.single):void 0,e.multi=A.multi!==void 0&&A.multi!==null?ModeInfo_Multi.fromPartial(A.multi):void 0,e}};function createBaseModeInfo_Single(){return{mode:0}}const ModeInfo_Single={encode(A,e=minimal.Writer.create()){return A.mode!==0&&e.uint32(8).int32(A.mode),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseModeInfo_Single();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.mode=t.int32();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{mode:isSet$3(A.mode)?signModeFromJSON(A.mode):0}},toJSON(A){const e={};return A.mode!==void 0&&(e.mode=signModeToJSON(A.mode)),e},fromPartial(A){const e=createBaseModeInfo_Single();return e.mode=A.mode??0,e}};function createBaseModeInfo_Multi(){return{bitarray:void 0,modeInfos:[]}}const ModeInfo_Multi={encode(A,e=minimal.Writer.create()){A.bitarray!==void 0&&CompactBitArray.encode(A.bitarray,e.uint32(10).fork()).ldelim();for(const t of A.modeInfos)ModeInfo.encode(t,e.uint32(18).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseModeInfo_Multi();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.bitarray=CompactBitArray.decode(t,t.uint32());break;case 2:n.modeInfos.push(ModeInfo.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{bitarray:isSet$3(A.bitarray)?CompactBitArray.fromJSON(A.bitarray):void 0,modeInfos:Array.isArray(A?.modeInfos)?A.modeInfos.map(e=>ModeInfo.fromJSON(e)):[]}},toJSON(A){const e={};return A.bitarray!==void 0&&(e.bitarray=A.bitarray?CompactBitArray.toJSON(A.bitarray):void 0),A.modeInfos?e.modeInfos=A.modeInfos.map(t=>t?ModeInfo.toJSON(t):void 0):e.modeInfos=[],e},fromPartial(A){const e=createBaseModeInfo_Multi();return e.bitarray=A.bitarray!==void 0&&A.bitarray!==null?CompactBitArray.fromPartial(A.bitarray):void 0,e.modeInfos=A.modeInfos?.map(t=>ModeInfo.fromPartial(t))||[],e}};function createBaseFee(){return{amount:[],gasLimit:"0",payer:"",granter:""}}const Fee={encode(A,e=minimal.Writer.create()){for(const t of A.amount)Coin.encode(t,e.uint32(10).fork()).ldelim();return A.gasLimit!=="0"&&e.uint32(16).uint64(A.gasLimit),A.payer!==""&&e.uint32(26).string(A.payer),A.granter!==""&&e.uint32(34).string(A.granter),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseFee();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.amount.push(Coin.decode(t,t.uint32()));break;case 2:n.gasLimit=longToString(t.uint64());break;case 3:n.payer=t.string();break;case 4:n.granter=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{amount:Array.isArray(A?.amount)?A.amount.map(e=>Coin.fromJSON(e)):[],gasLimit:isSet$3(A.gasLimit)?String(A.gasLimit):"0",payer:isSet$3(A.payer)?String(A.payer):"",granter:isSet$3(A.granter)?String(A.granter):""}},toJSON(A){const e={};return A.amount?e.amount=A.amount.map(t=>t?Coin.toJSON(t):void 0):e.amount=[],A.gasLimit!==void 0&&(e.gasLimit=A.gasLimit),A.payer!==void 0&&(e.payer=A.payer),A.granter!==void 0&&(e.granter=A.granter),e},fromPartial(A){const e=createBaseFee();return e.amount=A.amount?.map(t=>Coin.fromPartial(t))||[],e.gasLimit=A.gasLimit??"0",e.payer=A.payer??"",e.granter=A.granter??"",e}};var globalThis$3=(()=>{if(typeof globalThis$3<"u")return globalThis$3;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$2=globalThis$3.atob||(A=>globalThis$3.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$2(A){const e=atob$2(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$2=globalThis$3.btoa||(A=>globalThis$3.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$2(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$2(e.join(""))}function longToString(A){return A.toString()}minimal.util.Long!==long&&(minimal.util.Long=long,minimal.configure());function isSet$3(A){return A!=null}var OrderBy;(function(A){A[A.ORDER_BY_UNSPECIFIED=0]="ORDER_BY_UNSPECIFIED",A[A.ORDER_BY_ASC=1]="ORDER_BY_ASC",A[A.ORDER_BY_DESC=2]="ORDER_BY_DESC",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(OrderBy||(OrderBy={}));function orderByFromJSON(A){switch(A){case 0:case"ORDER_BY_UNSPECIFIED":return OrderBy.ORDER_BY_UNSPECIFIED;case 1:case"ORDER_BY_ASC":return OrderBy.ORDER_BY_ASC;case 2:case"ORDER_BY_DESC":return OrderBy.ORDER_BY_DESC;case-1:case"UNRECOGNIZED":default:return OrderBy.UNRECOGNIZED}}function orderByToJSON(A){switch(A){case OrderBy.ORDER_BY_UNSPECIFIED:return"ORDER_BY_UNSPECIFIED";case OrderBy.ORDER_BY_ASC:return"ORDER_BY_ASC";case OrderBy.ORDER_BY_DESC:return"ORDER_BY_DESC";case OrderBy.UNRECOGNIZED:default:return"UNRECOGNIZED"}}var BroadcastMode;(function(A){A[A.BROADCAST_MODE_UNSPECIFIED=0]="BROADCAST_MODE_UNSPECIFIED",A[A.BROADCAST_MODE_BLOCK=1]="BROADCAST_MODE_BLOCK",A[A.BROADCAST_MODE_SYNC=2]="BROADCAST_MODE_SYNC",A[A.BROADCAST_MODE_ASYNC=3]="BROADCAST_MODE_ASYNC",A[A.UNRECOGNIZED=-1]="UNRECOGNIZED"})(BroadcastMode||(BroadcastMode={}));function broadcastModeFromJSON(A){switch(A){case 0:case"BROADCAST_MODE_UNSPECIFIED":return BroadcastMode.BROADCAST_MODE_UNSPECIFIED;case 1:case"BROADCAST_MODE_BLOCK":return BroadcastMode.BROADCAST_MODE_BLOCK;case 2:case"BROADCAST_MODE_SYNC":return BroadcastMode.BROADCAST_MODE_SYNC;case 3:case"BROADCAST_MODE_ASYNC":return BroadcastMode.BROADCAST_MODE_ASYNC;case-1:case"UNRECOGNIZED":default:return BroadcastMode.UNRECOGNIZED}}function broadcastModeToJSON(A){switch(A){case BroadcastMode.BROADCAST_MODE_UNSPECIFIED:return"BROADCAST_MODE_UNSPECIFIED";case BroadcastMode.BROADCAST_MODE_BLOCK:return"BROADCAST_MODE_BLOCK";case BroadcastMode.BROADCAST_MODE_SYNC:return"BROADCAST_MODE_SYNC";case BroadcastMode.BROADCAST_MODE_ASYNC:return"BROADCAST_MODE_ASYNC";case BroadcastMode.UNRECOGNIZED:default:return"UNRECOGNIZED"}}function createBaseGetTxsEventRequest(){return{events:[],pagination:void 0,orderBy:0}}const GetTxsEventRequest={encode(A,e=minimal.Writer.create()){for(const t of A.events)e.uint32(10).string(t);return A.pagination!==void 0&&PageRequest.encode(A.pagination,e.uint32(18).fork()).ldelim(),A.orderBy!==0&&e.uint32(24).int32(A.orderBy),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGetTxsEventRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.events.push(t.string());break;case 2:n.pagination=PageRequest.decode(t,t.uint32());break;case 3:n.orderBy=t.int32();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{events:Array.isArray(A?.events)?A.events.map(e=>String(e)):[],pagination:isSet$2(A.pagination)?PageRequest.fromJSON(A.pagination):void 0,orderBy:isSet$2(A.orderBy)?orderByFromJSON(A.orderBy):0}},toJSON(A){const e={};return A.events?e.events=A.events.map(t=>t):e.events=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageRequest.toJSON(A.pagination):void 0),A.orderBy!==void 0&&(e.orderBy=orderByToJSON(A.orderBy)),e},fromPartial(A){const e=createBaseGetTxsEventRequest();return e.events=A.events?.map(t=>t)||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageRequest.fromPartial(A.pagination):void 0,e.orderBy=A.orderBy??0,e}};function createBaseGetTxsEventResponse(){return{txs:[],txResponses:[],pagination:void 0}}const GetTxsEventResponse={encode(A,e=minimal.Writer.create()){for(const t of A.txs)Tx.encode(t,e.uint32(10).fork()).ldelim();for(const t of A.txResponses)TxResponse.encode(t,e.uint32(18).fork()).ldelim();return A.pagination!==void 0&&PageResponse.encode(A.pagination,e.uint32(26).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGetTxsEventResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.txs.push(Tx.decode(t,t.uint32()));break;case 2:n.txResponses.push(TxResponse.decode(t,t.uint32()));break;case 3:n.pagination=PageResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{txs:Array.isArray(A?.txs)?A.txs.map(e=>Tx.fromJSON(e)):[],txResponses:Array.isArray(A?.txResponses)?A.txResponses.map(e=>TxResponse.fromJSON(e)):[],pagination:isSet$2(A.pagination)?PageResponse.fromJSON(A.pagination):void 0}},toJSON(A){const e={};return A.txs?e.txs=A.txs.map(t=>t?Tx.toJSON(t):void 0):e.txs=[],A.txResponses?e.txResponses=A.txResponses.map(t=>t?TxResponse.toJSON(t):void 0):e.txResponses=[],A.pagination!==void 0&&(e.pagination=A.pagination?PageResponse.toJSON(A.pagination):void 0),e},fromPartial(A){const e=createBaseGetTxsEventResponse();return e.txs=A.txs?.map(t=>Tx.fromPartial(t))||[],e.txResponses=A.txResponses?.map(t=>TxResponse.fromPartial(t))||[],e.pagination=A.pagination!==void 0&&A.pagination!==null?PageResponse.fromPartial(A.pagination):void 0,e}};function createBaseBroadcastTxRequest(){return{txBytes:new Uint8Array,mode:0}}const BroadcastTxRequest={encode(A,e=minimal.Writer.create()){return A.txBytes.length!==0&&e.uint32(10).bytes(A.txBytes),A.mode!==0&&e.uint32(16).int32(A.mode),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseBroadcastTxRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.txBytes=t.bytes();break;case 2:n.mode=t.int32();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{txBytes:isSet$2(A.txBytes)?bytesFromBase64$1(A.txBytes):new Uint8Array,mode:isSet$2(A.mode)?broadcastModeFromJSON(A.mode):0}},toJSON(A){const e={};return A.txBytes!==void 0&&(e.txBytes=base64FromBytes$1(A.txBytes!==void 0?A.txBytes:new Uint8Array)),A.mode!==void 0&&(e.mode=broadcastModeToJSON(A.mode)),e},fromPartial(A){const e=createBaseBroadcastTxRequest();return e.txBytes=A.txBytes??new Uint8Array,e.mode=A.mode??0,e}};function createBaseBroadcastTxResponse(){return{txResponse:void 0}}const BroadcastTxResponse={encode(A,e=minimal.Writer.create()){return A.txResponse!==void 0&&TxResponse.encode(A.txResponse,e.uint32(10).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseBroadcastTxResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.txResponse=TxResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{txResponse:isSet$2(A.txResponse)?TxResponse.fromJSON(A.txResponse):void 0}},toJSON(A){const e={};return A.txResponse!==void 0&&(e.txResponse=A.txResponse?TxResponse.toJSON(A.txResponse):void 0),e},fromPartial(A){const e=createBaseBroadcastTxResponse();return e.txResponse=A.txResponse!==void 0&&A.txResponse!==null?TxResponse.fromPartial(A.txResponse):void 0,e}};function createBaseSimulateRequest(){return{tx:void 0,txBytes:new Uint8Array}}const SimulateRequest={encode(A,e=minimal.Writer.create()){return A.tx!==void 0&&Tx.encode(A.tx,e.uint32(10).fork()).ldelim(),A.txBytes.length!==0&&e.uint32(18).bytes(A.txBytes),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSimulateRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.tx=Tx.decode(t,t.uint32());break;case 2:n.txBytes=t.bytes();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{tx:isSet$2(A.tx)?Tx.fromJSON(A.tx):void 0,txBytes:isSet$2(A.txBytes)?bytesFromBase64$1(A.txBytes):new Uint8Array}},toJSON(A){const e={};return A.tx!==void 0&&(e.tx=A.tx?Tx.toJSON(A.tx):void 0),A.txBytes!==void 0&&(e.txBytes=base64FromBytes$1(A.txBytes!==void 0?A.txBytes:new Uint8Array)),e},fromPartial(A){const e=createBaseSimulateRequest();return e.tx=A.tx!==void 0&&A.tx!==null?Tx.fromPartial(A.tx):void 0,e.txBytes=A.txBytes??new Uint8Array,e}};function createBaseSimulateResponse(){return{gasInfo:void 0,result:void 0}}const SimulateResponse={encode(A,e=minimal.Writer.create()){return A.gasInfo!==void 0&&GasInfo.encode(A.gasInfo,e.uint32(10).fork()).ldelim(),A.result!==void 0&&Result.encode(A.result,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseSimulateResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.gasInfo=GasInfo.decode(t,t.uint32());break;case 2:n.result=Result.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{gasInfo:isSet$2(A.gasInfo)?GasInfo.fromJSON(A.gasInfo):void 0,result:isSet$2(A.result)?Result.fromJSON(A.result):void 0}},toJSON(A){const e={};return A.gasInfo!==void 0&&(e.gasInfo=A.gasInfo?GasInfo.toJSON(A.gasInfo):void 0),A.result!==void 0&&(e.result=A.result?Result.toJSON(A.result):void 0),e},fromPartial(A){const e=createBaseSimulateResponse();return e.gasInfo=A.gasInfo!==void 0&&A.gasInfo!==null?GasInfo.fromPartial(A.gasInfo):void 0,e.result=A.result!==void 0&&A.result!==null?Result.fromPartial(A.result):void 0,e}};function createBaseGetTxRequest(){return{hash:""}}const GetTxRequest={encode(A,e=minimal.Writer.create()){return A.hash!==""&&e.uint32(10).string(A.hash),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGetTxRequest();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.hash=t.string();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{hash:isSet$2(A.hash)?String(A.hash):""}},toJSON(A){const e={};return A.hash!==void 0&&(e.hash=A.hash),e},fromPartial(A){const e=createBaseGetTxRequest();return e.hash=A.hash??"",e}};function createBaseGetTxResponse(){return{tx:void 0,txResponse:void 0}}const GetTxResponse={encode(A,e=minimal.Writer.create()){return A.tx!==void 0&&Tx.encode(A.tx,e.uint32(10).fork()).ldelim(),A.txResponse!==void 0&&TxResponse.encode(A.txResponse,e.uint32(18).fork()).ldelim(),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseGetTxResponse();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.tx=Tx.decode(t,t.uint32());break;case 2:n.txResponse=TxResponse.decode(t,t.uint32());break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{tx:isSet$2(A.tx)?Tx.fromJSON(A.tx):void 0,txResponse:isSet$2(A.txResponse)?TxResponse.fromJSON(A.txResponse):void 0}},toJSON(A){const e={};return A.tx!==void 0&&(e.tx=A.tx?Tx.toJSON(A.tx):void 0),A.txResponse!==void 0&&(e.txResponse=A.txResponse?TxResponse.toJSON(A.txResponse):void 0),e},fromPartial(A){const e=createBaseGetTxResponse();return e.tx=A.tx!==void 0&&A.tx!==null?Tx.fromPartial(A.tx):void 0,e.txResponse=A.txResponse!==void 0&&A.txResponse!==null?TxResponse.fromPartial(A.txResponse):void 0,e}};class ServiceClientImpl{constructor(e){QA(this,"rpc");this.rpc=e,this.simulate=this.simulate.bind(this),this.getTx=this.getTx.bind(this),this.broadcastTx=this.broadcastTx.bind(this),this.getTxsEvent=this.getTxsEvent.bind(this)}simulate(e,t){return this.rpc.unary(ServiceSimulateDesc,SimulateRequest.fromPartial(e),t)}getTx(e,t){return this.rpc.unary(ServiceGetTxDesc,GetTxRequest.fromPartial(e),t)}broadcastTx(e,t){return this.rpc.unary(ServiceBroadcastTxDesc,BroadcastTxRequest.fromPartial(e),t)}getTxsEvent(e,t){return this.rpc.unary(ServiceGetTxsEventDesc,GetTxsEventRequest.fromPartial(e),t)}}const ServiceDesc={serviceName:"cosmos.tx.v1beta1.Service"},ServiceSimulateDesc={methodName:"Simulate",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return SimulateRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...SimulateResponse.decode(A),toObject(){return this}}}}},ServiceGetTxDesc={methodName:"GetTx",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetTxRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetTxResponse.decode(A),toObject(){return this}}}}},ServiceBroadcastTxDesc={methodName:"BroadcastTx",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return BroadcastTxRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...BroadcastTxResponse.decode(A),toObject(){return this}}}}},ServiceGetTxsEventDesc={methodName:"GetTxsEvent",service:ServiceDesc,requestStream:!1,responseStream:!1,requestType:{serializeBinary(){return GetTxsEventRequest.encode(this).finish()}},responseType:{deserializeBinary(A){return{...GetTxsEventResponse.decode(A),toObject(){return this}}}}};var globalThis$2=(()=>{if(typeof globalThis$2<"u")return globalThis$2;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob$1=globalThis$2.atob||(A=>globalThis$2.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64$1(A){const e=atob$1(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa$1=globalThis$2.btoa||(A=>globalThis$2.Buffer.from(A,"binary").toString("base64"));function base64FromBytes$1(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa$1(e.join(""))}function isSet$2(A){return A!=null}function createBaseMsgSend(){return{fromAddress:"",toAddress:"",amount:[]}}const MsgSend={encode(A,e=minimal.Writer.create()){A.fromAddress!==""&&e.uint32(10).string(A.fromAddress),A.toAddress!==""&&e.uint32(18).string(A.toAddress);for(const t of A.amount)Coin.encode(t,e.uint32(26).fork()).ldelim();return e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBaseMsgSend();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.fromAddress=t.string();break;case 2:n.toAddress=t.string();break;case 3:n.amount.push(Coin.decode(t,t.uint32()));break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{fromAddress:isSet$1(A.fromAddress)?String(A.fromAddress):"",toAddress:isSet$1(A.toAddress)?String(A.toAddress):"",amount:Array.isArray(A?.amount)?A.amount.map(e=>Coin.fromJSON(e)):[]}},toJSON(A){const e={};return A.fromAddress!==void 0&&(e.fromAddress=A.fromAddress),A.toAddress!==void 0&&(e.toAddress=A.toAddress),A.amount?e.amount=A.amount.map(t=>t?Coin.toJSON(t):void 0):e.amount=[],e},fromPartial(A){const e=createBaseMsgSend();return e.fromAddress=A.fromAddress??"",e.toAddress=A.toAddress??"",e.amount=A.amount?.map(t=>Coin.fromPartial(t))||[],e}};function isSet$1(A){return A!=null}function createBasePubKey(){return{key:new Uint8Array}}const PubKey={encode(A,e=minimal.Writer.create()){return A.key.length!==0&&e.uint32(10).bytes(A.key),e},decode(A,e){const t=A instanceof minimal.Reader?A:new minimal.Reader(A);let i=e===void 0?t.len:t.pos+e;const n=createBasePubKey();for(;t.pos<i;){const g=t.uint32();switch(g>>>3){case 1:n.key=t.bytes();break;default:t.skipType(g&7);break}}return n},fromJSON(A){return{key:isSet(A.key)?bytesFromBase64(A.key):new Uint8Array}},toJSON(A){const e={};return A.key!==void 0&&(e.key=base64FromBytes(A.key!==void 0?A.key:new Uint8Array)),e},fromPartial(A){const e=createBasePubKey();return e.key=A.key??new Uint8Array,e}};var globalThis$1=(()=>{if(typeof globalThis$1<"u")return globalThis$1;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();const atob=globalThis$1.atob||(A=>globalThis$1.Buffer.from(A,"base64").toString("binary"));function bytesFromBase64(A){const e=atob(A),t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}const btoa=globalThis$1.btoa||(A=>globalThis$1.Buffer.from(A,"binary").toString("base64"));function base64FromBytes(A){const e=[];return A.forEach(t=>{e.push(String.fromCharCode(t))}),btoa(e.join(""))}function isSet(A){return A!=null}async function fetch_derived(A,e,t=256,i=new Uint8Array(0)){return new Uint8Array(await crypto.subtle.deriveBits({name:"HKDF",hash:"SHA-256",salt:e,info:i},A,t))}async function generate_pair(A,e,t=256){const i=crypto.getRandomValues(new Uint8Array(t>>3)),n=await crypto.subtle.importKey("raw",i,{name:"HKDF",hash:"SHA-256"},!1,["deriveBits"]);zero_out(i);const g=new SensitiveBytes(await fetch_derived(n,e,t)),I=new SensitiveBytes(await A()),o=I.xor(g);return I.wipe(),g.wipe(),[n,o]}const hm_privates$1=new Map;class RuntimeKey{static async create(e,t=256){const i=new RuntimeKey,n=hm_privates$1.get(i),[g,I]=await generate_pair(e,n.atu8_salt,t);return Object.assign(n,{dk_base:g,kn_xor:I}),i}static async createRaw(e,t=256){return RuntimeKey.create(()=>e,t)}constructor(){const e=crypto.getRandomValues(new Uint8Array(32));hm_privates$1.set(this,{atu8_salt:e,kn_xor:null,dk_base:null})}async access(e){const t=hm_privates$1.get(this),{dk_base:i,atu8_salt:n,kn_xor:g}=t;let I,o;const[a,r]=await generate_pair(()=>new Promise(async s=>{const B=new SensitiveBytes(await fetch_derived(i,n,256)),C=g.xor(B);B.wipe();try{I=e(C.data)}catch(l){o=l}s(C.data),queueMicrotask(()=>{C.wipe()})}),n);if(t.dk_base=a,t.kn_xor=r,o)throw o;return I}destroy(){const{atu8_salt:e,kn_xor:t}=hm_privates$1.get(this);t?.wipe(),zero_out(e),hm_privates$1.delete(this)}}class SensitiveBigUint extends SensitiveBytes{static random(e){return new SensitiveBigUint(crypto.getRandomValues(new Uint8Array(e)))}static empty(e=0){return new SensitiveBigUint(new Uint8Array(e))}static max(e,t){return e.gte(t)?e.clone():t.clone()}static min(e,t){return e.lte(t)?e.clone():t.clone()}clone(){return new SensitiveBigUint(Uint8Array.from(this.data))}compare(e){const t=this.data,i=t.byteLength,n=e.data;if(n.byteLength!==i)throw this.wipe(),e.wipe(),new Error("Refusing to compare buffers of different byte length");for(let I=0;I<i;I++){const o=t[I],a=n[I];if(o!==a)return o>a?1:-1}return 0}eq(e){return this.compare(e)===0}gt(e){return this.compare(e)>0}gte(e){return this.compare(e)>=0}lt(e){return this.compare(e)<0}lte(e){return this.compare(e)<=0}diff(e){const t=this.data,i=t.byteLength,n=this.compare(e);if(n<0)return e.diff(this);if(n===0)return SensitiveBigUint.empty(i);const g=e.data,I=new Uint8Array(i);let o=0;for(let a=i-1;a>=0;a--){let r=t[a]-g[a]-o;r<0?(r+=256,o=1):o=0,I[a]=r}return new SensitiveBigUint(I)}mod(e){const i=this.data.byteLength;let n=this.compare(e);if(n<0)return this.clone();if(n===0)return SensitiveBigUint.empty(i);e.data.byteLength;let I=this.clone();for(;;){const o=I.diff(e);if(I.wipe(),n=o.compare(e),n<=0)return o;I=o}}modulus(e){const i=this.data.byteLength;let n=this.compare(e);if(n<0)return this.clone();if(n===0)return SensitiveBigUint.empty(i);e.data.byteLength}}const KN_ZERO_32=SensitiveBigUint.empty(32),KN_CURVE_N_SECP256K1=new SensitiveBigUint(hex_to_buffer("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")),NI_MINIMUM_BORDER=64,KN_DANGER_LO=new SensitiveBigUint(hex_to_buffer(((1<<NI_MINIMUM_BORDER%8).toString(16)+"00".repeat(NI_MINIMUM_BORDER>>>3)).padStart(64,"0")));KN_CURVE_N_SECP256K1.diff(KN_DANGER_LO);let y_secp256k1,a_wait_secp256k1=null;async function init_secp256k1(){if(y_secp256k1)return y_secp256k1;if(a_wait_secp256k1)return new Promise(e=>{a_wait_secp256k1.push(e)});a_wait_secp256k1=[],y_secp256k1=await instantiateSecp256k1(crypto.getRandomValues(new Uint8Array(32)));const A=a_wait_secp256k1.slice();a_wait_secp256k1=null;for(const e of A)e(y_secp256k1);return y_secp256k1}const hm_privates=new Map;class Secp256k1Key{constructor(e){QA(this,"_b_init",!1);this._y_secp256k1=e}static withinCurve(e){return KN_ZERO_32.lt(e)&&KN_CURVE_N_SECP256K1.gt(e)}static async verify(e,t,i){y_secp256k1||await init_secp256k1();const n=await sha256$1(t);return y_secp256k1.verifySignatureCompactLowS(e,i,n)}static async generatePrivateKey(e=!1){y_secp256k1||await init_secp256k1();const t=await RuntimeKey.create(()=>{let i;for(;!y_secp256k1.validatePrivateKey(i=crypto.getRandomValues(new Uint8Array(32))););return i});return[t,await Secp256k1Key.import(t,e)]}static uncompressPublicKey(e){return y_secp256k1.uncompressPublicKey(e)}static async import(e,t=!1){return y_secp256k1||await init_secp256k1(),await new Secp256k1Key(y_secp256k1).import(e,t)}async import(e,t=!1){const i=this._y_secp256k1;await e.access(I=>{if(!this._y_secp256k1.validatePrivateKey(I))throw new Error("Failed to validate secp256k1 private key");hm_privates.set(this,{kk_sk:e,atu8_pk33:i.derivePublicKeyCompressed(I),atu8_pk65:i.derivePublicKeyUncompressed(I),b_exportable:t})});const{atu8_pk33:n,atu8_pk65:g}=hm_privates.get(this);if(!i.validatePublicKey(n))throw new Error("Failed to validate secp256k1 compressed public key");if(!i.validatePublicKey(g))throw new Error("Failed to validate secp256k1 uncompressed public key");return this._b_init=!0,this}exportPublicKey(e=!1){const{atu8_pk33:t,atu8_pk65:i,b_exportable:n}=hm_privates.get(this);if(n===!0)return e?i:t;throw new Error("Public key is not exportable")}async sign(e,t=!1){const i=await sha256$1(e),{kk_sk:n}=hm_privates.get(this);return await n.access(g=>t?this._y_secp256k1.signMessageHashCompact(g,i,crypto.getRandomValues(new Uint8Array(32))):this._y_secp256k1.signMessageHashCompact(g,i))}async verify(e,t){const i=await sha256$1(t),{atu8_pk65:n}=hm_privates.get(this);return this._y_secp256k1.verifySignatureCompactLowS(e,n,i)}async ecdh(e){const{kk_sk:t}=hm_privates.get(this);return await t.access(i=>this._y_secp256k1.ecdh(i,e))}add(e){const{kk_sk:t}=hm_privates.get(this);return t.access(i=>this._y_secp256k1.addTweakPrivateKey(i,e))}}const Secrets=create_store_class({store:SI_STORE_SECRETS,extension:"dict",class:class ee extends WritableStoreDict{static pathFrom(e){return`/secret.${e.type}/uuid.${e.uuid}`}async put(e){const t=ee.pathFrom(e);return this._w_cache[t]=e,await this.save(),t}}}),Accounts=create_store_class({store:SI_STORE_ACCOUNTS,extension:"map",class:class LA extends WritableStoreMap{static pathFor(e,t){return`/family.${e}/account.${t.replace(/:/g,"+")}`}static pathFrom(e){return LA.pathFor(e.family,e.pubkey)}static get(e,t){return Accounts.open(i=>i.get(e,t))}get(e,t){const i=LA.pathFor(e,t);return this._w_cache[i]??null}async put(e){const t=LA.pathFrom(e);return this._w_cache[t]=e,await this.save(),t}}});var isNumeric=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,mathceil=Math.ceil,mathfloor=Math.floor,bignumberError="[BigNumber Error] ",tooManyDigits=bignumberError+"Number primitive has more than 15 significant digits: ",BASE=1e14,LOG_BASE=14,MAX_SAFE_INTEGER=9007199254740991,POWS_TEN=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],SQRT_BASE=1e7,MAX=1e9;function clone(A){var e,t,i,n=u.prototype={constructor:u,toString:null,valueOf:null},g=new u(1),I=20,o=4,a=-7,r=21,s=-1e7,B=1e7,C=!1,l=1,c=0,Q={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"\xA0",suffix:""},E="0123456789abcdefghijklmnopqrstuvwxyz",f=!0;function u(d,y){var w,k,D,m,F,_,N,b,U=this;if(!(U instanceof u))return new u(d,y);if(y==null){if(d&&d._isBigNumber===!0){U.s=d.s,!d.c||d.e>B?U.c=U.e=null:d.e<s?U.c=[U.e=0]:(U.e=d.e,U.c=d.c.slice());return}if((_=typeof d=="number")&&d*0==0){if(U.s=1/d<0?(d=-d,-1):1,d===~~d){for(m=0,F=d;F>=10;F/=10,m++);m>B?U.c=U.e=null:(U.e=m,U.c=[d]);return}b=String(d)}else{if(!isNumeric.test(b=String(d)))return i(U,b,_);U.s=b.charCodeAt(0)==45?(b=b.slice(1),-1):1}(m=b.indexOf("."))>-1&&(b=b.replace(".","")),(F=b.search(/e/i))>0?(m<0&&(m=F),m+=+b.slice(F+1),b=b.substring(0,F)):m<0&&(m=b.length)}else{if(intCheck(y,2,E.length,"Base"),y==10&&f)return U=new u(d),H(U,I+U.e+1,o);if(b=String(d),_=typeof d=="number"){if(d*0!=0)return i(U,b,_,y);if(U.s=1/d<0?(b=b.slice(1),-1):1,u.DEBUG&&b.replace(/^0\.0*|\./,"").length>15)throw Error(tooManyDigits+d)}else U.s=b.charCodeAt(0)===45?(b=b.slice(1),-1):1;for(w=E.slice(0,y),m=F=0,N=b.length;F<N;F++)if(w.indexOf(k=b.charAt(F))<0){if(k=="."){if(F>m){m=N;continue}}else if(!D&&(b==b.toUpperCase()&&(b=b.toLowerCase())||b==b.toLowerCase()&&(b=b.toUpperCase()))){D=!0,F=-1,m=0;continue}return i(U,String(d),_,y)}_=!1,b=t(b,y,10,U.s),(m=b.indexOf("."))>-1?b=b.replace(".",""):m=b.length}for(F=0;b.charCodeAt(F)===48;F++);for(N=b.length;b.charCodeAt(--N)===48;);if(b=b.slice(F,++N)){if(N-=F,_&&u.DEBUG&&N>15&&(d>MAX_SAFE_INTEGER||d!==mathfloor(d)))throw Error(tooManyDigits+U.s*d);if((m=m-F-1)>B)U.c=U.e=null;else if(m<s)U.c=[U.e=0];else{if(U.e=m,U.c=[],F=(m+1)%LOG_BASE,m<0&&(F+=LOG_BASE),F<N){for(F&&U.c.push(+b.slice(0,F)),N-=LOG_BASE;F<N;)U.c.push(+b.slice(F,F+=LOG_BASE));F=LOG_BASE-(b=b.slice(F)).length}else F-=N;for(;F--;b+="0");U.c.push(+b)}}else U.c=[U.e=0]}u.clone=clone,u.ROUND_UP=0,u.ROUND_DOWN=1,u.ROUND_CEIL=2,u.ROUND_FLOOR=3,u.ROUND_HALF_UP=4,u.ROUND_HALF_DOWN=5,u.ROUND_HALF_EVEN=6,u.ROUND_HALF_CEIL=7,u.ROUND_HALF_FLOOR=8,u.EUCLID=9,u.config=u.set=function(d){var y,w;if(d!=null)if(typeof d=="object"){if(d.hasOwnProperty(y="DECIMAL_PLACES")&&(w=d[y],intCheck(w,0,MAX,y),I=w),d.hasOwnProperty(y="ROUNDING_MODE")&&(w=d[y],intCheck(w,0,8,y),o=w),d.hasOwnProperty(y="EXPONENTIAL_AT")&&(w=d[y],w&&w.pop?(intCheck(w[0],-MAX,0,y),intCheck(w[1],0,MAX,y),a=w[0],r=w[1]):(intCheck(w,-MAX,MAX,y),a=-(r=w<0?-w:w))),d.hasOwnProperty(y="RANGE"))if(w=d[y],w&&w.pop)intCheck(w[0],-MAX,-1,y),intCheck(w[1],1,MAX,y),s=w[0],B=w[1];else if(intCheck(w,-MAX,MAX,y),w)s=-(B=w<0?-w:w);else throw Error(bignumberError+y+" cannot be zero: "+w);if(d.hasOwnProperty(y="CRYPTO"))if(w=d[y],w===!!w)if(w)if(typeof crypto<"u"&&crypto&&(crypto.getRandomValues||crypto.randomBytes))C=w;else throw C=!w,Error(bignumberError+"crypto unavailable");else C=w;else throw Error(bignumberError+y+" not true or false: "+w);if(d.hasOwnProperty(y="MODULO_MODE")&&(w=d[y],intCheck(w,0,9,y),l=w),d.hasOwnProperty(y="POW_PRECISION")&&(w=d[y],intCheck(w,0,MAX,y),c=w),d.hasOwnProperty(y="FORMAT"))if(w=d[y],typeof w=="object")Q=w;else throw Error(bignumberError+y+" not an object: "+w);if(d.hasOwnProperty(y="ALPHABET"))if(w=d[y],typeof w=="string"&&!/^.?$|[+\-.\s]|(.).*\1/.test(w))f=w.slice(0,10)=="0123456789",E=w;else throw Error(bignumberError+y+" invalid: "+w)}else throw Error(bignumberError+"Object expected: "+d);return{DECIMAL_PLACES:I,ROUNDING_MODE:o,EXPONENTIAL_AT:[a,r],RANGE:[s,B],CRYPTO:C,MODULO_MODE:l,POW_PRECISION:c,FORMAT:Q,ALPHABET:E}},u.isBigNumber=function(d){if(!d||d._isBigNumber!==!0)return!1;if(!u.DEBUG)return!0;var y,w,k=d.c,D=d.e,m=d.s;A:if({}.toString.call(k)=="[object Array]"){if((m===1||m===-1)&&D>=-MAX&&D<=MAX&&D===mathfloor(D)){if(k[0]===0){if(D===0&&k.length===1)return!0;break A}if(y=(D+1)%LOG_BASE,y<1&&(y+=LOG_BASE),String(k[0]).length==y){for(y=0;y<k.length;y++)if(w=k[y],w<0||w>=BASE||w!==mathfloor(w))break A;if(w!==0)return!0}}}else if(k===null&&D===null&&(m===null||m===1||m===-1))return!0;throw Error(bignumberError+"Invalid BigNumber: "+d)},u.maximum=u.max=function(){return p(arguments,n.lt)},u.minimum=u.min=function(){return p(arguments,n.gt)},u.random=function(){var d=9007199254740992,y=Math.random()*d&2097151?function(){return mathfloor(Math.random()*d)}:function(){return(Math.random()*1073741824|0)*8388608+(Math.random()*8388608|0)};return function(w){var k,D,m,F,_,N=0,b=[],U=new u(g);if(w==null?w=I:intCheck(w,0,MAX),F=mathceil(w/LOG_BASE),C)if(crypto.getRandomValues){for(k=crypto.getRandomValues(new Uint32Array(F*=2));N<F;)_=k[N]*131072+(k[N+1]>>>11),_>=9e15?(D=crypto.getRandomValues(new Uint32Array(2)),k[N]=D[0],k[N+1]=D[1]):(b.push(_%1e14),N+=2);N=F/2}else if(crypto.randomBytes){for(k=crypto.randomBytes(F*=7);N<F;)_=(k[N]&31)*281474976710656+k[N+1]*1099511627776+k[N+2]*4294967296+k[N+3]*16777216+(k[N+4]<<16)+(k[N+5]<<8)+k[N+6],_>=9e15?crypto.randomBytes(7).copy(k,N):(b.push(_%1e14),N+=7);N=F/7}else throw C=!1,Error(bignumberError+"crypto unavailable");if(!C)for(;N<F;)_=y(),_<9e15&&(b[N++]=_%1e14);for(F=b[--N],w%=LOG_BASE,F&&w&&(_=POWS_TEN[LOG_BASE-w],b[N]=mathfloor(F/_)*_);b[N]===0;b.pop(),N--);if(N<0)b=[m=0];else{for(m=-1;b[0]===0;b.splice(0,1),m-=LOG_BASE);for(N=1,_=b[0];_>=10;_/=10,N++);N<LOG_BASE&&(m-=LOG_BASE-N)}return U.e=m,U.c=b,U}}(),u.sum=function(){for(var d=1,y=arguments,w=new u(y[0]);d<y.length;)w=w.plus(y[d++]);return w},t=function(){var d="0123456789";function y(w,k,D,m){for(var F,_=[0],N,b=0,U=w.length;b<U;){for(N=_.length;N--;_[N]*=k);for(_[0]+=m.indexOf(w.charAt(b++)),F=0;F<_.length;F++)_[F]>D-1&&(_[F+1]==null&&(_[F+1]=0),_[F+1]+=_[F]/D|0,_[F]%=D)}return _.reverse()}return function(w,k,D,m,F){var _,N,b,U,G,Y,q,T,v=w.indexOf("."),P=I,x=o;for(v>=0&&(U=c,c=0,w=w.replace(".",""),T=new u(k),Y=T.pow(w.length-v),c=U,T.c=y(toFixedPoint(coeffToString(Y.c),Y.e,"0"),10,D,d),T.e=T.c.length),q=y(w,k,D,F?(_=E,d):(_=d,E)),b=U=q.length;q[--U]==0;q.pop());if(!q[0])return _.charAt(0);if(v<0?--b:(Y.c=q,Y.e=b,Y.s=m,Y=e(Y,T,P,x,D),q=Y.c,G=Y.r,b=Y.e),N=b+P+1,v=q[N],U=D/2,G=G||N<0||q[N+1]!=null,G=x<4?(v!=null||G)&&(x==0||x==(Y.s<0?3:2)):v>U||v==U&&(x==4||G||x==6&&q[N-1]&1||x==(Y.s<0?8:7)),N<1||!q[0])w=G?toFixedPoint(_.charAt(1),-P,_.charAt(0)):_.charAt(0);else{if(q.length=N,G)for(--D;++q[--N]>D;)q[N]=0,N||(++b,q=[1].concat(q));for(U=q.length;!q[--U];);for(v=0,w="";v<=U;w+=_.charAt(q[v++]));w=toFixedPoint(w,b,_.charAt(0))}return w}}(),e=function(){function d(k,D,m){var F,_,N,b,U=0,G=k.length,Y=D%SQRT_BASE,q=D/SQRT_BASE|0;for(k=k.slice();G--;)N=k[G]%SQRT_BASE,b=k[G]/SQRT_BASE|0,F=q*N+b*Y,_=Y*N+F%SQRT_BASE*SQRT_BASE+U,U=(_/m|0)+(F/SQRT_BASE|0)+q*b,k[G]=_%m;return U&&(k=[U].concat(k)),k}function y(k,D,m,F){var _,N;if(m!=F)N=m>F?1:-1;else for(_=N=0;_<m;_++)if(k[_]!=D[_]){N=k[_]>D[_]?1:-1;break}return N}function w(k,D,m,F){for(var _=0;m--;)k[m]-=_,_=k[m]<D[m]?1:0,k[m]=_*F+k[m]-D[m];for(;!k[0]&&k.length>1;k.splice(0,1));}return function(k,D,m,F,_){var N,b,U,G,Y,q,T,v,P,x,Z,eA,J,X,nA,IA,rA,tA=k.s==D.s?1:-1,V=k.c,j=D.c;if(!V||!V[0]||!j||!j[0])return new u(!k.s||!D.s||(V?j&&V[0]==j[0]:!j)?NaN:V&&V[0]==0||!j?tA*0:tA/0);for(v=new u(tA),P=v.c=[],b=k.e-D.e,tA=m+b+1,_||(_=BASE,b=bitFloor(k.e/LOG_BASE)-bitFloor(D.e/LOG_BASE),tA=tA/LOG_BASE|0),U=0;j[U]==(V[U]||0);U++);if(j[U]>(V[U]||0)&&b--,tA<0)P.push(1),G=!0;else{for(X=V.length,IA=j.length,U=0,tA+=2,Y=mathfloor(_/(j[0]+1)),Y>1&&(j=d(j,Y,_),V=d(V,Y,_),IA=j.length,X=V.length),J=IA,x=V.slice(0,IA),Z=x.length;Z<IA;x[Z++]=0);rA=j.slice(),rA=[0].concat(rA),nA=j[0],j[1]>=_/2&&nA++;do{if(Y=0,N=y(j,x,IA,Z),N<0){if(eA=x[0],IA!=Z&&(eA=eA*_+(x[1]||0)),Y=mathfloor(eA/nA),Y>1)for(Y>=_&&(Y=_-1),q=d(j,Y,_),T=q.length,Z=x.length;y(q,x,T,Z)==1;)Y--,w(q,IA<T?rA:j,T,_),T=q.length,N=1;else Y==0&&(N=Y=1),q=j.slice(),T=q.length;if(T<Z&&(q=[0].concat(q)),w(x,q,Z,_),Z=x.length,N==-1)for(;y(j,x,IA,Z)<1;)Y++,w(x,IA<Z?rA:j,Z,_),Z=x.length}else N===0&&(Y++,x=[0]);P[U++]=Y,x[0]?x[Z++]=V[J]||0:(x=[V[J]],Z=1)}while((J++<X||x[0]!=null)&&tA--);G=x[0]!=null,P[0]||P.splice(0,1)}if(_==BASE){for(U=1,tA=P[0];tA>=10;tA/=10,U++);H(v,m+(v.e=U+b*LOG_BASE-1)+1,F,G)}else v.e=b,v.r=+G;return v}}();function h(d,y,w,k){var D,m,F,_,N;if(w==null?w=o:intCheck(w,0,8),!d.c)return d.toString();if(D=d.c[0],F=d.e,y==null)N=coeffToString(d.c),N=k==1||k==2&&(F<=a||F>=r)?toExponential(N,F):toFixedPoint(N,F,"0");else if(d=H(new u(d),y,w),m=d.e,N=coeffToString(d.c),_=N.length,k==1||k==2&&(y<=m||m<=a)){for(;_<y;N+="0",_++);N=toExponential(N,m)}else if(y-=F,N=toFixedPoint(N,m,"0"),m+1>_){if(--y>0)for(N+=".";y--;N+="0");}else if(y+=m-_,y>0)for(m+1==_&&(N+=".");y--;N+="0");return d.s<0&&D?"-"+N:N}function p(d,y){for(var w,k=1,D=new u(d[0]);k<d.length;k++)if(w=new u(d[k]),w.s)y.call(D,w)&&(D=w);else{D=w;break}return D}function S(d,y,w){for(var k=1,D=y.length;!y[--D];y.pop());for(D=y[0];D>=10;D/=10,k++);return(w=k+w*LOG_BASE-1)>B?d.c=d.e=null:w<s?d.c=[d.e=0]:(d.e=w,d.c=y),d}i=function(){var d=/^(-?)0([xbo])(?=\w[\w.]*$)/i,y=/^([^.]+)\.$/,w=/^\.([^.]+)$/,k=/^-?(Infinity|NaN)$/,D=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(m,F,_,N){var b,U=_?F:F.replace(D,"");if(k.test(U))m.s=isNaN(U)?null:U<0?-1:1;else{if(!_&&(U=U.replace(d,function(G,Y,q){return b=(q=q.toLowerCase())=="x"?16:q=="b"?2:8,!N||N==b?Y:G}),N&&(b=N,U=U.replace(y,"$1").replace(w,"0.$1")),F!=U))return new u(U,b);if(u.DEBUG)throw Error(bignumberError+"Not a"+(N?" base "+N:"")+" number: "+F);m.s=null}m.c=m.e=null}}();function H(d,y,w,k){var D,m,F,_,N,b,U,G=d.c,Y=POWS_TEN;if(G){A:{for(D=1,_=G[0];_>=10;_/=10,D++);if(m=y-D,m<0)m+=LOG_BASE,F=y,N=G[b=0],U=N/Y[D-F-1]%10|0;else if(b=mathceil((m+1)/LOG_BASE),b>=G.length)if(k){for(;G.length<=b;G.push(0));N=U=0,D=1,m%=LOG_BASE,F=m-LOG_BASE+1}else break A;else{for(N=_=G[b],D=1;_>=10;_/=10,D++);m%=LOG_BASE,F=m-LOG_BASE+D,U=F<0?0:N/Y[D-F-1]%10|0}if(k=k||y<0||G[b+1]!=null||(F<0?N:N%Y[D-F-1]),k=w<4?(U||k)&&(w==0||w==(d.s<0?3:2)):U>5||U==5&&(w==4||k||w==6&&(m>0?F>0?N/Y[D-F]:0:G[b-1])%10&1||w==(d.s<0?8:7)),y<1||!G[0])return G.length=0,k?(y-=d.e+1,G[0]=Y[(LOG_BASE-y%LOG_BASE)%LOG_BASE],d.e=-y||0):G[0]=d.e=0,d;if(m==0?(G.length=b,_=1,b--):(G.length=b+1,_=Y[LOG_BASE-m],G[b]=F>0?mathfloor(N/Y[D-F]%Y[F])*_:0),k)for(;;)if(b==0){for(m=1,F=G[0];F>=10;F/=10,m++);for(F=G[0]+=_,_=1;F>=10;F/=10,_++);m!=_&&(d.e++,G[0]==BASE&&(G[0]=1));break}else{if(G[b]+=_,G[b]!=BASE)break;G[b--]=0,_=1}for(m=G.length;G[--m]===0;G.pop());}d.e>B?d.c=d.e=null:d.e<s&&(d.c=[d.e=0])}return d}function M(d){var y,w=d.e;return w===null?d.toString():(y=coeffToString(d.c),y=w<=a||w>=r?toExponential(y,w):toFixedPoint(y,w,"0"),d.s<0?"-"+y:y)}return n.absoluteValue=n.abs=function(){var d=new u(this);return d.s<0&&(d.s=1),d},n.comparedTo=function(d,y){return compare(this,new u(d,y))},n.decimalPlaces=n.dp=function(d,y){var w,k,D,m=this;if(d!=null)return intCheck(d,0,MAX),y==null?y=o:intCheck(y,0,8),H(new u(m),d+m.e+1,y);if(!(w=m.c))return null;if(k=((D=w.length-1)-bitFloor(this.e/LOG_BASE))*LOG_BASE,D=w[D])for(;D%10==0;D/=10,k--);return k<0&&(k=0),k},n.dividedBy=n.div=function(d,y){return e(this,new u(d,y),I,o)},n.dividedToIntegerBy=n.idiv=function(d,y){return e(this,new u(d,y),0,1)},n.exponentiatedBy=n.pow=function(d,y){var w,k,D,m,F,_,N,b,U,G=this;if(d=new u(d),d.c&&!d.isInteger())throw Error(bignumberError+"Exponent not an integer: "+M(d));if(y!=null&&(y=new u(y)),_=d.e>14,!G.c||!G.c[0]||G.c[0]==1&&!G.e&&G.c.length==1||!d.c||!d.c[0])return U=new u(Math.pow(+M(G),_?2-isOdd(d):+M(d))),y?U.mod(y):U;if(N=d.s<0,y){if(y.c?!y.c[0]:!y.s)return new u(NaN);k=!N&&G.isInteger()&&y.isInteger(),k&&(G=G.mod(y))}else{if(d.e>9&&(G.e>0||G.e<-1||(G.e==0?G.c[0]>1||_&&G.c[1]>=24e7:G.c[0]<8e13||_&&G.c[0]<=9999975e7)))return m=G.s<0&&isOdd(d)?-0:0,G.e>-1&&(m=1/m),new u(N?1/m:m);c&&(m=mathceil(c/LOG_BASE+2))}for(_?(w=new u(.5),N&&(d.s=1),b=isOdd(d)):(D=Math.abs(+M(d)),b=D%2),U=new u(g);;){if(b){if(U=U.times(G),!U.c)break;m?U.c.length>m&&(U.c.length=m):k&&(U=U.mod(y))}if(D){if(D=mathfloor(D/2),D===0)break;b=D%2}else if(d=d.times(w),H(d,d.e+1,1),d.e>14)b=isOdd(d);else{if(D=+M(d),D===0)break;b=D%2}G=G.times(G),m?G.c&&G.c.length>m&&(G.c.length=m):k&&(G=G.mod(y))}return k?U:(N&&(U=g.div(U)),y?U.mod(y):m?H(U,c,o,F):U)},n.integerValue=function(d){var y=new u(this);return d==null?d=o:intCheck(d,0,8),H(y,y.e+1,d)},n.isEqualTo=n.eq=function(d,y){return compare(this,new u(d,y))===0},n.isFinite=function(){return!!this.c},n.isGreaterThan=n.gt=function(d,y){return compare(this,new u(d,y))>0},n.isGreaterThanOrEqualTo=n.gte=function(d,y){return(y=compare(this,new u(d,y)))===1||y===0},n.isInteger=function(){return!!this.c&&bitFloor(this.e/LOG_BASE)>this.c.length-2},n.isLessThan=n.lt=function(d,y){return compare(this,new u(d,y))<0},n.isLessThanOrEqualTo=n.lte=function(d,y){return(y=compare(this,new u(d,y)))===-1||y===0},n.isNaN=function(){return!this.s},n.isNegative=function(){return this.s<0},n.isPositive=function(){return this.s>0},n.isZero=function(){return!!this.c&&this.c[0]==0},n.minus=function(d,y){var w,k,D,m,F=this,_=F.s;if(d=new u(d,y),y=d.s,!_||!y)return new u(NaN);if(_!=y)return d.s=-y,F.plus(d);var N=F.e/LOG_BASE,b=d.e/LOG_BASE,U=F.c,G=d.c;if(!N||!b){if(!U||!G)return U?(d.s=-y,d):new u(G?F:NaN);if(!U[0]||!G[0])return G[0]?(d.s=-y,d):new u(U[0]?F:o==3?-0:0)}if(N=bitFloor(N),b=bitFloor(b),U=U.slice(),_=N-b){for((m=_<0)?(_=-_,D=U):(b=N,D=G),D.reverse(),y=_;y--;D.push(0));D.reverse()}else for(k=(m=(_=U.length)<(y=G.length))?_:y,_=y=0;y<k;y++)if(U[y]!=G[y]){m=U[y]<G[y];break}if(m&&(D=U,U=G,G=D,d.s=-d.s),y=(k=G.length)-(w=U.length),y>0)for(;y--;U[w++]=0);for(y=BASE-1;k>_;){if(U[--k]<G[k]){for(w=k;w&&!U[--w];U[w]=y);--U[w],U[k]+=BASE}U[k]-=G[k]}for(;U[0]==0;U.splice(0,1),--b);return U[0]?S(d,U,b):(d.s=o==3?-1:1,d.c=[d.e=0],d)},n.modulo=n.mod=function(d,y){var w,k,D=this;return d=new u(d,y),!D.c||!d.s||d.c&&!d.c[0]?new u(NaN):!d.c||D.c&&!D.c[0]?new u(D):(l==9?(k=d.s,d.s=1,w=e(D,d,0,3),d.s=k,w.s*=k):w=e(D,d,0,l),d=D.minus(w.times(d)),!d.c[0]&&l==1&&(d.s=D.s),d)},n.multipliedBy=n.times=function(d,y){var w,k,D,m,F,_,N,b,U,G,Y,q,T,v,P,x=this,Z=x.c,eA=(d=new u(d,y)).c;if(!Z||!eA||!Z[0]||!eA[0])return!x.s||!d.s||Z&&!Z[0]&&!eA||eA&&!eA[0]&&!Z?d.c=d.e=d.s=null:(d.s*=x.s,!Z||!eA?d.c=d.e=null:(d.c=[0],d.e=0)),d;for(k=bitFloor(x.e/LOG_BASE)+bitFloor(d.e/LOG_BASE),d.s*=x.s,N=Z.length,G=eA.length,N<G&&(T=Z,Z=eA,eA=T,D=N,N=G,G=D),D=N+G,T=[];D--;T.push(0));for(v=BASE,P=SQRT_BASE,D=G;--D>=0;){for(w=0,Y=eA[D]%P,q=eA[D]/P|0,F=N,m=D+F;m>D;)b=Z[--F]%P,U=Z[F]/P|0,_=q*b+U*Y,b=Y*b+_%P*P+T[m]+w,w=(b/v|0)+(_/P|0)+q*U,T[m--]=b%v;T[m]=w}return w?++k:T.splice(0,1),S(d,T,k)},n.negated=function(){var d=new u(this);return d.s=-d.s||null,d},n.plus=function(d,y){var w,k=this,D=k.s;if(d=new u(d,y),y=d.s,!D||!y)return new u(NaN);if(D!=y)return d.s=-y,k.minus(d);var m=k.e/LOG_BASE,F=d.e/LOG_BASE,_=k.c,N=d.c;if(!m||!F){if(!_||!N)return new u(D/0);if(!_[0]||!N[0])return N[0]?d:new u(_[0]?k:D*0)}if(m=bitFloor(m),F=bitFloor(F),_=_.slice(),D=m-F){for(D>0?(F=m,w=N):(D=-D,w=_),w.reverse();D--;w.push(0));w.reverse()}for(D=_.length,y=N.length,D-y<0&&(w=N,N=_,_=w,y=D),D=0;y;)D=(_[--y]=_[y]+N[y]+D)/BASE|0,_[y]=BASE===_[y]?0:_[y]%BASE;return D&&(_=[D].concat(_),++F),S(d,_,F)},n.precision=n.sd=function(d,y){var w,k,D,m=this;if(d!=null&&d!==!!d)return intCheck(d,1,MAX),y==null?y=o:intCheck(y,0,8),H(new u(m),d,y);if(!(w=m.c))return null;if(D=w.length-1,k=D*LOG_BASE+1,D=w[D]){for(;D%10==0;D/=10,k--);for(D=w[0];D>=10;D/=10,k++);}return d&&m.e+1>k&&(k=m.e+1),k},n.shiftedBy=function(d){return intCheck(d,-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER),this.times("1e"+d)},n.squareRoot=n.sqrt=function(){var d,y,w,k,D,m=this,F=m.c,_=m.s,N=m.e,b=I+4,U=new u("0.5");if(_!==1||!F||!F[0])return new u(!_||_<0&&(!F||F[0])?NaN:F?m:1/0);if(_=Math.sqrt(+M(m)),_==0||_==1/0?(y=coeffToString(F),(y.length+N)%2==0&&(y+="0"),_=Math.sqrt(+y),N=bitFloor((N+1)/2)-(N<0||N%2),_==1/0?y="5e"+N:(y=_.toExponential(),y=y.slice(0,y.indexOf("e")+1)+N),w=new u(y)):w=new u(_+""),w.c[0]){for(N=w.e,_=N+b,_<3&&(_=0);;)if(D=w,w=U.times(D.plus(e(m,D,b,1))),coeffToString(D.c).slice(0,_)===(y=coeffToString(w.c)).slice(0,_))if(w.e<N&&--_,y=y.slice(_-3,_+1),y=="9999"||!k&&y=="4999"){if(!k&&(H(D,D.e+I+2,0),D.times(D).eq(m))){w=D;break}b+=4,_+=4,k=1}else{(!+y||!+y.slice(1)&&y.charAt(0)=="5")&&(H(w,w.e+I+2,1),d=!w.times(w).eq(m));break}}return H(w,w.e+I+1,o,d)},n.toExponential=function(d,y){return d!=null&&(intCheck(d,0,MAX),d++),h(this,d,y,1)},n.toFixed=function(d,y){return d!=null&&(intCheck(d,0,MAX),d=d+this.e+1),h(this,d,y)},n.toFormat=function(d,y,w){var k,D=this;if(w==null)d!=null&&y&&typeof y=="object"?(w=y,y=null):d&&typeof d=="object"?(w=d,d=y=null):w=Q;else if(typeof w!="object")throw Error(bignumberError+"Argument not an object: "+w);if(k=D.toFixed(d,y),D.c){var m,F=k.split("."),_=+w.groupSize,N=+w.secondaryGroupSize,b=w.groupSeparator||"",U=F[0],G=F[1],Y=D.s<0,q=Y?U.slice(1):U,T=q.length;if(N&&(m=_,_=N,N=m,T-=m),_>0&&T>0){for(m=T%_||_,U=q.substr(0,m);m<T;m+=_)U+=b+q.substr(m,_);N>0&&(U+=b+q.slice(m)),Y&&(U="-"+U)}k=G?U+(w.decimalSeparator||"")+((N=+w.fractionGroupSize)?G.replace(new RegExp("\\d{"+N+"}\\B","g"),"$&"+(w.fractionGroupSeparator||"")):G):U}return(w.prefix||"")+k+(w.suffix||"")},n.toFraction=function(d){var y,w,k,D,m,F,_,N,b,U,G,Y,q=this,T=q.c;if(d!=null&&(_=new u(d),!_.isInteger()&&(_.c||_.s!==1)||_.lt(g)))throw Error(bignumberError+"Argument "+(_.isInteger()?"out of range: ":"not an integer: ")+M(_));if(!T)return new u(q);for(y=new u(g),b=w=new u(g),k=N=new u(g),Y=coeffToString(T),m=y.e=Y.length-q.e-1,y.c[0]=POWS_TEN[(F=m%LOG_BASE)<0?LOG_BASE+F:F],d=!d||_.comparedTo(y)>0?m>0?y:b:_,F=B,B=1/0,_=new u(Y),N.c[0]=0;U=e(_,y,0,1),D=w.plus(U.times(k)),D.comparedTo(d)!=1;)w=k,k=D,b=N.plus(U.times(D=b)),N=D,y=_.minus(U.times(D=y)),_=D;return D=e(d.minus(w),k,0,1),N=N.plus(D.times(b)),w=w.plus(D.times(k)),N.s=b.s=q.s,m=m*2,G=e(b,k,m,o).minus(q).abs().comparedTo(e(N,w,m,o).minus(q).abs())<1?[b,k]:[N,w],B=F,G},n.toNumber=function(){return+M(this)},n.toPrecision=function(d,y){return d!=null&&intCheck(d,1,MAX),h(this,d,y,2)},n.toString=function(d){var y,w=this,k=w.s,D=w.e;return D===null?k?(y="Infinity",k<0&&(y="-"+y)):y="NaN":(d==null?y=D<=a||D>=r?toExponential(coeffToString(w.c),D):toFixedPoint(coeffToString(w.c),D,"0"):d===10&&f?(w=H(new u(w),I+D+1,o),y=toFixedPoint(coeffToString(w.c),w.e,"0")):(intCheck(d,2,E.length,"Base"),y=t(toFixedPoint(coeffToString(w.c),D,"0"),10,d,k,!0)),k<0&&w.c[0]&&(y="-"+y)),y},n.valueOf=n.toJSON=function(){return M(this)},n._isBigNumber=!0,n[Symbol.toStringTag]="BigNumber",n[Symbol.for("nodejs.util.inspect.custom")]=n.valueOf,A!=null&&u.set(A),u}function bitFloor(A){var e=A|0;return A>0||A===e?e:e-1}function coeffToString(A){for(var e,t,i=1,n=A.length,g=A[0]+"";i<n;){for(e=A[i++]+"",t=LOG_BASE-e.length;t--;e="0"+e);g+=e}for(n=g.length;g.charCodeAt(--n)===48;);return g.slice(0,n+1||1)}function compare(A,e){var t,i,n=A.c,g=e.c,I=A.s,o=e.s,a=A.e,r=e.e;if(!I||!o)return null;if(t=n&&!n[0],i=g&&!g[0],t||i)return t?i?0:-o:I;if(I!=o)return I;if(t=I<0,i=a==r,!n||!g)return i?0:!n^t?1:-1;if(!i)return a>r^t?1:-1;for(o=(a=n.length)<(r=g.length)?a:r,I=0;I<o;I++)if(n[I]!=g[I])return n[I]>g[I]^t?1:-1;return a==r?0:a>r^t?1:-1}function intCheck(A,e,t,i){if(A<e||A>t||A!==mathfloor(A))throw Error(bignumberError+(i||"Argument")+(typeof A=="number"?A<e||A>t?" out of range: ":" not an integer: ":" not a primitive number: ")+String(A))}function isOdd(A){var e=A.c.length-1;return bitFloor(A.e/LOG_BASE)==e&&A.c[e]%2!=0}function toExponential(A,e){return(A.length>1?A.charAt(0)+"."+A.slice(1):A)+(e<0?"e":"e+")+e}function toFixedPoint(A,e,t){var i,n;if(e<0){for(n=t+".";++e;n+=t);A=n+A}else if(i=A.length,++e>i){for(n=t,e-=i;--e;n+=t);A+=n}else e<i&&(A=A.slice(0,e)+"."+A.slice(e));return A}var BigNumber=clone();const fold_attrs=A=>fold(A.attributes,e=>({[e.key]:e.value}));async function sign_doc(A,e,t,i){const n=SignDoc.fromPartial({accountNumber:A+"",authInfoBytes:e,bodyBytes:t,chainId:i}),g=SignDoc.encode(n).finish(),I=yw_account.get().secret,o=await Secrets.get(I);if(o?.security.type!=="none")throw new Error("Keyring not yet implemented");return await(await Secp256k1Key.import(await RuntimeKey.createRaw(string8_to_buffer(o.data)))).sign(g,!0)}class CosmosNetwork{constructor(e,t){QA(this,"_p_chain");QA(this,"_y_grpc");QA(this,"_ks_cache");this._g_network=e,this._g_chain=t,this._p_chain=Chains.pathFrom(t),this._y_grpc=new GrpcWebImpl(e.grpcWebUrl,{transport:grpcWebClient_umd$1.exports.grpc.CrossBrowserHttpTransport({withCredentials:!1})}),this.reloadCached()}async _signer_data(e){const t=await new QueryClientImpl(this._y_grpc).account({address:e}),{typeUrl:i,value:n}=t?.account||{};if(i){if(i!=="/cosmos.auth.v1beta1.BaseAccount")throw new Error(`Cannot sign with account of type "${i}", can only sign with BaseAccount.`)}else throw new Error(`Account for ${e} was not found on chain. Likely has zero balance.`);const g=BaseAccount.decode(n);return{chainId:this._g_chain.id,accountNumber:BigInt(g.accountNumber),sequence:BigInt(g.sequence)}}async _update_balance(e,t,i,n){const g=Entities.holdingPathFor(e,t,this._p_chain),I=this._ks_cache.at(g);return await QueryCache.open(async o=>{await o.set(g,{timestamp:n,data:JSON.parse(JSON.stringify(i))}),this._ks_cache=o}),[g,I]}async reloadCached(){this._ks_cache=await QueryCache.read()}cachedBalance(e,t){const i=Entities.holdingPathFor(e,t,this._p_chain);return this._ks_cache.at(i)}async bankBalance(e,t,i=0){const n=Date.now();t=t||Object.keys(this._g_chain.coins)[0];const g=await new QueryClientImpl$1(this._y_grpc).balance({address:e,denom:this._g_chain.coins[t].denom}),{balance:I}=g;if(!I)throw new Error("Failed to fetch balance");const[o,a]=await this._update_balance(e,t,I,n);return{balance:I,cached:a,holding:o}}async bankBalances(e){const t=Date.now(),i=await new QueryClientImpl$1(this._y_grpc).allBalances({address:e}),{balances:n}=i,g=this._g_chain.coins,I=oderom(g,(a,r)=>({[r.denom]:a})),o={};for(const a of n){const r=I[a.denom];g[r];const[s,B]=await this._update_balance(e,r,a,t);o[r]={balance:a,cached:B,holding:s}}return o}get hasRpc(){return!!this._g_network.rpcHost}listen(e,t){const i=this._g_network.rpcHost;if(!i)throw new Error("Cannot subscribe to events; no RPC host configured on network");const n=new WebSocket(`wss://${i}/websocket`);n.onopen=I=>{n.send(JSON.stringify({jsonrpc:"2.0",method:"subscribe",id:"0",params:{query:e.join(" AND ")}}))},n.onmessage=I=>{const a=JSON.parse(I.data||"{}")?.result?.data?.value;a&&t(null,a)};let g=!1;return n.onclose=I=>{g||t(I)},n.onerror=I=>{t(I)},()=>{g=!0,n.close()}}onReceive(e,t){return this.listen(["tm.event='Tx'",`transfer.recipient='${e}'`],(i,n)=>{t(i,n?.TxResult||void 0)})}onSend(e,t){return this.listen(["tm.event='Tx'",`transfer.sender='${e}'`],(i,n)=>{t(i,n?.TxResult||void 0)})}async e2eInfoFor(e){const t=await new ServiceClientImpl(this._y_grpc).getTxsEvent({events:[`message.sender='${e}'`],pagination:{limit:"1"},orderBy:OrderBy.ORDER_BY_DESC});if(!t?.txs?.length)throw new Error("Owner has not signed any messages yet on-chain");const i=t.txs[0].authInfo.signerInfos;if(i.length!==1)throw new Error("Multiple owners");const{typeUrl:n,value:g}=i[0].publicKey;if(n!=="/cosmos.crypto.secp256k1.PubKey")throw new Error("Unexpected public key type");return{sequence:i[0].sequence,height:t.txResponses[0].height,pubkey:Secp256k1Key.uncompressPublicKey(g)}}async ecdhEncrypt(e,t,i,n=yw_chain.get()){const g=yw_account.get().secret,I=await Secrets.get(g);if(I?.security.type!=="none")throw new Error("Keyring not yet implemented");const a=await(await Secp256k1Key.import(await RuntimeKey.createRaw(string8_to_buffer(I.data)))).ecdh(e),r=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]);await crypto.subtle.deriveBits({name:"HKDF",hash:"SHA-256",salt:ATU8_SHA256_STARSHELL,info:sha256_sync$1(text_to_buffer(n.id))},r,256);const s=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",info:sha256_sync$1(text_to_buffer(n.id))},r,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);return await encrypt(t,s,i)}async isContract(e){return(await new ServiceClientImpl(this._y_grpc).getTxsEvent({events:[`message.contract_address='${e}'`],orderBy:OrderBy.ORDER_BY_ASC,pagination:{limit:"1"}})).txResponses.length>0}async received(e,t=0){const i=await new ServiceClientImpl(this._y_grpc).getTxsEvent({events:[`transfer.recipient='${e}'`,`tx.height>=${t}`],pagination:{limit:"100"}}),n=grpcWebClient_umd$1.exports.grpc.client(ServiceGetTxsEventDesc,{host:"wss://rpc.testnet.secretsaturn.net/websocket",transport:grpcWebClient_umd$1.exports.grpc.WebsocketTransport(),debug:!0});n.onHeaders(a=>{console.log(a);debugger}),n.onMessage(a=>{console.log(a);debugger}),n.onEnd((a,r,s)=>{console.log({w_status:a,s_msg:r,g_trailers:s});debugger;console.log("#end")}),n.start();const g=GetTxsEventRequest.fromPartial({events:["tm.event='Tx'"]});debugger;if(n.send({...g,...ServiceGetTxsEventDesc.requestType}),n.finishSend(),!i)throw new Error("Failed to fetch transaction");if(+(i.pagination?.total||1)>1)throw new Error("Not yet implemented");const o=[];for(const a of i.txResponses){const r=JSON.parse(a.rawLog)[0].events;for(const s of r)if(s.type==="transfer"){const B=fold_attrs(s);o.push({...B,height:a.height,timestamp:a.timestamp,txhash:a.txhash})}}return console.log(o),o}async bankSend(e,t,i,n,g="",I=yw_chain.get()){const o=I.coins[i],a=MsgSend.fromPartial({amount:[{denom:o.denom,amount:n.toString()}],fromAddress:e,toAddress:t}),r={typeUrl:"/cosmos.bank.v1beta1.MsgSend",value:MsgSend.encode(a).finish()},[s,B]=await this.broadcast({msgs:[r],memo:g,gasLimit:20000n,gasFee:{price:.25}});return{chain:yw_chain_ref.get(),owner:e,hash:s,coin:i,msg:a,raw:buffer_to_string8(B)}}async broadcast(e){const{msgs:t,memo:i,gasLimit:n,gasFee:g,account:I=yw_account.get()}=e;let{amount:o,denom:a}=g;g.price&&(o=new BigNumber(g.price).times(n.toString()).toString(),a=Object.values(yw_chain.get().coins)[0].denom);const r=Chains.addressFor(I.pubkey,this._g_chain),s=yw_account.get().secret,B=await Secrets.get(s);if(B?.security.type!=="none")throw new Error("Keyring not yet implemented");const l=(await Secp256k1Key.import(await RuntimeKey.create(()=>string8_to_buffer(B.data)),!0)).exportPublicKey(),c=TxBody.fromPartial({messages:t,memo:i}),Q=TxBody.encode(c).finish(),E=await this._signer_data(r),f=AuthInfo.fromPartial({signerInfos:[{publicKey:{typeUrl:"/cosmos.crypto.secp256k1.PubKey",value:PubKey.encode(PubKey.fromPartial({key:l})).finish()},modeInfo:{single:{mode:SignMode.SIGN_MODE_DIRECT}},sequence:E.sequence+""}],fee:{amount:[{amount:o,denom:a}],gasLimit:n+""}}),u=AuthInfo.encode(f).finish(),h=await sign_doc(E.accountNumber,u,Q,yw_chain.get().id),p=TxRaw.encode(TxRaw.fromPartial({bodyBytes:Q,authInfoBytes:u,signatures:[h]})).finish(),H=(await new ServiceClientImpl(this._y_grpc).broadcastTx({txBytes:p,mode:BroadcastMode.BROADCAST_MODE_ASYNC})).txResponse?.txhash;if(!H)throw syserr({text:"Txn failed to broadcast"});return[H,p]}}const Medias=create_store_class({store:SI_STORE_MEDIA,extension:"map",class:class extends WritableStoreMap{}}),Networks=create_store_class({store:SI_STORE_NETWORKS,extension:"map",class:class te extends WritableStoreMap{static pathFor(e){return`/network.${buffer_to_base64(sha256_sync$1(text_to_buffer(e)))}`}static pathFrom(e){return te.pathFor(e.grpcWebUrl)}static activate(e,t=yw_chain.get()){return new CosmosNetwork(e,t)}}}),Tags=create_store_class({store:SI_STORE_TAGS,class:class extends WritableStore{static tagPathFor(e){return`/tag.${e.index}`}getTag(e){return this._w_cache.registry[e]??null}getIdsFor(e){return this._w_cache.map[e]??[]}getTagsFor(e){return this.getIdsFor(e).map(t=>this.getTag(t)).filter(t=>!!t)}setIdsFor(e,t){return this._w_cache.map[e]=t,this.save()}setTagsFor(e,t){return this.setIdsFor(e,t.map(i=>i.index))}}}),subscriber_queue=[];function readable(A,e){return{subscribe:writable(A,e).subscribe}}function writable(A,e=noop$1){let t;const i=new Set;function n(o){if(safe_not_equal(A,o)&&(A=o,t)){const a=!subscriber_queue.length;for(const r of i)r[1](),subscriber_queue.push(r,A);if(a){for(let r=0;r<subscriber_queue.length;r+=2)subscriber_queue[r][0](subscriber_queue[r+1]);subscriber_queue.length=0}}}function g(o){n(o(A))}function I(o,a=noop$1){const r=[o,a];return i.add(r),i.size===1&&(t=e(n)||noop$1),o(A),()=>{i.delete(r),i.size===0&&(t(),t=null)}}return{set:n,update:g,subscribe:I}}function derived(A,e,t){const i=!Array.isArray(A),n=i?[A]:A,g=e.length<2;return readable(t,I=>{let o=!1;const a=[];let r=0,s=noop$1;const B=()=>{if(r)return;s();const l=e(i?a[0]:a,I);g?I(l):s=is_function(l)?l:noop$1},C=n.map((l,c)=>subscribe(l,Q=>{a[c]=Q,r&=~(1<<c),o&&B()},()=>{r|=1<<c}));return o=!0,B(),function(){run_all(C),s()}})}var Screen_svelte_svelte_type_style_lang="",StarShellLogo_svelte_svelte_type_style_lang="",SX_ICON_ADD$1=`<svg xmlns="http://www.w3.org/2000/svg" width="8" height="8">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="3" width="2" height="8" />
		<rect y="5" width="2" height="8" transform="rotate(-90 0 5)" />
	</g>
</svg>`,OverlaySelect_svelte_svelte_type_style_lang="";function create_if_block$e(A){let e,t=A[0].outerHTML+"",i;return{c(){e=new HtmlTag(!1),i=empty(),e.a=i},m(n,g){e.m(t,n,g),insert(n,i,g)},p(n,g){g&1&&t!==(t=n[0].outerHTML+"")&&e.p(t)},d(n){n&&detach(i),n&&e.d()}}}function create_fragment$m(A){let e,t=A[0]?.outerHTML&&create_if_block$e(A);return{c(){t&&t.c(),e=empty()},m(i,n){t&&t.m(i,n),insert(i,e,n)},p(i,[n]){i[0]?.outerHTML?t?t.p(i,n):(t=create_if_block$e(i),t.c(),t.m(e.parentNode,e)):t&&(t.d(1),t=null)},i:noop$1,o:noop$1,d(i){t&&t.d(i),i&&detach(e)}}}function instance$l(A,e,t){let{element:i}=e;return A.$$set=n=>{"element"in n&&t(0,i=n.element)},[i]}class Put extends SvelteComponent{constructor(e){super(),init(this,e,instance$l,create_fragment$m,safe_not_equal,{element:0})}}const qs=(A,e)=>A.querySelector(e);function dd(A,e={},t=[]){const i=document.createElement(A);for(const n in e)i.setAttribute(n,e[n]+"");for(const n of t)i.append(n);return i}function open_external_link(A){chrome.tabs.create({url:A})}function picture(A,e,t={}){const{default:i,16:n,32:g,48:I,64:o,96:a,128:r,256:s}=A,B=e.medias,C=n?B.at(n)?.data:null,l=g?B.at(g)?.data:null,c=I?B.at(I)?.data:null,Q=o?B.at(o)?.data:null,E=a?B.at(a)?.data:null,f=r?B.at(r)?.data:null,u=s?B.at(s)?.data:null,h=B.at(i).data,p=C||l||c||Q||E||f||u,S=e.dim,H=S*2;let M=null,d=null;return p&&(S<=64?S<=32?S<=16?M=p:M=l||c||Q||E||f||u:S<=48?M=c||Q||E||f||u:M=Q||E||f||u:S<=128?S<=96?M=E||f||u:M=f||u:S<=256&&(M=u),H<=64?H<=32?H<=16?d=p:d=l||c||Q||E||f||u:H<=48?d=c||Q||E||f||u:d=Q||E||f||u:H<=128?H<=96?d=E||f||u:d=f||u:H<=256&&(d=u)),dd("picture",{...t},[...d?[dd("source",{srcset:d,media:"(min-resolution: 2dppx)"})]:[],dd("img",{src:M||h,alt:e.alt||""})])}const Pfps=create_store_class({store:SI_STORE_PFPS,extension:"map",class:class extends WritableStoreMap{static async load(e,t){const i=await Pfps.at(e);return i?Pfps.render(i,t):null}static render(e,t){const i=`width:${t.dim}px; height:${t.dim}px;`;switch(e.type){case"plain":return picture(e.image,t,{class:"global_pfp",style:i})}}}});var PfpDisplay_svelte_svelte_type_style_lang="";function create_else_block_1$1(A){let e,t=(A[1][0]||"")+"",i,n,g,I={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_2,then:create_then_block_2,catch:create_catch_block_2,value:21};return handle_promise(A[7](),I),{c(){e=element("span"),i=text(t),n=space(),g=empty(),I.block.c(),attr(e,"class","icon-dom svelte-mmgef2"),attr(e,"style",A[4])},m(o,a){insert(o,e,a),append(e,i),insert(o,n,a),insert(o,g,a),I.block.m(o,I.anchor=a),I.mount=()=>g.parentNode,I.anchor=g},p(o,a){A=o},i:noop$1,o:noop$1,d(o){o&&detach(e),o&&detach(n),o&&detach(g),I.block.d(o),I.token=null,I=null}}}function create_if_block$d(A){let e,t,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$4,then:create_then_block$4,catch:create_catch_block_1$2,value:20,blocks:[,,,]};return handle_promise(A[6](),i),{c(){e=empty(),i.block.c()},m(n,g){insert(n,e,g),i.block.m(n,i.anchor=g),i.mount=()=>e.parentNode,i.anchor=e,t=!0},p(n,g){A=n,update_await_block_branch(i,A,g)},i(n){t||(transition_in(i.block),t=!0)},o(n){for(let g=0;g<3;g+=1){const I=i.blocks[g];transition_out(I)}t=!1},d(n){n&&detach(e),i.block.d(n),i.token=null,i=null}}}function create_catch_block_2(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_then_block_2(A){let e;return{c(){e=text("_")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_pending_block_2(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_catch_block_1$2(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$4(A){let e,t,i,n,g;const I=[create_if_block_1$8,create_else_block$4],o=[];function a(s,B){return s[20]?0:1}e=a(A),t=o[e]=I[e](A);let r={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$2,then:create_then_block_1$2,catch:create_catch_block$4,value:21};return handle_promise(A[7](),r),{c(){t.c(),i=space(),n=empty(),r.block.c()},m(s,B){o[e].m(s,B),insert(s,i,B),insert(s,n,B),r.block.m(s,r.anchor=B),r.mount=()=>n.parentNode,r.anchor=n,g=!0},p(s,B){A=s,t.p(A,B)},i(s){g||(transition_in(t),g=!0)},o(s){transition_out(t),g=!1},d(s){o[e].d(s),s&&detach(i),s&&detach(n),r.block.d(s),r.token=null,r=null}}}function create_else_block$4(A){let e;return{c(){e=element("span"),e.textContent="Error",attr(e,"class","error")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$8(A){let e,t;return e=new Put({props:{element:A[20]}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p:noop$1,i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_catch_block$4(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_then_block_1$2(A){let e;return{c(){e=text("_")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_pending_block_1$2(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_pending_block$4(A){let e;return{c(){e=text("Loading pfp...")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_fragment$l(A){let e,t,i,n;const g=[create_if_block$d,create_else_block_1$1],I=[];function o(a,r){return a[0]?0:1}return t=o(A),i=I[t]=g[t](A),{c(){e=element("span"),i.c(),attr(e,"class","global_pfp tile "+A[2]+" svelte-mmgef2"),attr(e,"style",A[5]),attr(e,"data-path",A[0]),toggle_class(e,"satin",A[3]==="satin")},m(a,r){insert(a,e,r),I[t].m(e,null),n=!0},p(a,[r]){let s=t;t=o(a),t===s?I[t].p(a,r):(group_outros(),transition_out(I[s],1,1,()=>{I[s]=null}),check_outros(),i=I[t],i?i.p(a,r):(i=I[t]=g[t](a),i.c()),transition_in(i,1),i.m(e,null)),(!n||r&1)&&attr(e,"data-path",a[0])},i(a){n||(transition_in(i),n=!0)},o(a){transition_out(i),n=!1},d(a){a&&detach(e),I[t].d()}}}function instance$k(A,e,t){let i;component_subscribe(A,yw_store_medias,M=>t(16,i=M));const n=createEventDispatcher();let{resource:g=null}=e;const I=g;let{ref:o=I?.pfp||""}=e,{name:a=I?.name||""}=e;const r=a;let{dim:s}=e;const B=s;let{circular:C=!1}=e;const l=C?"":"square";let{bg:c=void 0}=e;const Q=c;let{genStyle:E=""}=e;const f=`width:${B}px; height:${B}px; `+(E||"")+(o?`font-size:${B}px;`:"")+(C?`border-radius:${B}px;`:"");let{rootStyle:u=""}=e;const h=u;let{settle:p=void 0}=e;async function S(){const M=i||await Medias.read(),d=await Pfps.load(o,{alt:r,dim:B,medias:M});return queueMicrotask(()=>{n("loaded")}),d}function H(){return p&&queueMicrotask(()=>p()),new Promise(F_NOOP)}return A.$$set=M=>{"resource"in M&&t(8,g=M.resource),"ref"in M&&t(0,o=M.ref),"name"in M&&t(9,a=M.name),"dim"in M&&t(10,s=M.dim),"circular"in M&&t(11,C=M.circular),"bg"in M&&t(12,c=M.bg),"genStyle"in M&&t(13,E=M.genStyle),"rootStyle"in M&&t(14,u=M.rootStyle),"settle"in M&&t(15,p=M.settle)},[o,r,l,Q,f,h,S,H,g,a,s,C,c,E,u,p]}class PfpDisplay extends SvelteComponent{constructor(e){super(),init(this,e,instance$k,create_fragment$l,safe_not_equal,{resource:8,ref:0,name:9,dim:10,circular:11,bg:12,genStyle:13,rootStyle:14,settle:15})}}var SX_ICON_CLOSE=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-close-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-close-fg" d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
</svg>
`,Close_svelte_svelte_type_style_lang="";function create_fragment$k(A){let e,t,i;return{c(){e=element("div"),attr(e,"class","close icon svelte-1to5vmp"),toggle_class(e,"absolute",A[0])},m(n,g){insert(n,e,g),e.innerHTML=SX_ICON_CLOSE,t||(i=listen(e,"click",A[2]),t=!0)},p(n,[g]){g&1&&toggle_class(e,"absolute",n[0])},i:noop$1,o:noop$1,d(n){n&&detach(e),t=!1,i()}}}function instance$j(A,e,t){let{absolute:i=!1}=e,{heightless:n=!1}=e;function g(I){bubble.call(this,A,I)}return A.$$set=I=>{"absolute"in I&&t(0,i=I.absolute),"heightless"in I&&t(1,n=I.heightless)},[i,n,g]}class Close extends SvelteComponent{constructor(e){super(),init(this,e,instance$j,create_fragment$k,safe_not_equal,{absolute:0,heightless:1})}}var Row_svelte_svelte_type_style_lang="";const get_below_slot_changes=A=>({}),get_below_slot_context=A=>({}),get_tags_slot_changes=A=>({}),get_tags_slot_context=A=>({}),get_right_slot_changes=A=>({}),get_right_slot_context=A=>({}),get_status_slot_changes=A=>({}),get_status_slot_context=A=>({}),get_detail_slot_changes=A=>({}),get_detail_slot_context=A=>({}),get_icon_slot_changes_1=A=>({}),get_icon_slot_context_1=A=>({}),get_icon_slot_changes=A=>({}),get_icon_slot_context=A=>({});function fallback_block_3(A){let e,t;return e=new PfpDisplay({props:{ref:A[12],name:A[10],dim:A[13]}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p:noop$1,i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function fallback_block_2(A){let e;const t=A[26].icon,i=create_slot(t,A,A[25],get_icon_slot_context_1),n=i||fallback_block_3(A);return{c(){n&&n.c()},m(g,I){n&&n.m(g,I),e=!0},p(g,I){i&&i.p&&(!e||I[0]&33554432)&&update_slot_base(i,t,g,g[25],e?get_slot_changes(t,g[25],I,get_icon_slot_changes_1):get_all_dirty_from_scope(g[25]),get_icon_slot_context_1)},i(g){e||(transition_in(n,g),e=!0)},o(g){transition_out(n,g),e=!1},d(g){n&&n.d(g)}}}function create_if_block_9$1(A){let e;return{c(){e=element("span"),e.textContent=`(${A[11]})`,attr(e,"class","postname svelte-o4urkb")},m(t,i){insert(t,e,i)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_8$1(A){return{c:noop$1,m:noop$1,d:noop$1}}function create_if_block_5$1(A){let e,t,i,n;const g=[create_if_block_6$1,create_if_block_7$1],I=[];function o(a,r){return a[5]||a[2]||a[17].detail?0:a[4]?1:-1}return~(t=o(A))&&(i=I[t]=g[t](A)),{c(){e=element("div"),i&&i.c(),attr(e,"class","subtitle svelte-o4urkb")},m(a,r){insert(a,e,r),~t&&I[t].m(e,null),n=!0},p(a,r){let s=t;t=o(a),t===s?~t&&I[t].p(a,r):(i&&(group_outros(),transition_out(I[s],1,1,()=>{I[s]=null}),check_outros()),~t?(i=I[t],i?i.p(a,r):(i=I[t]=g[t](a),i.c()),transition_in(i,1),i.m(e,null)):i=null)},i(a){n||(transition_in(i),n=!0)},o(a){transition_out(i),n=!1},d(a){a&&detach(e),~t&&I[t].d()}}}function create_if_block_7$1(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_if_block_6$1(A){let e,t;const i=A[26].detail,n=create_slot(i,A,A[25],get_detail_slot_context),g=n||fallback_block_1$1(A);return{c(){e=element("span"),g&&g.c(),attr(e,"class","detail svelte-o4urkb")},m(I,o){insert(I,e,o),g&&g.m(e,null),t=!0},p(I,o){n?n.p&&(!t||o[0]&33554432)&&update_slot_base(n,i,I,I[25],t?get_slot_changes(i,I[25],o,get_detail_slot_changes):get_all_dirty_from_scope(I[25]),get_detail_slot_context):g&&g.p&&(!t||o[0]&100)&&g.p(I,t?o:[-1,-1])},i(I){t||(transition_in(g,I),t=!0)},o(I){transition_out(g,I),t=!1},d(I){I&&detach(e),g&&g.d(I)}}}function fallback_block_1$1(A){let e,t=(A[5]||A[2])+"",i;return{c(){e=text(A[6]),i=text(t)},m(n,g){insert(n,e,g),insert(n,i,g)},p(n,g){g[0]&64&&set_data(e,n[6]),g[0]&36&&t!==(t=(n[5]||n[2])+"")&&set_data(i,t)},d(n){n&&detach(e),n&&detach(i)}}}function create_if_block_3$3(A){let e,t,i,n,g,I={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1$1,then:create_then_block_1$1,catch:create_catch_block_1$1,value:33};handle_promise(i=A[16](A[0]),I);let o=A[1]&&create_if_block_4$3(A);return{c(){e=element("div"),t=element("span"),I.block.c(),n=space(),o&&o.c(),g=empty(),attr(t,"class","number svelte-o4urkb"),attr(e,"class","amount svelte-o4urkb")},m(a,r){insert(a,e,r),append(e,t),I.block.m(t,I.anchor=null),I.mount=()=>t,I.anchor=null,insert(a,n,r),o&&o.m(a,r),insert(a,g,r)},p(a,r){A=a,I.ctx=A,r[0]&1&&i!==(i=A[16](A[0]))&&handle_promise(i,I)||update_await_block_branch(I,A,r),A[1]?o?o.p(A,r):(o=create_if_block_4$3(A),o.c(),o.m(g.parentNode,g)):o&&(o.d(1),o=null)},i:noop$1,o:noop$1,d(a){a&&detach(e),I.block.d(),I.token=null,I=null,a&&detach(n),o&&o.d(a),a&&detach(g)}}}function create_if_block_2$6(A){let e;const t=A[26].status,i=create_slot(t,A,A[25],get_status_slot_context);return{c(){i&&i.c()},m(n,g){i&&i.m(n,g),e=!0},p(n,g){i&&i.p&&(!e||g[0]&33554432)&&update_slot_base(i,t,n,n[25],e?get_slot_changes(t,n[25],g,get_status_slot_changes):get_all_dirty_from_scope(n[25]),get_status_slot_context)},i(n){e||(transition_in(i,n),e=!0)},o(n){transition_out(i,n),e=!1},d(n){i&&i.d(n)}}}function create_catch_block_1$1(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block_1$1(A){let e,t;return{c(){e=element("span"),t=text(A[0])},m(i,n){insert(i,e,n),append(e,t)},p(i,n){n[0]&1&&set_data(t,i[0])},d(i){i&&detach(e)}}}function create_pending_block_1$1(A){let e,t;return{c(){e=element("span"),t=text(A[9]),attr(e,"class","font-family_mono svelte-o4urkb")},m(i,n){insert(i,e,n),append(e,t)},p(i,n){n[0]&512&&set_data(t,i[9])},d(i){i&&detach(e)}}}function create_if_block_4$3(A){let e,t,i,n={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$3,then:create_then_block$3,catch:create_catch_block$3,value:32};return handle_promise(i=A[1],n),{c(){e=element("div"),t=element("span"),n.block.c(),attr(t,"class","fiat svelte-o4urkb")},m(g,I){insert(g,e,I),append(e,t),n.block.m(t,n.anchor=null),n.mount=()=>t,n.anchor=null},p(g,I){A=g,n.ctx=A,I[0]&2&&i!==(i=A[1])&&handle_promise(i,n)||update_await_block_branch(n,A,I)},d(g){g&&detach(e),n.block.d(),n.token=null,n=null}}}function create_catch_block$3(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block$3(A){let e=A[32]+"",t;return{c(){t=text(e)},m(i,n){insert(i,t,n)},p(i,n){n[0]&2&&e!==(e=i[32]+"")&&set_data(t,e)},d(i){i&&detach(t)}}}function create_pending_block$3(A){let e;return{c(){e=text("$...")},m(t,i){insert(t,e,i)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$7(A){let e;const t=A[26].right,i=create_slot(t,A,A[25],get_right_slot_context);return{c(){i&&i.c()},m(n,g){i&&i.m(n,g),e=!0},p(n,g){i&&i.p&&(!e||g[0]&33554432)&&update_slot_base(i,t,n,n[25],e?get_slot_changes(t,n[25],g,get_right_slot_changes):get_all_dirty_from_scope(n[25]),get_right_slot_context)},i(n){e||(transition_in(i,n),e=!0)},o(n){transition_out(i,n),e=!1},d(n){i&&i.d(n)}}}function create_if_block$c(A){let e;const t=A[26].tags,i=create_slot(t,A,A[25],get_tags_slot_context);return{c(){i&&i.c()},m(n,g){i&&i.m(n,g),e=!0},p(n,g){i&&i.p&&(!e||g[0]&33554432)&&update_slot_base(i,t,n,n[25],e?get_slot_changes(t,n[25],g,get_tags_slot_changes):get_all_dirty_from_scope(n[25]),get_tags_slot_context)},i(n){e||(transition_in(i,n),e=!0)},o(n){transition_out(i,n),e=!1},d(n){i&&i.d(n)}}}function create_fragment$j(A){let e,t,i,n,g,I,o,a,r,s,B,C,l,c,Q,E,f,u,h,p,S,H,M,d,y;const w=A[26].icon,k=create_slot(w,A,A[25],get_icon_slot_context),D=k||fallback_block_2(A);let m=A[11]&&create_if_block_9$1(A),F=A[3]&&create_if_block_8$1(),_=(A[4]||A[2]||A[5]||A[15].length||A[17].detail)&&create_if_block_5$1(A);const N=[create_if_block_2$6,create_if_block_3$3],b=[];function U(v,P){return v[17].status?0:v[0]?1:-1}~(f=U(A))&&(u=b[f]=N[f](A));let G=A[17].right&&create_if_block_1$7(A),Y=(A[15].length||A[17].tags)&&create_if_block$c(A);const q=A[26].below,T=create_slot(q,A,A[25],get_below_slot_context);return{c(){e=element("div"),t=element("div"),i=element("span"),D&&D.c(),g=space(),I=element("span"),o=element("span"),a=element("div"),r=element("span"),s=element("span"),B=text(A[10]),C=space(),m&&m.c(),l=space(),F&&F.c(),c=space(),_&&_.c(),Q=space(),E=element("span"),u&&u.c(),h=space(),G&&G.c(),p=space(),S=element("div"),Y&&Y.c(),H=space(),T&&T.c(),attr(i,"class",n="icon "+A[8]+" svelte-o4urkb"),attr(s,"class","text svelte-o4urkb"),attr(r,"class","name svelte-o4urkb"),attr(a,"class","title svelte-o4urkb"),attr(o,"class","main part svelte-o4urkb"),attr(E,"class","status part svelte-o4urkb"),attr(I,"class","content svelte-o4urkb"),attr(t,"class","banner svelte-o4urkb"),attr(S,"class","rest svelte-o4urkb"),attr(e,"class","row "+A[14]+" svelte-o4urkb"),attr(e,"style",A[7])},m(v,P){insert(v,e,P),append(e,t),append(t,i),D&&D.m(i,null),append(t,g),append(t,I),append(I,o),append(o,a),append(a,r),append(r,s),append(s,B),append(s,C),m&&m.m(s,null),append(a,l),F&&F.m(a,null),append(o,c),_&&_.m(o,null),append(I,Q),append(I,E),~f&&b[f].m(E,null),append(t,h),G&&G.m(t,null),append(e,p),append(e,S),Y&&Y.m(S,null),append(S,H),T&&T.m(S,null),M=!0,d||(y=listen(e,"click",A[27]),d=!0)},p(v,P){k?k.p&&(!M||P[0]&33554432)&&update_slot_base(k,w,v,v[25],M?get_slot_changes(w,v[25],P,get_icon_slot_changes):get_all_dirty_from_scope(v[25]),get_icon_slot_context):D&&D.p&&(!M||P[0]&33554432)&&D.p(v,M?P:[-1,-1]),(!M||P[0]&256&&n!==(n="icon "+v[8]+" svelte-o4urkb"))&&attr(i,"class",n),v[11]&&m.p(v,P),v[3]?F||(F=create_if_block_8$1(),F.c(),F.m(a,null)):F&&(F.d(1),F=null),v[4]||v[2]||v[5]||v[15].length||v[17].detail?_?(_.p(v,P),P[0]&131124&&transition_in(_,1)):(_=create_if_block_5$1(v),_.c(),transition_in(_,1),_.m(o,null)):_&&(group_outros(),transition_out(_,1,1,()=>{_=null}),check_outros());let x=f;f=U(v),f===x?~f&&b[f].p(v,P):(u&&(group_outros(),transition_out(b[x],1,1,()=>{b[x]=null}),check_outros()),~f?(u=b[f],u?u.p(v,P):(u=b[f]=N[f](v),u.c()),transition_in(u,1),u.m(E,null)):u=null),v[17].right?G?(G.p(v,P),P[0]&131072&&transition_in(G,1)):(G=create_if_block_1$7(v),G.c(),transition_in(G,1),G.m(t,null)):G&&(group_outros(),transition_out(G,1,1,()=>{G=null}),check_outros()),v[15].length||v[17].tags?Y?(Y.p(v,P),P[0]&131072&&transition_in(Y,1)):(Y=create_if_block$c(v),Y.c(),transition_in(Y,1),Y.m(S,H)):Y&&(group_outros(),transition_out(Y,1,1,()=>{Y=null}),check_outros()),T&&T.p&&(!M||P[0]&33554432)&&update_slot_base(T,q,v,v[25],M?get_slot_changes(q,v[25],P,get_below_slot_changes):get_all_dirty_from_scope(v[25]),get_below_slot_context),(!M||P[0]&128)&&attr(e,"style",v[7])},i(v){M||(transition_in(D,v),transition_in(_),transition_in(u),transition_in(G),transition_in(Y),transition_in(T,v),M=!0)},o(v){transition_out(D,v),transition_out(_),transition_out(u),transition_out(G),transition_out(Y),transition_out(T,v),M=!1},d(v){v&&detach(e),D&&D.d(v),m&&m.d(),F&&F.d(),_&&_.d(),~f&&b[f].d(),G&&G.d(),Y&&Y.d(),T&&T.d(v),d=!1,y()}}}function instance$i(A,e,t){let i;component_subscribe(A,yw_store_tags,G=>t(28,i=G));let{$$slots:n={},$$scope:g}=e;const I=compute_slots(n);let{resourcePath:o=""}=e;const a=o;let{resource:r=null}=e;const s=r;let{name:B=s?.name}=e;const C=B;let{postname:l=""}=e;const c=l;let{pfp:Q=s?.pfp}=e;const E=Q;let{pfpDim:f=48}=e;const u=f;let{amount:h=""}=e,{fiat:p=""}=e,{symbol:S=""}=e,{lockIcon:H=!1}=e,{address:M=""}=e,{detail:d=""}=e,{prefix:y=""}=e,{rootStyle:w=""}=e,{rootClasses:k=""}=e;const D=k;let{iconClass:m=""}=e;const F=i?.getTagsFor(a)||[],_=new Set;onDestroy(()=>{for(const G of _)clearInterval(G)});let N="";async function b(G){const Y=["\u25DC \u25DD"," \u02C9\u25DE"," \u02CD\u25DD","\u25DF \u25DE","\u25DC\u02CD ","\u25DF\u02C9 "];let q=0;if(t(9,N=Y[0]),G instanceof Promise){const T=window.setInterval(()=>{q=(q+1)%Y.length,t(9,N=Y[q])},125);_.add(T);const v=await G;return clearInterval(T),v}return G}function U(G){bubble.call(this,A,G)}return A.$$set=G=>{"resourcePath"in G&&t(18,o=G.resourcePath),"resource"in G&&t(19,r=G.resource),"name"in G&&t(20,B=G.name),"postname"in G&&t(21,l=G.postname),"pfp"in G&&t(22,Q=G.pfp),"pfpDim"in G&&t(23,f=G.pfpDim),"amount"in G&&t(0,h=G.amount),"fiat"in G&&t(1,p=G.fiat),"symbol"in G&&t(2,S=G.symbol),"lockIcon"in G&&t(3,H=G.lockIcon),"address"in G&&t(4,M=G.address),"detail"in G&&t(5,d=G.detail),"prefix"in G&&t(6,y=G.prefix),"rootStyle"in G&&t(7,w=G.rootStyle),"rootClasses"in G&&t(24,k=G.rootClasses),"iconClass"in G&&t(8,m=G.iconClass),"$$scope"in G&&t(25,g=G.$$scope)},[h,p,S,H,M,d,y,w,m,N,C,c,E,u,D,F,b,I,o,r,B,l,Q,f,k,g,n,U]}class Row extends SvelteComponent{constructor(e){super(),init(this,e,instance$i,create_fragment$j,safe_not_equal,{resourcePath:18,resource:19,name:20,postname:21,pfp:22,pfpDim:23,amount:0,fiat:1,symbol:2,lockIcon:3,address:4,detail:5,prefix:6,rootStyle:7,rootClasses:24,iconClass:8},null,[-1,-1])}}var Header_svelte_svelte_type_style_lang="",SubHeader_svelte_svelte_type_style_lang="";function get_each_context$8(A,e,t){const i=A.slice();return i[10]=e[t],i}function create_each_block$8(A){let e,t,i=A[10]+"",n,g,I;function o(){return A[7](A[10])}return{c(){e=element("button"),t=element("span"),n=text(i),attr(t,"class","text"),attr(e,"class","pill")},m(a,r){insert(a,e,r),append(e,t),append(t,n),g||(I=listen(e,"click",o),g=!0)},p(a,r){A=a,r&2&&i!==(i=A[10]+"")&&set_data(n,i)},d(a){a&&detach(e),g=!1,I()}}}function create_if_block_1$6(A){let e,t,i,n,g,I;return{c(){e=element("button"),t=element("span"),i=space(),n=element("span"),n.textContent="Add New",attr(t,"class","icon svelte-44hl34"),attr(n,"class","text"),attr(e,"class","pill svelte-44hl34")},m(o,a){insert(o,e,a),append(e,t),t.innerHTML=SX_ICON_ADD$1,append(e,i),append(e,n),g||(I=listen(e,"click",A[8]),g=!0)},p:noop$1,d(o){o&&detach(e),g=!1,I()}}}function create_if_block$b(A){let e,t;return e=new Close({}),e.$on("click",A[9]),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p:noop$1,i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_fragment$i(A){let e,t,i,n,g,I,o,a,r=A[1],s=[];for(let l=0;l<r.length;l+=1)s[l]=create_each_block$8(get_each_context$8(A,r,l));let B=!A[2]&&create_if_block_1$6(A),C=A[4]&&create_if_block$b(A);return{c(){e=element("div"),t=element("span"),i=text(A[0]),n=space(),g=element("span");for(let l=0;l<s.length;l+=1)s[l].c();I=space(),B&&B.c(),o=space(),C&&C.c(),attr(t,"class","text"),attr(g,"class","right svelte-44hl34"),attr(e,"class","title svelte-44hl34")},m(l,c){insert(l,e,c),append(e,t),append(t,i),append(e,n),append(e,g);for(let Q=0;Q<s.length;Q+=1)s[Q].m(g,null);append(g,I),B&&B.m(g,null),append(g,o),C&&C.m(g,null),a=!0},p(l,[c]){if((!a||c&1)&&set_data(i,l[0]),c&34){r=l[1];let Q;for(Q=0;Q<r.length;Q+=1){const E=get_each_context$8(l,r,Q);s[Q]?s[Q].p(E,c):(s[Q]=create_each_block$8(E),s[Q].c(),s[Q].m(g,I))}for(;Q<s.length;Q+=1)s[Q].d(1);s.length=r.length}l[2]?B&&(B.d(1),B=null):B?B.p(l,c):(B=create_if_block_1$6(l),B.c(),B.m(g,o)),l[4]&&C.p(l,c)},i(l){a||(transition_in(C),a=!0)},o(l){transition_out(C),a=!1},d(l){l&&detach(e),destroy_each(s,l),B&&B.d(),C&&C.d()}}}function instance$h(A,e,t){let i;component_subscribe(A,yw_popup,l=>t(3,i=l));let{title:n}=e,{buttons:g=[]}=e,{bare:I=!1}=e,{closes:o=!1}=e;const a=o,r=createEventDispatcher(),s=l=>r(l.toLowerCase().replace(/\s/g,"_")),B=()=>r("add_new"),C=()=>set_store_value(yw_popup,i=null,i);return A.$$set=l=>{"title"in l&&t(0,n=l.title),"buttons"in l&&t(1,g=l.buttons),"bare"in l&&t(2,I=l.bare),"closes"in l&&t(6,o=l.closes)},[n,g,I,i,a,r,o,s,B,C]}class SubHeader extends SvelteComponent{constructor(e){super(),init(this,e,instance$h,create_fragment$i,safe_not_equal,{title:0,buttons:1,bare:2,closes:6})}}function cubicOut(A){const e=A-1;return e*e*e+1}function quintOut(A){return--A*A*A*A*A+1}function slide(A,{delay:e=0,duration:t=400,easing:i=cubicOut}={}){const n=getComputedStyle(A),g=+n.opacity,I=parseFloat(n.height),o=parseFloat(n.paddingTop),a=parseFloat(n.paddingBottom),r=parseFloat(n.marginTop),s=parseFloat(n.marginBottom),B=parseFloat(n.borderTopWidth),C=parseFloat(n.borderBottomWidth);return{delay:e,duration:t,easing:i,css:l=>`overflow: hidden;opacity: ${Math.min(l*20,1)*g};height: ${l*I}px;padding-top: ${l*o}px;padding-bottom: ${l*a}px;margin-top: ${l*r}px;margin-bottom: ${l*s}px;border-top-width: ${l*B}px;border-bottom-width: ${l*C}px;`}}var Field_svelte_svelte_type_style_lang="";const get_post_slot_changes=A=>({}),get_post_slot_context=A=>({});function create_fragment$h(A){let e,t,i,n,g,I,o,a,r,s,B;const C=A[6].default,l=create_slot(C,A,A[5],null),c=A[6].post,Q=create_slot(c,A,A[5],get_post_slot_context);return{c(){e=element("div"),t=element("div"),i=element("label"),n=text(A[0]),I=space(),o=element("div"),l&&l.c(),r=space(),Q&&Q.c(),attr(i,"for",A[1]),attr(t,"class","field-name svelte-yry0w8"),attr(o,"class","field-value svelte-yry0w8"),attr(e,"class","field svelte-yry0w8"),attr(e,"id",s="field-"+A[1]),toggle_class(e,"short",A[2]),toggle_class(e,"double",A[4])},m(E,f){insert(E,e,f),append(e,t),append(t,i),append(i,n),append(e,I),append(e,o),l&&l.m(o,null),append(e,r),Q&&Q.m(e,null),B=!0},p(E,[f]){A=E,(!B||f&1)&&set_data(n,A[0]),(!B||f&2)&&attr(i,"for",A[1]),l&&l.p&&(!B||f&32)&&update_slot_base(l,C,A,A[5],B?get_slot_changes(C,A[5],f,null):get_all_dirty_from_scope(A[5]),null),Q&&Q.p&&(!B||f&32)&&update_slot_base(Q,c,A,A[5],B?get_slot_changes(c,A[5],f,get_post_slot_changes):get_all_dirty_from_scope(A[5]),get_post_slot_context),(!B||f&2&&s!==(s="field-"+A[1]))&&attr(e,"id",s),f&4&&toggle_class(e,"short",A[2]),f&16&&toggle_class(e,"double",A[4])},i(E){B||(add_render_callback(()=>{g||(g=create_bidirectional_transition(t,slide,{duration:A[3]?350:0},!0)),g.run(1)}),transition_in(l,E),add_render_callback(()=>{a||(a=create_bidirectional_transition(o,slide,{duration:A[3]?350:0},!0)),a.run(1)}),transition_in(Q,E),B=!0)},o(E){g||(g=create_bidirectional_transition(t,slide,{duration:A[3]?350:0},!1)),g.run(0),transition_out(l,E),a||(a=create_bidirectional_transition(o,slide,{duration:A[3]?350:0},!1)),a.run(0),transition_out(Q,E),B=!1},d(E){E&&detach(e),E&&g&&g.end(),l&&l.d(E),E&&a&&a.end(),Q&&Q.d(E)}}}function instance$g(A,e,t){let{$$slots:i={},$$scope:n}=e,{name:g=""}=e,{key:I}=e,{short:o=!1}=e,{slides:a=!1}=e,{double:r=!1}=e;return A.$$set=s=>{"name"in s&&t(0,g=s.name),"key"in s&&t(1,I=s.key),"short"in s&&t(2,o=s.short),"slides"in s&&t(3,a=s.slides),"double"in s&&t(4,r=s.double),"$$scope"in s&&t(5,n=s.$$scope)},[g,I,o,a,r,n,i]}class Field extends SvelteComponent{constructor(e){super(),init(this,e,instance$g,create_fragment$h,safe_not_equal,{name:0,key:1,short:2,slides:3,double:4})}}var Log_svelte_svelte_type_style_lang="",ActionsLine_svelte_svelte_type_style_lang="";function create_if_block$a(A){let e,t=A[5]?"Cancel":"Back",i,n,g,I;return{c(){e=element("button"),i=text(t),e.disabled=n=A[0]||A[2],attr(e,"class","svelte-11kqquk")},m(o,a){insert(o,e,a),append(e,i),g||(I=listen(e,"click",A[15]),g=!0)},p(o,a){a&5&&n!==(n=o[0]||o[2])&&(e.disabled=n)},d(o){o&&detach(e),g=!1,I()}}}function create_fragment$g(A){let e,t,i,n,g,I,o,a=(A[5]||A[6])&&create_if_block$a(A);return{c(){e=element("div"),a&&a.c(),t=space(),i=element("button"),n=text(A[4]),i.disabled=g=A[3]||A[0]||A[1]||A[2],attr(i,"class","primary svelte-11kqquk"),attr(e,"class","actions-line svelte-11kqquk")},m(r,s){insert(r,e,s),a&&a.m(e,null),append(e,t),append(e,i),append(i,n),I||(o=listen(i,"click",A[16]),I=!0)},p(r,[s]){(r[5]||r[6])&&a.p(r,s),s&16&&set_data(n,r[4]),s&15&&g!==(g=r[3]||r[0]||r[1]||r[2])&&(i.disabled=g)},i:noop$1,o:noop$1,d(r){r&&detach(e),a&&a.d(),I=!1,o()}}}function instance$f(A,e,t){let i,n,{cancel:g=!1}=e;const I=!!g,o=typeof g=="function"?g:F_NOOP;let{back:a=!1}=e;const r=a;let{confirm:s=["Done",F_NOOP,!1]}=e;const[B,C]=s;let l="",{wait:c=0}=e;const Q=c===!0?5e3:c||0;let E=Q>0;if(E){let w=Math.round(Q/1e3);l=` (${w}s)`;const k=setInterval(()=>{w-=1,t(14,l=` (${w}s)`)},1e3);setTimeout(()=>{t(1,E=!1),t(14,l=""),clearInterval(k)},Q)}let f=!1,{disabled:u=!1}=e,{contd:h=null}=e;const p=h?()=>S.push(h):null,S=getContext("page");function H(){I&&o&&o(),(r||g==="pop")&&S.pop()}async function M(){let w=!0;t(2,f=!0);try{await(C||F_NOOP)()}catch{w=!1}t(2,f=!1),p&&w&&p()}const d=()=>H(),y=()=>M();return A.$$set=w=>{"cancel"in w&&t(9,g=w.cancel),"back"in w&&t(10,a=w.back),"confirm"in w&&t(11,s=w.confirm),"wait"in w&&t(12,c=w.wait),"disabled"in w&&t(0,u=w.disabled),"contd"in w&&t(13,h=w.contd)},A.$$.update=()=>{A.$$.dirty&16384&&t(4,i=B+l),A.$$.dirty&2048&&t(3,n=s[2]||!1)},[u,E,f,n,i,I,r,H,M,g,a,s,c,h,l,d,y]}class ActionsLine extends SvelteComponent{constructor(e){super(),init(this,e,instance$f,create_fragment$g,safe_not_equal,{cancel:9,back:10,confirm:11,wait:12,disabled:0,contd:13})}}var StarShellTitle_svelte_svelte_type_style_lang="",Register_svelte_svelte_type_style_lang="",SX_SEND=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="12" y="4" width="2" height="9" />
		<rect x="5" y="6" width="2" height="9" transform="rotate(-90 5 6)" />
		<path d="M14 5.5V4H12.5L3 13.5L4.5 15L14 5.5Z" />
	</g>
</svg>
`,SX_RECV=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none">
	<style>
		.s2r-action-recv-fg-stroke {
			stroke: var(--svg-color-fg, currentColor);
		}
	</style>
	<path style="fill:var(--svg-color-fg, currentColor)" d="M3 14h12v2H3z"/>
	<path class="s2r-action-recv-fg-stroke" d="M9 12V1M4.5 7.5 9 12l4.5-4.5" stroke-width="2"/>
</svg>`,SX_ICON_ADD=`<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22">
	<g style="fill: var(--svg-color-fg, currentColor);">
		<rect x="10" y="4" width="2" height="14" rx="1" />
		<rect x="4" y="10" width="14" height="2" ry="1" />
	</g>
</svg>`,SX_ICON_INFO=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
</svg>`,SX_ICON_EDIT$1=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a.996.996 0 0 0 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
</svg>`,SX_ICON_DELETE=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"/>
</svg>`,SX_ICON_WRAP=`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
	<style>
		.star-action-wrap-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="star-action-wrap-fg" d="M11,3.6L7.8,6.7L4.6,3.6c-0.3-0.3-0.8-0.3-1.1,0s-0.3,0.8,0,1.1l3.7,3.7c0.3,0.3,0.8,0.3,1.1,0L12,4.7 c0.3-0.3,0.3-0.8,0-1.1C11.8,3.3,11.3,3.3,11,3.6z M12.6,12.3c0,0.4-0.3,0.8-0.7,0.8H3.7c-0.4,0-0.8-0.4-0.8-0.8l0,0l0,0v-1.6 c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8v0.8H11v-0.8c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8V12.3C12.7,12.3,12.7,12.3,12.6,12.3 L12.6,12.3z" />
</svg>
`,SX_ICON_UNWRAP=`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
	<style>
		.star-action-unwrap-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="star-action-unwrap-fg" d="M12,7.8c0.3-0.3,0.3-0.8,0-1.1L8.3,3C8,2.7,7.5,2.7,7.2,3L3.5,6.8C3.2,7,3.2,7.5,3.5,7.8c0.3,0.3,0.8,0.3,1.1,0
	l3.2-3.1L11,7.8C11.3,8.1,11.8,8.1,12,7.8z M12.6,12.4c0,0.4-0.3,0.8-0.7,0.8H3.7c-0.4,0-0.8-0.4-0.8-0.8l0,0l0,0v-1.6
	c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8v0.8H11v-0.8c0-0.4,0.4-0.8,0.8-0.8s0.8,0.4,0.8,0.8V12.4L12.6,12.4L12.6,12.4z" />
</svg>
`,SX_ICON_EDIT=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<circle cx="11" cy="11" r="10" fill="none" style="stroke:var(--svg-color-bg, currentColor)"/>
	<path style="fill:var(--svg-color-fg, currentColor)" d="m8.364 11.631 5.656-5.657L16 7.954l-5.657 5.657zM7.6 12.4 7 13v2h2l.6-.6z"/>
</svg>`,SX_ICON_CHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
	<style type="text/css">
		.s2r-checked-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-checked-fg" d="M16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0ZM7.71 13.29C7.32 13.68 6.69 13.68 6.3 13.29L2.71 9.7C2.32 9.31 2.32 8.68 2.71 8.29C3.1 7.9 3.73 7.9 4.12 8.29L7 11.17L13.88 4.29C14.27 3.9 14.9 3.9 15.29 4.29C15.68 4.68 15.68 5.31 15.29 5.7L7.71 13.29Z" />
</svg>
`,SX_ICON_UNCHECKED=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
	<style type="text/css">
		.s2r-unchecked-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-unchecked-fg" d="M15 16H3C2.45 16 2 15.55 2 15V3C2 2.45 2.45 2 3 2H15C15.55 2 16 2.45 16 3V15C16 15.55 15.55 16 15 16ZM16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0Z" />
</svg>
`,CheckboxField_svelte_svelte_type_style_lang="";function create_if_block$9(A){let e,t;const i=A[8].default,n=create_slot(i,A,A[7],null);return{c(){e=element("label"),n&&n.c(),attr(e,"for",A[2])},m(g,I){insert(g,e,I),n&&n.m(e,null),t=!0},p(g,I){n&&n.p&&(!t||I&128)&&update_slot_base(n,i,g,g[7],t?get_slot_changes(i,g[7],I,null):get_all_dirty_from_scope(g[7]),null)},i(g){t||(transition_in(n,g),t=!0)},o(g){transition_out(n,g),t=!1},d(g){g&&detach(e),n&&n.d(g)}}}function create_fragment$f(A){let e,t,i,n,g,I=(A[0]?SX_ICON_CHECKED:SX_ICON_UNCHECKED)+"",o,a,r,s,B,C=A[4].default&&create_if_block$9(A);return{c(){e=element("fieldset"),t=element("span"),i=element("input"),n=space(),g=element("span"),o=space(),C&&C.c(),attr(i,"id",A[2]),attr(i,"type","checkbox"),i.hidden=!0,attr(g,"class","icon svelte-1fxz7ga"),attr(t,"class","checkbox"),attr(e,"class",a=null_to_empty(A[1])+" svelte-1fxz7ga")},m(l,c){insert(l,e,c),append(e,t),append(t,i),i.checked=A[0],append(t,n),append(t,g),g.innerHTML=I,append(e,o),C&&C.m(e,null),r=!0,s||(B=[listen(i,"change",A[9]),listen(e,"click",A[3])],s=!0)},p(l,[c]){c&1&&(i.checked=l[0]),(!r||c&1)&&I!==(I=(l[0]?SX_ICON_CHECKED:SX_ICON_UNCHECKED)+"")&&(g.innerHTML=I),l[4].default?C?(C.p(l,c),c&16&&transition_in(C,1)):(C=create_if_block$9(l),C.c(),transition_in(C,1),C.m(e,null)):C&&(group_outros(),transition_out(C,1,1,()=>{C=null}),check_outros()),(!r||c&2&&a!==(a=null_to_empty(l[1])+" svelte-1fxz7ga"))&&attr(e,"class",a)},i(l){r||(transition_in(C),r=!0)},o(l){transition_out(C),r=!1},d(l){l&&detach(e),C&&C.d(),s=!1,run_all(B)}}}function instance$e(A,e,t){let{$$slots:i={},$$scope:n}=e;const g=compute_slots(i);let{id:I}=e;const o=I;let{containerClass:a=""}=e,{checked:r=!1}=e,{disableHandler:s=!1}=e;function B(l){l.target.tagName!=="LABEL"&&(s||t(0,r=!r)),l.stopImmediatePropagation()}function C(){r=this.checked,t(0,r)}return A.$$set=l=>{"id"in l&&t(5,I=l.id),"containerClass"in l&&t(1,a=l.containerClass),"checked"in l&&t(0,r=l.checked),"disableHandler"in l&&t(6,s=l.disableHandler),"$$scope"in l&&t(7,n=l.$$scope)},[r,a,o,B,g,I,s,n,i,C]}class CheckboxField extends SvelteComponent{constructor(e){super(),init(this,e,instance$e,create_fragment$f,safe_not_equal,{id:5,containerClass:1,checked:0,disableHandler:6})}}var PopupTagsSelect_svelte_svelte_type_style_lang="";function get_each_context$7(A,e,t){const i=A.slice();return i[11]=e[t].tag,i[12]=e[t].selected,i[13]=e,i[14]=t,i}function create_right_slot$1(A){let e,t,i,n;function g(o){A[3](o,A[12],A[13],A[14])}let I={id:"tag-$"+A[11].index,disableHandler:!0};return A[12]!==void 0&&(I.checked=A[12]),e=new CheckboxField({props:I}),binding_callbacks.push(()=>bind(e,"checked",g)),{c(){create_component(e.$$.fragment),i=space()},m(o,a){mount_component(e,o,a),insert(o,i,a),n=!0},p(o,a){A=o;const r={};a&1&&(r.id="tag-$"+A[11].index),!t&&a&1&&(t=!0,r.checked=A[12],add_flush_callback(()=>t=!1)),e.$set(r)},i(o){n||(transition_in(e.$$.fragment,o),n=!0)},o(o){transition_out(e.$$.fragment,o),n=!1},d(o){destroy_component(e,o),o&&detach(i)}}}function create_each_block$7(A){let e,t;function i(){return A[4](A[11])}return e=new Row({props:{rootStyle:"--app-icon-diameter:12px;",iconClass:"align-self_center",name:A[11].name,$$slots:{right:[create_right_slot$1]},$$scope:{ctx:A}}}),e.$on("click",i),{c(){create_component(e.$$.fragment)},m(n,g){mount_component(e,n,g),t=!0},p(n,g){A=n;const I={};g&1&&(I.name=A[11].name),g&32769&&(I.$$scope={dirty:g,ctx:A}),e.$set(I)},i(n){t||(transition_in(e.$$.fragment,n),t=!0)},o(n){transition_out(e.$$.fragment,n),t=!1},d(n){destroy_component(e,n)}}}function create_fragment$e(A){let e,t,i,n,g,I,o,a;t=new SubHeader({props:{title:"Select Tag(s)",bare:!0,closes:!0}});let r=A[0],s=[];for(let C=0;C<r.length;C+=1)s[C]=create_each_block$7(get_each_context$7(A,r,C));const B=C=>transition_out(s[C],1,1,()=>{s[C]=null});return o=new ActionsLine({props:{confirm:["Apply",A[2]]}}),{c(){e=element("section"),create_component(t.$$.fragment),i=space(),n=element("div");for(let C=0;C<s.length;C+=1)s[C].c();g=space(),I=element("div"),create_component(o.$$.fragment),attr(n,"class","rows svelte-vooes4"),attr(I,"class","float svelte-vooes4"),attr(e,"class","screen")},m(C,l){insert(C,e,l),mount_component(t,e,null),append(e,i),append(e,n);for(let c=0;c<s.length;c+=1)s[c].m(n,null);append(e,g),append(e,I),mount_component(o,I,null),a=!0},p(C,[l]){if(l&3){r=C[0];let c;for(c=0;c<r.length;c+=1){const Q=get_each_context$7(C,r,c);s[c]?(s[c].p(Q,l),transition_in(s[c],1)):(s[c]=create_each_block$7(Q),s[c].c(),transition_in(s[c],1),s[c].m(n,null))}for(group_outros(),c=r.length;c<s.length;c+=1)B(c);check_outros()}},i(C){if(!a){transition_in(t.$$.fragment,C);for(let l=0;l<r.length;l+=1)transition_in(s[l]);transition_in(o.$$.fragment,C),a=!0}},o(C){transition_out(t.$$.fragment,C),s=s.filter(Boolean);for(let l=0;l<s.length;l+=1)transition_out(s[l]);transition_out(o.$$.fragment,C),a=!1},d(C){C&&detach(e),destroy_component(t),destroy_each(s,C),destroy_component(o)}}}function instance$d(A,e,t){let i,n,g;component_subscribe(A,yw_popup,c=>t(5,i=c)),component_subscribe(A,yw_store_tags,c=>t(6,n=c)),component_subscribe(A,yw_context_popup,c=>t(7,g=c));const I=g.resource,o=(c,Q)=>c.index-Q.index,a=new Set(n.getIdsFor(I));let r=n.raw.registry.sort(o).map(c=>({tag:c,selected:a.has(c.index)}));function s(c){const Q=r.find(E=>c===E.tag.index);Q.selected=!Q.selected,t(0,r)}async function B(){await n.setTagsFor(I,a_tags),set_store_value(yw_popup,i=null,i)}function C(c,Q,E,f){E[f].selected=c,t(0,r)}return[r,s,B,C,c=>s(c.index)]}class PopupTagsSelect extends SvelteComponent{constructor(e){super(),init(this,e,instance$d,create_fragment$e,safe_not_equal,{})}}var InlineTags_svelte_svelte_type_style_lang="";const get_suffix_slot_changes=A=>({}),get_suffix_slot_context=A=>({});function get_each_context$6(A,e,t){const i=A.slice();return i[26]=e[t],i[28]=t,i}const get_prefix_slot_changes=A=>({}),get_prefix_slot_context=A=>({});function create_if_block_4$2(A){let e,t,i;const n=A[17].prefix,g=create_slot(n,A,A[16],get_prefix_slot_context);return{c(){e=element("span"),g&&g.c(),attr(e,"class",t="prefix "+A[0]+" svelte-r4i5a9")},m(I,o){insert(I,e,o),g&&g.m(e,null),i=!0},p(I,o){g&&g.p&&(!i||o&65536)&&update_slot_base(g,n,I,I[16],i?get_slot_changes(n,I[16],o,get_prefix_slot_changes):get_all_dirty_from_scope(I[16]),get_prefix_slot_context),(!i||o&1&&t!==(t="prefix "+I[0]+" svelte-r4i5a9"))&&attr(e,"class",t)},i(I){i||(transition_in(g,I),i=!0)},o(I){transition_out(g,I),i=!1},d(I){I&&detach(e),g&&g.d(I)}}}function create_if_block_3$2(A){let e,t=A[26].name+"",i;return{c(){e=element("span"),i=text(t),attr(e,"class","label svelte-r4i5a9")},m(n,g){insert(n,e,g),append(e,i)},p(n,g){g&32&&t!==(t=n[26].name+"")&&set_data(i,t)},d(n){n&&detach(e)}}}function create_if_block_2$5(A){let e,t,i;function n(){return A[18](A[26])}return{c(){e=element("span"),attr(e,"class","delete icon svelte-r4i5a9")},m(g,I){insert(g,e,I),e.innerHTML=SX_ICON_ADD,t||(i=listen(e,"click",n),t=!0)},p(g,I){A=g},d(g){g&&detach(e),t=!1,i()}}}function create_each_block$6(A){let e,t,i,n,g,I=!A[7]&&create_if_block_3$2(A),o=A[6]&&create_if_block_2$5(A);return{c(){e=element("span"),I&&I.c(),t=space(),o&&o.c(),i=space(),attr(e,"class","tag svelte-r4i5a9"),set_style(e,"background-color",A[26].color),toggle_class(e,"collapsed",A[7])},m(a,r){insert(a,e,r),I&&I.m(e,null),append(e,t),o&&o.m(e,null),append(e,i),g=!0},p(a,r){A=a,A[7]||I.p(A,r),A[6]&&o.p(A,r),(!g||r&32)&&set_style(e,"background-color",A[26].color)},i(a){g||(n&&n.end(1),g=!0)},o(a){n=create_out_transition(e,A[10],{duration:A[6]?300:0}),g=!1},d(a){a&&detach(e),I&&I.d(),o&&o.d(),a&&n&&n.end()}}}function create_key_block(A){let e,t,i=A[5],n=[];for(let I=0;I<i.length;I+=1)n[I]=create_each_block$6(get_each_context$6(A,i,I));const g=I=>transition_out(n[I],1,1,()=>{n[I]=null});return{c(){for(let I=0;I<n.length;I+=1)n[I].c();e=empty()},m(I,o){for(let a=0;a<n.length;a+=1)n[a].m(I,o);insert(I,e,o),t=!0},p(I,o){if(o&736){i=I[5];let a;for(a=0;a<i.length;a+=1){const r=get_each_context$6(I,i,a);n[a]?(n[a].p(r,o),transition_in(n[a],1)):(n[a]=create_each_block$6(r),n[a].c(),transition_in(n[a],1),n[a].m(e.parentNode,e))}for(group_outros(),a=i.length;a<n.length;a+=1)g(a);check_outros()}},i(I){if(!t){for(let o=0;o<i.length;o+=1)transition_in(n[o]);t=!0}},o(I){n=n.filter(Boolean);for(let o=0;o<n.length;o+=1)transition_out(n[o]);t=!1},d(I){destroy_each(n,I),I&&detach(e)}}}function create_if_block_1$5(A){let e,t,i,n;return{c(){e=element("span"),t=element("span"),attr(t,"class","icon svelte-r4i5a9"),attr(e,"class","edit svelte-r4i5a9")},m(g,I){insert(g,e,I),append(e,t),t.innerHTML=SX_ICON_EDIT,i||(n=listen(e,"click",A[19]),i=!0)},p:noop$1,d(g){g&&detach(e),i=!1,n()}}}function create_if_block$8(A){let e,t,i;const n=A[17].suffix,g=create_slot(n,A,A[16],get_suffix_slot_context);return{c(){e=element("span"),g&&g.c(),attr(e,"class",t="suffix "+A[1]+" svelte-r4i5a9")},m(I,o){insert(I,e,o),g&&g.m(e,null),i=!0},p(I,o){g&&g.p&&(!i||o&65536)&&update_slot_base(g,n,I,I[16],i?get_slot_changes(n,I[16],o,get_suffix_slot_changes):get_all_dirty_from_scope(I[16]),get_suffix_slot_context),(!i||o&2&&t!==(t="suffix "+I[1]+" svelte-r4i5a9"))&&attr(e,"class",t)},i(I){i||(transition_in(g,I),i=!0)},o(I){transition_out(g,I),i=!1},d(I){I&&detach(e),g&&g.d(I)}}}function create_fragment$d(A){let e,t,i=A[3],n,g,I,o=A[11].prefix&&create_if_block_4$2(A),a=create_key_block(A),r=A[6]&&create_if_block_1$5(A),s=A[11].suffix&&create_if_block$8(A);return{c(){e=element("span"),o&&o.c(),t=space(),a.c(),n=space(),r&&r.c(),g=space(),s&&s.c(),attr(e,"class","cluster svelte-r4i5a9"),attr(e,"style",A[2]),toggle_class(e,"editable",A[6]),toggle_class(e,"collapsed",A[7])},m(B,C){insert(B,e,C),o&&o.m(e,null),append(e,t),a.m(e,null),append(e,n),r&&r.m(e,null),append(e,g),s&&s.m(e,null),A[20](e),I=!0},p(B,[C]){B[11].prefix?o?(o.p(B,C),C&2048&&transition_in(o,1)):(o=create_if_block_4$2(B),o.c(),transition_in(o,1),o.m(e,t)):o&&(group_outros(),transition_out(o,1,1,()=>{o=null}),check_outros()),C&8&&safe_not_equal(i,i=B[3])?(group_outros(),transition_out(a,1,1,noop$1),check_outros(),a=create_key_block(B),a.c(),transition_in(a,1),a.m(e,n)):a.p(B,C),B[6]&&r.p(B,C),B[11].suffix?s?(s.p(B,C),C&2048&&transition_in(s,1)):(s=create_if_block$8(B),s.c(),transition_in(s,1),s.m(e,null)):s&&(group_outros(),transition_out(s,1,1,()=>{s=null}),check_outros()),(!I||C&4)&&attr(e,"style",B[2])},i(B){I||(transition_in(o),transition_in(a),transition_in(s),I=!0)},o(B){transition_out(o),transition_out(a),transition_out(s),I=!1},d(B){B&&detach(e),o&&o.d(),a.d(B),r&&r.d(),s&&s.d(),A[20](null)}}}function instance$c(A,e,t){let i,n,g,I;component_subscribe(A,yw_popup,m=>t(21,n=m)),component_subscribe(A,yw_context_popup,m=>t(22,g=m)),component_subscribe(A,yw_store_tags,m=>t(15,I=m));let{$$slots:o={},$$scope:a}=e;const r=compute_slots(o);let{resourcePath:s}=e;const B=s;let{editable:C=!1}=e;const l=C;let{collapsed:c=!1}=e;const Q=c;let{prefixClass:E=""}=e,{suffixClass:f=""}=e,{rootStyle:u=""}=e,h=0;const p=yw_store_tags.subscribe(()=>t(3,h++,h));onDestroy(()=>{p()});let S;l&&(yw_context_popup.subscribe(m=>{m?.tags&&t(5,i=m.tags)}),onDestroy(()=>{set_store_value(yw_context_popup,g=null,g)}));function H(){set_store_value(yw_context_popup,g={resource:B},g),set_store_value(yw_popup,n=PopupTagsSelect,n)}let M;async function d(m){const F=i.findIndex(_=>_.index===m.index);i.splice(F,1),await S.save()}function y(m,{delay:F=0,duration:_=400,easing:N=cubicOut}={}){const b=getComputedStyle(m),U=+b.opacity,G=parseFloat(b.width),Y=parseFloat(b.paddingLeft),q=parseFloat(b.paddingRight),T=parseFloat(b.marginLeft),v=parseFloat(b.marginRight),P=parseFloat(b.borderLeftWidth),x=parseFloat(b.borderRightWidth);return{delay:F,duration:_,easing:N,css:Z=>`--delete-display: none;overflow: hidden;opacity: ${Math.min(Z*20,1)*U};width: ${Z*G}px;padding-left: ${Z*Y}px;padding-right: ${Z*q}px;margin-left: ${Z*T}px;margin-right: ${Z*v}px;border-left-width: ${Z*P}px;border-right-width: ${Z*x}px;`}}const w=m=>d(m),k=()=>H();function D(m){binding_callbacks[m?"unshift":"push"](()=>{M=m,t(4,M)})}return A.$$set=m=>{"resourcePath"in m&&t(12,s=m.resourcePath),"editable"in m&&t(13,C=m.editable),"collapsed"in m&&t(14,c=m.collapsed),"prefixClass"in m&&t(0,E=m.prefixClass),"suffixClass"in m&&t(1,f=m.suffixClass),"rootStyle"in m&&t(2,u=m.rootStyle),"$$scope"in m&&t(16,a=m.$$scope)},A.$$.update=()=>{A.$$.dirty&32768&&t(5,i=I.getTagsFor(B))},[E,f,u,h,M,i,l,Q,H,d,y,r,s,C,c,I,a,o,w,k,D]}class InlineTags extends SvelteComponent{constructor(e){super(),init(this,e,instance$c,create_fragment$d,safe_not_equal,{resourcePath:12,editable:13,collapsed:14,prefixClass:0,suffixClass:1,rootStyle:2})}}var Portrait_svelte_svelte_type_style_lang="";function get_each_context$5(A,e,t){const i=A.slice();return i[22]=e[t][0],i[23]=e[t][1],i}const get_subtitle_slot_changes=A=>({}),get_subtitle_slot_context=A=>({}),get_pfp_slot_changes=A=>({}),get_pfp_slot_context=A=>({});function create_if_block_3$1(A){let e,t,i,n;const g=[create_if_block_4$1,create_else_block$3],I=[];function o(a,r){return a[11].pfp?0:1}return t=o(A),i=I[t]=g[t](A),{c(){e=element("div"),i.c(),attr(e,"class","pfp svelte-1ilena7")},m(a,r){insert(a,e,r),I[t].m(e,null),n=!0},p(a,r){let s=t;t=o(a),t===s?I[t].p(a,r):(group_outros(),transition_out(I[s],1,1,()=>{I[s]=null}),check_outros(),i=I[t],i?i.p(a,r):(i=I[t]=g[t](a),i.c()),transition_in(i,1),i.m(e,null))},i(a){n||(transition_in(i),n=!0)},o(a){transition_out(i),n=!1},d(a){a&&detach(e),I[t].d()}}}function create_else_block$3(A){let e,t;return e=new PfpDisplay({props:{ref:A[1],resource:A[0],dim:64,circular:A[6]}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&2&&(g.ref=i[1]),n&1&&(g.resource=i[0]),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_if_block_4$1(A){let e,t;const i=A[19].pfp,n=create_slot(i,A,A[18],get_pfp_slot_context),g=n||fallback_block_1();return{c(){e=element("span"),g&&g.c(),attr(e,"class","icon svelte-1ilena7")},m(I,o){insert(I,e,o),g&&g.m(e,null),t=!0},p(I,o){n&&n.p&&(!t||o&262144)&&update_slot_base(n,i,I,I[18],t?get_slot_changes(i,I[18],o,get_pfp_slot_changes):get_all_dirty_from_scope(I[18]),get_pfp_slot_context)},i(I){t||(transition_in(g,I),t=!0)},o(I){transition_out(g,I),t=!1},d(I){I&&detach(e),g&&g.d(I)}}}function fallback_block_1(A){let e;return{c(){e=text("Empty pfp slot")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_catch_block$2(A){return{c:noop$1,m:noop$1,p:noop$1,d:noop$1}}function create_then_block$2(A){let e=A[26]+"",t;return{c(){t=text(e)},m(i,n){insert(i,t,n)},p(i,n){n&4&&e!==(e=i[26]+"")&&set_data(t,e)},d(i){i&&detach(t)}}}function create_pending_block$2(A){let e;return{c(){e=text("...")},m(t,i){insert(t,e,i)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_2$4(A){let e;return{c(){e=element("span"),attr(e,"class","info svelte-1ilena7")},m(t,i){insert(t,e,i),e.innerHTML=SX_ICON_INFO},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$4(A){let e,t,i;const n=A[19].subtitle,g=create_slot(n,A,A[18],get_subtitle_slot_context),I=g||fallback_block$1(A);return{c(){e=element("div"),t=element("span"),I&&I.c(),attr(t,"class","text"),attr(e,"class","subtitle svelte-1ilena7")},m(o,a){insert(o,e,a),append(e,t),I&&I.m(t,null),i=!0},p(o,a){g?g.p&&(!i||a&262144)&&update_slot_base(g,n,o,o[18],i?get_slot_changes(n,o[18],a,get_subtitle_slot_changes):get_all_dirty_from_scope(o[18]),get_subtitle_slot_context):I&&I.p&&(!i||a&8)&&I.p(o,i?a:-1)},i(o){i||(transition_in(I,o),i=!0)},o(o){transition_out(I,o),i=!1},d(o){o&&detach(e),I&&I.d(o)}}}function fallback_block$1(A){let e;return{c(){e=text(A[3])},m(t,i){insert(t,e,i)},p(t,i){i&8&&set_data(e,t[3])},d(t){t&&detach(e)}}}function create_if_block$7(A){let e,t=ode(A[10]),i=[];for(let n=0;n<t.length;n+=1)i[n]=create_each_block$5(get_each_context$5(A,t,n));return{c(){e=element("div");for(let n=0;n<i.length;n+=1)i[n].c();attr(e,"class","actions svelte-1ilena7")},m(n,g){insert(n,e,g);for(let I=0;I<i.length;I+=1)i[I].m(e,null)},p(n,g){if(g&1056){t=ode(n[10]);let I;for(I=0;I<t.length;I+=1){const o=get_each_context$5(n,t,I);i[I]?i[I].p(o,g):(i[I]=create_each_block$5(o),i[I].c(),i[I].m(e,null))}for(;I<i.length;I+=1)i[I].d(1);i.length=t.length}},d(n){n&&detach(e),destroy_each(i,n)}}}function create_each_block$5(A){let e,t,i=A[5][A[22]]+"",n,g,I=A[23].label+"",o,a,r,s;function B(){return A[20](A[23])}return{c(){e=element("span"),t=element("span"),n=space(),g=element("span"),o=text(I),a=space(),attr(t,"class","icon svelte-1ilena7"),attr(g,"class","label"),attr(e,"class","action action-"+A[22]+" svelte-1ilena7")},m(C,l){insert(C,e,l),append(e,t),t.innerHTML=i,append(e,n),append(e,g),append(g,o),append(e,a),r||(s=listen(e,"click",B),r=!0)},p(C,l){A=C},d(C){C&&detach(e),r=!1,s()}}}function create_fragment$c(A){let e,t,i,n,g,I,o,a,r,s,B,C=!A[7]&&create_if_block_3$1(A),l={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$2,then:create_then_block$2,catch:create_catch_block$2,value:26};handle_promise(g=A[2],l);let c=A[4]&&create_if_block_2$4(),Q=(A[3]||A[11].subtitle)&&create_if_block_1$4(A);r=new InlineTags({props:{resourcePath:A[8],rootStyle:"margin: var(--ui-padding) 0 0 0;"}});let E=A[10]&&create_if_block$7(A);return{c(){e=element("div"),C&&C.c(),t=space(),i=element("div"),n=element("span"),l.block.c(),I=space(),c&&c.c(),o=space(),Q&&Q.c(),a=space(),create_component(r.$$.fragment),s=space(),E&&E.c(),attr(n,"class","text"),attr(i,"class","title svelte-1ilena7"),attr(e,"class","portrait "+A[9]+" svelte-1ilena7"),attr(e,"data-path",A[8])},m(f,u){insert(f,e,u),C&&C.m(e,null),append(e,t),append(e,i),append(i,n),l.block.m(n,l.anchor=null),l.mount=()=>n,l.anchor=null,append(i,I),c&&c.m(i,null),append(e,o),Q&&Q.m(e,null),append(e,a),mount_component(r,e,null),append(e,s),E&&E.m(e,null),B=!0},p(f,[u]){A=f,A[7]||C.p(A,u),l.ctx=A,u&4&&g!==(g=A[2])&&handle_promise(g,l)||update_await_block_branch(l,A,u),A[4]?c?c.p(A,u):(c=create_if_block_2$4(),c.c(),c.m(i,null)):c&&(c.d(1),c=null),A[3]||A[11].subtitle?Q?(Q.p(A,u),u&2056&&transition_in(Q,1)):(Q=create_if_block_1$4(A),Q.c(),transition_in(Q,1),Q.m(e,a)):Q&&(group_outros(),transition_out(Q,1,1,()=>{Q=null}),check_outros()),A[10]&&E.p(A,u)},i(f){B||(transition_in(C),transition_in(Q),transition_in(r.$$.fragment,f),B=!0)},o(f){transition_out(C),transition_out(Q),transition_out(r.$$.fragment,f),B=!1},d(f){f&&detach(e),C&&C.d(),l.block.d(),l.token=null,l=null,c&&c.d(),Q&&Q.d(),destroy_component(r),E&&E.d()}}}var ActionId;(function(A){A.SEND="send",A.RECV="recv",A.ADD="add",A.EDIT="edit",A.WRAP="wrap",A.UNWRAP="unwrap"})(ActionId||(ActionId={}));function instance$b(A,e,t){let i;component_subscribe(A,yw_store_tags,d=>t(17,i=d));let{$$slots:n={},$$scope:g}=e;const I=compute_slots(n),o={send:SX_SEND,recv:SX_RECV,add:SX_ICON_ADD,edit:SX_ICON_EDIT$1,wrap:SX_ICON_WRAP,unwrap:SX_ICON_UNWRAP,delete:SX_ICON_DELETE};let{resource:a=null}=e,{pfp:r=a?.pfp||""}=e,{circular:s=!1}=e;const B=s;let{noPfp:C=!1}=e;const l=C;let{resourcePath:c}=e;const Q=c;let{rootClasses:E=""}=e;const f=E;let{title:u=a?.name||""}=e,{subtitle:h=""}=e,{actions:p=null}=e;const S=p;let{info:H=!1}=e;const M=d=>d.trigger();return A.$$set=d=>{"resource"in d&&t(0,a=d.resource),"pfp"in d&&t(1,r=d.pfp),"circular"in d&&t(12,s=d.circular),"noPfp"in d&&t(13,C=d.noPfp),"resourcePath"in d&&t(14,c=d.resourcePath),"rootClasses"in d&&t(15,E=d.rootClasses),"title"in d&&t(2,u=d.title),"subtitle"in d&&t(3,h=d.subtitle),"actions"in d&&t(16,p=d.actions),"info"in d&&t(4,H=d.info),"$$scope"in d&&t(18,g=d.$$scope)},A.$$.update=()=>{A.$$.dirty&131072&&i.getTagsFor(Q)},[a,r,u,h,H,o,B,l,Q,f,S,I,s,C,c,E,p,i,g,n,M]}class Portrait extends SvelteComponent{constructor(e){super(),init(this,e,instance$b,create_fragment$c,safe_not_equal,{resource:0,pfp:1,circular:12,noPfp:13,resourcePath:14,rootClasses:15,title:2,subtitle:3,actions:16,info:4})}}var SX_ICON_DROPDOWN=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
	<style type="text/css">
		.s2r-drop-down-fg {
			fill: var(--svg-color-fg, currentColor);
		}
	</style>
	<path class="s2r-drop-down-fg" d="M8.70956 11.71L11.2996 14.3C11.6896 14.69 12.3196 14.69 12.7096 14.3L15.2996 11.71C15.9296 11.08 15.4796 10 14.5896 10H9.40956C8.51956 10 8.07956 11.08 8.70956 11.71Z" />
</svg>
`;function isOutOfViewport(A,e){const t=A.getBoundingClientRect(),i=e.getBoundingClientRect(),n={};return n.top=t.top<0,n.left=t.left<0,n.bottom=t.bottom+i.height>(window.innerHeight||document.documentElement.clientHeight),n.right=t.right>(window.innerWidth||document.documentElement.clientWidth),n.any=n.top||n.left||n.bottom||n.right,n}var Item_svelte_svelte_type_style_lang="";function create_fragment$b(A){let e,t=A[0](A[1],A[2])+"",i;return{c(){e=element("div"),attr(e,"class",i="item "+A[3]+" svelte-3e0qet")},m(n,g){insert(n,e,g),e.innerHTML=t},p(n,[g]){g&7&&t!==(t=n[0](n[1],n[2])+"")&&(e.innerHTML=t),g&8&&i!==(i="item "+n[3]+" svelte-3e0qet")&&attr(e,"class",i)},i:noop$1,o:noop$1,d(n){n&&detach(e)}}}function instance$a(A,e,t){let{isActive:i=!1}=e,{isFirst:n=!1}=e,{isHover:g=!1}=e,{isSelectable:I=!1}=e,{getOptionLabel:o=void 0}=e,{item:a=void 0}=e,{filterText:r=""}=e,s="";return A.$$set=B=>{"isActive"in B&&t(4,i=B.isActive),"isFirst"in B&&t(5,n=B.isFirst),"isHover"in B&&t(6,g=B.isHover),"isSelectable"in B&&t(7,I=B.isSelectable),"getOptionLabel"in B&&t(0,o=B.getOptionLabel),"item"in B&&t(1,a=B.item),"filterText"in B&&t(2,r=B.filterText)},A.$$.update=()=>{if(A.$$.dirty&242){const B=[];i&&B.push("active"),n&&B.push("first"),g&&B.push("hover"),a.isGroupHeader&&B.push("groupHeader"),a.isGroupItem&&B.push("groupItem"),I||B.push("notSelectable"),t(3,s=B.join(" "))}},[o,a,r,s,i,n,g,I]}class Item extends SvelteComponent{constructor(e){super(),init(this,e,instance$a,create_fragment$b,safe_not_equal,{isActive:4,isFirst:5,isHover:6,isSelectable:7,getOptionLabel:0,item:1,filterText:2})}}var List_svelte_svelte_type_style_lang="";function get_each_context$4(A,e,t){const i=A.slice();return i[41]=e[t],i[42]=t,i}function create_else_block$2(A){let e,t,i=A[1],n=[];for(let o=0;o<i.length;o+=1)n[o]=create_each_block$4(get_each_context$4(A,i,o));const g=o=>transition_out(n[o],1,1,()=>{n[o]=null});let I=null;return i.length||(I=create_else_block_2(A)),{c(){for(let o=0;o<n.length;o+=1)n[o].c();e=empty(),I&&I.c()},m(o,a){for(let r=0;r<n.length;r+=1)n[r].m(o,a);insert(o,e,a),I&&I.m(o,a),t=!0},p(o,a){if(a[0]&114390){i=o[1];let r;for(r=0;r<i.length;r+=1){const s=get_each_context$4(o,i,r);n[r]?(n[r].p(s,a),transition_in(n[r],1)):(n[r]=create_each_block$4(s),n[r].c(),transition_in(n[r],1),n[r].m(e.parentNode,e))}for(group_outros(),r=i.length;r<n.length;r+=1)g(r);check_outros(),!i.length&&I?I.p(o,a):i.length?I&&(I.d(1),I=null):(I=create_else_block_2(o),I.c(),I.m(e.parentNode,e))}},i(o){if(!t){for(let a=0;a<i.length;a+=1)transition_in(n[a]);t=!0}},o(o){n=n.filter(Boolean);for(let a=0;a<n.length;a+=1)transition_out(n[a]);t=!1},d(o){destroy_each(n,o),o&&detach(e),I&&I.d(o)}}}function create_if_block$6(A){let e,t,i;var n=A[3];function g(I){return{props:{items:I[1],itemHeight:I[8],$$slots:{default:[create_default_slot$1,({item:o,i:a})=>({41:o,42:a}),({item:o,i:a})=>[0,(o?1024:0)|(a?2048:0)]]},$$scope:{ctx:I}}}}return n&&(e=new n(g(A))),{c(){e&&create_component(e.$$.fragment),t=empty()},m(I,o){e&&mount_component(e,I,o),insert(I,t,o),i=!0},p(I,o){const a={};if(o[0]&2&&(a.items=I[1]),o[0]&256&&(a.itemHeight=I[8]),o[0]&9814|o[1]&11264&&(a.$$scope={dirty:o,ctx:I}),n!==(n=I[3])){if(e){group_outros();const r=e;transition_out(r.$$.fragment,1,0,()=>{destroy_component(r,1)}),check_outros()}n?(e=new n(g(I)),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,t.parentNode,t)):e=null}else n&&e.$set(a)},i(I){i||(e&&transition_in(e.$$.fragment,I),i=!0)},o(I){e&&transition_out(e.$$.fragment,I),i=!1},d(I){I&&detach(t),e&&destroy_component(e,I)}}}function create_else_block_2(A){let e,t=!A[11]&&create_if_block_2$3(A);return{c(){t&&t.c(),e=empty()},m(i,n){t&&t.m(i,n),insert(i,e,n)},p(i,n){i[11]?t&&(t.d(1),t=null):t?t.p(i,n):(t=create_if_block_2$3(i),t.c(),t.m(e.parentNode,e))},d(i){t&&t.d(i),i&&detach(e)}}}function create_if_block_2$3(A){let e,t;return{c(){e=element("div"),t=text(A[12]),attr(e,"class","empty svelte-1uyqfml")},m(i,n){insert(i,e,n),append(e,t)},p(i,n){n[0]&4096&&set_data(t,i[12])},d(i){i&&detach(e)}}}function create_else_block_1(A){let e,t,i,n,g,I;var o=A[4];function a(C){return{props:{item:C[41],filterText:C[13],getOptionLabel:C[6],isFirst:isItemFirst(C[42]),isActive:isItemActive(C[41],C[9],C[10]),isHover:isItemHover(C[2],C[41],C[42],C[1]),isSelectable:isItemSelectable(C[41])}}}o&&(t=new o(a(A)));function r(){return A[29](A[42])}function s(){return A[30](A[42])}function B(...C){return A[31](A[41],A[42],...C)}return{c(){e=element("div"),t&&create_component(t.$$.fragment),i=space(),attr(e,"class","listItem"),attr(e,"tabindex","-1")},m(C,l){insert(C,e,l),t&&mount_component(t,e,null),append(e,i),n=!0,g||(I=[listen(e,"mouseover",r),listen(e,"focus",s),listen(e,"click",B)],g=!0)},p(C,l){A=C;const c={};if(l[0]&2&&(c.item=A[41]),l[0]&8192&&(c.filterText=A[13]),l[0]&64&&(c.getOptionLabel=A[6]),l[0]&1538&&(c.isActive=isItemActive(A[41],A[9],A[10])),l[0]&6&&(c.isHover=isItemHover(A[2],A[41],A[42],A[1])),l[0]&2&&(c.isSelectable=isItemSelectable(A[41])),o!==(o=A[4])){if(t){group_outros();const Q=t;transition_out(Q.$$.fragment,1,0,()=>{destroy_component(Q,1)}),check_outros()}o?(t=new o(a(A)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,i)):t=null}else o&&t.$set(c)},i(C){n||(t&&transition_in(t.$$.fragment,C),n=!0)},o(C){t&&transition_out(t.$$.fragment,C),n=!1},d(C){C&&detach(e),t&&destroy_component(t),g=!1,run_all(I)}}}function create_if_block_1$3(A){let e,t=A[7](A[41])+"",i;return{c(){e=element("div"),i=text(t),attr(e,"class","listGroupTitle svelte-1uyqfml")},m(n,g){insert(n,e,g),append(e,i)},p(n,g){g[0]&130&&t!==(t=n[7](n[41])+"")&&set_data(i,t)},i:noop$1,o:noop$1,d(n){n&&detach(e)}}}function create_each_block$4(A){let e,t,i,n;const g=[create_if_block_1$3,create_else_block_1],I=[];function o(a,r){return a[41].isGroupHeader&&!a[41].isSelectable?0:1}return e=o(A),t=I[e]=g[e](A),{c(){t.c(),i=empty()},m(a,r){I[e].m(a,r),insert(a,i,r),n=!0},p(a,r){let s=e;e=o(a),e===s?I[e].p(a,r):(group_outros(),transition_out(I[s],1,1,()=>{I[s]=null}),check_outros(),t=I[e],t?t.p(a,r):(t=I[e]=g[e](a),t.c()),transition_in(t,1),t.m(i.parentNode,i))},i(a){n||(transition_in(t),n=!0)},o(a){transition_out(t),n=!1},d(a){I[e].d(a),a&&detach(i)}}}function create_default_slot$1(A){let e,t,i,n,g;var I=A[4];function o(B){return{props:{item:B[41],filterText:B[13],getOptionLabel:B[6],isFirst:isItemFirst(B[42]),isActive:isItemActive(B[41],B[9],B[10]),isHover:isItemHover(B[2],B[41],B[42],B[1]),isSelectable:isItemSelectable(B[41])}}}I&&(t=new I(o(A)));function a(){return A[26](A[42])}function r(){return A[27](A[42])}function s(...B){return A[28](A[41],A[42],...B)}return{c(){e=element("div"),t&&create_component(t.$$.fragment),attr(e,"class","listItem")},m(B,C){insert(B,e,C),t&&mount_component(t,e,null),i=!0,n||(g=[listen(e,"mouseover",a),listen(e,"focus",r),listen(e,"click",s)],n=!0)},p(B,C){A=B;const l={};if(C[1]&1024&&(l.item=A[41]),C[0]&8192&&(l.filterText=A[13]),C[0]&64&&(l.getOptionLabel=A[6]),C[1]&2048&&(l.isFirst=isItemFirst(A[42])),C[0]&1536|C[1]&1024&&(l.isActive=isItemActive(A[41],A[9],A[10])),C[0]&6|C[1]&3072&&(l.isHover=isItemHover(A[2],A[41],A[42],A[1])),C[1]&1024&&(l.isSelectable=isItemSelectable(A[41])),I!==(I=A[4])){if(t){group_outros();const c=t;transition_out(c.$$.fragment,1,0,()=>{destroy_component(c,1)}),check_outros()}I?(t=new I(o(A)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,null)):t=null}else I&&t.$set(l)},i(B){i||(t&&transition_in(t.$$.fragment,B),i=!0)},o(B){t&&transition_out(t.$$.fragment,B),i=!1},d(B){B&&detach(e),t&&destroy_component(t),n=!1,run_all(g)}}}function create_fragment$a(A){let e,t,i,n,g,I;const o=[create_if_block$6,create_else_block$2],a=[];function r(s,B){return s[5]?0:1}return t=r(A),i=a[t]=o[t](A),{c(){e=element("div"),i.c(),attr(e,"class","listContainer svelte-1uyqfml"),attr(e,"style",A[14]),toggle_class(e,"virtualList",A[5])},m(s,B){insert(s,e,B),a[t].m(e,null),A[32](e),n=!0,g||(I=[listen(window,"keydown",A[17]),listen(window,"resize",A[18])],g=!0)},p(s,B){let C=t;t=r(s),t===C?a[t].p(s,B):(group_outros(),transition_out(a[C],1,1,()=>{a[C]=null}),check_outros(),i=a[t],i?i.p(s,B):(i=a[t]=o[t](s),i.c()),transition_in(i,1),i.m(e,null)),(!n||B[0]&16384)&&attr(e,"style",s[14]),B[0]&32&&toggle_class(e,"virtualList",s[5])},i(s){n||(transition_in(i),n=!0)},o(s){transition_out(i),n=!1},d(s){s&&detach(e),a[t].d(),A[32](null),g=!1,run_all(I)}}}function isItemActive(A,e,t){return e&&e[t]===A[t]}function isItemFirst(A){return A===0}function isItemHover(A,e,t,i){return isItemSelectable(e)&&(A===t||i.length===1)}function isItemSelectable(A){return A.isGroupHeader&&A.isSelectable||A.selectable||!A.hasOwnProperty("selectable")}function instance$9(A,e,t){const i=createEventDispatcher();let{container:n=void 0}=e,{VirtualList:g=null}=e,{Item:I=Item}=e,{isVirtualList:o=!1}=e,{items:a=[]}=e,{labelIdentifier:r="label"}=e,{getOptionLabel:s=(J,X)=>{if(J)return J.isCreator?`Create "${X}"`:J[r]}}=e,{getGroupHeaderLabel:B=null}=e,{itemHeight:C=40}=e,{hoverItemIndex:l=0}=e,{value:c=void 0}=e,{optionIdentifier:Q="value"}=e,{hideEmptyState:E=!1}=e,{noOptionsMessage:f="No options"}=e,{isMulti:u=!1}=e,{activeItemIndex:h=0}=e,{filterText:p=""}=e,{parent:S=null}=e,{listPlacement:H=null}=e,{listAutoWidth:M=null}=e,{listOffset:d=5}=e,y=0,w=!1,k;onMount(()=>{if(a.length>0&&!u&&c){const J=a.findIndex(X=>X[Q]===c[Q]);J&&t(2,l=J)}U("active"),n.addEventListener("scroll",()=>{clearTimeout(y),y=setTimeout(()=>{w=!1},100)},!1)}),beforeUpdate(()=>{a||t(1,a=[]),a!==k&&a.length>0&&t(2,l=0),k=a});function D(J){J.isCreator||i("itemSelected",J)}function m(J){w||t(2,l=J)}function F(J){const{item:X,i:nA,event:IA}=J;if(IA.stopPropagation(),c&&!u&&c[Q]===X[Q])return _();X.isCreator?i("itemCreated",p):isItemSelectable(X)&&(t(19,h=nA),t(2,l=nA),D(X))}function _(){i("closeList")}async function N(J){if(o)return;let X=!0;for(;X;)J>0&&l===a.length-1?t(2,l=0):J<0&&l===0?t(2,l=a.length-1):t(2,l=l+J),X=!isItemSelectable(a[l]);await tick(),U("hover")}function b(J){switch(J.key){case"Escape":J.preventDefault(),_();break;case"ArrowDown":J.preventDefault(),a.length&&N(1);break;case"ArrowUp":J.preventDefault(),a.length&&N(-1);break;case"Enter":if(J.preventDefault(),a.length===0)break;const X=a[l];if(c&&!u&&c[Q]===X[Q]){_();break}X.isCreator?i("itemCreated",p):(t(19,h=l),D(a[l]));break;case"Tab":if(J.preventDefault(),a.length===0||c&&c[Q]===a[l][Q])return _();t(19,h=l),D(a[l]);break}}function U(J){if(o||!n)return;let X;const nA=n.querySelector(`.listItem .${J}`);nA&&(X=n.getBoundingClientRect().bottom-nA.getBoundingClientRect().bottom),t(0,n.scrollTop-=X,n)}let G;function Y(){const{height:J,width:X}=S.getBoundingClientRect();t(14,G=""),t(14,G+=`min-width:${X}px;width:${M?"auto":"100%"};`),H==="top"||H==="auto"&&isOutOfViewport(S,n).bottom?t(14,G+=`bottom:${J+d}px;`):t(14,G+=`top:${J+d}px;`)}const q=J=>m(J),T=J=>m(J),v=(J,X,nA)=>F({item:J,i:X,event:nA}),P=J=>m(J),x=J=>m(J),Z=(J,X,nA)=>F({item:J,i:X,event:nA});function eA(J){binding_callbacks[J?"unshift":"push"](()=>{n=J,t(0,n)})}return A.$$set=J=>{"container"in J&&t(0,n=J.container),"VirtualList"in J&&t(3,g=J.VirtualList),"Item"in J&&t(4,I=J.Item),"isVirtualList"in J&&t(5,o=J.isVirtualList),"items"in J&&t(1,a=J.items),"labelIdentifier"in J&&t(20,r=J.labelIdentifier),"getOptionLabel"in J&&t(6,s=J.getOptionLabel),"getGroupHeaderLabel"in J&&t(7,B=J.getGroupHeaderLabel),"itemHeight"in J&&t(8,C=J.itemHeight),"hoverItemIndex"in J&&t(2,l=J.hoverItemIndex),"value"in J&&t(9,c=J.value),"optionIdentifier"in J&&t(10,Q=J.optionIdentifier),"hideEmptyState"in J&&t(11,E=J.hideEmptyState),"noOptionsMessage"in J&&t(12,f=J.noOptionsMessage),"isMulti"in J&&t(21,u=J.isMulti),"activeItemIndex"in J&&t(19,h=J.activeItemIndex),"filterText"in J&&t(13,p=J.filterText),"parent"in J&&t(22,S=J.parent),"listPlacement"in J&&t(23,H=J.listPlacement),"listAutoWidth"in J&&t(24,M=J.listAutoWidth),"listOffset"in J&&t(25,d=J.listOffset)},A.$$.update=()=>{A.$$.dirty[0]&4194305&&S&&n&&Y()},[n,a,l,g,I,o,s,B,C,c,Q,E,f,p,G,m,F,b,Y,h,r,u,S,H,M,d,q,T,v,P,x,Z,eA]}class List extends SvelteComponent{constructor(e){super(),init(this,e,instance$9,create_fragment$a,safe_not_equal,{container:0,VirtualList:3,Item:4,isVirtualList:5,items:1,labelIdentifier:20,getOptionLabel:6,getGroupHeaderLabel:7,itemHeight:8,hoverItemIndex:2,value:9,optionIdentifier:10,hideEmptyState:11,noOptionsMessage:12,isMulti:21,activeItemIndex:19,filterText:13,parent:22,listPlacement:23,listAutoWidth:24,listOffset:25},null,[-1,-1])}}var Selection_svelte_svelte_type_style_lang="";function create_fragment$9(A){let e,t=A[0](A[1])+"";return{c(){e=element("div"),attr(e,"class","selection svelte-pu1q1n")},m(i,n){insert(i,e,n),e.innerHTML=t},p(i,[n]){n&3&&t!==(t=i[0](i[1])+"")&&(e.innerHTML=t)},i:noop$1,o:noop$1,d(i){i&&detach(e)}}}function instance$8(A,e,t){let{getSelectionLabel:i=void 0}=e,{item:n=void 0}=e;return A.$$set=g=>{"getSelectionLabel"in g&&t(0,i=g.getSelectionLabel),"item"in g&&t(1,n=g.item)},[i,n]}class Selection extends SvelteComponent{constructor(e){super(),init(this,e,instance$8,create_fragment$9,safe_not_equal,{getSelectionLabel:0,item:1})}}var MultiSelection_svelte_svelte_type_style_lang="";function get_each_context$3(A,e,t){const i=A.slice();return i[9]=e[t],i[11]=t,i}function create_if_block$5(A){let e,t,i;function n(...g){return A[6](A[11],...g)}return{c(){e=element("div"),e.innerHTML='<svg width="100%" height="100%" viewBox="-2 -2 50 50" focusable="false" aria-hidden="true" role="presentation" class="svelte-liu9pa"><path d="M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z"></path></svg>',attr(e,"class","multiSelectItem_clear svelte-liu9pa")},m(g,I){insert(g,e,I),t||(i=listen(e,"click",n),t=!0)},p(g,I){A=g},d(g){g&&detach(e),t=!1,i()}}}function create_each_block$3(A){let e,t,i=A[4](A[9])+"",n,g,I,o,a,r=!A[2]&&!A[3]&&create_if_block$5(A);function s(...B){return A[7](A[11],...B)}return{c(){e=element("div"),t=element("div"),n=space(),r&&r.c(),g=space(),attr(t,"class","multiSelectItem_label svelte-liu9pa"),attr(e,"class",I="multiSelectItem "+(A[1]===A[11]?"active":"")+" "+(A[2]?"disabled":"")+" svelte-liu9pa")},m(B,C){insert(B,e,C),append(e,t),t.innerHTML=i,append(e,n),r&&r.m(e,null),append(e,g),o||(a=listen(e,"click",s),o=!0)},p(B,C){A=B,C&17&&i!==(i=A[4](A[9])+"")&&(t.innerHTML=i),!A[2]&&!A[3]?r?r.p(A,C):(r=create_if_block$5(A),r.c(),r.m(e,g)):r&&(r.d(1),r=null),C&6&&I!==(I="multiSelectItem "+(A[1]===A[11]?"active":"")+" "+(A[2]?"disabled":"")+" svelte-liu9pa")&&attr(e,"class",I)},d(B){B&&detach(e),r&&r.d(),o=!1,a()}}}function create_fragment$8(A){let e,t=A[0],i=[];for(let n=0;n<t.length;n+=1)i[n]=create_each_block$3(get_each_context$3(A,t,n));return{c(){for(let n=0;n<i.length;n+=1)i[n].c();e=empty()},m(n,g){for(let I=0;I<i.length;I+=1)i[I].m(n,g);insert(n,e,g)},p(n,[g]){if(g&63){t=n[0];let I;for(I=0;I<t.length;I+=1){const o=get_each_context$3(n,t,I);i[I]?i[I].p(o,g):(i[I]=create_each_block$3(o),i[I].c(),i[I].m(e.parentNode,e))}for(;I<i.length;I+=1)i[I].d(1);i.length=t.length}},i:noop$1,o:noop$1,d(n){destroy_each(i,n),n&&detach(e)}}}function instance$7(A,e,t){const i=createEventDispatcher();let{value:n=[]}=e,{activeValue:g=void 0}=e,{isDisabled:I=!1}=e,{multiFullItemClearable:o=!1}=e,{getSelectionLabel:a=void 0}=e;function r(C,l){l.stopPropagation(),i("multiItemClear",{i:C})}const s=(C,l)=>r(C,l),B=(C,l)=>o?r(C,l):{};return A.$$set=C=>{"value"in C&&t(0,n=C.value),"activeValue"in C&&t(1,g=C.activeValue),"isDisabled"in C&&t(2,I=C.isDisabled),"multiFullItemClearable"in C&&t(3,o=C.multiFullItemClearable),"getSelectionLabel"in C&&t(4,a=C.getSelectionLabel)},[n,g,I,o,a,r,s,B]}class MultiSelection extends SvelteComponent{constructor(e){super(),init(this,e,instance$7,create_fragment$8,safe_not_equal,{value:0,activeValue:1,isDisabled:2,multiFullItemClearable:3,getSelectionLabel:4})}}var VirtualList_svelte_svelte_type_style_lang="";function get_each_context$2(A,e,t){const i=A.slice();return i[23]=e[t],i}const get_default_slot_changes=A=>({item:A&32,i:A&32,hoverItemIndex:A&2}),get_default_slot_context=A=>({item:A[23].data,i:A[23].index,hoverItemIndex:A[1]});function fallback_block(A){let e;return{c(){e=text("Missing template")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_each_block$2(A,e){let t,i,n;const g=e[15].default,I=create_slot(g,e,e[14],get_default_slot_context),o=I||fallback_block();return{key:A,first:null,c(){t=element("svelte-virtual-list-row"),o&&o.c(),i=space(),set_custom_element_data(t,"class","svelte-g2cagw"),this.first=t},m(a,r){insert(a,t,r),o&&o.m(t,null),append(t,i),n=!0},p(a,r){e=a,I&&I.p&&(!n||r&16418)&&update_slot_base(I,g,e,e[14],n?get_slot_changes(g,e[14],r,get_default_slot_changes):get_all_dirty_from_scope(e[14]),get_default_slot_context)},i(a){n||(transition_in(o,a),n=!0)},o(a){transition_out(o,a),n=!1},d(a){a&&detach(t),o&&o.d(a)}}}function create_fragment$7(A){let e,t,i=[],n=new Map,g,I,o,a,r=A[5];const s=B=>B[23].index;for(let B=0;B<r.length;B+=1){let C=get_each_context$2(A,r,B),l=s(C);n.set(l,i[B]=create_each_block$2(l,C))}return{c(){e=element("svelte-virtual-list-viewport"),t=element("svelte-virtual-list-contents");for(let B=0;B<i.length;B+=1)i[B].c();set_style(t,"padding-top",A[6]+"px"),set_style(t,"padding-bottom",A[7]+"px"),set_custom_element_data(t,"class","svelte-g2cagw"),set_style(e,"height",A[0]),set_custom_element_data(e,"class","svelte-g2cagw"),add_render_callback(()=>A[18].call(e))},m(B,C){insert(B,e,C),append(e,t);for(let l=0;l<i.length;l+=1)i[l].m(t,null);A[16](t),A[17](e),g=add_resize_listener(e,A[18].bind(e)),I=!0,o||(a=listen(e,"scroll",A[8]),o=!0)},p(B,[C]){C&16418&&(r=B[5],group_outros(),i=update_keyed_each(i,C,s,1,B,r,n,t,outro_and_destroy_block,create_each_block$2,null,get_each_context$2),check_outros()),(!I||C&64)&&set_style(t,"padding-top",B[6]+"px"),(!I||C&128)&&set_style(t,"padding-bottom",B[7]+"px"),(!I||C&1)&&set_style(e,"height",B[0])},i(B){if(!I){for(let C=0;C<r.length;C+=1)transition_in(i[C]);I=!0}},o(B){for(let C=0;C<i.length;C+=1)transition_out(i[C]);I=!1},d(B){B&&detach(e);for(let C=0;C<i.length;C+=1)i[C].d();A[16](null),A[17](null),g(),o=!1,a()}}}function instance$6(A,e,t){let{$$slots:i={},$$scope:n}=e,{items:g=void 0}=e,{height:I="100%"}=e,{itemHeight:o=40}=e,{hoverItemIndex:a=0}=e,{start:r=0}=e,{end:s=0}=e,B=[],C,l,c,Q=0,E,f,u=0,h=0,p;async function S(w,k,D){const{scrollTop:m}=l;await tick();let F=u-m,_=r;for(;F<k&&_<w.length;){let b=C[_-r];b||(t(10,s=_+1),await tick(),b=C[_-r]),F+=B[_]=D||b.offsetHeight,_+=1}t(10,s=_);const N=w.length-s;p=(u+F)/s,t(7,h=N*p),B.length=w.length,l&&t(3,l.scrollTop=0,l)}async function H(){const{scrollTop:w}=l,k=r;for(let _=0;_<C.length;_+=1)B[r+_]=o||C[_].offsetHeight;let D=0,m=0;for(;D<g.length;){const _=B[D]||p;if(m+_>w){t(9,r=D),t(6,u=m);break}m+=_,D+=1}for(;D<g.length&&(m+=B[D]||p,D+=1,!(m>w+Q)););t(10,s=D);const F=g.length-s;for(p=m/s;D<g.length;)B[D++]=p;if(t(7,h=F*p),r<k){await tick();let _=0,N=0;for(let U=r;U<k;U+=1)C[U-r]&&(_+=B[U],N+=o||C[U-r].offsetHeight);const b=N-_;l.scrollTo(0,w+b)}}onMount(()=>{C=c.getElementsByTagName("svelte-virtual-list-row"),t(13,f=!0)});function M(w){binding_callbacks[w?"unshift":"push"](()=>{c=w,t(4,c)})}function d(w){binding_callbacks[w?"unshift":"push"](()=>{l=w,t(3,l)})}function y(){Q=this.offsetHeight,t(2,Q)}return A.$$set=w=>{"items"in w&&t(11,g=w.items),"height"in w&&t(0,I=w.height),"itemHeight"in w&&t(12,o=w.itemHeight),"hoverItemIndex"in w&&t(1,a=w.hoverItemIndex),"start"in w&&t(9,r=w.start),"end"in w&&t(10,s=w.end),"$$scope"in w&&t(14,n=w.$$scope)},A.$$.update=()=>{A.$$.dirty&3584&&t(5,E=g.slice(r,s).map((w,k)=>({index:k+r,data:w}))),A.$$.dirty&14340&&f&&S(g,Q,o)},[I,a,Q,l,c,E,u,h,H,r,s,g,o,f,n,i,M,d,y]}class VirtualList extends SvelteComponent{constructor(e){super(),init(this,e,instance$6,create_fragment$7,safe_not_equal,{items:11,height:0,itemHeight:12,hoverItemIndex:1,start:9,end:10})}}function create_fragment$6(A){let e,t;return{c(){e=svg_element("svg"),t=svg_element("path"),attr(t,"fill","currentColor"),attr(t,"d",`M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124
    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z`),attr(e,"width","100%"),attr(e,"height","100%"),attr(e,"viewBox","-2 -2 50 50"),attr(e,"focusable","false"),attr(e,"aria-hidden","true"),attr(e,"role","presentation")},m(i,n){insert(i,e,n),append(e,t)},p:noop$1,i:noop$1,o:noop$1,d(i){i&&detach(e)}}}class ClearIcon extends SvelteComponent{constructor(e){super(),init(this,e,null,create_fragment$6,safe_not_equal,{})}}function debounce(A,e,t){let i;return function(){let g=this,I=arguments,o=function(){i=null,t||A.apply(g,I)},a=t&&!i;clearTimeout(i),i=setTimeout(o,e),a&&A.apply(g,I)}}var Select_svelte_svelte_type_style_lang="";function get_each_context$1(A,e,t){const i=A.slice();return i[103]=e[t],i}function create_if_block_10(A){let e,t,i,n,g;return{c(){e=element("span"),t=text(A[33]),i=space(),n=element("span"),g=text(A[32]),attr(e,"id","aria-selection"),attr(n,"id","aria-context")},m(I,o){insert(I,e,o),append(e,t),insert(I,i,o),insert(I,n,o),append(n,g)},p(I,o){o[1]&4&&set_data(t,I[33]),o[1]&2&&set_data(g,I[32])},d(I){I&&detach(e),I&&detach(i),I&&detach(n)}}}function create_if_block_9(A){let e,t,i;const n=[A[18]];var g=A[17];function I(o){let a={};for(let r=0;r<n.length;r+=1)a=assign(a,n[r]);return{props:a}}return g&&(e=new g(I())),{c(){e&&create_component(e.$$.fragment),t=empty()},m(o,a){e&&mount_component(e,o,a),insert(o,t,a),i=!0},p(o,a){const r=a[0]&262144?get_spread_update(n,[get_spread_object(o[18])]):{};if(g!==(g=o[17])){if(e){group_outros();const s=e;transition_out(s.$$.fragment,1,0,()=>{destroy_component(s,1)}),check_outros()}g?(e=new g(I()),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,t.parentNode,t)):e=null}else g&&e.$set(r)},i(o){i||(e&&transition_in(e.$$.fragment,o),i=!0)},o(o){e&&transition_out(e.$$.fragment,o),i=!1},d(o){o&&detach(t),e&&destroy_component(e,o)}}}function create_if_block_8(A){let e,t,i;var n=A[26];function g(I){return{props:{value:I[2],getSelectionLabel:I[12],activeValue:I[30],isDisabled:I[9],multiFullItemClearable:I[8]}}}return n&&(e=new n(g(A)),e.$on("multiItemClear",A[38]),e.$on("focus",A[40])),{c(){e&&create_component(e.$$.fragment),t=empty()},m(I,o){e&&mount_component(e,I,o),insert(I,t,o),i=!0},p(I,o){const a={};if(o[0]&4&&(a.value=I[2]),o[0]&4096&&(a.getSelectionLabel=I[12]),o[0]&1073741824&&(a.activeValue=I[30]),o[0]&512&&(a.isDisabled=I[9]),o[0]&256&&(a.multiFullItemClearable=I[8]),n!==(n=I[26])){if(e){group_outros();const r=e;transition_out(r.$$.fragment,1,0,()=>{destroy_component(r,1)}),check_outros()}n?(e=new n(g(I)),e.$on("multiItemClear",I[38]),e.$on("focus",I[40]),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,t.parentNode,t)):e=null}else n&&e.$set(a)},i(I){i||(e&&transition_in(e.$$.fragment,I),i=!0)},o(I){e&&transition_out(e.$$.fragment,I),i=!1},d(I){I&&detach(t),e&&destroy_component(e,I)}}}function create_if_block_7(A){let e,t,i,n,g;var I=A[25];function o(a){return{props:{item:a[2],getSelectionLabel:a[12]}}}return I&&(t=new I(o(A))),{c(){e=element("div"),t&&create_component(t.$$.fragment),attr(e,"class","selectedItem svelte-17l1npl")},m(a,r){insert(a,e,r),t&&mount_component(t,e,null),i=!0,n||(g=listen(e,"focus",A[40]),n=!0)},p(a,r){const s={};if(r[0]&4&&(s.item=a[2]),r[0]&4096&&(s.getSelectionLabel=a[12]),I!==(I=a[25])){if(t){group_outros();const B=t;transition_out(B.$$.fragment,1,0,()=>{destroy_component(B,1)}),check_outros()}I?(t=new I(o(a)),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,null)):t=null}else I&&t.$set(s)},i(a){i||(t&&transition_in(t.$$.fragment,a),i=!0)},o(a){t&&transition_out(t.$$.fragment,a),i=!1},d(a){a&&detach(e),t&&destroy_component(t),n=!1,g()}}}function create_if_block_6(A){let e,t,i,n,g;var I=A[23];function o(a){return{}}return I&&(t=new I(o())),{c(){e=element("div"),t&&create_component(t.$$.fragment),attr(e,"class","clearSelect svelte-17l1npl"),attr(e,"aria-hidden","true")},m(a,r){insert(a,e,r),t&&mount_component(t,e,null),i=!0,n||(g=listen(e,"click",prevent_default(A[27])),n=!0)},p(a,r){if(I!==(I=a[23])){if(t){group_outros();const s=t;transition_out(s.$$.fragment,1,0,()=>{destroy_component(s,1)}),check_outros()}I?(t=new I(o()),create_component(t.$$.fragment),transition_in(t.$$.fragment,1),mount_component(t,e,null)):t=null}},i(a){i||(t&&transition_in(t.$$.fragment,a),i=!0)},o(a){t&&transition_out(t.$$.fragment,a),i=!1},d(a){a&&detach(e),t&&destroy_component(t),n=!1,g()}}}function create_if_block_4(A){let e;function t(g,I){return g[22]?create_if_block_5:create_else_block$1}let i=t(A),n=i(A);return{c(){e=element("div"),n.c(),attr(e,"class","indicator svelte-17l1npl"),attr(e,"aria-hidden","true")},m(g,I){insert(g,e,I),n.m(e,null)},p(g,I){i===(i=t(g))&&n?n.p(g,I):(n.d(1),n=i(g),n&&(n.c(),n.m(e,null)))},d(g){g&&detach(e),n.d()}}}function create_else_block$1(A){let e,t;return{c(){e=svg_element("svg"),t=svg_element("path"),attr(t,"d",`M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747
          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0
          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502
          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0
          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z`),attr(e,"width","100%"),attr(e,"height","100%"),attr(e,"viewBox","0 0 20 20"),attr(e,"focusable","false"),attr(e,"aria-hidden","true"),attr(e,"class","svelte-17l1npl")},m(i,n){insert(i,e,n),append(e,t)},p:noop$1,d(i){i&&detach(e)}}}function create_if_block_5(A){let e,t;return{c(){e=new HtmlTag(!1),t=empty(),e.a=t},m(i,n){e.m(A[22],i,n),insert(i,t,n)},p(i,n){n[0]&4194304&&e.p(i[22])},d(i){i&&detach(t),i&&e.d()}}}function create_if_block_3(A){let e;return{c(){e=element("div"),e.innerHTML='<svg class="spinner_icon svelte-17l1npl" viewBox="25 25 50 50"><circle class="spinner_path svelte-17l1npl" cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="5" stroke-miterlimit="10"></circle></svg>',attr(e,"class","spinner svelte-17l1npl")},m(t,i){insert(t,e,i)},d(t){t&&detach(e)}}}function create_if_block_2$2(A){let e,t,i,n;const g=[A[34]];function I(r){A[84](r)}var o=A[24];function a(r){let s={};for(let B=0;B<g.length;B+=1)s=assign(s,g[B]);return r[28]!==void 0&&(s.hoverItemIndex=r[28]),{props:s}}return o&&(e=new o(a(A)),binding_callbacks.push(()=>bind(e,"hoverItemIndex",I)),e.$on("itemSelected",A[43]),e.$on("itemCreated",A[44]),e.$on("closeList",A[45])),{c(){e&&create_component(e.$$.fragment),i=empty()},m(r,s){e&&mount_component(e,r,s),insert(r,i,s),n=!0},p(r,s){const B=s[1]&8?get_spread_update(g,[get_spread_object(r[34])]):{};if(!t&&s[0]&268435456&&(t=!0,B.hoverItemIndex=r[28],add_flush_callback(()=>t=!1)),o!==(o=r[24])){if(e){group_outros();const C=e;transition_out(C.$$.fragment,1,0,()=>{destroy_component(C,1)}),check_outros()}o?(e=new o(a(r)),binding_callbacks.push(()=>bind(e,"hoverItemIndex",I)),e.$on("itemSelected",r[43]),e.$on("itemCreated",r[44]),e.$on("closeList",r[45]),create_component(e.$$.fragment),transition_in(e.$$.fragment,1),mount_component(e,i.parentNode,i)):e=null}else o&&e.$set(B)},i(r){n||(e&&transition_in(e.$$.fragment,r),n=!0)},o(r){e&&transition_out(e.$$.fragment,r),n=!1},d(r){r&&detach(i),e&&destroy_component(e,r)}}}function create_if_block_1$2(A){let e,t,i;return{c(){e=element("input"),attr(e,"name",t=A[16].name),attr(e,"type","hidden"),e.value=i=A[2]?A[12](A[2]):null,attr(e,"class","svelte-17l1npl")},m(n,g){insert(n,e,g)},p(n,g){g[0]&65536&&t!==(t=n[16].name)&&attr(e,"name",t),g[0]&4100&&i!==(i=n[2]?n[12](n[2]):null)&&(e.value=i)},d(n){n&&detach(e)}}}function create_if_block$4(A){let e,t=A[2],i=[];for(let n=0;n<t.length;n+=1)i[n]=create_each_block$1(get_each_context$1(A,t,n));return{c(){for(let n=0;n<i.length;n+=1)i[n].c();e=empty()},m(n,g){for(let I=0;I<i.length;I+=1)i[I].m(n,g);insert(n,e,g)},p(n,g){if(g[0]&69636){t=n[2];let I;for(I=0;I<t.length;I+=1){const o=get_each_context$1(n,t,I);i[I]?i[I].p(o,g):(i[I]=create_each_block$1(o),i[I].c(),i[I].m(e.parentNode,e))}for(;I<i.length;I+=1)i[I].d(1);i.length=t.length}},d(n){destroy_each(i,n),n&&detach(e)}}}function create_each_block$1(A){let e,t,i;return{c(){e=element("input"),attr(e,"name",t=A[16].name),attr(e,"type","hidden"),e.value=i=A[103]?A[12](A[103]):null,attr(e,"class","svelte-17l1npl")},m(n,g){insert(n,e,g)},p(n,g){g[0]&65536&&t!==(t=n[16].name)&&attr(e,"name",t),g[0]&4100&&i!==(i=n[103]?n[12](n[103]):null)&&(e.value=i)},d(n){n&&detach(e)}}}function create_fragment$5(A){let e,t,i,n,g,I,o,a,r,s,B,C,l,c,Q,E,f,u,h=A[1]&&create_if_block_10(A),p=A[17]&&create_if_block_9(A),S=A[35]&&create_if_block_8(A),H=[{readOnly:o=!A[13]},A[31],{placeholder:A[36]},{style:A[14]},{disabled:A[9]}],M={};for(let _=0;_<H.length;_+=1)M=assign(M,H[_]);let d=!A[7]&&A[29]&&create_if_block_7(A),y=A[37]&&create_if_block_6(A),w=!A[37]&&(A[20]||A[19]&&!A[2]||!A[13]&&!A[9]&&!A[4]&&(A[29]&&!A[15]||!A[29]))&&create_if_block_4(A),k=A[4]&&create_if_block_3(),D=A[5]&&create_if_block_2$2(A),m=(!A[7]||A[7]&&!A[35])&&create_if_block_1$2(A),F=A[7]&&A[35]&&create_if_block$4(A);return{c(){e=element("div"),t=element("span"),h&&h.c(),i=space(),p&&p.c(),n=space(),S&&S.c(),g=space(),I=element("input"),a=space(),d&&d.c(),r=space(),y&&y.c(),s=space(),w&&w.c(),B=space(),k&&k.c(),C=space(),D&&D.c(),l=space(),m&&m.c(),c=space(),F&&F.c(),attr(t,"aria-live","polite"),attr(t,"aria-atomic","false"),attr(t,"aria-relevant","additions text"),attr(t,"class","a11yText svelte-17l1npl"),set_attributes(I,M),toggle_class(I,"svelte-17l1npl",!0),attr(e,"class",Q="selectContainer "+A[21]+" svelte-17l1npl"),attr(e,"style",A[11]),toggle_class(e,"hasError",A[10]),toggle_class(e,"multiSelect",A[7]),toggle_class(e,"disabled",A[9]),toggle_class(e,"focused",A[1])},m(_,N){insert(_,e,N),append(e,t),h&&h.m(t,null),append(e,i),p&&p.m(e,null),append(e,n),S&&S.m(e,null),append(e,g),append(e,I),I.autofocus&&I.focus(),A[82](I),set_input_value(I,A[3]),append(e,a),d&&d.m(e,null),append(e,r),y&&y.m(e,null),append(e,s),w&&w.m(e,null),append(e,B),k&&k.m(e,null),append(e,C),D&&D.m(e,null),append(e,l),m&&m.m(e,null),append(e,c),F&&F.m(e,null),A[85](e),E=!0,f||(u=[listen(window,"click",A[41]),listen(window,"focusin",A[41]),listen(window,"keydown",A[39]),listen(I,"focus",A[40]),listen(I,"input",A[83]),listen(e,"click",A[42])],f=!0)},p(_,N){_[1]?h?h.p(_,N):(h=create_if_block_10(_),h.c(),h.m(t,null)):h&&(h.d(1),h=null),_[17]?p?(p.p(_,N),N[0]&131072&&transition_in(p,1)):(p=create_if_block_9(_),p.c(),transition_in(p,1),p.m(e,n)):p&&(group_outros(),transition_out(p,1,1,()=>{p=null}),check_outros()),_[35]?S?(S.p(_,N),N[1]&16&&transition_in(S,1)):(S=create_if_block_8(_),S.c(),transition_in(S,1),S.m(e,g)):S&&(group_outros(),transition_out(S,1,1,()=>{S=null}),check_outros()),set_attributes(I,M=get_spread_update(H,[(!E||N[0]&8192&&o!==(o=!_[13]))&&{readOnly:o},N[1]&1&&_[31],(!E||N[1]&32)&&{placeholder:_[36]},(!E||N[0]&16384)&&{style:_[14]},(!E||N[0]&512)&&{disabled:_[9]}])),N[0]&8&&I.value!==_[3]&&set_input_value(I,_[3]),toggle_class(I,"svelte-17l1npl",!0),!_[7]&&_[29]?d?(d.p(_,N),N[0]&536871040&&transition_in(d,1)):(d=create_if_block_7(_),d.c(),transition_in(d,1),d.m(e,r)):d&&(group_outros(),transition_out(d,1,1,()=>{d=null}),check_outros()),_[37]?y?(y.p(_,N),N[1]&64&&transition_in(y,1)):(y=create_if_block_6(_),y.c(),transition_in(y,1),y.m(e,s)):y&&(group_outros(),transition_out(y,1,1,()=>{y=null}),check_outros()),!_[37]&&(_[20]||_[19]&&!_[2]||!_[13]&&!_[9]&&!_[4]&&(_[29]&&!_[15]||!_[29]))?w?w.p(_,N):(w=create_if_block_4(_),w.c(),w.m(e,B)):w&&(w.d(1),w=null),_[4]?k||(k=create_if_block_3(),k.c(),k.m(e,C)):k&&(k.d(1),k=null),_[5]?D?(D.p(_,N),N[0]&32&&transition_in(D,1)):(D=create_if_block_2$2(_),D.c(),transition_in(D,1),D.m(e,l)):D&&(group_outros(),transition_out(D,1,1,()=>{D=null}),check_outros()),!_[7]||_[7]&&!_[35]?m?m.p(_,N):(m=create_if_block_1$2(_),m.c(),m.m(e,c)):m&&(m.d(1),m=null),_[7]&&_[35]?F?F.p(_,N):(F=create_if_block$4(_),F.c(),F.m(e,null)):F&&(F.d(1),F=null),(!E||N[0]&2097152&&Q!==(Q="selectContainer "+_[21]+" svelte-17l1npl"))&&attr(e,"class",Q),(!E||N[0]&2048)&&attr(e,"style",_[11]),N[0]&2098176&&toggle_class(e,"hasError",_[10]),N[0]&2097280&&toggle_class(e,"multiSelect",_[7]),N[0]&2097664&&toggle_class(e,"disabled",_[9]),N[0]&2097154&&toggle_class(e,"focused",_[1])},i(_){E||(transition_in(p),transition_in(S),transition_in(d),transition_in(y),transition_in(D),E=!0)},o(_){transition_out(p),transition_out(S),transition_out(d),transition_out(y),transition_out(D),E=!1},d(_){_&&detach(e),h&&h.d(),p&&p.d(),S&&S.d(),A[82](null),d&&d.d(),y&&y.d(),w&&w.d(),k&&k.d(),D&&D.d(),m&&m.d(),F&&F.d(),A[85](null),f=!1,run_all(u)}}}function convertStringItemsToObjects(A){return A.map((e,t)=>({index:t,value:e,label:`${e}`}))}function instance$5(A,e,t){let i,n,g,I,o,a,r,s;const B=createEventDispatcher();let{id:C=null}=e,{container:l=void 0}=e,{input:c=void 0}=e,{isMulti:Q=!1}=e,{multiFullItemClearable:E=!1}=e,{isDisabled:f=!1}=e,{isCreatable:u=!1}=e,{isFocused:h=!1}=e,{value:p=null}=e,{filterText:S=""}=e,{placeholder:H="Select..."}=e,{placeholderAlwaysShow:M=!1}=e,{items:d=null}=e,{itemFilter:y=(R,z,iA)=>`${R}`.toLowerCase().includes(z.toLowerCase())}=e,{groupBy:w=void 0}=e,{groupFilter:k=R=>R}=e,{isGroupHeaderSelectable:D=!1}=e,{getGroupHeaderLabel:m=R=>R[F]||R.id}=e,{labelIdentifier:F="label"}=e,{getOptionLabel:_=(R,z)=>R.isCreator?`Create "${z}"`:R[F]}=e,{optionIdentifier:N="value"}=e,{loadOptions:b=void 0}=e,{hasError:U=!1}=e,{containerStyles:G=""}=e,{getSelectionLabel:Y=R=>R?R[F]:null}=e,{createGroupHeaderItem:q=R=>({value:R,label:R})}=e,{createItem:T=R=>({value:R,label:R})}=e;const v=()=>i;let{isSearchable:P=!0}=e,{inputStyles:x=""}=e,{isClearable:Z=!0}=e,{isWaiting:eA=!1}=e,{listPlacement:J="auto"}=e,{listOpen:X=!1}=e,{isVirtualList:nA=!1}=e,{loadOptionsInterval:IA=300}=e,{noOptionsMessage:rA="No options"}=e,{hideEmptyState:tA=!1}=e,{inputAttributes:V={}}=e,{listAutoWidth:j=!0}=e,{itemHeight:BA=40}=e,{Icon:L=void 0}=e,{iconProps:O={}}=e,{showChevron:AA=!1}=e,{showIndicator:aA=!1}=e,{containerClasses:oA=""}=e,{indicatorSvg:CA=void 0}=e,{listOffset:cA=5}=e,{ClearIcon:_A=ClearIcon}=e,{Item:SA=Item}=e,{List:fA=List}=e,{Selection:pA=Selection}=e,{MultiSelection:UA=MultiSelection}=e,{VirtualList:NA=VirtualList}=e;function MA(R){if(R.loadOptions&&R.filterText.length>0)return;if(!R.items)return[];R.items&&R.items.length>0&&typeof R.items[0]!="object"&&(R.items=convertStringItemsToObjects(R.items));let z=R.items.filter(iA=>{let EA=y(_(iA,R.filterText),R.filterText,iA);return EA&&R.isMulti&&R.value&&Array.isArray(R.value)&&(EA=!R.value.some(mA=>mA[R.optionIdentifier]===iA[R.optionIdentifier])),EA});return R.groupBy&&(z=PA(z)),R.isCreatable&&(z=uA(z,R.filterText)),z}function uA(R,z){if(z.length===0)return R;const iA=T(z);return R[0]&&z===R[0][F]?R:(iA.isCreator=!0,[...R,iA])}let{selectedValue:dA=null}=e,gA,hA,kA,FA,bA,DA;const OA=debounce(async()=>{t(4,eA=!0);let R=await b(S).catch(z=>{console.warn("svelte-select loadOptions error :>> ",z),B("error",{type:"loadOptions",details:z})});R&&!R.cancelled&&(R?(R&&R.length>0&&typeof R[0]!="object"&&(R=convertStringItemsToObjects(R)),t(81,i=[...R]),B("loaded",{items:i})):t(81,i=[]),u&&t(81,i=uA(i,S)),t(4,eA=!1),t(1,h=!0),t(5,X=!0))},IA);function KA(){typeof p=="string"?t(2,p={[N]:p,label:p}):Q&&Array.isArray(p)&&p.length>0&&t(2,p=p.map(R=>typeof R=="string"?{value:R,label:R}:R))}let wA;function YA(){t(31,wA=Object.assign({autocapitalize:"none",autocomplete:"off",autocorrect:"off",spellcheck:!1,tabindex:0,type:"text","aria-autocomplete":"list"},V)),C&&t(31,wA.id=C,wA),P||t(31,wA.readonly=!0,wA)}function PA(R){const z=[],iA={};R.forEach(mA=>{const yA=w(mA);z.includes(yA)||(z.push(yA),iA[yA]=[],yA&&iA[yA].push(Object.assign(q(yA,mA),{id:yA,isGroupHeader:!0,isSelectable:D}))),iA[yA].push(Object.assign({isGroupItem:!!yA},mA))});const EA=[];return k(z).forEach(mA=>{EA.push(...iA[mA])}),EA}function ZA(){if(Q){JSON.stringify(p)!==JSON.stringify(hA)&&GA()&&B("select",p);return}(!hA||JSON.stringify(p[N])!==JSON.stringify(hA[N]))&&B("select",p)}function XA(){h||X?RA():c&&c.blur()}function JA(){p&&(Array.isArray(p)?t(2,p=[...p]):t(2,p=[p]))}function zA(){p&&t(2,p=null)}function VA(){S.length!==0&&(t(1,h=!0),t(5,X=!0),b?OA():(t(5,X=!0),Q&&t(30,gA=void 0)))}beforeUpdate(async()=>{t(77,hA=p),t(78,kA=S),t(79,FA=h),t(80,bA=Q)});function GA(){let R=!0;if(p){const z=[],iA=[];p.forEach(EA=>{z.includes(EA[N])?R=!1:(z.push(EA[N]),iA.push(EA))}),R||t(2,p=iA)}return R}function vA(R){let z=R?R[N]:p[N];return d.find(iA=>iA[N]===z)}function qA(R){!R||R.length===0||R.some(z=>typeof z!="object")||!p||(Q?p.some(z=>!z||!z[N]):!p[N])||(Array.isArray(p)?t(2,p=p.map(z=>vA(z)||z)):t(2,p=vA()||p))}function sA(R){const{detail:z}=R,iA=p[z?z.i:p.length-1];p.length===1?t(2,p=void 0):t(2,p=p.filter(EA=>EA!==iA)),B("clear",iA)}function lA(R){if(!!h)switch(R.key){case"ArrowDown":R.preventDefault(),t(5,X=!0),t(30,gA=void 0);break;case"ArrowUp":R.preventDefault(),t(5,X=!0),t(30,gA=void 0);break;case"Tab":X||t(1,h=!1);break;case"Backspace":if(!Q||S.length>0)return;if(Q&&p&&p.length>0){if(sA(gA!==void 0?gA:p.length-1),gA===0||gA===void 0)break;t(30,gA=p.length>gA?gA-1:void 0)}break;case"ArrowLeft":if(!Q||S.length>0)return;gA===void 0?t(30,gA=p.length-1):p.length>gA&&gA!==0&&t(30,gA-=1);break;case"ArrowRight":if(!Q||S.length>0||gA===void 0)return;gA===p.length-1?t(30,gA=void 0):gA<p.length-1&&t(30,gA+=1);break}}function RA(){t(1,h=!0),c&&c.focus()}function WA(R){if(!l)return;const z=R.path&&R.path.length>0?R.path[0]:R.target;l.contains(z)||l.contains(R.relatedTarget)||(t(1,h=!1),t(5,X=!1),t(30,gA=void 0),c&&c.blur())}function ne(){f||(t(1,h=!0),t(5,X=!X))}function ge(){t(2,p=void 0),t(5,X=!1),B("clear",p),RA()}onMount(()=>{h&&c&&c.focus()});function Ie(R){const{detail:z}=R;if(z){t(3,S="");const iA=Object.assign({},z);(!iA.isGroupHeader||iA.isSelectable)&&(Q?t(2,p=p?p.concat([iA]):[iA]):t(2,p=iA),t(2,p),setTimeout(()=>{t(5,X=!1),t(30,gA=void 0)}))}}function oe(R){const{detail:z}=R;Q?(t(2,p=p||[]),t(2,p=[...p,T(z)])):t(2,p=T(z)),B("itemCreated",z),t(3,S=""),t(5,X=!1),t(30,gA=void 0)}function re(){t(3,S=""),t(5,X=!1)}let{ariaValues:jA=R=>`Option ${R}, selected.`}=e,{ariaListOpen:$A=(R,z)=>`You are currently focused on option ${R}. There are ${z} results available.`}=e,{ariaFocused:Ae=()=>"Select is focused, type to refine list, press down to open the menu."}=e;function ae(){let R;return Q&&p.length>0?R=p.map(z=>Y(z)).join(", "):R=Y(p),jA(R)}function se(){if(!h||!i||i.length===0)return"";let R=i[DA];if(X&&R){let z=Y(R),iA=i?i.length:0;return $A(z,iA)}else return Ae()}function Ce(R){binding_callbacks[R?"unshift":"push"](()=>{c=R,t(6,c)})}function Be(){S=this.value,t(3,S)}function ce(R){DA=R,t(28,DA)}function Ee(R){binding_callbacks[R?"unshift":"push"](()=>{l=R,t(0,l)})}return A.$$set=R=>{"id"in R&&t(46,C=R.id),"container"in R&&t(0,l=R.container),"input"in R&&t(6,c=R.input),"isMulti"in R&&t(7,Q=R.isMulti),"multiFullItemClearable"in R&&t(8,E=R.multiFullItemClearable),"isDisabled"in R&&t(9,f=R.isDisabled),"isCreatable"in R&&t(47,u=R.isCreatable),"isFocused"in R&&t(1,h=R.isFocused),"value"in R&&t(2,p=R.value),"filterText"in R&&t(3,S=R.filterText),"placeholder"in R&&t(48,H=R.placeholder),"placeholderAlwaysShow"in R&&t(49,M=R.placeholderAlwaysShow),"items"in R&&t(50,d=R.items),"itemFilter"in R&&t(51,y=R.itemFilter),"groupBy"in R&&t(52,w=R.groupBy),"groupFilter"in R&&t(53,k=R.groupFilter),"isGroupHeaderSelectable"in R&&t(54,D=R.isGroupHeaderSelectable),"getGroupHeaderLabel"in R&&t(55,m=R.getGroupHeaderLabel),"labelIdentifier"in R&&t(56,F=R.labelIdentifier),"getOptionLabel"in R&&t(57,_=R.getOptionLabel),"optionIdentifier"in R&&t(58,N=R.optionIdentifier),"loadOptions"in R&&t(59,b=R.loadOptions),"hasError"in R&&t(10,U=R.hasError),"containerStyles"in R&&t(11,G=R.containerStyles),"getSelectionLabel"in R&&t(12,Y=R.getSelectionLabel),"createGroupHeaderItem"in R&&t(60,q=R.createGroupHeaderItem),"createItem"in R&&t(61,T=R.createItem),"isSearchable"in R&&t(13,P=R.isSearchable),"inputStyles"in R&&t(14,x=R.inputStyles),"isClearable"in R&&t(15,Z=R.isClearable),"isWaiting"in R&&t(4,eA=R.isWaiting),"listPlacement"in R&&t(63,J=R.listPlacement),"listOpen"in R&&t(5,X=R.listOpen),"isVirtualList"in R&&t(64,nA=R.isVirtualList),"loadOptionsInterval"in R&&t(65,IA=R.loadOptionsInterval),"noOptionsMessage"in R&&t(66,rA=R.noOptionsMessage),"hideEmptyState"in R&&t(67,tA=R.hideEmptyState),"inputAttributes"in R&&t(16,V=R.inputAttributes),"listAutoWidth"in R&&t(68,j=R.listAutoWidth),"itemHeight"in R&&t(69,BA=R.itemHeight),"Icon"in R&&t(17,L=R.Icon),"iconProps"in R&&t(18,O=R.iconProps),"showChevron"in R&&t(19,AA=R.showChevron),"showIndicator"in R&&t(20,aA=R.showIndicator),"containerClasses"in R&&t(21,oA=R.containerClasses),"indicatorSvg"in R&&t(22,CA=R.indicatorSvg),"listOffset"in R&&t(70,cA=R.listOffset),"ClearIcon"in R&&t(23,_A=R.ClearIcon),"Item"in R&&t(71,SA=R.Item),"List"in R&&t(24,fA=R.List),"Selection"in R&&t(25,pA=R.Selection),"MultiSelection"in R&&t(26,UA=R.MultiSelection),"VirtualList"in R&&t(72,NA=R.VirtualList),"selectedValue"in R&&t(73,dA=R.selectedValue),"ariaValues"in R&&t(74,jA=R.ariaValues),"ariaListOpen"in R&&t(75,$A=R.ariaListOpen),"ariaFocused"in R&&t(76,Ae=R.ariaFocused)},A.$$.update=()=>{A.$$.dirty[0]&140|A.$$.dirty[1]&405340160&&t(81,i=MA({loadOptions:b,filterText:S,items:d,value:p,isMulti:Q,optionIdentifier:N,groupBy:w,isCreatable:u})),A.$$.dirty[2]&2048&&dA&&console.warn("selectedValue is no longer used. Please use value instead."),A.$$.dirty[1]&524288&&qA(d),A.$$.dirty[0]&4&&p&&KA(),A.$$.dirty[0]&73728&&(V||!P)&&YA(),A.$$.dirty[0]&128|A.$$.dirty[2]&262144&&(Q&&JA(),bA&&!Q&&zA()),A.$$.dirty[0]&132&&Q&&p&&p.length>1&&GA(),A.$$.dirty[0]&4&&p&&ZA(),A.$$.dirty[0]&132|A.$$.dirty[2]&32768&&!p&&Q&&hA&&B("select",p),A.$$.dirty[0]&2|A.$$.dirty[2]&131072&&h!==FA&&XA(),A.$$.dirty[0]&8|A.$$.dirty[2]&65536&&S!==kA&&VA(),A.$$.dirty[0]&12&&t(29,n=p&&S.length===0),A.$$.dirty[0]&536904208&&t(37,g=n&&Z&&!f&&!eA),A.$$.dirty[0]&132|A.$$.dirty[1]&393216&&t(36,I=M&&Q?H:p?"":H),A.$$.dirty[0]&132&&t(35,o=Q&&p&&p.length>0),A.$$.dirty[0]&141|A.$$.dirty[1]&218103808|A.$$.dirty[2]&526326&&t(34,a={Item:SA,filterText:S,optionIdentifier:N,noOptionsMessage:rA,hideEmptyState:tA,isVirtualList:nA,VirtualList:NA,value:p,isMulti:Q,getGroupHeaderLabel:m,items:i,itemHeight:BA,getOptionLabel:_,listPlacement:J,parent:l,listAutoWidth:j,listOffset:cA}),A.$$.dirty[0]&132&&t(33,r=p?ae():""),A.$$.dirty[0]&268435490|A.$$.dirty[2]&524288&&t(32,s=se())},[l,h,p,S,eA,X,c,Q,E,f,U,G,Y,P,x,Z,V,L,O,AA,aA,oA,CA,_A,fA,pA,UA,ge,DA,n,gA,wA,s,r,a,o,I,g,sA,lA,RA,WA,ne,Ie,oe,re,C,u,H,M,d,y,w,k,D,m,F,_,N,b,q,T,v,J,nA,IA,rA,tA,j,BA,cA,SA,NA,dA,jA,$A,Ae,hA,kA,FA,bA,i,Ce,Be,ce,Ee]}class Select extends SvelteComponent{constructor(e){super(),init(this,e,instance$5,create_fragment$5,safe_not_equal,{id:46,container:0,input:6,isMulti:7,multiFullItemClearable:8,isDisabled:9,isCreatable:47,isFocused:1,value:2,filterText:3,placeholder:48,placeholderAlwaysShow:49,items:50,itemFilter:51,groupBy:52,groupFilter:53,isGroupHeaderSelectable:54,getGroupHeaderLabel:55,labelIdentifier:56,getOptionLabel:57,optionIdentifier:58,loadOptions:59,hasError:10,containerStyles:11,getSelectionLabel:12,createGroupHeaderItem:60,createItem:61,getFilteredItems:62,isSearchable:13,inputStyles:14,isClearable:15,isWaiting:4,listPlacement:63,listOpen:5,isVirtualList:64,loadOptionsInterval:65,noOptionsMessage:66,hideEmptyState:67,inputAttributes:16,listAutoWidth:68,itemHeight:69,Icon:17,iconProps:18,showChevron:19,showIndicator:20,containerClasses:21,indicatorSvg:22,listOffset:70,ClearIcon:23,Item:71,List:24,Selection:25,MultiSelection:26,VirtualList:72,selectedValue:73,handleClear:27,ariaValues:74,ariaListOpen:75,ariaFocused:76},null,[-1,-1,-1,-1])}get getFilteredItems(){return this.$$.ctx[62]}get handleClear(){return this.$$.ctx[27]}}var StarSelect_svelte_svelte_type_style_lang="";function create_fragment$4(A){let e,t,i,n,g,I;function o(r){A[14](r)}let a={id:"sender-select",placeholder:A[1],listOffset:A[2],isClearable:A[3],showIndicator:A[4],indicatorSvg:SX_ICON_DROPDOWN,listPlacement:"bottom",items:A[5],getOptionLabel:A[9],getSelectionLabel:A[9]};return A[0]!==void 0&&(a.value=A[0]),t=new Select({props:a}),binding_callbacks.push(()=>bind(t,"value",o)),{c(){e=element("div"),i=element("div"),create_component(t.$$.fragment),set_style(i,"display","contents"),set_style(i,"--listMaxHeight",A[8]),attr(e,"class",g="star-select "+A[6]+" svelte-dvjau7")},m(r,s){insert(r,e,s),append(e,i),mount_component(t,i,null),A[15](e),I=!0},p(r,[s]){s&256&&set_style(i,"--listMaxHeight",r[8]);const B={};s&2&&(B.placeholder=r[1]),s&4&&(B.listOffset=r[2]),s&8&&(B.isClearable=r[3]),s&16&&(B.showIndicator=r[4]),s&32&&(B.items=r[5]),!n&&s&1&&(n=!0,B.value=r[0],add_flush_callback(()=>n=!1)),t.$set(B),(!I||s&64&&g!==(g="star-select "+r[6]+" svelte-dvjau7"))&&attr(e,"class",g)},i(r){I||(transition_in(t.$$.fragment,r),I=!0)},o(r){transition_out(t.$$.fragment,r),I=!1},d(r){r&&detach(e),destroy_component(t),A[15](null)}}}function instance$4(A,e,t){let{id:i=""}=e,{placeholder:n=""}=e,{listOffset:g=1}=e,{isClearable:I=!1}=e,{showIndicator:o=!0}=e,{items:a}=e,{value:r=void 0}=e,{pfpMap:s=null}=e;const B=s;let{primaryClass:C=""}=e,{secondaryClass:l=""}=e,{containerClasses:c=""}=e;function Q(p){return p.primary?dd("span",{class:"global_select-item"},[B&&B[p.object.pfp]||"",dd("span",{class:"name "+C},[p.primary]),dd("span",{class:"secondary "+l},[p.secondary||""])]).outerHTML:p.value}let E,f="500px";onMount(()=>{setTimeout(()=>{try{const p=E.getBoundingClientRect().bottom;t(8,f=Math.min(window.innerHeight-p-20,500)+"px")}catch{}},1e3)});function u(p){r=p,t(0,r)}function h(p){binding_callbacks[p?"unshift":"push"](()=>{E=p,t(7,E)})}return A.$$set=p=>{"id"in p&&t(10,i=p.id),"placeholder"in p&&t(1,n=p.placeholder),"listOffset"in p&&t(2,g=p.listOffset),"isClearable"in p&&t(3,I=p.isClearable),"showIndicator"in p&&t(4,o=p.showIndicator),"items"in p&&t(5,a=p.items),"value"in p&&t(0,r=p.value),"pfpMap"in p&&t(11,s=p.pfpMap),"primaryClass"in p&&t(12,C=p.primaryClass),"secondaryClass"in p&&t(13,l=p.secondaryClass),"containerClasses"in p&&t(6,c=p.containerClasses)},[r,n,g,I,o,a,c,E,f,Q,i,s,C,l,u,h]}class StarSelect extends SvelteComponent{constructor(e){super(),init(this,e,instance$4,create_fragment$4,safe_not_equal,{id:10,placeholder:1,listOffset:2,isClearable:3,showIndicator:4,items:5,value:0,pfpMap:11,primaryClass:12,secondaryClass:13,containerClasses:6})}}function once_store_updates(A,e=!1){return new Promise(t=>{let i=!1;const n=A.subscribe(g=>{if(!i){i=!0;return}(!e||g)&&(n(),t(g))})})}async function load_pfps(A,e){return ofe(await Promise.all(ode(A).map(([t,i])=>new Promise(n=>{const g=dd("span"),I=new PfpDisplay({target:g,props:{...e,resource:i,settle(){const o=g.firstChild?.cloneNode(!0);I.$destroy(),n([i.pfp,o])}}})}))))}const D_INTL_USD=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",currencyDisplay:"symbol"}),D_INTL_USD_LT1=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",currencyDisplay:"symbol",minimumFractionDigits:2,maximumFractionDigits:5}),A_NUMERIC_GT1=[{order:1e21,suffix:"sept",metric:"yotta",m:"Y"},{order:1e21,suffix:"sext",metric:"zetta",m:"Z"},{order:1e18,suffix:"quint",metric:"exa",m:"E"},{order:1e15,suffix:"quad",metric:"peta",m:"P"},{order:1e12,suffix:"tril",metric:"terra",m:"T"},{order:1e9,suffix:"bil",metric:"giga",m:"G"},{order:1e6,suffix:"mil",metric:"mega",m:"M"}],A_NUMERIC_LT1=[{order:1e-24,suffix:"septh",metric:"yocto",m:"y"},{order:1e-21,suffix:"sexth",metric:"zepto",m:"z"},{order:1e-18,suffix:"quinth",metric:"atto",m:"a"},{order:1e-15,suffix:"quadth",metric:"femto",m:"f"},{order:1e-12,suffix:"trilth",metric:"pico",m:"p"},{order:1e-9,suffix:"bilth",metric:"nano",m:"n"},{order:1e-6,suffix:"milth",metric:"mirco",m:"\u03BC"},{order:.001,suffix:"thsth",metric:"milli",m:"m"}],D_INTL_AMOUNT_LT1=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:6}),D_INTL_AMOUNT_GT1=new Intl.NumberFormat("en-US",{notation:"standard",maximumFractionDigits:3}),D_INTL_AMOUNT_GT1E3=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:6}),D_INTL_AMOUNT_I1E3=new Intl.NumberFormat("en-US",{notation:"standard",maximumSignificantDigits:4});function format_amount(A,e=!1){if(A===0)return"0";if(A>=1e6){for(const t of A_NUMERIC_GT1)if(A>=t.order)return(A/t.order).toPrecision(3)+" "+t.suffix}else if(A<1){for(const t of A_NUMERIC_LT1)if(A<=t.order)return(A*t.order).toPrecision(3)+" "+t.metric;return D_INTL_AMOUNT_LT1.format(A)}return A>=1e3?e?D_INTL_AMOUNT_I1E3.format(A/1e3)+" k":D_INTL_AMOUNT_GT1E3.format(A):D_INTL_AMOUNT_GT1.format(A)}function format_fiat(A,e="usd",t=!1,i=2){const n=A<1?D_INTL_USD_LT1.format(A):D_INTL_USD.format(A);return t?n.replace(/^[$]/,""):n}function abbreviate_addr(A){return A.replace(/^(\w+1...).+(.{7})/,"$1[...]$2")}const coingecko_url=(A,e)=>"https://api.coingecko.com/api/v3/simple/price?"+new URLSearchParams(ode({ids:A.join(","),vs_currencies:e,include_last_updated_at:"true"})),CoinGecko={async coinsVersus(A,e="usd",t=5*XT_MINUTES){const i=A.map(n=>WebApis.pathFor("GET",coingecko_url([n],e)));return await WebApis.open(async n=>{const g={};if(t>0){const s=Date.now()-t;let B=!0;for(let C=0;C<A.length;C++){const l=n.at(i[C]);if(l&&l.time>s){const c=A[C];g[c]=l.response.cache[c][e]}else{B=!1;break}}if(B)return g}const o=await(await fetch(coingecko_url(A,e))).json(),a=n.raw,r=Date.now();for(const[s,B]of ode(o)){const C=a[s]=a[s]||{};C.response=B,C.time=r,g[s]=B[e]}return g})}},WebApis=create_store_class({store:SI_STORE_WEB_APIS,extension:"map",class:class ie extends WritableStoreMap{static pathFor(e,t){return`/cache.web-api/sha256.${buffer_to_base64(sha256_sync$1(text_to_buffer(e+" "+t)))}`}static pathFrom(e){return ie.pathFor(e.method,e.path)}}});var AmountInput_svelte_svelte_type_style_lang="";const Agents=create_store_class({store:SI_STORE_AGENTS,extension:"map",class:class xA extends WritableStoreMap{static pathForAgent(e,t=yw_family.get()){return`/family.${t}/agent.${e.replace(/^\w+1/,"")}`}static pathForContact(e,t=yw_family.get()){return`${xA.pathForAgent(e,t)}/as.contact`}static pathFromContact(e){return xA.pathForContact(e.address,e.family)}static async getContact(e){return(await Agents.read()).at(e)}*contacts(e=yw_family.get()){const t=this._w_cache,i=`/family.${e}/agent.`;for(const n in t)!n.startsWith(i)||!n.endsWith("/as.contact")||(yield[n,t[n]])}async putContact(e){const t=xA.pathFromContact(e);return this._w_cache[t]=e,await this.save(),t}}});var SX_ICON_COPY=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
	<path style="fill: var(--svg-color-fg, currentColor);" d="M3 13H5V11H3V13ZM3 17H5V15H3V17ZM5 21V19H3C3 20.1 3.89 21 5 21ZM3 9H5V7H3V9ZM15 21H17V19H15V21ZM19 3H9C7.89 3 7 3.9 7 5V15C7 16.1 7.89 17 9 17H19C20.1 17 21 16.1 21 15V5C21 3.9 20.1 3 19 3ZM19 15H9V5H19V15ZM11 21H13V19H11V21ZM7 21H9V19H7V21Z" />
</svg>
`,Address_svelte_svelte_type_style_lang="";function create_if_block_2$1(A){let e,t;return{c(){e=element("span"),t=text(A[0]),attr(e,"class","prefix svelte-1f41ddv")},m(i,n){insert(i,e,n),append(e,t)},p(i,n){n&1&&set_data(t,i[0])},d(i){i&&detach(e)}}}function create_if_block$3(A){let e,t;function i(I,o){return I[7]==="icon"?create_if_block_1$1:create_else_block}let g=i(A)(A);return{c(){g.c(),e=space(),t=element("span"),t.textContent="Copied!",attr(t,"class","copied svelte-1f41ddv"),toggle_class(t,"confirm",A[3])},m(I,o){g.m(I,o),insert(I,e,o),insert(I,t,o),A[11](t)},p(I,o){g.p(I,o),o&8&&toggle_class(t,"confirm",I[3])},d(I){g.d(I),I&&detach(e),I&&detach(t),A[11](null)}}}function create_else_block(A){let e;return{c(){e=element("span"),e.textContent="Copy",attr(e,"class","copy svelte-1f41ddv")},m(t,i){insert(t,e,i)},p:noop$1,d(t){t&&detach(e)}}}function create_if_block_1$1(A){let e;return{c(){e=element("span"),attr(e,"class","copy icon svelte-1f41ddv")},m(t,i){insert(t,e,i),e.innerHTML=SX_ICON_COPY},p:noop$1,d(t){t&&detach(e)}}}function create_fragment$3(A){let e,t,i,n,g,I,o,a,r,s,B=A[0]&&create_if_block_2$1(A),C=A[6]&&create_if_block$3(A);return{c(){e=element("span"),B&&B.c(),t=space(),i=element("span"),n=text(A[1]),g=space(),I=element("span"),o=text(A[1]),a=space(),C&&C.c(),attr(i,"class","head svelte-1f41ddv"),attr(I,"class","tail svelte-1f41ddv"),toggle_class(I,"display_none",!A[5]),attr(e,"class","address svelte-1f41ddv"),toggle_class(e,"copyable",A[6])},m(l,c){insert(l,e,c),B&&B.m(e,null),append(e,t),append(e,i),append(i,n),A[10](i),append(e,g),append(e,I),append(I,o),append(e,a),C&&C.m(e,null),r||(s=listen(e,"click",A[6]?A[12]:void 0),r=!0)},p(l,[c]){l[0]?B?B.p(l,c):(B=create_if_block_2$1(l),B.c(),B.m(e,t)):B&&(B.d(1),B=null),c&2&&set_data(n,l[1]),c&2&&set_data(o,l[1]),c&32&&toggle_class(I,"display_none",!l[5]),l[6]&&C.p(l,c)},i:noop$1,o:noop$1,d(l){l&&detach(e),B&&B.d(),A[10](null),C&&C.d(),r=!1,s()}}}function instance$3(A,e,t){let{prefix:i=""}=e,{address:n}=e,{copyable:g=!1}=e;const I=!!g,o=g===!0?"icon":g||"";let a,r=!1;async function s(){try{await navigator.clipboard.writeText(n)}catch(E){syserr({text:"Failed to write to the navigator clipboard",error:E});return}t(3,r=!0),setTimeout(()=>{t(3,r=!1)},800)}let B,C=!1;onMount(()=>{t(5,C=B.scrollWidth>B.offsetWidth)});function l(E){binding_callbacks[E?"unshift":"push"](()=>{B=E,t(4,B)})}function c(E){binding_callbacks[E?"unshift":"push"](()=>{a=E,t(2,a)})}const Q=()=>s();return A.$$set=E=>{"prefix"in E&&t(0,i=E.prefix),"address"in E&&t(1,n=E.address),"copyable"in E&&t(9,g=E.copyable)},[i,n,a,r,B,C,I,o,s,g,l,c,Q]}class Address extends SvelteComponent{constructor(e){super(),init(this,e,instance$3,create_fragment$3,safe_not_equal,{prefix:0,address:1,copyable:9})}}var InlineContactSelection_svelte_svelte_type_style_lang="",RecipientSelectItem_svelte_svelte_type_style_lang="",RecipientSelectSelection_svelte_svelte_type_style_lang="",RecipientSelect_svelte_svelte_type_style_lang="";const Events=create_store_class({store:SI_STORE_EVENTS,extension:"array",class:class extends WritableStoreArray{static async filter(e){return(await Events.read()).filter(e)}static async insert(e){return await Events.open(t=>t.insert(e))}*filter(e={}){for(const t of this._w_cache)e.type&&e.type!==t.type||e.account&&e.account!==t.data.account||e.owner&&e.owner!==t.data.owner||(yield t)}async delete(e){const t=this._w_cache,i=e.time,n=JSON.stringify(e);A:{for(let g=0,I=t.length;g<I;g++){const o=t[g];if(i===o.time&&n===JSON.stringify(o)){t.splice(g,1);break A}}return t.length}return await this.save(),t.length}async insert(e){const t=e.time,i=this._w_cache,n=JSON.stringify(e);A:{for(let g=0,I=i.length;g<I;g++){const o=i[g];if(t>o.time){i.splice(g,0,e);break A}else if(t===o.time&&n===JSON.stringify(o))return i.length}i.push(e)}return await this.save(),i.length}}});var SendNative_svelte_svelte_type_style_lang="";const Settings=create_store_class({store:SI_STORE_SETTINGS,extension:"dict",class:class extends WritableStoreDict{}});var Send_svelte_svelte_type_style_lang="",qrcode={exports:{}};(function(A){function e(c){this.mode=i.MODE_8BIT_BYTE,this.data=c,this.parsedData=[];for(var Q=0,E=this.data.length;Q<E;Q++){var f=[],u=this.data.charCodeAt(Q);u>65536?(f[0]=240|(u&1835008)>>>18,f[1]=128|(u&258048)>>>12,f[2]=128|(u&4032)>>>6,f[3]=128|u&63):u>2048?(f[0]=224|(u&61440)>>>12,f[1]=128|(u&4032)>>>6,f[2]=128|u&63):u>128?(f[0]=192|(u&1984)>>>6,f[1]=128|u&63):f[0]=u,this.parsedData.push(f)}this.parsedData=Array.prototype.concat.apply([],this.parsedData),this.parsedData.length!=this.data.length&&(this.parsedData.unshift(191),this.parsedData.unshift(187),this.parsedData.unshift(239))}e.prototype={getLength:function(c){return this.parsedData.length},write:function(c){for(var Q=0,E=this.parsedData.length;Q<E;Q++)c.put(this.parsedData[Q],8)}};function t(c,Q){this.typeNumber=c,this.errorCorrectLevel=Q,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}t.prototype={addData:function(c){var Q=new e(c);this.dataList.push(Q),this.dataCache=null},isDark:function(c,Q){if(c<0||this.moduleCount<=c||Q<0||this.moduleCount<=Q)throw new Error(c+","+Q);return this.modules[c][Q]},getModuleCount:function(){return this.moduleCount},make:function(){this.makeImpl(!1,this.getBestMaskPattern())},makeImpl:function(c,Q){this.moduleCount=this.typeNumber*4+17,this.modules=new Array(this.moduleCount);for(var E=0;E<this.moduleCount;E++){this.modules[E]=new Array(this.moduleCount);for(var f=0;f<this.moduleCount;f++)this.modules[E][f]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(c,Q),this.typeNumber>=7&&this.setupTypeNumber(c),this.dataCache==null&&(this.dataCache=t.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,Q)},setupPositionProbePattern:function(c,Q){for(var E=-1;E<=7;E++)if(!(c+E<=-1||this.moduleCount<=c+E))for(var f=-1;f<=7;f++)Q+f<=-1||this.moduleCount<=Q+f||(0<=E&&E<=6&&(f==0||f==6)||0<=f&&f<=6&&(E==0||E==6)||2<=E&&E<=4&&2<=f&&f<=4?this.modules[c+E][Q+f]=!0:this.modules[c+E][Q+f]=!1)},getBestMaskPattern:function(){for(var c=0,Q=0,E=0;E<8;E++){this.makeImpl(!0,E);var f=I.getLostPoint(this);(E==0||c>f)&&(c=f,Q=E)}return Q},createMovieClip:function(c,Q,E){var f=c.createEmptyMovieClip(Q,E),u=1;this.make();for(var h=0;h<this.modules.length;h++)for(var p=h*u,S=0;S<this.modules[h].length;S++){var H=S*u,M=this.modules[h][S];M&&(f.beginFill(0,100),f.moveTo(H,p),f.lineTo(H+u,p),f.lineTo(H+u,p+u),f.lineTo(H,p+u),f.endFill())}return f},setupTimingPattern:function(){for(var c=8;c<this.moduleCount-8;c++)this.modules[c][6]==null&&(this.modules[c][6]=c%2==0);for(var Q=8;Q<this.moduleCount-8;Q++)this.modules[6][Q]==null&&(this.modules[6][Q]=Q%2==0)},setupPositionAdjustPattern:function(){for(var c=I.getPatternPosition(this.typeNumber),Q=0;Q<c.length;Q++)for(var E=0;E<c.length;E++){var f=c[Q],u=c[E];if(this.modules[f][u]==null)for(var h=-2;h<=2;h++)for(var p=-2;p<=2;p++)h==-2||h==2||p==-2||p==2||h==0&&p==0?this.modules[f+h][u+p]=!0:this.modules[f+h][u+p]=!1}},setupTypeNumber:function(c){for(var Q=I.getBCHTypeNumber(this.typeNumber),E=0;E<18;E++){var f=!c&&(Q>>E&1)==1;this.modules[Math.floor(E/3)][E%3+this.moduleCount-8-3]=f}for(var E=0;E<18;E++){var f=!c&&(Q>>E&1)==1;this.modules[E%3+this.moduleCount-8-3][Math.floor(E/3)]=f}},setupTypeInfo:function(c,Q){for(var E=this.errorCorrectLevel<<3|Q,f=I.getBCHTypeInfo(E),u=0;u<15;u++){var h=!c&&(f>>u&1)==1;u<6?this.modules[u][8]=h:u<8?this.modules[u+1][8]=h:this.modules[this.moduleCount-15+u][8]=h}for(var u=0;u<15;u++){var h=!c&&(f>>u&1)==1;u<8?this.modules[8][this.moduleCount-u-1]=h:u<9?this.modules[8][15-u-1+1]=h:this.modules[8][15-u-1]=h}this.modules[this.moduleCount-8][8]=!c},mapData:function(c,Q){for(var E=-1,f=this.moduleCount-1,u=7,h=0,p=this.moduleCount-1;p>0;p-=2)for(p==6&&p--;;){for(var S=0;S<2;S++)if(this.modules[f][p-S]==null){var H=!1;h<c.length&&(H=(c[h]>>>u&1)==1);var M=I.getMask(Q,f,p-S);M&&(H=!H),this.modules[f][p-S]=H,u--,u==-1&&(h++,u=7)}if(f+=E,f<0||this.moduleCount<=f){f-=E,E=-E;break}}}},t.PAD0=236,t.PAD1=17,t.createData=function(c,Q,E){for(var f=s.getRSBlocks(c,Q),u=new B,h=0;h<E.length;h++){var p=E[h];u.put(p.mode,4),u.put(p.getLength(),I.getLengthInBits(p.mode,c)),p.write(u)}for(var S=0,h=0;h<f.length;h++)S+=f[h].dataCount;if(u.getLengthInBits()>S*8)throw new Error("code length overflow. ("+u.getLengthInBits()+">"+S*8+")");for(u.getLengthInBits()+4<=S*8&&u.put(0,4);u.getLengthInBits()%8!=0;)u.putBit(!1);for(;!(u.getLengthInBits()>=S*8||(u.put(t.PAD0,8),u.getLengthInBits()>=S*8));)u.put(t.PAD1,8);return t.createBytes(u,f)},t.createBytes=function(c,Q){for(var E=0,f=0,u=0,h=new Array(Q.length),p=new Array(Q.length),S=0;S<Q.length;S++){var H=Q[S].dataCount,M=Q[S].totalCount-H;f=Math.max(f,H),u=Math.max(u,M),h[S]=new Array(H);for(var d=0;d<h[S].length;d++)h[S][d]=255&c.buffer[d+E];E+=H;var y=I.getErrorCorrectPolynomial(M),w=new r(h[S],y.getLength()-1),k=w.mod(y);p[S]=new Array(y.getLength()-1);for(var d=0;d<p[S].length;d++){var D=d+k.getLength()-p[S].length;p[S][d]=D>=0?k.get(D):0}}for(var m=0,d=0;d<Q.length;d++)m+=Q[d].totalCount;for(var F=new Array(m),_=0,d=0;d<f;d++)for(var S=0;S<Q.length;S++)d<h[S].length&&(F[_++]=h[S][d]);for(var d=0;d<u;d++)for(var S=0;S<Q.length;S++)d<p[S].length&&(F[_++]=p[S][d]);return F};for(var i={MODE_NUMBER:1<<0,MODE_ALPHA_NUM:1<<1,MODE_8BIT_BYTE:1<<2,MODE_KANJI:1<<3},n={L:1,M:0,Q:3,H:2},g={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7},I={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1<<10|1<<8|1<<5|1<<4|1<<2|1<<1|1<<0,G18:1<<12|1<<11|1<<10|1<<9|1<<8|1<<5|1<<2|1<<0,G15_MASK:1<<14|1<<12|1<<10|1<<4|1<<1,getBCHTypeInfo:function(c){for(var Q=c<<10;I.getBCHDigit(Q)-I.getBCHDigit(I.G15)>=0;)Q^=I.G15<<I.getBCHDigit(Q)-I.getBCHDigit(I.G15);return(c<<10|Q)^I.G15_MASK},getBCHTypeNumber:function(c){for(var Q=c<<12;I.getBCHDigit(Q)-I.getBCHDigit(I.G18)>=0;)Q^=I.G18<<I.getBCHDigit(Q)-I.getBCHDigit(I.G18);return c<<12|Q},getBCHDigit:function(c){for(var Q=0;c!=0;)Q++,c>>>=1;return Q},getPatternPosition:function(c){return I.PATTERN_POSITION_TABLE[c-1]},getMask:function(c,Q,E){switch(c){case g.PATTERN000:return(Q+E)%2==0;case g.PATTERN001:return Q%2==0;case g.PATTERN010:return E%3==0;case g.PATTERN011:return(Q+E)%3==0;case g.PATTERN100:return(Math.floor(Q/2)+Math.floor(E/3))%2==0;case g.PATTERN101:return Q*E%2+Q*E%3==0;case g.PATTERN110:return(Q*E%2+Q*E%3)%2==0;case g.PATTERN111:return(Q*E%3+(Q+E)%2)%2==0;default:throw new Error("bad maskPattern:"+c)}},getErrorCorrectPolynomial:function(c){for(var Q=new r([1],0),E=0;E<c;E++)Q=Q.multiply(new r([1,o.gexp(E)],0));return Q},getLengthInBits:function(c,Q){if(1<=Q&&Q<10)switch(c){case i.MODE_NUMBER:return 10;case i.MODE_ALPHA_NUM:return 9;case i.MODE_8BIT_BYTE:return 8;case i.MODE_KANJI:return 8;default:throw new Error("mode:"+c)}else if(Q<27)switch(c){case i.MODE_NUMBER:return 12;case i.MODE_ALPHA_NUM:return 11;case i.MODE_8BIT_BYTE:return 16;case i.MODE_KANJI:return 10;default:throw new Error("mode:"+c)}else if(Q<41)switch(c){case i.MODE_NUMBER:return 14;case i.MODE_ALPHA_NUM:return 13;case i.MODE_8BIT_BYTE:return 16;case i.MODE_KANJI:return 12;default:throw new Error("mode:"+c)}else throw new Error("type:"+Q)},getLostPoint:function(c){for(var Q=c.getModuleCount(),E=0,f=0;f<Q;f++)for(var u=0;u<Q;u++){for(var h=0,p=c.isDark(f,u),S=-1;S<=1;S++)if(!(f+S<0||Q<=f+S))for(var H=-1;H<=1;H++)u+H<0||Q<=u+H||S==0&&H==0||p==c.isDark(f+S,u+H)&&h++;h>5&&(E+=3+h-5)}for(var f=0;f<Q-1;f++)for(var u=0;u<Q-1;u++){var M=0;c.isDark(f,u)&&M++,c.isDark(f+1,u)&&M++,c.isDark(f,u+1)&&M++,c.isDark(f+1,u+1)&&M++,(M==0||M==4)&&(E+=3)}for(var f=0;f<Q;f++)for(var u=0;u<Q-6;u++)c.isDark(f,u)&&!c.isDark(f,u+1)&&c.isDark(f,u+2)&&c.isDark(f,u+3)&&c.isDark(f,u+4)&&!c.isDark(f,u+5)&&c.isDark(f,u+6)&&(E+=40);for(var u=0;u<Q;u++)for(var f=0;f<Q-6;f++)c.isDark(f,u)&&!c.isDark(f+1,u)&&c.isDark(f+2,u)&&c.isDark(f+3,u)&&c.isDark(f+4,u)&&!c.isDark(f+5,u)&&c.isDark(f+6,u)&&(E+=40);for(var d=0,u=0;u<Q;u++)for(var f=0;f<Q;f++)c.isDark(f,u)&&d++;var y=Math.abs(100*d/Q/Q-50)/5;return E+=y*10,E}},o={glog:function(c){if(c<1)throw new Error("glog("+c+")");return o.LOG_TABLE[c]},gexp:function(c){for(;c<0;)c+=255;for(;c>=256;)c-=255;return o.EXP_TABLE[c]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},a=0;a<8;a++)o.EXP_TABLE[a]=1<<a;for(var a=8;a<256;a++)o.EXP_TABLE[a]=o.EXP_TABLE[a-4]^o.EXP_TABLE[a-5]^o.EXP_TABLE[a-6]^o.EXP_TABLE[a-8];for(var a=0;a<255;a++)o.LOG_TABLE[o.EXP_TABLE[a]]=a;function r(c,Q){if(c.length==null)throw new Error(c.length+"/"+Q);for(var E=0;E<c.length&&c[E]==0;)E++;this.num=new Array(c.length-E+Q);for(var f=0;f<c.length-E;f++)this.num[f]=c[f+E]}r.prototype={get:function(c){return this.num[c]},getLength:function(){return this.num.length},multiply:function(c){for(var Q=new Array(this.getLength()+c.getLength()-1),E=0;E<this.getLength();E++)for(var f=0;f<c.getLength();f++)Q[E+f]^=o.gexp(o.glog(this.get(E))+o.glog(c.get(f)));return new r(Q,0)},mod:function(c){if(this.getLength()-c.getLength()<0)return this;for(var Q=o.glog(this.get(0))-o.glog(c.get(0)),E=new Array(this.getLength()),f=0;f<this.getLength();f++)E[f]=this.get(f);for(var f=0;f<c.getLength();f++)E[f]^=o.gexp(o.glog(c.get(f))+Q);return new r(E,0).mod(c)}};function s(c,Q){this.totalCount=c,this.dataCount=Q}s.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],s.getRSBlocks=function(c,Q){var E=s.getRsBlockTable(c,Q);if(E==null)throw new Error("bad rs block @ typeNumber:"+c+"/errorCorrectLevel:"+Q);for(var f=E.length/3,u=[],h=0;h<f;h++)for(var p=E[h*3+0],S=E[h*3+1],H=E[h*3+2],M=0;M<p;M++)u.push(new s(S,H));return u},s.getRsBlockTable=function(c,Q){switch(Q){case n.L:return s.RS_BLOCK_TABLE[(c-1)*4+0];case n.M:return s.RS_BLOCK_TABLE[(c-1)*4+1];case n.Q:return s.RS_BLOCK_TABLE[(c-1)*4+2];case n.H:return s.RS_BLOCK_TABLE[(c-1)*4+3];default:return}};function B(){this.buffer=[],this.length=0}B.prototype={get:function(c){var Q=Math.floor(c/8);return(this.buffer[Q]>>>7-c%8&1)==1},put:function(c,Q){for(var E=0;E<Q;E++)this.putBit((c>>>Q-E-1&1)==1)},getLengthInBits:function(){return this.length},putBit:function(c){var Q=Math.floor(this.length/8);this.buffer.length<=Q&&this.buffer.push(0),c&&(this.buffer[Q]|=128>>>this.length%8),this.length++}};var C=[[17,14,11,7],[32,26,20,14],[53,42,32,24],[78,62,46,34],[106,84,60,44],[134,106,74,58],[154,122,86,64],[192,152,108,84],[230,180,130,98],[271,213,151,119],[321,251,177,137],[367,287,203,155],[425,331,241,177],[458,362,258,194],[520,412,292,220],[586,450,322,250],[644,504,364,280],[718,560,394,310],[792,624,442,338],[858,666,482,382],[929,711,509,403],[1003,779,565,439],[1091,857,611,461],[1171,911,661,511],[1273,997,715,535],[1367,1059,751,593],[1465,1125,805,625],[1528,1190,868,658],[1628,1264,908,698],[1732,1370,982,742],[1840,1452,1030,790],[1952,1538,1112,842],[2068,1628,1168,898],[2188,1722,1228,958],[2303,1809,1283,983],[2431,1911,1351,1051],[2563,1989,1423,1093],[2699,2099,1499,1139],[2809,2213,1579,1219],[2953,2331,1663,1273]];function l(c){if(this.options={padding:4,width:256,height:256,typeNumber:4,color:"#000000",background:"#ffffff",ecl:"M"},typeof c=="string"&&(c={content:c}),c)for(var Q in c)this.options[Q]=c[Q];if(typeof this.options.content!="string")throw new Error("Expected 'content' as string!");if(this.options.content.length===0)throw new Error("Expected 'content' to be non-empty!");if(!(this.options.padding>=0))throw new Error("Expected 'padding' value to be non-negative!");if(!(this.options.width>0)||!(this.options.height>0))throw new Error("Expected 'width' or 'height' value to be higher than zero!");function E(H){switch(H){case"L":return n.L;case"M":return n.M;case"Q":return n.Q;case"H":return n.H;default:throw new Error("Unknwon error correction level: "+H)}}function f(H,M){for(var d=u(H),y=1,w=0,k=0,D=C.length;k<=D;k++){var m=C[k];if(!m)throw new Error("Content too long: expected "+w+" but got "+d);switch(M){case"L":w=m[0];break;case"M":w=m[1];break;case"Q":w=m[2];break;case"H":w=m[3];break;default:throw new Error("Unknwon error correction level: "+M)}if(d<=w)break;y++}if(y>C.length)throw new Error("Content too long");return y}function u(H){var M=encodeURI(H).toString().replace(/\%[0-9a-fA-F]{2}/g,"a");return M.length+(M.length!=H?3:0)}var h=this.options.content,p=f(h,this.options.ecl),S=E(this.options.ecl);this.qrcode=new t(p,S),this.qrcode.addData(h),this.qrcode.make()}l.prototype.svg=function(c){var Q=this.options||{},E=this.qrcode.modules;typeof c>"u"&&(c={container:Q.container||"svg"});for(var f=typeof Q.pretty<"u"?!!Q.pretty:!0,u=f?"  ":"",h=f?`\r
`:"",p=Q.width,S=Q.height,H=E.length,M=p/(H+2*Q.padding),d=S/(H+2*Q.padding),y=typeof Q.join<"u"?!!Q.join:!1,w=typeof Q.swap<"u"?!!Q.swap:!1,k=typeof Q.xmlDeclaration<"u"?!!Q.xmlDeclaration:!0,D=typeof Q.predefined<"u"?!!Q.predefined:!1,m=D?u+'<defs><path id="qrmodule" d="M0 0 h'+d+" v"+M+' H0 z" style="fill:'+Q.color+';shape-rendering:crispEdges;" /></defs>'+h:"",F=u+'<rect x="0" y="0" width="'+p+'" height="'+S+'" style="fill:'+Q.background+';shape-rendering:crispEdges;"/>'+h,_="",N="",b=0;b<H;b++)for(var U=0;U<H;U++){var G=E[U][b];if(G){var Y=U*M+Q.padding*M,q=b*d+Q.padding*d;if(w){var T=Y;Y=q,q=T}if(y){var v=M+Y,P=d+q;Y=Number.isInteger(Y)?Number(Y):Y.toFixed(2),q=Number.isInteger(q)?Number(q):q.toFixed(2),v=Number.isInteger(v)?Number(v):v.toFixed(2),P=Number.isInteger(P)?Number(P):P.toFixed(2),N+="M"+Y+","+q+" V"+P+" H"+v+" V"+q+" H"+Y+" Z "}else D?_+=u+'<use x="'+Y.toString()+'" y="'+q.toString()+'" href="#qrmodule" />'+h:_+=u+'<rect x="'+Y.toString()+'" y="'+q.toString()+'" width="'+M+'" height="'+d+'" style="fill:'+Q.color+';shape-rendering:crispEdges;"/>'+h}}y&&(_=u+'<path x="0" y="0" style="fill:'+Q.color+';shape-rendering:crispEdges;" d="'+N+'" />');var x="";switch(c.container){case"svg":k&&(x+='<?xml version="1.0" standalone="yes"?>'+h),x+='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="'+p+'" height="'+S+'">'+h,x+=m+F+_,x+="</svg>";break;case"svg-viewbox":k&&(x+='<?xml version="1.0" standalone="yes"?>'+h),x+='<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 '+p+" "+S+'">'+h,x+=m+F+_,x+="</svg>";break;case"g":x+='<g width="'+p+'" height="'+S+'">'+h,x+=m+F+_,x+="</g>";break;default:x+=(m+F+_).replace(/^\s+/,"");break}return x},l.prototype.save=function(c,Q){var E=this.svg();typeof Q!="function"&&(Q=function(u,h){});try{var f=require("fs");f.writeFile(c,E,Q)}catch(u){Q(u)}},A.exports=l})(qrcode);var QRCode=qrcode.exports,Info_svelte_svelte_type_style_lang="";function create_if_block$2(A){let e;return{c(){e=element("span"),attr(e,"class","icon svelte-1ytw09y")},m(t,i){insert(t,e,i),e.innerHTML=SX_ICON_COPY},p:noop$1,d(t){t&&detach(e)}}}function create_fragment$2(A){let e,t,i,n;const g=A[8].default,I=create_slot(g,A,A[7],null);let o=A[2]&&create_if_block$2();return{c(){e=element("div"),t=element("span"),I&&I.c(),i=space(),o&&o.c(),attr(t,"id",A[0]),attr(t,"class","info-value svelte-1ytw09y"),attr(e,"class","info svelte-1ytw09y"),toggle_class(e,"copyable",A[2]),toggle_class(e,"center",A[1])},m(a,r){insert(a,e,r),append(e,t),I&&I.m(t,null),append(e,i),o&&o.m(e,null),n=!0},p(a,[r]){I&&I.p&&(!n||r&128)&&update_slot_base(I,g,a,a[7],n?get_slot_changes(g,a[7],r,null):get_all_dirty_from_scope(a[7]),null),a[2]&&o.p(a,r)},i(a){n||(transition_in(I,a),n=!0)},o(a){transition_out(I,a),n=!1},d(a){a&&detach(e),I&&I.d(a),o&&o.d()}}}function instance$2(A,e,t){let{$$slots:i={},$$scope:n}=e,{key:g}=e;const I=g;let{address:o=!1}=e;const a=o;let{center:r=a}=e;const s=r;let{copyable:B=!1}=e;const C=B;return A.$$set=l=>{"key"in l&&t(3,g=l.key),"address"in l&&t(4,o=l.address),"center"in l&&t(5,r=l.center),"copyable"in l&&t(6,B=l.copyable),"$$scope"in l&&t(7,n=l.$$scope)},[I,s,C,g,o,r,B,n,i]}class Info extends SvelteComponent{constructor(e){super(),init(this,e,instance$2,create_fragment$2,safe_not_equal,{key:3,address:4,center:5,copyable:6})}}var PopupReceive_svelte_svelte_type_style_lang="";function create_catch_block_1(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block_1(A){let e,t,i;function n(I){A[13](I)}let g={id:"chain-select",pfpMap:A[6],placeholder:"Select chain",items:A[23]};return A[2]!==void 0&&(g.value=A[2]),e=new StarSelect({props:g}),binding_callbacks.push(()=>bind(e,"value",n)),{c(){create_component(e.$$.fragment)},m(I,o){mount_component(e,I,o),i=!0},p(I,o){const a={};o&64&&(a.pfpMap=I[6]),!t&&o&4&&(t=!0,a.value=I[2],add_flush_callback(()=>t=!1)),e.$set(a)},i(I){i||(transition_in(e.$$.fragment,I),i=!0)},o(I){transition_out(e.$$.fragment,I),i=!1},d(I){destroy_component(e,I)}}}function create_pending_block_1(A){let e;return{c(){e=text("Loading chains...")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_default_slot_2(A){let e,t,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block_1,then:create_then_block_1,catch:create_catch_block_1,value:23,blocks:[,,,]};return handle_promise(A[9](),i),{c(){e=empty(),i.block.c()},m(n,g){insert(n,e,g),i.block.m(n,i.anchor=g),i.mount=()=>e.parentNode,i.anchor=e,t=!0},p(n,g){A=n,update_await_block_branch(i,A,g)},i(n){t||(transition_in(i.block),t=!0)},o(n){for(let g=0;g<3;g+=1){const I=i.blocks[g];transition_out(I)}t=!1},d(n){n&&detach(e),i.block.d(n),i.token=null,i=null}}}function create_catch_block$1(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block$1(A){let e,t,i;function n(I){A[14](I)}let g={id:"account-select",pfpMap:A[5],placeholder:"Select account",secondaryClass:"balance",items:A[22]};return A[0]!==void 0&&(g.value=A[0]),e=new StarSelect({props:g}),binding_callbacks.push(()=>bind(e,"value",n)),{c(){create_component(e.$$.fragment)},m(I,o){mount_component(e,I,o),i=!0},p(I,o){const a={};o&32&&(a.pfpMap=I[5]),!t&&o&1&&(t=!0,a.value=I[0],add_flush_callback(()=>t=!1)),e.$set(a)},i(I){i||(transition_in(e.$$.fragment,I),i=!0)},o(I){transition_out(e.$$.fragment,I),i=!1},d(I){destroy_component(e,I)}}}function create_pending_block$1(A){let e;return{c(){e=text("Loading Accounts...")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_default_slot_1(A){let e,t,i={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block$1,then:create_then_block$1,catch:create_catch_block$1,value:22,blocks:[,,,]};return handle_promise(A[8](),i),{c(){e=empty(),i.block.c()},m(n,g){insert(n,e,g),i.block.m(n,i.anchor=g),i.mount=()=>e.parentNode,i.anchor=e,t=!0},p(n,g){A=n,update_await_block_branch(i,A,g)},i(n){t||(transition_in(i.block),t=!0)},o(n){for(let g=0;g<3;g+=1){const I=i.blocks[g];transition_out(I)}t=!1},d(n){n&&detach(e),i.block.d(n),i.token=null,i=null}}}function create_if_block$1(A){let e,t;return e=new Address({props:{copyable:!0,address:Chains.addressFor(A[1]?.pubkey,A[3])||""}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&10&&(g.address=Chains.addressFor(i[1]?.pubkey,i[3])||""),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_default_slot(A){let e,t,i=A[1]&&A[3]&&create_if_block$1(A);return{c(){i&&i.c(),e=empty()},m(n,g){i&&i.m(n,g),insert(n,e,g),t=!0},p(n,g){n[1]&&n[3]?i?(i.p(n,g),g&10&&transition_in(i,1)):(i=create_if_block$1(n),i.c(),transition_in(i,1),i.m(e.parentNode,e)):i&&(group_outros(),transition_out(i,1,1,()=>{i=null}),check_outros())},i(n){t||(transition_in(i),t=!0)},o(n){transition_out(i),t=!1},d(n){i&&i.d(n),n&&detach(e)}}}function create_fragment$1(A){let e,t,i,n,g,I,o,a,r,s,B,C,l,c,Q;return i=new Close({props:{absolute:!0}}),i.$on("click",A[12]),I=new Field({props:{short:!0,key:"chain-select",name:"Chain",$$slots:{default:[create_default_slot_2]},$$scope:{ctx:A}}}),a=new Field({props:{short:!0,key:"account-select",name:"Account",$$slots:{default:[create_default_slot_1]},$$scope:{ctx:A}}}),s=new Info({props:{address:!0,key:"receive-address",$$slots:{default:[create_default_slot]},$$scope:{ctx:A}}}),{c(){e=element("h3"),e.textContent="Receive",t=space(),n=element("div"),create_component(i.$$.fragment),g=space(),create_component(I.$$.fragment),o=space(),create_component(a.$$.fragment),r=space(),create_component(s.$$.fragment),B=space(),C=element("div"),l=space(),c=element("div"),c.textContent="Scan QR code to receive to this address",set_style(n,"display","contents"),set_style(n,"--margin","5px"),attr(C,"class","qr-code svelte-rmdw72"),attr(c,"class","info svelte-rmdw72")},m(E,f){insert(E,e,f),insert(E,t,f),insert(E,n,f),mount_component(i,n,null),insert(E,g,f),mount_component(I,E,f),insert(E,o,f),mount_component(a,E,f),insert(E,r,f),mount_component(s,E,f),insert(E,B,f),insert(E,C,f),A[15](C),insert(E,l,f),insert(E,c,f),Q=!0},p(E,[f]){const u={};f&16777284&&(u.$$scope={dirty:f,ctx:E}),I.$set(u);const h={};f&16777249&&(h.$$scope={dirty:f,ctx:E}),a.$set(h);const p={};f&16777226&&(p.$$scope={dirty:f,ctx:E}),s.$set(p)},i(E){Q||(transition_in(i.$$.fragment,E),transition_in(I.$$.fragment,E),transition_in(a.$$.fragment,E),transition_in(s.$$.fragment,E),Q=!0)},o(E){transition_out(i.$$.fragment,E),transition_out(I.$$.fragment,E),transition_out(a.$$.fragment,E),transition_out(s.$$.fragment,E),Q=!1},d(E){E&&detach(e),E&&detach(t),E&&detach(n),destroy_component(i,E),E&&detach(g),destroy_component(I,E),E&&detach(o),destroy_component(a,E),E&&detach(r),destroy_component(s,E),E&&detach(B),E&&detach(C),A[15](null),E&&detach(l),E&&detach(c)}}}function instance$1(A,e,t){let i,n,g,I,o,a;component_subscribe(A,yw_account_ref,y=>t(16,g=y)),component_subscribe(A,yw_context_popup,y=>t(17,I=y)),component_subscribe(A,yw_chain_ref,y=>t(18,o=y)),component_subscribe(A,yw_popup,y=>t(7,a=y));let r={value:g},s;const B=(y,w)=>({object:w,value:y,primary:w.name,secondary:w.extra?.total_fiat_cache||"(?)"});let C={};async function l(){const y=await Accounts.read();return t(5,C=ofe(await Promise.all(ode(y.raw).map(([w,k])=>new Promise(D=>{const m=dd("span"),F=new PfpDisplay({target:m,props:{dim:28,genStyle:"font-size: 18px;",resource:k,settle(){const _=m.firstChild?.cloneNode(!0);F.$destroy(),D([k.pfp,_])}}})}))))),oderac(y.raw,B)}let c={value:o},Q;const E=(y,w)=>({object:w,value:y,primary:w.name,secondary:w.id,pfp:w.pfp});let f={};async function u(){const y=await Chains.read();return t(6,f=await p(y.raw)),oderac(y.raw,E)}I?.account||set_store_value(yw_context_popup,I={account:g},I);let h;async function p(y){return ofe(await Promise.all(ode(y).map(([w,k])=>new Promise(D=>{const m=dd("span"),F=new PfpDisplay({target:m,props:{dim:28,genStyle:"font-size: 18px;",resource:k,settle(){const _=m.firstChild?.cloneNode(!0);F.$destroy(),D([k.pfp,_])}}})}))))}const S=()=>set_store_value(yw_popup,a=null,a);function H(y){c=y,t(2,c)}function M(y){r=y,t(0,r)}function d(y){binding_callbacks[y?"unshift":"push"](()=>{h=y,t(4,h),t(1,s),t(3,Q),t(11,i),t(10,n),t(0,r),t(2,c)})}return A.$$.update=()=>{if(A.$$.dirty&1&&t(11,i=r.value),A.$$.dirty&2048&&i&&Accounts.read().then(y=>{t(1,s=y.at(i))}),A.$$.dirty&4&&t(10,n=c.value),A.$$.dirty&1024&&n&&Chains.read().then(y=>{t(3,Q=y.at(n))}),A.$$.dirty&26&&h&&s&&Q){const y=new QRCode({content:`starshell:${Chains.addressFor(s.pubkey,Q)||""}`,width:240,height:240,padding:3,ecl:"H",join:!0}).svg();t(4,h.innerHTML=y,h)}},[r,s,c,Q,h,C,f,a,l,u,n,i,S,H,M,d]}class PopupReceive extends SvelteComponent{constructor(e){super(),init(this,e,instance$1,create_fragment$1,safe_not_equal,{})}}var Gap_svelte_svelte_type_style_lang="",InlinePills_svelte_svelte_type_style_lang="",TokensAdd_svelte_svelte_type_style_lang="",HoldingView_svelte_svelte_type_style_lang="",HoldingsHome_svelte_svelte_type_style_lang="",AccountCreate_svelte_svelte_type_style_lang="",AccountsHome_svelte_svelte_type_style_lang="",Tab_svelte_svelte_type_style_lang="",TabList_svelte_svelte_type_style_lang="",TabPanel_svelte_svelte_type_style_lang="",DeadEnd_svelte_svelte_type_style_lang="",IconEditor_svelte_svelte_type_style_lang="",ContactEdit_svelte_svelte_type_style_lang="",ContactList_svelte_svelte_type_style_lang="",ContactsHome_svelte_svelte_type_style_lang="";const Apps=create_store_class({store:SI_STORE_APPS,class:class TA extends WritableStoreMap{static pathFor(e,t){return`/scheme.${t}/host.${e.replace(/:/g,"+")}`}static pathFrom(e){return TA.pathFor(e.host,e.scheme)}static get(e,t){return Apps.open(i=>i.get(e,t))}get(e,t){const i=TA.pathFor(e,t);return this._w_cache[i]??null}async put(e){const t=TA.pathFor(e.host,e.scheme);this._w_cache[t]=e,await this.save()}}});var NetworkView_svelte_svelte_type_style_lang="",defaultLocale$1="en",localesData$1={},lowercaseLocaleLookup={};function getDefaultLocale(){return defaultLocale$1}function setDefaultLocale(A){defaultLocale$1=A}function getLocaleData$1(A){return localesData$1[A]}function addLocaleData$1(A){if(!A)throw new Error("No locale data passed");localesData$1[A.locale]=A,lowercaseLocaleLookup[A.locale.toLowerCase()]=A.locale}function resolveLocale$1(A){if(localesData$1[A])return A;if(lowercaseLocaleLookup[A.toLowerCase()])return lowercaseLocaleLookup[A.toLowerCase()]}function resolveLocale(A){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},t=e.localeMatcher||"lookup";switch(t){case"lookup":return resolveLocaleLookup(A);case"best fit":return resolveLocaleLookup(A);default:throw new RangeError('Invalid "localeMatcher" option: '.concat(t))}}function resolveLocaleLookup(A){var e=resolveLocale$1(A);if(e)return e;for(var t=A.split("-");A.length>1;){t.pop(),A=t.join("-");var i=resolveLocale$1(A);if(i)return i}}var $={af:function A(e){return e==1?"one":"other"},am:function A(e){return e>=0&&e<=1?"one":"other"},ar:function A(e){var t=String(e).split("."),i=Number(t[0])==e,n=i&&t[0].slice(-2);return e==0?"zero":e==1?"one":e==2?"two":n>=3&&n<=10?"few":n>=11&&n<=99?"many":"other"},ast:function A(e){var t=String(e).split("."),i=!t[1];return e==1&&i?"one":"other"},be:function A(e){var t=String(e).split("."),i=Number(t[0])==e,n=i&&t[0].slice(-1),g=i&&t[0].slice(-2);return n==1&&g!=11?"one":n>=2&&n<=4&&(g<12||g>14)?"few":i&&n==0||n>=5&&n<=9||g>=11&&g<=14?"many":"other"},br:function A(e){var t=String(e).split("."),i=Number(t[0])==e,n=i&&t[0].slice(-1),g=i&&t[0].slice(-2),I=i&&t[0].slice(-6);return n==1&&g!=11&&g!=71&&g!=91?"one":n==2&&g!=12&&g!=72&&g!=92?"two":(n==3||n==4||n==9)&&(g<10||g>19)&&(g<70||g>79)&&(g<90||g>99)?"few":e!=0&&i&&I==0?"many":"other"},bs:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"",g=!t[1],I=i.slice(-1),o=i.slice(-2),a=n.slice(-1),r=n.slice(-2);return g&&I==1&&o!=11||a==1&&r!=11?"one":g&&I>=2&&I<=4&&(o<12||o>14)||a>=2&&a<=4&&(r<12||r>14)?"few":"other"},ceb:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"",g=!t[1],I=i.slice(-1),o=n.slice(-1);return g&&(i==1||i==2||i==3)||g&&I!=4&&I!=6&&I!=9||!g&&o!=4&&o!=6&&o!=9?"one":"other"},cs:function A(e){var t=String(e).split("."),i=t[0],n=!t[1];return e==1&&n?"one":i>=2&&i<=4&&n?"few":n?"other":"many"},cy:function A(e){return e==0?"zero":e==1?"one":e==2?"two":e==3?"few":e==6?"many":"other"},da:function A(e){var t=String(e).split("."),i=t[0],n=Number(t[0])==e;return e==1||!n&&(i==0||i==1)?"one":"other"},dsb:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"",g=!t[1],I=i.slice(-2),o=n.slice(-2);return g&&I==1||o==1?"one":g&&I==2||o==2?"two":g&&(I==3||I==4)||o==3||o==4?"few":"other"},dz:function A(e){return"other"},es:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-6);return e==1?"one":i!=0&&g==0&&n?"many":"other"},ff:function A(e){return e>=0&&e<2?"one":"other"},fr:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-6);return e>=0&&e<2?"one":i!=0&&g==0&&n?"many":"other"},ga:function A(e){var t=String(e).split("."),i=Number(t[0])==e;return e==1?"one":e==2?"two":i&&e>=3&&e<=6?"few":i&&e>=7&&e<=10?"many":"other"},gd:function A(e){var t=String(e).split("."),i=Number(t[0])==e;return e==1||e==11?"one":e==2||e==12?"two":i&&e>=3&&e<=10||i&&e>=13&&e<=19?"few":"other"},he:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=Number(t[0])==e,I=g&&t[0].slice(-1);return e==1&&n?"one":i==2&&n?"two":n&&(e<0||e>10)&&g&&I==0?"many":"other"},is:function A(e){var t=String(e).split("."),i=t[0],n=Number(t[0])==e,g=i.slice(-1),I=i.slice(-2);return n&&g==1&&I!=11||!n?"one":"other"},it:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-6);return e==1&&n?"one":i!=0&&g==0&&n?"many":"other"},ksh:function A(e){return e==0?"zero":e==1?"one":"other"},lt:function A(e){var t=String(e).split("."),i=t[1]||"",n=Number(t[0])==e,g=n&&t[0].slice(-1),I=n&&t[0].slice(-2);return g==1&&(I<11||I>19)?"one":g>=2&&g<=9&&(I<11||I>19)?"few":i!=0?"many":"other"},lv:function A(e){var t=String(e).split("."),i=t[1]||"",n=i.length,g=Number(t[0])==e,I=g&&t[0].slice(-1),o=g&&t[0].slice(-2),a=i.slice(-2),r=i.slice(-1);return g&&I==0||o>=11&&o<=19||n==2&&a>=11&&a<=19?"zero":I==1&&o!=11||n==2&&r==1&&a!=11||n!=2&&r==1?"one":"other"},mk:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"",g=!t[1],I=i.slice(-1),o=i.slice(-2),a=n.slice(-1),r=n.slice(-2);return g&&I==1&&o!=11||a==1&&r!=11?"one":"other"},mt:function A(e){var t=String(e).split("."),i=Number(t[0])==e,n=i&&t[0].slice(-2);return e==1?"one":e==0||n>=2&&n<=10?"few":n>=11&&n<=19?"many":"other"},pa:function A(e){return e==0||e==1?"one":"other"},pl:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-1),I=i.slice(-2);return e==1&&n?"one":n&&g>=2&&g<=4&&(I<12||I>14)?"few":n&&i!=1&&(g==0||g==1)||n&&g>=5&&g<=9||n&&I>=12&&I<=14?"many":"other"},pt:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-6);return i==0||i==1?"one":i!=0&&g==0&&n?"many":"other"},ro:function A(e){var t=String(e).split("."),i=!t[1],n=Number(t[0])==e,g=n&&t[0].slice(-2);return e==1&&i?"one":!i||e==0||g>=2&&g<=19?"few":"other"},ru:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-1),I=i.slice(-2);return n&&g==1&&I!=11?"one":n&&g>=2&&g<=4&&(I<12||I>14)?"few":n&&g==0||n&&g>=5&&g<=9||n&&I>=11&&I<=14?"many":"other"},se:function A(e){return e==1?"one":e==2?"two":"other"},si:function A(e){var t=String(e).split("."),i=t[0],n=t[1]||"";return e==0||e==1||i==0&&n==1?"one":"other"},sl:function A(e){var t=String(e).split("."),i=t[0],n=!t[1],g=i.slice(-2);return n&&g==1?"one":n&&g==2?"two":n&&(g==3||g==4)||!n?"few":"other"}};$.as=$.am;$.az=$.af;$.bg=$.af;$.bn=$.am;$.brx=$.af;$.ca=$.ast;$.ce=$.af;$.chr=$.af;$.de=$.ast;$.ee=$.af;$.el=$.af;$.en=$.ast;$.et=$.ast;$.eu=$.af;$.fa=$.am;$.fi=$.ast;$.fil=$.ceb;$.fo=$.af;$.fur=$.af;$.fy=$.ast;$.gl=$.ast;$.gu=$.am;$.ha=$.af;$.hi=$.am;$.hr=$.bs;$.hsb=$.dsb;$.hu=$.af;$.hy=$.ff;$.ia=$.ast;$.id=$.dz;$.ig=$.dz;$.ja=$.dz;$.jgo=$.af;$.jv=$.dz;$.ka=$.af;$.kea=$.dz;$.kk=$.af;$.kl=$.af;$.km=$.dz;$.kn=$.am;$.ko=$.dz;$.ku=$.af;$.ky=$.af;$.lb=$.af;$.lkt=$.dz;$.lo=$.dz;$.ml=$.af;$.mn=$.af;$.mr=$.af;$.ms=$.dz;$.my=$.dz;$.nb=$.af;$.ne=$.af;$.nl=$.ast;$.nn=$.af;$.no=$.af;$.or=$.af;$.pcm=$.am;$.ps=$.af;$.rm=$.af;$.sah=$.dz;$.sc=$.ast;$.sd=$.af;$.sk=$.cs;$.so=$.af;$.sq=$.af;$.sr=$.bs;$.su=$.dz;$.sv=$.ast;$.sw=$.ast;$.ta=$.af;$.te=$.af;$.th=$.dz;$.ti=$.pa;$.tk=$.af;$.to=$.dz;$.tr=$.af;$.ug=$.af;$.uk=$.ru;$.ur=$.ast;$.uz=$.af;$.vi=$.dz;$.wae=$.af;$.wo=$.dz;$.yi=$.ast;$.yo=$.dz;$.yue=$.dz;$.zh=$.dz;$.zu=$.am;var PluralRuleFunctions=$;function getPluralRulesLocale(A){return A==="pt-PT"?A:getLanguageFromLanguageTag(A)}var LANGUAGE_REG_EXP=/^([a-z0-9]+)/i;function getLanguageFromLanguageTag(A){var e=A.match(LANGUAGE_REG_EXP);if(!e)throw new TypeError("Invalid locale: ".concat(A));return e[1]}function _classCallCheck$3(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(A,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(A,i.key,i)}}function _createClass$3(A,e,t){return e&&_defineProperties$3(A.prototype,e),t&&_defineProperties$3(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var PluralRules=function(){function A(e,t){_classCallCheck$3(this,A);var i=A.supportedLocalesOf(e);if(i.length===0)throw new RangeError("Unsupported locale: "+e);if(t&&t.type!=="cardinal")throw new RangeError('Only "cardinal" "type" is supported');this.$=PluralRuleFunctions[getPluralRulesLocale(i[0])]}return _createClass$3(A,[{key:"select",value:function(t){return this.$(t)}}],[{key:"supportedLocalesOf",value:function(t){return typeof t=="string"&&(t=[t]),t.filter(function(i){return PluralRuleFunctions[getPluralRulesLocale(i)]})}}]),A}();function _typeof$5(A){return _typeof$5=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$5(A)}function ownKeys$9(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$9(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$9(Object(t),!0).forEach(function(i){_defineProperty$9(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$9(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$9(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}function _slicedToArray$1(A,e){return _arrayWithHoles$1(A)||_iterableToArrayLimit$1(A,e)||_unsupportedIterableToArray$2(A,e)||_nonIterableRest$1()}function _nonIterableRest$1(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray$2(A,e){if(!!A){if(typeof A=="string")return _arrayLikeToArray$2(A,e);var t=Object.prototype.toString.call(A).slice(8,-1);if(t==="Object"&&A.constructor&&(t=A.constructor.name),t==="Map"||t==="Set")return Array.from(A);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray$2(A,e)}}function _arrayLikeToArray$2(A,e){(e==null||e>A.length)&&(e=A.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=A[t];return i}function _iterableToArrayLimit$1(A,e){var t=A==null?null:typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t!=null){var i=[],n=!0,g=!1,I,o;try{for(t=t.call(A);!(n=(I=t.next()).done)&&(i.push(I.value),!(e&&i.length===e));n=!0);}catch(a){g=!0,o=a}finally{try{!n&&t.return!=null&&t.return()}finally{if(g)throw o}}return i}}function _arrayWithHoles$1(A){if(Array.isArray(A))return A}function _classCallCheck$2(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(A,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(A,i.key,i)}}function _createClass$2(A,e,t){return e&&_defineProperties$2(A.prototype,e),t&&_defineProperties$2(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var UNITS=["second","minute","hour","day","week","month","quarter","year"],NUMERIC_VALUES=["auto","always"],STYLE_VALUES=["long","short","narrow"],LOCALE_MATCHER_VALUES=["lookup","best fit"],RelativeTimeFormat=function(){function A(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};_classCallCheck$2(this,A);var i=t.numeric,n=t.style,g=t.localeMatcher;if(this.numeric="always",this.style="long",this.localeMatcher="lookup",i!==void 0){if(NUMERIC_VALUES.indexOf(i)<0)throw new RangeError('Invalid "numeric" option: '.concat(i));this.numeric=i}if(n!==void 0){if(STYLE_VALUES.indexOf(n)<0)throw new RangeError('Invalid "style" option: '.concat(n));this.style=n}if(g!==void 0){if(LOCALE_MATCHER_VALUES.indexOf(g)<0)throw new RangeError('Invalid "localeMatcher" option: '.concat(g));this.localeMatcher=g}if(typeof e=="string"&&(e=[e]),e.push(getDefaultLocale()),this.locale=A.supportedLocalesOf(e,{localeMatcher:this.localeMatcher})[0],!this.locale)throw new Error("No supported locale was found");PluralRules.supportedLocalesOf(this.locale).length>0?this.pluralRules=new PluralRules(this.locale):console.warn('"'.concat(this.locale,'" locale is not supported')),typeof Intl<"u"&&Intl.NumberFormat?(this.numberFormat=new Intl.NumberFormat(this.locale),this.numberingSystem=this.numberFormat.resolvedOptions().numberingSystem):this.numberingSystem="latn",this.locale=resolveLocale(this.locale,{localeMatcher:this.localeMatcher})}return _createClass$2(A,[{key:"format",value:function(){var t=parseFormatArgs(arguments),i=_slicedToArray$1(t,2),n=i[0],g=i[1];return this.getRule(n,g).replace("{0}",this.formatNumber(Math.abs(n)))}},{key:"formatToParts",value:function(){var t=parseFormatArgs(arguments),i=_slicedToArray$1(t,2),n=i[0],g=i[1],I=this.getRule(n,g),o=I.indexOf("{0}");if(o<0)return[{type:"literal",value:I}];var a=[];return o>0&&a.push({type:"literal",value:I.slice(0,o)}),a=a.concat(this.formatNumberToParts(Math.abs(n)).map(function(r){return _objectSpread$9(_objectSpread$9({},r),{},{unit:g})})),o+3<I.length-1&&a.push({type:"literal",value:I.slice(o+3)}),a}},{key:"getRule",value:function(t,i){var n=getLocaleData$1(this.locale)[this.style][i];if(typeof n=="string")return n;if(this.numeric==="auto"){if(t===-2||t===-1){var g=n["previous".concat(t===-1?"":"-"+Math.abs(t))];if(g)return g}else if(t===1||t===2){var I=n["next".concat(t===1?"":"-"+Math.abs(t))];if(I)return I}else if(t===0&&n.current)return n.current}var o=n[isNegative(t)?"past":"future"];if(typeof o=="string")return o;var a=this.pluralRules&&this.pluralRules.select(Math.abs(t))||"other";return o[a]||o.other}},{key:"formatNumber",value:function(t){return this.numberFormat?this.numberFormat.format(t):String(t)}},{key:"formatNumberToParts",value:function(t){return this.numberFormat&&this.numberFormat.formatToParts?this.numberFormat.formatToParts(t):[{type:"integer",value:this.formatNumber(t)}]}},{key:"resolvedOptions",value:function(){return{locale:this.locale,style:this.style,numeric:this.numeric,numberingSystem:this.numberingSystem}}}]),A}();RelativeTimeFormat.supportedLocalesOf=function(A){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(typeof A=="string")A=[A];else if(!Array.isArray(A))throw new TypeError('Invalid "locales" argument');return A.filter(function(t){return resolveLocale(t,e)})};RelativeTimeFormat.addLocale=addLocaleData$1;RelativeTimeFormat.setDefaultLocale=setDefaultLocale;RelativeTimeFormat.getDefaultLocale=getDefaultLocale;RelativeTimeFormat.PluralRules=PluralRules;var UNIT_ERROR='Invalid "unit" argument';function parseUnit(A){if(_typeof$5(A)==="symbol")throw new TypeError(UNIT_ERROR);if(typeof A!="string")throw new RangeError("".concat(UNIT_ERROR,": ").concat(A));if(A[A.length-1]==="s"&&(A=A.slice(0,A.length-1)),UNITS.indexOf(A)<0)throw new RangeError("".concat(UNIT_ERROR,": ").concat(A));return A}var NUMBER_ERROR='Invalid "number" argument';function parseNumber(A){if(A=Number(A),Number.isFinite&&!Number.isFinite(A))throw new RangeError("".concat(NUMBER_ERROR,": ").concat(A));return A}function isNegativeZero(A){return 1/A===-1/0}function isNegative(A){return A<0||A===0&&isNegativeZero(A)}function parseFormatArgs(A){if(A.length<2)throw new TypeError('"unit" argument is required');return[parseNumber(A[0]),parseUnit(A[1])]}function _typeof$4(A){return _typeof$4=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$4(A)}function _classCallCheck$1(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(A,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(A,i.key,i)}}function _createClass$1(A,e,t){return e&&_defineProperties$1(A.prototype,e),t&&_defineProperties$1(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var Cache=function(){function A(){_classCallCheck$1(this,A),this.cache={}}return _createClass$1(A,[{key:"get",value:function(){for(var t=this.cache,i=arguments.length,n=new Array(i),g=0;g<i;g++)n[g]=arguments[g];for(var I=0,o=n;I<o.length;I++){var a=o[I];if(_typeof$4(t)!=="object")return;t=t[a]}return t}},{key:"put",value:function(){for(var t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];for(var g=i.pop(),I=i.pop(),o=this.cache,a=0,r=i;a<r.length;a++){var s=r[a];_typeof$4(o[s])!=="object"&&(o[s]={}),o=o[s]}return o[I]=g}}]),A}();function _typeof$3(A){return _typeof$3=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$3(A)}function _createForOfIteratorHelperLoose$1(A,e){var t=typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t)return(t=t.call(A)).next.bind(t);if(Array.isArray(A)||(t=_unsupportedIterableToArray$1(A))||e&&A&&typeof A.length=="number"){t&&(A=t);var i=0;return function(){return i>=A.length?{done:!0}:{done:!1,value:A[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray$1(A,e){if(!!A){if(typeof A=="string")return _arrayLikeToArray$1(A,e);var t=Object.prototype.toString.call(A).slice(8,-1);if(t==="Object"&&A.constructor&&(t=A.constructor.name),t==="Map"||t==="Set")return Array.from(A);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray$1(A,e)}}function _arrayLikeToArray$1(A,e){(e==null||e>A.length)&&(e=A.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=A[t];return i}function chooseLocale(A,e){for(var t=_createForOfIteratorHelperLoose$1(A),i;!(i=t()).done;){var n=i.value;if(e(n))return n;for(var g=n.split("-");g.length>1;)if(g.pop(),n=g.join("-"),e(n))return n}throw new Error("No locale data has been registered for any of the locales: ".concat(A.join(", ")))}function intlDateTimeFormatSupported(){var A=(typeof Intl>"u"?"undefined":_typeof$3(Intl))==="object";return A&&typeof Intl.DateTimeFormat=="function"}function _typeof$2(A){return _typeof$2=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$2(A)}function isStyleObject(A){return isObject(A)&&(Array.isArray(A.steps)||Array.isArray(A.gradation)||Array.isArray(A.flavour)||typeof A.flavour=="string"||Array.isArray(A.labels)||typeof A.labels=="string"||Array.isArray(A.units)||typeof A.custom=="function")}var OBJECT_CONSTRUCTOR={}.constructor;function isObject(A){return _typeof$2(A)!==void 0&&A!==null&&A.constructor===OBJECT_CONSTRUCTOR}var minute=60,hour=60*minute,day=24*hour,week=7*day,month=30.44*day,year=146097/400*day;function getSecondsInUnit(A){switch(A){case"second":return 1;case"minute":return minute;case"hour":return hour;case"day":return day;case"week":return week;case"month":return month;case"year":return year}}function getStepDenominator(A){return A.factor!==void 0?A.factor:getSecondsInUnit(A.unit||A.formatAs)||1}function getRoundFunction(A){switch(A){case"floor":return Math.floor;default:return Math.round}}function getDiffRatioToNextRoundedNumber(A){switch(A){case"floor":return 1;default:return .5}}function _typeof$1(A){return _typeof$1=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$1(A)}function getStepMinTime(A,e){var t=e.prevStep,i=e.timestamp,n=e.now,g=e.future,I=e.round,o;return t&&(t.id||t.unit)&&(o=A["threshold_for_".concat(t.id||t.unit)]),o===void 0&&A.threshold!==void 0&&(o=A.threshold,typeof o=="function"&&(o=o(n,g))),o===void 0&&(o=A.minTime),_typeof$1(o)==="object"&&(t&&t.id&&o[t.id]!==void 0?o=o[t.id]:o=o.default),typeof o=="function"&&(o=o(i,{future:g,getMinTimeForUnit:function(r,s){return _getMinTimeForUnit(r,s||t&&t.formatAs,{round:I})}})),o===void 0&&A.test&&(A.test(i,{now:n,future:g})?o=0:o=9007199254740991),o===void 0&&(t?A.formatAs&&t.formatAs&&(o=_getMinTimeForUnit(A.formatAs,t.formatAs,{round:I})):o=0),o===void 0&&console.warn("[javascript-time-ago] A step should specify `minTime`:\n"+JSON.stringify(A,null,2)),o}function _getMinTimeForUnit(A,e,t){var i=t.round,n=getSecondsInUnit(A),g;if(e==="now"?g=getSecondsInUnit(A):g=getSecondsInUnit(e),n!==void 0&&g!==void 0)return n-g*(1-getDiffRatioToNextRoundedNumber(i))}function ownKeys$8(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$8(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$8(Object(t),!0).forEach(function(i){_defineProperty$8(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$8(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$8(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}function getStep(A,e,t){var i=t.now,n=t.future,g=t.round,I=t.units,o=t.getNextStep;A=filterStepsByUnits(A,I);var a=_getStep(A,e,{now:i,future:n,round:g});if(o){if(a){var r=A[A.indexOf(a)-1],s=A[A.indexOf(a)+1];return[r,a,s]}return[void 0,void 0,A[0]]}return a}function _getStep(A,e,t){var i=t.now,n=t.future,g=t.round;if(A.length!==0){var I=getStepIndex(A,e,{now:i,future:n||e<0,round:g});if(I!==-1){var o=A[I];if(o.granularity){var a=getRoundFunction(g)(Math.abs(e)/getStepDenominator(o)/o.granularity)*o.granularity;if(a===0&&I>0)return A[I-1]}return o}}}function getStepIndex(A,e,t){var i=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,n=getStepMinTime(A[i],_objectSpread$8({prevStep:A[i-1],timestamp:t.now-e*1e3},t));return n===void 0||Math.abs(e)<n?i-1:i===A.length-1?i:getStepIndex(A,e,t,i+1)}function filterStepsByUnits(A,e){return A.filter(function(t){var i=t.unit,n=t.formatAs;return i=i||n,i?e.indexOf(i)>=0:!0})}function getTimeToNextUpdateForUnit(A,e,t){var i=t.now,n=t.round;if(!!getSecondsInUnit(A)){var g=getSecondsInUnit(A)*1e3,I=e>i,o=Math.abs(e-i),a=getRoundFunction(n)(o/g)*g;return I?a>0?o-a+getDiffToPreviousRoundedNumber(n,g):o-a+1:-(o-a)+getDiffToNextRoundedNumber(n,g)}}function getDiffToNextRoundedNumber(A,e){return getDiffRatioToNextRoundedNumber(A)*e}function getDiffToPreviousRoundedNumber(A,e){return(1-getDiffRatioToNextRoundedNumber(A))*e+1}var YEAR=365*24*60*60*1e3,INFINITY=1e3*YEAR;function getTimeToNextUpdate(A,e,t){var i=t.prevStep,n=t.nextStep,g=t.now,I=t.future,o=t.round,a=A.getTime?A.getTime():A,r=function(c){return getTimeToNextUpdateForUnit(c,a,{now:g,round:o})},s=getTimeToStepChange(I?e:n,a,{future:I,now:g,round:o,prevStep:I?i:e});if(s!==void 0){var B;if(e&&(e.getTimeToNextUpdate&&(B=e.getTimeToNextUpdate(a,{getTimeToNextUpdateForUnit:r,getRoundFunction,now:g,future:I,round:o})),B===void 0)){var C=e.unit||e.formatAs;C&&(B=r(C))}return B===void 0?s:Math.min(B,s)}}function getStepChangesAt(A,e,t){var i=t.now,n=t.future,g=t.round,I=t.prevStep,o=getStepMinTime(A,{timestamp:e,now:i,future:n,round:g,prevStep:I});if(o!==void 0)return n?e-o*1e3+1:o===0&&e===i?INFINITY:e+o*1e3}function getTimeToStepChange(A,e,t){var i=t.now,n=t.future,g=t.round,I=t.prevStep;if(A){var o=getStepChangesAt(A,e,{now:i,future:n,round:g,prevStep:I});return o===void 0?void 0:o-i}else return n?e-i+1:INFINITY}var localesData={};function getLocaleData(A){return localesData[A]}function addLocaleData(A){if(!A)throw new Error("[javascript-time-ago] No locale data passed.");localesData[A.locale]=A}var round$1=[{formatAs:"now"},{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"}],round={steps:round$1,labels:"long"};function ownKeys$7(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$7(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$7(Object(t),!0).forEach(function(i){_defineProperty$7(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$7(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$7(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var defaultStyle=_objectSpread$7(_objectSpread$7({},round),{},{steps:round.steps.filter(function(A){return A.formatAs!=="second"})}),approximate$1=[{factor:1,unit:"now"},{threshold:1,threshold_for_now:45.5,factor:1,unit:"second"},{threshold:45.5,factor:minute,unit:"minute"},{threshold:2.5*minute,granularity:5,factor:minute,unit:"minute"},{threshold:22.5*minute,factor:.5*hour,unit:"half-hour"},{threshold:42.5*minute,threshold_for_minute:52.5*minute,factor:hour,unit:"hour"},{threshold:20.5/24*day,factor:day,unit:"day"},{threshold:5.5*day,factor:week,unit:"week"},{threshold:3.5*week,factor:month,unit:"month"},{threshold:10.5*month,factor:year,unit:"year"}],approximate={gradation:approximate$1,flavour:"long",units:["now","minute","hour","day","week","month","year"]},approximateTime={gradation:approximate$1,flavour:"long-time",units:["now","minute","hour","day","week","month","year"]};function getDate(A){return A instanceof Date?A:new Date(A)}var steps=[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"}],formatters={},monthAndDay={minTime:function A(e,t){t.future;var i=t.getMinTimeForUnit;return i("day")},format:function A(e,t){return formatters[t]||(formatters[t]={}),formatters[t].dayMonth||(formatters[t].dayMonth=new Intl.DateTimeFormat(t,{month:"short",day:"numeric"})),formatters[t].dayMonth.format(getDate(e))}},yearMonthAndDay={minTime:function A(e,t){var i=t.future;if(i){var n=new Date(new Date(e).getFullYear(),0).getTime()-1;return(e-n)/1e3}else{var g=new Date(new Date(e).getFullYear()+1,0).getTime();return(g-e)/1e3}},format:function A(e,t){return formatters[t]||(formatters[t]={}),formatters[t].dayMonthYear||(formatters[t].dayMonthYear=new Intl.DateTimeFormat(t,{year:"numeric",month:"short",day:"numeric"})),formatters[t].dayMonthYear.format(getDate(e))}};intlDateTimeFormatSupported()?steps.push(monthAndDay,yearMonthAndDay):steps.push({formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"});var twitter={steps,labels:["mini","short-time","narrow","short"]};function ownKeys$6(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$6(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$6(Object(t),!0).forEach(function(i){_defineProperty$6(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$6(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$6(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterNow=_objectSpread$6(_objectSpread$6({},twitter),{},{steps:[{formatAs:"now"}].concat(twitter.steps)});function ownKeys$5(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$5(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$5(Object(t),!0).forEach(function(i){_defineProperty$5(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$5(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$5(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterMinute=_objectSpread$5(_objectSpread$5({},twitter),{},{steps:twitter.steps.filter(function(A){return A.formatAs!=="second"})});function ownKeys$4(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$4(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$4(Object(t),!0).forEach(function(i){_defineProperty$4(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$4(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$4(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterMinuteNow=_objectSpread$4(_objectSpread$4({},twitterMinute),{},{steps:[{formatAs:"now"}].concat(twitterMinute.steps)});function ownKeys$3(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$3(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$3(Object(t),!0).forEach(function(i){_defineProperty$3(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$3(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$3(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var twitterFirstMinute=_objectSpread$3(_objectSpread$3({},twitter),{},{steps:twitter.steps.filter(function(A){return A.formatAs!=="second"}).map(function(A){return A.formatAs==="minute"?_objectSpread$3(_objectSpread$3({},A),{},{minTime:minute}):A})}),mini={steps:[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"month"},{formatAs:"year"}],labels:["mini","short-time","narrow","short"]};function ownKeys$2(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$2(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$2(Object(t),!0).forEach(function(i){_defineProperty$2(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$2(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$2(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var miniNow=_objectSpread$2(_objectSpread$2({},mini),{},{steps:[{formatAs:"now"}].concat(mini.steps)});function ownKeys$1(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread$1(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys$1(Object(t),!0).forEach(function(i){_defineProperty$1(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys$1(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty$1(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var miniMinute=_objectSpread$1(_objectSpread$1({},mini),{},{steps:mini.steps.filter(function(A){return A.formatAs!=="second"})});function ownKeys(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(A);e&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(A,n).enumerable})),t.push.apply(t,i)}return t}function _objectSpread(A){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ownKeys(Object(t),!0).forEach(function(i){_defineProperty(A,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(i){Object.defineProperty(A,i,Object.getOwnPropertyDescriptor(t,i))})}return A}function _defineProperty(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}var miniMinuteNow=_objectSpread(_objectSpread({},miniMinute),{},{steps:[{formatAs:"now"}].concat(miniMinute.steps)});function getStyleByName(A){switch(A){case"default":case"round":return round;case"round-minute":return defaultStyle;case"approximate":return approximate;case"time":case"approximate-time":return approximateTime;case"mini":return mini;case"mini-now":return miniNow;case"mini-minute":return miniMinute;case"mini-minute-now":return miniMinuteNow;case"twitter":return twitter;case"twitter-now":return twitterNow;case"twitter-minute":return twitterMinute;case"twitter-minute-now":return twitterMinuteNow;case"twitter-first-minute":return twitterFirstMinute;default:return approximate}}function _typeof(A){return _typeof=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(A)}function _createForOfIteratorHelperLoose(A,e){var t=typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t)return(t=t.call(A)).next.bind(t);if(Array.isArray(A)||(t=_unsupportedIterableToArray(A))||e&&A&&typeof A.length=="number"){t&&(A=t);var i=0;return function(){return i>=A.length?{done:!0}:{done:!1,value:A[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _slicedToArray(A,e){return _arrayWithHoles(A)||_iterableToArrayLimit(A,e)||_unsupportedIterableToArray(A,e)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray(A,e){if(!!A){if(typeof A=="string")return _arrayLikeToArray(A,e);var t=Object.prototype.toString.call(A).slice(8,-1);if(t==="Object"&&A.constructor&&(t=A.constructor.name),t==="Map"||t==="Set")return Array.from(A);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(A,e)}}function _arrayLikeToArray(A,e){(e==null||e>A.length)&&(e=A.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=A[t];return i}function _iterableToArrayLimit(A,e){var t=A==null?null:typeof Symbol<"u"&&A[Symbol.iterator]||A["@@iterator"];if(t!=null){var i=[],n=!0,g=!1,I,o;try{for(t=t.call(A);!(n=(I=t.next()).done)&&(i.push(I.value),!(e&&i.length===e));n=!0);}catch(a){g=!0,o=a}finally{try{!n&&t.return!=null&&t.return()}finally{if(g)throw o}}return i}}function _arrayWithHoles(A){if(Array.isArray(A))return A}function _classCallCheck(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(A,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(A,i.key,i)}}function _createClass(A,e,t){return e&&_defineProperties(A.prototype,e),t&&_defineProperties(A,t),Object.defineProperty(A,"prototype",{writable:!1}),A}var TimeAgo=function(){function A(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},i=t.polyfill;_classCallCheck(this,A),typeof e=="string"&&(e=[e]),this.locale=chooseLocale(e.concat(A.getDefaultLocale()),getLocaleData),typeof Intl<"u"&&Intl.NumberFormat&&(this.numberFormat=new Intl.NumberFormat(this.locale)),i===!1?(this.IntlRelativeTimeFormat=Intl.RelativeTimeFormat,this.IntlPluralRules=Intl.PluralRules):(this.IntlRelativeTimeFormat=RelativeTimeFormat,this.IntlPluralRules=RelativeTimeFormat.PluralRules),this.relativeTimeFormatCache=new Cache,this.pluralRulesCache=new Cache}return _createClass(A,[{key:"format",value:function(t,i,n){n||(i&&!isStyle(i)?(n=i,i=void 0):n={}),i||(i=defaultStyle),typeof i=="string"&&(i=getStyleByName(i));var g=getTimestamp(t),I=this.getLabels(i.flavour||i.labels),o=I.labels,a=I.labelsType,r;i.now!==void 0&&(r=i.now),r===void 0&&n.now!==void 0&&(r=n.now),r===void 0&&(r=Date.now());var s=(r-g)/1e3,B=n.future||s<0,C=getNowLabel(o,getLocaleData(this.locale).now,getLocaleData(this.locale).long,B);if(i.custom){var l=i.custom({now:r,date:new Date(g),time:g,elapsed:s,locale:this.locale});if(l!==void 0)return l}var c=getTimeIntervalMeasurementUnits(i.units,o,C),Q=n.round||i.round,E=getStep(i.gradation||i.steps||defaultStyle.steps,s,{now:r,units:c,round:Q,future:B,getNextStep:!0}),f=_slicedToArray(E,3),u=f[0],h=f[1],p=f[2],S=this.formatDateForStep(g,h,s,{labels:o,labelsType:a,nowLabel:C,now:r,future:B,round:Q})||"";if(n.getTimeToNextUpdate){var H=getTimeToNextUpdate(g,h,{nextStep:p,prevStep:u,now:r,future:B,round:Q});return[S,H]}return S}},{key:"formatDateForStep",value:function(t,i,n,g){var I=this,o=g.labels,a=g.labelsType,r=g.nowLabel,s=g.now,B=g.future,C=g.round;if(!!i){if(i.format)return i.format(t,this.locale,{formatAs:function(f,u){return I.formatValue(u,f,{labels:o,future:B})},now:s,future:B});var l=i.unit||i.formatAs;if(!l)throw new Error("[javascript-time-ago] Each step must define either `formatAs` or `format()`. Step: ".concat(JSON.stringify(i)));if(l==="now")return r;var c=Math.abs(n)/getStepDenominator(i);i.granularity&&(c=getRoundFunction(C)(c/i.granularity)*i.granularity);var Q=-1*Math.sign(n)*getRoundFunction(C)(c);switch(Q===0&&(B?Q=0:Q=-0),a){case"long":case"short":case"narrow":return this.getFormatter(a).format(Q,l);default:return this.formatValue(Q,l,{labels:o,future:B})}}}},{key:"formatValue",value:function(t,i,n){var g=n.labels,I=n.future;return this.getFormattingRule(g,i,t,{future:I}).replace("{0}",this.formatNumber(Math.abs(t)))}},{key:"getFormattingRule",value:function(t,i,n,g){var I=g.future;if(this.locale,t=t[i],typeof t=="string")return t;var o=n===0?I?"future":"past":n<0?"past":"future",a=t[o]||t;if(typeof a=="string")return a;var r=this.getPluralRules().select(Math.abs(n));return a[r]||a.other}},{key:"formatNumber",value:function(t){return this.numberFormat?this.numberFormat.format(t):String(t)}},{key:"getFormatter",value:function(t){return this.relativeTimeFormatCache.get(this.locale,t)||this.relativeTimeFormatCache.put(this.locale,t,new this.IntlRelativeTimeFormat(this.locale,{style:t}))}},{key:"getPluralRules",value:function(){return this.pluralRulesCache.get(this.locale)||this.pluralRulesCache.put(this.locale,new this.IntlPluralRules(this.locale))}},{key:"getLabels",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[];typeof t=="string"&&(t=[t]),t=t.map(function(o){switch(o){case"tiny":case"mini-time":return"mini";default:return o}}),t=t.concat("long");for(var i=getLocaleData(this.locale),n=_createForOfIteratorHelperLoose(t),g;!(g=n()).done;){var I=g.value;if(i[I])return{labelsType:I,labels:i[I]}}}}]),A}(),defaultLocale="en";TimeAgo.getDefaultLocale=function(){return defaultLocale};TimeAgo.setDefaultLocale=function(A){return defaultLocale=A};TimeAgo.addDefaultLocale=function(A){if(defaultLocaleHasBeenSpecified)return console.error("[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.");defaultLocaleHasBeenSpecified=!0,TimeAgo.setDefaultLocale(A.locale),TimeAgo.addLocale(A)};var defaultLocaleHasBeenSpecified;TimeAgo.addLocale=function(A){addLocaleData(A),RelativeTimeFormat.addLocale(A)};TimeAgo.locale=TimeAgo.addLocale;TimeAgo.addLabels=function(A,e,t){var i=getLocaleData(A);i||(addLocaleData({locale:A}),i=getLocaleData(A)),i[e]=t};function getTimestamp(A){if(A.constructor===Date||isMockedDate(A))return A.getTime();if(typeof A=="number")return A;throw new Error("Unsupported relative time formatter input: ".concat(_typeof(A),", ").concat(A))}function isMockedDate(A){return _typeof(A)==="object"&&typeof A.getTime=="function"}function getTimeIntervalMeasurementUnits(A,e,t){var i=Object.keys(e);return t&&i.push("now"),A&&(i=A.filter(function(n){return n==="now"||i.indexOf(n)>=0})),i}function getNowLabel(A,e,t,i){var n=A.now||e&&e.now;if(n)return typeof n=="string"?n:i?n.future:n.past;if(t&&t.second&&t.second.current)return t.second.current}function isStyle(A){return typeof A=="string"||isStyleObject(A)}var english_locale={locale:"en",long:{year:{previous:"last year",current:"this year",next:"next year",past:{one:"{0} year ago",other:"{0} years ago"},future:{one:"in {0} year",other:"in {0} years"}},quarter:{previous:"last quarter",current:"this quarter",next:"next quarter",past:{one:"{0} quarter ago",other:"{0} quarters ago"},future:{one:"in {0} quarter",other:"in {0} quarters"}},month:{previous:"last month",current:"this month",next:"next month",past:{one:"{0} month ago",other:"{0} months ago"},future:{one:"in {0} month",other:"in {0} months"}},week:{previous:"last week",current:"this week",next:"next week",past:{one:"{0} week ago",other:"{0} weeks ago"},future:{one:"in {0} week",other:"in {0} weeks"}},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:{one:"{0} hour ago",other:"{0} hours ago"},future:{one:"in {0} hour",other:"in {0} hours"}},minute:{current:"this minute",past:{one:"{0} minute ago",other:"{0} minutes ago"},future:{one:"in {0} minute",other:"in {0} minutes"}},second:{current:"now",past:{one:"{0} second ago",other:"{0} seconds ago"},future:{one:"in {0} second",other:"in {0} seconds"}}},short:{year:{previous:"last yr.",current:"this yr.",next:"next yr.",past:"{0} yr. ago",future:"in {0} yr."},quarter:{previous:"last qtr.",current:"this qtr.",next:"next qtr.",past:{one:"{0} qtr. ago",other:"{0} qtrs. ago"},future:{one:"in {0} qtr.",other:"in {0} qtrs."}},month:{previous:"last mo.",current:"this mo.",next:"next mo.",past:"{0} mo. ago",future:"in {0} mo."},week:{previous:"last wk.",current:"this wk.",next:"next wk.",past:"{0} wk. ago",future:"in {0} wk."},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:"{0} hr. ago",future:"in {0} hr."},minute:{current:"this minute",past:"{0} min. ago",future:"in {0} min."},second:{current:"now",past:"{0} sec. ago",future:"in {0} sec."}},narrow:{year:{previous:"last yr.",current:"this yr.",next:"next yr.",past:"{0} yr. ago",future:"in {0} yr."},quarter:{previous:"last qtr.",current:"this qtr.",next:"next qtr.",past:{one:"{0} qtr. ago",other:"{0} qtrs. ago"},future:{one:"in {0} qtr.",other:"in {0} qtrs."}},month:{previous:"last mo.",current:"this mo.",next:"next mo.",past:"{0} mo. ago",future:"in {0} mo."},week:{previous:"last wk.",current:"this wk.",next:"next wk.",past:"{0} wk. ago",future:"in {0} wk."},day:{previous:"yesterday",current:"today",next:"tomorrow",past:{one:"{0} day ago",other:"{0} days ago"},future:{one:"in {0} day",other:"in {0} days"}},hour:{current:"this hour",past:"{0} hr. ago",future:"in {0} hr."},minute:{current:"this minute",past:"{0} min. ago",future:"in {0} min."},second:{current:"now",past:"{0} sec. ago",future:"in {0} sec."}},now:{now:{current:"now",future:"in a moment",past:"just now"}},mini:{year:"{0}yr",month:"{0}mo",week:"{0}wk",day:"{0}d",hour:"{0}h",minute:"{0}m",second:"{0}s",now:"now"},"short-time":{year:"{0} yr.",month:"{0} mo.",week:"{0} wk.",day:{one:"{0} day",other:"{0} days"},hour:"{0} hr.",minute:"{0} min.",second:"{0} sec."},"long-time":{year:{one:"{0} year",other:"{0} years"},month:{one:"{0} month",other:"{0} months"},week:{one:"{0} week",other:"{0} weeks"},day:{one:"{0} day",other:"{0} days"},hour:{one:"{0} hour",other:"{0} hours"},minute:{one:"{0} minute",other:"{0} minutes"},second:{one:"{0} second",other:"{0} seconds"}}},SX_ACC_CREATED=`<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12 6H18V8H12V6Z" fill="#F7F7F7"/>
<path d="M14 10L14 4L16 4L16 10L14 10Z" fill="#F7F7F7"/>
<circle cx="7" cy="5" r="2" stroke="#F7F7F7" stroke-width="2"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M1 15C1.47608 12.1623 3.94405 10 6.91704 10C9.89004 10 12.358 12.1623 12.8341 15H10.791C10.347 13.2748 8.78088 12 6.91704 12C5.0532 12 3.4871 13.2748 3.04306 15H1Z" fill="#F7F7F7"/>
</svg>
`,TxnList_svelte_svelte_type_style_lang="";function get_each_context(A,e,t){const i=A.slice();return i[15]=e[t],i}const get_first_slot_changes=A=>({}),get_first_slot_context=A=>({});function create_catch_block(A){return{c:noop$1,m:noop$1,p:noop$1,i:noop$1,o:noop$1,d:noop$1}}function create_then_block(A){let e,t;return e=new Row({props:{name:A[18].title,detail:A[18].subtitle,amount:A[18].amount||"",fiat:A[18].fiat||"",$$slots:{below:[create_below_slot],right:[create_right_slot],icon:[create_icon_slot]},$$scope:{ctx:A}}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&1&&(g.name=i[18].title),n&1&&(g.detail=i[18].subtitle),n&1&&(g.amount=i[18].amount||""),n&1&&(g.fiat=i[18].fiat||""),n&33&&(g.$$scope={dirty:n,ctx:i}),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_icon_slot(A){let e,t;return e=new Put({props:{element:A[18].icon}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&1&&(g.element=i[18].icon),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_if_block_2(A){let e,t;return e=new PfpDisplay({props:{dim:36,name:A[18].name,ref:A[18].pfp,circular:A[15].type==="pending",rootStyle:"margin-left: 1em;"}}),{c(){create_component(e.$$.fragment)},m(i,n){mount_component(e,i,n),t=!0},p(i,n){const g={};n&1&&(g.name=i[18].name),n&1&&(g.ref=i[18].pfp),n&1&&(g.circular=i[15].type==="pending"),e.$set(g)},i(i){t||(transition_in(e.$$.fragment,i),t=!0)},o(i){transition_out(e.$$.fragment,i),t=!1},d(i){destroy_component(e,i)}}}function create_right_slot(A){let e,t,i=typeof A[18].pfp=="string"&&create_if_block_2(A);return{c(){i&&i.c(),e=empty()},m(n,g){i&&i.m(n,g),insert(n,e,g),t=!0},p(n,g){typeof n[18].pfp=="string"?i?(i.p(n,g),g&1&&transition_in(i,1)):(i=create_if_block_2(n),i.c(),transition_in(i,1),i.m(e.parentNode,e)):i&&(group_outros(),transition_out(i,1,1,()=>{i=null}),check_outros())},i(n){t||(transition_in(i),t=!0)},o(n){transition_out(i),t=!1},d(n){i&&i.d(n),n&&detach(e)}}}function create_if_block_1(A){let e;return{c(){e=element("span"),e.textContent="Pending",attr(e,"class","pill svelte-krovk1"),toggle_class(e,"display_none",!A[18].pending)},m(t,i){insert(t,e,i)},p(t,i){i&3&&toggle_class(e,"display_none",!t[18].pending)},d(t){t&&detach(e)}}}function create_if_block(A){let e,t,i=A[18].link.text+"",n,g,I,o;function a(){return A[4](A[18])}return{c(){e=element("span"),t=element("a"),n=text(i),attr(t,"href",g=A[18].link.href),attr(e,"class","link")},m(r,s){insert(r,e,s),append(e,t),append(t,n),I||(o=listen(t,"click",a),I=!0)},p(r,s){A=r,s&1&&i!==(i=A[18].link.text+"")&&set_data(n,i),s&1&&g!==(g=A[18].link.href)&&attr(t,"href",g)},d(r){r&&detach(e),I=!1,o()}}}function create_below_slot(A){let e,t,i=A[18].pending&&create_if_block_1(A),n=A[18].link&&create_if_block(A);return{c(){i&&i.c(),e=space(),n&&n.c(),t=empty()},m(g,I){i&&i.m(g,I),insert(g,e,I),n&&n.m(g,I),insert(g,t,I)},p(g,I){g[18].pending?i?i.p(g,I):(i=create_if_block_1(g),i.c(),i.m(e.parentNode,e)):i&&(i.d(1),i=null),g[18].link?n?n.p(g,I):(n=create_if_block(g),n.c(),n.m(t.parentNode,t)):n&&(n.d(1),n=null)},d(g){i&&i.d(g),g&&detach(e),n&&n.d(g),g&&detach(t)}}}function create_pending_block(A){let e;return{c(){e=text("Loading event...")},m(t,i){insert(t,e,i)},p:noop$1,i:noop$1,o:noop$1,d(t){t&&detach(e)}}}function create_each_block(A){let e,t,i,n={ctx:A,current:null,token:null,hasCatch:!1,pending:create_pending_block,then:create_then_block,catch:create_catch_block,value:18,blocks:[,,,]};return handle_promise(e=A[1](A[15]),n),{c(){n.block.c(),t=space()},m(g,I){n.block.m(g,n.anchor=I),n.mount=()=>t.parentNode,n.anchor=t,insert(g,t,I),i=!0},p(g,I){A=g,n.ctx=A,I&1&&e!==(e=A[1](A[15]))&&handle_promise(e,n)||update_await_block_branch(n,A,I)},i(g){i||(transition_in(n.block),i=!0)},o(g){for(let I=0;I<3;I+=1){const o=n.blocks[I];transition_out(o)}i=!1},d(g){n.block.d(g),n.token=null,n=null,g&&detach(t)}}}function create_fragment(A){let e,t,i;const n=A[3].first,g=create_slot(n,A,A[5],get_first_slot_context);let I=A[0],o=[];for(let r=0;r<I.length;r+=1)o[r]=create_each_block(get_each_context(A,I,r));const a=r=>transition_out(o[r],1,1,()=>{o[r]=null});return{c(){e=element("div"),g&&g.c(),t=space();for(let r=0;r<o.length;r+=1)o[r].c();attr(e,"class","txns no-margin")},m(r,s){insert(r,e,s),g&&g.m(e,null),append(e,t);for(let B=0;B<o.length;B+=1)o[B].m(e,null);i=!0},p(r,[s]){if(g&&g.p&&(!i||s&32)&&update_slot_base(g,n,r,r[5],i?get_slot_changes(n,r[5],s,get_first_slot_changes):get_all_dirty_from_scope(r[5]),get_first_slot_context),s&3){I=r[0];let B;for(B=0;B<I.length;B+=1){const C=get_each_context(r,I,B);o[B]?(o[B].p(C,s),transition_in(o[B],1)):(o[B]=create_each_block(C),o[B].c(),transition_in(o[B],1),o[B].m(e,null))}for(group_outros(),B=I.length;B<o.length;B+=1)a(B);check_outros()}},i(r){if(!i){transition_in(g,r);for(let s=0;s<I.length;s+=1)transition_in(o[s]);i=!0}},o(r){transition_out(g,r),o=o.filter(Boolean);for(let s=0;s<o.length;s+=1)transition_out(o[s]);i=!1},d(r){r&&detach(e),g&&g.d(r),destroy_each(o,r)}}}var TxnContext;(function(A){A.NONE="none",A.TOKEN="token",A.CONTACT="contact"})(TxnContext||(TxnContext={}));function instance(A,e,t){let{$$slots:i={},$$scope:n}=e,{events:g}=e,{context:I=TxnContext.NONE}=e;TxnContext.CONTACT,TxnContext.TOKEN;const o=c=>{const Q=dd("span",{class:"event-icon"});return Q.innerHTML=c,Q},a=o(SX_SEND);o(SX_RECV),o(SX_ACC_CREATED),TimeAgo.addDefaultLocale(english_locale);const r=new TimeAgo("en-US");function s(c){return r.format(c,"twitter")}const B={async pending(c){const{time:Q,data:{chain:E,coin:f,hash:u,owner:h,msg:p}}=c,S=await Chains.at(E),H=S.coins[f],M=new BigNumber(c.data.msg.amount[0].amount).shiftedBy(-S.coins[f].decimals).toNumber(),d=p.toAddress,y=Agents.pathForContact(d),w=await Agents.getContact(y);return{title:`Send ${H.name}`,name:f,icon:a,subtitle:`${s(Q)} / ${w?w.name:d}`,amount:`${format_amount(M,!0)} ${f}`,pfp:H.pfp,pending:!0}},async send(c){const{time:Q,data:{chain:E,coin:f,hash:u,owner:h,msg:p,height:S}}=c,H=await Chains.at(E),M=H.coins[f],d=new BigNumber(c.data.msg.amount[0].amount).shiftedBy(-H.coins[f].decimals).toNumber(),y=p.toAddress,w=Agents.pathForContact(y),k=await Agents.getContact(w);return{title:`Sent ${M.name}`,name:f,icon:o(SX_SEND),subtitle:`${s(Q)} / ${k?k.name:abbreviate_addr(y)}`,amount:`${format_amount(d,!0)} ${f}`,link:f==="SCRT"?{href:`https://secretnodes.com/secret/chains/pulsar-2/blocks/${S}/transactions/${u}`,text:"View on block explorer"}:null,pfp:M.pfp}},async account_created(c){const{time:Q,data:{account:E}}=c,f=await Accounts.at(E);return{title:"Account created",subtitle:`${s(Q)} / ${f.name}`,name:f.name,icon:o(SX_ACC_CREATED),pfp:f.pfp||""}},async receive(c){const{time:Q,data:{height:E,amount:f,chain:u,coin:h,recipient:p,sender:S}}=c,H=S,M=Agents.pathForContact(H),d=await Agents.getContact(M),y=await Chains.at(u),w=y.coins[h],[,k]=R_TRANSFER_AMOUNT.exec(f),D=new BigNumber(k).shiftedBy(-y.coins[h].decimals).toNumber();return{title:`Received ${w.name}`,name:h,icon:o(SX_RECV),subtitle:`${s(Q)} / ${d?d.name:abbreviate_addr(H)}`,amount:`${format_amount(D,!0)} ${h}`,pfp:w.pfp}},transaction(c){}};async function C(c){return await B[c.type](c)}const l=c=>open_external_link(c.link.href);return A.$$set=c=>{"events"in c&&t(0,g=c.events),"context"in c&&t(2,I=c.context),"$$scope"in c&&t(5,n=c.$$scope)},[g,C,I,i,l,n]}class TxnList extends SvelteComponent{constructor(e){super(),init(this,e,instance,create_fragment,safe_not_equal,{events:0,context:2})}}function writableSync(A){const e=writable(A);return Object.assign(Object.create(e),{set(t){return A=t,e.set(t)},get(){return A}})}function derivedSync(A,e){if(Array.isArray(A))return Object.assign(Object.create(derived(A,e)),{get(){return e(...A)}});{let t;const i=derived(A,(n,g)=>{e(n,I=>{t=I,g(I)})});return Object.assign(Object.create(i),{get(){return t}})}}const yw_navigator=writableSync(null),yw_chain_ref=writableSync(""),yw_chain=derivedSync(yw_chain_ref,(A,e)=>{Chains.read().then(t=>e(t.at(A))).catch(t=>{e(null)}),Networks.read().then(t=>t.entries().some(([i,n])=>A===n.chain?(yw_network_ref.set(i),!0):!1)).catch(t=>{yw_network_ref.set("")})}),yw_network_ref=writableSync(""),yw_network=writableSync(null),yw_network_active=derivedSync(yw_network_ref,(A,e)=>{A?(async()=>{const i=(await Networks.read()).at(A);yw_network.set(i),i.chain!==yw_chain_ref.get()&&yw_chain_ref.set(i.chain);const g=(await Chains.read()).at(i.chain);e(Networks.activate(i,g))})():(yw_network.set(null),e(null))}),yw_family=writableSync("");yw_chain.subscribe(A=>yw_family.set(A?.family||""));const yw_account_ref=writableSync(""),yw_account=derivedSync(yw_account_ref,(A,e)=>{Accounts.read().then(t=>e(t.at(A))).catch(t=>{e(null)})}),yw_owner=derived([yw_account,yw_chain],([A,e],t)=>{t(Chains.addressFor(A.pubkey,e))}),yw_menu_vendor=writableSync(!1),yw_overlay_account=writableSync(!1),yw_overlay_network=writableSync(!1),store_cache=A=>writableSync(null);async function reload(A){switch(A){case SI_STORE_MEDIA:{const e=await Medias.read();yw_store_medias.update(()=>e);break}case SI_STORE_TAGS:{const e=await Tags.read();yw_store_tags.update(()=>e)}}}const yw_store_medias=store_cache(),yw_store_tags=store_cache();global_receive({updateStore({key:A}){reload(A)}});async function initialize_caches(){await Promise.all([reload(SI_STORE_MEDIA),reload(SI_STORE_TAGS)])}const yw_page=writableSync(null),yw_thread=writableSync(null),yw_path=writableSync("");derivedSync(yw_path,A=>`s2r://root/${A}`);writableSync("");const yw_notifications=writableSync([]),yw_nav_collapsed=writable(!1),yw_nav_visible=writableSync(!1),yw_progress=writableSync([0,0]),yw_search=writable(""),yw_cancel_search=writableSync(F_NOOP);writableSync(null);writableSync(0);writableSync([]);const yw_header_props=writableSync({});writableSync(null);const yw_menu_expanded=writableSync(!1),yw_overscroll_pct=writableSync(0),yw_context_popup=writableSync(null),yw_popup=writableSync(null);function popup_receive(A){yw_context_popup.set({account:A}),yw_popup.set(PopupReceive)}const yw_blur=writableSync(!1);once_store_updates(yw_navigator).then(()=>{const A=document.documentElement.style;window.addEventListener("resize",()=>{A.setProperty("--app-window-width",`${window.innerWidth}px`),A.setProperty("--app-window-height",`${window.innerHeight}px`)}),window.dispatchEvent(new Event("resize")),window.addEventListener("keydown",e=>{e.key==="Escape"&&yw_popup.get()&&yw_popup.set(null)})});const $_EXISTING=Symbol("use-existing-cache"),H_REGISTRY={[P_PUBLIC_SUFFIX_LIST]:{format:"text",parse(A){if(!A)return $_EXISTING;const e=[];for(let t of A.split(/\n/g))t=t.replace(/\s+|\/\/.*$/,""),t&&e.push(t);return e}},[P_STARSHELL_DECREES]:{format:"json",filter(A){return A.filter(e=>!0)}}};async function cache_put(A,e){return await chrome.storage.local.set({[`@cache:${A}`]:e})}async function cache_get(A){return await storage_get(`@cache:${A}`)}class WebResourceCache{static async updateAll(){for(const e in H_REGISTRY){const t=H_REGISTRY[e],i=await fetch(e);switch(t.format){case"text":{const n=await i.text(),g=t.parse(n);if($_EXISTING===g)continue;await cache_put(e,{etag:i.headers.get("etag")??"",data:n});break}case"json":{let n=await i.json();"filter"in t&&(n=t.filter(n)),await cache_put(e,{etag:i.headers.get("etag")??"",data:n});break}}}}static async get(e){return(await cache_get(e))?.data||null}}export{run_all as $,ActionsLine as A,open_external_link as B,CheckboxField as C,qs as D,Events as E,global_receive as F,initialize_caches as G,yw_navigator as H,ode as I,register as J,login as K,F_NOOP as L,set_style as M,create_slot as N,toggle_class as O,P_STARSHELL_DECREES as P,append as Q,listen as R,SvelteComponent as S,update_slot_base as T,get_all_dirty_from_scope as U,Vault as V,WebResourceCache as W,XT_SECONDS as X,get_slot_changes as Y,group_outros as Z,check_outros as _,transition_out as a,Settings as a$,yw_nav_visible as a0,yw_blur as a1,compute_slots as a2,getContext as a3,createEventDispatcher as a4,onMount as a5,bubble as a6,src_url_equal as a7,set_data as a8,create_out_transition as a9,ATU8_DUMMY_VECTOR as aA,AlreadyRegisteredError as aB,InvalidPassphraseError as aC,add_render_callback as aD,create_bidirectional_transition as aE,slide as aF,yw_owner as aG,load_pfps as aH,Entities as aI,StarSelect as aJ,yw_network_active as aK,BigNumber as aL,XT_MINUTES as aM,CoinGecko as aN,format_amount as aO,oderac as aP,yw_family as aQ,subscribe_store as aR,onDestroy as aS,Agents as aT,Address as aU,Select as aV,text_to_buffer as aW,NB_MAX_MEMO as aX,syserr as aY,sha256$1 as aZ,format_fiat as a_,yw_search as aa,yw_cancel_search as ab,yw_thread as ac,yw_menu_vendor as ad,yw_overlay_network as ae,yw_chain as af,yw_chain_ref as ag,yw_overlay_account as ah,yw_account as ai,empty as aj,assign as ak,PfpDisplay as al,get_spread_update as am,get_spread_object as an,Close as ao,set_input_value as ap,handle_promise as aq,Chains as ar,update_await_block_branch as as,destroy_each as at,Row as au,acceptable as av,Field as aw,NL_PASSPHRASE_MINIMUM as ax,NL_PASSPHRASE_MAXIMUM as ay,ATU8_DUMMY_PHRASE as az,component_subscribe as b,SX_ICON_DROPDOWN as b0,fold as b1,string8_to_buffer as b2,Portrait as b3,oderom as b4,popup_receive as b5,forever as b6,Info as b7,SubHeader as b8,setContext as b9,logout as bA,yw_network as bB,dd as bC,objects_might_differ as bD,getAllContexts as bE,yw_network_ref as bF,once_store_updates as bG,timeout as bH,UnregisteredError as bI,RecoverableVaultError as bJ,CorruptedVaultError as bK,P_PUBLIC_SUFFIX_LIST as bL,R_DOMAIN_LOCALHOST as bM,R_DOMAIN_IP as bN,session_storage_remove as bO,create_store_class as bP,SI_STORE_APP_POLICIES as bQ,WritableStore as bR,session_storage_get as bS,global_broadcast as bT,fold_attrs as bU,R_TRANSFER_AMOUNT as bV,syswarn as bW,abbreviate_addr as bX,sha256_sync$1 as bY,afterUpdate as ba,writable as bb,tick as bc,Pfps as bd,ofe as be,ContactAgentType as bf,R_BECH32 as bg,InlineTags as bh,proper as bi,SX_ICON_EDIT$1 as bj,SX_ICON_DELETE as bk,quintOut as bl,Apps as bm,Networks as bn,TxnList as bo,svg_element as bp,yw_overscroll_pct as bq,yw_popup as br,yw_page as bs,yw_menu_expanded as bt,yw_notifications as bu,yw_nav_collapsed as bv,HtmlTag as bw,yw_header_props as bx,yw_progress as by,SX_ICON_CLOSE as bz,create_component as c,destroy_component as d,binding_callbacks as e,bind as f,space as g,element as h,init as i,insert as j,add_flush_callback as k,detach as l,mount_component as m,Secp256k1Key as n,Secrets as o,buffer_to_string8 as p,buffer_to_base64 as q,set_store_value as r,safe_not_equal as s,transition_in as t,Accounts as u,text as v,attr as w,noop$1 as x,yw_account_ref as y,SI_VERSION as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
