var S={exports:{}};const Ze="2.0.0",Ke=256,We=Number.MAX_SAFE_INTEGER||9007199254740991,Je=16;var z={SEMVER_SPEC_VERSION:Ze,MAX_LENGTH:Ke,MAX_SAFE_INTEGER:We,MAX_SAFE_COMPONENT_LENGTH:Je};const Qe=typeof process=="object"&&process.env&&{}.NODE_DEBUG&&/\bsemver\b/i.test({}.NODE_DEBUG)?(...t)=>console.error("SEMVER",...t):()=>{};var Z=Qe;(function(t,e){const{MAX_SAFE_COMPONENT_LENGTH:r}=z,s=Z;e=t.exports={};const i=e.re=[],n=e.src=[],a=e.t={};let o=0;const l=(u,f,h)=>{const p=o++;s(u,p,f),a[u]=p,n[p]=f,i[p]=new RegExp(f,h?"g":void 0)};l("NUMERICIDENTIFIER","0|[1-9]\\d*"),l("NUMERICIDENTIFIERLOOSE","[0-9]+"),l("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),l("MAINVERSION",`(${n[a.NUMERICIDENTIFIER]})\\.(${n[a.NUMERICIDENTIFIER]})\\.(${n[a.NUMERICIDENTIFIER]})`),l("MAINVERSIONLOOSE",`(${n[a.NUMERICIDENTIFIERLOOSE]})\\.(${n[a.NUMERICIDENTIFIERLOOSE]})\\.(${n[a.NUMERICIDENTIFIERLOOSE]})`),l("PRERELEASEIDENTIFIER",`(?:${n[a.NUMERICIDENTIFIER]}|${n[a.NONNUMERICIDENTIFIER]})`),l("PRERELEASEIDENTIFIERLOOSE",`(?:${n[a.NUMERICIDENTIFIERLOOSE]}|${n[a.NONNUMERICIDENTIFIER]})`),l("PRERELEASE",`(?:-(${n[a.PRERELEASEIDENTIFIER]}(?:\\.${n[a.PRERELEASEIDENTIFIER]})*))`),l("PRERELEASELOOSE",`(?:-?(${n[a.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${n[a.PRERELEASEIDENTIFIERLOOSE]})*))`),l("BUILDIDENTIFIER","[0-9A-Za-z-]+"),l("BUILD",`(?:\\+(${n[a.BUILDIDENTIFIER]}(?:\\.${n[a.BUILDIDENTIFIER]})*))`),l("FULLPLAIN",`v?${n[a.MAINVERSION]}${n[a.PRERELEASE]}?${n[a.BUILD]}?`),l("FULL",`^${n[a.FULLPLAIN]}$`),l("LOOSEPLAIN",`[v=\\s]*${n[a.MAINVERSIONLOOSE]}${n[a.PRERELEASELOOSE]}?${n[a.BUILD]}?`),l("LOOSE",`^${n[a.LOOSEPLAIN]}$`),l("GTLT","((?:<|>)?=?)"),l("XRANGEIDENTIFIERLOOSE",`${n[a.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),l("XRANGEIDENTIFIER",`${n[a.NUMERICIDENTIFIER]}|x|X|\\*`),l("XRANGEPLAIN",`[v=\\s]*(${n[a.XRANGEIDENTIFIER]})(?:\\.(${n[a.XRANGEIDENTIFIER]})(?:\\.(${n[a.XRANGEIDENTIFIER]})(?:${n[a.PRERELEASE]})?${n[a.BUILD]}?)?)?`),l("XRANGEPLAINLOOSE",`[v=\\s]*(${n[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${n[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${n[a.XRANGEIDENTIFIERLOOSE]})(?:${n[a.PRERELEASELOOSE]})?${n[a.BUILD]}?)?)?`),l("XRANGE",`^${n[a.GTLT]}\\s*${n[a.XRANGEPLAIN]}$`),l("XRANGELOOSE",`^${n[a.GTLT]}\\s*${n[a.XRANGEPLAINLOOSE]}$`),l("COERCE",`(^|[^\\d])(\\d{1,${r}})(?:\\.(\\d{1,${r}}))?(?:\\.(\\d{1,${r}}))?(?:$|[^\\d])`),l("COERCERTL",n[a.COERCE],!0),l("LONETILDE","(?:~>?)"),l("TILDETRIM",`(\\s*)${n[a.LONETILDE]}\\s+`,!0),e.tildeTrimReplace="$1~",l("TILDE",`^${n[a.LONETILDE]}${n[a.XRANGEPLAIN]}$`),l("TILDELOOSE",`^${n[a.LONETILDE]}${n[a.XRANGEPLAINLOOSE]}$`),l("LONECARET","(?:\\^)"),l("CARETTRIM",`(\\s*)${n[a.LONECARET]}\\s+`,!0),e.caretTrimReplace="$1^",l("CARET",`^${n[a.LONECARET]}${n[a.XRANGEPLAIN]}$`),l("CARETLOOSE",`^${n[a.LONECARET]}${n[a.XRANGEPLAINLOOSE]}$`),l("COMPARATORLOOSE",`^${n[a.GTLT]}\\s*(${n[a.LOOSEPLAIN]})$|^$`),l("COMPARATOR",`^${n[a.GTLT]}\\s*(${n[a.FULLPLAIN]})$|^$`),l("COMPARATORTRIM",`(\\s*)${n[a.GTLT]}\\s*(${n[a.LOOSEPLAIN]}|${n[a.XRANGEPLAIN]})`,!0),e.comparatorTrimReplace="$1$2$3",l("HYPHENRANGE",`^\\s*(${n[a.XRANGEPLAIN]})\\s+-\\s+(${n[a.XRANGEPLAIN]})\\s*$`),l("HYPHENRANGELOOSE",`^\\s*(${n[a.XRANGEPLAINLOOSE]})\\s+-\\s+(${n[a.XRANGEPLAINLOOSE]})\\s*$`),l("STAR","(<|>)?=?\\s*\\*"),l("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),l("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")})(S,S.exports);const ke=["includePrerelease","loose","rtl"],et=t=>t?typeof t!="object"?{loose:!0}:ke.filter(e=>t[e]).reduce((e,r)=>(e[r]=!0,e),{}):{};var K=et;const $e=/^[0-9]+$/,Be=(t,e)=>{const r=$e.test(t),s=$e.test(e);return r&&s&&(t=+t,e=+e),t===e?0:r&&!s?-1:s&&!r?1:t<e?-1:1},tt=(t,e)=>Be(e,t);var ae={compareIdentifiers:Be,rcompareIdentifiers:tt};const U=Z,{MAX_LENGTH:ve,MAX_SAFE_INTEGER:V}=z,{re:me,t:Re}=S.exports,rt=K,{compareIdentifiers:D}=ae;class N{constructor(e,r){if(r=rt(r),e instanceof N){if(e.loose===!!r.loose&&e.includePrerelease===!!r.includePrerelease)return e;e=e.version}else if(typeof e!="string")throw new TypeError(`Invalid Version: ${e}`);if(e.length>ve)throw new TypeError(`version is longer than ${ve} characters`);U("SemVer",e,r),this.options=r,this.loose=!!r.loose,this.includePrerelease=!!r.includePrerelease;const s=e.trim().match(r.loose?me[Re.LOOSE]:me[Re.FULL]);if(!s)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+s[1],this.minor=+s[2],this.patch=+s[3],this.major>V||this.major<0)throw new TypeError("Invalid major version");if(this.minor>V||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>V||this.patch<0)throw new TypeError("Invalid patch version");s[4]?this.prerelease=s[4].split(".").map(i=>{if(/^[0-9]+$/.test(i)){const n=+i;if(n>=0&&n<V)return n}return i}):this.prerelease=[],this.build=s[5]?s[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(U("SemVer.compare",this.version,this.options,e),!(e instanceof N)){if(typeof e=="string"&&e===this.version)return 0;e=new N(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof N||(e=new N(e,this.options)),D(this.major,e.major)||D(this.minor,e.minor)||D(this.patch,e.patch)}comparePre(e){if(e instanceof N||(e=new N(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let r=0;do{const s=this.prerelease[r],i=e.prerelease[r];if(U("prerelease compare",r,s,i),s===void 0&&i===void 0)return 0;if(i===void 0)return 1;if(s===void 0)return-1;if(s===i)continue;return D(s,i)}while(++r)}compareBuild(e){e instanceof N||(e=new N(e,this.options));let r=0;do{const s=this.build[r],i=e.build[r];if(U("prerelease compare",r,s,i),s===void 0&&i===void 0)return 0;if(i===void 0)return 1;if(s===void 0)return-1;if(s===i)continue;return D(s,i)}while(++r)}inc(e,r){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",r);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",r);break;case"prepatch":this.prerelease.length=0,this.inc("patch",r),this.inc("pre",r);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",r),this.inc("pre",r);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":if(this.prerelease.length===0)this.prerelease=[0];else{let s=this.prerelease.length;for(;--s>=0;)typeof this.prerelease[s]=="number"&&(this.prerelease[s]++,s=-2);s===-1&&this.prerelease.push(0)}r&&(D(this.prerelease[0],r)===0?isNaN(this.prerelease[1])&&(this.prerelease=[r,0]):this.prerelease=[r,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}}var I=N;const{MAX_LENGTH:st}=z,{re:Ie,t:ge}=S.exports,Ne=I,nt=K,it=(t,e)=>{if(e=nt(e),t instanceof Ne)return t;if(typeof t!="string"||t.length>st||!(e.loose?Ie[ge.LOOSE]:Ie[ge.FULL]).test(t))return null;try{return new Ne(t,e)}catch{return null}};var G=it;const at=G,lt=(t,e)=>{const r=at(t,e);return r?r.version:null};var ot=lt;const ht=G,ct=(t,e)=>{const r=ht(t.trim().replace(/^[=v]+/,""),e);return r?r.version:null};var ut=ct;const de=I,ft=(t,e,r,s)=>{typeof r=="string"&&(s=r,r=void 0);try{return new de(t instanceof de?t.version:t,r).inc(e,s).version}catch{return null}};var Et=ft;const Oe=I,pt=(t,e,r)=>new Oe(t,r).compare(new Oe(e,r));var O=pt;const $t=O,vt=(t,e,r)=>$t(t,e,r)===0;var oe=vt;const Le=G,mt=oe,Rt=(t,e)=>{if(mt(t,e))return null;{const r=Le(t),s=Le(e),i=r.prerelease.length||s.prerelease.length,n=i?"pre":"",a=i?"prerelease":"";for(const o in r)if((o==="major"||o==="minor"||o==="patch")&&r[o]!==s[o])return n+o;return a}};var It=Rt;const gt=I,Nt=(t,e)=>new gt(t,e).major;var dt=Nt;const Ot=I,Lt=(t,e)=>new Ot(t,e).minor;var At=Lt;const Tt=I,St=(t,e)=>new Tt(t,e).patch;var yt=St;const wt=G,xt=(t,e)=>{const r=wt(t,e);return r&&r.prerelease.length?r.prerelease:null};var Dt=xt;const Pt=O,Ct=(t,e,r)=>Pt(e,t,r);var Gt=Ct;const _t=O,bt=(t,e)=>_t(t,e,!0);var Xt=bt;const Ae=I,jt=(t,e,r)=>{const s=new Ae(t,r),i=new Ae(e,r);return s.compare(i)||s.compareBuild(i)};var he=jt;const Ft=he,Ut=(t,e)=>t.sort((r,s)=>Ft(r,s,e));var Vt=Ut;const Bt=he,Ht=(t,e)=>t.sort((r,s)=>Bt(s,r,e));var qt=Ht;const Yt=O,Mt=(t,e,r)=>Yt(t,e,r)>0;var W=Mt;const zt=O,Zt=(t,e,r)=>zt(t,e,r)<0;var ce=Zt;const Kt=O,Wt=(t,e,r)=>Kt(t,e,r)!==0;var He=Wt;const Jt=O,Qt=(t,e,r)=>Jt(t,e,r)>=0;var ue=Qt;const kt=O,er=(t,e,r)=>kt(t,e,r)<=0;var fe=er;const tr=oe,rr=He,sr=W,nr=ue,ir=ce,ar=fe,lr=(t,e,r,s)=>{switch(e){case"===":return typeof t=="object"&&(t=t.version),typeof r=="object"&&(r=r.version),t===r;case"!==":return typeof t=="object"&&(t=t.version),typeof r=="object"&&(r=r.version),t!==r;case"":case"=":case"==":return tr(t,r,s);case"!=":return rr(t,r,s);case">":return sr(t,r,s);case">=":return nr(t,r,s);case"<":return ir(t,r,s);case"<=":return ar(t,r,s);default:throw new TypeError(`Invalid operator: ${e}`)}};var qe=lr;const or=I,hr=G,{re:B,t:H}=S.exports,cr=(t,e)=>{if(t instanceof or)return t;if(typeof t=="number"&&(t=String(t)),typeof t!="string")return null;e=e||{};let r=null;if(!e.rtl)r=t.match(B[H.COERCE]);else{let s;for(;(s=B[H.COERCERTL].exec(t))&&(!r||r.index+r[0].length!==t.length);)(!r||s.index+s[0].length!==r.index+r[0].length)&&(r=s),B[H.COERCERTL].lastIndex=s.index+s[1].length+s[2].length;B[H.COERCERTL].lastIndex=-1}return r===null?null:hr(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,e)};var ur=cr,fr=E;E.Node=x;E.create=E;function E(t){var e=this;if(e instanceof E||(e=new E),e.tail=null,e.head=null,e.length=0,t&&typeof t.forEach=="function")t.forEach(function(i){e.push(i)});else if(arguments.length>0)for(var r=0,s=arguments.length;r<s;r++)e.push(arguments[r]);return e}E.prototype.removeNode=function(t){if(t.list!==this)throw new Error("removing node which does not belong to this list");var e=t.next,r=t.prev;return e&&(e.prev=r),r&&(r.next=e),t===this.head&&(this.head=e),t===this.tail&&(this.tail=r),t.list.length--,t.next=null,t.prev=null,t.list=null,e};E.prototype.unshiftNode=function(t){if(t!==this.head){t.list&&t.list.removeNode(t);var e=this.head;t.list=this,t.next=e,e&&(e.prev=t),this.head=t,this.tail||(this.tail=t),this.length++}};E.prototype.pushNode=function(t){if(t!==this.tail){t.list&&t.list.removeNode(t);var e=this.tail;t.list=this,t.prev=e,e&&(e.next=t),this.tail=t,this.head||(this.head=t),this.length++}};E.prototype.push=function(){for(var t=0,e=arguments.length;t<e;t++)pr(this,arguments[t]);return this.length};E.prototype.unshift=function(){for(var t=0,e=arguments.length;t<e;t++)$r(this,arguments[t]);return this.length};E.prototype.pop=function(){if(!!this.tail){var t=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,t}};E.prototype.shift=function(){if(!!this.head){var t=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,t}};E.prototype.forEach=function(t,e){e=e||this;for(var r=this.head,s=0;r!==null;s++)t.call(e,r.value,s,this),r=r.next};E.prototype.forEachReverse=function(t,e){e=e||this;for(var r=this.tail,s=this.length-1;r!==null;s--)t.call(e,r.value,s,this),r=r.prev};E.prototype.get=function(t){for(var e=0,r=this.head;r!==null&&e<t;e++)r=r.next;if(e===t&&r!==null)return r.value};E.prototype.getReverse=function(t){for(var e=0,r=this.tail;r!==null&&e<t;e++)r=r.prev;if(e===t&&r!==null)return r.value};E.prototype.map=function(t,e){e=e||this;for(var r=new E,s=this.head;s!==null;)r.push(t.call(e,s.value,this)),s=s.next;return r};E.prototype.mapReverse=function(t,e){e=e||this;for(var r=new E,s=this.tail;s!==null;)r.push(t.call(e,s.value,this)),s=s.prev;return r};E.prototype.reduce=function(t,e){var r,s=this.head;if(arguments.length>1)r=e;else if(this.head)s=this.head.next,r=this.head.value;else throw new TypeError("Reduce of empty list with no initial value");for(var i=0;s!==null;i++)r=t(r,s.value,i),s=s.next;return r};E.prototype.reduceReverse=function(t,e){var r,s=this.tail;if(arguments.length>1)r=e;else if(this.tail)s=this.tail.prev,r=this.tail.value;else throw new TypeError("Reduce of empty list with no initial value");for(var i=this.length-1;s!==null;i--)r=t(r,s.value,i),s=s.prev;return r};E.prototype.toArray=function(){for(var t=new Array(this.length),e=0,r=this.head;r!==null;e++)t[e]=r.value,r=r.next;return t};E.prototype.toArrayReverse=function(){for(var t=new Array(this.length),e=0,r=this.tail;r!==null;e++)t[e]=r.value,r=r.prev;return t};E.prototype.slice=function(t,e){e=e||this.length,e<0&&(e+=this.length),t=t||0,t<0&&(t+=this.length);var r=new E;if(e<t||e<0)return r;t<0&&(t=0),e>this.length&&(e=this.length);for(var s=0,i=this.head;i!==null&&s<t;s++)i=i.next;for(;i!==null&&s<e;s++,i=i.next)r.push(i.value);return r};E.prototype.sliceReverse=function(t,e){e=e||this.length,e<0&&(e+=this.length),t=t||0,t<0&&(t+=this.length);var r=new E;if(e<t||e<0)return r;t<0&&(t=0),e>this.length&&(e=this.length);for(var s=this.length,i=this.tail;i!==null&&s>e;s--)i=i.prev;for(;i!==null&&s>t;s--,i=i.prev)r.push(i.value);return r};E.prototype.splice=function(t,e,...r){t>this.length&&(t=this.length-1),t<0&&(t=this.length+t);for(var s=0,i=this.head;i!==null&&s<t;s++)i=i.next;for(var n=[],s=0;i&&s<e;s++)n.push(i.value),i=this.removeNode(i);i===null&&(i=this.tail),i!==this.head&&i!==this.tail&&(i=i.prev);for(var s=0;s<r.length;s++)i=Er(this,i,r[s]);return n};E.prototype.reverse=function(){for(var t=this.head,e=this.tail,r=t;r!==null;r=r.prev){var s=r.prev;r.prev=r.next,r.next=s}return this.head=e,this.tail=t,this};function Er(t,e,r){var s=e===t.head?new x(r,null,e,t):new x(r,e,e.next,t);return s.next===null&&(t.tail=s),s.prev===null&&(t.head=s),t.length++,s}function pr(t,e){t.tail=new x(e,t.tail,null,t),t.head||(t.head=t.tail),t.length++}function $r(t,e){t.head=new x(e,null,t.head,t),t.tail||(t.tail=t.head),t.length++}function x(t,e,r,s){if(!(this instanceof x))return new x(t,e,r,s);this.list=s,this.value=t,e?(e.next=this,this.prev=e):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}try{require("./iterator.js")(E)}catch{}const vr=fr,y=Symbol("max"),T=Symbol("length"),P=Symbol("lengthCalculator"),j=Symbol("allowStale"),w=Symbol("maxAge"),A=Symbol("dispose"),Te=Symbol("noDisposeOnSet"),v=Symbol("lruList"),d=Symbol("cache"),Ye=Symbol("updateAgeOnGet"),k=()=>1;class mr{constructor(e){if(typeof e=="number"&&(e={max:e}),e||(e={}),e.max&&(typeof e.max!="number"||e.max<0))throw new TypeError("max must be a non-negative number");this[y]=e.max||1/0;const r=e.length||k;if(this[P]=typeof r!="function"?k:r,this[j]=e.stale||!1,e.maxAge&&typeof e.maxAge!="number")throw new TypeError("maxAge must be a number");this[w]=e.maxAge||0,this[A]=e.dispose,this[Te]=e.noDisposeOnSet||!1,this[Ye]=e.updateAgeOnGet||!1,this.reset()}set max(e){if(typeof e!="number"||e<0)throw new TypeError("max must be a non-negative number");this[y]=e||1/0,_(this)}get max(){return this[y]}set allowStale(e){this[j]=!!e}get allowStale(){return this[j]}set maxAge(e){if(typeof e!="number")throw new TypeError("maxAge must be a non-negative number");this[w]=e,_(this)}get maxAge(){return this[w]}set lengthCalculator(e){typeof e!="function"&&(e=k),e!==this[P]&&(this[P]=e,this[T]=0,this[v].forEach(r=>{r.length=this[P](r.value,r.key),this[T]+=r.length})),_(this)}get lengthCalculator(){return this[P]}get length(){return this[T]}get itemCount(){return this[v].length}rforEach(e,r){r=r||this;for(let s=this[v].tail;s!==null;){const i=s.prev;Se(this,e,s,r),s=i}}forEach(e,r){r=r||this;for(let s=this[v].head;s!==null;){const i=s.next;Se(this,e,s,r),s=i}}keys(){return this[v].toArray().map(e=>e.key)}values(){return this[v].toArray().map(e=>e.value)}reset(){this[A]&&this[v]&&this[v].length&&this[v].forEach(e=>this[A](e.key,e.value)),this[d]=new Map,this[v]=new vr,this[T]=0}dump(){return this[v].map(e=>Y(this,e)?!1:{k:e.key,v:e.value,e:e.now+(e.maxAge||0)}).toArray().filter(e=>e)}dumpLru(){return this[v]}set(e,r,s){if(s=s||this[w],s&&typeof s!="number")throw new TypeError("maxAge must be a number");const i=s?Date.now():0,n=this[P](r,e);if(this[d].has(e)){if(n>this[y])return C(this,this[d].get(e)),!1;const l=this[d].get(e).value;return this[A]&&(this[Te]||this[A](e,l.value)),l.now=i,l.maxAge=s,l.value=r,this[T]+=n-l.length,l.length=n,this.get(e),_(this),!0}const a=new Rr(e,r,n,i,s);return a.length>this[y]?(this[A]&&this[A](e,r),!1):(this[T]+=a.length,this[v].unshift(a),this[d].set(e,this[v].head),_(this),!0)}has(e){if(!this[d].has(e))return!1;const r=this[d].get(e).value;return!Y(this,r)}get(e){return ee(this,e,!0)}peek(e){return ee(this,e,!1)}pop(){const e=this[v].tail;return e?(C(this,e),e.value):null}del(e){C(this,this[d].get(e))}load(e){this.reset();const r=Date.now();for(let s=e.length-1;s>=0;s--){const i=e[s],n=i.e||0;if(n===0)this.set(i.k,i.v);else{const a=n-r;a>0&&this.set(i.k,i.v,a)}}}prune(){this[d].forEach((e,r)=>ee(this,r,!1))}}const ee=(t,e,r)=>{const s=t[d].get(e);if(s){const i=s.value;if(Y(t,i)){if(C(t,s),!t[j])return}else r&&(t[Ye]&&(s.value.now=Date.now()),t[v].unshiftNode(s));return i.value}},Y=(t,e)=>{if(!e||!e.maxAge&&!t[w])return!1;const r=Date.now()-e.now;return e.maxAge?r>e.maxAge:t[w]&&r>t[w]},_=t=>{if(t[T]>t[y])for(let e=t[v].tail;t[T]>t[y]&&e!==null;){const r=e.prev;C(t,e),e=r}},C=(t,e)=>{if(e){const r=e.value;t[A]&&t[A](r.key,r.value),t[T]-=r.length,t[d].delete(r.key),t[v].removeNode(e)}};class Rr{constructor(e,r,s,i,n){this.key=e,this.value=r,this.length=s,this.now=i,this.maxAge=n||0}}const Se=(t,e,r,s)=>{let i=r.value;Y(t,i)&&(C(t,r),t[j]||(i=void 0)),i&&e.call(s,i.value,i.key,t)};var Ir=mr;class F{constructor(e,r){if(r=Nr(r),e instanceof F)return e.loose===!!r.loose&&e.includePrerelease===!!r.includePrerelease?e:new F(e.raw,r);if(e instanceof le)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=r,this.loose=!!r.loose,this.includePrerelease=!!r.includePrerelease,this.raw=e,this.set=e.split("||").map(s=>this.parseRange(s.trim())).filter(s=>s.length),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);if(this.set.length>1){const s=this.set[0];if(this.set=this.set.filter(i=>!we(i[0])),this.set.length===0)this.set=[s];else if(this.set.length>1){for(const i of this.set)if(i.length===1&&Tr(i[0])){this.set=[i];break}}}this.format()}format(){return this.range=this.set.map(e=>e.join(" ").trim()).join("||").trim(),this.range}toString(){return this.range}parseRange(e){e=e.trim();const s=`parseRange:${Object.keys(this.options).join(",")}:${e}`,i=ye.get(s);if(i)return i;const n=this.options.loose,a=n?g[m.HYPHENRANGELOOSE]:g[m.HYPHENRANGE];e=e.replace(a,br(this.options.includePrerelease)),$("hyphen replace",e),e=e.replace(g[m.COMPARATORTRIM],Or),$("comparator trim",e),e=e.replace(g[m.TILDETRIM],Lr),e=e.replace(g[m.CARETTRIM],Ar),e=e.split(/\s+/).join(" ");let o=e.split(" ").map(h=>Sr(h,this.options)).join(" ").split(/\s+/).map(h=>_r(h,this.options));n&&(o=o.filter(h=>($("loose invalid filter",h,this.options),!!h.match(g[m.COMPARATORLOOSE])))),$("range list",o);const l=new Map,u=o.map(h=>new le(h,this.options));for(const h of u){if(we(h))return[h];l.set(h.value,h)}l.size>1&&l.has("")&&l.delete("");const f=[...l.values()];return ye.set(s,f),f}intersects(e,r){if(!(e instanceof F))throw new TypeError("a Range is required");return this.set.some(s=>xe(s,r)&&e.set.some(i=>xe(i,r)&&s.every(n=>i.every(a=>n.intersects(a,r)))))}test(e){if(!e)return!1;if(typeof e=="string")try{e=new dr(e,this.options)}catch{return!1}for(let r=0;r<this.set.length;r++)if(Xr(this.set[r],e,this.options))return!0;return!1}}var L=F;const gr=Ir,ye=new gr({max:1e3}),Nr=K,le=J,$=Z,dr=I,{re:g,t:m,comparatorTrimReplace:Or,tildeTrimReplace:Lr,caretTrimReplace:Ar}=S.exports,we=t=>t.value==="<0.0.0-0",Tr=t=>t.value==="",xe=(t,e)=>{let r=!0;const s=t.slice();let i=s.pop();for(;r&&s.length;)r=s.every(n=>i.intersects(n,e)),i=s.pop();return r},Sr=(t,e)=>($("comp",t,e),t=xr(t,e),$("caret",t),t=yr(t,e),$("tildes",t),t=Pr(t,e),$("xrange",t),t=Gr(t,e),$("stars",t),t),R=t=>!t||t.toLowerCase()==="x"||t==="*",yr=(t,e)=>t.trim().split(/\s+/).map(r=>wr(r,e)).join(" "),wr=(t,e)=>{const r=e.loose?g[m.TILDELOOSE]:g[m.TILDE];return t.replace(r,(s,i,n,a,o)=>{$("tilde",t,s,i,n,a,o);let l;return R(i)?l="":R(n)?l=`>=${i}.0.0 <${+i+1}.0.0-0`:R(a)?l=`>=${i}.${n}.0 <${i}.${+n+1}.0-0`:o?($("replaceTilde pr",o),l=`>=${i}.${n}.${a}-${o} <${i}.${+n+1}.0-0`):l=`>=${i}.${n}.${a} <${i}.${+n+1}.0-0`,$("tilde return",l),l})},xr=(t,e)=>t.trim().split(/\s+/).map(r=>Dr(r,e)).join(" "),Dr=(t,e)=>{$("caret",t,e);const r=e.loose?g[m.CARETLOOSE]:g[m.CARET],s=e.includePrerelease?"-0":"";return t.replace(r,(i,n,a,o,l)=>{$("caret",t,i,n,a,o,l);let u;return R(n)?u="":R(a)?u=`>=${n}.0.0${s} <${+n+1}.0.0-0`:R(o)?n==="0"?u=`>=${n}.${a}.0${s} <${n}.${+a+1}.0-0`:u=`>=${n}.${a}.0${s} <${+n+1}.0.0-0`:l?($("replaceCaret pr",l),n==="0"?a==="0"?u=`>=${n}.${a}.${o}-${l} <${n}.${a}.${+o+1}-0`:u=`>=${n}.${a}.${o}-${l} <${n}.${+a+1}.0-0`:u=`>=${n}.${a}.${o}-${l} <${+n+1}.0.0-0`):($("no pr"),n==="0"?a==="0"?u=`>=${n}.${a}.${o}${s} <${n}.${a}.${+o+1}-0`:u=`>=${n}.${a}.${o}${s} <${n}.${+a+1}.0-0`:u=`>=${n}.${a}.${o} <${+n+1}.0.0-0`),$("caret return",u),u})},Pr=(t,e)=>($("replaceXRanges",t,e),t.split(/\s+/).map(r=>Cr(r,e)).join(" ")),Cr=(t,e)=>{t=t.trim();const r=e.loose?g[m.XRANGELOOSE]:g[m.XRANGE];return t.replace(r,(s,i,n,a,o,l)=>{$("xRange",t,s,i,n,a,o,l);const u=R(n),f=u||R(a),h=f||R(o),p=h;return i==="="&&p&&(i=""),l=e.includePrerelease?"-0":"",u?i===">"||i==="<"?s="<0.0.0-0":s="*":i&&p?(f&&(a=0),o=0,i===">"?(i=">=",f?(n=+n+1,a=0,o=0):(a=+a+1,o=0)):i==="<="&&(i="<",f?n=+n+1:a=+a+1),i==="<"&&(l="-0"),s=`${i+n}.${a}.${o}${l}`):f?s=`>=${n}.0.0${l} <${+n+1}.0.0-0`:h&&(s=`>=${n}.${a}.0${l} <${n}.${+a+1}.0-0`),$("xRange return",s),s})},Gr=(t,e)=>($("replaceStars",t,e),t.trim().replace(g[m.STAR],"")),_r=(t,e)=>($("replaceGTE0",t,e),t.trim().replace(g[e.includePrerelease?m.GTE0PRE:m.GTE0],"")),br=t=>(e,r,s,i,n,a,o,l,u,f,h,p,c)=>(R(s)?r="":R(i)?r=`>=${s}.0.0${t?"-0":""}`:R(n)?r=`>=${s}.${i}.0${t?"-0":""}`:a?r=`>=${r}`:r=`>=${r}${t?"-0":""}`,R(u)?l="":R(f)?l=`<${+u+1}.0.0-0`:R(h)?l=`<${u}.${+f+1}.0-0`:p?l=`<=${u}.${f}.${h}-${p}`:t?l=`<${u}.${f}.${+h+1}-0`:l=`<=${l}`,`${r} ${l}`.trim()),Xr=(t,e,r)=>{for(let s=0;s<t.length;s++)if(!t[s].test(e))return!1;if(e.prerelease.length&&!r.includePrerelease){for(let s=0;s<t.length;s++)if($(t[s].semver),t[s].semver!==le.ANY&&t[s].semver.prerelease.length>0){const i=t[s].semver;if(i.major===e.major&&i.minor===e.minor&&i.patch===e.patch)return!0}return!1}return!0},b=Symbol("SemVer ANY");class M{static get ANY(){return b}constructor(e,r){if(r=jr(r),e instanceof M){if(e.loose===!!r.loose)return e;e=e.value}re("comparator",e,r),this.options=r,this.loose=!!r.loose,this.parse(e),this.semver===b?this.value="":this.value=this.operator+this.semver.version,re("comp",this)}parse(e){const r=this.options.loose?De[Pe.COMPARATORLOOSE]:De[Pe.COMPARATOR],s=e.match(r);if(!s)throw new TypeError(`Invalid comparator: ${e}`);this.operator=s[1]!==void 0?s[1]:"",this.operator==="="&&(this.operator=""),s[2]?this.semver=new Ce(s[2],this.options.loose):this.semver=b}toString(){return this.value}test(e){if(re("Comparator.test",e,this.options.loose),this.semver===b||e===b)return!0;if(typeof e=="string")try{e=new Ce(e,this.options)}catch{return!1}return te(e,this.operator,this.semver,this.options)}intersects(e,r){if(!(e instanceof M))throw new TypeError("a Comparator is required");if((!r||typeof r!="object")&&(r={loose:!!r,includePrerelease:!1}),this.operator==="")return this.value===""?!0:new Ge(e.value,r).test(this.value);if(e.operator==="")return e.value===""?!0:new Ge(this.value,r).test(e.semver);const s=(this.operator===">="||this.operator===">")&&(e.operator===">="||e.operator===">"),i=(this.operator==="<="||this.operator==="<")&&(e.operator==="<="||e.operator==="<"),n=this.semver.version===e.semver.version,a=(this.operator===">="||this.operator==="<=")&&(e.operator===">="||e.operator==="<="),o=te(this.semver,"<",e.semver,r)&&(this.operator===">="||this.operator===">")&&(e.operator==="<="||e.operator==="<"),l=te(this.semver,">",e.semver,r)&&(this.operator==="<="||this.operator==="<")&&(e.operator===">="||e.operator===">");return s||i||n&&a||o||l}}var J=M;const jr=K,{re:De,t:Pe}=S.exports,te=qe,re=Z,Ce=I,Ge=L,Fr=L,Ur=(t,e,r)=>{try{e=new Fr(e,r)}catch{return!1}return e.test(t)};var Q=Ur;const Vr=L,Br=(t,e)=>new Vr(t,e).set.map(r=>r.map(s=>s.value).join(" ").trim().split(" "));var Hr=Br;const qr=I,Yr=L,Mr=(t,e,r)=>{let s=null,i=null,n=null;try{n=new Yr(e,r)}catch{return null}return t.forEach(a=>{n.test(a)&&(!s||i.compare(a)===-1)&&(s=a,i=new qr(s,r))}),s};var zr=Mr;const Zr=I,Kr=L,Wr=(t,e,r)=>{let s=null,i=null,n=null;try{n=new Kr(e,r)}catch{return null}return t.forEach(a=>{n.test(a)&&(!s||i.compare(a)===1)&&(s=a,i=new Zr(s,r))}),s};var Jr=Wr;const se=I,Qr=L,_e=W,kr=(t,e)=>{t=new Qr(t,e);let r=new se("0.0.0");if(t.test(r)||(r=new se("0.0.0-0"),t.test(r)))return r;r=null;for(let s=0;s<t.set.length;++s){const i=t.set[s];let n=null;i.forEach(a=>{const o=new se(a.semver.version);switch(a.operator){case">":o.prerelease.length===0?o.patch++:o.prerelease.push(0),o.raw=o.format();case"":case">=":(!n||_e(o,n))&&(n=o);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${a.operator}`)}}),n&&(!r||_e(r,n))&&(r=n)}return r&&t.test(r)?r:null};var es=kr;const ts=L,rs=(t,e)=>{try{return new ts(t,e).range||"*"}catch{return null}};var ss=rs;const ns=I,Me=J,{ANY:is}=Me,as=L,ls=Q,be=W,Xe=ce,os=fe,hs=ue,cs=(t,e,r,s)=>{t=new ns(t,s),e=new as(e,s);let i,n,a,o,l;switch(r){case">":i=be,n=os,a=Xe,o=">",l=">=";break;case"<":i=Xe,n=hs,a=be,o="<",l="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(ls(t,e,s))return!1;for(let u=0;u<e.set.length;++u){const f=e.set[u];let h=null,p=null;if(f.forEach(c=>{c.semver===is&&(c=new Me(">=0.0.0")),h=h||c,p=p||c,i(c.semver,h.semver,s)?h=c:a(c.semver,p.semver,s)&&(p=c)}),h.operator===o||h.operator===l||(!p.operator||p.operator===o)&&n(t,p.semver))return!1;if(p.operator===l&&a(t,p.semver))return!1}return!0};var Ee=cs;const us=Ee,fs=(t,e,r)=>us(t,e,">",r);var Es=fs;const ps=Ee,$s=(t,e,r)=>ps(t,e,"<",r);var vs=$s;const je=L,ms=(t,e,r)=>(t=new je(t,r),e=new je(e,r),t.intersects(e));var Rs=ms;const Is=Q,gs=O;var Ns=(t,e,r)=>{const s=[];let i=null,n=null;const a=t.sort((f,h)=>gs(f,h,r));for(const f of a)Is(f,e,r)?(n=f,i||(i=f)):(n&&s.push([i,n]),n=null,i=null);i&&s.push([i,null]);const o=[];for(const[f,h]of s)f===h?o.push(f):!h&&f===a[0]?o.push("*"):h?f===a[0]?o.push(`<=${h}`):o.push(`${f} - ${h}`):o.push(`>=${f}`);const l=o.join(" || "),u=typeof e.raw=="string"?e.raw:String(e);return l.length<u.length?l:e};const Fe=L,q=J,{ANY:ne}=q,X=Q,pe=O,ds=(t,e,r={})=>{if(t===e)return!0;t=new Fe(t,r),e=new Fe(e,r);let s=!1;e:for(const i of t.set){for(const n of e.set){const a=Os(i,n,r);if(s=s||a!==null,a)continue e}if(s)return!1}return!0},Os=(t,e,r)=>{if(t===e)return!0;if(t.length===1&&t[0].semver===ne){if(e.length===1&&e[0].semver===ne)return!0;r.includePrerelease?t=[new q(">=0.0.0-0")]:t=[new q(">=0.0.0")]}if(e.length===1&&e[0].semver===ne){if(r.includePrerelease)return!0;e=[new q(">=0.0.0")]}const s=new Set;let i,n;for(const c of t)c.operator===">"||c.operator===">="?i=Ue(i,c,r):c.operator==="<"||c.operator==="<="?n=Ve(n,c,r):s.add(c.semver);if(s.size>1)return null;let a;if(i&&n){if(a=pe(i.semver,n.semver,r),a>0)return null;if(a===0&&(i.operator!==">="||n.operator!=="<="))return null}for(const c of s){if(i&&!X(c,String(i),r)||n&&!X(c,String(n),r))return null;for(const ze of e)if(!X(c,String(ze),r))return!1;return!0}let o,l,u,f,h=n&&!r.includePrerelease&&n.semver.prerelease.length?n.semver:!1,p=i&&!r.includePrerelease&&i.semver.prerelease.length?i.semver:!1;h&&h.prerelease.length===1&&n.operator==="<"&&h.prerelease[0]===0&&(h=!1);for(const c of e){if(f=f||c.operator===">"||c.operator===">=",u=u||c.operator==="<"||c.operator==="<=",i){if(p&&c.semver.prerelease&&c.semver.prerelease.length&&c.semver.major===p.major&&c.semver.minor===p.minor&&c.semver.patch===p.patch&&(p=!1),c.operator===">"||c.operator===">="){if(o=Ue(i,c,r),o===c&&o!==i)return!1}else if(i.operator===">="&&!X(i.semver,String(c),r))return!1}if(n){if(h&&c.semver.prerelease&&c.semver.prerelease.length&&c.semver.major===h.major&&c.semver.minor===h.minor&&c.semver.patch===h.patch&&(h=!1),c.operator==="<"||c.operator==="<="){if(l=Ve(n,c,r),l===c&&l!==n)return!1}else if(n.operator==="<="&&!X(n.semver,String(c),r))return!1}if(!c.operator&&(n||i)&&a!==0)return!1}return!(i&&u&&!n&&a!==0||n&&f&&!i&&a!==0||p||h)},Ue=(t,e,r)=>{if(!t)return e;const s=pe(t.semver,e.semver,r);return s>0?t:s<0||e.operator===">"&&t.operator===">="?e:t},Ve=(t,e,r)=>{if(!t)return e;const s=pe(t.semver,e.semver,r);return s<0?t:s>0||e.operator==="<"&&t.operator==="<="?e:t};var Ls=ds;const ie=S.exports;var As={re:ie.re,src:ie.src,tokens:ie.t,SEMVER_SPEC_VERSION:z.SEMVER_SPEC_VERSION,SemVer:I,compareIdentifiers:ae.compareIdentifiers,rcompareIdentifiers:ae.rcompareIdentifiers,parse:G,valid:ot,clean:ut,inc:Et,diff:It,major:dt,minor:At,patch:yt,prerelease:Dt,compare:O,rcompare:Gt,compareLoose:Xt,compareBuild:he,sort:Vt,rsort:qt,gt:W,lt:ce,eq:oe,neq:He,gte:ue,lte:fe,cmp:qe,coerce:ur,Comparator:J,Range:L,satisfies:Q,toComparators:Hr,maxSatisfying:zr,minSatisfying:Jr,minVersion:es,validRange:ss,outside:Ee,gtr:Es,ltr:vs,intersects:Rs,simplifyRange:Ns,subset:Ls};export{As as s};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
